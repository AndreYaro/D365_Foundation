<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBPeriodInventoryBalanceCalculator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates presumed taxes balances for every item which has transactions in current period.
/// </summary>
public class FBPeriodInventoryBalanceCalculator_BR extends FiscalDocumentPresumedTaxCalcLast_BR
{
    protected Query                queryInventory;
    protected Query                queryClosingInventory;
    protected Query                queryLinesInventory;
    protected Query                queryLinesPurchaseInventory;
    protected Query                queryLinesSalesInventory;
    protected TransDate            fromDate;
    protected TransDate            toDate;
    protected InventSiteId         inventSiteId;
    protected int                  items;
    protected boolean              showProgressBar;

    #AviFiles

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRanges</Name>
				<Source><![CDATA[
    private void addRanges(
        Query _query,
        ItemId _item,
        str _configid,
        str _sizeId,
        str _colorId,
        str _styleId,
        str _versionId,
        str _batchId,
        str _serialId,
        str _locationId)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventTrans));
        findOrCreateRange_W(qbds, fieldNum(InventTrans, ItemId), queryValue(_item));
        qbds = _query.dataSourceTable(tableNum(InventDim));
        findOrCreateRange_W(qbds, fieldNum(InventDim, configid), queryValue(_configid));
        findOrCreateRange_W(qbds, fieldNum(InventDim, InventSizeId), queryValue(_sizeId));
        findOrCreateRange_W(qbds, fieldNum(InventDim, InventColorId), queryValue(_colorId));
        findOrCreateRange_W(qbds, fieldNum(InventDim, InventStyleId), queryValue(_styleId));
        findOrCreateRange_W(qbds, fieldNum(InventDim, InventVersionId), queryValue(_versionId));
        findOrCreateRange_W(qbds, fieldNum(InventDim, inventBatchId), queryValue(_batchId));
        findOrCreateRange_W(qbds, fieldNum(InventDim, inventSerialId), queryValue(_serialId));
        findOrCreateRange_W(qbds, fieldNum(InventDim, InventLocationId), queryValue(_locationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates presumed taxes balances.
    /// </summary>
    public void calculateBalances()
    {
        ttsBegin;

        this.clearOldBalances();

        if (!FBICMSSTInventoryBalance_BR::existsForPeriod(previousFBBookingPeriod.RecId))
        {
            this.calculateOpeningInventoryBalance();
        }

        this.calculateClosingInventoryBalance(fbBookingPeriod.RecId);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateClosingInventoryBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates closing inventory balance.
    /// </summary>
    /// <param name="_bookingPeriodId">
    /// The booking period record Id.
    /// </param>
    public void calculateClosingInventoryBalance(RecId _bookingPeriodId)
    {
        if (showProgressBar)
        {
            progress = new SysOperationProgress();
            progress.setCaption("@FiscalBooks_SpedFiscal:CloseBalanceCalc");
            progress.setAnimation(#AviUpdate);
            progress.setTotal(this.getCountItems());
            progress.setCount(items);
        }

        RecordInsertList recordList = new RecordInsertList(tableNum(FBICMSSTInventoryBalance_BR));

        Query queryLinesSales = new Query(this.initQueryLinesForSaleInventory());
        Query queryLinesPurch = new Query(this.initQueryLinesForPurchaseInventory());
        Query queryInv = new Query(this.initQueryInventory());

        QueryBuildDataSource qbds = queryInv.dataSourceTable(tableNum(InventDim));
        findOrCreateRange_W(qbds, fieldNum(InventDim, InventSiteId), queryValue(inventSiteId));
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            findOrCreateRange_W(queryInv.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, InventSiteId), queryValue(inventSiteId));
        }

        qbds = queryInv.dataSourceTable(tableNum(InventTrans));
        findOrCreateRange_W(qbds, fieldNum(InventTrans, DatePhysical), queryRange(fromDate, toDate));

        qbds = queryLinesPurch.dataSourceTable(tableNum(FBBookingPeriodFiscalDocument_BR));
        findOrCreateRange_W(qbds, fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR), queryValue(fbBookingPeriod.RecId));

        qbds = queryLinesSales.dataSourceTable(tableNum(FBBookingPeriodFiscalDocument_BR));
        findOrCreateRange_W(qbds, fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR), queryValue(fbBookingPeriod.RecId));

        QueryRun queryRunInventory = new QueryRun(queryInv);

        while (queryRunInventory.next())
        {
            InventSum inventSum = queryRunInventory.get(tableNum(InventSum));
            InventDim inventDim = queryRunInventory.get(tableNum(InventDim));
            inventDim = InventDim::findOrCreate(inventDim);
            UnitOfMeasureSymbol unit = InventTableModule::find(inventSum.ItemId, ModuleInventPurchSales::Invent).UnitId;
            this.addRanges(
                queryLinesPurch,
                inventSum.ItemId,
                inventDim.configid,
                inventDim.InventSizeId,
                inventDim.InventColorId,
                inventDim.InventStyleId,
                inventDim.InventVersionId,
                inventDim.inventBatchId,
                inventDim.inventSerialId,
                inventDim.InventLocationId);

            QueryRun queryRunLines = new QueryRun(queryLinesPurch);

            FBICMSSTInventoryBalance_BR fbICMSSTInventoryBalancePrevious = FBICMSSTInventoryBalance_BR::findPrevious(
                inventSum.ItemId,
                inventDim.inventDimId,
                fiscalEstablishmentId,
                fbBookingPeriod.PeriodMonth,
                fbBookingPeriod.PeriodYear,
                true);

            if (!fbICMSSTInventoryBalancePrevious)
            {
                fbICMSSTInventoryBalancePrevious.clear();
                fbICMSSTInventoryBalancePrevious.FBBookingPeriod_BR = previousFBBookingPeriod.RecId;
                fbICMSSTInventoryBalancePrevious.ItemId = inventSum.ItemId;
                fbICMSSTInventoryBalancePrevious.ProductName = this.getProductName(inventSum.ItemId, inventDim);
                fbICMSSTInventoryBalancePrevious.Unit = unit;
                fbICMSSTInventoryBalancePrevious.InventDimId = inventDim.inventDimId;
                fbICMSSTInventoryBalancePrevious.InventDimDetails = strFmt(
                    '%1 - %2',
                    inventDim.InventSiteId,
                    inventDim.InventLocationId);
                fbICMSSTInventoryBalancePrevious.Quantity = 0;
                fbICMSSTInventoryBalancePrevious.ICMSSTTaxAmountPerUnit = 0;
                fbICMSSTInventoryBalancePrevious.ICMSSTTaxBaseAmountPerUnit = 0;
                fbICMSSTInventoryBalancePrevious.ICMSTaxAmountPerUnit = 0;
                fbICMSSTInventoryBalancePrevious.NextPeriod = NoYes::Yes;
                fbICMSSTInventoryBalancePrevious.insert();
            }
            else if (fbICMSSTInventoryBalancePrevious.FBBookingPeriod_BR == previousFBBookingPeriod.RecId)
            {
                fbICMSSTInventoryBalancePrevious.NextPeriod = NoYes::Yes;
                fbICMSSTInventoryBalancePrevious.update();
            }
            else
            {
                fbICMSSTInventoryBalancePrevious.RecId = 0;
                fbICMSSTInventoryBalancePrevious.FBBookingPeriod_BR = previousFBBookingPeriod.RecId;
                fbICMSSTInventoryBalancePrevious.NextPeriod = NoYes::Yes;
                fbICMSSTInventoryBalancePrevious.insert();
            }

            FBICMSSTInventoryBalance_BR fbICMSSTInventoryBalance = FBICMSSTInventoryBalance_BR::find(fbBookingPeriod.RecId, inventSum.ItemId, inventDim.InventDimId, true);

            if (fbICMSSTInventoryBalance.RecId)
            {
                fbICMSSTInventoryBalance.ICMSSTTaxAmount = 0;
                fbICMSSTInventoryBalance.ICMSTaxAmount = 0;
                fbICMSSTInventoryBalance.ICMSSTTaxBaseAmount = 0;
                fbICMSSTInventoryBalance.Quantity = 0;
                fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit = 0;
                fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit = 0;
                fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit = 0;
                fbICMSSTInventoryBalance.ICMSFCPTaxAmount = 0;
                fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit = 0;
                fbICMSSTInventoryBalance.ICMSSTFCPTaxAmount = 0;
                fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit = 0;
            }

            while (queryRunLines.next())
            {
                FiscalDocumentLine_BR fiscalDocumentLine = queryRunLines.get(tableNum(FiscalDocumentLine_BR));
                FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS = queryRunLines.get(tableNum(FiscalDocumentTaxTrans_BR));
                FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = queryRunLines.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
                FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST = queryRunLines.get(tableNum(FiscalDocumentTaxTrans_BR), 2);
                FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST = queryRunLines.get(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
                FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundICMS = queryRunLines.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
                FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundICMSST = queryRunLines.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR), 2);
                InventTrans inventTrans = queryRunLines.get(tableNum(InventTrans));

                real docQty = this.convertQty(fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit, unit, fiscalDocumentLine.Quantity);

                FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundComplementICMSST;
                FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundComplementICMS;
                FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransComplementICMSST;
                FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransComplementICMS;

                [fiscalDocumentTaxTransComplementICMSST, fiscalDocumentTaxTransPovertyFundComplementICMSST] = this.getPresumedTaxFromPurchComplementForLine(fiscalDocumentLine.RecId, TaxType_BR::ICMSST);
                [fiscalDocumentTaxTransComplementICMS, fiscalDocumentTaxTransPovertyFundComplementICMS] = this.getPresumedTaxFromPurchComplementForLine(fiscalDocumentLine.RecId, TaxType_BR::ICMS);
                
                real icmsAmount, icmsstAmount, icmsstBaseAmount, fcpAmountICMS, fcpAmountICMSST;

                if (fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount || fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount)
                {
                    icmsAmount = fiscalDocumentTaxTransPresumedICMS.PresumedvICMSSubstituto;
                    fcpAmountICMS = 0;
                }
                else
                {
                    icmsAmount = fiscalDocumentTaxTransICMS.TaxAmountOther;
                    fcpAmountICMS = fiscalDocumentTaxTransPovertyFundICMS.TaxPovertyFundAmount;
                }
                
                icmsAmount += fiscalDocumentTaxTransComplementICMS.TaxAmountOther;
                fcpAmountICMS += fiscalDocumentTaxTransPovertyFundComplementICMS.TaxPovertyFundAmount;
                
                if (fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount)
                {
                    icmsstAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount + fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
                    icmsstBaseAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxBaseAmount;
                    fcpAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
                }
                else if (fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount)
                {
                    icmsstAmount = fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount + fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
                    icmsstBaseAmount = fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmount;
                    fcpAmountICMSST = fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
                }
                else
                {
                    icmsstAmount = fiscalDocumentTaxTransICMSST.TaxAmountOther;
                    icmsstBaseAmount = fiscalDocumentTaxTransICMSST.TaxBaseAmountOther;
                    fcpAmountICMSST = fiscalDocumentTaxTransPovertyFundICMSST.TaxPovertyFundAmount;
                }
                
                icmsstAmount += fiscalDocumentTaxTransComplementICMSST.TaxAmountOther;
                fcpAmountICMSST += fiscalDocumentTaxTransPovertyFundComplementICMSST.TaxPovertyFundAmount;

                fbICMSSTInventoryBalance.ICMSSTTaxAmount += this.getAmountPerUnit(icmsstAmount, docQty) * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSTaxAmount += this.getAmountPerUnit(icmsAmount, docQty) * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSSTTaxBaseAmount += this.getAmountPerUnit(icmsstBaseAmount, docQty) * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSFCPTaxAmount += this.getAmountPerUnit(fcpAmountICMS, docQty) * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSSTFCPTaxAmount += this.getAmountPerUnit(fcpAmountICMSST, docQty) * inventTrans.Qty;
                fbICMSSTInventoryBalance.Quantity += inventTrans.Qty;
            }

            fbICMSSTInventoryBalance.Quantity += fbICMSSTInventoryBalancePrevious.Quantity;
            fbICMSSTInventoryBalance.ICMSSTTaxAmount += fbICMSSTInventoryBalancePrevious.ICMSSTTaxAmount;
            fbICMSSTInventoryBalance.ICMSSTTaxBaseAmount += fbICMSSTInventoryBalancePrevious.ICMSSTTaxBaseAmount;
            fbICMSSTInventoryBalance.ICMSTaxAmount += fbICMSSTInventoryBalancePrevious.ICMSTaxAmount;
            fbICMSSTInventoryBalance.ICMSFCPTaxAmount += fbICMSSTInventoryBalancePrevious.ICMSFCPTaxAmount;
            fbICMSSTInventoryBalance.ICMSSTFCPTaxAmount += fbICMSSTInventoryBalancePrevious.ICMSSTFCPTaxAmount;
            fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit = this.getAmountPerUnit(fbICMSSTInventoryBalance.ICMSSTTaxAmount, fbICMSSTInventoryBalance.Quantity);
            fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit = this.getAmountPerUnit(fbICMSSTInventoryBalance.ICMSSTTaxBaseAmount, fbICMSSTInventoryBalance.Quantity);
            fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit = this.getAmountPerUnit(fbICMSSTInventoryBalance.ICMSTaxAmount, fbICMSSTInventoryBalance.Quantity);
            fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit = this.getAmountPerUnit(fbICMSSTInventoryBalance.ICMSFCPTaxAmount, fbICMSSTInventoryBalance.Quantity);
            fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit = this.getAmountPerUnit(fbICMSSTInventoryBalance.ICMSSTFCPTaxAmount, fbICMSSTInventoryBalance.Quantity);
            fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit = !fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit ? fbICMSSTInventoryBalancePrevious.ICMSSTTaxAmountPerUnit : fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit;
            fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit = !fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit ? fbICMSSTInventoryBalancePrevious.ICMSSTTaxBaseAmountPerUnit : fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit;
            fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit = !fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit ? fbICMSSTInventoryBalancePrevious.ICMSTaxAmountPerUnit : fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit;
            fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit = !fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit ? fbICMSSTInventoryBalancePrevious.ICMSFCPTaxAmountPerUnit : fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit;
            fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit = !fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit ? fbICMSSTInventoryBalancePrevious.ICMSSTFCPTaxAmountPerUnit : fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit;
            fbICMSSTInventoryBalance.CurrentPeriod = NoYes::Yes;
            
            this.addRanges(
                queryLinesSales,
                inventSum.ItemId,
                inventDim.configid,
                inventDim.InventSizeId,
                inventDim.InventColorId,
                inventDim.InventStyleId,
                inventDim.InventVersionId,
                inventDim.inventBatchId,
                inventDim.inventSerialId,
                inventDim.InventLocationId);

            queryRunLines = new QueryRun(queryLinesSales);
            
            while (queryRunLines.next())
            {
                InventTrans inventTrans = queryRunLines.get(tableNum(InventTrans));
                FiscalDocument_BR fiscalDocumentOut = queryRunLines.get(tableNum(FiscalDocument_BR));
                FiscalDocumentLine_BR fiscalDocumentLineOut = queryRunLines.get(tableNum(FiscalDocumentLine_BR));

                fbICMSSTInventoryBalance.ICMSSTTaxAmount += fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSSTTaxBaseAmount += fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSTaxAmount += fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSFCPTaxAmount += fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit * inventTrans.Qty;
                fbICMSSTInventoryBalance.ICMSSTFCPTaxAmount += fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit * inventTrans.Qty;
                fbICMSSTInventoryBalance.Quantity += inventTrans.Qty;
                fbICMSSTInventoryBalance.QuantitySales -= inventTrans.Qty;

                FBInventoryBalanceOutDocuments_BR invBalanceOutDocuments = FBInventoryBalanceOutDocuments_BR::findByPeriodAndLine(fbBookingPeriod.RecId, fiscalDocumentLineOut.RecId, true);
                invBalanceOutDocuments.FiscalDocument_BR = fiscalDocumentOut.RecId;
                invBalanceOutDocuments.FiscalDocumentLine_BR = fiscalDocumentLineOut.RecId;
                invBalanceOutDocuments.FBBookingPeriod_BR = fbBookingPeriod.RecId;
                invBalanceOutDocuments.Quantity = -inventTrans.Qty;
                invBalanceOutDocuments.Unit = unit;
                invBalanceOutDocuments.ItemId = inventSum.ItemId;
                invBalanceOutDocuments.IsReturn = (
                        (fiscalDocumentOut.RefTableId == tableNum(PurchComplementaryInvoiceHeader)
                        || fiscalDocumentOut.RefTableId == tableNum(VendInvoiceJour)
                        || fiscalDocumentOut.RefTableId == tableNum(VendPackingSlipJour)));
                invBalanceOutDocuments.write();
            }

            if (fbICMSSTInventoryBalance.RecId)
            {
                fbICMSSTInventoryBalance.update();
            }
            else
            {
                fbICMSSTInventoryBalance.FBBookingPeriod_BR = fbBookingPeriod.RecId;
                fbICMSSTInventoryBalance.ItemId = inventSum.ItemId;
                fbICMSSTInventoryBalance.ProductName = this.getProductName(inventSum.ItemId, inventDim);
                fbICMSSTInventoryBalance.Unit = unit;
                fbICMSSTInventoryBalance.InventDimId = inventDim.InventDimId;
                fbICMSSTInventoryBalance.InventDimDetails = strFmt(
                    '%1 - %2',
                    inventDim.InventSiteId,
                    inventDim.InventLocationId);
                recordList.add(fbICMSSTInventoryBalance);
            }

            items++;

            if (showProgressBar)
            {
                progress.setText(strfmt("@FiscalBooks_SpedFiscal:ItemNumber", fbICMSSTInventoryBalance.ProductName));
                progress.setCount(items);
            }
        }

        recordList.insertDatabase();
        progress = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOpeningInventoryBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates opening inventory balance.
    /// </summary>
    public void calculateOpeningInventoryBalance()
    {
        FBICMSSTInventoryBalance_BR fbICMSSTInventoryBalance;
        FBBookingPeriod_BR          prevPreviousFBBookingPeriod = previousFBBookingPeriod.getPreviousBookingPeriod();

        select firstOnly RecId from fbICMSSTInventoryBalance
            where fbICMSSTInventoryBalance.FBBookingPeriod_BR == prevPreviousFBBookingPeriod.RecId;

        if (showProgressBar)
        {
            progress = new SysOperationProgress();
            progress.setCaption("@FiscalBooks_SpedFiscal:OpenBalanceCalc");
            progress.setAnimation(#AviUpdate);
        }

        if (fbICMSSTInventoryBalance)
        {
            this.calculateClosingInventoryBalance(previousFBBookingPeriod.RecId);
        }
        else
        {
            if (showProgressBar)
            {
                progress.setTotal(this.getCountItems());
                progress.setCount(items);
            }

            TransDate transDate = fromDate - 1;

            RecordInsertList recordList = new RecordInsertList(tableNum(FBICMSSTInventoryBalance_BR));
            Query queryLinesPurch = new Query(this.initQueryLinesForPurchaseInventory());
            Query queryInv = new Query(this.initQueryInventory());

            QueryBuildDataSource qbds = queryInv.dataSourceTable(tableNum(InventDim));
            findOrCreateRange_W(qbds, fieldNum(InventDim, InventSiteId), queryValue(inventSiteId));
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                findOrCreateRange_W(queryInv.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, InventSiteId), queryValue(inventSiteId));
            }
            qbds = queryInv.dataSourceTable(tableNum(InventTrans));
            findOrCreateRange_W(qbds, fieldNum(InventTrans, DatePhysical), queryRange(dateNull(), transDate));
            QueryRun queryRunInventory = new QueryRun(queryInv);
            qbds = queryLinesPurch.dataSourceTable(tableNum(FBBookingPeriodFiscalDocument_BR));
            qbds.clearRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR));

            while (queryRunInventory.next())
            {
                InventSum inventSum = queryRunInventory.get(tableNum(InventSum));
                InventDim inventDim = queryRunInventory.get(tableNum(InventDim));
                real qty = this.getItemQuantityByDate(inventSum.ItemId, inventDim, transDate);
                UnitOfMeasureSymbol unit = InventTableModule::find(inventSum.ItemId, ModuleInventPurchSales::Invent).UnitId;

                this.addRanges(
                    queryLinesPurch,
                    inventSum.ItemId,
                    inventDim.configid,
                    inventDim.InventSizeId,
                    inventDim.InventColorId,
                    inventDim.InventStyleId,
                    inventDim.InventVersionId,
                    inventDim.inventBatchId,
                    inventDim.inventSerialId,
                    inventDim.InventLocationId);

                qbds = queryLinesPurch.dataSourceTable(tableNum(FiscalDocument_BR));
                findOrCreateRange_W(qbds, fieldNum(FiscalDocument_BR, FiscalDocumentDate), strFmt('< %1', queryValue(transDate)));
                qbds = queryLinesPurch.dataSourceTable(tableNum(FBBookingPeriodFiscalDocument_BR));
                qbds.clearRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR));
                qbds = queryLinesPurch.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
                qbds.firstOnly(true);

                QueryRun queryRunLines = new QueryRun(queryLinesPurch);
                fbICMSSTInventoryBalance.clear();
                fbICMSSTInventoryBalance.FBBookingPeriod_BR = previousFBBookingPeriod.RecId;
                fbICMSSTInventoryBalance.ItemId = inventSum.ItemId;
                fbICMSSTInventoryBalance.ProductName = this.getProductName(inventSum.ItemId, inventDim);
                fbICMSSTInventoryBalance.Unit = unit;
                inventDim = InventDim::findOrCreate(inventDim);
                fbICMSSTInventoryBalance.InventDimId = inventDim.inventDimId;
                fbICMSSTInventoryBalance.InventDimDetails = strFmt(
                    '%1 - %2',
                    inventDim.InventSiteId,
                    inventDim.InventLocationId);

                if (queryRunLines.next())
                {
                    FiscalDocumentLine_BR fiscalDocumentLine = queryRunLines.get(tableNum(FiscalDocumentLine_BR));
                    FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS = queryRunLines.get(tableNum(FiscalDocumentTaxTrans_BR));
                    FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundICMS = queryRunLines.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
                    FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = queryRunLines.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
                    FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST = queryRunLines.get(tableNum(FiscalDocumentTaxTrans_BR), 2);
                    FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundICMSST = queryRunLines.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR), 2);
                    FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST = queryRunLines.get(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
                    InventTrans inventTrans = queryRunLines.get(tableNum(InventTrans));

                    real docQty = this.convertQty(fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit, unit, fiscalDocumentLine.Quantity);

                    FiscalDocumentTaxTrans_BR            fiscalDocumentTaxTransComplementICMSST;
                    FiscalDocumentTaxTrans_BR            fiscalDocumentTaxTransComplementICMS;
                    FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundComplementICMSST;
                    FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundComplementICMS;

                    [fiscalDocumentTaxTransComplementICMSST, fiscalDocumentTaxTransPovertyFundComplementICMSST] = this.getPresumedTaxFromPurchComplementForLine(fiscalDocumentLine.RecId, TaxType_BR::ICMSST);
                    [fiscalDocumentTaxTransComplementICMS, fiscalDocumentTaxTransPovertyFundComplementICMS] = this.getPresumedTaxFromPurchComplementForLine(fiscalDocumentLine.RecId, TaxType_BR::ICMS);

                    real icmsAmount, icmsstAmount, icmsstBaseAmount, fcpAmountICMS, fcpAmountICMSST;

                    if (fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount || fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount)
                    {
                        icmsAmount = fiscalDocumentTaxTransPresumedICMS.PresumedvICMSSubstituto;
                        fcpAmountICMS = 0;
                    }
                    else
                    {
                        icmsAmount = fiscalDocumentTaxTransICMS.TaxAmountOther;
                        fcpAmountICMS = fiscalDocumentTaxTransPovertyFundICMS.TaxPovertyFundAmount;
                    }

                    icmsAmount += fiscalDocumentTaxTransComplementICMS.TaxAmountOther;
                    fcpAmountICMS += fiscalDocumentTaxTransPovertyFundComplementICMS.TaxPovertyFundAmount;

                    if (fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount)
                    {
                        icmsstAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount + fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
                        icmsstBaseAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxBaseAmount;
                        fcpAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
                    }
                    else if (fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount)
                    {
                        icmsstAmount = fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount + fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
                        icmsstBaseAmount = fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmount;
                        fcpAmountICMSST = fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
                    }
                    else
                    {
                        icmsstAmount = fiscalDocumentTaxTransICMSST.TaxAmountOther;
                        icmsstBaseAmount = fiscalDocumentTaxTransICMSST.TaxBaseAmountOther;
                        fcpAmountICMSST = fiscalDocumentTaxTransPovertyFundICMSST.TaxPovertyFundAmount;
                    }

                    icmsstAmount += fiscalDocumentTaxTransComplementICMSST.TaxAmountOther;
                    fcpAmountICMSST += fiscalDocumentTaxTransPovertyFundComplementICMSST.TaxPovertyFundAmount;

                    fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit = this.getAmountPerUnit(icmsstAmount, docQty);
                    fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit = this.getAmountPerUnit(icmsstBaseAmount, docQty);
                    fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit = this.getAmountPerUnit(icmsAmount, docQty);
                    fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit = this.getAmountPerUnit(fcpAmountICMS, docQty);
                    fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit = this.getAmountPerUnit(fcpAmountICMSST, docQty);
                    fbICMSSTInventoryBalance.ICMSSTTaxAmount = fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit * qty;
                    fbICMSSTInventoryBalance.ICMSSTTaxBaseAmount = fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit * qty;
                    fbICMSSTInventoryBalance.ICMSTaxAmount = fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit * qty;
                    fbICMSSTInventoryBalance.ICMSFCPTaxAmount = fbICMSSTInventoryBalance.ICMSFCPTaxAmountPerUnit * qty;
                    fbICMSSTInventoryBalance.ICMSSTFCPTaxAmount = fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit * qty;
                }

                fbICMSSTInventoryBalance.Quantity = qty;
                fbICMSSTInventoryBalance.CurrentPeriod = NoYes::Yes;
                recordList.add(fbICMSSTInventoryBalance);

                items++;

                if (showProgressBar)
                {
                    progress.setText(strfmt("@FiscalBooks_SpedFiscal:ItemNumber", fbICMSSTInventoryBalance.ProductName));
                    progress.setCount(items);
                }
            }

            recordList.insertDatabase();
            progress = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOldBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete or clear values for existing presumed taxes balances for current period.
    /// </summary>
    public void clearOldBalances()
    {
        FBICMSSTInventoryBalance_BR fbICMSSTInventoryBalance;

        FBBookingPeriod_BR prevPreviousFBBookingPeriod = previousFBBookingPeriod.getPreviousBookingPeriod();

        delete_from fbICMSSTInventoryBalance
            where fbICMSSTInventoryBalance.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbICMSSTInventoryBalance.NextPeriod == NoYes::No;
        
        update_recordSet fbICMSSTInventoryBalance
        setting CurrentPeriod = NoYes::No
            where fbICMSSTInventoryBalance.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbICMSSTInventoryBalance.NextPeriod == NoYes::Yes;

        if (!FBICMSSTInventoryBalance_BR::existsForPeriod(prevPreviousFBBookingPeriod.RecId))
        {
            delete_from fbICMSSTInventoryBalance
                where fbICMSSTInventoryBalance.FBBookingPeriod_BR == previousFBBookingPeriod.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountPerUnit</Name>
				<Source><![CDATA[
    private real getAmountPerUnit(real _amount, real _quantity)
    {
        return CurrencyExchangeHelper::amount(_quantity ? _amount / _quantity : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of items which would be used in calculation.
    /// </summary>
    /// <param name="_openning">
    /// Indicates if it's openning balance calculation or not.
    /// </param>
    /// <returns>
    /// Number of items.
    /// </returns>
    public int getCountItems(boolean _openning = false)
    {
        int ret;

        Query query = new Query(this.initQueryInventory());

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(InventSum));
        qbds.addSelectionField(fieldNum(InventSum, RecId), SelectionField::Count);
        qbds = query.dataSourceTable(tableNum(InventDim));
        findOrCreateRange_W(qbds, fieldNum(InventDim, InventSiteId), queryValue(inventSiteId));
        qbds = query.dataSourceTable(tableNum(InventTrans));

        if (!_openning)
        {
            findOrCreateRange_W(qbds, (fieldNum(InventTrans, DatePhysical)), queryRange(fromDate, toDate));
        }
        else
        {
            findOrCreateRange_W(qbds, fieldNum(InventTrans, DatePhysical), queryRange(dateNull(), queryRange(dateNull(), fromDate-1)));
        }

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ret++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemQuantityByDate</Name>
				<Source><![CDATA[
    private real getItemQuantityByDate(ItemId _itemId, InventDim _inventDim, TransDate _transDate)
    {
        InventDimParm inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);

        InventSumDateDim inventSumDateDim = InventSumDateDim::newParameters(
            _transDate,
            _itemId,
            _inventDim,
            inventDimParm);

        return inventSumDateDim.receivedQty() - inventSumDateDim.deductedQty() + inventSumDateDim.postedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventory</Name>
				<Source><![CDATA[
    protected Query initQueryInventory()
    {
        if (!queryInventory)
        {
            queryInventory = new Query();
            QueryBuildDataSource qbdsInventSum = queryInventory.addDataSource(tableNum(InventSum));
            qbdsInventSum.addGroupByField(fieldNum(InventSum, ItemId));

            QueryBuildDataSource qbdsInventDimSum = qbdsInventSum.addDataSource(tableNum(InventDim));
            qbdsInventDimSum.joinMode(JoinMode::InnerJoin);
            qbdsInventDimSum.fetchMode(QueryFetchMode::One2One);
            qbdsInventDimSum.relations(true);
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, configid));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, InventSizeId));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, InventColorId));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, InventStyleId));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, InventVersionId));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, inventBatchId));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, inventSerialId));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, InventSiteId));
            qbdsInventDimSum.addGroupByField(fieldNum(InventDim, InventLocationId));

            QueryBuildDataSource qbdsInventTrans = qbdsInventSum.addDataSource(tableNum(InventTrans));
            qbdsInventTrans.joinMode(JoinMode::ExistsJoin);
            qbdsInventTrans.fetchMode(QueryFetchMode::One2One);
            qbdsInventTrans.relations(false);
            qbdsInventTrans.addLink(fieldNum(InventSum, ItemId), fieldNum(InventTrans, ItemId));
            qbdsInventTrans.addLink(fieldNum(InventSum, InventDimId), fieldNum(InventTrans, InventDimId));
        }

        return queryInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryLinesForInventory</Name>
				<Source><![CDATA[
    protected Query initQueryLinesForInventory()
    {
        if (!queryLinesInventory)
        {
            queryLinesInventory = new Query(this.initQueryLines());
            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMS = queryLinesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransICMS.addGroupByField(fieldNum(FiscalDocumentTaxTrans_BR, RecId));
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SelectionField::Sum);
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxValue), SelectionField::Avg);

            QueryBuildDataSource qbdsPresumedICMS = queryLinesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPresumed_BR));
            qbdsPresumedICMS.addGroupByField(fieldNum(FiscalDocumentTaxTransPresumed_BR, RecId));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxAmount), SelectionField::Sum);
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxBaseAmount), SelectionField::Sum);
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxPercentage), SelectionField::Avg);
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxAmount), SelectionField::Sum);
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxBaseAmount), SelectionField::Sum);
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxPercentage), SelectionField::Avg);

            QueryBuildDataSource qbdsFCPICMS = queryLinesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
            qbdsFCPICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundAmount), SelectionField::Sum);
            qbdsFCPICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundBaseAmount), SelectionField::Sum);
            qbdsFCPICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundPercentage), SelectionField::Avg);

            QueryBuildDataSource qbdsFiscalDocumentLine = queryLinesInventory.dataSourceTable(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLine.addGroupByField(fieldNum(FiscalDocumentLine_BR, RecId));
            qbdsFiscalDocumentLine.addGroupByField(fieldNum(FiscalDocumentLine_BR, ItemId));
            qbdsFiscalDocumentLine.addGroupByField(fieldNum(FiscalDocumentLine_BR, Unit));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, Quantity), SelectionField::Sum);

            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMSST = queryLinesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR), 2);
            qbdsFiscalDocumentTaxTransICMSST.addGroupByField(fieldNum(FiscalDocumentTaxTrans_BR, RecId));
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SelectionField::Sum);
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxValue), SelectionField::Avg);

            QueryBuildDataSource qbdsPresumedICMSST = queryLinesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
            qbdsPresumedICMSST.addGroupByField(fieldNum(FiscalDocumentTaxTransPresumed_BR, RecId));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxAmount), SelectionField::Sum);
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxBaseAmount), SelectionField::Sum);
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxPercentage), SelectionField::Avg);
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxAmount), SelectionField::Sum);
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxBaseAmount), SelectionField::Sum);
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxPercentage), SelectionField::Avg);

            QueryBuildDataSource qbdsFCPICMSST = queryLinesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPovertyFund_BR), 2);
            qbdsFCPICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundAmount), SelectionField::Sum);
            qbdsFCPICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundBaseAmount), SelectionField::Sum);
            qbdsFCPICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundPercentage), SelectionField::Avg);

            QueryBuildDataSource qbdsFiscalDocument = queryLinesInventory.dataSourceTable(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.addGroupByField(fieldNum(FiscalDocument_BR, RecId));
            qbdsFiscalDocument.addGroupByField(fieldNum(FiscalDocument_BR, RefTableId));
            qbdsFiscalDocument.clearRange(fieldNum(FiscalDocument_BR, RefTableId));
            qbdsFiscalDocument.clearRange(fieldNum(FiscalDocument_BR, RefTableId));
            qbdsFiscalDocument.clearRange(fieldNum(FiscalDocument_BR, Direction));

            QueryBuildDataSource qbdsInventTransOrigin = queryLinesInventory.dataSourceTable(tableNum(InventTransOrigin));
            qbdsInventTransOrigin.fetchMode(QueryFetchMode::One2One);
            qbdsInventTransOrigin.joinMode(JoinMode::InnerJoin);

            QueryBuildDataSource qbdsInventTrans = queryLinesInventory.dataSourceTable(tableNum(InventTrans));
            qbdsInventTrans.fetchMode(QueryFetchMode::One2One);
            qbdsInventTrans.joinMode(JoinMode::InnerJoin);
            qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);

            QueryBuildDataSource qbdsInventDim = queryLinesInventory.dataSourceTable(tableNum(InventDim));
            qbdsInventDim.fetchMode(QueryFetchMode::One2One);
            qbdsInventDim.joinMode(JoinMode::InnerJoin);
            qbdsInventDim.addGroupByField(fieldNum(InventDim, configid));
            qbdsInventDim.addGroupByField(fieldNum(InventDim, InventSizeId));
            qbdsInventDim.addGroupByField(fieldNum(InventDim, InventColorId));
            qbdsInventDim.addGroupByField(fieldNum(InventDim, InventStyleId));
            qbdsInventDim.addGroupByField(fieldNum(InventDim, InventVersionId));
            qbdsInventDim.addGroupByField(fieldNum(InventDim, inventBatchId));
            qbdsInventDim.addGroupByField(fieldNum(InventDim, inventSerialId));
        }

        return queryLinesInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryLinesForPurchaseInventory</Name>
				<Source><![CDATA[
    protected Query initQueryLinesForPurchaseInventory()
    {
        QueryBuildDataSource qbds;

        if (!queryLinesPurchaseInventory)
        {
            queryLinesPurchaseInventory = new Query(this.initQueryLinesForInventory());
            qbds = queryLinesPurchaseInventory.dataSourceTable(tableNum(FiscalDocument_BR));
            findOrCreateRange_W(qbds, fieldNum(FiscalDocument_BR, Direction), queryValue(FiscalDocDirection_BR::Incoming));

            if (stateId == FiscalBooksConstants_BR::StateSC)
            {
                QueryBuildDataSource qbdsFiscalDocument = queryLinesPurchaseInventory.dataSourceTable(tableNum(FiscalDocument_BR));
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_55));
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_65));
            }
        }

        return queryLinesPurchaseInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryLinesForSaleInventory</Name>
				<Source><![CDATA[
    protected Query initQueryLinesForSaleInventory()
    {
        if (!queryLinesSalesInventory)
        {
            queryLinesSalesInventory = new Query(this.initQueryLinesForInventory());

            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMS = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransICMS.fields().clearFieldList();

            QueryBuildDataSource qbdsPresumedICMS = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPresumed_BR));
            qbdsPresumedICMS.enabled(false);

            QueryBuildDataSource qbdsFCPICMS = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
            qbdsFCPICMS.enabled(false);

            QueryBuildDataSource qbdsFiscalDocumentLine = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLine.fields().clearFieldList();

            if (stateId == FiscalBooksConstants_BR::StateSC)
            {
                qbdsFiscalDocumentLine.addRange(fieldNum(FiscalDocumentLine_BR, CFOP)).value(
                    FBSpedFileCreator_DRCST_BR::getRangeWithUnsupportedCFOPNumbers(qbdsFiscalDocumentLine.name()));
            }

            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMSST = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR), 2);
            qbdsFiscalDocumentTaxTransICMSST.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentTaxTransICMSST.fields().clearFieldList();

            QueryBuildDataSource qbdsPresumedICMSST = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
            qbdsPresumedICMSST.enabled(false);

            QueryBuildDataSource qbdsFCPICMSST = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocumentTaxTransPovertyFund_BR), 2);
            qbdsFCPICMSST.enabled(false);

            QueryBuildDataSource qbdsFiscalDocument = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.fields().clearFieldList();

            QueryBuildDataSource qbdsInventDim = queryLinesSalesInventory.dataSourceTable(tableNum(InventDim));
            qbdsInventDim.fields().clearFieldList();

            qbdsFiscalDocument = queryLinesSalesInventory.dataSourceTable(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Direction)).value(queryValue(FiscalDocDirection_BR::Outgoing));

            if (stateId == FiscalBooksConstants_BR::StateSC)
            {
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_55));
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_65));

                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RecId)).value(
                    FBSpedFileCreator_DRCST_BR::getFiscalDocumentRange(
                        qbdsFiscalDocument.name(),
                        qbdsFiscalDocumentLine.name()));
            }
        }

        return queryLinesSalesInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProgressBar</Name>
				<Source><![CDATA[
    public boolean parmShowProgressBar(boolean _showProgressBar = showProgressBar)
    {
        showProgressBar = _showProgressBar;

        return showProgressBar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
