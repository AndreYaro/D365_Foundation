<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostReport_CostValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostReport_CostValue</c> class is used when the <c>InventCostValue</c> report is
///    generated.
/// </summary>
/// <remarks>
///    This class is abstract and contains common functionality for all of the flavors of the
///    <c>InventCostValue</c> reports.This class is only relevant for generating the
///    <c>InventCostValue</c> report.
/// </remarks>
class InventCostReport_CostValue extends InventCostReport_CostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateTempTable</Name>
				<Source><![CDATA[
/// <summary>
    ///    Creates <c>InventCostTmpTransBreakdown</c> temporary records.
    /// </summary>
    /// <returns>
    ///    A temporary table buffer with collected data.
    /// </returns>
    protected InventCostTmpTransBreakdown generateTempTable()
    {
        InventCostTransView                     inventCostTransView;
        InventTable                             inventTable;
        InventClosing                           inventClosing;
        RecId                                   oldInventCostTransRecId = 0;
        InventCostTransRefType                  oldCostTransRefType = 0;
        CostGroupType                           oldCostGroupType = 0;
        CostGroupId                             oldCostGroupId = '';
        InventCostAmountHandler                 amounts = InventCostAmountHandler::construct();
        InventCostTmpTransBreakdown             totalInventCostTmpTransBreakdown;
        InventCostTmpTransBreakdown             transInventCostTmpTransBreakdown;
        InventCostTmpTransBreakdown             tempInventCostTmpTransBreakdown;
        InventCostTmpTransBreakdown             inventCostTmpTransBreakdown;

        if (this.parmuserConnection())
        {
            inventCostTmpTransBreakdown.setConnection(this.parmUserConnection());
            tempInventCostTmpTransBreakdown.setConnection(this.parmUserConnection());
        }

        // Adjust the fromdate to the date of the previous inventory closing
        FromDate myFromDate = fromDate;
        if (fromDate && includeBeginning == NoYes::Yes)
        {
            inventClosing = InventClosing::findPrevClosingDate(fromDate + 1);

            if (inventClosing)
            {
                myFromDate = inventClosing.TransDate;
                if (myFromDate < toDate)
                {
                    myFromDate += 1;
                }
            }
            else
            {
                myFromDate = dateNull();
            }
        }

        InventCostBeginningAmounts beginningAmounts = InventCostBeginningAmounts::construct(inventClosing);
        Query myQuery = InventCostReport_CostBase::buildQuery(myFromDate, toDate);

        QueryBuildDataSource qbdsInventCostTransView = myQuery.dataSourceTable(inventCostTransView.TableId);
        qbdsInventCostTransView.addSortField(fieldNum(InventCostTransView, InventCostTransRecId));
        QueryBuildDataSource qbdsInventItemCostGroupRollup = qbdsInventCostTransView.addDataSource(tableNum(InventItemCostGroupRollup));
        qbdsInventItemCostGroupRollup.addLink(fieldNum(InventCostTransView, ItemPriceRefRecId), fieldNum(InventItemCostGroupRollup, InventItemPriceRefRecId));
        qbdsInventItemCostGroupRollup.addSortField(fieldNum(InventItemCostGroupRollup, CostLevel));
        qbdsInventItemCostGroupRollup.addSortField(fieldNum(InventItemCostGroupRollup, CostGroupId));
        QueryBuildDataSource qbdsBOMCostGroup = qbdsInventItemCostGroupRollup.addDataSource(tableNum(BOMCostGroup));
        qbdsBOMCostGroup.addLink(fieldNum(InventItemCostGroupRollup, CostGroupId), fieldNum(BOMCostGroup, CostGroupId));
        qbdsBOMCostGroup.joinMode(JoinMode::OuterJoin);
        qbdsBOMCostGroup.addSortField(fieldNum(BOMCostGroup, CostGroupType));

        InventCostReport_CostBase::addRangesFromDialog(myQuery, query);
        InventCostReport_CostBase::addLevelAndSplitRange(qbdsInventItemCostGroupRollup,
                                                         level,
                                                         detail,
                                                         fieldNum(InventItemCostGroupRollup, CostLevel),
                                                         fieldNum(InventItemCostGroupRollup, Split));

        QueryRun queryRun = new QueryRun(myQuery);
        queryRun.query().recordLevelSecurity(true);
        while (queryRun.next())
        {
            inventTable = queryRun.get(tableNum(InventTable));
            inventCostTransView = queryRun.get(tableNum(InventCostTransView));
            InventItemCostGroupRollup inventItemCostGroupRollup = queryRun.get(tableNum(InventItemCostGroupRollup));
            BOMCostGroup bomCostGroup = queryRun.get(tableNum(BOMCostGroup));

            // For each new InventCostTrans, write the old first before adding amounts for the new row
            if ((axis == InventCostAxis::Item && inventCostTransView.InventCostTransRecId != oldInventCostTransRecId) ||
                (axis == InventCostAxis::Origin && (inventCostTransView.InventCostTransRecId != oldInventCostTransRecId || inventCostTransView.CostTransRefType != oldCostTransRefType)) ||
                (axis == InventCostAxis::CostGroup && (inventCostTransView.InventCostTransRecId != oldInventCostTransRecId || inventItemCostGroupRollup.CostGroupId != oldCostGroupId || bomCostGroup.CostGroupType != oldCostGroupType)))
            {
                // Prepare for new InventCostTrans
                amounts.clear();
                oldInventCostTransRecId = inventCostTransView.InventCostTransRecId;
                oldCostTransRefType     = inventCostTransView.CostTransRefType;
                oldCostGroupId          = inventItemCostGroupRollup.CostGroupId;
                oldCostGroupType        = bomCostGroup.CostGroupType;

                totalInventCostTmpTransBreakdown.clear();
                totalInventCostTmpTransBreakdown.initFromInventTable(inventTable);
                totalInventCostTmpTransBreakdown.initFromInventCostTransView(inventCostTransView);
                totalInventCostTmpTransBreakdown.initFromBOMCostGroup(bomCostGroup);
                totalInventCostTmpTransBreakdown.initFromInventItemCostGroupRollup(inventItemCostGroupRollup);

                if (includeBeginning == NoYes::Yes)
                {
                    // Store beginning amounts to a map for later retrieval
                    if (axis == InventCostAxis::CostGroup)
                    {
                        beginningAmounts.storeCostGroupBeginning(inventItemCostGroupRollup.CostGroupId, inventCostTransView);
                    }
                    else
                    {
                        beginningAmounts.storeItemBeginning(inventCostTransView);
                    }
                }
            }
            transInventCostTmpTransBreakdown.data(totalInventCostTmpTransBreakdown);
            // Clear amounts from previous row before setting new amounts
            transInventCostTmpTransBreakdown.VarianceAmount         = 0;
            transInventCostTmpTransBreakdown.VariableAmount         = 0;
            transInventCostTmpTransBreakdown.FixedAmount            = 0;
            transInventCostTmpTransBreakdown.UndefinedAmount        = 0;
            transInventCostTmpTransBreakdown.MaterialsAmount        = 0;
            transInventCostTmpTransBreakdown.ManufacturingAmount    = 0;
            transInventCostTmpTransBreakdown.IndirectAmount         = 0;
            transInventCostTmpTransBreakdown.initFromInventItemCostGroupRollup(inventItemCostGroupRollup);
            transInventCostTmpTransBreakdown.initFromBOMCostGroup(bomCostGroup);

            AmountMST amount = (inventItemCostGroupRollup.CostAmountStd / inventItemCostGroupRollup.Qty) * totalInventCostTmpTransBreakdown.Qty;
            InventCostReport_CostBase::assignAmountToTemp(amount, bomCostGroup, transInventCostTmpTransBreakdown);

            // Split quantity etc. according to cost amount distribution
            transInventCostTmpTransBreakdown.Qty            = 0;
            transInventCostTmpTransBreakdown.OnHandAmount   = 0;
            transInventCostTmpTransBreakdown.cogsAmount     = 0;
            transInventCostTmpTransBreakdown.DeferredAmount = 0;
            transInventCostTmpTransBreakdown.wipAmount      = 0;
            if (transInventCostTmpTransBreakdown.UnitCost != 0)
            {
                real distributionFactor = (inventItemCostGroupRollup.CostAmountStd / inventItemCostGroupRollup.Qty) / transInventCostTmpTransBreakdown.UnitCost;
                transInventCostTmpTransBreakdown.Qty            =  distributionFactor * totalInventCostTmpTransBreakdown.Qty;
                transInventCostTmpTransBreakdown.OnHandAmount   =  distributionFactor * totalInventCostTmpTransBreakdown.OnHandAmount;
                transInventCostTmpTransBreakdown.wipAmount      =  distributionFactor * totalInventCostTmpTransBreakdown.wipAmount;
                transInventCostTmpTransBreakdown.DeferredAmount =  distributionFactor * totalInventCostTmpTransBreakdown.DeferredAmount;
                transInventCostTmpTransBreakdown.cogsAmount     =  distributionFactor * totalInventCostTmpTransBreakdown.cogsAmount;
            }

            transInventCostTmpTransBreakdown.Cost = transInventCostTmpTransBreakdown.UndefinedAmount +
                                                    transInventCostTmpTransBreakdown.MaterialsAmount +
                                                    transInventCostTmpTransBreakdown.ManufacturingAmount +
                                                    transInventCostTmpTransBreakdown.IndirectAmount;

            if (inventCostTransView.TransDate >= fromDate)
            {
                if (detail == InventCostDetail::No ||
                    level  == InventCostLevel::Total ||
                    inventItemCostGroupRollup.Split == NoYes::No)
                {
                    InventCostReport_CostBase::addAmountBasedOnCostGroup(amount, amounts, bomCostGroup);
                    amounts.addAmount(transInventCostTmpTransBreakdown.Cost, InventCostAmountType::Cost);
                    amounts.addAmount(transInventCostTmpTransBreakdown.OnHandAmount, InventCostAmountType::OnHand);
                    amounts.addAmount(transInventCostTmpTransBreakdown.wipAmount, InventCostAmountType::WIP);
                    amounts.addAmount(transInventCostTmpTransBreakdown.DeferredAmount, InventCostAmountType::Deferred);
                    amounts.addAmount(transInventCostTmpTransBreakdown.cogsAmount, InventCostAmountType::COGS);
                }
            }

            // Transactions prior to the selected period are only added to the beginning amounts.
            // If beginning amounts aren't inlcuded, no InventCostTrans records prior to fromDate
            // will occur, and no call to beginningAmounts are issued
            if (fromDate && inventCostTransView.TransDate < fromDate)
            {
                // Add to beginning quantities to a map for later retrieval
                if (axis == InventCostAxis::CostGroup)
                {
                    beginningAmounts.storeCostGroupTrans(inventItemCostGroupRollup.CostGroupId, transInventCostTmpTransBreakdown, inventCostTransView);
                }
                else
                {
                    beginningAmounts.storeItemTrans(transInventCostTmpTransBreakdown, inventCostTransView);
                }
            }
            else
            {
                InventCostReport_CostBase::writeTmpTransBreakdownTrans(transInventCostTmpTransBreakdown, inventCostTmpTransBreakdown);
            }
        }

        // Items, that doesn't have transactions within the period from last inventory closing and to select toDate
        // are not covered by the logic above. A second query to find these items are issued.
        // These items, have an InventClosing/InventCostTransSum record, but have no InventCostTrans records
        // in the extended selected period (the period form the inventory closing to the toDate)
        //
        // If beginning amounts aren't included, InventClosing will be null and this query will not be executed
        if (axis != InventCostAxis::CostGroup && inventClosing)
        {
            myQuery = new Query();
            QueryBuildDataSource qbdsInventTable = myQuery.addDataSource(tableNum(InventTable));
            QueryBuildDataSource qbdsInventCostTransSum = qbdsInventTable.addDataSource(tableNum(InventCostTransSum));
            qbdsInventCostTransSum.addLink(fieldNum(InventTable, ItemId), fieldNum(InventCostTransSum, ItemId));
            qbdsInventCostTransSum.addRange(fieldNum(InventCostTransSum, InventClosingRefRecId)).value(queryValue(inventClosing.RecId));
            QueryBuildDataSource qbdsInventDim = qbdsInventCostTransSum.addDataSource(tableNum(InventDim));
            qbdsInventDim.addLink(fieldNum(InventCostTransSum, FinancialInventDimId), fieldNum(InventDim, InventDimId));

            InventCostReport_CostBase::addRangesFromDialog(myQuery, query, false);

            amounts.clear();
            queryRun = new QueryRun(myQuery);
            while (queryRun.next())
            {
                InventCostTransSum inventCostTransSum = queryRun.get(tableNum(InventCostTransSum));
                inventTable = queryRun.get(tableNum(InventTable));
                InventDim inventDim = queryRun.get(tableNum(InventDim));
                if (inventCostTransSum)
                {
                    if (!beginningAmounts.isItemStored(inventCostTransSum.ItemId, inventCostTransSum.FinancialInventDimId))
                    {
                        beginningAmounts.storeItemBeginning(null, inventCostTransSum);
                        totalInventCostTmpTransBreakdown.clear();
                        totalInventCostTmpTransBreakdown.ItemId = inventCostTransSum.ItemId;
                        totalInventCostTmpTransBreakdown.initFromInventDim(inventDim);
                        totalInventCostTmpTransBreakdown.initFromInventTable(inventTable);
                        InventCostReport_CostBase::writeTmpTransBreakdownBeginning(amounts, totalInventCostTmpTransBreakdown, inventCostTmpTransBreakdown);
                    }
                }
            }
        }

        // Insert beginning amounts into temporary table, marked as beginning transaction
        if (includeBeginning == NoYes::Yes)
        {
            InventDim inventDim;
            switch (axis)
            {
                case InventCostAxis::Item:
                    while select ItemGroupId, ItemId, ItemName, FinancialInventDimId from tempInventCostTmpTransBreakdown
                        group by ItemGroupId, ItemId, ItemName, FinancialInventDimId 
                            join inventDim
                        group by #InventDimGroupAllFields, InventDimId
                             where inventDim.inventdimId == tempInventCostTmpTransBreakdown.FinancialInventDimId                                                      
                    {
                        totalInventCostTmpTransBreakdown.data(tempInventCostTmpTransBreakdown);
                        totalInventCostTmpTransBreakdown.Cost               = 0;
                        totalInventCostTmpTransBreakdown.Qty                = 0;
                        totalInventCostTmpTransBreakdown.CostTransRefType   = InventCostTransRefType::None;
                        totalInventCostTmpTransBreakdown.TransRefId         = '';
                        totalInventCostTmpTransBreakdown.initFromInventDim(inventDim);                                               
                        amounts = beginningAmounts.findItem(tempInventCostTmpTransBreakdown.ItemId, tempInventCostTmpTransBreakdown.FinancialInventDimId);
                        InventCostReport_CostBase::writeTmpTransBreakdownBeginning(amounts, totalInventCostTmpTransBreakdown, inventCostTmpTransBreakdown);
                    }
                    break;
                case InventCostAxis::Origin:
                    while select CostTransRefType, ItemId, ItemName, FinancialInventDimId from tempInventCostTmpTransBreakdown
                        group by CostTransRefType, ItemId, ItemName, FinancialInventDimId
                            join inventDim
                        group by #InventDimGroupAllFields, InventDimId
                             where inventDim.inventdimId == tempInventCostTmpTransBreakdown.FinancialInventDimId
                    {
                        totalInventCostTmpTransBreakdown.data(tempInventCostTmpTransBreakdown);
                        totalInventCostTmpTransBreakdown.Cost   = 0;
                        totalInventCostTmpTransBreakdown.Qty    = 0;
                        totalInventCostTmpTransBreakdown.initFromInventDim(inventDim);
                        amounts = beginningAmounts.findItem(tempInventCostTmpTransBreakdown.ItemId, tempInventCostTmpTransBreakdown.FinancialInventDimId);
                        InventCostReport_CostBase::writeTmpTransBreakdownBeginning(amounts, totalInventCostTmpTransBreakdown, inventCostTmpTransBreakdown);
                    }
                    break;
                case InventCostAxis::CostGroup:
                    while select CostGroupType, CostGroupId from tempInventCostTmpTransBreakdown
                        group by CostGroupType, CostGroupId
                    {
                        totalInventCostTmpTransBreakdown.data(tempInventCostTmpTransBreakdown);
                        totalInventCostTmpTransBreakdown.Cost   = 0;
                        totalInventCostTmpTransBreakdown.Qty    = 0;
                        totalInventCostTmpTransBreakdown.ItemId = '';
                        amounts = beginningAmounts.findCostGroup(tempInventCostTmpTransBreakdown.CostGroupId);
                        InventCostReport_CostBase::writeTmpTransBreakdownBeginning(amounts, totalInventCostTmpTransBreakdown, inventCostTmpTransBreakdown);
                    }
                    break;
            }
        }

        return inventCostTmpTransBreakdown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an <c>InventCostValue</c> report that is an <c>Item</c>, <c>Origin</c>, or <c>CostGroup</c>
    ///    report.
    /// </summary>
    /// <returns>
    ///    A temporary table buffer with collected data.
    /// </returns>
    /// <remarks>
    ///    This method collects data from the <c>InventCostTrans</c> and <c>InventItemCostGroupRollup</c>
    ///    tables and stores it in a temporary table by using a list.
    /// </remarks>
    public InventCostTmpTransBreakdown run()
    {
        return this.generateTempTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostReport_CostValue construct()
    {
        return new InventCostReport_CostValue();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>