<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableInteraction</c> class is the interaction class for the purchase table details form.
/// </summary>
public class PurchTableInteraction extends PageInteraction
{
    private PurchInstrumentationLogger instrumentationLogger;

    Page                        page;
    PurchLine                   purchLine;
    PurchTable                  purchTable;
    InventDim                   inventDim;

    PurchTableForm              purchTableForm;
    PurchTableInteractionHelper purchTableInteractionHelper;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    public void enableHeaderActions()
    {
        purchTableInteractionHelper.initHeaderActions();

        this.enableHeaderPurchOrder();
        this.enableHeaderPurchase();
        this.enableHeaderManage();
        this.enableHeaderReceive();
        this.enableHeaderInvoice();
        this.enableHeaderRetail();
        this.enableHeaderGeneral();
        this.enableHeaderCustoms();
        this.enableHeaderUpdateJournalActions();
        
        this.enableLineActionsFromHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActions_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by enableHeaderActions() post event handler.
    /// </summary>
    protected void enableHeaderActions_BR()
    {
        this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonHeaderFiscalDocumentText_BR), purchTableInteractionHelper.parmCanFiscalDocTextBeRegistrated_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActionsFromLine</Name>
				<Source><![CDATA[
    private void enableHeaderActionsFromLine()
    {
        //Header actions dependent on line
        this.enableHeaderUpdateJournalActions();
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonCustVendCreditInvoicingHeader), purchTableForm.isHeaderCreditInvoiceButtonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderAgreementActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level agreement menu items.
    /// </summary>
    protected void enableHeaderAgreementActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonPurchAgreement), purchTable.MatchingAgreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderChangeRequestActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level change request menu items.
    /// </summary>
    protected void enableHeaderChangeRequestActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonRequestChange), purchTableInteractionHelper.parmcanChangeBeRequested());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderCustoms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named customs.
    /// </summary>
    protected void enableHeaderCustoms()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named general.
    /// </summary>
    protected void enableHeaderGeneral()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, CreateCase), purchTableInteractionHelper.parmbuttonCreateCaseEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, CaseButton), purchTableInteractionHelper.parmbuttonCreateCaseEnabled());

        this.enableHeaderAgreementActions();

        page.actionPaneControlEnabled(formControlStr(PurchTable, GeneralSetup), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, CreateActivity), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(PurchTable, ContactPerson), purchTableInteractionHelper.parmContactDetailsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named invoice.
    /// </summary>
    protected void enableHeaderInvoice()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonPaymentSchedule), purchTableInteractionHelper.parmbuttonPaymentScheduleEnabled());

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalInvoice), purchTableInteractionHelper.parmbuttonJournalInvoiceEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalPendingInvoice), purchTableInteractionHelper.parmbuttonJournalPendingInvoiceEnabled() );

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonCustVendCreditInvoicingHeader), purchTableForm.isHeaderCreditInvoiceButtonEnabled());

        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceProcess), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceSettle), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceIntroduce), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceChange), !purchTableInteractionHelper.parmHeaderIsFinalized());
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalFacture_RU), purchTableInteractionHelper.parmButtonJournalFactureEnabled_RU());
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderManage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named manage.
    /// </summary>
    protected void enableHeaderManage()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonCreateBankLCImport), purchTableInteractionHelper.parmbuttonCreateBankLCImport());
        page.actionPaneControlEnabled(formControlStr(PurchTable, BankLGRequestForm), purchTableInteractionHelper.parmbankLGRequestFormEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonPurchTableCompare), purchTableInteractionHelper.parmHistoryExists());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonPurchTableVersion), purchTableInteractionHelper.parmHistoryExists());

        //Intercompany
        page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonOriginalSalesTable), purchTableInteractionHelper.parmOriginalSalesTableEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonInterCompanySalesTable), purchTableInteractionHelper.parmintercompanySalesTableEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonInterCompanyCustPackingSlipJournal), purchTableInteractionHelper.parminterCompanyActionsEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonInterCompanyCustInvoiceJournal), purchTableInteractionHelper.parminterCompanyActionsEnabled());

        page.actionPaneControlEnabled(formControlStr(PurchTable, ManageBankDocument), !purchTableInteractionHelper.parmHeaderIsFinalized());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderPurchase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named Purchase.
    /// </summary>
    protected void enableHeaderPurchase()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, PrepayPurchTableHeading), purchTableInteractionHelper.parmbuttonPrepayPurchTableHeading());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonRemovePurchPrepayTable), purchTableInteractionHelper.parmbuttonRemovePurchPrepayTable());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCreditNoteHeader), purchTableInteractionHelper.parmbuttonCreditNoteHeaderEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, MultiLineDiscAction), purchTableInteractionHelper.parmbuttonMultiLineDiscEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, EndDiscAction), purchTableInteractionHelper.parmbuttonEndDiscEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, SuppItemCalc_PurchHeader), purchTableInteractionHelper.parmButtonSuppItemCalcHeaderEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonFinalizePurchaseOrder), purchTableInteractionHelper.parmButtonFinalizeEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalPurchaseOrder), purchTableInteractionHelper.parmbuttonJournalPurchaseOrderEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalConfirmationReq), purchTableInteractionHelper.parmJournalPurchConfirmationRequestEnbld());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalBindingConfirmationReq), purchTableInteractionHelper.parmJournalBindingConfirmationRequestEnbld());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonViewLatestResponse), purchTableInteractionHelper.parmJournalBindingConfirmationRequestEnbld());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchVendorConfirmationHistory), purchTableInteractionHelper.parmJournalBindingConfirmationRequestEnbld());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchaseCreate), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, AllocateMarkup),    purchTableInteractionHelper.parmButtonPurchEditEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchaseCalculate), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchasePrepay), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchaseGenerate), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchaseActions), !purchTableInteractionHelper.parmHeaderIsFinalized());

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalInvoice4Paym_RU), purchTableInteractionHelper.parmButtonJournalInvoice4PaymEnabled_RU());
        }
        // </GEERU>
        page.actionPaneControlEnabled(formControlStr(PurchTable, CFMPaymentRequestView), purchTableInteractionHelper.parmCFMPaymentRequestViewEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderPurchaseAccountingActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level journal menu items.
    /// </summary>
    protected void enableHeaderPurchaseAccountingActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonSubLedgerJournalLines), purchTableInteractionHelper.parmenablePurchaseOrderButton());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named PurchOrder.
    /// </summary>
    protected void enableHeaderPurchOrder()
    {
        this.enableHeaderChangeRequestActions();
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonPurchCancel), purchTableInteractionHelper.parmbuttonPurchCancelEnabled());

        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchOrderMaintain), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchOrderCopy), !purchTableInteractionHelper.parmHeaderIsFinalized());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderReceive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named receive.
    /// </summary>
    protected void enableHeaderReceive()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalPackingSlip), purchTableInteractionHelper.parmbuttonJournalPackingSlipEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalReceiptsList), purchTableInteractionHelper.parmbuttonJournalReceiptsListEnabled() );

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonInterCompanySalesFormLetter_Pickinglist), purchTableInteractionHelper.parmintercompanyPickingListEnabled());

        page.actionPaneControlEnabled(formControlStr(PurchTable, ReceiveProcess), !purchTableInteractionHelper.parmHeaderIsFinalized());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderRetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named retail.
    /// </summary>
    private void enableHeaderRetail()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderUpdateJournalActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level journal menu items.
    /// </summary>
    protected void enableHeaderUpdateJournalActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonConfirmationRequest), purchTableInteractionHelper.parmEnableConfirmationRequestButton());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonBindingConfirmationRequest), purchTableInteractionHelper.parmEnableBindingConfirmationRequestButton());

        boolean isEnablePurchaseOrderButton;
        if (FeatureStateProvider::isFeatureEnabled(ProjOpsSubcontractPurchaseOrderFeature::instance()))
        {
            isEnablePurchaseOrderButton = purchTable.ProjSubContractNumber? false : purchTableInteractionHelper.parmenablePurchaseOrderButton();
        }
        else
        {
            isEnablePurchaseOrderButton = purchTableInteractionHelper.parmenablePurchaseOrderButton();
        }
 
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonUpdatePurchaseOrder), IsEnablePurchaseOrderButton);
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonConfirm), IsEnablePurchaseOrderButton);
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonProformaPurchaseOrder), IsEnablePurchaseOrderButton);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonUpdateInvoice4Paym_RU), purchTableInteractionHelper.parmEnableInvoice4PaymButton_RU());
            this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonProformaInvoice4Paym_RU), purchTableInteractionHelper.parmEnableInvoice4PaymButton_RU());
        }
        // </GEERU>

        page.actionPaneControlEnabled(formControlStr(purchTable, budgetControl), !purchTableInteractionHelper.parmDocumentConfirmedOrFinalized());

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonUpdateReceiptsList), purchTable.ProjSubContractNumber? false : purchTableInteractionHelper.parmenableReceiptsListButton());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonProformaReceiptsList), purchTable.ProjSubContractNumber? false :purchTableInteractionHelper.parmenableReceiptsListButton());

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonUpdatePackingSlip), purchTable.ProjSubContractNumber? false :purchTableInteractionHelper.parmenablePackingSlipButton());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonProformaPackingSlip), purchTable.ProjSubContractNumber? false :purchTableInteractionHelper.parmenablePackingSlipButton());

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonUpdateInvoice), purchTableInteractionHelper.parmenableInvoiceButton());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonProformaInvoice), purchTableInteractionHelper.parmenableInvoiceButton());

        // shows or hides credit invoicing button
        page.actionPaneControlVisible(formControlStr(PurchTable, buttonCustVendCreditInvoicingHeader), purchTableInteractionHelper.parmHeaderCreditInvoiceButtonVisible());

        //enables or disables the prepay invoice button
        page.actionPaneControlEnabled(formControlStr(purchTable, buttonUpdatePrepayInvoice), purchTableInteractionHelper.parmButtonUpdatePrepayInvoice());

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonUpdateInvoice4Paym_RU), purchTableInteractionHelper.parmEnableInvoice4PaymButton_RU());
            this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonProformaInvoice4Paym_RU), purchTableInteractionHelper.parmEnableInvoice4PaymButton_RU());

            this.page().actionPaneControlEnabled(formControlStr(PurchTable, FactureEditLinesVend_RU), purchTableInteractionHelper.parmEnableFactureButton_RU() &&
                                                                                                              purchTableInteractionHelper.parmEnableCommFactureButton_RU());
            this.page().actionPaneControlEnabled(formControlStr(PurchTable, FactureEditLinesVend_Proforma_RU), purchTableInteractionHelper.parmEnableFactureButton_RU() &&
                                                                                                                       purchTableInteractionHelper.parmEnableCommFactureButton_RU());
  
            this.page().actionPaneControlVisible(formControlStr(PurchTable, buttonUpdateFacture_RU), purchTableInteractionHelper.parmenableInvoiceButton());
            this.page().actionPaneControlVisible(formControlStr(PurchTable, buttonProformaFacture_RU), purchTableInteractionHelper.parmenableInvoiceButton());

            this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonUpdateFacture_RU), purchTableInteractionHelper.parmEnableCommFactureButton_RU());
            this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonProformaFacture_RU), purchTableInteractionHelper.parmEnableCommFactureButton_RU());
  
            this.page().actionPaneControlVisible(formControlStr(PurchTable, FactureEditLinesVend_RU), (!purchTableInteractionHelper.parmenableInvoiceButton()));
            this.page().actionPaneControlVisible(formControlStr(PurchTable, FactureEditLinesVend_Proforma_RU), (!purchTableInteractionHelper.parmenableInvoiceButton()));
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    public void enableLineActions()
    {
        purchTableInteractionHelper.initLineActions(purchLine);

        this.enableLineSetupActions();
        this.enableLineFunctionActions();
        this.enableLineInquiryActions();
        this.enableLineCalculationActions();
        this.enableLineInterCompanyActions();
        this.enableLineInventoryActions();
        this.enableLinePCActions();
        this.enableLineQuickQuoteActions();
        this.enableLineAgreementActions();
        this.enableLineRenumberingActions();
        this.enableLineDocumentStateActions();
        this.enableLineActions_WHS();
        this.mcrEnableDirectDeliveryActions();

        // Header actions dependent on lines.
        this.enableHeaderActionsFromLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by enableLineActions() post event handler.
    /// </summary>
    [HookableAttribute(true)]
    protected void enableLineActions_BR()
    {
        this.page().actionPaneControlEnabled(formControlStr(PurchTable, buttonLineFiscalDocumentText_BR), purchTableInteractionHelper.parmCanLineFiscalDocTextBeRegistrated_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions_WHS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the line level warehouse management buttons.
    /// </summary>
    protected void enableLineActions_WHS()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, WHSWorkTable), purchTableInteractionHelper.parmWHSWorkTableEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level function items.
    /// </summary>
    protected void enableLineActionsFromHeader()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCreditNoteLines), purchTableInteractionHelper.parmbuttonCreditNoteLinesEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, SuppItemTable_Purch), purchTableInteractionHelper.parmbuttonSupplementaryItemsEnabled() );
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineAgreementActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level agreement menu items.
    /// </summary>
    protected void enableLineAgreementActions()
    {
        boolean agreementLineEnabled, createLinkEnabled, removeLinkEnabled;

        [agreementLineEnabled, createLinkEnabled, removeLinkEnabled] = purchTableForm.getEnabledAgreementButtons(purchTable, purchLine);

        page.actionPaneControlEnabled(formControlStr(PurchTable, AgreementLine), agreementLineEnabled);
        page.actionPaneControlEnabled(formControlStr(PurchTable, CreateLink), createLinkEnabled);
        page.actionPaneControlEnabled(formControlStr(PurchTable, RemoveLink), removeLinkEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineCalculationActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level calculation menu items.
    /// </summary>
    protected void enableLineCalculationActions()
    {
        boolean suppItemCalcPurchEnabled;

        suppItemCalcPurchEnabled = purchTableForm.isLineCalculationButtonEnabled(purchLine);

        page.actionPaneControlEnabled(formControlStr(PurchTable, SuppItemCalc_Purch), suppItemCalcPurchEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineDocumentStateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    protected void enableLineDocumentStateActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, LineOverviewCoreActionButtonGroup), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCopyAllLines), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCopyJournalLines), !purchTableInteractionHelper.parmHeaderIsFinalized());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level function menu items.
    /// </summary>
    protected void enableLineFunctionActions()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, buttonLineExpandBOM), purchTableInteractionHelper.parmExplodeBOMEnabled() && purchTable.canModifyPurchaseOrder());
        }
        else
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, buttonLineExpandBOM), purchTableInteractionHelper.parmExplodeBOMEnabled() );
        }

        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchLineCopy), purchTableInteractionHelper.parmCopyFromLinesEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCopyAllLines), purchTableInteractionHelper.parmCopyAllLines());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCopyJournalLines), purchTableInteractionHelper.parmCopyJournalLines());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonDeliverySchedule), purchTableInteractionHelper.parmDeliveryScheduleEnabled());
        page.actionPaneControlVisible(formControlStr(PurchTable, buttonCustVendCreditInvoicingLines), purchTableInteractionHelper.parmCreditInvoicingVisible());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonCustVendCreditInvoicingLines), purchTableInteractionHelper.parmCreditInvoicingEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, PurchUpdateRemain), purchTableInteractionHelper.parmDeliverRemainderEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, DirPartyPostalAddressNewLine), purchTableInteractionHelper.parmAddAddressEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, LogisticsLocationSelectLine), purchTableInteractionHelper.parmAddAlternativeAddressEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, LineFinalize), purchTableInteractionHelper.parmButtonLineFinalizeEnabled());

        // Financials
        page.actionPaneControlEnabled(formControlStr(PurchTable, BudgetControlLine), purchTableInteractionHelper.parmLineIsModified());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInquiryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level inquiry menu items.
    /// </summary>
    protected void enableLineInquiryActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, ReqTransNet), purchTableInteractionHelper.parmreqTransNetEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, ReqTransExplosion), purchTableInteractionHelper.parmreqTransExplosionEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInterCompanyActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level intercompany menu items.
    /// </summary>
    protected void enableLineInterCompanyActions()
    {
        boolean interCompanyEnabled = purchTableInteractionHelper.parmlineInterCompanyEnabled();

        page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonInterCompanyInventTrans), interCompanyEnabled);
        page.actionPaneControlEnabled(formControlStr(PurchTable, InventOnhandInterCompany), interCompanyEnabled);
        page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonInterCompanyInventOnHandReserve), interCompanyEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInventoryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level inventory menu items.
    /// </summary>
    protected void enableLineInventoryActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonLineTransact), purchTableInteractionHelper.parmbuttonTransactionsEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonLineOnHand), purchTableInteractionHelper.parmbuttonOnHandEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonLineLot), purchTableInteractionHelper.parmbuttonLotEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InventDimTracking), purchTableInteractionHelper.parmbuttonTraceEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, InventMarking), purchTableInteractionHelper.parmbuttonMarkingEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InventReserve), purchTableInteractionHelper.parmbuttonReservationEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, Register), purchTableInteractionHelper.parmbuttonRegistrationEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InventTransPick), purchTableInteractionHelper.parmbuttonPickEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PmfPackOnHand), purchTableInteractionHelper.parmEnablePackOnHand());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PdsResetShelfDates), purchTableInteractionHelper.parmEnableResetShelfLifeDates());
        page.actionPaneControlEnabled(formControlStr(PurchTable, PdsResetVendBatchInfo), purchTableInteractionHelper.parmEnableVendBatchInfo());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonLineConsignmentTransaction), purchTableInteractionHelper.parmEnableLineConsignmentTransactionButton());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLinePCActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level PC menu items.
    /// </summary>
    public void enableLinePCActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, PCExecute), purchTableInteractionHelper.parmPCExecuteButtonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineQuickQuoteActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level quick quote menu items.
    /// </summary>
    protected void enableLineQuickQuoteActions()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonLineQuickQuote), purchTableForm.editHeaderAllowed() && purchTable.canModifyPurchaseOrder());
        }
        else
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonLineQuickQuote), purchTableForm.editHeaderAllowed());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineRenumberingActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level renumber menu items.
    /// </summary>
    protected void enableLineRenumberingActions()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, RenumberLineNumber), purchTableForm.canRenumberLineNumbers());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineSetupActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level setup menu items.
    /// </summary>
    protected void enableLineSetupActions()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, MarkupTrans_LinePurchTable), purchTableInteractionHelper.parmmarkupTransLinePurchTableEnabled() && purchTable.canModifyPurchaseOrder());
        }
        else
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, MarkupTrans_LinePurchTable), purchTableInteractionHelper.parmmarkupTransLinePurchTableEnabled());
        }
        page.actionPaneControlEnabled(formControlStr(PurchTable, LineTaxTransSource), purchTableInteractionHelper.parmlineTaxTransSourceEnabled());
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonSubLedgerDistribution), purchTableInteractionHelper.parmbuttonSubLedgerDistributionEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes based on the active records for the form.
    /// </summary>
    private void init()
    {
        page                    = this.page();
        purchLine               = page.activeRecord(identifierStr(PurchLine));
        purchTable              = page.activeRecord(identifierStr(PurchTable));
        inventDim               = page.activeRecord(identifierStr(InventDim));

        if (page.pageArgs().enumTypeParameter() == enumNum(PurchTableFormId))
        {
            purchTableForm = PurchTableForm::construct(page.pageArgs().enumerationParameter(), purchTable);
            purchTableInteractionHelper = PurchTableInteractionHelper::construct(page.pageArgs().enumerationParameter(), purchTable, purchTableForm.pack());
        }
        else
        {
            purchTableForm = PurchTableForm::construct(PurchTableFormId::None, purchTable);
            purchTableInteractionHelper = PurchTableInteractionHelper::construct(PurchTableFormId::None, purchTable, purchTableForm.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableDirectDeliveryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables the line level function menu items if the order is a direct delivery order.
    /// </summary>
    protected void mcrEnableDirectDeliveryActions()
    {
        if (purchTableInteractionHelper.parmMCRDirectDeliveryEnabled())
        {
            page.actionPaneControlEnabled(formControlStr(PurchTable, PurchLineCopy), false);
            page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCopyAllLines), false);
            page.actionPaneControlEnabled(formControlStr(PurchTable, PurchCopyJournalLines), false);
            page.actionPaneControlEnabled(formControlStr(PurchTable, ButtonLineQuickQuote), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the line action menu item buttons when the active purchase order line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('PurchLine', 'selectionChanged')]
    public void purchLine_DS_selectionChanged()
    {
        using (var activityContext = instrumentationLogger.purchOrderInteractionActivities().selectionChange(tableStr(PurchLine)))
        {
            this.init();

            this.enableLineActions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header action menu item buttons when the active purchase order header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('PurchTable', 'selectionChanged')]
    public void purchTable_DS_selectionChanged()
    {
        using (var activityContext = instrumentationLogger.purchOrderInteractionActivities().selectionChange(tableStr(PurchTable)))
        {
            this.init();
            FormDesign formDesign = FormDataUtil::getFormDataSource(purchTable).formRun().design();

            if (purchTableInteractionHelper.parmButtonPurchEditEnabled())
            {
                if (!(formDesign.ViewEditMode() == ViewEditMode::Edit))
                {
                    formDesign.ViewEditMode(ViewEditMode::Auto);
                }
            }
            else
            {
                formDesign.ViewEditMode(ViewEditMode::View);
            }

            this.enableHeaderActions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEnableHeaderActionsHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(PurchTableInteraction), methodStr(PurchTableInteraction, enableHeaderActions))]
    /// <summary>
    /// Calls the <c>enableHeaderActions_BR</c> method to enable or disable header level Brazilian specific menu items.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed by the event handler.
    /// </param>
    public static void postEnableHeaderActionsHandler_BR(XppPrePostArgs _args)
    {
        PurchTableInteraction purchTableInteraction = _args.getThis();

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        purchTableInteraction.enableHeaderActions_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEnableLineActionsHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(PurchTableInteraction), methodStr(PurchTableInteraction, enableLineActions))]
    /// <summary>
    /// Calls the <c>enableLineActions_BR</c> method to enable or disable line level Brazilian specific menu items.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed by the event handler.
    /// </param>
    public static void postEnableLineActionsHandler_BR(XppPrePostArgs _args)
    {
        PurchTableInteraction purchTableInteraction = _args.getThis();

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        purchTableInteraction.enableLineActions_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(Page _page)
    {
        instrumentationLogger = PurchInstrumentationLogger::createLogger(classStr(PurchTableInteraction));
        super(_page);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>