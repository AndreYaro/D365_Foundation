<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpTable_EventHandler_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvExpTable_EventHandler_Project
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TrvExpTable_Post_modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform additional tasks for project related fields when modified
    /// </summary>
    /// <param name="_args">The event arguments</param>
    [PostHandlerFor(tableStr(TrvExpTable), tableMethodStr(TrvExpTable, modifiedField))]
    public static void TrvExpTable_Post_modifiedField(XppPrePostArgs _args)
    {
        boolean		    ret = _args.getReturnValue();
        TrvExpTable	    trvExpTable = _args.getThis();
        FieldId         fieldId = _args.getArgNum(1);

        switch (fieldId)
        {
            case fieldNum(TrvExpTable, ProjId):
                trvExpTable.ProjStatusId = '';
                if (trvExpTable.ProjId == '')
                {
                    // re-initialize the DefaultDimension so any previously used project dimensions will be cleared
                    trvExpTable.DefaultDimension = 0;
                }
                trvExpTable.setDefaultDimension();
                break;

            case fieldNum(TrvExpTable, InterCompanyLE):
                trvExpTable.ProjId = '';
                trvExpTable.modifiedField(fieldNum(TrvExpTable, ProjId));
                break;
        }
        _args.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpTable_Post_setDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dimension defaulting logic when a ProjId is specified, merges current expense report with
    /// project dimension when project is from the same company as the Expense report.  Project
    /// dimensions take precedence.
    /// </summary>
    /// <param name="_args">The event arguments</param>
    [PostHandlerFor(tableStr(TrvExpTable), tableMethodStr(TrvExpTable, setDefaultDimension))]
    public static void TrvExpTable_Post_setDefaultDimension(XppPrePostArgs _args)
    {
        boolean		    ret = _args.getReturnValue();
        TrvExpTable	    trvExpTable = _args.getThis();

        if (trvExpTable.ProjId)
        {
			DimensionDefault dimensionDefaultFromProject = 0, dimensionDefaultFromWorker = 0;
            SelectableDataArea workerDimensionLE  = trvExpTable.ReferenceDataAreaId;
            SelectableDataArea projectDimensionLE = trvExpTable.intercompanyLegalEntityName();
            SelectableDataArea defaultDimensionLE = trvExpTable.defaultDimensionLegalEntityName();

            // Intercompany expense with project should not consider project dimensions.
            if (!trvExpTable.isIntercompanyWithProject())
            {
                dimensionDefaultFromProject = ProjTable::find(trvExpTable.ProjId).DefaultDimension;

                trvExpTable.DefaultDimension = TrvExpenseDimensionHelper::generateDefaultDimensionFromWorkerAndProject(TrvExpTable.DefaultDimension,
																									dimensionDefaultFromProject,
																									workerDimensionLE,
																									projectDimensionLE,
																									defaultDimensionLE);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpTable_Post_validateApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform project related validation on an expense report before it can be approved
    /// </summary>
    /// <param name="_args">The event arguments</param>
    [PostHandlerFor(tableStr(TrvExpTable), tableMethodStr(TrvExpTable, validateApprove))]
    public static void TrvExpTable_Post_validateApprove(XppPrePostArgs _args)
    {
        boolean ret = _args.getReturnValue();

        if (ret)
        {
            TrvExpTable trvExpTable = _args.getThis();
            TrvParameters trvParameters = TrvParameters::find();
            if (!trvParameters.IsAllowApproveExpenseOnBudgetFail && (TrvBudgetCheckHelper::isBudgetFailed(trvExpTable.RecId) || TrvBudgetCheckHelper::isProjBudgetFailed(trvExpTable.RecId)))
            {
                error(strFmt("@SYS304365", trvExpTable.ExpNumber));
                ret = false;
            }
        }
        _args.setReturnValue(ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>