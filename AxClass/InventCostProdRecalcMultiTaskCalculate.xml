<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostProdRecalcMultiTaskCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostProdRecalcMultiTaskCalculate</c> class recalculates the estimated costs
/// for material and time consumption for production orders marked for recalculation.
/// </summary>
public class InventCostProdRecalcMultiTaskCalculate extends RunBaseBatch implements BatchRetryable
{
    Set productionOrderIds;

    #DEFINE.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, this.parmProductionOrderIds().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductionOrderIds</Name>
				<Source><![CDATA[
    public Set parmProductionOrderIds(Set _productionOrderIds = productionOrderIds)
    {
        productionOrderIds = _productionOrderIds;

        if (productionOrderIds == null)
        {
            productionOrderIds = new Set(Types::String);
        }

        return productionOrderIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SetEnumerator   productionEnumerator = this.parmProductionOrderIds().getEnumerator();

        while (productionEnumerator.moveNext())
        {
            ProdId          productionId    = productionEnumerator.current();
            ProdTable       productionOrder = ProdTable::find(productionId);

            if (productionOrder)
            {
                InventCostProdRecalcMultiTaskCalculate::tryRecalculateDeferedProduction(productionOrder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version         = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                container   packedSet;
                [version, packedSet] = packedClass;

                if (packedSet)
                {
                    productionOrderIds = Set::create(packedSet);
                }
                return true;

            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostProdRecalcMultiTaskCalculate construct()
    {
        return new InventCostProdRecalcMultiTaskCalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4009907";
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryRecalculateDeferedProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to update <c>ProdCalcTrans</c> records related to this production order if the order
    /// has a record in the <c>ProdTableRecalcQueue</c> table.
    /// </summary>
    /// <param name="_productionOrder">
    /// The identifier of the order that should have related <c>ProdCalcTrans</c> updated.
    /// </param>
    public static void tryRecalculateDeferedProduction(ProdTable _productionOrder)
    {
        #OCCRetryCount

        ProdTableRecalcQueue defered;

        try
        {
            ttsBegin;

            // If recalculation of the production order is deferred from multiple places we only recalculate it once. 
            select firstonly defered
                where defered.ProdId == _productionOrder.ProdId;

            if (defered)
            {
                InventCostProdRecalc::recalcProductionOrder(_productionOrder);

                delete_from defered 
                    where defered.ProdId == _productionOrder.ProdId;
            }

            ttsCommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>