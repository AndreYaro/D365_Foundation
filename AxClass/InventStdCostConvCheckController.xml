<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvCheckController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostConvCheckController</c> class is the controller class for the
///    <c>InventStdCostConvCheckController</c> report.
/// </summary>
class InventStdCostConvCheckController extends SrsReportRunController implements BatchRetryable
{
    // <GEERU>
    #ISOCountryRegionCodes
    // </GEERU>

    FormRun callerForm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the report query and parameters by using the caller settings.
    /// </summary>
    protected void prePromptModifyContract()
    {
        InventStdCostConv               inventStdCostConv;
        InventStdCostConvCheckContract  inventStdCostConvCheckContract = this.parmReportContract().parmRdpContract() as InventStdCostConvCheckContract;

        if (this.parmArgs() && this.parmArgs().dataset() == tableNum(InventStdCostConv))
        {
            Common record = this.parmArgs().record();
            inventStdCostConv.data(record);
            if (inventStdCostConv.RecId)
            {
                // Make sure the last saved contract is modified
                this.loadFromSysLastValue();
                inventStdCostConvCheckContract.parmConversionDate(inventStdCostConv.TransitionEndDate);
                inventStdCostConvCheckContract.parmInventStdCostConvRecId(inventStdCostConv.RecId);
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    inventStdCostConvCheckContract.parmInventTransCurrency(inventStdCostConv.InventTransCurrency_RU);
                }
                // </GEERU>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postReportRun</Name>
				<Source><![CDATA[
    protected void postReportRun(SrsReportExecutionInfo _executionInfo)
    {
        super(_executionInfo);

        if (callerForm && callerForm.args().name() == formStr(InventStdCostConv))
        {
            var callerDataSource = callerForm.dataSource(formDataSourceStr(InventStdCostConv, InventStdCostConvItem));
            if (callerDataSource)
            {
                callerDataSource.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStdCostConvCheckController construct()
    {
        return new InventStdCostConvCheckController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {        
        InventStdCostConvCheckController    controller  = new InventStdCostConvCheckController();
        controller.callerForm = _args.caller();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            controller.parmReportName(ssrsReportStr(InventStdCostConvCheck, ReportTransCur));
        }
        else
        {
        // </GEERU>
            controller.parmReportName(ssrsReportStr(InventStdCostConvCheck, Report));
        // <GEERU>
        }
        // </GEERU>
        controller.parmDialogCaption("@SYS119926");
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>