<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostClosingCancel</c> class cancels all adjustments made during an inventory closing.
/// </summary>
/// <remarks>
///    This is the parent class of a whole class hierarchy.For each different stage that will be done
///    during the cancellation process a separate child class exists.
/// </remarks>
abstract class InventCostClosingCancel extends RunBaseBatch
{
    // Caller parameters
    RecId               cancelClosingRecId;
    RecId               inventClosingRecId;

    // GLobal variables
    InventClosing       cancelClosing;
    InventClosing       inventClosing;

    Integer             logPointBegin;
    InventTransCurrency_RU  inventTransCurrency;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cancelClosingRecId,
        inventClosingRecId,
        inventTransCurrency
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        Integer  version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList]        = packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the status of the records that should be processed.
    /// </summary>
    /// <returns>
    ///    false, if one of the checks fails; otherwise, true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkStatus()
    {
        boolean ret = true;

        // Execute the appropriate operation
        if (cancelClosing.Active == NoYes::No)
        {
            error("@SYS117088" + int642str(cancelClosing.RecId));
            ret = false;
        }

        if (inventClosing.InventCostStatus == InventCostStatus::Ended)
        {
            error("@SYS117089" + int642str(inventClosing.RecId));
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main entry point for the child classes.
    /// </summary>
    /// <remarks>
    /// This abstract method must be overwritten in the child classes.It is the main entry point and will
    /// be called from the <see cref="M:InventCostClosingCancel.run" />.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract void execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postExecute</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postExecute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the parameters for inventory cost closing.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This will call the reread of the records that should be processed.
    /// </remarks>

    public boolean init()
    {
        boolean ret;

        logPointBegin = infologLine();

        ret = super();

        // Before I can start working, reread the records
        this.rereadRecords();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelClosingRecId</Name>
				<Source><![CDATA[
    public RecId parmCancelClosingRecId(RecId _cancelClosingRecId = cancelClosingRecId)
    {
        cancelClosingRecId = _cancelClosingRecId;
        return cancelClosingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventClosingRecId</Name>
				<Source><![CDATA[
    public RecId parmInventClosingRecId(RecId _inventClosingRecId = inventClosingRecId)
    {
        inventClosingRecId = _inventClosingRecId;
        return inventClosingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    final public InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record IDs for the inventory closing records from the database.
    /// </summary>
    /// <remarks>
    /// This is performed so that the current version of the records is always available.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void rereadRecords()
    {
        select firstonly cancelClosing where cancelClosing.RecId == cancelClosingRecId;
        select firstonly inventClosing where inventClosing.RecId == inventClosingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the main sequence of the inventory cost closing cancellation.
    /// </summary>
    /// <remarks>
    /// It will call into the <see cref="M:InventCostClosingCancel.execute" /> which will be overwritten on
    /// each child class.
    /// </remarks>
    public void run()
    {
        #OCCRetryCount

        try
        {
            if (!this.batchInfo())
            {
                throw error(strFmt("@SYS19306",funcName()));
            }

            ttsbegin;

            // Initialize parameters
            this.init();

            this.execute();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.updateClosingStopOnError();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.updateClosingStopOnError();
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                this.updateClosingStopOnError();
                throw;
            }
        }
        catch
        {
            this.updateClosingStopOnError();
            throw;
        }

        this.postExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// true if the batch job is run on the AOS server as the submitting user account; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists Infolog messages into the <c>InventClosingLog</c> table.
    /// </summary>
    /// <param name="_logType">
    ///    An enumeration that is used to categorize the messages; optional.
    /// </param>
    /// <param name="_logId">
    ///    A string that is used to categorize the messages; optional.
    /// </param>
    /// <remarks>
    ///    The log ID should be a unique string for each message when a high volume of messages is
    ///    generated.Messages will be displayed in the Infolog ordered by log ID.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void writeInfoLog(LogType _logType = LogType::Misc, LogId _logId = '')
    {
        Integer logPointNow = infologLine();
        if (logPointBegin + 1 <= logPointNow)
        {
            inventClosing.writeLog(infolog.copy(logPointBegin + 1, logPointNow), _logType, _logId);
            logPointBegin = logPointNow;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventCostClosingCancel construct(InventCostWorkType _inventCostWorkType)
    {
        switch (_inventCostWorkType)
        {
            case InventCostWorkType::Init :
                return InventCostClosingCancel_Init::construct();
            case InventCostWorkType::WorkInvent :
                return InventCostClosingCancel_WorkInvent::construct();
            case InventCostWorkType::WorkProd :
                return InventCostClosingCancel_WorkProd::construct();
            case InventCostWorkType::End  :
                return InventCostClosingCancel_End::construct();
            default :
                throw error(strFmt("@SYS19306", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description(InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        if (_inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
        {
            return "@GLS102379";
        }

        return "@SYS9528";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClosingStopOnError</Name>
				<Source><![CDATA[
    private void updateClosingStopOnError()
    {
        if (CostClosingReverseCheckDuplicateV2Flight::instance().isEnabled())
        {
            ttsbegin;
            select forupdate firstonly inventClosing where inventClosing.RecId == inventClosingRecId;
            if (inventClosing)
            {
                inventClosing.setStopRunning(NoYes::Yes, NoYes::Yes);
                inventClosing.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>