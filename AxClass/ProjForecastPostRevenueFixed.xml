<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostRevenueFixed</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjForecastPostRevenueFixed extends ProjForecastPostRevenue
{
    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDebitAccrued</Name>
				<Source><![CDATA[
    boolean checkDebitAccrued()
    {
        boolean ret = super();

        if (ret)
        {
            ProjCompletePrincip complPrinciple = isMultipleContractLineFeatureEnabled ? projRevProfile.CompletePrinciple : projGroup.CompletePrincip;
            if (complPrinciple == ProjCompletePrincip::CompletedContract)
            {
                ret = false;
            }

            if ((ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Revenue) &&
				!ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPFixedPrice) ||
                ((projTable.Type == ProjType::Investment || enableProjMultipleContractLinesForProjectFeature) && 
				!ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPInvestment))
            {
                ret = false;
            }

            if (this.forecastUpdateType() == ProjForecastUpdateType::Journals ||
                this.forecastUpdateType() == ProjForecastUpdateType::Invoice  ||
                this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    protected boolean checkEnterSalesAccrued()
    {
        boolean ret = true;
        ProjCompletePrincip complPrinciple = isMultipleContractLineFeatureEnabled ? projRevProfile.CompletePrinciple : projGroup.CompletePrincip;

        switch (this.forecastUpdateType())
        {
            case ProjForecastUpdateType::Journals:
                if (ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Revenue) &&
                    complPrinciple == ProjCompletePrincip::CompletedContract &&
                    !ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPFixedPrice)
                {
                    ret = true;
                }
                else
                {
                    ret = false;
                }
                break;

            case ProjForecastUpdateType::Invoice:
                ret = false;
                break;

            case ProjForecastUpdateType::Estimate:
                if (complPrinciple == ProjCompletePrincip::CompletedContract)
                {
                   ret = false;
                }
                break;

            case ProjForecastUpdateType::Elimination:
                if ((ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Revenue) &&
                    !ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPFixedPrice) ||
                    ((projTable.Type == ProjType::Investment || enableProjMultipleContractLinesForProjectFeature) &&
                    !ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPInvestment))
                {
                   ret = false;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    protected boolean checkEnterTurnover()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTurnoverAccrued</Name>
				<Source><![CDATA[
    protected boolean checkTurnoverAccrued()
    {
        boolean ret = true;

        if (ret)
        {
            if (this.checkDebitAccrued())
            {
                if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
                {
                    if (!projTrans.forecastEliminationDate())
                    {
                        ret = checkFailed("@SYS89885");
                    }
                }
            }

            if (this.checkCreditAccrued())
            {
                if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
                {
                    if (!projTrans.forecastEliminationDate())
                    {
                        ret = checkFailed("@SYS89885");
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTurnoverAccrued</Name>
				<Source><![CDATA[
    protected void postTurnoverAccrued()
    {
        MapEnumerator   fundingAllocationEnumerator;
        Map             splitTransQty;
        
        ProjCompletePrincip complPrinciple = isMultipleContractLineFeatureEnabled ? projRevProfile.CompletePrinciple : projGroup.CompletePrincip;
        ProjMatchingPrincip matchingPrinciple = isMultipleContractLineFeatureEnabled ? projRevProfile.MatchingPrinciple : projGroup.MatchingPrincip;
        ProjCategoryId productionCatId = isMultipleContractLineFeatureEnabled ? projRevProfile.ProductionCategoryId : projGroup.ProductionCategoryId;
        ProjCategoryId profitCatId = isMultipleContractLineFeatureEnabled ? projRevProfile.ProfitCategoryId : projGroup.ProfitCategoryId;

        if (this.checkDebitAccrued())
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Elimination:
                    this.ledgerTransDate(projTrans.forecastEliminationDate());
                    break;
                case ProjForecastUpdateType::Estimate:
                    this.ledgerTransDate(projTrans.transDate());
                    break;
                case ProjForecastUpdateType::Journals:
                    this.ledgerTransDate(projTrans.transDate());
                    break;
            }
            this.costSales(ProjCostSales::Sales);

            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transTurnoverMST(), projTrans.currencyIdSales()).getEnumerator();
            splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());

            while (fundingAllocationEnumerator.moveNext())
            {
                if (matchingPrinciple == ProjMatchingPrincip::SalesValue)
                {
                    this.postingType(LedgerPostingType::ProjSalesvalueOffset);
                    this.accountNum(projTrans.salesOffsetAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                }
                else
                {
                    if (matchingPrinciple == ProjMatchingPrincip::ProductionProfit)
                    {
                        if (projTrans.categoryId() == productionCatId)
                        {
                            this.postingType(LedgerPostingType::ProjWIPProduction);
                            this.accountNum(projTrans.wipProductionLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        }
                        else if (projTrans.categoryId() == profitCatId)
                        {
                            this.postingType(LedgerPostingType::ProjWIPProfit);
                            this.accountNum(projTrans.wipProfitLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        }
                    }
                }
                if (ProjFundingSource::isExternalFunding(fundingAllocationEnumerator.currentKey()))
                {
                    this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }
            }
        }

        if (this.checkCreditAccrued())
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Elimination:
                    this.ledgerTransDate(projTrans.forecastEliminationDate());
                    break;
                case ProjForecastUpdateType::Estimate:
                    this.ledgerTransDate(projTrans.transDate());
                    break;
                case ProjForecastUpdateType::Journals:
                    this.ledgerTransDate(projTrans.transDate());
                    break;
            }
            this.costSales(ProjCostSales::Sales);

            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.transTurnoverMST(),projTrans.currencyIdSales()).getEnumerator();
            splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
            while (fundingAllocationEnumerator.moveNext())
            {
                if (matchingPrinciple == ProjMatchingPrincip::SalesValue)
                {
                    if (complPrinciple == ProjCompletePrincip::CompletedContract ||
                        this.forecastUpdateType() == ProjForecastUpdateType::Estimate)
                    {
                        this.postingType(LedgerPostingType::ProjSalesvalue);
                        this.accountNum(projTrans.salesValueAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                    }
                    else
                    {
                        this.postingType(LedgerPostingType::ProjSalesvalueOffset);
                        this.accountNum(projTrans.salesOffsetAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                    }
                }
                else
                {
                    if (matchingPrinciple == ProjMatchingPrincip::ProductionProfit)
                    {
                        if (projTrans.categoryId() == productionCatId)
                        {
                            if (complPrinciple == ProjCompletePrincip::CompletedContract ||
                                this.forecastUpdateType() == ProjForecastUpdateType::Estimate)
                            {
                                this.postingType(LedgerPostingType::ProjAccruedTurnoverProd);
                                this.accountNum(projTrans.accruedTurnoverProdLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            }
                            else
                            {
                                this.postingType(LedgerPostingType::ProjWIPProduction);
                                this.accountNum(projTrans.wipProductionLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            }
                        }
                        else if (projTrans.categoryId() == profitCatId)
                        {
                            if (complPrinciple == ProjCompletePrincip::CompletedContract ||
                                this.forecastUpdateType()   == ProjForecastUpdateType::Estimate)
                            {
                                this.postingType(LedgerPostingType::ProJAccruedTurnoverProfit);
                                this.accountNum(projTrans.accruedTurnoverProfitLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            }
                            else
                            {
                                this.postingType(LedgerPostingType::ProjWIPProfit);
                                this.accountNum(projTrans.wipProfitLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            }
                        }
                    }
                }
                if (ProjFundingSource::isExternalFunding(fundingAllocationEnumerator.currentKey()))
                {
                    this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>