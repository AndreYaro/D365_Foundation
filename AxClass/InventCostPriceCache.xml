<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostPriceCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostPriceCache</c> class is used to hold the cost price for various combinations of
///    item and inventory dimensions.
/// </summary>
class InventCostPriceCache
{
    private boolean onhandOnly;
    Map     costPriceMap;       // Key is constructed from itemId and inventDimId. Holds the related cost price
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current cost price for the specified on hand.
    /// </summary>
    /// <param name="_inventSum">
    /// The on hand for which the cost price is retrieved.
    /// </param>
    /// <param name="_inventDim">
    /// The dimensions to be used to find the cost price in case of Blank dimensions.
    /// </param>
    /// <returns>
    /// The cost price.
    /// </returns>
    public CostPrice costPricePcs(InventSum _inventSum,
                                  InventDim _inventDim = null)
    {
        InventDimId     inventDimId = _inventSum.InventDimId;
        str             cacheKey;
        CostPrice       costPrice;

        if (!_inventSum.ItemId)
        {
            return 0;
        }

        if (!inventDimId)
        {
            inventDimId = InventDim::inventDimIdBlank();
            cacheKey = this.getCacheKey(_inventSum.ItemId, inventDimId, _inventDim.mapKey());
        }
        else
        {
            cacheKey = this.getCacheKey(_inventSum.ItemId, inventDimId);
        }

        if (costPriceMap.exists(cacheKey))
        {
            costPrice = costPriceMap.lookup(cacheKey);
        }
        else
        {
            InventDim inventDim = _inventSum.inventDim();

            if (_inventSum.inventTable().isItemInventoryOwnerActivated()
                && !inventDim.InventOwnerId_RU)
            {
                inventDim.InventOwnerId_RU = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;

                InventDimParm inventDimParm;
                inventDimParm.initFromInventDim(inventDim);

                costPrice = InventOnhand::newItemDim(_inventSum.ItemId, inventDim, inventDimParm).costPricePcs(onhandOnly);
            }
            else
            {
                costPrice = _inventSum.costPricePcs(onhandOnly);
            }

            costPriceMap.insert(cacheKey, costPrice);
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
        private str getCacheKey(
        ItemId          _itemId,
        InventDimId     _inventDimId,
        str             _dimKey = '')
    {
        return _itemId + (_inventDimId ? '#' + _inventDimId : '') + (_dimKey ?  '#'+ _dimKey : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        costPriceMap = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostPriceCache construct()
    {
        return new InventCostPriceCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnhandOnly</Name>
				<Source><![CDATA[
    public boolean parmOnhandOnly(boolean _onhandOnly = onhandOnly )
    {
        onhandOnly = _onhandOnly;
        return onhandOnly;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>