<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetterInvoiceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFormLetterInvoiceContract</c> class is used as the data contract class for the
/// <c>FormletterService</c> service when you post purchase order invoices.
/// </summary>
[DataContractAttribute]
class PurchFormLetterInvoiceContract extends PurchFormLetterContract
{
    str printerSettingsPromissoryNote;

    NoYes queryCriteria;
    NoYes editing;
    NoYes saveChanges;
    NoYes executingPaymentAuthorizationTask;

     // <GEERU>
    NoYes storno;
    NoYes fixedExchRate;
    ExchRate exchRate;
    PostingProfile postingProfile;
    InventProfileType_RU inventProfileType;
    boolean usePostingProfileFromContract;
    // </GEERU>

    str chooseLinesPendingInvoicePacked;
    boolean autoConsolidate;
    NoYes printEuVatInvoice;
    str printerSettingsEuVatInvoice;

    //List of parameters common for FormLetter contract classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    #define.CurrentVersion(2)
    #LOCALMACRO.ParmListPurchInvoice
        printerSettingsPromissoryNote,
        queryCriteria,
        editing,
        saveChanges,
        executingPaymentAuthorizationTask,
        chooseLinesPendingInvoicePacked
         // <GEERU>
        ,storno,
        fixedExchRate,
        exchRate,
        postingProfile,
        inventProfileType,
        usePostingProfileFromContract
        // </GEERU>
        // <GEEU>
        ,ltDocNumberingCode
        // </GEEU>
        ,autoConsolidate
        ,printEuVatInvoice
        ,printerSettingsEuVatInvoice
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCanUseParallelism</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the selected records are posted using batch parallelism.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean getCanUseParallelism()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus getDocumentStatus()
    {
        return DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        this.parmCreditRemaining(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListPurchInvoice] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoConsolidate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmAutoConsolidate(boolean _autoConsolidate = autoConsolidate)
    {
        autoConsolidate = _autoConsolidate;
        return autoConsolidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChooseLinesPendingInvoicePacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmChooseLinesPendingInvoicePacked(str _chooseLinesPendingInvoicePacked = chooseLinesPendingInvoicePacked)
    {
        chooseLinesPendingInvoicePacked = _chooseLinesPendingInvoicePacked;
        return chooseLinesPendingInvoicePacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditing</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmEditing(NoYes _editing = editing)
    {
        editing = _editing;
        return editing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ExchRate parmExchRate_RU(ExchRate _exchRate = exchRate)
    {
        exchRate = _exchRate;
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecutingPaymentAuthorizationTask</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmExecutingPaymentAuthorizationTask(NoYes _executingPaymentAuthorizationTask = executingPaymentAuthorizationTask)
    {
        executingPaymentAuthorizationTask = _executingPaymentAuthorizationTask;
        return executingPaymentAuthorizationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedExchRate_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmFixedExchRate_RU(NoYes _fixedExchRate = fixedExchRate)
    {
        fixedExchRate = _fixedExchRate;
        return fixedExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileType_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public InventProfileType_RU parmInventProfileType_RU(InventProfileType_RU _inventProfileType = inventProfileType)
    {
        inventProfileType = _inventProfileType;
        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PostingProfile parmPostingProfile_RU(PostingProfile _postingProfile = postingProfile)
    {
        postingProfile = _postingProfile;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsEuVatInvoice</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmPrinterSettingsEuVatInvoice(str _printerSettingsEuVatInvoice = printerSettingsEuVatInvoice)
    {
        printerSettingsEuVatInvoice = _printerSettingsEuVatInvoice;
        return printerSettingsEuVatInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsPromissoryNote</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmPrinterSettingsPromissoryNote(str _printerSettingsPromissoryNote = printerSettingsPromissoryNote)
    {
        printerSettingsPromissoryNote = _printerSettingsPromissoryNote;
        return printerSettingsPromissoryNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintEuVatInvoice</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmPrintEuVatInvoice(NoYes _printEuVatInvoice = printEuVatInvoice)
    {
        printEuVatInvoice = _printEuVatInvoice;
        return printEuVatInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCriteria</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmQueryCriteria(NoYes _queryCriteria = queryCriteria)
    {
        queryCriteria = _queryCriteria;
        return queryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveChanges</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmSaveChanges(NoYes _saveChanges = saveChanges)
    {
        saveChanges = _saveChanges;
        return saveChanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorno_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmStorno_RU(NoYes _storno = storno)
    {
        storno = _storno;
        return storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePostingProfileFromContract_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmUsePostingProfileFromContract_RU(boolean _usePostingProfileFromContract = usePostingProfileFromContract)
    {
        usePostingProfileFromContract = _usePostingProfileFromContract;
        return usePostingProfileFromContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);
        container packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListPurchInvoice, packedBase] = _packedClass;
                return super(packedBase);
            default:
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchFormLetterInvoiceContract construct()
    {
        return new PurchFormLetterInvoiceContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParallelismAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether document can post multithreaded in batch.
    /// </summary>
    /// <returns>True if document can post multithreaded in batch; otherwise, false.</returns>
    /// <remarks>Purchase invoice posting does not support multithreading in batch.</remarks>
    [Hookable(false)]
    public boolean isParallelismAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>