<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_RPayAlimonySheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The alimony sheet report.
/// </summary>
public class OxmlExcelReport_RPayAlimonySheet extends OXMLExcelReport_RPay implements BatchRetryable
{
    QueryRun reportQR;

    Counter    pageNumber, emplNumber, lineNumberPerPage;
    CustVendAC recipient;
    RPayStandardDeductionRecipientType recipientType;

    RPayTrans rPayTrans;
    RPayEmplStandardDeductionTable  rPayEmplStandardDeductionTable;

    TransDate   startPeriod,
                endPeriod,
                startPaymentDate,
                endPaymentDate;

    //sections
    #define.TableHeader("TableHeader")
    #define.TableBody("TableBody")
    #define.HeaderSection("HeaderSection")
    #define.PaymentSection("PaymentSection")
    #define.SignatureSection("SignatureSection")
    #define.PaysheetSection("PaysheetSection")
    #define.PaymentDoneSection("PaymentDoneSection")

    #define.NewPage("NewPage")

    //bookmarks
    #define.CompanyName("CompanyName")
    #define.CompanyOKPO("CompanyOKPO")
    #define.OKUD("OKUD")
    #define.PaysheetNum("PaysheetNum")
    #define.ReportDate("ReportDate")
    #define.StartPeriod("StartPeriod")
    #define.EndPeriod("EndPeriod")

    #define.FromToPeriod("FromToPeriod")
    #define.SumFrist("SumFirst")
    #define.Copek("Copek")
    #define.PrintRub("PrintRub")
    #define.Copek2("Copek2")

    #define.EmplNo("EmplNo")
    #define.EmplId("EmplId")
    #define.EmplName("EmplName")
    #define.EmplAmount("EmplAmount")

    #define.PagesCount("PagesCount")
    #define.DirectorText('DirectorText')
    #define.DirectorName('DirectorName')
    #define.ChAccName('ChAccName')
    #define.ChAccName2('ChAccName2')

    #define.MaxLinesPerPage(42)
    #define.WidthPage(106)

    #define.FileName('RPayAlimonySheet')

    EmplName            directorName, chAccName;
    OffTitleId_RU       directorJobTitle;
    Amount              sheetSum, emplSum;
    RPaySheetNum        paySheetNum;

    int currentState;
    #define.StateStart  (0)
    #define.StatePrint  (1)
    #define.StateEnd    (2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(14.4)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets copeks part of the sum.
    /// </summary>
    /// <returns>
    /// The copeks part of the sum.
    /// </returns>
    #define.Zero("0")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TempStr copek()
    {
        TempStr     tmp_str;

        tmp_str = strltrim(num2str(abs(decround(frac(sheetSum)*100,2)), 2, 0, 1, 0));

        return strlen(tmp_str) == 1 ? #Zero + tmp_str : tmp_str;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #WidthPage);

        directorName = OfficialsTable_RU::findDirector().getFIO();
        chAccName    = OfficialsTable_RU::findAccountant().getFIO();
        directorJobTitle = OfficialsTable_RU::findDirector().Title;

        currentState = #StateStart;

        while (reportQR.next())
        {
            rPayEmplStandardDeductionTable = reportQR.get(tableNum(RPayEmplStandardDeductionTable));
            rPayTrans = reportQR.get(tableNum(RPayTrans));

            if (emplSum == 0 || recipient != rPayEmplStandardDeductionTable.Recipient || recipientType != rPayEmplStandardDeductionTable.RecipientType)
            {
                recipient = rPayEmplStandardDeductionTable.Recipient;
                recipientType = rPayEmplStandardDeductionTable.RecipientType;

                if (emplSum > 0)
                {
                    sheetSum += emplSum;
                }

                emplSum = 0;
            }

            emplSum -= rPayTrans.Amount;
        }

        if (emplSum > 0)
        {
            sheetSum += emplSum;
        }

        emplSum = 0;

        emplNumber = 1;

        reportQR.reset();
        while (reportQR.next())
        {
            rPayEmplStandardDeductionTable = reportQR.get(tableNum(RPayEmplStandardDeductionTable));
            rPayTrans = reportQR.get(tableNum(RPayTrans));

            if (emplSum == 0 || recipient != rPayEmplStandardDeductionTable.Recipient || recipientType != rPayEmplStandardDeductionTable.RecipientType)
            {
                if (emplSum > 0)
                {
                    this.handleAction(this.defineActionSeq());
                }

                recipient = rPayEmplStandardDeductionTable.Recipient;
                recipientType = rPayEmplStandardDeductionTable.RecipientType;

                emplSum = 0;
            }

            emplSum -= rPayTrans.Amount;

            if (rPayTrans.Amount && !recipient)
            {
                warning(strfmt("@RUP6658", -rPayTrans.Amount, rPayEmplStandardDeductionTable.EmplId, RHRMPersonTable::findPayMainEmplId(rPayEmplStandardDeductionTable.EmplId).name()));
            }
        }

        if (emplSum > 0)
        {
            this.handleAction(this.defineActionSeq());
        }

        if (this.isSectionPrinted())
        {
            currentState = #StateEnd;

            this.handleAction(this.defineActionSeq());

            this.setPrintArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
    private container defineActionSeq()
    {
        container con;

        if (this.isNewPage())
        {
            con = [#NewPage, #TableHeader, #TableBody];
        }
        else
        if (currentState == #StateStart)
        {
            con = [#HeaderSection, #PaymentSection, #SignatureSection, #PaysheetSection, #NewPage, #TableHeader, #TableBody];
            currentState = #StatePrint;
        }
        else
        if (currentState == #StatePrint)
        {
            con = [#TableBody];
        }
        else
        if (currentState == #StateEnd)
        {
            con = [#NewPage, #PaymentDoneSection];
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + date2strUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report body
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        this.insertValueToSection(#EmplNo, emplNumber);
        this.insertValueToSection(#EmplId, recipient);
        this.insertValueToSection(#EmplName, this.recipientName());
        this.insertValueToSection(#EmplAmount, emplSum);

        emplNumber++;
        lineNumberPerPage++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #HeaderSection:
                this.fillHeader();
                break;
            case #SignatureSection:
                this.fillSignatures();
                break;
            case #PaysheetSection:
                this.fillPaysheet();
                break;
            case #PaymentSection:
                this.fillPayment();
                break;
            case #TableBody:
                this.fillBody();
                break;
            case #PaymentDoneSection:
                this.fillPaymentDone();
                break;
            case #NewPage:
                this.newPage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    private void fillHeader()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        this.insertValueToSection(#CompanyName, companyInfo.Name);
        this.insertValueToSection(#CompanyOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo));
        this.insertValueToSection(#OKUD, "0301011");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPayment</Name>
				<Source><![CDATA[
    private void fillPayment()
    {
        this.insertValueToSection(#FromToPeriod, this.printPayPeriod());
        this.insertValueToSection(#SumFrist, this.sumFirst());

        this.insertValueToSection(#Copek, this.copek());
        this.insertValueToSection(#PrintRub, this.printRub());
        this.insertValueToSection(#Copek2, this.copek());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentDone</Name>
				<Source><![CDATA[
    private void fillPaymentDone()
    {
        this.insertValueToSection(#PagesCount, pageNumber);
        this.insertValueToSection(#ChAccName2, chAccName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaysheet</Name>
				<Source><![CDATA[
    private void fillPaysheet()
    {
        this.insertValueToSection(#PaysheetNum, paysheetNum);
        this.insertValueToSection(#ReportDate, DateTimeUtil::date(DateTimeUtil::utcNow()));

        this.insertValueToSection(#StartPeriod, this.printStartDate());
        this.insertValueToSection(#EndPeriod, this.printEndDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSignatures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the signatures section of the report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSignatures()
    {
        this.insertValueToSection(#DirectorText, directorJobTitle);
        this.insertValueToSection(#DirectorName, directorName);
        this.insertValueToSection(#ChAccName, chAccName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
    private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#HeaderSection);
        this.addSection(#PaymentSection);
        this.addSection(#SignatureSection);
        this.addSection(#PaysheetSection);
        this.addSection(#TableHeader);
        this.addSection(#TableBody);
        this.addSection(#PaymentDoneSection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPage</Name>
				<Source><![CDATA[
    private boolean isNewPage()
    {
        return lineNumberPerPage > #MaxLinesPerPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    private void newPage()
    {
        pageNumber++;
        lineNumberPerPage = 0;
        document.insertPageBreak(currentRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPaymentDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmEndPaymentDate(TransDate _endPaymentDate = endPaymentDate)
    {
        endPaymentDate = _endPaymentDate;

        return endPaymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmEndPeriod(TransDate _endPeriod = endPeriod)
    {
        endPeriod  = _endPeriod ;

        return endPeriod ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaysheetNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RpaySheetNum parmPaysheetNum(RpaySheetNum _paySheetNum = paySheetNum)
    {
        paySheetNum = _paySheetNum;

        return paySheetNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartPaymentDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmStartPaymentDate(TransDate _startPaymentDate = startPaymentDate)
    {
        startPaymentDate = _startPaymentDate;

        return startPaymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmStartPeriod(TransDate _startPeriod = startPeriod)
    {
        startPeriod = _startPeriod;

        return startPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEndDate</Name>
				<Source><![CDATA[
    private TransDate printEndDate()
    {
        return endmth(this.parmEndPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPayPeriod</Name>
				<Source><![CDATA[
    #define.FromTo    ("с \%1 по \%2")
    #define.DateFormat('"\%1" \%2 \%3 года')

    private TempStr printPayPeriod()
    {
        TransDate startPayment = startPaymentDate,
                  endPayment   = endPaymentDate;
        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        return strfmt(#FromTo,
                      strfmt(#DateFormat, dayofmth(startPayment), converter.date2strMonth(startPayment), year(startPayment)),
                      strfmt(#DateFormat, dayofmth(endPayment),   converter.date2strMonth(endPayment),   year(endPayment)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printRub</Name>
				<Source><![CDATA[
    private Integer printRub()
    {
        return any2Int(abs(sheetSum - frac(sheetSum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printStartDate</Name>
				<Source><![CDATA[
    private TransDate printStartDate()
    {
        return dateStartMth(this.parmStartPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientName</Name>
				<Source><![CDATA[
    private Name recipientName()
    {
        Name receiverName;

        switch (recipientType)
        {
            case RPayStandardDeductionRecipientType::Cust:
                receiverName = CustTable::find(recipient).name();
                break;

            case RPayStandardDeductionRecipientType::Vend:
                receiverName = VendTable::find(recipient).name();
                break;

            default :
                receiverName = RHRMPersonTable::findPayMainEmplId(recipient).name();
                break;
        }

        return receiverName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the query to run.
    /// </summary>
    /// <param name="_qr">
    /// The <c>QueryRun</c> class object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setQueryRun(QueryRun _qr)
    {
        reportQR = _qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumFirst</Name>
				<Source><![CDATA[
    private TempStr sumFirst()
    {
        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        return converter.numeralsToTxt(sheetSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayAlimonySheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return SysQuery::countTotal(reportQR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>