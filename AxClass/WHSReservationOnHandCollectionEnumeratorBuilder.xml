<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReservationOnHandCollectionEnumeratorBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for building enumerators over a collection of on-hand used for reservations.
/// </summary>
public class WHSReservationOnHandCollectionEnumeratorBuilder
{
    private WHSReservationHierarchyLevel                                batchLevel;
    private WHSReservationHierarchyLevel                                locationLevel;
    private List                                                        reservationHierarchyAllDimensionsList;
    private boolean                                                     isOwnerActive;
    private boolean                                                     hasDeterminedOwnerDimensionActive;
    private boolean                                                     hasDeterminedBatchDimensionActive;
    private boolean                                                     isBatchDimensionActive;    
    protected WHSReservationOnHandCollectionEnumeratorBuilderParameters parameters;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the class with the parameters.
    /// </summary>
    /// <param name = "_parameters">The parameters used by the class.</param>
    /// <returns>A new instance of the class.</returns>
    public static WHSReservationOnHandCollectionEnumeratorBuilder newFromParameters(WHSReservationOnHandCollectionEnumeratorBuilderParameters _parameters)
    {
        WHSReservationOnHandCollectionEnumeratorBuilder builder = new WHSReservationOnHandCollectionEnumeratorBuilder();
        
        builder.parameters = _parameters;

        return builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationLevel</Name>
				<Source><![CDATA[
    private WHSReservationHierarchyLevel locationLevel()
    {
        if (!locationLevel)
        {
            locationLevel = WHSReservationHierarchyInventDimUtil::getInventDimFieldLevel(this.reservationHierarchyAllDimensionsList(), fieldNum(InventDim, wmsLocationId));
        }
        
        return locationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOwnerActive</Name>
				<Source><![CDATA[
    private boolean isOwnerActive()
    {
        if (!hasDeterminedOwnerDimensionActive)
        {
            isOwnerActive= parameters.movement.inventTable().isItemInventoryOwnerActivated() ? true : false;
            hasDeterminedOwnerDimensionActive = true;
        }

        return isOwnerActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyAllDimensionsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list containing all inventory dimensions in the current item's reservation hierarchy.
    /// </summary>
    /// <returns>
    /// A <c>List</c> containing the inventory dimensions in the hierarchy.
    /// </returns>
    private List reservationHierarchyAllDimensionsList()
    {
        if (reservationHierarchyAllDimensionsList == null)
        {
            reservationHierarchyAllDimensionsList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(parameters.movement.inventTable(), WHSReservationHierarchySortOrder::BottomUp);
        }

        return reservationHierarchyAllDimensionsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumAvailableQtyFilterForSamesBatchReservation</Name>
				<Source><![CDATA[
    private InventQty minimumAvailableQtyFilterForSamesBatchReservation()
    {
        if (this.isBatchDimensionActive() && parameters.movement.pdsSameLotReservation() && this.inventBatchLevel() == parameters.reservationHierarchyLevelOnhand)
        {
            return parameters.movement.transIdSum().onOrder();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBatchSpecificInventReserveQueryBuilder</Name>
				<Source><![CDATA[
    private WHSInventReserveQueryBuilder newBatchSpecificInventReserveQueryBuilder()
    {
        if (this.isOwnerActive())
        {
            return this.newInventOwnerBatchReserveExcludeSumWithDeltaRecordsQueryBuilder();
        }
        
        return this.newInventBatchReserveExcludeSumWithDeltaRecordsQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNonBatchSpecificInventReserveQueryBuilder</Name>
				<Source><![CDATA[
    private WHSInventReserveQueryBuilder newNonBatchSpecificInventReserveQueryBuilder()
    {
        if (this.isOwnerActive())
        {
            return this.newInventOwnerReserveExcludeSumWithDeltaRecordsQueryBuilder();
        }
        
        return this.newExcludeSumWithDeltaRecordsQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventReserveQueryBuilder</Name>
				<Source><![CDATA[
    private WHSInventReserveQueryBuilder newInventReserveQueryBuilder()
    {
        if (this.useBatchSpecificReservation())
        {
            return this.newBatchSpecificInventReserveQueryBuilder();
        }
        
        return this.newNonBatchSpecificInventReserveQueryBuilder();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBatchSpecificInventReserveDeltaQueryBuilder</Name>
				<Source><![CDATA[
    private WHSInventReserveDeltaQueryBuilder newBatchSpecificInventReserveDeltaQueryBuilder()
    {
        if (this.isOwnerActive())
        {
            return this.newInventOwnerBatchReserveDeltaQueryBuilder();
        }
        
        return this.newInventBatchReserveDeltaQueryBuilder();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNonBatchSpecificInventReserveDeltaQueryBuilder</Name>
				<Source><![CDATA[
    private WHSInventReserveDeltaQueryBuilder newNonBatchSpecificInventReserveDeltaQueryBuilder()
    {
        if (this.isOwnerActive())
        {
            return this.newInventOwnerReserveDeltaQueryBuilder();
        }
        
        return this.newInventReserveDeltaQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnHandEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an on-hand enumerator that can be used for reservation.
    /// </summary>
    /// <returns>>An on-hand enumerator that can be used for reservation</returns>
    public WHSInventOnHandCollectionEnumerator buildOnHandEnumerator()
    {
        WHSInventReserveQueryBuilder whsInventReserveQueryBuilder = this.newInventReserveQueryBuilder();
        
        if (parameters.mustIncludeDelta)
        {
            return this.buildOnHandEnumeratorIncludeDelta(whsInventReserveQueryBuilder);
        }
        
        return this.newInventReserveQueryCollection(whsInventReserveQueryBuilder).getEnumerator() as WHSInventOnHandCollectionEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnHandEnumeratorIncludeDelta</Name>
				<Source><![CDATA[
    private WHSInventOnHandCollectionEnumerator buildOnHandEnumeratorIncludeDelta(WHSInventReserveQueryBuilder _inventReserveQueryBuilder)
    {
        if (this.useBatchSpecificReservation())
        {
            return this.newInventBatchReserveAndDeltaQryCollection(_inventReserveQueryBuilder, this.newBatchSpecificInventReserveDeltaQueryBuilder()).getEnumerator() as WHSInventOnHandCollectionEnumerator;
        }
        
        return this.newInvReserveAndDeltaQueryCollection(_inventReserveQueryBuilder, this.newNonBatchSpecificInventReserveDeltaQueryBuilder()).getEnumerator() as WHSInventOnHandCollectionEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useBatchSpecificReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch specific reservation should be used.
    /// </summary>
    /// <returns>true if batch specific reservation should be used; otherwise, false.</returns>
    protected boolean useBatchSpecificReservation()
    {
        return (this.isBatchDimensionActive()
            &&  this.inventBatchLevel() <= parameters.reservationHierarchyLevelOnhand
            &&  (this.inventBatchLevel() <  this.locationLevel()
                || !parameters.onlyReserveOnWHSEnabledWarehouses));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventReserveQueryCollection</Name>
				<Source><![CDATA[
    private WHSInventReserveQueryCollection newInventReserveQueryCollection(WHSInventReserveQueryBuilder _inventReserveQueryBuilder)
    {
        return WHSInventReserveQueryCollection::newFromQuery(_inventReserveQueryBuilder.buildOnHandQuery(), _inventReserveQueryBuilder.sumTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInvReserveAndDeltaQueryCollection</Name>
				<Source><![CDATA[
    private WHSInvReserveAndDeltaQueryCollection newInvReserveAndDeltaQueryCollection(
        WHSInventReserveQueryBuilder        _inventReserveQueryBuilder,
        WHSInventReserveDeltaQueryBuilder   _inventReserveDeltaQueryBuilder)
    {
        return WHSInvReserveAndDeltaQueryCollection::newFromQueries(_inventReserveQueryBuilder.buildOnHandQuery(),
                                                                    _inventReserveQueryBuilder.sumTableId(),
                                                                    _inventReserveDeltaQueryBuilder.buildOnHandQuery(),
                                                                    _inventReserveDeltaQueryBuilder.sumTableId());
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventOwnerBatchReserveExcludeSumWithDeltaRecordsQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the class which will exclude delta records when owner and batch specific reservation is needed.
    /// </summary>
    /// <returns>
    /// A new instance of <c>WHSInventReserveQueryBuilder</c> class based on the arguments.
    /// </returns>   
    [Replaceable(true)]
    protected WHSInventReserveQueryBuilder newInventOwnerBatchReserveExcludeSumWithDeltaRecordsQueryBuilder()
    {
        return WHSInventOwnerBatchReserveQueryBuilder::newExcludeSumWithDeltaRecords(parameters.movement.itemId(),
                                                                                     parameters.inventDimOnHandCriteria,
                                                                                     parameters.inventDimParmCriteria,
                                                                                     parameters.reservationHierarchyLevelOnhand,
                                                                                     parameters.ttsId,
                                                                                     parameters.includeOrdered,
                                                                                     parameters.includePhysical,
                                                                                     this.minimumAvailableQtyFilterForSamesBatchReservation(),
                                                                                     parameters.onlyReserveOnWHSEnabledWarehouses);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatchReserveExcludeSumWithDeltaRecordsQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>WHSInventReserveQueryBuilder</c> class which will exclude delta records when batch specific reservation is needed.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSInventReserveQueryBuilder</c> class based on the arguments.
    /// </returns>
    [Replaceable(true)]
    protected WHSInventReserveQueryBuilder newInventBatchReserveExcludeSumWithDeltaRecordsQueryBuilder()
    {
        return WHSInventBatchReserveQueryBuilder::newExcludeSumWithDeltaRecords(parameters.movement.itemId(),
                                                                                parameters.inventDimOnHandCriteria,
                                                                                parameters.inventDimParmCriteria,
                                                                                parameters.reservationHierarchyLevelOnhand,
                                                                                parameters.ttsId,
                                                                                parameters.includeOrdered,
                                                                                parameters.includePhysical,
                                                                                this.minimumAvailableQtyFilterForSamesBatchReservation(),
                                                                                parameters.onlyReserveOnWHSEnabledWarehouses);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventOwnerReserveExcludeSumWithDeltaRecordsQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>WHSInventReserveQueryBuilder</c> class based for owner specific scenarios which will exclude delta records.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSInventReserveQueryBuilder</c> class.
    /// </returns>
    [Replaceable(true)]
    protected WHSInventReserveQueryBuilder newInventOwnerReserveExcludeSumWithDeltaRecordsQueryBuilder()
    {
        return WHSInventOwnerReserveQueryBuilder::newExcludeSumWithDeltaRecords(parameters.movement.itemId(),
                                                                                parameters.inventDimOnHandCriteria,
                                                                                parameters.inventDimParmCriteria,
                                                                                parameters.reservationHierarchyLevelOnhand,
                                                                                parameters.ttsId,
                                                                                parameters.includeOrdered,
                                                                                parameters.includePhysical,
                                                                                parameters.onlyReserveOnWHSEnabledWarehouses);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExcludeSumWithDeltaRecordsQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the class <c>WHSInventReserveQueryBuilder</c> which will exclude delta records.
    /// </summary>
    /// <returns>
    /// A new instance of this class based on the arguments.
    /// </returns>
    [Replaceable(true)]
    protected WHSInventReserveQueryBuilder newExcludeSumWithDeltaRecordsQueryBuilder()
    {
        return WHSInventReserveQueryBuilder::newExcludeSumWithDeltaRecords(parameters.movement.itemId(),
                                                                           parameters.inventDimOnHandCriteria,
                                                                           parameters.inventDimParmCriteria,
                                                                           parameters.reservationHierarchyLevelOnhand,
                                                                           parameters.ttsId,
                                                                           parameters.includeOrdered,
                                                                           parameters.includePhysical,
                                                                           this.isBatchDimensionActive(),
                                                                           parameters.onlyReserveOnWHSEnabledWarehouses);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatchChooser</Name>
				<Source><![CDATA[
    private InventBatchChooser newInventBatchChooser(ItemId _itemId)
    {
        return InventBatchChooser::construct(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatchReserveAndDeltaQryCollection</Name>
				<Source><![CDATA[
    private WHSInvBatchReserveAndDeltaQryCollection newInventBatchReserveAndDeltaQryCollection(
        WHSInventReserveQueryBuilder        _inventReserveQueryBuilder,
        WHSInventReserveDeltaQueryBuilder   _inventReserveDeltaQueryBuilder)
    {
        return WHSInvBatchReserveAndDeltaQryCollection::newFromQueries(_inventReserveQueryBuilder.buildOnHandQuery(),
                                                                        _inventReserveQueryBuilder.sumTableId(),
                                                                        _inventReserveDeltaQueryBuilder.buildOnHandQuery(),
                                                                        _inventReserveDeltaQueryBuilder.sumTableId(),
                                                                        this.newInventBatchChooser(_inventReserveDeltaQueryBuilder.parmItemId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventReserveDeltaQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>WHSInventReserveDeltaQueryBuilder</c> class which will select delta records.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSInventReserveDeltaQueryBuilder</c> class based.
    /// </returns>
    [Replaceable(true)]
    protected WHSInventReserveDeltaQueryBuilder newInventReserveDeltaQueryBuilder()
    {
        return WHSInventReserveDeltaQueryBuilder::newFromParameters(parameters.movement.itemId(),
                                                                    parameters.inventDimOnHandCriteria,
                                                                    parameters.inventDimParmCriteria,
                                                                    parameters.reservationHierarchyLevelOnhand,
                                                                    parameters.ttsId,
                                                                    parameters.includeOrdered,
                                                                    parameters.includePhysical,
                                                                    this.isBatchDimensionActive(),
                                                                    parameters.onlyReserveOnWHSEnabledWarehouses);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventOwnerReserveDeltaQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>WHSInventReserveDeltaQueryBuilder</c> class for owner specific scenarios which will select delta records.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSInventReserveDeltaQueryBuilder</c> class.
    /// </returns>
    [Replaceable(true)]
    protected WHSInventReserveDeltaQueryBuilder newInventOwnerReserveDeltaQueryBuilder()
    {
        return WHSInventOwnerReserveDeltaQueryBuilder::newFromParameters(parameters.movement.itemId(),
                                                                         parameters.inventDimOnHandCriteria,
                                                                         parameters.inventDimParmCriteria,
                                                                         parameters.reservationHierarchyLevelOnhand,
                                                                         parameters.ttsId,
                                                                         parameters.includeOrdered,
                                                                         parameters.includePhysical,
                                                                         parameters.onlyReserveOnWHSEnabledWarehouses);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatchReserveDeltaQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>WHSInventReserveDeltaQueryBuilder</c> class which will select delta records for when batch specific reservation is needed.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSInventReserveDeltaQueryBuilder</c> class.
    /// </returns>
    [Replaceable(true)]
    protected WHSInventReserveDeltaQueryBuilder newInventBatchReserveDeltaQueryBuilder()
    {
    
        return WHSInvBatchReserveDeltaQueryBuilder::newFromParameters(parameters.movement.itemId(),
                                                                      parameters.inventDimOnHandCriteria,
                                                                      parameters.inventDimParmCriteria,
                                                                      parameters.reservationHierarchyLevelOnhand,
                                                                      parameters.ttsId,
                                                                      parameters.includeOrdered,
                                                                      parameters.includePhysical,
                                                                      this.minimumAvailableQtyFilterForSamesBatchReservation(),
                                                                      parameters.onlyReserveOnWHSEnabledWarehouses);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventOwnerBatchReserveDeltaQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the class <c>WHSInventReserveDeltaQueryBuilder</c> based on the arguments for owner specific scenarios which will include delta records.
    /// </summary>
    /// <param name="_inventDimOnHandCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevelOnhand">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_ttsId">
    /// The current transaction id.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating if available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating if available physical should be included.
    /// </param>
    /// <param name="_sortByBatch">
    /// Determines if the query should be sorted by batch.
    /// </param>
    /// <returns>
    /// A new instance of this class based on the arguments.
    /// </returns>
    [Replaceable(true)]
    protected WHSInventReserveDeltaQueryBuilder newInventOwnerBatchReserveDeltaQueryBuilder()
    {
        return WHSInventOwnerBatchReserveDeltaQueryBuilder::newFromParameters(parameters.movement.itemId(),
                                                                              parameters.inventDimOnHandCriteria,
                                                                              parameters.inventDimParmCriteria,
                                                                              parameters.reservationHierarchyLevelOnhand,
                                                                              parameters.ttsId,
                                                                              parameters.includeOrdered,
                                                                              parameters.includePhysical,
                                                                              this.isBatchDimensionActive(),
                                                                              parameters.onlyReserveOnWHSEnabledWarehouses);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchDimensionActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item has the batch dimension enabled.
    /// </summary>
    /// <returns>true if the item has the batch dimension enabled; otherwise, false.</returns>
    private boolean isBatchDimensionActive()
    {
        if (!hasDeterminedBatchDimensionActive)
        {
            isBatchDimensionActive = parameters.movement.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim, InventBatchId)) ? true : false;
            hasDeterminedBatchDimensionActive = true;
        }

        return isBatchDimensionActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the level of batch number in the reservation hierarchy of the current item.
    /// </summary>
    /// <returns>
    /// A <c>WHSReservationHierarchyLevel</c> value.
    /// </returns>
    private WHSReservationHierarchyLevel inventBatchLevel()
    {
        if (!batchLevel)
        {
            batchLevel = WHSReservationHierarchyInventDimUtil::getInventDimFieldLevel(this.reservationHierarchyAllDimensionsList(), fieldNum(InventDim, InventBatchId));
        }

        return batchLevel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>