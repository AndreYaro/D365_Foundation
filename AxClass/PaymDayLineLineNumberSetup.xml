<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymDayLineLineNumberSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymDayLineLineNumberSetup</c> class handles the setup requirements for populating line numbers on existing <c>PaymDayLine</c> records.
/// </summary>
[SysSetupTableAttribute(tableStr(PaymDayLine))]
[SysSetupConfigKey(configurationKeyStr(LedgerBasic))]
internal final class PaymDayLineLineNumberSetup extends SysSetupAsync implements SysSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData()
    {
        this.updateLineNumbers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineNumbers</Name>
				<Source><![CDATA[
    private void updateLineNumbers()
    {
        PaymDay paymDay;
        PaymDayLine paymDayLine;

        while select crosscompany PaymDayId from paymDay
            order by paymDay.DataAreaId
            exists join paymDayLine
            where paymDayLine.PaymDayId == paymDay.PaymDayId
                && paymDayLine.LineNumber == 0
        {
            changecompany (paymDay.DataAreaId)
            {
                #OCCRetryCount;
                PaymDayLine paymDayLineUpdate;

                while select forupdate LineNumber from paymDayLineUpdate
                    order by paymDayLineUpdate.RecId
                    where paymDayLineUpdate.PaymDayId == paymDay.PaymDayId
                        && paymDayLineUpdate.LineNumber == 0
                {
                    try
                    {
                        ttsbegin;
                        
                        paymDayLineUpdate.LineNumber = PaymDayLine::getNextLineNumber(paymDay.PaymDayId);
                        paymDayLineUpdate.update();
                        
                        ttscommit;
                    }
                    catch (Exception::Deadlock)
                    {
                        ttsabort;

                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::Deadlock;
                        }
                        else
                        {
                            sleep(xSession::currentRetryCount() * RandomGenerate::construct().randomInt(50, 1000));
                            retry;
                        }
                    }
                    catch (Exception::DuplicateKeyException)
                    {
                        ttsabort;

                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::DuplicateKeyException;
                        }
                        else
                        {
                            retry;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>