<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdStartUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdUpdStartUp</c> class is used for starting a production order.
/// </summary>
/// <remarks>
/// You can start a production order by using this class. You can select whether you want to post
/// picking list or route card journals or any other parameters. You can do this using
/// <c>ProdParmStartUp</c> class.
/// </remarks>
public class ProdUpdStartUp extends ProdUpd
{
    ProdParmStartUp         prodParmStartUp;
    ProdJournalId           printJournalId;
    List                    listBOMJournalId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getListOfBOMJournals</Name>
				<Source><![CDATA[
    List getListOfBOMJournals()
    {
        switch(prodParmStartUp.bomJournalSplit)
        {
            case ProdBOMJournalSplit::No:
                return this.listOfBOMJournals_ProdBOMJournalSplitNo();

            case ProdBOMJournalSplit::RouteType:
                return this.listOfBOMJournals_ProdBOMJournalSplitRouteType();

            case ProdBOMJournalSplit::Operation:
                return this.listOfBOMJournals_ProdBOMJournalSplitOperation();
        }
        return new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>listOfBOMJournals_ProdBOMJournalSplitNo</Name>
				<Source><![CDATA[
    private List listOfBOMJournals_ProdBOMJournalSplitNo()
    {
        List listBOMJournals = new List(Types::Class);
        Set setInventTransId = new Set(Types::String);

        Query query = this.buildBOMJournalsQuery();
        this.addJournalsToList(new QueryRun(query), listBOMJournals, setInventTransId, true);

        return listBOMJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listOfBOMJournals_ProdBOMJournalSplitRouteType</Name>
				<Source><![CDATA[
    private List listOfBOMJournals_ProdBOMJournalSplitRouteType()
    {
        List listBOMJournals = new List(Types::Class);
        Set setInventTransId = new Set(Types::String);
        int loop = 1;

        while (loop < 3)
        {
            Query query = this.buildBOMJournalsQueryForRouteType(loop == 1 ? RouteOprType::Standard : RouteOprType::Vendor);
            this.addJournalsToList(new QueryRun(query), listBOMJournals, setInventTransId);

            loop++;
        }

        return listBOMJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listOfBOMJournals_ProdBOMJournalSplitOperation</Name>
				<Source><![CDATA[
    private List listOfBOMJournals_ProdBOMJournalSplitOperation()
    {
        List listBOMJournals = new List(Types::Class);
        Set setInventTransId = new Set(Types::String);
        ProdBOM prodBOMGrpOprNum;

        while select OprNum from prodBOMGrpOprNum
            group by OprNum
            where prodBOMGrpOprNum.ProdId    == prodTable.ProdId
               && prodBOMGrpOprNum.OprNum    >= prodParmStartUp.FromOprNum
               && (!prodParmStartUp.ToOprNum
                   || prodBOMGrpOprNum.OprNum <= prodParmStartUp.ToOprNum)
        {
            Query query = this.buildBOMJournalsQueryForOperation(prodBOMGrpOprNum);
            this.addJournalsToList(new QueryRun(query), listBOMJournals, setInventTransId);
        }

        return listBOMJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournalsToList</Name>
				<Source><![CDATA[
    private void addJournalsToList(QueryRun _queryRun, List _listBOMJournals, Set _setInventTransId, boolean _skipItemValidation = false)
    {
        ProdBOM prodBOM;
        RecordLinkList recListProdBOM = new RecordLinkList();

        while (_queryRun.next())
        {
            prodBOM = _queryRun.get(tableNum(ProdBOM));
            if (!_skipItemValidation)
            {
                this.validateProdBOMItemId(_setInventTransId, prodBOM);
            }
            recListProdBOM.ins(prodBOM);
        }

        if (recListProdBOM.len())
        {
            _listBOMJournals.addEnd(recListProdBOM);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProdBOMItemId</Name>
				<Source><![CDATA[
    private void validateProdBOMItemId(Set _setInventTransId, ProdBOM _prodBom)
    {
        if (!_setInventTransId.add(_prodBom.InventTransId))
        {
            SysInfoAction_Formrun infoActionProdBOM = SysInfoAction_Formrun::newFormname(formStr(ProdBOM));
            if (prodParmStartUp.bomJournalSplit == ProdBOMJournalSplit::RouteType)
            {
                infoActionProdBOM.parmCallerBuffer(prodTable);
            }
            else
            {
                infoActionProdBOM.parmCallerBuffer(_prodBom);
            }
            throw error(strFmt("@SYS88785", _prodBom.ItemId),'', infoActionProdBOM);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBOMJournalsQuery</Name>
				<Source><![CDATA[
    private Query createBOMJournalsQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProdBOM = query.addDataSource(tableNum(ProdBOM));
        qbdsProdBOM.update(true);

        qbdsProdBOM.addRange(fieldNum(ProdBOM, ProdId)).value(queryValue(prodTable.ProdId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOprNumRangeToBomJournalsQuery</Name>
				<Source><![CDATA[
    private void addOprNumRangeToBomJournalsQuery(Query _query)
    {
        QueryBuildDataSource qbdsProdBOM = _query.dataSourceTable(tableNum(ProdBOM));

        if (prodParmStartUp.ToOprNum)
        {
            qbdsProdBOM.addRange(fieldNum(ProdBOM, OprNum)).value(SysQuery::range(prodParmStartUp.FromOprNum, prodParmStartUp.ToOprNum));
        }
        else
        {
            qbdsProdBOM.addRange(fieldNum(ProdBOM, OprNum)).value(SysQuery::range(prodParmStartUp.FromOprNum, intMax()));
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBOMJournalsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for BOM journals when <c>ProdBOMJournalSplit</c> is <c>ProdBOMJournalSplit::No</c>.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> object for BOM journals.
    /// </returns>
    protected Query buildBOMJournalsQuery()
    {
        Query query = this.createBOMJournalsQuery();

        this.addOprNumRangeToBomJournalsQuery(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBOMJournalsQueryForRouteType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for BOM journals when <c>ProdBOMJournalSplit</c> is <c>ProdBOMJournalSplit::RouteType</c>.
    /// </summary>
    /// <param name = "_routeOprType">
    /// The <c>RouteOprType</c> value to filter on.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object for BOM journals.
    /// </returns>
    protected Query buildBOMJournalsQueryForRouteType(RouteOprType _routeOprType)
    {
        Query query = this.createBOMJournalsQuery();

        this.addOprNumRangeToBomJournalsQuery(query);

        QueryBuildDataSource qbdsProdRoute = query.dataSourceTable(tableNum(ProdBOM)).addDataSource(tableNum(ProdRoute));
        qbdsProdRoute.joinMode(JoinMode::ExistsJoin);
        qbdsProdRoute.addLink(fieldNum(ProdBOM, ProdId), fieldNum(ProdRoute, ProdId));
        qbdsProdRoute.addLink(fieldNum(ProdBOM, OprNum), fieldNum(ProdRoute, OprNum));
        qbdsProdRoute.addRange(fieldNum(ProdRoute, RouteType)).value(queryValue(_routeOprType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBOMJournalsQueryForOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for BOM journals when <c>ProdBOMJournalSplit</c> is <c>ProdBOMJournalSplit::Operation</c>.
    /// </summary>
    /// <param name = "_prodBOMGrpOprNum">
    /// The <c>ProdBOM</c> record to filter on.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object for BOM journals.
    /// </returns>
    protected Query buildBOMJournalsQueryForOperation(ProdBOM _prodBOMGrpOprNum)
    {
        Query query = this.createBOMJournalsQuery();
        query.dataSourceTable(tableNum(ProdBOM)).addRange(fieldNum(ProdBOM, OprNum)).value(queryValue(_prodBOMGrpOprNum.OprNum));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        listBOMJournalId =  new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer parmParmBuffer(ParmBuffer _prodParmStartUp = prodParmStartUp)
    {
        if (!_prodParmStartUp.RecId)
        {
            throw error("@SYS25332");
        }

        prodParmStartUp = _prodParmStartUp;
        return prodParmStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintJournalId</Name>
				<Source><![CDATA[
    public ProdJournalId parmPrintJournalId(ProdJournalId _journalId = printJournalId)
    {
        printJournalId  = _journalId;
        return printJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateCoBys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts batch order related co/by product production.
    /// </summary>
    public void pmfUpdateCoBys()
    {
        PmfProdCoBy  prodCoBy;

        while select forupdate prodCoBy
            where prodCoBy.ProdId == prodTable.ProdId
                && prodCoBy.EndConsump == NoYes::No
        {
            if (prodParmStartUp.StartUpProduction)
            {
                prodCoBy.type().runStartUp(
                    prodParmStartUp.StartUpQty,
                    prodParmStartUp.PostDate,
                    prodParmStartUp.PdsCWStartupQty);

                this.addUpdateRec(prodCoBy);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    public void printout()
    {
        if (prodParmStartUp.PrintPickList == NoYes::Yes)
        {
            if (listBOMJournalId.empty())
            {
                info("@SYS95082");
                info(strFmt("@SYS58533", "@SYS77792"));
                return;
            }

            ListEnumerator listEnumerator = listBOMJournalId.getEnumerator();
            while (listEnumerator.moveNext())
            {
                this.parmPrintJournalId(listEnumerator.current());

                ProdUpd::printoutReportFromMenuItem(menuitemOutputStr(ProdPicklist), this, this.parmParmBuffer());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the start of a production order.
    /// </summary>
    /// <remarks>
    ///    Before the method is run, the start parameters should be set up by using one of the following
    ///    methods:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             The <c>newParmBuffer</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>newProdId</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>initParmBufferFromRepFin</c> method.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    void run()
    {
        #OCCRetryCount

        setPrefix(ProdMultiStartUp::description());
        setPrefix(#PreFixField(ProdParmStartUp,ProdId));

        try
        {
            using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::UpdateStartUpRun, prodParmStartUp.RecId))
            {
                ttsbegin;

                if (prodParmStartUp.BOMAutoConsump == BOMAutoConsump::Always
                    || prodParmStartUp.BOMAutoConsump == BOMAutoConsump::FlushingPrincip)
                {
                    InventHandlingQty startupHandlingQty;

                    if (PdsGlobal::pdsIsCWItem(ProdTable::find(prodParmStartUp.ProdId).ItemId))
                    {
                        startupHandlingQty = prodParmStartUp.PdsCWStartupQty;
                    }
                    else
                    {
                        startupHandlingQty = prodParmStartUp.StartUpQty;
                    }

                    WHSProdTable::pickMoreHandlingQty(prodParmStartUp.ProdId,
                        startupHandlingQty,
                        prodParmStartUp.FromOprNum,
                        prodParmStartUp.ToOprNum,
                        prodParmStartUp.BomAutoConsump == BOMAutoConsump::FlushingPrincip,
                        NoYes::No,
                        ProdFlushingPrincipBOM::Start,
					    prodParmStartUp.PostNowBOM);
                }

                this.setParameters();

                if (isProdUpdProductionTypeTelemetryFlightEnabled)
                {
                    this.addInstrumentationAdditionalParametersToStopEvent(m);
                }

                if (! this.validate())
                {
                    throw Exception::Error;
                }

                using (RecordViewCache viewCacheProdRoute = new RecordViewCache(ProdRoute::viewCacheBufferFromProdId(prodTable.ProdId, true)))
                {
                    this.updateProduction();

                    if (prodTable.ProdType == ProdType::Process)
                    {
                        this.pmfUpdateCoBys();
                    }

                    this.updateBOMConsumption();

                    prodTable.status().startUpUpdateRouteJobs(this);

                    this.updateRouteConsumption();

                    this.startupReferences();

                    this.updateJobJournal(ParmJobStatus::Executed);

                    TransactionLog::create(TransactionLogType::ProdStartUp,  strFmt("@SYS76498", prodTable.ProdId, "@SYS77138"));
                }

                ttscommit;

                this.printout();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            InventCleanOrphanChildReference::clearChildReference(InventCleanOrphanChildReference::getFromCache(InventTransOrigin::findByInventTransId(prodTable.InventTransId)));

            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    void setParameters()
    {
        this.initProdTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canStartup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a production order can be started.
    /// </summary>
    /// <param name = "_prodTableRef">The production order reference</param>
    /// <param name = "_prodParmStartUp">The production order start parameters reference</param>
    /// <returns>true, if a production order can be started; otherwise, false.</returns>
    protected boolean canStartup(ProdTable _prodTableRef, ProdParmStartUp _prodParmStartUp)
    {
        return (_prodTableRef.InventRefType  == InventRefType::ProdLine  &&
                _prodTableRef.InventRefId    == prodTable.ProdId         &&
                _prodTableRef.status().isBefore(ProdStatus::StartedUp)   &&
                _prodTableRef.status().runStartUp(_prodParmStartUp,true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startupReferences</Name>
				<Source><![CDATA[
    void startupReferences()
    {
        ProdParmStartUp     prodParmStartUpLocal;

        if (prodParmStartUp.References == NoYes::Yes)
        {
            ProdTable prodTableRef = prodTable.referenceProdSearch(prodTable.CollectRefLevel+1,true);

            while (prodTableRef)
            {                
                if (this.canStartup(prodTableRef, prodParmStartUpLocal))
                {
                    prodParmStartUpLocal                = prodParmStartUp.data();
                    prodParmStartUpLocal.ProdId         = prodTableRef.ProdId;
                    prodParmStartUpLocal.AutoUpdate     = NoYes::Yes;
                    prodParmStartUpLocal.StartUpQty     = ProdUpdStartUp::proposalStartUpQty(prodTableRef.ProdId);
                    prodParmStartUpLocal.LineNum        = 1;

                    if (prodParmStartUpLocal.StartUpQty > 0)
                    {
                        prodParmStartUpLocal.ParmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
                        prodParmStartUpLocal.insert();

                        prodTableRef.status().runStartUp(prodParmStartUpLocal,false,null,this);

                        if (ProdMultiStartUpReferenceFlight::instance().isEnabled())
                        {
                            this.addUpdateRec(prodTableRef);
                        }
                    }
                }
                next prodTableRef;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateBOMConsumptionOnProductionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if update of BOM consumption should be performed for a BOM consumption line.
    /// </summary>
    /// <param name = "_prodBOM">A BOM consumption line.</param>
    /// <returns>true if update should be performed; otherwise, false.</returns>
    protected boolean shouldUpdateBOMConsumptionOnProductionLine(ProdBOM _prodBOM)
    {
        return _prodBOM.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdBOMCalcForUpdateBOMConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a BOM consumption line calculation when update BOM consumption.
    /// </summary>
    /// <param name = "_prodBOM">A BOM consumption line.</param>
    /// <param name = "_bomCalcData">A BOM consumption calculation data.</param>
    /// <param name = "_consumpProposal">A consumption proposal.</param>
    /// <returns>An initialized instance of the BOM consumption line calculation.</returns>
    protected ProdBOMCalc initProdBOMCalcForUpdateBOMConsumption(
        ProdBOM                 _prodBOM,
        BOMCalcData             _bomCalcData,
        ProdBOMConsumpProposal  _consumpProposal)
    {
        return ProdBOMCalc::newBOMCalcData(_bomCalcData,
                                           _prodBOM,
                                           _consumpProposal,
                                           prodParmStartUp.bomAutoConsump,
                                           !_prodBOM.ConstantReleased,
                                           NoYes::No,
                                           true,
                                           false,
                                           prodParmStartUp.CompletePickListJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalBOMForUpdateBOMConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a BOM journal line for a BOM consumption line.
    /// </summary>
    /// <param name = "_prodBOM">A BOM consumption line.</param>
    /// <param name = "_prodJournalBOM">A BOM journal line to initialize.</param>
    protected void initProdJournalBOMForUpdateBOMConsumption(ProdJournalBOM _prodJournalBOM, ProdBOM _prodBOM)
    {
        _prodJournalBOM.clear();
        _prodJournalBOM.initValue();
        _prodJournalBOM.initFromProdBOM(_prodBOM);

        _prodJournalBOM.TransDate      = prodParmStartUp.PostDate;
        _prodJournalBOM.EndConsump     = prodParmStartUp.EndPicklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates production journals.
    /// </summary>
    /// <returns>A map of the created production journals.</returns>
    protected Map createJournals()
    {
        ProdBOM                     prodBOM;
        BOMCalcData                 bomCalcData     = BOMCalcData::newProdTable(prodParmStartUp.StartUpQty, prodTable);

        ProdJournalTable            prodJournalTable;
        ProdJournalBOM              prodJournalBOM;

        Map                         mapJournalTable = new Map(Types::String, Types::Record);
        boolean                     addRefPurch = true;
        boolean                     isProdAsBuiltBOMFeatureEnabled = BOMParameters::find().EnableTrackedComponents;
        #ISOCountryRegionCodes

        ProdBOMConsumpProposal consumpProposal = prodTable.QtyStUp == 0 ? ProdBOMConsumpProposal::Reversed : ProdBOMConsumpProposal::Qty;

        List lisBOMJournals = this.getListOfBOMJournals();
        ListEnumerator listEnumerator = lisBOMJournals.getEnumerator();

        while (listEnumerator.moveNext())
        {
            RecordLinkList recListProdBOM = listEnumerator.current();

            ProdJournalTableData prodJournalTableData = JournalTableData::newTable(prodJournalTable);
            ProdJournalTransData prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM,prodJournalTableData);
            this.initProdJournalTableDataForUpdateBOMConsumption(prodJournalTableData, prodParmStartUp.bomJournalNameId, prodParmStartUp.ProdId, ProdJournalType::Picklist, recListProdBOM);

            prodJournalTable.ReducePhysical     = prodParmStartUp.ReducePhysical;
            prodJournalTable.DrawNegative       = prodParmStartUp.DrawNegative;
            OprNum operNum = 0;

            // create journal lines
            
            boolean loop = recListProdBOM.first();

            while (loop)
            {
                recListProdBOM.get(prodBOM);

                if (!this.shouldUpdateBOMConsumptionOnProductionLine(prodBOM))
                {
                    loop = recListProdBOM.next();
                    continue;
                }

                prodBOM.selectForUpdate(true);

                ProdBOMCalc prodBOMCalc = this.initProdBOMCalcForUpdateBOMConsumption(prodBOM, bomCalcData, consumpProposal);

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    prodBOM.updateStartUp(prodBOMCalc,
                                          consumpProposal == ProdBOMConsumpProposal::Reversed,
                                          sign(prodParmStartUp.StartUpQty));
                }
                else
                {
                    prodBOM.updateStartUp(prodBOMCalc,
                                          consumpProposal == ProdBOMConsumpProposal::Reversed);
                }

                if (prodBOM.Reservation == ProdReservation::Start)
                {
                    InventMovement::construct(prodBOM).updateReservation();
                }
                else if (   prodBOM.QtyInventStUp > prodBOM.QtyInventCalc
                        && prodBOM.Reservation != ProdReservation::None)
                {
                    InventMovement::construct(prodBOM).updateReservation();
                }

                if (this.shouldCreateJournalLineForBOMConsumption(prodBOM, prodBOMCalc))
                {
                    this.initProdJournalBOMForUpdateBOMConsumption(prodJournalBOM, prodBOM);

                    prodBOMCalc.setProdJournalBOM(prodJournalBOM);

                    prodJournalTableData.initJournalId();
                    prodJournalTransData.initFromJournalTable();

                    prodBOM.ConstantReleased    = NoYes::Yes;

                    if (isProdAsBuiltBOMFeatureEnabled)
                    {
                        ProdAsBuiltBOMCreatePickingListBuilder::construct()
                            .setProdJournalTransData(prodJournalTransData)
                            .setProdBOM(prodBOM)
                            .setProdJournalBOM(prodJournalBOM)
                            .setFlushingPrinciple(prodBOM.ProdFlushingPrincip)
                            .setIsEndJob(false)
                            .setIsPickingListDerivedJournal(false)
                            .setIsAutoPick(false).createPickingListLine();
                    }
                    else
                    {
                        prodJournalBOM.insertJournalCreate(prodJournalTransData,prodBOM);
                    }
                    this.updateProductionBom(prodBom, prodJournalBOM);

                    if (     (operNum
                        &&   operNum != prodBOM.OprNum)
                        || !prodBOM.OprNum)
                    {
                        addRefPurch = false;
                    }

                    operNum = prodBOM.OprNum;
                }

                loop = recListProdBOM.next();
            }

            if (prodJournalTable.JournalId)
            {
                if (addRefPurch)
                {
                    if (ProdRoute::find(prodParmStartUp.ProdId, operNum, RouteOprPriority::Primary).RouteType == RouteOprType::Vendor)
                    {
                        prodJournalTable.RefPurchId = ProdBOM::findVendorRefPurchId(prodParmStartUp.ProdId, operNum);
                    }
                }

                prodJournalTable.write();

                if (!mapJournalTable.exists(prodJournalTable.JournalId))
                {
                    mapJournalTable.insert(prodJournalTable.JournalId, prodJournalTable);
                }

                if (prodParmStartUp.PrintPickList == NoYes::Yes)
                {
                    listBOMJournalId.addEnd(prodJournalTable.JournalId);
                }
            }
        }
        return mapJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateJournalLineForBOMConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a journal line should be created for the consumption.
    /// </summary>
    /// <param name = "_prodBOM">The production BOM.</param>
    /// <param name = "_prodBOMCalc">A BOM consumption line calculation.</param>
    /// <returns>true if a journal line should be created; otherwise, false.</returns>
    protected boolean shouldCreateJournalLineForBOMConsumption(ProdBOM _prodBOM, ProdBOMCalc _prodBOMCalc)
    {
        return prodParmStartUp.CompletePickListJournal
            || (prodParmStartUp.EndPicklist &&  _prodBOM.BackorderStatus == ProdBackStatus::Release)
            || _prodBOMCalc.bomConsump()
            || _prodBOMCalc.inventConsump();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMConsumption</Name>
				<Source><![CDATA[
    void updateBOMConsumption()
    {
        setPrefix("@SYS28536");

        Map mapJournalTable = this.createJournals();

        if (prodParmStartUp.PostNowBOM && mapJournalTable.elements()) // post journals
        {
            boolean checkPosting = true;
            ProdBOMConsumpProposal consumpProposal = prodTable.QtyStUp == 0 ? ProdBOMConsumpProposal::Reversed : ProdBOMConsumpProposal::Qty;
            
            MapEnumerator me = mapJournalTable.getEnumerator();

            while (me.moveNext())
            {
                ProdJournalTable prodJournalTable = me.currentValue();

                if (prodJournalTable.RecId)
                {
                    ProdJournalCheckPostBOM prodJournalCheckPostBOM = this.createProdJournalCheckPostBOM(prodJournalTable, consumpProposal);
                    prodJournalCheckPostBOM.runOperation();
                    checkPosting = checkPosting && prodJournalCheckPostBOM.parmCheckJournalResult();
                }
            }

            if (!checkPosting)
            {
                throw (Exception::Error);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductionBom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProdBom</c> record.
    /// </summary>
    /// <param name = "_prodBom">the <c>ProdBom</c> record.</param>
    /// <param name = "_prodJournalBOM">the <c>ProdJournalBOM</c> record.</param>
    protected void updateProductionBom(ProdBom _prodBom, ProdJournalBOM _prodJournalBOM)
    {
        if (_prodBom.ConstantReleased != _prodBom.orig().ConstantReleased)
        {
            _prodBom.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalTableDataForUpdateBOMConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdJournalTableData</c> object from the given parameters when update BOM consumption.
    /// </summary>
    /// <param name = "_prodJournalTableData">
    /// The <c>ProdJournalTableData</c> object to be initialized.
    /// </param>
    /// <param name = "_journalNameId">
    /// The <c>ProdJournalNameId</c> to initialize from.
    /// </param>
    /// <param name = "_prodId">
    /// The <c>ProdId</c> to initialize from.
    /// </param>
    /// <param name = "_journalType">
    /// The <c>ProdJournalType</c> to initialize from.
    /// </param>
    /// <param name = "_recListProdBOM">
    /// The <c>ProdBOM</c> list to initialize from.
    /// </param>
    protected void initProdJournalTableDataForUpdateBOMConsumption(ProdJournalTableData _prodJournalTableData,
                                                                   ProdJournalNameId _journalNameId,
                                                                   ProdId _prodId,
                                                                   ProdJournalType _journalType,
                                                                   RecordLinkList _recListProdBOM)
    {
        _prodJournalTableData.initBuffer(_journalNameId, _prodId, _journalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournalCheckPostBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProdJournalCheckPostBOM</c> object and initializes it from the given parameter.
    /// </summary>
    /// <param name = "_prodJournalTable">
    /// The <c>ProdJournalTable</c> to initialize from.
    /// </param>
    /// <param name = "_consumpProposal">
    /// A consumption proposal.
    /// </param>
    /// <returns>
    /// The created <c>ProdJournalCheckPostBOM</c> object.
    /// </returns>
    protected ProdJournalCheckPostBOM createProdJournalCheckPostBOM(ProdJournalTable _prodJournalTable, ProdBOMConsumpProposal _consumpProposal)
    {
        ProdJournalCheckPostBOM prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(_prodJournalTable.JournalId, prodParmStartUp.JournalShowInfo);
        prodJournalCheckPostBOM.parmThrowCheckFailed(false);
        return prodJournalCheckPostBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJobStart</Name>
				<Source><![CDATA[
    void updateJobStart()
    {
        if (prodTable.RouteJobs)
        {
            ProdRouteJob::startUpJob(prodParmStartUp.ProdId,
                                     prodParmStartUp.FromOprNum,
                                     prodParmStartUp.ToOprNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProduction</Name>
				<Source><![CDATA[
    void updateProduction()
    {
        if (prodParmStartUp.StartUpProduction)
        {
            prodTable.QtyStUp    += prodParmStartUp.StartUpQty;
            prodTable.PdsCWBatchStup   += prodParmStartUp.PdsCWStartupQty;
        }

        prodTable.ProdStatus      = prodTable.status().isBefore(ProdStatus::StartedUp)
            ? ProdStatus::StartedUp
            : prodTable.ProdStatus;
        prodTable.StUpDate        = prodParmStartUp.PostDate
            ? prodParmStartUp.PostDate
            : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        prodTable.update();

        this.addUpdateRec(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateRouteConsumptionJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the route consumption journal should be updated.
    /// </summary>
    /// <returns>
    ///     true if the route consumption journal should be updated; otherwise, false.
    /// </returns>
    protected boolean shouldUpdateRouteConsumptionJournal()
    {
        return prodParmStartUp.RouteAutoConsump != RouteAutoConsump::Never || prodParmStartUp.EndRouteCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRouteConsumption</Name>
				<Source><![CDATA[
    void updateRouteConsumption()
    {
        if (this.shouldUpdateRouteConsumptionJournal())
        {
            ProdJournalCreateRoute prodJournalCreate = ProdJournalCreateRoute::newStartUp(prodParmStartUp);
            prodJournalCreate.runOperation();

            ProdJournalTable prodJournalTable = prodJournalCreate.usedProdJournalTable();

            if (   prodParmStartUp.PostNowRoute
                && prodJournalTable.RecId
                && prodJournalTable.JournalId)
            {
                ProdJournalCheckPostRoute prodJournalCheckPostRoute = ProdJournalCheckPostRoute::newPostJournal(prodJournalTable.JournalId,prodParmStartUp.JournalShowInfo);
                prodJournalCheckPostRoute.runOperation();
            }
        }
        else if (    prodParmStartUp.RouteAutoConsump == RouteAutoConsump::Never
                 && !prodParmStartUp.EndRouteCard)
        {
            // update startup flag on route
            ProdRoute::startUpOpr(prodParmStartUp.ProdId,
                                  prodParmStartUp.FromOprNum,
                                  prodParmStartUp.ToOprNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        if (prodTable.QtyStUp + prodParmStartUp.StartUpQty < 0)
        {
            return checkFailed("@SYS22688");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdUpdStartUp construct()
    {
        ProdUpdStartUp prodUpdStartUp = new ProdUpdStartUp();

        return prodUpdStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBufferFromRepFin</Name>
				<Source><![CDATA[
    static ProdParmStartUp initParmBufferFromRepFin(ProdParmReportFinished _prodParmReportFinished)
    {
        ProdParmStartUp     prodParmStartUp;
        ProdParametersDim   prodParametersDim = ProdTable::find(_prodParmReportFinished.ProdId).prodParametersDim();

        prodParmStartUp.ParmBuffer::initParmId();
        prodParmStartUp.initParmDefault();
        prodParmStartUp.initFromProdParametersDim(prodParametersDim);
        prodParmStartUp.ProdId              = _prodParmReportFinished.ProdId ;
        prodParmStartUp.AutoUpdate          = NoYes::Yes;
        prodParmStartUp.References          = NoYes::No;
        prodParmStartUp.StartUpQty          = ProdUpdStartUp::proposalStartUpQty(_prodParmReportFinished.ProdId);
        if (PdsGlobal::pdsIsCWItem(_prodParmReportFinished.ItemId))
        {
            prodParmStartUp.PdsCWStartupQty = ProdUpdStartUp::pdsCWProposalStartupQty(_prodParmReportFinished.ProdId);
        }
        prodParmStartUp.PostDate            = _prodParmReportFinished.TransDate;
        prodParmStartUp.PostNowBOM          = NoYes::Yes;
        prodParmStartUp.PostNowRoute        = NoYes::Yes;
        prodParmStartUp.EndPicklist         = NoYes::No;
        prodParmStartUp.EndRouteCard        = NoYes::No;
        prodParmStartUp.PrintPickList       = NoYes::No;
        prodParmStartUp.StartUpProduction   = NoYes::Yes;

        prodParmStartUp.bomAutoConsump      = prodParametersDim.bomAutoConsumpStUp;
        prodParmStartUp.RouteAutoConsump    = prodParametersDim.RouteAutoConsumpStUp;

        return prodParmStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    public static ProdUpdStartUp newParmBuffer(ProdParmStartUp _prodParmStartUp)
    {
        if (!_prodParmStartUp.ParmId)
        {
            _prodParmStartUp.skipTTSCheck(true);
            _prodParmStartUp.ParmBuffer::initParmId();
            _prodParmStartUp.write();
        }

        ProdUpdStartUp prodUpdStartUp = ProdUpdStartUp::construct();
        prodUpdStartUp.parmParmBuffer(_prodParmStartUp);

        return prodUpdStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdId</Name>
				<Source><![CDATA[
    static ProdUpdStartUp newProdId(
        ProdId                  _prodId,
        NoYes                   _references             = NoYes::Yes,
        TransDate               _postDate               = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYes                   _endPickList            = NoYes::No,
        NoYes                   _endRouteCard           = NoYes::No,
        NoYes                   _postNowBOM             = NoYes::Yes,
        NoYes                   _postNowRoute           = NoYes::No,
        NoYes                   _mayBeDrawnNegative     = NoYes::Yes,
        NoYes                   _mayBeReducedPhysical   = NoYes::No,
        BOMAutoConsump          _bomAutoConsump         = BOMAutoConsump::Never,
        RouteAutoConsump        _routeAutoConsump       = RouteAutoConsump::Never,
        ProdJournalNameId       _routeJournalName       = '',
        ProdJournalNameId       _bomJournalName         = '',
        NoYes                   _printPickList          = NoYes::No
        )
    {
        ProdParmStartUp     prodParmStartUp;

        ProdTable prodTable = ProdTable::find(_prodId);

        if (!prodTable)
        {
            throw error(strFmt("@SYS12725",_prodId));
        }

        //Set default ProdParameters if they have not been provided
        if (   prmisDefault(_bomAutoConsump)
            || prmisDefault(_routeAutoConsump)
            || prmisDefault(_routeJournalName)
            || prmisDefault(_bomJournalName))
        {
            ProdParametersDim prodParametersDim = prodTable.prodParametersDim();

            if (prmisDefault(_bomAutoConsump))
            {
                _bomAutoConsump  = prodParametersDim.bomAutoConsumpStUp;
            }
            if (prmisDefault(_routeAutoConsump))
            {
                _routeAutoConsump  = prodParametersDim.RouteAutoConsumpStUp;
            }
            if (prmisDefault(_routeJournalName))
            {
                _routeJournalName  = prodParametersDim.RouteJournalNameId;
            }
            if (prmisDefault(_bomJournalName))
            {
                _bomJournalName  = prodParametersDim.bomJournalNameId;
            }
        }

        prodParmStartUp.ParmBuffer::initParmId();
        prodParmStartUp.initParmDefault();
        prodParmStartUp.initFromProdParametersDim(prodTable.prodParametersDim());

        prodParmStartUp.ProdId                  = _prodId;
        prodParmStartUp.References              = _references;
        prodParmStartUp.PostDate                = _postDate;
        prodParmStartUp.EndPicklist             = _endPickList;
        prodParmStartUp.EndRouteCard            = _endRouteCard;
        prodParmStartUp.PostNowBOM              = _postNowBOM;
        prodParmStartUp.PostNowRoute            = _postNowRoute;
        prodParmStartUp.DrawNegative            = _mayBeDrawnNegative;
        prodParmStartUp.ReducePhysical          = _mayBeReducedPhysical;
        prodParmStartUp.bomAutoConsump          = _bomAutoConsump;
        prodParmStartUp.RouteAutoConsump        = _routeAutoConsump;
        prodParmStartUp.RouteJournalNameId      = _routeJournalName;
        prodParmStartUp.bomJournalNameId        = _bomJournalName;
        prodParmStartUp.PrintPickList           = _printPickList;
        prodParmStartUp.StartUpQty              = ProdUpdStartUp::proposalStartUpQty(_prodId);
        prodParmStartUp.CompletePickListJournal = NoYes::No;

        prodParmStartUp.insert();

        ProdUpdStartUp prodUpdStartUp = ProdUpdStartUp::construct();
        prodUpdStartUp.parmParmBuffer(prodParmStartUp);

        return prodUpdStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWProposalStartupQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates CW inventory quantity that hasn't been started.
    /// </summary>
    /// <param name="_prodId">
    /// Current batch order id.
    /// </param>
    /// <returns>
    /// Not started CW quantity.
    /// </returns>
    public static PdsCWInventQty pdsCWProposalStartupQty(ProdId _prodId)
    {
        ProdTable prodTable = ProdTable::find(_prodId);

        return prodTable.PdsCWBatchSched - prodTable.PdsCWBatchStup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalStartUpQty</Name>
				<Source><![CDATA[
    static InventQty proposalStartUpQty(ProdId _prodId)
    {
        ProdTable prodTable = ProdTable::find(_prodId);

        return (prodTable.QtySched - prodTable.QtyStUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPreviousJob</Name>
				<Source><![CDATA[
    static void runPreviousJob(
        ProdParmStartUp     _prodParmStartUp,
        ProdPurch           _prodPurch  = null,
        RunbaseRecsMapable  _multi      = null
        )
    {
        ProdParmRelease prodParmRelease = ProdUpdRelease::initParmBufferFromStartUp(_prodParmStartUp);

        prodParmRelease.insert();
        ProdTable::find(prodParmRelease.ProdId).status().runRelease(prodParmRelease,false,_prodPurch,_multi,true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>