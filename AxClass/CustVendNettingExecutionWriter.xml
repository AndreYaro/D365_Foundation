<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingExecutionWriter</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingExecutionWriter implements INettingExecutionWrite
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>writeExecution</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RecId writeExecution(CustVendNettingPair _nettingPair, CurrencyCode _currencyCode, INettingMarked _nettingMarked, TransDate _nettingDate, boolean _isCreditDebitNote)
    {
        NettingMarkedTransList creditMarkedList = _nettingMarked.getMarkedFromAccount();
        NettingMarkedTransList debitMarkedList = _nettingMarked.getMarkedFromOffsetAccount();

        if (creditMarkedList.size() == 0 || debitMarkedList.size() == 0)
        {
            return 0;
        }

        CustVendNettingExecution nettingExecution;
        nettingExecution.CreditCompany = _nettingPair.CreditCompany;
        nettingExecution.CreditAccountNum = _nettingPair.CreditAccountNum;
        nettingExecution.CreditAccountType = _nettingPair.CreditAccountType;
        nettingExecution.DebitCompany = _nettingPair.DebitCompany;
        nettingExecution.DebitAccountNum = _nettingPair.DebitAccountNum;
        nettingExecution.DebitAccountType = _nettingPair.DebitAccountType;
        nettingExecution.CurrencyToProcess = _currencyCode;

        nettingExecution.ProcessingStatus = CustVendNettingProcessStatus::Ready;
        nettingExecution.NettingPair = _nettingPair.RecId;
        nettingExecution.NettingDate = _nettingDate;
        nettingExecution.NettingExecutionType = NettingExecutionType::CustVendNetting;
        CustVendNettingAgreement agreement = CustVendNettingAgreement::find(_nettingPair.CustVendNettingAgreement);

        if (!agreement)
        {
            return 0;
        }

        nettingExecution.JournalName = agreement.JournalName;
        nettingExecution.LedgerDimension = agreement.LedgerDimension;
        nettingExecution.ReverseSign = _isCreditDebitNote;
        nettingExecution.insert();

        this.insertMarkedTrans(creditMarkedList.getMarkedTransList(), nettingExecution.RecId);
        this.insertMarkedTrans(debitMarkedList.getMarkedTransList(), nettingExecution.RecId);

        return nettingExecution.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkedTrans</Name>
				<Source><![CDATA[
    private void insertMarkedTrans(ListEnumerator _markedList, RecId _executionRecId)
    {
        RecordInsertList transMarkedToInsert = new RecordInsertList(tableNum(CustVendNettingTransMarked));

        int sequence = 1;
        while (_markedList.moveNext())
        {
            NettingMarkedTrans trans = _markedList.current();
            transMarkedToInsert.add(CustVendNettingTransMarked::createRecord(trans.getTransRecId(), trans.getTransTableId(), _executionRecId, sequence));
            sequence ++;
        }

        transMarkedToInsert.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>