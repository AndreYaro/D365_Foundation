<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPaymReconciliationPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PayrollPaymReconciliationPost</c> extends the <c>VendPaymReconciliationPost</c> and posts reconciliation payments for payroll disbursements.
/// </summary>
public class PayrollPaymReconciliationPost extends VendPaymReconciliationPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>LedgerJournalType</c> for this class instance.
    /// </summary>
    /// <returns>
    ///     A <c>LedgerJournalType</c> value.
    /// </returns>
    LedgerJournalType journalType()
    {
        return LedgerJournalType::PayrollDisbursement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNewJournals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Manages the payroll disbursement posting of a list of <c>LedgerJournalTable</c> buffers.
    /// </summary>
    /// <param name="_createdJournals">
    ///     A <c>RecordSortedList</c> of <c>LedgerJournalTable</c> buffers.
    /// </param>
    void postNewJournals(RecordSortedList _createdJournals = this.createdJournals())
    {
        Args                args;
        LedgerJournalTable  ledgerJournalTable;
        ;

        args = new Args();
        args.caller(this);

        if (_createdJournals.first(ledgerJournalTable))
        {
            do
            {
                setPrefix(strFmt("@SYS28641", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
                args.record(ledgerJournalTable);
                new MenuFunction(menuitemActionStr(LedgerJourPostLJTPayrollDisbursement), MenuItemType::Action).run(args);
            }
            while (_createdJournals.next(ledgerJournalTable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>TransTxt</c> for this class instance.
    /// </summary>
    /// <returns>
    ///     Returns a <c>TransTxt</c> value.
    /// </returns>
    public TransTxt transactionLogTxt()
    {
        return "@SYS4090068";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>TransactionLogType</c> for this class instance.
    /// </summary>
    /// <returns>
    ///     Returns a <c>TransactionLogType</c> value.
    /// </returns>
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::VendPaymReconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS63355";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>