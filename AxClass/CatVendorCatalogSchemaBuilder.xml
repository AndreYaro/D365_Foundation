<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogSchemaBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CatVendorCatalogSchemaBuilder</c> class allows to build a <c>XmlSchema</c> file for the vendor catalog composite data entity 
/// allowing to define more specific restrictions like: allowed categories, unit of measure, currencies, languages.
/// </summary>
public class CatVendorCatalogSchemaBuilder extends CompositeEntitySchemaBuilder
{
    const str CurrencyCode = "CurrencyCode";
    const str ProductCategoryHierarchyName = "ProductCategoryHierarchyName";
    const str ProductCategoryName = "ProductCategoryName";
    const str UnitSymbol = "UnitSymbol";
    const str LanguageId = "LanguageId";
    const str ProductNumber = "ProductNumber";
    const str ProductName = "ProductName";
   
    CatVendorCatalog catVendorCatalog;
    CatVendorCatalogTemplateCategory template;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendorCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>CatVendorCatalogSchemaBuilder</c> class for a specific vendor catalog.
    /// </summary>
    /// <param name = "_catVendorCatalog">Vendor catalog</param>
    /// <param name = "_template">Vendor catalog template</param>
    /// <returns>A new <c>CatVendorCatalogSchemaBuilder</c> instance.</returns>
    public static CatVendorCatalogSchemaBuilder newFromVendorCatalog(
        CatVendorCatalog _catVendorCatalog, 
        CatVendorCatalogTemplateCategory _template = CatVendorCatalogTemplateCategory::ProcurementCategory)
    {
        if (_template != CatVendorCatalogTemplateCategory::ProcurementCategory)
        {
            throw error("@SYS18879");
        }

        CatVendorCatalogSchemaBuilder catVendorCatalogSchemaBuilder = new CatVendorCatalogSchemaBuilder();
        catVendorCatalogSchemaBuilder.catVendorCatalog = _catVendorCatalog;
        catVendorCatalogSchemaBuilder.template = _template;
        catVendorCatalogSchemaBuilder.compositeDataEntityViewName = dataentityviewstr(CatVendorCatalogEntity);

        return catVendorCatalogSchemaBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotRetailTemplateAndFieldIsRetail</Name>
				<Source><![CDATA[
    private boolean isNotRetailTemplateAndFieldIsRetail(Microsoft.Dynamics.AX.Metadata.MetaModel.AxDataEntityViewMappedField _field)
    {
        boolean result = true;
        Microsoft.Dynamics.AX.Metadata.MetaModel.AxTableField tableField = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetTableField(_field.DataSource, _field.DataField);
        if (template != CatVendorCatalogTemplateCategory::RetailVendorProductCategory
            && tableField.ConfigurationKey == configurationKeyStr(Retail))
        {
            result = false;
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeCatalogDataEntityViewFieldInSchema</Name>
				<Source><![CDATA[
    private boolean includeCatalogDataEntityViewFieldInSchema(Microsoft.Dynamics.AX.Metadata.MetaModel.AxDataEntityViewMappedField _field)
    {
        boolean result = true;

        switch (_field.DataSource)
        {
            case dataEntityDataSourceStr(CatVendorCatalogMaintenanceRequestEntity, CatVendorCatalogMaintenanceRequest):
                if (_field.DataField == fieldStr(CatVendorCatalogMaintenanceRequest, UploadDateTime))
                {
                    result = false;
                }
                break;
            case dataEntityDataSourceStr(CatVendorCatalogMaintenanceRequestEntity, DirPartyTable):
                if (_field.DataField == fieldStr(DirPartyTable, PartyNumber))
                {
                    result = false;
                }
                break;
            case dataEntityDataSourceStr(CatVendorProductCandidateEntity, CatVendorProductCandidate):
                if (_field.DataField == fieldStr(CatVendorProductCandidate, VendorProductCode) 
                    && _field.Name != fieldStr(CatVendorProductCandidateEntity, ProductNumber))
                {
                    result = false;
                }
                else if (_field.DataField == fieldStr(CatVendorProductCandidate, ActionType))
                {
                    result = false;
                }
                break;
            default:
                // do nothing
                break;
        }

        return result;

    }

]]></Source>
			</Method>
			<Method>
				<Name>includeDataEntityViewFieldInSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override to add additional check for the vendor catalog: if non-retail template is used, retail fields should not be availble.
    /// </summary>
    /// <param name = "_field">Entity field</param>
    /// <returns>True, if entity field should be included in schema definition; false otherwise.</returns>
    protected boolean includeDataEntityViewFieldInSchema(Microsoft.Dynamics.AX.Metadata.MetaModel.AxDataEntityViewMappedField _field)
    {
        boolean result = true;
      
        result = super(_field) 
            && this.includeCatalogDataEntityViewFieldInSchema(_field)
            && this.isNotRetailTemplateAndFieldIsRetail(_field);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCategoryHierarchySchemaElement</Name>
				<Source><![CDATA[
    private System.Xml.Schema.XmlSchemaElement buildCategoryHierarchySchemaElement()
    {
        System.Xml.Schema.XmlSchemaElement fieldEntityName = XMLSchemaBuilderHelper::createXMLSchemaElement(ProductCategoryHierarchyName);
        fieldEntityName.isNillable = false;

        EcoResCategoryHierarchy ecoResCategoryHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole
                                                                                                (EcoResCategoryNamedHierarchyRole::Procurement)
                                                                                                .CategoryHierarchy);
        fieldEntityName.FixedValue = ecoResCategoryHierarchy.Name;
       
        return fieldEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEntityFieldSchemaElement</Name>
				<Source><![CDATA[
    protected System.Xml.Schema.XmlSchemaElement buildEntityFieldSchemaElement(
        Microsoft.Dynamics.AX.Metadata.MetaModel.AxDataEntityViewMappedField _entityField, 
        str _elementName = _entityField.Name)
    {
        Microsoft.Dynamics.AX.Metadata.MetaModel.AxTableField tableField = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetTableField(_entityField.DataSource, _entityField.DataField);
    
        switch (tableField.ExtendedDataType)
        {
            case extendedTypeStr(LanguageIdAll):
                return super(_entityField, LanguageId);
            case extendedTypeStr(UnitOfMeasureSymbol):
                return super(_entityField, UnitSymbol);
            case extendedTypeStr(EcoResCategoryName):
                return super(_entityField, ProductCategoryName);
            case extendedTypeStr(EcoResCategoryHierarchyName):
                return this.buildCategoryHierarchySchemaElement();
            case extendedTypeStr(EcoResProductDisplayProductNumber):
                return super(_entityField, ProductNumber);
            default:
                return super(_entityField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCategorySchemaTypeName</Name>
				<Source><![CDATA[
    private System.Xml.XmlQualifiedName retrieveCategorySchemaTypeName(Microsoft.Dynamics.AX.Metadata.MetaModel.AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;
      
        var simpleType = XMLSchemaBuilderHelper::createStringSimpleTypeWithValuesRestrictions(ProductCategoryName, this.getAvailableCategories());
        this.addSimpleTypeToMap(simpleType);
        schemaTypeName = new System.Xml.XmlQualifiedName(simpleType.Name, this.getSchemaTargetNamespace());
       
        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencySchemaTypeName</Name>
				<Source><![CDATA[
    private System.Xml.XmlQualifiedName retrieveCurrencySchemaTypeName(Microsoft.Dynamics.AX.Metadata.MetaModel.AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;
        
        var currencySimpleType = XMLSchemaBuilderHelper::createStringSimpleTypeWithValuesRestrictions(CurrencyCode, this.getAvailableCurrencies());
        this.addSimpleTypeToMap(currencySimpleType);
        schemaTypeName = new System.Xml.XmlQualifiedName(currencySimpleType.Name, this.getSchemaTargetNamespace());
       
        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveUnitOfMeasureSchemaTypeName</Name>
				<Source><![CDATA[
    private System.Xml.XmlQualifiedName retrieveUnitOfMeasureSchemaTypeName(Microsoft.Dynamics.AX.Metadata.MetaModel.AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;

        var simpleType = XMLSchemaBuilderHelper::createStringSimpleTypeWithValuesRestrictions(UnitSymbol, this.getAvailableUnitOfMeasures());
        this.addSimpleTypeToMap(simpleType);
        schemaTypeName = new System.Xml.XmlQualifiedName(simpleType.Name, this.getSchemaTargetNamespace());
       
        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLanguageSchemaTypeName</Name>
				<Source><![CDATA[
    private System.Xml.XmlQualifiedName retrieveLanguageSchemaTypeName(Microsoft.Dynamics.AX.Metadata.MetaModel.AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;
      
        var simpleType = XMLSchemaBuilderHelper::createStringSimpleTypeWithValuesRestrictions(LanguageId, this.getAvailableLanguages());
        this.addSimpleTypeToMap(simpleType);
        schemaTypeName = new System.Xml.XmlQualifiedName(simpleType.Name, this.getSchemaTargetNamespace());
       
        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveStringSchemaTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the retrieve of a new schema type to allow handling of specific fields for vendor catalog:
    /// Currency code, language, unit of measure, product number, category hierarchy name, category name.
    /// </summary>
    /// <param name = "_tableField">Table field of type string.</param>
    /// <returns>A <c>XmlQualifiedName</c> which defines the name for the new schema type.</returns>
    protected System.Xml.XmlQualifiedName retrieveStringSchemaTypeName(Microsoft.Dynamics.AX.Metadata.MetaModel.AxTableField _tableField)
    {
        switch (_tableField.ExtendedDataType)
        {
            case extendedTypeStr(CurrencyCode):
                return this.retrieveCurrencySchemaTypeName(_tableField);
            case extendedTypeStr(LanguageIdAll):
                return this.retrieveLanguageSchemaTypeName(_tableField);
            case extendedTypeStr(UnitOfMeasureSymbol):
                return this.retrieveUnitOfMeasureSchemaTypeName(_tableField);
            case extendedTypeStr(EcoResCategoryName):
                return this.retrieveCategorySchemaTypeName(_tableField);
            default:
                return super(_tableField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAndSendFileToUser</Name>
				<Source><![CDATA[
    public void verifyAndSendFileToUser(System.Xml.Schema.XmlSchema _schema)
    {
        if (_schema == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        System.Xml.Schema.XmlSchemaSet schemaSet = new System.Xml.Schema.XmlSchemaSet();
        schemaSet.Add(_schema);
        schemaSet.Compile();

        this.sendFileToUser(_schema);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToUser</Name>
				<Source><![CDATA[
    private void sendFileToUser(System.Xml.Schema.XmlSchema _schema)
    {
        if (_schema == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        using(var stream = new System.IO.MemoryStream())
        {
            _schema.Write(stream);

            Dynamics.AX.Application.File::SendFileToUser(stream, strFmt('%1_%2%3', "CatalogVendorSchema_", System.Guid::NewGuid(), ".xsd"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vendor categories.
    /// </summary>
    /// <returns>
    ///    A <c>Set</c> that consists of vendor category names.
    /// </returns>
    protected Set getAvailableCategories()
    {
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        ProcCategoryExpanded        procCategoryExpanded;
        VendCategory                vendCategory;
        VendTable                   vendTable;

        Set categoryRestrictions = new Set(Types::String);

        while select crossCompany Name from procCategoryExpanded
            exists join vendCategory
                where procCategoryExpanded.CategoryId == vendCategory.Category
            exists join vendTable
                where vendCategory.VendorAccount == vendTable.AccountNum 
                && vendCategory.VendorDataArea == vendTable.DataAreaId
                && vendTable.Party == catVendorCatalog.VendorParty
            exists join ecoResCategoryHierarchyRole 
                where ecoResCategoryHierarchyRole.CategoryHierarchy == procCategoryExpanded.CategoryHierarchy 
                    && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement
        {
            categoryRestrictions.add(procCategoryExpanded.Name);
        }

        return  categoryRestrictions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableCurrencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get available currencies.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> consists of available currencies.
    /// </returns>
    protected Set getAvailableCurrencies()
    {
        Set currencies = new Set(Types::String);

        Currency currency;
        while select CurrencyCode from currency
        {
            currencies.Add(currency.CurrencyCode);
        }
        
        return currencies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableUnitOfMeasures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get available unit of measures.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> consists of available unit of measures.
    /// </returns>
    protected Set getAvailableUnitOfMeasures()
    {
        Set unitOfMeasures = new Set(Types::String);

        UnitOfMeasure unitOfMeasure;
        while select Symbol from unitOfMeasure
        {
            unitOfMeasures.Add(unitOfMeasure.Symbol);
        }
        
        return unitOfMeasures;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get available languages
    /// </summary>
    /// <returns>
    /// A <c>Set</c> consists of available languages.
    /// </returns>
    protected Set getAvailableLanguages()
    {
        Set languages = new Set(Types::String);

        LanguageTable languageTable;

        while select LanguageId from languageTable
        {
            languages.Add(languageTable.LanguageId);
        }
  
        return languages;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>