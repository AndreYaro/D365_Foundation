<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BiProjectValidationEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BiProjectValidationEngine</c> class is used as the engine to run validation before
/// generating a  project.
/// </summary>
/// <remarks>
///  If a custom validation is to be performed when generating a  project then the developer should:
///  <list type="number">
///   <item>
///    <description>
///    Create a new class and have that class extend from the <c>BiProjectValidationBase</c> class.
///    </description>
///   </item>
///   <item>
///   <description>Add the appropriate validation logic to the class created in the first
///   step.</description>
///   </item>
///   <item>
///    <description>
///    Modify the <c>registerValidationClasses</c> method of this class by adding a new call to register
///    the new class as a validation class so that the engine makes the necessary calls at runtime so that
///    the validation logic is executed. This is performed by adding the following line to the
///    <c>registerValidationClasses</c> method: <c>this.registerValidator(new
///    customProjectValidator());</c> where <c>customProjectValidator</c> is the name of the class that is
///    created in step 1.
///    </description>
///   </item>
///  </list>
/// </remarks>
/// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class BiProjectValidationEngine
{
    List biProjectValidationClasses;
    List biProjectValidationResults;
    List projectPerspectiveTreeNodes;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>biProjectValidationResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>biProjectValidationResults</c> property.
    /// </summary>
    /// <param name="value">
    ///    The new value of the property; optional.
    /// </param>
    /// <returns>
    ///    The current value of the property.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List biProjectValidationResults(List value = biProjectValidationResults)
    {
        biProjectValidationResults = value;
        return biProjectValidationResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BiProjectValidationEngine</c> class.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
    {
        biProjectValidationClasses = new List(Types::Class);
        biProjectValidationResults = new List(Types::Class);

        this.registerValidationClasses();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Iterates through every registered validation classes and executes their <c>validate</c> method.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void performValidation()
    {
        BiProjectValidationBase projectValidationClass;

        // create the ListIterator object
        ListIterator iterator = new ListIterator(biProjectValidationClasses);

        // loop through the validator classes and perform validation on each of them
        while (iterator.more())
        {
            projectValidationClass = iterator.value();

            // Give the validation class the information it needs to perform validation.
            projectValidationClass.projectPerspectiveTreeNodes(this.projectPerspectiveTreeNodes());
            projectValidationClass.validate();
            if (projectValidationClass.projectValidationResults() != null)
            {
                biProjectValidationResults.appendList(projectValidationClass.projectValidationResults());
            }

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectPerspectiveTreeNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>projectPerspectiveTreeNodes</c> property.
    /// </summary>
    /// <param name="value">
    ///    The new value of the property; optional.
    /// </param>
    /// <returns>
    ///    The current value of the property.
    /// </returns>
    /// <remarks>
    ///    This property contains references to the <c>TreeNode</c> objects from which the  project will be
    ///    created. The value of this property is passed on to any classes registered as a project validation
    ///    class.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List projectPerspectiveTreeNodes(List value = projectPerspectiveTreeNodes)
    {
        projectPerspectiveTreeNodes = value;
        return projectPerspectiveTreeNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerValidationClasses</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Use this method to add new custom validation classes that extend from
    ///    <c>BiProjectValidationBase</c> to the validation process.
    /// </summary>
    /// <remarks>
    ///    If a custom validation is to be performed when generating a  project then the developer should:
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             Create a new class and have that class extend from the <c>BiProjectValidationBase</c> class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the appropriate validation logic to the class created in the first
    ///          step.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Modify the <c>registerValidationClasses</c> method of this class by adding a new call to register
    ///             the new class as a validation class so that the engine makes the necessary calls at runtime so that
    ///             the validation logic is executed. This is performed by adding the following line to the
    ///             <c>registerValidationClasses</c> method: <c>this.registerValidator(new
    ///             customProjectValidator());</c> where <c>customProjectValidator</c> is the name of the class that is
    ///             created in step 1.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void registerValidationClasses()
    {
        // register validator for GeneralLedgerCube
        this.registerValidator(new LedgerCubeBiProjectValidation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerValidator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a <c>BiProjectValidationBase</c> object to the registered list of validation classes.
    /// </summary>
    /// <param name="projectValidationClass">
    ///    An object that extends from the <c>BiProjectValidationBase</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void registerValidator(BiProjectValidationBase projectValidationClass)
    {
        if (projectValidationClass)
        {
            biProjectValidationClasses.addEnd(projectValidationClass);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>