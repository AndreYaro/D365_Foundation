<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatParametersHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntrastatParametersHelper</c> class provides helper methods for <c>IntrastatCountryRegionParameters</c> table.
/// </summary>
class IntrastatParametersHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// A subscription to set the default value for all existing record in the table by the country/region.
    /// </summary>
    public static void updateCountryRegionId()
    {
        LogisticsAddressCountryRegionId     logisticsAddressCountryRegionId;
        IntrastatCountryRegionParameters    intrastatCountryRegionParameters;

        logisticsAddressCountryRegionId = IntrastatParametersHelper::getCompanyPrimaryCountryRegionId();

        ttsbegin;

        update_recordset intrastatCountryRegionParameters
        setting
            LegalCountryRegionId = strUpr(logisticsAddressCountryRegionId)
                where intrastatCountryRegionParameters.LegalCountryRegionId == '';
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyPrimaryCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company primary country region id.
    /// </summary>
    /// <returns>
    /// The company primary country region id.
    /// </returns>
    public static LogisticsAddressCountryRegionId getCompanyPrimaryCountryRegionId()
    {
        DirPartyLocation entityLocation;
        LogisticsPostalAddress logisticsAddress;

        select firstonly CountryRegionId from logisticsAddress
            join Location from entityLocation
                where entityLocation.Party == CompanyInfo::current()
                    && entityLocation.IsPostalAddress == true
                    && entityLocation.IsPrimary == true
                    && entityLocation.Location == logisticsAddress.Location;

        return logisticsAddress.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives a default country region id based on the parameters.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The <c>InventLocationId</c> ID used to search for the default locations.
    /// </param>
    /// <param name="_inventSiteId">
    /// The <c>InventSiteId</c> ID used to search for the default locations.
    /// </param>
    /// <returns>
    /// The country region id.
    /// </returns>
    public static LogisticsAddressCountryRegionId getDefaultCountryRegionId(InventLocationId _inventLocationId, InventSiteId _inventSiteId)
    {
        return LogisticsPostalAddress::findByLocation(
                TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(_inventLocationId, _inventSiteId)).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLogisticsAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives a default logistics address based on the parameters.
    /// </summary>
    /// <param name = "_inventLocationId">
    /// The <c>InventLocationId</c> ID used to search for the default locations.
    /// </param>
    /// <param name = "_inventSiteId">
    /// The <c>InventSiteId</c> ID used to search for the default locations.
    /// </param>
    /// <returns>
    /// The default logistics postal address.
    /// </returns>
    public static LogisticsPostalAddress getDefaultLogisticsAddress(InventLocationId _inventLocationId, InventSiteId _inventSiteId)
    {
        return LogisticsPostalAddress::findByLocation(
            TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(_inventLocationId, _inventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtendedCountryRegionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the extended country or region is enabled in <c>IntrastatCountryRegionParameters</c>.
    /// </summary>
    /// <returns>
    /// true if the extended country or region is enabled; otherwise false.
    /// </returns>
    public static boolean isExtendedCountryRegionEnabled()
    {
        return TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && IntrastatParametersHelper::isExtendedCountryRegionEnabledLegalEntity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtendedCountryRegionEnabledLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the extended country or region in <c>IntrastatCountryRegionParameters</c>
    /// is enabled in current legal entity.
    /// </summary>
    /// <returns>
    /// true if enabled; otherwise false.
    /// </returns>
    public static boolean isExtendedCountryRegionEnabledLegalEntity()
    {
        #IsoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoDK]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>