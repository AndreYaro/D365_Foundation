<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rhrmReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rhrmReport extends RunBaseBatch implements BatchRetryable
{
    ComOfficeDocument_RU    officeDocument;
    ComWordDocument_RU      wordDocument;
    COM                     document;
    CompanyInfo             companyInfo;
    RHRMReport              rhrmReport;
    str                     templateName;
    FormRun                 animationForm;
    FormAnimateControl      animationControl;
    SysOperationProgress    sysOperationProgress;
    FilePath                animationFile;
    FilePath                templateFile;
    RNumDateInWordConverter converter;
    #macrolib.RHRMMSOfficeConstant

    #define.Value2(2)
    #define.Value3(3)
    #define.Value4(4)
    #define.Value5(5)
	#define.Value6(6)
    #define.Value7(7)
    #define.Value8(8)
    #define.Value9(9)
    #define.Value10(10)
    #define.Value11(11)
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str animationBoxCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str animationBoxText()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if report can be created.
    /// </summary>
    /// <returns>
    /// true if report can be created, false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str codeDescription(str _code, str _description)
    {
        return _description != "" ? _description : _code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOfficeDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ComOfficeDocument_RU createOfficeDocument()
    {
        wordDocument = new ComWordDocument_RU();

        return wordDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateInNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TempStr dateInNumber(date _date)
    {
        return date2str(_date, 123, #Value2, #Value2, #Value2, #Value2, #Value4, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateInWord</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TempStr dateInWord(date       _date,
                                 boolean    _enclosed       = true,
                                 boolean    _addYearSymbol  = true,
                                 boolean    _clearFirstDate = true)
    {
        return converter.date2strExt(_date, _enclosed, _addYearSymbol, _clearFirstDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delimiter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str delimiter(str _p1, str _p2, str _p3 = "@GLS116882")
    {
        return _p1 == "" || _p2 == "" ? _p1 + _p2 : _p1 + _p3 + _p2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delimiterN</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str delimiterN(container _strings, str _delimiter = "@GLS116882")
    {
        int i, strNum;
        str ret = "";

        strNum = conLen(_strings);
        ret = conPeek(_strings, 1);
        for (i = #Value2; i <= strNum; i++)
        {
            ret = this.delimiter(ret, conPeek(_strings, i));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initData(Args _args)
    {
        converter = RNumDateInWordConverter::construct(infolog.language());
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean makeDocument()
    {
        templateFile = SysResource::saveToTempFile(this.templateResourceNode(), false);

        if (! WinAPI::fileExists(templateFile))
            throw error(strFmt("@GLS106466", templateFile));

        this.showAnimationBox();

        officeDocument = this.createOfficeDocument();

        if (! officeDocument.newFile(templateFile, false))
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionAndCategory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str positionAndCategory(HcmTitleId _hcmTitleId, RHRMTradeCategoryId _tradeCategory)
    {
        RHRMTradeCategoryName   categoryDescription;
        str ret;

        categoryDescription = RHRMTradeCategory::find(_tradeCategory).Description;

        if (categoryDescription != "")
        {
            ret = this.delimiter(_hcmTitleId, categoryDescription);
        }
        else
        {
            ret = this.delimiter(_hcmTitleId, _tradeCategory);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    private void saveDocument()
    {
        officeDocument.visible(true);
        officeDocument.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAnimationBox</Name>
				<Source><![CDATA[
    private void showAnimationBox()
    {
        Args                  args;
        FormStaticTextControl text;

        if (WinAPI::fileExists(xInfo::directory(DirectoryType::Include) + #107avi))
        {
            animationFile = xInfo::directory(DirectoryType::Include) + #107avi;
            args = new Args(formStr(RHRMAnimationBox));
            animationForm = classfactory.formRunClass(args);
            animationForm.init();
            animationForm.design().caption(this.animationBoxCaption());
            animationControl = animationForm.design().controlName(#AnimationControl);
            animationControl.animateFile(animationFile);
            text = animationForm.design().controlName(#Text);
            text.text(this.animationBoxText());
            animationForm.run();
            animationControl.play();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateResourceNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the template resouce node.
    /// </summary>
    /// <returns>
    /// The resouce node.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected resourceNode templateResourceNode()
    {
        //let resource name match report class name by default
        resourceNode rn = SysResource::getResourceNode(this.name());
        rn.AOTload(); //properties will not be loaded without this
        return rn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RHRMReport construct(Args _args)
    {
        RHRMReportType rhrmReportType;
        RHRMReport     rhrmReport;

        rhrmReportType = _args.parmEnum();
        switch (rhrmReportType)
        {
            case RHRMReportType::T1:
                rhrmReport = new RHRMReport_T1();
                break;

            case RHRMReportType::T1a:
                rhrmReport = new RHRMReport_T1a();
                break;
            case RHRMReportType::T2:
                rhrmReport = new RHRMReport_T2();
                break;
            case RHRMReportType::T3:
                rhrmReport = new RHRMReport_T3();
                break;
            case RHRMReportType::T4:
                rhrmReport = new RHRMReport_T4();
                break;
            case RHRMReportType::T5:
                rhrmReport = new RHRMReport_T5();
                break;

            case RHRMReportType::T5a:
                rhrmReport = new RHRMReport_T5a();
                break;

            case RHRMReportType::T6:
                rhrmReport = new RHRMReport_T6();
                break;

            case RHRMReportType::T6a:
                rhrmReport = new RHRMReport_T6a();
                break;

            case RHRMReportType::T7:
                rhrmReport = new RHRMReport_T7();
                break;

            case RHRMReportType::T8:
                rhrmReport = new RHRMReport_T8();
                break;

            case RHRMReportType::T8a:
                rhrmReport = new RHRMReport_T8a();
                break;

            case RHRMReportType::T9:
                rhrmReport = new RHRMReport_T9();
                break;

            case RHRMReportType::T9a:
                rhrmReport = new RHRMReport_T9a();
                break;

            case RHRMReportType::T10:
                rhrmReport = new RHRMReport_T10();
                break;

            case RHRMReportType::T10a:
                rhrmReport = new RHRMReport_T10a();
                break;

            case RHRMReportType::T11:
                rhrmReport = new RHRMReport_T11();
                break;

            case RHRMReportType::T11a:
                rhrmReport = new RHRMReport_T11a();
                break;

            case RHRMReportType::F6:
                rhrmReport = new RHRMReport_6_2012();
                break;

            case RHRMReportType::EmplFundSum:
                rhrmReport = new RHRMReport_EmplFundSum();
                break;

            default:
                throw error("@RUP1730");
        }
        rhrmReport.initData(_args);
        return rhrmReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RHRMReport    rhrmReport = RHRMReport::construct(_args);
        Common        common     = _args.record();

        if (rhrmReport.prompt() && rhrmReport.check())
        {
            if (rhrmReport.makeDocument())
            {
                try
                {
                    rhrmReport.runOperation();
                    rhrmReport.saveDocument();
                }
                catch (Exception::Error)
                {
                    rhrmReport.saveDocument();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>