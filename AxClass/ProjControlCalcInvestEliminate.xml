<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlCalcInvestEliminate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjControlCalcInvestEliminate
extends ProjControlCalcInvest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualCostAmount</Name>
				<Source><![CDATA[
    protected AmountMST actualCostAmount(ProjControlPeriodTable  _projControlPeriod)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capital</Name>
				<Source><![CDATA[
    AmountMST capital(
        ProjCostType    _costType)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consum</Name>
				<Source><![CDATA[
    AmountMST consum(
        ProjCostType    _costType)
    {
        switch (_costType)
        {
            case ProjCostType::Hour:
                return projControlColumnAccEstimatePrev.ConsumHourConsum;
            case ProjCostType::Cost:
                return projControlColumnAccEstimatePrev.ConsumExpConsum;
            case ProjCostType::Item:
                return projControlColumnAccEstimatePrev.ConsumItemConsum;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generalHoursQty</Name>
				<Source><![CDATA[
    ProjQtyEmpl generalHoursQty(
        ProjControlPeriodTable  _controlPeriodTable,
        ProjEstimateColumn      _estimateColumn,
        ProjQty                 _qtyEstimate    = 0
        )
    {
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Estimate:
                return projControlPeriodTableColumnAccEstimate.GeneralHoursQty;
            case ProjEstimateColumn::Accumulated:
                return projControlColumnAccEstimatePrev.GeneralHoursQty;
            case ProjEstimateColumn::Total:
                return projControlPeriodTableColumnAccEstimate.GeneralHoursQty;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodUpdateColumnAccEstimateSecond</Name>
				<Source><![CDATA[
    void periodUpdateColumnAccEstimateSecond(
        ProjControlPeriodTable  _projControlPeriodTable)
    {
        projControlPeriodTableColumnAccEstimate.plCostAccCost = projControlColumnAccEstimatePrev.plCostAccCost-accGrossMarginTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodUpdateColumnEstimateSecond</Name>
				<Source><![CDATA[
    void periodUpdateColumnEstimateSecond(
        ProjControlPeriodTable  _projControlPeriodTable)
    {
        projControlPeriodTableColumnEstimate.plCostAccCost          = -accGrossMarginTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostAccCost</Name>
				<Source><![CDATA[
    AmountMST plCostAccCost(
        ProjControlPeriodTable          _projControlPeriodTable,
        ProjEstimateColumn              _estimateColumn,
        ProjControlPeriodTableColumn    _projControlPeriodTableColumnAccEstimate = _projControlPeriodTableColumnAccEstimate)
    {
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Estimate:
                return  _projControlPeriodTable.displayActualCostAmount();
            case ProjEstimateColumn::Accumulated:
                return  _projControlPeriodTable.totalTotalEstimateAccCost();
            case ProjEstimateColumn::Total:
                return 0;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostExpenses</Name>
				<Source><![CDATA[
    ProjExpenses plCostExpenses(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.ConsumExpNotCapital;
        }

        return _projControlPeriodTableColumn.ConsumExpNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostHour</Name>
				<Source><![CDATA[
    AmountMST plCostHour(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.plCostHour;
        }

        return _projControlPeriodTableColumn.ConsumHourNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostItem</Name>
				<Source><![CDATA[
    ProjItem plCostItem(
        ProjControlPeriodTableColumn  _projControlPeriodTableColumnEstimate,
        ProjEstimateColumn            _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.ConsumItemNotCapital;
        }

        return _projControlPeriodTableColumnEstimate.ConsumItemNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCost</Name>
				<Source><![CDATA[
    protected AmountMST wipCost(ProjControlPeriodTable _projControlPeriod)
    {
        return _projControlPeriod.ActualCostAmount - this.wipCostAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceAccruedCost</Name>
				<Source><![CDATA[
    ProjAccruedCost wipCostpriceAccruedCost(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)

    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return -_projControlPeriodTableColumn.plCostAccCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceExp</Name>
				<Source><![CDATA[
    ProjExpenses wipCostpriceExp(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumExpCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceHour</Name>
				<Source><![CDATA[
    ProjHour wipCostpriceHour(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)

    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumHourCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceItem</Name>
				<Source><![CDATA[
    ProjItem wipCostpriceItem(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumItemCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSalespriceTotal</Name>
				<Source><![CDATA[
    ProjTotalWIPSalesprice wipSalespriceTotal(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipSalesPriceSalesValue+
               _projControlPeriodTableColumn.wipSalesPriceProfit+
               _projControlPeriodTableColumn.wipSalespriceProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipTotalGrossWIP</Name>
				<Source><![CDATA[
    ProjGrossWIP wipTotalGrossWIP(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return  _projControlPeriodTableColumn.wipCostpriceTotal+
                _projControlPeriodTableColumn.wipSalespriceTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipTotalNetWIP</Name>
				<Source><![CDATA[
    projNetWIP wipTotalNetWIP(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipTotalGrossWIP-
               _projControlPeriodTableColumn.wipInvoiceOnAcc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>