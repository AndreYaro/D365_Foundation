<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConfirmShipmentReturnDetailCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSConfirmShipmentReturnDetailCreator</c> class is responsible for creating the <c>WHSReturnDetail</c> and <c>WHSReturnLineDetail</c> data
/// when a <c>WHSShipmentTable</c> shipment confirmed.
/// </summary>
internal final class WHSConfirmShipmentReturnDetailCreator
{
    private WHSShipmentTable shipmentTable;
    private Map inventDimInventTransIdMap = new Map(Types::String, Types::String);
    private Map itemUnitIdMap = new Map(Types::String, Types::String);
    private Map returnItemPolicies = new Map(Types::String, Types::UtcDateTime);
    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromShipment</Name>
				<Source><![CDATA[
    internal static WHSConfirmShipmentReturnDetailCreator newFromShipment(WHSShipmentTable _shipmentTable)
    {
        WHSConfirmShipmentReturnDetailCreator creator = new WHSConfirmShipmentReturnDetailCreator();
        creator.shipmentTable = _shipmentTable.data();

        return creator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WHSConfirmShipmentReturnDetailCreator));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnDetails</Name>
				<Source><![CDATA[
    internal void createReturnDetails()
    {
        if (shipmentTable.OrderLineInventTransLinkType == WHSShipmentOrderLineInventTransLinkType::PickingRoute)
        {
            if (WHSUseReturnDetailConfigurationProviderFlight::instance().isEnabled())
            {
                if (WHSReturnDetailConfigurationProvider::isShipmentReturnDetailsCreationEnabled(shipmentTable))
                {
                    ttsbegin;
                    WHSReturnDetail returnDetail = this.createReturnDetail();
                    this.createReturnLineDetails(returnDetail);
                    ttscommit;
                }                
            }
            else
            {
                if (WHSParameters::isShipmentReturnDetailsCreationEnabled())
                {
                    ttsbegin;
                    WHSReturnDetail returnDetail = this.createReturnDetail();
                    this.createReturnLineDetails(returnDetail);
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnDetail</Name>
				<Source><![CDATA[
    private WHSReturnDetail createReturnDetail()
    {
        WHSReturnDetail returnDetail;

        using (var activityContext = this.instrumentationLogger().containerCloseReturnDetailCreatorActivities().createReturnDetail())
        {
            returnDetail.initFromShipment(shipmentTable);
            returnDetail.ShipUTCDateTime = DateTimeUtil::getSystemDateTime();
            returnDetail.insert();

            this.instrumentationLogger().containerCloseReturnDetailCreatorActivities().returnDetailRecId(activityContext, returnDetail.RecId);
        }

        return returnDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnLineDetails</Name>
				<Source><![CDATA[
    private void createReturnLineDetails(WHSReturnDetail _returnDetail)
    {
        using (var activityContext = this.instrumentationLogger().containerCloseReturnDetailCreatorActivities().createReturnLineDetails())
        {
            NumberOfRecords returnLineDetailCount;

            RecordInsertList returnLineDetails = new RecordInsertList(tableNum(WHSReturnLineDetail));

            WHSLoadLine loadLine;

            while select loadLine
                where loadLine.ShipmentId == shipmentTable.ShipmentId
                      && loadLine.Qty != 0
            {
                returnLineDetailCount += this.createReturnLineDetailsForLoadLine(_returnDetail, loadLine, returnLineDetails);
            }

            returnLineDetails.insertDatabase();

            this.instrumentationLogger().containerCloseReturnDetailCreatorActivities().returnLineDetailCount(activityContext, _returnDetail.RecId, returnLineDetailCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnLineDetailsForLoadLine</Name>
				<Source><![CDATA[
    private NumberOfRecords createReturnLineDetailsForLoadLine(WHSReturnDetail _returnDetail, WHSLoadLine _loadLine ,RecordInsertList returnLineDetails)
    {
        InventTrans inventTrans;
        WhsLoadLineInventoryPick loadLineInventoryPick;
        InventDim inventDim;

        Map inventDimSumQtyMap =  new Map(Types::String, Types::Integer);
        
        while select inventTrans
            join inventDim
                where inventDim.inventDimId == inventTrans.InventDimId
            exists join loadLineInventoryPick
                where loadLineInventoryPick.PickId == inventTrans.PickingRouteID
                    && loadLineInventoryPick.LoadLine == _loadLine.RecId
             
        {
            InventDimId returnDetailInventDimId = this.calculateInventDimIdWithoutStorageDimensions(inventDim);
            if(!inventDimSumQtyMap.exists(returnDetailInventDimId))
            {
                inventDimSumQtyMap.insert(returnDetailInventDimId, inventTrans.Qty);
            }
            else
            {
                inventDimSumQtyMap.insert(returnDetailInventDimId, inventDimSumQtyMap.lookup(returnDetailInventDimId) + inventTrans.Qty);
            }
        }

        return this.createReturnLineDetailsFromMap(inventDimSumQtyMap, returnLineDetails, _returnDetail, _loadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnLineDetailsFromMap</Name>
				<Source><![CDATA[
    private NumberOfRecords createReturnLineDetailsFromMap(Map _inventDimSumQtyMap, RecordInsertList _returnLineDetails, WHSReturnDetail _returnDetail, WhsLoadLine _loadLine)
    {
        NumberOfRecords createdReturnLineDetailsCount = 0;
        UnitOfMeasureSymbol inventoryUnit = this.calculateItemAndItemsUnitId(_loadLine.ItemId);

        var mapEnum = _inventDimSumQtyMap.getEnumerator();
        WHSReturnUntilUTCDateTime returnDate = this.calculateAllowedDaysForReturn(_loadLine.ItemId, _returnDetail.ShipUTCDateTime);

        while (mapEnum.moveNext())
        {
            InventDimId inventDimId = mapEnum.currentKey();
            InventQty inventQty = mapEnum.currentValue();

            WHSReturnLineDetail returnLineDetail;
            returnLineDetail.initFromReturnDetail(_returnDetail);
            returnLineDetail.ItemId = _loadLine.ItemId;
            returnLineDetail.InventDimId = inventDimId;
            returnLineDetail.InventTransId = _loadLine.inventTransId;
            returnLineDetail.Qty = -inventQty;
            returnLineDetail.Unit = inventoryUnit;
            returnLineDetail.ReturnUntilUTCDateTime = returnDate;

            _returnLineDetails.add(returnLineDetail);
            createdReturnLineDetailsCount++;
        }

        return createdReturnLineDetailsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventDimIdWithoutStorageDimensions</Name>
				<Source><![CDATA[
    private InventDimId calculateInventDimIdWithoutStorageDimensions(InventDim _inventTransInventDim)
    {
        if(!inventDimInventTransIdMap.exists(_inventTransInventDim.inventDimId))
        {
            InventDim inventDim = InventDim::find(_inventTransInventDim.inventDimId);
            inventDim.clearStorageDimensions();

            inventDim = InventDim::findOrCreate(inventDim);
            inventDimInventTransIdMap.insert(_inventTransInventDim.inventDimId, inventDim.inventDimId);

            return inventDim.inventDimId;
        }
        else
        {
            return inventDimInventTransIdMap.lookup(_inventTransInventDim.inventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateItemAndItemsUnitId</Name>
				<Source><![CDATA[
    private UnitOfMeasureSymbol calculateItemAndItemsUnitId(ItemId _itemId)
    {
        if(!itemUnitIdMap.exists(_itemId))
        {
            UnitOfMeasureSymbol inventoryUnit = InventTable::find(_itemId).inventUnitId();
            itemUnitIdMap.insert(_itemId, inventoryUnit);
            return inventoryUnit;
        }
        else
        {
            return itemUnitIdMap.lookup(_itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAllowedDaysForReturn</Name>
				<Source><![CDATA[
    private WHSReturnUntilUTCDateTime calculateAllowedDaysForReturn(ItemId _itemId, WHSReturnUntilUTCDateTime _shipUTCDateTime)
    {
        if (!returnItemPolicies.exists(_itemId))
        {
            WHSReturnLineDetailReturnUntilDateCalculator returnUntilDateCalculator = WHSReturnLineDetailReturnUntilDateCalculator::newFromItemIdAndShipDate(_itemId, _shipUTCDateTime);
            WHSReturnUntilUTCDateTime returnUntilDateTime = returnUntilDateCalculator.calculateReturnUntilDate();

            returnItemPolicies.insert(_itemId, returnUntilDateTime);
        }

        return returnItemPolicies.lookup(_itemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>