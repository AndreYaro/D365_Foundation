<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRollUpSynchronizationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Synchronize capacity roll-ups for an activity resource.
/// </summary>
public class ResRollUpSynchronizationTask extends ResCapacitySynchronizationTask implements BatchRetryable
{
    #OCCRetryCount
    #TimeConstants

    private ActivityResourceId activityResourceId;
    private DialogField dialogActivityResourceId;
    private DialogField dialogCoverage;

    const Integer CurrentVersion = 2;

    #LOCALMACRO.CurrentList
        activityResourceId,
        fromDate,
        toDate,
        periodCode,
        removeExistingRecords
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads metadata information from batch job dialog.
    /// </summary>
    protected void readFromDialog()
    {
        super();
        activityResourceId = dialogActivityResourceId.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlsToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to the dialog.
    /// </summary>
    /// <param name = "_dialog">Dialog form.</param>
    protected void addControlsToDialog(DialogRunbase _dialog)
    {
        dialogActivityResourceId = _dialog.addFieldValue(extendedTypeStr(ActivityResourceId),
            activityResourceId, "@Res:ActivityResourceId");
        this.parmCheckRollupDateRange(true);

        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the activity resource identifier.
    /// </summary>
    /// <param name = "_activityResourceId">Activity resource identifier.</param>
    /// <returns>Activity resource identifier.</returns>
    public ActivityResourceId activityResourceId(ActivityResourceId _activityResourceId = activityResourceId)
    {
        activityResourceId = _activityResourceId;
        return activityResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs roll-up synchronization task arguments.
    /// </summary>
    /// <returns>Roll-up synchronization task arguments.</returns>
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks roll-up synchronization batch arguments.
    /// </summary>
    /// <param name = "packedClass">Roll-up synchronization batch arguments.</param>
    /// <returns>True when the operation succeeds. Otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of roll-up synchronization task.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of roll-up synchronization task.
    /// </summary>
    /// <returns>Roll-up schronization task.</returns>
    public static ResRollUpSynchronizationTask construct()
    {
        ResRollUpSynchronizationTask task = new ResRollUpSynchronizationTask();
        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes task roll-up synchronization.
    /// </summary>
    public void run()
    {
        if (ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled())
        {
            ProjParameters projParameters = ProjParameters::find();

            if (projParameters && projParameters.ResPerfDataUpgradeStatus != ProjDataUpgradeStatus::NotUpgraded)
            {
                throw error("@Res:ResRollupSynchronizationWarning");
            }
        }

        this.initDates(false);

        if (activityResourceId)
        {
            ResRollUpWriter::updateRollUpForSpecificActivityResourceId(activityResourceId, DateTimeUtil::newDateTime(fromDate, 0),
            DateTimeUtil::newDateTime(toDate, #LastSecondOfTheDay));
        }
        else
        {
            ResRollUpWriter::updateRollUpForAllResources(DateTimeUtil::newDateTime(fromDate, 0),
            DateTimeUtil::newDateTime(toDate, #LastSecondOfTheDay), removeExistingRecords);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the job description.
    /// </summary>
    /// <returns>Job description.</returns>
    public static ClassDescription description()
    {
        return "@Res:CapacityRollUpSynchronizationTask";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the roll-up synchronization job user interface.
    /// </summary>
    /// <param name = "_args">Action arguments.</param>
    public static void main(Args _args)
    {
        var task = ResRollUpSynchronizationTask::construct();

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>