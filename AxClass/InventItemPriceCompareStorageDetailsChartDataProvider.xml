<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceCompareStorageDetailsChartDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceCompareStorageDetailsChartDataProvider</c> class provides a temporary buffer for comparison of two prices from a storage execution.
/// </summary>
internal class InventItemPriceCompareStorageDetailsChartDataProvider
{
    private InventItemPriceCompareStorageDetails inventItemPriceCompareStorageDetails;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventItemPriceCompareStorageDetailsChartDataProvider construct()
    {
        return new InventItemPriceCompareStorageDetailsChartDataProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventItemPriceCompareStorageDetailsChartDataProvider</c> class from the an instance of the <c>CostPriceCompareArgs</c> class.
    /// </summary>
    /// <param name = "_costPriceCompareArgs">A <c>InventItemPriceCompareStorageDetailsArgs</c> class instance.</param>
    internal void init(InventItemPriceCompareStorageDetailsArgs _costPriceCompareArgs)
    {
        this.setInventItemPriceCompareStorageDetails(_costPriceCompareArgs.parmInventItemPriceCompareStorageDetails());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventItemPriceCompareStorageDetails</Name>
				<Source><![CDATA[
    internal void setInventItemPriceCompareStorageDetails(InventItemPriceCompareStorageDetails _inventItemPriceCompareStorageDetails)
    {
        inventItemPriceCompareStorageDetails = _inventItemPriceCompareStorageDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the data from the item price comparison into a temporary table.
    /// </summary>
    /// <returns>The <c>CostPriceCompareTmp</c> cursor.</returns>
    internal CostPriceCompareTmp loadData()
    {
        CostPriceCompareTmp priceCompareData;

        InventItemPriceCompareStorageDetails queryInventItemPriceCompareStorageDetails;
        const int ComparisonLevel = 1;

        ttsbegin;

        insert_recordset priceCompareData (Level, CostGroupType, CostGroupId, Resource, UnitId, CostCompareValue1, QuantityCompareValue1, CostCompareValue2, QuantityCompareValue2, CostDifference)
        select ComparisonLevel, CostGroupType, CostGroupId, ItemId, UnitId, UnitPrice, PriceUnit, CompareToUnitPrice, CompareToPriceUnit, NetChange from queryInventItemPriceCompareStorageDetails
            where queryInventItemPriceCompareStorageDetails.TransactionId == inventItemPriceCompareStorageDetails.TransactionId
                && queryInventItemPriceCompareStorageDetails.ItemId == inventItemPriceCompareStorageDetails.ItemId
                && queryInventItemPriceCompareStorageDetails.InventDimId == inventItemPriceCompareStorageDetails.InventDimId;
        
        ttscommit;

        return priceCompareData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>