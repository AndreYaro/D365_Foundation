<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzTaxDocumentCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CzTaxDocumentCreate</c> is used to create tax documents.
/// </summary>
abstract class CzTaxDocumentCreate extends RunBase
{
    private const str FeatureReference = 'CZ-00006';

    CustVendTrans       trans;

    CzTaxDocumentDate   documentDate;
    CzTaxDocumentAction documentAction;

    DialogField         documentDateField,
                        documentActionField;

    CzCalcTaxes         calc;
    CzCalcTaxesIterator iterator;

    CompanyId           company;

    private CurrencyCode transactionCurrencyCode;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        documentAction
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDocumentNumField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is overloaded in an extended class.
    /// </summary>
    /// <param name="_dialog">
    /// The dialog to add the field to.
    /// </param>
    protected void addDocumentNumField(DialogRunbase _dialog)
    {
        DialogRunbase dummy()
        {
            return _dialog;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a number to the tax document using the number sequence.
    /// </summary>
    /// <param name="_document">
    /// Tax document to assaign a number to.
    /// </param>
    abstract protected void allocateDocumentNum(CzTaxDocumentTable _document)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxes</Name>
				<Source><![CDATA[
    private void calcTaxes(CzTaxDocumentTable _document)
    {
        calc = CzTaxDocumentCreate::calcTaxesServer(_document);

        _document.vatAmountCur = calc.taxAmountCur_VAT();
        _document.vatAmountMST = calc.taxAmountMST_VAT();

        _document.AmountCur    = _document.vatAmountCur + calc.taxBaseAmountCur_VAT() + calc.taxBaseAmountCur_Other();
        _document.AmountMST    = _document.vatAmountMST + calc.taxBaseAmountMST_VAT() + calc.taxBaseAmountMST_Other();

        iterator = calc.getIterator();
        transactionCurrencyCode = calc.transactionCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    private boolean check()
    {
        boolean ret = true;

        if (! trans.Prepayment)
            ret = checkFailed("@GLS108303");

        if (CzTaxDocumentTable::exist(trans.Voucher, trans.TransDate))
            ret = checkFailed("@GLS108304");

        if (ret && trans.Closed)
            warning("@GLS111557");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    private void createTrans(CzTaxDocumentTable _document)
    {
        CzTaxDocumentTrans  docTrans;

        docTrans.HeaderRecId = _document.RecId;

        while (iterator.more())
        {
            [ docTrans.vatType, docTrans.vatValue ] = iterator.key();

            docTrans.AmountCur    = this.sign() * (iterator.value().taxAmountCur() +
                                                   iterator.value().taxBaseAmountCur());
            docTrans.AmountMST    = this.sign() * (iterator.value().taxAmountMST() +
                                                   iterator.value().taxBaseAmountMST());
            docTrans.vatAmountCur = this.sign() * iterator.value().taxAmountCur();
            docTrans.vatAmountMST = this.sign() * iterator.value().taxAmountMST();

            if (docTrans.AmountCur    ||
                docTrans.AmountMST    ||
                docTrans.vatAmountCur ||
                docTrans.vatAmountMST)
            {
                docTrans.CurrencyCode = transactionCurrencyCode;
                docTrans.insert();
            }

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    #define.Columns(2)
    public Object dialog()
    {
        DialogRunbase ret = super();

        ret.curFormGroup().columns(#Columns);

        this.addDocumentNumField(ret);
        documentDateField   = ret.addFieldValue(extendedTypeStr(CzTaxDocumentDate),   documentDate ?
                                                                             documentDate :
                                                                             DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        documentActionField = ret.addFieldValue(enumStr(CzTaxDocumentAction), documentAction);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values from the dialog and sets them to local variables.
    /// </summary>
    /// <returns>
    /// true if the operation was successful; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        documentDate   = documentDateField.value();
        documentAction = documentActionField.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the <c>CzTaxDocumentTable</c> table to the database.
    /// </summary>
    /// <param name="_document">
    /// Record to write to the database.
    /// </param>
    protected void insert(CzTaxDocumentTable _document)
    {
        _document.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the menu item name for the tax document form.
    /// </summary>
    /// <returns>
    /// The menu item name for the tax document form.
    /// </returns>
    abstract protected str menuItemForm()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the menu item name for the tax document report.
    /// </summary>
    /// <returns>
    /// The menu item name for the tax document report.
    /// </returns>
    abstract protected str menuItemReport()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustVendTrans _trans)
    {
        super();

        trans = _trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompany</Name>
				<Source><![CDATA[
    public CompanyId parmCompany(CompanyId _company = company)
    {
        company = _company;
        return company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    final public CzTaxDocumentDate parmDocumentDate(CzTaxDocumentDate _documentDate = documentDate)
    {
        documentDate = _documentDate;
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNum</Name>
				<Source><![CDATA[
    public CzTaxDocumentNum parmDocumentNum(CzTaxDocumentNum _documentNum = "")
    {
        return _documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    final public void run()
    {
        #ISOCountryRegionCodes

        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        CzTaxDocumentTable  document;
        CzTaxDocumentLink   link;
        TaxTrans            taxTrans;
        MenuFunction        action;
        Args                args;

        if (! this.check())
            throw error("@SYS23020");

        ttsbegin;
        document.TaxDocumentDate = documentDate;
        document.TransTableId    = trans.TableId;
        document.insert();

        link.initFromCustVendTrans(trans);
        link.TaxDocumentRecId = document.RecId;
        link.insert();

        this.calcTaxes(document);

        select firstonly taxTrans
            order by taxTrans.RecId desc
            where taxTrans.Voucher == trans.voucher
                && taxTrans.TransDate == trans.TransDate
                && (!taxTrans.TaxValue || taxTrans.ExemptTax);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ])
            && taxTrans || document.vatAmountCur)
        {
            this.allocateDocumentNum(document);
            this.insert(document);

            this.createTrans(document);
        }
        else
        {
            error("@GLS111750");
            document.delete();
            documentAction = CzTaxDocumentAction::Create;
        }

        ttscommit;

        switch (documentAction)
        {
            case CzTaxDocumentAction::Create      :
                break;
            case CzTaxDocumentAction::CreatePrint :
                action = new MenuFunction(this.menuItemReport(), MenuItemType::Output);
                break;
            case CzTaxDocumentAction::CreateShow  :
                action = new MenuFunction(this.menuItemForm(), MenuItemType::Display);
                break;
        }

        if (action)
        {
            args = new Args();
            args.record(trans);
            action.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sign to use when writing tax values for the tax document.
    /// </summary>
    /// <returns>
    /// The sign to use when writing tax values for the tax document.
    /// </returns>
    abstract protected  int sign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret;

        switch (version)
        {
            case #CurrentVersion:
                [ version, #CurrentList ] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxesServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes for a given <c>CzTaxDocumentTable</c> record.
    /// </summary>
    /// <param name="_document">
    /// The tax document to calculate taxes for.
    /// </param>
    /// <returns>
    /// An instance of the <c>CzCalcTaxes</c> with calculated tax information.
    /// </returns>
    public static CzCalcTaxes calcTaxesServer(CzTaxDocumentTable _document)
    {
        CzCalcTaxes                calc;
        CzTaxDocumentLink          link, link2;
        TaxTable                   taxTable;
        TaxTrans                   taxTrans;
        CustVendTransPostingLog_RU postingLog;
        CustVendTrans              custVendTrans;
        Set                        voucherSet = new Set(Types::Container);

        AmountMST                  taxBaseAmountMST;
        AmountCur                  taxBaseAmountCur;

        select taxTrans
        exists join link
            where link.TaxDocumentRecId == _document.RecId   &&
                  taxTrans.Voucher      == link.TransVoucher &&
                  taxTrans.TransDate    == link.TransDate;

        calc = CzCalcTaxes::construct(taxTrans, true);
        calc.transactionCurrencyCode(taxTrans.SourceCurrencyCode);
        calc.calc();

        custVendTrans = new DictTable(_document.TransTableId).makeRecord();
        while select RecId, AmountCur, AmountMST, SettleAmountCur, SettleAmountMST from custVendTrans
        exists join link2
            where link2.TaxDocumentRecId   == _document.RecId   &&
                  custVendTrans.Voucher   == link2.TransVoucher &&
                  custVendTrans.TransDate == link2.TransDate &&
                  custVendTrans.Prepayment == NoYes::Yes
        {
            taxBaseAmountMST += custVendTrans.AmountMST - custVendTrans.SettleAmountMST;
            taxBaseAmountCur += custVendTrans.AmountCur - custVendTrans.SettleAmountCur;

            while select postingLog
                where postingLog.PostingLogType == CustVendTransPostingLogType_RU::PrepaymentStornoVAT &&
                     (postingLog.TransRecId  == custVendTrans.RecId ||
                      postingLog.OffSetRecId == custVendTrans.RecId)
            {
                if (voucherSet.in([ postingLog.Voucher, postingLog.TransDate ]))
                    continue;
                voucherSet.add([ postingLog.Voucher, postingLog.TransDate ]);

                if (postingLog.Reversed)
                {
                    select TaxCode,
                           TransDate,
                           TaxAmount,
                           TaxBaseAmount,
                           TaxAutogenerated,
                           SourceTaxAmountCur,
                           SourceRegulateAmountCur,
                           SourceBaseAmountCur
                    from taxTrans
                        where taxTrans.Voucher   == postingLog.Voucher &&
                             (taxTrans.TransDate == postingLog.TransDate ||
                              taxTrans.TransDate == postingLog.reverseDate())
                    join TaxType_W, TaxBase from taxTable
                        where taxTable.TaxCode   == taxTrans.TaxCode;

                    CzTaxDocumentCreate::processTaxes(calc, taxTrans, taxTable);
                }
                else
                {
                    select TaxCode,
                           TransDate,
                           TaxAmount,
                           TaxBaseAmount,
                           TaxAutogenerated,
                           SourceTaxAmountCur,
                           SourceRegulateAmountCur,
                           SourceBaseAmountCur
                    from taxTrans
                        where taxTrans.Voucher   == postingLog.Voucher &&
                              taxTrans.TransDate == postingLog.TransDate
                    join TaxType_W, TaxBase from taxTable
                        where taxTable.TaxCode   == taxTrans.TaxCode;

                    CzTaxDocumentCreate::processTaxes(calc, taxTrans, taxTable);

                    if (CzTaxDocumentCreateAddTaxesFromInvoicesFlight::instance().isEnabled())
                    {
                        AmountMST taxBaseAmountMSTLoc;
                        AmountCur taxBaseAmountCurLoc;
                        [taxBaseAmountMSTLoc, taxBaseAmountCurLoc] = CzTaxDocumentCreate::addTaxesFromPostedInvoices(calc, _document, postingLog);
                        taxBaseAmountCur += taxBaseAmountCurLoc;
                        taxBaseAmountMST += taxBaseAmountMSTLoc;
                    }
                }
            }
        }

        taxBaseAmountCur -= (calc.taxBaseAmountCur_Other() + calc.taxBaseAmountCur_VAT() + calc.taxAmountCur_Other() + calc.taxAmountCur_VAT());
        taxBaseAmountMST -= (calc.taxBaseAmountMST_Other() + calc.taxBaseAmountMST_VAT() + calc.taxAmountMST_Other() + calc.taxAmountMST_VAT());
        if (taxBaseAmountCur || taxBaseAmountMST)
        {
            calc.add(TaxType_W::Other,
                     0,
                     taxBaseAmountMST,
                     0,
                     taxBaseAmountCur,
                     0);
        }

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxes</Name>
				<Source><![CDATA[
    private static container processTaxes(
        CzCalcTaxes _calc,
        TaxTrans _taxTrans,
        TaxTable _taxTable)
    {
        AmountMST taxBaseAmountMST;
        AmountCur taxBaseAmountCur;

        while (_taxTrans)
        {
            taxBaseAmountMST += _taxTrans.TaxAmount + _taxTrans.TaxBaseAmount;
            taxBaseAmountCur += _taxTrans.taxAmountCur_W() + _taxTrans.SourceBaseAmountCur;

            _calc.add(_taxTable.TaxType_W,
                _taxTrans.TaxAmount,
                _taxTrans.TaxBaseAmount,
                _taxTrans.taxAmountCur_W(),
                _taxTrans.SourceBaseAmountCur,
                TaxData::percent(_taxTrans.TaxCode,
                                _taxTrans.TransDate,
                                _taxTable.TaxBase));
            next _taxTrans;
        }

        return [taxBaseAmountMST, taxBaseAmountCur];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxesFromPostedInvoices</Name>
				<Source><![CDATA[
    private  static container addTaxesFromPostedInvoices(
        CzCalcTaxes _calc,
        CzTaxDocumentTable _document,
        CustVendTransPostingLog_RU _postingLog)
    {
        TaxTable taxTable;
        TaxTrans taxTrans;
        CustVendTrans custVendTrans = new DictTable(_document.TransTableId).makeRecord();

        select TaxCode,
            TransDate,
            TaxAmount,
            TaxBaseAmount,
            TaxAutogenerated,
            SourceTaxAmountCur,
            SourceRegulateAmountCur,
            SourceBaseAmountCur
        from taxTrans
        join TaxType_W, TaxBase from taxTable
            where taxTable.TaxCode   == taxTrans.TaxCode
        exists join custVendTrans
            where (custVendTrans.RecId == _postingLog.OffSetRecId
            || custVendTrans.RecId == _postingLog.TransRecId)
            && custVendTrans.Prepayment == NoYes::No
            && custVendTrans.TransType != LedgerTransType::Settlement
            && custVendTrans.Voucher   == taxTrans.Voucher
            && custVendTrans.TransDate == taxTrans.TransDate;

        return CzTaxDocumentCreate::processTaxes(_calc, taxTrans, taxTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of one the extended classes of <c>CzTaxDocumentCreate</c>
    /// based on the provided transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction to create a tax document for.
    /// </param>
    /// <returns>
    /// An instance of the <c>CzTaxDocumentCreate</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A tax document cannot be created for the provided transaction.
    /// </exception>
    public static CzTaxDocumentCreate construct(Common _trans)
    {
        CzTaxDocumentCreate ret;
        LedgerJournalTrans  tmpTrans;
        Voucher             voucher;
        CompanyId           company  = curext();

        switch (_trans.TableId)
        {
            case tablenum(CustTrans) :
                ret = new CzTaxDocumentCreate_Cust(_trans);
                break;

            case tablenum(VendTrans) :
                ret = new CzTaxDocumentCreate_Vend(_trans);
                break;

            case tablenum(LedgerJournalTrans) :
                tmpTrans = _trans;

                if (! tmpTrans.Prepayment)
                    throw error("@GLS108303");

                if (! tmpTrans.ledgerJournalTable().Posted)
                    throw error("@SYS23002");

                voucher = tmpTrans.Voucher;

                if (tmpTrans.isCompanyIntercompany())
                {
                    company = tmpTrans.Company;

                    if (! xDataArea::exist(company))
                    {
                        throw error(strfmt("@SYS10666", company));
                    }

                    voucher = tmpTrans.ForeignVoucher;
                }

                changecompany(company)
                {
                    switch (tmpTrans.AccountType)
                    {
                        case LedgerJournalACType::Cust :
                            ret = new CzTaxDocumentCreate_Cust(CustTrans::findVoucherDate(voucher, tmpTrans.TransDate));
                            break;
                        case LedgerJournalACType::Vend :
                            ret = new CzTaxDocumentCreate_Vend(VendTrans::findVoucherDate(voucher, tmpTrans.TransDate));
                            break;
                        default                        :
                            throw error(Error::wrongUseOfFunction(funcname()));
                    }
                }
                break;

            default                  :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        ret.parmCompany(company);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CzTaxDocumentCreate doc;

        Common              record;
        FormDataSource      dataSource;

        if (! _args                                 ||
            ! _args.record()                        ||
            (_args.dataset() != tablenum(CustTrans)     &&
             _args.dataset() != tablenum(VendTrans)     &&
             _args.dataset() != tablenum(LedgerJournalTrans)))
            throw error(strfmt("@SYS25516", "@GLS108305"));

        doc = CzTaxDocumentCreate::construct(_args.record());

        if (doc.prompt())
        {
            changecompany(doc.parmCompany())
            {
                doc.runOperation();
            }
        }

        if (FormDataUtil::isFormDataSource(_args.record()))
        {
            record = _args.record().data();

            dataSource = FormDataUtil::getFormDataSource(_args.record());
            dataSource.executeQuery();
            dataSource.positionToRecord(record);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>