<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceQueueTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileDeviceQueueTask</c> class is used to run batch job for processing a collection of mobile device events and messages.
/// </summary>
public final class WHSMobileDeviceQueueTask extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private WHSMobileDeviceQueueBatchAffinity affinity;
    private int64 messageCount;
    private int prevLastInfoLogLineOnQueueMessageCollectionFault;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.ParmList
        affinity,
        messageCount
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        
        affinity = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return  [#CurrentVersion, #ParmList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean status;
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmList] = _packedClass;
                status = true;
                break;

            default:
                status = false;
        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAffinity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final WHSMobileDeviceQueueBatchAffinity parmAffinity(WHSMobileDeviceQueueBatchAffinity _affinity = affinity)
    {
        affinity = _affinity;

        return affinity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessageCount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final int64 parmMessageCount()
    {
        return messageCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void reset()
    {
        try
        {
            Batch batchTable;
        
            update_recordset batchTable
            setting  Status = BatchStatus::Ready
            where batchTable.BatchJobId == this.batchInfo().parmBatchHeader().parmBatchHeaderId() &&
                batchTable.RunTimeTask == false &&
                batchTable.ClassNumber == classNum(WHSMobileDeviceQueueManager);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            // eat the exception
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            this.processMessages();
        
            this.completeMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessages</Name>
				<Source><![CDATA[
    private void processMessages()
    {
        #OCCRetryCount

        WHSMobileDeviceQueueBatchAffinity batchAffinity = this.parmAffinity();

        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;

        prevLastInfoLogLineOnQueueMessageCollectionFault = 0;

        while select QueueMessageCollectionRecId from mobileDeviceQueueMessage group by QueueMessageCollectionRecId
            where mobileDeviceQueueMessage.BatchAffinity == batchAffinity
        {
            WHSMobileDeviceEvent mobileDeviceEvent;
            WHSMobileDeviceQueueMessageCollection mobileDeviceQueueMessageCollection = WHSMobileDeviceQueueMessageCollection::findRecId(mobileDeviceQueueMessage.QueueMessageCollectionRecId);

            try
            {
                WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

                using (var activityContext = instrumentationLogger.mobileDeviceEventQueueManager().processMessageCollection(mobileDeviceQueueMessageCollection))
                {
                    mobileDeviceEvent = WHSMobileDeviceEvent::singletonFromType(mobileDeviceQueueMessageCollection.EventType);

                    if (mobileDeviceEvent)
                    {
                        mobileDeviceEvent.processEvent(mobileDeviceQueueMessageCollection, batchAffinity);
                    }
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.queueMessageCollectionFaulted(mobileDeviceQueueMessageCollection);
                    throw;
                }
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    if (ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
                    {                    
                        this.queueMessageCollectionFaulted(mobileDeviceQueueMessageCollection);
                    }
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                // Using the optimistic pattern - recovery without rollback of transaction
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.queueMessageCollectionFaulted(mobileDeviceQueueMessageCollection);
                    throw Exception::UpdateConflictNotRecovered;
                }
                retry;
            }
            catch (Exception::DuplicateKeyException)
            {
                // Using the optimistic pattern - recovery without rollback of transaction
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.queueMessageCollectionFaulted(mobileDeviceQueueMessageCollection);
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                retry;
            }
            catch
            {
                this.queueMessageCollectionFaulted(mobileDeviceQueueMessageCollection);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queueMessageCollectionFaulted</Name>
				<Source><![CDATA[
    private void queueMessageCollectionFaulted(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection)
    {
        int infologLine = infologLine();
        boolean whsMobileDeviceQueueEventLogMultiMessagesInBatchFlightEnabled = WHSMobileDeviceQueueEventLogMultiMessagesInBatchFlight::instance().isEnabled();

        ttsbegin;

        WHSMobileDeviceQueueMessage::updateQueueMessageState(_mobileDeviceQueueMessageCollection.RecId, this.parmAffinity(), WHSMobileDeviceQueueMessageState::Failed);

        if ((Global::infologLine() > 0 && !whsMobileDeviceQueueEventLogMultiMessagesInBatchFlightEnabled) 
            || (infologLine > prevLastInfoLogLineOnQueueMessageCollectionFault && whsMobileDeviceQueueEventLogMultiMessagesInBatchFlightEnabled))
        {
            WHSMobileDeviceQueueMessageCollectionLog mobileDeviceQueueMessageCollectionLog;

            mobileDeviceQueueMessageCollectionLog.QueueMessageCollectionRecId = _mobileDeviceQueueMessageCollection.RecId;
            mobileDeviceQueueMessageCollectionLog.BatchAffinity = this.parmAffinity();
            if (whsMobileDeviceQueueEventLogMultiMessagesInBatchFlightEnabled)
            {
                mobileDeviceQueueMessageCollectionLog.ErrorLog = infolog.copy(prevLastInfoLogLineOnQueueMessageCollectionFault + 1, infologLine);
                prevLastInfoLogLineOnQueueMessageCollectionFault = infologLine;
            }
            else
            {
                mobileDeviceQueueMessageCollectionLog.ErrorLog = infolog.copy(1,infolog.num());
            }
            mobileDeviceQueueMessageCollectionLog.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeMessages</Name>
				<Source><![CDATA[
    private void completeMessages()
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.mobileDeviceEventQueueManager().completeMessages())
        {
            WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;

            ttsbegin;

            mobileDeviceQueueMessage.skipDataMethods(true);

            delete_from mobileDeviceQueueMessage
                where mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued
                   && mobileDeviceQueueMessage.BatchAffinity == this.parmAffinity();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignBatchAffinity</Name>
				<Source><![CDATA[
    private void assignBatchAffinity()
    {
        WHSMobileDeviceQueueBatchAffinity avaliable = emptyGuid();
        WHSMobileDeviceQueueBatchAffinity batchAffinity = this.parmAffinity();

        #OCCRetryCount

        try
        {
            WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

            using (var activityContext = instrumentationLogger.mobileDeviceEventQueueManager().queueAllRecords())
            {
                container rootEventTypes = this.rootEventTypes();
                container dependentEventTypes = this.dependentEventTypes();

                ttsbegin;

                WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
                WHSMobileDeviceQueueMessageCollection mobileDeviceQueueMessageCollection;
            
                update_recordSet mobileDeviceQueueMessage
                    setting BatchAffinity = batchAffinity
                exists join mobileDeviceQueueMessageCollection
                where 
                    mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued &&
                    mobileDeviceQueueMessage.BatchAffinity == avaliable &&
                    mobileDeviceQueueMessageCollection.RecId == mobileDeviceQueueMessage.QueueMessageCollectionRecId &&
                    mobileDeviceQueueMessageCollection.EventType in rootEventTypes;

                ttscommit;

                messageCount = mobileDeviceQueueMessage.RowCount();

                WHSMobileDeviceQueueMessage nestedMobileDeviceQueueMessage;
                WHSMobileDeviceQueueMessageCollection nestedMobileDeviceQueueMessageCollection;

                ttsbegin;

                while select nestedMobileDeviceQueueMessageCollection
                    exists join nestedMobileDeviceQueueMessage
                    where 
                        nestedMobileDeviceQueueMessageCollection.EventType in dependentEventTypes &&
                        nestedMobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued &&
                        nestedMobileDeviceQueueMessage.BatchAffinity == avaliable &&
                        nestedMobileDeviceQueueMessage.QueueMessageCollectionRecId == nestedMobileDeviceQueueMessageCollection.RecId
                {
                    WHSMobileDeviceQueueMessage dependentMobileDeviceQueueMessage;
                    WHSMobileDeviceQueueMessageCollection dependentMobileDeviceQueueMessageCollection;

                    WHSMobileDeviceEvent dependentEvent = WHSMobileDeviceEvent::singletonFromType(nestedMobileDeviceQueueMessageCollection.EventType);

                    if (!dependentEvent)
                    {
                        throw error("@WAX:Error_MobileDeviceQueueMessageCollectionDoNotExist");
                    }

                    select firstonly dependentMobileDeviceQueueMessage
                        where dependentMobileDeviceQueueMessage.State                == WHSMobileDeviceQueueMessageState::Queued
                    exists join dependentMobileDeviceQueueMessageCollection
                        where dependentMobileDeviceQueueMessageCollection.RecId      == dependentMobileDeviceQueueMessage.QueueMessageCollectionRecId
                            && dependentMobileDeviceQueueMessageCollection.EventType  == dependentEvent.getEventTypeDependency()
                            && dependentMobileDeviceQueueMessageCollection.Identifier == nestedMobileDeviceQueueMessageCollection.Identifier;

                    if (!dependentMobileDeviceQueueMessage)
                    {
                        update_recordSet mobileDeviceQueueMessage
                            setting BatchAffinity = batchAffinity
                        where
                            mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued &&
                            mobileDeviceQueueMessage.BatchAffinity == avaliable &&
                            mobileDeviceQueueMessage.QueueMessageCollectionRecId == nestedMobileDeviceQueueMessageCollection.RecId;

                        messageCount += mobileDeviceQueueMessage.RowCount();
                    }
                }
            
                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::Error)
        {
            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootEventTypes</Name>
				<Source><![CDATA[
    protected container rootEventTypes()
    {
        return [WHSMobileDeviceQueueEventType::TransferOrderCreate, WHSMobileDeviceQueueEventType::InventoryMovement];
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependentEventTypes</Name>
				<Source><![CDATA[
    protected container dependentEventTypes()
    {
        return [WHSMobileDeviceQueueEventType::TransferOrderComplete];
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:MenuItem_WHSMobileDeviceQueueManager";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileDeviceQueueTask construct()
    {
        return new WHSMobileDeviceQueueTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    public static WHSMobileDeviceQueueTask newTask()
    {
        WHSMobileDeviceQueueTask task = WHSMobileDeviceQueueTask::construct();

        task.assignBatchAffinity();

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return formStr(WHSMobileDeviceQueueEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSMobileDeviceQueueManager);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>