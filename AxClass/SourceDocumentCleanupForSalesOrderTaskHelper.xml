<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentCleanupForSalesOrderTaskHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SourceDocumentCleanupForSalesOrderTaskHelper
{
    #OCCRetryCount
    public static const int FixWindowMonths = SourceDocumentConstants::SourceDocumentCleanupMonthsToSkip;
    public static const int MaxRecordsToFix = SourceDocumentConstants::SourceDocumentCleanupTaskLimit;
    public static const int FixMonthsAllowedToScanOnOneIteration = SourceDocumentConstants::SourceDocumentCleanupMonthsToScanDuringOneIteration;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>saveFromDateForScanningInterval</Name>
				<Source><![CDATA[
    internal static void saveFromDateForScanningInterval(date _date)
    {
        ttsbegin;

        SourceDocumentParametersGlobal sourceDocumentParametersGlobal;

        select firstonly forupdate sourceDocumentParametersGlobal;

        sourceDocumentParametersGlobal.SourceDocumentCleanupForSalesOrderCreationStartScanningDate = _date;

        if (sourceDocumentParametersGlobal.RecId != 0)
        {
            sourceDocumentParametersGlobal.write();
        }
        else
        {
            sourceDocumentParametersGlobal.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateIntervalForJob</Name>
				<Source><![CDATA[
    internal static container getDateIntervalForJob()
    {
        date maxLimitDateWhereDataCouldBeAffected;
        StartDate fromLimitDateForSelect;
        EndDate toLimitDateForSelect;

        maxLimitDateWhereDataCouldBeAffected = DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -FixWindowMonths));

        SourceDocumentParametersGlobal sourceDocumentParametersGlobal;
        select firstOnly sourceDocumentParametersGlobal;

        if (sourceDocumentParametersGlobal
            && sourceDocumentParametersGlobal.SourceDocumentCleanupForSalesOrderCreationStartScanningDate != dateNull())
        {
            fromLimitDateForSelect = sourceDocumentParametersGlobal.SourceDocumentCleanupForSalesOrderCreationStartScanningDate;
            toLimitDateForSelect = min(
                DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::newDateTime(fromLimitDateForSelect, 0), FixMonthsAllowedToScanOnOneIteration)),
                maxLimitDateWhereDataCouldBeAffected);
        }
        else
        {
            fromLimitDateForSelect = dateNull();
            toLimitDateForSelect = maxLimitDateWhereDataCouldBeAffected;
        }

        return [fromLimitDateForSelect, toLimitDateForSelect];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static SysInstrumentationActivityContext getActivityContext(str _classNameStr = '', str _uniqueNameForLogger = '')
    {
        var logger = SysInstrumentationLoggerFactory::CreateLogger(_classNameStr);
        var activity = SysInstrumentationActivity::construct(_uniqueNameForLogger,
            SourceDocumentInstrumentationConstants::InstrumentationNamespaceSourceDocCleanupHeaderAndLineForSalesOrder);
        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQL</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static int64 executeSQL(str _sqlStatement = '')
    {
        return SourceDocumentCleanupForSalesOrderTaskHelper::executeSQLWithParameters(_sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLWithParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static int executeSQLWithParameters(str _sqlStatement = '', Map _sqlParams = SqlParams::create())
    {
        Connection sessionConn = new Connection();
        int impactedRows;

        try
        {
            Statement statement = sessionConn.createStatement();
            new SqlStatementExecutePermission(_sqlStatement).assert();

            impactedRows = statement.executeUpdateWithParameters(_sqlStatement, _sqlParams);

            statement.close();
            CodeAccessPermission::revertAssert();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        finally
        {
            sessionConn.finalize();
        }
        
        return impactedRows;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>