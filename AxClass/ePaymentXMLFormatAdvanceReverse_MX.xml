<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ePaymentXMLFormatAdvanceReverse_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ePaymentXMLFormatAdvanceReverse_MX extends EPaymentXMLFormat_MX
{
    EInvoiceJourBaseMap_MX eInvoiceJourMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCFDIRelacionadosElement</Name>
				<Source><![CDATA[
    protected XmlElement createCFDIRelacionadosElement()
    {
        CustTrans invoiceCustTrans = CustTrans::findByCompany(paymentSettlement.OffsetCompany, paymentSettlement.OffsetRecid);
        XmlElement resultElement = null;

        if (invoiceCustTrans)
        {
            changecompany(paymentSettlement.OffsetCompany)
            {
                EInvoiceJour_MX invoiceJournal;
                Common custProjInvoiceJour = CustInvoiceJour::findFromCustTrans(invoiceCustTrans.Invoice, invoiceCustTrans.TransDate, invoiceCustTrans.AccountNum, true, invoiceCustTrans.Voucher);

                if (!custProjInvoicejour)
                {
                    custProjInvoicejour = invoiceCustTrans.projInvoiceJour_MX();
                }

                if (custProjInvoicejour)
                {
                    invoiceJournal = EInvoiceJour_MX::findByRef(custProjInvoiceJour.TableId, custProjInvoiceJour.RecId);
                }

                if (invoiceJournal.CFDIUUID)
                {
                    XmlElement relacionadoElement = this.createElement('CfdiRelacionado');
                    relacionadoElement.setAttribute('UUID', invoiceJournal.CFDIUUID);

                    resultElement = this.createElement('CfdiRelacionados');
                    resultElement.setAttribute('TipoRelacion', '07');
                    resultElement.appendChild(relacionadoElement);
                }
            }
        }

        return resultElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComprobanteElement</Name>
				<Source><![CDATA[
    protected XmlElement createComprobanteElement()
    {
        XmlElement comprobanteElement;

        CustTrans invoiceCustTrans = CustTrans::findByCompany(paymentSettlement.OffsetCompany, paymentSettlement.OffsetRecid);
        eInvoiceJourMap  = EInvoiceJourBaseMap_MX::construct(payment);

        comprobanteElement = super();

        changecompany(invoiceCustTrans.company())
        {
            ProjInvoiceJour projInvoiceJour;
            CustInvoiceJour custInvoiceJour = invoiceCustTrans.custInvoiceJour_RU();
            EInvoiceJour_MX eInvJour;

            if (custInvoiceJour)
            {
                select firstonly InvoiceDateTime from eInvJour
                    where eInvJour.RefTableId == tableNum(CustInvoiceJour)
                        && eInvJour.RefRecId == custInvoiceJour.RecId;
            }
            else
            {
                select firstonly InvoiceDateTime from eInvJour
                    where eInvJour.RefTableId == tableNum(ProjInvoiceJour)
                exists join projInvoiceJour
                    where projInvoiceJour.RecId == eInvJour.RefRecId
                       && projInvoiceJour.InvoiceAccount == invoiceCustTrans.AccountNum
                       && projInvoiceJour.InvoiceDate == invoiceCustTrans.TransDate
                       && projInvoiceJour.LedgerVoucher == invoiceCustTrans.Voucher;
            }

            if (eInvJour)
            {
                comprobanteElement.setAttribute('Fecha', DateTimeUtil::toStr(DateTimeUtil::applyTimeZoneOffset(eInvJour.InvoiceDateTime, DateTimeUtil::getCompanyTimeZone())));
            }
            else
            {
                comprobanteElement.setAttribute('Fecha', this.getDateTimeStr());
            }
        }

        comprobanteElement.setAttribute('FormaPago', '30');
        comprobanteElement.setAttribute('Moneda', currencyCode);

        if (!this.isLocalCurrency(currencyCode))
        {
            ExchRate exchRate = ExchangeRateHelper::exchRate(currencyCode, invoiceCustTrans.TransDate);
            comprobanteElement.setAttribute('TipoCambio', this.formatXmlAmountCheckDecimal(exchRate/100));
        }
        comprobanteElement.setAttribute('SubTotal', this.formatXmlAmount(subtotalAmount - (totalNegativeTaxAmount - totalPositiveTaxAmount), currencyCode));
        comprobanteElement.setAttribute('Total', this.formatXmlAmount(subtotalAmount, currencyCode));
        comprobanteElement.setAttribute('TipoDeComprobante', 'E');
        comprobanteElement.setAttribute('MetodoPago', 'PUE');

        str voucher;
        ProjInvoiceJour projInvoiceJour = invoiceCustTrans.projInvoiceJour_MX();
        RefRecId numberSequenceTableId;

        if (projInvoiceJour)
        {
            voucher = projInvoiceJour.ProjInvoiceId;
            numberSequenceTableId = EInvoicePost_ProjInvoiceJour_MX::getInvoiceNumberSequence(projInvoiceJour);
        }
        else
        {
            voucher = invoiceCustTrans.Invoice;
            CustInvoiceJour custInvoiceJour = CustInvoiceJour::findFromCustTrans(
                invoiceCustTrans.Invoice,
                invoiceCustTrans.TransDate,
                invoiceCustTrans.AccountNum,
                false,
                invoiceCustTrans.Voucher);
            numberSequenceTableId = EInvoicePost_CustInvoiceJour_MX::getInvoiceNumberSequence(custInvoiceJour);
        }

        NumberSequenceFormat numberSeqFormat = NumberSequenceTable::find(numberSequenceTableId).Format;

        str serie, folio;
        [serie, folio] = EInvoiceCFDIJournalHelper::parseinvoiceSerieAndFolio(numberSeqFormat, voucher);

        this.setAttributeIfNotNull(
            comprobanteElement, 
            'Serie',
            serie);

        this.setAttributeIfNotNull(
            comprobanteElement, 
            'Folio',
            folio);

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConceptoElement</Name>
				<Source><![CDATA[
    protected XmlElement createConceptoElement(Common _conceptoSource = null)
    {
        CustSettlement custSettlement = _conceptoSource;
        XmlElement conceptoElement = super(_conceptoSource);

        TaxAmountCur taxAmount = -this.getConceptoTaxAmount(custSettlement.RecId) + this.getConceptoTaxAmount(custSettlement.RecId, false);

        conceptoElement.setAttribute('Cantidad', '1');
        conceptoElement.setAttribute('Descripcion', 'AplicaciÃ³n de anticipo');
        conceptoElement.setAttribute('ValorUnitario', this.formatXmlAmount(abs(-custSettlement.SettleAmountCur - taxAmount), currencyCode));
        conceptoElement.setAttribute('Importe', this.formatXmlAmount(abs(-custSettlement.SettleAmountCur - taxAmount), currencyCode));

        subtotalAmount -= custSettlement.SettleAmountCur;

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxes</Name>
				<Source><![CDATA[
    protected void fetchTaxes(Common _taxSource)
    {
        CustSettlement custSettlement = _taxSource;
        List positiveTaxesList = new List(Types::Record);
        List negativeTaxesList = new List(Types::Record);
        
        CustTable custTable;

        select firstonly CFDISkipIEPSTaxes_MX from custTable
            where custTable.AccountNum == custSettlement.AccountNum;

        changecompany(custSettlement.TransCompany)
        {
            if (BusinessDocumentCFDIPrepaymentExemptTaxFlight_MX::instance().isEnabled())
            {
                this.populateTaxDetailsWhenCFDIPrepaymentTaxFlightIsEnabled(custTable, custSettlement, positiveTaxesList, negativeTaxesList);
            }
            else
            {
                this.populateTaxDetailsWhenCFDIPrepaymentTaxFlightIsDisabled(custTable, custSettlement, positiveTaxesList, negativeTaxesList);
            }
        }

        conceptoTaxesMap.insert([custSettlement.RecId, 'positive'], positiveTaxesList);
        conceptoTaxesMap.insert([custSettlement.RecId, 'negative'], negativeTaxesList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxDetailsWhenCFDIPrepaymentTaxFlightIsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method populates the taxes details(positiveTaxesList, negativeTaxesList) and flags(regularPositiveTaxExists, regularNegativeTaxExists)
    /// when the flight BusinessDocumentCFDIPrepaymentExemptTaxFlight_MX is enabled
    /// </summary>
    private void populateTaxDetailsWhenCFDIPrepaymentTaxFlightIsEnabled(CustTable _custTable, CustSettlement _custSettlement, List _positiveTaxesList, List _negativeTaxesList)
    {
        TaxTrans taxTrans;
        TaxTable taxTable;

        select firstonly taxTrans
            where taxTrans.Voucher == _custSettlement.SettlementVoucher
                && taxTrans.HeadingTableId == tableNum(CustInvoiceJour)
                && taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                && !(taxTrans.TaxType_MX == TaxType_MX::IEPS && _custTable.CFDISkipIEPSTaxes_MX == NoYes::Yes)
            join NegativeTax from taxTable
                where taxTable.TaxCode == taxTrans.TaxCode;
        
        this.populateTaxesListAndType(taxTable, taxTrans, _positiveTaxesList, _negativeTaxesList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxDetailsWhenCFDIPrepaymentTaxFlightIsDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method populates the taxes details(positiveTaxesList, negativeTaxesList) and flags(regularPositiveTaxExists, regularNegativeTaxExists)
    /// when the flight BusinessDocumentCFDIPrepaymentExemptTaxFlight_MX is disabled
    /// </summary>
    private void populateTaxDetailsWhenCFDIPrepaymentTaxFlightIsDisabled(CustTable custTable, CustSettlement custSettlement, List positiveTaxesList, List negativeTaxesList)
    {
        TaxTable taxTable;
        TaxTrans taxTrans;
        TaxTrans_W taxTransW;

        while select taxTrans
            where taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                && taxTrans.ExemptTax == NoYes::No
                && !(taxTrans.TaxType_MX == TaxType_MX::IEPS && custTable.CFDISkipIEPSTaxes_MX == NoYes::Yes)
            join NegativeTax from taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
            exists join taxTransW
                where taxTransW.TaxTrans == taxTrans.RecId
                    && taxTransW.TransTableId_MX == payment.TableId
                    && taxTransW.TransRecId_MX == custSettlement.TransRecId
                    && taxTransW.OffsetRecId_MX == custSettlement.OffsetRecid
        {
            if (taxTable.NegativeTax)
            {
                positiveTaxesList.addEnd(taxTrans);
                regularPositiveTaxExists = true;
            }
            else
            {
                negativeTaxesList.addEnd(taxTrans);
                regularNegativeTaxExists = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConceptoSourceList</Name>
				<Source><![CDATA[
    protected List getConceptoSourceList()
    {
        List conceptoSourceList = new List(Types::Record);

        conceptoSourceList.addEnd(paymentSettlement);
        return conceptoSourceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConceptoTaxAmount</Name>
				<Source><![CDATA[
    private TaxAmountCur getConceptoTaxAmount(RefRecId _settlementRecId, boolean _positive = true)
    {
        TaxAmountCur taxAmount;
        container key = [_settlementRecId, _positive ? 'positive' : 'negative'];

        List taxTransList = conceptoTaxesMap.lookup(key);
        ListEnumerator le = taxTransList.getEnumerator();
        while (le.moveNext())
        {
            TaxTrans taxTrans = le.current();
            taxAmount += taxTrans.SourceRegulateAmountCur ? taxTrans.SourceRegulateAmountCur : taxTrans.SourceTaxAmountCur;
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocalCurrency</Name>
				<Source><![CDATA[
    private boolean isLocalCurrency(str _currencyCode)
    {
        const str mexicoCurrencyCode = 'MXN';
        const str additionalMexicoCurrencyCode = 'XXX';
        return _currencyCode == mexicoCurrencyCode || _currencyCode == additionalMexicoCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxesListAndType</Name>
				<Source><![CDATA[
    private void populateTaxesListAndType(TaxTable _taxTable, TaxTrans _taxTrans, List _positiveTaxesList, List _negativeTaxesList)
    {
        if (_taxTable.NegativeTax)
        {
            _positiveTaxesList.addEnd(_taxTrans);
            regularPositiveTaxExists = !_taxTrans.ExemptTax;
        }
        else
        {
            _negativeTaxesList.addEnd(_taxTrans);
            regularNegativeTaxExists = !_taxTrans.ExemptTax;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>