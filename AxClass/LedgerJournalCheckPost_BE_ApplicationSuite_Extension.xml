<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_BE_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerJournalCheckPost))]
public final class LedgerJournalCheckPost_BE_ApplicationSuite_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournalStatus</Name>
				<Source><![CDATA[
    protected boolean checkJournalStatus()
    {
        boolean ret = next checkJournalStatus();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        {
            ret = LedgerJournalCheckPost::validateDateOfVoucherSeries(ledgerVoucher, ledgerJournalName.Name) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalIterateJournalLinesEndedWithEventHandlerResultDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// A delegate that is called in the postJournal method at the end of the while loop on journal lines.
    /// </summary>
    /// <param name = "_ledgerJournalCheckPost">The instance of the <c>LedgerJournalCheckPost</c> class.</param>
    /// <param name = "_ledgerJournalTrans">The current <c>LedgerJournalTrans</c> record in the loop.</param>
    /// <param name = "_ok">A boolean indicating the current value of the ok variable.</param>
    /// <param name = "_allOK">A boolean indicating the current value of the allOK variable.</param>
    /// <param name = "_eventHandlerResult">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classStr(LedgerJournalCheckPost), delegateStr(LedgerJournalCheckPost, postJournalIterateJournalLinesEndedWithEventHandlerResultDelegate))]
    public static void postJournalIterateJournalLinesEndedWithEventHandlerResultDelegateHandler(
        LedgerJournalCheckPost _ledgerJournalCheckPost,
        LedgerJournalTrans     _ledgerJournalTrans,
        boolean                _ok,
        boolean                _allOK,
        EventHandlerResult     _eventHandlerResult)
    {
        boolean ret = true;

        if (_eventHandlerResult.hasResult())
        {
            ret = _eventHandlerResult.result();
        }

        if (ret)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
            {
                ret = LedgerJournalCheckPost::validateDateOfVoucherSeries(_ledgerJournalCheckPost.ledgerVoucher, _ledgerJournalCheckPost.ledgerJournalName.Name);
            }
        }

        _eventHandlerResult.result(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateOfVoucherSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the effective date fits in voucher series date range.
    /// </summary>
    /// <param name = "_ledgerVoucher">The <c>LedgerVoucher</c> class instance.</param>
    /// <param name = "_ledgerJournalName">Name of validated journal.</param>
    /// <returns>true if the effective date fits in voucher series date range or date is null; otherwise, false.</returns>
    private static boolean validateDateOfVoucherSeries(LedgerVoucher _ledgerVoucher, JournalDescription _ledgerJournalName)
    {
        boolean ret = true;
        TransDate lastTransDate = _ledgerVoucher.lastTransDate();
        NumberSequenceCode voucherSeriesCode = _ledgerVoucher.parmVoucherSeriesCode();

        if (lastTransDate && voucherSeriesCode)
        {
            LedgerPostingJournalVoucherSeries ledgerPostingJournalVoucherSeries = LedgerPostingJournalVoucherSeries::find(voucherSeriesCode);

            if (ledgerPostingJournalVoucherSeries)
            {
                if (!ledgerPostingJournalVoucherSeries.isDateValid(lastTransDate))
                {
                    ret = checkFailed(strFmt(
                        "@SYS62685",
                        _ledgerVoucher.lastVoucher(),
                        voucherSeriesCode,
                        _ledgerJournalName));
                }
            }
            else
            {
                ret = checkFailed(strFmt("@SYS62431", voucherSeriesCode));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherSeriesCodeInLedgerVoucherForAccrualsDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// A delegate that is called in the postJournal method to update voucher series for accruals.
    /// </summary>
    /// <param name = "_ledgerJournalCheckPost">The instance of the <c>LedgerJournalCheckPost</c> class.</param>
    /// <param name = "_ledgerJournalTrans">The current <c>LedgerJournalTrans</c>.</param>
    [SubscribesTo(classStr(LedgerJournalCheckPost), delegateStr(LedgerJournalCheckPost, updateVoucherSeriesCodeInLedgerVoucherForAccrualsDelegate))]
    public static void updateVoucherSeriesCodeInLedgerVoucherForAccrualsDelegateHandler(
        LedgerJournalCheckPost _ledgerJournalCheckPost,
        LedgerJournalTrans     _ledgerJournalTrans)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        {
            LedgerJournalCheckPost::updateVoucherSeriesCodeInLedgerVoucher(_ledgerJournalCheckPost.ledgerVoucher, tableNum(LedgerJournalTrans), _ledgerJournalTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherSeriesCodeInLedgerVoucher</Name>
				<Source><![CDATA[
    private static void updateVoucherSeriesCodeInLedgerVoucher(LedgerVoucher _ledgerVoucher, RefTableId _refTableId, RefRecId _refRecId)
    {
        NumberSequenceCode voucherSeriesCode = LedgerJournalCheckPost::getNumberSequenceCodeFromAccrualTrans(_refTableId, _refRecId);

        if (voucherSeriesCode != '')
        {
            _ledgerVoucher.parmVoucherSeriesCode(voucherSeriesCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceCodeFromAccrualTrans</Name>
				<Source><![CDATA[
    private static NumberSequenceCode getNumberSequenceCodeFromAccrualTrans(RefTableId _refTableId, RefRecId _refRecId)
    {
        NumberSequenceCode numberSequenceCode;

        LedgerAccrualId accrualId = LedgerJournalTransAccrual::find(_refTableId, _refRecId).AccrualId;

        if (accrualId != '')
        {
            LedgerNumberSequence numberSequence = LedgerAccrualTable::find(accrualId).NumberSequenceTable;

            if (numberSequence)
            {
                numberSequenceCode = NumberSequenceTable::find(numberSequence).NumberSequence;
            }
        }

        return numberSequenceCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>