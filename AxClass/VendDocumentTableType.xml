<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendDocumentTableType</c> class validates and applies default values to invoices and other vendor documents.
/// </summary>
public class VendDocumentTableType extends VendDocumentTableTypeBase
{
    PurchTable purchTable;
    LedgerJournalTrans ledgerJournalTrans;

    VendDocumentTableTypePhysical physicalStrategy;

    // <GBR>
    FiscalDocument_BR lastIssuedFiscalDocumentForVendor;
    FiscalEstablishment_BR fiscalEstablishment;
    // </GBR>

    #VendInvoiceFaults
    #IsoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultingAdditionalFields</Name>
				<Source><![CDATA[
    delegate void defaultingAdditionalFields(VendDocumentTableMap _vendDocumentTableMap)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdditionalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for fields related to the derived document types.
    /// </summary>
    protected void defaultAdditionalFields()
    {
        this.defaultingAdditionalFields(vendDocumentTableMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBatchAdministration</Name>
				<Source><![CDATA[
    protected void defaultBatchAdministration()
    {
        BatchAdministration batchAdministration;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, BatchAdministration), vendDocumentTableMap.TableId)))
        {
            batchAdministration = this.determineDefaultBatchAdministration();
            vendDocumentTableMap.BatchAdministration = batchAdministration;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCashDiscCode</Name>
				<Source><![CDATA[
    protected void defaultCashDiscCode()
    {
        VendCashDiscCode cashDiscCode;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, CashDiscCode), vendDocumentTableMap.TableId)))
        {
            cashDiscCode = this.determineDefaultCashDiscCode();
            vendDocumentTableMap.CashDiscCode = cashDiscCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCashDiscDate</Name>
				<Source><![CDATA[
    protected void defaultCashDiscDate()
    {
        CashDiscdate cashDiscdate;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, CashDiscDate), vendDocumentTableMap.TableId))
                || vendDocumentTableMap.CashDiscDate == dateNull())
        {
            this.physicalStrategy().initDefaultCashDiscDate();

            cashDiscdate = this.determineDefaultCashDiscDate();
            vendDocumentTableMap.CashDiscDate = cashDiscdate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCashDiscPercent</Name>
				<Source><![CDATA[
    protected void defaultCashDiscPercent()
    {
        DiscPct cashDiscPercent;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, CashDiscPercent), vendDocumentTableMap.TableId)))
        {
            cashDiscPercent = this.determineDefaultCashDiscPercent();
            vendDocumentTableMap.CashDiscPercent = cashDiscPercent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCFPSId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches default CFPSId_BR
    /// </summary>
    protected void defaultCFPSId_BR()
    {
        CFPSId_BR cfpsId = this.determineDefaultCFPSId_BR();
        vendDocumentTableMap.vendDocumentTableMap::parmCFPSId_BR(cfpsId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCountyOrigDest</Name>
				<Source><![CDATA[
    protected void defaultCountyOrigDest()
    {
        AddressCountyOrigDest countyOrigDest;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, CountyOrigDest), vendDocumentTableMap.TableId)))
        {
            countyOrigDest = this.determineDefaultCountyOrigDest();
            vendDocumentTableMap.CountyOrigDest = countyOrigDest;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrencyCode</Name>
				<Source><![CDATA[
    protected void defaultCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, CurrencyCode), vendDocumentTableMap.TableId)))
        {
            currencyCode = this.determineDefaultCurrencyCode();
            vendDocumentTableMap.CurrencyCode = currencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryName</Name>
				<Source><![CDATA[
    protected void defaultDeliveryName()
    {
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, DeliveryName), vendDocumentTableMap.TableId)))
        {
            vendDocumentTableMap.DeliveryName = this.determineDefaultDeliveryName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryPostalAddress</Name>
				<Source><![CDATA[
    protected void defaultDeliveryPostalAddress()
    {
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, DeliveryPostalAddress), vendDocumentTableMap.TableId)))
        {
            vendDocumentTableMap.DeliveryPostalAddress = this.determineDefaultDeliveryPostalAddress();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDocRegister_LT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmDocRegister_LT
    /// </summary>
    protected void defaultDocRegister_LT()
    {
        LtDocRegister ltDocRegister = this.determineDefaultDocRegister_LT();
        vendDocumentTableMap.VendDocumentTableMap::parmDocAutoNumbering_LT(ltDocRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultElectronicInvoice_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmElectronicInvoice_BR
    /// </summary>
    protected void defaultElectronicInvoice_BR()
    {
        ElectronicInvoice_BR electronicInvoice = this.determineDefaultElectronicInvoice_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmElectronicInvoice_BR(electronicInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEnterpriseNumber</Name>
				<Source><![CDATA[
    protected void defaultEnterpriseNumber()
    {
        TaxEnterpriseNumber enterpriseNumber;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, EnterpriseNumber), vendDocumentTableMap.TableId)))
        {
            enterpriseNumber = this.determineDefaultEnterpriseNumber();
            vendDocumentTableMap.EnterpriseNumber = enterpriseNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEuroTriangulation</Name>
				<Source><![CDATA[
    protected void defaultEuroTriangulation()
    {
        EUROTriangulation euroTriangulation;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, EuroTriangulation), vendDocumentTableMap.TableId)))
        {
            this.defaultCurrencyCode();
            this.defaultDocumentDate();
            this.defaultTransDate();

            euroTriangulation = this.determineDefaultEuroTriangulation();
            vendDocumentTableMap.EUROTriangulation = euroTriangulation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRate</Name>
				<Source><![CDATA[
    protected void defaultExchRate()
    {
        ExchRate exchRate;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, ExchRate), vendDocumentTableMap.TableId)))
        {
            this.defaultCurrencyCode();
            this.defaultDocumentDate();
            this.defaultTransDate();

            exchRate = this.determineDefaultExchRate();
            vendDocumentTableMap.ExchRate = exchRate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRateSecondary</Name>
				<Source><![CDATA[
    protected void defaultExchRateSecondary()
    {
        ExchrateSecondary exchRate;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, ExchRateSecondary), vendDocumentTableMap.TableId)))
        {
            this.defaultCurrencyCode();
            this.defaultDocumentDate();
            this.defaultTransDate();

            exchRate = this.determineDefaultExchRateSecondary();
            vendDocumentTableMap.ExchRateSecondary = exchRate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    internal void defaultReportingCurrencyFixedExchangeRate()
    {
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldNum(VendDocumentTableMap, ReportingCurrencyExchangeRate), vendDocumentTableMap.TableId)))
        {
            this.defaultCurrencyCode();
            this.defaultDocumentDate();
            this.defaultTransDate();

            vendDocumentTableMap.ReportingCurrencyExchangeRate = this.determineDefaultReportingCurrencyFixedExchangeRate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFiscalDocumentModel_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmFiscalDocumentModel_BR
    /// </summary>
    protected void defaultFiscalDocumentModel_BR()
    {
        FiscalDocumentModel_BR fiscalDocumentModel = this.determineDefaultFiscalDocumentModel_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmFiscalDocumentModel_BR(fiscalDocumentModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFiscalDocumentSeries_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmFiscalDocumentSeries_BR
    /// </summary>
    protected void defaultFiscalDocumentSeries_BR()
    {
        FiscalDocumentSeries_BR fiscalDocumentSeries = this.determineDefaultFiscalDocumentSeries_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmFiscalDocumentSeries_BR(fiscalDocumentSeries);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFiscalDocumentSpecie_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmFiscalDocumentSpecie_BR
    /// </summary>
    protected void defaultFiscalDocumentSpecie_BR()
    {
        FiscalDocumentSpecie_BR fiscalDocumentSpecie = this.determineDefaultFiscalDocumentSpecie_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmFiscalDocumentSpecie_BR(fiscalDocumentSpecie);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmFiscalDocumentType_BR
    /// </summary>
    protected void defaultFiscalDocumentType_BR()
    {
        RefRecId fiscalDocumentType = this.determineDefaultFiscalDocumentType_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmFiscalDocumentType_BR(fiscalDocumentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFixedDueDate</Name>
				<Source><![CDATA[
    protected void defaultFixedDueDate()
    {
        FixedDueDate dueDate;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, FixedDueDate), vendDocumentTableMap.TableId))
                || VendDocumentTableMap.FixedDueDate == dateNull())
        {
            dueDate = this.determineDefaultFixedDueDate();
            vendDocumentTableMap.FixedDueDate = dueDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFixedExchRate</Name>
				<Source><![CDATA[
    protected void defaultFixedExchRate()
    {
        FixedExchRate fixedExchRate;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, FixedExchRate), vendDocumentTableMap.TableId)))
        {
            fixedExchRate = this.determineDefaultFixedExchRate();
            vendDocumentTableMap.FixedExchRate = fixedExchRate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInclTax</Name>
				<Source><![CDATA[
    protected void defaultInclTax()
    {
        InclTax inclTax;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, InclTax), vendDocumentTableMap.TableId)))
        {
            inclTax = this.determineDefaultInclTax();
            vendDocumentTableMap.InclTax = inclTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInvoiceAccount</Name>
				<Source><![CDATA[
    protected void defaultInvoiceAccount()
    {
        VendAccount invoiceAccount;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, InvoiceAccount), vendDocumentTableMap.TableId)))
        {
            invoiceAccount = this.determineDefaultInvoiceAccount();
            vendDocumentTableMap.InvoiceAccount = invoiceAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultNumberSequenceGroup</Name>
				<Source><![CDATA[
    protected void defaultNumberSequenceGroup()
    {
        NumberSequenceGroupId numberSequenceGroup;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, NumberSequenceGroup), vendDocumentTableMap.TableId)))
        {
            numberSequenceGroup = this.determineDefaultNumberSequenceGroup();
            vendDocumentTableMap.NumberSequenceGroup = numberSequenceGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOrderAccount</Name>
				<Source><![CDATA[
    protected void defaultOrderAccount()
    {
        VendAccount orderAccount;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, OrderAccount), vendDocumentTableMap.TableId)))
        {
            orderAccount = this.determineDefaultOrderAccount();
            vendDocumentTableMap.OrderAccount = orderAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPayment</Name>
				<Source><![CDATA[
    protected void defaultPayment()
    {
        VendPaymTermId payment;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, Payment), vendDocumentTableMap.TableId)))
        {
            payment = this.determineDefaultPayment();
            vendDocumentTableMap.Payment = payment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymentSched</Name>
				<Source><![CDATA[
    protected void defaultPaymentSched()
    {
        PaymSchedId paymentSched;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PaymentSched), vendDocumentTableMap.TableId)))
        {
            paymentSched = this.determineDefaultPaymentSched();
            vendDocumentTableMap.PaymentSched = paymentSched;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymId</Name>
				<Source><![CDATA[
    protected void defaultPaymId()
    {
        VendPaymId paymId;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PaymId), vendDocumentTableMap.TableId)))
        {
            paymId = this.determineDefaultPaymId();
            vendDocumentTableMap.PaymId = paymId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymMode</Name>
				<Source><![CDATA[
    protected void defaultPaymMode()
    {
        VendPaymMode paymMode;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PaymMode), vendDocumentTableMap.TableId)))
        {
            paymMode = this.determineDefaultPaymMode();
            vendDocumentTableMap.PaymMode = paymMode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymSpec</Name>
				<Source><![CDATA[
    protected void defaultPaymSpec()
    {
        VendPaymSpec paymSpec;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PaymSpec), vendDocumentTableMap.TableId)))
        {
            paymSpec = this.determineDefaultPaymSpec();
            vendDocumentTableMap.PaymSpec = paymSpec;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPort</Name>
				<Source><![CDATA[
    protected void defaultPort()
    {
        IntrastatPortId port;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, Port), vendDocumentTableMap.TableId)))
        {
            port = this.determineDefaultPort();
            vendDocumentTableMap.Port = port;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPostingProfile</Name>
				<Source><![CDATA[
    protected void defaultPostingProfile()
    {
        VendPostingProfile postingProfile;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PostingProfile), vendDocumentTableMap.TableId)))
        {
            postingProfile = this.determineDefaultPostingProfile();
            vendDocumentTableMap.PostingProfile = postingProfile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchId</Name>
				<Source><![CDATA[
    protected void defaultPurchId()
    {
        PurchId purchId;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PurchId), vendDocumentTableMap.TableId)))
        {
            purchId = this.determineDefaultPurchId();
            vendDocumentTableMap.PurchId = purchId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchName</Name>
				<Source><![CDATA[
    protected void defaultPurchName()
    {
        Name purchName;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PurchName), vendDocumentTableMap.TableId)))
        {
            purchName = this.determineDefaultPurchName();
            vendDocumentTableMap.PurchName = purchName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReasonTableRef_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches default cancellation reason refference
    /// </summary>
    protected void defaultReasonTableRef_BR()
    {
        ReasonTableRefRecId reasonTableRef = this.determineDefaultReasonTableRef_BR();
        vendDocumentTableMap.vendDocumentTableMap::parmReasonTableRef_BR(reasonTableRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRecalculate</Name>
				<Source><![CDATA[
    protected void defaultRecalculate()
    {
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, Recalculate), vendDocumentTableMap.TableId)))
        {
            vendDocumentTableMap.Recalculate = this.determineDefaultRecalculate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRemittanceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default value for the Remittance location.
    /// </summary>
    protected void defaultRemittanceLocation()
    {
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, RemittanceLocation), vendDocumentTableMap.TableId)))
        {
            vendDocumentTableMap.RemittanceLocation = this.determineDefaultRemittanceLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCommonFields</Name>
				<Source><![CDATA[
    protected void defaultCommonFields()
    {
        super();

        this.physicalStrategy().initState();

        this.defaultPurchId();
        this.defaultOrderAccount();
        this.defaultInvoiceAccount();
        this.defaultCurrencyCode();

        this.defaultTableRefId();
        this.defaultPurchName();
        this.defaultDeliveryName();
        this.defaultDeliveryPostalAddress();
        this.defaultBatchAdministration();
        this.defaultRecalculate();

        this.defaultPayment();
        this.defaultPaymentSched();
        this.defaultPaymId();
        this.defaultPaymMode();
        this.defaultPaymSpec();
        this.defaultVendBankAccountId();
        this.defaultFixedDueDate();

        this.defaultFixedExchRate();
        this.defaultExchRate();
        this.defaultExchRateSecondary();
        this.defaultEuroTriangulation();
        this.defaultReportingCurrencyFixedExchangeRate();

        this.defaultVATNum();
        this.defaultEnterpriseNumber();
        this.defaultNumberSequenceGroup();
        this.defaultInclTax();
        this.defaultTaxGroup();
        this.defaultTaxAccrueSalesTaxType();
        this.defaultOverrideSalesTax();
        this.defaultPostingProfile();
        this.defaultSettleVoucher();
        this.defaultCashDiscCode();
        this.defaultCashDiscPercent();

        this.defaultTransactionCode();
        this.defaultTransport();
        this.defaultPort();
        this.defaultStatProcId();
        this.defaultCountyOrigDest();
        this.defaultRemittanceLocation();

        // default fields specific to subclasses
        this.defaultAdditionalFields();

        // table dependent defaulting
        this.physicalStrategy().defaultRow();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postDefaultRow_BR();
        }
        // </GBR>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT,#isoLV]))
        {
            this.defaultDocRegister_LT();
        }
        // CashDiscDate: in interactive scenario this will be defaulted only through modifiedField
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSalesPurchOperationType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches default SalesPurchOperationType_BR
    /// </summary>
    protected void defaultSalesPurchOperationType_BR()
    {
        SalesPurchOperationTypeRecId_BR operationType = this.determineDefaultOperationType_BR();
        vendDocumentTableMap.vendDocumentTableMap::parmSalesPurchOperationType_BR(operationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultServiceCodeOnDlvAddress_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmServiceCodeOnDlvAddress_BR
    /// </summary>
    protected void defaultServiceCodeOnDlvAddress_BR()
    {
        TaxServiceCodeOnDlvAddress_BR serviceCodeOnDlvAddress = this.determineDefaultServCodeOnDlvAddress_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmServiceCodeOnDlvAddress_BR(serviceCodeOnDlvAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSettleVoucher</Name>
				<Source><![CDATA[
    protected void defaultSettleVoucher()
    {
        PurchSettlementType settleVoucher;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, SettleVoucher), vendDocumentTableMap.TableId)))
        {
            settleVoucher = this.determineDefaultSettleVoucher();
            vendDocumentTableMap.SettleVoucher = settleVoucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStatProcId</Name>
				<Source><![CDATA[
    protected void defaultStatProcId()
    {
        IntrastatProcId statProcId;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, StatProcId), vendDocumentTableMap.TableId)))
        {
            statProcId = this.determineDefaultStatProcId();
            vendDocumentTableMap.StatProcId = statProcId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTableRefId</Name>
				<Source><![CDATA[
    public void defaultTableRefId()
    {
        // public because needs to be called from PurchFormLetter_Invoice form
        TradeLineRefId tableRefId;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, TableRefId), vendDocumentTableMap.TableId)))
        {
            tableRefId = this.determineDefaultTableRefId();
            vendDocumentTableMap.TableRefId = tableRefId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxGroup()
    {
        TaxGroup taxGroup;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, TaxGroup), vendDocumentTableMap.TableId)))
        {
            taxGroup = this.determineDefaultTaxGroup();
            vendDocumentTableMap.TaxGroup = taxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxAccrueSalesTaxType</Name>
				<Source><![CDATA[
    protected void defaultTaxAccrueSalesTaxType()
    {
        TaxAccrueSalesTaxType accrueSalesTaxType;

        if (SysDictField::isFieldMapped(
                tableStr(VendDocumentTableMap),
                tableId2Name(vendDocumentTableMap.TableId),
                fieldStr(VendDocumentTableMap, AccrueSalesTaxType))
            && !vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, AccrueSalesTaxType), vendDocumentTableMap.TableId)))
        {
            accrueSalesTaxType = this.determineDefaultAccrueSalesTaxType();
            vendDocumentTableMap.AccrueSalesTaxType = accrueSalesTaxType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOverrideSalesTax</Name>
				<Source><![CDATA[
    protected void defaultOverrideSalesTax()
    {
        if (SysDictField::isFieldMapped(
                tableStr(VendDocumentTableMap),
                tableId2Name(vendDocumentTableMap.TableId),
                fieldStr(VendDocumentTableMap, OverrideSalesTax))
            && !vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, OverrideSalesTax), vendDocumentTableMap.TableId)))
        {
            vendDocumentTableMap.OverrideSalesTax = this.determineDefaultOverrideSalesTax();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionCode</Name>
				<Source><![CDATA[
    protected void defaultTransactionCode()
    {
        IntrastatTransactionCodeId transactionCode;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, TransactionCode), vendDocumentTableMap.TableId)))
        {
            transactionCode = this.determineDefaultTransactionCode();
            vendDocumentTableMap.TransactionCode = transactionCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransport</Name>
				<Source><![CDATA[
    protected void defaultTransport()
    {
        IntrastatTransport transport;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, Transport), vendDocumentTableMap.TableId)))
        {
            transport = this.determineDefaultTransport();
            vendDocumentTableMap.Transport = transport;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default VATNum and its related fields for the <c>VendDocumentTableMap</c>.
    /// </summary>
    protected void defaultVATNum()
    {
        VATNumJournal vatNum;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, VatNum), vendDocumentTableMap.TableId)))
        {
            vatNum = this.determineDefaultVATNum();
            vendDocumentTableMap.VATNum = vatNum;

            if (!vendDocumentTableMap.VATNum)
            {
                if (SysDictField::isFieldMapped(tableStr(VendDocumentTableMap), tableId2Name(VendDocumentTableMap.TableId), fieldStr(VendDocumentTableMap, VATNumRecId)))
                {
                    vendDocumentTableMap.VATNumRecId = 0;
                }

                if (SysDictField::isFieldMapped(tableStr(VendDocumentTableMap), tableId2Name(VendDocumentTableMap.TableId), fieldStr(VendDocumentTableMap, VATNumTableType)))
                {
                    vendDocumentTableMap.VATNumTableType = TaxExemptNumberSourceType::None;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVendBankAccountId</Name>
				<Source><![CDATA[
    protected void defaultVendBankAccountId()
    {
        VendBankAccountId bankAccountId;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, VendBankAccountId), vendDocumentTableMap.TableId)))
        {
            bankAccountId = this.determineDefaultVendBankAccountId();
            vendDocumentTableMap.VendBankAccountID = bankAccountId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVendFinalUser_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for parmVendFinalUser_BR
    /// </summary>
    protected void defaultVendFinalUser_BR()
    {
        CustVendFinalUser_BR vendFinalUser = this.determineDefaultVendFinalUser_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmVendFinalUser_BR(vendFinalUser);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultBatchAdministration</Name>
				<Source><![CDATA[
    protected BatchAdministration determineDefaultBatchAdministration()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCashDiscCode</Name>
				<Source><![CDATA[
    protected VendCashDiscCode determineDefaultCashDiscCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCashDiscDate</Name>
				<Source><![CDATA[
    protected CashDiscdate determineDefaultCashDiscDate()
    {
        if (vendDocumentTableMap.DocumentDate == dateNull())
        {
            return CashDisc::cashDiscDate(this.purchTable().CashDisc, vendDocumentTableMap.TransDate);
        }

        return CashDisc::cashDiscDate(this.purchTable().CashDisc, vendDocumentTableMap.DocumentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCashDiscPercent</Name>
				<Source><![CDATA[
    protected DiscPct determineDefaultCashDiscPercent()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCFPSId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets CFPSId_BR from <c>PurchTable</c> table record
    /// </summary>
    /// <returns>
    ///     Returns the CFPSId_BR field from <c>PurchTable</c> table record
    /// </returns>
    protected CFPSId_BR determineDefaultCFPSId_BR()
    {
        return this.purchTable().purchTable_BR().CFPSId_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCountyOrigDest</Name>
				<Source><![CDATA[
    protected AddressCountyOrigDest determineDefaultCountyOrigDest()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        return this.purchTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryName</Name>
				<Source><![CDATA[
    protected VendName determineDefaultDeliveryName()
    {
        return this.purchTable().DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryPostalAddress</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddressRecId determineDefaultDeliveryPostalAddress()
    {
        return this.purchTable().DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocRegister_LT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default DocRegister_LT.
    /// </summary>
    /// <returns>
    /// Default DocRegister_LT.
    /// </returns>
    protected LtDocRegister determineDefaultDocRegister_LT()
    {
        return this.purchTable().PackingSlipAutoNumbering_LT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultElectronicInvoice_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Electronic Invoice city boolean value.
    /// </summary>
    /// <returns>
    /// Default Electronic Invoice city boolean value.
    /// </returns>
    protected EletronicInvoice_BR determineDefaultElectronicInvoice_BR()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultEnterpriseNumber</Name>
				<Source><![CDATA[
    protected TaxEnterpriseNumber determineDefaultEnterpriseNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultEuroTriangulation</Name>
				<Source><![CDATA[
    protected EUROTriangulation determineDefaultEuroTriangulation()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRate</Name>
				<Source><![CDATA[
    protected ExchRate determineDefaultExchRate()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRateSecondary</Name>
				<Source><![CDATA[
    protected ExchrateSecondary determineDefaultExchRateSecondary()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultReportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate determineDefaultReportingCurrencyFixedExchangeRate()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFiscalDocumentModel_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Fiscal Document Model.
    /// </summary>
    /// <returns>
    /// Default Fiscal Document Model.
    /// </returns>
    protected FiscalDocumentModel_BR determineDefaultFiscalDocumentModel_BR()
    {
        FiscalDocumentTypeRecId_BR fiscalDocumentTypeRecId = this.determineDefaultFiscalDocumentType_BR();

        if (fiscalDocumentTypeRecId)
        {
            return FiscalDocumentType_BR::findRecId(fiscalDocumentTypeRecId).FiscalDocumentModel;
        }

        return lastIssuedFiscalDocumentForVendor.Model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFiscalDocumentSeries_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Fiscal Document Series.
    /// </summary>
    /// <returns>
    /// Default Fiscal Document Series.
    /// </returns>
    protected FiscalDocumentSeries_BR determineDefaultFiscalDocumentSeries_BR()
    {
        FiscalDocumentTypeRecId_BR fiscalDocumentTypeRecId = this.determineDefaultFiscalDocumentType_BR();

        if (fiscalDocumentTypeRecId)
        {
            return FiscalDocumentType_BR::findRecId(fiscalDocumentTypeRecId).FiscalDocumentSeries;
        }

        return lastIssuedFiscalDocumentForVendor.FiscalDocumentSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFiscalDocumentSpecie_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Fiscal Document Specie.
    /// </summary>
    /// <returns>
    /// Default Fiscal Document Specie.
    /// </returns>
    protected FiscalDocumentSpecie_BR determineDefaultFiscalDocumentSpecie_BR()
    {
        FiscalDocumentTypeRecId_BR fiscalDocumentTypeRecId = this.determineDefaultFiscalDocumentType_BR();

        if (fiscalDocumentTypeRecId)
        {
            return FiscalDocumentType_BR::findRecId(fiscalDocumentTypeRecId).FiscalDocumentSpecie;
        }

        return lastIssuedFiscalDocumentForVendor.Specie;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Fiscal Document Type.
    /// </summary>
    /// <returns>
    /// Default Fiscal Document Type.
    /// </returns>
    protected RefRecId determineDefaultFiscalDocumentType_BR()
    {
        PurchLine purchLine;

        if (this.purchTable().hasIssueFiscalDocument() || this.purchTable().isCancellingPurchaseReturn_BR())
        {
            select firstOnly purchLine
                    where purchLine.PurchId == this.determineDefaultPurchId();

            return VendFiscalDocumentType_BR::findFiscalDocumentType(this.purchTable().OrderAccount, purchLine.inventDim().inventSite().fiscalEstablishment());
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedDueDate</Name>
				<Source><![CDATA[
    protected FixedDueDate determineDefaultFixedDueDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedExchRate</Name>
				<Source><![CDATA[
    protected FixedExchRate determineDefaultFixedExchRate()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInclTax</Name>
				<Source><![CDATA[
    protected InclTax determineDefaultInclTax()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInvoiceAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultInvoiceAccount()
    {
        return this.purchTable().InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultNumberSequenceGroup</Name>
				<Source><![CDATA[
    protected NumberSequenceGroupId determineDefaultNumberSequenceGroup()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOperationType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets SalesPurchOperationType_BR referencence from <c>PurchTable</c> table record
    /// </summary>
    /// <returns>
    ///     Returns the SalesPurchOperationType_BR field from <c>PurchTable</c> table record
    /// </returns>
    protected SalesPurchOperationTypeRecId_BR determineDefaultOperationType_BR()
    {
        return this.purchTable().purchTable_BR().SalesPurchOperationType_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultOrderAccount()
    {
        return this.purchTable().OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPayment</Name>
				<Source><![CDATA[
    protected VendPaymTermId determineDefaultPayment()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymentSched</Name>
				<Source><![CDATA[
    protected PaymSchedId determineDefaultPaymentSched()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymId</Name>
				<Source><![CDATA[
    protected VendPaymId determineDefaultPaymId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymMode</Name>
				<Source><![CDATA[
    protected VendPaymMode determineDefaultPaymMode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymSpec</Name>
				<Source><![CDATA[
    protected VendPaymSpec determineDefaultPaymSpec()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPort</Name>
				<Source><![CDATA[
    protected IntrastatPortId determineDefaultPort()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPostingProfile</Name>
				<Source><![CDATA[
    protected VendPostingProfile determineDefaultPostingProfile()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchId</Name>
				<Source><![CDATA[
    protected PurchId determineDefaultPurchId()
    {
        return this.purchTable().PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchName</Name>
				<Source><![CDATA[
    protected Name determineDefaultPurchName()
    {
        return this.purchTable().PurchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultReasonTableRef_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the cancellation ReasonCode from <c>PurchTable</c> table record
    /// </summary>
    /// <returns>
    ///     Returns the ReasonTableRefRecId field from <c>PurchTable</c> table record
    /// </returns>
    protected ReasonTableRefRecId determineDefaultReasonTableRef_BR()
    {
        return this.purchTable().ReasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRecalculate</Name>
				<Source><![CDATA[
    protected NoYes determineDefaultRecalculate()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRemittanceLocation</Name>
				<Source><![CDATA[
    protected RemittanceLocation determineDefaultRemittanceLocation()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultServCodeOnDlvAddress_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Service code on delivery address boolean value.
    /// </summary>
    /// <returns>
    /// Default Service code on delivery address boolean value.
    /// </returns>
    protected TaxServiceCodeOnDlvAddress_BR determineDefaultServCodeOnDlvAddress_BR()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().ServiceCodeOnDlvAddress_BR;
        }

        return this.purchTable().purchTable_BR().ServiceCodeOnDlvAddress_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultSettleVoucher</Name>
				<Source><![CDATA[
    protected PurchSettlementType determineDefaultSettleVoucher()
    {
        return SettlementType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultStatProcId</Name>
				<Source><![CDATA[
    protected IntrastatProcId determineDefaultStatProcId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTableRefId</Name>
				<Source><![CDATA[
    protected TradeLineRefId determineDefaultTableRefId()
    {
        return formletterParmData::getNewTableRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroup determineDefaultTaxGroup()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultAccrueSalesTaxType</Name>
				<Source><![CDATA[
    protected TaxAccrueSalesTaxType determineDefaultAccrueSalesTaxType()
    {
        return TaxAccrueSalesTaxType::Default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOverrideSalesTax</Name>
				<Source><![CDATA[
    protected NoYes determineDefaultOverrideSalesTax()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransactionCode</Name>
				<Source><![CDATA[
    protected IntrastatTransactionCodeId determineDefaultTransactionCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransport</Name>
				<Source><![CDATA[
    protected IntrastatTransport determineDefaultTransport()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVATNum</Name>
				<Source><![CDATA[
    protected VATNumJournal determineDefaultVATNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendBankAccountId</Name>
				<Source><![CDATA[
    protected VendBankAccountId determineDefaultVendBankAccountId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendFinalUser_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Use and comsumption value.
    /// </summary>
    /// <returns>
    /// Default Use and comsumption value.
    /// </returns>
    /// <remarks>
    /// For invoices that don't relate to Purchase Orders this information comes from Vendor
    /// </remarks>
    protected CustVendFinalUser_BR determineDefaultVendFinalUser_BR()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().VendConsumption_BR;
        }

        return this.purchTable().purchTable_BR().VendFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values to several fields from the cached <c>PurchTable</c> table record.
    /// </summary>
    public void initFromPurchTable()
    {
        this.defaultPurchId();
        this.defaultOrderAccount();
        this.defaultPurchName();
        this.defaultInvoiceAccount();
        this.defaultCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> table record to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>LedgerJournalTrans</c> table record.
    /// </returns>
    /// <remarks>
    ///    A <c>LedgerJournalTrans</c> table record is supplied when it applies the default values to an
    ///    approval journal.
    /// </remarks>
    public LedgerJournalTrans ledgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        if (_ledgerJournalTrans != ledgerJournalTrans)
        {
            ledgerJournalTrans = _ledgerJournalTrans;
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        purchTable = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalStrategy</Name>
				<Source><![CDATA[
    protected VendDocumentTableTypePhysical physicalStrategy(VendDocumentTableTypePhysical _physicalStrategy = physicalStrategy)
    {
        if (!prmisdefault(_physicalStrategy))
        {
            physicalStrategy = _physicalStrategy;
        }

        return physicalStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDefaultRow_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default field values for a <c>VendInvoiceInfoTableMap</c> record.
    /// </summary>
    public void postDefaultRow_BR()
    {
        FiscalDocument_BR fiscalDocumentToBeReversedOrCancelled;

        this.defaultServiceCodeOnDlvAddress_BR();
        this.defaultVendFinalUser_BR();
        this.defaultSalesPurchOperationType_BR();
        this.defaultReasonTableRef_BR();

        if (this.purchTable().isReversingFiscalDocument_BR())
        {
            fiscalDocumentToBeReversedOrCancelled = this.purchTable().purchTable_BR().findRelatedFiscalDocByInvoiceRefRecId();

            vendDocumentTableMap.VendDocumentTableMap::parmFiscalDocumentModel_BR(fiscalDocumentToBeReversedOrCancelled.Model);
            vendDocumentTableMap.VendDocumentTableMap::parmAccessKey_BR(fiscalDocumentToBeReversedOrCancelled.AccessKey);
            vendDocumentTableMap.VendDocumentTableMap::parmNum(fiscalDocumentToBeReversedOrCancelled.FiscalDocumentNumber);
            vendDocumentTableMap.VendDocumentTableMap::parmFiscalDocumentSeries_BR(fiscalDocumentToBeReversedOrCancelled.FiscalDocumentSeries);
            vendDocumentTableMap.VendDocumentTableMap::parmFiscalDocumentSpecie_BR(fiscalDocumentToBeReversedOrCancelled.Specie);
            vendDocumentTableMap.vendDocumentTableMap::parmCFPSId_BR(fiscalDocumentToBeReversedOrCancelled.CFPSId);
        }
        else
        {
            this.initLastIssuedFiscalDocument_BR();

            this.defaultFiscalDocumentType_BR();
            this.defaultFiscalDocumentModel_BR();
            this.defaultFiscalDocumentSeries_BR();
            this.defaultFiscaldocumentSpecie_BR();
            this.defaultCFPSId_BR();
            this.defaultElectronicInvoice_BR();
            this.defaultPresenceType_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDefaultRow_EEU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default field values for a <c>VendInvoiceInfoTableMap</c> record.
    /// </summary>
    public void postDefaultRow_EEU()
    {
        this.defaultDocRegister_LT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>PurchTable</c> table record.
    /// </summary>
    /// <param name="_purchTable">
    ///    The <c>PurchTable</c> table record to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>PurchTable</c> table record.
    /// </returns>
    /// <remarks>
    ///    Numerous fields are copied from <c>PurchTable</c> table record when it applies the default values.
    /// </remarks>
    public PurchTable purchTable(PurchTable _purchTable = purchTable)
    {
        if (_purchTable != purchTable)
        {
            purchTable = _purchTable;
        }
        else
        {
            // getter - retrieve purchTable based on the table buffer being defaulted
            if (purchTable == null) // lazy load
            {
                purchTable = vendDocumentTableMap.purchTable();
            }
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    public TransDate updateDate()
    {
        return this.useDocumentDate() ? vendDocumentTableMap.DocumentDate : vendDocumentTableMap.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDocumentDate</Name>
				<Source><![CDATA[
    public boolean useDocumentDate()
    {
        if (VendParameters::find().UseDocumentDate &&
            vendDocumentTableMap.DocumentDate &&
            vendDocumentTableMap.TransDate != vendDocumentTableMap.DocumentDate)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCode</Name>
				<Source><![CDATA[
    protected boolean validateCurrencyCode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnterpriseNumber</Name>
				<Source><![CDATA[
    protected boolean validateEnterpriseNumber()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocationId</Name>
				<Source><![CDATA[
    protected boolean validateInventLocationId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccount</Name>
				<Source><![CDATA[
    protected boolean validateInvoiceAccount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayment</Name>
				<Source><![CDATA[
    protected boolean validatePayment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentSched</Name>
				<Source><![CDATA[
    protected boolean validatePaymentSched()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchId</Name>
				<Source><![CDATA[
    protected boolean validatePurchId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cross validates field values for a record of a table that is mapped to <c>VendDocumentTableMap</c>.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateRow()
    {
        // this check is moved here from the PurchParmTable.validateWrite.
        if (vendDocumentTableMap.FixedExchRate)
        {
            if (!vendDocumentTableMap.ExchRate)
            {
                checkFailed("@SYS62407");
                return false;
            }

            if (vendDocumentTableMap.EUROTriangulation && !vendDocumentTableMap.ExchRateSecondary)
            {
                checkFailed("@SYS62408");
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVatNum</Name>
				<Source><![CDATA[
    protected boolean validateVatNum()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendPaymentGroup</Name>
				<Source><![CDATA[
    protected boolean validateVendPaymentGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>VendTable</c> record.
    /// </summary>
    /// <param name="_vendTable">
    ///    The <c>VendTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The <c>VendTable</c> record.
    /// </returns>
    /// <remarks>
    ///    Numerous fields are copied from <c>VendTable</c> record when it applies the default values to a
    ///    non-PO document.
    /// </remarks>
    public VendTable vendTable(VendTable _vendTable = vendTable)
    {
        if (_vendTable != vendTable)
        {
            vendTable = _vendTable;
        }
        else
        {
            // getter - retrieve vendTable based on the table buffer being defaulted
            if (vendTable == null) // lazy load
            {
                vendTable = vendDocumentTableMap.vendTable_InvoiceAccount();
            }
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of <c>VendInvoiceInfoTableType</c> class.
    /// </summary>
    /// <param name="_vendDocumentTableMap">
    ///    A <c>VendDocumentTableMap</c> record.
    /// </param>
    /// <param name="_purchTable">
    ///    A <c>PurchTable</c> table record that is used for applying the default values; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> table record that is used for applying the default values; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendDocumentTableType</c> class derivative.
    /// </returns>
    /// <remarks>
    ///    The <c>VendDocumentTableMap.parmOrdering</c> method must be called to set the ordering value
    ///    before you call this factory method in order to produce correct strategy.
    /// </remarks>
    public static VendDocumentTableType construct(VendDocumentTableMap _vendDocumentTableMap, PurchTable _purchTable = null, LedgerJournalTrans _ledgerJournalTrans = null)
    {
        VendDocumentTableType strategy;
        VendDocumentTableTypePhysical physicalStrategy;
        DocumentStatus documentType = _vendDocumentTableMap.Ordering;

        switch (documentType)
        {
            case DocumentStatus::Invoice:
            // <GEERU>
            case DocumentStatus::Facture_RU:
            // </GEERU>
            // <GEEPL>
            case DocumentStatus::PlSAD:
            // </GEEPL>
                strategy = new VendDocumentTableType_Invoice();
                break;

            case DocumentStatus::ApproveJournal:
                strategy = new VendDocumentTableType_ApproveJournal();
                break;

            case DocumentStatus::None:
                strategy = null;
                break;

            default:
                strategy = new VendDocumentTableType();
                break;
        }

        if (strategy != null)
        {
            strategy.purchTable(_purchTable);
            strategy.ledgerJournalTrans(_ledgerJournalTrans);
            strategy.VendDocumentTableMap(_vendDocumentTableMap);
            physicalStrategy = VendDocumentTableTypePhysical::create(_vendDocumentTableMap, strategy);
            strategy.physicalStrategy(physicalStrategy);
        }

        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPresenceType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the default value for presence type
    /// </summary>
    protected void defaultPresenceType_BR()
    {
        EFDocPresenceType_BR presenceType;

        presenceType = this.determineDefaultPresenceType_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmPresenceType_BR(presenceType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPresenceType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default Presence type value.
    /// </summary>
    /// <returns>
    /// Default Presence type value.
    /// </returns>
    /// <remarks>
    /// For invoices that don't relate to Purchase Orders this information needs to come from Vendor
    /// </remarks>
    protected EFDocPresenceType_BR determineDefaultPresenceType_BR()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().PresenceType_BR;
        }

        return this.purchTable().purchTable_BR().PresenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment_BR</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR fiscalEstablishment_BR()
    {
        PurchLine purchLine;

        if (!fiscalEstablishment)
        {
            select firstOnly purchLine
                        where purchLine.PurchId == this.determineDefaultPurchId();

            if (purchLine)
            {
                fiscalEstablishment = purchLine.inventDim().inventSite().fiscalEstablishment();
            }
        }

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLastIssuedFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the last issued fiscal document for the fiscal establishment and vendor account
    /// </summary>
    protected void initLastIssuedFiscalDocument_BR()
    {
        FiscalEstablishment_BR fiscalEstablishment_BR = this.fiscalEstablishment_BR();

        if (fiscalEstablishment_BR)
        {
            lastIssuedFiscalDocumentForVendor = FiscalDocument_BR::findLastFiscalDocForVendorByFiscalEstab(
                                                                    fiscalEstablishment_BR.FiscalEstablishmentId,
                                                                    this.determineDefaultInvoiceAccount());
        }
        else
        {
            lastIssuedFiscalDocumentForVendor = FiscalDocument_BR::findLastPostedFiscalDocumentForVendor(
                                                                    this.determineDefaultInvoiceAccount());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>