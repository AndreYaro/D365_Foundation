<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInventIssueStorno</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetInventIssueStorno extends RunBaseBatch implements BatchRetryable
{
    RAssetInventIssueTable  rAssetInventIssueTable;
    LedgerJournalTable      ledgerJournalTableDepr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionStorno</Name>
				<Source><![CDATA[
    private void acquisitionStorno(Voucher _voucher, TransDate _transDate)
    {
        RAssetTrans                 rAssetTrans;
        RAssetTransactionReversal   transactionReversal;

        select firstonly rAssetTrans
            where rAssetTrans.Voucher        == _voucher                     &&
                  rAssetTrans.TransDate      == _transDate                   &&
                  rAssetTrans.AssetTransType == RAssetTransType::Acquisition &&
                  ! rAssetTrans.StornoRecId;

        transactionReversal = RAssetTransactionReversal::construct(rAssetTrans);
        transactionReversal.initValue(rAssetTrans);
        transactionReversal.parmReversalDate(rAssetInventIssueTable.TransDate);
        transactionReversal.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepreciationJournal</Name>
				<Source><![CDATA[
    private void createDepreciationJournal()
    {
        ledgerJournalTableDepr.clear();
        ledgerJournalTableDepr.initFromLedgerJournalName(rAssetInventIssueTable.NameJournalDepreciation);
        ledgerJournalTableDepr.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepreciationLines</Name>
				<Source><![CDATA[
    private void createDepreciationLines(RAssetId _assetId, RAssetStandardId _standardId)
    {
        RAssetproposalDepreciationStorno    assetProposal;

        assetProposal  = new RAssetproposalDepreciationStorno();

        assetProposal.initParameters(ledgerJournalTableDepr.JournalNum,
                                     rAssetInventIssueTable.TransDate,
                                     RAssetStandards::find(_assetId, _standardId));

        if (assetProposal.canCreateJournalLine(_standardId))
        {
            assetProposal.createJournalLines(_standardId, true, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes specified journal.
    /// </summary>
    /// <param name="_journalId">
    /// Journal Number
    /// </param>
    private void deleteJournal(LedgerJournalId _journalId)
    {
        LedgerJournalTable          ledgerJournalTable;
        LedgerJournalTrans          ledgerJournalTrans;

        delete_from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalId;
        delete_from ledgerJournalTable
            where ledgerJournalTable.JournalNum == _journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption(strFmt("@GLS113991", rAssetInventIssueTable.JournalId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetInventIssueTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RAssetInventIssueTable parmRAssetInventIssueTable(RAssetInventIssueTable _rAssetInventIssueTable = rAssetInventIssueTable)
    {
        rAssetInventIssueTable = _rAssetInventIssueTable;

        return rAssetInventIssueTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDepreciationJournal</Name>
				<Source><![CDATA[
    private void postDepreciationJournal()
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        LedgerJournalTrans      ledgerJournalTrans;

        select firstonly RecId
            from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTableDepr.JournalNum;

        if (ledgerJournalTableDepr && ledgerJournalTrans.RecId)
        {
            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTableDepr, NoYes::Yes);
            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
        }
        else
        {
            if (ledgerJournalTableDepr)
                ledgerJournalTableDepr.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetInventIssueTableUpdate</Name>
				<Source><![CDATA[
    private void rAssetInventIssueTableUpdate()
    {
        rAssetInventIssueTable.LedgerJournalNumDepreciation = ledgerJournalTableDepr.JournalNum;
        rAssetInventIssueTable.LedgerJournalNumAcquisition  = '';
        rAssetInventIssueTable.Posted                       = NoYes::No;
        rAssetInventIssueTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerJournalTable          ledgerJournalTable;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset;

        #OCCRetryCount

        try
        {
            ttsbegin;

            rAssetInventIssueTable.selectForUpdate(true);
            if (rAssetInventIssueTable.LedgerJournalNumDepreciation)
            {

                LedgerJournalTable = LedgerJournalTable::find(rAssetInventIssueTable.LedgerJournalNumDepreciation);
                if (LedgerJournalTable.Posted)
                {
                    this.createDepreciationJournal();

                    while select RecId from ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum == rAssetInventIssueTable.LedgerJournalNumDepreciation
                    join AssetId, StandardId from ledgerJournalTrans_RAsset
                        group by AssetId, StandardId
                        where ledgerJournalTrans_RAsset.RefRecId == ledgerJournalTrans.RecId
                    {
                        this.createDepreciationLines(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId);
                    }
                    this.postDepreciationJournal();
                }
                else
                {
                    this.deleteJournal(rAssetInventIssueTable.LedgerJournalNumDepreciation);
                }
            }

            if (rAssetInventIssueTable.LedgerJournalNumAcquisition)
            {
                LedgerJournalTable = LedgerJournalTable::find(rAssetInventIssueTable.LedgerJournalNumAcquisition);
                if (LedgerJournalTable.Posted)
                {
                    while select Voucher, TransDate
                        from ledgerJournalTrans
                        group by Voucher, TransDate
                        where ledgerJournalTrans.JournalNum == rAssetInventIssueTable.LedgerJournalNumAcquisition
                    {
                        this.acquisitionStorno(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
                    }
                }
                else
                {

                    this.deleteJournal(rAssetInventIssueTable.LedgerJournalNumAcquisition);
                }
            }

            this.rAssetInventIssueTableUpdate();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error("@SYS79625");
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                error("@SYS79625");
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            error("@SYS79625");
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RAssetInventIssueStorno   rAssetInventIssueStorno;

        if (! _args.record())
            throw error("@SYS4205");

        rAssetInventIssueStorno = new RAssetInventIssueStorno();

        rAssetInventIssueStorno.parmRAssetInventIssueTable(_args.record());

        if (rAssetInventIssueStorno.prompt())
        {
            rAssetInventIssueStorno.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>