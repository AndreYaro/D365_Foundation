<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsJournal
{
    TransactionTxt                  transactionTxt;

    LedgerJournalTrans              ledgerJournalTrans;
    LedgerJournalTrans_RDeferrals   ledgerJournalTrans_RDeferrals;

    Voucher                         voucher;
    LedgerJournalId                 journalNum;

    RDeferralsTransType             rDeferralsTransType;

    Correct_RU                      correct;
    TransDate                       accountingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates deferral's ledger journal transactions.
    /// </summary>
    /// <param name = "_paymentAmount">Amount.</param>
    /// <param name = "_deferralsBook">Deferral book object.</param>
    /// <param name = "_transDate">Transaction date.</param>
    /// <param name = "_transTxt">Transaction text.</param>
    /// <param name = "_defaultAccount">Account.</param>
    /// <param name = "_offsetDefaultAccount">Offset account.</param>
    public void createTrans(AmountCur                     _paymentAmount,
                            RDeferralsBook                _deferralsBook,
                            TransDate                     _transDate,
                            LedgerJournalTransTxt         _transTxt       = "",
                            LedgerDimensionDefaultAccount _defaultAccount = 0,
                            LedgerDimensionDefaultAccount _offsetDefaultAccount = 0
                            )
    {
        LedgerDimensionDefaultAccount offsetDefaultAccount;

        ttsbegin;

        ledgerJournalTrans.selectForUpdate(true);
        ledgerJournalTrans_RDeferrals.selectForUpdate(true);
        ledgerJournalTrans.clear();
        ledgerJournalTrans_RDeferrals.clear();

        ledgerJournalTrans.JournalNum           = journalNum;
        ledgerJournalTrans.Voucher              = voucher;
        ledgerJournalTrans.AccountType          = LedgerJournalACType::RDeferrals;
        ledgerJournalTrans.parmAccount(_deferralsBook.DeferralsId);

        ledgerJournalTrans.PostingProfile       = _deferralsBook.PostingProfile;

        ledgerJournalTrans_RDeferrals.BookId    = _deferralsBook.DeferralsBookId;
        ledgerJournalTrans_RDeferrals.DeferralsId = _deferralsBook.DeferralsId;

        ledgerJournalTrans.CurrencyCode         = Ledger::accountingCurrency(CompanyInfo::current());

        if (correct)
        {
            ledgerJournalTrans_RDeferrals.CorrectedPeriod = _transDate;
        }

        ledgerJournalTrans.TransactionType      = LedgerTransType::RDeferrals;
        ledgerJournalTrans.TransDate            = _transDate;
        ledgerJournalTrans.ExchRate             = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.DefaultDimension     = _deferralsBook.DefaultDimension;

        if (correct)
        {
            ledgerJournalTrans.TransDate      = accountingDate;
        }

        if (_transTxt)
        {
            ledgerJournalTrans.Txt   = _transTxt;
        }
        else
        {
            transactionTxt                      = TransactionTxt::construct(LedgerTransTxt::RDeferrals,
                                                                     CompanyInfo::languageId(),
                                                                     _transDate);
            transactionTxt.setVoucher(voucher);
            transactionTxt.setKey1(_deferralsBook.DeferralsId);
            transactionTxt.setKey2(_deferralsBook.DeferralsGroupId);
            ledgerJournalTrans.Txt              = transactionTxt.txt();
        }

        ledgerJournalTrans_RDeferrals.TransType  = rDeferralsTransType;

        //<RUP>
        if (_offsetDefaultAccount && isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            offsetDefaultAccount = _offsetDefaultAccount;
        }
        else
        {
        //</RUP>
            offsetDefaultAccount = RDeferralsLedgerAccounts::deferralsOffsetLedgerDim(_deferralsBook.DeferralsId,
                rDeferralsTransType,
                _deferralsBook.DeferralsBookId,
                _deferralsBook.PostingProfile);
        //<RUP>
        }
        //</RUP>
        if (offsetDefaultAccount)
        {
            ledgerJournalTrans.parmOffsetLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(offsetDefaultAccount, ledgerJournalTrans.DefaultDimension));
        }

        if (_defaultAccount)
            ledgerJournalTrans_RDeferrals.LedgerDimension = _defaultAccount;
        else
            ledgerJournalTrans_RDeferrals.LedgerDimension = RDeferralsLedgerAccounts::deferralsLedgerDim(_deferralsBook.DeferralsId,
                                                                                                         rDeferralsTransType,
                                                                                                         _deferralsBook.DeferralsBookId,
                                                                                                         _deferralsBook.PostingProfile);
        if (_paymentAmount > 0)
        {
            ledgerJournalTrans.AmountCurDebit           = _paymentAmount;
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit          = -_paymentAmount;
        }

        EventHandlerResult result = new EventHandlerResult();
        this.createTransOnInsert(ledgerJournalTrans, _deferralsBook, result);

        ledgerJournalTrans.insert();
        ledgerJournalTrans_RDeferrals.RefRecId = ledgerJournalTrans.RecId;
        ledgerJournalTrans_RDeferrals.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables additional actions before inserting <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The ledger journal transactions table cursor</param>
    /// <param name = "_deferralsBook">The deferrals book object.</param>
    /// <param name = "_result">The event handler result.</param>
    delegate void createTransOnInsert(LedgerJournalTrans  _ledgerJournalTrans, RDeferralsBook _deferralsBook, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates voucher.
    /// </summary>
    public void createVoucher()
    {
        voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(journalNum))).getNew(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets created ledger journal trans.
    /// </summary>
    /// <returns><c>LedgerJournalTrans</c> object.</returns>
    public LedgerJournalTrans ledgerJournalTrans()
    {
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans_RDeferrals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deferrals trans.
    /// </summary>
    /// <returns><c>LedgerJournalTrans_RDeferrals</c> object.</returns>
    public LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals()
    {
        return ledgerJournalTrans_RDeferrals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new journal.
    /// </summary>
    /// <param name = "_journalNum">Journal number.</param>
    /// <param name = "_deferralsTransType">Transactions type.</param>
    public void new(LedgerJournalId     _journalNum,
                    RDeferralsTransType _deferralsTransType)

    {
        journalNum          = _journalNum;
        rDeferralsTransType = _deferralsTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets acounting date.
    /// </summary>
    /// <param name = "_accountingDate">Accounting date.</param>
    /// <returns>Accounting date.</returns>
    public TransDate parmAccountingDate(TransDate _accountingDate = accountingDate)
    {
        accountingDate = _accountingDate;

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets in journal is correcting.
    /// </summary>
    /// <param name = "_correct">Correct value.</param>
    /// <returns>Correct value.</returns>
    public Correct_RU parmCorrect(Correct_RU _correct = correct)
    {
        correct = _correct;

        return correct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>