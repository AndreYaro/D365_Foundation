<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyProcessNonTransactionalJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailLoyaltyProcessNonTransactionalJob</c> class process non-transactional loyalty activities.
/// </summary>
public class RetailLoyaltyProcessNonTransactionalJob extends RunBaseBatch implements BatchRetryable
{
    #define.DefaultBatchSize(1000)

    BatchHeader batchHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    private void createTask(Array _transRecIds)
    {
        RetailLoyaltyProcessNonTransactionalTask task = new RetailLoyaltyProcessNonTransactionalTask();

        task.parmPackedNonTransactionalActivityIdList(_transRecIds.pack());

        if (this.isInBatch())
        {
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);
        }
        else
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBatchSize</Name>
				<Source><![CDATA[
    private int getDefaultBatchSize()
    {
        return #DefaultBatchSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTasks</Name>
				<Source><![CDATA[
    private void prepareTasks()
    {
        RetailLoyaltyCardRewardPointNonTransactionalActivity nonTransactionalActivity;
        RetailLoyaltyCardRewardPointTrans loyaltyCardTrans;

        int batchSize = this.getDefaultBatchSize();
        Array transRecIds = new Array(Types::String);
        int currentBatchSize = 0;
        str previousCardNumber = '';

        using(var logger = RetailInstrumentationSegment::construct('Loyalty', funcName()))
        {
            while select crossCompany RecId, CardNumber, NonTransactionalActivityId from nonTransactionalActivity
                where nonTransactionalActivity.Status == RetailLoyaltyCardRewardPointNonTransactionalActivityStatus::Draft
            {
                // Create batch if it reaches the size limit
                // Make sure the transactions of the same card are added to the same batch
                if (nonTransactionalActivity.CardNumber != previousCardNumber)
                {
                    if (currentBatchSize >= batchSize)
                    {
                        this.createTask(transRecIds);

                        // Reset buffer
                        currentBatchSize = 0;
                        transRecIds = new Array(Types::Int64);
                    }

                    previousCardNumber = nonTransactionalActivity.CardNumber;
                }

                currentBatchSize++;
                transRecIds.value(currentBatchSize, nonTransactionalActivity.nonTransactionalActivityId);
            }

            // Process last partially filled buffer
            if (currentBatchSize > 0)
            {
                this.createTask(transRecIds);
            }

            if (batchHeader)
            {
                batchHeader.save();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.prepareTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the class.
    /// </summary>
    /// <returns>
    /// The description of the class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@Retail:ProcessNonTransactionalActivities";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate an instance of the <b>RetailLoyaltyProcessNonTransactionalJob</b> and run the operation.
    /// </summary>
    public static void main(Args _args)
    {
        RetailLoyaltyProcessNonTransactionalJob scheduler = new RetailLoyaltyProcessNonTransactionalJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailLoyaltyProcessNonTransactionalJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailLoyaltyProcessNonTransactionalJob</c>
    /// cannot be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>