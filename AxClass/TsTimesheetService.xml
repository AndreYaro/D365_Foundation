<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsTimesheetService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TSTimesheetService</c> class is the timesheet Web service class.
/// </summary>
class TsTimesheetService
{
    WorkflowWorkItemTable currentWorkflowWorkItemTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTimesheetLines</Name>
				<Source><![CDATA[
    /// <summary> 
    /// Add a timesheet line based on the timesheet entry.
    /// </summary>
    /// <param name="_tsTimesheetEntry">
    /// The <c>TSTimesheetEntry</c> that contains timesheet entry details.
    /// </param>
    /// <returns>
    /// A <c>TSTimesheetLine</c> object.
    /// </returns>
    protected TSTimesheetLine addTimesheetLines(TSTimesheetEntry _tsTimesheetEntry)
    {
        TSTimesheetLine tsTimesheetLine;

        ResourceRecId resource = _tsTimesheetEntry.parmResource();
        if (this.isValidResource(resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(resource);
            changecompany(resourceCompanyId)
            {
                PeriodRecId period = ResourceFacade::getPeriod(resource);
                if (period)
                {
                    int day = TSTimesheetService::dayNumberOftheWeek(PeriodFacade::weekStart(period), _tsTimesheetEntry.parmEntryDate());

                    // Get the work period from the timesheet header
                    ProjPeriodTimesheetWeek projPeriodTimesheetWeek;
                    ProjTable projTable;
                    select firstonly RecId, PeriodFrom, PeriodTo, PeriodId from projPeriodTimesheetWeek
                        where projPeriodTimesheetWeek.PeriodId      == ResourceFacade::getPeriodId(resource)
                           && projPeriodTimesheetWeek.PeriodFrom    <= _tsTimesheetEntry.parmEntryDate()
                           && projPeriodTimesheetWeek.PeriodTo      >= _tsTimesheetEntry.parmEntryDate()
                        outer join projTable
                            where projTable.ProjId == _tsTimesheetEntry.parmProjId();

                    TSTimesheetTable tsTimesheetTable =TSTimesheetTable::find(_tsTimesheetEntry.parmTimesheetNumber());
                    tsTimesheetLine.ProjectDataAreaId       = _tsTimesheetEntry.parmProjectDataAreaId();
                    tsTimesheetLine.initFromResource();
                    tsTimesheetLine.initFromTSTimesheetTable(tsTimesheetTable);
                    tsTimesheetLine.initValue();

                    // Set the Timesheet line field values
                    tsTimesheetLine.ProjId                  = _tsTimesheetEntry.parmProjId();
                    tsTimesheetLine.TimesheetNbr            = tsTimesheetTable.TimesheetNbr;
                    tsTimesheetLine.ActivityNumber          = _tsTimesheetEntry.parmProjActivityNumber();
                    tsTimesheetLine.CategoryId              = _tsTimesheetEntry.parmProjCategoryId();
                    tsTimesheetLine.ProjPeriodTimesheetWeek = projPeriodTimesheetWeek.RecId;
                    tsTimesheetLine.psaSetCurrencyId();

                    tsTimesheetLine.initFromProjTable(projTable);
                    tsTimesheetLine.LinePropertyId  = _tsTimesheetEntry.parmLinePropertyId();
                    if (_tsTimesheetEntry.parmDefaultDimension() != 0)
                    {
                        tsTimesheetLine.DefaultDimension = _tsTimesheetEntry.parmDefaultDimension();
                    }
                    else
                    {
                        // Update _tsTimesheetEntry with the financial dimension defaulted by Timesheet
                        _tsTimesheetEntry.parmDefaultDimension(tsTimesheetLine.DefaultDimension);
                    }
                    if (tsTimesheetLine.validateWrite())
                    {
                        tsTimesheetLine.insert();
                        _tsTimesheetEntry.parmTimesheetLineRecId(tsTimesheetLine.RecId);
                        _tsTimesheetEntry.parmTimesheetLineRecVersion(tsTimesheetLine.RecVersion);
                    }

                    if (tsTimesheetLine.RecId != 0)
                    {
                        TSTimesheetLineWeek tsWeek;
                        tsWeek.tsTimesheetLine = tsTimesheetLine.RecId;

                        tsWeek.initValue();
                        tsWeek.TimesheetNbr         = tsTimesheetLine.TimesheetNbr;
                        tsWeek.LineNum              = tsTimesheetLine.LineNum;
                        tsWeek.ProjPeriodId         = projPeriodTimesheetWeek.PeriodId;
                        tsWeek.DayFrom              = projPeriodTimesheetWeek.PeriodFrom;
                        tsWeek.DayTo                = projPeriodTimesheetWeek.PeriodTo;
                        tsWeek.TransDate            = tsTimesheetTable.PeriodTo;
                        tsWeek.ProjTransDate         = _tsTimesheetEntry.parmEntryDate();
                        tsWeek.Hours[day]            = _tsTimesheetEntry.parmHrsPerDay();
                        tsWeek.InternalComments[day] = _tsTimesheetEntry.parmIntComment();
                        tsWeek.ExternalComments[day] = _tsTimesheetEntry.parmExtComment();
                        tsWeek.insert();

                        // tsWeek.insert will update or create the TSTimesheetTrans record
                        TSTimesheetTrans timesheetTrans = TSTimesheetTrans::find(tsWeek.TimesheetNbr, tsWeek.RecId, _tsTimesheetEntry.parmEntryDate());
                        _tsTimesheetEntry.parmTimesheetTransRecId(timesheetTrans.RecId);
                        _tsTimesheetEntry.parmTimesheetTransRecVersion(timesheetTrans.RecVersion);
                    }
                }
            }
        }

        return tsTimesheetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create a new timesheet.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_timesheetDate">
    ///     The date for the Timesheet in a timesheet period
    /// </param>
    /// <returns>
    ///     A <c>TSTimesheetDetails</c> object, that contains all the header details for the new timesheet created
    /// </returns>
    public TSTimesheetDetails createNewTimesheet(ResourceRecId _resource, TSDate _timesheetDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TSTimesheetDetails tsTimesheetHeaderDetails = new TSTimesheetDetails();

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                ProjPeriodLine projPeriodLine = TSTimesheetTable::getValidResourcePeriod(_resource,_timesheetDate);
                ProjPeriodTimesheetWeek projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId, _timesheetDate);

                if (!projPeriodTimesheetWeek)
                {
                    throw error("@SYS338882");
                }

                //Create a new timesheet using the TSTimesheetCreate class
                TSTimesheetCreate tsTimesheetCreate = TSTimesheetCreate::newStandard(TSTimesheetCmd::CreateTimesheet);
                RecId timesheetRecId = tsTimesheetCreate.createNewTimesheetByResource(_resource, projPeriodLine.PeriodFrom);

                if (timesheetRecId == 0)
                {
                    //Throwing the error from the infolog so that it can be communicated to clients
                    //For eg. if the the maximum limit of timesheets for a certain period and resource
                    //has reached, the timesheet is not created & an error is logged to the infolog
                    throw Exception::Error;
                }

                //Find the new timesheet created, by its recId
                TSTimesheetTable tsTimesheetTableLocal  = TSTimesheetTable::findRecId(timesheetRecId);

                tsTimesheetHeaderDetails.populateTimesheetDetails(tsTimesheetTableLocal);
            }
        }

        return tsTimesheetHeaderDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTimesheetTable</Name>
				<Source><![CDATA[
    protected boolean createOrUpdateTimesheetTable(TSAppStatus _approvalStatus) 
    {
        boolean returnValue = false;
        if (_approvalStatus == TSAppStatus::Create || _approvalStatus == TSAppStatus::Returned)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTimeEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create timesheet header and timesheet line for a timesheet entry.
    /// </summary>
    /// <param name="_tsTimesheetEntry">
    /// The <c>TSTimesheetEntry</c> that contains timesheet entry details.
    /// </param>
    /// <returns>
    /// A <c>TSTimesheetDetails</c> object.
    /// </returns>
    /// <remarks>
    /// If the <c>TSTimesheetEntry</c> object has a timesheet number associated with it,
    /// then the entry is created or updated in that timesheet;
    /// else the entry is created or updated in the first timesheet found for the timesheet period
    /// corresponding to the timesheet entry date (if exists, else a new timesheet is created).
    /// </remarks>
    public TSTimesheetDetails createOrUpdateTimeEntry(TSTimesheetEntry _tsTimesheetEntry)
    {
        TSTimesheetDetails  tsTimesheetDetails;

        ResourceRecId resource = _tsTimesheetEntry.parmResource();
        if (this.isValidResource(resource))
        {
            this.defaultTimesheetValues(_tsTimesheetEntry);

            if (this.validateTimesheetLineFields(_tsTimesheetEntry))
            {
                DataAreaId resourceCompanyId = this.getResourceLegalEntity(resource);
                changecompany(resourceCompanyId)
                {
                    TSTimesheetLine tsTimesheetLine;
                    TSTimesheetTable tsTimesheetTable = this.getTSTimesheetTable(_tsTimesheetEntry);
                    if (tsTimesheetTable.RecId)
                    {
                        if (this.createOrUpdateTimesheetTable(tsTimesheetTable.ApprovalStatus))
                        {
                            tsTimesheetLine = this.createOrUpdateTimesheetLines(_tsTimesheetEntry);
                        }
                        else
                        {
                            throw error("@SYS184126");
                        }
                    }
                    else
                    {
                        ttsbegin;
                        this.createTimesheetHeader(_tsTimesheetEntry);
                        tsTimesheetTable = tsTimesheetTable::find(_tsTimesheetEntry.parmTimesheetNumber());

                        tsTimesheetLine = this.createOrUpdateTimesheetLines(_tsTimesheetEntry);
                        ttscommit;
                    }

                    tsTimesheetDetails = new TSTimesheetDetails();
                    tsTimesheetDetails.populateTimesheetDetails(tsTimesheetTable);

                    //Line Details
                    List tsLineDetailList = new List(Types::Class);
                    TSTimesheetTrans tsTimesheetTrans;
                    TSTimesheetLineWeek tsTimesheetLineWeek;
                    while select * from tsTimesheetLine
                        order by tsTimesheetLine.TimesheetNbr desc, tsTimesheetTrans.ProjTransDate
                        where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                            join * from tsTimesheetLineWeek
                            where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId
                                join * from tsTimesheetTrans
                                where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                    {
                        TSTimesheetEntry tsTimesheetEntry = new TSTimesheetEntry();
                        tsTimesheetEntry.populateTimesheetEntry(tsTimesheetLine, tsTimesheetLineWeek, tsTimesheetTrans);
                        tsLineDetailList.addEnd(tsTimesheetEntry);
                    }

                    tsTimesheetDetails.parmTimesheetLine(tsLineDetailList);
                }
            }
        }

        return tsTimesheetDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTimesheetValues</Name>
				<Source><![CDATA[
    private void defaultTimesheetValues(TSTimesheetEntry _tsTimesheetEntry)
    {
        // Handle defaulting of data - Set parm value as these need to go back to caller
        if (!_tsTimesheetEntry.parmProjCategoryId() ||
            !_tsTimesheetEntry.parmLinePropertyId())
        {
            changecompany (_tsTimesheetEntry.parmLegalEntity())
            {
                // Category from activity
                if (!_tsTimesheetEntry.parmProjCategoryId() && _tsTimesheetEntry.parmProjActivityNumber())
                {
                    ProjCategory projCategory = TsTimesheetService::findDefaultCategoryForActivity(_tsTimesheetEntry.parmProjActivityNumber());
                    _tsTimesheetEntry.parmProjCategoryId(projCategory.CategoryId);
                }

                // Category from Worker setting
                if (!_tsTimesheetEntry.parmProjCategoryId())
                {
                    ProjCategory projCategory = TsTimesheetService::findDefaultCategoryForResource(_tsTimesheetEntry.parmResource());
                    _tsTimesheetEntry.parmProjCategoryId(projCategory.CategoryId);
                }

                // Category from parameters
                if (!_tsTimesheetEntry.parmProjCategoryId())
                {
                    ProjCategory projCategory = TsTimesheetService::findDefaultCategoryForLegalEntity(_tsTimesheetEntry.parmLegalEntity());
                    _tsTimesheetEntry.parmProjCategoryId(projCategory.CategoryId);
                }

                // Line property
                if (!_tsTimesheetEntry.parmLinePropertyId())
                {
                    ProjLinePropertyId LinePropertyId = ProjLinePropertySetup::findLinePropertyId(_tsTimesheetEntry.parmProjId(), _tsTimesheetEntry.parmProjCategoryId());
                    _tsTimesheetEntry.parmLinePropertyId(LinePropertyId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryForActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default ProjCategory record associated with a ProjActivity.
    /// </summary>
    /// <param name = "activityNumber">The activity number of the ProjActivity record.</param>
    /// <returns>The associated ProjCategory record.</returns>
    public static ProjCategory findDefaultCategoryForActivity(smmActivityNumber activityNumber)
    {
        ProjActivity projActivity;
        select firstonly CategoryDefault from projActivity
            where projActivity.ActivityNumber == activityNumber;

        return ProjCategory::find(projActivity.CategoryDefault);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryForResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default ProjCategory record associated with a Resource.
    /// </summary>
    /// <param name = "resource">The RecId of the Resource record.</param>
    /// <returns>The associated ProjCategory record.</returns>
    public static ProjCategory findDefaultCategoryForResource(ResourceRecId resource)
    {
        ProjCategory projCategory;
        ResourceSetup resourceSetup;
        select DefaultTimeCategory from resourceSetup where resourceSetup.Resource == resource;
        ProjCategory projCategoryLocal = ProjCategory::findRecId(resourceSetup.DefaultTimeCategory);
        if (projCategoryLocal && projCategoryLocal.CategoryType == ProjCategoryType::Hour)
        {
            projCategory = projCategoryLocal;
        }

        return projCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default ProjCategory record associated with a legal entity (from its Project Parameters).
    /// </summary>
    /// <param name = "legalEntity">The DataAreaId of the legal entity.</param>
    /// <returns>The associated ProjCategory record.</returns>
    public static ProjCategory findDefaultCategoryForLegalEntity(DataAreaId legalEntity)
    {
        ProjCategory projCategory;
        ProjCategoryId categoryId = ProjParameters::findByDataArea(legalEntity).EmplCategory;
        projCategory = ProjCategory::find(categoryId);
        
        return projCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default lineProperty associated with an ProjCategory record.
    /// </summary>
    /// <param name = "categoryID">The category record.</param>
    /// <returns>The associated lineProperty recid .</returns>
    public static RecId findDefaultLineProperty(CategoryId categoryId)
    {
        ProjTable projtable;
        ProjLineProperty projLineProperty;

        ProjLinePropertyId projLinePropertyId = ProjLinePropertySetup::findLinePropertyId(projtable.ProjId, categoryId);

        select firstonly RecId from projLineProperty
            where projLineProperty.LinePropertyId == projLinePropertyId
            && projLineProperty.DataAreaId == curExt();

        return projLineProperty.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTimesheetLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update timesheet line based on a timesheet entry.
    /// </summary>
    /// <param name="_tsTimesheetEntry">
    /// The <c>TSTimesheetEntry</c> that contains timesheet entry details.
    /// </param>
    /// <returns>
    /// A <c>TSTimesheetLine</c> object.
    /// </returns>
    protected TSTimesheetLine createOrUpdateTimesheetLines(TSTimesheetEntry _tsTimesheetEntry)
    {
        TSTimesheetLine tsTimesheetLine;

        ResourceRecId resource = _tsTimesheetEntry.parmResource();
        if (this.isValidResource(resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(resource);
            changecompany(resourceCompanyId)
            {
                PeriodRecId period = ResourceFacade::getPeriod(resource);
                int day = TSTimesheetService::dayNumberOftheWeek(PeriodFacade::weekStart(period), _tsTimesheetEntry.parmEntryDate());

                if (_tsTimesheetEntry.parmEditLines())
                {
                    //Line RecId already from client
                    if (_tsTimesheetEntry.parmTimesheetLineRecId() != 0)
                    {
                        select forupdate RecId, ActivityNumber, ProjId, CategoryId, LinePropertyId  from tsTimesheetLine
                            where tsTimesheetLine.RecId == _tsTimesheetEntry.parmTimesheetLineRecId();

                        //Check the recVersion (if exists) of the Timesheet line (to be updated) on the server with
                        //the recVersion in TSTimesheetEntry, so as to avoid overwriting the existing data with stale data
                        if ( _tsTimesheetEntry.parmTimesheetLineRecVersion() != 0 && tsTimesheetLine.RecVersion != _tsTimesheetEntry.parmTimesheetLineRecVersion())
                        {
                            throw error("@SYS335382");
                        }

                        //Case 1: To edit existing timesheet if hours changed from client.
                        if (tsTimesheetLine.ActivityNumber              == _tsTimesheetEntry.parmProjActivityNumber()   &&
                            tsTimesheetLine.ProjId                      == _tsTimesheetEntry.parmProjId()               &&
                            tsTimesheetLine.CategoryId                  == _tsTimesheetEntry.parmProjCategoryId()       &&
                            tsTimesheetLine.LinePropertyId              == _tsTimesheetEntry.parmLinePropertyId()       &&
                            tsTimesheetLine.ProjectDataAreaId           == _tsTimesheetEntry.parmProjectDataAreaId())
                        {
                            TSTimesheetLineWeek tsWeek;
                            select firstonly forupdate tsWeek
                                where tsWeek.tsTimesheetLine == tsTimesheetLine.RecId;

                            TSTimesheetTrans tsTrans;
                            select tsTrans
                                where tsTrans.tsTimesheetLineWeek == tsWeek.RecId &&
                                        tsTrans.ProjTransDate == _tsTimesheetEntry.parmEntryDate();

                            //Check the recVersion (if exists) of TSTrans so as to avoid overwriting the existing data with stale data
                            //A change in TSTrans also implies a change to TSLineWeek, hence we only check the recVersion for TSTrans
                            if (_tsTimesheetEntry.parmTimesheetTransRecVersion() != 0 && tsTrans.RecVersion != _tsTimesheetEntry.parmTimesheetTransRecVersion())
                            {
                                throw error("@SYS335382");
                            }

                            ttsbegin;
                            tsWeek.Hours[day] = _tsTimesheetEntry.parmHrsPerDay();
                            tsWeek.InternalComments[day] = _tsTimesheetEntry.parmIntComment();
                            tsWeek.ExternalComments[day] = _tsTimesheetEntry.parmExtComment();
                            tsWeek.update();

                            // Get the current version of the trans record. It may not exist if hours = 0
                            select forupdate tsTrans
                                where tsTrans.tsTimesheetLineWeek == tsWeek.RecId &&
                                        tsTrans.ProjTransDate == _tsTimesheetEntry.parmEntryDate();
                            if (tsTrans)
                            {
                                tsTrans.IntComment = tsWeek.InternalComments[day];
                                tsTrans.ExtComment = tsWeek.ExternalComments[day];
                                tsTrans.update();
                            }
                            ttscommit;
                        }
                        else
                        {
                            TSTimesheetLineWeek tsWeek;
                            TSTimesheetTrans tsTrans;
                            select forupdate firstonly RecId, Hours, IntComment, ExtComment from tsTrans
                                where tsTrans.ProjTransDate == _tsTimesheetEntry.parmEntryDate()
                                    && tsTrans.TimesheetNbr  == tsTimesheetLine.TimesheetNbr
                                join forupdate tsWeek
                                    where tsTrans.tsTimesheetLineWeek == tsWeek.RecId
                                        && tsWeek.tsTimesheetLine      == _tsTimesheetEntry.parmTimesheetLineRecId();

                            if (_tsTimesheetEntry.parmTimesheetTransRecVersion() != 0 && tsTrans.RecVersion != _tsTimesheetEntry.parmTimesheetTransRecVersion())
                            {
                                throw error("@SYS335382");
                            }

                            //Record already present for the day and the hours is changed
                            if (tsTrans.RecId != 0)
                            {
                                if (tsWeek.totalHours() == _tsTimesheetEntry.parmHrsPerDay())
                                {
                                    //2nd case: EDIT PROJECT/CATEGORY with only ONE cell filled - new line is NOT created
                                    ttsbegin;
                                    tsTimesheetLine.ActivityNumber      = _tsTimesheetEntry.parmProjActivityNumber();
                                    tsTimesheetLine.ProjId              = _tsTimesheetEntry.parmProjId();
                                    tsTimesheetLine.CategoryId          = _tsTimesheetEntry.parmProjCategoryId();
                                    tsTimesheetLine.LinePropertyId      = _tsTimesheetEntry.parmLinePropertyId();
                                    tsTimesheetLine.ProjectDataAreaId   = _tsTimesheetEntry.parmProjectDataAreaId();

                                    if (tsTimesheetLine.validateWrite())
                                    {
                                        tsTimesheetLine.update();

                                        tsWeek.InternalComments[day]        = _tsTimesheetEntry.parmIntComment();
                                        tsWeek.ExternalComments[day]        = _tsTimesheetEntry.parmExtComment();
                                        tsWeek.update();

                                        //Need to update the comments for the TSTimesheetTrans record as the
                                        //updates to TSTimesheetLineWeek Internal & External comments are not cascaded to it
                                        //Reread the record data as the TSTimesheetLine update() could have updated the TSTimesheetTrans record
                                        tsTrans.reread();
                                        tsTrans.IntComment                  = tsWeek.InternalComments[day];
                                        tsTrans.ExtComment                  = tsWeek.ExternalComments[day];
                                        tsTrans.update();
                                    }
                                    ttscommit;
                                }
                                else
                                {
                                    //3rd case: EDIT PROJECT/CATEGORY with more than ONE cell filled - new line IS created
                                    ttsbegin;
                                    tsWeek.Hours[day] = 0;
                                    tsWeek.InternalComments[day] = '';
                                    tsWeek.ExternalComments[day] = '';
                                    tsWeek.update();
                                    tsTrans.initFromTimesheetLineWeek(tsTimesheetLine.RecId);
                                    ttscommit;
                                    //Deleting the existing line if the total hours is zero. i.e. no entry in the line.
                                    if (tsWeek.totalHours() == 0)
                                    {
                                        ttsbegin;
                                        delete_from tsTimesheetLine
                                            where tsTimesheetLine.RecId == _tsTimesheetEntry.parmTimesheetLineRecId();
                                        ttscommit;
                                    }

                                    tsTimesheetLine = this.addTimesheetLines(_tsTimesheetEntry);
                                }
                            }
                        }
                    }
                }
                else
                {
                    //4th, 5th & 6th condition:  NEW TIME ENTRY
                    TSTimesheetTable tsTimesheetTable = TSTimesheetTable::find(_tsTimesheetEntry.parmTimesheetNumber());

                    ProjPeriodTimesheetWeek projPeriodTimesheetWeek;
                    select firstonly RecId, TimesheetNbr from tsTimesheetLine
                        exists join RecId from projPeriodTimesheetWeek
                                where projPeriodTimesheetWeek.PeriodId == tsTimesheetTable.ProjPeriodId               &&
                                    projPeriodTimesheetWeek.PeriodFrom <= _tsTimesheetEntry.parmEntryDate()         &&
                                    projPeriodTimesheetWeek.PeriodTo >= _tsTimesheetEntry.parmEntryDate()           &&
                                    tsTimesheetLine.ActivityNumber == _tsTimesheetEntry.parmProjActivityNumber()    &&
                                    tsTimesheetLine.ProjId         == _tsTimesheetEntry.parmProjId()                &&
                                    tsTimesheetLine.CategoryId     == _tsTimesheetEntry.parmProjCategoryId()        &&
                                    tsTimesheetLine.LinePropertyId == _tsTimesheetEntry.parmLinePropertyId()        &&
                                    tsTimesheetLine.TimesheetNbr   == tsTimesheetTable.TimesheetNbr                 &&
                                    tsTimesheetLine.ProjectDataAreaId == _tsTimesheetEntry.parmProjectDataAreaId()  &&
                                    tsTimesheetLine.ProjPeriodTimesheetWeek == projPeriodTimesheetWeek.RecId;

                    TSTimesheetLineWeek tsWeek;
                    TSTimesheetTrans tsTrans;
                    select firstonly forupdate tsWeek
                        where tsWeek.TimesheetNbr == tsTimesheetLine.TimesheetNbr   &&
                                tsWeek.tsTimesheetLine == tsTimesheetLine.RecId     &&
                                tsWeek.DayFrom <= _tsTimesheetEntry.parmEntryDate() &&
                                tsWeek.DayTo >= _tsTimesheetEntry.parmEntryDate()
                        outer join RecId from tsTrans where tsTrans.ProjTransDate == _tsTimesheetEntry.parmEntryDate() &&
                                tsTrans.TimesheetNbr == tsTimesheetLine.TimesheetNbr &&
                                tsTrans.tsTimesheetLineWeek == tsWeek.RecId;

                    if ((tsTimesheetLine.RecId != 0) && (tsWeek.RecId != 0) && (tsTrans.RecId == 0))
                    {
                        ttsbegin;
                        _tsTimesheetEntry.parmTimesheetLineRecId(TSTimesheetLine.RecId);
                        _tsTimesheetEntry.parmTimesheetLineRecVersion(tsTimesheetLine.RecVersion);

                        tsWeek.Hours[day] = _tsTimesheetEntry.parmHrsPerDay();
                        tsWeek.InternalComments[day] = _tsTimesheetEntry.parmIntComment();
                        tsWeek.ExternalComments[day] = _tsTimesheetEntry.parmExtComment();
                        tsTrans.initValue();
                        tsTrans.initFromTimesheetLineWeek(tsTimesheetLine.RecId);
                        tsWeek.update();

                        TSTimesheetTrans timesheetTrans = TSTimesheetTrans::find(tsWeek.TimesheetNbr, tsWeek.RecId, _tsTimesheetEntry.parmEntryDate());
                        _tsTimesheetEntry.parmTimesheetTransRecId(timesheetTrans.RecId);
                        _tsTimesheetEntry.parmTimesheetTransRecVersion(timesheetTrans.RecVersion);

                        ttscommit;
                    }
                    else
                    {
                        tsTimesheetLine = this.addTimesheetLines(_tsTimesheetEntry);
                    }
                }
            }
        }
        return tsTimesheetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimesheetHeader</Name>
				<Source><![CDATA[
    private void createTimesheetHeader(TSTimesheetEntry _tsTimesheetEntry)
    {
        ResourceRecId resource = _tsTimesheetEntry.parmResource();
        if (this.isValidResource(resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(resource);
            changecompany(resourceCompanyId)
            {
                ProjPeriodLine projPeriodLine = TSTimesheetTable::getValidResourcePeriod(resource, _tsTimesheetEntry.parmEntryDate());
                // getValidRsourcePeriod() will give an error message. No need of an else statement to provied an error message.
                if (projPeriodLine)
                {
                    ProjPeriodTimesheetWeek projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId, _tsTimesheetEntry.parmEntryDate());
                    if (projPeriodTimesheetWeek.RecId == 0)
                    {
                        throw error("@SYS338882");
                    }
                    else
                    {
                        TSTimesheetCreate timesheetCreate = TSTimesheetCreate::newStandard(TSTimesheetCmd::CreateTimesheet);
                        TSTimesheetTable tsTimesheetTable  = TSTimesheetTable::findRecId(timesheetCreate.createNewTimesheet(_tsTimesheetEntry.parmEntryDate()));
                        _tsTimesheetEntry.parmTimesheetNumber(tsTimesheetTable.TimesheetNbr);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTimesheetEntries</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the delete action for timesheet entries.
    /// </summary>
    /// <param name="_tsTimesheetEntries">
    ///     A List of timesheet entries.
    /// </param>
    /// <returns>
    ///     true if all timesheet entries are deleted successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     An exception is thrown if no timesheet entries are present in the list, or
    ///     if the the timesheet entries cannot be deleted
    /// </remarks>
    public boolean deleteTimesheetEntries(List _tsTimesheetEntries)
    {
        boolean             success;

        if (_tsTimesheetEntries == null || _tsTimesheetEntries.empty())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator enumerator = _tsTimesheetEntries.getEnumerator();

        ttsbegin;
        while (enumerator.moveNext())
        {
            success             =  false;
            TSTimesheetEntry tsTimesheetEntry    =  enumerator.current();

            // If the timesheetline containing the time entry is not found, an error is thrown in the deleteTimesheetLines method.
            success             =  this.deleteTimesheetLines(tsTimesheetEntry.parmTimesheetLineRecId(), tsTimesheetEntry.parmEntryDate(), tsTimesheetEntry.parmResource());

            if (!success)
            {
                throw error("@SYS83078");
            }
        }
        ttscommit;

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTimesheetLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the delete action for a timesheet.
    /// </summary>
    /// <param name="_recId">
    ///     The <c>RecId</c> of the timesheet line.
    /// </param>
    /// <param name="_transDate">
    ///     The entry date of timesheet
    /// </param>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <returns>
    ///     true if successful; otherwise, false.
    /// </returns>
    public boolean deleteTimesheetLines(RecId _recId, JournalTransDate _transDate, ResourceRecId _resource)
    {
        boolean                 success;

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                //Adding the resource record ID to the where clause for ensuring security when fetching a timesheet line for that resource
                TSTimesheetLine  tsTimesheetLine;
                select forupdate RecId from tsTimesheetLine
                    where tsTimesheetLine.RecId == _recId &&
                        tsTimesheetLine.Resource == _resource &&
                          (tsTimesheetLine.ApprovalStatus == TSAppStatus::Create ||
                           tsTimesheetLine.ApprovalStatus == TSAppStatus::Returned);

                if (tsTimesheetLine.RecId != 0)
                {
                    TSTimesheetTrans tsTrans;
                    TSTimesheetLineWeek tsWeek;
                    select forupdate tsTrans
                            exists join RecId from tsWeek
                                    where tsWeek.tsTimesheetLine == tsTimesheetLine.RecId   &&
                                          tsTrans.tsTimesheetLineWeek == tsWeek.RecId       &&
                                          tsTrans.ProjTransDate == _transDate;

                    // Case 1. There are multiple entries in the same line, in this case we delete the entry for the particular day in question.
                    ttsbegin;
                    tsTrans.delete();

                    // Update the line week table based on the new values
                    select forupdate tsWeek where tsWeek.tsTimesheetLine == tsTimesheetLine.RecId;
                    tsWeek.updateTimesheetLineWeekHours();

                    // The standard 'update()' is not used here to avoid the logic which does not apply to a delete, such as max hours checking
                    tsWeek.doUpdate();

                    //Case 2. There was a single entry in the line, delete the whole line
                    if (tsWeek.totalHours() == 0)
                    {
                        tsTimesheetLine.delete();
                    }
                    ttscommit;

                    success = true;
                }
                else
                {
                    throw error("@SYS83078");
                }
            }
        }
        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTimesheets</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the delete action for timesheets.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_timesheetNbrs">
    ///     A List of timesheet numbers.
    /// </param>
    /// <returns>
    ///     true if all timesheets are deleted successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Exceptions are thrown if no timesheet numbers are present in the list, a timesheet is not found
    ///     or if a timesheet corresponding to a timesheet number is not in a draft state.
    /// </remarks>
    public boolean deleteTimesheets(ResourceRecId _resource, List _timesheetNbrs)
    {
        boolean          success;

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                if (_timesheetNbrs == null || _timesheetNbrs.empty())
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                ListEnumerator enumerator = _timesheetNbrs.getEnumerator();

                ttsbegin;
                while (enumerator.moveNext())
                {
                    TSTimesheetNbr timesheetNbr = enumerator.current();

                    //Adding the resource record ID to the where clause for ensuring security when fetching a timesheet for that resource
                    TSTimesheetTable tsTimesheetTableLocal;
                    select forupdate firstonly tsTimesheetTableLocal
                        where tsTimesheetTableLocal.Resource == _resource &&
                            tsTimesheetTableLocal.TimesheetNbr == timesheetNbr;

                    if (tsTimesheetTableLocal.RecId && tsTimesheetTableLocal.validateDelete())
                    {
                        tsTimesheetTableLocal.delete();
                        success = true;
                    }
                    else
                    {
                        throw error(strFmt("@SYS4007961", tsTimesheetTableLocal.TimesheetNbr));
                    }
                }
                ttscommit;
            }
        }
        else
        {
            success = false;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLegalEntity</Name>
				<Source><![CDATA[
    protected internal str getDefaultLegalEntity()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates a set of label IDs into their corresponding values.
    /// </summary>
    /// <param name="_labelsToTranslate">
    /// A <c>List</c> object containing label IDs for which the corresponding values need to be looked up.
    /// </param>
    /// <param name="_language">
    /// The language in which the labels should be translated to.
    /// </param>
    /// <returns>
    /// A <c>Map</c> object of strings, which contains the label ID as the key and the translated label value in the target language as the value.
    /// </returns>
    /// <remarks>
    /// If a label translation is not found, the corresponding value in the returned
    /// <c>Map</c> object will be the exact string that was passed in the input <c>List</c> object.
    /// </remarks>
    public Map getLabelTranslations(List _labelsToTranslate, str _language)
    {
        return SysLabel::labelIds2Strings(_labelsToTranslate, _language);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the periods for the current user/resource within a date range
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_periodFrom">
    /// Include periods that end after this date
    /// </param>
    /// <param name="_periodTo">
    /// Include periods that end before this date
    /// </param>
    /// <returns>
    /// The periods in the range
    /// </returns>
    public TSTimesheetSettings getPeriods(ResourceRecId _resource, TSPeriodFrom _periodFrom, TSPeriodFrom _periodTo)
    {
        TSTimesheetSettings  tsTimesheetSettings = new TSTimesheetSettings();

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                ProjPeriodId periodId = ResourceFacade::getPeriodId(_resource);

                List periodList = new List(Types::Class);
                ProjPeriodLine  projPeriodLine;
                while select PeriodId, PeriodFrom, PeriodTo from projPeriodLine
                        where projPeriodLine.PeriodId == periodId &&
                              projPeriodLine.PeriodTo >= _periodFrom &&
                              projPeriodLine.PeriodTo <= _periodTo
                {
                    TSTimesheetPeriods tsTimesheetPeriods  = new TSTimesheetPeriods();
                    tsTimesheetPeriods.parmPeriodFrom(projPeriodLine.PeriodFrom);
                    tsTimesheetPeriods.parmPeriodTo(projPeriodLine.PeriodTo);
                    periodList.addEnd(tsTimesheetPeriods);
                }

                tsTimesheetSettings.parmPeriodId(periodId);
                tsTimesheetSettings.parmPeriodList(periodList);
            }
        }

        return tsTimesheetSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get all the details for a particular project.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <returns>
    ///     An object of <c>TSTimesheetProjectDetails</c> class.
    /// </returns>
    public TSTimesheetProjectDetails getProjectDetails(ResourceRecId _resource)
    {
        TSTimesheetProjectService projectService = new TSTimesheetProjectService();

        TSTimesheetProjectIncludeFieldRulesParams projectIncludeFieldRulesParams = new TSTimesheetProjectIncludeFieldRulesParams();
        projectIncludeFieldRulesParams.parmIncludeProjects(true);

        return projectService.getProjectDetailsByRules(_resource, projectIncludeFieldRulesParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGetTSTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a <c>TSTimesheetLine</c> should be attempted to be found.
    /// </summary>
    /// <param name = "_projProjectLookup">
    /// A <c>ProjProjectLookup</c> view table buffer.
    /// </param>
    /// <returns>
    /// true if a <c>TSTimesheetLine</c> should be attempted to be found; otherwise, false.
    /// </returns>
    protected boolean shouldGetTSTimesheetLine(ProjProjectLookup _projProjectLookup)
    {
        return (_projProjectLookup.Status == ProjStatus::Completed ||
                _projProjectLookup.Status == ProjStatus::User1     ||
                _projProjectLookup.Status == ProjStatus::User2     ||
                _projProjectLookup.Status == ProjStatus::User3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGetTSTimesheetLineMobile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a <c>TSTimesheetLine</c> should be attempted to be found.
    /// </summary>
    /// <param name = "_projCustGrantLookup">
    /// A <c>TSProjCustGrantLookup</c> view table buffer.
    /// </param>
    /// <returns>
    /// true if a <c>TSTimesheetLine</c> should be attempted to be found; otherwise, false.
    /// </returns>
    protected boolean shouldGetTSTimesheetLineMobile(TSProjCustGrantLookup _projCustGrantLookup)
    {
        return (_projCustGrantLookup.Status == ProjStatus::Completed ||
                _projCustGrantLookup.Status == ProjStatus::User1     ||
                _projCustGrantLookup.Status == ProjStatus::User2     ||
                _projCustGrantLookup.Status == ProjStatus::User3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get details of all timesheet header and line for default legal entity.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_fromTransDate">
    ///     The period from date of timesheet.
    /// </param>
    /// <param name="_toTransDate">
    ///     The period to date of timesheet.
    /// </param>
    /// <returns>
    ///     A <c>List</c> of <c>TSTimesheetHeaderDetails</c> objects.
    /// </returns>
    public List getTimesheetDetails(ResourceRecId _resource, TSPeriodFrom _fromTransDate, TSPeriodFrom _toTransDate)
    {
        List tsHeaderDetailList = new List(Types::Class);

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                // Getting the exact period range for the current user
                ProjPeriodId periodId = ResourceFacade::getPeriodId(_resource);

                ProjPeriodLine projPeriodLine;
                select firstonly RecId, PeriodTo from projPeriodLine
                    where   projPeriodLine.PeriodId == periodId &&
                            projPeriodLine.PeriodFrom <= _toTransDate &&
                            projPeriodLine.PeriodTo >= _toTransDate;
                //If the periods are less than the _toDate then last period is selected.
                if (projPeriodLine.RecId == 0)
                {
                    select firstonly PeriodTo from projPeriodLine
                        order by PeriodTo desc
                            where projPeriodLine.PeriodId == periodId;
                }

                //Header Details for default legal entity
                TSTimesheetTable tsTimesheetTable;
                while select * from tsTimesheetTable
                    order by tsTimesheetTable.PeriodFrom, tsTimesheetTable.TimesheetNbr
                    where tsTimesheetTable.Resource == _resource &&
                          tsTimesheetTable.PeriodTo >= _fromTransDate &&
                          tsTimesheetTable.PeriodTo <= projPeriodLine.PeriodTo
                {
                    TransDate transDate;
                    if (transDate == dateNull())
                    {
                        transDate = tsTimesheetTable.PeriodFrom;
                    }
                    else if (transDate != tsTimesheetTable.PeriodFrom)
                    {
                        transDate = tsTimesheetTable.PeriodFrom;
                    }
                    else
                    {
                        continue;
                    }

                    TSTimesheetDetails tsTimesheetDetails = new TSTimesheetDetails();
                    tsTimesheetDetails.populateTimesheetDetails(tsTimesheetTable);

                    //Line Details
                    List tsLineDetailList = new List(Types::Class);
                    TSTimesheetLine tsTimesheetLine;
                    TSTimesheetTrans tsTimesheetTrans;
                    TSTimesheetLineWeek tsTimesheetLineWeek;
                    while select * from tsTimesheetLine
                        order by tsTimesheetLine.TimesheetNbr desc
                        where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                            join *from tsTimesheetLineWeek
                            where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId
                                join * from tsTimesheetTrans
                                where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                    {
                        TSTimesheetEntry tsTimesheetEntry = new TSTimesheetEntry();
                        tsTimesheetEntry.populateTimesheetEntry(tsTimesheetLine, tsTimesheetLineWeek, tsTimesheetTrans);
                        tsLineDetailList.addEnd(tsTimesheetEntry);
                    }

                    tsTimesheetDetails.parmTimesheetLine(tsLineDetailList);
                    tsHeaderDetailList.addEnd(tsTimesheetDetails);
                }
            }
        }

        return tsHeaderDetailList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetDetailsByNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get details for specified timesheet number for default legal entity.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_timesheetNumber">
    ///     The number of the timesheet.
    /// </param>
    /// <returns>
    ///     A <c>TSTimesheetHeaderDetails</c> object.
    /// </returns>
    public TSTimesheetDetails getTimesheetDetailsByNumber(ResourceRecId _resource, TSTimesheetNbr _timesheetNumber)
    {
        return this.getTimesheetDetailsWithDelegatePostSubmissionAccess(_resource, _timesheetNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasAccessToTimesheet</Name>
				<Source><![CDATA[
    private boolean userHasAccessToTimesheet(ResourceRecId _resource, TSTimesheetTable _tsTimesheetTable, boolean _delegateHasAccessAfterSubmission = false)
    {
        boolean ret = false;

        if (_tsTimesheetTable)
        {
            if (TSTimesheetValidation::userHasAccessToTimesheet(_tsTimesheetTable) // user is owner (or delegate that has access before submission)
                || WorkflowWorkItem::wasUserApprovalOwner(_tsTimesheetTable) // user is an approver for the timesheet
                || (_delegateHasAccessAfterSubmission
                    && TSTimesheetValidation::userHasCurrentDelegateAccessFor(_resource)
                    && _tsTimesheetTable.Resource == _resource)) // User is delegate for this timesheet after submission
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetDetailsWithDelegatePostSubmissionAccess</Name>
				<Source><![CDATA[
    internal TSTimesheetDetails getTimesheetDetailsWithDelegatePostSubmissionAccess(ResourceRecId _resource, TSTimesheetNbr _timesheetNumber, boolean _delegateHasAccessAfterSubmission = false)
    {
        TSTimesheetDetails tsTimesheetDetails = new TSTimesheetDetails();

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                //Header Details for default legal entity
                TSTimesheetTable tsTimesheetTable;
                select firstonly * from tsTimesheetTable
                    where tsTimesheetTable.TimesheetNbr == _timesheetNumber;

                if (this.userHasAccessToTimesheet(_resource, tsTimesheetTable, _delegateHasAccessAfterSubmission))
                {
                    tsTimesheetDetails.populateTimesheetDetails(tsTimesheetTable);

                    //Get NormBillable field from the ProjPeriodEmpl table
                    ProjPeriodEmpl projPeriodEmpl;
                    select firstonly NormBillable, PeriodFrom, Resource from projPeriodEmpl
                        where projPeriodEmpl.PeriodFrom == tsTimesheetTable.PeriodFrom &&
                              projPeriodEmpl.Resource == _resource;

                    tsTimesheetDetails.parmNormBillable(projPeriodEmpl.NormBillable);

                    //Line Details
                    List tsLineDetailList = new List(Types::Class);
                    TSTimesheetLine tsTimesheetLine;
                    TSTimesheetLineWeek tsTimesheetLineWeek;
                    TSTimesheetTrans tsTimesheetTrans;
                    while select * from tsTimesheetLine
                        where tsTimesheetLine.TimesheetNbr == _timesheetNumber
                            join * from tsTimesheetLineWeek
                            where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId
                                join * from tsTimesheetTrans
                                order by ProjTransDate
                                where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                    {
                        TSTimesheetEntry tsTimesheetEntry = new TSTimesheetEntry();
                        tsTimesheetEntry.populateTimesheetEntry(tsTimesheetLine, tsTimesheetLineWeek, tsTimesheetTrans);

                        //append current timesheet entry to the list of entries
                        tsLineDetailList.addEnd(tsTimesheetEntry);
                    }

                    //add the list of entries to the timesheet details
                    tsTimesheetDetails.parmTimesheetLine(tsLineDetailList);
                }
            }
        }

        return tsTimesheetDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get timesheet headers only with chargeable and nonchargeable total hours for default legal entity
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="targetDate">
    ///     Target date for the last period for timesheet lookup
    /// </param>
    /// <param name="numPeriod">
    ///     The number of periods represent the range of periods for timesheet lookup
    /// </param>
    /// <returns>
    ///     A <c>List</c> of <c>TSTimesheetDetails</c> objects.
    /// </returns>
    public List getTimesheetHeaders(ResourceRecId _resource, date targetDate, int numPeriod)
    {
        List tsTimesheetHeadersList = new List(Types::Class);

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                //Query for the last period by target date and user context
                ProjPeriodLine projPeriodLine;
                select firstonly PeriodFrom, PeriodTo
                    from projPeriodLine
                    where projPeriodLine.PeriodFrom <= targetDate &&
                          projPeriodLine.PeriodTo >= targetDate &&
                          projPeriodLine.PeriodId == ResourceFacade::getPeriodId(_resource);

                date lastPeriodToDate   = projPeriodLine.PeriodTo;
                date lastPeriodFromDate = projPeriodLine.PeriodFrom;

                //Calculate the days length of the user's last period
                //Note: If user has period code update, this algorithm may
                //not return the correct date length of period
                int lastPeriodDaysLength =  lastPeriodToDate - lastPeriodFromDate + 1;

                //Calculate the start date by last period date date minus (day length of peiod times number of period)
                date endDate   = lastPeriodToDate;
                date startDate = endDate - lastPeriodDaysLength * numPeriod + 1;

                //Query for all the timesheet within the start and end date range by user context
                TSTimesheetTable tsTimesheetTable;
                while select * from tsTimesheetTable
                    order by PeriodFrom desc, ApprovalStatus, tsTimesheetTable.TimesheetNbr desc
                    where (!(tsTimesheetTable.PeriodTo < startDate || tsTimesheetTable.PeriodFrom > endDate)) &&
                    tsTimesheetTable.Resource == _resource
                {
                    //Add values to the contract list
                    TSTimesheetDetails tsTimesheetHeaders = new TSTimesheetDetails();
                    tsTimesheetHeaders.populateTimesheetDetails(tsTimesheetTable);

                    tsTimesheetHeadersList.addEnd(tsTimesheetHeaders);
                }
            }
        }

        return tsTimesheetHeadersList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the initial configuration settings.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <returns>
    ///     A object of <c>TSTimesheetSettings</c> class.
    /// </returns>
    public TSTimesheetSettings getTimesheetSettings(ResourceRecId _resource)
    {
        TSTimesheetSettingsService settingsService = new TSTimesheetSettingsService();

        TSTimesheetSettingsIncludeFieldRulesParams settingsIncludeFieldRulesParams = new TSTimesheetSettingsIncludeFieldRulesParams();
        settingsIncludeFieldRulesParams.parmIncludePeriods(true);
        settingsIncludeFieldRulesParams.parmIncludeResources(true);
        
        return settingsService.getTimesheetSettingsByRules(_resource, settingsIncludeFieldRulesParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTSTimesheetTable</Name>
				<Source><![CDATA[
    internal TSTimesheetTable getTSTimesheetTable(TSTimesheetEntry _tsTimesheetEntry)
    {
        TSTimesheetTable tsTimesheetTable;

        //
        // If the time entry has an associated timesheet number then
        // select that timesheet, else select the last timesheet open timesheet for editing
        //
        if (_tsTimesheetEntry.parmTimesheetNumber() == '')
        {
            ResourceRecId resource = _tsTimesheetEntry.parmResource();
            if (this.isValidResource(resource))
            {
                DataAreaId resourceCompanyId = this.getResourceLegalEntity(resource);
                changecompany(resourceCompanyId)
                {
                    ProjPeriodLine projPeriodLine = TSTimesheetTable::getValidResourcePeriod(resource, _tsTimesheetEntry.parmEntryDate());

                    // Get the work period from the timesheet header
                    ProjPeriodTimesheetWeek projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::find(projPeriodLine.PeriodId, projPeriodLine.PeriodFrom);
                    if (projPeriodTimesheetWeek.RecId != 0)
                    {
                        select firstonly tsTimesheetTable
                            order by RecId desc
                            where tsTimesheetTable.Resource   == resource &&
                                (tsTimesheetTable.ApprovalStatus == TSAppStatus::Create  ||
                                    tsTimesheetTable.ApprovalStatus == TSAppStatus::Returned)  &&
                                tsTimesheetTable.PeriodFrom == projPeriodTimesheetWeek.PeriodFrom;
                        _tsTimesheetEntry.parmTimesheetNumber(tsTimesheetTable.TimesheetNbr);
                    }
                }
            }
        }
        else
        {
            ResourceRecId resource = _tsTimesheetEntry.parmResource();
            if (this.isValidResource(resource))
            {
                DataAreaId resourceCompanyId = this.getResourceLegalEntity(resource);
                changecompany(resourceCompanyId)
                {
                    tsTimesheetTable = TSTimesheetTable::find(_tsTimesheetEntry.parmTimesheetNumber());
                }
            }
        }

        return tsTimesheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTSTimesheetTableByResourceRecId</Name>
				<Source><![CDATA[
    private TSTimesheetTable getTSTimesheetTableByResourceRecId(
        RecId           _recId,
        ResourceRecId  _resource,
        boolean         _forupdate = false)
    {
        TSTimesheetTable tsTimesheetTable = null;
        tsTimesheetTable.selectForUpdate(_forupdate);

        if (_recId && _resource)
        {
            if (this.isValidResource(_resource))
            {
                DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
                changecompany(resourceCompanyId)
                {
                    select firstonly tsTimesheetTable
                        where tsTimesheetTable.Resource == _resource &&
                              tsTimesheetTable.RecId    == _recId;
                }
            }
        }
        return tsTimesheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUtilizationInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get information about user utilization for the specified number of periods from the specified date
    /// </summary>
    /// <param name="_targetDate">
    ///     Target date for the last period for timsheet lookup
    /// </param>
    /// <param name="_numPeriod">
    ///     The number of periods represent the range of periods for timesheet lookup
    /// </param>
    /// <param name="_userId">
    ///     The user id to be used for timesheet lookup
    /// </param>
    /// <returns>
    ///     A <c>TSUtilizationInfo</c> object.
    /// </returns>
    public TSUtilizationInfo getUtilizationInfo(
        date   _targetDate,
        int    _numPeriod,
        UserId _userId = curUserId())
    {
        ProjPeriodEmpl          projPeriodEmpl;
        List                    tsPeriodInfos = new List(Types::Class);
        date                    startDate = dateNull();
        date                    endDate   = dateNull();
        date                    lastPeriodFromDate;
        date                    lastPeriodToDate;
        int                     lastPeriodDaysLength;
        Map                     periodFrom2PeriodObject = new Map(Types::Date, Types::Class);
        TSTimesheetPeriods      tsPeriodInfo;
        TSHoursTotal            tempBillable, tempTotal;
        TSUtilizationInfo       tsUtilizationInfo;
        real                    utilizationPercent = 0;
        MapEnumerator           periodMapEnumerator;
        int                     elementCount = 0;
        UserId                  userId = _userId ? _userId : curuserid();

        ResourceRecId  resource = ResourceFacade::findByCurrentWorker();
        //In the case when current user doesn't have an associated resource, return empty utilization info
        if (!resource)
        {
            return new TSUtilizationInfo();
        }

        DataAreaId resourceCompanyId = this.getResourceLegalEntity(resource);
        changecompany(resourceCompanyId)
        {
            ProjPeriodId periodId = ResourceFacade::getPeriodId(resource);

            //Query for the last period by target date and user context
            ProjPeriodTimesheetWeek projPeriodTimesheetWeek;
            select firstonly PeriodFrom, PeriodTo, PeriodId
                from projPeriodTimesheetWeek
                where projPeriodTimesheetWeek.PeriodFrom <= _targetDate
                   && projPeriodTimesheetWeek.PeriodTo   >= _targetDate
                   && projPeriodTimesheetWeek.PeriodId     == periodId;

            //If no period found for current resource, return empty utilization info
            if (!projPeriodTimesheetWeek.PeriodId)
            {
                return new TSUtilizationInfo();
            }

            lastPeriodToDate   = projPeriodTimesheetWeek.PeriodTo;
            lastPeriodFromDate = projPeriodTimesheetWeek.PeriodFrom;

            //Calculate the length in days of the user's last period
            //Note: If user has period code update, this algorithm may
            //not return the correct date length of period
            lastPeriodDaysLength =  lastPeriodToDate - lastPeriodFromDate + 1;

            //Calculate the start date by last period date date minus (day length of peiod times number of period)
            endDate = lastPeriodToDate;
            startDate = endDate - lastPeriodDaysLength * _numPeriod + 1;

            //Query for all the timesheet within the start and end date range by user context
            TSTimesheetTable TSTimesheetTable;
            while select TimesheetNbr, PeriodFrom, PeriodTo, ApprovalStatus from tsTimesheetTable
                order by PeriodFrom desc, ApprovalStatus, tsTimesheetTable.TimesheetNbr desc
                where tsTimesheetTable.PeriodTo      >= startDate &&
                    tsTimesheetTable.PeriodFrom      <= endDate &&
                    tsTimesheetTable.Resource        == resource &&
                    (tsTimesheetTable.ApprovalStatus == TSAppStatus::Approved ||
                    tsTimesheetTable.ApprovalStatus  == TSAppStatus::Ledger)
                outer join NormBillable from projPeriodEmpl
                    where projPeriodEmpl.PeriodId == projPeriodTimesheetWeek.PeriodId &&
                        projPeriodEmpl.PeriodFrom == tsTimesheetTable.PeriodFrom &&
                        projPeriodEmpl.Resource   == resource
            {
                //Use a map for timesheet hours aggregation. Get period info if it exists or
                //create new object if it doesn't exist yet.
                if (periodFrom2PeriodObject.exists(tsTimesheetTable.PeriodFrom))
                {
                    tsPeriodInfo = periodFrom2PeriodObject.lookup(tsTimesheetTable.PeriodFrom);
                }
                else
                {
                    tsPeriodInfo = new TSTimesheetPeriods();
                    tsPeriodInfo.parmPeriodFrom(tsTimesheetTable.PeriodFrom);
                    tsPeriodInfo.parmPeriodTo(tsTimesheetTable.PeriodTo);
                    tsPeriodInfo.parmUserId(userId);
                }

                //Aggregate billable hours
                tempBillable = tsTimesheetTable.totalHoursBillable();
                tsPeriodInfo.parmBillableHours(tsPeriodInfo.parmBillableHours() + tempBillable);

                //Aggregate total hours
                tempTotal = tsTimesheetTable.totalHours();
                tsPeriodInfo.parmTotalHours(tsPeriodInfo.parmTotalHours() + tempTotal);

                //Aggregate non-billable hours
                tsPeriodInfo.parmNonBillableHours(tsPeriodInfo.parmNonBillableHours() + tempTotal - tempBillable);

                //Set NormBillable hours for the particular period
                tsPeriodInfo.parmNormBillable(projPeriodEmpl.NormBillable);

                //Put new object into a map
                periodFrom2PeriodObject.insert(tsTimesheetTable.PeriodFrom, tsPeriodInfo);
            }

            //Pass through all period info objects within a map and calculate average utilization.
            periodMapEnumerator = periodFrom2PeriodObject.getEnumerator();
            while (periodMapEnumerator.moveNext())
            {
                tsPeriodInfo = periodMapEnumerator.currentValue();

                //Calculate a portion of utilization percent for current period info object
                if (tsPeriodInfo.parmNormBillable() != 0)
                {
                    utilizationPercent += tsPeriodInfo.parmBillableHours() / tsPeriodInfo.parmNormBillable();
                }

                //Put current period info object into a list to be a part of output
                tsPeriodInfos.addEnd(tsPeriodInfo);

                //Increment total number of non-empty periods
                elementCount++;
            }
            //Calculate utilization percent by dividing summed portions by the number of periods
            if (elementCount > 0)
            {
                utilizationPercent = 100 * utilizationPercent / elementCount;
            }

            tsUtilizationInfo = new TSUtilizationInfo();
            tsUtilizationInfo.parmPeriodInfo(tsPeriodInfos);
            tsUtilizationInfo.parmUtilizationPercent(utilizationPercent);
            tsUtilizationInfo.parmUserId(userId);
        }

        return tsUtilizationInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recallTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Recalls a timesheet.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_recId">
    ///     The <c>RecId</c> of the timesheet.
    /// </param>
    /// <param name="_comment">
    ///     Optional. A comment from the originator
    /// </param>
    /// <returns>
    ///     true if successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Exceptions are thrown if the timesheet is not found or
    ///     if the change in workflow state is invalid.
    /// </remarks>
    public boolean recallTimesheet(ResourceRecId _resource, RecId _recId,  WorkflowComment _comment = '')
    {
        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                TSTimesheetTable tsTimesheetTable = this.getTSTimesheetTableByResourceRecId(_recId, _resource);

                if (!tsTimesheetTable.RecId)
                {
                    throw error(strFmt("@SYS190478", _recId));
                }

                // Validate the specific case where a timesheet having a draft status cannot be recalled
                if (tsTimesheetTable.ApprovalStatus == TSAppStatus::Create)
                {
                    throw error("@SYS4007960");
                }

                // Validate all other states that could be changed to draft
                if (!TSStateChangeManager::validateStatusChange(tsTimesheetTable.ApprovalStatus, TSAppStatus::Create))
                {
                    throw error(strFmt("@SYS108515", tsTimesheetTable.ApprovalStatus, TSAppStatus::Create));
                }

                WorkflowTrackingStatusTable workflowTrackingStatusTable = Workflow::findTrackingStatusForDocument(tsTimesheetTable);

                var context = new TSWorkflowControlContext();
                context.parmWorkflowTrackingStatusTable(workflowTrackingStatusTable);
                context.parmWorkflowComment(_comment);

                ttsbegin;
                var args = new Args();
                args.record(tsTimesheetTable);
                args.parmObject(context);
                TSWorkflowCancelManager::main(args);
                ttscommit;

                return true;
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable getActiveWorkflowWorkItem()
    {
        return currentWorkflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubmitTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the resubmit action for a returned timesheet.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_recId">
    ///     The <c>RecId</c> of the timesheet.
    /// </param>
    /// <param name="_comment">
    ///    Optional comment when resubmitting the timesheet for approval
    /// </param>
    /// <returns>
    ///     true if successful; otherwise, false.
    /// </returns>
    public boolean resubmitTimesheet(ResourceRecId _resource, RecId _recId,  WorkflowComment _comment = '')
    {
        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                TSTimesheetTable tsTimesheetTable = this.getTSTimesheetTableByResourceRecId(_recId, _resource);

                if (!tsTimesheetTable.RecId)
                {
                    throw error(strFmt("@SYS190478", _recId));
                }

                if (tsTimesheetTable.ApprovalStatus == TSAppStatus::Returned)
                {
                    ttsbegin;
                    currentWorkflowWorkItemTable =  TSWorkflowActionManager::findWorkItem(tsTimesheetTable.TableId,  tsTimesheetTable.RecId);

                    Args args = new Args();
                    args.record(tsTimesheetTable);
                    args.parm(TSConstants::BypassDialog);
                    args.menuItemName(menuitemActionStr(TSWorkflowResubmit));
                    args.caller(this);

                    TSWorkflowActionManager workflowActionManager = new TSWorkflowActionManager();

                    if (_comment)
                    {
                        workflowActionManager.parmWorkflowComment(_comment);
                    }

                    workflowActionManager.parmWorkflowWorkItemTable(currentWorkflowWorkItemTable);
                    workflowActionManager.run(args);
                    ttscommit;
                }
                else
                {
                    throw error("@SYS326424");
                }
            }
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the action for a workflow work item.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_recId">
    ///     The <c>RecId</c> of the timesheet.
    /// </param>
    /// <param name="_comment">
    ///    Optional comment when submitting the timesheet for approval
    /// </param>
    /// <returns>
    ///     true if successful; otherwise, false.
    /// </returns>
    public boolean submitTimesheet(ResourceRecId _resource, RecId _recId,  WorkflowComment _comment = '')
    {
        boolean                 success       = false;

        TSTimesheetInstrumentationLogger workflowSubmissionLogger = TSTimesheetInstrumentationLogger::createLogger('TsTimesheetService');
        TSTimesheetInstrumentationActivities submissionActivities = TSTimesheetInstrumentationActivities::construct(workflowSubmissionLogger);
        using (var submitContext = submissionActivities.mobileSubmitTimesheetContext())
        {

            workflowSubmissionLogger.logInformation(
                strFmt('Timesheet submission from mobile app - ResourceRecId: %1, RecId: %2, WorkflowComment: %3',
                _resource, _recId, _comment));

            if (this.isValidResource(_resource))
            {
                DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
                changecompany(resourceCompanyId)
                {
                    TSTimesheetTable tsTimesheetTable = this.getTSTimesheetTableByResourceRecId(_recId, _resource);

                    workflowSubmissionLogger.logInformation(strFmt('TSTimesheetTable - RecId: %1, ApprovalStatus: %2, CreatedBy: %3, ResourceRecId: %4', 
                        tsTimesheetTable.RecId, tsTimesheetTable.ApprovalStatus, tsTimesheetTable.CreatedBy, tsTimesheetTable.Resource));

                    if (tsTimesheetTable && tsTimesheetTable.ApprovalStatus == TSAppStatus::Create)
                    {
                        if (tsTimesheetTable.validateSubmit())
                        {
                            TSWorkflowActionManager workflowActionManager = new TSWorkflowActionManager();
                            if (_comment)
                            {
                                workflowActionManager.parmWorkflowComment(_comment);
                            }

                            Args args = new Args();
                            args.record(tsTimesheetTable);
                            args.parm(TSConstants::BypassDialog);
                            args.menuItemName(menuitemActionStr(TSWorkflowSubmit));

                            ttsbegin;
                            workflowActionManager.run(args);
                            ttscommit;

                            success = true;
                        }
                        else
                        {
                            throw error(this.getInfolog());
                        }
                    }
                    else
                    {
                        throw error("@SYS184124");
                    }
                }
            }
            else
            {
                success = false;
            }
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfolog</Name>
				<Source><![CDATA[
    private str getInfolog()
    {
        str infologMessage = '';

        SysInfologEnumerator sysInfologEnumerator = SysInfologEnumerator::newData(infolog.export());

        while (sysInfologEnumerator.moveNext())
        {
            infologMessage += sysInfologEnumerator.currentMessage();
        }

        return infologMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidResource</Name>
				<Source><![CDATA[
    internal protected boolean isValidResource(ResourceRecId _resource)
    {
        if (!_resource)
        {
            throw error("@SYS304951");
        }
        else
        {
            // Validate resource actually exists in the system.
            if (!ResourceFacade::exist(_resource))
            {
                throw error("@SYS304951");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayNumberOftheWeek</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the day number of the week based on start day of week.
    /// </summary>
    /// <param name="_startOfWeek">
    ///     The start day of week.
    /// </param>
    /// <param name="_date">
    ///     The date of week day.
    /// </param>
    /// <returns>
    ///     Week day number.
    /// </returns>
    public static int dayNumberOftheWeek(WeekDays _startOfWeek, date _date)
    {
        if (_startOfWeek == WeekDays::None)
        {
            _startOfWeek = WeekDays::Monday;
        }

        TSWeekStart currDay;
        currDay = _startOfWeek;

        int i;
        for (i=1; i<=7; i++)
        {
            if (!enum2str(currDay))
            {
                currDay = WeekDays::Monday;
            }

            if (dayName(dayOfWk(_date)) == enum2str(currDay))
            {
                return i;
            }
            currDay ++;
        }
        return i;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the legal entity for a resource.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <returns>
    ///    The legal entity of the resource.
    /// </returns>
    internal DataAreaId getResourceLegalEntity(ResourceRecId _resource)
    {
        DataAreaId resourceLegalEntity;

        if (this.isValidResource(_resource))
        {
            ResourceView resourceView;
            select ResourceCompanyId from resourceView where resourceView.RecId == _resource;
            resourceLegalEntity = resourceView.ResourceCompanyId;
        }
        return resourceLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinTimeIncrement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimum time increment permitted for the project.
    /// </summary>
    /// <param name="_tsTimesheetEntry">
    /// The <c>TSTimesheetEntry</c> that contains timesheet entry details.
    /// </param>
    /// <returns>
    /// The minimum time increment permitted for the transaction line represented as a decimal fraction of 1.
    /// </returns>
    private TSMinTimeIncrement getMinTimeIncrement(TSTimesheetEntry _tsTimesheetEntry)
    {
        TSMinTimeIncrement returnValue = 0;

        changecompany(_tsTimesheetEntry.parmProjectDataAreaId())
        {
            ProjId projectID = _tsTimesheetEntry.parmProjId();
            if (projectID != '')
            {
                ProjTable projTable;
                select firstonly MinTimeIncrement from projTable where projTable.ProjId == projectID;
                if (projTable.MinTimeIncrement > 0)
                {
                    returnValue = projTable.MinTimeIncrement;
                }
            }

            if (returnValue == 0)
            {
                ProjParameters projParameters;
                select firstonly MinTimeIncrement from projParameters;
                returnValue = projParameters.MinTimeIncrement;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMinTimeIncrement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether hours provided is a valid increment based on
    /// minimum time increment settings for the project.
    /// </summary>
    /// <param name="_tsTimesheetEntry">
    /// The <c>TSTimesheetEntry</c> that contains timesheet entry details.
    /// </param>
    private void validateMinTimeIncrement(TSTimesheetEntry _tsTimesheetEntry)
    {
        TSMinTimeIncrement minTimeIncrement = this.getMinTimeIncrement(_tsTimesheetEntry);

        if (minTimeIncrement)
        {
            if (frac(minTimeIncrement) != 0)
            {
                if (frac(frac(_tsTimesheetEntry.parmHrsPerDay()) / frac(minTimeIncrement)))
                {
                    //Minimum time increment is %1
                    throw error(strFmt("@SYS184029",minTimeIncrement));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimesheetLineFields</Name>
				<Source><![CDATA[
    private boolean validateTimesheetLineFields(TSTimesheetEntry _tsTimesheetEntry)
    {

        this.checkValidEntryDate(_tsTimesheetEntry);
        this.checkValidHours(_tsTimesheetEntry);
        this.checkValidProjectDataAreaId(_tsTimesheetEntry);
        this.checkValidActivityId(_tsTimesheetEntry);
        this.checkValidLinePropertyId(_tsTimesheetEntry);

        // if exception has not been thrown return true
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidLinePropertyId</Name>
				<Source><![CDATA[
    private void checkValidLinePropertyId(TSTimesheetEntry _tsTimesheetEntry)
    {
        if (_tsTimesheetEntry.parmLinePropertyId() == '')
        {
            throw error("@SYS50154");
        }
        else
        {
            changecompany(_tsTimesheetEntry.parmProjectDataAreaId())
            {
                ProjLineProperty projLineProperty = ProjLineProperty::find(_tsTimesheetEntry.parmLinePropertyId());
                if (!projLineProperty)
                {
                    throw error(strFmt("@SYS76949", _tsTimesheetEntry.parmLinePropertyId()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidActivityId</Name>
				<Source><![CDATA[
    private void checkValidActivityId(TSTimesheetEntry _tsTimesheetEntry)
    {
        changecompany(_tsTimesheetEntry.parmProjectDataAreaId())
        {

            // Check for Required activity
            if (_tsTimesheetEntry.parmProjActivityNumber() == '' && ProjTable::checkRequireActivity(_tsTimesheetEntry.parmProjId(), tableNum(ProjEmplTrans)))
            {
                throw error("@SYS104469");
            }

            // Chekc for closed activity
            if (smmActivities::find(_tsTimesheetEntry.parmProjActivityNumber()).Closed)
            {
                throw error("@SYS80369");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidProjectDataAreaId</Name>
				<Source><![CDATA[
    private void checkValidProjectDataAreaId(TSTimesheetEntry _tsTimesheetEntry)
    {
        if (_tsTimesheetEntry.parmProjectDataAreaId() == '')
        {
            // project data area not provided
            throw error("@SYS133459");
        }
        else
        {
            // Is valid legal entity
            if (!xDataArea::exist(_tsTimesheetEntry.parmProjectDataAreaId()))
            {
                throw error("@SYS133459");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidHours</Name>
				<Source><![CDATA[
    private void checkValidHours(TSTimesheetEntry _tsTimesheetEntry)
    {
        // Validate time increment settings
        this.validateMinTimeIncrement(_tsTimesheetEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidEntryDate</Name>
				<Source><![CDATA[
    private void checkValidEntryDate(TSTimesheetEntry _tsTimesheetEntry)
    {
        // Date not provided
        if (_tsTimesheetEntry.parmEntryDate() == dateNull())
        {
            throw error("@SYS2476");
        }

        // Allow posting of future dates
        changecompany(_tsTimesheetEntry.parmProjectDataAreaId())
        {
            ProjParameters projParameters = ProjParameters::find();
            if (projParameters.TimesheetBlockFutureEntries == NoYes::Yes)
            {
                if (_tsTimesheetEntry.parmEntryDate() > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    throw error("@SYS4006045");
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>