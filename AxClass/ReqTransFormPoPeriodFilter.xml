<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormPoPeriodFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransFormPoPeriodFilter</c> class provides a filtered view of the selected planned orders
///    in the planned orders list page.
/// </summary>
class ReqTransFormPoPeriodFilter extends ReqTransFormPO
{
    FormRun                     callerForm;
    ItemId                      callerItemId;
    TransDate                   callerFromDate;
    TransDate                   callerToDate;
    InventDim                   callerInventDim;
    ReqPlanId                   callerReqPlanId;
    str                         productFamilyItemIdRange;
    RecId                       callerRecId;
    ForecastItemAllocationId    callerForecastItemAllocationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultReqPlanIdSched</Name>
				<Source><![CDATA[
    public ReqPlanId defaultReqPlanIdSched()
    {
        return callerReqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values from the caller form
    /// </summary>
    public void initFromCaller()
    {
        Object  callerFormObject;

        if (!callerForm)
        {
            callerForm = formRun.args().caller();
        }

        if (formRun.args().record())
        {
            callerRecId = formRun.args().record().RecId;
        }
        else if (callerForm)
        {
            callerFormObject = callerForm;

            if (formHasMethod(callerForm, identifierStr(parmItemId)))
            {
                callerItemId = callerFormObject.parmItemId();
            }
            if (formHasMethod(callerForm, identifierStr(parmForecastItemAllocationId)))
            {
                callerForecastItemAllocationId = callerFormObject.parmForecastItemAllocationId();
            }
            if (formHasMethod(callerForm, identifierStr(getFromDate)))
            {
                callerFromDate = callerFormObject.getFromDate();
            }
            if (formHasMethod(callerForm, identifierStr(getToDate)))
            {
                callerToDate = callerFormObject.getToDate();
            }
            if (formHasMethod(callerForm, identifierStr(parmInventDim)))
            {
                callerInventDim = callerFormObject.parmInventDim();
            }
            if (formHasMethod(callerForm, identifierStr(parmReqPlanId)))
            {
                callerReqPlanId = callerFormObject.parmReqPlanId();
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the planned order form to be displayed
    /// </summary>
    /// <returns>
    /// Name of the planned order form
    /// </returns>
    public identifierName lastValueDesignName()
    {
        return formStr(ReqTransPO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    public FormRun parmCallerForm(FormRun _callerForm = callerForm)
    {
        callerForm = _callerForm;

        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFromDate</Name>
				<Source><![CDATA[
    public TransDate parmCallerFromDate(TransDate _callerFromDate = callerFromDate)
    {
        callerFromDate = _callerFromDate;

        return callerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerInventDim</Name>
				<Source><![CDATA[
    public InventDim parmCallerInventDim(InventDim _callerInventDim = callerInventDim)
    {
        callerInventDim = _callerInventDim;

        return callerInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerItemId</Name>
				<Source><![CDATA[
    public ItemId parmCallerItemId(ItemId _callerItemId = callerItemId)
    {
        callerItemId = _callerItemId;

        return callerItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerReqPlanId</Name>
				<Source><![CDATA[
    public ReqPlanId parmCallerReqPlanId(ReqPlanId _callerReqPlanId = callerReqPlanId)
    {
        callerReqPlanId = _callerReqPlanId;

        return callerReqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerToDate</Name>
				<Source><![CDATA[
    public TransDate parmCallerToDate(TransDate _callerToDate = callerToDate)
    {
        callerToDate = _callerToDate;

        return callerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set ranges to filter on the planned orders to be shown in the planned orders form
    /// </summary>
    public void reqPoDSExecuteQueryPre()
    {
        super();

        this.updateDatasource(reqPo_DS.query().dataSourceTable(tableNum(ReqPO)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDatasource</Name>
				<Source><![CDATA[
    public void updateDatasource(QueryBuildDataSource _reqPODataSource)
    {
        QueryBuildRange         rangeReqRefType;
        QueryBuildDataSource    datasourceInventDim;
        QueryBuildDataSource    qbdsForecastItemAllocationLine;
        InventDimParm           inventDimParm;

        if (callerRecId)
        {
            _reqPODataSource.addRange(fieldNum(ReqPO, RecId)).value(queryValue(callerRecId));
        }
        if (callerItemId)
        {
            _reqPODataSource.addRange(fieldNum(ReqPO, ItemId)).value(queryValue(callerItemId));
        }
        if (callerForecastItemAllocationId)
        {
            qbdsForecastItemAllocationLine = _reqPODataSource.addDataSource(tableNum(ForecastItemAllocationLine));
            qbdsForecastItemAllocationLine.addRange(fieldNum(ForecastItemAllocationLine, AllocationId)).value(queryValue(callerForecastItemAllocationId));
            qbdsForecastItemAllocationLine.addLink(fieldNum(ReqPO, ItemId), fieldNum(ForecastItemAllocationLine, ItemId));
            qbdsForecastItemAllocationLine.joinMode(JoinMode::ExistsJoin);
        }

        if (callerInventDim.InventSiteId
            || callerInventDim.InventLocationId
            || callerInventDim.anyProductDimensionSpecified())
        {
            datasourceInventDim = _reqPODataSource.addDataSource(tableNum(InventDim));
            datasourceInventDim.addLink(fieldNum(ReqPO, CovInventDimId), fieldNum(InventDim, InventDimId));
            datasourceInventDim.joinMode(JoinMode::InnerJoin);

            inventDimParm.initFromInventDim(callerInventDim);
            inventDimParm.queryAddRangeValue(datasourceInventDim, callerInventDim);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>