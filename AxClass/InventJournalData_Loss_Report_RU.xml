<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalData_Loss_Report_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalData_Loss_Report_RU extends InventJournalData_Loss_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLinePriceAndAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines line price and amount.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// Container with line price and line amount.
    /// </returns>
    protected container getLinePriceAndAmount(InventJournalTrans _inventJournalTrans)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select sum(Qty), sum(CostAmountPosted) from inventTrans
            exists join inventTransOrigin
                where inventTransOrigin.RecId         ==  inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId == _inventJournalTrans.InventTransId;

        return [inventTrans.Qty ? CurrencyExchangeHelper::price(inventTrans.CostAmountPosted / inventTrans.Qty) : 0,
                abs(inventTrans.CostAmountPosted)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines line offset account.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// Line offset account.
    /// </returns>
    protected LedgerDimensionDefaultAccount getOffsetAccount(InventJournalTrans _inventJournalTrans)
    {
        InventTransPosting inventTransPosting;

        select OffsetLedgerDimension from inventTransPosting
            where inventTransPosting.ItemId                 == _inventJournalTrans.ItemId        &&
                  inventTransPosting.InventTransPostingType == InventTransPostingType::Financial &&
                  inventTransPosting.InventTransOrigin      == InventTransOriginJournalTrans::findInventTransOriginId(
                                                                    _inventJournalTrans.DataAreaId,
                                                                    _inventJournalTrans.JournalId,
                                                                    _inventJournalTrans.LineNum);

        return inventTransPosting.OffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes invoice section of the report.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    protected void initInvoiceSection(InventJournalTrans _inventJournalTrans)
    {
        XmlElement  xmlElement = xmlDocument.createElement(#InvoiceSection);
        InventTrans inventTrans, inventTransReceipt;
        boolean     firstRecord = true;
        TransDate   invoiceDate, receiptDate;
        InvoiceId   invoiceId;

        xmlElement.setAttribute(#WriteOffDate, strfmt("@GLS106745", _inventJournalTrans.TransDate));

        while select TableId from inventTrans
            where inventTrans.InventTransOrigin == InventTransOriginJournalTrans::findInventTransOriginId(_inventJournalTrans.dataAreaId, _inventJournalTrans.JournalId, _inventJournalTrans.LineNum)
               && inventTrans.Qty               < 0
               && inventTrans.ItemId            == _inventJournalTrans.ItemId
        join InvoiceId, DatePhysical, DateFinancial from inventTransReceipt
            where inventTransReceipt.InventDimId == inventTrans.InventDimId
               && inventTransReceipt.Qty         > 0
               && inventTransReceipt.ItemId      == inventTrans.ItemId
        {
            if (firstRecord)
            {
                receiptDate = inventTransReceipt.DatePhysical;
                invoiceDate = inventTransReceipt.DateFinancial;
                invoiceId   = inventTransReceipt.InvoiceId;
                firstRecord = false;
            }
            else
            {
                receiptDate = dateNull();
                invoiceDate = dateNull();
                invoiceId   = '';
                break;
            }
        }

        xmlElement.setAttribute(#InvoiceId,     invoiceId);
        xmlElement.setAttribute(#InvoiceDate,   strfmt("@GLS106745", invoiceDate));
        xmlElement.setAttribute(#DeliveryDate,  strfmt("@GLS106745", receiptDate));
        xmlElement.setAttribute(#ScrapId,       _inventJournalTrans.ScrapTypeId_RU);
        xmlElement.setAttribute(#ScrapName,     ReturnActionDefaults::find(ModuleInventPurchSales::Purch,
                                                                           _inventJournalTrans.ScrapTypeId_RU).Txt);

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
