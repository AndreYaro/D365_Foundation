<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAdaptorVisitorBOMGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCAdaptorVisitorBOMGeneration</c> class generates the bill of materials for a configured
/// product variant.
/// </summary>
class PcAdaptorVisitorBOMGeneration extends PCAdaptorVisitorProductionDocGeneration
{
    // generated BOM Id
    BOMId   generatedBOMId;

    PCGenerateBOMTableAndVersion    generateBOMTableAndVersion;
    PCGenerateBOMLine               generateBOMLine;

    PCConfigurationReleaseProductVariantFactory releaseProductVariantFactory;

    PCVariantConfiguration  rootVariantConfiguration;
    List                    releaseLegalEntities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmReleaseLegalEntities</Name>
				<Source><![CDATA[
    public List parmReleaseLegalEntities(List _releaseLegalEntities = releaseLegalEntities)
    {
        releaseLegalEntities = _releaseLegalEntities;

        return releaseLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addComponentInstanceInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add component instance information for bill of material generation.
    /// </summary>
    /// <param name="_componentName">
    /// A component name.
    /// </param>
    /// <param name="_adaptorComponent">
    /// A component instance record ID.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// An inventory dimension ID.
    /// </param>
    /// <param name="_bomId">
    /// A bill of material ID.
    /// </param>
    /// <param name="_isReusingConfiguration">
    /// A boolean value indicating if the component instance in reusing a configuration.
    /// </param>
    [SysObsolete('Please use addGenerateComponentInstanceInfo() instead.', false, 3\11\2021)]
    protected void addComponentInstanceInfo(
        PCName              _componentName,
        PCAdaptorComponent  _adaptorComponent,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        BOMId               _bomId,
        boolean             _isReusingConfiguration
    )
    {
        PCGenerateComponentInstanceInfo generateComponentInstanceInfo = PCGenerateComponentInstanceInfo::construct();

        generateComponentInstanceInfo.parmComponentName(_componentName);
        generateComponentInstanceInfo.parmItemId(_itemId);
        generateComponentInstanceInfo.parmInventDimId(_inventDimId);
        generateComponentInstanceInfo.parmBomId(_bomId);
        generateComponentInstanceInfo.parmIsReusingConfiguration(_isReusingConfiguration);

        generateComponentInstanceInfoCollection.addComponentInfo(_adaptorComponent, generateComponentInstanceInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGenerateComponentInstanceInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add component instance information for bill of material generation.
    /// </summary>
    /// <param name="_componentName">
    /// A component name.
    /// </param>
    /// <param name="_adaptorComponent">
    /// A component instance record ID.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// An inventory dimension ID.
    /// </param>
    /// <param name="_bomId">
    /// A bill of material ID.
    /// </param>
    /// <param name="_isReusingConfiguration">
    /// A boolean value indicating if the component instance is reusing a configuration.
    /// </param>
    /// <param name="_isIncludedInGeneration">
    /// A boolean value that indicates if the BOM line should be included into the configuration.
    /// </param>
    protected void addGenerateComponentInstanceInfo(
        PCName              _componentName,
        PCAdaptorComponent  _adaptorComponent,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        BOMId               _bomId,
        boolean             _isReusingConfiguration,
        boolean             _isIncludedInGeneration
    )
    {
        this.addComponentInstanceInfo(
            _componentName, 
            _adaptorComponent,
            _itemId,
            _inventDimId,
            _bomId,
            _isReusingConfiguration);

        if (_isIncludedInGeneration)
        {
            PCGenerateComponentInstanceInfo generateComponentInstanceInfo = generateComponentInstanceInfoCollection.getComponentInfo(_adaptorComponent);
            generateComponentInstanceInfo.parmIsIncludedInGeneration(_isIncludedInGeneration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReusableConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a reusable configuration for a component.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// An adapter component.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// An inventory dimension ID.
    /// </param>
    protected void createReusableConfiguration(PCAdaptorComponent _adaptorComponent, ItemId _itemId, InventDimId _inventDimId)
    {
        _adaptorComponent.createReuseConfiguration(_itemId, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBOMLinesForComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates BOM lines for a component.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// A component adapter.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_inventDim">
    /// An inventory dimension record.
    /// </param>
    /// <param name="_bomId">
    /// A BOM ID.
    /// </param>
    /// <param name="_includeInConfiguration">
    /// A Boolean value that indicates if the component should be included into the configuration; optional.
    /// </param>
    protected void generateBOMLinesForComponent(
        PCAdaptorComponent  _adaptorComponent,
        ItemId              _itemId,
        InventDim           _inventDim,
        BOMId               _bomId,
        boolean             _includeInConfiguration = true
        )
    {
        MapEnumerator       me;
        PCAdaptorBOMLine    adaptorBOMLine;

        PCContractNotNull::assertObject(_adaptorComponent, funcName());
        PCContractNotNull::assertRecord(_inventDim, funcName());

        generateBOMLine.parmAdaptorComponent(_adaptorComponent);

        //generate the contained BOM lines
        me = _adaptorComponent.getBOMLineEnumerator();

        while (me.moveNext())
        {
            adaptorBOMLine = me.currentValue();
            this.generateBOMLine(adaptorBOMLine, _inventDim, _bomId, _includeInConfiguration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a BOM line based on the specified BOM line adaptor.
    /// </summary>
    /// <param name = "_adaptorBOMLine">A BOM line adaptor.</param>
    /// <param name = "_inventDim">The inventory dimensions to use when generating the BOM line.</param>
    /// <param name = "_bomId">The BOM ID.</param>
    /// <param name = "_includeInConfiguration">true if the component should be included into the configuration; otherwise, false.</param>
    protected void generateBOMLine(PCAdaptorBOMLine _adaptorBOMLine, InventDim _inventDim, BOMId _bomId, boolean _includeInConfiguration)
    {
        var shouldBOMLineBeIncludedInGeneration = _includeInConfiguration && _adaptorBOMLine.includeInGeneration();

        if (!shouldBOMLineBeIncludedInGeneration)
        {
            return;
        }
                
        generateBOMLine.generate(
                            _bomId,
                            _adaptorBOMLine,
                            _inventDim,
                            PCRequirement::ProductRequirement,
                            false,
                            false,
                            shouldBOMLineBeIncludedInGeneration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneratedBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the generated bill of material ID.
    /// </summary>
    /// <returns>
    /// A bill of material ID.
    /// </returns>
    public BOMId getGeneratedBOMId()
    {
        return generatedBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory dimension ID of a root component.
    /// </summary>
    /// <returns>
    /// The inventory dimension ID.
    /// </returns>
    public InventDimId getRootInventDimId()
    {
        return supplyInventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootVariantConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the variant configuration of the root.
    /// </summary>
    /// <returns>The variant configuration of the root.</returns>
    public PCVariantConfiguration getRootVariantConfiguration()
    {
        return rootVariantConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        generateBOMTableAndVersion  = PCGenerateBOMTableAndVersion::construct();
        generateBOMLine             = PCGenerateBOMLine::construct();

        releaseProductVariantFactory = PCConfigurationReleaseProductVariantFactory::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductVariant</Name>
				<Source><![CDATA[
	/// <summary>
    /// Releases a product variant to each legal entity in its intercompany chain.
    /// </summary>
    /// <param name = "_adaptorComponent">A component adaptor.</param>
    /// <param name = "_demandInventDim">The dimensions of the demand.</param>
    /// <param name = "_inventQuantity">The inventory quantity.</param>
    /// <param name = "_issueDate">The issue date.</param>
    protected void releaseProductVariant(PCAdaptorComponent _adaptorComponent, InventDim _demandInventDim, InventQty _inventQuantity, TransDate _issueDate)
    {
        //Setup the release legal entities of the releaseProductVariantFactory before releasing the variant on them.
        releaseProductVariantFactory.parmReleaseLegalEntities(this.parmReleaseLegalEntities());
        releaseProductVariantFactory.parmSupplyInventDim(supplyInventDim);
        releaseProductVariantFactory.releaseCreatedProductVariant(_demandInventDim, _inventQuantity, _issueDate);
        
        _adaptorComponent.parmSupplyInventDim(releaseProductVariantFactory.parmSupplyInventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductVariant</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a product variant.
    /// </summary>
    /// <param name = "_adaptorComponent">A component adaptor.</param>
    /// <param name = "_itemId">An item ID.</param>
    /// <param name = "_demandInventDim">The dimensions of the demand.</param>
    protected void createProductVariant(PCAdaptorComponent _adaptorComponent, itemId _itemId, InventDim _demandInventDim)
    {
        EcoResConfigurationName configurationName = _adaptorComponent.getConfigurationName();

        releaseProductVariantFactory.createDistinctProductVariant(InventTable::find(_itemId), _demandInventDim, configurationName ? configurationName : _demandInventDim.configId);

        if (configurationName != '' && releaseProductVariantFactory.parmDemandInventDim().configId != configurationName)
        {
            warning(strFmt("@SCM:EcoResPCNomenclatureNotUnique", _itemId));
        }

        _adaptorComponent.parmDemandInventDim(releaseProductVariantFactory.parmDemandInventDim());

        _adaptorComponent.parmSupplyInventDim(releaseProductVariantFactory.parmDemandInventDim());

        _adaptorComponent.parmVariantConfiguration(releaseProductVariantFactory.parmVariantConfiguration());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBOM</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a BOM.
    /// </summary>
    /// <param name = "_adaptorComponent">A adaptor component.</param>
    /// <param name = "_itemId">An item ID.</param>
    /// <param name = "_includeInConfiguration">A Boolean value that indicates if the BOM line should be included into the configuration; optional.</param>
    /// <returns>The Id of the BOM.</returns>
    protected BOMId createBOM(PCAdaptorComponent _adaptorComponent, itemId _itemId, boolean _includeInConfiguration = true)
    {
        var componentBOMId = generateBOMTableAndVersion.generate(
                            _adaptorComponent.parmSupplyInventDim(),
                            modelName,
                            _adaptorComponent.getName(),
                            _itemId,
                            generateBOMVersion);

        this.generateBOMLinesForComponent(_adaptorComponent, _itemId, _adaptorComponent.parmSupplyInventDim(), componentBOMId, _includeInConfiguration);

        if (_adaptorComponent.isReuseEnabled())
        {
            this.createReusableConfiguration(_adaptorComponent, _itemId, _adaptorComponent.parmSupplyInventDim().InventDimId);
        }

        return componentBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRootComponentEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// End the visit of an instance of a root-component adapter.
    /// </summary>
    /// <param name="_rootComponent">
    /// An instance of the <c>PCAdaptorRootComponent</c> class.
    /// </param>
    public void visitRootComponentEnd(PCAdaptorRootComponent _rootComponent)
    {
        generateBOMTableAndVersion.approveGeneratedBoms(modelApprover);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRootComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a root-component adapter.
    /// </summary>
    /// <param name="_rootComponent">
    /// An instance of the <c>PCAdaptorRootComponent</c> class.
    /// </param>
    public void visitRootComponentStart(PCAdaptorRootComponent _rootComponent)
    {
        PCContractNotNull::assertObject(_rootComponent, funcName());

        //sets the infolog prefix, so the user can trace the error better
        setPrefix(_rootComponent.getName());
        generateBOMLine.parmAdaptorComponent(_rootComponent);

        boolean isReusingConfiguration = _rootComponent.reuseConfigurationExists(itemId, supplyInventDim.InventSiteId);

        if (!isReusingConfiguration)
        {
            this.createNewConfiguration(_rootComponent);
        }
        else
        {
            this.reuseExistingConfiguration(_rootComponent);
        }

        this.addGenerateComponentInstanceInfo(
            _rootComponent.getName(), 
            _rootComponent, 
            itemId, 
            supplyInventDim.inventDimId, 
            generatedBOMId, 
            isReusingConfiguration, 
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a product variant and a new configuration for the specified root component.
    /// </summary>
    /// <param name = "_rootComponent">The root component</param>
    protected void createNewConfiguration(PCAdaptorRootComponent _rootComponent)
    {
        this.createProductVariant(_rootComponent, itemId, demandInventDim);

        this.releaseProductVariant(_rootComponent, demandInventDim, rootInventQty, rootIssueDate);

        generatedBOMId = this.createBOM(_rootComponent, itemId);

        supplyInventDim = _rootComponent.parmSupplyInventDim();

        rootVariantConfiguration = _rootComponent.parmVariantConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reuseExistingConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reuses the existing configuration for the specified root component.
    /// </summary>
    /// <param name = "_rootComponent">The root component</param>
    protected void reuseExistingConfiguration(PCAdaptorRootComponent _rootComponent)
    {
        _rootComponent.parmIsConfigurationReusable(true);
        supplyInventDim = InventDim::find(_rootComponent.getReusableInventDimId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a sub-component adapter.
    /// </summary>
    /// <param name="_subComponent">
    /// An instance of the <c>PCAdaptorSubComponent</c> class.
    /// </param>
    public void visitSubComponentStart(PCAdaptorSubComponent _subComponent)
    {
        PCAdaptorComponent              adaptorComponent        = _subComponent.getComponent();
        PCAdaptorBOMLine                adaptorBOMLine          = _subComponent.getBOMLine();

        ItemId                          currentItemId;
        BOMId                           currentBomId;
        InventDimId                     inventDimId;
        InventDim                       currentInventDim;
        boolean                         isReusingConfiguration;

        PCName                          subComponentName = _subComponent.getName();

        PCGenerateComponentInstanceInfo parentGenerateComponentInstanceInfo;
        PCContractNotNull::assertObject(_subComponent, funcName());

        //sets the infolog prefix, so the user can trace the error better
        setPrefix(subComponentName);
        generateBOMLine.parmAdaptorComponent(_subComponent.parmParentComponent());

        parentGenerateComponentInstanceInfo = generateComponentInstanceInfoCollection.getComponentInfo(_subComponent.parmParentComponent());

        boolean isIncludedInConfiguration = parentGenerateComponentInstanceInfo.parmIsIncludedInGeneration();

        //Check if it is a sub-component and it has a template associated
        if ( _subComponent.getSubComponentType() == PCSubComponentType::SubComponent
			&& adaptorBOMLine != null)
        {
            if (adaptorBOMLine.getTemplateComponent())
            {
                PCTemplateFind templateFind = PCTemplateFind::constructForTargetedUsage(_subComponent.parmParentComponent(), adaptorBOMLine);
                currentItemId = templateFind.getBindingValueAsString(tableNum(BOM), fieldNum(BOM, ItemId));
            }
            else
            {
                currentItemId = _subComponent.getItemId();
            }

            this.checkItemIdForSubComponent(currentItemId);

            isReusingConfiguration = adaptorComponent.reuseConfigurationExists(currentItemId, supplyInventDim.InventSiteId);
            isIncludedInConfiguration = isIncludedInConfiguration && adaptorBOMLine.includeInGeneration();

            // Note: if a subcomponent is not reusable, then the parent component cannot be resuable by definition
            if (isReusingConfiguration)
            {
                currentInventDim = InventDim::find(adaptorComponent.getReusableInventDimId());

                // if the parent component is not part of a configuration reuse and this component is,
                // then we need to add a bom line to parent component's bom
                if (!parentGenerateComponentInstanceInfo.parmIsReusingConfiguration()
                    && (isIncludedInConfiguration))
                {
                    generateBOMLine.generate(
                                            parentGenerateComponentInstanceInfo.parmBomId(),
                                            adaptorBOMLine,
                                            currentInventDim,
                                            PCRequirement::SubComponent,
                                            true,
                                            true,
                                            isIncludedInConfiguration);
                }
            }
            else if (isIncludedInConfiguration)
            {
                InventDim subComponentDemandInventDim; 
                if (PcAdaptorVisitorBOMGenerationSubComponentConfigurationFlight::instance().isEnabled())
                {
                    subComponentDemandInventDim = supplyInventDim.data();
                }
                else
                {
                    subComponentDemandInventDim = supplyInventDim;
                }

                this.createProductVariant(adaptorComponent, currentItemId, subComponentDemandInventDim);

                //generate the BOM line for the parent
                inventDimId = generateBOMLine.generate(
                                                parentGenerateComponentInstanceInfo.parmBomId(),
                                                adaptorBOMLine,
                                                adaptorComponent.parmSupplyInventDim(),
                                                PCRequirement::SubComponent,
                                                true,
                                                false,
                                                isIncludedInConfiguration);

                currentInventDim = InventDim::find(inventDimId);

                currentBomId = this.createBOM(adaptorComponent, currentItemId, isIncludedInConfiguration);
            }

            // it does not matter that the bom id is blank for reuse, because if a parent is reusable then all its children are also reusable
            this.addGenerateComponentInstanceInfo(
                                          adaptorComponent.getName(),
										  adaptorComponent,
                                          currentItemId,
                                          currentInventDim.InventDimId,
                                          currentBomId,
                                          isReusingConfiguration,
                                          isIncludedInConfiguration);
            return;
        }
        else if ( _subComponent.getSubComponentType() == PCSubComponentType::UserRequirement )
        {
            if (!parentGenerateComponentInstanceInfo.parmIsReusingConfiguration()
                && (isIncludedInConfiguration))
            {
                this.generateBOMLinesForComponent(  adaptorComponent,
                                                parentGenerateComponentInstanceInfo.parmItemId(),
                                                InventDim::find(parentGenerateComponentInstanceInfo.parmInventDimId()),
                                                parentGenerateComponentInstanceInfo.parmBomId());
            }

            // user requirements will use the first parent sub component's information for bom and route generation
            generateComponentInstanceInfoCollection.addComponentInfo(adaptorComponent, parentGenerateComponentInstanceInfo);
        }
        else
        {
            throw error("@GLS130209");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCAdaptorVisitorBOMGeneration construct()
    {
        PCAdaptorVisitorBOMGeneration visitor = new PCAdaptorVisitorBOMGeneration();

        return visitor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>