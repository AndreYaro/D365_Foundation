<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_ProjectSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::Sales, NoYes::Yes)]
class SalesLineType_ProjectSales extends SalesLineType_Project
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, it will take the super() to check for other conditions
    /// </remarks>
    public boolean canBeInvoiced()
    {
        boolean ret;

        if (!ProjLineProperty::find(salesLine.ProjLinePropertyId).ToBeInvoiced)
        {
            ret = false;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line with the given <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record that is used to initialize the sales record.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price should be reset; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _performVariantValidation = false)
    {
        super(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);

        salesLine.setProjLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales-line along with its line property
    /// </summary>
    public void initValue()
    {
        super();

        salesLine.setProjLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConfirmDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the requested dates must be confirmed.
    /// </summary>
    /// <param name="_strategy">
    /// A <c>SalesConfirmDatesStrategy</c> object that contains specific logic to set confirmed dates.
    /// </param>
    /// <returns>
    /// True if the dates must be confirmed; otherwise, false.
    /// </returns>
    public boolean mustConfirmDates(SalesConfirmDatesStrategy   _strategy)
    {
        if (   _strategy
            && salesLine.SalesStatus == SalesStatus::Backorder)
        {
            return _strategy.mustSetConfirmedDates(salesLine);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete(boolean _interCompanyForce = false, boolean _mcrCancel = false)
    {
        boolean ret = super(_interCompanyForce);

        if (ret && salesLine.isLinkedToConfirmedPurchOrder())
        {
            ret = checkFailed(strFmt("@Proj:DeleteSalesOrderErrorConfirmedPO", salesLine.InventRefId));
        }

        // The cancelled sales order deletion is not allowed when a linked purhchase order is in open order or received state.
        if (ret && salesLine.SalesStatus == SalesStatus::Canceled)
        {
            boolean isLinkedToPO;
            PurchId purchId;

            [isLinkedToPO, purchId] = SalesLine::isLinkedProjectPOStatusOpenOrReceived(salesLine);

            if (isLinkedToPO)
            {
                ret = checkFailed(strFmt("@Proj:DeleteSalesOrderErrorItemReqPO", purchId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean     ctrlProjSalesOrder = true;

        boolean ret = super(_skipCreditLimitCheck);

        if (ret)
        {
            if (!salesLine.ProjId)
            {
                ret = checkFailed("@SYS74373");
            }
            else
            {
                ProjTable projTable = ProjTable::find(salesLine.ProjId);
                ctrlProjSalesOrder = projTable.status().ctrlSalesOrderTable();

                if (! ctrlProjSalesOrder)
                {
                    if (projTable.Header == true)
                    {
                        // Header Project
                        ret = checkFailed(strFmt("@SYS96612",projTable.ProjId));
                    }
                    else if (! projTable.type().custAccount())
                    {
                        // No customer account on project
                        ret = checkFailed("@SYS98240");
                    }
                    else
                    {
                        if (!projTable.isSalesOrderAllowedForMultipleFundingSources())
                        {
                            // Advanced Funded with multiple funding source
                            ret = checkFailed("@SYS138648");
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTableFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesTable</c> record initialized from the passed <c>ProjTable</c> record.
    /// </summary>
    /// <param name = "_projTable">
    /// The <c>ProjTable</c> record.
    /// </param>
    /// <returns>
    /// <c>SalesTable</c> record.
    /// </returns>
    [Replaceable]
    public SalesTable initSalesTableFromProjTable(ProjTable _projTable)
    {
        return _projTable.salesTable_SalesOrder(this.salesLine.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTableFromProjtable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesTable</c> record from the passed <c>ProjTable</c> record.
    /// </summary>
    /// <param name = "_projTable">
    /// The <c>ProjTable</c> record.
    /// </param>
    /// <returns>
    /// <c>SalesTable</c> record.
    /// </returns>
    protected SalesTable createSalesTableFromProjtable(ProjTable _projTable)
    {
        return _projTable.createSalesTable_sales(this.salesLine.CurrencyCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>