<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_CalcProdFlow_ClearOutsourcingWIP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCost_CalcProdFlow_ClearOutsourcingWIP</c> class represents the work item for clearing the WIP for services.
/// </summary>
/// <remarks>
///    For each production flow that must be backflush costed, a separate instance of this class will be
///    created to trigger it.
/// </remarks>
public class LeanCost_CalcProdFlow_ClearOutsourcingWIP extends LeanCost_CalcProdFlow_Single implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@CostManagement:Class_LeanCost_CalcProdFlow_ClearOutsourcingWIP";
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the WIP for services.
    /// </summary>
    protected void execute()
    {
        CostManagementInstrumentationLogger     instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(LeanCost_CalcProdFlow_ClearOutsourcingWIP));

        using (var backflushCostingActivityContext = instrumentationLogger.backflushCostingActivities().clearOutsourcingWIP(classStr(LeanCost_CalcProdFlow_ClearOutsourcingWIP), leanProductionFlowCostingRecId))
        {
            this.initLedgerVoucher();

            this.clearOutsourcingWIP();

            this.persistLedgerVoucherState();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLogger</Name>
				<Source><![CDATA[
    protected void initLogger()
    {
        logger = LeanCostLogger::newFromLeanProductionFlowCostingRecId(leanProductionFlowCostingRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistLog</Name>
				<Source><![CDATA[
    protected void persistLog()
    {
        ProdParameters parameters = ProdParameters::find();

        if (this.isInBatch()
            && parameters.LeanCostSplitLedgerVoucherTransactions
            && parameters.LeanCostEnableFullBatchParallelization)
        {
            logger.persistLog();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistLedgerVoucherState</Name>
				<Source><![CDATA[
    private void persistLedgerVoucherState()
    {
        LedgerVoucherPostPersistable ledgerVoucherPostPersistable = LedgerVoucher as LedgerVoucherPostPersistable;
        ledgerVoucherPostPersistable.persistState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerVoucher</c> class.
    /// </summary>
    protected void initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucherPostPersistable::newFromPersistedLedgerPostPersistable(leanProductionFlowCosting);

        // Initialize the indirect cost handling
        costUpd = LeanConversionCostUpd_CalcProdFlow_Outsourcing::newFromParameters(
            ledgerVoucher,
            leanProductionFlowReference,
            this.getLeanCostingFacade(),
            leanProductionFlowCosting.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>LeanCost_CalcProdFlow_ClearOutsourcingWIP</c> class.
    /// </summary>
    /// <param name="_leanCostingFacade">
    /// The instance of the <c>LeanCostingFacadeBase</c> class to use.
    /// </param>
    /// <returns>
    /// A new instance of the <c>LeanCost_CalcProdFlow_ClearOutsourcingWIP</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCost_CalcProdFlow_ClearOutsourcingWIP construct(LeanCostingFacadeBase _leanCostingFacade)
    {
        LeanCost_CalcProdFlow_ClearOutsourcingWIP leanCostCalcProdFlow = new LeanCost_CalcProdFlow_ClearOutsourcingWIP();
        leanCostCalcProdFlow.parmLeanCostingFacade(_leanCostingFacade);
        return leanCostCalcProdFlow;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>