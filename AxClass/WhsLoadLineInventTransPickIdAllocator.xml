<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLoadLineInventTransPickIdAllocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WhsLoadLineInventTransPickIdAllocator extends WhsInventTransPickIdAllocator
{
    private WHSLoadLineRefRecId loadLineRecId;
    private WhsLoadLineInventoryPickId pickId;
    private InventQty pickedQtyToAllocate;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadLineAndPickedQuantity</Name>
				<Source><![CDATA[
    internal static WhsLoadLineInventTransPickIdAllocator newFromLoadLineAndPickedQuantity(WHSLoadLine _loadLine, InventQty _pickedQty)
    {
        return WhsLoadLineInventTransPickIdAllocator::newFromLoadLineRecIdAndPickedQuantity(_loadLine.RecId, _pickedQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadLineRecIdAndPickedQuantity</Name>
				<Source><![CDATA[
    internal static WhsLoadLineInventTransPickIdAllocator newFromLoadLineRecIdAndPickedQuantity(WHSLoadLineRefRecId _loadLineRecId, InventQty _pickedQty)
    {
        WhsLoadLineInventTransPickIdAllocator pickIdAllocator = new WhsLoadLineInventTransPickIdAllocator();
        
        pickIdAllocator.loadLineRecId = _loadLineRecId;
        pickIdAllocator.pickedQtyToAllocate = _pickedQty;

        return pickIdAllocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePickIdAllocaton</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ListEnumerator executePickIdAllocaton(InventMovement _inventMovement, InventDimId _pickedInventDimId, InventQty _inventQty)
    {
        if (_inventQty > pickedQtyToAllocate)
        {
            error(strFmt("@WAX:UnableToAllocatePickIdForItemDim", _inventMovement.itemId(), InventDim::find(_pickedInventDimId).preFix()));
            throw error(strFmt("@WAX:PickIdErrorInsufficientQty", _inventQty, pickedQtyToAllocate));            
        }

        if (!pickId)
        {
            pickId = this.findOrCreatePickIdForLoadLineRecId(loadLineRecId, false);
        }

        pickedQtyToAllocate -= _inventQty;

        List pickIdList = new List(Types::Class); // of WhsLoadLineInventoryPickIdAllocation
        pickIdList.addEnd(new WhsLoadLineInventTransPickIdAllocation(pickId, _inventQty));

        return pickIdList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsAllocationComplete</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean determineIsAllocationComplete()
    {
        return pickedQtyToAllocate == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewAllocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initForNewAllocation()
    {
        pickId = '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>