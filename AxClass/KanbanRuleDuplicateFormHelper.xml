<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanRuleDuplicateFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanRuleDuplicateFormHelper</c> class provides the user interface handling logic.
/// </summary>
public class KanbanRuleDuplicateFormHelper extends KanbanRulesUIHelper
{
    KanbanRuleDuplicateFormMode formMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultReplaceValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default values for the form when in replacing mode.
    /// </summary>
    /// <param name="_replacedRuleData">
    /// An instance of the <c>LeanRuleData</c> class.
    /// </param>
    /// <returns>
    /// A container that contains the replaced rule ID and default valid from and to dates for the new rule.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container defaultReplaceValues(LeanRuleData _replacedRuleData)
    {
        LeanReplenishmentRuleId     replacedRuleId;
        LeanRuleActiveDateTime      validFrom = DateTimeUtil::minValue();
        LeanRuleActiveDateTime      validTo   = validFrom;

        if (formMode == KanbanRuleDuplicateFormMode::Replace)
        {
            KanbanRule replacedKanbanRule = _replacedRuleData.parmKanbanRule();
            replacedRuleId = replacedKanbanRule.RuleId;
            LeanCoverageKanbanRule replacedLeanCoverageKanbanRule = _replacedRuleData.parmLeanCoverageKanbanRule();
            Plan replacedRulePlan = _replacedRuleData.kanbanFlow().plan();
            LeanRuleActiveDateTime currentDateTime = DateTimeUtil::getSystemDateTime();

            if (replacedRulePlan)
            {
                if (   !replacedLeanCoverageKanbanRule.ValidTo
                    || replacedLeanCoverageKanbanRule.ValidTo == DateTimeUtil::maxValue())
                {
                    validFrom = currentDateTime;
                    validTo   = DateTimeUtil::maxValue();
                }
                else
                {
                    if (   replacedLeanCoverageKanbanRule.ValidTo < replacedRulePlan.ValidTo
                        || !replacedRulePlan.ValidTo)
                    {
                        validFrom = DateTimeUtil::addSeconds(replacedLeanCoverageKanbanRule.ValidTo,1);
                        validTo   = replacedRulePlan.ValidTo;
                    }
                    else
                    {
                        // check for next version
                        Plan nextRulePlan = Plan::findVersionNum(replacedRulePlan.PlanReference,replacedRulePlan.VersionNum+1);

                        if (nextRulePlan)
                        {
                            validFrom = nextRulePlan.ValidFrom;
                            validTo   = nextRulePlan.ValidTo;
                        }
                        else
                        {
                            validFrom = currentDateTime;
                            validTo   = replacedRulePlan.ValidTo;
                        }
                    }
                }
            }
        }

        return [replacedRuleId,validFrom,validTo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleDuplicateRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the duplication of a rule.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The object that holds the data of the rule to duplicate or replace.
    /// </param>
    /// <param name="_duplicationMode">
    ///    An enumeration value that indicates the execution mode.
    /// </param>
    /// <param name="_replacedRuleId">
    ///    The parameter that indicates the rule to use as a replaced rule.
    /// </param>
    /// <param name="_inventDim">
    ///    The user selected <c>InventDim</c> buffer.
    /// </param>
    /// <returns>
    ///    true if the operation was successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean handleDuplicateRule(LeanRuleData _leanRuleData,
                                            KanbanRuleDuplicateFormMode _duplicationMode,
                                            LeanReplenishmentRuleId _replacedRuleId,
                                            InventDim _inventDim)
    {
        LeanRuleData toBeReplacedRuleData, replacingLeanRuleData;

        // get the creation data that is to be used for the new (duplicated/replacing rule)
        replacingLeanRuleData = _leanRuleData.duplicate(true);
        replacingLeanRuleData.parmKanbanFlowWrapper(_leanRuleData.parmKanbanFlowWrapper());

        // handle the replacing case
        if (_duplicationMode == KanbanRuleDuplicateFormMode::Replace)
        {
            // first we find the rule that the user selected to replace with the duplicate
            toBeReplacedRuleData = KanbanRule::findRuleId(_replacedRuleId).ruleData();

            // we use its lean coverage (replacing rules share the same LeanCoverage record)
            replacingLeanRuleData.parmLeanCoverage(toBeReplacedRuleData.parmLeanCoverage());

            // adjust the FK to the coverage
            LeanCoverageKanbanRule replacingLeanCoverageKanbanRule = replacingLeanRuleData.parmLeanCoverageKanbanRule();
            replacingLeanCoverageKanbanRule.Coverage = replacingLeanRuleData.parmLeanCoverage().RecId;
        }
        else
        {
            // make sure the coverage dimensions are all set
            replacingLeanRuleData.parmInventDim(_inventDim);
            replacingLeanRuleData.status().onKanbanFlowChanged();

            // handle the InventDim in the duplicate case (for replacing we use the same one
            // as on the replaced rule, because of same leanCoverage)
            _inventDim.data(InventDim::findOrCreate(replacingLeanRuleData.parmInventDim()));

            LeanCoverage replacingLeanCoverage = replacingLeanRuleData.parmLeanCoverage();
            replacingLeanCoverage.InventDimId = _inventDim.InventDimId;

            // in case we create a duplicate, we just pass the original
            toBeReplacedRuleData = _leanRuleData;
        }

        // draw a new rule ID and set it
        LeanReplenishmentRuleId newRuleId = NumberSeq::newGetNumFromId(ProdParameters::numRefKanbanRuleId().NumberSequenceId).num();
        KanbanRule replacingKanbanRule = replacingLeanRuleData.parmKanbanRule();
        replacingKanbanRule.RuleId = newRuleId;

        // trigger the replacement
        return LeanRulesEngine::duplicateRule(toBeReplacedRuleData,
                                            replacingLeanRuleData,
                                            _duplicationMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormMode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRuleDuplicateFormMode parmFormMode(KanbanRuleDuplicateFormMode _kanbanRuleDuplicateFormMode = formMode)
    {
        formMode = _kanbanRuleDuplicateFormMode;

        return formMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckCoverageType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether mandatory data for the selected coverage type is provided.
    /// </summary>
    /// <returns>
    ///    true if the mandatory data for the selected coverage type is provided; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckCoverageType()
    {
        boolean result = this.ruleCheckKanbanFlowSelected() && leanRuleData;

        if (result)
        {
            LeanCoverage leanCoverage = leanRuleData.parmLeanCoverage();
            switch (leanCoverage.RuleCoverageType)
            {
                case LeanRuleCoverageType::Product:
                    result = leanCoverage.ItemId != '';
                    if (result)
                    {
                        KanbanRule kanbanRule = leanRuleData.parmKanbanRule();
                        if (kanbanRule.ReplenishmentStrategy == LeanReplenishmentStrategy::Fixed)
                        {
                            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(leanCoverage.ItemId);
                            ListEnumerator le = inventDimGroupSetup.ecoResProductDimGroupSetup().activeDimensionFields().getEnumerator();
                            InventDim inventDim = leanRuleData.parmInventDim();
                            while (   result
                                   && le.moveNext())
                            {
                                result = result && inventDim.(le.current()) != InventDim::emptyDimField(le.current());
                            }
                        }
                    }
                    break;
                case LeanRuleCoverageType::ProductFamily:
                    result = leanCoverage.AllocationId != '';
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckFormModeDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the form is in duplicate mode.
    /// </summary>
    /// <returns>
    ///    true if the form is in duplicate mode; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckFormModeDuplicate()
    {
        return formMode == KanbanRuleDuplicateFormMode::Duplicate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckFormModeReplace</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the form is in replace mode.
    /// </summary>
    /// <returns>
    ///    true if the form is in replace mode; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckFormModeReplace()
    {
        return formMode == KanbanRuleDuplicateFormMode::Replace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanFlowSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>KanbanFlow</c> object is already selected and valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>KanbanFlow</c> object is already selected and valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckKanbanFlowSelected()
    {
        return kanbanFlowWrapper ? kanbanFlowWrapper.isFlowDefined() : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static KanbanRuleDuplicateFormHelper construct()
    {
        return new KanbanRuleDuplicateFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns an instance of the <c>KanbanRuleDuplicateFormHelper</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>KanbanRuleDuplicateFormHelper</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanRuleDuplicateFormHelper newStandard()
    {
        return KanbanRuleDuplicateFormHelper::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
