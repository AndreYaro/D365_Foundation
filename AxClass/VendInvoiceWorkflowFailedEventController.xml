<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflowFailedEventController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceWorkflowFailedEventController</c> class is the <c>SysOperationServiceController</c> that logs a document event for an invoice that had a workflow fault.
/// </summary>
internal class VendInvoiceWorkflowFailedEventController extends SysOperationServiceController
{
    private ProcessExecutionSourceLinkItem processExecutionSourceLinkItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceWorkflowFailedEventController construct()
    {
        return new VendInvoiceWorkflowFailedEventController(
            classStr(VendInvoiceWorkflowFailedEventController),
            methodStr(VendInvoiceWorkflowFailedEventController, run),
            SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    internal void initProcessExecutionSourceLinkItem(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        processExecutionSourceLinkItem = ProcessExecutionSourceLinkItem::newFromProcessScheduleWorkItemAndStatus(
            _processScheduleWorkItem,
            ProcessExecutionSourceStatus::Success);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RecIdCount invoiceCount;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        try
        {
            DocumentEventRequestDocumentsTmp documentEventRequestDocumentsTmp = VendInvoiceWorkflowFailedEventSearcher::findAll();

            select count(RecId) from documentEventRequestDocumentsTmp;

            invoiceCount = documentEventRequestDocumentsTmp.RecId;

            if (invoiceCount > 0)
            {
                DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
                documentEventLogRequest.eventEnumId = enumNum(VendInvoiceWorkflowStatusEvent);
                documentEventLogRequest.eventEnumValue = VendInvoiceWorkflowStatusEvent::Failed;
                documentEventLogRequest.sourceTableId = tableNum(VendInvoiceInfoTable);

                // Prepare a set-based insert.
                documentEventLogRequest.requestDocumentsTmp = documentEventRequestDocumentsTmp;
                documentEventLogRequest.sourceRecId = 0;

                DocumentEventLog::logDocumentEvent(documentEventLogRequest);

                this.logProcessAutomationResult(invoiceCount);
            }
        }
        catch (errorException)
        {
            this.logExceptionTelemetry(errorException, funcName());
        }
        catch
        {
            this.logProcessAutomationResult(0, Exception::Error);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessAutomationResult</Name>
				<Source><![CDATA[
    private void logProcessAutomationResult(RecIdCount _invoiceCount, Exception _exception = Exception::Info)
    {
        try
        {
            if (!processExecutionSourceLinkItem || !processExecutionSourceLinkItem.parmExecutionId())
            {
                this.initProcessExecutionSourceLinkItem(this.getContract());
            }

            processExecutionSourceLinkItem.parmHeader("@AccountsPayable:VendInvoiceWorkflowFailedEventTask");
            processExecutionSourceLinkItem.parmMessage(strFmt("@AccountsPayable:VendInvoiceWorkflowFailedEventProcessAutomationMessage", _invoiceCount));
            processExecutionSourceLinkItem.parmSourceTableId(tableNum(VendInvoiceInfoTable));

            ProcessExecutionId executionId = processExecutionSourceLinkItem.parmExecutionId();

            // Search for an existing source link record for this invoice failure run
            ProcessExecutionSourceLink processExecutionSourceLink;

            select firstonly processExecutionSourceLink
                order by processExecutionSourceLink.RecId desc
                where processExecutionSourceLink.ExecutionId == executionId
                    && processExecutionSourceLink.RefTableId == tableNum(VendInvoiceInfoTable);

            // If a source link record already exists for this invoice failure logging process,
            // update the existing source link
            if (processExecutionSourceLink)
            {
                processExecutionSourceLink =
                    ProcessExecutionSourceLink::updateSourceLink(processExecutionSourceLink.RecId, processExecutionSourceLinkItem);
            }
            else
            {
                // If no source link record exists for this invoice failure logging process, create a new one
                processExecutionSourceLink = ProcessExecutionSourceLink::insertSourceLink(processExecutionSourceLinkItem);
            }

            // Insert a new message log entry for the source link record
            ProcessExecutionMessageLog::insertMessage(
                ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(
                    processExecutionSourceLink.RecId,
                    _exception,
                    processExecutionSourceLinkItem.parmMessage()));
        }
        catch
        {
            // Ignore any exceptions. Refer to Process Automation telemetry.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private ProcessScheduleWorkItem getContract()
    {
        ProcessScheduleWorkItem processScheduleWorkItem = ProcessScheduleWorkItem::construct();

        // The only use case of this check is to allow unit tests that run outside of the Batch.
        if (this.isInBatch())
        {
            processScheduleWorkItem = this.getDataContractInfoObject().dataContractObject() as ProcessScheduleWorkItem;
        }

        return processScheduleWorkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExceptionTelemetry</Name>
				<Source><![CDATA[
    private void logExceptionTelemetry(Microsoft.Dynamics.Ax.Xpp.ErrorException _errorException, MethodName _methodName)
    {
        VendInstrumentation::logTelemetry(
            VendInvoicePostTaskConstants::InstrumentationNamespace,
            this.toString(),
            _methodName,
            this.toString(),
            strFmt("%1", _errorException.ToString()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>