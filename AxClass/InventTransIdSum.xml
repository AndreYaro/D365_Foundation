<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransIdSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class  InventTransIdSum
{
    InventTransOriginId     transOriginId;
    InventSum               inventSum;
    boolean                 totalsHasBeenCalculated;

    InventQty               purchased;
    InventQty               sold;

    boolean                 perChildType;
    InventTransChildType    childType;
    InventTransChildRefId   childRefId;

    TransDate               lastPackingSlipCalcDateAfter;
    InventQty               lastPackingSlipCalcQty;

    boolean                 filterDimensions;       //if no active inventDimParmCriteria fields are selected, improve performance by not joining inventDim.
    InventDim               inventDimCriteria;
    InventDimParm           inventDimParmCriteria;

    PdsCWInventQty          cwPurchased;
    PdsCWInventQty          cwSold;
    PdsCWInventQty          lastPackingSlipCalcCWQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTransToTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified <c>InventTrans</c> record to the internal counters.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to be added.
    /// </param>
    public void addInventTransToTotals(InventTrans _inventTrans)
    {
        if (_inventTrans.StatusReceipt == StatusReceipt::Purchased)
        {
            purchased += _inventTrans.Qty;
            cwPurchased += _inventTrans.PdsCWQty;
        }
        else if (_inventTrans.StatusIssue   == StatusIssue::Sold)
        {
            sold += _inventTrans.Qty;
            cwSold += _inventTrans.PdsCWQty;
        }
        else
        {
            inventSum.addInventTransQtyOnSum(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>arrived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity with status arrived.
    /// </summary>
    /// <returns>
    ///    The quantity with status arrived.
    /// </returns>
    public InventQtyArrived arrived()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.Arrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and stores the results that are shown in internal variables.
    /// </summary>
    public void calcSum()
    {
        this.clearTotals();
        this.calcSumImplementation();

        totalsHasBeenCalculated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSumImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and stores the results that are shown in internal variables.
    /// </summary>
    [Replaceable]
    protected void calcSumImplementation()
    {
        InventTrans     inventTrans;
        InventDim       inventDimTest;

        if (filterDimensions)
        {
            while select sum(Qty), sum(PdsCWQty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where inventTrans.InventTransOrigin     == transOriginId
                   && (inventTrans.TransChildType       == childType    || !perChildType)
                   && (inventTrans.TransChildRefId      == childRefId   || !perChildType || !childRefId)
                #InventDimExistsJoin(inventTrans.inventDimId, inventDimTest, inventDimCriteria, inventDimParmCriteria)
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
        else
        {
            while select sum(Qty), sum(PdsCWQty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where inventTrans.InventTransOrigin     == transOriginId
                   && (inventTrans.TransChildType       == childType    || !perChildType)
                   && (inventTrans.TransChildRefId      == childRefId   || !perChildType || !childRefId)
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets internal counters.
    /// </summary>
    public void clearTotals()
    {
        inventSum.clear();
        purchased                       = 0;
        sold                            = 0;
        lastPackingSlipCalcQty          = 0;
        lastPackingSlipCalcDateAfter    = dateNull();
        totalsHasBeenCalculated = false;
        cwPurchased                     = 0;
        cwSold                          = 0;
        lastPackingSlipCalcCWQty        = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deducted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity with status deducted.
    /// </summary>
    /// <returns>
    ///    The quantity with status deducted.
    /// </returns>
    public InventQty deducted()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.Deducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity which has not been physically updated yet.
    /// </summary>
    /// <returns>
    ///    The remaining quantity to be physically updated.
    /// </returns>
    public InventQty estimated()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.Ordered
              +inventSum.Arrived
              -inventSum.ReservPhysical
              -inventSum.ReservOrdered
              -inventSum.OnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity that remains to be issued.
    /// </summary>
    /// <returns>
    ///    The quantity that remains to be issued.
    /// </returns>
    public InventQty estimatedIssue()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.OnOrder
               -inventSum.ReservOrdered
               -inventSum.ReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity remaining to be received.
    /// </summary>
    /// <returns>
    ///    The quantity remaining to be received.
    /// </returns>
    public InventQty estimatedReceipt()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return  inventSum.Ordered
               +inventSum.Arrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the net quantity which has been financially updated.
    /// </summary>
    /// <returns>
    ///    The quantity which has been financially updated.
    /// </returns>
    public InventQty financial()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return purchased + sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the total quantity being issued.
    /// </summary>
    /// <returns>
    ///    The quantity being issued.
    /// </returns>
    public InventQty issue()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return  sold
               -inventSum.Deducted
               -inventSum.Picked
               -inventSum.ReservPhysical
               -inventSum.ReservOrdered
               -inventSum.OnOrder
               -inventSum.QuotationIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCalcSOReturnQtySum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total returned quantity for a <c>SalesLine</c> table record.
    /// </summary>
    /// <returns>
    /// The total returned quantity for a <c>SalesLine</c> table record.
    /// </returns>
    InventQty mcrCalcSOReturnQtySum()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventQty           totalReturned = 0;

        select sum(Qty) from inventTrans
            where inventTrans.ReturnInventTransOrigin == transOriginId
            exists join inventTransOrigin
                where inventTransOrigin.RecId              == inventTrans.InventTransOrigin
                   && inventTransOrigin.ReferenceCategory  == InventTransType::Sales;

        totalReturned = inventTrans.qty;

        return totalReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(InventTransOriginId _transOriginId)
    {
        transOriginId    = _transOriginId;
        perChildType     = false;
        childType        = InventTransChildType::None;
        childRefId       = '';
        filterDimensions = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity on order.
    /// </summary>
    /// <returns>
    ///    The quantity on order.
    /// </returns>
    public InventQty onOrder()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.OnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity ordered.
    /// </summary>
    /// <returns>
    ///    The quantity ordered.
    /// </returns>
    public InventQty ordered()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.Ordered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildRefId</Name>
				<Source><![CDATA[
        protected InventTransChildRefId parmChildRefId(InventTransChildRefId _childRefId = childRefId)
    {
        childRefId = _childRefId;

        return childRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildType</Name>
				<Source><![CDATA[
        protected InventTransChildType parmChildType(InventTransChildType _childType = childType)
    {
        childType = _childType;

        return childType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
        public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmCriteria</Name>
				<Source><![CDATA[
        public InventDimParm parmInventDimParmCriteria(InventDimParm _inventDimParmCriteria = inventDimParmCriteria)
    {
        inventDimParmCriteria = _inventDimParmCriteria;
        filterDimensions      = !inventDimParmCriteria.isAllFlagNo();

        return inventDimParmCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerChildType</Name>
				<Source><![CDATA[
        protected boolean parmPerChildType(boolean _perChildType = perChildType)
    {
        perChildType = _perChildType;

        return perChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransOriginId</Name>
				<Source><![CDATA[
        public InventTransOriginId parmTransOriginId(InventTransOriginId _transOriginId = transOriginId)
    {
        transOriginId = _transOriginId;

        return transOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWArrived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves catch weight arrived quantity.
    /// </summary>
    /// <returns>
    /// The Catch weight arrived quantity.
    /// </returns>
    public PdsCWArrived pdsCWArrived()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWArrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDeducted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity with status deducted.
    /// </summary>
    /// <returns>
    /// The Catch weight deducted quantity.
    /// </returns>
    public PdsCWInventQty pdsCWDeducted()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWDeducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDlvRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight remaining quantity.
    /// </summary>
    /// <returns>
    /// The catch weight delivery remainder quantity.
    /// </returns>
    public PdsCWInventQty pdsCWDlvRemain()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWOnOrder - inventSum.PdsCWPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity which has not been physically updated yet.
    /// </summary>
    /// <returns>
    /// The catch weight estimated quantity.
    /// </returns>
    public PdsCWInventQty pdsCWEstimated()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWOrdered + inventSum.PdsCWArrived
                - inventSum.PdsCWReservPhysical - inventSum.PdsCWReservOrdered - inventSum.PdsCWOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWEstimatedIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity that remains to be issued.
    /// </summary>
    /// <returns>
    /// The catch weight estimated issue quantity.
    /// </returns>
    public PdsCWInventQty  pdsCWEstimatedIssue()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWOnOrder  - inventSum.PdsCWReservOrdered  - inventSum.PdsCWReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWEstimatedReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity remaining to be received.
    /// </summary>
    /// <returns>
    /// The catch weight estimated receipt quantity.
    /// </returns>
    public PdsCWInventQty pdsCWEstimatedReceipt()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWOrdered + inventSum.PdsCWArrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the net catch weight quantity which has been financially updated.
    /// </summary>
    /// <returns>
    /// The catch weight financial quantity.
    /// </returns>
    public PdsCWInventQty  pdsCWFinancial()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return cwPurchased + cwSold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the total catch weight quantity being issued.
    /// </summary>
    /// <returns>
    /// The catch weight issue quantity.
    /// </returns>
    public PdsCWInventQty pdsCWIssue()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return cwSold
                - inventSum.PdsCWDeducted
                - inventSum.PdsCWPicked
                - inventSum.PdsCWReservPhysical
                - inventSum.PdsCWReservOrdered
                - inventSum.PdsCWOnOrder
                - inventSum.PdsCWQuotationIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity on order.
    /// </summary>
    /// <returns>
    /// The catch weight on order quantity.
    /// </returns>
    public PdsCWInventQty pdsCWOnOrder()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity ordered.
    /// </summary>
    /// <returns>
    /// The catch weight ordered quantity.
    /// </returns>
    public PdsCWInventQty pdsCWOrdered()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity that has been packing slip updated, but not yet
    /// financially updated.
    /// </summary>
    /// <returns>
    /// The catch weight physical quantity.
    /// </returns>
    public PdsCWInventQty pdsCWPhysical()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWDeducted + inventSum.PdsCWReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPhysicalAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity which has been packing slip updated after a specified date, but not yet financially updated.
    /// </summary>
    /// <param name="_transDate">
    /// The date after which the packing slip must have been created.
    /// </param>
    /// <returns>
    /// The catch weight quantity which has been packing slip updated.
    /// </returns>
    public PdsCWInventQty pdsCWPhysicalAfterDate(TransDate   _transDate)
    {
        this.physicalAfterDate(_transDate);

        return lastPackingSlipCalcCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPhysicalInventNotFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity which has affected physical inventory, but has not
    /// yet been financially updated.
    /// </summary>
    /// <returns>
    /// The physical catch weight quantity which has not been financially updated.
    /// </returns>
    public PdsCWInventQty pdsCWPhysicalInventNotFinancial()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return  inventSum.PdsCWRegistered
               +inventSum.PdsCWReceived
               -inventSum.PdsCWPicked
               -inventSum.PdsCWDeducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity picked.
    /// </summary>
    /// <returns>
    /// The catch weight picked quantity.
    /// </returns>
    public PdsCWPicked pdsCWPicked()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPurchased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity purchased.
    /// </summary>
    /// <returns>
    /// The catch weight purchased quantity.
    /// </returns>
    public PdsCWInventQty pdsCWPurchased()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return cwPurchased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight quotation quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quotation quantity.
    /// </returns>
    public PdsCWInventQty pdsCWQuotation()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWQuotationReceipt - inventSum.PdsCWQuotationIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQuotationIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity to be issued on quotation.
    /// </summary>
    /// <returns>
    /// The catch weight quotation issue quantity.
    /// </returns>
    public PdsCWInventQty pdsCWQuotationIssue()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWQuotationIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQuotationReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity to be received on quotation.
    /// </summary>
    /// <returns>
    /// The catch weight quotation receipt quantity.
    /// </returns>
    public PdsCWInventQty pdsCWQuotationReceipt()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWQuotationReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity that is being received.
    /// </summary>
    /// <returns>
    /// The catch weight receipt quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReceipt()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return cwPurchased
                + inventSum.PdsCWReceived
                + inventSum.PdsCWRegistered
                + inventSum.PdsCWArrived
                + inventSum.PdsCWOrdered
                + inventSum.PdsCWQuotationReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity with status received.
    /// </summary>
    /// <returns>
    /// The catch weight received quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReceived()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity registered.
    /// </summary>
    /// <returns>
    /// The catch weight registered quantity.
    /// </returns>
    public PdsCWRegistered pdsCWRegistered()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity currently reserved.
    /// </summary>
    /// <returns>
    /// The catch weight reserved quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserved()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWReservOrdered - inventSum.PdsCWReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity with a reserve ordered status.
    /// </summary>
    /// <returns>
    /// The catch weight reserved ordered quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveOrdered()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the catch weight quantity with a status of physical reserved.
    /// </summary>
    /// <returns>
    /// The catch weight reserved physical quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReservPhysical()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.PdsCWReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight sold quantity.
    /// </summary>
    /// <returns>
    /// The catch weight sold quantity.
    /// </returns>
    public PdsCWInventQty pdsCWSold()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return cwSold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWWMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight WMS quantity.
    /// </summary>
    /// <returns>
    /// The catch weight WMS quantity.
    /// </returns>
    public PdsCWInventQty pdsCWWMS()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.PdsCWRegistered - inventSum.PdsCWPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sold quantity.
    /// </summary>
    /// <returns>
    /// The sold quantity.
    /// </returns>
    public InventQty pdsSold()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity which has been packing slip updated, but not yet financially
    ///    updated.
    /// </summary>
    /// <returns>
    ///    The quantity which has been packing slip updated.
    /// </returns>
    public InventQty physical()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.Deducted +
                inventSum.Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the quantity that has been packing slip updated after a specified date, but
    /// not yet financially updated.
    /// </summary>
    /// <param name="_transDate">
    /// The date after the packing slip must be created.
    /// </param>
    /// <returns>
    /// The quantity which has been packing slip updated.
    /// </returns>
    public InventQty physicalAfterDate(TransDate _transDate)
    {
        InventTrans     inventTrans;
        InventDim       inventDimTest;

        if (_transDate && lastPackingSlipCalcDateAfter == _transDate)
        {
            return lastPackingSlipCalcQty;
        }

        if (filterDimensions)
        {
            select sum(Qty)
                , sum(PdsCWQty)
                from inventTrans
                where inventTrans.InventTransOrigin     == transOriginId
                   &&(inventTrans.TransChildType        == childType    || !perChildType)
                   &&(inventTrans.TransChildRefId       == childRefId   || !perChildType)
                   && inventTrans.DatePhysical           > _transDate
                   && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
                   || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted))
            #InventDimExistsJoin(inventTrans.inventDimId, inventDimTest, inventDimCriteria, inventDimParmCriteria);
        }
        else
        {
            select sum(Qty)
                , sum(PdsCWQty)
                from inventTrans
                where inventTrans.InventTransOrigin     == transOriginId
                   &&(inventTrans.TransChildType        == childType    || !perChildType)
                   &&(inventTrans.TransChildRefId       == childRefId   || !perChildType)
                   && inventTrans.DatePhysical           > _transDate
                   && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
                   || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted));
        }

        lastPackingSlipCalcQty       = inventTrans.Qty;
        lastPackingSlipCalcDateAfter = _transDate;
        lastPackingSlipCalcCWQty     = inventTrans.PdsCWQty;

        return lastPackingSlipCalcQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity which has affected physical inventory.
    /// </summary>
    /// <returns>
    ///    The physical quantity.
    /// </returns>
    public InventQty physicalInvent()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return  inventSum.Registered
               +inventSum.Received
               -inventSum.Picked
               -inventSum.Deducted
               +purchased
               +sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalInventNotFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity which has affected physical inventory, but has not yet been
    ///    financially updated.
    /// </summary>
    /// <returns>
    ///    The physical quantity which has not been financially updated.
    /// </returns>
    public InventQty physicalInventNotFinancial()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return  inventSum.Registered
               +inventSum.Received
               -inventSum.Picked
               -inventSum.Deducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>picked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity picked.
    /// </summary>
    /// <returns>
    ///    The quantity picked.
    /// </returns>
    public InventQtyPicked picked()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity purchased.
    /// </summary>
    /// <returns>
    ///    The quantity purchased.
    /// </returns>
    public InventQty purchased()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return purchased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity to be issued on quotation.
    /// </summary>
    /// <returns>
    ///    The quantity to be issued.
    /// </returns>
    public InventQty quotationIssue()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.QuotationIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity to be received on quotation.
    /// </summary>
    /// <returns>
    ///    The quantity to be received.
    /// </returns>
    public InventQty quotationReceipt()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.QuotationReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity being received.
    /// </summary>
    /// <returns>
    ///    The quantity being received.
    /// </returns>
    public InventQty receipt()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return purchased +
               inventSum.Received +
               inventSum.Registered +
               inventSum.Arrived +
               inventSum.Ordered  +
               inventSum.QuotationReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>received</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity with status received.
    /// </summary>
    /// <returns>
    ///    The quantity with status received.
    /// </returns>
    public InventQty received()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity registered.
    /// </summary>
    /// <returns>
    ///    The quantity registered.
    /// </returns>
    public InventQtyRegistered registered()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return inventSum.Registered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity currently reserved.
    /// </summary>
    /// <returns>
    ///    The reserved quantity.
    /// </returns>
    public InventQty reserved()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return  -inventSum.ReservOrdered
                -inventSum.ReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity with status <c>reservOrdered</c>.
    /// </summary>
    /// <returns>
    ///    The quantity with status <c>reservOrdered</c>.
    /// </returns>
    public InventQty reserveOrdered()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.ReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity with status the <c>reservPhysical</c> value.
    /// </summary>
    /// <returns>
    ///    The quantity with status the <c>reservPhysical</c> value.
    /// </returns>
    public InventQty reservPhysical()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return -inventSum.ReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the internal counters for the specified status with the specified quantity.
    /// </summary>
    /// <param name = "_inventTrans">An <c>InventTrans</c> object.</param>
    /// <param name = "_reverseQty">true if the quantity should be considered reversely; otherwise, false.</param>
    protected void updateTotals(
        InventTrans _inventTrans, 
        boolean     _reverseQty)
    {
        this.update(_inventTrans.StatusReceipt, 
            _inventTrans.StatusIssue, 
            _reverseQty ? -_inventTrans.Qty : _inventTrans.Qty,
            _reverseQty ? -_inventTrans.PdsCWQty : _inventTrans.PdsCWQty
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets new status for the <c>inventTrans</c> record and update internal counters.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to be updated
    /// </param>
    /// <param name="_statusReceipt">
    ///    The new value for the <c>StatusReceipt</c> record.
    /// </param>
    /// <param name="_statusIssue">
    ///    The new value for the <c>StatusIssue</c> record.
    /// </param>
    public void setInventTransStatus(
        InventTrans   _inventTrans,
        StatusReceipt _statusReceipt,
        StatusIssue   _statusIssue)
    {
        const boolean reverseQty = true;

        if (_inventTrans.RecId)
        {
            this.updateTotals(_inventTrans, reverseQty);
        }

        _inventTrans.StatusReceipt  = _statusReceipt;
        _inventTrans.StatusIssue    = _statusIssue;

        this.updateTotals(_inventTrans, !reverseQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTransBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>InventTrans</c> buffer.
    /// </summary>
    /// <param name="_statusReceipt">
    /// The <c>StatusReceipt</c> value to be adjusted.
    /// </param>
    /// <param name="_statusIssue">
    /// The <c>StatusIssue</c> value to be adjusted.
    /// </param>
    /// <param name="_qty">
    /// The quantity to adjust.
    /// </param>
    /// <param name="_pdsCWQty">
    /// The catch weight quantity to adjust.
    /// </param>
    /// <returns>An <c>InventTrans</c> buffer.</returns>
    protected InventTrans initializeInventTransBuffer(
        StatusReceipt _statusReceipt,
        StatusIssue   _statusIssue,
        InventQty     _qty
        , InventQty   _pdsCWQty)
    {
        InventTrans inventTrans;

        inventTrans.StatusIssue     = _statusIssue;
        inventTrans.StatusReceipt   = _statusReceipt;
        inventTrans.Qty             = _qty;
        inventTrans.PdsCWQty        = _pdsCWQty;

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the internal counters for the specified status with the specified quantity.
    /// </summary>
    /// <param name="_statusReceipt">
    /// The <c>StatusReceipt</c> value to be adjusted.
    /// </param>
    /// <param name="_statusIssue">
    /// The <c>StatusIssue</c> value to be adjusted.
    /// </param>
    /// <param name="_qty">
    /// The quantity to adjust.
    /// </param>
    /// <param name="_pdsCWQty">
    /// The catch weight quantity to adjust.
    /// </param>
    public void update(
        StatusReceipt _statusReceipt,
        StatusIssue   _statusIssue,
        InventQty     _qty
        , InventQty   _pdsCWQty = 0
        )
    {
        InventTrans inventTrans = this.initializeInventTransBuffer(_statusReceipt, _statusIssue, _qty, _pdsCWQty);

        this.addInventTransToTotals(inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and returns the quantity which has affected physical inventory and has not been
    ///    financially or physically updated.
    /// </summary>
    /// <returns>
    ///    The physical quantity that has not been financially or physically updated.
    /// </returns>
    public InventQty wms()
    {
        if (!totalsHasBeenCalculated)
        {
            this.calcSum();
        }

        return  inventSum.Registered
               -inventSum.Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>InventTransIdSum</c> class based on the specified transaction
    /// originator.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// The ID of the transaction originator to create the instance
    /// </param>
    /// <returns>
    /// New instance of the <c>InventTransIdSum</c> class.
    /// </returns>
    public static InventTransIdSum construct(
        InventTransOriginId _inventTransOriginId)
    {
        return new InventTransIdSum(_inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransIdSum</c> class for a given inventory movement based on specified parameters.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_perChildType">
    /// true if the result should be calculated for the specified child type and reference; otherwise, false.
    /// </param>
    /// <param name="_childType">
    /// The type of the inventory reference.
    /// </param>
    /// <param name="_childRefId">
    /// The ID of the inventory reference.
    /// </param>
    /// <returns>
    /// A new instance of the class
    /// </returns>
    public static InventTransIdSum newParameters(
        InventTransOriginId     _transOriginId,
        boolean                 _perChildType,
        InventTransChildType    _childType,
        InventTransChildRefId   _childRefId)
    {
        InventTransIdSum    inventTransIdSum = InventTransIdSum::newTransOriginId(_transOriginId);

        inventTransIdSum.parmPerChildType(_perChildType);
        inventTransIdSum.parmChildType(_childType);
        inventTransIdSum.parmChildRefId(_childRefId);

        return inventTransIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransIdChildType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransIdSum</c> class for a given inventory movement based on specified parameters.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_childType">
    /// The type of the inventory reference.
    /// </param>
    /// <param name="_childRefId">
    /// The ID of the inventory reference.
    /// </param>
    /// <returns>
    /// A new instance of the class
    /// </returns>
    public static InventTransIdSum newTransIdChildType(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType,
        InventTransChildRefId   _childRefId)
    {
        InventTransIdSum    inventTransIdSum = InventTransIdSum::newTransOriginId(_transOriginId);

        inventTransIdSum.parmPerChildType(true);
        inventTransIdSum.parmChildType(_childType);
        inventTransIdSum.parmChildRefId(_childRefId);

        return inventTransIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransIdNoChildType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransIdSum</c> class for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// A new instance of the class
    /// </returns>
    /// <remarks>
    /// Only includes transactions without inventory reference.
    /// </remarks>
    public static InventTransIdSum newTransIdNoChildType(InventTransOriginId _transOriginId)
    {
        InventTransIdSum    inventTransIdSum = InventTransIdSum::newTransOriginId(_transOriginId);

        inventTransIdSum.parmPerChildType(true);
        inventTransIdSum.parmChildType(InventTransChildType::None);

        return inventTransIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransIdSum</c> class for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTransIdSum</c> class.
    /// </returns>
    public static InventTransIdSum newTransOriginId(InventTransOriginId _transOriginId)
    {
        return new InventTransIdSum(_transOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginIdDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransIdSum</c> class for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    An <c>InventDim</c> record used to limit the inventory transactions to be included in the calculation.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    ///    An <c>InventDimParm</c> record used to limit the inventory transactions to be included in the calculation.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTransIdSum</c> class.
    /// </returns>
    public static InventTransIdSum newTransOriginIdDimension(
        InventTransOriginId _transOriginId,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParmCriteria)
    {
        InventTransIdSum    inventTransIdSum = InventTransIdSum::newTransOriginId(_transOriginId);

        inventTransIdSum.parmInventDimCriteria(_inventDimCriteria);
        inventTransIdSum.parmInventDimParmCriteria(_inventDimParmCriteria);

        return inventTransIdSum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>