<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJobStatusTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgJobStatusTransaction</c> class implements <c>JmgIJobStatus</c> to provide methods required to control jobs in shop floor.
/// </summary>
internal final class JmgJobStatusTransaction implements JmgIJobStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateStartQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProductQuantity calculateStartQty(JmgJobId _jobId)
    {
        ProductQuantity startQty;

        startQty = (select firstonly sum(QtyStartup) from jmgStampJournalTrans
                    where jmgStampJournalTrans.JobId == _jobId).QtyStartup;

        startQty += (select firstonly sum(QtyStartup) from jmgStampTrans
                    where jmgStampTrans.JobId == _jobId).QtyStartup;

        return startQty;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStartedQtyByWorker</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProductQuantity calculateStartedQtyByWorker(JmgJobId _jobId, JmgWorkerRecId _worker)
    {
        ProductQuantity startQty;

        startQty = (select firstonly sum(QtyStartup) from jmgStampJournalTrans
                    where jmgStampJournalTrans.JobId  == _jobId 
                       && jmgStampJournalTrans.Worker == _worker).QtyStartup;

        startQty += (select firstonly sum(QtyStartup) from jmgStampTrans
                    where jmgStampTrans.JobId  == _jobId
                       && jmgStampTrans.Worker == _worker).QtyStartup;

        return startQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePdsCWStartedQtyByWorker</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PdsCWBatchStup calculatePdsCWStartedQtyByWorker(JmgJobId _jobId, JmgWorkerRecId _worker)
    {
        PdsCWBatchStup startQty;

        startQty = (select firstonly sum(PdsCWQtyStartup) from jmgStampJournalTrans
                    where jmgStampJournalTrans.JobId  == _jobId
                       && jmgStampJournalTrans.Worker == _worker).PdsCWQtyStartup;

        startQty += (select firstonly sum(PdsCWQtyStartup) from jmgStampTrans
                    where jmgStampTrans.JobId  == _jobId
                       && jmgStampTrans.Worker == _worker).PdsCWQtyStartup;

        return startQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGoodQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProdReportedGood calculateGoodQty(JmgJobId _jobId)
    {
        ProductQuantity goodQty;

        goodQty = (select firstonly sum(QtyGood) from jmgStampJournalTrans
                   where jmgStampJournalTrans.JobId == _jobId).QtyGood;

        goodQty += (select firstonly sum(QtyGood) from jmgStampTrans
                    where jmgStampTrans.JobId == _jobId).QtyGood;

        return goodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGoodQtyPerProdRouteJob</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProdReportedGood calculateGoodQtyPerProdRouteJob(ProdJobId _jobId)
    {
        return ProdRouteJob::findJobId(_jobId).qtyGood();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProdReportedError calculateErrorQty(JmgJobId _jobId, boolean _userErrorSpecification = true)
    {
        ProdReportedError           errorQty;
        JmgTmpErrorSpecification    errorSpec;
        JmgStampJournalTrans        stampJournalTrans;
        JmgStampTrans               stampTrans;

        errorQty = 0;

        if (_userErrorSpecification)
        {
            while select JobId, ErrorSpecification from stampJournalTrans
            where stampJournalTrans.JobId == _jobId
            {
                errorSpec = JmgErrorSpecificationForm::decodeErrorSpecification(stampJournalTrans.ErrorSpecification);
                select sum(QtyError) from errorSpec;
                errorQty += errorSpec.QtyError;
            }

            while select JobId, ErrorSpecification from stampTrans
            where stampTrans.JobId == _jobId
            {
                errorSpec = JmgErrorSpecificationForm::decodeErrorSpecification(stampTrans.ErrorSpecification);
                select sum(QtyError) from errorSpec;
                errorQty += errorSpec.QtyError;
            }
        }
        else
        {
            errorQty = (select firstonly sum(QtyError) from jmgStampJournalTrans
                   where jmgStampJournalTrans.JobId == _jobId).QtyError;

            errorQty += (select firstonly sum(QtyError) from jmgStampTrans
                    where jmgStampTrans.JobId == _jobId).QtyError;
           
        }

        return errorQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQtyPerProdRouteJob</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final JmgQtyBad calculateErrorQtyPerProdRouteJob(ProdJobId _jobId)
    {
        return ProdRouteJob::findJobId(_jobId).qtyError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQtyPerProdRoute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final JmgQtyBad calculateErrorQtyPerProdRoute(ProdRoute _prodRoute)
    {
        return _prodRoute.qtyError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGoodQtyPerProdRoute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProdReportedGood calculateGoodQtyPerProdRoute(ProdRoute _prodRoute)
    {
        return _prodRoute.qtyGood();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStartQtyPerProdRoute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProductQuantity calculateStartQtyPerProdRoute(ProdRoute _prodRoute)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;


        select sum(SysQtyStartup) from jmgStampJournalTrans
            where jmgStampJournalTrans.JobRef == _prodRoute.ProdId &&
                  jmgStampJournalTrans.OprNum == _prodRoute.OprNum;

        select sum(SysQtyStartup) from jmgStampTrans
            where jmgStampTrans.JobRef == _prodRoute.ProdId &&
                  jmgStampTrans.OprNum == _prodRoute.OprNum;

        return jmgStampJournalTrans.SysQtyStartup + jmgStampTrans.SysQtyStartup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQtyToReportAsFinished</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProdReportedError calculateErrorQtyToReportAsFinished(JmgTermJob_Prod _prodJob, JmgErrorSpecification _jmgErrorSpecification)
    {
        JmgStampJournalTrans        jmgStampJournalTransSum;
        JmgStampTrans               jmgStampTransSum;

        select sum(QtyError) from jmgStampJournalTransSum
            where jmgStampJournalTransSum.Module   == JmgModuleEnum::PROD
               && jmgStampJournalTransSum.JobRef   == _prodJob.jobRef();

        select sum(QtyError) from jmgStampTransSum
            where jmgStampTransSum.Module  == JmgModuleEnum::PROD
                && jmgStampTransSum.JobRef == _prodJob.jobRef();

        return jmgStampJournalTransSum.QtyError + jmgStampTransSum.QtyError + JmgErrorSpecificationForm::getTotalErrorQuantity(_jmgErrorSpecification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinish</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean reportedFinish(JmgJobId _jobId)
    {
        boolean ret = false;

        ret = ((select firstonly RecId from jmgStampJournalTrans
                   where jmgStampJournalTrans.JobId         == _jobId &&
                         jmgStampJournalTrans.JobFinished   == NoYes::Yes).RecId != 0);

        if (! ret)
            ret = ((select firstonly RecId from jmgStampTrans
                       where jmgStampTrans.JobId            == _jobId &&
                             jmgStampTrans.JobFinished      == NoYes::Yes).RecId != 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedStarted</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean reportedStarted(ProdRoute _prodRoute, JmgJobId _jmgJobId)
    {
        boolean ret = false;

        if (_prodRoute)
        {
            ret = (_prodRoute.OprStartedUp == NoYes::Yes);

            if (!ret)
            {
                Query query = new Query();
                QueryBuildDataSource qbdsProdTable = query.addDataSource(tableNum(ProdTable));
                qbdsProdTable.addRange(fieldNum(ProdTable, ProdId)).value(queryValue(_prodRoute.ProdId));

                List            prodStatusList = ProdStatusOrderedList::newFromOrder().retrieveStatusesFrom(ProdStatus::Completed);
                ListEnumerator  prodStatusEnumerator = prodStatusList.getEnumerator();
                str             prodStatusRange;

                while (prodStatusEnumerator.moveNext())
                {
                    prodStatusRange = queryRangeConcat(prodStatusRange, queryValue(prodStatusEnumerator.current()));
                }
                qbdsProdTable.addRange(fieldNum(ProdTable, ProdStatus)).value(prodStatusRange);

                QueryRun queryRun = new QueryRun(query);
                if (queryRun.next())
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedWaiting</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean reportedWaiting(ProdRouteJob _prodRouteJob, JmgJobId _jobId)
    {
        if (!_prodRouteJob)
        {
            _prodRouteJob = ProdRouteJob::findJobId(_jobId);
        }
        return _prodRouteJob.JobStatus == ProdJobStatus::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportedErrorQtyAtAndBeforeOpr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProdReportedError calculateReportedErrorQtyAtAndBeforeOpr(ProdId _prodId, OprNum _oprNum)
    {
        return ProdRouteTrans::qtyErrorAtAndBeforeOpr(_prodId, _oprNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCWReportedErrorQtyAtAndBeforeOpr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProdReportedError calculateCWReportedErrorQtyAtAndBeforeOpr(ProdId _prodId, OprNum _oprNum)
    {
        return ProdRouteTrans::qtyCWErrorAtAndBeforeOpr(_prodId, _oprNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportedErrorQtyBeforeOpr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ProdReportedError calculateReportedErrorQtyBeforeOpr(ProdId _prodId, OprNum _oprNum)
    {
        return ProdRouteTrans::qtyErrorAtAndBeforeOpr(_prodId, _oprNum, false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>