<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterParmDataPickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PickingList)]
class SalesFormletterParmDataPickingList
extends SalesFormletterParmData
{
    int taxAdjustmentDocumentCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order posting parameter table.
    /// </summary>
    /// <returns>
    /// The record that was inserted.
    /// </returns>
    protected Common createParmUpdate()
    {
        SalesParmUpdate lastSalesParmUpdate = parmUpdateSysLastValue as SalesParmUpdate;

        salesParmUpdate = super();

        salesParmUpdate.Reserve = lastSalesParmUpdate.Reserve;

        if (salesParmUpdate.ReduceOnHand)
        {
            salesParmUpdate.Reserve = true;
        }

        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterReleasedLines</Name>
				<Source><![CDATA[
    private void filterReleasedLines()
    {
        QueryBuildDataSource qbdsSalesLine = chooseLines.query().dataSourceTable(tableNum(SalesLine));
        QueryBuildDataSource qbdsWHSWorkLine = qbdsSalesLine.addDataSource(tableNum(WHSSalesLine));

        qbdsWHSWorkLine.relations(true);
        qbdsWHSWorkLine.joinMode(JoinMode::NoExistsJoin);
        qbdsWHSWorkLine.addRange(fieldNum(WHSSalesLine, ReleasedQty)).value(SysQuery::valueNot(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a parameter record should be created for the given source table.
    /// </summary>
    /// <param name="_salesTable">
    /// The source table that is in question.
    /// </param>
    /// <returns>
    /// true if a parameter table record should be created for the source table; otherwise, false.
    /// </returns>
    protected boolean mayJournalBePosted(Common _salesTable)
    {
        SalesTable tmpSalesTable = _salesTable as SalesTable;
        boolean ok = super(_salesTable);
        return ok && _salesTable.mayPickingListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalTransBePosted(Common _salesLine)
    {
        SalesLine salesLine = _salesLine as SalesLine;
        boolean ok = super(_salesLine);

        ok = ok
            // Picking lists can only be created for inventoried items.
            && salesLine.isStocked()
            && salesLine.mayPickingListBeUpdated(salesTableOrig);

        if (ok && (salesParmUpdate.SpecQty == SalesUpdate::DeliverNow))
        {
            ok = (salesLine.SalesDeliverNow >= 0) ? true : false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified sales line should be allowed to be
    ///     included on picking lists.
    /// </summary>
    /// <param name="_salesLine">
    ///     The <c>SalesLine</c> record for which this method includes on picking
    ///     lists or not.
    /// </param>
    /// <param name="_salesTable">
    ///     The sales order header record associated with the <c>SalesLine</c>.
    /// </param>
    /// <returns>
    ///     true if the sales order line should be included on the picking lists;
    ///     otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Check for inventory availability. If there is enough quanitity on hand to fulfill the
    ///     pick list, then check if the authorization on the payment record( in case
    ///     of a credit card payment) is stale. If auth is stale do not allow.
    ///     Do not process continuity item lines.
    ///     Do not process continuity child orders with payment issues.
    /// </remarks>
    protected boolean mcrAllowCreateParmLine(SalesLine _salesLine, SalesTable _salesTable)
    {
        boolean                     allowCreateParmLine = true;

        allowCreateParmLine = super(_salesLine, _salesTable);

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            if (allowCreateParmLine
                && !this.mcrAllowCreateCheck(_salesLine, _salesTable))
            {
                allowCreateParmLine = false;
            }

            // Do not allow the continuity order lines with payment issues to be processed.
            if (allowCreateParmLine
                && !_salesLine.mcrCanContinuityLinePick())
            {
                allowCreateParmLine = false;
            }

            // If a transaction is being paid for by a credit card, check to see
            // if the credit card authorization for that card is not stale. If
            // the authorization is stale, then the sales order should be moved
            // to pending the authorization status set back to reauthorize
            if (allowCreateParmLine)
            {
                boolean inventoryAvailable = this.mcrCheckInventAvailability(_salesLine, _salesTable);

                // If no inventory, but physcial reserved or picked, then allow parm line
                if (!inventoryAvailable
                    && _salesLine.reservedPhysical() >= 0)
                {
                    inventoryAvailable = true;
                }

                //Check for stale authorization if it will be picked.  Inventory check helps avoid calls.
                if (inventoryAvailable)
                {
                    allowCreateParmLine = MCRCustPaymTable::processIfAuthStale(_salesTable.RecId);
                }
                else
                {
                    allowCreateParmLine = false;
                }
            }
        }

        return allowCreateParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainBeforeQtyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating the delivery remainder for the specified sales line.
    /// </summary>
    /// <param name = "_module"><c>ModuleInventPurchSales</c> determines which unit and field should be used.</param>
    /// <param name = "_salesParmLine">Sales posting line.</param>
    /// <param name = "_salesLineOrig">Original sales line.</param>
    /// <param name = "_this">The current sales picking list posting engine instance.</param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> subscribers should use to return the calculated quantity.</param>
    delegate void getRemainBeforeQtyDelegate(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig, SalesFormLetterParmDataPickingList _this, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainBeforeQty</Name>
				<Source><![CDATA[
    private Qty getRemainBeforeQty(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        SalesParmLine salesParmLine;
        Qty qty;

        if (_module == ModuleInventPurchSales::Invent)
        {
            qty = conPeek(this.qtyInvent(_salesLineOrig),
                    SalesQuantity::mcrPositionRemainBefore());

            return qty;
        }
        else if (_module == ModuleInventPurchSales::Sales)
        {
            qty = conPeek(this.qtySales(_salesLineOrig),
                    SalesQuantity::mcrPositionRemainBefore());

            return qty;
        }
        else
        {
            EventHandlerResult result = new EventHandlerResult();
            this.getRemainBeforeQtyDelegate(_module, _salesParmLine, _salesLineOrig, this, result);

            if (!result.hasResult())
            {
                throw error(strfmt("@SYS19306", funcname()));
            }

            return result.result();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateNowQtyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating the posting quantity for the specified sales line.
    /// </summary>
    /// <param name = "_module"><c>ModuleInventPurchSales</c> determines which unit and field should be used.</param>
    /// <param name = "_salesParmLine">Sales posting line.</param>
    /// <param name = "_salesLineOrig">Original sales line.</param>
    /// <param name = "_this">The current sales picking list posting engine instance.</param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> subscribers should use to return the calculated quantity.</param>
    delegate void getUpdateNowQtyDelegate(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig, SalesFormLetterParmDataPickingList _this, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateNowQty</Name>
				<Source><![CDATA[
    private Qty getUpdateNowQty(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        SalesParmLine salesParmLine;
        Qty qty;

        if (_module == ModuleInventPurchSales::Invent)
        {
            qty = conPeek(this.qtyInvent(_salesLineOrig),
                    SalesQuantity::mcrPositionUpdateNow());

            select sum(InventNow) from salesParmLine
                    where salesParmLine.ParmId == _salesParmLine.ParmId
                        && salesParmLine.SalesLineRecId == _salesLineOrig.RecId
                        // exclude current parm line
                        && salesParmLine.RecId != _salesParmLine.RecId;

            qty -= salesParmLine.InventNow;

            qty = min(
                          min(qty,
                              this.getRemainBeforeQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig)),
                          _salesLineOrig.inventTable().inventItemInventSetup().
                              mcrQuantityEffectiveMultiple());
        }
        else if (_module == ModuleInventPurchSales::Sales)
        {
            qty = conPeek(this.qtySales(_salesLineOrig),
                    SalesQuantity::mcrPositionUpdateNow());

            select sum(DeliverNow) from salesParmLine
                    where salesParmLine.ParmId == _salesParmLine.ParmId
                        && salesParmLine.SalesLineRecId == _salesLineOrig.RecId
                        // exclude current parm line
                        && salesParmLine.RecId != _salesParmLine.RecId;

            qty -= salesParmLine.DeliverNow;

            qty = min(
                          min(qty,
                              this.getRemainBeforeQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig)),
                          _salesLineOrig.inventTable().inventItemSalesSetup().
                              mcrQuantityEffectiveMultiple());
        }
        else
        {
            EventHandlerResult result = new EventHandlerResult();
            this.getUpdateNowQtyDelegate(_module, _salesParmLine, _salesLineOrig, this, result);

            if (!result.hasResult())
            {
                throw error(strfmt("@SYS19306", funcname()));
            }

            return result.result();
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetShipAloneQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets parm line quantities appropriately for ship alone items.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The <c>SalesParmLine</c> record for which this method sets
    ///     appropriate ship alone quantities.
    /// </param>
    /// <param name="_salesLineOrig">
    ///     The sales order line used to set quantities on the <c>SalesParmLine</c>
    ///     record.
    /// </param>
    /// <remarks>
    ///     Do not do this for negative quantity lines.
    ///     Be sure this is called AFTER the salesParmLine has been initialized from
    ///     the sales line.
    /// </remarks>
    protected void mcrSetShipAloneQuantities(SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        _salesParmLine.DeliverNow         = this.getUpdateNowQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig);
        _salesParmLine.RemainBefore       = this.getRemainBeforeQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig);
        _salesParmLine.RemainAfter        = _salesParmLine.RemainBefore;
        _salesParmLine.InventNow          = this.getUpdateNowQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig);
        _salesParmLine.RemainBeforeInvent = this.getRemainBeforeQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig);
        _salesParmLine.RemainAfterInvent  = _salesParmLine.RemainBeforeInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits ship-alone item lines.
    /// </summary>
    /// <returns>
    ///     true if there are no problems in the called method
    ///     mcrSplitParmLineShipAlone; otherwise, false.
    /// </returns>
    protected boolean mcrSplitParmLines()
    {
        return this.mcrSplitParmLinesShipAlone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits parm tables by boxing logic.
    /// </summary>
    /// <returns>
    ///     true if there are no problems in the called method
    ///     mcrSplitParmTablesBoxing; otherwise, false.
    /// </returns>
    protected boolean mcrSplitParmTables()
    {
        return this.mcrSplitParmTablesBoxing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmTablesBoxing</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits parm tables through boxing logic.
    /// </summary>
    /// <returns>
    ///     true if no problems occur; otherwise false.
    /// </returns>
    protected boolean mcrSplitParmTablesBoxing()
    {
        SalesParmTable          salesParmTable,
                                salesParmTableCreate,
                                salesParmTableCreateUnboxable,
                                salesParmTableSelect;
        SalesParmLine           salesParmLine,
                                salesParmLineCreate;
        MCRPackingBoxTrans      packingBoxTrans;
        MCRPackingBoxTransId    prevPackingBoxTransId;
        SalesLine               salesLine;
        SalesTable              localSalesTable;
        InventTable             inventTable;
        boolean                 recordFound = false;

        void mcrMoveNonBoxableParmLines()
        {
            // Create a parm table for all non-boxed parm lines (this includes items
            // explicitly marked as not boxable, as well as items that were not
            // boxed by the boxing routine (for example because the item would not
            // fit in any box).
            // Find out if there are any non-boxed parm lines.  Only need this
            // check so we don't burn a TableRefId unnecessarily.
            // Added parmID for performance and reworked SQL.
            select firstonly RecId, TableRefId, TableId, ParmId, SalesLineRecId from salesParmLine
                where salesParmLine.ParmId          == salesParmTable.ParmId
                   && salesParmLine.TableRefId      == salesParmTable.TableRefId
                join firstonly salesLine
                where salesLine.RecId           == salesParmLine.SalesLineRecId
                join firstonly localSalesTable
                where localSalesTable.SalesId   == salesLine.SalesId
                notexists join packingBoxTrans
                where packingBoxTrans.SalesParmLine   == salesParmLine.RecId;
            if (salesParmLine)
            {
                salesParmTableCreateUnboxable = this.createParmTable(localSalesTable,
                                                    salesLine,
                                                    formletterParmData::getNewTableRefId());

                update_recordset salesParmLine
                    setting TableRefId = salesParmTableCreateUnboxable.TableRefId
                    where  salesParmLine.ParmId     == salesParmTable.ParmId
                        &&  salesParmLine.TableRefId == salesParmTable.TableRefId
                    notexists join packingBoxTrans
                    where packingBoxTrans.SalesParmLine   == salesParmLine.RecId;
            }

            // Handle the case where only part of quantity of the original sales
            // parm line was boxed.  Put the rest on a new parm line attached to
            // the unboxable parm table.
            while select salesParmLine
                where salesParmLine.ParmId == salesParmTable.ParmId
                   && salesParmLine.TableRefId == salesParmTable.TableRefId
                join inventTable
                    where inventTable.ItemId == salesParmLine.ItemId
            {
                select sum(InventQty) from packingBoxTrans
                    where  packingBoxTrans.SalesParmLine   == salesParmLine.RecId;

                // At this point, packingBoxTrans.InventQty is the sum of qty
                // that was actually boxed.  If it does not equal the original qty
                // from the parm line, then it was only partially boxed.  If so,
                // handle that by putting the unboxed qty on a new parm line, and
                // attaching that parm line to the unboxable parm table.
                if (packingBoxTrans.InventQty != salesParmLine.InventNow)
                {
                    // Create the 'unboxable' parm table (if it wasn't created
                    // earlier).
                    if (!salesParmTableCreateUnboxable)
                    {
                        salesLine = SalesLine::findRecId(salesParmLine.SalesLineRecId);
                        localSalesTable = salesParmTable.salesTable();
                        salesParmTableCreateUnboxable = this.createParmTable(localSalesTable,
                                                            salesLine,
                                                            formletterParmData::getNewTableRefId());
                    }

                    salesParmLineCreate.clear();
                    salesParmLineCreate.data(salesParmLine);
                    salesParmLineCreate.TableRefId = salesParmTableCreateUnboxable.TableRefId;
                    // Set InventNow and DeliverNow.
                    // Shouldn't need to change the RemainBefore/After type quantities
                    // because picking doesn't use/affect them.
                    salesParmLineCreate.InventNow = salesParmLine.InventNow
                                                        - packingBoxTrans.InventQty;
                    salesParmLineCreate.DeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesParmLineCreate.ItemId,
                                                                                                                           salesParmLineCreate.InventDimId,
                                                                                                                           salesParmLineCreate.InventNow,
                                                                                                                           inventTable.inventUnitId(),
                                                                                                                           inventTable.salesUnitId(),
                                                                                                                           NoYes::Yes);                                
                        
                    salesParmLineCreate.setLineAmount();
                    this.insertParmLine(salesParmLineCreate);
                }
            }
        }

        // If boxing is not turned on, exit immediately.
        if (!MCRPackingBoxLogic::isPackingBoxLogicEnabled())
        {
            return true;
        }

        ttsbegin;
        while select salesParmTableSelect
            where salesParmTableSelect.ParmId == salesParmUpdate.ParmId
        {
            if (!recordFound)
            {
                this.initRecordLists();
                recordFound = true;
            }

            // Get current parm line
            salesParmTable = salesParmTableSelect;
            localSalesTable = SalesTable::find(salesParmTable.SalesId);

            // Create boxing records from parm line.
            MCRPackingBoxLogic packingBoxLogic = MCRPackingBoxLogic::construct();
            // Use ParmID to read details.
            packingBoxLogic.createBoxes(salesParmTable.ParmId, salesParmTable.TableRefId);

            salesParmTable.selectForUpdate(true);

            if (MCRPackingBoxTrans::hasOneOrMoreBoxes(salesParmTable.TableRefId))
            {
                // Added parmID for performance and reworked SQL.
                // Added order by
                while select PackingBoxTransId, InventQty, PackingBoxName from packingBoxTrans
                    order by PackingBoxTransId desc
                    join salesParmLine
                    where packingBoxTrans.SalesParmLine == salesParmLine.RecId
                        && salesParmLine.ParmId == salesParmTable.ParmId
                    join salesLine
                    where salesParmLine.SalesLineRecId == salesLine.RecId
                {
                    if (packingBoxTrans.PackingBoxTransId != prevPackingBoxTransId)
                    {
                        prevPackingBoxTransId = packingBoxTrans.PackingBoxTransId;
                        salesParmTableCreate = this.createParmTable(localSalesTable, // salestable
                                                            salesLine, // salesline
                                                            formletterParmData::getNewTableRefId(), // tablerefid
                                                            false, // skipparmsubtable
                                                            '', // postingprofile
                                                            InventProfileType_RU::General, // InventProfielType_RU
                                                            '', // InventOwnerId_RU
                                                            packingBoxTrans.PackingBoxName);  // packingboxname
                    }

                    salesParmLineCreate.clear();
                    salesParmLineCreate.data(salesParmLine);
                    salesParmLineCreate.TableRefId = salesParmTableCreate.TableRefId;
                    // Set InventNow and DeliverNow.
                    // Shouldn't need to change the RemainBefore/After type quantities
                    // because picking doesn't use/affect them.
                    salesParmLineCreate.InventNow = packingBoxTrans.InventQty;

                    inventTable = salesParmLineCreate.inventTable();
                    salesParmLineCreate.DeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesParmLineCreate.ItemId,
                                                                                                                           salesParmLineCreate.InventDimId,
                                                                                                                           salesParmLineCreate.InventNow,
                                                                                                                           inventTable.inventUnitId(),
                                                                                                                           inventTable.salesUnitId(),
                                                                                                                           NoYes::Yes);

                    salesParmLineCreate.setLineAmount();
                    this.insertParmLine(salesParmLineCreate);
                }
            }

            mcrMoveNonBoxableParmLines();

            salesParmTable.delete();
        }// end of while

        // reset list of records to insert
        if (recordFound)
        {
            this.insertRecordLists();
        }
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProforma</Name>
				<Source><![CDATA[
    public boolean parmProforma(boolean _proforma = proforma)
    { // Proforma posting is not supported for picking lists
        proforma = false;
        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query that is used during data creation.
    /// </summary>
    public void updateQueryBuild()
    {
        QueryBuildDataSource queryBuildDataSourceMCRSalesLine;

        super();
        chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, DeliveryDate));

        this.filterReleasedLines();

        // If using picking workbench to pick sales orders, only want to pick the ones
        // that are flagged for current picking wave.  MCRPickWaveReference will only
        // be set by the picking workbench, so standard picking will ignore this range.
        if (this.parmMCRPickWaveReference() != "")
        {
            if (chooseLines.query().dataSourceTable(tableNum(MCRPickingWorkbenchWaveSalesLine)))
            {
                queryBuildDataSourceMCRSalesLine = chooseLines.query().dataSourceTable(tableNum(MCRPickingWorkbenchWaveSalesLine));
            }
            else
            {
                queryBuildDataSourceMCRSalesLine = chooseLines.query().dataSourceTable(tableNum(SalesLine)).addDataSource(tableNum(MCRPickingWorkbenchWaveSalesLine));
            }
            queryBuildDataSourceMCRSalesLine.addLink(fieldNum(SalesLine,RecId),fieldNum(MCRPickingWorkbenchWaveSalesLine,SalesLine));
            queryBuildDataSourceMCRSalesLine.relations(true);
            queryBuildDataSourceMCRSalesLine.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceMCRSalesLine.fetchMode(QueryFetchMode::One2One);
            queryBuildDataSourceMCRSalesLine.addRange(fieldNum(MCRPickingWorkbenchWaveSalesLine,PickingWorkbenchWaveId)).value(this.parmMCRPickWaveReference());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCanPickingWorkbenchReserve</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether picking workbench can reserve a sales line.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales order line to check if it can be reserved.
    /// </param>
    /// <param name="_salesTable">
    ///     The sales order header associated with the sales order line
    ///     passed in.
    /// </param>
    /// <returns>
    ///     true if the sales order line can be reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Written as a static wrapper to try to hide how this is determined.  This
    ///     is the appropriate class to do the work.
    /// </remarks>
    public static boolean mcrCanPickingWorkbenchReserve(SalesLine    _salesLine,
                                                       SalesTable   _salesTable)
    {
        SalesFormletterParmDataPickingList salesFormletterParmDataPickingList = SalesFormletterParmData::construct(DocumentStatus::PickingList);
        return salesFormletterParmDataPickingList.mcrAllowCreateParmLine(_salesLine, _salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeCreateParmTable</Name>
				<Source><![CDATA[
    protected void reArrangeCreateParmTable(QueryRun _queryRun, SalesParmTable _oldSalesParmTable, TradeLineRefId _newTableRefId, boolean _skipParmSubTable)
    {
        super(_queryRun, _oldSalesParmTable, _newTableRefId, _skipParmSubTable);

        if (_oldSalesParmTable.RecId)
        {
            // Move tax adjustments from current picking list to the new picking list.
            TaxWorkRegulation::move(_oldSalesParmTable, salesParmTableReArrange);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxWorkRegulation</Name>
				<Source><![CDATA[
    protected boolean checkTaxWorkRegulation()
    {
        if (taxAdjustmentDocumentCount == salesParmUpdate.numberOfTables())
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeInit</Name>
				<Source><![CDATA[
    protected void reArrangeInit()
    {
        taxAdjustmentDocumentCount = salesParmUpdate.numberOfTables();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine</Name>
				<Source><![CDATA[
    protected void insertParmLine(Common _parmLine)
    {
        if (this.kittingInsertParmLine(_parmLine))
        {
            super(_parmLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingInsertParmLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingInsertParmLine_delegate(SalesParmLine _salesParmLine, SalesUpdate _salesUpdate, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingInsertParmLine</Name>
				<Source><![CDATA[
    protected boolean  kittingInsertParmLine(SalesParmLine _salesParmLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingInsertParmLine_delegate(_salesParmLine, salesParmUpdate.SpecQty, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>