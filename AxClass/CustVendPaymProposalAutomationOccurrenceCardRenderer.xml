<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalAutomationOccurrenceCardRenderer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provider for payment proposal automation's schedule occurrence card rendering.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.ProcessScheduleIRenderSuccessfulOccurrenceCard))]
[ExportMetadata(extendedTypeStr(ProcessScheduleTypeName), 'VendPaymProposalAutomation')]
internal final class CustVendPaymProposalAutomationOccurrenceCardRenderer implements ProcessScheduleIRenderSuccessfulOccurrenceCard
{
    private ProcessScheduleOccurrenceCardRendering occurrenceCardRendering;
    private ProcessScheduleSeries series;
    private ProcessScheduleOccurrence occurrence;
    private ProcessExecutionSourceLink sourceLink;
    private LegalEntityDataAreaId seriesLegalEntityId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>renderOccurrenceCardForSuccessfulOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void renderOccurrenceCardForSuccessfulOccurrence(ProcessScheduleOccurrenceCardRendering _occurrenceCardRendering)
    {
        this.initialize(_occurrenceCardRendering);

        _occurrenceCardRendering.setColumnsOnOccurrenceCardDetailGroup(1);

        if (this.findSourceLink().RefRecId != 0)
        {
            FormButtonControl viewPayments = _occurrenceCardRendering.addButtonControl('ViewPayments');
            viewPayments.text("@CashManagement:CustVendPaymProposalAutomationCompletedCardViewPayments");
            viewPayments.style(ButtonStyle::Link);
            viewPayments.widthMode(FormWidth::SizeToAvailable);
            viewPayments.heightMode(FormHeight::SizeToContent);
            viewPayments.registerOverrideMethod(
                methodStr(FormButtonControl, clicked),
                methodStr(CustVendPaymProposalAutomationOccurrenceCardRenderer, viewPaymentsJumpRef),
                this);

            _occurrenceCardRendering.makeCardButtonsInvisible();
        }
        else
        {
            _occurrenceCardRendering.makeCardSubHeaderInvisible();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(ProcessScheduleOccurrenceCardRendering _occurrenceCardRendering)
    {
        if (occurrenceCardRendering == null)
        {
            occurrenceCardRendering = _occurrenceCardRendering;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOccurrence</Name>
				<Source><![CDATA[
    private ProcessScheduleOccurrence findOccurrence()
    {
        if (occurrence.RecId == 0)
        {
            occurrence = occurrenceCardRendering.getOccurrenceBeingRendered();
        }

        return occurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceLink</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink findSourceLink()
    {
        if (sourceLink.RecId == 0)
        {
            sourceLink = CustVendPaymProposalAutomationCardData::findSourceLinkFromOccurrenceAndStatus(this.findOccurrence(), ProcessExecutionSourceStatus::Success);
        }

        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSeriesLegalEntityId</Name>
				<Source><![CDATA[
    private LegalEntityDataAreaId findSeriesLegalEntityId()
    {
        if (seriesLegalEntityId == '')
        {
            seriesLegalEntityId = ProcessScheduleSeriesCompany::getLegalEntityForSingleCompanyOccurrence(this.findOccurrence().RecId);
        }

        return seriesLegalEntityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewPaymentsJumpRef</Name>
				<Source><![CDATA[
    private void viewPaymentsJumpRef(FormButtonControl _viewPayments)
    {
        LegalEntityDataAreaId currentCompany = curExt();

        if (this.findSeriesLegalEntityId() != currentCompany)
        {
            appl.setDefaultCompany(this.findSeriesLegalEntityId(), false);
        }

        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findByRecId(this.findSourceLink().RefRecId);
        
        if (ledgerJournalTable.RecId != 0)
        {
            Args args = new Args();
            args.record(ledgerJournalTable);
            args.caller(this);
                
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(LedgerJournalTable5), MenuItemType::Display);
            menuFunction.run(args);
        }
        else
        {
            appl.setDefaultCompany(currentCompany, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>