<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineCopyFromCustInvoiceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineCopyFromSource</c> class is responsible for copying <c>SalesLine</c> from a <c>CustInvoiceTrans</c>.
/// </summary>
[SalesLineCopyFromSourceFactory(tableStr(CustInvoiceTrans))]
class SalesLineCopyFromCustInvoiceTrans extends SalesLineCopyFromSource
{
    #ISOCountryRegionCodes

    CustInvoiceTrans sourceCustInvoiceTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCopy</Name>
				<Source><![CDATA[
    public boolean canCopy()
    {
        if (this.mustFindAgreementLine())
        {
            agreementLine = AgreementLine::findCustInvoiceTrans(sourceCustInvoiceTrans.RecId);
            if (agreementLine.Agreement != salesTable.MatchingAgreement)
            {
                if (agreementLine && salesTable.returnItem())
                {
                    error("@GLS180243");
                    return false;
                }
                agreementLine = null;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDiscLineChangePolicy</Name>
				<Source><![CDATA[
    protected void updatePriceDiscLineChangePolicy()
    {
        salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnSource</Name>
				<Source><![CDATA[
    protected void updateBasedOnSource()
    {
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoLT, #isoEE, #isoLV, #isoCZ, #isoPL, #isoHU]))
        {
            if (salesLine.SalesQty || !createCorrectionLine)
            {
                salesCopying.updateInvoiceCreditCopy(salesLine, sourceCustInvoiceTrans);
            }
        }
        else
        {
            // </GEEU>
            salesCopying.updateInvoiceCreditCopy(salesLine, sourceCustInvoiceTrans);
            // <GEEU>
        }
        // </GEEU>

        if (salesCopying.settleInvoiceTrans())
        {
            salesCopying.markForSettlement(sourceCustInvoiceTrans);
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if (salesCopying.parmTaxAsPerOrginalInvoice_IN())
            {
                CustInvoiceJour custInvoiceJour = sourceCustInvoiceTrans.custInvoiceJour();
                ITaxDocument taxDocument = TaxBusinessService::getTaxDocumentBySource(custInvoiceJour.TableId, custInvoiceJour.RecId);

                if (taxDocument)
                {
                    TaxBusinessService::copyTaxDocumentLine(sourceCustInvoiceTrans, salesLine, taxDocument, classStr(TaxMeasureRate), NoYes::No, salesLine.salesTable());
                }
                else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
                {
                    TaxBusinessService::copyTaxFromTransaction(sourceCustInvoiceTrans, salesLine, classStr(TaxMeasureRate), NoYes::No, salesLine.salesTable());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInformation_IN</Name>
				<Source><![CDATA[
    public void updateTaxInformation_IN()
    {
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(sourceCustInvoiceTrans, salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    protected void copyFromSource()
    {
        super();

        parentRecId = sourceCustInvoiceTrans.RecId;
        parentTableId = sourceCustInvoiceTrans.TableId;

        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
            salesLine_IN.TaxAsPerOriginalInvoice = salesCopying.parmTaxAsPerOrginalInvoice_IN();
            if (salesLine_IN.TaxAsPerOriginalInvoice)
            {
                salesLine.InventRefId = sourceCustInvoiceTrans.SalesId;
            }

            salesLine.packSalesLine_IN(salesLine_IN);
        }

        if (FinTagConfiguration::isFinTagConfigurationSet(salesLine.DataAreaId) && SalesOrderFinTagFeature::isEnabled())
        {
            salesLine.FinTag = sourceCustInvoiceTrans.FinTag;
        }

        if (CustInvoiceTrans_W::isLegalEntityInCountryRegion())
        {
            if (salesCopying.parmSalesPurchCopy() == SalesPurchCopy::CreditNoteHeader
                || salesCopying.parmSalesPurchCopy() == SalesPurchCopy::CreditNoteLines)
            {
                this.initFromCustInvoiceTrans_W_CreditNote();
            }
            else
            {
                this.initfromCustInvoiceTrans_W();
            }
        }
        else
        {
            salesLine.initFromCustInvoiceTrans(sourceCustInvoiceTrans, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLine.Qty,
                            #PdsCatchWeightEnabled ? tmpFrmVirtualLine.PdsCWQty : 0);
        }

        if (TaxIntegrationManualAddNegativeLineFlight::instance().isEnabled() && salesCopying is SalesCopying_CreditNote)
        {
            salesLine.OverrideSalesTax = NoYes::Yes;
        }

        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            salesCopying.setRefInvoice_MY(salesLine, sourceCustInvoiceTrans.custInvoiceJour());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>SalesLine</c> table buffer based on an <c>CustInvoiceTrans</c> table buffer.
    /// </summary>
    protected void initFromCustInvoiceTrans_W()
    {
        salesLine.initFromCustInvoiceTrans(sourceCustInvoiceTrans, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLine.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans_W_CreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a credit note <c>SalesLine</c> table buffer based on an <c>CustInvoiceTrans</c> table buffer.
    /// </summary>
    protected void initFromCustInvoiceTrans_W_CreditNote()
    {
        if (createCorrectionLine)
        {
            if (sourceCustInvoiceTrans.custInvoiceTrans_W().RefReturnInvoiceTrans_W || sourceCustInvoiceTrans.Qty < 0)
            {
                throw error("@GLS220579");
            }
        }

        this.initFromCustInvoiceTrans_W();

        salesLine.RefReturnInvoiceTrans_W = sourceCustInvoiceTrans.RecId;

        if (!createCorrectionLine)
        {
            salesLine.CreditNoteReasonCode = salesCopying.copyReasonTableRef(salesCopying.parmReasonTableRef());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode retrieveCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (salesLine.currencyCode != sourceCustInvoiceTrans.currencyCode)
        {
            currencyCode = sourceCustInvoiceTrans.currencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceInventTransId</Name>
				<Source><![CDATA[
    public InventTransId retrieveSourceInventTransId()
    {
        return sourceCustInvoiceTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceQty</Name>
				<Source><![CDATA[
    public Qty retrieveSourceQty()
    {
        return sourceCustInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSalesLineLoc</Name>
				<Source><![CDATA[
    public SalesLine retrieveSalesLineLoc()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH, #isoSA, #isoGB, #isoIE]))
        {
            return SalesLine::findInventTransId(sourceCustInvoiceTrans.InventTransId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryRelatedData</Name>
				<Source><![CDATA[
    protected void copyCategoryRelatedData()
    {
        if (salesLine.isCategoryBased())
        {
            salesLineForeignTradeCategory.initFromCustInvoiceTrans(sourceCustInvoiceTrans);
            copyForeignTradeRecord = true;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSource</Name>
				<Source><![CDATA[
    public Common retrieveSource()
    {
        return this.sourceCustInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(SalesLine _salesLine, SalesTable _salesTable, TmpFrmVirtual _tmpFrmVirtualLines, SalesCopying _salesCopying)
    {
        super(_salesLine, _salesTable, _tmpFrmVirtualLines, _salesCopying);
        sourceCustInvoiceTrans =  CustInvoiceTrans::findRecId(_tmpFrmVirtualLines.RecordNo);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>