<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class creates payment requests from single document of various type.
/// </summary>
public abstract class CFMPaymentRequestCreate extends RunBase
{
    Common sourceRecord;
    Counter paymentRequestCreatedCount;

    #define.negative('<0')
    #define.positive('>0')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateFromPlannedPayments</Name>
				<Source><![CDATA[
    protected abstract boolean canCreateFromPlannedPayments(Common _sourceRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentRequests</Name>
				<Source><![CDATA[
    protected void createPaymentRequests(Query _query, TableId _tableId, CFMDistributionPercentTmp _distributionPercentTmpTable = null)
    {

        QueryRun paymentRequestSourceQueryRun = new QueryRun(_query);

        while (paymentRequestSourceQueryRun.next())
        {
            Common paymentRequestSourceRecord = paymentRequestSourceQueryRun.get(_tableId);

            CFMPaymentRequestSource paymentRequestSource = CFMPaymentRequestSource::constructFromSource(paymentRequestSourceRecord);
            if (paymentRequestSource)
            {
                paymentRequestSource.parmPaymentDistribution(_distributionPercentTmpTable);

                CFMPaymentRequestTable paymentRequest = paymentRequestSource.getPaymentRequest();

                if (paymentRequest.RecId != 0)
                {
                    paymentRequestCreatedCount++;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSourceQuery</Name>
				<Source><![CDATA[
    protected abstract Query getDistributionSourceQuery(Common _sourceRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSourceTableId</Name>
				<Source><![CDATA[
    protected abstract TableId getDistributionSourceTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentRequestSourceQuery</Name>
				<Source><![CDATA[
    protected abstract Query getPaymentRequestSourceQuery(Common _sourceRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentRequestSourceTableId</Name>
				<Source><![CDATA[
    protected abstract TableId getPaymentRequestSourceTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlannedPaymentSourceQuery</Name>
				<Source><![CDATA[
    protected abstract Query getPlannedPaymentSourceQuery(Common _sourceRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the process of payment requests creation from the source document.
    /// </summary>
    public void run()
    {
        CFMDistributionPercentTmp distributionPercentTmpTable;
        paymentRequestCreatedCount = 0;

        QueryRun paymentDistributionSourceQueryRun = new QueryRun(this.getDistributionSourceQuery(sourceRecord));

        while (paymentDistributionSourceQueryRun.next())
        {

            Common paymentDistributionSourceRecord = paymentDistributionSourceQueryRun.get(this.getDistributionSourceTableId());

            //calculate distribution

            CFMDistributionPercentCalc distributionPercentCalculator = CFMDistributionPercentCalc::construct(paymentDistributionSourceRecord);
            if (distributionPercentCalculator)
            {
                distributionPercentTmpTable = distributionPercentCalculator.calc();
            }

            this.createPaymentRequests(this.getPaymentRequestSourceQuery(paymentDistributionSourceRecord), this.getPaymentRequestSourceTableId(), distributionPercentTmpTable);
        }

        //create payment requests for planned payment

        if (this.canCreateFromPlannedPayments(sourceRecord))
        {
            CFMPlannedPaymentCalc plannedPaymentCalc = CFMPlannedPaymentCalc::construct(sourceRecord);
            if (plannedPaymentCalc)
            {
                plannedPaymentCalc.calc();
            }

            this.createPaymentRequests(this.getPlannedPaymentSourceQuery(sourceRecord), tableNum(CFMPlannedPaymentTable));
        }

        if (paymentRequestCreatedCount == 0)
        {
            info("@Cashflowmanagement:NewPaymRequestsNotCreated");
        }
        else
        {
            info(strFmt("@Cashflowmanagement:PaymRequestsSuccessCreated", paymentRequestCreatedCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceRecord</Name>
				<Source><![CDATA[
    protected void setSourceRecord(Common _sourceRecord)
    {
        sourceRecord = _sourceRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static server void main(Args _args)
    {
        if (!_args || !_args.record())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CFMPaymentRequestCreate paymentRequestCreator = CFMPaymentRequestCreate::construct(_args.record());

        if (paymentRequestCreator)
        {
            paymentRequestCreator.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static server CFMPaymentRequestCreate construct(Common _sourceRecord)
    {
        CFMPaymentRequestCreate paymentRequestCreator;

        if (_sourceRecord)
        {
            CFMPaymentRequestSourceAttribute extensionAttribute = new CFMPaymentRequestSourceAttribute(tableId2name(_sourceRecord.TableId));
            paymentRequestCreator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPaymentRequestCreate), extensionAttribute);

            if (!paymentRequestCreator)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            paymentRequestCreator.setSourceRecord(_sourceRecord);
        }

        return paymentRequestCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>