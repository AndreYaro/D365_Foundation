<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_PdsBatchAttribReserve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form PdsBatchAttribReserve.
/// </summary>
class PdsFormCtrl_PdsBatchAttribReserve extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form has been initialized
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the from datasources.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// thrown, if the formrun has not been set
    /// </exception>
    public void initPost()
    {
        #define.BatchHistory('History')

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (#PmfEnabled)
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(#BatchHistory),
                methodstr(PdsFormCtrl_PdsBatchAttribReserve, isSales),
                ButtonRuleEffectType::Enabled);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the transaction related to Sales order.
    /// </summary>
    /// <returns>
    /// True, if transaction is a sales order; otherwise false.
    /// </returns>
    /// <remarks>
    /// All other transaction types will return false.
    /// </remarks>
    public boolean isSales()
    {
        InventTrans     inventTrans = buffer;

        return InventTransOrigin::find(inventTrans.InventTransOrigin).ReferenceCategory == InventTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - InventTrans
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1,
        Common _datasources2 = null,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventTrans))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsFormCtrl_PdsBatchAttribReserve construct()
    {
        return new PdsFormCtrl_PdsBatchAttribReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PdsFormCtrl_PdsBatchAttribReserve</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// New instance of class <c>PdsFormCtrl_PdsBatchAttribReserve</c>
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PdsFormCtrl_PdsBatchAttribReserve</c> and sets the formRun variable
    /// to the vlue of the calling form.
    /// </remarks>
    public static PdsFormCtrl_PdsBatchAttribReserve newFromForm(FormRun _fr)
    {
        PdsFormCtrl_PdsBatchAttribReserve frmCtrl;

        frmCtrl = PdsFormCtrl_PdsBatchAttribReserve::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>