<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequeCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankChequeCopy</c> class is used to print non-negotiable checks for the bank module.
/// </summary>
public class BankChequeCopy extends ChequeCopy
{
    private BankChequeTable bankChequeTable;
    private FormDataSource bankChequeTable_ds;
    private BankChequePaymTrans bankChequePaymTrans;
    private VendTable vendTable;
    private Counter bankChequePaymTransLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpChequePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>TmpChequePrintout</c> table buffer for each <c>BankChequeTable</c> record.
    /// </summary>
    /// <returns>
    /// A <c>TmpChequePrintout</c> table buffer that contains check report data.
    /// </returns>
    protected TmpChequePrintout createTmpChequePrintout()
    {
        if (bankChequeTable)
        {
            this.fillTmpChequePrintout();
        }
        else if (this.parmArgs().record() is LedgerJournalTrans)
        {
            LedgerJournalTrans ledgerJournalTrans = this.parmArgs().record();

            bankChequeTable = bankChequeTable::find(ledgerJournalTrans.parmOffsetAccount(), ledgerJournalTrans.BankChequeNum);

            if (bankChequeTable)
            {
                this.fillTmpChequePrintout();
            }
        }
        else
        {
            bankChequeTable_ds = FormDataUtil::getFormDataSource(this.parmArgs().record());

            if (bankChequeTable_ds.anyMarked())
            {
                bankChequeTable = bankChequeTable_ds.getFirst(1);

                while (bankChequeTable)
                {
                    if (bankChequeTable.ChequeStatus == ChequeStatus::Payment && bankChequeTable.AmountCur != 0)
                    {
                        this.fillTmpChequePrintout();
                    }

                    bankChequeTable = bankChequeTable_ds.getNext();
                }
            }
            else
            {
                bankChequeTable = bankChequeTable_ds.cursor();
                this.fillTmpChequePrintout();
            }
        }

        return tmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpChequePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>TmpChequePrintout</c> table buffer.
    /// </summary>
    [Wrappable(true)]
    protected final void fillTmpChequePrintout()
    {
        ChequeSlipTxt slipTxt;
        Counter slipLines;
        Counter totalBankChequePaymTransLines;
        Counter startLines;
        Counter endLines;
        boolean firstChequePage = true;

        this.getRecipientInfo();

        CompanyBankAccountId accountId = bankChequeTable.AccountID;
        BankChequeLayout bankChequeLayout = BankChequeLayout::find(accountId);

        CustVendChequeSlipTextCalculator slipTextCalculator = CustVendChequeSlipTextCalculator::construct(bankChequeLayout);

        slipLines = slipTextCalculator.calculateSlipTextLines();

        startLines = 0;
        bankChequePaymTransLines = 0;
        totalBankChequePaymTransLines = this.getTotalSlipLineCount(slipLines);

        if (slipLines < slipTextCalculator.getMinimumSlipLines(bankChequeLayout.ChequeFormType))
        {
            totalBankChequePaymTransLines = 0;
        }

        while (bankChequePaymTransLines < totalBankChequePaymTransLines || totalBankChequePaymTransLines == 0)
        {
            tmpChequePrintout.clear();

            this.fillTmpChequePrintoutAddress();

            this.fillTmpChequePrintoutChequeSlipText(slipTextCalculator, bankChequeLayout);

            tmpChequePrintout.ChequeNum = bankChequeTable.ChequeNum;

            if (firstChequePage)
            {
                firstChequePage = false;
                this.fillTmpChequePrintoutFirstChequePage(bankChequeLayout, slipTextCalculator);
            }

            this.fillTmpChequePrintoutFromBankChequeTable();

            this.setNonNegotiableCheckFields(bankChequeLayout);

            if (slipTextCalculator.getNumOfSlips() > 0 && bankChequeLayout.ChequeFormType != ChequeFormType::FRStyle)
            {
                if (totalBankChequePaymTransLines > 0)
                {
                    [slipTxt, bankChequePaymTransLines, endLines] = slipTextCalculator.fillSlipText(
                        bankChequeTable,
                        startLines,
                        slipLines,
                        totalBankChequePaymTransLines,
                        bankChequeLayout.ChequeFormType);

                    tmpChequePrintout.SlipTxt = slipTxt;
                }
            }
            else
            {
                totalBankChequePaymTransLines = -1;
            }

            if (endLines > 1)
            {
                tmpChequePrintout.SlipTxt += strRep('\n', endLines - 1);
            }

            tmpChequePrintout.insert();

            startLines = bankChequePaymTransLines;

            if (totalBankChequePaymTransLines == 0)
            {
                totalBankChequePaymTransLines = -1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpChequePrintoutFromBankChequeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill <c>TmpChequePrintout</c> table buffer with details from <c>BankChequeTable</c> table buffer.
    /// </summary>
    protected void fillTmpChequePrintoutFromBankChequeTable()
    {
        tmpChequePrintout.AccountId = bankChequeTable.AccountID;
        tmpChequePrintout.TransDate = bankChequeTable.TransDate;
        tmpChequePrintout.MaturityDate = bankChequeTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpChequePrintoutChequeSlipText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the slip text details on <c>TmpChequePrintout</c> table buffer from <c>CustVendChequeSlipTextCalculator</c> class instance and <c>BankChequeLayout</c> table buffer.
    /// </summary>
    /// <param name = "_slipTextCalculator">
    /// <c>CustVendChequeSlipTextCalculator</c> class instance used to calculate and fill slip text information on <c>TmpChequePrintout</c> table buffer.
    /// </param>
    /// <param name = "_bankChequeLayout">
    /// <c>BankChequeLayout</c> table buffer used to fill the <c>ChequeFormType</c> field on the <c>TmpChequePrintout</c> table buffer.
    /// </param>
    protected void fillTmpChequePrintoutChequeSlipText(CustVendChequeSlipTextCalculator _slipTextCalculator, BankChequeLayout _bankChequeLayout)
    {
        tmpChequePrintout.NumOfSlips = _slipTextCalculator.getNumOfSlips();
        tmpChequePrintout.SlipTop1 = _slipTextCalculator.getSlipTop1();
        tmpChequePrintout.SlipTop2 = _slipTextCalculator.getSlipTop2();
        tmpChequePrintout.ChequeTop = _slipTextCalculator.getChequeTop();
        tmpChequePrintout.ChequeTopDrop = _slipTextCalculator.getChequeTopDrop();
        tmpChequePrintout.ChequeFormType = _bankChequeLayout.ChequeFormType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpChequePrintoutFirstChequePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the first page details on <c>TmpChequePrintout</c> table buffer.
    /// </summary>
    /// <param name = "_bankChequeLayout">
    /// <c>BankChequeLayout</c> table buffer used to fill the <c>TmpChequePrintout</c> table buffer.
    /// </param>
    /// <param name = "_slipTextCalculator">
    /// <c>CustVendChequeSlipTextCalculator</c> class instance used to calculate and fill number of row per page on <c>TmpChequePrintout</c> table buffer.
    /// </param>
    protected void fillTmpChequePrintoutFirstChequePage(BankChequeLayout _bankChequeLayout, CustVendChequeSlipTextCalculator _slipTextCalculator)
    {
        Currency currency = Currency::find(bankChequeTable.CurrencyCode);
        AmountCur amountCur = bankChequeTable.AmountCur;
        BankAccountTable bankAccountTable = BankAccountTable::find(bankChequeTable.AccountID);

        tmpChequePrintout.BankName = _bankChequeLayout.BankName ? bankAccountTable.Name : '';
        tmpChequePrintout.RegistrationNum = _bankChequeLayout.BankNum ? bankAccountTable.RegistrationNum : '';
        tmpChequePrintout.AccountNum = _bankChequeLayout.BankNum ? bankAccountTable.AccountNum : '';
        tmpChequePrintout.micrLine = _bankChequeLayout.micrLine;

        tmpChequePrintout.AmountCur = amountCur;
        tmpChequePrintout.Numerals2Letter = amountCur != 0 ? numeralsToTxt(amountCur) : '';
        tmpChequePrintout.CurrencyTxt = currency.Txt;
        tmpChequePrintout.CurrencyCode = currency.CurrencyCode;
        tmpChequePrintout.setChequeAmount(bankChequeTable.AmountCur, _bankChequeLayout.ChequeFormType, currency, _bankChequeLayout, vendTable, null);

        tmpChequePrintout.RowNumberPerPage = _slipTextCalculator.getRowNumberPerPage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpChequePrintoutAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the remittance address on <c>TmpChequePrintout</c> from <c>BankChequeTable</c> or <c>VendTable</c>. 
    /// </summary>
    protected void fillTmpChequePrintoutAddress()
    {
        LogisticsPostalAddress address;

        if (bankChequeTable.RemittanceAddress)
        {
            address = LogisticsPostalAddress::findRecId(bankChequeTable.RemittanceAddress);
            tmpChequePrintout.RecipientName = LogisticsLocation::locationNameFromRecId(address.Location);
        }
        else
        {
            RemittanceLocation remittanceLocation = VendTable::getDefaultRemittanceLocation(vendTable.AccountNum, vendTable.dataAreaId);

            if (remittanceLocation)
            {
                LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(remittanceLocation);
                address = location.getPostalAddress(false);
                tmpChequePrintout.RecipientName = location.parmLocationDescription();
            }
            else if(bankChequeTable.RecipientType == BankChequeRecipientType::Ledger)
            {
                tmpChequePrintout.RecipientName = bankChequeTable.BankNegInstRecipientName;
            }
            else
            {
                address = vendTable.postalAddress();
                tmpChequePrintout.RecipientName = vendTable.name();
            }
        }

        tmpChequePrintout.Address = address.Address;
        tmpChequePrintout.CountryRegionId = address.CountryRegionId;
        tmpChequePrintout.State = address.State;
        tmpChequePrintout.County = address.County;
        tmpChequePrintout.Street = address.Street;
        tmpChequePrintout.City = address.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecipientInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the check recipient information to display on the checks.
    /// </summary>
    private void getRecipientInfo()
    {
        changecompany(bankChequeTable.RecipientCompany)
        {
            switch (bankChequeTable.RecipientType)
            {
                case BankChequeRecipientType::Vend:
                    vendTable = VendTable::find(bankChequeTable.RecipientAccountNum);
                    break;
                case BankChequeRecipientType::Ledger:
                    MainAccount mainAccount  = MainAccount::findByMainAccountId(bankChequeTable.RecipientAccountNum);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSlipLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the count of invoices settled against the current payment.
    /// </summary>
    /// <param name="_slipLines">
    /// An integer value that specifies how many lines can be printed on one page of a check report.
    /// </param>
    /// <returns>
    /// An integer value that indicates the total invoice settled.
    /// </returns>
    private Counter getTotalSlipLineCount(Counter _slipLines)
    {
        Counter totalSlipLineCount;

        totalSlipLineCount = BankChequePaymTrans::getInvoiceCount(bankChequeTable.ChequeNum, bankChequeTable.AccountID);

        // for slip line min space required is 3 lines
        if (_slipLines < 3)
        {
            totalSlipLineCount = 0;
        }

        return totalSlipLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankChequeTable</Name>
				<Source><![CDATA[
    public BankChequeTable parmBankChequeTable(BankChequeTable _bankChequeTable = bankChequeTable)
    {
        bankChequeTable = _bankChequeTable;
        return bankChequeTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>