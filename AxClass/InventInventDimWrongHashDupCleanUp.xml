<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventDimWrongHashDupCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventInventDimWrongHashDupCleanUp</c> class is used to correct records that are referencing <c>InventDim</c> records that are incorrectly hashed and have a duplicate <c>InventDim</c> record.
/// </summary>
public class InventInventDimWrongHashDupCleanUp
{
    #OCCRetryCount

    Map                                 inconsistentDimMap;
    CheckFix                            checkFix;
    InventDimIdFieldReferenceProvider   inventDimIdFieldReferenceProvider;
    Counter                             totalNumOfUpdatedRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIncorrectDimEnumerator</Name>
				<Source><![CDATA[
    private MapEnumerator getIncorrectDimEnumerator()
    {
        return inconsistentDimMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTableForGenericProcessing</Name>
				<Source><![CDATA[
    private boolean includeTableForGenericProcessing(TableId _tableId)
    {
        boolean includeTable = true;

        switch (_tableId)
        {
            case tableNum(InventSum)        :   //fallthrough
            case tableNum(WHSInventReserve) :   //fallthrough
            case tableNum(InventDim)        :   //fallthrough
            case tableNum(InventDimCleanUp) :
                includeTable = false;
                break;

            default:
                break;
        }

        return includeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseTotalNumOfUpdatedRecords</Name>
				<Source><![CDATA[
    private void increaseTotalNumOfUpdatedRecords(Counter _addCount)
    {
        totalNumOfUpdatedRecords += _addCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoInconsistentInventDims</Name>
				<Source><![CDATA[
    private void infoInconsistentInventDims()
    {
        MapEnumerator me = this.getIncorrectDimEnumerator();
        while (me.moveNext())
        {
            InventDimId inventDimId = me.currentKey();
            if (InventDim::useHash3())
            {
                warning(strFmt("@SYP5070051", inventDimId, fieldId2pname(tableNum(InventDim), fieldNum(InventDim,SHA3HashHex))));
            }
            else
            {
                warning(strFmt("@SYP5070051", inventDimId, fieldId2pname(tableNum(InventDim), fieldNum(InventDim,SHA1HashHex))));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInconsistentDimMap</Name>
				<Source><![CDATA[
    private void initInconsistentDimMap()
    {
        inconsistentDimMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckFix</Name>
				<Source><![CDATA[
    public CheckFix parmCheckFix(CheckFix _checkFix = checkFix)
    {
        checkFix = _checkFix;

        return checkFix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimIdFieldReferenceProvider</Name>
				<Source><![CDATA[
    public InventDimIdFieldReferenceProvider parmInventDimIdFieldReferenceProvider(InventDimIdFieldReferenceProvider _inventDimIdFieldReferenceProvider = inventDimIdFieldReferenceProvider)
    {
        inventDimIdFieldReferenceProvider = _inventDimIdFieldReferenceProvider;

        return inventDimIdFieldReferenceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInconsistentInventDimMap</Name>
				<Source><![CDATA[
    private void populateInconsistentInventDimMap()
    {
        this.initInconsistentDimMap();

        Query query = new Query();
        QueryBuildDataSource inventDimDS = query.addDataSource(tableNum(InventDim));
        QueryBuildDataSource inventDimDupDS = inventDimDS.addDataSource(tableNum(InventDim));
        inventDimDupDS.joinMode(JoinMode::ExistsJoin);
        inventDimDupDS.addRange(fieldNum(InventDim, InventDimId)).value(strfmt('(%1.%3 != %2.%3)', inventDimDS.name(), inventDimDupDS.name(), fieldStr(InventDim, InventDimId)));
        
        Enumerator enum = InventDim::dimFieldListEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.current();
            inventDimDupDS.addLink(fieldId, fieldId);
        }

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventDim inventDim = queryRun.get(tableNum(InventDim), 1);
            //going through the findDim api should return us the inventDim with the correct hashKey
            InventDim inventDimCorrect = InventDim::findDim(inventDim);

            //this is an incorrectly hashed dim
            if (InventDim::useHash3())
            {
                if (inventDim.SHA3HashHex != inventDimCorrect.SHA3HashHex)
                {
                    inconsistentDimMap.insert(inventDim.inventDimId, inventDimCorrect.inventDimId);
                }
            }
            else if (inventDim.SHA1HashHex != inventDimCorrect.SHA1HashHex)
            {
                inconsistentDimMap.insert(inventDim.inventDimId, inventDimCorrect.inventDimId);                
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic to identify and correct the records that are referencing the incorrectly hashed <c>InventDim</c> records.
    /// </summary>
    /// <returns>
    /// The number of <c>InventDim</c> records that are incorrectly hashed and have an duplicate <c>InventDim</c> record that is correctly hashed.
    /// </returns>
    public container run()
    {
        this.populateInconsistentInventDimMap();

        if (inconsistentDimMap.elements())
        {
            this.updateDimFieldValues();

            this.updateInventSum();

            this.updateWHSInventReserve();

            this.infoInconsistentInventDims();
        }

        return [inconsistentDimMap.elements(), totalNumOfUpdatedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimFieldValueInTable</Name>
				<Source><![CDATA[
    private void updateDimFieldValueInTable(
            tableId _tableId,
            fieldId _inventDimFieldId)
    {
        InventDimID         inventDimIdCorrectHash;
        Counter             correctedRecords;

        Common common = SysDictTable::newTableId(_tableId).makeRecord();
        common.selectForUpdate(CheckFix == CheckFix::Fix);

        if (DictTable::construct(tableId2name(_tableId)).isValidTimeStateTable())
        {
            common.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        }

        MapEnumerator me = this.getIncorrectDimEnumerator();

        while (me.moveNext())
        {
            try
            {
                //keeping tts scope limited to avoid locking to many records for a longer period
                ttsBegin;

                inventDimIdCorrectHash = me.currentValue();
                //we might not have an index that the query will benefit from so this may table scan but there is not really a way around it
                while select common
                        where common.(_inventDimFieldId) == me.currentKey()
                {
                    if (CheckFix == CheckFix::Fix)
                    {
                        common.(_inventDimFieldId) = inventDimIdCorrectHash;
                        common.doUpdate();
                    }
                    correctedRecords++;
                }

                ttsCommit;
            }
            //if a unique index contains inventDimId we might not be able to do the update and a special script like the updateInventSum is needed
            catch (Exception::DuplicateKeyException)
            {
                error(strFmt("@SYP5070052",
                                common.RecId,
                                tableId2name(_tableId),
                                inventDimIdCorrectHash,
                                methodStr(InventInventDimWrongHashDupCleanUp, updateInventSum)));
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }

        if (correctedRecords)
        {
            this.increaseTotalNumOfUpdatedRecords(correctedRecords);

            warning(strFmt("@SYP5070053", correctedRecords, tableId2name(_tableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimFieldValues</Name>
				<Source><![CDATA[
    private void updateDimFieldValues()
    {
        TableId         tableId;
        FieldId         inventDimidFieldId;

        if (!inventDimIdFieldReferenceProvider)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator inventDimIdFieldsEnumerator = inventDimIdFieldReferenceProvider.findInventDimIdFields().getEnumerator();

        while (inventDimIdFieldsEnumerator.moveNext())
        {
            [tableId, inventDimidFieldId] = inventDimIdFieldsEnumerator.current();

            if (this.includeTableForGenericProcessing(tableId))
            {
                this.updateDimFieldValueInTable(tableId, inventDimidFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventReserveQtyFromInventReserve</Name>
				<Source><![CDATA[
    private void updateInventReserveQtyFromInventReserve(
            WHSInventReserve _whsInventReserveUpdate,
            WHSInventReserve _whsInventReserveContribution)
    {
        _whsInventReserveUpdate.ReservPhysical      += _whsInventReserveContribution.reservPhysical;
        _whsInventReserveUpdate.ReservOrdered       += _whsInventReserveContribution.reservOrdered;
        _whsInventReserveUpdate.AvailPhysical       += _whsInventReserveContribution.availPhysical;
        _whsInventReserveUpdate.AvailOrdered        += _whsInventReserveContribution.availOrdered;
        _whsInventReserveUpdate.CWReservPhysical    += _whsInventReserveContribution.CWReservPhysical;
        _whsInventReserveUpdate.CWReservOrdered     += _whsInventReserveContribution.CWReservOrdered;
        _whsInventReserveUpdate.CWAvailPhysical     += _whsInventReserveContribution.CWAvailPhysical;
        _whsInventReserveUpdate.CWAvailOrdered      += _whsInventReserveContribution.CWAvailOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSum</Name>
				<Source><![CDATA[
    private void updateInventSum()
    {
        InventSum           inventSumWrong, inventSumCorrect;
        Counter             correctedSums;
        InventSumDelta      inventSumDelta;
        InventDimId         inventDimIdCorrect, inventDimIdWrong;

        boolean updateRecords = (CheckFix == CheckFix::Fix);

        MapEnumerator me = this.getIncorrectDimEnumerator();
        inventSumWrong.selectForUpdate(updateRecords);

        while (me.moveNext())
        {
            try
            {
                inventDimIdWrong = me.currentKey();

                //handle one incorrect set of transactions in a single scope to reduce SQL overhead
                ttsBegin;

                while select inventSumWrong
                        where inventSumWrong.InventDimId == inventDimIdWrong
                {
                    inventDimIdCorrect = me.currentValue();

                    inventSumCorrect = InventSum::find(inventSumWrong.ItemId, inventDimIdCorrect, updateRecords);

                    if (!inventSumCorrect.RecId)
                    {
                        if (updateRecords)
                        {
                            inventSumWrong.InventDimId = inventDimIdCorrect;
                            inventSumWrong.doUpdate();
                        }
                        warning(strFmt("@SYP5070054",tableStr(InventSum), inventSumWrong.ItemId, inventSumWrong.InventDimId, inventDimIdWrong));
                    }
                    else
                    {
                        if (updateRecords)
                        {
                            //go through delta api to correct sums
                            inventSumDelta.clear();
                            inventSumDelta.initFromInventSum(inventSumWrong);
                            inventSumCorrect.addInventSumDelta(inventSumDelta);
                            inventSumCorrect.update();

                            inventSumWrong.doDelete();
                        }
                        warning(strFmt("@SYP5070055", tableStr(InventSum), inventSumCorrect.ItemId, inventSumCorrect.InventDimId));
                        warning(strFmt("@SYP5070056", tableStr(InventSum), inventSumWrong.ItemId, inventSumWrong.InventDimId));
                    }

                    correctedSums++;
                }
                ttsCommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
        this.increaseTotalNumOfUpdatedRecords(correctedSums);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSInventReserve</Name>
				<Source><![CDATA[
    private void updateWHSInventReserve()
    {
        WHSInventReserve    whsInventReserveWrong, whsInventReserveCorrect;
        Counter             correctedSums;
        InventDimId         inventDimIdCorrect, inventDimIdWrong;

        boolean updateRecords = (CheckFix == CheckFix::Fix);
        whsInventReserveWrong.selectForUpdate(updateRecords);

        MapEnumerator me = this.getIncorrectDimEnumerator();

        while (me.moveNext())
        {
            try
            {
                inventDimIdWrong = me.currentKey();
                inventDimIdCorrect = me.currentValue();

                //handle one incorrect set of transactions in a single scope to reduce SQL overhead
                ttsBegin;

                while select whsInventReserveWrong
                        where whsInventReserveWrong.InventDimId == inventDimIdWrong
                {
                    whsInventReserveCorrect = WHSInventReserve::find(whsInventReserveWrong.ItemId, inventDimIdCorrect, updateRecords);

                    if (!whsInventReserveCorrect.RecId)
                    {
                        if (updateRecords)
                        {
                            whsInventReserveWrong.InventDimId = inventDimIdCorrect;
                            whsInventReserveWrong.doUpdate();
                        }
                        warning(strFmt("@SYP5070057", tableStr(WHSInventReserve), whsInventReserveWrong.ItemId, whsInventReserveWrong.InventDimId, inventDimIdWrong));
                    }
                    else
                    {
                        if (updateRecords)
                        {
                            this.updateInventReserveQtyFromInventReserve(whsInventReserveCorrect, whsInventReserveWrong);
                            whsInventReserveCorrect.update();

                            whsInventReserveWrong.doDelete();
                        }
                        warning(strFmt("@SYP5070055", tableStr(WHSInventReserve), whsInventReserveCorrect.ItemId, whsInventReserveCorrect.InventDimId));
                        warning(strFmt("@SYP5070056", tableStr(WHSInventReserve), whsInventReserveCorrect.ItemId, whsInventReserveWrong.InventDimId));
                    }

                    correctedSums++;
                }

                ttsCommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }

        this.increaseTotalNumOfUpdatedRecords(correctedSums);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventInventDimWrongHashDupCleanUp construct()
    {
        return new InventInventDimWrongHashDupCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventInventDimWrongHashDupCleanUp</c> class based on the parameters.
    /// </summary>
    /// <param name="_checkFix">
    /// The values determines if data should be corrected or not-
    /// </param>
    /// <param name="_inventDimIdFieldReferenceProvider">
    /// An instance of the <c>InventDimIdFieldReferenceProvider</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventInventDimWrongHashDupCleanUp</c> class
    /// </returns>
    public static InventInventDimWrongHashDupCleanUp newFromParameters(
            CheckFix                            _checkFix,
            InventDimIdFieldReferenceProvider  _inventDimIdFieldReferenceProvider)
    {
        InventInventDimWrongHashDupCleanUp cleanUp = InventInventDimWrongHashDupCleanUp::construct();

        cleanUp.parmCheckFix(_checkFix);
        cleanUp.parmInventDimIdFieldReferenceProvider(_inventDimIdFieldReferenceProvider);

        return cleanUp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>