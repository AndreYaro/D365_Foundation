<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSplitWorkController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSplitWorkController</c> class acts as a controller
/// for the <c>WHSSplitWorkService</c> service when splitting work
/// </summary>
internal class WHSSplitWorkController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@WAX:SplitWork";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromExecutionMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSSplitWorkController</c> class
    /// with the specified execution mode.
    /// </summary>
    /// <param name = "_executionMode">The execution mode.</param>
    /// <returns>
    /// A new instance of <c>WHSSplitWorkController</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSSplitWorkController newFromExecutionMode(SysOperationExecutionMode _executionMode)
    {
        WHSSplitWorkController controller = new WHSSplitWorkController(
                classStr(WHSSplitWorkService),
                methodStr(WHSSplitWorkService, splitWork),
                _executionMode);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateArgsRecord</Name>
				<Source><![CDATA[
    private static void validateArgsRecord(Args _args)
    {
        // The _args contains the selected lines passed from the WHSSplitWork display menu item
        // and the _args.caller().args() contains the information about the work table which was selected to be split from the
        // WHSWorkTable/WHSWorkTableListPage form.

        if (!_args.caller()
            || !_args.caller().args()
            || !_args.caller().args().record()
            || !(_args.caller().args().record() is WHSWorkTable)
            || !_args.record()
            || _args.record().TableId != tableNum(WHSWorkLine))
        {
            throw error(error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void main(Args _args)
    {
        WHSSplitWorkController::validateArgsRecord(_args);

        SysOperationExecutionMode executionMode = _args.parmEnum();

        WHSSplitWorkController controller = 
            WHSSplitWorkController::newFromExecutionMode(executionMode);

        controller.parmShowDialog(false);

        WHSSplitWorkController::populateControllerDataContract(controller, _args);        

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSelectedWorkLinesMapFromArgs</Name>
				<Source><![CDATA[
    private static Map createSelectedWorkLinesMapFromArgs(Args _args, WHSWorkId _workId)
    {
        WHSWorkLine workLineArgs = _args.record() as WHSWorkLine;

        FormDataSource dataSource = workLineArgs.dataSource();

        Map selectedWorkLines = new Map(Types::Integer, Types::Record);

        for (WHSWorkLine workLine = dataSource.getFirst(true) ? dataSource.getFirst(true) : dataSource.cursor();
            workLine;
            workLine = dataSource.getNext())
        {
            WHSSplitWorkController::validateWorkLineBelongsToWorkHeader(workLine, _workId);

            selectedWorkLines.insert(workLine.LineNum, workLine);
        }

        return selectedWorkLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkLineBelongsToWorkHeader</Name>
				<Source><![CDATA[
    private static void validateWorkLineBelongsToWorkHeader(WHSWorkLine _workLine,  WHSWorkId _workId)
    {
        if (_workLine.WorkId != _workId)
        {
            throw error("@WAX:WHSWorkLinesFromDifferentWorkHeaders");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateControllerDataContract</Name>
				<Source><![CDATA[
    private static void populateControllerDataContract(WHSSplitWorkController _controller, Args _args)
    {
        WHSWorkTable workTable = _args.caller().args().record() as WHSWorkTable;

        Map selectedWorkLines = WHSSplitWorkController::createSelectedWorkLinesMapFromArgs(_args, workTable.WorkId);

        _controller.getDataContractObject().parmSelectedWorkLines(selectedWorkLines);
        _controller.getDataContractObject().parmWorkId(workTable.WorkId);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>