<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventIncomeOutlayController_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller <c>InventIncomeOutlayController_RU</c> class for <c>InventIncomeOutlay_RU</c> report.
/// </summary>
public class InventIncomeOutlayController_RU extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get conditions from query
    /// </summary>
    /// <returns>
    /// The text conditions.
    /// </returns>
    private FreeText getConditions()
    {
        FreeText        retTxt;

        Query qr = this.getQuery();

        int countDatasource = qr.dataSourceCount();

        while ( countDatasource >0)
        {
            int countRange = qr.dataSourceNo(countDatasource).rangeCount();

            while (countRange > 0)
            {
                QueryBuildRange qbr = qr.dataSourceNo(countDatasource).range(countRange);
                if (qbr.value())
                {
                    DictField dictField = new DictField(qbr.table(),qbr.field());
                    if (retTxt)
                        retTxt += ' ';
                    retTxt += dictField.label() + ': ' + qbr.value();
                }
                countRange--;
            }
            countDatasource--;
        }

        return retTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the report controller query.
    /// </summary>
    /// <returns>
    /// The report controller query.
    /// </returns>
    public Query getQuery()
    {
        return this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method change report contract before run the report.
    /// </summary>
    public void preRunModifyContract()
    {
        super();
        InventIncomeOutlayContract_RU contract = this.parmReportContract().parmRdpContract() as InventIncomeOutlayContract_RU;
        contract.parmConditions(this.getConditions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>InventIncomeOutlayController_RU</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>InventIncomeOutlayController_RU</c> class.
    /// </param>
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00121, funcName());

        InventIncomeOutlayController_RU controller = new InventIncomeOutlayController_RU();
        controller.parmReportName(ssrsReportStr(InventIncomeOutlay_RU, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>