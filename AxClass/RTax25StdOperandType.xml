<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdOperandType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class rTax25StdOperandType
{
    RTax25StdExpressionLine expressionLine;

    FormDataSource          expressionLineDS;
    FormRun                 formRun;
    FormStringControl       controlRefIdFrom, controlRefIdTo;

    RTax25StdExpression     expression;
    TransDate               dateFrom;
    TransDate               dateTo;

    RTax25PeriodIterator    rTax25PeriodIterator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentBased</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean documentBased()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25StdRefId editTo(boolean                 _set,
                                 RTax25StdRefId          _refIdTo,
                                 RTax25StdExpressionLine _expressionLine)
    {
        if (_set)
        {
            _expressionLine.RefIdTo = _refIdTo;
        }

        return _expressionLine.RefIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void finalize()
    {
        ;
        formRun = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFrom</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupFrom()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupTo()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operand</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST operand()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpression</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25StdExpression parmExpression(RTax25StdExpression _expression = expression)
    {
        ;

        expression = _expression;
        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpressionLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25StdExpressionLine parmExpressionLine(RTax25StdExpressionLine _expressionLine = expressionLine)
    {
        expressionLine = _expressionLine;
        this.rangeDate(expression.dateFrom(), expression.dateTo());
        return expressionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormRun parmFormRun(FormRun _formRun)
    {
        Object  tmpFormRun;
        anytype anyNull = null;

        if (formRun != _formRun)
        {
            formRun = _formRun;
            tmpFormRun = _formRun;

            controlRefIdFrom = formHasMethod(_formRun, identifierStr(getControlRefIdFrom)) ?
                               tmpFormRun.getControlRefIdFrom()                            :
                               anyNull;

            controlRefIdTo   = formHasMethod(_formRun, identifierStr(getControlRefIdTo))   ?
                               tmpFormRun.getControlRefIdTo()                              :
                               anyNull;

            expressionLineDS = formHasMethod(_formRun, identifierStr(getDSExpressionLine)) ?
                               tmpFormRun.getDSExpressionLine()                            :
                               anyNull;

            expressionLine   = expressionLineDS ? expressionLineDS.cursor() : null;
        }

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeDate</Name>
				<Source><![CDATA[
#TimeConstants
    private void rangeDate(FromDate _dateFrom, ToDate _dateTo)
    {
        int         monthsPerPeriod,
                    periodNumber,
                    endPeriodMonth,
                    i;
        void calcDates()
        {
            periodNumber  = mthofyr(_dateTo) div monthsPerPeriod;
            if (periodNumber * monthsPerPeriod < mthofyr(_dateTo))
            {
                periodNumber++;
            }
            endPeriodMonth  = monthsPerPeriod * periodNumber;
            dateTo          = endmth(mkDate(1, endPeriodMonth, year(_dateTo)));

            for (i = 1; i <= abs(expressionLine.PeriodLag); i++)
            {
        switch (expressionLine.PeriodType)
        {
            case PeriodFrequency_RU::Month:
                        dateTo = expressionLine.PeriodLag > 0 ? nextMth(dateTo) : prevMth(dateTo);
                break;
            case PeriodFrequency_RU::Quarter:
                        dateTo = expressionLine.PeriodLag > 0 ? nextQtr(dateTo) : prevQtr(dateTo);
                break;
            case PeriodFrequency_RU::HalfYear:
                        dateTo = expressionLine.PeriodLag > 0 ? nextQtr(nextQtr(dateTo)) : prevQtr(prevQtr(dateTo));
                break;
            case PeriodFrequency_RU::Year:
                        dateTo = expressionLine.PeriodLag > 0 ? nextYr(dateTo) : prevYr(dateTo);
                break;
        }
                dateTo = endmth(dateTo);
            }
            dateFrom        = mkdate(1, mthofyr(dateTo) - monthsPerPeriod + 1, year(dateTo));
        }

            switch (expressionLine.PeriodType)
            {
            case PeriodFrequency_RU::None :
                dateFrom  = _dateFrom;
                dateTo    = _dateTo;
                break;
            case PeriodFrequency_RU::Accumulated:
                dateFrom  = mkDate(1, 1, year(_dateFrom));
                dateTo    = _dateTo;
                break;
                case PeriodFrequency_RU::Month:
                monthsPerPeriod = 1;
                calcDates();
                    break;
                case PeriodFrequency_RU::Quarter:
                monthsPerPeriod = #monthsPerQuarter;
                calcDates();
                    break;
                case PeriodFrequency_RU::HalfYear:
                monthsPerPeriod = #monthsPerHalfYear;
                calcDates();
                    break;
                case PeriodFrequency_RU::Year:
                monthsPerPeriod = #monthsPerYear;
                calcDates();
                    break;
            }

        rTax25PeriodIterator = RTax25PeriodFactory::createIteratorDateRange(dateFrom, dateTo, true);
    }
]]></Source>
			</Method>
			<Method>
				<Name>resultBased</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean resultBased()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateDesign()
    {
        controlRefIdFrom.enabled(true);
        controlRefIdTo.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateWrite()
    {
        expressionLine = expressionLineDS.cursor();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25StdOperandType newParameters(RTax25StdLineType _lineType)
    {
        RTax25StdOperandType    operandType;

        switch (_lineType)
        {
            case RTax25StdLineType::Line:
                operandType = new RTax25StdOperandType_Line();
                break;

            case RTax25StdLineType::Register:
                operandType = new RTax25StdOperandType_Register();
                break;

            case RTax25StdLineType::Qty,
                 RTax25StdLineType::Price:
                operandType = new RTax25StdOperandType_QtyPrice();
                break;

            case RTax25StdLineType::Constant:
                operandType = new RTax25StdOperandType_Constant();
                break;

            case RTax25StdLineType::Rate:
                operandType = new RTax25StdOperandType_Rate();
                break;

            case RTax25StdLineType::Profit:
                operandType = new RTax25StdOperandType_Profit();
                break;

            case RTax25StdLineType::DebActivity,
                 RTax25StdLineType::CredActivity,
                 RTax25StdLineType::DebBalance,
                 RTax25StdLineType::CredBalance:
                operandType = new RTax25StdOperandType_Ledger();
                break;

            case RTax25StdLineType::PayFund:
                operandType = new RTax25StdOperandType_PayFund();
                break;

            case RTax25StdLineType::DeferralsWritingOff:
                operandType = new RTax25StdOperandType_DeferralsWritingOff();
                break;
        }

        return operandType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        return dateNull();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>