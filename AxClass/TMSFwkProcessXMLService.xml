<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkProcessXMLService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Globalization;

/// <summary>
/// The <c>TMSFwkProcessXMLService</c> class processes transportation calculation request XMLs.
/// </summary>
public class TMSFwkProcessXMLService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkProcessXMLService construct()
    {
        return new TMSFwkProcessXMLService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a transportation calculation request.
    /// </summary>
    /// <param name = "requestXml">Request XML.</param>
    /// <returns>Response XML.</returns>
    public XML execute(XML requestXml)
    {
        XML result;
        System.Threading.Thread currentThread = System.Threading.Thread::CurrentThread;
        CultureInfo cachedCulture = currentThread.CurrentCulture;

        System.Exception ex;
        try
        {
            currentThread.set_CurrentCulture(CultureInfo::InvariantCulture);

            // figure out the type of transaction and delegate.
            TmsTransactionFacade tmsTransactionFacade = TmsTransactionFacade::newFromXml(requestXml);
            TMSFwkIBroker broker = TMSFwkBrokerFactory::createBroker(tmsTransactionFacade.parmCommunicationType());
            if (broker)
            {
                broker.execute(tmsTransactionFacade);
            }
            else
            {
                TMSException::ThrowException("@TRX2497");
            }

            result = tmsTransactionFacade.parmXTransaction().ToString();
        }
        catch (ex)
        {
            TMSException::ThrowException("@TRX2569", ex);
        }
        finally
        {
            TMSFwkRatingDtoHelper::ClearCache();
            currentThread.set_CurrentCulture(cachedCulture);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>