<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTransaction_Prod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTransaction_Prod</c> class allows for time and attendance to read and post changes to
///    production registrations.
/// </summary>
public class JmgTransaction_Prod extends JmgTransaction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the changes that are made in time and attendance back to the production registrations.
    /// </summary>
    /// <param name="_jmgChangeLog">
    /// A <c>JmgChangeLog</c> record that contains the changes to post.
    /// </param>
    /// <param name="_jmgPostStandardSystem">
    /// A reference to a <c>JmgPostStandardSystem</c> object that can be used in the posting of changed
    /// transactions.
    /// </param>
    /// <remarks>
    /// Changes on production transactions are posted using the <c>JmgPostStandardSystem</c> class.
    /// </remarks>
    public void postChange(JmgChangeLog _jmgChangeLog, JmgPostStandardSystem _jmgPostStandardSystem)
    {
        JmgStampJournalTrans    changedTrans;
        JmgStampJournalTrans    originalTrans;

        con2Buf(_jmgChangeLog.ChangedTransaction, changedTrans);
        con2Buf(changedTrans.OriginalTransaction, originalTrans);
        switch (_jmgChangeLog.ChangeLogType)
        {
            case JmgChangeLogType::Insert:
                _jmgPostStandardSystem.addJob(
                    JmgTermJob::construct(changedTrans.JobId),
                    JmgRegistrationParameters::constructJmgStampTransMap(changedTrans),
                    changedTrans);
                break;
            case JmgChangeLogType::Update:
                if (originalTrans.JobId             != changedTrans.JobId       ||
                    originalTrans.StartDate         != changedTrans.StartDate   ||
                    originalTrans.StartTime         != changedTrans.StartTime   ||
                    originalTrans.StopDate          != changedTrans.StopDate    ||
                    originalTrans.StopTime          != changedTrans.StopTime    ||
                    originalTrans.Seconds           != changedTrans.Seconds     ||
                    originalTrans.WrkCtrId          != changedTrans.WrkCtrId    ||
                    !DimensionDefaultFacade::areEqual(originalTrans.DefaultDimension, changedTrans.DefaultDimension) ||
                    changedTrans.JmgStampTransMap::getStampTrans())
                {
                    if (!this.skipChangeLog(originalTrans) && 
                        (originalTrans.JourRegType   == JmgJourRegTypeEnum::MrpOverlap       ||
                         originalTrans.JourRegType   == JmgJourRegTypeEnum::MrpProcess       ||
                         originalTrans.JourRegType   == JmgJourRegTypeEnum::MrpQueueAfter    ||
                         originalTrans.JourRegType   == JmgJourRegTypeEnum::MrpQueueBefore   ||
                         originalTrans.JourRegType   == JmgJourRegTypeEnum::MrpSetup         ||
                         originalTrans.JourRegType   == JmgJourRegTypeEnum::MrpTransport))
                    {
                        originalTrans.Seconds   = originalTrans.Seconds * -1;
                        _jmgPostStandardSystem.addJob(
                            JmgTermJob::construct(originalTrans.JobId),
                            JmgRegistrationParameters::constructJmgStampTransMap(originalTrans),
                            originalTrans);
                    }
                    if (changedTrans.JourRegType    == JmgJourRegTypeEnum::MrpOverlap       ||
                        changedTrans.JourRegType    == JmgJourRegTypeEnum::MrpProcess       ||
                        changedTrans.JourRegType    == JmgJourRegTypeEnum::MrpQueueAfter    ||
                        changedTrans.JourRegType    == JmgJourRegTypeEnum::MrpQueueBefore   ||
                        changedTrans.JourRegType    == JmgJourRegTypeEnum::MrpSetup         ||
                        changedTrans.JourRegType    == JmgJourRegTypeEnum::MrpTransport)
                    {
                        _jmgPostStandardSystem.addJob(
                            JmgTermJob::construct(changedTrans.JobId),
                            JmgRegistrationParameters::constructJmgStampTransMap(changedTrans),
                            changedTrans);
                    }
                }
                break;
            case JmgChangeLogType::Delete:
                if (!this.skipChangeLog(originalTrans))
                {
                    originalTrans.Seconds = originalTrans.Seconds * -1;
                    _jmgPostStandardSystem.addJob(
                        JmgTermJob::construct(originalTrans.JobId),
                        JmgRegistrationParameters::constructJmgStampTransMap(originalTrans),
                        originalTrans);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipChangeLog</Name>
				<Source><![CDATA[
    public boolean skipChangeLog(JmgStampJournalTrans stampJournalTrans)
    {
        ProdRoute       route;
        ProdRouteJob    job;

        select firstonly RecId from job
            where job.JobId   == stampJournalTrans.JobId
                && job.ProdId == stampJournalTrans.JobRef;

        select firstonly RecId from route
            where route.ProdId == stampJournalTrans.JobRef
               && ((stampJournalTrans.JourRegType     == JmgJourRegTypeEnum::MrpProcess && route.JobIdProcess == stampJournalTrans.JobId)
                   || (stampJournalTrans.JourRegType  == JmgJourRegTypeEnum::MrpSetup   && route.JobIdSetup   == stampJournalTrans.JobId));

        return job.RecId == 0 && route.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static JmgTransaction_Prod construct()
    {
        return new JmgTransaction_Prod();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>