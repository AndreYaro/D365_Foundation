<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerUpdateConsTaxReport_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the tax amount for report.
/// </summary>
class LedgerUpdateConsTaxReport_JP extends TaxCalcReportFields_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LedgerUpdateConsTaxReport_JP construct()
    {
        return new LedgerUpdateConsTaxReport_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        LedgerUpdateConsTaxReport_JP ledgerUpdateConsTaxReport_JP = new LedgerUpdateConsTaxReport_JP();

        LedgerUpdateConsTaxReport_JP::runOnServer(ledgerUpdateConsTaxReport_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update the current record or insert a new record into the <c>ledgerConsumptionTaxReportTrans_JP</c> table if version is less than 2.
    /// </summary>
    /// <param name="_ledgerUpdateConsTaxReport">
    /// The record value of LedgerUpdateConsTaxReport_JP.
    /// </param>
    static public void runOnServer(LedgerUpdateConsTaxReport_JP _ledgerUpdateConsTaxReport)
    {
        TaxReportByCode_JP                  localTaxReportByCode_JP;
        LedgerConsumptionTaxReportTrans_JP  ledgerConsumptionTaxReportTrans_JP;
        #COSNumbers

        ttsbegin;

        TaxCalcReportFields_JP::getBadDebtLedgerDimension(_ledgerUpdateConsTaxReport);

        while select forupdate InterimFrom, PeriodOfTaxationFrom, InterimTo, PeriodOfTaxationTo, CalcMethod, TypeOfDeclaration, TaxValue from ledgerConsumptionTaxReportTrans_JP
            exists join PeriodOfTaxationFrom,PeriodOfTaxationTo,CalcMethod,TypeOfDeclaration,SettlementPeriod
                from localTaxReportByCode_JP
                    where ((ledgerConsumptionTaxReportTrans_JP.InterimFrom == localTaxReportByCode_JP.PeriodOfTaxationFrom
                        && ledgerConsumptionTaxReportTrans_JP.InterimTo == localTaxReportByCode_JP.PeriodOfTaxationTo)
                        || (ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationFrom == localTaxReportByCode_JP.PeriodOfTaxationFrom
                        && ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationTo == localTaxReportByCode_JP.PeriodOfTaxationTo))
                        && ledgerConsumptionTaxReportTrans_JP.TypeOfDeclaration == localTaxReportByCode_JP.TypeOfDeclaration
                        && ledgerConsumptionTaxReportTrans_JP.TaxValue == localTaxReportByCode_JP.TaxValue
        {
            if (ledgerConsumptionTaxReportTrans_JP.Version < TaxRepVersion::Latest)
            {
                ledgerConsumptionTaxReportTrans_JP.Version = TaxRepVersion::Correct;
                ledgerConsumptionTaxReportTrans_JP.update();
            }

            if (ledgerConsumptionTaxReportTrans_JP.Version < TaxRepVersion::Latest)
            {
                _ledgerUpdateConsTaxReport.insertOrUpdateInConsTaxReport(localTaxReportByCode_JP.PeriodOfTaxationFrom,
                                               localTaxReportByCode_JP.PeriodOfTaxationTo,
                                               localTaxReportByCode_JP.SettlementPeriod,
                                               localTaxReportByCode_JP.TypeOfDeclaration,
                                               localTaxReportByCode_JP.CalcMethod,
                                               localTaxReportByCode_JP.Apellative);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>