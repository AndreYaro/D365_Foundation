<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclarationController_AT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller of ER VAT declaration file generation.
/// </summary>
[SysObsolete('This class is no longer used.', true, 01\12\2022)]
public class VATDeclarationController_AT extends ERFormatMappingRunBaseController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main thread of the controller class <c>VATDeclarationController_AT</c>.
    /// </summary>
    /// <param name = "args">Current args.</param>
    public static void main(Args args)
    {
        VATDeclarationController_AT operation;

        operation = new VATDeclarationController_AT(
            classStr(VATDeclarationService_AT),
            methodStr(VATDeclarationService_AT, generateXml),
            SysOperationExecutionMode::Synchronous);

        operation.parmDialogCaption("@SYS57923");

        operation.prePromptModifyContract(args);

        operation.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares for data contract for Austria.
    /// </summary>
    /// <param name = "_args">Current args.</param>
    /// <exception cref="Exception::Error">
    /// The contract <c>VATDeclaraitonContract_W</c> is null, so cannot call its methods.
    /// </exception>
    protected void prePromptModifyContract(Args _args)
    {
        VATDeclaraitonContract_W contract = this.getDataContractObject() as VATDeclaraitonContract_W;

        if (contract)
        {
            TmpTaxReportById tmpTaxReportById;

            if (_args && _args.dataset() == tableNum(TaxReportVoucher))
            {
                TaxReportVoucher taxReportVoucher = _args.record();
                tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(taxReportVoucher.FromDate,taxReportVoucher.ToDate,taxReportVoucher.TaxPeriod,taxReportVoucher.TaxRepVersion,taxReportVoucher.TaxRepCounter);
                contract.parmFromDate(taxReportVoucher.FromDate);
                contract.parmToDate(taxReportVoucher.ToDate);
                contract.parmTransDate(taxReportVoucher.TransDate);
                contract.parmTaxPeriod(taxReportVoucher.TaxPeriod);
                contract.parmVoucher(taxReportVoucher.Voucher);
            }
            else if (_args &&
                (classIdGet(_args.parmObject()) == classNum(TaxReport) ||
                 classIdGet(_args.parmObject()) == classNum(TaxReportAdjustTrans)))
            {
                TaxReportPeriod taxReportPeriod = _args.record();
                TaxReport taxReport = _args.parmObject();
                tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(taxReport.fromDate(),taxReport.toDate(),taxReport.taxPeriod(),taxReport.taxRepVersion(),0,taxReport.update());
                contract.parmFromDate(taxReport.fromDate());
                contract.parmToDate(taxReport.toDate());
                contract.parmTransDate(taxReport.transDate());
                contract.parmTaxPeriod(taxReportPeriod.TaxPeriod);
            }

            contract.parmTaxAuthorityAddressing(this.taxAuthorityAddressing(contract.parmTaxPeriod()));
            contract.parmQuarterly(this.isQuarterly(contract.parmTaxPeriod()));

            if (TaxParameters::find().ReportAdjustment)
            {
                this.calcAdjustments(contract, tmpTaxReportById);
            }

            contract.parmNumberSequence(NumberSeq::newGetVoucher(TaxParameters::numRefTaxReportingVoucherXML(), false).voucher());
            contract.parmTmpTaxReportById(tmpTaxReportById);

            if (year(contract.parmToDate()) >= 2012)
            {
                contract.parmUse2012Format(true);
            }

            if (year(contract.parmToDate()) >= 2016)
            {
                contract.parmUse2016Format(true);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates adjustments for reporting codes.
    /// </summary>
    /// <param name = "_contract">The current contract.</param>
    /// <param name = "_tmpTaxReportById">The temparory table <c>TmpTaxReportById</c>.</param>
    private void calcAdjustments(VATDeclaraitonContract_W _contract, TmpTaxReportById _tmpTaxReportById)
    {
        TmpTaxReportById adjustments;
        TaxReportAdjustmentTrans taxReportAdjustmentTrans;
        TaxReportPeriod taxReportPeriodPrevious;
        FromDate fromDate = _contract.parmFromDate();
        TransDate transDate = _contract.parmTransDate();
        TaxPeriod taxPeriod = _contract.parmTaxPeriod();
        Voucher voucher = _contract.parmVoucher();

        if (voucher)
        {
            while select FromDate, ToDate, TaxPeriod, TaxVersion from taxReportAdjustmentTrans
            where taxReportAdjustmentTrans.Voucher   == voucher &&
                  taxReportAdjustmentTrans.TransDate == transDate &&
                  taxReportAdjustmentTrans.TaxPeriod == taxPeriod
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportAdjustmentTrans.FromDate,
                                                                  taxReportAdjustmentTrans.ToDate,
                                                                  taxReportAdjustmentTrans.TaxPeriod,
                                                                  TaxRepVersion::Original,
                                                                  taxReportAdjustmentTrans.TaxVersion);
                TaxTrans::insertAdjustmentInTmpTaxReportById(_tmpTaxReportById, adjustments);
            }
        }
        else
        {
            while select FromDate, ToDate, TaxPeriod, VersionNum from  taxReportPeriodPrevious
            where taxReportPeriodPrevious.TaxPeriod == taxPeriod &&
                  taxReportPeriodPrevious.FromDate  < fromDate   &&
                  taxReportPeriodPrevious.VersionNum > 0
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportPeriodPrevious.FromDate,
                                                                  taxReportPeriodPrevious.ToDate,
                                                                  taxReportPeriodPrevious.TaxPeriod,
                                                                  TaxRepVersion::Original,
                                                                  taxReportPeriodPrevious.VersionNum);
                TaxTrans::insertAdjustmentInTmpTaxReportById(_tmpTaxReportById, adjustments);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuarterly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is quarterly by given tax period.
    /// </summary>
    /// <param name = "_taxPeriod">The tax period.</param>
    /// <returns>True if it is quarterly, false otherwise.</returns>
    private boolean isQuarterly(TaxPeriod _taxPeriod)
    {
        TaxPeriodHead taxPeriodHead = TaxPeriodHead::find(_taxPeriod);

        boolean quarterly = false;

        if (taxPeriodHead.PeriodUnit == PeriodUnit::Month &&
            taxPeriodHead.QtyUnit    == 3)
        {
            quarterly = true;
        }

        return quarterly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAuthorityAddressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax authority addressing.
    /// </summary>
    /// <param name = "_taxPeriod">The tax period.</param>
    /// <returns>The address of the tax authority.</returns>
    private Addressing taxAuthorityAddressing(TaxPeriod _taxPeriod)
    {
        TaxPeriodHead taxPeriodHead = TaxPeriodHead::find(_taxPeriod);
        TaxAuthorityAddress taxAuthorityAddress = TaxAuthorityAddress::find(taxPeriodHead.TaxAuthority);
        LogisticsPostalAddress postalAddress =  LogisticsLocationEntity::location2PostalAddress(taxAuthorityAddress.Location);

        return postalAddress.Street + '\n' + postalAddress.ZipCode + ' ' + postalAddress.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>