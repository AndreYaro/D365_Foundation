<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendGeneralTopPickingInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendGeneralTopPickingInitializer extends RunBaseBatch implements BatchRetryable
{
    private ClassId classId;
    private container headPayload;
    private const int CurrentVersion = 1;
    private Object instance;
    private RecId headRecId;
    private const str EntryPointNameQuery = methodStr(ICustVendGeneralTopPickingRun, queryTopPickingList);
    private const str EntryPointNameExecute = methodStr(ICustVendGeneralTopPickingRun, methodToExecute);
    private CustVendGeneralTopPickingLogger custVendGeneralTopPickingLogger;
    private container callerPacked;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, classId, headPayload, headRecId, callerPacked];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        int version = RunBase::getVersion(_packed);
        switch (version)
        {
            case CurrentVersion:
                [version, classId, headPayload, headRecId, callerPacked] = _packed;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(ClassId _classId, container _headPayload, RecId _headRecId, container _callerPacked)
    {
        super();
        classId = _classId;
        headPayload = _headPayload;
        headRecId = _headRecId;
        callerPacked = _callerPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        custVendGeneralTopPickingLogger = CustVendGeneralTopPickingLogger::createLogger();
        using (var runActivityContext = custVendGeneralTopPickingLogger.activityContextWithCustomProperties(CustVendGeneralTopPickingInstrumentationConstants::CustVendGeneralTopPickingInitialPhase))
        {
            runActivityContext.addCustomProperty(
                CustVendGeneralTopPickingInstrumentationConstants::IsTTSLevelZero,
                CustVendGeneralTopPickingLogger::bool2str(appl.ttsLevel() == 0));
            List result = this.getItemsToPopulate();
            custVendGeneralTopPickingLogger.logInformation(strFmt('%1 working unit returned', int2Str(result.elements())));
            str entryPoint = this.getEntryPoint();
            ttsbegin;
            this.populateDetails(result, headRecId, entryPoint);
            ttscommit;
            custVendGeneralTopPickingLogger.logInformation(strFmt('%1 working unit populated', int2Str(result.elements())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDetails</Name>
				<Source><![CDATA[
    private void populateDetails(List _itemList, RecId _parentId, str _entryPoint)
    {
        CustVendGeneralTopPickingItems custVendGeneralTopPickingItems;
        ListEnumerator enumerator = _itemList.getEnumerator();
        while (enumerator.moveNext())
        {
            container curPayload = enumerator.current();
            custVendGeneralTopPickingItems.clear();
            custVendGeneralTopPickingItems.ClassId = classId;
            custVendGeneralTopPickingItems.WorkingPayload = curPayload;
            custVendGeneralTopPickingItems.ProcessingStatus = CustVendGeneralTopPickingProcessingStatus::Initial;
            custVendGeneralTopPickingItems.CustVendGeneralTopPickingHeader = _parentId;
            custVendGeneralTopPickingItems.EntryPoint = _entryPoint;
            custVendGeneralTopPickingItems.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemsToPopulate</Name>
				<Source><![CDATA[
    private List getItemsToPopulate()
    {
        SysDictClass dictClass = new SysDictClass(classId);
        return dictClass.callObject(EntryPointNameQuery, this.getInstanceByClassId(), headPayload);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntryPoint</Name>
				<Source><![CDATA[
    private str getEntryPoint()
    {
        SysDictClass dictClass = new SysDictClass(classId);
        return dictClass.callObject(EntryPointNameExecute, this.getInstanceByClassId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstanceByClassId</Name>
				<Source><![CDATA[
    private Object getInstanceByClassId()
    {
        if (!instance)
        {
            SysDictClass dictClass = new SysDictClass(classId);
            instance = dictClass.makeObject();
        }
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        SysDictClass dictClass = new SysDictClass(classId);
        if (dictClass.hasObjectMethod(methodStr(Runbase, unpack)) && dictClass.hasObjectMethod(methodStr(Runbase, dialog)))
        {
            dictClass.callObject(methodStr(Runbase, unpack), this.getInstanceByClassId(), callerPacked);
            Dialog dialog = dictClass.callObject(methodStr(Runbase, dialog), this.getInstanceByClassId());
            this.addNavigation(dialog);
            return dialog;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNavigation</Name>
				<Source><![CDATA[
    private void addNavigation(Dialog _dialog)
    {
        DialogGroup dialogGroup = _dialog.addGroup();
        FormBuildButtonControl formBuildButtonControl = dialogGroup.formBuildGroup().addControl(FormControlType::Button, 'Navigate');
        formBuildButtonControl.text("@CashManagement:NavigateToDetails");
        formBuildButtonControl.registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(CustVendGeneralTopPickingInitializer, navigateToTopPicking), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToTopPicking</Name>
				<Source><![CDATA[
    public void navigateToTopPicking(FormButtonControl _buttonControl)
    {
        CustVendGeneralTopPickingHeader custVendGeneralTopPickingHeader = CustVendGeneralTopPickingHeader::find(headRecId);
        Args args = new Args(formStr(CustVendGeneralTopPickingRunnerForm));
        args.record(custVendGeneralTopPickingHeader);
        FormRun formRun = New FormRun(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@CashManagement:TopPickingInitializer";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>