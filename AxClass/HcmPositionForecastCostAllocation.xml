<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCostAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Allocates the forecast position budget cost lines based on the cost element allocation option.
/// </summary>
public class HcmPositionForecastCostAllocation
{
    public ValidFromDate            allocationPeriodStartDateArray[];

    private ValidFromDate           allocationStartDate;
    private ValidToDate             allocationEndDate;
    private HcmFullTimeEquivalency  allocationPositionForecastFTE;
    private CurrencyCode            allocationPositionCurrencyCode;
    private Amount                  allocationPeriodRate;
    private Amount                  allocationDailyRate;
    private NumberOf                allocationTotalPeriods;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAllocationEndDate</Name>
				<Source><![CDATA[
    public ValidToDate parmAllocationEndDate(ValidToDate _allocationEndDate = allocationEndDate)
    {
        allocationEndDate = _allocationEndDate;

        return allocationEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationStartDate</Name>
				<Source><![CDATA[
    public ValidFromDate parmAllocationStartDate(ValidFromDate _allocationStartDate = allocationStartDate)
    {
        allocationStartDate = _allocationStartDate;

        return allocationStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationPositionForecastFTE</Name>
				<Source><![CDATA[
    public HcmFullTimeEquivalency parmAllocationPositionForecastFTE(HcmFullTimeEquivalency _allocationPositionForecastFTE = allocationPositionForecastFTE)
    {
        allocationPositionForecastFTE = _allocationPositionForecastFTE;

        return allocationPositionForecastFTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationDailyRate</Name>
				<Source><![CDATA[
    public Amount parmAllocationDailyRate(Amount _allocationDailyRate = allocationDailyRate)
    {
        allocationDailyRate = _allocationDailyRate;

        return allocationDailyRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationPeriodRate</Name>
				<Source><![CDATA[
    public Amount parmAllocationPeriodRate(Amount _allocationPeriodRate = allocationPeriodRate)
    {
        allocationPeriodRate = _allocationPeriodRate;

        return allocationPeriodRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationTotalPeriods</Name>
				<Source><![CDATA[
    public NumberOf parmAllocationTotalPeriods(NumberOf _allocationTotalPeriods = allocationTotalPeriods)
    {
        allocationTotalPeriods = _allocationTotalPeriods;

        return allocationTotalPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllocationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates allocation lines for the forecast position based on each cost line and cost element allocation option.
    /// </summary>
    /// <param name = "_positionForecastBudgetAcctLineTmp">
    /// The <c>HcmPositionForecastBudgetAcctLineTmp</c> table will have all allocation lines of the cost lines for the forecast position.
    /// </param>
    /// <param name = "_positionForecastScenarioId">
    /// The record ID of the <c>HcmPositionForecastScenario</c> table for the specific forecast position.
    /// </param>
    /// <param name = "_legalEntity">
    /// The record ID of the <c>CompanyInfo</c> table for the specific company.
    /// </param>
    public void createAllocationLines(HcmPositionForecastBudgetAcctLineTmp _positionForecastBudgetAcctLineTmp,
                                      HcmPositionForecastScenarioRecId _positionForecastScenarioId,
                                      LegalEntityRecId _legalEntity)
    {
        // Make sure the calculation is done on the forecast position.
        HcmPositionForecastLastModified::calculateBudgetAmountForForecastPosition(_positionForecastScenarioId);

        this.setAllocationInfoFromForecastPosition(_positionForecastScenarioId, _legalEntity);

        //
        // Based on the effective, expiration date and the allocation option of cost element,
        // Each cost line on the forecast position might split into multiple allocation lines.
        //
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAcctLine;
        ttsbegin;
        while select hcmPositionForecastBudgetAcctLine
                where hcmPositionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioId
                    && hcmPositionForecastBudgetAcctLine.LegalEntity == _legalEntity
                    && hcmPositionForecastBudgetAcctLine.BudgetAmountCur > 0
        {
            this.setAllocationInfoFromCostLine(hcmPositionForecastBudgetAcctLine);
            this.createAllocationsFromCostLine(_positionForecastBudgetAcctLineTmp, hcmPositionForecastBudgetAcctLine);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllocationsFromCostLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates allocation lines for the specific cost line on the forecast position.
    /// </summary>
    /// <param name = "_positionForecastBudgetAcctLineTmp">
    /// The <c>HcmPositionForecastBudgetAcctLineTmp</c> table will have all allocation lines of the cost lines on the forecast position.
    /// </param>
    /// <param name = "_hcmPositionForecastBudgetAcctLine">
    /// The record of <c>HcmPositionForecastBudgetAcctLine</c> table on the forecast position to be allocated based on cost element allocation option.
    /// </param>
    private void createAllocationsFromCostLine(HcmPositionForecastBudgetAcctLineTmp _positionForecastBudgetAcctLineTmp, HcmPositionForecastBudgetAcctLine _hcmPositionForecastBudgetAcctLine)
    {
        ValidFromDate newEffectiveDate = _hcmPositionForecastBudgetAcctLine.EffectiveDate;
        Amount costLineTotalAmountRemainder = _hcmPositionForecastBudgetAcctLine.BudgetAmountCur;
        NumberOf nextPeriodIndex = this.getNextAllocationStartDateIndexFromAllocationDateArray(newEffectiveDate, 1, allocationTotalPeriods);

        // Split the cost line into allocation periods
        ttsbegin;
        while (newEffectiveDate <= _hcmPositionForecastBudgetAcctLine.ExpirationDate && costLineTotalAmountRemainder > 0)
        {
            _positionForecastBudgetAcctLineTmp.PositionForecastScenario = _hcmPositionForecastBudgetAcctLine.PositionForecastScenario;
            _positionForecastBudgetAcctLineTmp.BudgetPurposeTypeDetail = _hcmPositionForecastBudgetAcctLine.BudgetPurposeTypeDetail;
            _positionForecastBudgetAcctLineTmp.LedgerDimension = _hcmPositionForecastBudgetAcctLine.LedgerDimension;
            _positionForecastBudgetAcctLineTmp.LegalEntity = _hcmPositionForecastBudgetAcctLine.LegalEntity;
            _positionForecastBudgetAcctLineTmp.EffectiveDate = newEffectiveDate;
            _positionForecastBudgetAcctLineTmp.ExpirationDate = this.getCurrentPeriodExpirationDate(nextPeriodIndex, _hcmPositionForecastBudgetAcctLine.ExpirationDate);
            _positionForecastBudgetAcctLineTmp.BudgetAmountCur = this.getCurrentPeriodBudgetAmount(_positionForecastBudgetAcctLineTmp, nextPeriodIndex);
            _positionForecastBudgetAcctLineTmp.insert();

            costLineTotalAmountRemainder -= _positionForecastBudgetAcctLineTmp.BudgetAmountCur;

            if (!this.doesNextPeriodExist(nextPeriodIndex))
            {
                // no more next allocation period.
                break;
            }

            newEffectiveDate = allocationPeriodStartDateArray[nextPeriodIndex];
            nextPeriodIndex++;
        }

        // Make sure the remainder is added to the last allocation line.
        if (costLineTotalAmountRemainder != 0)
        {
            _positionForecastBudgetAcctLineTmp.BudgetAmountCur += costLineTotalAmountRemainder;

            ttsbegin;
            _positionForecastBudgetAcctLineTmp.update();
            ttscommit;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesNextPeriodExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the next period exists by the index in the period start date array.
    /// </summary>
    /// <param name = "_nextPeriodIndex">
    /// The index for the next period date in the period start date array.
    /// </param>
    /// <returns>
    /// true if the next period index is valid in the period date array; otherwise false.
    /// </returns>
    private boolean doesNextPeriodExist(NumberOf _nextPeriodIndex)
    {
        boolean nextPeriodExisted = true;

        if (_nextPeriodIndex == 0 || _nextPeriodIndex > allocationTotalPeriods)
        {
            // No more next period.
            nextPeriodExisted = false;
        }

        return nextPeriodExisted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPeriodExpirationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the expiration date for the current allocation period.
    /// </summary>
    /// <param name = "_nextPeriodIndex">
    /// The index for the next period date in the period start date array.
    /// </param>
    /// <param name = "_costLineExpirationDate">
    /// The expiration date of the cost line on the forecast position.
    /// </param>
    /// <returns>
    /// The expiration date of the current allocation period.
    /// </returns>
    private ValidToDate getCurrentPeriodExpirationDate(NumberOf _nextPeriodIndex, ValidToDate _costLineExpirationDate)
    {
        ValidToDate currentExpirationDate;
        ValidFromDate nextPeriodStartDate = allocationPeriodStartDateArray[_nextPeriodIndex];
        ValidFromDate currentAllocationEndDate = nextPeriodStartDate - 1;

        if (_nextPeriodIndex > 0 && _nextPeriodIndex <= allocationTotalPeriods)
        {
            //
            // Ensure the next period number is not exceed the total number of allocation periods.
            // Get the correct expiration date for current period
            // Must be the smaller date of the allocation period end date and cost line end date.
            //
            currentExpirationDate = min(currentAllocationEndDate, _costLineExpirationDate);
        }
        else
        {
            // Don't have next period after this allocation.
            currentExpirationDate = _costLineExpirationDate;
        }

        return currentExpirationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPeriodBudgetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget amount for the allocation line based on its dates and next period.
    /// </summary>
    /// <param name = "_positionForecastBudgetAcctLineTmp">
    /// The record of the <c>HcmPositionForecastBudgetAcctLineTmp</c> table.
    /// </param>
    /// <param name = "_nextPeriodIndex">
    /// The index for the next period in the period start date array.
    /// </param>
    /// <returns>
    /// The budget amount for the allocation line.
    /// </returns>
    /// <remarks>
    /// The allocation budget amount will be either the period rate when the allocation duration is a full allocation period,
    /// or daily rate times days of the allocation duration when it is partial duration.
    /// </remarks>
    private Amount getCurrentPeriodBudgetAmount(HcmPositionForecastBudgetAcctLineTmp _positionForecastBudgetAcctLineTmp, NumberOf _nextPeriodIndex)
    {
        Amount currentLineBudgetAmount;

        boolean isCurrentPeriodPartial = this.isPartialAllocation(_positionForecastBudgetAcctLineTmp.EffectiveDate,
                                                                  _positionForecastBudgetAcctLineTmp.ExpirationDate,
                                                                  _nextPeriodIndex);
        if (!isCurrentPeriodPartial)
        {
            currentLineBudgetAmount = allocationPeriodRate;
        }
        else
        {
            int currentLineTotalDays = this.getTotalDaysInDateRange(_positionForecastBudgetAcctLineTmp.EffectiveDate, _positionForecastBudgetAcctLineTmp.ExpirationDate);

            currentLineBudgetAmount = currentLineTotalDays * allocationDailyRate;
        }

        return currentLineBudgetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfPeriodsByCostElementAllocationOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the periods in the fiscal year based on the allocation option on the cost element.
    /// </summary>
    /// <param name = "_costElementDetailRecId">
    /// The record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <returns>
    /// The total number of periods in the fiscal year.
    /// </returns>
    /// <remarks>
    /// The number of total periods in the fiscal year is specified for five allocation options:
    /// 1 for option "Start date",
    /// 4 for option "Quarterly",
    /// 12 for option "Monthly",
    /// 52 for option "Weekly",
    /// 26 for option "Biweekly".
    /// </remarks>
    private NumberOf getNumberOfPeriodsByCostElementAllocationOption(HcmBudgetPurposeTypeDetailRecId _costElementDetailRecId)
    {
        HcmBudgetPurposeType budgetPurposeType;
        NumberOf  periodsInFiscalYear = 1;

        budgetPurposeType = HcmBudgetPurposeType::findByPurposeTypeDetailRecId(_costElementDetailRecId);

        switch (budgetPurposeType.AllocationMethod)
        {
            case HcmBudgetPurposeAllocationOption::StartDate:
                periodsInFiscalYear = BudgetPlanningConstants::PeriodsPerYearNoSplit;
                break;
            case HcmBudgetPurposeAllocationOption::Monthly:
                periodsInFiscalYear = BudgetPlanningConstants::PeriodsPerYearMonthly;
                break;
            case HcmBudgetPurposeAllocationOption::Quarterly:
                periodsInFiscalYear = BudgetPlanningConstants::PeriodsPerYearQuarterly;
                break;
            case HcmBudgetPurposeAllocationOption::Weekly:
                periodsInFiscalYear = BudgetPlanningConstants::PeriodsPerYearWeekly;
                break;
            case HcmBudgetPurposeAllocationOption::Biweekly:
                periodsInFiscalYear = BudgetPlanningConstants::PeriodsPerYearBiweekly;
                break;
        }

        return periodsInFiscalYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPartialAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the allocation period is a partial period.
    /// </summary>
    /// <param name = "_effectiveDate">
    /// The effective date of the allocation period.
    /// </param>
    /// <param name = "_expirationDate">
    /// The expiration date of the allocation period.
    /// </param>
    /// <param name = "_nextPeriodDateIndex">
    /// The index for the next period in an all periods start date array.
    /// </param>
    /// <returns>
    /// true if the allocation period is a partial period; otherwise false.
    /// </returns>
    private boolean isPartialAllocation(ValidFromDate _effectiveDate, ValidToDate _expirationDate, NumberOf _nextPeriodDateIndex)
    {
        boolean isPartial = true;
        ValidFromDate currentPeriodStartDate;

        // Get current period start date.
        if (_nextPeriodDateIndex > 1)
        {
            currentPeriodStartDate = allocationPeriodStartDateArray[_nextPeriodDateIndex - 1];
        }
        else
        {
            currentPeriodStartDate = allocationPeriodStartDateArray[1];
        }

        //
        // Check the current allocation date range is partial period or full period from its start date and end date
        // Based on current allocation period start date and next period start date
        //
        if ( !this.doesNextPeriodExist(_nextPeriodDateIndex))
        {
            // No more next period. The current allocation period is the last period.
            if (_effectiveDate == currentPeriodStartDate && _expirationDate == allocationEndDate)
            {
                // The current allocation start and end dates indicate a full period.
                isPartial = false;
            }
        }
        else
        {
            // Get next period start date.
            ValidFromDate nextPeriodStartDate =  allocationPeriodStartDateArray[_nextPeriodDateIndex];
            ValidToDate currentPeriodEndDate = nextPeriodStartDate - 1;

            if (_effectiveDate == currentPeriodStartDate && _expirationDate == currentPeriodEndDate)
            {
                // The current allocation start and end dates indicate a full period.
                isPartial = false;
            }
        }

        return isPartial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllocationInfoFromCostLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allocation information for the cost line based on cost element allocation option and annual amount.
    /// </summary>
    /// <param name = "_hcmPositionForecastBudgetAcctLine">
    /// The record of <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    private void setAllocationInfoFromCostLine(HcmPositionForecastBudgetAcctLine _hcmPositionForecastBudgetAcctLine)
    {
        // This method contains a comment with the text aka.ms/sre-codescan/disable
        // This is to flag false positives from the Leap Year code scan tool so they are no longer reported.
        // The assumption of 365 days in a year is adequate for this scenario as all is being done is calculating approximate
        // daily and period rates for a given budgeted amount. If a calculation is being ran for a period which contains a leap year
        // the correct budgeted amount is still used as the basis.
        const NumberOf DefaultDaysInYear = 365; //aka.ms/sre-codescan/disable

        // Get allocation periods based on the cost element allocation option
        NumberOf periodsPerFiscalYear = this.getNumberOfPeriodsByCostElementAllocationOption(_hcmPositionForecastBudgetAcctLine.BudgetPurposeTypeDetail);

        Amount annualAmount = _hcmPositionForecastBudgetAcctLine.AmountCur;

        if (annualAmount == 0)
        {
            // If we do not have an annual amount then we need to calculate the annual amount from the Budget Amount.
            NumberOf totalDaysOnCostLine = this.getTotalDaysInDateRange(_hcmPositionForecastBudgetAcctLine.EffectiveDate, _hcmPositionForecastBudgetAcctLine.ExpirationDate);
            annualAmount = _hcmPositionForecastBudgetAcctLine.BudgetAmountCur * DefaultDaysInYear / totalDaysOnCostLine / allocationPositionForecastFTE;
        }

        if (periodsPerFiscalYear < 1)
        {
            // Make sure the number of period is at least 1.
            periodsPerFiscalYear = 1;
        }

        // Set daily rate and period rate based on the annual amount of this cost line.
        AmountCur calculatedRate = (annualAmount * allocationPositionForecastFTE) / periodsPerFiscalYear;
        allocationPeriodRate = CurrencyExchange::round(calculatedRate, allocationPositionCurrencyCode);

        calculatedRate = (annualAmount * allocationPositionForecastFTE) / DefaultDaysInYear; //aka.ms/sre-codescan/disable
        allocationDailyRate = CurrencyExchange::round(calculatedRate, allocationPositionCurrencyCode);

        // Set period start dates based on the allocation option for this cost line.
        this.setAllocationDateRange(periodsPerFiscalYear);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllocationDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all periods start dates based on the allocation option for the budget plan duration.
    /// </summary>
    /// <param name = "_periodsPerFiscalYear">
    /// The number of total periods in the fiscal year.
    /// </param>
    private void setAllocationDateRange(NumberOf _periodsPerFiscalYear)
    {
        allocationPeriodStartDateArray[0] = dateNull();

        NumberOf dateArrayIndex = 1;
        allocationPeriodStartDateArray[1] = allocationStartDate;

        ValidFromDate nextPeriodDate = this.getNextPeriodStartDate(allocationPeriodStartDateArray[1], _periodsPerFiscalYear);
        dateArrayIndex++;

        while (nextPeriodDate <= allocationEndDate)
        {
            allocationPeriodStartDateArray[dateArrayIndex] = nextPeriodDate;

            if (dateArrayIndex mod _periodsPerFiscalYear == 0)
            {
               //
               // Match the created record in allocation date range with the number of periods in a fiscal year.
               // Move the allocation date range to next fiscal year if the date range is at the end of the fiscal year
               //
                int yearMultipler = dateArrayIndex div _periodsPerFiscalYear;
                nextPeriodDate = mkDate(dayOfMth(allocationStartDate), mthOfYr(allocationStartDate), year(allocationStartDate) + yearMultipler);
            }
            else
            {
                nextPeriodDate = this.getNextPeriodStartDate(allocationPeriodStartDateArray[dateArrayIndex], _periodsPerFiscalYear);
            }

            dateArrayIndex++;
        }

        allocationTotalPeriods = dateArrayIndex - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllocationInfoFromForecastPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the budget plan process start date, end date and full time equivalence from the forecast position.
    /// </summary>
    /// <param name = "_positionForecastScenarioRecId">
    /// The record ID of the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name = "_legalEntity">
    /// The record ID of the <c>CompanyInfo</c> table for the specific company.
    /// </param>
    private void setAllocationInfoFromForecastPosition(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId, LegalEntityRecId _legalEntity)
    {
        HcmForecastScenario hcmForecastScenario;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);
        hcmForecastScenario = HcmForecastScenario::getForecastScenarioByPosFctScenario(_positionForecastScenarioRecId);

        allocationStartDate = hcmForecastScenario.BudgetProcessStartDate;
        allocationEndDate = hcmForecastScenario.BudgetProcessEndDate;

        allocationPositionForecastFTE = hcmPositionForecastScenario.FullTimeEquivalency;

        allocationPositionCurrencyCode = HcmPositionForecastBudgetDefaultValue::findByPositionForecastLegalEntity(_positionForecastScenarioRecId, _legalEntity).CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalDaysInDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total number of days based on the date range.
    /// </summary>
    /// <param name = "_effectiveDate">
    /// The start date of the specific date range.
    /// </param>
    /// <param name = "_expirationDate">
    /// The end date of the specific date range.
    /// </param>
    /// <returns>
    /// The total number of days in the specific date range.
    /// </returns>
    private NumberOf getTotalDaysInDateRange(ValidFromDate _effectiveDate, ValidToDate _expirationDate)
    {
        NumberOf totalDays;

        totalDays = (_expirationDate - _effectiveDate) + 1;

        return totalDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextAllocationStartDateIndexFromAllocationDateArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the index of next allocation period date based on current allocation period date via the binary search algorithm.
    /// </summary>
    /// <param name = "_currentDate">
    /// The date of current allocation period.
    /// </param>
    /// <param name = "_startPosition">
    /// The start position of the period date array to search.
    /// </param>
    /// <param name = "_endPosition">
    /// The start position of the period date array to search.
    /// </param>
    /// <returns>
    /// The index of next allocation period date from the allocation period dates array.
    /// </returns>
    private NumberOf getNextAllocationStartDateIndexFromAllocationDateArray(ValidFromDate _currentDate,
                                                                            NumberOf _startPosition,
                                                                            NumberOf _endPosition)
    {
        NumberOf nextPeriodIndex = 0;

        if (_startPosition == _endPosition)
        {
            if (allocationPeriodStartDateArray[_startPosition] > _currentDate)
            {
                nextPeriodIndex = _startPosition;
            }
        }
        else
        {
            NumberOf middlePosition = ((_endPosition - _startPosition) div 2) + _startPosition;

            if (allocationPeriodStartDateArray[middlePosition] > _currentDate)
            {
                nextPeriodIndex = this.getNextAllocationStartDateIndexFromAllocationDateArray(_currentDate, _startPosition, middlePosition);
            }
            else
            {
                nextPeriodIndex = this.getNextAllocationStartDateIndexFromAllocationDateArray(_currentDate, middlePosition + 1, _endPosition);
            }
        }

        return nextPeriodIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextPeriodStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of next allocation period based on current date and allocation option.
    /// </summary>
    /// <param name = "_currentPeriodDate">
    /// The current allocation period date.
    /// </param>
    /// <param name = "_periodsPerFiscalYear">
    /// The number of periods in a fiscal year based on the allocation option.
    /// </param>
    /// <returns>
    /// The date of the next allocation period.
    /// </returns>
    private ValidFromDate getNextPeriodStartDate(ValidFromDate _currentPeriodDate, NumberOf _periodsPerFiscalYear)
    {
        ValidFromDate nextPeriodDate = maxDate();
        NumberOf periodDeltaDays;

        switch (_periodsPerFiscalYear)
        {
            case BudgetPlanningConstants::PeriodsPerYearQuarterly:
            case BudgetPlanningConstants::PeriodsPerYearMonthly:
                periodDeltaDays = BudgetPlanningConstants::DefaultMonthsInYear div _periodsPerFiscalYear;
                nextPeriodDate = dateMthFwd(_currentPeriodDate, periodDeltaDays);
                break;
            case BudgetPlanningConstants::PeriodsPerYearBiweekly:
                periodDeltaDays = BudgetPlanningConstants::DefaultDaysInWeek * 2;
                nextPeriodDate = _currentPeriodDate + periodDeltaDays;
                break;
            case BudgetPlanningConstants::PeriodsPerYearWeekly:
                periodDeltaDays = BudgetPlanningConstants::DefaultDaysInWeek;
                nextPeriodDate = _currentPeriodDate + periodDeltaDays;
                break;
        }

        return nextPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>HcmPositionForecastCostAllocation</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>HcmPositionForecastCostAllocation</c> class.
    /// </returns>
    public static HcmPositionForecastCostAllocation construct()
    {
        return new HcmPositionForecastCostAllocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the instance of <c>HcmPositionForecastCostAllocation</c> class with initialized value.
    /// </summary>
    protected void new()
    {
        allocationPeriodStartDateArray[0] = dateNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>