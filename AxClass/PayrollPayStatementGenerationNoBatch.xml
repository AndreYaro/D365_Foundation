<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementGenerationNoBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPayStatementGenerationNoBatch</c> class is a wrapper class around the <c>PayrollPayStatementGenerationTask</c> class
/// to provide a dialog to create recurring earnings and salary earnings.
/// </summary>
class PayrollPayStatementGenerationNoBatch extends PayrollPayStatementGeneration implements BatchRetryable
{
    boolean calledFromEarningStatement;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        callingRecord,
        payPeriodRecId,
        paymentDate,
        paymentType,
        batchNumber,
        calledFromEarningStatement,
        disableAccounting,
        paymentMethodOverride
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Payroll:GeneratePayStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the input from the dialog which contains user selection for the process.
    /// </summary>
    /// <param name="_dialog">
    /// The instance of the dialog which contains user input for the process.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        if (calledFromEarningStatement)
        {
            payCycleRecId = this.getPayCycleRecId();
            payCycleReferenceControl.value(payCycleRecId);
            this.createPeriodList();
            payPeriodComboBox.selection(this.getPayPeriodIndex());
            this.defaultPaymentDate();
        }

        payCycleReferenceControl.visible(!calledFromEarningStatement);
        payPeriodComboBox.visible(!calledFromEarningStatement);
        disableAccountingCheckBox = _dialog.dialogForm().formRun().control(disableAccountingBuildCheckBox.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayCycleRecId</Name>
				<Source><![CDATA[
    private PayrollPayCycleRecId getPayCycleRecId()
    {
        PayrollEarningStatement payrollEarningStatement;

        payrollEarningStatement = callingRecord;

        return PayrollPayPeriod::find(payrollEarningStatement.PayPeriod).PayCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayPeriodIndex</Name>
				<Source><![CDATA[
    private int getPayPeriodIndex()
    {
        PayrollEarningStatement payrollEarningStatement = callingRecord;
        Integer                 len = conLen(payPeriodList);
        int                     i;
        int                     indx = 0;

        for (i = 0; i < len; i++)
        {
            if (payrollEarningStatement.PayPeriod == conPeek(payPeriodList, i))
            {
                indx = i - 1;
                break;
            }
        }

        return indx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromEarningStatement</Name>
				<Source><![CDATA[
    public boolean parmCalledFromEarningStatement(boolean _calledFromEarningStatement = calledFromEarningStatement)
    {
        calledFromEarningStatement = _calledFromEarningStatement;

        return calledFromEarningStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify the JoinType in the query on the <c>HcmPositionUnionAgreement</c> table to OuterJoin when no union agreement is specified since it is not mandatory
    /// Add specific worker or positon range if called from the Worker or Position detail form.
    /// </summary>
    void setRange()
    {
        QueryBuildDataSource    qbdsPositionUnionAgreement;
        PayrollEarningStatement payrollEarningStatementCalled;

        if (calledFromEarningStatement)
        {
            if (callingRecord)
            {
                switch (callingRecord.TableId)
                {
                    case tableNum(PayrollEarningStatement):
                        payrollEarningStatementCalled.data(callingRecord);
                        queryRun.query().dataSourceTable(tableNum(HcmWorker)).addRange(fieldNum(HcmWorker, RecId)).value(queryValue(payrollEarningStatementCalled.Worker));
                        break;
                }
            }

            qbdsPositionUnionAgreement = queryRun.query().dataSourceTable(tableNum(HcmPositionUnionAgreement));
            if (qbdsPositionUnionAgreement.findRange(fieldNum(HcmPositionUnionAgreement, UnionAgreement)).value() == '')
            {
                qbdsPositionUnionAgreement.joinMode(JoinMode::OuterJoin);
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        PayrollPayPeriodRecId payPeriodRecIdLast;
        Common callingRecordLast;
        PayrollPaymentType paymentTypeLast;
        PayrollPaymDate paymentDateLast;
        PayrollPayStatementBatchNumber batchNumberLast;

        #LOCALMACRO.SaveLastList
            callingRecordLast,
            payPeriodRecIdLast,
            paymentDateLast,
            paymentTypeLast,
            batchNumberLast,
            calledFromEarningStatement,
            disableAccounting,
            paymentMethodOverride
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, queryCon] = packedClass;
                }
                else
                {
                    [version, #CurrentList, queryCon] = packedClass;
                }

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of the process class on server.
    /// </summary>
    /// <returns>
    /// An instance of the process class on server.
    /// </returns>
    public static PayrollPayStatementGenerationNoBatch construct()
    {
        return (new PayrollPayStatementGenerationNoBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PayrollPayStatementGenerationNoBatch payStatementGenerationNoBatch;

        payStatementGenerationNoBatch = PayrollPayStatementGenerationNoBatch::construct();

        if (_args && _args.record())
        {
            switch (_args.record().TableId)
            {
                case tableNum(HcmWorker):
                case tableNum(HcmPosition):
                case tableNum(PayrollEarningStatement):
                    payStatementGenerationNoBatch.parmCallingRecord(_args.record());
                    break;
            }

            payStatementGenerationNoBatch.parmCalledFromEarningStatement(
                _args.caller().name() == formStr(PayrollEarningStatement)
                || _args.parm() == "@Payroll:PayrollManagement");
        }

        if (payStatementGenerationNoBatch.prompt())
        {
            payStatementGenerationNoBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>