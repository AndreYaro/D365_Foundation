<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostAdvancedJournalCostNeverLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPostAdvancedJournalCostNeverLedger extends ProjPost
{
    private ProjAdvancedJournalLine projAdvancedJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(boolean throwerror = true)
    {
        boolean ok  = super();
        
        ok = (ok &&  projTrans.validateWrite());

        if (! projTrans.linePropertyId())
        {
            ok = checkFailed("@SYS50154") && ok;
        }

        ProjTable projTableLoc = ProjTable::find(projTrans.projId());
        ok  = (ok && projTableLoc.status().journalCheckStatusCost());

        ProjLedgerStatus costLedgerStatus = ProjLedgerStatus::Never;
        NoYes postCostEmpl;

        if (!projTableLoc.ProjInvoiceProjId)
        {
            // Internal project, post cost to P/L accounts.
            postCostEmpl = NoYes::No;
        }
        else
        {
            ProjRevenueProfile revProfile = ProjRevRecHelper::getRevProfileForTransactionType(projTableLoc, ProjTransType::Cost);
            postCostEmpl = revProfile.PostWIPCost;
        }
        
        ListEnumerator enumerator;
        ProjFundingSourceRefId fundingSourceId;

        if (projTrans.transCost() && costledgerStatus)
        {
            List fundingsources = ProjFundingSource::getFundingSources(projTrans);
            enumerator = fundingsources.getEnumerator();

            while (enumerator.moveNext())
            {
                fundingSourceId = enumerator.current();
                ok = ok && this.validateDimensionsForPosting(throwerror, costledgerStatus, fundingSourceId);
            }

            if (fundingsources.empty())
            {
                ok = ok && this.validateDimensionsForPosting(throwerror, costledgerStatus, 0);
            }
        }

        if (projTrans.canBeInvoiced() && projTrans.transTurnover() && postCostEmpl)
        {
            if ( !enumerator )
            {
                enumerator = ProjFundingSource::getFundingSources( projTrans ).getEnumerator();
            }
            else
            {
                enumerator.reset();
            }

            while ( enumerator.moveNext() )
            {
                fundingSourceId = enumerator.current();
                LedgerDimensionDefaultAccount defaultLedgerDimension = projTrans.salesOffsetAccountLedgerDimension(fundingSourceId);
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                LedgerDimensionAccount mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;

                defaultLedgerDimension=projTrans.salesValueAccountLedgerDimension(fundingSourceId);
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    public boolean checkUpdateBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    protected boolean costEnterCredit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that posts the credit side of the transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that posts the credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used to post the debit side of a transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that is used to post the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate that will be used for computing amounts in the default currency.
    /// </summary>
    /// <returns>
    /// The <c>ProjAdvancedJournalLine.ExchRate</c> field.
    /// </returns>
    /// <remarks>
    /// When the value 0 is passed to the routine for computing amounts in the default currency, the
    /// exchange rate is retrieved from the tables.
    /// </remarks>
    public ExchRate exchRate()
    {
        return projAdvancedJournalLine.CostExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the<c>ProjPostCostJournal</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
       switch (_buffer.TableId)
        {
            case tableNum(ProjAdvancedJournalLine):
                projAdvancedJournalLine = _buffer;
                projTrans = ProjTrans::newProjTransAdvancedJournal(projAdvancedJournalLine);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        return LedgerPostingType::ProjNeverLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        return LedgerPostingType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromAdvancedJournalLine</Name>
				<Source><![CDATA[
    protected ProjCostTrans initTransFromAdvancedJournalLine(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        ProjCostTrans  projCostTrans;
       
        projCostTrans.CategoryId = _projAdvancedJournalLine.ProjCategoryId;
        projCostTrans.CurrencyId = _projAdvancedJournalLine.PriceCurrency;
        projCostTrans.CurrencyIdCost = _projAdvancedJournalLine.CostCurrency;
        projCostTrans.DefaultDimension = _projAdvancedJournalLine.DefaultDimension;
        projCostTrans.ProjId = _projAdvancedJournalLine.ProjId;
        projCostTrans.ActivityNumber = _projAdvancedJournalLine.ActivityNumber;
        projCostTrans.Qty = _projAdvancedJournalLine.Quantity;
        projCostTrans.LinePropertyId = _projAdvancedJournalLine.LinePropertyId;
        projCostTrans.Txt = _projAdvancedJournalLine.Text;
        projCostTrans.TransDate = _projAdvancedJournalLine.ProjTransDate;
        projCostTrans.TaxGroupId = _projAdvancedJournalLine.TaxGroup;
        projCostTrans.TaxItemGroupId = _projAdvancedJournalLine.TaxItemGroup;
        projCostTrans.Resource = _projAdvancedJournalLine.ResourceId;
        projCostTrans.TransId = ProjParameters::newTransId();
        projCostTrans.TransIdRef = _projAdvancedJournalLine.ProjTransId;
        projCostTrans.PSAContractLineNum = _projAdvancedJournalLine.ContractLineId;
        projCostTrans.TransactionOrigin = ProjOrigin::ProjAdvancedJournal;
        projCostTrans.VoucherJournal = _projAdvancedJournalLine.Voucher;
        projCostTrans.SubcontractLine = _projAdvancedJournalLine.SubcontractLine;

        return projCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjCostTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field of the <c>ProjCostTransSale</c> record.
    /// </summary>
    /// <param name = "_projCostTrans">
    /// The <c>ProjCostTrans</c> record.
    /// </param>
    /// <param name = "_fundingSourceRecId">
    /// The funding source reference ID.
    /// </param>
    /// <returns>
    /// The <c>ProjCostTransSale</c> record.>
    /// </returns>
    protected ProjCostTransSale initializeProjCostTransSale(ProjCostTrans _projCostTrans, ProjFundingSourceRefId _fundingSourceRecId)
    {
        ProjCostTransSale projCostTransSale;
        projCostTransSale.TransId = _projCostTrans.TransId;
        projCostTransSale.FundingSource = _fundingSourceRecId;
        projCostTransSale.SalesPrice = projTrans.salesPrice();
        projCostTransSale.LineAmount = CurrencyExchangeHelper::amount(projCostTransSale.SalesPrice * projTrans.qty(), projTrans.currencyIdSales());
        projCostTransSale.LedgerTransdate = this.getLedgerJournalTransDate();
        projCostTransSale.WIPPeriod = dateNull();
        projCostTransSale.wipType = ProjWIPType::AccruedTurnover;
        projCostTransSale.ControlId = '';
        projCostTransSale.ControlVersion = 0;

        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(_fundingSourceRecId))
        {
            projCostTransSale.LedgerSalesPosted  = true;
            projCostTransSale.LedgerSalesAmount = 0;
        }

        projCostTransSale.TransStatus = ProjTransStatus::Posted;

        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRecId);
        projCostTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_projCostTrans.DefaultDimension, projFundingSource.DefaultDimension);

        return projCostTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjCostTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field of the <c>ProjCostTransSale</c> record.
    /// </summary>
    /// <param name = "_projCostTrans">
    /// The <c>ProjCostTrans</c> record.
    /// </param>
    /// <param name = "_fundingSourceRecId">
    /// The funding source reference ID.
    /// </param>
    /// <param name = "_lineAmount">
    /// The line amount value.
    /// </param>
    /// <returns>
    /// The <c>ProjCostTransSale</c> record.>
    /// </returns>
    protected ProjCostTransCost initializeProjCostTransCost(ProjCostTrans _projCostTrans, ProjFundingSourceRefId _fundingSourceRecId, AmountCur _lineAmount)
    {
        ProjCostTransCost projCostTransCost;
        projCostTransCost.TransId = _projCostTrans.TransId;
        projCostTransCost.FundingSource = _fundingSourceRecId;
        projCostTransCost.LineAmount = _lineAmount;
        
        CurrencyExchangeHelper exchangeRateHelper = this.getCurrencyExchHelperForReversingEntry();

        if (!exchangeRateHelper)
        {
            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _projCostTrans.TransDate);
        }

        exchangeRateHelper.parmExchangeRate1(this.exchRate());
        exchangeRateHelper.parmExchangeRate2(this.exchRateSecondary());

        if (this.parmTaxAmountCur() && projTrans.qty())
        {
            projCostTransCost.CostPriceCurrency = (projTrans.transCost() + this.parmTaxAmountCur())/projTrans.qty();
        }
        else
        {
            projCostTransCost.CostPriceCurrency = projAdvancedJournalLine.UnitCost;
        }

        projCostTransCost.CostPrice = exchangeRateHelper.calculateTransactionToAccounting(projTrans.currencyIdCost(), projCostTransCost.CostPriceCurrency, true);
        projCostTransCost.CostAmountLedger = projCostTransCost.CostPrice * projTrans.qty();
        projCostTransCost.LedgerTransdate = this.getLedgerJournalTransDate();
        projCostTransCost.LedgerStatusCost = ProjLedgerStatus::Never;
        projCostTransCost.TransStatus = ProjTransStatus::Posted;
        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRecId);
        projCostTransCost.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_projCostTrans.DefaultDimension, projFundingSource.DefaultDimension);

        return projCostTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjCostTrans projCostTrans = this.initTransFromAdvancedJournalLine(projAdvancedJournalLine);
        projCostTrans.ResourceCategory = projTrans.resourceCategory();

        if (!projCostTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        projCostTrans.insert();

        // this creates the cost and sales distributions
        this.createCostSalesDistributions(projTrans.transCost() + this.parmTaxAmountCur(), projTrans.transTurnover());
        if (!fundingSourceList)
        {
            throw error("@SYS136842");
        }

        // this is the same call where we allocate the ledger amount
        // we need to use the same call so that the CostLedgerAmount is exactly as it is as the amount posted to GL
        MapEnumerator fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCost() + this.parmTaxAmountCur(), projAdvancedJournalLine.CostCurrency).getEnumerator();
        
        if (allocationError == NoYes::No)
        {
            //Create ProjCostTransCost record
            while (fundingAllocationEnumerator.moveNext())
            {
                ProjCostTransCost projCostTransCost = this.initializeProjCostTransCost(projCostTrans, fundingAllocationEnumerator.currentKey(), fundingAllocationEnumerator.currentValue());
                projCostTransCost.insert();
            }

            // Create ProjCostTransSale record
            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transTurnover(), projAdvancedJournalLine.PriceCurrency).getEnumerator();
            while (fundingAllocationEnumerator.moveNext())
            {
                ProjCostTransSale projCostTransSale = this.initializeProjCostTransSale(projCostTrans, fundingAllocationEnumerator.currentKey());
                projCostTransSale.insert();
            }
        }

        this.parmTransIdCost(projCostTrans.TransId);
        this.parmTransIdSales(projCostTrans.TransId);

        transIdNew = projCostTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs sales tax validation for the ledger dimension used.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// ledger dimension need to be validate.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateNoTax(LedgerDimensionAccount _ledgerDimension)
    {
        MainAccount                 mainAccount;
        DimensionAttributeValueCombination  dimAttrValueCombo;

        select firstonly RecId from dimAttrValueCombo where dimAttrValueCombo.RecId == _ledgerDimension
        join * from mainAccount where mainAccount.RecId == dimAttrValueCombo.MainAccount;

        if (!Tax::checkNoTax(mainAccount, projAdvancedJournalLine.ProjectSalesTaxGroup, projAdvancedJournalLine.ProjectSalesTaxItemGroup))
        {
            throw error("@SYS21533");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionsForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether mandatory financial dimension fields contain values to allow posting.
    /// </summary>
    /// <param name="_throwerror">
    /// Indicates whether an error should be thrown when a validation fails.
    /// </param>
    /// <param name="_CostTransCostStatus">
    /// The costTransCost status that is associated with the project group that will be used by this.
    /// transaction.
    /// </param>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this.
    /// transaction.
    /// </param>
    /// <returns>
    /// true, if the transaction is allowed for posting; otherwise, false.
    /// </returns>
    private boolean validateDimensionsForPosting(boolean _throwerror, ProjLedgerStatus _CostTransCostStatus, ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionAccount mergedLedgerDimension;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        boolean ret = true;

        defaultLedgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId, _throwerror);
        
        // need to merge the default account with the default dimensions and do the check on the fully instantiated account
        mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
        ret = ret && MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension));

        if (TaxParameters::find().ValidateTaxCode)
        {
            ret = this.validateNoTax(mergedLedgerDimension) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>