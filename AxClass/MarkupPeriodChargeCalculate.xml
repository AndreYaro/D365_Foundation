<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class MarkupPeriodChargeCalculate
{
    private MarkupInstrumentationLogger instrumentationLogger;

    protected MarkupPeriodChargeRule periodChargeRule;
    protected MarkupPeriodChargeRuleLine periodChargeRuleLine;

    protected MarkupPeriodChargeCalculateInvoiceDateFrom fromDate;
    protected MarkupPeriodChargeCalculateInvoiceDateTo toDate;
    protected MarkupPeriodChargeCalculateDaysPerInvoice daysPerInvoice;
    protected MarkupPeriodChargeCalculateInvoiceAccount invoiceAccount;
    protected SysGuid executionId;
    protected MarkupPeriodChargeCalculateServiceBundleId bundleId;

    protected CustAccount previousCustomer;

    protected Map custInvoiceTableMap;
    
    protected Set invoiceLineBaseSet;
    protected Set invoiceLineBaseRelationshipSet;
    protected RecordInsertList invoiceLineBaseRelationshipList;

    protected MarkupPeriodChargeCalculateInvoiceDateFrom previousIntervalDateFrom;
    protected MarkupPeriodChargeCalculateInvoiceDateTo previousIntervalDateTo;

    protected SalesParameters salesParameters;
    protected boolean blockInvoiceLineCreation;

    protected RefRecId previousRecId;

    // From and to dates for invoice line base on free text invoice line
    protected MarkupPeriodChargeInvoiceLineBaseFromDate previousInvoiceLineBaseDateFrom;
    protected MarkupPeriodChargeInvoiceLineBaseToDate previousInvoiceLineBaseDateTo;
    // From date for each days interval that should be a part of key for free text invoice map
    protected MarkupPeriodChargeInvoiceLineBaseFromDate invoiceLineDateFrom;

    protected boolean mustGenerateZeroQuantityInvoiceLineBase;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeCalculateInvoiceAccount parmInvoiceAccount(MarkupPeriodChargeCalculateInvoiceAccount _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;
        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDaysPerInvoice</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Days parmDaysPerInvoice(Days _daysPerInvoice = daysPerInvoice)
    {
        daysPerInvoice = _daysPerInvoice;
        return daysPerInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodChargeRuleLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeRuleLine parmPeriodChargeRuleLine(MarkupPeriodChargeRuleLine _periodChargeRuleLine = periodChargeRuleLine)
    {
        periodChargeRuleLine = _periodChargeRuleLine;
        return periodChargeRuleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTableMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Map parmCustInvoiceTableMap(Map _custInvoiceTableMap = custInvoiceTableMap)
    {
        custInvoiceTableMap = _custInvoiceTableMap;
        return custInvoiceTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysGuid parmExecutionId(SysGuid _executionId = executionId)
    {
        executionId = _executionId;
        return executionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBundleId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeCalculateServiceBundleId parmBundleId(MarkupPeriodChargeCalculateServiceBundleId _bundleId = bundleId)
    {
        bundleId = _bundleId;
        return bundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initDefault()
    {
        invoiceLineBaseSet = new Set(Types::Class);
        invoiceLineBaseRelationshipSet = new Set(Types::Class);
        invoiceLineBaseRelationshipList = new RecordInsertList(tableNum(MarkupPeriodChargeInvoiceLineBaseRelationship));
        salesParameters = SalesParameters::find();
        this.initializePeriodChargeRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePeriodChargeRule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializePeriodChargeRule()
    {
        periodChargeRule = MarkupPeriodChargeRule::findRecId(periodChargeRuleLine.PeriodChargeRule);
        invoiceLineDateFrom = fromDate;        

        if (periodChargeRule.ValidFrom && fromDate < periodChargeRule.ValidFrom)
        {
            fromDate = periodChargeRule.ValidFrom;
        }

        if (periodChargeRule.ValidTo && toDate > periodChargeRule.ValidTo)
        {
            toDate = periodChargeRule.ValidTo;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupPeriodChargeCalculate construct(
        MarkupPeriodChargeRuleLine _periodChargeRuleLine)
    {
        var attr    = new MarkupPeriodChargeCalculateModeAttribute(_periodChargeRuleLine.RuleLineType, true);
        var factory = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(MarkupPeriodChargeCalculateFactory), attr) as MarkupPeriodChargeCalculateFactory;

        MarkupPeriodChargeCalculate instance = factory.create(_periodChargeRuleLine.RuleLineType);
        instance.parmPeriodChargeRuleLine(_periodChargeRuleLine);
        
        if (!instance)
        {
            throw error("@SCM:MarkupPeriodChargeInvalidRuleLineTypeError");
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {   
        if (!custInvoiceTableMap)
        {
            custInvoiceTableMap = new Map(Types::String, Types::Class);
        }
            
        using (var activityContext = this.instrumentationLogger().periodChargeRuleActivities().runCalculation())
        {
            this.instrumentationLogger().periodChargeRuleActivities().logInitializeInvoiceLineBaseRecord(activityContext, periodChargeRuleLine);
            this.runPeriodChargeRuleCheck();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Query buildQuery()
    {
        Query query = new Query(queryStr(MarkupPeriodChargeQuery));

        QueryBuildDataSource qbdsCustInvoiceJour = query.dataSourceTable(tableNum(CustInvoiceJour));
        QueryBuildDataSource qbdsCustInvoiceTrans = query.dataSourceTable(tableNum(CustInvoiceTrans));

        if (invoiceAccount)
        {
            qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceAccount)).value(queryValue(invoiceAccount));
        }
        else if (periodChargeRule.AccountCode == TableAll::Table && periodChargeRule.AccountRelation)
        {
            qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceAccount)).value(queryValue(periodChargeRule.AccountRelation));
        }

        qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceDate)).value(SysQueryRangeUtil::dateRange(fromDate, toDate));
        
        if (periodChargeRule.InventSiteId || periodChargeRule.InventLocationId)
        {
            if (this.matchSalesTableInventoryDimension())
            {
                this.salesOrderSiteLocationFilter(qbdsCustInvoiceTrans);
            }
            else
            {
                this.invoiceLineSiteLocationFilter(qbdsCustInvoiceTrans);
            }
        }

        if (bundleId)
        {
            QueryBuildDataSource qbdsPeriodChargeCalculateExecutionItem = qbdsCustInvoiceTrans.addDataSource(tableNum(MarkupPeriodChargeCalculateExecutionItem));
            
            qbdsPeriodChargeCalculateExecutionItem.joinMode(JoinMode::ExistsJoin);
            qbdsPeriodChargeCalculateExecutionItem.addLink(fieldNum(CustInvoiceJour, InvoiceAccount), fieldNum(MarkupPeriodChargeCalculateExecutionItem, InvoiceAccount), qbdsCustInvoiceJour.name());
            qbdsPeriodChargeCalculateExecutionItem.fetchMode(QueryFetchMode::One2One);

            qbdsPeriodChargeCalculateExecutionItem.addRange(fieldNum(MarkupPeriodChargeCalculateExecutionItem, BundleId)).value(SysQuery::value(bundleId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected QueryRun buildQueryRun(Query _query)
    {
        return new QueryRun(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPeriodChargeRuleCheck</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void runPeriodChargeRuleCheck()
    {
        this.initDefault();
        Query periodChargeQuery = this.buildQuery();
        this.addPeriodRuleTypeRanges(periodChargeQuery);
        
        Query queryInvoiceGrouping = this.buildInvoiceGroupingQuery(periodChargeQuery);
        this.createGroupingQuery(queryInvoiceGrouping);

        QueryRun queryRunInvoiceGrouping = this.buildQueryRun(queryInvoiceGrouping);

        while (queryRunInvoiceGrouping.next())
        {
            CustInvoiceJour custInvoiceJour = queryRunInvoiceGrouping.get(tableNum(CustInvoiceJour));

            if (previousCustomer != custInvoiceJour.InvoiceAccount)
            {
                if (this.shouldFreeTextInvoiceBeCreated())
                {
                    this.populateInvoiceData();
                }
    
                previousInvoiceLineBaseDateFrom = custInvoiceJour.InvoiceDate;
                previousCustomer = custInvoiceJour.InvoiceAccount;
            }

            this.initializeInvoiceLineBase(queryRunInvoiceGrouping);
            previousInvoiceLineBaseDateTo = custInvoiceJour.InvoiceDate;
        }

        if (this.shouldFreeTextInvoiceBeCreated())
        {
            this.populateInvoiceData();
        }

        this.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void populateInvoiceData()
    {
	    using (var activityContext = this.instrumentationLogger().periodChargeRuleActivities().populateInvoiceData())
        {
            this.instrumentationLogger().periodChargeRuleActivities().logInitializeInvoiceLineBaseRecord(activityContext, periodChargeRule);
            this.instrumentationLogger().periodChargeRuleActivities().logInitializeInvoiceLineBaseRecord(activityContext, periodChargeRuleLine);

            this.populateInvoiceLineBase();

            if (!this.checkRuleLineCondition())
            {
                this.addInvoiceData();
                this.addInvoiceLineBaseRelationshipToInsertList();
            }
        
            this.setDefaultValues();
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void populateInvoiceLineBase()
    {
        if (this.mustAddInvoiceLineBaseHeader())
        {
            this.addInvoiceLineBaseHeader();

            this.calculateTotals();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddInvoiceLineBaseHeader</Name>
				<Source><![CDATA[
    abstract protected boolean mustAddInvoiceLineBaseHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    abstract protected void calculateTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceData()
    {
        this.addInvoiceDataToMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceDataToMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceDataToMap()
    {
        MarkupPeriodChargeFreeTextInvoiceCreateParameters invoiceCreationParameters = this.populateInvoiceCreationParameters();
        this.addInvoiceCreationParametersToMap(invoiceCreationParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void insertDatabase()
    {
        if (invoiceLineBaseRelationshipList)
        {
            invoiceLineBaseRelationshipList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvoiceGroupingQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Query buildInvoiceGroupingQuery(Query _query)
    {
        Query queryInvoiceGrouping = new Query(_query);
        queryInvoiceGrouping.clearOrderBy();
        QueryBuildDataSource qbdsCustInvoiceJour = queryInvoiceGrouping.dataSourceTable(tableNum(CustInvoiceJour));
        qbdsCustInvoiceJour.addGroupByAndSelectionField(fieldNum(CustInvoiceJour, InvoiceAccount));
        qbdsCustInvoiceJour.addGroupByAndSelectionField(fieldNum(CustInvoiceJour, InvoiceDate));
        qbdsCustInvoiceJour.addGroupByAndSelectionField(fieldNum(CustInvoiceJour, RecId));

        qbdsCustInvoiceJour.addOrderByField(fieldNum(CustInvoiceJour, InvoiceAccount));
        qbdsCustInvoiceJour.addOrderByField(fieldNum(CustInvoiceJour, InvoiceDate));
        qbdsCustInvoiceJour.addOrderByField(fieldNum(CustInvoiceJour, RecId));
        return queryInvoiceGrouping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void setDefaultValues()
    {
        invoiceLineBaseRelationshipSet = new Set(Types::Class);
        invoiceLineBaseSet = new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceLineBaseRelationshipToSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceLineBaseRelationshipToSet(RefTableId _invoiceLineBaseRefTableId, RefRecId _invoiceLineBaseRefRecId, boolean _addRuleLineRecId = false)
    {
        MarkupPeriodChargeInvoiceLineBaseRelationshipSetParameters invoiceLineBaseRelationshipParameters = new MarkupPeriodChargeInvoiceLineBaseRelationshipSetParameters();
        
        invoiceLineBaseRelationshipParameters.parmRefTableId(_invoiceLineBaseRefTableId);
        invoiceLineBaseRelationshipParameters.parmRefRecId(_invoiceLineBaseRefRecId);
        invoiceLineBaseRelationshipParameters.parmInvoiceLineBaseId(this.generateInvoiceLineBaseId());
        
        if (_addRuleLineRecId)
        {
            invoiceLineBaseRelationshipParameters.parmChargeCode(periodChargeRuleLine.ChargeCode);
        }

        invoiceLineBaseRelationshipSet.add(invoiceLineBaseRelationshipParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeFreeTextInvoiceCreateParameters populateInvoiceCreationParameters()
    {
        MarkupPeriodChargeFreeTextInvoiceCreateParameters invoiceCreationParameters = new MarkupPeriodChargeFreeTextInvoiceCreateParameters();
        
        invoiceCreationParameters.parmInvoiceAccount(previousCustomer);
        invoiceCreationParameters.parmLineDescription(periodChargeRuleLine.Description);
        invoiceCreationParameters.parmDefaultRevenueAccount(periodChargeRuleLine.DefaultRevenueAccount);
        invoiceCreationParameters.parminvoiceLineBaseSet(invoiceLineBaseSet);
        invoiceCreationParameters.parmInvoiceLineBaseFromDate(previousInvoiceLineBaseDateFrom);
        invoiceCreationParameters.parmInvoiceLineBaseToDate(previousInvoiceLineBaseDateTo);
        invoiceCreationParameters.parmInvoiceLineFromDate(invoiceLineDateFrom);
        invoiceCreationParameters.parmInvoiceLineAmount(this.calculateInvoiceLineAmount());
        invoiceCreationParameters.parmCurrency(this.getInvoiceCurrencyCode());

        return invoiceCreationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceCreationParametersToMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceCreationParametersToMap(MarkupPeriodChargeFreeTextInvoiceCreateParameters _invoiceCreationParameters)
    {
        List custInvoiceLineList;
        str invoiceMapKey = _invoiceCreationParameters.generateInvoiceMapKey();
        if (custInvoiceTableMap.exists(invoiceMapKey))
        {
            custInvoiceLineList = custInvoiceTableMap.lookup(invoiceMapKey);
        }
        else
        {
            custInvoiceLineList = new List(Types::Class);
        }

        custInvoiceLineList.addEnd(_invoiceCreationParameters);
        custInvoiceTableMap.add(invoiceMapKey, custInvoiceLineList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceLineBaseRelationshipToInsertList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceLineBaseRelationshipToInsertList()
    {
        MarkupPeriodChargeInvoiceLineBaseRelationship invoiceLineBaseRelationship;
        SetEnumerator invoiceLineBaseRelationshipSetEnumerator = invoiceLineBaseRelationshipSet.getEnumerator();
        while (invoiceLineBaseRelationshipSetEnumerator.moveNext())
        {
            MarkupPeriodChargeInvoiceLineBaseRelationshipSetParameters invoiceLineBaseRelationshipParameters = invoiceLineBaseRelationshipSetEnumerator.current();
            invoiceLineBaseRelationship.clear();
            invoiceLineBaseRelationship.RuleLineType = this.getPeriodChargeRuleLineRelationshipType();
            invoiceLineBaseRelationship.RefTableId = invoiceLineBaseRelationshipParameters.parmRefTableId();
            invoiceLineBaseRelationship.RefRecId = invoiceLineBaseRelationshipParameters.parmRefRecId();
            invoiceLineBaseRelationship.ChargeCode = invoiceLineBaseRelationshipParameters.parmChargeCode();
            invoiceLineBaseRelationship.InvoiceLineBaseId = invoiceLineBaseRelationshipParameters.parmInvoiceLineBaseId();
            invoiceLineBaseRelationship.ExecutionId = executionId;
            invoiceLineBaseRelationshipList.add(invoiceLineBaseRelationship);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodChargeRuleLineRelationshipType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleLineRelationshipType getPeriodChargeRuleLineRelationshipType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldFreeTextInvoiceBeCreated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean shouldFreeTextInvoiceBeCreated()
    {
        return previousCustomer && !blockInvoiceLineCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupingQuery</Name>
				<Source><![CDATA[
    abstract protected void createGroupingQuery(Query _query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPeriodRuleTypeRanges</Name>
				<Source><![CDATA[
    abstract protected void addPeriodRuleTypeRanges(Query _query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInvoiceLineBase</Name>
				<Source><![CDATA[
    abstract protected void initializeInvoiceLineBase(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleLineCondition</Name>
				<Source><![CDATA[
    abstract protected boolean checkRuleLineCondition()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBaseId</Name>
				<Source><![CDATA[
    abstract protected str generateInvoiceLineBaseId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceLineAmount</Name>
				<Source><![CDATA[
    abstract protected MarkupPeriodChargeRuleChargeAmount calculateInvoiceLineAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCurrencyCode</Name>
				<Source><![CDATA[
    abstract protected MarkupPeriodChargeRuleAmountCurrencyCode getInvoiceCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceLineBaseHeader</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceLineBaseHeader()
    {
        this.addInvoiceLineBaseHeaderToSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceLineBaseHeaderToSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceLineBaseHeaderToSet()
    {
        MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = this.populateInvoiceLineBaseCreationParameters();
        invoiceLineBaseCreationParameters.generateInvoiceLineBaseId();

        if (this.mustAddInvoiceLineBaseToSet())
        {
            invoiceLineBaseSet.add(invoiceLineBaseCreationParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddInvoiceLineBaseToSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustAddInvoiceLineBaseToSet()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceLineBaseCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupPeriodChargeInvoiceLineBaseCreateParameters populateInvoiceLineBaseCreationParameters()
    {
        MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = new MarkupPeriodChargeInvoiceLineBaseCreateParameters();

        // Need separate buffers to transfer periodChargeRule and periodChargeRuleLine, otherwise it is only a link
        MarkupPeriodChargeRule periodChargeRuleData;
        periodChargeRuleData.data(periodChargeRule);
        invoiceLineBaseCreationParameters.parmPeriodChargeRule(periodChargeRuleData);

        MarkupPeriodChargeRuleLine periodChargeRuleLineData;
        periodChargeRuleLineData.data(periodChargeRuleLine);

        invoiceLineBaseCreationParameters.parmPeriodChargeRuleLine(periodChargeRuleLineData);
        
        invoiceLineBaseCreationParameters.parmSalesInvoiceJourRecId(previousRecId);

        return invoiceLineBaseCreationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchSalesTableInventoryDimension</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean matchSalesTableInventoryDimension()
    {
        return salesParameters.MarkupPeriodChargeRuleSiteLocationMatch == MarkupPeriodChargeRuleSiteLocationMatch::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOrderSiteLocationFilter</Name>
				<Source><![CDATA[
    private void salesOrderSiteLocationFilter(QueryBuildDataSource _qbdsCustInvoiceTrans)
    {
        QueryBuildDataSource qbdsSalesTable = _qbdsCustInvoiceTrans.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.joinMode(JoinMode::ExistsJoin);
        qbdsSalesTable.addLink(fieldNum(CustInvoiceTrans, OrigSalesId), fieldNum(SalesTable, SalesId));
        qbdsSalesTable.fetchMode(QueryFetchMode::One2One);

        if (periodChargeRule.InventSiteId)
        {
            qbdsSalesTable.addRange(fieldNum(SalesTable, InventSiteId)).value(queryValue(periodChargeRule.InventSiteId));
        }

        if (periodChargeRule.InventLocationId)
        {
            qbdsSalesTable.addRange(fieldNum(SalesTable, InventLocationId)).value(queryValue(periodChargeRule.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLineSiteLocationFilter</Name>
				<Source><![CDATA[
    private void invoiceLineSiteLocationFilter(QueryBuildDataSource _qbdsCustInvoiceTrans)
    {
        QueryBuildDataSource qbdsInventDim = _qbdsCustInvoiceTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.addLink(fieldNum(CustInvoiceTrans, InventDimId), fieldNum(InventDim, InventDimId));
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);

        if (periodChargeRule.InventSiteId)
        {
            qbdsInventDim.addRange(fieldNum(InventDim, InventSiteId)).value(queryValue(periodChargeRule.InventSiteId));
        }

        if (periodChargeRule.InventLocationId)
        {
            qbdsInventDim.addRange(fieldNum(InventDim, InventLocationId)).value(queryValue(periodChargeRule.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MarkupInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireInvoiceLineChargeMatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean requireInvoiceLineChargeMatch()
    {
        // Never create free text invoice line without any line invoice base/Always create
        return salesParameters.MarkupPeriodChargeRuleIsChargeCodeMatchRequired;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>