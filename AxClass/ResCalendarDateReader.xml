<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCalendarDateReader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reads calendar dates from the corresponding tables.
/// </summary>
class ResCalendarDateReader implements ResICalendarDateReader
{
    Query                selectionQuery;
    QueryBuildDataSource selectionSource;
    QueryRun             selectionQueryRun;

    ResICalendarInfoResolver    calendarResolver;
    ResCalendarDate      dateObject;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ResICalendarInfoResolver    _calendarResolver)
    {
        super();
        calendarResolver = _calendarResolver;
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        dateObject = null;
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        selectionQueryRun = null;
        selectionQuery = new Query();
        selectionSource = selectionQuery.addDataSource(tablenum(ResCalendarDateDateLineView));

        selectionSource.addOrderByField(fieldnum(ResCalendarDateDateLineView, CalendarId));
        selectionSource.addOrderByField(fieldnum(ResCalendarDateDateLineView, TransDate));
        selectionSource.addOrderByField(fieldnum(ResCalendarDateDateLineView, FromTime));
        selectionSource.addOrderByField(fieldnum(ResCalendarDateDateLineView, ToTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves query used by reader.
    /// </summary>
    /// <returns>Query used by reader.</returns>
    public QueryRun getQuery()
    {
        if (!selectionQueryRun)
        {
            selectionQueryRun = new QueryRun(selectionQuery);
        }

        return selectionQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkTimeControl</Name>
				<Source><![CDATA[
    public ResCalendarDateReader setWorkTimeControl(WorkTimeControl _workTimeControl)
    {
        selectionSource.addRange(fieldnum(ResCalendarDateDateLineView, WorkTimeControl)).value(SysQuery::value(_workTimeControl));
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDateRange</Name>
				<Source><![CDATA[
    public ResCalendarDateReader setTransDateRange(TransDate _fromDate, TransDate _toDate)
    {
        selectionSource.addRange(fieldnum(ResCalendarDateDateLineView, TransDate)).value(SysQuery::range(_fromDate, _toDate));
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalendarId</Name>
				<Source><![CDATA[
    public ResCalendarDateReader setCalendarId(CalendarId _calendarId)
    {
        selectionSource.addRange(fieldnum(ResCalendarDateDateLineView, CalendarId)).value(SysQuery::value(_calendarId));
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ResCalendarDateReader construct(ResICalendarInfoResolver    _calendarResolver)
    {
        return new ResCalendarDateReader(_calendarResolver);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ResCalendarDateReader</c> class to read specific calendar.
    /// </summary>
    /// <param name = "_calendarId">Calendar to be read.</param>
    /// <param name = "_calendarResolver">Calendar information resolver to be used.</param>
    /// <returns></returns>
    public static ResCalendarDateReader newFromParameters(CalendarId _calendarId, ResICalendarInfoResolver _calendarResolver)
    {
        return  ResCalendarDateReader::construct(_calendarResolver).setCalendarId(_calendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads next calendar date from the query.
    /// </summary>
    /// <returns>A calendar date or <c>null</c> in case if there are no more dates matching the query.</returns>
    public ResCalendarDate readNext()
    {
        QueryRun query = this.getQuery();
        ResCalendarDateLine         lineObject;
        ResCalendarDate             dateToReturn;
        TableId dateLineView = tablenum(ResCalendarDateDateLineView);

        while (query.next())
        {
            ResCalendarDateDateLineView line = query.get(dateLineView);

            if (this.isNewDate(line))
            {
                dateToReturn = dateObject;

                dateObject = this.createNewDateObject(line);
            }

            this.addLinesToDateObject(dateObject, line);

            if (dateToReturn)
            {
                break;
            }
        }

        // last record read from the query
        if (!dateToReturn)
        {
            dateToReturn = dateObject;
            dateObject = null;
        }

        return dateToReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinesToDateObject</Name>
				<Source><![CDATA[
    private void addLinesToDateObject(ResCalendarDate _dateObject, ResCalendarDateDateLineView _line)
    {
        switch (_line.WorkTimeControl)
        {
            case WorkTimeControl::Open:
				// Apply effectivity to end time if calendar date line effectivity is not set to 100.00.
                ToTime toTime = (_line.Effectivity == 100.00) ? _line.ToTime :
                    _line.FromTime + any2Int((_line.ToTime - _line.FromTime) * (_line.Effectivity/100.00));
                _dateObject.addLine(ResCalendarDateLine::newFromParameter(_line.FromTime, toTime));
                break;
            case WorkTimeControl::Closed:
                break;
            case WorkTimeControl::Holiday:
                break;
            case WorkTimeControl::UseBasic:
                CalendarId baseCalendar = this.getBaseCalendarId(_line.CalendarId);
                this.addLinesToDateFromBaseCalendar(_dateObject, baseCalendar);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinesToDateFromBaseCalendar</Name>
				<Source><![CDATA[
    private void addLinesToDateFromBaseCalendar(ResCalendarDate _dateObject, CalendarId _baseCalendarId)
    {
        ResCalendarDateDateLineView line;
        TransDate transDate = _dateObject.parmTransDate();

        while select line
            order by line.TransDate, line.FromTime, line.ToTime
            where line.CalendarId == _baseCalendarId
               && line.TransDate == transDate

        {
            this.addLinesToDateObject(_dateObject, line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseCalendarId</Name>
				<Source><![CDATA[
    private CalendarId getBaseCalendarId(CalendarId _calendarId)
    {
        return calendarResolver.getCalendarInfoByCalendarId(_calendarId).parmBaseCalendarId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewDateObject</Name>
				<Source><![CDATA[
    private ResCalendarDate createNewDateObject(ResCalendarDateDateLineView _line)
    {
        var newDateObject = ResCalendarDate::construct();

        newDateObject.parmTransDate(_line.TransDate);

        return newDateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewDate</Name>
				<Source><![CDATA[
    private boolean isNewDate(ResCalendarDateDateLineView _line)
    {
        boolean result =
           (dateObject == null)
        || (dateObject.parmTransDate() != _line.TransDate);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>