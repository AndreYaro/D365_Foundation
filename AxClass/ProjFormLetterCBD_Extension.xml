<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFormLetterCBD_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ProjFormLetterCBD_Extension</c> is an extension class of the <c>ProjFormLetter</c>
/// that supports ER runtime print destinations.
/// </summary>
[ExtensionOf(classStr(ProjFormLetter))]
internal final class ProjFormLetterCBD_Extension
{
    internal container printManagementExtensionsSettings;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSupportedCBDReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if ER destination on runtime form is supported.
    /// </summary>
    /// <returns>true if ER destination on runtime form is supported; otherwise, false.</returns>
    internal boolean isSupportedCBDReport()
    {
        boolean ret = false;
        Set documentTypes = this.getPrintMgmtDocumentTypesSet();
        SetEnumerator se = documentTypes.getEnumerator();

        while (!ret && se.moveNext())
        {
            PrintMgmtDocumentType documentType = se.current();
            ret = CBDDestinationsFormLetterEngine::isSupportedPrintMgmtDocType(documentType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>analyzePrintManagementSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the print management setup.
    /// </summary>
    /// <returns>A container of analyze results.</returns>
    internal container analyzePrintManagementSetup()
    {
        boolean isERSetupExists = false;
        boolean isSSRSSetupExists = false;

        Set documentTypes = this.getPrintMgmtDocumentTypesSet();
        SetEnumerator se = documentTypes.getEnumerator();

        while ((!isERSetupExists || !isSSRSSetupExists) && se.moveNext())
        {
            PrintMgmtDocumentType documentType = se.current();
            boolean isERSetupExistsLoc;
            boolean isSSRSSetupExistsLoc;
            [isSSRSSetupExistsLoc, isERSetupExistsLoc] = CBDDestinationsFormLetterEngine::analyzePrintManagementSetup(this, documentType);

            isSSRSSetupExists = isSSRSSetupExists || isSSRSSetupExistsLoc;
            isERSetupExists = isERSetupExists || isERSetupExistsLoc;
        }

        return [isSSRSSetupExists, isERSetupExists];
    }

]]></Source>
			</Method>
			<Method>
				<Name>callERPrintSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls ER destinations forms.
    /// </summary>
    /// <param name = "_formLetter">An instance of the class <c>FormLetterServiceController</c>.</param>
    /// <returns>true if ER destinations were selected; otherwise, false.</returns>
    internal static boolean callERPrintSettingsFormletter(ProjFormLetter _formLetter)
    {
        boolean ret;

        Map formatNamesMap;

        Set documentTypes = _formLetter.getPrintMgmtDocumentTypesSet();
        SetEnumerator se = documentTypes.getEnumerator();

        while (se.moveNext())
        {
            PrintMgmtDocumentType documentType = se.current();
            Map formatNamesMapLoc = CBDDestinationsFormLetterEngine::getFormatNamesDestinationMapByFormLetter(_formLetter, documentType);

            if (!formatNamesMap)
            {
                formatNamesMap = formatNamesMapLoc;
            }
            else
            {
                MapEnumerator me = formatNamesMapLoc.getEnumerator();

                while (me.moveNext())
                {
                    if (!formatNamesMap.exists(me.currentKey()))
                    {
                        formatNamesMap.insert(me.currentKey(), me.currentValue());
                    }
                }
            }
        }

        NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult result = NonSSRSPrintMgmtAdapter::promptAndRestoreAdditionalParameters(
            formatNamesMap,
            NonSSRSPrintMgmtPromptExtensionParameters::newFromPacked(_formLetter.printManagementExtensionsSettings()));

        if (result.parmPromptResult())
        {
            ret = true;

            if (result.parmExtensionParameters() &&
                !result.parmExtensionParameters().isEmpty())
            {
                _formLetter.updatePrintManagementExtensionsSettings(result.parmExtensionParameters().pack());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printManagementExtensionsSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns packed settings for print management extensions.
    /// </summary>
    /// <returns>A container with packed settings.</returns>
    public container printManagementExtensionsSettings()
    {
        return printManagementExtensionsSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrintManagementExtensionsSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets given value to settings for print managements extensions.
    /// </summary>
    /// <param name = "_settings">Packed settings.</param>
    public void updatePrintManagementExtensionsSettings(container _settings)
    {
        printManagementExtensionsSettings = _settings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocumentTypesSet</Name>
				<Source><![CDATA[
    private Set getPrintMgmtDocumentTypesSet()
    {
        Set ret = new Set(Types::Enum);

        ProjInvoiceParmTable projInvoiceParmTableLoc;
        ProjProposalJour projProposalJour;

        while select projProposalJour
        exists join projInvoiceParmTableLoc
            where projInvoiceParmTableLoc.ProposalId == projProposalJour.ProposalId
                && projInvoiceParmTableLoc.ParmId == parmId
        {
            ProjInvoiceJour projInvoiceJourLoc;
            projInvoiceJourLoc.initFromProjProposal(projProposalJour);

            ProjFormLetter projFormLetterLoc = ProjFormLetter::construct(DocumentStatus::ProjectInvoice, false);
            projFormLetterLoc.unpack(this.pack());

            projFormLetterLoc.isBillingRule(PSAContractLineItems::hasBillingRules(projProposalJour.ProjInvoiceProjId));
            projFormLetterLoc.isRelease(ProjProposalJour::isProposalRelease(projProposalJour.ProposalId));

            MenuFunction menuFunction = ProjFormLetter_Invoice::getProjInvoiceMenuFunction(
                projInvoiceJourLoc,
                projInvoiceJourLoc,
                projFormLetterLoc,
                null,
                false);

            ret.add(PSAProjAndContractInvoiceController::getDocumentType(menuFunction.name(), projInvoiceJourLoc));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>