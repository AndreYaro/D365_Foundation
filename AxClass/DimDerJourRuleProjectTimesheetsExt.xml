<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerJourRuleProjectTimesheetsExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Dimension derivation journalizing rule extension for project timesheets.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleProjecTimesheets))]
public class DimDerJourRuleProjectTimesheetsExt extends DimensionDerivationRuleExtension
{
    TSTimesheetLine  tsTimesheetLine;
    TSTimesheetTable tsTimesheetTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultDimensionAllocation</Name>
				<Source><![CDATA[
    private LedgerDimensionAllocation getDefaultDimensionAllocation()
    {
        DebitCredit                     side;
        boolean                         oppositeAccount;
        ProjectAccountingDistribution   projectAccountingDistribution;
        ProjTable                       projTable;
        ProjCategory                    projCategory;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        LedgerDimensionAllocation       ledgerDimensionAllocation;
        ProjFundingSource               projFundingSource;
        TSTimesheetTrans                tsTimesheetTrans;
        Common                          sourceDocumentLineImplementation;

        if (tsTimesheetLine.ProjectDataAreaId == tsTimesheetLine.dataAreaId)
        {
            projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(
                dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution().RecId);
            projTable = ProjTable::findRecId(projectAccountingDistribution.ProjTable);
            projCategory = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory);
            projFundingSource = ProjFundingSource::find(projectAccountingDistribution.ProjFundingSource);
        }
        else
        {
            sourceDocumentLineImplementation = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmSourceDocumentLine().getSourceDocumentLineImplementation();
            if (sourceDocumentLineImplementation.TableId != tableNum(TSTimeSheetTrans))
            {
                throw error("@SYS6144");
            }
            tsTimesheetTrans = sourceDocumentLineImplementation;

            this.fetchTimesheetLine(tsTimesheetTrans);
        }

        side = dimensionDerivationRule.parmAccountingRule().parmSide();
        oppositeAccount = true;

        ledgerDimensionDefaultAccount = this.getLedgerDimensionDefaultAccount(projTable, projCategory, projectAccountingDistribution);

        if (ledgerDimensionDefaultAccount == 0)
        {
            if (tsTimesheetLine.isIntercompany())
            {
                checkFailed(strFmt("@Proj:MissingAccountIntercompany", ProjAccountType::PayrollAllocation));
            }
            else
            {
                checkFailed(strFmt("@Proj:MissingAccount",
                    ProjAccountType::PayrollAllocation,
                    projTable.ProjId,
                    projCategory.CategoryId ? projCategory.CategoryId : tsTimesheetLine.CategoryId));
            }

            throw Exception::Error;
        }

        ledgerDimension = this.getLedgerDimension(ledgerDimensionDefaultAccount, projFundingSource);

        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                 1,
                                                                                 side,
                                                                                 oppositeAccount);

        return ledgerDimensionAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetch <c>TsTimesheetLine</c> record.
    /// </summary>
    /// <param name = "_tsTimesheetTrans">
    ///     A <c>TSTimesheetTrans</c> table buffer.
    /// </param>
    protected void fetchTimesheetLine(TSTimesheetTrans _tsTimesheetTrans)
    {
        TSTimesheetLineWeek tsTimesheetLineWeek;

        select CategoryId from tsTimesheetLine
            join RecId from tsTimesheetLineWeek
                where tsTimesheetLine.RecId == tsTimesheetLineWeek.TSTimesheetLine &&
                    tsTimesheetLine.ProjectDataAreaId != tsTimesheetLine.dataAreaId &&
                    tsTimesheetLineWeek.RecId == _tsTimesheetTrans.TSTimesheetLineWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ledger dimension for the specified combination.
    /// </summary>
    /// <param name = "_projTable">
    ///     A <c>ProjTable</c> table buffer.
    /// </param>
    /// <param name = "_projCategory">
    ///     A <c>ProjCategory</c> table buffer.
    /// </param>
    /// <param name = "_projectAccountingDistribution">
    ///     A <c>ProjectAccountingDistribution</c> table buffer.
    /// </param>
    /// <returns>
    ///     The ledger dimesnion.
    /// </returns>
    [Wrappable(true)]
    protected final LedgerDimensionDefaultAccount getLedgerDimensionDefaultAccount(ProjTable _projTable, ProjCategory _projCategory,
        ProjectAccountingDistribution _projectAccountingDistribution)
    {
        ProjId projId = _projTable.ProjId;
        ProjCategoryId projCategoryId =  _projCategory.CategoryId ? _projCategory.CategoryId : tsTimesheetLine.CategoryId;
        ProjFundingSourceRefId fundingSource = _projectAccountingDistribution ? _projectAccountingDistribution.ProjFundingSource : 0;
        if (tsTimesheetLine.isIntercompany())
        {
            //
            // Projects are not shared between LEs, the Id value can exist in mutliple LEs, but they are not
            // the same project
            //
            projId = '';

            //
            // The category used is from the other LE, do not used for looking up the ledger account as it may not
            // be the same type in this LE.
            //
            projCategoryId = '';

            //
            // Funding sources are associated to the project's contract, since project are not shared,
            // the funding source cannot be shared.
            //
            fundingSource = 0;
        }

        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::PayrollAllocation,
            projId,
            projCategoryId,
            fundingSource);

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the value of ledger dimension.
    /// </summary>
    /// <param name = "_ledgerDimensionDefaultAccount">
    ///     Ledger dimension default account.
    /// </param>
    /// <param name = "_projTable">
    ///     Project invoice funding source table buffer.
    /// </param>
    /// <returns>
    ///     Ledger dimension account value from ledger dimension default account and project funding source.
    /// </returns>
    protected LedgerDimensionAccount getLedgerDimension(LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount, ProjFundingSource _projFundingSource)
    {
        return  LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimensionDefaultAccount,
            TSResource::getResourceEmploymentFromTimesheetLine(tsTimesheetLine).DefaultDimension, _projFundingSource.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension derivation rule extension.
    /// </summary>
    public void initialize()
    {
        TSTimesheetTrans sourceDocumentLineImplementation;
        TSTimesheetLineWeek tsTimesheetLineWeek;

        super();

        sourceDocumentLineImplementation = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmSourceDocumentLine().getSourceDocumentLineImplementation();

        tsTimesheetLineWeek = TSTimesheetLineWeek::findRecId(sourceDocumentLineImplementation.tsTimesheetLineWeek);
        tsTimesheetLine  = TSTimesheetLine::findRecId(tsTimesheetLineWeek.tsTimesheetLine);
        tsTimesheetTable = TSTimesheetTable::find(tsTimesheetLine.TimesheetNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates an allocation list that is based on project  or resource setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    /// The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        DebitCredit                     side;
        boolean                         oppositeAccount;

        side = dimensionDerivationRule.parmAccountingRule().parmSide();
        oppositeAccount = true;

        _ledgerDimensionAllocationList.addEnd(this.getDefaultDimensionAllocation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to dimension derivation rule extension events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>