<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym_RBC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendOutPaym_RBC extends VendOutPaym
{
    AmountCur total_Amount_Transactions;
    Counter total_Number_Transactions;
    Counter record_Count;
    str 10 rbcClientNumber;
    str 30 rbcClientName;
    CurrencyCanadaUS currencyCanadaUS;

    DialogField dialogCurrency;

    #define.preHeader('$$AAPDSTD0152[PROD[NL$$')
    #define.zero('0')

    #DEFINE.SysLastValuesCurrentVersion(1)
    #LOCALMACRO.SysLastValuesList
        currencyCanadaUS
    #ENDMACRO

    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        currencyCanadaUS,
        total_Amount_Transactions,
        total_Number_Transactions,
        record_Count,
        rbcClientNumber,
        rbcClientName
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the epilogue of the media, such as an end record for a file.
    /// </summary>
    public void close()
    {
        file.writeExp(this.createFileControl());
        setprefix(strfmt("@SYS73667", this.parmFilename()));
        info(strfmt("@SYS73669", this.parmTotal_Number_Transactions(0)));
        info(strfmt("@SYS73670", this.parmTotal_Amount_Transactions(0), this.getBankAccountTable().CurrencyCode));

        if (printControlReport)
        {
            this.printControlReport();
        }

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>codepage</Name>
				<Source><![CDATA[
    private int codepage()
    {
        #Localcodepage
        return #cp_1252;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares a trailer record for output to the export file.
    /// </summary>
    /// <returns>
    ///    A container.
    /// </returns>
    protected container createFileControl()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Trailer Record
        container trailerRecord = connull();

        #define.space(' ')
        #define.recType('Z')
        #define.trxCode('TRL')

        str 6       recordCount                     =   strrep(#zero, 6);     // Must be supplied
        str 1       recordType                      =   #recType;             // Trailer record
        str 3       transactionCode                 =   #trxCode;
        str 10      clientNumber                    =   strrep(#zero, 10);    // Must be supplied
        str 6       totalNumberTransactions         =   strrep(#zero, 6);     // Must be supplied
        str 14      totalAmountTransactions         =   strrep(#zero, 14);    // Must be supplied
        str 6       reserved1                       =   strrep(#zero, 6);
        str 14      reserved2                       =   strrep(#zero, 14);
        str 2       reserved3                       =   strrep(#zero, 2);
        str 6       totalNumberOptionalCustomerInfo =   strrep(#zero, 6);     // Not using, set to "0".
        str 12      filler1                         =   strrep(#space, 12);
        str 6       reserved4                       =   strrep(#space, 6);
        str 63      filler2                         =   strrep(#space, 63);
        str 2       reserved5                       =   strrep(#space, 2);
        str 1       filler3                         =   strrep(#space, 1);

        //  Add 1 to the record counter.
        recordCount = num2Str0(this.parmRecord_Count(1), 6);
        clientNumber = strLFix(this.getRBCClientNumber(), 10, #zero);
        totalNumberTransactions = num2Str0(this.parmTotal_Number_Transactions(0), 6);
        totalAmountTransactions = strRFix(stralpha(num2Str0(this.parmTotal_Amount_Transactions(0), 14, 2)), 14, #zero);

        trailerRecord       =   conins(trailerRecord, 1, recordCount +
                                                         recordType +
                                                         transactionCode +
                                                         clientNumber +
                                                         totalNumberTransactions +
                                                         totalAmountTransactions +
                                                         reserved1 +
                                                         reserved2 +
                                                         reserved3 +
                                                         totalNumberOptionalCustomerInfo +
                                                         filler1 +
                                                         reserved4 +
                                                         filler2 +
                                                         reserved5 +
                                                         filler3);

        return trailerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the header record for output to the export file.
    /// </summary>
    /// <returns>
    ///    A container.
    /// </returns>
    protected container createFileHeader()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Header Record
        container headerRecord = connull();

        #define.space(' ')
        #define.recType('A')
        #define.trxCode('HDR')
        #define.currTypeCAD('CAD')
        #define.currTypeUSD('USD')
        #define.inputType('1')
        #define.optionalRec('N')
        #define.ValidChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')

        str 6       recordCount                 =   strrep(#zero, 6);     // Must be supplied
        str 1       recordType                  =   #recType;             // Header record
        str 3       transactionCode             =   #trxCode;
        str 10      clientNumber                =   strrep(#zero, 10);    // Must be supplied
        str 30      clientName                  =   strrep(#space, 30);   // Must be supplied
        str 4       fileCreationNumber          =   strrep(#space, 4);    // Must be supplied
        str 7       fileCreationDate            =   strLFix(date2Julian(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), 7);
        str 3       currencyType                =   #currTypeCAD;
        str 1       inputType                   =   #inputType;
        str 15      filler1                     =   strrep(#space, 15);
        str 6       reserved1                   =   strrep(#space, 6);
        str 8       reserved2                   =   strrep(#space, 8);
        str 9       reserved3                   =   strrep(#space, 9);
        str 46      filler2                     =   strrep(#space, 46);
        str 2       filler3                     =   strrep(#space, 2);
        str 1       clientOptionalRecord        =   #optionalRec;

        //  Add 1 to the record counter.
        recordCount         =   num2Str0(this.parmRecord_Count(1), 6);
        clientNumber        =   this.getRBCClientNumber();
        clientName          =   strLFix(strkeep(this.parmRBCClientName(), #ValidChars), 30, #space);
        fileCreationNumber  =   num2Str0(this.getUniquePaymModeTable().LastSequenceNumber + 1, 4);
        fileCreationDate    =   strLFix(date2Julian(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), 7);

        if (currencyCanadaUS == CurrencyCanadaUS::US)
        {
            currencyType = #currTypeUSD;
        }

        headerRecord        =   conins(headerRecord, 1, recordCount +
                                                        recordType +
                                                        transactionCode +
                                                        clientNumber +
                                                        clientName +
                                                        fileCreationNumber +
                                                        fileCreationDate +
                                                        currencyType +
                                                        inputType +
                                                        filler1 +
                                                        reserved1 +
                                                        reserved2 +
                                                        reserved3 +
                                                        filler2 +
                                                        filler3 +
                                                        clientOptionalRecord);

        return headerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilePreHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the pre-header record for output to the export file.
    /// </summary>
    /// <returns>
    ///    A <c>container</c> value.
    /// </returns>
    /// <remarks>
    ///    The pre-header record reflects the Report Bitmap Control (RBC) - payment distribution service - RBC Standard (STD152) - Credit File Format Specifications.
    /// </remarks>
    protected container createFilePreHeader()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Pre-Header Record
        container preHeaderRecord = connull();
        str 23 preHeader = #preHeader;              // Standard pre - header string

        preHeaderRecord = conins(preHeaderRecord, 1, preHeader);
        return preHeaderRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class ID of the corresponding parent <c>CustVendOutPaymRecord</c> classes.
    /// </summary>
    /// <returns>
    /// The class ID.
    /// </returns>
    /// <remarks>
    /// The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public classId custVendOutPaymRecordRootClassId()
    {
        return classnum(VendOutPaymRecord_RBC_Credit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();
        dialog.caption(this.interfaceName());
        this.dialogAddFileName(dialog);
        this.dialogAddCurrency(dialog);
        this.dialogAddPrintDocument(PaymDocumentType::ControlReport, dialog, true);
        this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true, true, true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddCurrency</Name>
				<Source><![CDATA[
    protected void dialogAddCurrency(DialogRunbase _dialog)
    {
        DialogRunbase dialog = _dialog;
        dialog.addGroup("@SYS62786");
        dialogCurrency  = dialog.addFieldValue(enumstr(CurrencyCanadaUS), currencyCanadaUS, "@SYS7572");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendOutPaymRecord_RBC_Credit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>VendOutPaymRecord_RBC_Credit</c> class.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     An instance of the <c>VendOutPaymRecord_RBC_Credit</c> class.
    /// </returns>
    protected VendOutPaymRecord_RBC_Credit initializeVendOutPaymRecord_RBC_Credit(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendOutPaymRecord_RBC_Credit vendOutPaymRecord_RBC = CustVendOutPaymRecord::construct(_ledgerJournalTrans.PaymMode,
            _ledgerJournalTrans.PaymSpec,
            this,
            this.vendPaym(_ledgerJournalTrans));
        vendOutPaymRecord_RBC.parmFile(file);

        return vendOutPaymRecord_RBC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
     public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans              ledgerJournalTrans;
        VendOutPaymRecord_RBC_Credit    vendOutPaymRecord_RBC;
        boolean                         ok = true;

        int64 paymentLinesToProcess = this.findQueryRecordCount();
        int64 paymentLinesProcessed;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentGenerationGeneratePaymentLines, paymentLinesToProcess);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.getClassName());

            try
            {
                ttsbegin;

                setprefix("@SYS17561");

                queryRun.reset();
                outPaymRecordList = new List(Types::Class);

                while (queryRun.next())
                {
                    ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                    paymentLinesProcessed++;
                    progressLogger.trackProgress(paymentLinesProcessed);

                    if (!this.isOffsetAccountValid(ledgerJournalTrans))
                    {
                        continue;
                    }

                    if (!this.isVendorAccountActiveForDate(ledgerJournalTrans))
                    {
                        warning(strFmt("@SYS115093", ledgerJournalTrans.Voucher));
                        continue;
                    }

                    vendOutPaymRecord_RBC = this.initializeVendOutPaymRecord_RBC_Credit(ledgerJournalTrans);

                    setprefix(strfmt("@SYS66088",
                                        ledgerJournalTrans.TransDate,
                                        ledgerJournalTrans.Voucher,
                                        ledgerJournalTrans.parmAccount()));

                    if (vendOutPaymRecord_RBC.checkValues(ledgerJournalTrans, this.parmProgress()))
                    {
                        if (!vendOutPaymRecord_RBC.parmSkipPaymRecord())
                        {
                            vendOutPaymRecord_RBC.output();
                            outPaymRecordList.addEnd(vendOutPaymRecord_RBC);
                            this.updateLedgerJournalTrans(ledgerJournalTrans, vendOutPaymRecord_RBC, true);
                            this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                        }
                        else
                        {
                            continue;
                        }
                    }
                    else
                    {
                        ok = false;
                    }
                }

                if (!ok)
                {
                    throw error("@SYS18447");
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                progressLogger.logRetryOnDeadlock();

                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the Bank Account Table.
    /// </summary>
    /// <returns>
    ///    The Bank Account Table.
    /// </returns>
    public BankAccountTable getBankAccountTable()
    {
        return BankAccountTable::find(this.parmBankAccountID());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        if (dialogCurrency)
            currencyCanadaUS = dialogCurrency.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRBCClientNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the Royal Bank of Canada (RBC) client number.
    /// </summary>
    /// <returns>
    ///    The RBC client number.
    /// </returns>
    public str getRBCClientNumber()
    {
        return rbcClientNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the format to be displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to be displayed in the user interface.
    /// </returns>
    /// <remarks>
    /// The method must return the name of the format to be displayed in the user interface. Formats
    /// without an interface name cannot be used in electronic banking as export formats. They can serve as
    /// parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return 'RBC Payment Distribution Service (CA)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the media and creates the header of the media.
    /// </summary>
    public void open()
    {
        // Open file for text-output
        file = CustVendOutPaym::newFile(this.codepage());

        if (!file || file.status() != IO_Status::Ok)
        {
            // Error when opening file %1
            throw error(strfmt("@SYS73665", filename));
        }

        this.parmRBCClientName(strLFix(CompanyInfo::find().name(), 30));
        this.rbcClientNumber();
        if (!this.validateHeaderValues())
        {
            // Update has been canceled.
            throw(error(strfmt("@SYS18738", this.getUniquePaymModeTable().PaymMode)));
        }
        else
        {
            file.writeExp(this.createFilePreHeader());
            file.writeExp(this.createFileHeader());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <returns>
    /// A container storing the data to be persisted by <c>SysLastValues</c>.
    /// </returns>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derivative classes also implement this method so that the whole object
    /// can be packed for <c>SysLastValues</c>.
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion,#SysLastValuesList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrency</Name>
				<Source><![CDATA[
    public CurrencyCanadaUS parmCurrency(CurrencyCanadaUS _currency = currencyCanadaUS)
    {
        currencyCanadaUS = _currency;

        return currencyCanadaUS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRBCClientName</Name>
				<Source><![CDATA[
    public str parmRBCClientName(str _rbcClientname = rbcClientName)
    {
        rbcClientname = _rbcClientname;
        return rbccLientname;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecord_Count</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>Record_Count</c> parameter.
    /// </summary>
    /// <param name="_record_Count">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>Record_Count</c> parameter.
    /// </returns>
    public Counter parmRecord_Count(Counter _record_Count = record_Count)
    {
        record_Count += _record_Count;
        return record_Count;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotal_Amount_Transactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>Total_Amount_Transactions</c> parameter.
    /// </summary>
    /// <param name="_total_Amount_Transactions">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>Total_Amount_Transactions</c> parameter.
    /// </returns>
    public AmountCur parmTotal_Amount_Transactions(AmountCur _total_Amount_Transactions = total_Amount_Transactions)
    {
        total_Amount_Transactions += _total_Amount_Transactions;
        return total_Amount_Transactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotal_Number_Transactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>Total_Number_Transactions</c> parameter.
    /// </summary>
    /// <param name="_total_Number_Transactions">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>Total_Number_Transactions</c> parameter.
    /// </returns>
    public Counter parmTotal_Number_Transactions(Counter _total_Number_Transactions = total_Number_Transactions)
    {
        total_Number_Transactions += _total_Number_Transactions;
        return total_Number_Transactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPaymAdvice</Name>
				<Source><![CDATA[
    public void printPaymAdvice()
    {
        Args args = new Args();

        if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
        {
            BankPaymAdviceDefaultParameters defaultParameters = BankPaymAdviceDefaultParameters::newForPaymAdvicePrintRun(
                this.getPaymRecords(),
                new SrsPrintDestinationSettings(this.getPrinterSettings(PaymDocumentType::PaymAdvice)),
                printPaymAdvicePrintMgmt);

            args.parmObject(defaultParameters);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceVendV2), MenuItemType::Output).run(args);
        }
        else
        {
            args.caller(this);
            args.parmObject(this.getPaymRecords());
            args.parmEnumType(enumNum(NoYes));
            args.parmEnum(printPaymAdvicePrintMgmt);

            new MenuFunction(menuitemoutputstr(BankPaymAdviceVend), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rbcClientNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Formats the Royal Bank of Canada (RBC) client number from the bank account by using the <c>Company ID</c> property.
    /// </summary>
    /// <remarks>
    ///    Formats the number based on the Payment Distribution Services - RBC Standard (STD152) - Credit File Format Specifications.
    /// </remarks>
    public void rbcClientNumber()
    {
        BankAccountTable    bankAccountTable        =  this.getBankAccountTable();
        str 6               clientNumber            =  strrep(#zero, 6);
        str 4               clientSubsiduaryNumber  =  strrep(#zero, 4);

        if (strlen(bankAccountTable.CompanyPaymId) == 6)
        {
            rbcClientNumber = strLFix(bankAccountTable.CompanyPaymId, 10, #zero);
        }
        else
        {
            clientNumber            =   strRFix(substr(bankAccountTable.CompanyPaymId, 1, 6), 6, #zero);
            clientSubsiduaryNumber  =   strRFix(substr(bankAccountTable.CompanyPaymId, 7, 4), 4, #zero);
            rbcClientNumber         =   clientNumber + clientSubsiduaryNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>total</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the Total amount with the transaction amount.
    /// </summary>
    /// <param name="_amountCur">
    ///    The transaction amount.
    /// </param>
    public void total(AmountCur _amountCur)
    {
        this.parmTotal_Number_Transactions(1);
        this.parmTotal_Amount_Transactions(_amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container base;
        #LOCALMACRO.CurrentListV4
            currencyCanadaUS
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, base] = _packedClass;
                super(base);
                break;

            case 4:
                [version,#CurrentListV4,base]=_packedClass;
                super(base);
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <param name="_packedValues">
    /// The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derivative classes also implement this method so that the whole object
    /// can be unpacked for <c>SysLastValues</c>.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        container baseClassPackedValues;
        Version version = RunBase::getVersion(_packedValues);
        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    /// true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must validate the state of the internal variables. It is called before closing the
    /// dialog, and should be called in the <c>run</c> method.It must only contain code that adds warnings
    /// to the infolog.Throw is not allowed within this method.The method returns errors using the
    /// <c>Global::CheckFailed</c> method.Export formats that are designed to handle only one method of
    /// payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        #define.CanadianDollarISO('CAD')
        #define.USDollarISO('USD')
        Currency            currency;
        BankAccountTable    bankAccountTable;
        boolean             ok = true;
        boolean             currencyOk = false;
        boolean             noCanadianCurrency = true;
        boolean             noUSCurrency = true;

        bankAccountTable = this.getBankAccountTable();
        if (!bankAccountTable)
        {
            ok = checkFailed(strfmt("@SYS26720", accountId));
        }

        if (ok)
        {
            // If we are only paying Canadian currency transactions
            if (currencyCanadaUS == CurrencyCanadaUS::Canada)
            {
                // Verify that the currency of the bank is the same as the currency code for the Canadian Dollar ISO code (CAD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency where currency.CurrencyCodeISO == #CanadianDollarISO
                {
                    noCanadianCurrency = false;
                    if (currency.CurrencyCode == bankAccountTable.CurrencyCode)
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noCanadianCurrency)
                {
                    // There is not a currency code with the Canadian ISO currency code of 'CAD'.
                    ok = checkFailed("@SYS98121");
                }

                if (!currencyOk)
                {
                    // The currency code assigned to bank '%1' must be a Canadian currency.
                    ok = checkFailed(strfmt("@SYS98120", this.parmBankAccountID()));
                }
            }
            else if (currencyCanadaUS == CurrencyCanadaUS::US)
            {
                // Verify that the currency of the bank is the same as the currency code for the US Dollar ISO code (USD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency where currency.CurrencyCodeISO == #USDollarISO
                {
                    noUSCurrency = false;
                    if (currency.CurrencyCode == bankAccountTable.CurrencyCode)
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noUSCurrency)
                {
                    // There is not a currency code with the US ISO currency code of 'USD'.
                    ok = checkFailed("@SYS115581");
                }

                if (!currencyOk)
                {
                    // The currency code assigned to bank '%1' must be a US currency.
                    ok = checkFailed(strfmt("@SYS115583", this.parmBankAccountID()));
                }
            }
        }

        if (ok)
        {
            if (!filename)
            {
                ok = checkFailed("@SYS18624");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates values that are required by the export format.
    /// </summary>
    /// <returns>
    /// true if validation succeeds; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The following details are validated:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Methods of payment - Vendor: Last file number is not equal or more than 9999.
    ///   </description>
    ///   </item>
    ///   <item>
    ///   <description>Company information: Company name is not blank.</description>
    ///   </item>
    ///   <item>
    ///   <description>Bank account: Company ID is not blank.</description>
    ///   </item>
    ///  </list>
    ///  If any one of these validations fail, an appropriate error message is provided and the file export
    ///  does not occur.
    /// </remarks>
    protected boolean validateHeaderValues()
    {
        #DEFINE.allzeros('0000000000')
        boolean ok = true;
        // The next last file number used for this format will exceed 9999.
        if (this.getUniquePaymModeTable().LastSequenceNumber + 1 > 9999)
        {
            // Methods of payment - %1, export format requires that the last file number cannot exceed 9999
            ok = checkFailed(strfmt("@SYS98755", this.getUniquePaymModeTable().PaymMode));
        }

        // Company Name field is blank.
        if (strlen(strltrim(this.parmRBCClientName())) < 1)
        {
            // Methods of payment - %1, export format requires a non-blank Company name
            ok = checkFailed(strfmt("@SYS98756", this.getUniquePaymModeTable().PaymMode));
        }

        // The Comany ID value for the selected bank is not valid.
        if (this.getRBCClientNumber() == #allZeros)
        {
            // Methods of payment - %1, export format requires a valid Company ID for bank account: %2
            ok = checkFailed(strfmt("@SYS98757", this.getUniquePaymModeTable().PaymMode,
                                             this.getBankAccountTable().AccountID));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return new VendOutPaym_RBC().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>