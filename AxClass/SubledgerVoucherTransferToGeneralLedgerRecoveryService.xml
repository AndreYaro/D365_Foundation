<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerVoucherTransferToGeneralLedgerRecoveryService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerVoucherTransferToGeneralLedgerRecoveryService</c> class acts as a controller for the
/// <c>SubLedgerJournalTransferOperation</c> service to recover stuck vouchers as transfer to GL process abruptly failed and the vouchers stuck.
/// </summary>
/// <remarks>
/// This class is a customized controller extending from the <c>SysOperationServiceController</c> class.
/// </remarks>
internal class SubledgerVoucherTransferToGeneralLedgerRecoveryService extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>recoverStuckTransferVouchers</Name>
				<Source><![CDATA[
    internal void recoverStuckTransferVouchers()
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::InstrumentationNamespaceForBatchTransfer,
            classStr(SubledgerVoucherTransferToGeneralLedgerRecoveryService),
            SourceDocumentInstrumentationConstants::SubledgerToGeneralLedgerTransferRecoverStuckVoucherProcess))
        {
            const int MaxRetryCount = 5;
            const int RetryWait = 500;

            SubledgerJournalEntry subledgerJournalEntry;
            LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

            //This temp table contain the current set of vouchers that are stuck in the In-Process State
            SubledgerJournalEntryMarkedForTransferToGeneralLedger subledgerJournalEntryMarkedForTransferToGeneralLedger;
        
            utcdatetime currentTime;
            
            currentTime = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -1);
            
            utcdatetime cutOffTime = DateTimeUtil::addMonths(DateTimeUtil::utcNow(), -6);

            try
            {
                ttsbegin;

                if (SubledgerJournalTransferOperation::numberOfBatchTransferInstancesExecuting() == 0)
                {
                    subledgerJournalEntry.readPast(true);

                    insert_recordset subledgerJournalEntryMarkedForTransferToGeneralLedger
                    (
                        SubledgerJournalEntry
                    )
                    select pessimisticlock RecId from subledgerJournalEntry
                        where subledgerJournalEntry.Status == SubledgerJournalEntryStatus::TransferInProcess &&
                            subledgerJournalEntry.ModifiedDateTime <= currentTime &&
                            subledgerJournalEntry.ModifiedDateTime >= cutOffTime
                    exists join ledgerFiscalCalendarPeriod
                        where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == subledgerJournalEntry.FiscalCalendarPeriod
                            && ledgerFiscalCalendarPeriod.Ledger == subledgerJournalEntry.Ledger
                            && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open
                    notexists join subledgerVoucherGeneralJournalEntry
                        where subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId &&
                            subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry != 0;

                    select firstonly RecId from subledgerJournalEntryMarkedForTransferToGeneralLedger;

                    if (subledgerJournalEntryMarkedForTransferToGeneralLedger.RecId != 0)
                    {
                        subledgerJournalEntry.clear();

                        subledgerJournalEntry.skipDataMethods(true);

                        update_recordset subledgerJournalEntry
                            setting Status = SubledgerJournalEntryStatus::NotTransferred,
                                TransferId = 0
                        exists join subledgerJournalEntryMarkedForTransferToGeneralLedger
                            where subledgerJournalEntryMarkedForTransferToGeneralLedger.SubledgerJournalEntry == subledgerJournalEntry.RecId;

                        activityContext.addCustomProperty(
                            SourceDocumentInstrumentationConstants::VoucherRecoveryAttempted,
                            any2Str('Yes'));
                    }
                }

                ttscommit;

                //Recover the Vendor invoices which are posted but the Source relation type is not set to VendInvoiceJour

                ttsbegin;

                SubledgerJournalEntryNotTransferred subledgerJournalNotTransferred;
                SourceDocumentHeader sourceDocumentHeader;

                sourceDocumentHeader.skipDataMethods(true);

                update_recordset sourceDocumentHeader
                    setting SourceRelationType = tableNum(VendInvoiceJour)
                exists join subledgerJournalNotTransferred
                    where subledgerJournalNotTransferred.SourceDocumentHeader == sourceDocumentHeader.RecId &&
                        subledgerJournalNotTransferred.SourceRelationType == tableNum(VendInvoiceInfoTable);

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() < MaxRetryCount)
                {
                    sleep(RetryWait);
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() < MaxRetryCount)
                {
                    sleep(RetryWait);
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubledgerVoucherTransferToGeneralLedgerRecoveryServiceController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>SubledgerVoucherTransferToGeneralLedgerRecoveryService</c>.
    /// </summary>
    /// <returns>An instance of <c>SubledgerVoucherTransferToGeneralLedgerRecoveryService</c>.</returns>
    public static SubledgerVoucherTransferToGeneralLedgerRecoveryService createSubledgerVoucherTransferToGeneralLedgerRecoveryServiceController()
    {
        // Create new controller for this transfer. Mode = Synchronous if parent is synchronous, Else reliable asynchronous.
        SubledgerVoucherTransferToGeneralLedgerRecoveryService subledgerVoucherTransferToGeneralLedgerRecoveryServiceController = new SubledgerVoucherTransferToGeneralLedgerRecoveryService(
            classStr(SubledgerVoucherTransferToGeneralLedgerRecoveryService),
            methodStr(SubledgerVoucherTransferToGeneralLedgerRecoveryService, recoverStuckTransferVouchers),
            SysOperationExecutionMode::ReliableAsynchronous);

        return subledgerVoucherTransferToGeneralLedgerRecoveryServiceController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides caption for the transfer.
    /// </summary>
    /// <returns>
    /// Caption for the transfer.
    /// </returns>
    public ClassDescription caption()
    {
        return "@SourceDocumentAccountingFramework:SubledgerVoucherTransferToGeneralLedgerRecoveryService";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>