<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalReport_BomReq_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class InventJournalReport_BomReq_RU extends InventJournalReport_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of report class
    /// </summary>
    /// <returns>
    /// New instance of report class
    /// </returns>
    protected XMLExcelReport_RU createExcelReport()
    {
        return OXMLExcelReport_M11_RU::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates xmlDocument which contains report data
    /// </summary>
    /// <param name="_reportTable">
    /// InventJournalReportTable_RU which will be printed
    /// </param>
    /// <returns>
    /// XmlDocument which contains report data
    /// </returns>
    public XmlDocument initReportData(InventJournalReportTable_RU _reportTable)
    {
        InventJournalData_BOMReq_Report_RU reportData = new InventJournalData_BOMReq_Report_RU();

        return reportData.createXML(_reportTable.ReportId,
                                    _reportTable.JournalId,
                                    _reportTable.TransDate,
                                    _reportTable.OffSessionId,
                                    _reportTable.AnalysisDimensionAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether report is an excel report
    /// </summary>
    /// <returns>
    /// True
    /// </returns>
    protected boolean isExcelReport()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItem</Name>
				<Source><![CDATA[
    public str menuItem()
    {
        return menuitemDisplayStr(InventJournalRep_BOMReq_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItem_Posted</Name>
				<Source><![CDATA[
    public str menuItem_Posted()
    {
        return menuitemOutputStr(InventJournal_PostedRep_BOMReq_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        supportedJournalTypes.add(InventJournalType::BOM);
        supportedJournalTypes.add(InventJournalType::LossProfit);
        supportedJournalTypes.add(InventJournalType::Movement);
        supportedJournalTypes.add(InventJournalType::Asset);
        supportedJournalTypes.add(InventJournalType::Count);
        supportedJournalTypes.add(InventJournalType::project);
        supportedJournalTypes.add(InventJournalType::Transfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReference</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReference()
    {
        return NumberSeqReference::findReference(extendedTypeNum(InventJournalReport_BOMReqId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType</Name>
				<Source><![CDATA[
    public InventJournalReportType_RU reportType()
    {
        return InventJournalReportType_RU::BOMReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves report data to inventJournalReportTable_RU
    /// </summary>
    /// <param name="_journalTransList">
    /// List of transaction which will be printed
    /// </param>
    public void saveReport(JournalTransList _journalTransList)
    {
        Map                  dateCostMap = new Map(Types::Date, Types::Real);

        _journalTransList.reset();

        while (_journalTransList.next())
        {
            if (this.hasTransError(_journalTransList))
                continue;

            InventJournalTrans inventJournalTrans = _journalTransList.item();

            if ((inventJournalTrans.JournalType == InventJournalType::BOM && inventJournalTrans.bomLine == NoYes::No) ||
                (inventJournalTrans.JournalType != InventJournalType::BOM && inventJournalTrans.Qty > 0))
                continue;

            CostAmount costAmount = inventJournalTrans.CostAmount;

            if (dateCostMap.exists(inventJournalTrans.TransDate))
            {
                costAmount += dateCostMap.lookup(inventJournalTrans.TransDate);
            }

            dateCostMap.insert(inventJournalTrans.TransDate, costAmount);
        }

        this.insertReport(dateCostMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    static InventJournalReport_RU create(container _packedClass)
    {
        InventJournalReport_RU report = new InventJournalReport_BomReq_RU();
        report.unpack(_packedClass);

        return report;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
