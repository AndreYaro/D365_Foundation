<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkExecuteDisplayProdLastPallet</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to show production order info during last pallet picking.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ProdLastPallet)]
class whsWorkExecuteDisplayProdLastPallet extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildProdOrderInfo</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state to show production order information.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    container buildProdOrderInfo(container _con)
    {
        ProdTable               prodTable;
        container               ret = _con;
        UnitOfMeasureSymbol     inventUOM;

        prodTable = ProdTable::find(pass.lookup(#ProdId));
        inventUOM = InventTableModule::find(prodTable.ItemId, ModuleInventPurchSales::Invent).UnitId;

        ret += [this.buildControl(#RFLabel, 'ProdIdLabel', strFmt("@WAX1684", prodTable.ProdId), 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(ProdId))];
        ret += [this.buildControl(#RFLabel, #ItemInfo, this.generateItemInfoForProdId(pass.lookup(#ProdId)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX1685", WHSWorkExecuteDisplay::num2StrDisplay(prodTable.QtySched), inventUOM), 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(WHSRFQuantityAndUOM))];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;
        WHSRFPassthrough        fieldValues;
        container               tmpFieldValues;
        boolean                 complete;
        WHSProdTable            whsProdTable;
        ProdTable               prodTable;

        mode = WHSWorkExecuteMode::ProdLastPallet;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        switch (step)
        {
            case 0:
                ret = this.buildGetProdId(ret);
                ret = this.addCancelButton(ret, 1, true);
                step = 1;
                break;

            case 1:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    break;
                }

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (complete)
                {
                    ret = conNull();
                    ret = this.buildProdOrderInfo(ret);
                    ret = this.addCancelButton(ret, 1, true);
                    step = 2;
                }
                break;

            case 2:
                ttsbegin;
                whsProdTable = WHSProdTable::find(pass.lookup(#ProdId), true);
                prodTable    = ProdTable::find(pass.lookup(#ProdId), true);

                if (whsProdTable)
                {
                    if (!whsProdTable.LastPallet)
                    {
                        whsProdTable.LastPallet  = NoYes::Yes;
                        whsProdTable.update();
                    }

                    WHSProdTable::stopAndUnpick(whsProdTable.ProdId);
                    WHSProdTable::removeStop(whsProdTable.ProdId, userId);
                }

                prodTable.RemainInventPhysical = 0;
                prodTable.PdsCWRemainInventPhysical = 0;

                prodTable.update();
                ttscommit;

                ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                ret = this.buildGetProdId(ret);
                ret = this.addCancelButton(ret, 1, true);
                step = 1;
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>