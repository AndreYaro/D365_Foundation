<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProductReceiptSourceDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProductReceiptSourceDoc</c> class provides the information to handle the
///    distributions and sub-ledger journal lines of a <c>VendPackingSlipJour</c> record that is generated
///    from a product receipt.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductReceipt), SourceDocument_ProductReceipt::ProductReceipt, tableStr(VendPackingSlipJour))]
public class ProductReceiptSourceDocument extends SourceDocument
    implements SourceDocumentIParty,
                SourceDocumentIFinalize,
                SourceDocumentIPostingJournalSeqProv
{
    VendPackingSlipJour    vendPackingSlipJour;
    VendTable              orderAccount;
    VendTable              invoiceAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    /// A source document implementation table.
    /// </param>
    protected void initializeImplementation(SourceDocumentHeaderImplementation _sourceDocumentImplementation)
    {
        vendPackingSlipJour = _sourceDocumentImplementation;

        orderAccount = vendPackingSlipJour.vendTable_OrderAccount();
        invoiceAccount = VendTable::find(vendPackingSlipJour.InvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseGroupBySourceRelationForSetBasedTransitionDeterminationOfAccountingPolicy</Name>
				<Source><![CDATA[
    public boolean canUseGroupBySourceRelationForSetBasedTransitionDeterminationOfAccountingPolicy()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        return VendPackingSlipVersion::findLatest(vendPackingSlipJour.RecId).LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    public DocumentDate parmDocumentDate()
    {
        return vendPackingSlipJour.DocumentDate ? vendPackingSlipJour.DocumentDate : vendPackingSlipJour.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        return vendPackingSlipJour.PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalizedVoucher</Name>
				<Source><![CDATA[
    public Voucher parmFinalizedVoucher(DataAreaId _dataAreaId)
    {
        Voucher finalizeVoucher = NumberSeq::newGetNum(VendParameters::numRefProductReceiptFinalizationVoucher()).num();

        return finalizeVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalizeTransactionText</Name>
				<Source><![CDATA[
    public str parmFinalizeTransactionText()
    {
        return this.retrieveTransactionTxt(LedgerTransTxt::PurchPackingSlipFinalizeLedger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCorrection</Name>
				<Source><![CDATA[
    public boolean parmIsCorrection()
    {
        boolean isCorrection;
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            LedgerParameters::findByCompany(curext()).TransactionReversalCorrection)
        {
            PurchParmUpdate purchParmUpdate = PurchParmUpdate::find(VendPackingSlipVersion::findLatest(vendPackingSlipJour.RecId).ParmId);

            if (purchParmUpdate.StornoPhysical_RU)
            {
                PurchParmTable purchParmTable = PurchParmTable::findPurchId(vendPackingSlipJour.PurchId, purchParmUpdate.ParmId);

                if (purchParmTable)
                {
                    PurchTotals purchTotals = PurchTotals::newParmTable(purchParmTable,
                        purchParmUpdate.SpecQty,
                        purchParmUpdate.ParmId,
                        purchParmUpdate.SumPurchId,
                        DocumentStatus::PackingSlip);

                    purchTotals.calc();

                    if (VendPackingSlipVersion::numberOfPackingSlipVersions(vendPackingSlipJour.RecId) > 1)
                    {
                        if (purchTotals.purchTotalAmount())
                        {
                            isCorrection = purchTotals.purchTotalAmount() > 0;
                        }
                        else
                        {
                            isCorrection = VendPackingSlipVersion::findFirst(vendPackingSlipJour.RecId).Qty > 0;
                        }
                    }
                    else
                    {
                        isCorrection = purchTotals.purchTotalAmount() < 0;
                    }
                }
            }
        }
        else
        {
            isCorrection = LedgerParameters::findByCompany(curext()).TransactionReversalCorrection &&
                           VendPackingSlipVersion::numberOfPackingSlipVersions(vendPackingSlipJour.RecId) > 1;
        }
        // </GEERU>

        return isCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsStornoForReversal_RU</Name>
				<Source><![CDATA[
    public boolean parmIsStornoForReversal_RU()
    {
        return LedgerParameters::findByCompany(curext()).TransactionReversalCorrection &&
            PurchParmUpdate::find(VendPackingSlipVersion::findLatest(vendPackingSlipJour.RecId).ParmId).StornoPhysical_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartyAccount</Name>
				<Source><![CDATA[
    public Common parmPartyAccount()
    {
        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocumentFinalizedDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionText</Name>
				<Source><![CDATA[
    public str parmTransactionText()
    {
        str ret = this.retrieveTransactionTxt(LedgerTransTxt::PurchPckSlpLedger, this.parmCurrentVoucher(curext()));

        if (!ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text for the purchase order and the specified <c>LedgerTransTxt</c> value.
    /// </summary>
    /// <param name="_ledgerTransTxt">
    /// A <c>LedgerTransTxt</c> value for which to retrieve the transaction text.
    /// </param>
    /// <param name="_voucher">
    /// The ledger voucher of a transaction.
    /// </param>
    /// <returns>
    /// The transaction text.
    /// </returns>
    protected str retrieveTransactionTxt(LedgerTransTxt _ledgerTransTxt, Voucher _voucher = "")
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();

        transactionTxt.setType          (_ledgerTransTxt);
        transactionTxt.setVoucher       (_voucher);
        transactionTxt.setFormLetter    (vendPackingSlipJour.PackingSlipId);
        transactionTxt.setLanguage      (currentUserLanguage());
        transactionTxt.setKey1          (vendPackingSlipJour.PurchId);
        transactionTxt.setKey2          (vendPackingSlipJour.OrderAccount);
        transactionTxt.setKey3          (VendTable::groupId(vendPackingSlipJour.OrderAccount));

        if (TransactionTextContext::isTypeSupported(_ledgerTransTxt))
        {
            TransactionTextContext transactionTextContext = TransactionTextContext::newForTransactionType(_ledgerTransTxt);
            transactionTextContext.setTableBuffer(vendPackingSlipJour);
            transactionTextContext.setTableBuffer(vendPackingSlipJour.purchTable());
            transactionTxt.setTransactionTextContext(transactionTextContext);
        }

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherSeriesNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides posting journal number sequence code, currently used for Belgium.
    /// </summary>
    /// <param name="_company">
    /// The company ID needed to get the country code.
    /// </param>
    /// <returns>
    /// The number sequence code.
    /// </returns>
    public NumberSequenceCode getVoucherSeriesNumberSequence(CompanyId _company)
    {
        #ISOCountryRegionCodes

        NumberSequenceCode voucherSeries;

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE], _company))
        {
            return voucherSeries;
        }

        NumberSequenceReference numberSequenceRefPackingSlip = NumberSeqReference::findReference(extendedTypeNum(PurchInternalPackingSlipId));  // Internal packingslip
        NumberSequenceReference numberSequenceRefVoucher = NumberSeqReference::findReference(extendedTypeNum(PurchPackingSlipVoucher));     // packingslip voucher

        NumberSequenceTable numberSequenceTablePackingSlip = NumberSequenceTable::find(numberSequenceRefPackingSlip.NumberSequenceId);
        NumberSequenceTable numberSequenceTableVoucher = NumberSequenceTable::find(numberSequenceRefVoucher.NumberSequenceId);
        NumberSequenceDatatype packingSlipDatatype = NumberSequenceDatatype::find(numberSequenceRefPackingSlip.NumberSequenceDatatype);
        NumberSequenceDatatype voucherDatatype = NumberSequenceDatatype::find(numberSequenceRefVoucher.NumberSequenceDatatype);

        NumberSequenceGroupId numberSequenceGroupId = (vendPackingSlipJour && vendPackingSlipJour.NumberSequenceGroup) ?
                vendPackingSlipJour.NumberSequenceGroup :
                VendTable::find(vendPackingSlipJour.InvoiceAccount).numberSequenceGroup;
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        RefRecId packingSLipVoucherId;

        if (numberSequenceGroupId)
        {
            RefRecId packingSlipNumberId = NumberSequenceGroupRef::findNaturalKey(packingSlipDatatype.RecId, scopeId, numberSequenceGroupId).NumberSequenceId;

            if (!packingSlipNumberId)
            {
                packingSlipNumberId = numberSequenceRefPackingSlip.NumberSequenceId;
            }

            if (numberSequenceRefVoucher.AllowSameAs)
            {
                packingSLipVoucherId = packingSlipNumberId;
            }
            else
            {
                packingSLipVoucherId = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, numberSequenceGroupId).NumberSequenceId;

                if (!packingSLipVoucherId)
                {
                    packingSLipVoucherId = numberSequenceRefVoucher.NumberSequenceId;
                }
            }
            voucherSeries = NumberSequenceTable::find(packingSLipVoucherId).NumberSequence;
        }
        else
        {
            if (numberSequenceRefVoucher.AllowSameAs && voucherDatatype.DataTypeSameAsId == packingSlipDatatype.DatatypeId)
            {
                numberSequenceTableVoucher = numberSequenceTablePackingSlip;
            }
            voucherSeries = numberSequenceTableVoucher.NumberSequence;
        }

        return voucherSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceDocumentLinesForTermQuantityChange</Name>
				<Source><![CDATA[
    public void updateSourceDocumentLinesForTermQuantityChange()
    {
        SourceDocumentLine localSourceDocumentline;
        VendPackingSlipTrans localVendPackingSlipTrans;

        update_recordset localSourceDocumentline
            setting TermQuantity = localVendPackingSlipTrans.Qty
            join localVendPackingSlipTrans
                where localVendPackingSlipTrans.SourceDocumentLine == localSourceDocumentLine.RecId
                    && localSourceDocumentLine.SourceDocumentHeader == vendPackingSlipJour.SourceDocumentHeader;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>