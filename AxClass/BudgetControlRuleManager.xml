<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlRuleManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlRuleManager</c> class manages the budget control rules.
/// </summary>
public class BudgetControlRuleManager
{
    DimensionExpressionCriteriaCollection expressionCriteriaCollection;

    RecId ruleId;

    Description             description;
    BudgetControlRuleName   name;
    RefRecId                budgetCycleTimeSpanRecId;
    BudgetResponsibleUser   budgetResponsibleUser;
    BudgetInterval          budgetInterval;
    BudgetThresholdPercent  budgetThresholdPercent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAllCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all the criteria items.
    /// </summary>
    public void clearAllCriteria()
    {
        expressionCriteriaCollection = DimensionExpressionCriteriaCollection::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the criteria expression to the rule.
    /// </summary>
    /// <param name="_expressionCriteria">
    ///    The <c>DimensionExpressionCriteria</c> object to add.
    /// </param>
    public void addExpressionCriteria(DimensionExpressionCriteria _expressionCriteria)
    {
        // Remove any existing criteria as only one expression can be defined per dimension attribute.
        expressionCriteriaCollection.removeCriteriaForAttribute(_expressionCriteria.parmDimensionAttributeId());

        expressionCriteriaCollection.addExpressionCriteria(_expressionCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the criteria for the specified dimension attribute.
    /// </summary>
    /// <param name = "_dimensionAttributeRecId">
    ///    The dimension attribute ID for which to get the criteria.
    /// </param>
    /// <returns>
    ///    The criteria for the dimension attribute if it has been entered; otherwise, the default all values allowed criteria.
    /// </returns>
    protected DimensionExpressionCriteria getExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        DimensionExpressionCriteria expressionCriteria;

        expressionCriteriaCollection.initializeEnumerator();

        while (expressionCriteriaCollection.moveNext())
        {
            if (expressionCriteriaCollection.current().parmDimensionAttributeId() == _dimensionAttributeRecId)
            {
                expressionCriteria = expressionCriteriaCollection.current();
                break;
            }
        }

        if (!expressionCriteria)
        {
            expressionCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                _dimensionAttributeRecId,
                DimensionCriteriaOperators::WildcardSQL,
                '',
                '',
                false,
                false);
        }

        return expressionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionExpressionCriteria</Name>
				<Source><![CDATA[
    internal DimensionExpressionCriteria getDimensionExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecid)
    {
        return this.getExpressionCriteria(_dimensionAttributeRecid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the criteria for the specified dimension attribute.
    /// </summary>
    /// <param name = "_dimensionAttributeRecId">
    ///    The dimension attribute ID for which to remove the criteria.
    /// </param>
    public void removeExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        expressionCriteriaCollection.removeCriteriaForAttribute(_dimensionAttributeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the record ID of the <c>BudgetControlRule</c> record.
    /// </summary>
    /// <returns>
    ///    The record ID of the <c>BudgetControlRule</c> record.
    /// </returns>
    public recId getRuleId()
    {
        return ruleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>BudgetControlRuleManager</c> class.
    /// </summary>
    /// <param name="_controlRuleRecId">
    ///    The record ID of the <c>BudgetControlRule</c> record.
    /// </param>
    protected void initialize(RecId _controlRuleRecId)
    {
        BudgetControlRule controlRule = BudgetControlRule::find(_controlRuleRecId);

        description = controlRule.Description;
        name = controlRule.Name;
        ruleId = controlRule.RecId;
        budgetCycleTimeSpanRecId = controlRule.BudgetCycleTimeSpan;
        budgetResponsibleUser = controlRule.OverrideResponsibleUser;
        budgetInterval = controlRule.Interval;
        budgetThresholdPercent = controlRule.ThresholdPercent;

        this.initializeExpressionCriteriaCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>DimensionExpressionCriteriaCollection</c> object for the budget control rule.
    /// </summary>
    public void initializeExpressionCriteriaCollection()
    {
        BudgetControlRuleCriteria controlRuleCriteria;
        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
        DimensionAttribute DimensionAttribute;

        expressionCriteriaCollection = DimensionExpressionCriteriaCollection::construct();

        while select * from controlRuleCriteria
            where controlRuleCriteria.BudgetControlRule == ruleId
            join Ordinal, RecId from controlDimensionAttribute
                order by Ordinal
                where controlDimensionAttribute.RecId == controlRuleCriteria.BudgetControlDimensionAttribute
            join RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
        {
            expressionCriteriaCollection.addExpressionCriteria(
                DimensionExpressionCriteria::newForDimensionExpression(
                    dimensionAttribute.RecId,
                    controlRuleCriteria.WildCardString,
                    controlRuleCriteria.RangeFrom,
                    controlRuleCriteria.RangeTo,
                    controlRuleCriteria.IsFromOpen,
                    controlRuleCriteria.IsToOpen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    public RefRecId parmBudgetCycleTimeSpan(RefRecId _budgetCycleTimeSpanRecId = budgetCycleTimeSpanRecId)
    {
        budgetCycleTimeSpanRecId = _budgetCycleTimeSpanRecId;

        return budgetCycleTimeSpanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetInterval</Name>
				<Source><![CDATA[
    public BudgetInterval parmBudgetInterval(BudgetInterval _budgetInterval = budgetInterval)
    {
        budgetInterval = _budgetInterval;

        return budgetInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetResponsibleUser</Name>
				<Source><![CDATA[
    public BudgetResponsibleUser parmBudgetResponsibleUser(BudgetResponsibleUser _budgetResponsibleUser = budgetResponsibleUser)
    {
        budgetResponsibleUser = _budgetResponsibleUser;

        return budgetResponsibleUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetThresholdPercent</Name>
				<Source><![CDATA[
    public BudgetThresholdPercent parmBudgetThresholdPercent(BudgetThresholdPercent _budgetThresholdPercent = budgetThresholdPercent)
    {
        budgetThresholdPercent = _budgetThresholdPercent;

        return budgetThresholdPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription(Description _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public BudgetControlRuleName parmName(BudgetControlRuleName _name = name)
    {
        name = _name;

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    public DimensionExpressionCriteriaCollection parmExpressionCriteriaCollection(
        DimensionExpressionCriteriaCollection _expressionCriteriaCollection = expressionCriteriaCollection)
    {
        expressionCriteriaCollection = _expressionCriteriaCollection;
        return expressionCriteriaCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the budget control rule.
    /// </summary>
    /// <remarks>
    ///    The <c>BudgetControlRule</c> and <c>BudgetControlRuleCriteria</c> tables are affected by this
    ///    method.
    /// </remarks>
    public void save()
    {
        if (!BudgetControlRule::exist(ruleId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlRule controlRule = BudgetControlRule::find(ruleId, true);

        if (!controlRule || !BudgetControlConfiguration::exist(controlRule.BudgetControlConfiguration))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        // Update the rule record.
        controlRule.Name = name;
        controlRule.Description = description;
        controlRule.BudgetCycleTimeSpan = budgetCycleTimeSpanRecId;
        controlRule.Interval = budgetInterval;
        controlRule.OverrideResponsibleUser = budgetResponsibleUser;
        controlRule.ThresholdPercent = budgetThresholdPercent;
        controlRule.update();

        BudgetControlRuleCriteria controlRuleCriteria;
        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

        // Remove the existing criteria as it will be reinserted.
        delete_from controlRuleCriteria
            where controlRuleCriteria.BudgetControlRule == ruleId;

        // Insert budget control rule criteria records.
        controlRuleCriteria.BudgetControlRule = ruleId;

        expressionCriteriaCollection.initializeEnumerator();

        while (expressionCriteriaCollection.moveNext())
        {
            DimensionExpressionCriteria expressionCriteria = expressionCriteriaCollection.current();

            // Get the budget control dimension attribute for the criteria.
            select firstonly RecId from controlDimensionAttribute
                where controlDimensionAttribute.BudgetControlConfiguration == controlRule.BudgetControlConfiguration
                exists join budgetDimensionAttribute
                    where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                        && budgetDimensionAttribute.DimensionAttribute == expressionCriteria.parmDimensionAttributeId();

            controlRuleCriteria.BudgetControlDimensionAttribute = controlDimensionAttribute.RecId;
            controlRuleCriteria.RangeFrom = expressionCriteria.parmRangeFromValue();
            controlRuleCriteria.RangeTo = expressionCriteria.parmRangeToValue();
            controlRuleCriteria.WildCardString = expressionCriteria.parmWildcardValue();
            controlRuleCriteria.IsFromOpen = expressionCriteria.parmIsRangeFromValueExcluded();
            controlRuleCriteria.IsToOpen = expressionCriteria.parmIsRangeToValueExcluded();

            controlRuleCriteria.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>BudgetControlRule</c> record.
    /// </summary>
    /// <param name="_doValidateCriteria">
    ///    A Boolean value indicating whether to validate the criteria; optional.
    /// </param>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate(boolean _doValidateCriteria = true)
    {
        // Validate that the configuration is editable.
        boolean isValid = this.validateConfigurationEditPermitted();

        if (isValid)
        {
            // Validate that the name is unique for the configuration.
            isValid = this.validateName();

            // Validate that the required fields are set.
            if (this.parmBudgetInterval() == 0)
            {
                isValid = checkFailed("@SYS315199");
            }

            if ( this.parmBudgetCycleTimeSpan() == 0)
            {
                isValid = checkFailed("@SYS315242");
            }

            if (_doValidateCriteria)
            {
                // Validate the criteria.
                isValid = this.validateCriteria() && isValid;
            }

            // Validate override responsible user
            isValid = this.validateOverrideResponsibleUser() && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfigurationEditPermitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the edit of the budget control configuration is permitted.
    /// </summary>
    /// <returns>
    ///    true if the edit of the budget control configuration is permitted; otherwise, false.
    /// </returns>
    private boolean validateConfigurationEditPermitted()
    {
        BudgetControlRule controlRule = BudgetControlRule::find(ruleId);

        boolean isValid = BudgetControlConfigurationManager::validateConfigurationEditPermitted(controlRule.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the criteria.
    /// </summary>
    /// <returns>
    ///    true if the criteria is valid; otherwise, false.
    /// </returns>
    protected boolean validateCriteria()
    {
        boolean isValid = true;
        boolean isCriteriaIntersecting;

        DimensionExpressionCriteria existingCriteria;
        DimensionExpressionCriteria givenCriteria;

        DimensionAttribute                      dimensionAttribute;
        BudgetControlDimensionAttribute         controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute   budgetDimensionAttribute;

        BudgetControlRule         existingControlRule;
        BudgetControlRuleCriteria existingControlRuleCriteria;

        BudgetControlRule controlRule = BudgetControlRule::find(ruleId);

        while select RecId from existingControlRule
            where existingControlRule.RecId != controlRule.RecId
                && existingControlRule.BudgetControlConfiguration == controlRule.BudgetControlConfiguration
        {
            // Verify that for each existing control rule the set of criteria does not intersect.
            while select Ordinal, RecId from controlDimensionAttribute
                order by Ordinal
                where controlDimensionAttribute.BudgetControlConfiguration == controlRule.BudgetControlConfiguration
                join RecId from budgetDimensionAttribute
                    where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                join RecId from dimensionAttribute
                    where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
            {
                // Get the criteria for the dimension attribute in the order that is defined by the configuration.
                // If it is not defined it is treated as a wildcard.
                givenCriteria = this.getExpressionCriteria(dimensionAttribute.RecId);

                // Get the existing rules criteria for the dimension attribute.
                select firstonly existingControlRuleCriteria
                    where existingControlRuleCriteria.BudgetControlRule == existingControlRule.RecId
                        && existingControlRuleCriteria.BudgetControlDimensionAttribute == controlDimensionAttribute.RecId;

                if (existingControlRuleCriteria)
                {
                    // The criteria for the dimension attribute is defined for the existing rule.
                    // Get the existing criteria.
                    existingCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                        dimensionAttribute.RecId,
                        existingControlRuleCriteria.WildCardString,
                        existingControlRuleCriteria.RangeFrom,
                        existingControlRuleCriteria.RangeTo,
                        existingControlRuleCriteria.IsFromOpen,
                        existingControlRuleCriteria.IsToOpen);
                }
                else
                {
                    // The criteria for the dimension attribute is not defined for the existing rule.
                    // Treat the existing criteria as a wildcard.
                    existingCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                        dimensionAttribute.RecId,
                        DimensionCriteriaOperators::WildcardSQL,
                        '',
                        '',
                        false,
                        false);
                }

                isCriteriaIntersecting = DimensionExpressionCriteriaCollection::isExpressionCriteriaIntersecting(existingCriteria, givenCriteria);

                if (!isCriteriaIntersecting)
                {
                    // If any dimension attribute does not intersect then the criteria does not intersect.
                    break;
                }
            }

            if (isCriteriaIntersecting)
            {
                // The set of rule criteria intersects with an existing set of rule criteria.
                break;
            }
        }

        if (isCriteriaIntersecting)
        {
            isValid = checkFailed(strfmt("@Budget:BudgetControlRuleCriteriaOverlap", controlRule.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Name</c> field of the <c>BudgetControlRule</c> record is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>BudgetControlRule</c> has a valid name field; otherwise, false.
    /// </returns>
    private boolean validateName()
    {
        boolean isValid = true;

        BudgetControlRule controlRule = BudgetControlRule::find(ruleId);

        BudgetControlRule existingControlRule;

        select firstonly RecId from existingControlRule
            where existingControlRule.Name == this.parmName()
                && existingControlRule.BudgetControlConfiguration == controlRule.BudgetControlConfiguration
                && existingControlRule.RecId != controlRule.RecId;

        if (existingControlRule)
        {
            isValid = checkFailed(strfmt("@SYS320427", this.parmName()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverrideResponsibleUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the override responsible user is valid.
    /// </summary>
    /// <returns>
    ///    true when the override responsible user is valid; otherwise, false.
    /// </returns>
    private boolean validateOverrideResponsibleUser()
    {
        // Validate the unpersisted user.
        boolean isValid = BudgetControlConfigurationManager::validateResponsibleUserReference(this.parmBudgetResponsibleUser());

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetControlRuleManager</c> class.
    /// </summary>
    /// <param name="_controlRuleRecId">
    ///    The record ID of the <c>BudgetControlRule</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetControlRuleManager</c> class.
    /// </returns>
    public static BudgetControlRuleManager construct(RecId _controlRuleRecId)
    {
        // Ensure the control rule exist.
        if (!BudgetControlRule::exist(_controlRuleRecId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlRuleManager controlRuleManager = new BudgetControlRuleManager();
        controlRuleManager.initialize(_controlRuleRecId);

        return controlRuleManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetControlRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>BudgetControlRule</c> record.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_name">
    ///    The name of the <c>BudgetControlRule</c> record.
    /// </param>
    /// <param name="_description">
    ///    The description of the <c>BudgetControlRule</c> record.
    /// </param>
    /// <returns>
    ///    The <c>BudgetControlRule</c> record; otherwise, an empty record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <c>BudgetControlRule</c> with the specified name already exists for the specified configuration.
    /// </exception>
    public static BudgetControlRule createBudgetControlRule(
        BudgetControlConfigurationRecId _controlConfigurationRecId,
        Name _name,
        Description _description)
    {
        // Validate input parameters.
        if (!BudgetControlConfiguration::exist(_controlConfigurationRecId)
            || !_name
            || !BudgetControlDimensionAttribute::existByBudgetControlConfiguration(_controlConfigurationRecId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlRule controlRule;

        if (BudgetControlRuleManager::validateNameForConfiguration(_name, _controlConfigurationRecId))
        {
            ttsbegin;

            // Create the control rule.
            controlRule.BudgetControlConfiguration = _controlConfigurationRecId;
            controlRule.Name = _name;
            controlRule.Description = _description;

            BudgetControlConfiguration budgetControlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);

            // Assign the default values for the rule from budget control configuration.
            controlRule.ThresholdPercent = budgetControlConfiguration.DefaultThresholdPercent == 0 ? 100 : budgetControlConfiguration.DefaultThresholdPercent;
            controlRule.Interval = budgetControlConfiguration.DefaultInterval;
            controlRule.BudgetCycleTimeSpan = budgetControlConfiguration.DefaultBudgetCycleTimeSpan;
            controlRule.OverrideResponsibleUser = budgetControlConfiguration.DefaultResponsibleUser;

            controlRule.insert();

            ttscommit;
        }

        return controlRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>BudgetControlRule</c> record and the associated <c>BudgetControlRuleCriteria</c>
    ///    records.
    /// </summary>
    /// <param name="_controlRuleRecId">
    ///    The record ID of the <c>BudgetControlRule</c> record to delete.
    /// </param>
    public static void delete(RecId _controlRuleRecId)
    {
        // Validate input parameter.
        if (!_controlRuleRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlRule controlRule = BudgetControlRule::find(_controlRuleRecId);

        BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::find(controlRule.BudgetControlConfiguration);

        // Ensure the BudgetControlRule is referencing a BudgetControlConfiguration with IsActive = false.
        if (!controlRule || controlConfiguration.IsActive)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        BudgetControlRuleCriteria controlRuleCriteria;

        delete_from controlRuleCriteria
            where controlRuleCriteria.BudgetControlRule == _controlRuleRecId;

        delete_from controlRule
            where controlRule.RecId == _controlRuleRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRuleForInUseChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>BudgetControlRule</c> record for the specified budget control configuration that was
    ///    temporarily committed as part of the new rule setup process.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record for which to delete the
    ///    <c>BudgetControlRule</c> record.
    /// </param>
    /// <remarks>
    ///    This method is intended to be called when the in use by user changes on the budget control
    ///    configuration from one user to another to make sure that invalid rules are not started by the user
    ///    who took control of the configuration from the user who was in the process of setting up the new
    ///    rule.
    /// </remarks>
    public static void deleteRuleForInUseChange(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        // Validate input parameter.
        if (!_controlConfigurationRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);

        // Ensure the BudgetControlConfiguration exists and has IsActive = false.
        if (!controlConfiguration || controlConfiguration.IsActive)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlRule controlRule;

        select count(RecId) from controlRule
            where controlRule.BudgetControlConfiguration == controlConfiguration.RecId;

        if (controlRule.RecId > 1)
        {
            // When there is more than one rule for the configuration there cannot be multiple rules with no criteria defined.

            // Select the last rule that does not have criteria.
            BudgetControlRuleCriteria controlRuleCriteria;

            select firstonly RecId from controlRule
                order by RecId desc
                where controlRule.BudgetControlConfiguration == controlConfiguration.RecId
                notExists join controlRuleCriteria
                    where controlRuleCriteria.BudgetControlRule == controlRule.RecId;

            if (controlRule)
            {
                // The last rule for the configuration has no criteria.
                // Based on how the BudgetControlConfiguration form rule setup process utilizes the BudgetControlRuleExpressionController
                // class and this class, only one rule can have no criteria and it has to be the only one for the configuration.

                // Remove the rule as it was entered as part of the new rule setup process.
                BudgetControlRuleManager::delete(controlRule.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNameForConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the name of a <c>BudgetControlRule</c> record for the budget control configuration.
    /// </summary>
    /// <param name="_name">
    ///    The name to validate.
    /// </param>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    ///    true if the <c>BudgetControlRule</c> record has a valid name; otherwise, false.
    /// </returns>
    public static boolean validateNameForConfiguration(BudgetControlRuleName _name, BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        boolean isValid = true;
        BudgetControlRule existingControlRule;

        select firstonly RecId from existingControlRule
            where existingControlRule.Name == _name
                && existingControlRule.BudgetControlConfiguration == _controlConfigurationRecId;

        if (existingControlRule)
        {
            isValid = checkFailed(strfmt("@SYS320427", _name));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>