<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayBalanceSheetCol_Counter</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayBalanceSheetCol_Counter extends RPayBalanceSheetCol
{
    Query       q_EmplTable;
    QueryRun    qr_EmplTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sumUpTrans</Name>
				<Source><![CDATA[
        public void sumUpTrans(RPayTmpBalanceSheetSum _tmpBalSum,
                           Column                 _column,
                           QueryRun               _queryRun,
                           RPaySlipColCode        _colCode,
                           date                   _fromDate,
                           date                   _toDate,
                           RPayTmpCalculate       _payTmpCalculate)
    {
        RHRMEmplTable    emplTable;
        RPayCalculate    payCalculate;
        RPayModuleTable  rPayModuleTable;
        RPayCounterTable rPayCounterTable;
        ReportPeriod_RU  payPeriod;
        RPayAmount       amount;

        rPayCounterTable = RPayCounterTable::find(_colCode);
        rPayModuleTable = rPayCounterTable.paySeqTable().payModuleTable();

        if (rPayModuleTable.ConfigurationKeyId)
        {
            info(strFmt("@RUP656",_colCode));
            return;
        }

        payCalculate = new RPayCalculate(rPayModuleTable);
        payCalculate.needUpdatePayTrans(false);
        payCalculate.setCounterTable(rPayCounterTable);

        select _payTmpCalculate
            where _payTmpCalculate.RecId > 0;

        _queryRun.reset();

        while (_queryRun.next())
        {
            emplTable = _queryRun.getNo(1);
            payCalculate.setSourceTable(emplTable);
            amount = 0;
            for (payPeriod = endmth(_fromDate); payPeriod <= endmth(_toDate) ; payPeriod = endmth(nextMth(payPeriod)))
            {
                switch (rPayCounterTable.CounterType)
                {
                    case RPayCounterType::Calculate:
                        payCalculate.payPeriod(payPeriod);
                        payCalculate.calcCounter();
                        amount += payCalculate.getCurrentValue();
                        break;
                    case RPayCounterType::Fund:
                        amount += RPayTrans::calculateFund(rPayCounterTable.CounterUnit,payPeriod,emplTable.EmployeeId);
                        break;
                }
            }

            if (_payTmpCalculate)
            {
                select sum (Qty) from _payTmpCalculate
                    where _payTmpCalculate.EmplId    == emplTable.EmployeeId      &&
                          _payTmpCalculate.Type      == RPayCalcType::CounterUnit &&
                          _payTmpCalculate.TransDate >= _fromDate                 &&
                          _payTmpCalculate.TransDate <= _toDate                   &&
                          _payTmpCalculate.Number    == _colCode;
            }

            this.updateSum(_tmpBalSum,
                           emplTable.EmployeeId,
                           _column,
                           amount + _payTmpCalculate.Qty);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>