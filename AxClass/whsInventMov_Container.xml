<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsInventMov_Container</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>whsInventMov_Container</c> class is used as a data carrier when updating container transactions.
/// </summary>
class whsInventMov_Container extends InventMovement
{
    WHSContainerTrans   containerTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
	/// <summary>
	/// Gets the balance sheet of receipt account if movement is inbound, issue account if the movement is outbound.
	/// </summary>
	/// <returns>
	/// The account balance sheet.
	/// </returns>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseLiteProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the movement can use lite financial update process.
    /// </summary>
    /// <returns>
    /// true if the movement can use lite financial update process; otherwise, false.
    /// </returns>
    public boolean canUseLiteProcess()
    {
        boolean canUseLiteProcess;

        canUseLiteProcess = InventDim::isInventDimEqualFinancialDim(
                    this.inventDimGroupSetup(),
                    InventDim::find(containerTrans.InventDimIdFrom),
                    InventDim::find(containerTrans.InventDimIdTo));

        return canUseLiteProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
	/// <summary>
	/// Gets the operations account.
	/// </summary>
	/// <returns>
	/// The operations account.
	/// </returns>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitPayable));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitReceivable));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds quantity to remaining quantity of the container transaction.
	/// </summary>
	/// <param name="_inventQty">
	/// Quantity to be added.
	/// </param>
    public void addRemainPhysical(InventQty  _inventQty)
    {
        if (!this.pdsCWItem())
        {
            containerTrans.InventQtyRemain += _inventQty * this.transSign();
        }
        else
        {
            containerTrans.RemainingCapturedWeight += _inventQty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        if (this.pdsCWItem())
        {
            containerTrans.InventQtyRemain += _qty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeShown</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the reservation form should be shown.
	/// </summary>
	/// <returns>
	/// True if the reservation form should be shown.
	/// </returns>
    public boolean canReservationFormBeShown()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if the movement is in estimated status.
	/// </summary>
	/// <param name="updateNow">
	/// The <c>InventUpd_Estimated</c> instance.
	/// </param>
	/// <param name="this_Orig">
	/// Original movement.
	/// </param>
	/// <returns>
	/// True if the movement is in estimated status, false otherwise.
	/// </returns>
    public boolean checkUpdateEstimated(InventUpd_Estimated updateNow, InventMovement this_Orig)
    {
        return super(updateNow, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if the movement is in picked status.
	/// </summary>
	/// <param name="_updateNow">
	/// The <c>InventUpd_Picked</c> instance.
	/// </param>
	/// <returns>
	/// True if the movement is in picked status, false otherwise.
	/// </returns>
    public boolean checkUpdatePicked(InventUpd_Picked _updateNow)
    {
        boolean ret;

        ret = super(_updateNow);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateStandard</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if the movement is in standard status.
	/// </summary>
	/// <param name="_transDate">
	/// Movement transaction date.
	/// </param>
	/// <param name="_checkItemPostingDate">
	/// Determines whether to check item posting date, no by default.
	/// </param>
	/// <returns>
	/// True if the movement is in standard status, false otherwise.
	/// </returns>
    public boolean checkUpdateStandard(TransDate _transDate, NoYes _checkItemPostingDate = NoYes::No)
    {
        boolean ok = true;

        if (!this.inventTable().checkValid(this.itemId()))
        {
            ok = false;
        }

        if (!this.inventItemOrderSetupMap().checkNotStopped())
        {
            ok = false;
        }

        if (!this.inventItemInventSetup().checkNotStopped())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
	/// <summary>
	/// Changes the site dimension to default dimension.
	/// </summary>
	/// <returns>
	/// The default dimension to change.
	/// </returns>
    public DimensionDefault defaultDimension()
    {
        return InventSite::changeDimension(this.inventTable().DefaultDimension, this.inventdim().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimension</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the default dimension of the inventory item.
	/// </summary>
	/// <returns>
	/// The default dimension of the inventory item.
	/// </returns>
    public DimensionDefault dimension()
    {
        return this.inventTable().DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the inventory item id.
	/// </summary>
	/// <returns>
	/// The inventory item id of the container transaction.
	/// </returns>
    public ItemId itemId()
    {
        return containerTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    public boolean mustBeAutoReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the transaction must be booked financially.
	/// </summary>
	/// <returns>
	/// True if the transaction must be booked financially.
	/// </returns>
    public boolean mustBeBookedFinancially()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the transaction must be booked physically.
	/// </summary>
	/// <returns>
	/// True if the transaction must be booked physically.
	/// </returns>
    public boolean mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the transaction must be remain controlled.
	/// </summary>
	/// <returns>
	/// True if the transaction must be remain controlled.
	/// </returns>
    public boolean mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    public boolean mustUpdateInventTableCostPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method of this called with given arguments.
	/// </summary>
	/// <param name="_containerTrans">
	/// Container transaction to be used to initialize the instance.
	/// </param>
	/// <param name="_inventType">
	/// Inventory type to be used to initialize the instance.
	/// </param>
    void new(
        WHSContainerTrans      _containerTrans,
        InventType             _inventType = containerTrans.type())
    {
        containerTrans = _containerTrans;

        super(_containerTrans, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Calculates the over delivery percentage.
	/// </summary>
	/// <returns>
	/// The over delivery percentage.
	/// </returns>
    public Percent overDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
    public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsOverrideFEFO</Name>
				<Source><![CDATA[
    public PdsOverrideFEFO pdsOverrideFEFO()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the posting type.
	/// </summary>
	/// <returns>
	/// The posting type.
	/// </returns>
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventInterUnitPayable;
        }

        return LedgerPostingType::InventInterUnitReceivable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds physical posting type.
	/// </summary>
	/// <returns>
	/// Posting type.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when this method is used from this class.
	/// </exception>
    public LedgerPostingType postingPhysical()
    {
        throw error("@WAX437");
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Calculates the physical remaining quantity.
	/// </summary>
	/// <returns>
	/// The physical remaining quantity.
	/// </returns>
    public InventQty remainPhysical()
    {
        return (this.pdsCWItem() ? containerTrans.RemainingCapturedWeight : containerTrans.InventQtyRemain) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        PdsCWInventQty ret = 0;

        if (this.pdsCWItem())
        {
            ret = containerTrans.InventQtyRemain * this.transSign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyLevelStrategyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </summary>
    /// <param name="_inventDimReservationCriteria">
    /// An <c>InventDim</c> buffer with the values that are required to be reserved.
    /// </param>
    /// <returns>
    /// A list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </returns>
    public List reservationHierarchyLevelStrategyList(InventDim _inventDimReservationCriteria)
    {
        List reservationStrategyList;

        reservationStrategyList = new List(Types::Class);

        reservationStrategyList.addEnd(WHSReservationHierarchyLevelStrategy::newFromStrategyType(WHSReservationHierarchyLevelStrategyType::None, this.inventTable(),_inventDimReservationCriteria));

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets physically remaining quantity of the container transaction.
	/// </summary>
	/// <param name="_inventQty">
	/// Quantity to be set.
	/// </param>
    public void setRemainPhysical(InventQty  _inventQty)
    {
        if (!this.pdsCWItem())
        {
            containerTrans.InventQtyRemain = _inventQty * this.transSign();
        }
        else
        {
            containerTrans.RemainingCapturedWeight = _inventQty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        if (this.pdsCWItem())
        {
            containerTrans.InventQtyRemain = _qty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets transaction quantity.
	/// </summary>
	/// <param name="_qtyInvent">
	/// Quantity to be set.
	/// </param>
	/// <remarks>
	/// Quantity is converted to negative before set.
	/// </remarks>
    public void setTransQty(InventQty _qtyInvent)
    {
        if (!this.pdsCWItem())
        {
            containerTrans.Qty = _qtyInvent * this.transSign();
        }
        else
        {
            containerTrans.CapturedWeight = _qtyInvent * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
	/// <summary>
	/// Converts transaction datetime to date.
	/// </summary>
	/// <returns>
	/// The transaction date.
	/// </returns>
    public TransDate transDate()
    {
        if (WHSWorkTransactionDateCalculatorFlight::instance().isEnabled())
        {
            return WHSWorkTransactionDateCalculator::newFromMovement(this).calculateDate(containerTrans.TransDateTime);
        }

        return DateTimeUtil::date(containerTrans.TransDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Obsolete method. Please use InventTransId method.
	/// </summary>
	/// <returns>
	/// Error.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when this method is used. Please override InventTransId method.
	/// </exception>
    public InventTransId transId()
    {
        throw error(strFmt("@SYS18885", 'InventTransId'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
	/// <summary>
	/// Calculates the total quantity in container transaction.
	/// </summary>
	/// <returns>
	/// The total quantity in container transaction.
	/// </returns>
    public InventQty transQty()
    {
        return (this.pdsCWItem() ? containerTrans.CapturedWeight : containerTrans.Qty) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWTransQty()
    {
        PdsCWInventQty ret = 0;

        if (this.pdsCWItem())
        {
            ret = containerTrans.Qty * this.transSign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the id of the referenced container entity.
	/// </summary>
	/// <returns>
	/// The referenced container id.
	/// </returns>
    public InventTransRefId transRefId()
    {
        return containerTrans.ContainerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the transaction type.
	/// </summary>
	/// <returns>
	/// The transaction type.
	/// </returns>
    public InventTransType transType()
    {
        return InventTransType::WHSContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        InventUpd_Estimated     estimated;

        estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(containerTrans));
        estimated.updateNow();

        containerTrans.doUpdate();

        if (estimated && _updateReservation)
        {
            estimated.updateReservation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>