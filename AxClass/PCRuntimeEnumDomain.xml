<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeEnumDomain</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCRuntimeEnumDomain</c> class is the runtime data structure class for an enumeration domain.
/// </summary>
class PCRuntimeEnumDomain implements PCRuntimeInterface
{
    List values; // List of solver and display values in correct order for UI
    Map  solverToDisplayValue;
    Map  displayToSolverValue;

    str enumDefinitionId;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        enumDefinitionId,
        values,
        solverToDisplayValue,
        displayToSolverValue
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a visitor instance.
    /// </summary>
    /// <param name="_visitor">
    /// A runtime visitor.
    /// </param>
    public void accept(PCRuntimeVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a value to a domain.
    /// </summary>
    /// <param name="_solverValue">
    /// A solver value.
    /// </param>
    /// <param name="_displayValue">
    /// A display value.
    /// </param>
    public void addValue(PCSolverValue _solverValue, AttributeValueText _displayValue)
    {
        values.addEnd([_solverValue, _displayValue]);
        solverToDisplayValue.insert(_solverValue, _displayValue);
        displayToSolverValue.insert(_displayValue, _solverValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayValueExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a display value exists in a domain.
    /// </summary>
    /// <param name="_displayValue">
    /// A display value.
    /// </param>
    /// <returns>
    /// true if the display value exists in the domain; otherwise, false.
    /// </returns>
    public boolean displayValueExists(str _displayValue)
    {
        return displayToSolverValue.exists(_displayValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a display value from a solver value.
    /// </summary>
    /// <param name="_solverValue">
    /// The solver value.
    /// </param>
    /// <returns>
    /// The display value.
    /// </returns>
    public str getDisplayValue(str _solverValue)
    {
        return solverToDisplayValue.lookup(_solverValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSolverValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a solver value from a display value.
    /// </summary>
    /// <param name="_displayValue">
    /// The display value.
    /// </param>
    /// <returns>
    /// The solver value.
    /// </returns>
    public str getSolverValue(str _displayValue)
    {
        return displayToSolverValue.lookup(_displayValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the values in a domain.
    /// </summary>
    /// <returns>
    /// The values in the domain.
    /// </returns>
    public List getValues()
    {
        return values;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        values = new List(Types::Container);
        solverToDisplayValue = new Map(Types::String, Types::String);
        displayToSolverValue = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,enumDefinitionId, values.pack(), solverToDisplayValue.pack(), displayToSolverValue.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnumDefinitionId</Name>
				<Source><![CDATA[
        public str parmEnumDefinitionId(str _enumDefinitionId = enumDefinitionId)
    {
        enumDefinitionId = _enumDefinitionId;

        return enumDefinitionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Integer version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                enumDefinitionId         = conPeek(_packedClass, 2);
                values                   = List::create(conPeek(_packedClass, 3));
                solverToDisplayValue     = Map::create(conPeek(_packedClass, 4));
                displayToSolverValue     = Map::create(conPeek(_packedClass, 5));
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCRuntimeEnumDomain construct()
    {
        return new PCRuntimeEnumDomain();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>