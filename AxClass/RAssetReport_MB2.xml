<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_MB2</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_MB2 extends RAssetReport_MB implements ERIReportPostProcessingSupported
{
    protected TmpRAssetMB2Report rowData;
    protected EmployeeTable_RU employeeTable;
    protected DialogField dlgReportDate;
    protected DialogField dlgHcmWorker;
    protected DialogField dlgLocation;
    protected DialogField dlgActive;
    protected TransDate reportDate;
    protected RAssetLocationId locationIdReport;
    protected RAssetEmployee emplReport;
    protected NoYesId showActive;
    protected int fileNum;
    protected boolean groupOperation;
    protected XMLWordDocumentTable table;

    protected const str ConstTable = 'Table';
    protected const int ConstFirstTableHead = 3;
    protected const int ConstColItemName = 1;
    protected const int ConstColItemId = 2;
    protected const int ConstColTransDate = 3;
    protected const int ConstColQty = 4;
    protected const int ConstColReturnDate = 6;
    protected const int ConstColReturnQty = 7;
    protected const int ConstColDocNum = 9;
    protected const int ConstColDocDate = 10;
    protected const int ConstColLifetime = 11;
    protected const int ConstColPassportNum = 12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeDocument</Name>
				<Source><![CDATA[
    protected void closeDocument()
    {
        this.reportFooter();
        curRow = 1;

        if (AccountingDocumentsERPostProcessingToggle::isEnabled())
        {
            ERBinaryContentService binaryContentService = new ERBinaryContentService();
            binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
            binaryContentService.initBinaryDataFromStream(wordDocument.saveToStream());
            binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
        }
        else
        {
            wordDocument.sendFileToBrowser(documentPath);
        }

        wordDocument.Dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return "@GLS114058";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentsFromSource</Name>
				<Source><![CDATA[
    protected void createDocumentsFromSource()
    {
        //this method should be empty to prevent to initialize document table
        //super()
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = new Dialog(this.comment(), this);

        dlgReportDate = dlg.addFieldValue(extendedTypeStr(TransDate), reportDate, "@GLS100733");
        dlgHcmWorker = dlg.addFieldValue(extendedTypeStr(RAssetEmployee), emplReport);
        dlgLocation = dlg.addFieldValue(extendedTypeStr(RAssetLocationId), locationIdReport);
        dlgActive = dlg.addFieldValue(extendedTypeStr(NoYesId), showActive, "@SYS30497", "@GLS114065");

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeReport</Name>
				<Source><![CDATA[
    public void executeReport(Args _args)
    {
        boolean bErr;

        try
        {
            this.prepareData();
            this.run();
        }

        catch (Exception::Error)
        {
            bErr = true;
        }

        if (bErr)
        {
            error("@GLS101886");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        boolean ret = true;

        reportDate = dlgReportDate.value();
        emplReport = dlgHcmWorker.value();
        locationIdReport = dlgLocation.value();
        showActive = dlgActive.value();

        if (!reportDate)
        {
            ret = checkFailed(strFmt("@GLS107196", "@GLS100733"));
        }

        if (!emplReport)
        {
            ret = checkFailed(strFmt("@GLS107196", "@GLS116197"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportHeaderData</Name>
				<Source><![CDATA[
    protected void initReportHeaderData()
    {
        employeeTable = EmployeeTable_RU::findByEmployeeId(emplReport);
        companyInfo = CompanyInfo::find();
        this.documentNumber(rowData.LocationId
            + "@SYS77038"
            + emplReport
            + "@SYS77038"
            + int2str(fileNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReportKey</Name>
				<Source><![CDATA[
    protected container newReportKey()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for report
    /// </summary>
    /// <remarks>
    /// If analysis dimension code specified in rAssetParameters, its value taken from rAssetTrans ledgerDimension
    /// </remarks>
    private void prepareData()
    {
        RAssetMoveHist rAssetMoveHist;
        DimensionAttributeLevelValueView dimAttrLevelValueView;
        DimensionAttributeLevelValueView dimAttrLevelValueViewTmp;
        DimensionAttributeLevelValueView dimAttrViewAnalysis;

        RecId dimAttrId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        while select rAssetTrans
            group by TransDate, AssetTransType
            where rAssetTrans.AssetTransType != RAssetTransType::Depreciation
                && rAssetTrans.AssetTransType != RAssetTransType::DepreciationAdj
                && rAssetTrans.AssetStandardId == rAssetParameters.StandardIdDefault
                && rAssetTrans.TransDate <= reportDate
                && !rAssetTrans.StornoRecId
            join DisplayValue from dimAttrLevelValueView
                group by DisplayValue
                where dimAttrLevelValueView.ValueCombinationRecId == rAssetTrans.LedgerDimension
                    && dimAttrLevelValueView.DimensionAttribute == dimAttrId
            join AccountNum, PassportNum from rAssetTable
                group by AccountNum, AccountNumReference, PassportNum
                where rAssetTable.AccountNum == rAssetTrans.AccountNum
                    && (rAssetTable.AssetType == RAssetType::Cloths
                        || rAssetTable.AssetType == RAssetType::Rigging
                        || rAssetTable.AssetType == RAssetType::LowCostAssets)
            join RecId from rAssetMoveHist
                where rAssetMoveHist.AccountNum == rAssetTable.AccountNum
                    && (rAssetMoveHist.NewLocation == locationIdReport
                        || !locationIdReport)
                    && rAssetMoveHist.NewEmployee == emplReport
        {
            RAssetTrans rAssetTransTmp;
            if (showActive)
            {
                select RecId from rAssetTransTmp
                    where rAssetTransTmp.AccountNum == rAssetTable.AccountNum
                        && (rAssetTransTmp.AssetTransType == RAssetTransType::DisposalScrap
                            || rAssetTransTmp.AssetTransType == RAssetTransType::Disposal
                            || rAssetTransTmp.AssetTransType == RAssetTransType::DisposalSale)
                        && rAssetTransTmp.TransDate <= reportDate;

                if (rAssetTransTmp.RecId)
                {
                    continue;
                }
            }

            RAssetDocument rAssetDocument;
            if(rAssetTrans.AssetTransType == RAssetTransType::Disposal
                || rAssetTrans.AssetTransType == RAssetTransType::DisposalSale)
            {
                select firstonly Num, @Date from rAssetDocument
                    where rAssetDocument.AssetId == rAssetTable.AccountNum
                        && rAssetDocument.Date == rAssetTrans.TransDate
                        && rAssetDocument.Type == RAssetReportType::MB4;
            }

            RAssetMoveHist rAssetMoveHistReport = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum, RAssetMoveType::Transfer, NoYes::No, reportDate);
            
            RAssetScrap rAssetScrap;
            select firstonly Qty, ItemId from rAssetScrap
                where rAssetScrap.Assembling
                    && rAssetScrap.AssetId == rAssetTable.AccountNum
                    && !rAssetScrap.StornoRecId;

            rAssetStandards = RAssetStandards::find(rAssetTable.AccountNum, RAssetParameters::find().StandardIdDefault);

            select firstonly LedgerDimension from rAssetTransTmp
                where rAssetTransTmp.AssetTransType == RAssetTransType::Acquisition
                    && rAssetTransTmp.AccountNum == rAssetTable.AccountNumReference
                    && !rAssetTransTmp.StornoRecId
            join DisplayValue from dimAttrLevelValueViewTmp
                where dimAttrLevelValueViewTmp.ValueCombinationRecId == rAssetTransTmp.LedgerDimension
                    && dimAttrLevelValueViewTmp.DimensionAttribute == dimAttrId;

            dimAttrViewAnalysis.clear();

            if (rAssetParameters.AnalysisDimensionAttribute)
            {
                select firstonly LedgerDimension from rAssetTransTmp
                    where rAssetTransTmp.AssetTransType == RAssetTransType::Acquisition
                        && rAssetTransTmp.AccountNum == rAssetTable.AccountNumReference
                        && !rAssetTransTmp.StornoRecId
                join DisplayValue from dimAttrViewAnalysis
                    where dimAttrViewAnalysis.ValueCombinationRecId == rAssetTransTmp.LedgerDimension
                        && dimAttrViewAnalysis.DimensionAttribute == rAssetParameters.AnalysisDimensionAttribute;
            }


            rowData.clear();
            rowData.LocationId = rAssetMoveHistReport.NewLocation;
            rowData.TransDate = rAssetTrans.TransDate;
            rowData.InventQty = rAssetScrap.Qty;
            rowData.ItemId = rAssetScrap.ItemId;
            rowData.DocumentNum = rAssetDocument.Num;
            rowData.DocumentDate = rAssetDocument.Date;
            rowData.LifeTime = rAssetStandards.lifetime(reportDate);
            rowData.PassportNum = rAssetTable.PassportNum;
            rowData.TransType = rAssetTrans.AssetTransType;
            rowData.MainAccountNum = dimAttrLevelValueViewTmp.DisplayValue;
            rowData.AnalysisCode = dimAttrViewAnalysis.DisplayValue;
            rowData.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    // Returns record which this report should be linked with
    public Common relatedRecord()
    {
        return rAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportBody</Name>
				<Source><![CDATA[
    protected void reportBody()
    {
        InventTable inventTable = InventTable::find(rowData.ItemId);

        table.DuplicateLatestRow();

        table.insertCellValue(curRow + ConstFirstTableHead, ConstColItemName, inventTable.itemName());
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColItemId, inventTable.ItemId);

        switch(rowData.TransType)
        {
            case RAssetTransType::Acquisition:
            case RAssetTransType::AcquisitionAdj:
                table.insertCellValue(curRow + ConstFirstTableHead, ConstColTransDate, date2str(rowData.TransDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
                table.insertCellValue(curRow + ConstFirstTableHead, ConstColQty, rowData.InventQty);
                break;

            case RAssetTransType::DisposalScrap:
                table.insertCellValue(curRow + ConstFirstTableHead, ConstColReturnDate, date2str(rowData.TransDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
                table.insertCellValue(curRow + ConstFirstTableHead, ConstColReturnQty, rowData.InventQty);
                break;

            case RAssetTransType::Disposal:
            case RAssetTransType::DisposalSale:
                table.insertCellValue(curRow + ConstFirstTableHead, ConstColDocNum, rowData.DocumentNum);
                table.insertCellValue(curRow + ConstFirstTableHead, ConstColDocDate, date2str(rowData.DocumentDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
                break;
        }

        table.insertCellValue(curRow + ConstFirstTableHead, ConstColLifetime, rowData.LifeTime);
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColPassportNum, rowData.PassportNum);

        curRow++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFooter</Name>
				<Source><![CDATA[
    protected void reportFooter()
    {
        table.getLatestRow()
            .remove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportHeader</Name>
				<Source><![CDATA[
    protected void reportHeader()
    {
        wordDocument.insertFieldValue('mb2_1', this.documentNumber());
        wordDocument.insertFieldValue('mb2_2', companyInfo.name());
        wordDocument.insertFieldValue('mb2_3', RAssetLocation::find(rowData.LocationId).Name);
        wordDocument.insertFieldValue('mb2_4', CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, reportDate));
        wordDocument.insertFieldValue('mb2_5', date2str(reportDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
        wordDocument.insertFieldValue('mb2_7', rowData.LocationId);
        wordDocument.insertFieldValue('mb2_8', CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, reportDate));
        wordDocument.insertFieldValue('mb2_9', rowData.MainAccountNum);
        wordDocument.insertFieldValue('mb2_10', rowData.AnalysisCode);
        wordDocument.insertFieldValue('mb2_11', emplReport);
        wordDocument.insertFieldValue('mb2_12', employeeTable.worker().getFIO_RU());

        HrmDescription hrmDescription = HcmPosition::findByPosition(employeeTable.worker().primaryPositionId()).description();
        wordDocument.insertFieldValue('mb2_14', hrmDescription
            ? hrmDescription
            : employeeTable.worker().primaryPositionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportNum</Name>
				<Source><![CDATA[
    protected RAssetDocumentNum reportNum()
    {
        return rowData.DocumentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected void run()
    {
        RAssetLocationId        rAssetLocationId;
        MainAccountNum          rAssetMainAccountNum;
        DimensionDisplayValue   analysisCodeValue;

        curRow  = 1;
        fileNum = 0;

        while select sum (InventQty) from rowData
            group by LocationId, MainAccountNum, TransDate, TransType, DocumentDate, ItemId, DocumentNum, LifeTime, PassportNum, AnalysisCode
        {
            if (rowData.LocationId != rAssetLocationId
                || rowData.MainAccountNum != rAssetMainAccountNum
                || rowData.AnalysisCode != analysisCodeValue)
            {
                if (wordDocument != null)
                {
                    this.closeDocument();
                }

                fileNum++;

                this.initReportHeaderData();

                if (!this.makeDocument())
                {
                    throw error(strFmt("@GLS101764", this.comment()));
                }

                this.reportHeader();
                this.reportBody();

                rAssetLocationId = rowData.LocationId;
                rAssetMainAccountNum = rowData.MainAccountNum;
                analysisCodeValue = rowData.AnalysisCode;
            }
            else
            {
                this.reportBody();
            }
        }

        if (wordDocument != null)
        {
            this.closeDocument();
        }
        else
        {
            throw error("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAssetMB2OXML);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument()
    {
        boolean ret = super();

        table = wordDocument.findBookmark(ConstTable)
            .getBookmarkTable();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return documentPath + "@SYS34952" + this.documentNumber() + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'MB2';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>