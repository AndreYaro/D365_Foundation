<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesJournalSelect_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesJournalSelect_Invoice extends SalesPurchJournalSelect
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery()
    {
        switch (this.parmBasedOnDocument())
        {
            case DocumentStatus::PackingSlip :
                QueryBuildDataSource qbds = this.journalHeader_ds().query().dataSourceTable(tableNum(CustPackingSlipJour));
                if (qbds)
                {
                    this.buildRangesSelectedOrders(qbds);

                    qbds = qbds.addDataSource(tableNum(CustPackingSlipTrans),'CustPackingSlipTrans');
                    qbds.relations(true);
                    qbds.joinMode(JoinMode::ExistsJoin);
                    qbds.addRange(fieldNum(CustPackingSlipTrans,FullyMatched)).value(queryValue(NoYes::No));              
                }

                qbds = this.qbdsAll();

                if (qbds)
                {
                    qbds = qbds.addDataSource(tableNum(CustPackingSlipTrans),'CustPackingSlipTransAll');
                    qbds.relations(true);
                    qbds.joinMode(JoinMode::ExistsJoin);
                    qbds.addRange(fieldNum(CustPackingSlipTrans,FullyMatched)).value(queryValue(NoYes::No));
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRangesSelectedOrders</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void buildRangesSelectedOrders(QueryBuildDataSource _qbds)
    {
        boolean rangeAdded;
        #define.NoOrders('----');

        QueryBuildRange range = _qbds.addRange(fieldNum(CustPackingSlipJour, RefNum));
        range.value(queryValue(RefNum::SalesOrder));
        range.status(RangeStatus::Hidden);

        while select tmpFrmVirtual
            where tmpFrmVirtual.NoYes == NoYes::Yes
        {
            range = _qbds.addRange(fieldNum(CustPackingSlipJour, SalesId));
            range.value(queryValue(tmpFrmVirtual.Id));
            range.status(RangeStatus::Hidden);
            rangeAdded = true;
        }

        if (!rangeAdded)
        {
            range = _qbds.addRange(fieldNum(CustPackingSlipJour, SalesId));
            range.value(queryValue(#NoOrders));
            range.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOK</Name>
				<Source><![CDATA[
    public void closeOK()
    {
        super();

        if (this.mustCallerChooseTable())
        {
            formRun.args().caller().chooseTable(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCallerChooseTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether caller must choose table.
    /// </summary>
    /// <returns>
    /// true if caller must choose table; otherwise, false.
    /// </returns>
    protected boolean mustCallerChooseTable()
    {
        return SalesPurchJournalSelect::checkCaller(formRun, formStr(SalesEditLines));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceNameAll</Name>
				<Source><![CDATA[
    protected str dataSourceNameAll()
    {
        return 'CustPackingSlipJourAll';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIncluded</Name>
				<Source><![CDATA[
    protected void initIncluded()
    {
        SalesParmSubLine salesParmSubLine;
        CustPackingSlipTrans custPackingSlipTrans;
        CustPackingSlipJour custPackingSlipJour;

        while select RecId from salesParmSubLine
            where salesParmSubLine.ParmId == parmId
            join SalesId, PackingSlipId, DeliveryDate from custPackingSlipTrans
                where salesParmSubLine.JournalRefTableId == custPackingSlipTrans.TableId &&
                      salesParmSubLine.JournalRefRecId == custPackingSlipTrans.RecId
                join SalesId from custPackingSlipJour
                    where custPackingSlipJour.SalesId == custPackingSlipTrans.SalesId &&
                          custPackingSlipJour.PackingSlipId == custPackingSlipTrans.PackingSlipId &&
                          custPackingSlipJour.DeliveryDate == custPackingSlipTrans.DeliveryDate
        {
            this.included(true, custPackingSlipJour, NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        orderSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static SalesJournalSelect_Invoice construct()
    {
        return new SalesJournalSelect_Invoice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>