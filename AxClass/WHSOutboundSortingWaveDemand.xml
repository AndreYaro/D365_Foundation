<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundSortingWaveDemand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that sorts wave demand to outbound positions.
/// </summary>
final internal class WHSOutboundSortingWaveDemand
{
    private WHSWaveId           waveId;
    private WHSWaveStepCode     waveStepCode;
    private InventLocationId    inventLocationId;
    private WHSWaveExecutionID  waveExecutionId;
    private RecId               waveRecId;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createWaveDemandWorkLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query based on current wave demand.
    /// </summary>
    /// <param name="_queryCon">
    /// The packed query container for the sort template.
    /// </param>
    /// <returns>
    /// A query object with appropriate ranges.
    /// </returns>
    private Query createWaveDemandWorkLineQuery(container _queryCon)
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    tmpWorkLineDataSource;
    
        query = new query(_queryCon);
    
        tmpWorkLineDataSource = query.dataSourceTable(tableNum(WHSLoadLine)).addDataSource(tableNum(WHSTmpWorkLine));
        tmpWorkLineDataSource.addLink(fieldNum(WHSLoadLine, RecId), fieldNum(WHSTmpWorkLine, LoadLineRefRecId), query.dataSourceTable(tableNum(WHSLoadLine)).name());
        tmpWorkLineDataSource.joinMode(JoinMode::ExistsJoin);
        tmpWorkLineDataSource.addRange(fieldNum(WHSTmpWorkLine, WaveId)).value(queryValue(waveId));
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSortingCriteriaDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if sorting criteria fields are different while iterating over query.
    /// </summary>
    /// <param name="_queryRun">
    /// The query run object for the sorting template.
    /// </param>
    /// <param name="_sortTemplateId">
    /// The identifier for the sorting template.
    /// </param>
    /// <param name="_sortingCriteria">
    /// A container holding previous sorting criteria values.
    /// </param>
    /// <returns>
    /// True if values are different; otherwise False.
    /// </returns>
    private boolean checkSortingCriteriaDifference(
        QueryRun                    _queryRun,
        WHSOutboundSortTemplateId   _sortTemplateId,
        Container                   _sortingCriteria)
    {
        WHSOutboundSortTemplateGroup sortTemplateGroup;
        boolean                 ret;
        int                     i = 1;
    
        if (_sortingCriteria != conNull())
        {
            while select SortGroupBy, GroupTableId, GroupFieldId from sortTemplateGroup
                order by LineNumber
                where sortTemplateGroup.SortTemplateId == _sortTemplateId
            {
                if (sortTemplateGroup.SortGroupBy
                &&  _queryRun.get(sortTemplateGroup.GroupTableId).(sortTemplateGroup.GroupFieldId) != conPeek(_sortingCriteria, i))
                {
                    ret = true;
                    break;
                }
    
                ++i;
            }
        }
        else
        {
            // If container is empty break for initial values
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSortingCriteriaContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container of sorting criteria values.
    /// </summary>
    /// <param name="_queryRun">
    /// The query run object for the sort template query.
    /// </param>
    /// <param name="_sortTemplateId">
    /// The identifier for the sorting template.
    /// </param>
    /// <returns>
    /// A container filled with sorting criteria values.
    /// </returns>
    private container createSortingCriteriaContainer(
        QueryRun                    _queryRun,
        WHSOutboundSortTemplateId   _sortTemplateId)
    {
        WHSOutboundSortTemplateGroup    sortTemplateGroup;
        container                       breakValues = conNull();
        int                             i = 1;
    
        while select GroupTableId, GroupFieldId from sortTemplateGroup
            order by LineNumber
            where sortTemplateGroup.SortTemplateId == _sortTemplateId
        {
            breakValues = conPoke(breakValues, i, _queryRun.get(sortTemplateGroup.GroupTableId).(sortTemplateGroup.GroupFieldId));
            ++i;
        }
    
        return breakValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortWaveDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts wave demand based on configured templates and criteria.
    /// </summary>
    public void sortWaveDemand()
    {
        using (var activityContext = this.instrumentationLogger().outboundSortingActivities().sortWaveDemand())
        {
            this.instrumentationLogger().logRecordInformation(InventLocation::find(inventLocationId));

            int                     sortTemplates;
            WHSOutboundSortTemplate sortTemplate;

            ttsBegin;
    
            while select sortTemplate
                where sortTemplate.WaveStepCode     == waveStepCode
                &&    sortTemplate.SortTemplateType == WHSOutboundSortTemplateType::WaveDemand
                &&    ((sortTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::Warehouse && sortTemplate.InventLocationId == inventLocationId)
                        || (sortTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::Group)
                        || (sortTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::All))
            {
                if (sortTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::Group && !WhsWarehouseGroup::containsWarehouse(sortTemplate.WarehouseGroupId, inventLocationId))
                {
                    continue;
                }

                sortTemplates++;

                this.assignWaveDemandSortPositions(sortTemplate);

            }
    
            ttsCommit;

            this.instrumentationLogger().outboundSortingActivities().sortedWaveDemand(activityContext, sortTemplates);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignWaveDemandSortPositions</Name>
				<Source><![CDATA[
    private void assignWaveDemandSortPositions(WHSOutboundSortTemplate _sortTemplate)
    {
        using (var activityContext = this.instrumentationLogger().outboundSortingActivities().assignWaveDemandSortPositions(_sortTemplate.AssignSortPositionCriteria))
        {
            this.instrumentationLogger().logRecordInformation(_sortTemplate);

            int         sortedWorkLines;
            int         createdSortingPositions;
            int         overflowedSortingPositions;

            int         counter = 1;
            container   sortingCriteria = conNull();

            if (_sortTemplate.AssignSortPositionCriteria == WHSAssignSortPositionCriteria::OnlyUseEmptyPosition)
            {
                if (_sortTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::Warehouse)
                {
                    counter = WHSOutboundSortPosition::calculateNumberOfAssignedPositions(_sortTemplate) + 1;
                }
                else
                {
                    counter = 1 + WHSOutboundSortPosition::calculateNumberOfAssignedPositionsForWarehouseGroupAll(_sortTemplate.SortTemplateId, inventLocationId, _sortTemplate.defaultSortingLocationId(inventLocationId));
                }
            }
    
            WHSOutboundSortPosition sortPosition;

            QueryRun queryRun = new QueryRun(this.createWaveDemandWorkLineQuery(_sortTemplate.PackedQueryRun));

            boolean shouldCheckReusablePositions = _sortTemplate.AssignSortPositionCriteria == WHSAssignSortPositionCriteria::OnlyUseEmptyPosition &&
                                                    WHSOutboundSortingWaveDemandReusePositionsV2Flight::instance().isEnabled();

            while (queryRun.next())
            {
                sortedWorkLines++;
      
                if (this.checkSortingCriteriaDifference(queryRun, _sortTemplate.SortTemplateId, sortingCriteria))
                {
                    int positionNumberAvailableForReuse = 0;

                    if (shouldCheckReusablePositions)
                    {
                        positionNumberAvailableForReuse = this.getFirstAvailablePositionNumber(_sortTemplate, counter);

                        if (!positionNumberAvailableForReuse)
                        {
                            shouldCheckReusablePositions = false;
                        }
                    }

                    if (positionNumberAvailableForReuse)
                    {                        
                        sortPosition = this.createNewSortPosition(positionNumberAvailableForReuse, _sortTemplate, queryRun);

                        createdSortingPositions++;
                    }
                    else if (counter > _sortTemplate.NumberOfSortPositions)
                    {
                        sortPosition.clear();

                        // Log wave processing message that position not able to be created due to maximum.
                        WHSPostEngine::createWaveExecutionHistoryLine(waveId,
                                                                      waveExecutionId,
                                                                      strfmt("@WAX:SortWaveDemandMaximumPositionsWaveProcessingMessage", _sortTemplate.SortTemplateId),
                                                                      true);
                        overflowedSortingPositions++;
                    }
                    else
                    {
                        sortPosition = this.createNewSortPosition(counter, _sortTemplate, queryRun);

                        counter++;
                        createdSortingPositions++;
                    }
                }

                WHSLoadLine loadLine = queryRun.get(tableNum(WHSLoadLine)) as WHSLoadLine;
                this.updateTmpWorkLinesForLoadLine(_sortTemplate.defaultSortingLocationId(inventLocationId), sortPosition.RecId, loadLine.RecId);
    
                sortingCriteria = this.createSortingCriteriaContainer(queryRun, _sortTemplate.SortTemplateId);
            }

            this.instrumentationLogger().outboundSortingActivities().assignedWaveDemandSortPositions(activityContext, sortedWorkLines, createdSortingPositions, overflowedSortingPositions);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewSortPosition</Name>
				<Source><![CDATA[
    private WHSOutboundSortPosition createNewSortPosition(int _positionNumber, WHSOutboundSortTemplate _sortTemplate, QueryRun _queryRun)
    {
        // Create position for wave demand.
        WHSOutboundSortPositionId sortPositionId = _sortTemplate.SortPositionPrefix + int2str(_positionNumber);

        if (!WHSOutboundSortingWaveDemandNewFromWaveInitFromWaveTableFlight::instance().isEnabled())
        {
            waveRecId = WHSWaveTable::find(waveId).RecId;
        }
        using (var activityContext = this.instrumentationLogger().outboundSortingActivities().assignWaveDemandPosition(waveRecId, _positionNumber))
        {
            using (var context = new WHSOutboundSortPositionCreateContext())
            {
                context.sortPositionNum = _positionNumber;
                return WHSOutboundSortPosition::createNewWaveSortPosition(waveId, _sortTemplate, sortPositionId, _queryRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstAvailablePositionNumber</Name>
				<Source><![CDATA[
    private int getFirstAvailablePositionNumber(WHSOutboundSortTemplate _sortTemplate, int _currentPositionNumber)
    {
        WHSOutboundSortPosition sortPosition;
        WHSOutboundSortPosition sortPositionNotClosedInAnotherWave;

        select minof(SortPositionNum) from sortPosition
            where sortPosition.SortPositionStatus   == WHSOutboundSortPositionStatus::Closed
               && sortPosition.InventLocationId     == _sortTemplate.InventLocationId
               && sortPosition.WMSLocationId        == _sortTemplate.WMSLocationId
               && sortPosition.SortTemplateId       == _sortTemplate.SortTemplateId
               && sortPosition.SortPositionNum      <  _currentPositionNumber
        notexists join sortPositionNotClosedInAnotherWave
            where sortPositionNotClosedInAnotherWave.InventLocationId   == sortPosition.InventLocationId
               && sortPositionNotClosedInAnotherWave.WMSLocationId      == sortPosition.WMSLocationId
               && sortPositionNotClosedInAnotherWave.SortTemplateId     == sortPosition.SortTemplateId
               && sortPositionNotClosedInAnotherWave.SortPositionId     == sortPosition.SortPositionId
               && sortPositionNotClosedInAnotherWave.SortPositionStatus != WHSOutboundSortPositionStatus::Closed;

        return sortPosition.SortPositionNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmpWorkLinesForLoadLine</Name>
				<Source><![CDATA[
    private void updateTmpWorkLinesForLoadLine(
        WHSOutboundSortLocationId       _sortLocationId,
        WHSOutboundSortPositionRecId    _sortPositionRecId,
        WHSLoadLineRefRecId             _loadLineRecId)
    {
        WHSTmpWorkLine  tmpWorkLine;

        update_recordSet tmpWorkLine
            setting OutboundSortLocationId  = _sortLocationId,
                    OutboundSortPosition    = _sortPositionRecId
            where tmpWorkLine.WaveId            == waveId
            &&    tmpWorkLine.LoadLineRefRecId  == _loadLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>WHSOutboundSortingWaveDemand</c> class.
    /// </summary>
    /// <param name = "_waveId">The <c>WHSWaveId</c>.</param>
    /// <param name = "_waveStepCode">The <c>WHSWaveStepCode</c>.</param>
    /// <returns>An instance of the <c>WHSOutboundSortingWaveDemand</c> class.</returns>
    [Hookable(false)]
    internal static WHSOutboundSortingWaveDemand newFromWave(
        WHSWorkBuildId      _waveId,
        WHSWaveExecutionID  _waveExecutionId,
        WHSWaveStepCode     _waveStepCode)
    {
        WHSOutboundSortingWaveDemand   sortWaveDemand;
    
        sortWaveDemand = new WHSOutboundSortingWaveDemand();

        sortWaveDemand.waveId           = _waveId;
        sortWaveDemand.waveExecutionId  = _waveExecutionId;
        sortWaveDemand.waveStepCode     = _waveStepCode;

        if (WHSOutboundSortingWaveDemandNewFromWaveInitFromWaveTableFlight::instance().isEnabled())
        {
            sortWaveDemand.initFromWaveTable(WHSWaveTable::find(_waveId));
        }
        else
        {
            sortWaveDemand.inventLocationId = WHSWaveTable::find(_waveId).InventLocationId;
        }
    
        return sortWaveDemand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWaveTable</Name>
				<Source><![CDATA[
    private void initFromWaveTable(WHSWaveTable _waveTable)
    {
        inventLocationId = _waveTable.InventLocationId;
        waveRecId = _waveTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>