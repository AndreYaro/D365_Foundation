<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportService_AccountingBooks_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
/// <summary>
/// The service class that runs SAF-T Accounting Books (PL) report.
/// </summary>
public class SAFTReportService_AccountingBooks_PL extends SAFTReportService_Base_W
{
    private SAFTReportContract_AccountingBooks_PL dataContract;
    private Query userModifiedQuery;
    private static const int FiveHours = 18000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts file generation in GER.
    /// </summary>
    /// <param name = "_dataContract">A data contract containing user inputs.</param>
    public void run(SAFTReportContract_AccountingBooks_PL _dataContract)
    {
        dataContract = _dataContract;
        this.applyParametersToQuery();
        this.runReport(dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTurnoverAndBalanceTmpByParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>LedgerTurnoverAndBalanceTmp</c> and returns it as an ArrayList.
    /// </summary>
    /// <param name = "_dateFrom">A start of calculation period.</param>
    /// <param name = "_dateTo">An end of calculation period.</param>
    /// <param name = "_postingLayer">The labels of posting layers delimited with semicolon.</param>
    /// <param name = "_openingBalance">Calculate opening balance.</param>
    /// <param name = "_separateBalance">See the corresponding field of <c>LedgerTurnoverAndBalanceContract</c> class.</param>
    /// <param name = "_closingTransactions">See the corresponding field of <c>LedgerTurnoverAndBalanceContract</c> class.</param>
    /// <param name = "_zeroBalance">See the corresponding field of <c>LedgerTurnoverAndBalanceContract</c> class.</param>
    /// <returns>An array list filled with <c>LedgerTurnoverAndBalanceTmp</c> records.</returns>
    [ERTableName(tableStr(LedgerTurnoverAndBalanceTmp))]
    public static ArrayList getLedgerTurnoverAndBalanceTmpByParams(
        date _dateFrom,
        date _dateTo,
        str _postingLayer,
        boolean _openingBalance = false,
        boolean _separateBalance = false,
        boolean _closingTransactions = false,
        boolean _zeroBalance = false)
    {
        Query queryContract = new Query();
        QueryBuildDataSource qbds = queryContract.addDataSource(tableNum(MainAccount));
        findOrCreateRange_W(qbds, fieldNum(MainAccount, LedgerChartOfAccounts),
            queryValue(Ledger::chartOfAccounts())).status(RangeStatus::Hidden);
        var generalJournalEntryTableDs = queryContract.addDataSource(tableNum(GeneralJournalEntry));
        findOrCreateRange_W(generalJournalEntryTableDs, fieldNum(GeneralJournalEntry, AccountingDate),
             SysQuery::range(_dateFrom, _dateTo));
        findOrCreateRange_W(generalJournalEntryTableDs, fieldNum(GeneralJournalEntry, Ledger),
            queryValue(Ledger::current())).status(RangeStatus::Hidden);
        var qbdsAccountEntry = generalJournalEntryTableDs.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsAccountEntry.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), generalJournalEntryTableDs.name());
        var generalJournalEntryViewDs = queryContract.addDataSource(tableNum(GeneralJournalForGDPdUView));
        findOrCreateRange_W(generalJournalEntryViewDs, fieldNum(GeneralJournalForGDPdUView, GeneralJournalEntryAccountingDate),
             SysQuery::range(_dateFrom, _dateTo));
        
        List postingLayerCollection = strSplit(_postingLayer, ';');
        if (postingLayerCollection.elements())
        {
            ListEnumerator postingLayerCollectionEnumerator = postingLayerCollection.getEnumerator();
            QueryBuildRange range;
            while (postingLayerCollectionEnumerator.moveNext())
            {
                range = generalJournalEntryTableDs.addRange(fieldNum(GeneralJournalEntry, PostingLayer));
                range.value(queryValue(postingLayerCollectionEnumerator.current()));
                range.status(RangeStatus::Locked);
                range = generalJournalEntryViewDs.addRange(fieldNum(GeneralJournalForGDPdUView, GeneralJournalEntrypostingLayer));
                range.value(queryValue(postingLayerCollectionEnumerator.current()));
                range.status(RangeStatus::Locked);
            }
        }
        var mainAccountSet = new Set(Types::Int64);
        var qdbsMainAcc = queryContract.dataSourceTable(tableNum(GeneralJournalEntry));
        qdbsMainAcc.enabled(false);
        var queryRunMainAcc = new QueryRun(queryContract);
      
        while (queryRunMainAcc.next())
        {
            var mainAccount = queryRunMainAcc.get(tablenum(MainAccount));
            mainAccountSet.add(mainAccount.RecId);
        }
        qdbsMainAcc.enabled(true);
        var qdbsGJEAcc = queryContract.dataSourceTable(tableNum(MainAccount));
        qdbsGJEAcc.enabled(false);
        var queryRunGJEAcc = new QueryRun(queryContract);
        while (queryRunGJEAcc.next())
        {
            GeneralJournalAccountEntry generalJournalAccountEntry = queryRunGJEAcc.get(tablenum(GeneralJournalAccountEntry));
            mainAccountSet.add(MainAccount::findByLedgerDimension(generalJournalAccountEntry.LedgerDimension).RecId);
        }
        qdbsGJEAcc.enabled(true);
        LedgerTurnoverAndBalanceContract trialBalanceContract = new LedgerTurnoverAndBalanceContract();
        trialBalanceContract.parmFromDate(_dateFrom);
        trialBalanceContract.parmToDate(_dateTo);
        trialBalanceContract.parmPrintPostingLayers(_postingLayer);
        trialBalanceContract.parmPrintOpeningBalance(_openingBalance);
        trialBalanceContract.parmSeparateBalance(_separateBalance);
        trialBalanceContract.parmPrintClosingTransactions(_closingTransactions);
        trialBalanceContract.parmPrintZeroBalances(_zeroBalance);
        LedgerTurnoverAndBalanceDP provider = SAFTReportService_AccountingBooks_PL::createProvider();
        provider.parmMainAccountSet(mainAccountSet);
        provider.parmDataContract(trialBalanceContract);
        provider.processReport();
        LedgerTurnoverAndBalanceTmp turnoverAndBalanceTmp = provider.getLedgerTurnoverAndBalanceTmp();
        ArrayList ledgerTurnoverAndBalanceTmps = new System.Collections.ArrayList();
        while select turnoverAndBalanceTmp
        {
            ledgerTurnoverAndBalanceTmps.Add(turnoverAndBalanceTmp.data());
        }
        return ledgerTurnoverAndBalanceTmps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcessedObjectParameters</Name>
				<Source><![CDATA[
    protected void addProcessedObjectParameters(ERIFormatMappingRun _erRun)
    {
        ERmodelDefinitionInputParametersAction parameters = new ERModelDefinitionInputParametersAction()
            .addParameter('SkipZOiSPart', dataContract.parmSkipZOiSPart())
            .addParameter('SkipDziennikPart', dataContract.parmSkipDziennikPart())
            .addParameter('SkipKontoZapisPart', dataContract.parmSkipKontoZapisPart())
            .addParameter('PrintMainAccountDimensions', dataContract.parmPrintMainAccountDimensions());
        parameters.parmSkipExceptionOnMissingParameter(true);
        _erRun.withParameter(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyParametersToQuery</Name>
				<Source><![CDATA[
    private void applyParametersToQuery()
    {
        userModifiedQuery = dataContract.parmQuery();

        QueryBuildDataSource qbds = userModifiedQuery.addDataSource(tableNum(MainAccount));

        findOrCreateRange_W(qbds, fieldNum(MainAccount, LedgerChartOfAccounts),
            queryValue(Ledger::chartOfAccounts())).status(RangeStatus::Hidden);
        if (dataContract.parmIncludeTotals() == NoYes::No)
        {
            findOrCreateRange_W(qbds, fieldNum(MainAccount, Type),
                queryValue(SysQuery::valueNot(DimensionLedgerAccountType::Total))).status(RangeStatus::Hidden);
        }

        var generalJournalEntryTableDs = userModifiedQuery.addDataSource(tableNum(GeneralJournalEntry));
        findOrCreateRange_W(generalJournalEntryTableDs, fieldNum(GeneralJournalEntry, AccountingDate),
             SysQuery::range(dataContract.parmDateFrom(), dataContract.parmDateTo()));

        findOrCreateRange_W(generalJournalEntryTableDs, fieldNum(GeneralJournalEntry, Ledger),
            queryValue(Ledger::current())).status(RangeStatus::Hidden);

        var qbdsAccountEntry = generalJournalEntryTableDs.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsAccountEntry.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), generalJournalEntryTableDs.name());

        var generalJournalEntryViewDs = userModifiedQuery.addDataSource(tableNum(GeneralJournalForGDPdUView));
        findOrCreateRange_W(generalJournalEntryViewDs, fieldNum(GeneralJournalForGDPdUView, GeneralJournalEntryAccountingDate),
             SysQuery::range(dataContract.parmDateFrom(), dataContract.parmDateTo()));

        List postingLayerCollection = strSplit(dataContract.parmPostingLayers(), ';');

        if (postingLayerCollection.elements())
        { 
            ListEnumerator postingLayerCollectionEnumerator = postingLayerCollection.getEnumerator();
            QueryBuildRange range;

            while (postingLayerCollectionEnumerator.moveNext())
            {
                range = generalJournalEntryTableDs.addRange(fieldNum(GeneralJournalEntry, PostingLayer));
                range.value(queryValue(postingLayerCollectionEnumerator.current()));
                range.status(RangeStatus::Locked);

                range = generalJournalEntryViewDs.addRange(fieldNum(GeneralJournalForGDPdUView, GeneralJournalEntrypostingLayer));
                range.value(queryValue(postingLayerCollectionEnumerator.current()));
                range.status(RangeStatus::Locked);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueriesToContext</Name>
				<Source><![CDATA[
    protected void addQueriesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        super(_databaseContext);

        Query generalJournalEntryDataSource = this.createQueryWithCopiedDataSource(userModifiedQuery, tableNum(GeneralJournalEntry));
        _databaseContext.addQuery(tableNum(GeneralJournalEntry), generalJournalEntryDataSource);

        Query generalJournalForGDPdUViewQuery = this.createQueryWithCopiedDataSource(userModifiedQuery, tableNum(GeneralJournalForGDPdUView));
        _databaseContext.addQuery(tableNum(GeneralJournalForGDPdUView), generalJournalForGDPdUViewQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainAccountsID</Name>
				<Source><![CDATA[
    private void addMainAccountsID(Set _mainAccountSet)
    {
        var qdbs = userModifiedQuery.dataSourceTable(tableNum(GeneralJournalEntry));
        qdbs.enabled(false);
        var queryRun = new QueryRun(userModifiedQuery);
      
        while (queryRun.next())
        {
            var mainAccount = queryRun.get(tablenum(MainAccount));
            _mainAccountSet.add(mainAccount.RecId);
        }
        qdbs.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGJEAccountsID</Name>
				<Source><![CDATA[
    private void addGJEAccountsID(Set _mainAccountSet)
    {
        var qdbs = userModifiedQuery.dataSourceTable(tableNum(MainAccount));
        qdbs.enabled(false);
        var queryRun = new QueryRun(userModifiedQuery);
      
        while (queryRun.next())
        {
            GeneralJournalAccountEntry generalJournalAccountEntry = queryRun.get(tablenum(GeneralJournalAccountEntry));
            _mainAccountSet.add(MainAccount::findByLedgerDimension(generalJournalAccountEntry.LedgerDimension).RecId);
        }
        qdbs.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTablesToContext</Name>
				<Source><![CDATA[
    protected void addTmpTablesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        super(_databaseContext);
        if (!dataContract.parmSkipZOiSPart())
        {
            _databaseContext.addTemporaryTable(this.getLedgerTurnoverAndBalanceTmp(), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTurnoverAndBalanceTmp</Name>
				<Source><![CDATA[
    private LedgerTurnoverAndBalanceTmp getLedgerTurnoverAndBalanceTmp()
    {
        var mainAccountSet = new Set(Types::Int64);

        this.addMainAccountsID(mainAccountSet);
        this.addGJEAccountsID(mainAccountSet);

        LedgerTurnoverAndBalanceContract trialBalanceContract = new LedgerTurnoverAndBalanceContract();
        trialBalanceContract.parmFromDate(dataContract.parmDateFrom());
        trialBalanceContract.parmToDate(dataContract.parmDateTo());
        trialBalanceContract.parmPrintPostingLayers(dataContract.parmPostingLayers());
        trialBalanceContract.parmPrintOpeningBalance(dataContract.parmOpeningBalance());
        trialBalanceContract.parmSeparateBalance(dataContract.parmSeparateBalance());
        trialBalanceContract.parmPrintClosingTransactions(dataContract.parmClosingTransactions());
        trialBalanceContract.parmPrintZeroBalances(dataContract.parmZeroBalances());

        LedgerTurnoverAndBalanceDP provider = SAFTReportService_AccountingBooks_PL::createProvider();
        provider.parmMainAccountSet(mainAccountSet);
        provider.parmDataContract(trialBalanceContract);
        provider.processReport();
      
        return provider.getLedgerTurnoverAndBalanceTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProvider</Name>
				<Source><![CDATA[
    private static LedgerTurnoverAndBalanceDP createProvider()
    {
        LedgerTurnoverAndBalanceDP provider = new LedgerTurnoverAndBalanceDP();

        if (isRunningOnBatch())
        {
            provider.parmQueryTimeout(FiveHours);
        }

        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERFormatMappingRecId</Name>
				<Source><![CDATA[
    protected ERFormatMappingId getERFormatMappingRecId()
    {
        TaxParameters taxParameters;
        select firstonly SAFTAccountingBooksERFormatMapping_PL from taxParameters;
        return taxParameters.SAFTAccountingBooksERFormatMapping_PL;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>