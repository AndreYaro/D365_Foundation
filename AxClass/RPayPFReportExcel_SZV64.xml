<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportExcel_SZV64</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportExcel_SZV64 extends RPayPFReportExcel implements IRPayReportRunClass
{
    #define.ReportTitle("@RUP3515")

    RPayPFReportCtrl                reportData;
    IRPayPFReportCommand            totalFundCommand, seniorityCommand, monthFundCommand;

    IRPayPFReportDataIterator       fundDataIterator, seniorityIterator, monthFundIterator;
    int                             keyAgreementType;

    #RPayPFReportSZV64

    RPayAmount                      fundAmountIns, fundAmountSto;
    Counter                         emplNo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean         _displayMessage = true,
                                str 20          _personCategory = '',
                                str 20          _formType       = '')
    {
        boolean ret = true;

        ret = this.checkEmplIsInsured(_emplTable, _displayMessage) && ret;

        if (ret)
        {
            ret = this.checkMainInsuredPersonCat(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPFNumber(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, false, true) && ret;
            ret = this.checkEmplHasSpecSen(_emplTable, _displayMessage, _personCategory) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFundAmounts</Name>
				<Source><![CDATA[
    protected void fillFundAmounts(int _workSheetNum)
    {
        BookMark            cellInsurance1,
                            cellInsurance2,
                            cellStorage1,
                            cellStorage2;
        int                 monthIdx;
        container           monthFundCon;
        ReportPeriod_RU     reportedEndPeriod = (reportType == RpayPensionFundExportKindOfCorrection::None) ? reportEndPeriod : corrReportEndPeriod;

        for (monthIdx = 1; monthIdx <= 3; monthIdx++)
        {
            monthFundCommand.parmValue([#parmKeyReport, mthOfYr(reportedEndPeriod) - 3 + monthIdx]);
            monthFundIterator = monthFundCommand.iterator();

            if (monthFundIterator.more())
            {
                monthFundCon = monthFundIterator.value();

                excelDocument.insertValue(strfmt('FUNDTOTAL_0%1', int2str(monthIdx)), conpeek(monthFundCon, 1), _workSheetNum);
                excelDocument.insertValue(strfmt('FUNDLESSLIMIT_0%1', int2str(monthIdx)), conpeek(monthFundCon, 2), _workSheetNum);
                excelDocument.insertValue(strfmt('FUNDOVERLIMIT_0%1', int2str(monthIdx)), conpeek(monthFundCon, 3), _workSheetNum);

                excelDocument.insertValue(strfmt('FUNDEXTRA1_0%1', int2str(monthIdx)), conpeek(monthFundCon, 4), _workSheetNum);
                excelDocument.insertValue(strfmt('FUNDEXTRA2_0%1', int2str(monthIdx)), conpeek(monthFundCon, 5), _workSheetNum);
            }
        }

        [cellInsurance1, cellInsurance2, cellStorage1, cellStorage2] = this.fundAmountCells();

        excelDocument.insertValue(cellInsurance1,   fundAmountIns,    _workSheetNum);
        excelDocument.insertValue(cellInsurance2,   fundAmountIns,    _workSheetNum);

        excelDocument.insertValue(cellStorage1,     fundAmountSto,    _workSheetNum);
        excelDocument.insertValue(cellStorage2,     fundAmountSto,    _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader(int               _workSheetNum,
                              str 20            _personCategory,
                              RHRMEmplTable     _emplTable)
    {
        DirPersonName   dirPersonName = _emplTable.personTable().dirPersonName();
        SysDictEnum     dictEnum;
        RHRMSortOfWork  sortOfWork;

        void fillCorrectPeriod()
        {
            if (reportYear > #ReportYear2010)
            {
                if (this.periodType() == enumnum(RPayPFReportPeriod))
                {
                    switch (corrTaxPeriodByQtr)
                    {
                        case RPayPFReportPeriod::Quarter1 :
                            excelDocument.insertValue('CORRQUARTER1', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter2 :
                            excelDocument.insertValue('CORRQUARTER2', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter3 :
                            excelDocument.insertValue('CORRQUARTER3', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter4 :
                            excelDocument.insertValue('CORRQUARTER4', #CheckSign, _workSheetNum);
                            break;
                    }
                }
            }

            excelDocument.insertValue('CORRREPORTYEAR', corrReportYear, _workSheetNum);
        }

        excelDocument.insertValue('COMPANY_PFR_ID',         companyInfo.PFRegNum_RU,    _workSheetNum);
        excelDocument.insertValue('COMPANY_NAME_SHORT',     companyInfo.Name,           _workSheetNum);
        excelDocument.insertValue('COMPANY_INN',            CompanyInfoHelper::partyINN_RU(companyInfo),  _workSheetNum);
        excelDocument.insertValue('COMPANY_KPP',            CompanyInfoHelper::partyKPP_RU(companyInfo),  _workSheetNum);
        excelDocument.insertValue('INS_PERSON_CATEGORY_ID', _personCategory,            _workSheetNum);

        if (reportYear > #ReportYear2010)
        {
            if (this.periodType() == enumnum(RPayPFReportPeriod))
            {
                switch (taxPeriodByQtr)
                {
                    case RPayPFReportPeriod::Quarter1 :
                        excelDocument.insertValue('QUARTER1',  #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter2 :
                        excelDocument.insertValue('QUARTER2', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter3 :
                        excelDocument.insertValue('QUARTER3', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter4 :
                        excelDocument.insertValue('QUARTER4',  #CheckSign, _workSheetNum);
                        break;
                }
            }

            excelDocument.insertValue('REPORTYEAR', reportYear, _workSheetNum);
        }

        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::Cancellative:
                excelDocument.insertValue('DOC_TYPE_CANCEL', #CheckSign, _workSheetNum);
                fillCorrectPeriod();
                break;

            case RpayPensionFundExportKindOfCorrection::None:
                excelDocument.insertValue('DOC_TYPE_ORIGIN', #CheckSign, _workSheetNum);
                break;

            case RpayPensionFundExportKindOfCorrection::Correctional:
                excelDocument.insertValue('DOC_TYPE_CORRECT', #CheckSign, _workSheetNum);
                fillCorrectPeriod();
                break;
        }

        dictEnum = new SysDictEnum(enumnum(RHRMSortOfWork));
        if (dictEnum.lastValue() >= (keyAgreementType - 1) && dictEnum.firstValue() <= (keyAgreementType - 1))
        {
            sortOfWork = keyAgreementType - 1;

            switch (sortOfWork)
            {
                case RHRMSortOfWork::CivilContract:
                    excelDocument.insertValue('AGREEMENT_CIVIL', #CheckSign, _workSheetNum);
                    break;

                default:
                    excelDocument.insertValue('AGREEMENT_LABOR', #CheckSign, _workSheetNum);
            }
        }

        excelDocument.insertValue('EMPLNAME_LAST', dirPersonName.LastName, _workSheetNum);
        excelDocument.insertValue('EMPLNAME_FIRST', dirPersonName.FirstName, _workSheetNum);
        excelDocument.insertValue('EMPLNAME_MIDDLE', dirPersonName.MiddleName, _workSheetNum);

        excelDocument.insertValue('EMPL_PFR_ID', _emplTable.payPFRINN(), _workSheetNum);

        excelDocument.insertValue('DIRECTORTITLE',    OfficialsTable_RU::findDirector().Title,  _workSheetNum);
        excelDocument.insertValue('DIRECTORNAME',   OfficialsTable_RU::nameDirector(),          _workSheetNum);

        excelDocument.insertValue('DATE',    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSeniorityPeriods</Name>
				<Source><![CDATA[
    protected void fillSeniorityPeriods(int             _workSheetNum,
                                        str 20          _personCategory,
                                        RHRMEmplTable   _emplTable,
                                        int             _rowStart       = 77)
    {
        container                       seniorityPeriods;
        StartDate                       seniorityDateFrom;
        EndDate                         seniorityDateTo;
        RPayInsuranceSeniorityTypeId    insuranceTypeId;
        Months                          senMonths;
        Days                            senDays;
        RHRMSpecCond                    specCondition;
        RHRMPositionList                positionList;

        int                             curRow, curRowNum = 1;

        seniorityCommand.parmValue([#SeniorityKey]);
        seniorityIterator = seniorityCommand.iterator();

        curRow = _rowStart;

        while (seniorityIterator.more())
        {
            seniorityPeriods = seniorityIterator.value();
            [#SeniorityValue] = seniorityPeriods;

            excelDocument.insertRow(curRow, _workSheetNum);

            excelDocument.insertValue('A'  + int2str(curRow), curRowNum, _workSheetNum);
            excelDocument.insertValue('F'  + int2str(curRow), date2str(seniorityDateFrom, 123, 2, 2, 2, 2, 4, DateFlags::None), _workSheetNum);
            excelDocument.insertValue('R'  + int2str(curRow), date2str(seniorityDateTo, 123, 2, 2, 2, 2, 4, DateFlags::None),   _workSheetNum);
            excelDocument.insertValue('BP' + int2str(curRow), insuranceTypeId, _workSheetNum);

            excelDocument.insertValue('AP' + int2str(curRow), specCondition, _workSheetNum);
            if (positionList)
            {
                excelDocument.insertRow(curRow + 2, _workSheetNum, -1);
                curRow++;
                excelDocument.insertValue('AP' + int2str(curRow), positionList, _workSheetNum);
            }

            curRow++;
            curRowNum++;

            seniorityIterator.moveNext();
        }

        excelDocument.deleteRow(curRow);
        excelDocument.deleteRow(curRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundAmountCells</Name>
				<Source><![CDATA[
    protected container fundAmountCells()
    {
        return ['INSIMPOSED', 'INSPAID', 'STOIMPOSED', 'STOPAID'];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        parmContract = new RPayPFReportParmContract();
        parmContract.reportStartPeriod(reportStartPeriod);
        parmContract.reportEndPeriod(reportEndPeriod);
        parmContract.corrReportStartPeriod(corrReportStartPeriod);
        parmContract.corrReportEndPeriod(corrReportEndPeriod);
        parmContract.seniorityEndPeriod(seniorityEndPeriod);
        parmContract.seniorityStartPeriod(seniorityStartPeriod);
        parmContract.queryRun(queryRun.pack());
        parmContract.correctionType(reportType);

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();
        totalFundCommand = new RPayReportCommandSZV6(reportData.reportData(), [#FundAmountDS]);
        seniorityCommand = new RPayReportCommandSZV6(reportData.reportData(), [#SeniorityDS]);
        monthFundCommand = new RPayReportCommandSZV64(reportData.reportData(), [#MonthFundAmountDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        super();

        if (! payTaxParameters.PensionFundinvalidDeduction)
        {
            info(strFmt("@SYS76498", "@RUP854", "@RUP1178"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>minYearEnabled</Name>
				<Source><![CDATA[
    protected Yr minYearEnabled()
    {
        return #ReportYear2010;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public container parmContract()
    {
        return parmContract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodType</Name>
				<Source><![CDATA[
    protected enumId periodType()
    {
        return enumnum(RPayPFReportPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlSZV64();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMEmplTable   emplTableLocal;
        container       con;

        RHRMEmplId      prevEmplId;
        str             prevCategory;
        int             prevKeyAgreementType;
        int             workSheetNum;

        if (! this.checkCompanyInfo() || ! this.checkTaxParameters())
        {
            return;
        }

        this.initEmployeesData();

        totalFundCommand.parmValue(connull());
        fundDataIterator = totalFundCommand.iterator();

        if (fundDataIterator.more())
        {
            this.progressInit(this.caption(), SysQuery::countTotal(queryRun), #AviFormLetter);
            progress.updateInterval(0);

            while (fundDataIterator.more())
            {
                con = fundDataIterator.value();
                [#parmKeyReport] = conpeek(con, 1);
                [#parmValue]     = conpeek(con, 2);

                if (keyEmplId && keyCategory && keyAgreementType)
                {
                    if (prevEmplId != keyEmplId)
                    {
                        emplTableLocal = RHRMEmplTable::find(keyEmplId);
                        progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));
                        progress.incCount();

                        if (excelDocument)
                        {
                            if (workSheetNum == 1)
                            {
                                excelDocument.deleteWorkSheet(2);
                            }
                            excelDocument.visible(true);
                            excelDocument = NULL;
                        }

                        if (!this.makeDocument())
                        {
                            continue;
                        }

                        workSheetNum = 1;
                        this.fillHeader(workSheetNum, keyCategory, emplTableLocal);
                        this.fillFundAmounts(workSheetNum);
                        excelDocument.insertSheet(1, 1);
                        this.fillSeniorityPeriods(workSheetNum, keyCategory, emplTableLocal);

                        prevCategory            = keyCategory;
                        prevKeyAgreementType    = keyAgreementType;
                        prevEmplId              = keyEmplId;
                    }

                    if ((prevCategory != keyCategory || prevKeyAgreementType != keyAgreementType) && excelDocument)
                    {
                        ++workSheetNum;
                        this.fillHeader(workSheetNum, keyCategory, emplTableLocal);
                        this.fillFundAmounts(workSheetNum);
                        this.fillSeniorityPeriods(workSheetNum, keyCategory, emplTableLocal);
                        prevCategory = keyCategory;
                    }
                }

                fundDataIterator.moveNext();
            }

            if (excelDocument)
            {
                if (workSheetNum == 1)
                {
                    excelDocument.deleteWorkSheet(2);
                }
                excelDocument.visible(true);
                excelDocument = NULL;
            }
        }
        else
        {
            info("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>