<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerJourRuleVendPayReqExtPriceTax_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimDerJourRuleVendPayReqExtPriceTax_BR</c> class provides a dimension derivation distribution rule extension for taxes on vendor invoices.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleVndPymntReqExpProdExtPriceTax))]
class DimDerJourRuleVendPayReqExtPriceTax_BR extends DimensionDerivationRuleExtension
{
    AccountingRule          accountingRule;
    AccountingRule          parentAccountingRule;
    SourceDocumentLineItem  parentSourceDocumentLineItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDefaultDimAlloc</Name>
				<Source><![CDATA[
	/// <summary>
	///    Populates the default dimension allocation.
	/// </summary>
	/// <returns>
	/// A ledger dimension allocation structure
	/// </returns>
	private LedgerDimensionAllocation createDefaultDimAlloc()
    {
        LedgerDimensionAccount ledgerDimension;

        ledgerDimension = this.createLedgerDimension(parentSourceDocumentLineItem.parmLedgerDimensionDefaultAccount());

        return LedgerDimensionAllocation::newFromParameters(
            ledgerDimension,
            1,
            accountingRule.parmSide(),
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimAllocForFixedAsset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension allocation for fixed asset.
    /// </summary>
    /// <returns>
    /// A ledger dimension allocation structure
    /// </returns>
    private LedgerDimensionAllocation createDimAllocForFixedAsset()
    {
        return this.createLedgerDimensionAllocation(MainAccountDimensionListProviderType::FixedAsset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimAllocForInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension allocation for inventory.
    /// </summary>
    /// <returns>
    /// A ledger dimension allocation structure
    /// </returns>
    private LedgerDimensionAllocation createDimAllocForInvent()
    {
        return this.createLedgerDimensionAllocation(MainAccountDimensionListProviderType::Inventory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimAllocForProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension allocation for project.
    /// </summary>
    /// <returns>
    /// A ledger dimension allocation structure
    /// </returns>
    private LedgerDimensionAllocation createDimAllocForProject()
    {
        return this.createLedgerDimensionAllocation(MainAccountDimensionListProviderType::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a ledger dimension for the specified combination.
    /// </summary>
    /// <param name="_ledgerDimensionDefaultAccount">
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record that specifies the initial dimension
    ///    values.
    /// </param>
    /// <returns>
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </returns>
    private LedgerDimensionAccount createLedgerDimension(LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimensionDefaultAccount,
                                                                        parentSourceDocumentLineItem.parmDefaultDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a ledger dimension allocation structure from parameters.
    /// </summary>
    /// <param name="_mainAccountDimensionListProviderType">
    /// The main account list provider type.
    /// </param>
    /// <returns>
    /// A ledger dimension allocation structure.
    /// </returns>
    private LedgerDimensionAllocation createLedgerDimensionAllocation(MainAccountDimensionListProviderType _mainAccountDimensionListProviderType)
    {
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;

        ledgerDimensionDefaultAccount = this.getMainAccount(_mainAccountDimensionListProviderType);
        ledgerDimension = this.createLedgerDimension(ledgerDimensionDefaultAccount);

        return LedgerDimensionAllocation::newFromParameters(
            ledgerDimension,
            1,
            accountingRule.parmSide(),
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a ledger dimension allocation structure from parameters.
    /// </summary>
    /// <param name="_mainAccountDimensionListProviderType">
    /// The main account list provider type.
    /// </param>
    /// <returns>
    /// A ledger dimension default account.
    /// </returns>
    private LedgerDimensionDefaultAccount getMainAccount(MainAccountDimensionListProviderType _mainAccountDimensionListProviderType)
    {
        MainAccountDimensionList    mainAccountDimensionList;

        parentAccountingRule = AccountingDistributionRule::newRule(
            parentSourceDocumentLineItem,
            MonetaryAmount::ExtendedPrice);

        mainAccountDimensionList = MainAccountDimensionListProvider::newFromAccountingRule(_mainAccountDimensionListProviderType, parentAccountingRule)
                                        .parmMainAccountDimensionList();

        if (mainAccountDimensionList.first())
        {
            return mainAccountDimensionList.first().parmMainAccount();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectVendInvLineSourceDocLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if PO created from Project otherwise returns false.
    /// </summary>
    /// <returns>
    /// Returns true if PO created from Project otherwise returns false.
    /// </returns>
    private boolean isProjectVendInvLineSourceDocLineItem()
    {
        boolean isProjectVendInvLine;

        if (parentSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem = parentSourceDocumentLineItem;
            isProjectVendInvLine = vendorInvoiceLineSourceDocLineItem.parmProjectId() ? true : false;
        }

        return isProjectVendInvLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension derivation rule extension.
    /// </summary>
    public void initialize()
    {
        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        super();

        accountingRule = dimensionDerivationRule.parmAccountingRule();

        if (accountingRule)
        {
            parentSourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();

            if (parentSourceDocumentLineItem is SourceDocumentLineItemICharge)
            {
                parentSourceDocumentLineItem = parentSourceDocumentLineItem.parmParentSourceDocumentLineItem();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the dimension allocation list.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     Current dimension allocation list.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        LedgerDimensionAllocation ledgerDimensionAllocation;
        TaxSourceDocSublineItem taxSourceDocSublineItem;
        SourceDocumentLineItemIProduct      iProduct;
        SourceDocumentLineItemIFixedAsset   iFixedAsset;
        boolean                             isStocked;

        if (!BrazilParameters::isEnabled() || parentSourceDocumentLineItem == null)
        {
            return;
        }

        if (accountingRule.parmSourceDocumentLineItem() is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = accountingRule.parmSourceDocumentLineItem();

            if (!taxSourceDocSublineItem.isIncludedInPrice_BR())
            {
                return;
            }

            if (parentSourceDocumentLineItem is SourceDocumentLineItemIProduct)
            {
                iProduct = parentSourceDocumentLineItem as SourceDocumentLineItemIProduct;
                isStocked = iProduct.parmStocked();
            }

            if (parentSourceDocumentLineItem is SourceDocumentLineItemIFixedAsset)
            {
                iFixedAsset = parentSourceDocumentLineItem as SourceDocumentLineItemIFixedAsset;
            }

            if (!isStocked && this.isProjectVendInvLineSourceDocLineItem())
            {
                ledgerDimensionAllocation = this.createDimAllocForProject();
            }
            else
            {
                if (parentSourceDocumentLineItem.parmLedgerDimensionDefaultAccount())
                {
                    ledgerDimensionAllocation = this.createDefaultDimAlloc();
                }
                else
                {
                    if (!isStocked && iFixedAsset && (iFixedAsset.parmAssetId() || iFixedAsset.parmAssetGroupId()))
                    {
						ledgerDimensionAllocation = this.createDimAllocForFixedAsset();
                    }
					else
                    {
						ledgerDimensionAllocation = this.createDimAllocForInvent();
                    }
                }
            }

            _ledgerDimensionAllocationList.addEnd(LedgerDimensionAllocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to dimension derivation rule extension events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>