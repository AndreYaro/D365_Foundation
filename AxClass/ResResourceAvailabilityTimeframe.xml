<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceAvailabilityTimeframe</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource availability timeframe class.
/// Implements resolveTimePeriod for Resource availability view.
/// </summary>
public class ResResourceAvailabilityTimeframe extends AVTimelinePointInTime
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolveEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes date/time range to data contract instance.
    /// </summary>
    /// <param name = "_start">Start date/time.</param>
    /// <param name = "_end">End date/time.</param>
    /// <returns>Instance of <c>TimePeriodDataContract</c>.</returns>
    public TimePeriodDataContract resolveEntity(utcdatetime _start, utcdatetime _end)
    {
        AVTimeframeType timescale = this.control().timescale();
        str title;

        switch (timescale)
        {
            case AVTimeframeType::Hour:
                title = strFmt("@Res:DateHourFormat",
                    date2StrUsr(DateTimeUtil::date(_start), DateFlags::FormatAll),
                    time2Str(DateTimeUtil::time(_start), TimeSeparator::Auto, TimeFormat::Auto));
                break;

            case AVTimeframeType::Day:
                title =  strFmt("@Res:FullDateFormat",
                    dayName(dayOfWk(DateTimeUtil::date(_start))),
                    date2StrUsr(DateTimeUtil::date(_start), DateFlags::FormatAll));
                break;

            case AVTimeframeType::Week:
                title = strFmt("@Res:FromWeekToWeekFormat",
                    date2StrUsr(DateTimeUtil::date(_start), DateFlags::FormatAll),
                    date2StrUsr(DateTimeUtil::date(_end), DateFlags::FormatAll));

                break;

            case AVTimeframeType::Month:
                title = strfmt("@Res:MonthDateFormat",
                    mthname(DateTimeUtil::month(_start)),
                    date2StrUsr(DateTimeUtil::date(_start), DateFlags::FormatAll));
                break;

            default:
                title = date2StrUsr(DateTimeUtil::date(_start), DateFlags::FormatAll);
                break;
        }

        TimePeriodDataContract timeperiodData = TimePeriodDataContract::construct();
        str startStr = AVUtil::getDateTimeStr(_start);

        timeperiodData.TimePeriodKey(startStr);
        timeperiodData.Timescale(timescale);
        timeperiodData.Title(title);
        return timeperiodData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of Resource availability timeline controller.
    /// </summary>
    /// <returns>Instance of <c>ResResourceAvailabilityTimeframe</c>.</returns>
    public static ResResourceAvailabilityTimeframe construct()
    {
        ResResourceAvailabilityTimeframe controller = new ResResourceAvailabilityTimeframe();
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>