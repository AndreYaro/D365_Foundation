<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentReceiptAdviceObserver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentReceiptAdviceObserver</c> class provides the receipt advice specific handling of
///    subcontracting document processing.
/// </summary>
public class LeanDocumentReceiptAdviceObserver extends LeanDocumentObserver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The object to compare.
    /// </param>
    /// <returns>
    ///    true if the two objects are equal; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentReceiptAdviceObserver otherObserver = otherObject as LeanDocumentReceiptAdviceObserver;

        return  otherObject == this
                || otherObserver != null ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the post processing of a separate data line object.
    /// </summary>
    /// <param name="_lineKey">
    ///    The key of the data line.
    /// </param>
    /// <param name="_line">
    ///    The data line object.
    /// </param>
    protected void postProcessLine(anytype _lineKey, LeanDocumentProcessingDataLine _line)
    {
        ListEnumerator          listEnum = _line.parmSourceRecords().getEnumerator();
        Map                     lineAdditionalValues = _line.parmAdditionalValues();

        Debug::assert(lineAdditionalValues.exists(tablenum(VendPackingSlipTrans)));
        if (!lineAdditionalValues.exists(tablenum(VendPackingSlipTrans)))
        {
            return;
        }

        VendPackingSlipTrans vendPackingSlipTrans = lineAdditionalValues.lookup(tablenum(VendPackingSlipTrans));

        Debug::assert(vendPackingSlipTrans.RecId != 0);
        if (!vendPackingSlipTrans.RecId)
        {
            return;
        }

        super(_lineKey, _line);

        while (listEnum.moveNext())
        {
            KanbanJob currentKanbanJob = listEnum.current();
            KanbanJobReceiptAdviceLine::assignKanbanJobToReceiptLine(currentKanbanJob, vendPackingSlipTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanDocumentReceiptAdviceObserver</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LeanDocumentReceiptAdviceObserver</c> class.
    /// </returns>
    public static LeanDocumentReceiptAdviceObserver newStandard()
    {
        return new LeanDocumentReceiptAdviceObserver();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
