<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchDialog_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesPurchDialog_RU extends RunBaseBatch
{
    QueryRun    queryRun;

    RecordSortedList        journalList;
    CustVendInvoiceJour     invoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    abstract protected boolean checkJour(CustVendInvoiceJour _jour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJour</Name>
				<Source><![CDATA[
    abstract protected CustVendInvoiceJour findJour(PrintoutTable_RU _table)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query                query = new Query();
        QueryBuildDataSource qbds  = query.addDataSource(tablenum(PrintoutTable_RU));

        QueryBuildRange      journalType = qbds.addRange(fieldnum(PrintoutTable_RU, JournalType)),
                             invLocation = qbds.addRange(fieldnum(PrintoutTable_RU, InventLocationId)),
                             journalNum  = qbds.addRange(fieldnum(PrintoutTable_RU, JournalNum)),
                             recIdRange  = qbds.addRange(fieldnum(PrintoutTable_RU, RecId));

        Set                  typeSet     = new Set(Types::String),
                             locationSet = new Set(Types::String),
                             numSet      = new Set(Types::String),
                             recIdSet    = new Set(typeName2Type(extendedTypeStr(recId)));
        qbds.allowAdd(false);

        recIdRange.status(RangeStatus::Hidden);

        if (! journalList && invoiceJour)
        {
            journalList = FormLetter::createJournalListCopy(invoiceJour);
        }

        if (! journalList)
            throw error("@SYS26348");

        journalList.first(invoiceJour);

        while (invoiceJour)
        {
            if (this.checkJour(invoiceJour))
            {
                this.loopPrintoutTable(typeSet, locationSet, numSet, recIdSet);
            }

            if (! journalList.next(invoiceJour))
                break;
        }

        this.setToRangeValue(journalType, typeSet);
        this.setToRangeValue(invLocation, locationSet);
        this.setToRangeValue(journalNum,  numSet);
        this.setToRangeValue(recIdRange,  recIdSet);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRecIdField</Name>
				<Source><![CDATA[
    abstract protected fieldId jourRecIdField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopPrintoutTable</Name>
				<Source><![CDATA[
    abstract protected void loopPrintoutTable(Set _typeSet,
                                              Set _locationSet,
                                              Set _numSet,
                                              Set _recIdSet)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RecordSortedList    _journalList = null,
                    CustVendInvoiceJour _invoiceJour = null)
    {
        super();

        journalList = _journalList;
        invoiceJour = _invoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        if (! queryRun)
        {
            queryRun = new QueryRun(this.initQuery());
            queryRun.saveUserSetup(false);
        }
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CustVendInvoiceJour jour;

        journalList.sortOrder(this.jourRecIdField());

        while (queryRun.next())
        {
            PrintoutTable_RU table = queryRun.getNo(1);
            jour = this.findJour(table);
            journalList.ins(jour);
        }
        queryRun.reset();

        Args parm = new Args();
        parm.record(jour);
        parm.object(journalList);
        parm.parmEnum(PrintCopyOriginal::Copy);
        parm.caller(this);

        this.runReport(parm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    abstract protected void runReport(Args _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToRangeValue</Name>
				<Source><![CDATA[
    private void setToRangeValue(QueryBuildRange _range,
                                 Set             _values)
    {
        str             value;

        if (_values)
        {
            SetEnumerator se = _values.getEnumerator();

            if (se.moveNext())
            {
                value = strfmt('"%1"', se.current());
            }

            while (se.moveNext())
            {
                value += strfmt(',"%1"', se.current());
            }
        }

        _range.value(value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret = true;
        // if in batch execution start
        if (! this.inGetSaveLast())
        {
            if (SysQuery::isPackedOk(packedClass))
            {
                queryRun = new QueryRun(packedClass);
            }
            else
            {
                ret = checkFailed("@GLS107075");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
