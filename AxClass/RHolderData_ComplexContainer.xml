<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHolderData_ComplexContainer</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RHolderData_ComplexContainer extends RHolderData
{
    #define.Sum(0)
    #define.ContainerConc(1)
    #define.ContainerConcUnique(2)
    #define.FirstValue(3)
    #define.LastValue(4)

    container   keyMask,
                sumAction;

    boolean     recursive;
    int         valueTypePosition;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSumInComplianceWithKey</Name>
				<Source><![CDATA[
    // _value is a container that can include containers.
    // these subcontainers are summed, droping repeated values if _unique == true
    protected void addSumInComplianceWithKey(container _key,
                                             anytype   _value)
    {
        int         len      = conlen(_value),
                    idx,
                    add;
        container   value    = map.lookup(_key),
                    addValue = _value,
                    elem,
                    addElem;

        for (idx = 1; idx <= len; idx ++)
        {
            switch (conpeek(sumAction, idx))
            {
                case #Sum                   :
                case #ContainerConc         :
                    value = conpoke(value, idx, conpeek(value, idx) + conpeek(addValue, idx));
                    break;
                case #ContainerConcUnique   :
                    elem    = conpeek(value, idx);
                    addElem = conpeek(addValue, idx);
                    for (add = 1; add <= conlen(addElem); add ++)
                    {
                        if (! confind(elem, conpeek(addElem, add)))
                        {
                            elem = conins(elem, conlen(elem) + 1, conpeek(addElem, add));
                        }
                    }
                    value = conpoke(value, idx, elem);
                    break;
                case #FirstValue            :
                    break;
                case #LastValue             :
                    value = addValue;
                    break;
                default                 :
                    throw error(error::wrongUseOfFunction(funcname()));
            }
        }

        this.insertValue(_key, value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyBuild</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getKeyBuild(container _param)
    {
        container ret = connull();
        int       idx;

        if (conlen(_param) < keyLength)
            throw error(error::wrongUseOfFunction(funcname()));

        for (idx = 1; idx <= keyLength; idx ++)
        {
            ret += [ conpeek(_param, conpeek(keyMask, idx)) ];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyLength</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int getKeyLength()
    {
        return keyLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyMask</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getKeyMask()
    {
        return keyMask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(container _key,
                       anytype   _valueValue,
                       boolean   _recursive         = true,
                       int       _valueTypePosition = 0)
    {
        recursive         = _recursive;
        valueTypePosition = _valueTypePosition;
        super(_key, _valueValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    protected void insertValue(container _key,
                               anytype   _value)
    {
        if (valueTypePosition)
        {
            super(_key, conpoke(_value, valueTypePosition, this.keyType(_key)));
        }
        else
        {
            super(_key,_value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyType</Name>
				<Source><![CDATA[
    private int keyType(container   _key)
    {
        int idx = confind(_key, summability);

        return idx ? (idx - 1) : keyLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(int       _keyLen,
                    Types     _valueTypes,
                    container _contColumnAsOneColumn = connull(),
                    container _keyMask               = connull(), // rule how to dynamically construct key from parameters in <getKeyBuild()>
                    container _sumAction             = connull(), // rule how to sum values in <addSumInComplianceWithKey()>
                    TempStr   _emptyValue            = #defaultEmptyFieldKey)
    {
        keyMask     = _keyMask;
        sumAction   = _sumAction;
        super(conlen(keyMask),
              _valueTypes,
              _contColumnAsOneColumn,
              _emptyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceDefaultToAlterEmptyFieldKey</Name>
				<Source><![CDATA[
    protected container replaceDefaultToAlterEmptyFieldKey(container  _key)
    {
        container ret = _key;

        if (recursive)
        {
            ret = super(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToTop</Name>
				<Source><![CDATA[
    protected container transferToTop(container _key,
                                      anytype   _value)
    {
        container ret = connull();

        if (recursive)
        {
            ret = super(_key, _value);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>