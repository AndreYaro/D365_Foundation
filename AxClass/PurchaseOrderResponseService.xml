<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>PurchaseOrderResponseService</c> handles response creation for purchase order confirmation requests.
/// </summary>
public class PurchaseOrderResponseService
{
    PurchaseOrderResponseVersion    responseVersion;
    PurchaseOrderResponseContract   contract;
    PurchTableVersion               purchTableVersion;
    VendTable                       vendor;
    PurchTable                      purchTable;
    private SysOperationExecutionMode autoConfirmExecutionMode;
    private PurchVendorPortalInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>respond</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a response to a purchase order request.
    /// </summary>
    public void respond()
    {
        this.validatePurchaseOrderVersion();

        this.setConfirmedDeliveryDateAndUpdateResponseConsumptionStateToConsumed();

        this.createResponse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDeliveryDateAndUpdateResponseConsumptionStateToConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the confirmed delivery date if it is not already set.
    /// </summary>
    private void setConfirmedDeliveryDateAndUpdateResponseConsumptionStateToConsumed()
    {
        if (purchTable.DocumentState == VersioningDocumentState::InExternalReview 
            && contract.parmPurchaseOrderResponseState() == PurchaseOrderResponseState::Confirmed
            && this.checkConfirmedDeliveryDateBlank())
        {
            if (purchTable.ChangeRequestRequired)
            {
                this.setConfirmedDeliveryDateWithChangeManagement();
            }
            else
            {
                this.setConfirmedDeliveryDateWithoutChangeManagement();
            }

            this.updateLatestRequest();

            this.updateResponseHeaderAndLinesConsumptionStateToConsumed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDeliveryDateWithChangeManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the confirmed delivery date for purchase orders with change management.
    /// </summary>
    /// <remarks>
    /// To update the confirmed delivery date with change management, the purchase order will go through the existing change management workflow 
    /// where it is reset to Draft, moved to In Review, moved to Approved, and finally moved back in External Review.
    /// </remarks>
    private void setConfirmedDeliveryDateWithChangeManagement()
    {
        ttsbegin;

        VersioningPurchaseOrder versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(purchTable);

        purchTable.selectForUpdate(true);
        purchTable.reread();

        versioningPurchaseOrder.resetToDraft();
        versioningPurchaseOrder.setConfirmedDeliveryDate(responseVersion);

        purchTable.selectForUpdate(true);
        purchTable.reread();

        versioningPurchaseOrder.submitChangeRequest();
        versioningPurchaseOrder.approveChangeRequest();
        versioningPurchaseOrder.sendToVendor();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDeliveryDateWithoutChangeManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the confirmed delivery date for purchase orders without change management.
    /// </summary>
    /// <remarks>
    /// To update the confirmed delivery date without change management, the purchase order will go through the existing Purchase Order flow 
    /// where it is reset to Approved, and then maved back in External Review.
    /// </remarks>
    private void setConfirmedDeliveryDateWithoutChangeManagement()
    {
        ttsbegin;

        VersioningPurchaseOrder versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(purchTable);

        versioningPurchaseOrder.setConfirmedDeliveryDate(responseVersion);

        purchTable.selectForUpdate(true);
        purchTable.reread();

        versioningPurchaseOrder.sendToVendor();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfirmedDeliveryDateBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the confirmed delivery date is blank.
    /// </summary>
    /// <returns>
    /// true if the confirmed delivery date is blank; otherwise, false.
    /// </returns>
    private boolean checkConfirmedDeliveryDateBlank()
    {
        PurchLine purchLine;

        select firstonly RecId from purchLine
                where purchLine.ConfirmedDlv == dateNull()
                    && purchLine.DeliveryDate != dateNull()
                    && purchLine.PurchId == purchTable.PurchId
                    && !purchLine.IsDeleted;

        return purchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLatestRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the most recent <c>PurchConfirmationRequestJour</c> to match the latest <c>PurchTableVersion</c> once the confirmed delivery date has been updated.
    /// </summary>
    private void updateLatestRequest()
    {
        PurchConfirmationRequestJour request;
        PurchTableVersionRecId oldPurchTableVersionRecId = purchTableVersion.RecId;

        // Update the local purchase order version to the latest available version.
        purchTableVersion = PurchTableVersion::findLatest(purchTable.PurchId, purchTable.DataAreaId);

        using (var activityContext = this.instrumentationLogger().purchVendorPortalActivities()
        .writePurchTableVersion(purchTable.RecId, oldPurchTableVersionRecId, purchTableVersion.RecId))
        {
            ttsbegin;
            update_recordset request
                setting PurchTableVersion = purchTableVersion.RecId
                    where request.PurchTableVersion == oldPurchTableVersionRecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResponseHeaderAndLinesConsumptionStateToConsumed</Name>
				<Source><![CDATA[
    private void updateResponseHeaderAndLinesConsumptionStateToConsumed()
    {
        PurchaseOrderResponseHeader purchaseOrderResponseHeader = purchTable.responseHeader(true);
        purchaseOrderResponseHeader.updateResponseHeaderAndLinesConsumptionStateToConsumed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms a purchased order
    /// </summary>
    [Hookable(false)]
    internal void confirmPurchaseOrder()
    {
        Map                        purchOrderMap    = new Map(Types::Int64, Types::Record);
        PurchFormLetter_PurchOrder purchFormLetter  = PurchFormLetter_PurchOrder::newPurchOrder();

        purchOrderMap.insert(purchTable.RecId, purchTable);

        purchFormLetter.purchTable(purchTable);
        purchFormLetter.parmDataSourceRecordsPacked(purchOrderMap.pack());
        purchFormLetter.chooseLines();

        purchFormLetter.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoConfirmExecutionMode</Name>
				<Source><![CDATA[
    public SysOperationExecutionMode parmAutoConfirmExecutionMode(SysOperationExecutionMode _autoConfirmExecutionMode = autoConfirmExecutionMode)
    {
        autoConfirmExecutionMode = _autoConfirmExecutionMode;
        return autoConfirmExecutionMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPurchaseOrderBeAutoConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order should be auto confirmed.
    /// </summary>
    /// <returns>true if it should be auto-confirmed; otherwise, false.</returns>
    [Replaceable]
    public boolean shouldPurchaseOrderBeAutoConfirmed()
    {
        boolean purchaseOrderIgnoreOnHoldVendorFlight = PurchaseOrderIgnoreOnHoldVendorFlight::instance().isEnabled();

        return responseVersion.ResponseState      == PurchaseOrderResponseState::Confirmed
            && vendor.VendVendorCollaborationType == VendVendorCollaborationType::WithAutoConfirmation
            && purchTable.DocumentState           == VersioningDocumentState::InExternalReview
            && (!purchaseOrderIgnoreOnHoldVendorFlight
                || (purchaseOrderIgnoreOnHoldVendorFlight && !VendTable::isVendorBlocked(purchTable.OrderAccount, CustVendorBlocked::PurchOrder)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequestExists</Name>
				<Source><![CDATA[
    private boolean validateRequestExists()
    {
        PurchConfirmationRequestJour request;
        boolean                      ok = true;

        select firstonly RecId from request
            where request.PurchTableVersion == purchTableVersion.RecId;

        if (!request)
        {
            ok = checkFailed("@SCM:PurchaseOrderResponseErrorNoRequest");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequestIsProcessed</Name>
				<Source><![CDATA[
    private boolean validateRequestIsProcessed()
    {
        boolean                      ok = true;

        if ((responseVersion.ResponseState != PurchaseOrderResponseState::Pending) &&
            (responseVersion.ResponseState != PurchaseOrderResponseState::Editing))
        {
            ok = checkFailed(strFmt("@SCM:PurchaseOrderResponseErrorRequestIsProcessed", purchTableVersion.findConfirmationRequestJour().DocumentNumber));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsLatestRequest</Name>
				<Source><![CDATA[
    private boolean validateIsLatestRequest()
    {
        PurchConfirmationRequestJour request;
        PurchTableVersion            latestPurchTableVersion;
        boolean                      ok = true;

        select firstonly RecId from latestPurchTableVersion
                order by latestPurchTableVersion.VersionDateTime desc
                where latestPurchTableVersion.PurchId           == purchTableVersion.PurchId
                   && latestPurchTableVersion.PurchIdDataAreaId == purchTableVersion.PurchIdDataAreaId
                   && latestPurchTableVersion.VersionDateTime   >  purchTableVersion.VersionDateTime
                exists join request
                    where request.PurchTableVersion == latestPurchTableVersion.RecId;

        if (latestPurchTableVersion)
        {
            ok = checkFailed("@SCM:PurchaseOrderResponseErrorNotTheLatestRequest");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchaseOrderVersion</Name>
				<Source><![CDATA[
    private void validatePurchaseOrderVersion()
    {
        boolean ok = true;

        ok = ok && this.validateVendor();
        ok = ok && this.validateRequestExists();
        ok = ok && this.validateRequestIsProcessed();
        ok = ok && this.validateIsLatestRequest();
        ok = ok && purchTableVersion.validatePurchaseOrderIsNotSubsequentlyConfirmed();

        if (!ok)
        {
            throw error("@SCM:PurchaseOrderResponseError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendor</Name>
				<Source><![CDATA[
    private boolean validateVendor()
    {
        boolean ok = true;

        if (vendor.VendVendorCollaborationType == VendVendorCollaborationType::Disabled)
        {
            ok = checkFailed("@SCM:VendorCollaborationIsNotEnabled");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>PurchaseOrderResponseManager</c> and initializes it with the passed in data contract.
    /// </summary>
    /// <param name = "_contract">Data contract carrying the information about the purchase order response.</param>
    /// <returns>Instance of <c>PurchaseOrderResponseManager</c>.</returns>
    public static PurchaseOrderResponseService newFromContract(PurchaseOrderResponseContract _contract)
    {
        PurchaseOrderResponseService manager = PurchaseOrderResponseService::construct();

        if (!_contract)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        manager.init(_contract);

        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected PurchaseOrderResponseContract init(PurchaseOrderResponseContract _contract = contract)
    {
        contract = _contract;

        responseVersion =
            PurchaseOrderResponseVersion::find(contract.parmResponseVersionRecId(), true);

        purchTableVersion = PurchTableVersion::find(responseVersion.PurchTableVersion);

        vendor            = VendTable::find(PurchTable::find(purchTableVersion.PurchId).OrderAccount);
        purchTable        = PurchTable::find(purchTableVersion.PurchId);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideInternalMessagesFromExternalUser</Name>
				<Source><![CDATA[
    private void hideInternalMessagesFromExternalUser()
    {
        infolog.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PurchaseOrderResponseService construct()
    {
        return new PurchaseOrderResponseService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResponse</Name>
				<Source><![CDATA[
    protected void createResponse()
    {
        ttsbegin;

        if (responseVersion)
        {
            responseVersion.ResponseNote      = contract.parmPurchaseOrderResponseNote();
            responseVersion.RespondingPerson  = DirPersonUser::current().PersonParty;
            responseVersion.ResponseDateTime  = DateTimeUtil::utcNow();
            responseVersion.ResponseState     = contract.parmPurchaseOrderResponseState();
            responseVersion.PurchTableVersion = purchTableVersion.RecId;
            responseVersion.update();
            responseVersion.updatePurchaseOrderResponseLines();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private PurchVendorPortalInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchVendorPortalInstrumentationLogger::createLogger(classStr(PurchaseOrderResponseService));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>