<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecutionDetourFieldsAutoPopulationHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecutionDetourFieldsAutoPopulationHandler</c> class is used to auto populate field values between main and detour session.
/// </summary>
final internal class WHSWorkExecutionDetourFieldsAutoPopulationHandler
{
    #WHSRF
    #WHSWorkExecuteControlElements

    private WHSMenuItemName mainSessionMenuItemName;
    private WHSMenuItemName detourSessionMenuItemName;
    private WHSMobileAppStepId mainSessionStepId;
    private WHSMobileAppStepId currentStepId;
    private WHSMobileAppFlowStepDetourFieldDirection direction;
    private container formContainer;
    private container changedFields;
    private container submittedFields;
    private boolean hasChanged;
    private boolean autoSubmit;

    private boolean populatedFieldsFlight;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSWorkExecutionDetourFieldsAutoPopulationHandler construct(WHSMenuItemName _mainSessionMenuItemName,
                                                                                WHSMenuItemName _detourSessionMenuItemName,
                                                                                WHSMobileAppStepId _mainSessionStepId,
                                                                                WHSMobileAppStepId _currentStepId,
                                                                                WHSMobileAppFlowStepDetourFieldDirection _direction, 
                                                                                container _formContainer,
                                                                                container _submittedFields = conNull(),
                                                                                container _changedFields = conNull())
    {
        var handler = new WHSWorkExecutionDetourFieldsAutoPopulationHandler();
        handler.mainSessionMenuItemName = _mainSessionMenuItemName;
        handler.detourSessionMenuItemName = _detourSessionMenuItemName;
        handler.mainSessionStepId = _mainSessionStepId;
        handler.currentStepId = _currentStepId;
        handler.direction = _direction;
        handler.formContainer = _formContainer;
        handler.submittedFields = _submittedFields;
        handler.populatedFieldsFlight = WHSRunDetourAutoSubmitProcessPopulatedFieldsFlight::instance().isEnabled();
        handler.changedFields = _changedFields;

        return handler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container populateFields(container _formContainer)
    {
        Map fieldsSetup = this.getPopulationFields();
        if (fieldsSetup.empty())
        {
            if (populatedFieldsFlight)
            {
                return [_formContainer, false, false, submittedFields, changedFields];
            }
            else
            {
                return [_formContainer, false, false, submittedFields];
            }
        }

        var mainFlowProvider = WHSMobileAppDetourFlowAvailableFieldsProvider::getProvider(mainSessionMenuItemName);
        var detourFlowProvider = WHSMobileAppDetourFlowAvailableFieldsProvider::getProvider(detourSessionMenuItemName);
        var extractor = WHSMobileAppStepFieldDataExtractor::newFromStepId(currentStepId);
        extractor.setCopyFromFlowFieldProvider(direction == WHSMobileAppFlowStepDetourFieldDirection::FromMainToDetour ? mainFlowProvider : detourFlowProvider);

        MapEnumerator mapEnumerator = extractor.extract(fieldsSetup.keySet(), formContainer).getEnumerator();
        Map keyValueMap = new Map(Types::Integer, Types::Container);
        while (mapEnumerator.moveNext())
        {
            container targetFieldAndAutoSubmit = fieldsSetup.lookup(mapEnumerator.currentKey());
            keyValueMap.add(conPeek(targetFieldAndAutoSubmit, 1), [mapEnumerator.currentValue(), mapEnumerator.currentKey(), conPeek(targetFieldAndAutoSubmit, 2)]);
        }

        if (keyValueMap.elements() > 0)
        {
            var pasteInProvider = direction == WHSMobileAppFlowStepDetourFieldDirection::FromMainToDetour ? detourFlowProvider : mainFlowProvider;

            int len = conLen(_formContainer);
            for (int i = #FieldControlStartLoc; i <= len; ++i)
            {
                _formContainer = this.autoPopulate(_formContainer, i, keyValueMap, pasteInProvider);
            }
        }
        if (populatedFieldsFlight)
        {
            return [_formContainer, hasChanged, autoSubmit, submittedFields, changedFields];
        }
        else
        {
            return [_formContainer, hasChanged, autoSubmit, submittedFields];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPopulate</Name>
				<Source><![CDATA[
    private container autoPopulate(container _formContainer, int _position, Map _fieldValues, WHSMobileAppDetourFlowAvailableFieldsProvider _pasteInFlowFieldProvider)
    {
        container controlCon = conPeek(_formContainer, _position);

        boolean canAutoPopulate = any2Str(conPeek(controlCon, #enabled)) == '1';
        str controlType = conPeek(controlCon, #controlType);
        canAutoPopulate = canAutoPopulate && controlType != #RFLabel;
        if (canAutoPopulate)
        {
            var fieldId = _pasteInFlowFieldProvider.getPasteInFieldIdFromControlOrButton(controlCon);
            if (_fieldValues.exists(fieldId))
            {
                str oldValue = conPeek(controlCon, #data);

                str newValue;
                int sourceField;
                boolean autoSubmitLocal;
                [newValue, sourceField, autoSubmitLocal] = _fieldValues.lookup(fieldId);

                if (newValue != oldValue)
                {
                    if (conFind(changedFields, sourceField) == 0
                        || !populatedFieldsFlight)
                    {
                        controlCon = conPoke(controlCon, #data, newValue);
                        _formContainer = conPoke(_formContainer, _position, controlCon);
                        hasChanged = true;

                        if (sourceField)
                        {
                            changedFields += [sourceField];
                        }
                    }
                }
                if (!autoSubmit && autoSubmitLocal && conFind(submittedFields, sourceField) == 0)
                {
                    autoSubmit = true;
                    if (controlType != #RFButton && controlType != #RFDetourButton)
                    {
                        _fieldValues.add(extendedTypeNum(ProcessGuideSubmitPageType), [#DataButtonClicked, 0, false]); // Populate OK button
                    }
                    submittedFields += [sourceField]; // Auto-submit each field only once to avoid loops
                }
            }
        }

        return _formContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPopulationFields</Name>
				<Source><![CDATA[
    private Map getPopulationFields()
    {
        Map fieldsSetup = new Map(Types::Integer, Types::Container);

        WHSMobileAppFlowStep flowStep;
        WHSMobileAppFlowStepDetour flowStepDetour;
        WHSMobileAppFlowStepDetourFieldSetup detourFieldsSetup;

        while select * from detourFieldsSetup
            where detourFieldsSetup.Direction == direction
            exists join flowStepDetour
                where flowStepDetour.RecId == detourFieldsSetup.MobileAppFlowStepDetour
                    && flowStepDetour.MenuItemName == detourSessionMenuItemName
            exists join flowStep
                where flowStep.RecId == flowStepDetour.MobileAppFlowStep
                    && flowStep.MenuItemName == mainSessionMenuItemName
                    && flowStep.StepId == mainSessionStepId
        {
            if (direction == WHSMobileAppFlowStepDetourFieldDirection::FromMainToDetour)
            {            
                fieldsSetup.insert(detourFieldsSetup.MainField,   [detourFieldsSetup.DetourField, detourFieldsSetup.AutoSubmit == NoYes::Yes]);
            }
            else
            {
                fieldsSetup.insert(detourFieldsSetup.DetourField, [detourFieldsSetup.MainField,   detourFieldsSetup.AutoSubmit == NoYes::Yes]);
            }
        }

        return fieldsSetup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>