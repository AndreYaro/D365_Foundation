<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInquiryDialogHelper_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a help class for all ledger inquiry classes.
/// </summary>
class LedgerInquiryDialogHelper_CN
{
    DialogField     dialogFieldFiscalYear;
    DialogField     dialogFieldFiscalPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fiscalCalendarPeriodLookUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the look-up interaction for the individual fiscal calendar period lookup controls.
    /// </summary>
    /// <param name="_formStringControl">
    /// The <c>FormStringControl</c> enumeration value that triggers this event.
    /// </param>
    /// <returns>
    /// The number of the day in the month.
    /// </returns>
    public boolean fiscalCalendarPeriodLookUp(FormStringControl _formStringControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   lookupQuery;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        boolean                 isValid;
        FiscalCalendarYear      fiscalCalendarYear;

        isValid = true;

        if (dialogFieldFiscalYear.value())
        {
            sysTableLookup = SysTableLookup::newParameters(
                tableNum(FiscalCalendarPeriod),
                _formStringControl,
                true);
            lookupQuery = new Query();
            sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Name));
            sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, StartDate));
            sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, EndDate));

            queryBuildDataSource = lookupQuery.addDataSource(tableNum(FiscalCalendarPeriod));

            queryBuildRange     = queryBuildDataSource.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendarYear));
            fiscalCalendarYear  = FiscalCalendarYear::findByCalendarYearName(
                Ledger::fiscalCalendar(CompanyInfo::current()),
                dialogFieldFiscalYear.value());
            queryBuildRange.value(queryValue(fiscalCalendarYear.RecId));

            queryBuildRange = queryBuildDataSource.addRange(fieldNum(FiscalCalendarPeriod, Type));
            queryBuildRange.value(queryValue(FiscalPeriodType::Operating));

            sysTableLookup.parmQuery(lookupQuery);
            sysTableLookup.performFormLookup();
        }
        else
        {
            // Please choose a value for Fiscal year first
            isValid = checkFailed(strFmt("@GLS221852", "@SYS54380"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDialogFieldFiscalPeriod</Name>
				<Source><![CDATA[
        public DialogField parmDialogFieldFiscalPeriod(DialogField _dialogFieldFiscalPeriod = dialogFieldFiscalPeriod)
    {
        dialogFieldFiscalPeriod = _dialogFieldFiscalPeriod;

        return dialogFieldFiscalPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDialogFieldFiscalYear</Name>
				<Source><![CDATA[
        public DialogField parmDialogFieldFiscalYear(DialogField _dialogFieldFiscalYear = dialogFieldFiscalYear)
    {
        dialogFieldFiscalYear = _dialogFieldFiscalYear;

        return dialogFieldFiscalYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodNameModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the modified method for the dialogFieldPeriod
    /// </summary>
    /// <param name="_formStringControl">
    /// Form string control of current dialog field.
    /// </param>
    /// <returns>
    /// A boolean value indicates whether modified successfully.
    /// </returns>
    public boolean periodNameModified(FormStringControl _formStringControl)
    {
        boolean             isValid = true;
        FiscalCalendarYear  fiscalCalendarYear;

        if (_formStringControl.valueStr())
        {
            fiscalCalendarYear = fiscalCalendarYear::findByCalendarYearName(
                FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current())).RecId,
                dialogFieldFiscalYear.value());

            isValid = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYear.RecId, _formStringControl.valueStr()).RecId ? true : false;
        }

        if (!isValid)
        {
            isValid = checkFailed(
                strFmt(
                    FiscalCalendarPeriod::txtNotExistByCalendarPeriod(),
                    FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current())).CalendarId,
                    dialogFieldFiscalYear.value(),
                    _formStringControl.valueStr()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearNameModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the modified method for the dialogFieldYear
    /// </summary>
    /// <param name="_formStringControl">
    /// Form string control of current dialog field.
    /// </param>
    /// <returns>
    /// True
    /// </returns>
    public boolean yearNameModified(FormStringControl _formStringControl)
    {
        boolean isValid = true;

        if (dialogFieldFiscalYear.value())
        {
            isValid = FiscalCalendarYear::existByCalendarYearName(
                Ledger::fiscalCalendar(CompanyInfo::current()),
                _formStringControl.valueStr());
        }

        if (!isValid)
        {
            isValid = checkFailed(
                strFmt(
                    FiscalCalendarYear::txtNotExistByCalendarYear(),
                    FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current())).CalendarId,
                    _formStringControl.valueStr()));
        }
        else
        {
            dialogFieldFiscalPeriod.value('');
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueByDimensionLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension based on the specified the ledger dimension and dimension display layout.
    /// </summary>
    /// <param name = "_ledgerDimension">The ledger dimension that used in the voucher transaction</param>
    /// <param name = "_dimensionDisplayLayout">The dimension display layout based which the dimensions will be printed</param>
    /// <param name = "_dimensionDisplayLayout">Indicates if the main account is excluded in the returned dimension value</param>
    /// <returns>The dimension after formated.</returns>
    public static DimensionDisplayValue getDimensionValueByDimensionLayout(
        LedgerDimensionAccount      _ledgerDimension,
        DimensionDisplayLayout_CN   _dimensionDisplayLayout,
        boolean                     _excludeMainAccount = true)
    {
        DimensionDisplayValue dimensionDisplayValueByLayout;

        DimensionAttributeValueCombination dimensionCombination = DimensionAttributeValueCombination::find(_ledgerDimension);
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(dimensionCombination.AccountStructure);

        str delimiter = DimensionParameters::getDimensionSegmentDelimiter();

        dimensionHierarchyLevelCollection.initializeEnumerator();

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttributeRecId currentDimensionAttributeRecId = dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            if (_excludeMainAccount && currentDimensionAttributeRecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
            {
                continue;
            }

            DimensionAttribute dimensionAttribute = DimensionAttribute::find(currentDimensionAttributeRecId);
            RecId dimensionKey = dimensionCombination.(DimensionAttributeValueCombination::getDimensionKeyFieldId(dimensionAttribute.Name));
            DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, dimensionKey);

            switch (_dimensionDisplayLayout)
            {
                case DimensionDisplayLayout_CN::OnlyValue:
                    dimensionDisplayValueByLayout += dimensionDisplayValueByLayout == '' ? dimensionAttributeValue.getValue() : delimiter + dimensionAttributeValue.getValue();
                    break;
                case DimensionDisplayLayout_CN::OnlyName:
                    dimensionDisplayValueByLayout += dimensionDisplayValueByLayout == '' ? dimensionAttributeValue.getName() : delimiter + dimensionAttributeValue.getName();
                    break;
                case DimensionDisplayLayout_CN::ValueAndName:
                    dimensionDisplayValueByLayout += dimensionDisplayValueByLayout == '' ? dimensionAttributeValue.getValue() : delimiter + dimensionAttributeValue.getValue();
                    dimensionDisplayValueByLayout += delimiter + dimensionAttributeValue.getName();
                    break;
            }
        }

        return dimensionDisplayValueByLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryAccountAndNameFromLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets summary account and name based on the specified the ledger dimension.
    /// </summary>
    /// <param name = "_ledgerDimension">The ledger dimension that used in the voucher transaction</param>
    /// <param name = "_dimensions">A container that indicates which dimension will be contained in summary account.</param>
    /// <returns>A container that contains summary account and summary account name</returns>
    public static container getSummaryAccountAndNameFromLedgerDimension(LedgerDimensionAccount _ledgerDimension, container _dimensions)
    {
        DimensionDisplayValue summaryAccount;
        DimensionDisplayValue summaryAccountName;

        DimensionAttributeValueCombination dimensionCombination = DimensionAttributeValueCombination::find(_ledgerDimension);
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(dimensionCombination.AccountStructure);

        str delimiter = DimensionParameters::getDimensionSegmentDelimiter();

        dimensionHierarchyLevelCollection.initializeEnumerator();

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttributeRecId currentDimensionAttributeRecId = dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            if (conFind(_dimensions, currentDimensionAttributeRecId))
            {
                DimensionAttribute dimensionAttribute = DimensionAttribute::find(currentDimensionAttributeRecId);
                RecId dimensionKey = dimensionCombination.(DimensionAttributeValueCombination::getDimensionKeyFieldId(dimensionAttribute.Name));
                DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, dimensionKey);

                summaryAccount += summaryAccount == '' ? dimensionAttributeValue.getValue() : delimiter + dimensionAttributeValue.getValue();
                summaryAccountName += summaryAccountName == '' ? dimensionAttributeValue.getName() : delimiter + dimensionAttributeValue.getName();
            }
            else
            {
                summaryAccount += delimiter;
                summaryAccountName += delimiter;
            }
        }

        return [summaryAccount, summaryAccountName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionNameValueListFromLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets an instance of the <c>DimensionNameValueListContract</c> class from the specified
    ///   ledger dimension for the specified dimensions.
    /// </summary>
    /// <param name = "_dimensionCombination">
    ///   The ledger dimension that used in the voucher transaction
    /// </param>
    /// <param name = "_dimensions">
    ///   A container that contains the dimenions.
    /// </param>
    /// <returns>
    ///   An instance of the <c>DimensionNameValueListContract</c> class.
    /// </returns>
    public static DimensionNameValueListContract getDimensionNameValueListFromLedgerDimension(LedgerDimensionAccount _ledgerDimension, container _dimensions)
    {
        DimensionNameValueListContract nameValueList = new DimensionNameValueListContract();

        DimensionAttributeValueCombination dimensionCombination = DimensionAttributeValueCombination::find(_ledgerDimension);
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(dimensionCombination.AccountStructure);

        dimensionHierarchyLevelCollection.initializeEnumerator();

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttributeRecId currentDimensionAttributeRecId = dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            if (conFind(_dimensions, currentDimensionAttributeRecId))
            {
                DimensionAttribute dimensionAttribute = DimensionAttribute::find(currentDimensionAttributeRecId);
                Name dimensionAttributeName = dimensionAttribute.Name;
                DimensionDisplayValue dimensionDisplayValue = dimensionCombination.(DimensionAttributeValueCombination::getDimensionValueFieldId(dimensionAttributeName));

                nameValueList.parmValues().addEnd(DimensionAttributeValueContract::construct(dimensionAttributeName, dimensionDisplayValue));
            }
        }

        return nameValueList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>