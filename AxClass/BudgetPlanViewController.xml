<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanViewController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanViewController</c> class is the controller class for the
/// <c>BudgetPlanHierarchyView</c> form.
/// </summary>
public class BudgetPlanViewController extends HierarchyDesignerBase
{
    BudgetPlanViewUIInterface budgetPlanViewUIInterface;
    Map                       hierarchyMap;
    BudgetPlanNode            rootNode;
    BudgetPlanNode            selectedNode;
    BudgetPlanHeaderRecId     firstNodeId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record IDs of the children of a node at a specified depth.
    /// </summary>
    /// <param name="_id">
    /// The record ID of the node for which to get the child nodes.
    /// </param>
    /// <param name="_depth">
    /// The depth at which the child nodes are taken from.
    /// </param>
    /// <returns>
    /// An array of child nodes record ID.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public Array getDescendants(int64 _id, int _depth)
    {
        BudgetPlanNode currentNode;
        BudgetPlanNode childNode;
        SetEnumerator  childBudgetPlansEnumerator;
        Array          childNodes = new Array(Types::Int64);

        // If specified Id already exists in the map.
        if (hierarchyMap.exists(_id))
        {
            // Finding the specified node.
            currentNode = hierarchyMap.lookup(_id);
            childNodes  = currentNode.childNodes();
        }
        else
        {
            currentNode = this.insertHierarchyMap(_id);
        }

        // Determine whether the child node already loaded.
        if (currentNode && !currentNode.parmIsHierarchyLoaded())
        {
            childBudgetPlansEnumerator = BudgetPlan::getChildBudgetPlans(currentNode.parmBudgetPlanHeaderRecId()).getEnumerator();

            while (childBudgetPlansEnumerator.moveNext())
            {
                currentNode.addChildNode(childBudgetPlansEnumerator.current());

                childNode = this.insertHierarchyMap(childBudgetPlansEnumerator.current());
            }

            // Setting the load descendant to true because child nodes have been loaded.
            currentNode.parmIsHierarchyLoaded(true);
            childNodes  = currentNode.childNodes();
        }

        return childNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHierarchyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new budget plan node in the Hierarchy map.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">
    /// The RecId of the <c>BudgetPlanHeader</c> buffer.
    /// </param>
    /// <returns>
    /// The object of the Budget plan node.
    /// </returns>
    public BudgetPlanNode insertHierarchyMap(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanNode   budgetPlanNode;
        BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        if (budgetPlanHeader)
        {
            // Creating the new node.
            budgetPlanNode = BudgetPlanNode::newFromParameters(budgetPlanHeader);

            // Adding the current node in the hierarchy.
            hierarchyMap.insert(budgetPlanNode.parmBudgetPlanHeaderRecId(), budgetPlanNode);
        }

        return budgetPlanNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>Array</c> which contains number of menu item.
    /// </summary>
    /// <param name="nodeID">
    /// The record ID of the node type.
    /// </param>
    /// <returns>
    /// An <c>Array</c> which contains number of menu item.
    /// </returns>
    public Array getMenuItemsEnabled(int64 nodeID)
    {
        Array ret;

        ret = super(nodeID);

        // Adding one menuitem.
        ret.value(1,1);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the text which should be display on provided menu item.
    /// </summary>
    /// <param name="menuItemNumber">
    /// The menu item which text need to shown.
    /// </param>
    /// <returns>
    /// The text of menu item.
    /// </returns>
    public str getMenuItemText(int menuItemNumber)
    {
        str ret;

        ret = super(menuItemNumber);
        ret = "@GLS150259";

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name that is displayed for the node.
    /// </summary>
    /// <param name="_nodeId">
    /// The record ID of the node for which to get the name.
    /// </param>
    /// <returns>
    /// The name of the node.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public str getNodeName(int64 _nodeId)
    {
        BudgetPlanNode budgetPlanNode;
        BudgetPlanName budgetPlanName;

        if (hierarchyMap.exists(_nodeId))
        {
            budgetPlanNode = hierarchyMap.lookup(_nodeId);
            budgetPlanName = budgetPlanNode.parmNodeName();
        }

        return budgetPlanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypeImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an image to be displayed for the specified node type.
    /// </summary>
    /// <param name="_nodeTypeId">
    /// The record ID of the node type.
    /// </param>
    /// <returns>
    /// An <c>Array</c> that represents the image.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public static Array getNodeTypeImage(int _nodeTypeId)
    {
        #ResAppl

        Array array = new Array(Types::Integer);

        array = OMImageResourceSerializer::getSerializedImageResourceByID(#ImageLedgerBudget);

        return array;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retruns the number of menu item which should be displayed when user right click on the node.
    /// </summary>
    /// <returns>
    /// The number of menu item which should be displayed when user right click on the node.
    /// </returns>
    public int getNumberOfMenuItems()
    {
        int ret;

        ret = super();

        ret = 1;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record Id of a nodes parent node.
    /// </summary>
    /// <param name="_id">
    /// The record ID of the node for which to get the parent node.
    /// </param>
    /// <returns>
    /// The record ID of the parent node.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public int64 getParentId(int64 _id)
    {
        BudgetPlanNode        node;
        BudgetPlanHeaderRecId budgetPlanHeaderRecId;

        if (hierarchyMap.exists(_id))
        {
            node = hierarchyMap.lookup(_id);

            if (node)
            {
                budgetPlanHeaderRecId = node.parmParentNodeId();
            }
        }

        return budgetPlanHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the root node.
    /// </summary>
    /// <returns>
    /// The record ID of the root node.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public int64 getRootId()
    {
        return firstNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller and loads the budget plan node.
    /// </summary>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> buffer contains the currently selected record against which hierarchy need to show.
    /// </param>
    public void init(BudgetPlanHeader _budgetPlanHeader)
    {
        BudgetPlanNode        node;
        BudgetPlanHeaderRecId budgetPlanHeaderRecId = _budgetPlanHeader.RecId;

        hierarchyMap = new Map(Types::Int64, Types::Class);

        do
        {
            node = this.insertHierarchyMap(budgetPlanHeaderRecId);

            if (!selectedNode)
            {
                selectedNode = node;
            }

            if (!rootNode)
            {
                rootNode = node;
            }

            if (!firstNodeId)
            {
                firstNodeId = budgetPlanHeaderRecId;
            }

            budgetPlanHeaderRecId = BudgetPlanHeader::find(budgetPlanHeaderRecId).ParentBudgetPlanHeader;
        } while (budgetPlanHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeMenuItemAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the action on the click of provided menu item.
    /// </summary>
    /// <param name="nodeID">
    /// The record ID of the node type.
    /// </param>
    /// <param name="iMenuItemNumber">
    /// The menu item number.
    /// </param>
    /// <param name="iSubMenuItemNumber">
    /// The sub menu item on which click operation is perform.
    /// </param>
    public void invokeMenuItemAction(int64 nodeID, int iMenuItemNumber, int iSubMenuItemNumber)
    {
        super(nodeID, iMenuItemNumber, iSubMenuItemNumber);

        this.reportNodeDoubleClick(nodeID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanViewUIInterface</Name>
				<Source><![CDATA[
    public BudgetPlanViewUIInterface parmBudgetPlanViewUIInterface(BudgetPlanViewUIInterface _budgetPlanViewUIInterface = budgetPlanViewUIInterface)
    {
        budgetPlanViewUIInterface = _budgetPlanViewUIInterface;

        return budgetPlanViewUIInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFatalError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports that a fatal error has occurred in the controller.
    /// </summary>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public void reportFatalError()
    {
        error("@SYS107505");
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFocusedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports that a node is in focus.
    /// </summary>
    /// <param name="_id">
    /// The record ID of the focused node.
    /// </param>
    public void reportFocusedNode(int64 _id)
    {
        this.reportSelectedNode(_id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportNodeDoubleClick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports that a node has been double clicked on.
    /// </summary>
    /// <param name="_nodeId">
    /// The record ID of the clicked node.
    /// </param>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public void reportNodeDoubleClick(int64 _nodeId)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (!selectedNode || selectedNode.parmBudgetPlanHeaderRecId() != _nodeId)
        {
            this.reportSelectedNode(_nodeId);
        }

        if (_nodeId)
        {
            budgetPlanHeader = BudgetPlanHeader::find(selectedNode.parmBudgetPlanHeaderRecId());
            budgetPlanViewUIInterface.showRecordForm(budgetPlanHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the selected node and calls the hierarchy view form method to set the info part.
    /// </summary>
    /// <param name="_id">
    /// The record ID of the node to select.
    /// </param>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public void reportSelectedNode(int64 _id)
    {
        BudgetPlanNode   node;
        BudgetPlanHeader budgetPlanHeader;

        if (selectedNode && selectedNode.parmBudgetPlanHeaderRecId() == _id)
        {
            // The same node is selected again so no need to do anything
            return;
        }

        if (hierarchyMap.exists(_id))
        {
            node = hierarchyMap.lookup(_id);
            node.parmBudgetPlanHeaderRecId();

            // Finding the record by the help of record Id.
            budgetPlanHeader = BudgetPlanHeader::find(_id);

            // Save current active node
            selectedNode = node;

            // Inform the budgetPlanViewUIInterface to refresh the active record buffers
            budgetPlanViewUIInterface.activeRecordChanged(budgetPlanHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BudgetPlanViewController</c> class.
    /// </summary>
    /// <param name="_budgetPlanViewUIInterface">
    /// An instance of the UI interface.
    /// </param>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record from which to initialize the <c>BudgetPlanViewController</c> class instance.
    /// </param>
    /// <returns>
    /// A new instance of the <c>BudgetPlanViewController</c> class.
    /// </returns>
    public static BudgetPlanViewController newFromParameters(BudgetPlanViewUIInterface _budgetPlanViewUIInterface, BudgetPlanHeader _budgetPlanHeader)
    {
        BudgetPlanViewController controller = new BudgetPlanViewController();

        controller.parmBudgetPlanViewUIInterface(_budgetPlanViewUIInterface);

        controller.init(_budgetPlanHeader);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeCustomProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a non-breaking space to the properties value since there is no additional info to display
    /// </summary>
    /// <param name = "id">Id of the node (not used)</param>
    /// <returns>Array of strings for the custom properties</returns>
    public Array getNodeCustomProperties(int64 id)
    {
        Array properties = new Array(Types::String);
        properties.value(1, " ");
        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanLineHierarchyViewSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts summarize data of budget plan in the <c>BudgetPlanLineHierarchyViewSummaryTmp</c> table.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">
    /// The RecId of the <c>BudgetPlanHeader</c> buffer.
    /// </param>
    /// <param name = "_estimateType">
    /// The value of the <c>BudgetPlanEstimateType</c> field.
    /// </param>
    /// <returns>
    /// The buffer of the <c>BudgetPlanLineHierarchyViewSummaryTmp</c> table.
    /// </returns>
    public static BudgetPlanLineHierarchyViewSummaryTmp insertBudgetPlanLineHierarchyViewSummaryTmp(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, BudgetPlanEstimateType _estimateType)
    {
        BudgetPlanLine                        budgetPlanLineLocal;
        BudgetPlanLineHierarchyViewSummaryTmp budgetPlanLineHierarchyViewSummaryLocal;

        insert_recordset budgetPlanLineHierarchyViewSummaryLocal(
            AccountingCurrencyAmount,
            Quantity,
            BudgetPlanScenario,
            BudgetClass,
            BudgetPlanHeader)
        select
            sum(AccountingCurrencyAmount),
            sum(Quantity),
            BudgetPlanScenario,
            BudgetClass,
            BudgetPlanHeader
        from budgetPlanLineLocal
            group by budgetPlanLineLocal.BudgetPlanScenario,
                     budgetPlanLineLocal.BudgetClass,
                     budgetPlanLineLocal.BudgetPlanHeader
                where budgetPlanLineLocal.BudgetPlanHeader == _budgetPlanHeaderRecId
                    && budgetPlanLineLocal.EstimateType == _estimateType;

        // Reversing the sign on revenue type lines
        update_recordset budgetPlanLineHierarchyViewSummaryLocal
            setting AccountingCurrencyAmount = budgetPlanLineHierarchyViewSummaryLocal.AccountingCurrencyAmount * -1
            where budgetPlanLineHierarchyViewSummaryLocal.BudgetClass == BudgetClass::Revenue;

        return budgetPlanLineHierarchyViewSummaryLocal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>