<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableFormJournalButtonState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableFormJournalButtonState</c> class handles the state of the journal buttons on the <c>ReturnTable></c> form and the <c>SalesTable</c> form.
/// </summary>
class SalesTableFormJournalButtonState
{
    private FormRun formRun;

    protected boolean enableConfirmationButton;
    protected boolean enablePickingListButton;
    protected boolean enablePickingListRegistrateButton;
    protected boolean enablePackingSlipButton;
    protected boolean enableInvoiceButton;
    protected boolean enableProjectPackingSlipButton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>button</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a button with a given name.
    /// </summary>
    /// <param name = "_name">The name of the button.</param>
    /// <returns>The button control, or null if not found.</returns>
    private FormControl button(FormControlName _name)
    {
        int controlId = formRun.controlId(_name);
        FormControl control = formRun.control(controlId);
        return control;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enable property on a button.
    /// </summary>
    /// <param name = "_name">The name of the button.</param>
    /// <param name = "_isEnabled">The enabled state.</param>
    protected void enableButton(FormControlName _name, boolean _isEnabled)
    {
        FormControl control = this.button(_name);
        if (control)
        {
            control.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property on a button.
    /// </summary>
    /// <param name = "_name">The name of the button.</param>
    /// <param name = "_isVisible">The visible state.</param>
    protected void showButton(FormControlName _name, boolean _isVisible)
    {
        FormControl control = this.button(_name);
        if (control)
        {
            control.visible(_isVisible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all buttons are enabled.
    /// </summary>
    /// <returns>true if all buttons are enabled; otherwise, false.</returns>
    public boolean isAllEnabled()
    {
        return 
            enableConfirmationButton &&
            enablePickingListButton &&
            enablePickingListRegistrateButton &&
            enablePackingSlipButton &&
            enableInvoiceButton &&
            enableProjectPackingSlipButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCheckIfUpdateContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the contract determining with current state.
    /// </summary>
    /// <param name = "_contract">The contract to initialize.</param>
    public void initializeCheckIfUpdateContract(SalesTableCheckIfUpdateContract _contract)
    {
        _contract.parmCheckConfirmation(!enableConfirmationButton);
        _contract.parmCheckPickingList(!enablePickingListButton);
        _contract.parmCheckPackingSlip(!enablePackingSlipButton);
        _contract.parmCheckProjectPackingSlip(!enableProjectPackingSlipButton);
        _contract.parmCheckPickingListRegistration(!enablePickingListRegistrateButton);
        _contract.parmCheckInvoice(!enableInvoiceButton);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseCanBeUpdatedContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the contract to determine what states are allowed.
    /// </summary>
    /// <param name = "_canBeUpdatedContract">The contract to parse.</param>
    public void parseCanBeUpdatedContract(SalesTableCanBeUpdatedContract _canBeUpdatedContract)
    {
        if (!enableConfirmationButton)
        {
            enableConfirmationButton = _canBeUpdatedContract.parmCanConfirmationBeUpdated();
        }

        if (!enablePickingListButton)
        {
            enablePickingListButton = _canBeUpdatedContract.parmCanPickingListBeUpdated();
        }

        if (!enablePickingListRegistrateButton)
        {
            enablePickingListRegistrateButton = _canBeUpdatedContract.parmCanPickingListBeRegistrated();
        }

        if (!enablePackingSlipButton)
        {
            enablePackingSlipButton = _canBeUpdatedContract.parmCanPackingSlipBeUpdated();
        }

        if (!enableInvoiceButton)
        {
            enableInvoiceButton = _canBeUpdatedContract.parmCanInvoiceBeUpdated();
        }

        if (!enableProjectPackingSlipButton)
        {
            enableProjectPackingSlipButton = _canBeUpdatedContract.parmCanProjectPackingSlipBeUpdated();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the state to the buttons.
    /// </summary>
    public void applyState()
    {
        switch (this.parmFormRun().name())
        {
            case formStr(SalesTable):
                this.enableButton(formControlStr(SalesTable, buttonUpdateConfirmation), enableConfirmationButton);
                this.enableButton(formControlStr(SalesTable, buttonProformaConfirmation), enableConfirmationButton);
                this.enableButton(formControlStr(SalesTable, buttonUpdatePickingList), enablePickingListButton);
                this.enableButton(formControlStr(SalesTable, buttonUpdatePickingListRegistrate), enablePickingListRegistrateButton);
                this.enableButton(formControlStr(SalesTable, buttonUpdatePackingSlip), enablePackingSlipButton);
                this.enableButton(formControlStr(SalesTable, buttonProformaPackingSlip), enablePackingSlipButton);
                this.enableButton(formControlStr(SalesTable, buttonUpdateInvoice), enableInvoiceButton);
                this.enableButton(formControlStr(SalesTable, buttonProformaInvoice), enableInvoiceButton);
                this.enableButton(formControlStr(SalesTable, buttonUpdateConfirm), enableConfirmationButton);
                break;

            case formStr(ReturnTable):
                this.enableButton(formControlStr(ReturnTable, buttonUpdatePackingSlip), enablePackingSlipButton);
                break;

            case formStr(SalesTableListPage):
                this.enableButton(formControlStr(SalesTableListPage, Generate), enableConfirmationButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonUpdateConfirmation), enableConfirmationButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonProformaConfirmation), enableConfirmationButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonUpdatePickingList), enablePickingListButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonUpdatePickingListRegistrate), enablePickingListRegistrateButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonUpdatePackingSlip), enablePackingSlipButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonProformaPackingSlip), enablePackingSlipButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonUpdateInvoice), enableInvoiceButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonProformaInvoice), enableInvoiceButton);
                this.enableButton(formControlStr(SalesTableListPage, buttonUpdateConfirm), enableConfirmationButton);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesTableFormJournalButtonState construct()
    {
        return new SalesTableFormJournalButtonState();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>