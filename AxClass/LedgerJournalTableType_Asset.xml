<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTableType_Asset</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalTableType_Asset</c> class is the derivative for the fixed assets journal type.
/// </summary>
/// <remarks>
///    This class provides business logic specific to the fixed assets journal type.
/// </remarks>
class LedgerJournalTableType_Asset extends LedgerJournalTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies a default value to the <c>JournalType</c> field.
    /// </summary>
    protected void defaultJournalType()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            this.defaultFieldValue(fieldnum(LedgerJournalTable, JournalType), LedgerJournalType::Assets);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalNameValidJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>LedgerJournalName</c> table buffer assigned to the
    ///    <c>LedgerJournalTable</c> is valid for the journal type.
    /// </summary>
    /// <returns>
    ///    true if the <c>LedgerJournalName</c> table buffer is valid; otherwise, false
    /// </returns>
    protected boolean isJournalNameValidJournalType()
    {
        boolean journalTypeIsValid;

        if (ledgerJournalName.RecId != 0)
        {
            journalTypeIsValid = (ledgerJournalName.JournalType == LedgerJournalType::Assets);
        }
        else
        {
            journalTypeIsValid =  false;
        }

        return journalTypeIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerJournalType_Asset</c> class by using the specified
    ///    operation and interaction context.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    An instance of the <c>LedgerJournalTable</c> table.
    /// </param>
    /// <param name="_operation">
    ///    An enumeration value that is used to determine which business logic should be executed.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that determines the context of the caller.
    /// </param>
    protected void new(LedgerJournalTable _ledgerJournalTable, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        Debug::assert(_operation == LedgerJournalOperation::Create);

        ledgerJournalTable = _ledgerJournalTable;
        operation = _operation;
        isInteractiveContext = _isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an initialized instance of the <c>LedgerJournalType_Assets</c> class with the specified
    ///    operation and interaction context.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    An instance of the <c>LedgerJournalTable</c> table that is used to track state for the instance
    ///    defaulting and validation logic is executed against.
    /// </param>
    /// <param name="_operation">
    ///    An enumeration used to determine which business logic should be executed.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that determines the caller context.
    /// </param>
    /// <returns>
    ///    A <c>LedgerJournalTableType</c>_Asset instance.
    /// </returns>
    public static LedgerJournalTableType_Asset construct(LedgerJournalTable _ledgerJournalTable, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        return new LedgerJournalTableType_Asset(_ledgerJournalTable, _operation, _isInteractiveContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>