<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesEditLinesForm_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesEditLinesForm_ApplicationSuite_Extension</c> class is an extension class which extends the <c>SalesEditLines</c> form.
/// </summary>
public static class SalesEditLinesForm_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SalesEditLines_TaxId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for company tax registration numbers.
    /// </summary>
    /// <param name = "_sender">The event sender.</param>
    /// <param name = "_e">The event arguments.</param>
    [FormControlEventHandler(formControlStr(SalesEditLines, TaxRegistration_TaxId), FormControlEventType::Lookup)]
    public static void SalesEditLines_TaxId_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        SalesParmTable salesParmTable = _sender.dataSourceObject().cursor() as SalesParmTable;

        if (salesParmTable)
        {
            if (CompanyTaxRegistrationEntityLookUpFlight::instance().isEnabled())
            {
                TaxInformation_IN::lookUpReferenceTaxRegistration(_sender, 0, CompanyInfo::find().RecId);
            }
            else
            {
                TaxInformation_IN::lookUpReferenceTaxRegistration(_sender);
            }

            FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;

            if (ce)
            {
                ce.CancelSuperCall();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesEditLines_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles initialization event of SalesEditLines form to control visibility of withholding tax button.
    /// </summary>
    /// <param name = "_sender">The event sender.</param>
    /// <param name = "_e">The event arguments.</param>
    [FormEventHandler(formStr(SalesEditLines), FormEventType::Initialized)]
    public static void SalesEditLines_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = false;
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            SalesFormLetter salesFormLetter = _sender.args().caller();
            if (salesFormLetter)
            {
                isVisible = salesFormLetter.documentStatus() == DocumentStatus::Invoice;
            }
        }
        _sender.design().controlName(formControlStr(SalesEditLines, WithholdTax_IN)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesEditLines_OnPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles initialization event of SalesEditLines form to control visibility of CFDI Period.
    /// </summary>
    /// <param name = "_sender">The event sender.</param>
    /// <param name = "_e">The event arguments.</param>
    [FormEventHandler(formStr(SalesEditLines), FormEventType::PostRun)]
    public static void SalesEditLines_OnPostRun(xFormRun _sender, FormEventArgs _e)
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            FormRun formRun = _sender;
            SalesParmTable salesParmTable = formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)).cursor() as SalesParmTable;
            boolean mustUseCFDIGlobalPeriod = CFDISharedLogic_MX::mustInitCFDIEInvoicePeriod(salesParmTable.CustAccount);
            formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)).object(fieldNum(SalesParmTable, CFDIEInvoicePeriod_MX)).visible(mustUseCFDIGlobalPeriod);
            formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)).object(fieldNum(SalesParmTable, CFDIEInvoicePeriod_MX)).mandatory(mustUseCFDIGlobalPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WithholdTax_IN_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles clicked event for withholding tax button.
    /// </summary>
    /// <param name = "_sender">The event sender.</param>
    /// <param name = "_e">The event arguments.</param>
    [FormControlEventHandler(formControlStr(SalesEditLines, WithholdTax_IN), FormControlEventType::Clicked)]
    public static void WithholdTax_IN_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            FormRun formRun = _sender.formRun();

            SalesParmTable salesParmTable = formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)).cursor() as SalesParmTable;
            SalesParmLine salesParmLine = formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmLine)).cursor() as SalesParmLine;
            SalesParmUpdate salesParmUpdate = formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmUpdate)).cursor() as SalesParmUpdate;

            SalesTotals_ParmTransInvoice::showWithholdTaxLine_IN(
                salesParmTable,
                salesParmLine,
                salesParmUpdate,
                formRun);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>