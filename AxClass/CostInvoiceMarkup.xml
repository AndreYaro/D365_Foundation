<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInvoiceMarkup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostInvoiceMarkup</c> class provides charges for the vendor invoice.
/// </summary>
public class CostInvoiceMarkup extends CostMarkupProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    private void load()
    {
        InventTransOrigin           inventTransOrigin;
        VendInvoiceJour             vendInvoiceJour;
        VendInvoiceTrans            vendInvoiceTrans;
        MarkupTable                 markupTable;
        MarkupTrans                 markupTrans;

        this.initMaps();

        if (inventTransId)
        {
            while select TableId from vendInvoiceJour
                where vendInvoiceJour.CostLedgerVoucher == voucher
                    && vendInvoiceJour.InvoiceDate == transDate
            join InventQty from vendInvoiceTrans
                where vendInvoiceTrans.InventTransId         == inventTransId
                    && vendInvoiceTrans.InvoiceDate          == transDate
                    && vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId
                    && vendInvoiceTrans.PurchID              == vendInvoiceJour.PurchId
                    && vendInvoiceTrans.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup
                    && vendInvoiceTrans.InternalInvoiceId    == vendInvoiceJour.InternalInvoiceId
            join markupTrans
                where markupTrans.TransTableId  == vendInvoiceTrans.TableId
                    && markupTrans.TransRecId    == vendInvoiceTrans.RecId
            join TableId from markupTable
                where (markupTable.ModuleType == markupTrans.ModuleType)
                    && markupTable.MarkupCode  == markupTrans.MarkupCode
                    && markupTable.CustType    == MarkupType::Item
            {
                CostEntrySource source = CostEntrySource::newCommon(markupTrans);

                remainingQuantityMap.insert(source, vendInvoiceTrans.InventQty);
                remainingAmountMap.insert(source, this.markupAmount(this.currencyExchangeHelper(markupTrans), markupTrans));
            }
        }
        else
        {
            while select TableId from inventTransOrigin
                where inventTransOrigin.RecId == inventTransOriginId
            join TableId from vendInvoiceJour
                where vendInvoiceJour.CostLedgerVoucher == voucher
                    && vendInvoiceJour.InvoiceDate == transDate
            join InventQty from vendInvoiceTrans
                where vendInvoiceTrans.InventTransId        == inventTransOrigin.InventTransId
                    && vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId
                    && vendInvoiceTrans.InvoiceDate          == vendInvoiceJour.InvoiceDate
                    && vendInvoiceTrans.PurchID              == vendInvoiceJour.PurchId
                    && vendInvoiceTrans.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup
                    && vendInvoiceTrans.InternalInvoiceId    == vendInvoiceJour.InternalInvoiceId
            join markupTrans
                where markupTrans.TransTableId  == vendInvoiceTrans.TableId
                    && markupTrans.TransRecId    == vendInvoiceTrans.RecId
            join TableId from markupTable
                where (markupTable.ModuleType == markupTrans.ModuleType)
                    && markupTable.MarkupCode  == markupTrans.MarkupCode
                    && markupTable.CustType    == MarkupType::Item
            {
                CostEntrySource source = CostEntrySource::newCommon(markupTrans);

                remainingQuantityMap.insert(source, vendInvoiceTrans.InventQty);
                remainingAmountMap.insert(source, this.markupAmount(this.currencyExchangeHelper(markupTrans), markupTrans));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostInvoiceMarkup construct()
    {
        return new CostInvoiceMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventoryEvent</Name>
				<Source><![CDATA[
    public static CostInvoiceMarkup newInventoryEvent(CostInventoryEvent _event)
    {
        CostInvoiceMarkup   invoiceMarkup;

        str key = int642str(_event.parmInventTransOriginId()) + '#' +
          _event.parmVoucher() + '#' +
          date2StrXpp(_event.parmTransDate());

        invoiceMarkup = SysTransactionScopeCache::get(classStr(CostInvoiceMarkup), key, invoiceMarkup);

        if (!invoiceMarkup)
        {
            invoiceMarkup = CostInvoiceMarkup::construct();
            invoiceMarkup.parmInventTransOriginId(_event.parmInventTransOriginId());
            invoiceMarkup.parmVoucher(_event.parmVoucher());
            invoiceMarkup.parmTransDate(_event.parmTransDate());
            if (_event.parmInventTransId())
            {
                invoiceMarkup.parmInventTransId(_event.parmInventTransId());
            }
            invoiceMarkup.load();

            SysTransactionScopeCache::set(classStr(CostInvoiceMarkup), key, invoiceMarkup);
        }

        return invoiceMarkup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>