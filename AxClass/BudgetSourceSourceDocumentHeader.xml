<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceSourceDocumentHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceSourceDocumentHeader</c> class is responsible for data management for a
///    collection of the <c>BudgetSource</c> records that are related to the <c>SourceDocumentLine</c>
///    records that belong to the <c>SourceDocumentHeader</c> record ID that is specified.
/// </summary>
public class BudgetSourceSourceDocumentHeader extends BudgetSourceCollectionIntegrator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBudgetSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetSource</c> records that are associated with the <c>SourceDocumentLine</c>
    ///    records that belong to the same specified <c>SourceDocument</c> record.
    /// </summary>
    /// <returns>
    ///    A set of IDs of the <c>BudgetSource</c> records that are associated with the
    ///    <c>SourceDocumentLine</c> records that belong to the same specified <c>SourceDocument</c> record.
    /// </returns>
    public Set findBudgetSourceIds()
    {
        SourceDocumentHeader    sourceDocumentHeader;
        SourceDocumentLine      sourceDocumentLine;
        BudgetSource            budgetSource;
        Set                     budgetSourceIds;

        budgetSourceIds = new Set(typeName2Type(extendedTypeStr(BudgetSourceRecId)));

        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        while select RecId from sourceDocumentHeader
            where sourceDocumentHeader.RecId == commonId
            join RecId from sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId &&
                sourceDocumentLine.ParentSourceDocumentLine == 0
            join RecId from budgetSource
            where budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine &&
                budgetSource.BudgetTransactionLine == 0 &&
                budgetSource.SourceDocumentLine == sourceDocumentLine.RecId &&
                budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                budgetSource.LedgerEntryJournalNumber == '' &&
                budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                budgetSource.LedgerEntryJournalLegalEntity == 0
        {
            budgetSourceIds.add(budgetSource.RecId);
        }

        return budgetSourceIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value that is associated with the specified <c>Common</c> record.
    /// </summary>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check that budget control is enabled on the primary
    /// ledger of the current legal entity before trying to get the <c>BudgetCheckResult</c> value;
    /// optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    /// <c>Common</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult budgetCheckResult;
        SourceDocumentHeader sourceDocumentHeader;
        tableId sourceRelationTypeToExclude;

        sourceDocumentHeader = SourceDocumentHeader::find(this.parmCommonId());

        if (sourceDocumentHeader.SourceRelationType == tableNum(PurchTable))
        {
            sourceRelationTypeToExclude = tableNum(PurchLine);
        }
        else if (sourceDocumentHeader.SourceRelationType == tableNum(VendInvoiceInfoTable))
        {
            sourceRelationTypeToExclude = tableNum(VendInvoiceInfoLine);
        }

        budgetCheckResult = this.getHeaderBudgetCheckResult(sourceRelationTypeToExclude, _doCheckLedgerBudgetControlEnabled);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the calculated <c>BudgetCheckResult</c> value for the <c>SourceDocument</c> record.
    /// </summary>
    /// <param name="_sourceRelationTypeToExclude">
    ///    The relation type of the <c>SourceDocumentLine</c> records that are associated with the
    ///    <c>SourceDocument</c> record, which have a <c>BudgetCheckResult</c> value that should be excluded
    ///    from the calculation.
    /// </param>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    ///    A Boolean value that indicates whether to check if budget control is enabled on the primary ledger of
    ///    the current legal entity prior to attempting to find the <c>BudgetCheckResult</c> value; optional.
    /// </param>
    /// <returns>
    ///    The <c>BudgetCheckResult</c> value of the <c>SourceDocument</c> record.
    /// </returns>
    /// <remarks>
    ///    This method calculates the maximum <c>BudgetCheckResult</c> value for the <c>SourceDocumentLine</c>
    ///    records that are associated with the <c>SourceDocument</c> record.
    /// </remarks>
    public BudgetCheckResult getHeaderBudgetCheckResult(tableId _sourceRelationTypeToExclude = 0, boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult   budgetCheckResult;
        BudgetSource        budgetSource;
        SourceDocumentLine  sourceDocumentLine;

        budgetCheckResult = BudgetCheckResult::NoCheck;

        if (commonId)
        {
            if (BudgetControlConfiguration::isControlConfigured() &&
                hasTableAccess(tableNum(BudgetSource)))
            {
                if (!_doCheckLedgerBudgetControlEnabled ||
                    Ledger::isLedgerBudgetControlEnabled())
                {
                    select maxof(CheckResult) from budgetSource
                        exists join sourceDocumentLine
                        where budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine &&
                            budgetSource.SourceDocumentLine == sourceDocumentLine.RecId &&
                            (!_sourceRelationTypeToExclude || sourceDocumentLine.SourceRelationType != _sourceRelationTypeToExclude) &&
                            sourceDocumentLine.ParentSourceDocumentLine == 0 &&
                            sourceDocumentLine.SourceDocumentHeader == commonId;

                    if (budgetSource.CheckResult)
                    {
                        budgetCheckResult = budgetSource.CheckResult;
                    }
                }
            }
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetSourceSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>BudgetSourceSourceDocumentHeader</c> class by using the specified
    ///    <c>SourceDocument</c> record.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    ///    The ID of a <c>SourceDocumentHeader</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceSourceDocumentHeader</c> class.
    /// </returns>
    public static BudgetSourceSourceDocumentHeader newBudgetSourceSourceDocumentHeader(SourceDocumentHeaderRecId _sourceDocumentHeaderId)
    {
        BudgetSourceSourceDocumentHeader budgetSourceSourceDocumentHeader;

        budgetSourceSourceDocumentHeader = new BudgetSourceSourceDocumentHeader();
        budgetSourceSourceDocumentHeader.parmCommonId(_sourceDocumentHeaderId);

        return budgetSourceSourceDocumentHeader;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>