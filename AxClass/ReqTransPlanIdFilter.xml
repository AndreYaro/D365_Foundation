<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPlanIdFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class controls filtering of master plan ID on the form.
/// </summary>
public class ReqTransPlanIdFilter implements ReqIReqPlanVersionFilterProvider
{
    private FormStringControl   formControl;
    private FormDataSource      rootFormDataSource;
    private FormDataSource      planVersionFormDataSource;
    private QueryBuildRange     planIdQueryBuildRange;
    private QueryBuildRange     activeQueryBuildRange;
    private SysIFilter          workspaceFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ReqTransPlanIdFilter</c> object.
    /// </summary>
    /// <param name = "_planFilterControlName">The name of the plan ID control.</param>
    /// <param name = "_formRun">The <c>FormRun</c> instance of the form that should be filtered.</param>
    /// <returns>An instance of the class itself.</returns>
    public static ReqTransPlanIdFilter newStandard(str _planFilterControlName, FormRun _formRun, ReqPlanId _defaultPlan = '')
    {
        return new ReqTransPlanIdFilter(_planFilterControlName, _formRun, _defaultPlan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanIdFromSysFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retraive master plan ID from sys filter.
    /// </summary>
    /// <param name = "_sysFilter">Implementation of <c>SysIFilter</c>.</param>
    /// <returns>Master plan ID.</returns>
    public static ReqPlanId getPlanIdFromSysFilter(SysIFilter _sysFilter)
    {
        ReqPlanId reqPlanId;

        if (_sysFilter)
        {
            anytype filterValue = SysFilterValueHelper::getFirstValueRecordFromFilterForType(_sysFilter, SysFilterValueTypeEnum::String, extendedTypeNum(ReqPlanId));

            if (filterValue != null)
            {
                reqPlanId = filterValue;
            }
        }

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanIdFromArgsSysFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retreive master plan ID from <c>Args</c> object.
    /// </summary>
    /// <param name = "_args">The <c>Args</c>object that should contain called object.</param>
    /// <returns>Master plan ID.</returns>
    public static ReqPlanId getPlanIdFromArgsSysFilter(Args _args)
    {
        ReqPlanId reqPlanId;

        if (_args && _args.caller())
        {
            Object caller = _args.caller();

            if (caller is SysIFilterProvider)
            {
                SysIFilterProvider filterProvider = caller as SysIFilterProvider;

                reqPlanId = ReqTransPlanIdFilter::getPlanIdFromSysFilter(filterProvider.parmFilter());
            }

            if (!reqPlanId)
            {
                if (caller is SysIFilterConsumer)
                {
                    SysIFilterConsumer filterConsumer = caller as SysIFilterConsumer;

                    reqPlanId = ReqTransPlanIdFilter::getPlanIdFromSysFilter(filterConsumer.parmSourceFilter());
                }
            }
        }

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current plan id.
    /// </summary>
    /// <returns>Current ReqPlanId</returns>
    public ReqPlanId getReqPlanId()
    {
        return formControl.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event handler that should be called when plan ID control is modified.
    /// </summary>
    /// <param name = "_control">The modified control.</param>
    /// <returns>True if modification was successful; otherwise false.</returns>
    public boolean modifiedPlanId(FormStringControl _control)
    {
        boolean res = false;

        if (_control)
        {
            FormRun formRun = _control.formRun() as FormRun;
            ReqPlanId planId = _control.valueStr();
            this.setPlanIdOnQueryRange(planId);

            if (formRun.name() == formStr(ReqTransPo))
            {
                Query initialQuery = new Query(rootFormDataSource.query());

                // The queries can become different after the user modifies the ranges in the filter pane.
                // In order to keep those modified ranges, we have to update query.
                Query updatedQuery = new Query(rootFormDataSource.queryRun().query());
                rootFormDataSource.query(updatedQuery);

                rootFormDataSource.executeQuery();

                // The filter pane reset removes the difference between queryRun and query. In order for the
                // reset to work, since they are now equivalent, we have to set query back to the initial value
                // and then set the range values for the current quick filter controls.
                rootFormDataSource.query(initialQuery);
                formRun.setPlanVersionForDataSources();
            }
            else
            {
                rootFormDataSource.executeQuery();
            }

            formRun.configurationHelper().filterChanged();

            res = true;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planVersion</Name>
				<Source><![CDATA[
    public ReqPlanVersion planVersion()
    {
        return ReqPlanVersion::findActiveReqPlanId(this.getReqPlanId(), curExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(str _planFilterControlName, FormRun _formRun, ReqPlanId _defaultPlan = '')
    {
        if (!_formRun)
        {
            throw error(Error::missingParameter(_formRun));
        }

        formControl                     = this.getPlanFilterControl(_planFilterControlName, _formRun);
        rootFormDataSource              = this.getRootDataSource(_formRun);
        planVersionFormDataSource       = this.getPlanVersionDataSource(_formRun);
        workspaceFilter                 = _formRun.parmSourceFilter();

        this.initFormControl();
        this.initFormDataSource();

        if (_defaultPlan)
        {
            this.setPlanIdOnFormControlAndRange(_defaultPlan);
        }

        this.setPlanIdBasedOnWorkspaceFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormControl</Name>
				<Source><![CDATA[
    protected void initFormControl()
    {
        if (formControl)
        {
            formControl.extendedDataType(extendedTypeNum(ReqPlanId));
            formControl.registerOverrideMethod(methodstr(FormStringControl, modified), methodstr(ReqTransPlanIdFilter, modifiedPlanId), this);
        }
        else
        {
            throw error('Plan filter control not provided');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormDataSource</Name>
				<Source><![CDATA[
    protected void initFormDataSource()
    {
        planIdQueryBuildRange = SysQuery::findOrCreateRange(planVersionFormDataSource.queryBuildDataSource(), fieldNum(ReqPlanVersion, ReqPlanId));

        activeQueryBuildRange = SysQuery::findOrCreateRange(planVersionFormDataSource.queryBuildDataSource(), fieldNum(ReqPlanVersion, Active));
        activeQueryBuildRange.value(SysQuery::value(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanIdBasedOnWorkspaceFilter</Name>
				<Source><![CDATA[
    protected void setPlanIdBasedOnWorkspaceFilter()
    {
        if (planIdQueryBuildRange && workspaceFilter)
        {
            var planId = ReqTransPlanIdFilter::getPlanIdFromSysFilter(workspaceFilter);
            if (planId)
            {
                this.setPlanIdOnFormControlAndRange(planId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanIdOnFormControlAndRange</Name>
				<Source><![CDATA[
    protected void setPlanIdOnFormControlAndRange(ReqPlanId _planId)
    {
        this.setPlanIdOnFormControl(_planId);
        this.setPlanIdOnQueryRange(_planId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanIdOnFormControl</Name>
				<Source><![CDATA[
    protected void setPlanIdOnFormControl(ReqPlanId _planId)
    {
        formControl.text(_planId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanIdOnQueryRange</Name>
				<Source><![CDATA[
    protected void setPlanIdOnQueryRange(ReqPlanId _planId)
    {
        if (planIdQueryBuildRange)
        {
            planIdQueryBuildRange.value(_planId ? SysQuery::value(_planId) : SysQuery::valueUnlimited());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanFilterControl</Name>
				<Source><![CDATA[
    protected FormStringControl getPlanFilterControl(str _planFilterControlName, formRun _formRun)
    {
        var formControlId = _formRun.controlId(_planFilterControlName);
        var control =  _formRun.control(formControlId);

        if (!control)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return control;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootDataSource</Name>
				<Source><![CDATA[
    protected FormDataSource getRootDataSource(FormRun _formRun)
    {
        List            dataSourceList          = _formRun.rootFormDataSources();
        Enumerator      dataSourceEnumerator    = dataSourceList.getEnumerator();
        FormDataSource  rootDataSource;

        if (dataSourceEnumerator.moveNext())
        {
            rootDataSource = dataSourceEnumerator.current();
        }

        if (!rootDataSource)
        {
            throw error(funcname());
        }

        return rootDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanVersionDataSource</Name>
				<Source><![CDATA[
    protected FormDataSource getPlanVersionDataSource(FormRun _formRun)
    {
        FormDataSource planVersionDataSource;

        for (var i = 1 ; i <= _formRun.dataSourceCount(); i++)
        {
            FormDataSource dataSource = _formRun.dataSource(i);

            if (dataSource.table() == tableNum(ReqPlanVersion))
            {
                planVersionDataSource = dataSource;
                break;
            }
        }

        if (!planVersionDataSource)
        {
            throw error(funcname());
        }

        return planVersionDataSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>