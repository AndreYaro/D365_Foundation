<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationFindPickPutLocationPerformanceTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSInstrumentationFindPickPutLocationPerformanceTask extends WHSInstrumentationPerformanceTask
{
    private const str ParameterWorkType = 'workType';
    private const str ParameterWorkTransType = 'workTransType';

    private int locDirsVisited = 0;
    private int locDirLinesVisited = 0;
    private int locDirActionsVisited = 0;
    private int locDirActionsExecuted = 0;
    private int locDirActionsWithImmediateReplen = 0;
    private int locationsEvaluated = 0;
    private int statusMixingFailed = 0;
    private int containerTypeFailed = 0;
    private int mixingRulesStockingLimitFailed = 0;
    private int itemMixTmpWorkLineFailed = 0;
    private int containerLimitFailed = 0;
    private int strategyFailed = 0;
    private int volumetricsFailed = 0;
    private int batchMixingFailed = 0;
    private int dockManagementMixingFailed = 0;
    private int multiSKUFailed = 0;
    private int stockingLimitsCounter = 0;
    private int volumetricsCounter = 0;
    private int volumetricsSkipped = 0;
    private int unallocatedLocationSkipped = 0;
    private int checkRepeatDimensionsIdentical = 0;
    private int checkRepeatLocationIdentical = 0;
    private int checkNonLPLocation = 0;
    private int checkExcludedLocations = 0;
    private int checkFinalPutLocation = 0;
    private int checkStagingLocation = 0;
    private int checkFixedLocation = 0;
    private int checkFixedVariantLocation = 0;
    private int checkFixedVariantLocationProduct = 0;
    private int checkUserLocation = 0;
    private int checkBatchExpDate = 0;
    private int checkLocAllowMultiSku = 0;
    private int scopeSingleItemVisited = 0;
    private int scopeSingleOrderVisited = 0;
    private int scopeMultiItemVisited = 0;
    private int scopeAllVisited = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	private void new(str _category)
    {
        super(_category, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFindPickPutLocation</Name>
				<Source><![CDATA[
	public static WHSInstrumentationFindPickPutLocationPerformanceTask newFindPickPutLocation(
		InventLocation		_warehouse,
		InventTable			_item,
		WHSWorkType			_workType,
		WHSWorkTransType	_workTransType,
        boolean             _isAcceptanceTest)
    {
        return new WHSInstrumentationFindPickPutLocationPerformanceTask('findPickPutLocation')
			.setWarehouse(_warehouse)
			.setItem(_item)
			.setWorkType(_workType)
            .setWorkTransType(_workTransType)
            .setIsAcceptanceTest(_isAcceptanceTest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFindPickPutLocationMultiSKU</Name>
				<Source><![CDATA[
    public static WHSInstrumentationFindPickPutLocationPerformanceTask newFindPickPutLocationMultiSKU(
        InventLocation		_warehouse,
        WHSWorkType			_workType,
        WHSWorkTransType	_workTransType)
    {
        return new WHSInstrumentationFindPickPutLocationPerformanceTask('findPickPutLocationMultiSKU')
            .setWarehouse(_warehouse)
            .setWorkType(_workType)
            .setWorkTransType(_workTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouse</Name>
				<Source><![CDATA[
	public WHSInstrumentationFindPickPutLocationPerformanceTask setWarehouse(InventLocation _warehouse)
    {
        return this.setParameter('warehouse', int642Str(_warehouse.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsAcceptanceTest</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask setIsAcceptanceTest(boolean _isAcceptanceTest)
    {
        return this.setParameter('isAcceptanceTest', this.getBooleanParameterValue(_isAcceptanceTest));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask setItem(InventTable _item)
    {
        return this.setParameter('item', int642Str(_item.RecId)).setParameter('isCWItem', this.getBooleanParameterValue(PdsGlobal::pdsIsCWItem(_item.ItemId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkType</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask setWorkType(WHSWorkType _workType)
    {
        return this.setParameter(ParameterWorkType, enum2Symbol(enumNum(WHSWorkType), enum2int(_workType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationEvaluated</Name>
				<Source><![CDATA[
	public WHSInstrumentationFindPickPutLocationPerformanceTask locationEvaluated()
    {
        ++locationsEvaluated;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkTransType</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask setWorkTransType(WHSWorkTransType _workTransType)
    {
        return this.setParameter(ParameterWorkTransType, enum2Symbol(enumNum(WHSWorkTransType), enum2int(_workTransType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>locDirActionExecuted</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask locDirActionExecuted()
    {
        ++locDirActionsExecuted;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locDirActionVisited</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask locDirActionVisited()
    {
        ++locDirActionsVisited;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locDirLineVisited</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask locDirLineVisited()
    {
        ++locDirLinesVisited;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locDirVisited</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask locDirVisited(WhsLocationDirectiveScope _scope)
    {
        ++locDirsVisited;

        switch (_scope)
        {
            case WhsLocationDirectiveScope::SingleItem:
                ++scopeSingleItemVisited;
                break;
            case WhsLocationDirectiveScope::SingleOrder:
                ++scopeSingleOrderVisited;
                break;
            case WhsLocationDirectiveScope::MultiItem:
                ++scopeMultiItemVisited;
                break;
            case WhsLocationDirectiveScope::All:
                ++scopeAllVisited;
                break;
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locDirActionHasImmediateReplenishment</Name>
				<Source><![CDATA[
	public WHSInstrumentationFindPickPutLocationPerformanceTask locDirActionHasImmediateReplenishment()
    {
        ++locDirActionsWithImmediateReplen;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImmediateReplenishmentSucceeded</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask setImmediateReplenishmentSucceeded(boolean _immediateReplenishmentSucceeded)
    {
        return this.setParameter('immediateReplenishmentSucceeded', this.getBooleanParameterValue(_immediateReplenishmentSucceeded));
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusMixingFailed</Name>
				<Source><![CDATA[
	public WHSInstrumentationFindPickPutLocationPerformanceTask statusMixingFailed()
    {
        ++statusMixingFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containerTypeFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask containerTypeFailed()
    {
        ++containerTypeFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixingRulesStockingLimitFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask mixingRulesStockingLimitFailed()
    {
        ++mixingRulesStockingLimitFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseStockingLimitsCounter</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask increaseStockingLimitsCounter()
    {
        ++stockingLimitsCounter;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemMixTmpWorkLineFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask itemMixTmpWorkLineFailed()
    {
        ++itemMixTmpWorkLineFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containerLimitFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask containerLimitFailed()
    {
        ++containerLimitFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strategyFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask strategyFailed()
    {
        ++strategyFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>volumetricsFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask volumetricsFailed()
    {
        ++volumetricsFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>volumetricsSkipped</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask volumetricsSkipped()
    {
        ++volumetricsSkipped;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchMixingFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask batchMixingFailed()
    {
        ++batchMixingFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dockManagementMixingFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask dockManagementMixingFailed()
    {
        ++dockManagementMixingFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiSKUFailed</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask multiSKUFailed()
    {
        ++multiSKUFailed;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseVolumetricsCounter</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask increaseVolumetricsCounter()
    {
        ++volumetricsCounter;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unallocatedLocationSkipped</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask unallocatedLocationSkipped()
    {
        ++unallocatedLocationSkipped;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRepeatDimensionsIdentical</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkRepeatDimensionsIdentical()
    {
        ++checkRepeatDimensionsIdentical;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRepeatLocationIdentical</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkRepeatLocationIdentical()
    {
        ++checkRepeatLocationIdentical;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNonLPLocation</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkNonLPLocation()
    {
        ++checkNonLPLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExcludedLocations</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkExcludedLocations()
    {
        ++checkExcludedLocations;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinalPutLocation</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkFinalPutLocation()
    {
        ++checkFinalPutLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStagingLocation</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkStagingLocation()
    {
        ++checkStagingLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixedLocation</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkFixedLocation()
    {
        ++checkFixedLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixedVariantLocation</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkFixedVariantLocation()
    {
        ++checkFixedVariantLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixedVariantLocationProduct</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkFixedVariantLocationProduct()
    {
        ++checkFixedVariantLocationProduct;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUserLocation</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkUserLocation()
    {
        ++checkUserLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBatchExpDate</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkBatchExpDate()
    {
        ++checkBatchExpDate;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocAllowMultiSku</Name>
				<Source><![CDATA[
    public WHSInstrumentationFindPickPutLocationPerformanceTask checkLocAllowMultiSku()
    {
        ++checkLocAllowMultiSku;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTaskInternal</Name>
				<Source><![CDATA[
	protected void endTaskInternal()
    {
        this.setParameterIfNotZero('locationsEvaluated', locationsEvaluated);
        this.setParameterIfNotZero('locDirActionsVisited', locDirActionsVisited);
        this.setParameterIfNotZero('locDirLinesVisited', locDirLinesVisited);
        this.setParameterIfNotZero('locDirsVisited', locDirsVisited);
        this.setParameterIfNotZero('locDirActionsExecuted', locDirActionsExecuted);
        this.setParameterIfNotZero('locDirActionsWithImmediateReplen', locDirActionsWithImmediateReplen);
        this.setParameterIfNotZero('statusMixingFailed', statusMixingFailed);
        this.setParameterIfNotZero('containerTypeFailed', containerTypeFailed);
        this.setParameterIfNotZero('mixingRulesStockingLimitFailed', mixingRulesStockingLimitFailed);
        this.setParameterIfNotZero('itemMixTmpWorkLineFailed', itemMixTmpWorkLineFailed);
        this.setParameterIfNotZero('containerLimitFailed', containerLimitFailed);
        this.setParameterIfNotZero('strategyFailed', strategyFailed);
        this.setParameterIfNotZero('volumetricsFailed', volumetricsFailed);
        this.setParameterIfNotZero('batchMixingFailed', batchMixingFailed);
        this.setParameterIfNotZero('dockManagementMixingFailed', dockManagementMixingFailed);
        this.setParameterIfNotZero('multiSKUFailed', multiSKUFailed);
        this.setParameterIfNotZero('stockingLimitsCounter', stockingLimitsCounter);
        this.setParameterIfNotZero('volumetricsCounter', volumetricsCounter);
        this.setParameterIfNotZero('volumetricsSkipped', volumetricsSkipped);
        this.setParameterIfNotZero('unallocatedLocationSkipped', unallocatedLocationSkipped);
        this.setParameterIfNotZero('checkRepeatDimensionsIdentical', checkRepeatDimensionsIdentical);
        this.setParameterIfNotZero('checkRepeatLocationIdentical', checkRepeatLocationIdentical);
        this.setParameterIfNotZero('checkNonLPLocation', checkNonLPLocation);
        this.setParameterIfNotZero('checkExcludedLocations', checkExcludedLocations);
        this.setParameterIfNotZero('checkFinalPutLocation', checkFinalPutLocation);
        this.setParameterIfNotZero('checkStagingLocation', checkStagingLocation);
        this.setParameterIfNotZero('checkFixedLocation', checkFixedLocation);
        this.setParameterIfNotZero('checkFixedVariantLocation', checkFixedVariantLocation);
        this.setParameterIfNotZero('checkFixedVariantLocationProduct', checkFixedVariantLocationProduct);
        this.setParameterIfNotZero('checkUserLocation', checkUserLocation);
        this.setParameterIfNotZero('checkBatchExpDate', checkBatchExpDate);
        this.setParameterIfNotZero('checkLocAllowMultiSku', checkLocAllowMultiSku);
        this.setParameterIfNotZero('scopeAllVisited', scopeAllVisited);
        this.setParameterIfNotZero('scopeSingleItemVisited', scopeSingleItemVisited);
        this.setParameterIfNotZero('scopeSingleOrderVisited', scopeSingleOrderVisited);
        this.setParameterIfNotZero('scopeMultiItemVisited', scopeMultiItemVisited);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>