<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceCoupon</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Device.Location;
using System.Reflection;
using System.Collections.Generic;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CRT = Microsoft.Dynamics.Commerce.Runtime;
using CLRSystem = System;

/// <summary>
/// The <c>RetailTransactionServiceCoupon</c> implements the coupon related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public class RetailTransactionServiceCoupon
{
    private const str TransactionServiceAssemblyName = 'Microsoft.Dynamics.Commerce.Runtime.TransactionService';
    private const str TransactionServiceValidateCouponUsageLimitCriteriaTypeName = 'Microsoft.Dynamics.Commerce.Runtime.TransactionService.TransactionServiceValidateCouponUsageLimitCriteria';
    
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ValidateCouponUsageLimits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for validating coupon usage limits.
    /// </summary>
    /// <param name="couponCodeIdCollection">
    /// The coupon code identifier collection.
    /// </param>
    /// <param name="customerAccount">
    /// The customer account on the transaction.
    /// </param>
    /// <param name="channelId">
    /// The channel identifier.
    /// </param>
    /// <returns>
    /// Container with validation result and invalid coupon code identifiers, if any.
    /// </returns>
    public static container ValidateCouponUsageLimits(str couponCodeIdCollection,
                                                         str    customerAccount,
                                                         int64  channelId)
    {
        int fromLine;
        str error = '';
        boolean success = true;
        str invalidCouponCodes;
        str couponCodeId;
        boolean areCouponCodesValid = true;

        try
        {
            RetailChannelId retailChannelId = RetailChannelTable::findByRecId(channelId).RetailChannelId;
            List couponCodeIds = Global::strSplit(couponCodeIdCollection, ",");
            ListIterator iterator = new ListIterator(couponCodeIds);
            fromLine = Global::infologLine();

            // Validate coupon usage limit for each coupon code, add them to invalidCouponCodes if invalid.
            while (iterator.more())
            {
                couponCodeId = iterator.value();

                // If coupon code ID is not null or empty, check usage limits.
                if (couponCodeId)
                {
                    boolean isValid = RetailCouponHelper::validateCouponLimits(couponCodeId, retailChannelId, customerAccount);
                    if (!isValid)
                    {
                        areCouponCodesValid = false;
                        RetailCouponCode couponCode = RetailCouponCodeTable::findbyCouponCodeId(couponCodeId).CouponCode;
                        invalidCouponCodes = invalidCouponCodes + ',' + couponCode;
                    }
                }
                
                iterator.next();
            }
        }
        catch(Exception::Error)
        {
            error = RetailTransactionServiceUtilities::getInfologMessages(fromLine);
            success = false;
        }

        return [success, error, areCouponCodesValid, subStr(invalidCouponCodes, 2, strLen(invalidCouponCodes))];
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCouponUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for updating coupon usage limits.
    /// </summary>
    /// <param name="_couponCodeIdCollection">
    /// The coupon code identifier collection.
    /// </param>
    /// <param name="_customerAccount">
    /// The customer account on the transaction.
    /// </param>
    /// <param name="_channelId">
    /// The channel identifier.
    /// </param>
    /// <param name = "_status">
    /// The coupon usage status.
    /// </param>
    /// <param name = "_transactionId">
    /// The transaction identifier.
    /// </param>
    /// <param name = "_receiptId">
    /// The receipt identifier.
    /// </param>
    /// <param name = "_salesId">
    /// The sales identifier.
    /// </param>
    /// <returns>
    /// Container with validation result and invalid coupon code identifiers, if any.
    /// </returns>
    public static container UpdateCouponUsage(str _couponCodeIdCollection,
                                                         str    _customerAccount,
                                                         int64  _channelId,
                                                         RetailCouponUsageStatus _status,
                                                         str _transactionId,
                                                         str _receiptId,
                                                         str _salesId)
    {
        return RetailTransactionServiceCoupon::UpdateCouponUsageV2(
            _couponCodeIdCollection,
            _customerAccount,
            _channelId,
            _status,
            _transactionId,
            _receiptId,
            _salesId,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCouponUsageV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for updating coupon usage limits.
    /// </summary>
    /// <param name="_couponCodeIdCollection">
    /// The coupon code identifier collection.
    /// </param>
    /// <param name="_customerAccount">
    /// The customer account on the transaction.
    /// </param>
    /// <param name="_channelId">
    /// The channel identifier.
    /// </param>
    /// <param name = "_status">
    /// The coupon usage status.
    /// </param>
    /// <param name = "_transactionId">
    /// The transaction identifier.
    /// </param>
    /// <param name = "_receiptId">
    /// The receipt identifier.
    /// </param>
    /// <param name = "_salesId">
    /// The sales identifier.
    /// </param>
    /// <param name = "_isValidationRequired">
    /// A value indicating whether coupon usage validation is required during coupon usage update process.
    /// </param>
    /// <returns>
    /// Container with validation result and invalid coupon code identifiers, if any.
    /// </returns>
    internal static container UpdateCouponUsageV2(str _couponCodeIdCollection,
                                                         str    _customerAccount,
                                                         int64  _channelId,
                                                         RetailCouponUsageStatus _status,
                                                         str _transactionId,
                                                         str _receiptId,
                                                         str _salesId,
                                                         boolean _isValidationRequired)
    {
        RetailCouponUsage retailCouponUsage;
        str error = '';
        boolean success = true;
        int fromLine;
        str invalidCouponCodes;
        boolean areCouponCodesValid = true;
        Map couponcodeIdToStatusMap = new Map(Types::String, Types::Enum);
        RetailCouponCode couponCode;
        RetailCouponCodeId couponCodeId;
        RetailCouponUsageStatus status;
        
        try
        {
            List couponCodeIds = Global::strSplit(_couponCodeIdCollection, ",");
            ListIterator iterator = new ListIterator(couponCodeIds);
            RetailChannelId retailChannelId = RetailChannelTable::findByRecId(_channelId).RetailChannelId;

            // Validate coupons if they are not already present in the usage table and when the coupon usage status is Completed, and add them to the map of usages to be inserted.
            while (iterator.more())
            {
                couponCodeId = iterator.value();

                // If the status is completed and the coupon does not exist in the retail coupon usage table, validate (if required) and add to the map.
                if (_status == RetailCouponUsageStatus::Completed && !RetailCouponUsage::exist(_transactionId, _salesId, couponCodeId, _status) && _isValidationRequired)
                {
                    boolean result = RetailCouponHelper::ValidateCouponLimits(couponCodeId, retailChannelId, _customerAccount);
                    if (result)
                    {
                        couponcodeIdToStatusMap.insert(couponCodeId, _status);
                    }
                    else
                    {
                        areCouponCodesValid = false;
                        couponCode = RetailCouponCodeTable::findbyCouponCodeId(couponCodeId).CouponCode;
                        invalidCouponCodes = invalidCouponCodes + ',' + couponCode;
                    }
                }
                else
                {
                    couponCodeIdToStatusMap.insert(couponCodeId, _status);
                }

                iterator.next();
            }
        
            // Insert coupon usage if all the coupons are valid.
            if (areCouponCodesValid)
            {

                // If the coupon usage status is completed and coupon usage rows exists in the table for this transaction,
                // but the coupons are not in the coupon code identifiers provided, mark the usage as cancelled. This is for update order scenarios when a coupon is removed from the order.
                if (_status == RetailCouponUsageStatus::Completed)
                {
                    while select CouponCodeId, Status
                        from retailCouponUsage
                        where ((_transactionId && retailCouponUsage.TransactionId == _transactionId) || (_salesId && retailCouponUsage.SalesId == _salesId))
                            &&  retailCouponUsage.Status == RetailCouponUsageStatus::Completed
                    {
                        if (!couponcodeIdToStatusMap.exists(retailCouponUsage.CouponCodeId))
                        {
                            couponcodeIdToStatusMap.insert(retailCouponUsage.CouponCodeId, RetailCouponUsageStatus::Canceled);
                        }
                    }
                }

                RecordInsertList listRetailCouponUsage = new RecordInsertList(TableNum(RetailCouponUsage));
                    
                MapIterator mapIterator = new MapIterator(couponcodeIdToStatusMap);

                while (mapIterator.more())
                {
                    couponCodeId = mapIterator.key();
                    status = mapIterator.value();
                    // If the record does not exist, insert it.
                    if (!RetailCouponUsage::exist(_transactionId, _salesId, couponCodeId, status))
                    {
                        retailCouponUsage.TransactionId        = _transactionId;
                        retailCouponUsage.ReceiptId            = _receiptId;
                        retailCouponUsage.SalesId              = _salesId;
                        retailCouponUsage.CustomerAccount      = _customerAccount;
                        retailCouponUsage.Status               = status;
                        retailCouponUsage.CouponCodeId         = couponCodeId;
                        retailCouponUsage.RetailChannelId      = retailChannelId;
                        retailCouponUsage.UsageId              = newGuid();

                        listRetailCouponUsage.Add(retailCouponUsage);
                    }

                    mapIterator.next();
                }

                ttsbegin;

                listRetailCouponUsage.insertDatabase();

                ttscommit;
            }
            else
            {
                return [success, error, areCouponCodesValid, subStr(invalidCouponCodes, 2, strLen(invalidCouponCodes))];
            }
        }
        catch(Exception::Error)
        {
            error = RetailTransactionServiceUtilities::getInfologMessages(fromLine);
            success = false;
        }

        return [success, error, areCouponCodesValid, subStr(invalidCouponCodes, 2, strLen(invalidCouponCodes))];
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCouponUsageLimitsV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for validating coupon usage limits.
    /// </summary>
    /// <param name="_criteriaJson">The validate criteria object JSON string.</param>
    /// <returns>Container with validation result and invalid coupon code identifiers, if any.</returns>
    internal static container ValidateCouponUsageLimitsV2(str _criteriaJson)
    {
        int fromLine;
        str error = '';
        boolean success = true;
        str invalidCouponCodes;
        str couponCodeId;
        boolean areCouponCodesValid = true;

        try
        {
            CRT.TransactionService.TransactionServiceValidateCouponUsageLimitCriteria criteria = RetailTransactionServiceCoupon::getValidateCriteriaFromJson(_criteriaJson);
            if (!criteria)
            {
                return [false, "@RetailPricing:ValidateCouponUsageLimitCriteria", ''];
            }

            int64 channelId = criteria.ChannelId;
            RetailChannelId retailChannelId = RetailChannelTable::findByRecId(channelId).RetailChannelId;
            str customerAccount = criteria.CustomerAccount;
            str salesId = criteria.SalesId;
            str transactionId = criteria.TransactionId;

            CLRSystem.Collections.IEnumerable couponCodeIds = criteria.get_CouponCodeIds();

            if (!RetailPricingKillSwitch::disableCouponValidationInBatch())
            {
                invalidCouponCodes = RetailCouponUsageValidator::ValidateCouponLimits(couponCodeIds, retailChannelId, customerAccount, salesId, transactionId);
                areCouponCodesValid = invalidCouponCodes == null;
            }
            else
            {
                System.Collections.IEnumerator couponCodeIdEnumerator = couponCodeIds.GetEnumerator();
                fromLine = Global::infologLine();

                // Validate coupon usage limit for each coupon code, add them to invalidCouponCodes if invalid.
                while (couponCodeIdEnumerator.moveNext())
                {
                    couponCodeId = couponCodeIdEnumerator.Current;

                    boolean isValid = RetailCouponHelper::ValidateCouponLimitsV2(couponCodeId, retailChannelId, customerAccount, salesId, transactionId);
                    if (!isValid)
                    {
                        areCouponCodesValid = false;
                        RetailCouponCode couponCode = RetailCouponCodeTable::findbyCouponCodeId(couponCodeId).CouponCode;
                        invalidCouponCodes = invalidCouponCodes + ',' + couponCode;
                    }
                }
            }
        }
        catch(Exception::Error)
        {
            error = RetailTransactionServiceUtilities::getInfologMessages(fromLine);
            success = false;
        }

        return [success, error, areCouponCodesValid, subStr(invalidCouponCodes, 2, strLen(invalidCouponCodes))];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidateCriteriaFromJson</Name>
				<Source><![CDATA[
    private static CRT.TransactionService.TransactionServiceValidateCouponUsageLimitCriteria getValidateCriteriaFromJson(str _criteriaJson)
    {
        try
        {
            Assembly transactionServiceAssembly = Assembly::Load(TransactionServiceAssemblyName);
            System.Type searchCriteriaType = transactionServiceAssembly == null? null: transactionServiceAssembly.GetType(TransactionServiceValidateCouponUsageLimitCriteriaTypeName);

            Newtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings();
            // Below two properties are needed for the scenario where HQ version of Retail binaries is ahead of RCSU version.
            settings.TypeNameHandling = Newtonsoft.Json.TypeNameHandling::Auto;
            settings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;

            // Use parameterless private constructor
            settings.ConstructorHandling = Newtonsoft.Json.ConstructorHandling::AllowNonPublicDefaultConstructor;

            CRT.TransactionService.TransactionServiceValidateCouponUsageLimitCriteria criteria = Newtonsoft.Json.JsonConvert::DeserializeObject(_criteriaJson, searchCriteriaType, settings);

            return criteria;
        }
        catch
        {
            eventSource.EventWriteGeneralExceptionOnMethodWithErrorMessage(funcName(), "Deserialization of coupon usage validation criteria failed.");
            return null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>