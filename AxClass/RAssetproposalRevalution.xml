<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalRevalution</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalRevalution extends RAssetProposal implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
        public RAssetTransType assetTransType()
    {
        return RAssetTransType::Revaluation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepreciationBonusLine</Name>
				<Source><![CDATA[
protected void createDepreciationBonusLine(RAssetStandardId   _assetStandardId)
    {
        LedgerJournalTrans              ledgerJournalTrans, ledgerJournalTransNew;
        LedgerJournalTrans_RAsset       ledgerJournalTrans_RAsset, ledgerJournalTrans_RAssetNew;
        RAssetStandardTable             standardTable = RAssetStandardTable::find(_assetStandardId);
        RAssetJournal                   rAssetJournalBonus;
        RAssetGroup                     rAssetGroup;
        AmountCur                       bonusAmount;
        LedgerDimensionDefaultAccount   defaultAccount,
                                        offsetDefaultAccount;
        TransDate                       transDate;
        RAssetLocationId                assetLocationId;
    
        ledgerJournalTrans          = rAssetJournal.ledgerJournalTrans();
        ledgerJournalTrans_RAsset   = rAssetJournal.ledgerJournalTrans_RAsset();
    
        transDate = ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans);
    
        if ( rAssetStandards.assetDeprMethod(transDate) != RAssetDeprMethod::StraightLine &&
             rAssetStandards.assetDeprMethod(transDate) != RAssetDeprMethod::TaxNonLinearGroup)
        {
            return;
        }
    
        if (deprBonusId && !rAssetBudgetModelId && standardTable.CurrentOperationsTax == CurrentOperationsTax::Tax)
        {
    
            rAssetGroup = RAssetGroup::find(RAssetStandards::find(rAssetTable.AccountNum, _assetStandardId).AssetGroup);
            if (RAssetBonus::find(deprBonusId).Percentage > rAssetGroup.DepreciationBonusPercent)
            {
                throw error(strFmt("@GLS114350",
                                   rAssetGroup.DepreciationBonusPercent,
                                   rAssetGroup.AssetGroupId));
            }
    
            if (deprDateType == RAssetDeprBonusDateType::ValuationChangesDate)
            {
                rAssetJournalBonus = new RAssetJournal(this.journalNum(), RAssetTransType::Depreciation);
                offsetDefaultAccount = RAssetDisposalParameters::offsetLedgerDimensionAccount(rAssetStandards.postingProfile(transDate),
                                                                                              RAssetDisposalType::DepreciationBonus,
                                                                                              rAssetStandards.AssetId,
                                                                                              rAssetStandards.AssetStandardId);
                rAssetJournalBonus.parmCorrect(rAssetJournal.parmCorrect());
                rAssetJournalBonus.parmAccountingDate(rAssetJournal.parmAccountingDate());
    
                if (ledgerJournalTrans.amount())
                {
                    bonusAmount = RAssetBonus::bonusAmountCur(deprBonusId,
                                                              _assetStandardId,
                                                              rAssetTable,
                                                              transDate,
                                                              ledgerJournalTrans.amount(),
                                                              rAssetStandards.CurrencyCode);
                }
    
                if (! RAssetLending::findLent(rAssetStandards.AssetId, transDate))
                {
                    assetLocationId = RAssetMoveHist::findLastOperation(rAssetStandards.AssetId,
                                                                        RAssetMoveType::Transfer,
                                                                        NoYes::No,
                                                                        transDate).NewLocation;
                    if (assetLocationId)
                    {
                        defaultAccount = RAssetLedgerAccountsByLocation::ledgerDimensionForBonus(rAssetStandards.AssetId,
                                                                                                 assetLocationId,
                                                                                                 rAssetStandards.AssetStandardId);
                    }
                }
    
                if (! defaultAccount)
                {
                    defaultAccount = RAssetDisposalParameters::ledgerDimensionAccount(rAssetStandards.postingProfile(transDate),
                                                                                      RAssetDisposalType::DepreciationBonus,
                                                                                      rAssetStandards.AssetId,
                                                                                      rAssetStandards.AssetStandardId);
                }
    
                rAssetJournalBonus.createVoucher();
                rAssetJournalBonus.createTrans(bonusAmount,
                                               rAssetTable,
                                               transDate,
                                               rAssetStandards,
                                               rAssetBudgetModelId,
                                               "@GLS116827",
                                               defaultAccount,
                                               NoYes::Yes,
                                               RAssetBonus::find(deprBonusId).dimension());
    
                ledgerJournalTrans_RAssetNew = rAssetJournalBonus.ledgerJournalTrans_RAsset();
                ledgerJournalTransNew        = rAssetJournalBonus.ledgerJournalTrans();
    
                ledgerJournalTrans_RAssetNew.ToFromRecId            = ledgerJournalTrans.RecId;
                ledgerJournalTrans_RAssetNew.DepreciationBonusId    = deprBonusId;
                ledgerJournalTrans_RAssetNew.DeprPeriod             = transDate;
                ledgerJournalTrans_RAssetNew.update();
    
                ledgerJournalTransNew.NoEdit                = NoYes::Yes;
                ledgerJournalTransNew.OffsetLedgerDimension = this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount,
                                                                                                           ledgerJournalTransNew.DefaultDimension);
                ledgerJournalTransNew.update();
            }
    
            ledgerJournalTrans_RAsset.DepreciationBonusId = deprBonusId;
            ledgerJournalTrans_RAsset.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
        public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount = 0)
    {

        if (rAssetStandards.Depreciation &&
            rAssetStandards.postingProfile(runDate))
        {
            rAssetJournal.createVoucher();
            rAssetJournal.createTrans(0,
                                      rAssetTable,
                                      runDate,
                                      rAssetStandards,
                                      "");
            this.createDepreciationBonusLine(_assetStandardId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprPeriodCheck</Name>
				<Source><![CDATA[
        protected boolean deprPeriodCheck()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase dialog = super();
        ;
        dialog.caption("@GLS116123");

        return dialog;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>