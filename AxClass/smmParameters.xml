<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOpportunityForQuote</Name>
				<Source><![CDATA[
    public static boolean createOpportunityForQuote(QuotationType _quotationType)
    {
        smmParametersTable  smmParametersTable = smmParametersTable::find();
        FieldId             fieldId;

        switch (_quotationType)
        {
            case QuotationType::Sales :
                fieldId = fieldNum(smmParametersTable, CreateOpportunityForSalesQuotation);
                break;
            case QuotationType::Project :
                fieldId = fieldNum(smmParametersTable, CreateOpportunityForProjectQuotation);
                break;
            default :
                return false;
        }

        if (fieldId)
        {
            if (smmParametersTable.(fieldId) == smmCreateOpportunityOptions::Never)
            {
                return false;
            }

            if (!RetailSMB::IsRetailSMBEnabled())
            {
            if (smmParametersTable.(fieldId) == smmCreateOpportunityOptions::Prompt)
            {
                // Should an opportunity be created?
                if (Box::yesNo("@SYS112713", DialogButton::Yes, "@SYS103055") == DialogButton::No)
                {
                    return false;
                }
                }
            }
            else
            {
                 return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDirectory</Name>
				<Source><![CDATA[
    public static Filename defaultDirectory()
    {
        return smmParametersTable::find().MailingfileDirectory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuFromDate</Name>
				<Source><![CDATA[
    public static date docuFromDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - smmParametersTable::find().DocuAgeLimitForDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuToDate</Name>
				<Source><![CDATA[
    public static date docuToDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustAccountNumberSequence</Name>
				<Source><![CDATA[
    //Called from EP
    public static NumberSequenceTable findCustAccountNumberSequence()
    {
        return NumberSequenceTable::find(NumberSeqReference::findReference(extendedTypeNum(CustAccount)).NumberSequenceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>NumberSequenceTable</c> record for a given extended data type.
    /// </summary>
    /// <param name="_dataTypeId">
    /// ID of the extended data type.
    /// </param>
    /// <returns>
    /// The <c>NumberSequenceTable</c> table for the extended data type.
    /// </returns>
    public static NumberSequenceTable findNumberSequence(ExtendedTypeId _dataTypeId)
    {
        switch (_dataTypeId)
        {
            case extendedTypeNum(CustAccount):
            case extendedTypeNum(SalesId):
            case extendedTypeNum(VendAccount):
            case extendedTypeNum(smmOpportunityId):
                return NumberSequenceTable::find(NumberSeqReference::findReference(_dataTypeId).NumberSequenceId);
        }

        return NumberSequenceTable::findByNaturalKey('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusRelOpenCustForm</Name>
				<Source><![CDATA[
    public static NoYes getBusRelOpenCustForm()
    {
        return smmParametersTable::find().BusRelOpenCustForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusRelOpenVendForm</Name>
				<Source><![CDATA[
    public static NoYes getBusRelOpenVendForm()
    {
        return smmParametersTable::find().BusRelOpenCustForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCampaignGroupId</Name>
				<Source><![CDATA[
    public static smmCampaignGroupId getCampaignGroupId()
    {
        return smmParametersTable::find().CampaignGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCampaignNumOfDaysExpiryDate</Name>
				<Source><![CDATA[
    public static Days getCampaignNumOfDaysExpiryDate()
    {
        return smmParametersTable::find().CampaignNumOfDaysExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCampaignNumOfDaysFollowUpDate</Name>
				<Source><![CDATA[
    public static Days getCampaignNumOfDaysFollowUpDate()
    {
        return smmParametersTable::find().NumOfCampaignDaysFollowUpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCampaignStatus</Name>
				<Source><![CDATA[
    public static smmCampaignStatus getCampaignStatus()
    {
        return smmParametersTable::find().CampaignStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCampaignTargetId</Name>
				<Source><![CDATA[
    public static smmCampaignTargetId getCampaignTargetId()
    {
        return smmParametersTable::find().CampaignTargetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCampaignTypeId</Name>
				<Source><![CDATA[
    public static smmCampaignTypeId getCampaignTypeId()
    {
        return smmParametersTable::find().CampaignTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInititalCampaignValues</Name>
				<Source><![CDATA[
    static public container getInititalCampaignValues()
    {
        container ret;

        ret = [smmUtility::getCurrentContactWorker(),
               smmParameters::getCampaignTypeId(),
               smmParameters::getCampaignGroupId(),
               smmParameters::getCampaignTargetId(),
               smmParameters::getCampaignStatus()];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumber</Name>
				<Source><![CDATA[
    // AOS tuning - Run on server because normally only calls server methods. Only calls
    // a client method in the case of an error in order to display an error message.
    public static str getNumber(smmNumbSeqUsed _numbtype)
    {
        NumberSeq numberSeq;
        Num       num;

        switch (_numbtype)
        {
            case smmNumbSeqUsed::BusRel :
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefBusRelAccount(), true, true);
                break;

            case smmNumbSeqUsed::Relation :
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefRelationAccount(), true, true);
                break;

            case smmNumbSeqUsed::Activity :
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefActivityNumber(), true, true);
                break;

            case smmNumbSeqUsed::Customer :
                numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustAccount(), true, true);
                break;

            case smmNumbSeqUsed::RelationJournalId :
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefRelationJournalId(), true, true);
                break;

            case smmNumbSeqUsed::ParmId :
                numberSeq = NumberSeq::newGetNum(smmParameters::numBusRelSectorKeyId(), true);
                break;

            case smmNumbSeqUsed::EmailMemberId :
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefEmailMemberId(), true, true);
                break;

            case smmNumbSeqUsed::Vendor :
                numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendAccount(), true, true);
                break;

            case smmNumbSeqUsed::EncyclopediaItemId:
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefEncyclopediaItemId(),true,true);
                break;

            case smmNumbSeqUsed::SalesUnitMemberId:
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefSalesUnitMemberId(), true, true);
                break;

            case smmNumbSeqUsed::CallListId:
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefCallListId(), true, true);
                break;

            case smmNumbSeqUsed::LeadId :
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefLeadId(), true, true);
                break;
            case smmNumbSeqUsed::OpportunityId :
                numberSeq = NumberSeq::newGetNum(smmParameters::numRefOpportunityId(), true, true);
                break;

            case smmNumbSeqUsed::PartyNumber :
                changecompany(DirParameters::find().NumSeqCompanyId)
                {
                    numberSeq = NumberSeq::newGetNum(smmParameters::numRefPartyNumber(), true, true);
                }
                break;

            default :
                break;
        }

        if (numberSeq)
        {
            ttsbegin;
            if (_numbtype == smmNumbSeqUsed::PartyNumber)
            {
                changecompany(DirParameters::find().NumSeqCompanyId)
                {
                    num = numberSeq.num();
                    numberSeq.used();
                }
            }
            else
            {
                num = numberSeq.num();
                numberSeq.used();
            }
            ttscommit;
            return num;
        }
        else
        {
            // Number sequence not defined properly
            throw error(strFmt("@SYS105483",enum2Value(_numbtype)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhoneInboundActivityType</Name>
				<Source><![CDATA[
    public static smmActivityPhaseId getPhoneInboundActivityType()
    {
        return smmParametersTable::find().PhoneInboundActivityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhoneOutboundActivityType</Name>
				<Source><![CDATA[
    public static smmActivityPhaseId getPhoneOutboundActivityType()
    {
        return smmParametersTable::find().PhoneOutboundActivityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTMActivityCallBackPhase</Name>
				<Source><![CDATA[
    public static smmActivityPhaseId getTMActivityCallBackPhase()
    {
        return smmParametersTable::find().tmCallBackActivityPhase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTMActivityCallBackType</Name>
				<Source><![CDATA[
    public static smmActivityPhaseId getTMActivityCallBackType()
    {
        return smmParametersTable::find().tmCallbackActivityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTMCallBackActivityPurpose</Name>
				<Source><![CDATA[
    public static smmActivityPurpose getTMCallBackActivityPurpose()
    {
        return smmParametersTable::find().tmCallBackActivityPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberSequenceManual</Name>
				<Source><![CDATA[
    public static boolean isNumberSequenceManual(ExtendedTypeId _dataTypeId)
    {
        NumberSequenceReference  numberSeqReference;
        NumberSequenceTable      numberSequenceTable;
        ExtendedTypeId           extendedTypeId = _dataTypeId;

        if (extendedTypeId)
        {
            numberSeqReference = NumberSeqReference::findReference(extendedTypeId);

            if (numberSeqReference)
            {
                numberSequenceTable = NumberSequenceTable::find(numberSeqReference.NumberSequenceId);

                if (numberSequenceTable)
                {
                    return numberSequenceTable.numAllowEdit();
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAction</Name>
				<Source><![CDATA[
    public static boolean logAction(smmLogAction _action)
    {
        switch (_action)
        {
            case smmLogAction::insert :
                return(smmParametersTable::find().LogInsert ?  true :  false);

            case smmLogAction::update :
                return(smmParametersTable::find().LogUpdate != smmTransLogUpdateAction::None ?  true :  false);

            case smmLogAction::delete :
                return(smmParametersTable::find().LogDelete ?  true :  false);

            default                   :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFromDate</Name>
				<Source><![CDATA[
    public static utcdatetime logFromDate()
    {
        return datetobeginUtcDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())-smmParametersTable::find().TransLogInterval,DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTable</Name>
				<Source><![CDATA[
    public static boolean logTable(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(smmBusRelTable)       :
                return(smmParametersTable::find().LogBusRel ?  true :  false);

            case tableNum(smmActivities)        :
            case tableNum(smmActivityParentLinkTable) :
                return(smmParametersTable::find().LogActivities ?  true :  false);

            case tableNum(ContactPerson)        :
                return(smmParametersTable::find().LogContactPerson ?  true :  false);

            case tableNum(CustTable)            :
                return(smmParametersTable::find().LogCustTable ?  true :  false);

            case tableNum(CustTrans)            :
                return(smmParametersTable::find().LogCustTrans ?  true :  false);

            case tableNum(VendTable)            :
                return(smmParametersTable::find().LogVendTable ?  true :  false);

            case tableNum(VendTrans)            :
                return(smmParametersTable::find().LogVendTrans ?  true :  false);

            case tableNum(SalesTable)           :
                return(smmParametersTable::find().LogSalesTable ?  true :  false);

            case tableNum(SalesQuotationTable)  :
                return(smmParametersTable::find().LogQuotationTable ?  true :  false);

            case tableNum(DocuRef)              :
                return(smmParametersTable::find().LogDocuRef ?  true :  false);

            case tableNum(smmMailings)          :
                return(smmParametersTable::find().LogMailings ? true : false);

            case tableNum(smmCampaignTable)     :
                return(smmParametersTable::find().LogCampaignTable ? true : false);

            case tableNum(smmTMCallListTable)   :
                return(smmParametersTable::find().LogTMCallListTable ? true : false);

            case tableNum(smmLeadTable)   :
                return(smmParametersTable::find().LogLeadTable ? true : false);

            case tableNum(smmOpportunityTable)   :
                return(smmParametersTable::find().LogOpportunity ? true : false);

            case tableNum(CaseDetail)       :
            case tableNum(CaseDetailBase)   :
                return(smmParametersTable::find().LogCaseDetail ? true : false);

            default                             :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logToDate</Name>
				<Source><![CDATA[
    public static utcdatetime logToDate()
    {
        return datetoendUtcDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUpdate</Name>
				<Source><![CDATA[
    public static smmTransLogUpdateAction logUpdate()
    {
        return smmParametersTable::find().LogUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    public static NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::CRM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numBusRelSectorKeyId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numBusRelSectorKeyId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmBusRelSectorKeyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefActivityNumber</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefActivityNumber()
    {
        return smmActivities::numRefActivityNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefBusRelAccount</Name>
				<Source><![CDATA[
    public static NumberSequenceReference  numRefBusRelAccount()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmBusRelAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefCallListId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefCallListId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmTMCallListID));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefCampaignId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefCampaignId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmCampaignId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefEmailMemberId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefEmailMemberId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmEmailMemberId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefEncyclopediaItemId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefEncyclopediaItemId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmEncyclopediaItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefLeadId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefLeadId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmLeadId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefOpportunityId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference  numRefOpportunityId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmOpportunityId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefPartyNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference for the party number.
    /// </summary>
    /// <returns>
    /// The number sequence reference.
    /// </returns>
    public static NumberSequenceReference  numRefPartyNumber()
    {
        NumberSequenceReference numberSequenceReference;

        changecompany(DirParameters::find().NumSeqCompanyId)
        {
            numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(DirPartyNumber));
        }
        return numberSequenceReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefRelationAccount</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefRelationAccount()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmRelationAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefRelationJournalId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefRelationJournalId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmRelationJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefSalesUnitMemberId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefSalesUnitMemberId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(smmSalesUnitMemberID));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpportunityForQuote</Name>
				<Source><![CDATA[
    public static boolean updateOpportunityForQuote(QuotationType _quotationType)
    {
        smmParametersTable  smmParametersTable = smmParametersTable::find();
        FieldId             fieldId;

        switch (_quotationType)
        {
            case QuotationType::Sales :
                fieldId = fieldNum(smmParametersTable, UpdateOpportunityForSalesQuotation);
                break;
            case QuotationType::Project :
                fieldId = fieldNum(smmParametersTable, UpdateOpportunityForProjectQuotation);
                break;
            default :
                return false;
        }

        if (fieldId)
        {
            if (smmParametersTable.(fieldId) == smmUpdateOpportunityOptions::Never)
            {
                return false;
            }
            if (smmParametersTable.(fieldId) == smmUpdateOpportunityOptions::Prompt)
            {
                // Do you want to update the associated opportunity?
                if (Box::yesNo("@SYS112714", DialogButton::Yes, "@SYS112715") == DialogButton::No)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>