<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMCreatePickingListBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdAsBuiltBOMCreatePickingListBuilder
{
    private ProdJournalTransData    prodJournalTransData;
    private ProdBOM                 prodBOM;
    private ProdJournalBOM          prodJournalBOM;
    private ProdFlushingPrincipBOM  flushingPrinciple; 
    private InventTransId           productLotId;
    private ProdAsBuiltBOMMatchId   matchId;
    private InventDimId             productInventDimId;
    private InventDimId             pickInventDimId;
    private boolean                 isEndJob;
    private boolean                 isPickingListDerivedJournal;
    private boolean                 isAutoPick;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setProdJournalTransData</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setProdJournalTransData(ProdJournalTransData _prodJournalTransData)
    {
        prodJournalTransData = _prodJournalTransData;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdBOM</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setProdBOM(ProdBOM _prodBOM)
    {
        prodBOM = _prodBOM;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdJournalBOM</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        prodJournalBOM = _prodJournalBOM;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFlushingPrinciple</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setFlushingPrinciple(ProdFlushingPrincipBOM _flushingPrinciple)
    {
        flushingPrinciple = _flushingPrinciple;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductLot</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setProductLot(InventTransId _productLotId)
    {
        productLotId = _productLotId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductInventDimId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setProductInventDimId(InventDimId _productInventDimId)
    {
        productInventDimId = _productInventDimId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setMatchId(ProdAsBuiltBOMMatchId _matchId)
    {
        matchId = _matchId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsEndJob</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setIsEndJob(boolean _isEndJob)
    {
        isEndJob = _isEndJob;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsPickingListDerivedJournal</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setIsPickingListDerivedJournal(boolean _isPickingListDerivedJournal)
    {
        isPickingListDerivedJournal = _isPickingListDerivedJournal;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsAutoPick</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setIsAutoPick(boolean _isAutoPick)
    {
        isAutoPick = _isAutoPick;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMCreatePickingListBuilder setInventDimId(InventDimId _pickInventDimId)
    {
        pickInventDimId = _pickInventDimId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    internal Query createQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsComponentLotAssociation = query.addDataSource(tableNum(ProdAsBuiltBOMComponentLotAssociation));
        qbdsComponentLotAssociation.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, ReferenceId)).value(queryValue(prodBOM.ProdId));
        qbdsComponentLotAssociation.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, InventTransId)).value(queryValue(prodBOM.InventTransId));
        qbdsComponentLotAssociation.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, ItemId)).value(queryValue(prodBOM.ItemId));
        qbdsComponentLotAssociation.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, IsCompleted)).value(queryValue(NoYes::No));

        QueryBuildDataSource qbdsProductLotAssociation = qbdsComponentLotAssociation.addDataSource(tableNum(ProdAsBuiltBOMProductLotAssociation));
        qbdsProductLotAssociation.joinMode(JoinMode::ExistsJoin);
        qbdsProductLotAssociation.relations(true);

        qbdsProductLotAssociation.addLink(fieldNum(ProdAsBuiltBOMComponentLotAssociation, ReferenceId), fieldNum(ProdAsBuiltBOMProductLotAssociation, ReferenceId));
        qbdsProductLotAssociation.addLink(fieldNum(ProdAsBuiltBOMComponentLotAssociation, MatchId), fieldNum(ProdAsBuiltBOMProductLotAssociation, MatchId));

        qbdsProductLotAssociation.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, IsActive)).value(queryValue(NoYes::Yes));
        qbdsProductLotAssociation.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, IsCompleted)).value(queryValue(NoYes::No));

        this.tryResolveProductTrackingDimensions(qbdsProductLotAssociation);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveProductTrackingDimensions</Name>
				<Source><![CDATA[
    private void tryResolveProductTrackingDimensions(QueryBuildDataSource _qbdsProductLotAssociation)
    {        
        if (matchId)
        {
            _qbdsProductLotAssociation.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, MatchId)).value(queryValue(matchId));
            return;
        }

        // a picking list is created & posted from RAF parm line
        if (productLotId && productInventDimId)        
        {
            this.addPredicateProdReportFinishedTrackingDimensions(_qbdsProductLotAssociation);
            return;
        }
        
        // a derived picking list is created & posted from route/job card/RAF journal line
        if (isPickingListDerivedJournal)               
        {
            ProdJournalRoute prodJournalRoute;
            ProdJournalRoute prodJournalRouteReportFinished;

            // check if last op is reporting as finished granular tracking dimensions for the produced item
            select firstonly ProdInventDimId
                from prodJournalRouteReportFinished
                where prodJournalRouteReportFinished.ProdId  == prodJournalBOM.ProdId
                   && prodJournalRouteReportFinished.ProdReportFinished
                   && prodJournalRouteReportFinished.JobType == RouteJobType::Process
            exists join prodJournalRoute
                where prodJournalRoute.ProdId                == prodJournalBOM.ProdId
                   && prodJournalRoute.ProdPickListJournalId == prodJournalBOM.JournalId
                   && prodJournalRoute.ProdId                == prodJournalRouteReportFinished.ProdId
                   && prodJournalRoute.JobType               == prodJournalRouteReportFinished.JobType;

            if (prodJournalRouteReportFinished.ProdInventDimId)
            {
                productLotId       = prodJournalBOM.prodTable().InventTransId;
                productInventDimId = prodJournalRouteReportFinished.ProdInventDimId;
                this.addPredicateProdReportFinishedTrackingDimensions(_qbdsProductLotAssociation);
                return;
            }

            ProdJournalProd prodJournalProd;

            select firstonly InventTransId, InventDimId
                from prodJournalProd
                where prodJournalProd.ProdId                == prodJournalBOM.ProdId
                   && prodJournalProd.ProdPickListJournalId == prodJournalBOM.JournalId;

            if (prodJournalProd.InventDimId)
            {
                productLotId        = prodJournalProd.InventTransId;
                productInventDimId  = prodJournalProd.InventDimId;
                this.addPredicateProdReportFinishedTrackingDimensions(_qbdsProductLotAssociation);
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPredicateProdReportFinishedTrackingDimensions</Name>
				<Source><![CDATA[
    private void addPredicateProdReportFinishedTrackingDimensions(QueryBuildDataSource _qbdsProductLotAssociation)
    {
        if (productLotId)
        {
            _qbdsProductLotAssociation.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, InventTransId)).value(queryValue(productLotId));
        }

        InventDim productInventDim = InventDim::find(productInventDimId);
        
        // granular SN/BN is reported as finished => find matched product association/s
        if (productInventDim.InventSerialId)
        {
            _qbdsProductLotAssociation.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, SerialNumberId)).value(queryValue(productInventDim.InventSerialId));
        }

        if (productInventDim.InventBatchId)
        {
            _qbdsProductLotAssociation.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, BatchNumberId)).value(queryValue(productInventDim.InventBatchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingListLine</Name>
				<Source><![CDATA[
    internal void createPickingListLine()
    {
        ProdAsBuiltBOMComponentLotAssociation   componentLotAssociation;
        ProdJournalBOM                          pickingListLineEstimation;
        pickingListLineEstimation.data(prodJournalBOM);

        QueryRun queryRun = new QueryRun(this.createQuery());
        while (queryRun.next())
        {
            componentLotAssociation = queryRun.get(tableNum(ProdAsBuiltBOMComponentLotAssociation));

            // deduct total estimated consumption quantity for each assocition per tracking dimension. If the estimated quantity not fully matched by component association => consume the remaining as usually.
            componentLotAssociation.initPickingListLineFromComponentLotAssociation(prodBOM, prodJournalBOM, pickingListLineEstimation);
            
            if (this.canPick())
            {
                componentLotAssociation.pickComponent();
            }

            prodJournalBOM.insertJournalCreate(prodJournalTransData, prodBOM, isEndJob, componentLotAssociation.InventDimId);
            componentLotAssociation.updateFromPickingListLine(prodJournalBOM);

            if (pickingListLineEstimation.InventConsump <= 0)
            {
                break;
            }
        }

        if (pickingListLineEstimation.InventConsump > 0)
        {
            prodJournalBOM.data(pickingListLineEstimation);
            
            if (isAutoPick && (!WHSInventEnabled::exist(prodBOM.prodTable().ItemId) || isPickingListDerivedJournal))
            {
                prodJournalBOM.pickMaterialFromWarehouse(prodBOM, flushingPrinciple);
            }

            prodJournalBOM.insertJournalCreate(prodJournalTransData, prodBOM, isEndJob, pickInventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPick</Name>
				<Source><![CDATA[
    internal boolean canPick()
    {
        if (EcoResTrackingDimensionGroupItem::isItemActiveSerialAtConsumption(prodJournalBOM.ItemId))
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMCreatePickingListBuilder construct()
    {
        return new ProdAsBuiltBOMCreatePickingListBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>