<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsProposalReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
[RDeferralsProposalFactory(RDeferralsTransType::Receipt, '')]
public class rDeferralsProposalReceipt extends RDeferralsProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines()
    {
        RDeferralsLedgerAccounts rDeferralsLedgerAccounts;
        RDeferralsAmount         rDeferralsAmount;
        LedgerJournalTrans       ledgerJournalTrans;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals;
        TransDate                transDate = runDate;
        container                ledgerAccounts;

        if (! deferralsBook.PostingProfile ||
            RDeferralsTable::find(deferralsBook.DeferralsId).AcquisitionDate > runDate)
            return;

        if (deferralsBook.Status != RDeferralsStatus::Scheduled)
            return;

        ttsbegin;
        rDeferralsJournal.createVoucher();

        while select PostValue, DeferralsLedgerDimension, DeferralsOffsetLedgerDimension from rDeferralsLedgerAccounts
            order by AccountCode desc
            where rDeferralsLedgerAccounts.PostingProfile     == deferralsBook.PostingProfile         &&
                  rDeferralsLedgerAccounts.DeferralsTransType == RDeferralsTransType::Receipt         &&
                  ((rDeferralsLedgerAccounts.AccountCode      == RDeferralsTableGroupAllBook::Table   &&
                    rDeferralsLedgerAccounts.Num              == deferralsBook.DeferralsId)           ||
                   (rDeferralsLedgerAccounts.AccountCode      == RDeferralsTableGroupAllBook::GroupId &&
                    rDeferralsLedgerAccounts.Num              == deferralsBook.DeferralsGroupId)      ||
                   (rDeferralsLedgerAccounts.AccountCode      == RDeferralsTableGroupAllBook::Book    &&
                    rDeferralsLedgerAccounts.Num              == deferralsBook.DeferralsBookId)       ||
                   rDeferralsLedgerAccounts.AccountCode       == RDeferralsTableGroupAllBook::All)
        {
            if (confind(ledgerAccounts, rDeferralsLedgerAccounts.PostValue))
                continue;

            rDeferralsAmount = RDeferralsProposal::roundAmount(deferralsBook,
                                                               deferralsBook.DeferralsAmount);
            if (rDeferralsAmount)
            {
                rDeferralsJournal.createTrans(rDeferralsAmount,
                                              deferralsBook,
                                              transDate,
                                              enum2str(rDeferralsLedgerAccounts.PostValue),
                                              rDeferralsLedgerAccounts.DeferralsLedgerDimension,
                                              offsetDefaultAccount);
                ledgerJournalTrans = rDeferralsJournal.ledgerJournalTrans();
                ledgerJournalTrans_RDeferrals = rDeferralsJournal.ledgerJournalTrans_RDeferrals();

                if (!ledgerJournalTrans.OffsetLedgerDimension)
                {
                    ledgerJournalTrans.parmOffsetLedgerDimension(rDeferralsLedgerAccounts.DeferralsOffsetLedgerDimension ?
                                                             LedgerDimensionFacade::serviceCreateLedgerDimension(rDeferralsLedgerAccounts.DeferralsOffsetLedgerDimension) : 0);
                }
                ledgerJournalTrans.update();

                ledgerAccounts = conins(ledgerAccounts, 1, rDeferralsLedgerAccounts.PostValue);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsTransType</Name>
				<Source><![CDATA[
    public RDeferralsTransType deferralsTransType()
    {
        return RDeferralsTransType::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _runProposal = queryRun)
    {
        _runProposal.query().dataSourceNo(1).findRange(fieldnum(RDeferralsBook, Status)).value(queryValue(RDeferralsStatus::Scheduled));
        super (_runProposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@FixedAssets:FA_EnumElement_TransTypeReceipt");

        this.addCorrectionGroup(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>