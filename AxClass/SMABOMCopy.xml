<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smabomCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class smabomCopy extends RunBase
{
    NumberSeq                   numberSeq;
    SMABOMCopyRefId             bomCopyRefId;
    SMATemplateBOMId            serviceBOMIdnew;
    SMATemplateBOMParentLineId  serviceBOMParentLineIdnew;
    SMATemplateBOMParentLineId  serviceBOMParentLineIdcopy;

    SMAServiceObjectId          objectId;
    SMAServiceObjectRelationId  relationId;
    TransDate                   bomDate;
    ItemId                      itemId;
    EcoResItemConfigurationName configId;
    Integer                     level;
    Integer                     lineNum;
    boolean                     copyHistory;

    #Define.StepProgressTypeItem(1)
    #Define.StepProgressTypeBOM(8)

    #define.CurrentVersion(3)

    #LOCALMACRO.CurrentList
        bomCopyRefId,
        serviceBOMIdnew,
        serviceBOMParentLineIdnew,
        serviceBOMParentLineIdcopy,
        bomDate,
        itemId,
        configId,
        objectId,
        relationId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSwapBetweenCS</Name>
				<Source><![CDATA[
    protected boolean canSwapBetweenCS()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    protected boolean checkParameters()
    {
        NumberSequenceReference numRef;
        boolean                 ret = true;
        if (!serviceBOMIdnew)
        {
            ret = checkFailed(strfmt("@SYS50104",new DictField(tablenum(SMATemplateBOMTable),fieldnum(SMATemplateBOMTable,TemplateBOMId)).label()));
        }

        if (!bomCopyRefId)
        {
            ret = checkFailed(strfmt("@SYS50104",new DictField(tablenum(SMATemplateBOMTable),fieldnum(SMATemplateBOMTable,bomCopyRefId)).label()));
        }

        numRef = SMAParameters::numRefSMATemplateBOMLineId();

        if (!numRef.RecId)
        {
            ret = checkFailed(strfmt("@SYS26274",new DictField(tablenum(SMAServiceBOMTable),fieldnum(SMAServiceBOMTable,ServiceBOMLineId)).label()));
        }
        else if (!numRef.NumberSequenceId)
        {
            ret = checkFailed(strfmt("@SYS26274",SMAParameters::numRefSMATemplateBOMLineId().referenceLabel()));
        }

        SMAServiceBOMTable::checkNumberSeqSetup();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    abstract protected void copy()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySubBOM</Name>
				<Source><![CDATA[
    protected void copySubBOM(SMAServiceBOMTable _bufferNew, Common _bufferSource)
    {
        if (_bufferNew.bomCopyRefId)
            SMABOMCopy::newParameters(_bufferNew.bomCopyRefType,
                                      _bufferNew.bomCopyRefId,
                                      _bufferNew.ServiceBOMId,
                                      _bufferNew.bomCopyRefParentLineId,
                                      _bufferNew.ServiceBOMLineId,
                                      _bufferNew.ObjectId,
                                      _bufferNew.ServiceObjectRelationId,
                                      bomDate,
                                      _bufferNew.ItemId,
                                      _bufferNew.inventDim().ConfigId,
                                      level + 1
                                     ).runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProgressCount</Name>
				<Source><![CDATA[
    abstract protected container getProgressCount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>incProgress</Name>
				<Source><![CDATA[
    protected void incProgress(InventTable _inventTable)
    {
        if (!progress)
        {
            return;
        }

        progress.setText(strfmt("@SYS87002", _inventTable.ItemId, _inventTable.defaultProductName()));

        if (_inventTable.isProducedByDefault())
        {
            progress.incCount(#StepProgressTypeBOM);
        }
        else
        {
            progress.incCount(#StepProgressTypeItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBuffer</Name>
				<Source><![CDATA[
    protected void initBuffer(SMAServiceBOMTable _buffer, Common _source)
    {
        _buffer.clear();
        _buffer.initValue();

        this.initBufferFromCopySource(_buffer,_source);
        this.initBufferKeyFields(_buffer);

        _buffer.initCopyRefFieldsBOM(_source,bomDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBufferFromCopySource</Name>
				<Source><![CDATA[
    abstract protected void initBufferFromCopySource(SMAServiceBOMTable _buffer, Common _source)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBufferKeyFields</Name>
				<Source><![CDATA[
    protected void initBufferKeyFields(SMAServiceBOMTable _buffer)
    {
        lineNum++;

        _buffer.ServiceBOMId            = serviceBOMIdnew;
        _buffer.ServiceBOMParentLineId  = serviceBOMParentLineIdnew;
        _buffer.ServiceBOMLineId        = this.initNumberSeq().num();
        _buffer.LineNum                 = lineNum;
        _buffer.OrigLine                = objectId ? false : true;
        _buffer.ObjectId                = objectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumberSeq</Name>
				<Source><![CDATA[
    private NumberSeq initNumberSeq()
    {
        if (!numberSeq)
        {
            numberSeq = NumberSeq::newGetNum(SMAParameters::numRefSMATemplateBOMLineId());
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProgress</Name>
				<Source><![CDATA[
    void initProgress()
    {
        container c     = this.getProgressCount();
        Integer   cnt   = (conpeek(c,2) * #StepProgressTypeItem) +
                          (conpeek(c,1) * #StepProgressTypeBOM)  +
                           3;

        this.progressInit("@SYS87001",cnt,#AviUpdate);

        progress.setText("@SYS21224");
        progress.setCount(1);
        progress.incCount();
        progress.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordList</Name>
				<Source><![CDATA[
    protected RecordInsertList initRecordList()
    {
        RecordInsertList recordList = new RecordInsertList(tablenum(SMAServiceBOMTable),true);

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMDate</Name>
				<Source><![CDATA[
    public TransDate parmBOMDate(TransDate _bomDate = bomDate)
    {
        bomDate = _bomDate;
        return bomDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigId</Name>
				<Source><![CDATA[
    public EcoResItemConfigurationName parmConfigId(EcoResItemConfigurationName _configId = configId)
    {
        configId = _configId;
        return configId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyHistory</Name>
				<Source><![CDATA[
    public boolean parmCopyHistory(boolean _copyHistory = copyHistory)
    {
        copyHistory = _copyHistory;
        return copyHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    public Integer parmLevel(Integer _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelationId</Name>
				<Source><![CDATA[
    public SMAServiceObjectRelationId parmRelationId(SMAServiceObjectRelationId _relationId = relationId)
    {
        relationId = _relationId;
        return relationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceBOMParentLineId</Name>
				<Source><![CDATA[
    public SMATemplateBOMParentLineId parmServiceBOMParentLineId(SMATemplateBOMParentLineId _serviceBOMParentLineIdnew = serviceBOMParentLineIdnew)
    {
        serviceBOMParentLineIdnew = _serviceBOMParentLineIdnew;
        return serviceBOMParentLineIdnew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceBOMParentLineIdCopy</Name>
				<Source><![CDATA[
    public SMATemplateBOMParentLineId parmServiceBOMParentLineIdCopy(SMATemplateBOMParentLineId _serviceBOMParentLineIdcopy = serviceBOMParentLineIdcopy)
    {
        serviceBOMParentLineIdcopy = _serviceBOMParentLineIdcopy;
        return serviceBOMParentLineIdcopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMABOMCopyRefId</Name>
				<Source><![CDATA[
    public SMABOMCopyRefId parmSMABOMCopyRefId(SMABOMCopyRefId _bomCopyRefId = bomCopyRefId)
    {
        bomCopyRefId = _bomCopyRefId;
        return bomCopyRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMAServiceBOMId</Name>
				<Source><![CDATA[
    public SMATemplateBOMId parmSMAServiceBOMId(SMATemplateBOMId _serviceBOMId = serviceBOMIdnew)
    {
        serviceBOMIdnew = _serviceBOMId;
        return serviceBOMIdnew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMAServiceObjectId</Name>
				<Source><![CDATA[
    public SMAServiceObjectId parmSMAServiceObjectId(SMAServiceObjectId _objectId = objectId)
    {
        objectId = _objectId;
        return objectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (!this.checkParameters())
            {
                throw error("@SYS25904");
            }

            if (level == 0)
            {
                this.initProgress();
            }

            this.copy();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean  ret;
        Integer  version    = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMABOMCopy construct(SMABOMCopyRefType _copyRefType)
    {
        switch (_copyRefType)
        {
            case SMABOMCopyRefType::TemplateBOM:
                return new SMABOMCopy_MasterBOM();

            case SMABOMCopyRefType::BOM         :
                return new SMABOMCopy_BOMProd_BOM();

            case SMABOMCopyRefType::Production  :
                return new SMABOMCopy_BOMProd_Prod();

            default                             :
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // SMA BOM Copy
        return "@SYS87003";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMasterCopy</Name>
				<Source><![CDATA[
    public static SMABOMCopy newMasterCopy(SMATemplateBOMTable _templateBOMTable)
    {
        SMABOMCopy smabomCopy = SMABOMCopy::construct(_templateBOMTable.bomCopyRefType);

        smabomCopy.parmBOMDate(_templateBOMTable.bomDate);
        smabomCopy.parmSMABOMCopyRefId(_templateBOMTable.bomCopyRefId);
        smabomCopy.parmSMAServiceBOMId(_templateBOMTable.TemplateBOMId);
        smabomCopy.parmConfigId(_templateBOMTable.inventDim().ConfigId);
        smabomCopy.parmItemId(_templateBOMTable.ItemId);

        return smabomCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static SMABOMCopy newParameters(
        SMABOMCopyRefType               _bomCopyRefType,                 // Type: MasterBOM, BOM or Production
        SMABOMCopyRefId                 _bomCopyRefId,                   // MasterBOMId, BOMId or ProdId to copy from
        SMATemplateBOMId                _serviceBOMId,                    // MasterBOMId for new lines
        SMATemplateBOMParentLineId      _serviceBOMCopyParentLineId,      // Parent Line ID to copy from (only used when copying from a Master BOm
        SMATemplateBOMParentLineId      _serviceBOMParentLineId,          // Parent Line ID for new lines
        SMAServiceObjectId              _objectId,
        SMAServiceObjectRelationId      _relationId,
        TransDate                       _bomDate,
        ItemId                          _itemId,
        EcoResItemConfigurationName     _configId,
        Level                           _level          = 0,
        boolean                         _copyHistory    = false
        )
    {
        SMABOMCopy smabomCopy = SMABOMCopy::construct(_bomCopyRefType);

        smabomCopy.parmBOMDate(_bomDate);
        smabomCopy.parmConfigId(_configId);
        smabomCopy.parmItemId(_itemId);
        smabomCopy.parmSMABOMCopyRefId(_bomCopyRefId);
        smabomCopy.parmSMAServiceBOMId(_serviceBOMId);
        smabomCopy.parmServiceBOMParentLineIdCopy(_serviceBOMCopyParentLineId);
        smabomCopy.parmServiceBOMParentLineId(_serviceBOMParentLineId);
        smabomCopy.parmLevel(_level);
        smabomCopy.parmSMAServiceObjectId(_objectId);
        smabomCopy.parmRelationId(_relationId);
        smabomCopy.parmCopyHistory(_copyHistory);

        return smabomCopy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>