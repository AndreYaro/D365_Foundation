<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistFormViewProjectExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccDistFormViewProjectExtension</c> class is the project extension to the accounting
///    distribution view
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductRequisition), SourceDocument_ProductRequisition::PurchaseRequisition, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_CustomerInvoice), SourceDocument_CustomerInvoice::CustomerFreeTextInvoice, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ExpenseReport), SourceDocument_ExpenseReport::ExpenseReport, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_EarningStatement), SourceDocument_EarningStatement::EarningStatement, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_PayrollPayStatement), SourceDocument_PayrollPayStatement::PayStatement, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProjectTimesheets), SourceDocument_ProjectTimesheets::Timesheets, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_TravelRequisition), SourceDocument_TravelRequisition::TravelRequisition, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_AdvancedLedgerEntry), SourceDocument_AdvancedLedgerEntry::AdvancedLedgerEntry, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProjAdvancedJournal), SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal, classStr(AccountingDistributionFormView)),
SourceDocumentEnumLiteralClassExtensionAttribute(enumStr(BudgetReservation_SourceDocument_PSN), enumLiteralStr(BudgetReservation_SourceDocument_PSN, BudgetReservation), classStr(AccountingDistributionFormView))]
class AccDistFormViewProjectExtension extends AccDistViewExtension
{
    AccountingDistributionFormView      accountingDistributionFormView;
    AccDistViewModelProjectExtension    accDistViewModelProjectExtension;

    boolean                             isProject;
    boolean                             sourceDocLineCanProcessProject;
    boolean                             sourceDocAmountCanProcessProject;
    boolean                             canEnterActivityNumber;
    boolean                             canEnterSalesPrice;
    boolean                             origLockMainAccountSegment;

    FormDataSource                      projectAccountingDistributionDataSource;
    FormStringControl                   projIdStringControl;
    FormStringControl                   categoryIdStringControl;
    FormFunctionButtonControl           projectButton;

    boolean                             isAccountingDistributionUpdated;
    SourceDocumentLineItem              topParentSourceDocumentLineItem;

    RecId                               sourceDocumentLineRecId;

    private boolean isIntegrationFeatureEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accDistViewModelProjectExtension</Name>
				<Source><![CDATA[
    private AccDistViewModelProjectExtension accDistViewModelProjectExtension()
    {
        if (!accDistViewModelProjectExtension)
        {
            accDistViewModelProjectExtension = accDistViewModelExtension;
        }

        return accDistViewModelProjectExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedAccountingDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changedAccountingDistribution()
    {
        if (isProject)
        {
            this.accDistViewModelProjectExtension().changeProjectAccountingDistribution(accountingDistributionView.parmAccountingDistributionViewModel().parmActiveAccountingDistribution());
            this.initViewForProjectAccountingDistribution();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedLegalEntity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changedLegalEntity()
    {
        if (isProject)
        {
            this.accDistViewModelProjectExtension().modifiedFieldLegalEntity();

            accountingDistributionFormView.parmAccountingDistributionDatasource().forceWrite(true);
            accountingDistributionFormView.parmAccountingDistributionDatasource().refresh();
            accountingDistributionFormView.parmAccountingDistributionDatasource().rereadReferenceDataSources();
            this.parmProjectAccountingDistributionDS().refresh();
            this.parmProjectAccountingDistributionDS().rereadReferenceDataSources();

            this.initViewForProjectAccountingDistribution();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedSourceDocAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changedSourceDocAmount()
    {
        SourceDocumentLineItem activeSourceDocumentLineItem = accountingDistributionView.parmAccountingDistributionViewModel().parmActiveSourceDocumentLineItem();

        if (sourceDocumentLineRecId != activeSourceDocumentLineItem.parmSourceDocumentLine().RecId)
        {
            this.changedSourceDocumentLine();
        }

        sourceDocAmountCanProcessProject =
            (accountingDistributionView.parmAccountingDistributionViewModel().parmActiveSourceDocumentAmount().parmMonetaryAmount() == MonetaryAmount::ExtendedPrice ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedSourceDocumentLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changedSourceDocumentLine()
    {
        SourceDocumentLineItem activeSourceDocumentLineItem = accountingDistributionView.parmAccountingDistributionViewModel().parmActiveSourceDocumentLineItem();
        SourceDocumentHeader sourceDocumentHeader;

        sourceDocumentLineRecId = activeSourceDocumentLineItem.parmSourceDocumentLine().RecId;
        isProject = ProjectSourceDocumentLineItemHelper::isProject(sourceDocumentLineRecId);
        sourceDocLineCanProcessProject = ProjectSourceDocumentLineItemHelper::canProcessProjectFromLineRecId(sourceDocumentLineRecId);
        canEnterActivityNumber = false;
        canEnterSalesPrice = false;
        if (sourceDocLineCanProcessProject)
        {
            sourceDocumentHeader = activeSourceDocumentLineItem.parmSourceDocumentHeader();

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                if (ProjectSourceDocumentLineItemHelper::projTransType(topParentSourceDocumentLineItem) != ProjTransType::Revenue)
                {
                    canEnterActivityNumber = true;
                    canEnterSalesPrice = true;
                }
            }
            else
            {
                if (!(enumName2Id(sourceDocumentHeader.TypeEnumName) == enumNum(SourceDocument_CustomerInvoice) &&
                        sourceDocumentHeader.TypeEnumValue == SourceDocument_CustomerInvoice::CustomerFreeTextInvoice))
                {
                    canEnterActivityNumber = true;
                    canEnterSalesPrice = true;
                }
            }
        }

        if (this.parmProjectAccountingDistributionDS())
        {
            if (isProject)
            {
                this.parmProjectAccountingDistributionDS().linkType(FormLinkType::OuterJoin);
            }
            else
            {
                this.parmProjectAccountingDistributionDS().linkType(FormLinkType::Passive);
            }
            if (isIntegrationFeatureEnabled && enumName2Id(sourceDocumentHeader.TypeEnumName) == enumNum(SourceDocument_ExpenseReport))
            {
                projIdStringControl.visible(false);
                categoryIdStringControl.visible(false);
                projectButton.visible(false);
                projIdStringControl.enabled(false);
                categoryIdStringControl.enabled(false);
                projectButton.enabled(false);
            }
            else
            {
                projIdStringControl.visible(isProject);
                categoryIdStringControl.visible(isProject);
                projectButton.visible(isProject);
                projIdStringControl.enabled(isProject);
                categoryIdStringControl.enabled(isProject);
                projectButton.enabled(isProject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs project budget check in the accounting distribution view closing event.
    /// </summary>
    /// <remarks>
    /// Project budget check is only performed if there is an update on the accounting distributions.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void closingView()
    {
        if (isAccountingDistributionUpdated && topParentSourceDocumentLineItem)
        {
            if (ProjectCommitmentFacade::isProjectBudgetControlEnabled(topParentSourceDocumentLineItem, false))
            {
                ProjectCommitmentFacade::checkProjectBudgets(topParentSourceDocumentLineItem, ProjectCommitmentFacade::suppressMessages(topParentSourceDocumentLineItem), true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting distribution view extension.
    /// </summary>
    public void initialize()
    {
        accountingDistributionFormView = accountingDistributionView;

        super();

        origLockMainAccountSegment = accountingDistributionFormView.parmLedgerDimensionControl().parmLockMainAccountSegment();

        this.initProjectAccountingDistributionDS();
        this.initTopParentSourceDocumentLineItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingView</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initializingView()
    {
        #SubledgerJournal
        #ResAppl
        #define.controlNameProjId('ProjIdStringControl')
        #define.dataMethodProjId('editProjectId')
        #define.controlNameCategoryId('CategoryIdStringControl')
        #define.dataMethodCategoryId('editProjectCategoryId')
        #define.controlNameProjectButtonGroup('ProjectButtonGroup')
        #define.controlNameProjectButton('ProjectButton')

        FormGridControl             accountingDistributions;
        FormControl                 legalEntity;
        FormActionPaneTabControl    actionPaneTab;
        FormButtonGroupControl      projectButtonGroup;

        if (this.parmProjectAccountingDistributionDS())
        {
            accountingDistributions = accountingDistributionFormView.parmFormRun().design().controlName(#controlNameAccountingDistributionsGrid);
            legalEntity = accountingDistributionFormView.parmFormRun().design().controlName(#controlNameDistributionLegalEntity);

            projIdStringControl = accountingDistributions.addControl(FormControlType::String, #controlNameProjId, legalEntity);
            projIdStringControl.dataSource(projectAccountingDistributionDataSource.id());
            projIdStringControl.dataMethod(#dataMethodProjId);
            projIdStringControl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                methodStr(AccDistFormViewProjectExtension, lookupProjId),
                                                this);
            projIdStringControl.registerOverrideMethod(methodStr(FormStringControl, modified),
                                                methodStr(AccDistFormViewProjectExtension, modifiedFieldProjId),
                                                this);
            projIdStringControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                                                methodStr(AccDistFormViewProjectExtension, jumpRefProjId),
                                                this);

            categoryIdStringControl = accountingDistributions.addControl(FormControlType::String, #controlNameCategoryId, projIdStringControl);
            categoryIdStringControl.dataSource(projectAccountingDistributionDataSource.id());
            categoryIdStringControl.dataMethod(#dataMethodCategoryId);
            categoryIdStringControl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                methodStr(AccDistFormViewProjectExtension, lookupCategoryId),
                                                this);
            categoryIdStringControl.registerOverrideMethod(methodStr(FormStringControl, modified),
                                                methodStr(AccDistFormViewProjectExtension, modifiedFieldCategoryId),
                                                this);
            categoryIdStringControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                                                methodStr(AccDistFormViewProjectExtension, jumpRefCategoryId),
                                                this);

            actionPaneTab = accountingDistributionFormView.parmFormRun().design().controlName(#controlNameActionPaneTab);
            projectButtonGroup = actionPaneTab.addControl(FormControlType::ButtonGroup, #controlNameProjectButtonGroup);
            projectButton = projectButtonGroup.addControl(FormControlType::MenuFunctionButton, #controlNameProjectButton);
            projectButton.text("@SYS321182");
            projectButton.buttonDisplay(ButtonDisplay::TextWithImageLeft);
            projectButton.imageLocation(SysImageLocation::EmbeddedResource);
            projectButton.dataSource(accountingDistributionFormView.parmAccountingDistributionDatasource().name());
            projectButton.menuItemName(menuitemDisplayStr(ProjectAccountingDistributionDetail));
            projectButton.normalImage(int2str(#ImageGenerateForm));
            projectButton.menuItemType(MenuItemType::Display);
            projectButton.needsRecord(true);

            projIdStringControl.visible(false);
            categoryIdStringControl.visible(false);
            projectButton.visible(false);
            projIdStringControl.enabled(false);
            categoryIdStringControl.enabled(false);
            projectButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjectAccountingDistributionDS</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initProjectAccountingDistributionDS()
    {
        #define.datasourceNameProjectAccountingDistribution('ProjectAccountingDistribution')

        projectAccountingDistributionDataSource = accountingDistributionFormView.parmFormRun().dataSource(#datasourceNameProjectAccountingDistribution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTopParentSourceDocumentLineItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTopParentSourceDocumentLineItem()
    {
        SourceDocumentLine      callerSourceDocumentLine;

        callerSourceDocumentLine = accountingDistributionView.parmCallerSourceDocumentLine();
        if (callerSourceDocumentLine)
        {
            topParentSourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(callerSourceDocumentLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewForProjectAccountingDistribution</Name>
				<Source><![CDATA[
    private void initViewForProjectAccountingDistribution()
    {
        boolean                 allowEdit;
        boolean                 hasProject;
        SourceDocumentLineItem  localTopParentSourceDocumentLineItem;
        boolean                 lockMainAccountSegment;
        CustBillingCodeVersion  custBillingCodeVersion;

        allowEdit = accountingDistributionFormView.parmAccountingDistributionDatasource().allowEdit() &&
                        sourceDocLineCanProcessProject &&
                        sourceDocAmountCanProcessProject;
        hasProject = (this.accDistViewModelProjectExtension().parmActiveProjectAccountingDistribution().ProjTable ? true : false);
        localTopParentSourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(
            this.parmAccountingDistributionFormView().parmAccountingDistributionViewModel().parmActiveAccountingDistribution().SourceDocumentLine);

        if (hasProject)
        {
            if (localTopParentSourceDocumentLineItem is CustInvoiceLineSourceDocLineItem)
            {
                changecompany (CompanyInfo::findRecId(this.parmAccountingDistributionFormView().parmAccountingDistributionViewModel().parmActiveAccountingDistribution().AccountingLegalEntity).DataArea)
                {
                    lockMainAccountSegment = (CustParameters::find().ProjLedgerAllowEdit ? false : true);
                }
            }
            else
            {
                lockMainAccountSegment = true;
            }
        }
        else
        {
            lockMainAccountSegment = origLockMainAccountSegment;
        }

        accountingDistributionFormView.parmLedgerDimensionControl().parmLockMainAccountSegment(lockMainAccountSegment);
        if (this.parmProjectAccountingDistributionDS())
        {
            if (localTopParentSourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
            {
                // Cannot edit project information within distributions form for project advanced journal lines
                allowEdit = false;
                projIdStringControl.allowEdit(allowEdit);
                categoryIdStringControl.allowEdit(allowEdit);
                projectButton.visible(false);

                // allow entry of dimensions that are marked as being blocked for manual entry
                accountingDistributionFormView.parmLedgerDimensionControl().parmValidateBlockedForManualEntry(false);
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                switch (classIdGet(localTopParentSourceDocumentLineItem))
                {
                    // set the editibility of the project controls based on selected billing code if PS is turned ON and the source document line is from customer invoice.
                    case classNum(CustInvoiceLineSourceDocLineItem):
                        custBillingCodeVersion = ProjectSourceDocumentLineItemHelper::custBillingCodeVersion(localTopParentSourceDocumentLineItem);
                        if (custBillingCodeVersion)
                        {
                            projIdStringControl.allowEdit(allowEdit && custBillingCodeVersion.ProjIdAllowChanges);
                            categoryIdStringControl.allowEdit(allowEdit && hasProject && custBillingCodeVersion.ProjCategoryAllowChanges);
                            allowEdit = allowEdit && custBillingCodeVersion.ProjIdAllowChanges;
                            hasProject = hasProject && custBillingCodeVersion.ProjCategoryAllowChanges;
                        }
                        else
                        {
                            projIdStringControl.allowEdit(allowEdit);
                            categoryIdStringControl.allowEdit(allowEdit && hasProject);
                        }
                        break;

                    case classNum(PurchReqSourceDocLineItem):
                        if (PurchReqLine::findBySourceDocumentLine(accountingDistributionView.parmCallerSourceDocumentLine().RecId).isBudgetReservationLineReferenced())
                        {
                            allowEdit = false;
                        }
                        break;

                    case classNum(PurchOrderLineSourceDocumentLineItem):
                        PurchLine purchLineLocal = PurchLine::findBySourceDocumentLine(accountingDistributionView.parmCallerSourceDocumentLine().RecId);
                        if (purchLineLocal.isBudgetReservationLineReferenced())
                        {
                            allowEdit = false;
                        }
                        if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled()
                            && purchLineLocal.isPurchLineLinkedToItemRequirement())
                        {
                            this.disableAcctDistDataSourceEdit();
                            allowEdit = false;
                        }
                        break;

                    case classNum(VendorInvoiceLineSourceDocLineItem):
                        VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(accountingDistributionView.parmCallerSourceDocumentLine().RecId);

                        if (vendInvoiceInfoLine.isBudgetReservationLineReferenced())
                        {
                            allowEdit = false;
                        }
                        
                        if (vendInvoiceInfoLine.PurchLineRecId
                            && FeatureStateProvider::isFeatureEnabled(AccDistInvoicePurchaseOrderMatchingFeature_PSN::instance()))
                        {
                            VendParameters vendParameters;
                            select firstonly ProjectMatchingRequired_PSN from vendParameters;
                            allowEdit = !vendParameters.ProjectMatchingRequired_PSN;
                            projIdStringControl.allowEdit(allowEdit);
                            categoryIdStringControl.allowEdit(allowEdit);
                        }

                        if (vendInvoiceInfoLine.PurchLineRecId
                            && ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled()
                            && vendInvoiceInfoLine.purchLine().isPurchLineLinkedToItemRequirement())
                        {
                            this.disableAcctDistDataSourceEdit();
                            allowEdit = false;
                        }
                        break;

                    case classNum(BudgetReservationSourceDocumentLineItem_PSN):
                        if (BudgetReservationLine_PSN::findBySourceDocumentLine(accountingDistributionView.parmCallerSourceDocumentLine().RecId).PurchReqLine != 0)
                        {
                            allowEdit = false;
                            accountingDistributionFormView.parmLedgerDimensionControl().enabled(false);
                            accountingDistributionFormView.parmResetDistributionControl().enabled(true);
                        }
                        break;
                }
            }
            else
            {
                projIdStringControl.allowEdit(allowEdit);
                categoryIdStringControl.allowEdit(allowEdit && hasProject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableAcctDistDataSourceEdit</Name>
				<Source><![CDATA[
    private void disableAcctDistDataSourceEdit()
    {
        accountingDistributionFormView.parmAccountingDistributionDatasource().allowEdit(false);
        accountingDistributionFormView.parmAccountingDistributionDatasource().allowDelete(false);
        accountingDistributionFormView.parmAccountingDistributionDatasource().allowCreate(false);
        accountingDistributionFormView.parmAccountingDistributionDatasource().insertAtEnd(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefCategoryId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void jumpRefCategoryId(FormStringControl _categoryIdStringControl)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(ProjCategory), MenuItemType::Display);

        args.lookupRecord(CategoryTable::find(_categoryIdStringControl.text()));
        args.caller(accountingDistributionFormView.parmFormRun());

        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefProjId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void jumpRefProjId(FormStringControl _projIdStringControl)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(ProjTable), MenuItemType::Display);

        args.lookupRecord(ProjTable::find(_projIdStringControl.text()));
        args.caller(accountingDistributionFormView.parmFormRun());

        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCategoryId</Name>
				<Source><![CDATA[
    private void lookupCategoryId(FormStringControl _formStringControl)
    {
        ProjectAccountingDistribution::lookupCategoryId(
                                            _formStringControl,
                                            accountingDistributionFormView.parmAccountingDistributionViewModel().parmActiveAccountingDistribution(),
                                            this.accDistViewModelProjectExtension().parmActiveProjectAccountingDistribution());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjId</Name>
				<Source><![CDATA[
    private void lookupProjId(FormStringControl _formStringControl)
    {
        ProjectAccountingDistribution::lookupProjId(
                                            _formStringControl,
                                            accountingDistributionFormView.parmAccountingDistributionViewModel().parmActiveAccountingDistribution(),
                                            this.accDistViewModelProjectExtension().parmActiveProjectAccountingDistribution());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldCategoryId</Name>
				<Source><![CDATA[
    private boolean modifiedFieldCategoryId(FormStringControl _formStringControl)
    {
        ProjectAccountingDistribution   projectAccountingDistribution;
        RefRecId                        old;
        boolean                         ret;
        ProjCategory                    projCategory;
        ProjCategoryId                  newCategoryId;

        projectAccountingDistribution = this.accDistViewModelProjectExtension().parmActiveProjectAccountingDistribution();
        old = projectAccountingDistribution.ProjCategory;
        newCategoryId = _formStringControl.text();

        ret = _formStringControl.modified();
        if (ret)
        {
            if (newCategoryId)
            {
                changecompany (CompanyInfo::findRecId(this.parmAccountingDistributionFormView().parmAccountingDistributionViewModel().parmActiveAccountingDistribution().AccountingLegalEntity).DataArea)
                {
                    projCategory = ProjCategory::find(newCategoryId);
                    if (!projCategory)
                    {
                        ret = checkFailed(strFmt("@SYS1434", newCategoryId));
                    }
                }
                projectAccountingDistribution.ProjCategory = projCategory.RecId;
            }
            else
            {
                projectAccountingDistribution.ProjCategory = 0;
            }

            ret = ret && this.accDistViewModelProjectExtension().modifiedFieldProjCategory();
            if (!ret)
            {
                projectAccountingDistribution.ProjCategory = old;
            }

            accountingDistributionFormView.parmAccountingDistributionDatasource().forceWrite(true);
            accountingDistributionFormView.parmAccountingDistributionDatasource().refresh();
            accountingDistributionFormView.parmAccountingDistributionDatasource().rereadReferenceDataSources();
            this.parmProjectAccountingDistributionDS().refresh();
            this.parmProjectAccountingDistributionDS().rereadReferenceDataSources();
            this.setAccDistDataSourceActive();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldProjId</Name>
				<Source><![CDATA[
    private boolean modifiedFieldProjId(FormStringControl _formStringControl)
    {
        ProjectAccountingDistribution   projectAccountingDistribution;
        RefRecId                        old;
        boolean                         ret;
        ProjTable                       projTable;
        ProjId                          newProjId;

        projectAccountingDistribution = this.accDistViewModelProjectExtension().parmActiveProjectAccountingDistribution();
        old = projectAccountingDistribution.ProjTable;
        newProjId = _formStringControl.text();

        ret = _formStringControl.modified();
        if (ret)
        {
            if (newProjId)
            {
                changecompany (CompanyInfo::findRecId(this.parmAccountingDistributionFormView().parmAccountingDistributionViewModel().parmActiveAccountingDistribution().AccountingLegalEntity).DataArea)
                {
                    projTable = ProjTable::find(newProjId);
                    if (!projTable)
                    {
                        ret = checkFailed(strFmt("@SYS11217", newProjId));
                    }
                }
                projectAccountingDistribution.ProjTable = projTable.RecId;
            }
            else
            {
                projectAccountingDistribution.ProjTable = 0;
            }

            ret = ret && this.accDistViewModelProjectExtension().modifiedFieldProjTable();
            if (!ret)
            {
                projectAccountingDistribution.ProjTable = old;
            }

            accountingDistributionFormView.parmAccountingDistributionDatasource().forceWrite(true);
            accountingDistributionFormView.parmAccountingDistributionDatasource().refresh();
            accountingDistributionFormView.parmAccountingDistributionDatasource().rereadReferenceDataSources();
            this.parmProjectAccountingDistributionDS().refresh();
            this.parmProjectAccountingDistributionDS().rereadReferenceDataSources();

            this.initViewForProjectAccountingDistribution();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProject</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIsProject()
    {
        return isProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectAccountingDistributionDS</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormDataSource parmProjectAccountingDistributionDS()
    {
        return projectAccountingDistributionDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postChangedSourceDocumentPayroll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the processing of project for the payroll monetary amounts.
    /// </summary>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postChangedSourceDocumentPayroll()
    {
        switch (accountingDistributionView.parmAccountingDistributionViewModel().parmActiveSourceDocumentAmount().parmMonetaryAmount())
        {
            case MonetaryAmount::PayrollCost:
            case MonetaryAmount::PayrollLiability :

                sourceDocAmountCanProcessProject = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectAccountingDistributionAllowEdit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void projectAccountingDistributionAllowEdit(boolean _allowEdit)
    {
        projectAccountingDistributionDataSource.allowEdit(_allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to events of the accounting distribution view extension.
    /// </summary>
    protected void subscribe()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            accountingDistributionView.initializingViewEventHandler += eventhandler(this.initializingView);
            accountingDistributionView.changedSourceDocLineItemEventHandler += eventhandler(this.changedSourceDocumentLine);
            accountingDistributionView.changedSourceDocAmountEventHandler += eventhandler(this.changedSourceDocAmount);
            accountingDistributionView.changedAccDistributionEventHandler += eventhandler(this.changedAccountingDistribution);
            accountingDistributionView.updatedAccDistributionEventHandler += eventhandler(this.updatedAccountingDistribution);
            accountingDistributionView.closingViewEventHandler += eventhandler(this.closingView);
            accountingDistributionView.changedLegalEntityEventHandler += eventhandler(this.changedLegalEntity);
            accountingDistributionFormView.enabledDataSourceEdit += eventhandler(this.projectAccountingDistributionAllowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks whether there is any update on the accounting distributions in the accounting distribution
    /// view updated accounting distribution event.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updatedAccountingDistribution()
    {
        isAccountingDistributionUpdated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postChangedSourceDocumentHandlerPayroll</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AccDistFormViewProjectExtension), methodStr(AccDistFormViewProjectExtension, changedSourceDocAmount))]
    /// <summary>
    /// Enables the processing of project for the payroll monetary amounts.
    /// </summary>
    /// <param name="_args">
    /// The arguments from caller method.
    /// </param>

    public static void postChangedSourceDocumentHandlerPayroll(XppPrePostArgs _args)
    {
        AccDistFormViewProjectExtension     accDistFormViewProjectExtension;

        if (!isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            return;
        }

        accDistFormViewProjectExtension = _args.getThis();
        accDistFormViewProjectExtension.postChangedSourceDocumentPayroll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccDistDataSourceActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current accounting distribution data source as active when the project or
    /// project category are modified on the Accounting Distribution form.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setAccDistDataSourceActive()
    {
        FormDataSource          accountingDistributionDataSource;

        if (accountingDistributionFormView.parmAccountingDistributionDatasource())
        {
            accountingDistributionDataSource = accountingDistributionFormView.parmAccountingDistributionDatasource();
            accountingDistributionDataSource.executeQuery();
            accountingDistributionDataSource.positionToRecord(this.parmAccountingDistributionFormView().parmAccountingDistributionViewModel().parmActiveAccountingDistribution());
            accountingDistributionDataSource.active();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>