<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjRevRecInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>ProjRevRecInstrumentationActivities</c> represents different contexts/activities pertaining to revenue recognition area of project management and accounting.
/// </summary>
internal final class ProjRevRecInstrumentationActivities extends ProjOpsInstrumentationBaseActitivies
{
    private const str ProjOpsRevRecPrefix = 'ProjOpsRevRec.';
    private const str EstimatePost = 'EstimatePost';
    private const str EstimatePostingLoop = 'EstimatePostingLoop';
    private const str UpdateProjControlPeriod = 'UpdateProjControlPeriod';
    private const str EstimateCalculatePercentage = 'EstimateCalculatePercentage';
    private const str EstimateCommitmentScopeFlightDisabled = 'EstimateCommitmentScopeFlightDisabled';
    private const str EstimateCommitmentScopeFlightEnabled = 'EstimateCommitmentScopeFlightEnabled';
    private const str EstimateCreatesSubTasksDistribution = 'EstimateCreatesSubTasksDistribution';
    private const str EstimateCreatesSubTaskExecution = 'EstimateCreateSubTaskExecution';

    // Activity property constants
    internal static const str PostingType = 'PostingType';
    internal static const str PostingType_Post = 'Post';
    internal static const str PostingType_Reverse = 'Reverse';
    internal static const str NumOfEstimateProject = 'NumOfEstimateProject';
    internal static const str ProjControlType = 'ProjControlType';
    internal static const str MaxSubtaskBundleSize = 'MaxSubtaskBundleSize';
    internal static const str NumOfSubtasks = 'NumOfSubTasks';
    internal static const str BatchExecutionGUID = 'BatchExecutionGUID';
    internal static const str BatchSubtasksId = 'BatchSubtasksId';
    internal static const str ProjWIPTableRecId = 'ProjWIPTableRecId';
    internal static const str IsBatchProcessing = 'IsBatchProcessing';
    internal static const str ContractLineBasedRevRec = 'ContractLineBasedRevRec';
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postEstimateContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate posting operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext postEstimateContext()
    {
        return logger.activityContext(this.activity(EstimatePost));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjControlPeriodContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for update project control period operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext updateProjControlPeriodContext()
    {
        return logger.activityContext(this.activity(UpdateProjControlPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePercentageContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate calulate percentage option.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext calculatePercentageContext()
    {
        return logger.activityContext(this.activity(EstimateCalculatePercentage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEstimateLoopContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate posting operation loop.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext postEstimateLoopContext()
    {
        return logger.activityContext(this.activity(EstimatePostingLoop));
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateCommitmentScopeFlightDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate operation when <c>ProjControlPeriodCommitScopeFlight</c> is disabled.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext estimateCommitmentScopeFlightDisabled()
    {
        return logger.activityContext(this.activity(EstimateCommitmentScopeFlightDisabled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateCommitmentScopeFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate operation when <c>ProjControlPeriodCommitScopeFlight</c> is enabled.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext estimateCommitmentScopeFlightEnabled()
    {
        return logger.activityContext(this.activity(EstimateCommitmentScopeFlightEnabled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimateSubTasksDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate operation for creates estimate bath subtasks distribution.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext createEstimateSubTasksDistribution()
    {
        return logger.activityContext(this.activity(EstimateCreatesSubTasksDistribution));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimateSubTasksExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate operation for creates estimate bath subtasks execution.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext createEstimateSubTasksExecution()
    {
        return logger.activityContext(this.activity(EstimateCreatesSubTaskExecution));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postContractLineBasedRevRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate posting operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    internal SysInstrumentationActivityContext postContractLineBasedRevRec()
    {
        return logger.activityContext(this.activity(ContractLineBasedRevRec));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for <c>ProjRevRecInstrumentationActivities</c> object.
    /// </summary>
    /// <param name = "_logger"><c>ProjOpsInstrumentationLogger</c> object.</param>
    /// <returns><c>ProjRevRecInstrumentationActivities</c> instance.</returns>
    internal static ProjRevRecInstrumentationActivities construct(ProjOpsInstrumentationLogger _logger)
    {
        ProjRevRecInstrumentationActivities activities = new ProjRevRecInstrumentationActivities();
        activities.logger = _logger;
        activities.Prefix = ProjOpsRevRecPrefix;
        return activities;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>