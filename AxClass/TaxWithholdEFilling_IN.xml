<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdEFilling_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class is used to process the record for E-Filling feature.
/// </summary>
class TaxWithholdEFilling_IN
{
    str                                     fileHeader, batchHeader, period;
    str                                     deducteeDetail;
    str                                     assessmentYear;
    str                                     path, fullName, designation;
    str                                     financialYear;
    str                                     address;
    str                                     challanDetail;
    str                                     bsrCode, challanNum;
    str                                     correctionFilePath;
    str                                     formNumber;

    int                                     numberOfLinesInFile, numberOfBatches, numberOfChallans, numberOfDeductees;
    int                                     lineCount, challanNumber, fileSeqNumber;
    int                                     batchNumber, lineNumberInFile;
    int                                     totalNumberOfDeductees;
    int                                     lineCountCorrection, numberOfChallansLoc;
    int                                     totalNoofBatches, modifiedChallanCount, batchUpdateIndicator, newChallanCount;
    int                                     challanUpdateIndicator;
    int                                     correctionFile;
    date                                    fromDate;
    date                                    toDate;
    date                                    depositDate;
    real                                    totalDepositAmount;
    real                                    challanTaxWithholdTotal;
    real                                    taxWithholdAmount, taxWithholdTotalAmount, surcharge, peCess;
    real                                    interest, fee, sheCess, otherCharges, totalAmountPaid, totalTaxDeducted, totalTaxDeposited;
    container                               challanData, deducteeData, newdeducteeData, challanDetailsData;
    CompanyInfo                             companyInfo;
    LogisticsPostalAddress                  logisticsPostalAddress;
    VendTable                               vendTable;
    Voucher                                 settledVoucher;
    TaxWithholdComponentGroupRecId_IN       taxWithholdcomponentGroup;
    NoYesId                                 fileTaxWithhold;
    NoYesId                                 fileTaxWithholdCorrection;
    TaxWithholdRegNumberRecId_IN            tanNumber;
    TransDate                               printingDate;
    boolean                                 onlyDeducteePANNumberChanged, deductorDetChanged;
    boolean                                 c1CorrectionTobeDone, c2CorrectionTobeDone, c3CorrectionTobeDone;
    boolean                                 c5CorrectionTobeDone, c9CorrectionTobeDone;
    TaxWithholdPreparationUltiltyName_IN    utilityName;
    TaxWithholdProvisionalReceiptNumber_IN  rrrNumber;
    TaxWithholdPeriodEnd_IN                 periodEnd;
    TaxWithholdCodeType_IN                  taxType;
    TaxWithholdComponentGroupTable_IN       componentGroupTable;
    TaxWithholdAuthorities_IN               taxWithholdAuthorities;
    TaxWithholdType_IN                      taxTypeLoc;
    boolean                                 changeInChallanDetails, changeInDeductorsAddress, responsiblePersonsAddress;
    TaxWithholdStatement_IN                 taxWithholdStatement;
    TaxWithholdComponentStatus_IN           componentStatus;
    container                               challanDetailsNumbers;
    container                               recIdFileHdrNumbers;
    container                               batchRecordNumber;
    TaxInformationLegalEntity_IN            taxInformationLegalEntity;
    LogisticsLocationEntity                 logisticsLocationEntity;
    TaxWithholdReport27AContract            report27AContract;

    LogisticsPostalAddress                  logisticsPostalAddressResponsible;
    str                                     responsibleaddress;
    str                                     responsibleAddressSteet;
    int                                     responsibleAddressLinecount;
    Name                                    responsibleName;
    Email                                   responsibleEmail;
    str                                     responsibleSTDCode;
    Phone                                   responsiblePhoneSubscriber;
    PhoneMobile                             responsibleCellularPhone;
    TransDateTime                           printingDateTime;
    Phone                                   responsibleTelePhone;
    int                                     responsibleStateCode;

    Name                                    deductorName;
    AddressZipCodeId                        deductorZipCode;
    str                                     deductorState;
    str                                     deductorAddressStreet;
    int                                     deductorLineCount;
    Email                                   deductorEmail;
    str                                     deductorSTDCode;
    Phone                                   deductorPhoneSubscriber;
    Phone                                   deductorTelePhone;
    AddressStreet                           deductorStreet;
    str                                     fileHash;
    TextStreamIo                            headerData;

    #TaxWithhold_IN
    #CosNumbers

    #define.7(7)
    #define.8(8)
    #define.15(15)
    #define.EmployerDeductorSTDCode('021')
    #define.STDCode(1)
    #define.SubscriberNumber(2)
    #define.CellularNumber(1)
    #define.ITAct('A')
    #define.DTAA('B')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check and build corrections.
    /// </summary>
    public void buildCorrection()
    {
        int         batchNum;
        boolean     headerDone = false;
        ;

        this.checkForCorrections(tanNumber, taxWithholdStatement, fromDate, toDate, fullName, designation, componentStatus);
        if (totalNoofBatches == 0)
        {
            return;
        }
        else
        {
            ttsbegin;
            numberOfBatches = totalNoofBatches;
            batchNum = 1;
            if (!headerDone)
            {
                this.printFileHeaderCorrection(true);
                this.insertIntoFileHeader(totalNoofBatches);
            }
            if (c1CorrectionTobeDone)
            {
                this.printBatchHeaderCorrection(1);
                c1CorrectionTobeDone = false;
                this.insertIntoBatchHeaderCorrection(batchNum,TaxWithholdCorrectionType_IN::C1);
                this.insertIntoPRNNumber(TaxWithholdCorrectionType_IN::C1, correctionFile);
                batchNum++;
            }
            if (c2CorrectionTobeDone)
            {
                this.printBatchHeaderCorrection(#Two);
                this.insertIntoBatchHeaderCorrection(batchNum, TaxWithholdCorrectionType_IN::C2);
                this.printChallanDetailCorrection(#Two);
                c2CorrectionTobeDone = false;
                this.insertIntoPRNNumber(TaxWithholdCorrectionType_IN::C2, correctionFile);
                batchNum++;
            }
            if (c3CorrectionTobeDone)
            {
                this.printBatchHeaderCorrection(#Three);
                this.insertIntoBatchHeaderCorrection(batchNum,TaxWithholdCorrectionType_IN::C3);
                this.printChallanDetailCorrection(#Three);
                c3CorrectionTobeDone = false;
                this.insertIntoPRNNumber(TaxWithholdCorrectionType_IN::C3, correctionFile);
                batchNum++;
            }
            if (c5CorrectionTobeDone)
            {
                this.printBatchHeaderCorrection(#Five);
                this.insertIntoBatchHeaderCorrection(batchNum,TaxWithholdCorrectionType_IN::C5);
                this.printChallanDetailCorrection(#Five);
                c5CorrectionTobeDone = false;
                this.insertIntoPRNNumber(TaxWithholdCorrectionType_IN::C5, correctionFile);
                batchNum++;
            }
            if (c9CorrectionTobeDone)
            {
                this.printBatchHeaderCorrection(#Nine);
                this.insertIntoBatchHeaderCorrection(batchNum,TaxWithholdCorrectionType_IN::C9);
                this.printChallanDetailCorrection(#Nine);
                c9CorrectionTobeDone = false;
                this.insertIntoPRNNumber(TaxWithholdCorrectionType_IN::C9, correctionFile);
                batchNum++;
            }
            headerDone = true;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInterestOtherChargeAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates other charge amounts interest.
    /// </summary>
    public void calcInterestOtherChargeAmounts()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        CustVendPaymJournalFee  custVendPaymJournalFee;
        VendPaymFee             vendPaymFee;
        ;

        interest        = 0;
        otherCharges    = 0;
        fee             = 0;
        select firstOnly RecId from ledgerJournalTrans
           where ledgerJournalTrans.Voucher == settledVoucher;

        while select FeeId, FeeValue from custVendPaymJournalFee
            where custVendPaymJournalFee.RefRecId   == ledgerJournalTrans.RecId
               && custVendPaymJournalFee.Module     == ModuleCustVend::Vend
        if (custVendPaymJournalFee)
        {
            select TaxWithholdFeeType_IN from vendPaymFee
                where vendPaymFee.FeeId == custVendPaymJournalFee.FeeId;
            if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Interest)
            {
                interest    += custVendPaymJournalFee.FeeValue;
            }
            else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Others)
            {
                otherCharges    += custVendPaymJournalFee.FeeValue;
            }
            else
            {
                fee    += custVendPaymJournalFee.FeeValue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxWithholdAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcutes tax withhold amounts.
    /// </summary>
    public void calcTaxWithholdAmounts()
    {
        TaxWithholdTrans_IN taxWithholdTrans;
        container           taxAmounts = conNull();
        ;

        taxWithholdAmount       = 0;
        taxWithholdTotalAmount  = 0;
        surcharge               = 0;
        peCess                  = 0;

        while select taxWithholdTrans
            where taxWithholdTrans.Authority                    == taxWithholdAuthorities.VendAccount
               && taxWithholdTrans.TaxWithholdComponentGroup    == componentGroupTable.RecId
               && taxWithholdTrans.TransDate                    >= fromDate
               && taxWithholdTrans.TransDate                    <= toDate
               && taxWithholdTrans.LedgerVoucher                == settledVoucher
               && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
               && taxWithholdTrans.ComponentStatus              == componentStatus
        {
            taxAmounts = this.getReportingCodes(taxWithholdTrans);

            taxWithholdAmount       += conPeek(taxAmounts, 1);
            surcharge               += conPeek(taxAmounts, #2);
            peCess                  += conPeek(taxAmounts, #3);
        }
        taxWithholdTotalAmount  += taxWithholdAmount + surcharge + peCess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxWithholdCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax withhold correction.
    /// </summary>
    public void calcTaxWithholdCorrection()
    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        container               taxAmounts = conNull();
        LedgerJournalTrans      ledgerJournalTrans;
        CustVendPaymJournalFee  custVendPaymJournalFee;
        VendPaymFee             vendPaymFee;
        ;

        taxWithholdAmount       = 0;
        taxWithholdTotalAmount  = 0;
        surcharge               = 0;
        peCess                  = 0;
        interest                = 0;
        otherCharges            = 0;
        fee                     = 0;
        if (taxTypeLoc == TaxWithholdType_IN::TDS)
        {
            while select taxWithholdTrans
                where taxWithholdTrans.TransDate            >= fromDate
                   && taxWithholdTrans.TransDate            <= toDate
                   && taxWithholdTrans.TaxWithholdRegNumber == tanNumber
                   && taxWithholdTrans.LineStatus           == ""
                   && taxWithholdTrans.Settled              == false
                   && taxWithholdTrans.ComponentStatus      == componentStatus
                   && taxWithholdTrans.TransactionReversal  == false
                   && taxWithholdTrans.InventRefId          == ""
                   && taxWithholdTrans.TaxType              == taxType
            {
                if (taxWithholdTrans.LedgerVoucher != "")
                {
                    taxAmounts          = this.getReportingCodes(taxWithholdTrans);
                    taxWithholdAmount   += conPeek(taxAmounts, 1);
                    surcharge           += conPeek(taxAmounts, #2);
                    peCess              += conPeek(taxAmounts, #3);
                }
            }

            taxWithholdTotalAmount  += taxWithholdAmount + surcharge + peCess;

            while select LedgerVoucher from taxWithholdTrans
                group by LedgerVoucher
                where taxWithholdTrans.TransDate            >= fromDate
                   && taxWithholdTrans.TransDate            <= toDate
                   && taxWithholdTrans.TaxWithholdRegNumber == tanNumber
                   && taxWithholdTrans.LineStatus           == ""
                   && taxWithholdTrans.Settled              == false
                   && taxWithholdTrans.ComponentStatus      == componentStatus
                   && taxWithholdTrans.TransactionReversal  == false
                   && taxWithholdTrans.InventRefId          == ""
                   && taxWithholdTrans.TaxType              == taxType
            {
                select firstOnly RecId from ledgerJournalTrans
                   where ledgerJournalTrans.Voucher == taxWithholdTrans.LedgerVoucher;

                while select FeeId, FeeValue from custVendPaymJournalFee
                    where custVendPaymJournalFee.RefRecId   == ledgerJournalTrans.RecId
                       && custVendPaymJournalFee.Module     == ModuleCustVend::Vend
                if (custVendPaymJournalFee)
                {
                    select TaxWithholdFeeType_IN from vendPaymFee
                        where vendPaymFee.FeeId == custVendPaymJournalFee.FeeId;
                    if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Interest)
                    {
                        interest    += custVendPaymJournalFee.FeeValue;
                    }
                    else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Others)
                    {
                        otherCharges    += custVendPaymJournalFee.FeeValue;
                    }
                    else
                    {
                        fee    += custVendPaymJournalFee.FeeValue;
                    }

                    taxWithholdTotalAmount += interest + otherCharges + fee;
                }
            }
        }
        else
        {
            while select taxWithholdTrans
                where taxWithholdTrans.TransDate            >= fromDate
                   && taxWithholdTrans.TransDate            <= toDate
                   && taxWithholdTrans.TaxWithholdRegNumber == tanNumber
                   && taxWithholdTrans.LineStatus           == ""
                   && taxWithholdTrans.Settled              == false
                   && taxWithholdTrans.TransactionReversal  == false
                   && taxWithholdTrans.InventRefId          == ""
                   && taxWithholdTrans.TaxType              == taxType
            {
                if (taxWithholdTrans.LedgerVoucher != "")
                {
                    taxAmounts          = this.getReportingCodes(taxWithholdTrans);
                    taxWithholdAmount   += conPeek(taxAmounts, 1);
                    surcharge           += conPeek(taxAmounts, #2);
                    peCess              += conPeek(taxAmounts, #3);
                }
            }

            taxWithholdTotalAmount  += taxWithholdAmount + surcharge + peCess;

            while select LedgerVoucher from taxWithholdTrans
                group by LedgerVoucher
                where taxWithholdTrans.TransDate            >= fromDate
                   && taxWithholdTrans.TransDate            <= toDate
                   && taxWithholdTrans.TaxWithholdRegNumber == tanNumber
                   && taxWithholdTrans.LineStatus           == ""
                   && taxWithholdTrans.Settled              == false
                   && taxWithholdTrans.TransactionReversal  == false
                   && taxWithholdTrans.InventRefId          == ""
                   && taxWithholdTrans.TaxType              == taxType
            {
                select firstOnly RecId from ledgerJournalTrans
                   where ledgerJournalTrans.Voucher == taxWithholdTrans.LedgerVoucher;

                while select FeeId, FeeValue from custVendPaymJournalFee
                    where custVendPaymJournalFee.RefRecId   == ledgerJournalTrans.RecId
                       && custVendPaymJournalFee.Module     == ModuleCustVend::Vend
                if (custVendPaymJournalFee)
                {
                    select TaxWithholdFeeType_IN from vendPaymFee
                        where vendPaymFee.FeeId == custVendPaymJournalFee.FeeId;
                    if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Interest)
                    {
                        interest    += custVendPaymJournalFee.FeeValue;
                    }
                    else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Others)
                    {
                        otherCharges    += custVendPaymJournalFee.FeeValue;
                    }
                    else
                    {
                        fee    += custVendPaymJournalFee.FeeValue;
                    }

                    taxWithholdTotalAmount += interest + otherCharges + fee;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>challanDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Challange details.
    /// </summary>
    /// <param name="_componentGroup">
    /// The component group.
    /// </param>
    /// <param name="_sectionCode">
    /// The section code.
    /// </param>
    public void challanDetails(TaxWithholdComponentGroupRecId_IN _componentGroup,
                               TaxWithholdSectionCode_IN         _sectionCode)
    {
        TaxWithholdSettleTrans_IN   challanInfo;
        TaxWithholdTrans_IN         taxWithholdTrans;
        str                         sectionCode;
        TaxWithholdTable            taxWithholdTable;
        TaxWithholdHead_IN          taxWithholdHead;
        TaxWithholdComponentTable_IN taxWithholdComponentTable;
        #TaxWithhold_IN
        ;

        sectionCode    =  _sectionCode;
        if (numberOfChallans == 0 && _componentGroup )
        {
            challanDetail      = '';
            // Line 1
            challanDetail     += int2str(numberOfLinesInFile);
            // Line 2
            challanDetail     += #Carat +#RecordTypeCD;
            // Line 3
            challanDetail     += #Carat + int2str(batchNumber);
            // Line 4
            challanDetail     += #Carat + int2str(challanNumber);
            // Line 5
            challanDetail     += #Carat + int2str(0);
            // Line 6
            challanDetail     += #Carat +#Yes;
            // Line 7~17
            challanDetail     += strRep(#Carat, #11);
            // Line 18
            challanDetail     += #Carat + date2str(toDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            // Line 19, 20, 21
            challanDetail     += strRep(#Carat,#3);
            // Line 22~27
            challanDetail     += strRep(#Carat + strPoke(subStr(num2str(0.00, 1, #2, 1, 0), 1, #18), #Zero, #16), #6);
            // Line 28
            challanDetail     += #Carat;
            // Line 29~35
            challanDetail     += strRep(#Carat + strPoke(subStr(num2str(0.00, 1, #2, 1, 0), 1, #18), #Zero, #16), #7);
            // Line 36 ~ 39
            challanDetail     += strRep(#Carat,#4);
            // Line 40
            challanDetail     += #Carat + enum2str(challanInfo.MinorHeadCode);
            // Line 41
            challanDetail     += #Carat;

            this.writeToFile(challanDetail);

            if (fileTaxWithhold == NoYes::Yes)
            {
                this.insertIntoChallanDetail(challanInfo,challanTaxWithholdTotal, taxWithholdAmount,surcharge, peCess ,interest , otherCharges, fee);
            }

            numberOfLinesInFile++;
            challanNumber++;
        }
        else
        {
            select TaxWithholdSettlementPeriod_IN from taxWithholdTable
                join RecId from taxWithholdComponentTable
                where taxWithholdComponentTable.RecId                      == taxWithholdTable.TaxWithholdComponent_IN
                    && taxWithholdComponentTable.TaxWithholdComponentGroup == _componentGroup
                    && taxWithholdTable.TaxType_IN                         == taxType;

            select firstOnly TaxWithholdAuthorities from taxWithholdHead
                where taxWithholdHead.RecId == taxWithholdTable.TaxWithholdSettlementPeriod_IN;

            select firstOnly VendAccount from taxWithholdAuthorities
                where taxWithholdAuthorities.TaxType    == taxTypeLoc
                   && taxWithholdAuthorities.RecId      == taxWithholdHead.TaxWithholdAuthorities;

            if (taxTypeLoc == TaxWithholdType_IN::TCS)
            {
                componentStatus = TaxWithholdComponentGroupTable_IN::find(_componentGroup).Status;
            }

            while select taxWithholdTrans
                group by LedgerVoucher asc
                    where taxWithholdTrans.Authority                    == taxWithholdAuthorities.VendAccount
                       && taxWithholdTrans.TaxWithholdComponentGroup    == _componentGroup
                       && taxWithholdTrans.TransDate                    >= fromDate
                       && taxWithholdTrans.TransDate                    <= toDate
                       && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                       && taxWithholdTrans.Settled                      == false
                       && taxWithholdTrans.ComponentStatus              == componentStatus
                       && taxWithholdTrans.LedgerVoucher                != ''
            {
                challanTaxWithholdTotal = 0;
                bsrCode = ''; depositDate = dateNull(); challanNum = '';
                select challanInfo
                    where challanInfo.LedgerVoucher == taxWithholdTrans.LedgerVoucher;
                if (challanInfo)
                {
                    settledVoucher     = taxWithholdTrans.LedgerVoucher;
                    this.calcTaxWithholdAmounts();
                    this.calcInterestOtherChargeAmounts();
                    challanTaxWithholdTotal += taxWithholdAmount + surcharge + peCess + interest + otherCharges + fee;
                    taxWithholdcomponentGroup = _componentGroup;
                    challanDetail             = "";
                    // Line 1
                    challanDetail             += int2str(numberOfLinesInFile);
                    // Line 2
                    challanDetail             += #Carat +#RecordTypeCD;
                    // Line 3
                    challanDetail             += #Carat + int2str(batchNumber);
                    // Line 4
                    challanDetail             += #Carat + int2str(challanNumber);
                    // Line 5
                    challanDetail             += #Carat + int2str(this.getNumOfPartyRecords(settledVoucher,challanInfo.ChallanNumber));

                    // Line 6
                    challanDetail             += #Carat +#No;
                    // Line 7 ~ Line 11
                    challanDetail             += strRep(#Carat, #5);
                    // Line 12
                    if (challanInfo.BookEntry == NoYes::Yes)
                    {
                        challanDetail      += #Carat;
                    }
                    else
                    {
                        challanDetail  += #Carat + subStr(challanInfo.ChallanNumber, 1, #5);
                    }
                    // Line 13
                    challanDetail      += #Carat;
                    // Line 14
                    if (taxInformationLegalEntity.TypeOfDeductor  == TypeOfDeductor_IN::CentralGovernmentA &&
                        challanInfo.BookEntry           == NoYes::Yes)
                    {
                        challanDetail  += #Carat + subStr(challanInfo.ChallanNumber, 1, #9);
                    }
                    else
                    {
                        challanDetail      += #Carat;
                    }
                    // Line 15
                    challanDetail      += #Carat;
                    // Line 16
                    if (challanInfo.BookEntry == NoYes::Yes)
                    {
                        challanDetail  += #Carat;
                    }
                    else
                    {
                        challanDetail  += #Carat + subStr(challanInfo.bsrCode, 1, #7);
                    }
                    // Line 17
                    challanDetail      += #Carat;
                    // Line 18
                    if (challanInfo.BookEntry == NoYes::Yes)
                    {
                        challanDetail      += #Carat + date2str(toDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
                    }
                    else
                    {
                        challanDetail      += #Carat + date2str(challanInfo.ChallanDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
                    }
                    // Line 19, 20, 21
                    challanDetail      += strRep(#Carat, #3);
                    // Line 22
                    challanDetail      += #Carat + strPoke(subStr(num2str(taxWithholdAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 23
                    challanDetail      += #Carat + strPoke(subStr(num2str(surcharge, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 24
                    challanDetail      += #Carat + strPoke(subStr(num2str(peCess, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 25
                    challanDetail      += #Carat + strPoke(subStr(num2str(interest, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 26
                    challanDetail      += #Carat + strPoke(subStr(num2str(otherCharges, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 27
                    challanDetail      += #Carat + strPoke(subStr(num2str(challanTaxWithholdTotal, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 28
                    challanDetail      += #Carat;
                    // Line 29
                    challanDetail      += #Carat + strPoke(subStr(num2str(taxWithholdAmount + surcharge + peCess, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 30
                    challanDetail      += #Carat + strPoke(subStr(num2str(taxWithholdAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 31
                    challanDetail      += #Carat + strPoke(subStr(num2str(surcharge, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 32
                    challanDetail      += #Carat + strPoke(subStr(num2str(peCess, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 33
                    challanDetail      += #Carat + strPoke(subStr(num2str(taxWithholdAmount + surcharge + peCess, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 34
                    challanDetail      += #Carat + strPoke(subStr(num2str(interest, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 35
                    challanDetail      += #Carat + strPoke(subStr(num2str(otherCharges, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 36
                    challanDetail      += #Carat;
                    // Line 37
                    if (taxInformationLegalEntity.TypeOfDeductor == TypeOfDeductor_IN::CentralGovernmentA)
                    {
                        if (challanInfo.BookEntry == NoYes::Yes)
                        {
                            challanDetail     += #Carat + #Yes;
                        }
                        else
                        {
                            challanDetail     += #Carat + #No;
                        }
                    }
                    else
                    {
                        if (challanInfo.BookEntry == NoYes::Yes)
                        {
                            challanDetail     += #Carat + #No;
                        }
                        else
                        {
                            challanDetail     += #Carat + #No;
                        }
                    }
                    // Line 38
                    challanDetail      += #Carat;
                    // Line 39
                    challanDetail      += #Carat + strpoke(substr(num2str(fee, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 40
                    challanDetail      += #Carat + subStr(enum2str(challanInfo.MinorHeadCode), 1, #3);
                    // Line 41
                    challanDetail      += #Carat;

                    this.writeToFile(challanDetail);
                    numberOfLinesInFile++;
                    if (fileTaxWithhold == NoYes::Yes)
                    {
                        this.insertIntoChallanDetail(challanInfo,challanTaxWithholdTotal,taxWithholdAmount,surcharge, peCess ,interest , otherCharges, fee);
                    }
                    this.getDeducteeInformation(_componentGroup, taxWithholdAuthorities.VendAccount, taxWithholdTrans.LedgerVoucher);
                    challanNumber++;

                    totalTaxDeposited  += challanTaxWithholdTotal;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>challanDetailsC9Correction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Challanges details C9 correction.
    /// </summary>
    /// <param name="_voucher">
    /// The instance of the <c>Voucher</c> class.
    /// </param>
    public void challanDetailsC9Correction(Voucher _voucher)
    {
        TaxWithholdSettleTrans_IN           challanDetails;
        TaxWithholdComponentGroupRecId_IN   componentGroup;
        date                                challanDate;
        Integer                             counterI,
                                            challanSerialNum;

        //Test
        container   deducteeDataTest;
        container   recIdFileHdrNumbersTest;
        container   batchRecordNumberTest;
        container   challanDetailsNumbersTest;
        container   challanDetailsDataTest;

        challanDetailsNumbersTest = challanDetailsNumbers;
        batchRecordNumberTest = batchRecordNumber;
        recIdFileHdrNumbersTest = recIdFileHdrNumbers;
        deducteeDataTest = deducteeData;
        challanDetailsDataTest = challanDetailsData;

        #TaxWithhold_IN

        select TaxWithholdComponentGroup, BookEntry, ChallanNumber, bsrCode, ChallanDate, LedgerVoucher from challanDetails
            where challanDetails.LedgerVoucher == _voucher;
        if (taxTypeLoc == TaxWithholdType_IN::TCS)
        {
            componentStatus = TaxWithholdComponentGroupTable_IN::find(challanDetails.TaxWithholdComponentGroup).Status;
        }
        [counterI,componentGroup]   = this.getNumOfPartyRecordsC9Correction(_voucher);
        challanSerialNum            = this.getChallanSerialNum();
        challanDetail           = "";
        // Line 1
        challanDetail           += int2str(lineNumberInFile);
        // Line 2
        challanDetail           += #Carat + #RecordTypeCD;
        // Line 3
        challanDetail           += #Carat + int2str(batchNumber-1);
        // Line 4
        challanDetail           += #Carat + int2str(challanSerialNum);
        // Line 5
        challanDetail           += #Carat + int2str(counterI);

        // Line 6
        challanDetail           += #Carat + #No;
        // Line 7~10
        challanDetail           += strRep(#Carat,#4);
        // Line 11, 12
        if (challanDetails.BookEntry == NoYes::Yes)
        {
            challanDetail += strRep(#Carat, #2);
        }
        else
        {
            challanDetail += #Carat;
            challanDetail += #Carat + subStr(challanDetails.ChallanNumber, 1, #5);
        }
        // Line 13, 14
        if (conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS],taxInformationLegalEntity.TypeOfDeductor) &&
            challanDetails.BookEntry    == NoYes::Yes)
        {
            challanDetail += #Carat;
            challanDetail += #Carat + subStr(challanDetails.TransferVoucherNum, 1, #9);
        }
        else
        {
            challanDetail += strRep(#Carat, #2);
        }
        // Line 15, 16
        if (challanDetails.BookEntry == NoYes::Yes)
        {
            challanDetail += strRep(#Carat, #2);
        }
        else
        {
            challanDetail += #Carat;
            challanDetail += #Carat + subStr(challanDetails.bsrCode, 1, #7);
        }
        // Line 17
        challanDetail += #Carat;
        // Line 18
        if (challanDetails.BookEntry)
        {
            challanDetail      += #Carat + date2str(toDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
        }
        else
        {
            challanDetail      += #Carat + date2str(challanDetails.ChallanDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
        }
        // Line 19, 20, 21
        challanDetail     += strRep(#Carat, #3);
        // Line 22
        challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 23
        challanDetail     += #Carat + strPoke(subStr(num2str(surcharge, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 24
        challanDetail     += #Carat + strPoke(subStr(num2str(peCess, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 25
        challanDetail     += #Carat + strPoke(subStr(num2str(interest, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 26
        challanDetail     += #Carat + strPoke(subStr(num2str(otherCharges, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 27
        challanDetail     += #Carat + strpoke(substr(num2str(taxWithholdAmount + surcharge + peCess + interest + otherCharges + fee, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 28
        challanDetail     += #Carat;
        // Line 29
        challanDetail     += #Carat + strPoke(subStr(num2str((taxWithholdAmount + surcharge + peCess), 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 30
        challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 31
        challanDetail     += #Carat + strPoke(subStr(num2str(surcharge, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 32
        challanDetail     += #Carat + strPoke(subStr(num2str(peCess, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 33
        challanDetail     += #Carat + strPoke(subStr(num2str((taxWithholdAmount + surcharge + peCess), 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 34
        challanDetail     += #Carat + strPoke(subStr(num2str(interest, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 35
        challanDetail     += #Carat + strPoke(subStr(num2str(otherCharges, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 36
        challanDetail     += #Carat;
        // Line 37
        if (conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS],taxInformationLegalEntity.TypeOfDeductor))
        {
            if (challanDetails.BookEntry == NoYes::Yes)
            {
                challanDetail     += #Carat + #Yes;
            }
            else
            {
                challanDetail     += #Carat + #No;
            }
        }
        else
        {
            if (challanDetails.BookEntry == NoYes::Yes)
            {
                 challanDetail     += #Carat + #No;
            }
            else
            {
                 challanDetail     += #Carat + #No;
            }
        }
        // Line 38
        challanDetail     += #Carat;
        // Line 39
        challanDetail     += #Carat + strpoke(substr(num2str(fee, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 40
        challanDetail     += #Carat + subStr(enum2str(challanDetails.MinorHeadCode), 1, #3);
        // Line 41
        challanDetail     += #Carat;

        lineNumberInFile++;
        this.writeToFile(challanDetail);
        challanDate = challanDetails.BookEntry ? toDate : challanDetails.ChallanDate;
        this.insertIntoChallanDetailCorrection(batchNumber-1,
                                                   challanSerialNum,
                                                   challanDetails.ChallanNumber,
                                                   challanDate,
                                                   challanDetails.BookEntry,
                                                   challanDetails.bsrCode,
                                                   (taxWithholdAmount + surcharge + peCess + interest + otherCharges + fee),
                                                   taxWithholdAmount,
                                                   surcharge,
                                                   peCess,
                                                   interest,
                                                   otherCharges,
                                                   challanDetails.LedgerVoucher,
                                                   fee);
        this.getDeducteeInformationC9Correction(componentGroup, _voucher, challanSerialNum);

        totalTaxDeposited   += taxWithholdAmount + surcharge + peCess + interest + otherCharges  + fee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>challanDetailsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if challange details changed.
    /// </summary>
    /// <param name="_tanNumber">
    /// The tan number.
    /// </param>
    /// <returns>
    /// If 'True', the challange details is changed.
    /// </returns>
    public boolean challanDetailsChanged(TaxWithholdRegNumberRecId_IN _tanNumber)
    {
        TaxWithholdSettleTrans_IN           settleTrans, settleTransLoc;
        TaxWithholdChallanDetail_IN         taxWithholdChallanDetail, taxWithholdChallanDetailLoc;
        boolean                             changeInChallan;
        int                                 counterI;
        TaxWithholdComponentGroupTable_IN   componentGroupTableLoc;

        while select LedgerVoucher from settleTrans
            group by LedgerVoucher
            where settleTrans.TaxWithholdRegNumber == _tanNumber
               && settleTrans.TransDate            >= fromDate
               && settleTrans.TransDate            <= toDate
               && settleTrans.TaxType              == taxTypeLoc
        {
            select minOf(CorrectionFile) from taxWithholdChallanDetail
                where taxWithholdChallanDetail.Voucher  == settleTrans.LedgerVoucher;

            select PaidbyBookEntry, ChallanNumber, ChallanDate, bsrCode, ChallanDetailRecordNumber, RecIdFileHdr, BatchRecordNumber from taxWithholdChallanDetailLoc
                where taxWithholdChallanDetailLoc.CorrectionFile    == taxWithholdChallanDetail.CorrectionFile
                   && taxWithholdChallanDetailLoc.Voucher           == settleTrans.LedgerVoucher;

            select TaxWithholdComponentGroup, BookEntry, ChallanNumber, ChallanDate, bsrCode from settleTransLoc
                where settleTransLoc.LedgerVoucher == settleTrans.LedgerVoucher;

            componentGroupTableLoc = TaxWithholdComponentGroupTable_IN::find(settleTransLoc.TaxWithholdComponentGroup);
            if (taxTypeLoc == TaxWithholdType_IN::TDS)
            {
                if (componentGroupTableLoc.Status == componentStatus)
                {
                    if (taxWithholdChallanDetailLoc)
                    {
                        if (taxWithholdChallanDetailLoc.PaidbyBookEntry    != settleTransLoc.BookEntry     ||
                            taxWithholdChallanDetailLoc.ChallanNumber      != settleTransLoc.ChallanNumber ||
                            taxWithholdChallanDetailLoc.ChallanDate        != settleTransLoc.ChallanDate   ||
                            taxWithholdChallanDetailLoc.bsrCode            != settleTransLoc.bsrCode)
                        {
                            changeInChallan     = true;
                            counterI++;
                            challanDetailsData  = conPoke(challanDetailsData, counterI, taxWithholdChallanDetailLoc.ChallanDetailRecordNumber);
                            recIdFileHdrNumbers = conPoke(recIdFileHdrNumbers, counterI, taxWithholdChallanDetailLoc.RecIdFileHdr);
                            batchRecordNumber   = conPoke(batchRecordNumber, counterI, taxWithholdChallanDetailLoc.BatchRecordNumber);
                        }
                    }
                }
            }
            else
            {
                if (taxWithholdChallanDetailLoc)
                {
                    if (taxWithholdChallanDetailLoc.PaidbyBookEntry    != settleTransLoc.BookEntry     ||
                        taxWithholdChallanDetailLoc.ChallanNumber      != settleTransLoc.ChallanNumber ||
                        taxWithholdChallanDetailLoc.ChallanDate        != settleTransLoc.ChallanDate   ||
                        taxWithholdChallanDetailLoc.bsrCode            != settleTransLoc.bsrCode)
                    {
                        changeInChallan     = true;
                        counterI++;
                        challanDetailsData  = conPoke(challanDetailsData, counterI, taxWithholdChallanDetailLoc.ChallanDetailRecordNumber);
                        recIdFileHdrNumbers = conPoke(recIdFileHdrNumbers, counterI, taxWithholdChallanDetailLoc.RecIdFileHdr);
                        batchRecordNumber   = conPoke(batchRecordNumber, counterI, taxWithholdChallanDetailLoc.BatchRecordNumber);
                    }
                }
            }
        }
        return changeInChallan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>challanDetailsCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Challanges details correction.
    /// </summary>
    /// <param name="_correctionType">
    /// The correction type.
    /// </param>
    /// <param name="_challanNumber">
    /// The challange number.
    /// </param>
    public void challanDetailsCorrection(int   _correctionType,
                                         int   _challanNumber)
    {
        TaxWithholdChallanDetail_IN         taxWithholdChallanDetail, taxWithholdChallanDetailLocal;
        TaxWithholdBatchHeader_IN           taxWithholdBatchHeader;
        int                                 counterI, counterJ, counterK;
        container                           tempData = conNull();
        str                                 paidByBookEntry;
        LedgerJournalTrans                  ledgerJournalTrans;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTrans;
        TaxWithholdDeducteeDetail_IN        taxWithholdDeducteeDetail;
        int                                 counterNumbers = 1;
        int                                 challanDetailRecordNumber;
        RefRecId                            recordId;
        int                                 batchHeaderRecordNumber;
        int                                 totalDeducteeNumbers;
        boolean                             checkCorrection, checkCorrectionStatus;
        int                                 correctionNumber;
        TaxWithholdChallanDetail_IN         taxWithholdChallanDetailLoc, taxWithholdChallanDetailLoc1;
        #TaxWithhold_IN

        select maxof(CorrectionFile) from taxWithholdChallanDetailLocal
           where taxWithholdChallanDetailLocal.FromDate                   == fromDate
              && taxWithholdChallanDetailLocal.ToDate                     == toDate
              && taxWithholdChallanDetailLocal.TaxWithholdRegNumber       == tanNumber
              && taxWithholdChallanDetailLocal.FormNumber                 == taxWithholdStatement
              && taxWithholdChallanDetailLocal.ChallanDetailRecordNumber  == _challanNumber;

        select firstonly RecIdFileHdr, PaidbyBookEntry, ChallanDate, bsrCode, Voucher, ChallanNumber,
               TaxWithholdAmount, SurchargeAmount, pEcessAmount, Interest, OtherCharges, TotalDepositAmount
           from taxWithholdChallanDetail
           where taxWithholdChallanDetail.FromDate                    == fromDate
              && taxWithholdChallanDetail.ToDate                      == toDate
              && taxWithholdChallanDetail.TaxWithholdRegNumber        == tanNumber
              && taxWithholdChallanDetail.FormNumber                  == taxWithholdStatement
              && taxWithholdChallanDetail.ChallanDetailRecordNumber   == _challanNumber
              && taxWithholdChallanDetail.CorrectionFile              == taxWithholdChallanDetailLocal.CorrectionFile;

        select firstonly DeductorType from taxWithholdBatchHeader
            where taxWithholdBatchHeader.RecIdFileHdr == taxWithholdChallanDetail.RecIdFileHdr;

        if (taxWithholdChallanDetail)
        {
            if (c3CorrectionTobeDone || c5CorrectionTobeDone || c2CorrectionTobeDone)
            {
                select firstonly BankChequeNum from ledgerJournalTrans
                    where ledgerJournalTrans.Voucher == taxWithholdChallanDetail.Voucher;

                select firstonly TaxWithholdComponentGroup, ChallanNumber, ChallanDate, BookEntry, bsrCode, sum(Amount) from taxWithholdSettleTrans
                    where taxWithholdSettleTrans.LedgerVoucher == taxWithholdChallanDetail.Voucher;

                challanDetail     = "";
                // Line 1
                challanDetail     += int2str(lineNumberInFile);
                // Line 2
                challanDetail     += #Carat + #RecordTypeCD;
                // Line 3
                challanDetail     += #Carat + int2str(batchNumber - 1);
                // Line 4
                challanDetail     += #Carat + int2str(_challanNumber);
                // Line 5
                if (c2CorrectionTobeDone)
                {
                    challanDetail     += #Carat;
                    totalAmountPaid   = taxWithholdSettleTrans.Amount;
                }
                else
                {
                    if (_correctionType == #3)
                    {
                        counterNumbers = 1;
                        for (counterNumbers = 1; counterNumbers <= conLen(challanDetailsNumbers); counterNumbers++)
                        {
                            challanDetailRecordNumber   = conPeek(challanDetailsNumbers, counterNumbers);
                            recordId                    = conPeek(recIdFileHdrNumbers, counterNumbers);
                            batchHeaderRecordNumber     = conPeek(batchRecordNumber, counterNumbers);

                            if (_challanNumber == challanDetailRecordNumber)
                            {
                                while select RecId from taxWithholdDeducteeDetail
                                    where taxWithholdDeducteeDetail.BatchRecordNumber           == batchHeaderRecordNumber
                                       && taxWithholdDeducteeDetail.RecIdFileHdr                == recordId
                                       && taxWithholdDeducteeDetail.ChallanDetailRecordNumber   == challanDetailRecordNumber
                                {
                                    totalDeducteeNumbers++;
                                    checkCorrection = true;
                                }

                                if (checkCorrection == false)
                                {
                                    select firstonly CorrectionFile from taxWithholdChallanDetailLoc
                                        where taxWithholdChallanDetailLoc.BatchRecordNumber           == batchHeaderRecordNumber
                                           && taxWithholdChallanDetailLoc.RecIdFileHdr                == recordId
                                           && taxWithholdChallanDetailLoc.ChallanDetailRecordNumber   == challanDetailRecordNumber;

                                    if (taxWithholdChallanDetailLoc)
                                    {
                                        correctionNumber = taxWithholdChallanDetailLoc.CorrectionFile;
                                        while (correctionNumber >= 0)
                                        {
                                            correctionNumber--;
                                            select firstonly RecId, RecIdFileHdr from taxWithholdChallanDetailLoc1
                                            where taxWithholdChallanDetailLoc1.BatchRecordNumber           == batchHeaderRecordNumber
                                               && taxWithholdChallanDetailLoc1.CorrectionFile              == correctionNumber
                                               && taxWithholdChallanDetailLoc1.ChallanDetailRecordNumber   == challanDetailRecordNumber
                                               && taxWithholdChallanDetailLoc1.FromDate                    == fromDate
                                               && taxWithholdChallanDetailLoc1.ToDate                      == toDate
                                               && taxWithholdChallanDetailLoc1.TaxWithholdRegNumber        == tanNumber
                                               && taxWithholdChallanDetailLoc1.FormNumber                  == taxWithholdStatement;

                                            if (taxWithholdChallanDetailLoc1 && checkCorrectionStatus == false)
                                            {
                                                while select RecId from taxWithholdDeducteeDetail
                                                    where taxWithholdDeducteeDetail.BatchRecordNumber           == batchHeaderRecordNumber
                                                       && taxWithholdDeducteeDetail.RecIdFileHdr                == taxWithholdChallanDetailLoc1.RecIdFileHdr
                                                       && taxWithholdDeducteeDetail.ChallanDetailRecordNumber   == challanDetailRecordNumber
                                                {
                                                    totalDeducteeNumbers ++;
                                                    checkCorrectionStatus = true;
                                                    recIdFileHdrNumbers   = conPoke(recIdFileHdrNumbers, counterNumbers, taxWithholdChallanDetailLoc1.RecIdFileHdr);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (totalDeducteeNumbers)
                    {
                        challanDetail     += #Carat + int2str(totalDeducteeNumbers);
                    }
                    else
                    {
                        challanDetail     += #Carat + int2str(this.getNumOfPartyRecordsCorrection(_challanNumber));
                    }
                }
                // Line 6
                challanDetail     += #Carat +#No;
                // Line 7
                if (c3CorrectionTobeDone)
                {
                    if (challanUpdateIndicator)
                    {
                        challanDetail     += #Carat + int2str(1);
                    }
                    else
                    {
                        challanDetail     += #Carat +#ZeroValue;
                    }
                }
                else
                {
                    challanDetail     += #Carat;
                }
                // Line 8, 9, 10
                challanDetail     += strRep(#Carat, #3);
                // Line 11, 12
                if (taxWithholdChallanDetail.PaidbyBookEntry == NoYes::Yes)
                {
                    challanDetail +=   strRep(#Carat, #2);
                }
                else
                {
                    challanDetail     += #Carat + subStr(taxWithholdChallanDetail.ChallanNumber, 1, #5);
                    if (c3CorrectionTobeDone || c2CorrectionTobeDone)
                    {
                        challanDetail     += #Carat + subStr(taxWithholdChallanDetail.ChallanNumber, 1, #5);
                    }
                    else
                    {
                        challanDetail     += #Carat;
                    }
                }
                // Line 13, 14
                if (conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS],taxWithholdBatchHeader.DeductorType) &&
                    taxWithholdChallanDetail.PaidbyBookEntry   == NoYes::Yes)
                {
                    challanDetail +=   #Carat + subStr(taxWithholdChallanDetail.TransferVoucherNum, 1, #9);
                    if (c3CorrectionTobeDone || c2CorrectionTobeDone)
                    {
                        challanDetail +=   #Carat + subStr(taxWithholdChallanDetail.TransferVoucherNum, 1, #9);
                    }
                    else
                    {
                        challanDetail     += #Carat;
                    }
                }
                else
                {
                    challanDetail +=   strRep(#Carat, #2);
                }
                // Line 15, 16
                if (taxWithholdChallanDetail.PaidbyBookEntry == NoYes::Yes)
                {
                    challanDetail +=   strRep(#Carat, #2);
                }
                else
                {
                    challanDetail     += #Carat + subStr(taxWithholdChallanDetail.bsrCode, 1, #7);
                    if (c3CorrectionTobeDone || c2CorrectionTobeDone)
                    {
                        challanDetail     += #Carat + subStr(taxWithholdChallanDetail.bsrCode, 1, #7);
                    }
                    else
                    {
                        challanDetail     += #Carat;
                    }
                }
                // Line 17
                if (taxWithholdChallanDetail.PaidbyBookEntry == NoYes::Yes)
                {
                    challanDetail      += #Carat + date2str(toDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
                }
                else
                {
                    challanDetail     += #Carat + date2str(taxWithholdChallanDetail.ChallanDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
                }
                // Line 18
                if (c3CorrectionTobeDone || c2CorrectionTobeDone)
                {
                    if (taxWithholdChallanDetail.PaidbyBookEntry == NoYes::Yes)
                    {
                        challanDetail      += #Carat + date2str(toDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
                    }
                    else
                    {
                        challanDetail     += #Carat + date2str(taxWithholdChallanDetail.ChallanDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
                    }
                }
                else
                {
                    challanDetail     += #Carat;
                }
                // Line 19, 20, 21
                challanDetail     += strRep(#Carat, #3);
                // Line 22~ 27
                if (c2CorrectionTobeDone || (c3CorrectionTobeDone && challanUpdateIndicator == 1))
                {
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.TaxWithholdAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.SurchargeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.pEcessAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.Interest, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.OtherCharges, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.TotalDepositAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                }
                else if (c3CorrectionTobeDone && challanUpdateIndicator == 0)
                {
                    challanDetail     += strRep(#Carat, #5);
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.TotalDepositAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                }
                else
                {
                    challanDetail +=   strRep(#Carat, #6);
                }
                // Line 28
                challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.TotalDepositAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
                // Line 29 ~ 37
                if (c3CorrectionTobeDone)
                {
                    // Line 29
                    challanDetail     += #Carat + strPoke(subStr(num2str((0.00), 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 30
                    challanDetail     += #Carat + strPoke(subStr(num2str(0.00, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 32
                    challanDetail     += #Carat + strPoke(subStr(num2str(0.00, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 33
                    challanDetail     += #Carat + strPoke(subStr(num2str(0.00, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 34
                    challanDetail     += #Carat + strPoke(subStr(num2str((0.00), 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 35
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.Interest, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 36
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.OtherCharges, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 37
                    if (!taxWithholdChallanDetail.PaidbyBookEntry && challanUpdateIndicator != 0)
                    {
                        challanDetail     += #Carat + subStr(ledgerJournalTrans.BankChequeNum, 1, #15);
                    }
                    else
                    {
                         challanDetail     += #Carat;
                    }
                    // Line 37
                    if (conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS],taxWithholdBatchHeader.DeductorType) &&
                        taxWithholdChallanDetail.PaidbyBookEntry   == NoYes::Yes)
                    {
                        challanDetail +=   #Carat + #Yes;
                        paidByBookEntry =   #Yes;
                    }
                    else
                    {
                        challanDetail +=  #Carat + #No;
                        paidByBookEntry =   #No;
                    }
                }
                else if (c2CorrectionTobeDone)
                {
                    // Line 29 ~ 33
                    challanDetail +=   strRep(#Carat, #5);
                    // Line 34
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.Interest, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 35
                    challanDetail     += #Carat + strPoke(subStr(num2str(taxWithholdChallanDetail.OtherCharges, 1, #2, 1, 0), 1, #18), #Zero, #16);
                    // Line 36
                    challanDetail     += #Carat;
                    // Line 37
                    if (conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS],taxWithholdBatchHeader.DeductorType) &&
                        taxWithholdChallanDetail.PaidbyBookEntry   == NoYes::Yes)
                    {
                        challanDetail +=   #Carat + #Yes;
                        paidByBookEntry =   #Yes;
                    }
                    else
                    {
                        challanDetail +=  #Carat + #No;
                        paidByBookEntry =   #No;
                    }
                }
                else
                {
                    // Line 29~37
                    challanDetail     += strRep(#Carat, #9);
                }
                // Line 38
                challanDetail     += #Carat;
                // Line 39
                challanDetail     += #Carat + strpoke(substr(num2str(taxWithholdChallanDetail.Fee, 1, #2, 1, 0), 1, #18), #Zero, #16);
                // Line40
                challanDetail     += #Carat + enum2str(taxWithholdSettleTrans.MinorHeadCode);
                // Line 41
                challanDetail     += #Carat;

                lineNumberInFile++;
                this.writeToFile(challanDetail);
                this.insertIntoChallanDetailCorrection(batchNumber-1,
                                                       _challanNumber,
                                                       taxWithholdSettleTrans.ChallanNumber,
                                                       taxWithholdSettleTrans.ChallanDate,
                                                       taxWithholdSettleTrans.BookEntry,
                                                       taxWithholdSettleTrans.bsrCode,
                                                       taxWithholdChallanDetail.TotalDepositAmount,
                                                       taxWithholdChallanDetail.TaxWithholdAmount,
                                                       taxWithholdChallanDetail.SurchargeAmount,
                                                       taxWithholdChallanDetail.pEcessAmount,
                                                       taxWithholdChallanDetail.Interest,
                                                       taxWithholdChallanDetail.OtherCharges,
                                                       taxWithholdChallanDetail.Voucher,
                                                       taxWithholdChallanDetail.Fee);
                tempData = deducteeData;
                counterJ = #3;
                if (_correctionType != #2)
                {
                    while (counterI <= conLen(deducteeData))
                    {
                        counterK = conPeek(tempData, counterJ);
                        if (counterK == _challanNumber)
                        {
                            this.getDeducteeInformationCorrection(_correctionType,
                                                                   conPeek(tempData, counterJ - #2),
                                                                   conPeek(tempData, counterJ - 1),
                                                                   conPeek(tempData, counterJ + 1),
                                                                   _challanNumber,
                                                                   paidByBookEntry);
                        }
                        counterJ += #4;
                        counterI += #4;
                    }
                    if (_correctionType == #3)
                    {
                        if (challanDetailsNumbers)
                        {
                            counterNumbers = 1;
                            for (counterNumbers = 1; counterNumbers <= conLen(challanDetailsNumbers); counterNumbers++)
                            {
                                challanDetailRecordNumber   = conPeek(challanDetailsNumbers, counterNumbers);
                                recordId                    = conPeek(recIdFileHdrNumbers, counterNumbers);
                                batchHeaderRecordNumber     = conPeek(batchRecordNumber, counterNumbers);

                                if (_challanNumber == challanDetailRecordNumber)
                                {
                                    while select RecIdFileHdr, BatchRecordNumber, DeducteeDetailRecordNumber, ChallanDetailRecordNumber from taxWithholdDeducteeDetail
                                        where taxWithholdDeducteeDetail.BatchRecordNumber           == batchHeaderRecordNumber
                                           && taxWithholdDeducteeDetail.RecIdFileHdr                == recordId
                                           && taxWithholdDeducteeDetail.ChallanDetailRecordNumber   == challanDetailRecordNumber
                                    {
                                        this.getDeducteeInformationCorrection(_correctionType,
                                                                               taxWithholdDeducteeDetail.RecIdFileHdr,
                                                                               taxWithholdDeducteeDetail.BatchRecordNumber,
                                                                               taxWithholdDeducteeDetail.DeducteeDetailRecordNumber,
                                                                               taxWithholdDeducteeDetail.ChallanDetailRecordNumber,
                                                                               paidByBookEntry);
                                    }
                                }
                            }
                        }
                    }
                }

                totalTaxDeposited   += taxWithholdChallanDetail.TaxWithholdAmount + taxWithholdChallanDetail.SurchargeAmount + taxWithholdChallanDetail.pEcessAmount + taxWithholdChallanDetail.Interest
                                        + taxWithholdChallanDetail.OtherCharges + taxWithholdChallanDetail.Fee;
                if (c2CorrectionTobeDone)
                {
                    totalTaxDeducted    += taxWithholdChallanDetail.TaxWithholdAmount + taxWithholdChallanDetail.SurchargeAmount
                                        + taxWithholdChallanDetail.pEcessAmount + taxWithholdChallanDetail.Interest + taxWithholdChallanDetail.OtherCharges + taxWithholdChallanDetail.Fee;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeInAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change in address.
    /// </summary>
    /// <param name="_tanNumber">
    /// The instance of the <c>TaxWithholdRegNumberRecId_IN</c> class.
    /// </param>
    /// <param name="_formNumber">
    /// The instance of the <c>TaxWithholdStatement_IN</c> class.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_fullName">
    /// The full name.
    /// </param>
    /// <param name="_designation">
    /// The designation.
    /// </param>
    public void changeInAddress(TaxWithholdRegNumberRecId_IN _tanNumber,
                                TaxWithholdStatement_IN   _formNumber,
                                FromDate                  _fromDate,
                                ToDate                    _toDate,
                                str                       _fullName,
                                str                       _designation)
    {
        TaxWithholdFileHeader_IN        fileHdr;
        TaxWithholdBatchHeader_IN       batchHeaderLoc;
        Integer                         stateCode;

        fileHdr = TaxWithholdEFilling_IN::headerRecord(_tanNumber, _formNumber, _fromDate, _toDate);

        stateCode       = TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddress.State);

        select DeductorAddress, DeductorStateCode, ResponsiblePersonAddress,
               ResponsiblePersonStateCode, DeliveyLocation
           from batchHeaderLoc
           where batchHeaderLoc.RecIdFileHdr == fileHdr.RecId;
        if (batchHeaderLoc.DeductorAddress                    != logisticsPostalAddress.Street  ||
            batchHeaderLoc.DeductorStateCode                  != stateCode                      ||
            batchHeaderLoc.DeliveyLocation                    != logisticsPostalAddress.RecId)
        {
            changeInDeductorsAddress = true;
        }

        if (batchHeaderLoc.ResponsiblePersonAddress           != logisticsPostalAddressResponsible.Street  ||
            batchHeaderLoc.ResponsiblePersonStateCode         != responsibleStateCode              ||
            batchHeaderLoc.DeliveyLocation                    != logisticsPostalAddress.RecId)
        {
            responsiblePersonsAddress = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkeTaxWithholdFiled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks tax withhold field.
    /// </summary>
    /// <returns>
    /// If 'True', the tax withhold field is ready.
    /// </returns>
    public boolean checkeTaxWithholdFiled()
    {
        TaxWithholdFileHeader_IN      taxWithholdFileHeader;

        taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate, toDate, 0);
        if (fileTaxWithhold == NoYes::Yes && taxWithholdFileHeader)
        {
            return true;
        }
        else if (fileTaxWithhold == NoYes::Yes && !taxWithholdFileHeader)
        {
            return false;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for corrections.
    /// </summary>
    /// <param name="_tanNumber">
    /// The instance of the <c>TaxWithholdRegNumberRecId_IN</c> class.
    /// </param>
    /// <param name="_formNumber">
    /// The instance of the <c>TaxWithholdStatement_IN</c> class.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_fullName">
    /// The full name.
    /// </param>
    /// <param name="_designation">
    /// The designation.
    /// </param>
    /// <param name="_componentStatus">
    /// The component status.
    /// </param>
    public void checkForCorrections(TaxWithholdRegNumberRecId_IN   _tanNumber,
                                    TaxWithholdStatement_IN        _formNumber,
                                    FromDate                       _fromDate,
                                    ToDate                         _toDate,
                                    str                            _fullName,
                                    str                            _designation,
                                    TaxWithholdComponentStatus_IN  _componentStatus)
    {
        [onlyDeducteePANNumberChanged, modifiedChallanCount, challanData, deducteeData]
            = TaxWithholdEFilling_IN::deducteeDetailsChanged(_tanNumber,
                                                             _formNumber,
                                                             _fromDate,
                                                             _toDate,
                                                             taxTypeLoc);

        changeInChallanDetails = this.challanDetailsChanged(_tanNumber);

        if (onlyDeducteePANNumberChanged)
        {
            c5CorrectionTobeDone = true;
            totalNoofBatches    += 1;
        }
        else if (modifiedChallanCount >= 1)
        {
            c3CorrectionTobeDone = true;
            totalNoofBatches    += 1;
        }
        if (modifiedChallanCount >= 1 && changeInChallanDetails && !onlyDeducteePANNumberChanged)
        {
            c3CorrectionTobeDone = true;
        }

        deductorDetChanged = TaxWithholdEFilling_IN::deductorDetailsChanged(_tanNumber,
                                                                            _formNumber,
                                                                            _fromDate,
                                                                            _toDate,
                                                                            _fullName,
                                                                            _designation,
                                                                            deductorEmail,
                                                                            deductorTelePhone,
                                                                            responsibleAddress,
                                                                            responsibleStateCode,
                                                                            responsibleEmail,
                                                                            responsibleTelePhone,
                                                                            responsibleName);
        if (deductorDetChanged)
        {
            this.changeInAddress(_tanNumber,
                                 _formNumber,
                                 _fromDate,
                                 _toDate,
                                 _fullName,
                                 _designation);
        }
        if (c3CorrectionTobeDone)
        {
            if (deductorDetChanged)
            {
                batchUpdateIndicator = 1;
            }
            else
            {
                batchUpdateIndicator = 0;
            }
        }
        else if (deductorDetChanged && !changeInChallanDetails)
        {
            c1CorrectionTobeDone = true;
            totalNoofBatches += 1;
        }
        if (c3CorrectionTobeDone)
        {
            if (changeInChallanDetails)
            {
                challanUpdateIndicator = 1;
            }
            else
            {
                challanUpdateIndicator = 0;
            }
        }
        if ((deductorDetChanged && changeInChallanDetails && !modifiedChallanCount)
            || (changeInChallanDetails && !modifiedChallanCount)
            || (changeInChallanDetails && onlyDeducteePANNumberChanged))
        //if (changeInChallanDetails)
        {
            c2CorrectionTobeDone =  true;
            totalNoofBatches += 1;
        }
        if (c2CorrectionTobeDone)
        {
            if (deductorDetChanged)
            {
                batchUpdateIndicator = 1;
            }
            else
            {
                batchUpdateIndicator = 0;
            }
        }
        [newChallanCount, newdeducteeData] = TaxWithholdEFilling_IN::newChallanDeducteeCount(_tanNumber,
                                                                                             _fromDate,
                                                                                             _toDate,
                                                                                             _componentStatus,
                                                                                             taxTypeLoc);
        if (newChallanCount >= 1)
        {
            c9CorrectionTobeDone = true;
            totalNoofBatches += 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats amount.
    /// </summary>
    /// <param name="_amount">
    /// The origin amounts.
    /// </param>
    /// <returns>
    /// The formated amounts.
    /// </returns>
    public str formatAmount(real _amount)
    {
        return strDel(num2str(decRound(_amount, #2), 1, #2, 1, 0),strLen(num2str(decRound(_amount, #2), 1, #2, 1, 0)) - #2, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCompanyStreetName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the company street name.
    /// </summary>
    /// <param name="_string">
    /// The origin street name.
    /// </param>
    /// <returns>
    /// The formated street name.
    /// </returns>
    public str  formatCompanyStreetName(str    _string)
    {
        str         string, tempString, strCmpInfo ;
        str         tempString1 = '';
        boolean     singleLine = true;
        int         counterI, counterJ;
        ;

        string      = _string;
        counterI    = 0;
        if (string == "")
        {
            return "";
        }
        while (counterI <= strLen(string))
        {
            counterJ = strFind(string, #NewLine, counterI+1, strLen(string));
            if (counterJ == 0)
            {
                if (singleLine)
                {
                    return string;
                }
                else
                {
                    strCmpInfo += tempString1;
                    break;
                }
            }
            singleLine  = false;
            tempString  = subStr(string, counterI+1, counterJ-counterI);
            tempString1 = strDel(string, 1, counterJ);
            tempString  = strPoke(tempString, #Comma, counterJ-counterI);
            counterI    = counterJ;
            strCmpInfo  = strCmpInfo + tempString;
        }
        return strCmpInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustDeducteeC9Correction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deductee information C9 correction for adjust transaction.
    /// </summary>
    /// <param name="_componentGroup">
    /// The component group.
    /// </param>
    /// <param name="_origVoucherCon">
    /// The container which store the original transaction voucher.
    /// </param>
    /// <param name="_challanSerialNumber">
    /// The challange serial number.
    /// </param>
    /// <param name="_settldVoucher">
    /// The settled voucher.
    /// </param>
    public void getAdjustDeducteeC9Correction(
        TaxWithholdComponentGroupRecId_IN   _componentGroup,
        Container                           _origVoucherCon,
        Integer                             _challanSerialNumber,
        Voucher                             _settldVoucher)
    {
        Amount                  taxTypeAmount;
        Amount                  surchargeAmount;
        Amount                  eduCessAmount;
        Amount                  totalTaxAmount;
        Amount                  totalAmountLocal;
        container               taxAmounts;
        NatureOfAssessee_IN     natureOfAssessee;
        Name                    name;
        PANStatus_IN            panStatus;
        PANNumber_IN            panNumber;
        PANReferenceNumber_IN   panRefNumber;
        AccountNum              accountNumber,vendAccountNumber;
        container               checkOrigAmounts;
        int                     counterOrigAmounts;

        CustTable                       custTableLocal;
        VendTable                       vendTableLocal;
        TaxWithholdTrans_IN             taxWithholdTransLocal;
        TaxWithholdTrans_IN             taxWithholdTrans;
        TaxInformationCustTable_IN      taxInformationCustTableLocal;
        TaxInformationVendTable_IN      taxInformationVendTableLocal;
        int                             counterVoucherComponentGroup = conLen(_origVoucherCon);

        while select Voucher, LineNum, CustAccount, VendAccount, NatureOfAssessee, pan, Nameofdeductee, TransDate,
                     BookEntry, RateOfDeduction, Reason, AmountOriginMST, SourceTransVoucher from taxWithholdTransLocal
            order by VendAccount, CustAccount, RecId asc
            where   taxWithholdTransLocal.LedgerVoucher             == _settldVoucher
                &&  taxWithholdTransLocal.TaxWithholdComponentGroup == _componentGroup
                &&  taxWithholdTransLocal.TransDate                 >= fromDate
                &&  taxWithholdTransLocal.TransDate                 <= toDate
                &&  taxWithholdTransLocal.TaxWithholdRegNumber      == tanNumber
                &&  taxWithholdTransLocal.ComponentStatus           == componentStatus
                &&  taxWithholdTransLocal.LineStatus                == ''
                &&  taxWithholdTransLocal.SourceTransVoucher        != ''
                &&  taxWithholdTransLocal.SourceTransDate           != dateNull()
        if (!conFind(_origVoucherCon, taxWithholdTransLocal.SourceTransVoucher))
        {
            counterVoucherComponentGroup++;
            _origVoucherCon = conPoke(_origVoucherCon, counterVoucherComponentGroup, taxWithholdTransLocal.SourceTransVoucher);

            taxTypeAmount           = 0;
            surchargeAmount         = 0;
            eduCessAmount           = 0;
            totalAmountLocal        = 0;

            custTableLocal          =  CustTable::find(taxWithholdTransLocal.CustAccount);
            vendTableLocal          =  VendTable::find(taxWithholdTransLocal.VendAccount);

            deducteeDetail      =  "";
            // Line 1
            deducteeDetail      += int2str(lineNumberInFile);
            // Line 2
            deducteeDetail      += #Carat + #RecordTypeDD;
            // Line 3
            deducteeDetail      += #Carat + int2str(batchNumber-1);
            // Line 4
            deducteeDetail      += #Carat + int2str(_challanSerialNumber);
            // Line 5
            deducteeDetail      += #Carat + int2str(numberOfDeductees);
            // Line 6
            deducteeDetail      += #Carat + #Mode;
            // Line 7
            deducteeDetail      += strRep(#Carat,1);
            // Line 8
            if (taxWithholdTransLocal.NatureOfAssessee == NatureOfAssessee_IN::Company)
            {
                deducteeDetail      +=  #Carat + int2str(1);
            }
            else
            {
                deducteeDetail      +=  #Carat + int2str(#Two);
            }
            // Line 9
            deducteeDetail      +=  strRep(#Carat, 1);
            if (custTableLocal)
            {
                taxInformationCustTableLocal = custTableLocal.getTaxInformationCustTable_IN();
                // Line 10
                if (taxInformationCustTableLocal.PanStatus == PANStatus_IN::Received)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxWithholdTransLocal.pan);
                }
                else if (taxInformationCustTableLocal.PanStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxInformationCustTableLocal.PanStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
                // Line 11
                deducteeDetail      +=  strRep(#Carat, 1);
                // Line 12
                if (taxInformationCustTableLocal.PanStatus == PANStatus_IN::Applied)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxInformationCustTableLocal.panReferenceNumber);
                }
                else
                {
                    deducteeDetail      +=  strRep(#Carat, 1);
                }
            }
            else
            {
                taxInformationVendTableLocal = vendTable.getTaxInformationVendTable_IN();
                // Line 10
                if (taxInformationVendTableLocal.panStatus == PANStatus_IN::Received)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxWithholdTransLocal.pan);
                }
                else if (taxInformationVendTableLocal.panStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxInformationVendTableLocal.panStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
                // Line 11
                deducteeDetail      +=  strRep(#Carat, 1);
                // Line 12
                if (taxInformationVendTableLocal.panStatus == PANStatus_IN::Applied)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxInformationVendTableLocal.panReferenceNumber);
                }
                else
                {
                    deducteeDetail      +=  strRep(#Carat, 1);
                }
            }
            // Line 13
            deducteeDetail      +=  #Carat + subStr(taxWithholdTransLocal.Nameofdeductee, 1, #75);

            while select sum(AmountOriginMST), sum(TaxWithholdAmount) from taxWithholdTrans
                group by Voucher, TaxWithholdComponentGroup, TaxWithholdComponent
                where   taxWithholdTrans.LedgerVoucher              == _settldVoucher
                    &&  taxWithholdTrans.TaxWithholdComponentGroup  == _componentGroup
                    &&  taxWithholdTrans.TransDate                  >= fromDate
                    &&  taxWithholdTrans.TransDate                  <= toDate
                    &&  taxWithholdTrans.TaxWithholdRegNumber       == tanNumber
                    &&  taxWithholdTrans.Voucher                    == taxWithholdTransLocal.Voucher
                    &&  taxWithholdTrans.LineNum                    == taxWithholdTransLocal.LineNum
                    &&  taxWithholdTrans.ComponentStatus            == componentStatus
                    &&  taxWithholdTrans.LineStatus                 == ''
            {
                taxAmounts          = this.getReportingCodes(taxWithholdTrans);
                taxTypeAmount       += conPeek(taxAmounts, 1);
                surchargeAmount     += conPeek(taxAmounts, #2);
                eduCessAmount       += conPeek(taxAmounts, #3);
                if (!conFind(checkOrigAmounts, taxWithholdTrans.Voucher))
                {
                    totalAmountLocal    += taxWithholdTrans.AmountOriginMST;
                    counterOrigAmounts++;
                    checkOrigAmounts    = conPoke(checkOrigAmounts, counterOrigAmounts, taxWithholdTrans.Voucher);
                }
            }

            totalTaxAmount  = taxTypeAmount + surchargeAmount + eduCessAmount;
            // Line 14
            deducteeDetail      += #Carat + strPoke(subStr(num2str(taxTypeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 15
            deducteeDetail      += #Carat + strPoke(subStr(num2str(surchargeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 16
            deducteeDetail      += #Carat + strPoke(subStr(num2str(eduCessAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 17
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 18
            deducteeDetail      += strRep(#Carat, 1);
            // Line 19
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 20
            deducteeDetail      += strRep(#Carat, 1);
            // Line 21
            if (formNumber != #27EQ)
            {
                deducteeDetail  += strRep(#Carat, 1);
            }
            else
            {
                deducteeDetail  += #Carat + strPoke(subStr(num2str(totalAmountLocal, 1, #2, 1, 0), 1, #18), #Zero, #16);
            }
            // Line 22
            deducteeDetail      += #Carat + strPoke(subStr(num2str(totalAmountLocal, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 23
            deducteeDetail      += #Carat + date2str(taxWithholdTransLocal.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            // Line 24
            if (!(totalTaxAmount))
            {
                deducteeDetail      += #Carat;
            }
            else
            {
                deducteeDetail      += #Carat + date2str(taxWithholdTransLocal.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            }
            // Line 25
            deducteeDetail      += strRep(#Carat, 1);
            // Line 26
            deducteeDetail      += #Carat + num2str(taxWithholdTransLocal.RateOfDeduction, 1, #4, 1, 0);
            // Line 27
            deducteeDetail      += strRep(#Carat, 1);
            // Line 28
            if (taxWithholdTransLocal.BookEntry)
            {
                deducteeDetail      += #Carat +  #Yes ;
            }
            else
            {
                deducteeDetail      += #Carat +  #No ;
            }
            // Line 29
            deducteeDetail      += strRep(#Carat,1);
            // Line 30
            deducteeDetail      +=  #Carat + subStr(taxWithholdTransLocal.Reason,1,1);
            // Line 31, 32, 33
            deducteeDetail      += strRep(#Carat, #3);

            if (custTableLocal)
            {
                taxInformationCustTableLocal = custTableLocal.getTaxInformationCustTable_IN();
                natureOfAssessee    = taxInformationCustTableLocal.NatureOfAssessee;
                name                = DirPartyTable::findRec(custTableLocal.Party).Name;
                panStatus           = taxInformationCustTableLocal.PanStatus;
                panNumber           = taxInformationCustTableLocal.panNumber;
                panRefNumber        = taxInformationCustTableLocal.panReferenceNumber;
            }
            else
            {
                taxInformationVendTableLocal = vendTableLocal.getTaxInformationVendTable_IN();
                natureOfAssessee    = taxInformationVendTableLocal.NatureOfAssessee;
                vendAccountNumber   = taxWithholdTransLocal.VendAccount;
                name                = DirPartyTable::findRec(vendTableLocal.Party).Name;
                panStatus           = taxInformationVendTableLocal.panStatus;
                panNumber           = taxInformationVendTableLocal.panNumber;
                panRefNumber        = taxInformationVendTableLocal.panReferenceNumber;
            }

            if (totalTaxAmount)
            {
                this.writeToFile(deducteeDetail);
                this.insertIntoDeducteeDetailExtCorrection(_challanSerialNumber,
                                                        numberOfDeductees,
                                                        natureOfAssessee,
                                                        accountNumber,
                                                        vendAccountNumber,
                                                        name,
                                                        panStatus,
                                                        panNumber,
                                                        panRefNumber,
                                                        totalTaxAmount,
                                                        totalTaxAmount,
                                                        batchNumber-1,
                                                        taxTypeAmount,
                                                        surchargeAmount,
                                                        eduCessAmount,
                                                        taxWithholdTransLocal.RateOfDeduction,
                                                        taxWithholdTransLocal.TransDate,
                                                        taxWithholdTransLocal.TransDate,
                                                        taxWithholdTransLocal.SectionCode,
                                                        taxWithholdTransLocal.CertificateNumber,
                                                        taxWithholdTransLocal.Reason,
                                                        taxWithholdTransLocal.TaxApplicability);
                numberOfDeductees++;
                lineNumberInFile++;
                totalNumberOfDeductees++;
            }

            update_recordset taxWithholdTrans
                setting LineStatus  = #Correction
                    where taxWithholdTrans.LedgerVoucher                == _settldVoucher
                       && taxWithholdTrans.TaxWithholdComponentGroup    == _componentGroup
                       && taxWithholdTrans.TransDate                    >= fromDate
                       && taxWithholdTrans.TransDate                    <= toDate
                       && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                       && taxWithholdTrans.SourceTransVoucher           == taxWithholdTransLocal.SourceTransVoucher
                       && taxWithholdTrans.LineNum                      == taxWithholdTransLocal.LineNum
                       && taxWithholdTrans.ComponentStatus              == componentStatus;

            totalAmountPaid     += totalAmountLocal;
            totalTaxDeducted    += totalTaxAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustDeducteeInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deductee information for adjust transactions.
    /// </summary>
    /// <param name="_componentGroup">
    /// The component group.
    /// </param>
    /// <param name="_adjustedVoucherCon">
    /// The container which store the voucher that calculated the adjust tax amount.
    /// </param>
    /// <param name="_vendAccount">
    /// The vend account.
    /// </param>
    /// <param name="_settldVoucher">
    /// The settled voucher.
    /// </param>
    public void getAdjustDeducteeInformation(
        TaxWithholdComponentGroupRecId_IN   _componentGroup,
        Container                           _adjustedVoucherCon,
        AccountNum                          _vendAccount,
        Voucher                             _settldVoucher)
    {
        Amount                  taxTypeAmountLocal;
        Amount                  surchargeAmountLocal;
        Amount                  eduCessAmountLocal;
        Amount                  totalTaxAmount;
        Amount                  totalAmountLocal;
        container               taxAmounts;
        container               checkOrigAmounts;
        int                     counterOrigAmounts;

        TaxWithholdTrans_IN     taxWithholdTransLocal;
        TaxWithholdTrans_IN     taxWithholdTrans;
        int                     counterAdjustedVoucher = conLen(_adjustedVoucherCon);

        while select taxWithholdTransLocal
            order by VendAccount, CustAccount, RecId asc
            where   taxWithholdTransLocal.Authority                 == _vendAccount
                &&  taxWithholdTransLocal.LedgerVoucher             == _settldVoucher
                &&  taxWithholdTransLocal.TaxWithholdComponentGroup == _componentGroup
                &&  taxWithholdTransLocal.TransDate                 >= fromDate
                &&  taxWithholdTransLocal.TransDate                 <= toDate
                &&  taxWithholdTransLocal.TaxWithholdRegNumber      == tanNumber
                &&  taxWithholdTransLocal.Settled                   == false
                &&  taxWithholdTransLocal.InventRefId               == ''
                &&  taxWithholdTransLocal.TransactionReversal       == false
                &&  taxWithholdTransLocal.ComponentStatus           == componentStatus
                &&  taxWithholdTransLocal.SourceTransVoucher        != ''
                &&  taxWithholdTransLocal.SourceTransDate           != dateNull()
        if (!conFind(_adjustedVoucherCon, taxWithholdTransLocal.SourceTransVoucher))
        {
            counterAdjustedVoucher++;
            _adjustedVoucherCon = conPoke(_adjustedVoucherCon, counterAdjustedVoucher, taxWithholdTransLocal.SourceTransVoucher);

            taxTypeAmountLocal      = 0;
            surchargeAmountLocal    = 0;
            eduCessAmountLocal      = 0;
            totalAmountLocal        = 0;

            deducteeDetail      = '';
            // Line 1
            deducteeDetail      += int2str(numberOfLinesInFile);
            // Line 2
            deducteeDetail      += #Carat + #RecordTypeDD;
            // Line 3
            deducteeDetail      += #Carat + int2str(batchNumber);
            // Line 4
            deducteeDetail      += #Carat + int2str(challanNumber);
            // Line 5
            deducteeDetail      += #Carat + int2str(numberOfDeductees);
            // Line 6
            deducteeDetail      += #Carat + #Mode;
            // Line 7
            deducteeDetail      += strRep(#Carat, 1);
            // Line 8
            if (taxWithholdTransLocal.NatureOfAssessee == NatureOfAssessee_IN::Company)
            {
                deducteeDetail      += #Carat + int2str(1);
            }
            else
            {
                deducteeDetail      += #Carat + int2str(#Two);
            }
            // Line 9
            deducteeDetail      += strRep(#Carat, 1);
            // Line 10
            if (taxWithholdTransLocal.PAN != '')
            {
                deducteeDetail      += #Carat + strUpr(taxWithholdTransLocal.PAN);
            }
            else
            {
                if (taxWithholdTransLocal.PANStatus == PANStatus_IN::Invalid || taxWithholdTransLocal.PANStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      += #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      += #Carat + #PANAPPLIED;
                }
            }
            // Line 11
            deducteeDetail      += strRep(#Carat, 1);
            // Line 12
            if (taxWithholdTransLocal.PANStatus == PANStatus_IN::Applied)
            {
                deducteeDetail      += #Carat + strUpr(taxWithholdTransLocal.PANReferenceNumber);
            }
            else
            {
                deducteeDetail      += strRep(#Carat, 1);
            }
            // Line 13
            deducteeDetail      += #Carat + subStr(taxWithholdTransLocal.Nameofdeductee, 1, #75);

            while select sum(AmountOriginMST), sum(TaxWithholdAmount) from taxWithholdTrans
                group by Voucher, TaxWithholdComponentGroup, TaxWithholdComponent
                where   taxWithholdTrans.Authority                  == _vendAccount
                    &&  taxWithholdTrans.LedgerVoucher              == _settldVoucher
                    &&  taxWithholdTrans.TaxWithholdComponentGroup  == _componentGroup
                    &&  taxWithholdTrans.TransDate                  >= fromDate
                    &&  taxWithholdTrans.TransDate                  <= toDate
                    &&  taxWithholdTrans.TaxWithholdRegNumber       == tanNumber
                    &&  (taxWithholdTrans.Voucher                   == taxWithholdTransLocal.Voucher
                    ||  ((taxWithholdTrans.InventRefId              == taxWithholdTransLocal.SalesId
                    ||  taxWithholdTrans.InventRefId                == taxWithholdTransLocal.PurchId)
                    &&  taxWithholdTrans.InventRefId
                    &&  taxWithholdTrans.ReturnVoucher              == taxWithholdTransLocal.Voucher))
                    &&  taxWithholdTrans.ComponentStatus            == componentStatus
            {
                taxAmounts              = this.getReportingCodes(taxWithholdTrans);
                taxTypeAmountLocal      += conPeek(taxAmounts, 1);
                surchargeAmountLocal    += conPeek(taxAmounts, #2);
                eduCessAmountLocal      += conPeek(taxAmounts, #3);
                if (!conFind(checkOrigAmounts, taxWithholdTrans.Voucher))
                {
                    totalAmountLocal    += taxWithholdTrans.AmountOriginMST;
                    counterOrigAmounts++;
                    checkOrigAmounts    = conPoke(checkOrigAmounts, counterOrigAmounts, taxWithholdTrans.Voucher);
                }
            }

            totalTaxAmount = taxTypeAmountLocal + surchargeAmountLocal + eduCessAmountLocal;
            // Line 14
            deducteeDetail      += #Carat + strPoke(subStr(num2str(taxTypeAmountLocal, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 15
            deducteeDetail      += #Carat + strPoke(subStr(num2str(surchargeAmountLocal, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 16
            deducteeDetail      += #Carat + strPoke(subStr(num2str(eduCessAmountLocal, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 17
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 18
            deducteeDetail      += strRep(#Carat, 1);
            // Line 19
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 20, 21
            if (formNumber  != #27EQ)
            {
                deducteeDetail      += strRep(#Carat, #2);
            }
            else
            {
                deducteeDetail      += strRep(#Carat, 1);
                deducteeDetail      += #Carat + strPoke(subStr(num2str(totalAmountLocal, 1, #2, 1, 0), 1, #18), #Zero, #16);
            }
            // Line 22
            deducteeDetail      += #Carat + strPoke(subStr(num2str(totalAmountLocal, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 23
            deducteeDetail      += #Carat + date2str(taxWithholdTransLocal.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            // Line 24
            if (!(totalTaxAmount))
            {
                deducteeDetail      += strRep(#Carat, #2);
            }
            else
            {
                deducteeDetail      += #Carat + date2str(taxWithholdTransLocal.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            }
            // Line 25
            deducteeDetail      += strRep(#Carat, 1);
            // Line 26
            deducteeDetail      += #Carat + num2str(taxWithholdTransLocal.RateOfDeduction, 1, #4, 1, 0);
            // Line 27
            deducteeDetail      += strRep(#Carat, 1);
            // Line 28
            if (taxWithholdTransLocal.BookEntry)
            {
                deducteeDetail      += #Carat + #Yes;
            }
            else
            {
                deducteeDetail      += #Carat + #No;
            }
            // Line 29
            deducteeDetail      += strRep(#carat, 1);
            // Line 30
            deducteeDetail      += #carat + subStr(taxWithholdTransLocal.Reason, 1, 1);
            // Line 31, 32, 33
            deducteeDetail      += strRep(#Carat, #3);

            if (fileTaxWithhold == NoYes::Yes)
            {
                update_recordset taxWithholdTrans
                    setting LineStatus  = #Original
                        where taxWithholdTrans.Authority                    == _vendAccount
                           && taxWithholdTrans.LedgerVoucher                == _settldVoucher
                           && taxWithholdTrans.TaxWithholdComponentGroup    == _componentGroup
                           && taxWithholdTrans.TransDate                    >= fromDate
                           && taxWithholdTrans.TransDate                    <= toDate
                           && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                           && taxWithholdTrans.SourceTransVoucher           == taxWithholdTransLocal.SourceTransVoucher
                           && taxWithholdTrans.LineNum                      == taxWithholdTransLocal.LineNum
                           && taxWithholdTrans.ComponentStatus              == componentStatus;
            }

            if (totalTaxAmount)
            {
                this.writeToFile(deducteeDetail);
                if (fileTaxWithhold == NoYes::Yes)
                {
                    this.insertIntoDeducteeDetail(taxWithholdTransLocal, taxTypeAmountLocal, surchargeAmountLocal, eduCessAmountLocal, totalAmountLocal);
                }
                numberOfDeductees++;
                numberOfLinesInFile++;
                totalNumberOfDeductees++;
            }
            totalAmountPaid     += totalAmountLocal;
            totalTaxDeducted    += taxTypeAmountLocal   + surchargeAmountLocal + eduCessAmountLocal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustNumOfPartyRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Adjust records number.
    /// </summary>
    /// <param name="_origVoucherCon">
    /// The contanier which store the original transaction voucher.
    /// </param>
    /// <param name="_settledVoucher">
    /// The settled voucher.
    /// </param>
    /// <param name="_challanNumber">
    /// The challange number.
    /// </param>
    /// <returns>
    /// The number of adjust records.
    /// </returns>
    public int getAdjustNumOfPartyRecords(
        container                   _origVoucherCon,
        Voucher                     _settledVoucher,
        TaxWithholdChallanNumber_IN _challanNumber)
    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        TaxWithholdTrans_IN     taxWithholdTransLocal;
        container               taxAmounts;
        int                     counterI;
        int                     counterJ;
        Amount                  taxAmount;

        counterI = conLen(_origVoucherCon);

        while select Authority, LedgerVoucher, TaxWithholdComponentGroup, TransDate, TaxWithholdRegNumber, Settled,
                     InventRefId, TransactionReversal, ComponentStatus, Voucher, LineNum, PurchId, SalesId, SourceTransVoucher
            from taxWithholdTrans
            order by VendAccount, CustAccount, RecId asc
            where   taxWithholdTrans.Authority                 == taxWithholdAuthorities.VendAccount
                &&  taxWithholdTrans.LedgerVoucher             == _settledVoucher
                &&  taxWithholdTrans.TaxWithholdComponentGroup == componentGroupTable.RecId
                &&  taxWithholdTrans.TransDate                 >= fromDate
                &&  taxWithholdTrans.TransDate                 <= toDate
                &&  taxWithholdTrans.TaxWithholdRegNumber      == tanNumber
                &&  taxWithholdTrans.Settled                   == false
                &&  taxWithholdTrans.InventRefId               == ''
                &&  taxWithholdTrans.TransactionReversal       == false
                &&  taxWithholdTrans.ComponentStatus           == componentStatus
                &&  taxWithholdTrans.SourceTransVoucher        != ''
                &&  taxWithholdTrans.SourceTransDate           != dateNull()
        if (!conFind(_origVoucherCon, taxWithholdTrans.SourceTransVoucher))
        {
            counterI++;
            _origVoucherCon = conPoke(_origVoucherCon, counterI, taxWithholdTrans.SourceTransVoucher);

            taxAmount = 0;

            while select taxWithholdTransLocal
                order by TransDate, RecId asc
                where   taxWithholdTransLocal.Authority                 == taxWithholdAuthorities.VendAccount
                    &&  taxWithholdTransLocal.LedgerVoucher             == _settledVoucher
                    &&  taxWithholdTransLocal.TaxWithholdComponentGroup == componentGroupTable.RecId
                    &&  taxWithholdTransLocal.TransDate                 >= fromDate
                    &&  taxWithholdTransLocal.TransDate                 <= toDate
                    &&  taxWithholdTransLocal.TaxWithholdRegNumber      == tanNumber
                    &&  (taxWithholdTransLocal.Voucher                  == taxWithholdTrans.Voucher
                    ||  ((taxWithholdTransLocal.InventRefId             == taxWithholdTrans.PurchId
                    ||  taxWithholdTransLocal.InventRefId               == taxWithholdTrans.SalesId)
                    &&  taxWithholdTransLocal.InventRefId
                    &&  taxWithholdTransLocal.ReturnVoucher             == taxWithholdTrans.Voucher))
                    &&  (taxWithholdTransLocal.LineNum                  == taxWithholdTrans.LineNum
                    ||  (taxWithholdTransLocal.ReturnLineNum            == taxWithholdTrans.LineNum
                    &&  taxWithholdTransLocal.ReturnVoucher))
                    &&  taxWithholdTransLocal.ComponentStatus           == componentStatus
            {
                taxAmounts = this.getReportingCodes(taxWithholdTransLocal);
                taxAmount  += conPeek(taxAmounts, 1);
                taxAmount  += conPeek(taxAmounts, #2);
                taxAmount  += conPeek(taxAmounts, #3);
            }
            if (taxAmount)
            {
                counterJ++;
            }
        }

        return counterJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChallanSerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets challange serial number.
    /// </summary>
    /// <returns>
    /// The challange serial number.
    /// </returns>
    public int getChallanSerialNum()
    {
        TaxWithholdFileHeader_IN        taxWithholdFileHeader;
        TaxWithholdBatchHeader_IN       taxWithholdBatchHeader;
        TaxWithholdChallanDetail_IN     taxWithholdChallanDetail;
        int                             maximum = 0;
        ;

        while select TaxWithholdRegNumber, FormNumber, FromDate, ToDate, RecId from taxWithholdFileHeader
            where taxWithholdFileHeader.TaxWithholdRegNumber   == tanNumber
               && taxWithholdFileHeader.FormNumber       == taxWithholdStatement
               && taxWithholdFileHeader.FromDate         == fromDate
               && taxWithholdFileHeader.ToDate           == toDate
        {
            while select RecIdFileHdr, CorrectionType, BatchRecordNumber  from taxWithholdBatchHeader
                where taxWithholdBatchHeader.RecIdFileHdr     == taxWithholdFileHeader.RecId
                   && (taxWithholdBatchHeader.CorrectionType  == TaxWithholdCorrectionType_IN::None
                   || taxWithholdBatchHeader.CorrectionType   == TaxWithholdCorrectionType_IN::C9)
            {
                select maxof(ChallanDetailRecordNumber)
                    from taxWithholdChallanDetail
                        where taxWithholdChallanDetail.RecIdFileHdr       == taxWithholdBatchHeader.RecIdFileHdr
                           && taxWithholdChallanDetail.BatchRecordNumber  == taxWithholdBatchHeader.BatchRecordNumber;
                if (maximum < taxWithholdChallanDetail.ChallanDetailRecordNumber)
                {
                    maximum =  taxWithholdChallanDetail.ChallanDetailRecordNumber;
                }
            }
        }
        return maximum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeducteeInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deductee information.
    /// </summary>
    /// <param name="_componentGroup">
    /// The component group.
    /// </param>
    /// <param name="_vendAccount">
    /// The vend account.
    /// </param>
    /// <param name="_settldVoucher">
    /// The settled voucher.
    /// </param>
    public void getDeducteeInformation(TaxWithholdComponentGroupRecId_IN    _componentGroup,
                                       AccountNum                           _vendAccount,
                                       Voucher                              _settldVoucher)
    {
        TaxWithholdTrans_IN                 taxWithholdTransLoc;
        TaxWithholdTrans_IN                 taxWithholdTrans;
        TaxWithholdTrans_IN                 taxWithholdTransAdjust;
        TaxWithholdTrans_IN                 taxWithholdTransReason;
        container                           taxAmounts;
        AmountCur                           taxTypeAmount;
        AmountCur                           surchargeAmount;
        AmountCur                           eduCessAmount;
        AmountCur                           totalTaxAmountLoc;
        real                                totalAmount;
        container                           checkAmountOrigin;
        container                           checkAmountOriginAdjust;
        container                           adjustedVoucherCon;
        int                                 counterK;
        int                                 counterAdjust;
        int                                 counterAdjustedVoucher;
        boolean                             adjusted = false;
        boolean                             isPrintOrNot = true;
        #TaxWithhold_IN
        ;

        numberOfDeductees = 1;
        while select maxOf(NatureOfAssessee), maxOf(pan), maxOf(panStatus), maxOf(panReferenceNumber), maxOf(Nameofdeductee), maxOf(PurchId), maxOf(SalesId),
                     maxOf(TransDate), maxOf(RateOfDeduction), maxOf(BookEntry), maxOf(Reason), maxOf(CustAccount), maxOf(VendAccount), sum(TaxWithholdAmount),
                     maxOf(AcknowledgermentNumber), maxOf(CertificateNumber), maxOf(CountryRegionToRemittance), maxOf(NatureOfRemittance), maxOf(SectionCode), maxOf(TaxWithholdGroup)
            from taxWithholdTransLoc
            group by Voucher
                where taxWithholdTransLoc.Authority                 == _vendAccount
                   && taxWithholdTransLoc.LedgerVoucher             == _settldVoucher
                   && taxWithholdTransLoc.TaxWithholdComponentGroup == _componentGroup
                   && taxWithholdTransLoc.TransDate                 >= fromDate
                   && taxWithholdTransLoc.TransDate                 <= toDate
                   && taxWithholdTransLoc.TaxWithholdRegNumber      == tanNumber
                   && taxWithholdTransLoc.Settled                   == false
                   && taxWithholdTransLoc.InventRefId               == ''
                   && taxWithholdTransLoc.ComponentStatus           == componentStatus
                   && taxWithholdTransLoc.SourceTransVoucher        == ''
                   && taxWithholdTransLoc.SourceTransDate           == dateNull()
        {
            taxTypeAmount       = 0;
            surchargeAmount     = 0;
            eduCessAmount       = 0;
            totalAmount         = 0;
            deducteeDetail      = "";
            checkAmountOriginAdjust = conNull();
            // Line 1
            deducteeDetail      +=  int2str(numberOfLinesInFile);
            // Line 2
            deducteeDetail      +=  #Carat + #RecordTypeDD;
            // Line 3
            deducteeDetail      +=  #Carat + int2str(batchNumber);
            // Line 4
            deducteeDetail      +=  #Carat + int2str(challanNumber);
            // Line 5
            deducteeDetail      +=  #Carat + int2str(numberOfDeductees);
            // Line 6
            deducteeDetail      +=  #Carat + #Mode;
            // Line 7
            deducteeDetail      +=  strRep(#Carat,1);
            // Line 8
            if (taxWithholdTransLoc.NatureOfAssessee ==  NatureOfAssessee_IN::Company)
            {
                deducteeDetail      +=  #Carat + int2str(1);
            }
            else
            {
                deducteeDetail      +=  #Carat + int2str(#Two);
            }
            // Line 9
            deducteeDetail      +=  #Carat;
            // Line 10
            if (taxWithholdTransLoc.pan != '')
            {
                deducteeDetail      +=  #Carat + strUpr(taxWithholdTransLoc.pan);
            }
            else
            {
                if (taxWithholdTransLoc.panStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxWithholdTransLoc.panStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
            }
            // Line 11
            deducteeDetail      +=  #Carat;
            // Line 12
            if (taxWithholdTransLoc.panStatus == PANStatus_IN::Applied)
            {
                deducteeDetail      +=  #Carat + strUpr(taxWithholdTransLoc.panReferenceNumber);
            }
            else
            {
                deducteeDetail      +=  #Carat;
            }

            // Line 13
            deducteeDetail      +=  #Carat + subStr(taxWithholdTransLoc.Nameofdeductee, 1, #75);

            while select sum(AmountOriginMST), sum(TaxWithholdAmount) from taxWithholdTrans
                group by Voucher, TaxWithholdComponentGroup, TaxWithholdComponent
                    where taxWithholdTrans.Authority                    == _vendAccount
                        && taxWithholdTrans.LedgerVoucher                == _settldVoucher
                        && taxWithholdTrans.TaxWithholdComponentGroup    == _componentGroup
                        && taxWithholdTrans.TransDate                    >= fromDate
                        && taxWithholdTrans.TransDate                    <= toDate
                        && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                        && (taxWithholdTrans.Voucher                     == taxWithholdTransLoc.Voucher
                        || ((taxWithholdTrans.InventRefId                == taxWithholdTransLoc.PurchId
                        || taxWithholdTrans.InventRefId                  == taxWithholdTransLoc.SalesId)
                        && taxWithholdTrans.InventRefId
                        && taxWithholdTrans.ReturnVoucher                == taxWithholdTransLoc.Voucher))
                        && taxWithholdTrans.ComponentStatus              == componentStatus
            {
                taxAmounts          = this.getReportingCodes(taxWithholdTrans);
                taxTypeAmount       += conPeek(taxAmounts, 1);
                surchargeAmount     += conPeek(taxAmounts, #2);
                eduCessAmount       += conPeek(taxAmounts, #3);
                if (!conFind(checkAmountOrigin, taxWithholdTrans.Voucher))
                {
                    totalAmount         += taxWithholdTrans.AmountOriginMST;
                    counterK++;
                    checkAmountOrigin   = conPoke(checkAmountOrigin, counterK, taxWithholdTrans.Voucher);
                }
            }

            if (!conFind(adjustedVoucherCon, taxWithholdTransLoc.Voucher))
            {
                counterAdjustedVoucher++;
                adjustedVoucherCon = conPoke(adjustedVoucherCon, counterAdjustedVoucher, taxWithholdTransLoc.Voucher);

                adjusted        = false;
                isPrintOrNot    = true;

                while select sum(AmountOriginMST), sum(TaxWithholdAmount) from taxWithholdTransAdjust
                    group by Voucher, TaxWithholdComponentGroup, TaxWithholdComponent
                    where   taxWithholdTransAdjust.SourceTransVoucher           == taxWithholdTransLoc.Voucher
                        &&  taxWithholdTransAdjust.SourceTransDate              == taxWithholdTransLoc.TransDate
                        &&  taxWithholdTransAdjust.TaxWithholdComponentGroup    == _componentGroup
                {
                    taxAmounts          = this.getReportingCodes(taxWithholdTransAdjust);
                    taxTypeAmount       += conPeek(taxAmounts, 1);
                    surchargeAmount     += conPeek(taxAmounts, #2);
                    eduCessAmount       += conPeek(taxAmounts, #3);
                    if (!conFind(checkAmountOriginAdjust, taxWithholdTransAdjust.Voucher))
                    {
                        totalAmount             += taxWithholdTransAdjust.AmountOriginMST;
                        counterAdjust++;
                        checkAmountOriginAdjust = conPoke(checkAmountOriginAdjust, counterAdjust, taxWithholdTransAdjust.Voucher);
                    }
                    adjusted = true;
                }
            }

            totalTaxAmountLoc   = taxTypeAmount + surchargeAmount + eduCessAmount;

            if (adjusted && totalTaxAmountLoc == 0)
            {
                isPrintOrNot = false;
            }
            // Line 14
            deducteeDetail      += #Carat + strPoke(subStr(num2str(taxTypeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 15
            deducteeDetail      += #Carat + strPoke(subStr(num2str(surchargeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 16
            deducteeDetail      += #Carat + strPoke(subStr(num2str(eduCessAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 17
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmountLoc), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 18
            deducteeDetail      += #Carat;
            // Line 19
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmountLoc), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 20, 21
            if (formNumber != #27EQ)
            {
                deducteeDetail      += strRep(#Carat, #2);
            }
            else
            {
                deducteeDetail      += #Carat;
                deducteeDetail      += #Carat + strPoke(subStr(num2str(totalAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            }
            // Line 22
            deducteeDetail      += #Carat + strPoke(subStr(num2str(totalAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 23
            deducteeDetail      += #Carat + date2str(taxWithholdTransLoc.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            // Line 24
            if (!(totalTaxAmountLoc))
            {
                deducteeDetail      += #Carat;
            }
            else
            {
                deducteeDetail      += #Carat + date2str(taxWithholdTransLoc.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            }
            // Line 25
            deducteeDetail      += #Carat;
            // Line 26
            if (totalAmount != 0)
            {
                deducteeDetail      += #Carat + num2str(totalTaxAmountLoc/totalAmount*100, 1, #4, 1, 0);
            }
            else
            {
                deducteeDetail      += #Carat + num2str(taxWithholdTransLoc.RateOfDeduction, 1, #4, 1, 0);
            }
            // Line 27, 28, 29
            deducteeDetail      += strRep(#Carat, 3);
            // Line 30
            if (taxWithholdTransLoc.Reason == #ZeroDeductDueToThreshholdMark
                &&  totalTaxAmountLoc)
            {
                select firstOnly taxWithholdTransReason
                    where taxWithholdTransReason.Voucher == taxWithholdTransLoc.Voucher
                            && taxWithholdTransReason.Reason == #IsSoftwareDeclReceived;
                if (taxWithholdTransReason)
                {
                    taxWithholdTransLoc.Reason = #IsSoftwareDeclReceived;
                }
                else
                {
                    taxWithholdTransLoc.Reason = '';
                }
            }

            deducteeDetail      += #Carat + subStr(taxWithholdTransLoc.Reason,1,1);
            // Line 31, 32
            deducteeDetail      += strRep(#Carat, #2);
            // Line 33
            if (taxWithholdTransLoc.SectionCode)
            {
                deducteeDetail      += #Carat + subStr(taxWithholdTransLoc.SectionCode, #1, #3);
            }
            else
            {
                deducteeDetail      += #Carat;
            }
            // Line 34
            if (taxWithholdTransLoc.CertificateNumber && taxWithholdTransLoc.CertificateNumber != '0')
            {
                deducteeDetail      += #Carat + subStr(taxWithholdTransLoc.CertificateNumber, 1, 20);
            }
            else
            {
                deducteeDetail      += #Carat;
            }

            if (formNumber != #27Q)
            {
                // Line 35, 36, 37, 38, 39
                deducteeDetail      += strrep(#Carat, 5);
            }
            else
            {
                // Line 35
                if (taxWithholdTransLoc.TaxApplicability == TaxWithholdTaxApplicability_IN::ITAct)
                {
                    deducteeDetail      += #Carat + #ITAct;
                }
                else
                {
                    deducteeDetail      += #Carat + #DTAA;
                }
                // Line 36
                if (taxWithholdTransLoc.NatureOfRemittance)
                {
                    deducteeDetail      += #Carat + TaxWithholdNatureOfRemittance_IN::find(taxWithholdTransLoc.NatureOfRemittance, false).NatureCode ;
                }
                else
                {
                    deducteeDetail      += #Carat;
                }
                // Line 37
                if (taxWithholdTransLoc.AcknowledgermentNumber)
                {
                    deducteeDetail      += #Carat + taxWithholdTransLoc.AcknowledgermentNumber;
                }
                else
                {
                    deducteeDetail      += #Carat;
                }
                // Line 38
                if (taxWithholdTransLoc.CountryRegionToRemittance)
                {
                    deducteeDetail      += #Carat + TaxWithholdCountryRegionToRemittance_IN::find(taxWithholdTransLoc.CountryRegionToRemittance, false).CountryCode;
                }
                else
                {
                    deducteeDetail      += #Carat;
                }
                // Line 39
                deducteeDetail      += #Carat;
            }
            if (fileTaxWithhold == NoYes::Yes)
            {
                update_recordset taxWithholdTrans
                    setting LineStatus  = #Original
                        where taxWithholdTrans.Authority                    == _vendAccount
                           && taxWithholdTrans.LedgerVoucher                == _settldVoucher
                           && taxWithholdTrans.TaxWithholdComponentGroup    == _componentGroup
                           && taxWithholdTrans.TransDate                    >= fromDate
                           && taxWithholdTrans.TransDate                    <= toDate
                           && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                           && (taxWithholdTrans.Voucher                     == taxWithholdTransLoc.Voucher
                           || taxWithholdTrans.SourceTransVoucher           == taxWithholdTransLoc.Voucher)
                           && taxWithholdTrans.ComponentStatus              == componentStatus;
            }
            if (isPrintOrNot)
            {
                this.writeToFile(deducteeDetail);
                if (fileTaxWithhold == NoYes::Yes)
                {
                    this.insertIntoDeducteeDetail(taxWithholdTransLoc, taxTypeAmount, surchargeAmount, eduCessAmount, totalAmount);
                }
                numberOfDeductees++;
                numberOfLinesInFile++;
                totalNumberOfDeductees++;
            }
            totalAmountPaid     += totalAmount;
            totalTaxDeducted    += totalTaxAmountLoc;
        }
        this.getAdjustDeducteeInformation(
            _componentGroup,
            adjustedVoucherCon,
            _vendAccount,
            _settldVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeducteeInformationC9Correction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deductee information C9 correction.
    /// </summary>
    /// <param name="_componentGroup">
    /// The component group.
    /// </param>
    /// <param name="_settldVoucher">
    /// The settled voucher.
    /// </param>
    /// <param name="_challanSerialNumber">
    /// The challange serial number.
    /// </param>
    public void getDeducteeInformationC9Correction(TaxWithholdComponentGroupRecId_IN    _componentGroup,
                                                   Voucher                              _settldVoucher,
                                                   Integer                              _challanSerialNumber)
    {
        TaxWithholdTrans_IN         taxWithholdTransLoc;
        TaxWithholdTrans_IN         taxWithholdTrans;
        TaxWithholdTrans_IN         taxWithholdTransAdjust;
        TaxWithholdTrans_IN         taxWithholdTransReason;
        CustTable                   custTable;
        VendTable                   vendTableLoc;
        NatureOfAssessee_IN         natureOfAssessee;
        AccountNum                  accountNumber,vendAccountNumber;
        Name                        name;
        PANStatus_IN                panStatus;
        PANNumber_IN                panNumber;
        PANReferenceNumber_IN       panRefNumber;
        container                   taxAmounts = conNull();
        container                   origVoucherCon;
        container                   voucherComponentGroupCon;
        container                   checkAmountOriginAdjust;
        Amount                      taxTypeAmount;
        Amount                      surchargeAmount;
        Amount                      peCessAmount;
        Amount                      totalTaxAmount;
        Amount                      totalAmount;
        int                         counterOrigVoucherCon;
        int                         counterVoucherComponentGroup;
        int                         counterAdjust;
        boolean                     adjusted;
        boolean                     isPrintOrNot;
        #TaxWithhold_IN
        TaxInformationCustTable_IN      taxInformationCustTableLoc;
        TaxInformationVendTable_IN      taxInformationVendTableLoc;

        ;

        numberOfDeductees = 1;
        while select maxOf(CustAccount), maxOf(VendAccount), maxOf(NatureOfAssessee), maxOf(pan), maxOf(Nameofdeductee), maxOf(TransDate),
                     maxOf(BookEntry), maxOf(RateOfDeduction), maxOf(Reason), maxOf(AmountOriginMST),
                     maxOf(AcknowledgermentNumber), maxOf(CertificateNumber), maxOf(CountryRegionToRemittance), maxOf(NatureOfRemittance), maxOf(SectionCode), maxOf(TaxWithholdGroup)
            from taxWithholdTransLoc
            group by Voucher
            where taxWithholdTransLoc.LedgerVoucher                 == _settldVoucher
               && taxWithholdTransLoc.TaxWithholdComponentGroup     == _componentGroup
               && taxWithholdTransLoc.TransDate                     >= fromDate
               && taxWithholdTransLoc.TransDate                     <= toDate
               && taxWithholdTransLoc.TaxWithholdRegNumber          == tanNumber
               && taxWithholdTransLoc.LineStatus                    == ""
               && taxWithholdTransLoc.Settled                       == false
               && taxWithholdTransLoc.ComponentStatus               == componentStatus
               && taxWithholdTransLoc.SourceTransVoucher            == ''
               && taxWithholdTransLoc.SourceTransDate               == dateNull()
        {
            taxTypeAmount       = 0;
            surchargeAmount     = 0;
            peCessAmount        = 0;
            totalAmount         = 0;

            checkAmountOriginAdjust = conNull();

            custTable           =  CustTable::find(taxWithholdTransLoc.CustAccount);
            vendTableLoc        =  VendTable::find(taxWithholdTransLoc.VendAccount);
            deducteeDetail      =  "";
            // Line 1
            deducteeDetail      += int2str(lineNumberInFile);
            // Line 2
            deducteeDetail      += #Carat + #RecordTypeDD;
            // Line 3
            deducteeDetail      += #Carat + int2str(batchNumber-1);
            // Line 4
            deducteeDetail      += #Carat + int2str(_challanSerialNumber);
            // Line 5
            deducteeDetail      += #Carat + int2str(numberOfDeductees);
            // Line 6
            deducteeDetail      += #Carat + #Mode;
            // Line 7
            deducteeDetail      += strRep(#Carat,1);
            // Line 8
            if (taxWithholdTransLoc.NatureOfAssessee == NatureOfAssessee_IN::Company)
            {
                deducteeDetail      +=  #Carat + int2str(1);
            }
            else
            {
                deducteeDetail      +=  #Carat + int2str(#Two);
            }
            // Line 9
            deducteeDetail      +=  #Carat;
            if (custTable)
            {
                taxInformationCustTableLoc = custTable.getTaxInformationCustTable_IN();
                // Line 10
                if (taxInformationCustTableLoc.PanStatus == PANStatus_IN::Received)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxWithholdTransLoc.pan);
                }
                else if (taxInformationCustTableLoc.PanStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxInformationCustTableLoc.PanStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
                // Line 11
                deducteeDetail      +=  #Carat;
                // Line 12
                if (taxInformationCustTableLoc.PanStatus == PANStatus_IN::Applied)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxInformationCustTableLoc.panReferenceNumber);
                }
                else
                {
                    deducteeDetail      +=  #Carat;
                }
            }
            else
            {
                taxInformationVendTableLoc = vendTable.getTaxInformationVendTable_IN();
                // Line 10
                if (taxInformationVendTableLoc.panStatus == PANStatus_IN::Received)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxWithholdTransLoc.pan);
                }
                else if (taxInformationVendTableLoc.panStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxInformationVendTableLoc.panStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
                // Line 11
                deducteeDetail      +=  #Carat;
                // Line 12
                if (taxInformationVendTableLoc.panStatus == PANStatus_IN::Applied)
                {
                    deducteeDetail      +=  #Carat + strUpr(taxInformationVendTableLoc.panReferenceNumber);
                }
                else
                {
                    deducteeDetail      +=  #Carat;
                }
            }
            // Line 13
            deducteeDetail      +=  #Carat + subStr(taxWithholdTransLoc.Nameofdeductee, 1, #75);
            while select sum(AmountOriginMST), sum(TaxWithholdAmount) from taxWithholdTrans
                group by Voucher, TaxWithholdComponentGroup, TaxWithholdComponent
                    where taxWithholdTrans.LedgerVoucher                == _settldVoucher
                       && taxWithholdTrans.TaxWithholdComponentGroup    == _componentGroup
                       && taxWithholdTrans.TransDate                    >= fromDate
                       && taxWithholdTrans.TransDate                    <= toDate
                       && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                       && taxWithholdTrans.Voucher                      == taxWithholdTransLoc.Voucher
                       && taxWithholdTrans.LineStatus                   == ""
                       && taxWithholdTrans.ComponentStatus              == componentStatus
            {
                taxAmounts                  = this.getReportingCodes(taxWithholdTrans);
                taxTypeAmount               += conPeek(taxAmounts, 1);
                surchargeAmount             += conPeek(taxAmounts, #2);
                peCessAmount                += conPeek(taxAmounts, #3);

                if (!conFind(origVoucherCon, taxWithholdTrans.Voucher))
                {
                    totalAmount         += taxWithholdTrans.AmountOriginMST;
                    counterOrigVoucherCon++;
                    origVoucherCon = conPoke(origVoucherCon, counterOrigVoucherCon, taxWithholdTrans.Voucher);
                }
            }

            if (!conFind(voucherComponentGroupCon, taxWithholdTransLoc.Voucher))
            {
                counterVoucherComponentGroup++;
                voucherComponentGroupCon = conPoke(voucherComponentGroupCon, counterVoucherComponentGroup, taxWithholdTransLoc.Voucher);

                adjusted        = false;
                isPrintOrNot    = true;

                while select sum(AmountOriginMST), sum(TaxWithholdAmount) from taxWithholdTransAdjust
                    group by Voucher, TaxWithholdComponentGroup, TaxWithholdComponent
                    where   taxWithholdTransAdjust.SourceTransVoucher           == taxWithholdTransLoc.Voucher
                        &&  taxWithholdTransAdjust.SourceTransDate              == taxWithholdTransLoc.TransDate
                        &&  taxWithholdTransAdjust.TaxWithholdComponentGroup    == _componentGroup
                {
                    taxAmounts          = this.getReportingCodes(taxWithholdTransAdjust);
                    taxTypeAmount       += conPeek(taxAmounts, 1);
                    surchargeAmount     += conPeek(taxAmounts, #2);
                    peCessAmount        += conPeek(taxAmounts, #3);
                    if (!conFind(checkAmountOriginAdjust, taxWithholdTransAdjust.Voucher))
                    {
                        totalAmount             += taxWithholdTransAdjust.AmountOriginMST;
                        counterAdjust++;
                        checkAmountOriginAdjust = conPoke(checkAmountOriginAdjust, counterAdjust, taxWithholdTransAdjust.Voucher);
                    }

                    adjusted = true;
                }
            }

            totalTaxAmount  = taxTypeAmount + surchargeAmount + peCessAmount;

            if (adjusted && totalTaxAmount == 0)
            {
                isPrintOrNot = false;
            }
            // Line 14
            deducteeDetail      += #Carat + strPoke(subStr(num2str(taxTypeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 15
            deducteeDetail      += #Carat + strPoke(subStr(num2str(surchargeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 16
            deducteeDetail      += #Carat + strPoke(subStr(num2str(peCessAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 17
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 18
            deducteeDetail      += #Carat;
            // Line 19
            deducteeDetail      += #Carat + strPoke(subStr(num2str((totalTaxAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 20
            deducteeDetail      += #Carat;
            // Line 21
            if (formNumber != #27EQ)
            {
                deducteeDetail  += #Carat;
            }
            else
            {
                deducteeDetail  += #Carat + strPoke(subStr(num2str(totalAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            }
            // Line 22
            deducteeDetail      += #Carat + strPoke(subStr(num2str(totalAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 23
            deducteeDetail      += #Carat + date2str(taxWithholdTransLoc.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            // Line 24
            if (!(totalTaxAmount))
            {
                deducteeDetail      += #Carat;
            }
            else
            {
                deducteeDetail      += #Carat + date2str(taxWithholdTransLoc.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            }
            // Line 25
            deducteeDetail      += #Carat;
            // Line 26
            if (totalAmount != 0)
            {
                deducteeDetail      += #Carat + num2str(totalTaxAmount/totalAmount*100, 1, #4, 1, 0);
            }
            else
            {
                deducteeDetail      += #Carat + num2str(taxWithholdTransLoc.RateOfDeduction, 1, #4, 1, 0);
            }
            // Line 27, 28, 29
            deducteeDetail      += strRep(#Carat, 3);
            // Line 30
            if (taxWithholdTransLoc.Reason == #ZeroDeductDueToThreshholdMark
                &&  totalTaxAmount)
            {
                select firstOnly taxWithholdTransReason
                    where taxWithholdTransReason.Voucher == taxWithholdTransLoc.Voucher
                            && taxWithholdTransReason.Reason == #IsSoftwareDeclReceived;
                if (taxWithholdTransReason)
                {
                    taxWithholdTransLoc.Reason = #IsSoftwareDeclReceived;
                }
                else
                {
                    taxWithholdTransLoc.Reason = '';
                }
            }

            deducteeDetail      +=  #Carat + subStr(taxWithholdTransLoc.Reason,1,1);
            // Line 31, 32
            deducteeDetail      += strRep(#Carat, #2);
            // Line 33
            deducteeDetail      += #Carat + subStr(taxWithholdTransLoc.SectionCode, 1, #3);
            // Line 34
            if (taxWithholdTransLoc.CertificateNumber && taxWithholdTransLoc.CertificateNumber != '0')
            {
                deducteeDetail      += #Carat + taxWithholdTransLoc.CertificateNumber;
            }
            else
            {
                deducteeDetail      += #Carat;
            }

            if (formNumber != #27Q)
            {
                // Line 35, 36, 37, 38, 39
                deducteeDetail      += strrep(#Carat, #5);
            }
            else
            {
                // Line 35
                if (taxWithholdTransLoc.TaxApplicability == TaxWithholdTaxApplicability_IN::ITAct)
                {
                    deducteeDetail      += #Carat + #ITAct;
                }
                else
                {
                    deducteeDetail      += #Carat + #DTAA;
                }
                // Line 36
                if (taxWithholdTransLoc.NatureOfRemittance)
                {
                    deducteeDetail      += #Carat + TaxWithholdNatureOfRemittance_IN::find(taxWithholdTransLoc.NatureOfRemittance, false).NatureCode;
                }
                else
                {
                    deducteeDetail      += #Carat;
                }
                // Line 37
                if (taxWithholdTransLoc.AcknowledgermentNumber)
                {
                    deducteeDetail      += #Carat + taxWithholdTransLoc.AcknowledgermentNumber;
                }
                else
                {
                    deducteeDetail      += #Carat;
                }
                // Line 38
                if (taxWithholdTransLoc.CountryRegionToRemittance)
                {
                    deducteeDetail      += #Carat + TaxWithholdCountryRegionToRemittance_IN::find(taxWithholdTransLoc.CountryRegionToRemittance, false).CountryCode;
                }
                else
                {
                    deducteeDetail      += #Carat;
                }
                // Line 39
                deducteeDetail      += #Carat;
            }

            if (custTable)
            {
                taxInformationCustTableLoc = custTable.getTaxInformationCustTable_IN();
                natureOfAssessee    = taxInformationCustTableLoc.NatureOfAssessee;
                name                = DirPartyTable::findRec(custTable.Party).Name;
                panStatus           = taxInformationCustTableLoc.PanStatus;
                panNumber           = taxInformationCustTableLoc.panNumber;
                panRefNumber        = taxInformationCustTableLoc.panReferenceNumber;
            }
            else
            {
                taxInformationVendTableLoc = vendTableLoc.getTaxInformationVendTable_IN();
                natureOfAssessee    = taxInformationVendTableLoc.NatureOfAssessee;
                vendAccountNumber   = taxWithholdTransLoc.VendAccount;
                name                = DirPartyTable::findRec(vendTableLoc.Party).Name;
                panStatus           = taxInformationVendTableLoc.panStatus;
                panNumber           = taxInformationVendTableLoc.panNumber;
                panRefNumber        = taxInformationVendTableLoc.panReferenceNumber;
            }

            if (isPrintOrNot)
            {
                this.writeToFile(deducteeDetail);
                this.insertIntoDeducteeDetailExtCorrection(_challanSerialNumber,
                                                        numberOfDeductees,
                                                        natureOfAssessee,
                                                        accountNumber,
                                                        vendAccountNumber,
                                                        name,
                                                        panStatus,
                                                        panNumber,
                                                        panRefNumber,
                                                        totalTaxAmount,
                                                        totalTaxAmount,
                                                        batchNumber-1,
                                                        taxTypeAmount,
                                                        surchargeAmount,
                                                        peCessAmount,
                                                        taxWithholdTransLoc.RateOfDeduction,
                                                        taxWithholdTransLoc.TransDate,
                                                        taxWithholdTransLoc.TransDate,
                                                        taxWithholdTransLoc.SectionCode,
                                                        taxWithholdTransLoc.CertificateNumber,
                                                        taxWithholdTransLoc.Reason,
                                                        taxWithholdTransLoc.TaxApplicability);
                numberOfDeductees++;
                lineNumberInFile++;
                totalNumberOfDeductees++;
            }

            update_recordset taxWithholdTrans
                setting LineStatus  = #Correction
                    where taxWithholdTrans.LedgerVoucher                == _settldVoucher
                       && taxWithholdTrans.TaxWithholdComponentGroup    == _componentGroup
                       && taxWithholdTrans.TransDate                    >= fromDate
                       && taxWithholdTrans.TransDate                    <= toDate
                       && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                       && (taxWithholdTrans.Voucher                     == taxWithholdTransLoc.Voucher
                       || taxWithholdTrans.SourceTransVoucher           == taxWithholdTransLoc.Voucher)
                       && taxWithholdTrans.ComponentStatus              == componentStatus;

            totalAmountPaid     += totalAmount;
            totalTaxDeducted    += totalTaxAmount;
        }

        this.getAdjustDeducteeC9Correction(
            _componentGroup,
            origVoucherCon,
            _challanSerialNumber,
            _settldVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeducteeInformationCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deductee information correction.
    /// </summary>
    /// <param name="_correctionType">
    /// The correction type.
    /// </param>
    /// <param name="_fileRecId">
    /// The file record id.
    /// </param>
    /// <param name="_batchNumber">
    /// The batch number.
    /// </param>
    /// <param name="_deducteeRecordNumber">
    /// The deductee record number.
    /// </param>
    /// <param name="_challanNumber">
    /// The challange number.
    /// </param>
    /// <param name="_paidByBookEntry">
    /// The paid by book entry.
    /// </param>
    public void getDeducteeInformationCorrection(int       _correctionType,
                                                 RecId     _fileRecId,
                                                 int       _batchNumber,
                                                 int       _deducteeRecordNumber,
                                                 int       _challanNumber,
                                                 str       _paidByBookEntry)
    {
        TaxWithholdDeducteeDetail_IN    taxWithholddeducteeDetail;
        CustTable                       custTable;
        VendTable                       vendTableLoc;
        NatureOfAssessee_IN             natureOfAssessee;
        AccountNum                      accountNumber, vendAccountNumber;
        Name                            name;
        PANStatus_IN                    panStatus;
        PANNumber_IN                    panNumber;
        PANReferenceNumber_IN           panRefNumber;
        TaxInformationCustTable_IN      taxInformationCustTableLoc;
        TaxInformationVendTable_IN      taxInformationVendTableLoc;

        taxWithholddeducteeDetail  =  TaxWithholdDeducteeDetail_IN::findByFileHdr(_fileRecId,
                                                                                 _batchNumber,
                                                                                 _challanNumber,
                                                                                 _deducteeRecordNumber);
        custTable           =  CustTable::find(taxWithholddeducteeDetail.DeducteeNumber);
        vendTableLoc        =  VendTable::find(taxWithholddeducteeDetail.VendDeducteeNumber);
        deducteeDetail      = "";
        // Line 1
        deducteeDetail      +=  int2str(lineNumberInFile);
        // Line 2
        deducteeDetail      +=  #Carat + #RecordTypeDD;
        // Line 3
        deducteeDetail      +=  #Carat + int2str(batchNumber-1);
        // Line 4
        deducteeDetail      +=  #Carat + int2str(_challanNumber);
        // Line 5
        deducteeDetail      +=  #Carat + int2str(_deducteeRecordNumber);
        // Line 6
        if (_correctionType == #3)
        {
            deducteeDetail      +=  #Carat + #UpdateMode;
        }
        else
        {
            deducteeDetail      +=  #Carat;
        }
        // Line 7
        deducteeDetail      +=  #Carat;
        if (_correctionType == #3)
        {
            // Line 8
            if (custTable)
            {
                taxInformationCustTableLoc = custTable.getTaxInformationCustTable_IN();
                if (taxInformationCustTableLoc.NatureOfAssessee == NatureOfAssessee_IN::Company)
                {
                    deducteeDetail      +=  #Carat + int2str(1);
                }
                else
                {
                    deducteeDetail      +=  #Carat + int2str(#Two);
                }
            }
            else
            {
                taxInformationVendTableLoc = vendTableLoc.getTaxInformationVendTable_IN();
                if (taxInformationVendTableLoc.NatureOfAssessee == NatureOfAssessee_IN::Company)
                {
                    deducteeDetail      +=  #Carat + int2str(1);
                }
                else
                {
                    deducteeDetail      +=  #Carat + int2str(#Two);
                }
            }
            // Line 9
            if (taxWithholddeducteeDetail.DeducteePANNumber != '')
            {
                deducteeDetail      +=  #Carat + strUpr(subStr(taxWithholddeducteeDetail.DeducteePANNumber,1,10));
            }
            else if (taxWithholddeducteeDetail.DeducteePANNumber == '')
            {
                if (taxWithholddeducteeDetail.DeducteePANStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxWithholddeducteeDetail.DeducteePANStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
            }
        }
        else
        {
            // line 8, 9
            deducteeDetail      +=  strRep(#Carat,#2);
        }
        // Line 10
        if (custTable)
        {
            if (taxInformationCustTableLoc.panNumber != '')
            {
                deducteeDetail      +=  #Carat + strUpr(taxInformationCustTableLoc.panNumber);
            }
            else
            {
                if (taxInformationCustTableLoc.PanStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxInformationCustTableLoc.PanStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
            }
        }
        else
        {
            if (taxInformationVendTableLoc.panNumber != '')
            {
                deducteeDetail      +=  #Carat + strUpr(taxInformationVendTableLoc.panNumber);
            }
            else
            {
                if (taxInformationVendTableLoc.panStatus == PANStatus_IN::Invalid)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else if (taxInformationVendTableLoc.panStatus == PANStatus_IN::NotAvailable)
                {
                    deducteeDetail      +=  #Carat + #PANNOTAVBL;
                }
                else
                {
                    deducteeDetail      +=  #Carat + #PANAPPLIED;
                }
            }
        }
        if (_correctionType == #3)
        {
            // Line 11
            deducteeDetail  +=  #Carat + strUpr(subStr(taxWithholddeducteeDetail.DeducteePANRefNumber, 1, #10));
            // Line 12, 13
            if (custTable)
            {
                deducteeDetail      +=  #Carat + strUpr(subStr(taxInformationCustTableLoc.panReferenceNumber, 1, #10));
                deducteeDetail      +=  #Carat + subStr(DirPartyTable::findRec(vendTableLoc.Party).Name, 1, #75);
            }
            else
            {
                deducteeDetail      +=  #Carat + strUpr(subStr(taxInformationVendTableLoc.panReferenceNumber, 1, #10));
                deducteeDetail      +=  #Carat + subStr(DirPartyTable::findRec(custTable.Party).Name, 1, #75);
            }
            // Line 14
            deducteeDetail     += #Carat + strPoke(subStr(num2str(taxWithholddeducteeDetail.TaxWithholdAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 15
            deducteeDetail     += #Carat + strPoke(subStr(num2str(taxWithholddeducteeDetail.SurchargeAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 16
            deducteeDetail     += #Carat + strPoke(subStr(num2str(taxWithholddeducteeDetail.peCessAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 17
            deducteeDetail     += #Carat + strPoke(subStr(num2str(taxWithholddeducteeDetail.TaxWithholdAmount + taxWithholddeducteeDetail.SurchargeAmount + taxWithholddeducteeDetail.peCessAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
        }
        else
        {
            // Line 11~17
            deducteeDetail      +=  strRep(#Carat, #7);
        }
        // Line 18
        deducteeDetail      += #Carat + strPoke(subStr(num2str((taxWithholddeducteeDetail.TaxWithholdAmount + taxWithholddeducteeDetail.SurchargeAmount + taxWithholddeducteeDetail.peCessAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 19
        if (_correctionType == #3)
        {
            deducteeDetail     += #Carat + strPoke(subStr(num2str(taxWithholddeducteeDetail.TotalTaxDeducted, 1, #2, 1, 0), 1, #18), #Zero, #16);
        }
        else
        {
            deducteeDetail     +=  #Carat;
        }
        // Line 20
        deducteeDetail      += #Carat + strPoke(subStr(num2str((taxWithholddeducteeDetail.TaxWithholdAmount + taxWithholddeducteeDetail.SurchargeAmount + taxWithholddeducteeDetail.peCessAmount), 1, #2, 1, 0), 1, #18), #Zero, #16);
        if (_correctionType == #3)
        {
            // Line 21
            if (formNumber != #27EQ)
            {
                deducteeDetail  += #Carat;
            }
            else
            {
                deducteeDetail  += #Carat + strPoke(subStr(num2str(taxWithholddeducteeDetail.TotalAmountPaid, 1, #2, 1, 0), 1, #18), #Zero, #16);
            }
            // Line 22
            deducteeDetail      += #Carat + strPoke(subStr(num2str(taxWithholddeducteeDetail.TotalTaxDeducted, 1, #2, 1, 0), 1, #18), #Zero, #16);
            // Line 23
            deducteeDetail      += #Carat + date2str(taxWithholddeducteeDetail.TransDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            // Line 24
            if (!(taxWithholddeducteeDetail.TaxWithholdAmount + taxWithholddeducteeDetail.SurchargeAmount + taxWithholddeducteeDetail.peCessAmount))
            {
                deducteeDetail      += #Carat;
            }
            else
            {
                deducteeDetail      += #Carat + date2str(taxWithholddeducteeDetail.TaxWithholdDate, #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
            }
            // Line 25
            deducteeDetail      += #Carat;
            // Line 26
            deducteeDetail      += #Carat + num2str(taxWithholddeducteeDetail.TotalRate, 1, #4, 1, 0);
            // Line 27, 28
            deducteeDetail      += strRep(#Carat, 2);
        }
        else
        {
            // Line 21~28
            deducteeDetail      +=  strRep(#Carat, #8);
        }
        // Line 29
        deducteeDetail      += #Carat;
        // Line 30
        deducteeDetail      += #Carat + taxWithholddeducteeDetail.Reason;
        // Line 31, 32
        deducteeDetail      += strRep(#Carat, #2);
        // Line 33
        deducteeDetail      += #Carat + taxWithholddeducteeDetail.SectionCode;
        // Line 34
        deducteeDetail      += #Carat + taxWithholddeducteeDetail.CertificateNumber;
        if (formNumber != #27Q)
        {
            // Line 35, 36, 37, 38, 39
            deducteeDetail      += strrep(#Carat, #5);
        }
        else
        {
            // Line 35
            if (taxWithholddeducteeDetail.TaxApplicability == TaxWithholdTaxApplicability_IN::ITAct)
            {
                deducteeDetail      += #Carat + #ITAct;
            }
            else
            {
                deducteeDetail      += #Carat + #DTAA;
            }
            // Line 36
            if (taxWithholddeducteeDetail.TaxWithholdNatureOfRemittance)
            {
                deducteeDetail      += #Carat + TaxWithholdNatureOfRemittance_IN::find(taxWithholddeducteeDetail.TaxWithholdNatureOfRemittance, false).NatureCode;
            }
            else
            {
                deducteeDetail      += #Carat;
            }
            // Line 37
            if (taxWithholddeducteeDetail.TaxWithholdAcknowledgementNumber)
            {
                deducteeDetail      += #Carat + taxWithholddeducteeDetail.TaxWithholdAcknowledgementNumber;
            }
            else
            {
                deducteeDetail      += #Carat;
            }
            // Line 38
            if (taxWithholddeducteeDetail.TaxWithholdCountryRegionToRemittance)
            {
                deducteeDetail      += #Carat + TaxWithholdCountryRegionToRemittance_IN::find(taxWithholddeducteeDetail.TaxWithholdCountryRegionToRemittance, false).CountryCode;
            }
            else
            {
                deducteeDetail      += #Carat;
            }
            // Line 39
            deducteeDetail      += #Carat;
        }

        lineNumberInFile++;
        this.writeToFile(deducteeDetail);
        if (custTable)
        {
            natureOfAssessee    = taxInformationCustTableLoc.NatureOfAssessee;
            accountNumber       = taxWithholddeducteeDetail.DeducteeNumber;
            name                = DirPartyTable::findRec(custTable.Party).Name;
            panStatus           = taxInformationCustTableLoc.PanStatus;
            panNumber           = taxInformationCustTableLoc.panNumber;
            panRefNumber        = taxInformationCustTableLoc.panReferenceNumber;
        }
        else
        {
            natureOfAssessee    = taxInformationVendTableLoc.NatureOfAssessee;
            vendAccountNumber   = taxWithholddeducteeDetail.VendDeducteeNumber;
            name                = DirPartyTable::findRec(vendTableLoc.Party).Name;
            panStatus           = taxInformationVendTableLoc.panStatus;
            panNumber           = taxInformationVendTableLoc.panNumber;
            panRefNumber        = taxInformationVendTableLoc.panReferenceNumber;
        }

        totalNumberOfDeductees++;
        totalAmountPaid     += taxWithholddeducteeDetail.TotalAmountPaid;
        totalTaxDeducted    += taxWithholddeducteeDetail.TaxWithholdAmount + taxWithholddeducteeDetail.SurchargeAmount + taxWithholddeducteeDetail.peCessAmount;
        this.insertIntoDeducteeDetailExtCorrection(_challanNumber,
                                                _deducteeRecordNumber,
                                                natureOfAssessee,
                                                accountNumber,
                                                vendAccountNumber,
                                                name,
                                                panStatus,
                                                panNumber,
                                                panRefNumber,
                                                taxWithholddeducteeDetail.TotalIncomeTax,
                                                taxWithholddeducteeDetail.TotalAmountPaid,
                                                batchNumber-1,
                                                taxWithholddeducteeDetail.TaxWithholdAmount,
                                                taxWithholddeducteeDetail.SurchargeAmount,
                                                taxWithholddeducteeDetail.peCessAmount,
                                                taxWithholddeducteeDetail.TotalRate,
                                                taxWithholddeducteeDetail.TransDate,
                                                taxWithholddeducteeDetail.TaxWithholdDate,
                                                taxWithholddeducteeDetail.SectionCode,
                                                taxWithholddeducteeDetail.CertificateNumber,
                                                taxWithholddeducteeDetail.Reason,
                                                taxWithholddeducteeDetail.TaxApplicability);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsPostalAddressByTANNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets LogisticsPostalAddress by TAN number.
    /// </summary>
    /// <returns>
    /// LogisticsPostalAddress table record.
    /// </returns>
    public LogisticsPostalAddress getLogisticsPostalAddressByTANNumber()
    {
        DirPartyLocation                dirPartyLocation;
        TaxInformation_IN               taxInformationLocal;
        CompanyInfo                     companyInfoLocal;
        utcdatetime                     fromDateTime;
        utcdatetime                     toDateTime;

        fromDateTime = DateTimeUtil::newDateTime(fromDate, timeMax());
        toDateTime   = DateTimeUtil::newDateTime(toDate, timeMax());

        select firstonly validTimeState(FromDate, ToDate) RegistrationLocation from taxInformationLocal
            where taxInformationLocal.tan == tanNumber
            join Location from dirPartyLocation
                order by IsPrimary desc
                where dirPartyLocation.Location     == taxInformationLocal.RegistrationLocation
                exists join companyInfoLocal
                    where companyInfoLocal.RecId == dirPartyLocation.Party
                        && companyInfoLocal.DataArea == curext();

        return LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfPartyRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of the party records.
    /// </summary>
    /// <param name="_settledVoucher">
    /// The settled voucher.
    /// </param>
    /// <param name="_challanNum">
    /// The challange number.
    /// </param>
    /// <returns>
    /// The number of party records.
    /// </returns>
    public int getNumOfPartyRecords(Voucher                        _settledVoucher,
                                    TaxWithholdChallanNumber_IN    _challanNum)
    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        TaxWithholdTrans_IN     taxWithholdTransLoc;
        TaxWithholdTrans_IN     taxWithholdTransAdjust;
        int                     counterI, counterJ;
        real                    taxAmount;
        container               checkVoucher;
        container               origVoucherCon;
        int                     counterOrigVoucherCon;

        container               taxAmounts;
        ;

        while select Authority, LedgerVoucher, TaxWithholdComponentGroup, TransDate, TaxWithholdRegNumber, Settled,
                     InventRefId, TransactionReversal, ComponentStatus, Voucher, LineNum, PurchId, SalesId
            from taxWithholdTrans
            order by VendAccount, CustAccount, RecId asc
                where taxWithholdTrans.Authority                    == taxWithholdAuthorities.VendAccount
                   && taxWithholdTrans.LedgerVoucher                == _settledVoucher
                   && taxWithholdTrans.TaxWithholdComponentGroup    == componentGroupTable.RecId
                   && taxWithholdTrans.TransDate                    >= fromDate
                   && taxWithholdTrans.TransDate                    <= toDate
                   && taxWithholdTrans.TaxWithholdRegNumber         == tanNumber
                   && taxWithholdTrans.Settled                      == false
                   && taxWithholdTrans.InventRefId                  == ''
                   && taxWithholdTrans.TransactionReversal          == false
                   && taxWithholdTrans.ComponentStatus              == componentStatus
                   && taxWithholdTrans.SourceTransVoucher           == ''
                   && taxWithholdTrans.SourceTransDate              == dateNull()
        if (!conFind(checkVoucher, taxWithholdTrans.Voucher, taxWithholdTrans.LineNum))
        {
            counterI++;
            checkVoucher        = conPoke(checkVoucher, counterI, taxWithholdTrans.Voucher, taxWithholdTrans.LineNum);
            taxAmount           = 0;

            while select taxWithholdTransLoc
                order by TransDate, RecId asc
                    where taxWithholdTransLoc.Authority                 == taxWithholdAuthorities.VendAccount
                        && taxWithholdTransLoc.LedgerVoucher             == _settledVoucher
                        && taxWithholdTransLoc.TaxWithholdComponentGroup == componentGroupTable.RecId
                        && taxWithholdTransLoc.TransDate                 >= fromDate
                        && taxWithholdTransLoc.TransDate                 <= toDate
                        && taxWithholdTransLoc.TaxWithholdRegNumber      == tanNumber
                        && (taxWithholdTransLoc.Voucher                  == taxWithholdTrans.Voucher
                        || ((taxWithholdTransLoc.InventRefId             == taxWithholdTrans.PurchId
                        || taxWithholdTransLoc.InventRefId               == taxWithholdTrans.SalesId)
                        && taxWithholdTransLoc.InventRefId
                        && taxWithholdTransLoc.ReturnVoucher             == taxWithholdTrans.Voucher))
                        && (taxWithholdTransLoc.LineNum                  == taxWithholdTrans.LineNum
                        || (taxWithholdTransLoc.ReturnLineNum            == taxWithholdTrans.LineNum
                        && taxWithholdTransLoc.ReturnVoucher))
                        && taxWithholdTransLoc.ComponentStatus           == componentStatus
            {
                taxAmounts = this.getReportingCodes(taxWithholdTransLoc);
                taxAmount  += conPeek(taxAmounts, 1);
                taxAmount  += conPeek(taxAmounts, #2);
                taxAmount  += conPeek(taxAmounts, #3);

                if (!conFind(origVoucherCon, taxWithholdTrans.Voucher))
                {
                    counterOrigVoucherCon++;
                    origVoucherCon = conPoke(origVoucherCon, counterOrigVoucherCon, taxWithholdTrans.Voucher);
                }
            }

            while select taxWithholdTransAdjust
                order by TransDate, RecId asc
                where   taxWithholdTransAdjust.SourceTransDate              == taxWithholdTrans.TransDate
                    &&  taxWithholdTransAdjust.SourceTransVoucher           == taxWithholdTrans.Voucher
                    &&  taxWithholdTransAdjust.TaxWithholdComponentGroup    == componentGroupTable.RecId
            {
                taxAmounts = this.getReportingCodes(taxWithholdTrans);
                taxAmount  += conPeek(taxAmounts, 1);
                taxAmount  += conPeek(taxAmounts, #2);
                taxAmount  += conPeek(taxAmounts, #3);
            }
            counterJ++;
        }

        counterJ += this.getAdjustNumOfPartyRecords(origVoucherCon, _settledVoucher, _challanNum);

        return counterJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfPartyRecordsC9Correction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of party records C9 correction.
    /// </summary>
    /// <param name="_voucher">
    /// The insatance of the <c>Voucher</c> class.
    /// </param>
    /// <returns>
    /// The number of party records.
    /// </returns>
    public container getNumOfPartyRecordsC9Correction(Voucher    _voucher)
    {
        TaxWithholdTrans_IN             taxWithholdTrans;
        int                                 counterI;
        TaxWithholdComponentGroupRecId_IN   conponentGroup;
        LedgerJournalTrans                  ledgerJournalTrans;
        CustVendPaymJournalFee              custVendPaymJournalFee;
        VendPaymFee                         vendPaymFee;
        container                           taxAmounts = conNull();
        container                           deducteeCount = conNull();
        ;

        taxWithholdAmount       = 0;
        taxWithholdTotalAmount  = 0;
        surcharge       = 0;
        peCess          = 0;
        interest        = 0;
        otherCharges    = 0;
        fee             = 0;
        while select taxWithholdTrans
            where taxWithholdTrans.LedgerVoucher    == _voucher
               && taxWithholdTrans.Settled          == false
               && taxWithholdTrans.ComponentStatus  == componentStatus
               && taxWithholdTrans.TransDate        <= toDate
               && taxWithholdTrans.TransDate        >= fromDate
               && taxWithholdTrans.TaxType          == taxType
        {
            conponentGroup          = taxWithholdTrans.TaxWithholdComponentGroup;
            taxAmounts              = this.getReportingCodes(taxWithholdTrans);
            taxWithholdAmount       += conPeek(taxAmounts, 1);
            surcharge               += conPeek(taxAmounts, #2);
            peCess                  += conPeek(taxAmounts, #3);
            if (!conFind(deducteeCount, taxWithholdTrans.Voucher, taxWithholdTrans.LineNum))
            {
                counterI++;
                deducteeCount = conPoke(deducteeCount, counterI, taxWithholdTrans.Voucher, taxWithholdTrans.LineNum);
            }
        }
        taxWithholdTotalAmount  += taxWithholdAmount + surcharge + peCess;
        select firstOnly RecId from ledgerJournalTrans
           where ledgerJournalTrans.Voucher == _voucher;

        while select FeeId, FeeValue from custVendPaymJournalFee
            where custVendPaymJournalFee.RefRecId   == ledgerJournalTrans.RecId
               && custVendPaymJournalFee.Module     == ModuleCustVend::Vend
        if (custVendPaymJournalFee)
        {
            select TaxWithholdFeeType_IN from vendPaymFee
                where vendPaymFee.FeeId == custVendPaymJournalFee.FeeId;
            if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Interest)
            {
                interest    += custVendPaymJournalFee.FeeValue;
            }
            else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Others)
            {
                otherCharges    += custVendPaymJournalFee.FeeValue;
            }
            else
            {
                fee     += custVendPaymJournalFee.FeeValue;
            }
        }
        return  [counterI, conponentGroup];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfPartyRecordsCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of party records correction.
    /// </summary>
    /// <param name="_challanDetailNum">
    /// The challange detail number.
    /// </param>
    /// <returns>
    /// The number of party records correction.
    /// </returns>
    public int getNumOfPartyRecordsCorrection(int _challanDetailNum)
    {
        int         counter, counterI, counterJ = #3, counterK;
        container   tempData = conNull();
        ;

        tempData = deducteeData;
        while (counterI <= conLen(deducteeData))
        {
            counterK = conPeek(tempData, counterJ);
            if (counterK == _challanDetailNum)
            {
                counter++;
            }
            counterJ += #4;
            counterI += #4;
        }
        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reporting codes.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    /// The tax withhold transaction.
    /// </param>
    /// <returns>
    /// The retporting codes.
    /// </returns>
    public container getReportingCodes(TaxWithholdTrans_IN _taxWithholdTrans)
    {
        TaxWithholdReportingCodes_IN    reportingCodes;
        container                       taxAmount = conNull();
        AmountCur                       taxWithholdAmountLoc, surchargeAmount, sheCessAmount, eduCessAmount;
        ;

        select TaxWithholdComponentGroup, TaxWithholdComponent, ReportingCode from reportingCodes
            where reportingCodes.TaxWithholdComponentGroup  == _taxWithholdTrans.TaxWithholdComponentGroup
               && reportingCodes.TaxWithholdComponent       == _taxWithholdTrans.TaxWithholdComponent;
        switch (reportingCodes.ReportingCode)
        {
            case TaxWithholdReportingCode_IN::PECess :
                eduCessAmount =  _taxWithholdTrans.TaxWithholdAmount * -1;
                break;

            case TaxWithholdReportingCode_IN::SHECess :
                sheCessAmount = _taxWithholdTrans.TaxWithholdAmount * -1;
                break;

            case TaxWithholdReportingCode_IN::Surcharge :
                surchargeAmount = _taxWithholdTrans.TaxWithholdAmount * -1;
                break;

            case TaxWithholdReportingCode_IN::TDS :
                taxWithholdAmountLoc =  _taxWithholdTrans.TaxWithholdAmount * -1;
                break;

            case TaxWithholdReportingCode_IN::TCS :
                taxWithholdAmountLoc =  _taxWithholdTrans.TaxWithholdAmount * -1;
                break;
        }
        taxAmount = conPoke(taxAmount, 1, taxWithholdAmountLoc);
        taxAmount = conPoke(taxAmount, #2, surchargeAmount);
        taxAmount = conPoke(taxAmount, #3, eduCessAmount + sheCessAmount);
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountsCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax amounts correction.
    /// </summary>
    /// <param name="_challanNumber">
    /// The challange number.
    /// </param>
    /// <returns>
    /// The tax amounts correction.
    /// </returns>
    public container getTaxAmountsCorrection(int _challanNumber)
    {
        Amount                          taxWithholdAmountLoc, surchargeAmountLoc, eCessAmountLoc;
        container                       tempData;
        TaxWithholdDeducteeDetail_IN    taxWithholdDeducteeDetail;
        int                             counterI, counterJ = #3, counterK;
        ;

        tempData = deducteeData;
        while (counterI <= conLen(deducteeData))
        {
            counterK = conPeek(tempData, counterJ);
            if (counterK == _challanNumber)
            {
                taxWithholdDeducteeDetail   =  TaxWithholdDeducteeDetail_IN::findByFileHdr(conPeek(tempData, counterJ-#2),conPeek(tempData, counterJ-1),_challanNumber,conPeek(tempData,counterJ + 1));
                taxWithholdAmountLoc        +=  taxWithholdDeducteeDetail.TaxWithholdAmount;
                surchargeAmountLoc          +=  taxWithholdDeducteeDetail.SurchargeAmount;
                eCessAmountLoc              +=  taxWithholdDeducteeDetail.peCessAmount;
            }
            counterJ += #4;
            counterI += #4;
        }
        return [taxWithholdAmountLoc, surchargeAmountLoc, eCessAmountLoc];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalBatchDepositAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total batch deposit amount.
    /// </summary>
    /// <param name="_correctionType">
    /// The correction type.
    /// </param>
    /// <returns>
    /// The total batch deposit amount.
    /// </returns>
    public real getTotalBatchDepositAmount(int _correctionType)
    {
        int                             counter = 1;
        TaxWithholdChallanDetail_IN     taxWithholdChallanDetail, taxWithholdChallanDetailLocal;
        int                             taxWithholdChallanDetailRecordNumber;
        real                            totalBatchDepositAmount;
        container                       challanAmount;
        int                             counterI;
        ;

        totalBatchDepositAmount = 0;
        if (_correctionType == #2)
        {
            while (counter <= conLen(challanDetailsData))
            {
                taxWithholdChallanDetailRecordNumber = conPeek(challanDetailsData,counter);
                select maxof(CorrectionFile) from taxWithholdChallanDetailLocal
                   where taxWithholdChallanDetailLocal.FromDate                   == fromDate
                      && taxWithholdChallanDetailLocal.ToDate                     == toDate
                      && taxWithholdChallanDetailLocal.TaxWithholdRegNumber       == tanNumber
                      && taxWithholdChallanDetailLocal.FormNumber                 == taxWithholdStatement
                      && taxWithholdChallanDetailLocal.ChallanDetailRecordNumber  == taxWithholdChallanDetailRecordNumber;
                select taxWithholdChallanDetail
                   where taxWithholdChallanDetail.FromDate                  == fromDate
                      && taxWithholdChallanDetail.ToDate                    == toDate
                      && taxWithholdChallanDetail.TaxWithholdRegNumber      == tanNumber
                      && taxWithholdChallanDetail.FormNumber                == taxWithholdStatement
                      && taxWithholdChallanDetail.ChallanDetailRecordNumber == taxWithholdChallanDetailRecordNumber
                      && taxWithholdChallanDetail.CorrectionFile            == taxWithholdChallanDetailLocal.CorrectionFile;
                totalBatchDepositAmount += taxWithholdChallanDetail.TotalDepositAmount;
                counter++;
            }
        }
        else if (_correctionType == #3)
        {
            while (counter <= conLen(challanData))
            {
                taxWithholdChallanDetailRecordNumber = conPeek(challanData,counter);
                select maxof(CorrectionFile) from taxWithholdChallanDetailLocal
                   where taxWithholdChallanDetailLocal.FromDate                   == fromDate
                      && taxWithholdChallanDetailLocal.ToDate                     == toDate
                      && taxWithholdChallanDetailLocal.TaxWithholdRegNumber       == tanNumber
                      && taxWithholdChallanDetailLocal.FormNumber                 == taxWithholdStatement
                      && taxWithholdChallanDetailLocal.ChallanDetailRecordNumber  == taxWithholdChallanDetailRecordNumber;
                select taxWithholdChallanDetail
                   where taxWithholdChallanDetail.FromDate                  == fromDate
                      && taxWithholdChallanDetail.ToDate                    == toDate
                      && taxWithholdChallanDetail.TaxWithholdRegNumber      == tanNumber
                      && taxWithholdChallanDetail.FormNumber                == taxWithholdStatement
                      && taxWithholdChallanDetail.ChallanDetailRecordNumber == taxWithholdChallanDetailRecordNumber
                      && taxWithholdChallanDetail.CorrectionFile            == taxWithholdChallanDetailLocal.CorrectionFile;
                totalBatchDepositAmount += taxWithholdChallanDetail.TotalDepositAmount;
                counter++;
            }
            counter = 1;
            for (counter = 1; counter <= conLen(challanDetailsData); counter++)
            {
                if (!conFind(challanData, conPeek(challanDetailsData, counter)))
                {
                    counterI++;
                    challanAmount = conPoke(challanAmount, counterI, conPeek(challanDetailsData, counter));
                }
            }
            counter = 1;
            while (counter <= conLen(challanAmount))
            {
                taxWithholdChallanDetailRecordNumber = conPeek(challanAmount,counter);
                select maxof(CorrectionFile) from taxWithholdChallanDetailLocal
                   where taxWithholdChallanDetailLocal.FromDate                   == fromDate
                      && taxWithholdChallanDetailLocal.ToDate                     == toDate
                      && taxWithholdChallanDetailLocal.TaxWithholdRegNumber       == tanNumber
                      && taxWithholdChallanDetailLocal.FormNumber                 == taxWithholdStatement
                      && taxWithholdChallanDetailLocal.ChallanDetailRecordNumber  == taxWithholdChallanDetailRecordNumber;
                select FromDate, ToDate, TaxWithholdRegNumber, FormNumber, ChallanDetailRecordNumber, CorrectionFile, TotalDepositAmount from taxWithholdChallanDetail
                   where taxWithholdChallanDetail.FromDate                  == fromDate
                      && taxWithholdChallanDetail.ToDate                    == toDate
                      && taxWithholdChallanDetail.TaxWithholdRegNumber      == tanNumber
                      && taxWithholdChallanDetail.FormNumber                == taxWithholdStatement
                      && taxWithholdChallanDetail.ChallanDetailRecordNumber == taxWithholdChallanDetailRecordNumber
                      && taxWithholdChallanDetail.CorrectionFile            == taxWithholdChallanDetailLocal.CorrectionFile;
                totalBatchDepositAmount += taxWithholdChallanDetail.TotalDepositAmount;
                counter++;
            }
        }
        else
        {
            while (counter <= conLen(challanData))
            {
                taxWithholdChallanDetailRecordNumber = conPeek(challanData,counter);
                select maxof(CorrectionFile) from taxWithholdChallanDetailLocal
                   where taxWithholdChallanDetailLocal.FromDate                   == fromDate
                      && taxWithholdChallanDetailLocal.ToDate                     == toDate
                      && taxWithholdChallanDetailLocal.TaxWithholdRegNumber       == tanNumber
                      && taxWithholdChallanDetailLocal.FormNumber                 == taxWithholdStatement
                      && taxWithholdChallanDetailLocal.ChallanDetailRecordNumber  == taxWithholdChallanDetailRecordNumber;

                select FromDate, ToDate, TaxWithholdRegNumber, FormNumber, ChallanDetailRecordNumber, CorrectionFile, TotalDepositAmount from taxWithholdChallanDetail
                   where taxWithholdChallanDetail.FromDate                  == fromDate
                      && taxWithholdChallanDetail.ToDate                    == toDate
                      && taxWithholdChallanDetail.TaxWithholdRegNumber      == tanNumber
                      && taxWithholdChallanDetail.FormNumber                == taxWithholdStatement
                      && taxWithholdChallanDetail.ChallanDetailRecordNumber == taxWithholdChallanDetailRecordNumber
                      && taxWithholdChallanDetail.CorrectionFile            == taxWithholdChallanDetailLocal.CorrectionFile;
                totalBatchDepositAmount += taxWithholdChallanDetail.TotalDepositAmount;
                counter++;
            }
        }
        return totalBatchDepositAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data.
    /// </summary>
    /// <param name="_data">
    /// Data container
    /// </param>
    public void init(container _data)
    {
        boolean                 taxWithholdFiled;
        #TaxWithhold_IN

        companyInfo                 = CompanyInfo::find();
        taxInformationLegalEntity   = CompanyInfoHelper::getTaxInformationLegalEntity_IN(companyInfo);
         [fromDate,
            toDate,
            path,
            fullName,
            designation,
            financialYear,
            assessmentYear,
            totalDepositAmount,
            numberOfChallans,
            tanNumber,
            fileTaxWithhold,
            printingDate,
            fileTaxWithholdCorrection,
            correctionFilePath,
            rrrNumber,
            periodEnd,
            taxType,
            taxWithholdStatement,
            componentStatus,
            utilityName] = _data;

        logisticsPostalAddress      = this.getLogisticsPostalAddressByTANNumber();
        logisticsLocationEntity     = LogisticsLocationEntity::constructFromLocationRecId(logisticsPostalAddress.Location);

        address                     = conPeek(TaxWithholdEFilling_IN::wordWrap(logisticsPostalAddress.Street, #25), 1);
        lineCount                   = conPeek(TaxWithholdEFilling_IN::wordWrap(logisticsPostalAddress.Street, #25), #2);

        this.initDeductorInfo();
        this.initResponsibleInfo();

        numberOfLinesInFile         = 1;
        lineNumberInFile            = 1;
        fileSeqNumber               = 1;
        numberOfBatches             = 1;
        batchNumber                 = 1;
        challanNumber               = 1;
        taxTypeLoc                  = taxType == TaxWithholdCodeType_IN::TDS ? TaxWithholdType_IN::TDS : TaxWithholdType_IN::TCS;
        if (taxWithholdStatement == TaxWithholdStatement_IN::Form26Q)
        {
            formNumber = #26Q;
        }
        else if (taxWithholdStatement == TaxWithholdStatement_IN::Form27EQ)
        {
            formNumber = #27EQ;
        }
        else
        {
            formNumber = #27Q;
        }
        this.setFileNumber();
        this.setPeriodFinancialAssesmentYear();
        taxWithholdFiled = this.checkeTaxWithholdFiled();
        if (taxWithholdFiled == true)
        {
            if (fileTaxWithholdCorrection == false)
            {
                this.printFromTable();
            }
            else
            {
                path = correctionFilePath;
                this.buildCorrection();
            }
        }
        else
        {
            this.printFileHeader();
            this.printBatchHeader();
            ttsbegin;
            if (fileTaxWithhold == NoYes::Yes)
            {
                this.insertIntoFileHeader(1,true);
                this.insertIntoBatchHeader();
                this.insertIntoStatementLine();
                this.insertIntoPRNNumber(TaxWithholdCorrectionType_IN::None,0,false);
            }
            this.printChallanDetail();
            ttscommit;
        }
        if (fileTaxWithholdCorrection == false)
        {
            numberOfChallansLoc = numberOfChallans;
        }
        else
        {
            numberOfChallansLoc = numberOfChallansLoc + modifiedChallanCount + newChallanCount;
        }

        if (fileTaxWithhold)
        {
            this.initValuesForReport27A();
            this.run27AReport();
        }

        File::SendFileToUser(headerData.getStream(), path);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeductorInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the details of the deductee.
    /// </summary>
    private void initDeductorInfo()
    {
        DirPartyTable                   dirPartyTable = DirPartyTable::findRec(companyInfo.RecId);
        DirPartyLocation                dirPartyLocationLoc = DirPartyLocation::findPrimaryPartyLocation(dirPartyTable.RecId);
        LogisticsLocation               logisticsLocation = LogisticsLocation::find(dirPartyLocationLoc.Location);
        TaxInformation_IN               taxInformationLocal= TaxInformation_IN::findDefaultbyLocation(logisticsLocation.RecId);
        LogisticsLocation               logisticsLocationElecAddr;
        LogisticsElectronicAddress      logisticsElectronicAddress;
        container                       phoneSections;
        LogisticsLocation               logisticsLocationAlternateAddress;
        DirPartyLocation                dirPartyLocationAlternateAddress;

        #define.Two(2);

        if (taxInformationLocal.TAN == tanNumber)
        {
            deductorName           = companyInfo.Name;
            deductorTelePhone      = TaxWithholdEFilling_IN::getPhone(companyInfo.RecId);
            deductorEmail          = companyInfo.email();

            phoneSections     = DirUtility::parsePhoneSections_IN(deductorTelePhone);
            if (TaxWithholdEfilling_IN::isPhoneNumberValid(phoneSections))
            {
                deductorSTDCode         = conpeek(phoneSections, #STDCode);
                deductorPhoneSubscriber = conpeek(phoneSections, #SubscriberNumber);
            }
            else
            {
                deductorSTDCode         = '';
                deductorPhoneSubscriber = '';
            }
        }
        else
        {
           //To get the fields related to alternate postal address of the deductee
           select firstOnly logisticsLocationAlternateAddress
                Where logisticsLocationAlternateAddress.RecId == logisticsPostalAddress.Location
            join dirPartyLocationAlternateAddress
                where dirPartyLocationAlternateAddress.Location == logisticsLocationAlternateAddress.RecId;

             deductorName = DirPartyTable::findRec(dirPartyLocationAlternateAddress.Party).Name;

            //To get the fields related to alternate Electronic address of the deductee
            while select Type, Locator from logisticsElectronicAddress
                exists join logisticsLocationElecAddr
                    where logisticsLocationElecAddr.ParentLocation == logisticsLocationAlternateAddress.RecId
                        && logisticsElectronicAddress.Location == logisticsLocationElecAddr.RecId
                        && (logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                            || logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone)
            {
                if (logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email)
                {
                    deductorEmail = logisticsElectronicAddress.Locator;
                }
                else if (logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone)
                {
                    deductorTelePhone = logisticsElectronicAddress.Locator;
                }
            }
            phoneSections           = DirUtility::parsePhoneSections_IN(deductorTelePhone);
            if (conlen(phoneSections) == #Two)
            {
                deductorSTDCode         = conpeek(phoneSections, #STDCode);
                deductorPhoneSubscriber = conpeek(phoneSections, #SubscriberNumber);
            }
            else
            {
                deductorSTDCode         = '';
                deductorPhoneSubscriber = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initResponsibleInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the details of the responsible person.
    /// </summary>
    private void initResponsibleInfo()
    {
        Container                           phoneSections;
        HcmWorker                           hcmWorker = HcmWorker::findByPersonnelNumber(fullName);
        DirPartyTable                       dirPartyTable = DirPartyTable::findRec(hcmWorker.Person);
        LogisticsLocation                   logisticsLocationPostalAddr;
        DirPartyLocation                    dirPartyLocation;

        //To get the Fields related to postal address of the responsible person
        select firstonly Location, Street, State, ZipCode, city from logisticsPostalAddressResponsible
            join Party from dirPartyLocation
                where dirPartyLocation.Party == dirPartyTable.RecId
                    && dirPartyLocation.IsPrimary == NoYes::Yes
            join  RecId from logisticsLocationPostalAddr
                where logisticsLocationPostalAddr.RecId == dirPartyLocation.Location
                    && logisticsPostalAddressResponsible.Location == logisticsLocationPostalAddr.RecId;

        //To get the fields related to Electronic address of the responsible person
        responsibleName             = hcmWorker.name();
        responsibleAddress          = conPeek(TaxWithholdEFilling_IN::wordWrap(logisticsPostalAddressResponsible.Street, #25), 1);
        responsibleAddressSteet     = conpeek(TaxWithholdEFilling_IN::wordWrap(logisticsPostalAddressResponsible.Street, #25), 1);
        responsibleAddressLinecount = conPeek(TaxWithholdEFilling_IN::wordWrap(logisticsPostalAddressResponsible.Street, #25), #2);
        responsibleStateCode        = TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State);
        responsibleEmail            = hcmWorker.email();
        responsibleTelePhone        = TaxWithholdEFilling_IN::getPhone(hcmWorker.Person);
        responsibleCellularPhone    = TaxWithholdEFilling_IN::getMobilePhone(hcmWorker.Person);

        phoneSections               = DirUtility::parsePhoneSections_IN(responsibleTelePhone);
        if (TaxWithholdEfilling_IN::isPhoneNumberValid(phoneSections))
        {
            responsibleSTDCode          = conpeek(phoneSections, #STDCode);
            responsiblePhoneSubscriber  = conpeek(phoneSections, #SubscriberNumber);
        }

        phoneSections               = DirUtility::parsePhoneSections_IN(responsibleCellularPhone, NoYes::Yes);
        responsibleCellularPhone    = conpeek(phoneSections, #CellularNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValuesForReport27A</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value of 27A report.
    /// </summary>
    public void initValuesForReport27A()
    {
        report27AContract = new TaxWithholdReport27AContract();

        report27AContract.parmAmountPaid(totalAmountPaid);
        report27AContract.parmAssessmentYear(strIns(assessmentYear, #Hyphen, #5));
        report27AContract.parmDesignation(designation);
        report27AContract.parmFinancialYear(strIns(financialYear, #Hyphen, #5));
        report27AContract.parmFormNumber(formNumber);
        report27AContract.parmFromDate(fromDate);
        report27AContract.parmFullName(fullName);
        report27AContract.parmNumberOfAnnexures(numberOfChallansLoc);
        report27AContract.parmNumberOfPartyRecords(totalNumberOfDeductees);
        report27AContract.parmNumOrigin(rrrNumber);
        report27AContract.parmPrintingDate(printingDate);
        report27AContract.parmTaxDeducted(totalTaxDeducted);
        report27AContract.parmTaxDeposited(totalTaxDeposited);
        report27AContract.parmToDate(toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data to batch header.
    /// </summary>
    public void insertIntoBatchHeader()
    {
        TaxWithholdFileHeader_IN    taxWithholdFileHeader;
        TaxWithholdBatchHeader_IN   taxWithholdBatchHeader;
        HcmWorker                   hcmWorker = HcmWorker::findByPersonnelNumber(fullName);
        CompanyInfo                 companyInfoLoc = CompanyInfo::find();

        taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate,toDate,0);
        taxWithholdBatchHeader.RecIdFileHdr                    =   taxWithholdFileHeader.RecId;
        taxWithholdBatchHeader.BatchRecordNumber               =   1;
        taxWithholdBatchHeader.DeductorBranchId                =   "";
        taxWithholdBatchHeader.rrrOriginal                     =   "";
        taxWithholdBatchHeader.rrrPrevious                     =   "";
        taxWithholdBatchHeader.CorrectionType                  =   TaxWithholdCorrectionType_IN::None;
        taxWithholdBatchHeader.TaxWithholdRegNumber            =   tanNumber;
        taxWithholdBatchHeader.PanNumber                       =   taxInformationLegalEntity.panNumber;
        taxWithholdBatchHeader.DeductorType                    =   taxInformationLegalEntity.TypeOfDeductor;
        if (numberOfChallans == 0)
        {
            taxWithholdBatchHeader.NilChallanIndicator =   NoYes::Yes;
        }
        else
        {
            taxWithholdBatchHeader.NilChallanIndicator =   NoYes::No;
        }
        taxWithholdBatchHeader.DeductorAddress                 =   logisticsPostalAddress.Street;
        taxWithholdBatchHeader.DeductorName                    =   DirPartyTable::findRec(CompanyInfo::current()).Name;
        taxWithholdBatchHeader.DeductorStateCode               =   TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddress.State);
        taxWithholdBatchHeader.DeliveyLocation                 =   logisticsPostalAddress.RecId;
        taxWithholdBatchHeader.DeductorEmail                   =   deductorEmail;
        taxWithholdBatchHeader.DeductorTelePhone               =   deductorTelePhone;

        taxWithholdBatchHeader.ResponsiblePersonsName          =   responsibleName;
        taxWithholdBatchHeader.ResponsiblePersonsDesignation   =   designation;
        taxWithholdBatchHeader.ResponsiblePersonStateCode      =   TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State);
        taxWithholdBatchHeader.ResponsiblePersonEmail          =   responsibleEmail;
        taxWithholdBatchHeader.ResponsiblePersonTelePhone      =   responsibleTelePhone;
        taxWithholdBatchHeader.ResponsiblePersonAddress        =   responsibleAddress;

        taxWithholdBatchHeader.DeductorChangeOfAddress         =   changeInDeductorsAddress;
        taxWithholdBatchHeader.ResponsiblePersonChangeOfAddress=   responsiblePersonsAddress;
        taxWithholdBatchHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoBatchHeaderCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the correction data to batch header.
    /// </summary>
    /// <param name="_batchNumber">
    /// Batch number.
    /// </param>
    /// <param name="_correction">
    /// Correction type.
    /// </param>
    public void insertIntoBatchHeaderCorrection(int                            _batchNumber,
                                                TaxWithholdCorrectionType_IN   _correction)
    {
        TaxWithholdFileHeader_IN    taxWithholdFileHeader, taxWithholdFileHeaderLocal;
        TaxWithholdBatchHeader_IN   taxWithholdBatchHeader, taxWithholdBatchHeaderLocal;

        select maxof(CorrectionFile) from taxWithholdFileHeaderLocal
           where taxWithholdFileHeaderLocal.TaxWithholdRegNumber  == tanNumber
              && taxWithholdFileHeaderLocal.FormNumber      == taxWithholdStatement
              && taxWithholdFileHeaderLocal.FromDate        == fromDate
              && taxWithholdFileHeaderLocal.ToDate          == toDate;

        taxWithholdFileHeader = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate,toDate,taxWithholdFileHeaderLocal.CorrectionFile);
        taxWithholdBatchHeader.RecIdFileHdr        = taxWithholdFileHeader.RecId;
        taxWithholdBatchHeader.BatchRecordNumber   = _batchNumber;
        taxWithholdBatchHeader.DeductorBranchId    = "";
        if (taxWithholdFileHeaderLocal.CorrectionFile == 1)
        {
            taxWithholdBatchHeader.rrrOriginal     = rrrNumber;
            taxWithholdBatchHeader.rrrPrevious     = rrrNumber;
        }
        else
        {
            taxWithholdFileHeaderLocal         = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate,toDate,1);
            taxWithholdBatchHeaderLocal        = TaxWithholdBatchHeader_IN::findByFileHdr(taxWithholdFileHeaderLocal.RecId,1);
            taxWithholdBatchHeader.rrrOriginal = taxWithholdBatchHeaderLocal.rrrOriginal;
            taxWithholdBatchHeader.rrrPrevious = rrrNumber;
        }
        taxWithholdBatchHeader.CorrectionType  = _correction;
        taxWithholdBatchHeader.PanNumber       = taxInformationLegalEntity.panNumber;
        if (numberOfChallans == 0)
        {
            taxWithholdBatchHeader.NilChallanIndicator = NoYes::Yes;
        }
        else
        {
            taxWithholdBatchHeader.NilChallanIndicator = NoYes::No;
        }
        taxWithholdBatchHeader.DeductorType                     =   taxInformationLegalEntity.TypeOfDeductor;
        taxWithholdBatchHeader.ResponsiblePersonsName           =   responsibleName;
        taxWithholdBatchHeader.ResponsiblePersonsDesignation    =   designation;

        taxWithholdBatchHeader.DeductorAddress                 =   logisticsPostalAddress.Street;
        taxWithholdBatchHeader.DeductorStateCode               =   TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddress.State);
        taxWithholdBatchHeader.DeliveyLocation                 =   logisticsPostalAddress.RecId;
        taxWithholdBatchHeader.DeductorEmail                   =   deductorEmail;
        taxWithholdBatchHeader.DeductorTelePhone               =   deductorTelePhone;
        taxWithholdBatchHeader.DeductorName                    =   deductorName;
        taxWithholdBatchHeader.ResponsiblePersonStateCode      =   TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State);
        taxWithholdBatchHeader.ResponsiblePersonEmail          =   responsibleEmail;
        taxWithholdBatchHeader.ResponsiblePersonTelePhone      =   responsibleTelePhone;
        taxWithholdBatchHeader.ResponsiblePersonAddress        =   responsibleAddress;

        taxWithholdBatchHeader.ResponsiblePersonChangeOfAddress =   responsiblePersonsAddress;
        taxWithholdBatchHeader.DeductorChangeOfAddress          =   changeInDeductorsAddress;
        taxWithholdBatchHeader.TaxWithholdRegNumberPrevious     =   tanNumber;
        taxWithholdBatchHeader.TaxWithholdRegNumber             =   tanNumber;
        taxWithholdBatchHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoChallanDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the challan detail info.
    /// </summary>
    /// <param name="_challanDetails">
    /// Tax Withhold settle trans.
    /// </param>
    /// <param name="_totalDepositAmount">
    /// Total deposit amounts.
    /// </param>
    /// <param name="_taxWithholdAmount">
    /// Tax withhold amounts.
    /// </param>
    /// <param name="_surchargeAmount">
    /// Surcharge amounts.
    /// </param>
    /// <param name="_peCessAmount">
    /// PeCess tax amounts.
    /// </param>
    /// <param name="_interest">
    /// Interest amounts.
    /// </param>
    /// <param name="_otherCharges">
    /// Other charge amounts.
    /// </param>
    /// <param name="_fee">
    /// Fee amounts
    /// </param>
    public void insertIntoChallanDetail(TaxWithholdSettleTrans_IN   _challanDetails,
                                        Amount                      _totalDepositAmount,
                                        Amount                      _taxWithholdAmount,
                                        Amount                      _surchargeAmount,
                                        Amount                      _peCessAmount,
                                        Amount                      _interest,
                                        Amount                      _otherCharges,
                                        Amount                      _fee = 0)
    {
        TaxWithholdChallanDetail_IN     challanDetailsLoc;
        TaxWithholdStatementLine_IN     taxWithholdStatementLine, taxWithholdStatementLineLocal;
        TaxWithholdFileHeader_IN        taxWithholdFileHeader;

        taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate,toDate,0);
        challanDetailsLoc.RecIdFileHdr                  = taxWithholdFileHeader.RecId;
        challanDetailsLoc.BatchRecordNumber             = 1;
        challanDetailsLoc.ChallanDetailRecordNumber     = challanNumber;
        challanDetailsLoc.ChallanNumber                 = _challanDetails.ChallanNumber;
        challanDetailsLoc.TransferVoucherNum            = _challanDetails.TransferVoucherNum;
        challanDetailsLoc.ChallanDate                   = _challanDetails.BookEntry == true ? dateNull() : _challanDetails.ChallanDate;
        challanDetailsLoc.PaidbyBookEntry               = _challanDetails.BookEntry;
        challanDetailsLoc.bsrCode                       = _challanDetails.bsrCode;
        challanDetailsLoc.TotalDepositAmount            = _totalDepositAmount;
        challanDetailsLoc.TaxWithholdAmount             = _taxWithholdAmount;
        challanDetailsLoc.SurchargeAmount               = _surchargeAmount;
        challanDetailsLoc.pEcessAmount                  = _peCessAmount;
        challanDetailsLoc.Interest                      = _interest;
        challanDetailsLoc.OtherCharges                  = _otherCharges;
        challanDetailsLoc.Fee                           = _fee;
        challanDetailsLoc.FromDate                      = fromDate;
        challanDetailsLoc.ToDate                        = toDate;
        challanDetailsLoc.TaxWithholdRegNumber          = tanNumber;
        challanDetailsLoc.FormNumber                    = taxWithholdStatement;
        challanDetailsLoc.CorrectionFile                = 0;
        challanDetailsLoc.Voucher                       = _challanDetails.LedgerVoucher;
        challanDetailsLoc.insert();
        select maxof(LineNumber) from taxWithholdStatementLineLocal
           where taxWithholdStatementLineLocal.RecIdFileHdr == taxWithholdFileHeader.RecId;
        taxWithholdStatementLine.RecIdFileHdr                  = taxWithholdFileHeader.RecId;
        taxWithholdStatementLine.LineNumber                    = taxWithholdStatementLineLocal.LineNumber + 1;
        taxWithholdStatementLine.LineDetails                   = challanDetail;
        taxWithholdStatementLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoChallanDetailCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the correction challan detail info.
    /// </summary>
    /// <param name="_batchNum">
    ///The batch number.
    /// </param>
    /// <param name="_challanSerialNum">
    /// The challan serial number.
    /// </param>
    /// <param name="_challanNum">
    /// The challan number.
    /// </param>
    /// <param name="_depositDate">
    /// The deposit date.
    /// </param>
    /// <param name="_depositByBookEntry">
    /// Whether deposit by book entry.
    /// </param>
    /// <param name="_bsrCode">
    /// The bsr code.
    /// </param>
    /// <param name="_totalDepositAmount">
    /// Total deposit amounts.
    /// </param>
    /// <param name="_taxWithholdAmount">
    /// Tax withhold amounts.
    /// </param>
    /// <param name="_surchargeAmount">
    /// Surcharge amounts.
    /// </param>
    /// <param name="_peCessAmount">
    /// PeCess amounts.
    /// </param>
    /// <param name="_interest">
    /// Interest amounts.
    /// </param>
    /// <param name="_otherCharges">
    /// Other charge amounts.
    /// </param>
    /// <param name="_settledVoucher">
    /// The settled voucher.
    /// </param>
    /// <param name="_fee">
    /// Fee amounts
    /// </param>
    public void insertIntoChallanDetailCorrection(int                          _batchNum,
                                                  int                          _challanSerialNum,
                                                  TaxWithholdChallanNumber_IN  _challanNum,
                                                  TransDate                    _depositDate,
                                                  NoYes                        _depositByBookEntry,
                                                  BSRCode_IN                   _bsrCode,
                                                  Amount                       _totalDepositAmount,
                                                  Amount                       _taxWithholdAmount,
                                                  Amount                       _surchargeAmount,
                                                  Amount                       _peCessAmount,
                                                  Amount                       _interest,
                                                  Amount                       _otherCharges,
                                                  Voucher                      _settledVoucher,
                                                  Amount                       _fee = 0)
    {
        TaxWithholdChallanDetail_IN     taxWithholdChallanDetail;
        TaxWithholdFileHeader_IN        taxWithholdFileHeader, taxWithholdFileHeaderLocal;
        ;

        select maxof(CorrectionFile) from taxWithholdFileHeaderLocal
        where taxWithholdFileHeaderLocal.TaxWithholdRegNumber == tanNumber
           && taxWithholdFileHeaderLocal.FormNumber     == taxWithholdStatement
           && taxWithholdFileHeaderLocal.FromDate       == fromDate
           && taxWithholdFileHeaderLocal.ToDate         == toDate;
        taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber,taxWithholdStatement,fromDate,toDate,taxWithholdFileHeaderLocal.CorrectionFile);
        taxWithholdChallanDetail.RecIdFileHdr                 = taxWithholdFileHeader.RecId;
        taxWithholdChallanDetail.BatchRecordNumber            = _batchNum;
        taxWithholdChallanDetail.ChallanDetailRecordNumber    = _challanSerialNum;
        taxWithholdChallanDetail.ChallanNumber                = _challanNum;
        if (_depositByBookEntry == true)
        {
            taxWithholdChallanDetail.ChallanDate              = dateNull();
        }
        else
        {
            taxWithholdChallanDetail.ChallanDate              = _depositDate;
        }
        taxWithholdChallanDetail.PaidbyBookEntry              = _depositByBookEntry;
        taxWithholdChallanDetail.bsrCode                      = _bsrCode;
        taxWithholdChallanDetail.TotalDepositAmount           = _totalDepositAmount;
        taxWithholdChallanDetail.TaxWithholdAmount            = _taxWithholdAmount;
        taxWithholdChallanDetail.SurchargeAmount              = _surchargeAmount;
        taxWithholdChallanDetail.pEcessAmount                 = _peCessAmount;
        taxWithholdChallanDetail.Interest                     = _interest;
        taxWithholdChallanDetail.OtherCharges                 = _otherCharges;
        taxWithholdChallanDetail.Fee                          = _fee;
        taxWithholdChallanDetail.NilChallanIndicator          = NoYes::No;
        taxWithholdChallanDetail.FromDate                     = fromDate;
        taxWithholdChallanDetail.ToDate                       = toDate;
        taxWithholdChallanDetail.TaxWithholdRegNumber         = tanNumber;
        taxWithholdChallanDetail.FormNumber                   = taxWithholdStatement;
        taxWithholdChallanDetail.CorrectionFile               = taxWithholdFileHeaderLocal.CorrectionFile;
        taxWithholdChallanDetail.Voucher                      = _settledVoucher;
        taxWithholdChallanDetail.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoDeducteeDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the deductee details info.
    /// </summary>
    /// <param name="taxWithholdTrans">
    /// TaxWithholdTrans.
    /// </param>
    /// <param name="_taxWithholdAmountLoc">
    /// Tax withhold amounts.
    /// </param>
    /// <param name="_surchargeAmount">
    /// Surcharge amounts.
    /// </param>
    /// <param name="_peCessAmount">
    /// PeCess amounts.
    /// </param>
    /// <param name="_amountOrigin">
    /// Original amounts.
    /// </param>
    public void insertIntoDeducteeDetail(TaxWithholdTrans_IN    taxWithholdTrans,
                                         AmountCur              _taxWithholdAmountLoc,
                                         AmountCur              _surchargeAmount,
                                         AmountCur              _peCessAmount,
                                         AmountCur              _amountOrigin)
    {
        TaxWithholdDeducteeDetail_IN       taxWithholdDeducteeDetail;
        TaxWithholdStatementLine_IN        taxWithholdStatementLine, taxWithholdStatementLineLocal;
        TaxWithholdFileHeader_IN           taxWithholdFileHeader;
        container                          taxAmounts = conNull();
        ;

        taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate,toDate,0);
        taxWithholdDeducteeDetail.RecIdFileHdr                   =   taxWithholdFileHeader.RecId;
        taxWithholdDeducteeDetail.ChallanDetailRecordNumber      =   challanNumber;
        taxWithholdDeducteeDetail.DeducteeDetailRecordNumber     =   numberOfDeductees;
        if (taxWithholdTrans.NatureOfAssessee ==  NatureOfAssessee_IN::Company)
        {
            taxWithholdDeducteeDetail.DeducteeCode  =   1;
        }
        else
        {
            taxWithholdDeducteeDetail.DeducteeCode  =   #2;
        }

        taxWithholdDeducteeDetail.TaxWithholdNatureOfRemittance         =   taxWithholdTrans.NatureOfRemittance;
        taxWithholdDeducteeDetail.TaxWithholdAcknowledgementNumber      =    taxWithholdTrans.AcknowledgermentNumber;
        taxWithholdDeducteeDetail.TaxWithholdCountryRegionToRemittance  =   taxWithholdTrans.CountryRegionToRemittance;
        taxWithholdDeducteeDetail.DeducteeNumber                        =   taxWithholdTrans.CustAccount;
        taxWithholdDeducteeDetail.VendDeducteeNumber                    =   taxWithholdTrans.VendAccount;
        taxWithholdDeducteeDetail.DeducteeName                          =   taxWithholdTrans.Nameofdeductee;
        taxWithholdDeducteeDetail.DeducteePANStatus                     =   taxWithholdTrans.panStatus;
        taxWithholdDeducteeDetail.DeducteePANNumber                     =   taxWithholdTrans.pan;
        taxWithholdDeducteeDetail.DeducteePANRefNumber                  =   taxWithholdTrans.panReferenceNumber;
        taxWithholdDeducteeDetail.TotalIncomeTax                        =   _taxWithholdAmountLoc + _surchargeAmount + _peCessAmount;
        taxWithholdDeducteeDetail.TotalTaxDeducted                      =   _taxWithholdAmountLoc + _surchargeAmount + _peCessAmount;
        taxWithholdDeducteeDetail.TotalAmountPaid                       =   _amountOrigin;
        taxWithholdDeducteeDetail.BatchRecordNumber                     =   1;
        taxWithholdDeducteeDetail.FromDate                              =   fromDate;
        taxWithholdDeducteeDetail.ToDate                                =   toDate;
        taxWithholdDeducteeDetail.CorrectionFile                        =   taxWithholdFileHeader.CorrectionFile;
        taxWithholdDeducteeDetail.TaxWithholdRegNumber                  =   tanNumber;
        taxWithholdDeducteeDetail.FormNumber                            =   taxWithholdStatement;
        taxAmounts                                                      =   this.getReportingCodes(taxWithholdTrans);
        taxWithholdDeducteeDetail.TaxWithholdAmount                     =   _taxWithholdAmountLoc;
        taxWithholdDeducteeDetail.SurchargeAmount                       =   _surchargeAmount;
        taxWithholdDeducteeDetail.peCessAmount                          =   _peCessAmount;
        taxWithholdDeducteeDetail.TotalRate                             =   taxWithholdTrans.RateOfDeduction;
        taxWithholdDeducteeDetail.TransDate                             =   taxWithholdTrans.TransDate;
        taxWithholdDeducteeDetail.TaxWithholdDate                       =   taxWithholdTrans.TransDate;
        taxWithholdDeducteeDetail.SectionCode                           =   taxWithholdTrans.SectionCode;
        taxWithholdDeducteeDetail.CertificateNumber                     =   taxWithholdTrans.CertificateNumber;
        taxWithholdDeducteeDetail.Reason                                =   taxWithholdTrans.Reason;
        taxWithholdDeducteeDetail.TaxApplicability                      =   taxWithholdTrans.TaxApplicability;
        taxWithholdDeducteeDetail.insert();

        select maxof(LineNumber) from taxWithholdStatementLineLocal
           where taxWithholdStatementLineLocal.RecIdFileHdr == taxWithholdFileHeader.RecId;

        taxWithholdStatementLine.RecIdFileHdr                           =    taxWithholdFileHeader.RecId;
        taxWithholdStatementLine.LineNumber                             =    taxWithholdStatementLineLocal.LineNumber + 1;
        taxWithholdStatementLine.LineDetails                            =    deducteeDetail;
        taxWithholdStatementLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoDeducteeDetailExtCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the correction deductee detail info.
    /// </summary>
    /// <param name="_challanNumber">
    /// The challan number.
    /// </param>
    /// <param name="_numberOfDeductees">
    /// The number of deductees.
    /// </param>
    /// <param name="_natureOfAssessee">
    /// The nature of deductees.
    /// </param>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_vendAccountNum">
    /// The vendor account number.
    /// </param>
    /// <param name="_name">
    /// The deductee name.
    /// </param>
    /// <param name="_panStatus">
    /// The deductee pan status.
    /// </param>
    /// <param name="_panNumber">
    /// The deductee pan number.
    /// </param>
    /// <param name="_panRefNumber">
    /// The deductee pan ref number.
    /// </param>
    /// <param name="_taxWithholdTotalAmount">
    /// Total tax withhold amounts.
    /// </param>
    /// <param name="_amountCur">
    /// Total paid amounts.
    /// </param>
    /// <param name="_batchNum">
    /// The batch number.
    /// </param>
    /// <param name="_taxWithholdAmount">
    /// The tax withhold amounts.
    /// </param>
    /// <param name="_surchargeAmount">
    /// The surcharge amounts.
    /// </param>
    /// <param name="_peCessAmount">
    /// The peCess amounts.
    /// </param>
    /// <param name="_totalRate">
    /// The total rates.
    /// </param>
    /// <param name="_transDate">
    /// The trans date.
    /// </param>
    /// <param name="_transDateLoc">
    /// The tax withhold date.
    /// </param>
    /// <param name="_sectionCode">
    /// The section code.
    /// </param>
    /// <param name="_certificateNumber">
    /// The certificatie number.
    /// </param>
    /// <param name="_reason">
    /// The reason code.
    /// </param>
    /// <param name="_taxApplicability_IN">
    /// The tax applicability type.
    /// </param>
    public void insertIntoDeducteeDetailExtCorrection(int                              _challanNumber,
                                                      int                              _numberOfDeductees,
                                                      NatureOfAssessee_IN              _natureOfAssessee,
                                                      AccountNum                       _accountNum,
                                                      AccountNum                       _vendAccountNum,
                                                      Name                             _name,
                                                      PANStatus_IN                     _panStatus,
                                                      PANNumber_IN                     _panNumber,
                                                      PANNumber_IN                     _panRefNumber,
                                                      Amount                           _taxWithholdTotalAmount,
                                                      Amount                           _amountCur,
                                                      int                              _batchNum,
                                                      Amount                           _taxWithholdAmount,
                                                      Amount                           _surchargeAmount,
                                                      Amount                           _peCessAmount,
                                                      Amount                           _totalRate,
                                                      TransDate                        _transDate,
                                                      TransDate                        _transDateLoc,
                                                      TaxWithholdSection_IN            _sectionCode,
                                                      TaxWithholdCertificateNumber_IN  _certificateNumber,
                                                      TaxWithholdReasonCode            _reason,
                                                      TaxWithholdTaxApplicability_IN   _taxApplicability_IN)
    {
        TaxWithholdDeducteeDetail_IN      taxWithholdDeducteeDetail;
        TaxWithholdFileHeader_IN          taxWithholdFileHeader,taxWithholdFileHeaderLocal;
        ;

        select maxof(CorrectionFile) from taxWithholdFileHeaderLocal
           where taxWithholdFileHeaderLocal.TaxWithholdRegNumber  == tanNumber
              && taxWithholdFileHeaderLocal.FormNumber      == taxWithholdStatement
              && taxWithholdFileHeaderLocal.FromDate        == fromDate
              && taxWithholdFileHeaderLocal.ToDate          == toDate;
        taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate,toDate, taxWithholdFileHeaderLocal.CorrectionFile);
        taxWithholdDeducteeDetail.RecIdFileHdr                 =  taxWithholdFileHeader.RecId;
        taxWithholdDeducteeDetail.ChallanDetailRecordNumber    =   _challanNumber;
        taxWithholdDeducteeDetail.DeducteeDetailRecordNumber   =   _numberOfDeductees;
        if (_natureOfAssessee ==  NatureOfAssessee_IN::Company)
        {
           taxWithholdDeducteeDetail.DeducteeCode      = 1;
        }
        else
        {
           taxWithholdDeducteeDetail.DeducteeCode      = #2;
        }
        taxWithholdDeducteeDetail.DeducteeNumber                = _accountNum;
        taxWithholdDeducteeDetail.VendDeducteeNumber            = _vendAccountNum;
        taxWithholdDeducteeDetail.DeducteeName                  = _name;
        taxWithholdDeducteeDetail.DeducteePANStatus             = _panStatus;
        taxWithholdDeducteeDetail.DeducteePANNumber             = _panNumber;
        taxWithholdDeducteeDetail.DeducteePANRefNumber          = _panRefNumber;
        taxWithholdDeducteeDetail.TotalIncomeTax                = _taxWithholdTotalAmount;
        taxWithholdDeducteeDetail.TotalTaxDeducted              = _taxWithholdTotalAmount;
        taxWithholdDeducteeDetail.TotalAmountPaid               = _amountCur;
        taxWithholdDeducteeDetail.BatchRecordNumber             = _batchNum;
        taxWithholdDeducteeDetail.FromDate                      = fromDate;
        taxWithholdDeducteeDetail.ToDate                        = toDate;
        taxWithholdDeducteeDetail.CorrectionFile                = taxWithholdFileHeader.CorrectionFile;
        taxWithholdDeducteeDetail.TaxWithholdRegNumber          = tanNumber;
        taxWithholdDeducteeDetail.FormNumber                    = taxWithholdStatement;
        taxWithholdDeducteeDetail.TaxWithholdAmount             = _taxWithholdAmount;
        taxWithholdDeducteeDetail.SurchargeAmount               = _surchargeAmount;
        taxWithholdDeducteeDetail.peCessAmount                  = _peCessAmount;
        taxWithholdDeducteeDetail.TotalRate                     = _totalRate;
        taxWithholdDeducteeDetail.TransDate                     = _transDate;
        taxWithholdDeducteeDetail.TaxWithholdDate               = _transDateLoc;
        taxWithholdDeducteeDetail.SectionCode                   = _sectionCode;
        taxWithholdDeducteeDetail.CertificateNumber             = _certificateNumber;
        taxWithholdDeducteeDetail.Reason                        = _reason;
        taxWithholdDeducteeDetail.TaxApplicability              = _taxApplicability_IN;
        taxWithholdDeducteeDetail.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoFileHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the file header info.
    /// </summary>
    /// <param name="_totalBatches">
    /// The number of total batches.
    /// </param>
    /// <param name="_originalReturn">
    /// The flag of whether original return.
    /// </param>
    public void insertIntoFileHeader(int _totalBatches , boolean _originalReturn = false)
    {
        TaxWithholdFileHeader_IN      taxWithholdFileHeader,taxWithholdFileHeaderLocal;
        ;

        taxWithholdFileHeader.ToDate                          =   toDate;
        taxWithholdFileHeader.FromDate                        =   fromDate;
        taxWithholdFileHeader.FormNumber                      =   taxWithholdStatement;
        taxWithholdFileHeader.FinancialYear                   =   financialYear;
        taxWithholdFileHeader.AssesmentYear                   =   assessmentYear;
        taxWithholdFileHeader.FileSequenceNumber              =   fileSeqNumber;
        taxWithholdFileHeader.FileCreationDate                =   DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        if (_originalReturn)
        {
            taxWithholdFileHeader.CorrectionFile              =   0;
        }
        else
        {
            select maxof(CorrectionFile) from taxWithholdFileHeaderLocal
               where taxWithholdFileHeaderLocal.TaxWithholdRegNumber  == tanNumber
                  && taxWithholdFileHeaderLocal.FormNumber      == taxWithholdStatement
                  && taxWithholdFileHeaderLocal.FromDate        == fromDate
                  && taxWithholdFileHeaderLocal.ToDate          == toDate;
            taxWithholdFileHeader.CorrectionFile            =  taxWithholdFileHeaderLocal.CorrectionFile + 1;
            correctionFile                                  =  taxWithholdFileHeaderLocal.CorrectionFile + 1;
        }
        taxWithholdFileHeader.TotalBatches                  =   _totalBatches;
        taxWithholdFileHeader.TaxWithholdRegNumber          =   tanNumber;
        taxWithholdFileHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoPRNNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the provisional receipt info.
    /// </summary>
    /// <param name="_correctionType">
    /// The correction type.
    /// </param>
    /// <param name="_correctionFile">
    /// The correction file.
    /// </param>
    /// <param name="_correction">
    /// Correct or not.
    /// </param>
    public void insertIntoPRNNumber(TaxWithholdCorrectionType_IN   _correctionType,
                                    Integer                        _correctionFile,
                                    boolean                        _correction = true)
    {
        TaxWithholdProvisionalReceipt_IN    provisionalReceipt;
        int                                 month;
        ;

        month                               = mthOfYr(fromDate);
        provisionalReceipt.FromDate         = fromDate;
        provisionalReceipt.ToDate           = toDate;
        provisionalReceipt.Statement        = taxWithholdStatement;
        provisionalReceipt.TaxWithholdRegNumber   = tanNumber;
        provisionalReceipt.CorrectionType   = _correctionType;
        provisionalReceipt.PeriodEnd        = periodEnd;
        provisionalReceipt.PrintingDate     = printingDate;
        provisionalReceipt.TaxType          = taxTypeLoc;
        if (_correction)
        {
            provisionalReceipt.Status     = TaxWithholdEStatus_IN::Revised;
        }
        else
        {
            provisionalReceipt.Status     = TaxWithholdEStatus_IN::Original;
        }
        provisionalReceipt.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the statement line.
    /// </summary>
    public void insertIntoStatementLine()
    {
         TaxWithholdStatementLine_IN        taxWithholdStatementLine;
         TaxWithholdFileHeader_IN           taxWithholdFileHeader;
         ;

         taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate, toDate,0);
         taxWithholdStatementLine.RecIdFileHdr     = taxWithholdFileHeader.RecId;
         taxWithholdStatementLine.LineNumber       = 1;
         taxWithholdStatementLine.LineDetails      = fileHeader;
         taxWithholdStatementLine.insert();
         taxWithholdStatementLine.RecIdFileHdr     = taxWithholdFileHeader.RecId;
         taxWithholdStatementLine.LineNumber       = #2;
         taxWithholdStatementLine.LineDetails      = batchHeader;
         taxWithholdStatementLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHashValueValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// To validate File Hash value
    /// </summary>
    /// <param name="_fileHashValue">
    /// Hash value read from consolidated statement file
    /// </param>
    /// <returns>
    /// whether the hash value is valid or not
    /// </returns>
    private boolean isHashValueValid(str _fileHashValue)
    {
        str              fileHashCopy;
        str              fileHashChar;
        boolean          isValid;
        boolean          isNonNumFound;
        ;

        fileHashCopy   = _fileHashValue;
        isValid        = true;
        isNonNumFound  = false;

        while (fileHashCopy)
        {
            fileHashChar = substr(fileHashCopy, 1, 1);
            if (!isInteger(fileHashChar))
            {
                isNonNumFound = true;
                break;
            }
            fileHashCopy = substr(fileHashCopy, 2, strlen(fileHashCopy) -1);
        }

        if ((_fileHashValue == "") || (isNonNumFound))
        {
            isValid = checkFailed("@SYS4002107");
        }
        else if (strLen(_fileHashValue) != 20)
        {
            isValid = checkFailed("@SYS4002106");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the file hash value.
    /// </summary>
    /// <param name="_fileHash">
    /// The parameter file hash.
    /// </param>
    /// <returns>
    /// The file hash value.
    /// </returns>
    public string255 parmFileHash(string255 _fileHash = fileHash)
    {
        fileHash = _fileHash;

        return fileHash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the batch header line to efilling file.
    /// </summary>
    public void printBatchHeader()
    {
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroupTable;
        TaxInformationLegalEntity_IN        taxInformationLegalEntity_IN = TaxInformationLegalEntity_IN::findByLegalEntity(companyInfo.RecId);
        TaxWithholdRegNumbers_IN            taxWithholdRegNumbers_IN = TaxWithholdRegNumbers_IN::find(tanNumber);
        HcmWorker                           hcmWorker = HcmWorker::findByPersonnelNumber(fullName);
        LogisticsElectronicAddress          deductorLogisticsElectronicAddress = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(companyInfo.RecId, LogisticsElectronicAddressMethodType::Phone, NoYes::No);
        LogisticsElectronicAddress          responsiblePersonLogisticsElectronicAddress = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(hcmWorker.Person, LogisticsElectronicAddressMethodType::Phone, NoYes::No);
        #TaxWithhold_IN

        if (taxTypeLoc == TaxWithholdType_IN::TDS)
        {
            select count (RecId) from taxWithholdComponentGroupTable
                    where taxWithholdComponentGroupTable.TaxType    == taxTypeLoc
                       && taxWithholdComponentGroupTable.Status     == componentStatus;
        }
        else
        {
            select count (RecId) from taxWithholdComponentGroupTable
                    where taxWithholdComponentGroupTable.TaxType == taxTypeLoc;
        }
        // Line 1
        batchHeader     += subStr(int2str(numberOfLinesInFile), 1, #9);
        // Line 2
        batchHeader     += #Carat + #RecordTypeBH;
        // Line 3
        batchHeader     += #Carat + subStr(int2str(batchNumber), 1, #9);
        // Line 4
        if (numberOfChallans == 0)
        {
            batchHeader     += #Carat + subStr(int642Str(taxWithholdComponentGroupTable.RecId), 1, #9);
        }
        else
        {
            batchHeader     += #Carat + subStr(int2str(numberOfChallans), 1, #9);
        }
        // Line 5
        batchHeader     += #Carat + formNumber;
        // Line 6 to Line 8
        batchHeader     += strRep(#Carat,#3);
        // Line 9
        batchHeader     += #Carat + subStr(rrrNumber, 1, #15);
        // Line 10 to Line 12
        batchHeader     += strRep(#Carat,#3);
        // Line 13
        batchHeader     += #Carat + subStr(strUpr(taxWithholdRegNumbers_IN.RegistrationNumber), 1, #10);
        // Line 14
        batchHeader     += strRep(#Carat,1);
        // Line 15
        if (taxInformationLegalEntity.panStatus == TaxPermanentAccountStatus_IN::Available)
        {
            if (taxInformationLegalEntity.panNumber == "")
            {
                batchHeader     += #Carat;
            }
            else
            {
                batchHeader     += #Carat + subStr(strUpr(taxInformationLegalEntity.panNumber), 1, #10);
            }
        }
        else
        {
            batchHeader         += #Carat + subStr('PANNOTREQD', 1, #10);
        }
        // Line 16
        batchHeader     += #Carat + subStr(assessmentYear, 1, #6);
        // Line 17
        batchHeader     += #Carat + subStr(financialYear, 1, #6);
        // Line 18
        batchHeader     += #Carat + subStr(period, 1, #2);
        // Line 19
        batchHeader     += #Carat + subStr(deductorName, 1, #75);
        // Line 20
        batchHeader     += #Carat;
        // Line 21 to Line 25: Deductor's Address
        batchHeader     += #Carat + subStr(address, 1, #125);
        if (lineCount < #5)
        {
            batchHeader     += strRep(#Carat, (#Five - lineCount));
        }
        // Line 26 to Line 30
        batchHeader     += #Carat + int2str(TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddress.State));
        batchHeader     += #Carat + subStr(logisticsPostalAddress.ZipCode, 1, #6);
        batchHeader     += #Carat + subStr(deductorEmail, 1, #75);
        batchHeader     += #Carat + substr(deductorSTDCode, 1, #5);
        batchHeader     += #Carat + subStr(deductorPhoneSubscriber, 1, #10);

        // Line 31
        batchHeader     += #Carat + #No;
        // Line 32
        batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::typeOfDeductorToStr(taxInformationLegalEntity.TypeOfDeductor), 1, 1);
        // Line 33
        batchHeader     += #Carat + subStr(responsibleName, 1, #75);
        // Line 34
        batchHeader     += #Carat + subStr(designation, 1, #20);
        // Line 35 to Line 39
        batchHeader     += #Carat + subStr(responsibleAddress, 1, #125);
        if (responsibleAddressLinecount < #5)
        {
            batchHeader     += strRep(#Carat,(#Five - responsibleAddressLinecount));
        }
        // Line 40 to Line 45
        batchHeader     += #Carat + int2str(TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State));
        batchHeader     += #Carat + subStr(logisticsPostalAddressResponsible.ZipCode, 1, #6);
        batchHeader     += #Carat + subStr(responsibleEmail, 1, #75);
        batchHeader     += #Carat + substr(responsibleCellularPhone, 1, #10);
        batchHeader     += #Carat + substr(responsibleSTDCode, 1, #5);
        batchHeader     += #Carat + subStr(responsiblePhoneSubscriber, 1, #10);

        // Line 46
        batchHeader     += #Carat + #No;
        // Line 47
        batchHeader     += #Carat + strPoke(subStr(num2str(totalDepositAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
        // Line 48 to Line 50
        batchHeader     += strRep(#Carat, #3);
        // Line 51
        batchHeader     += #Carat + #AOApproval;
        // Line 52
        if (rrrNumber != '')
        {
            batchHeader += #Carat + #Yes;
        }
        else
        {
            batchHeader += #Carat + #No;
        }
        // Line 53
        batchHeader     += #Carat;

         // Line 54
        if (taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StateGovernmentS
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StatutoryBodyE
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::AutonomousBodyH
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::LocalAuthorityN)
        {
            batchHeader     +=  #Carat + substr(logisticsPostalAddress.State, 1, #2);
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 55, 56
        if (taxInformationLegalEntity_IN.TypeOfDeductor ==TypeOfDeductor_IN::CentralGovernmentA
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StateGovernmentS
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StatutoryBodyD
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StatutoryBodyE
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::AutonomousBodyG
            || taxInformationLegalEntity_IN.TypeOfDeductor ==TypeOfDeductor_IN::AutonomousBodyH
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::LocalAuthorityL
            || taxInformationLegalEntity_IN.TypeOfDeductor ==TypeOfDeductor_IN::LocalAuthorityN)
        {
            batchHeader     +=  #Carat + substr(taxInformationLegalEntity_IN.PAOCode, 1, #20);
            batchHeader     +=  #Carat + substr(taxInformationLegalEntity_IN.DDOCode, 1, #20);
        }
        else
        {
            batchHeader     += #Carat;
            batchHeader     += #Carat;
        }

        // Line 57, 58
        if (taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::CentralGovernmentA
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StatutoryBodyD
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StatutoryBodyE
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::AutonomousBodyG
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::AutonomousBodyH
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::LocalAuthorityL
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::LocalAuthorityN)
        {
            batchHeader     +=  #Carat + ((taxInformationLegalEntity_IN.MinistryCode != 0) ? substr(int2str(taxInformationLegalEntity_IN.MinistryCode), 1, #3) : '');
            if (taxInformationLegalEntity_IN.MinistryType == TaxWithholdMinistryType_IN::Others)
            {
                batchHeader     +=  #Carat + substr(taxInformationLegalEntity_IN.MinistryName, 1, 150);
            }
            else
            {
                batchHeader     += #Carat;
            }
        }
        else
        {
            batchHeader     += #Carat;
            batchHeader     += #Carat;
        }
        // Line 59
        batchHeader     += #Carat + substr(taxWithholdRegNumbers_IN.TANRegistrationNumber, 1, 12);
        // Line 60, 61
        if (taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::CentralGovernmentA
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StateGovernmentS
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StatutoryBodyD
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::StatutoryBodyE
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::AutonomousBodyG
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::AutonomousBodyH
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::LocalAuthorityL
            || taxInformationLegalEntity_IN.TypeOfDeductor == TypeOfDeductor_IN::LocalAuthorityN)
        {
            batchHeader     +=  #Carat + substr(taxInformationLegalEntity_IN.PAORegNum, 1, #7);
            batchHeader     +=  #Carat + substr(taxInformationLegalEntity_IN.DDORegNum, 1, #10);
        }
        else
        {
            batchHeader     += #Carat;
            batchHeader     += #Carat;
        }

        // Line 62
        if (deductorLogisticsElectronicAddress.Locator)
        {
            batchHeader     += #Carat + #EmployerDeductorSTDCode;
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 63
        batchHeader     += #Carat + subStr(deductorLogisticsElectronicAddress.Locator,
                                            1, #10);
        // Line 64
        batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::getLogisticsElectronicAddress(companyInfo.RecId, LogisticsElectronicAddressMethodType::Email, NoYes::No).Locator,
                                            1, #75);
        // Line 65
        if (responsiblePersonLogisticsElectronicAddress.Locator)
        {
            batchHeader     += #Carat + #EmployerDeductorSTDCode;
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 66
        batchHeader     += #Carat + subStr(responsiblePersonLogisticsElectronicAddress.Locator,
                                            1, #10);
        // Line 67
        batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::getLogisticsElectronicAddress(hcmWorker.Person, LogisticsElectronicAddressMethodType::Email, NoYes::No).Locator,
                                            1, #75);
        // Line 68, 69
        batchHeader     += strrep(#Carat, #2);

        numberOfLinesInFile++;
        this.writeToFile(batchHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBatchHeaderCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the correction batch header to efilling file.
    /// </summary>
    /// <param name="_correctionType">
    /// The correction type.
    /// </param>
    public void printBatchHeaderCorrection(int _correctionType)
    {
        HcmWorker                   hcmWorker = HcmWorker::findByPersonnelNumber(fullName);
        TaxWithholdFileHeader_IN    fileHdrLastCorrection;
        TaxWithholdBatchHeader_IN   batchHdrLastCorrection;
        TaxWithholdFileHeader_IN    fileHdr, fileHdrOrig;
        TaxWithholdBatchHeader_IN   batchHdrOrig;
        LogisticsElectronicAddress  deductorLogisticsElectronicAddress = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(companyInfo.RecId, LogisticsElectronicAddressMethodType::Phone, NoYes::No);
        LogisticsElectronicAddress  responsiblePersonLogisticsElectronicAddress = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(hcmWorker.Person, LogisticsElectronicAddressMethodType::Phone, NoYes::No);
        real                        totalBatchDepositAmount;
        int                         counterI;
        int                         totalChallans;
        int                         challanNumberCount;

        fileHdrOrig  = TaxWithholdEFilling_IN::headerRecord(tanNumber, taxWithholdStatement, fromDate, toDate, true);
        batchHdrOrig = TaxWithholdBatchHeader_IN::findByFileHdr(fileHdrOrig.RecId,1);
        select maxof(CorrectionFile) from fileHdr
           where fileHdr.TaxWithholdRegNumber == tanNumber
              && fileHdr.FormNumber     == taxWithholdStatement
              && fileHdr.FromDate       == fromDate
              && fileHdr.ToDate         == toDate;
        fileHdrLastCorrection  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate, toDate,fileHdr.CorrectionFile-1);
        batchHdrLastCorrection = TaxWithholdBatchHeader_IN::findByFileHdr(fileHdrLastCorrection.RecId,1);
        // Line 1
        batchHeader            = subStr(int2str(lineNumberInFile), 1, #9);
        // Line 2
        batchHeader           += #Carat + #RecordTypeBH;
        // Line 3
        batchHeader           += #Carat + subStr(int2str(batchNumber), 1, #9);
        // Line 4
        if (_correctionType == 1)
        {
            batchHeader     += #Carat;
        }
        else if (_correctionType == #9)
        {
             batchHeader     += #Carat + subStr(int2str(newChallanCount), 1, #9);
        }
        else
        {
            if (numberOfChallans == 0)
            {
                batchHeader     += #Carat + int2str(1);
            }
            else
            {
                if (_correctionType == #2)
                {
                    batchHeader     += #Carat + subStr(int2str(conLen(challanDetailsData)), 1, #9);
                }
                else if (_correctionType == #3)
                {
                    counterI = 1;
                    for (counterI = 1; counterI <= conLen(challanDetailsData); counterI++)
                    {
                        challanNumberCount = conPeek(challanDetailsData, counterI);
                        if (!conFind(challanData, challanNumberCount))
                        {
                            totalChallans++;
                        }
                    }
                    modifiedChallanCount = modifiedChallanCount + totalChallans;
                    batchHeader     += #Carat + subStr(int2str(modifiedChallanCount), 1, #9);
                }
                else
                {
                    batchHeader     += #Carat + subStr(int2str(modifiedChallanCount), 1, #9);
                }
            }
        }
        // Line 5
        batchHeader     += #Carat + formNumber;
        // Line 6
        batchHeader     += #Carat + #Correction + int2str(_correctionType);
        // Line 7
        if (_correctionType == #2 || _correctionType ==#3)
        {
            batchHeader     += #Carat + int2str(batchUpdateIndicator);
        }
        else
        {
            batchHeader     += strRep(#Carat,1);
        }
        // Line 8
        if (batchHdrLastCorrection.rrrOriginal != "")
        {
            batchHeader     += #Carat + subStr(batchHdrLastCorrection.rrrOriginal,1,#15);
        }
        else
        {
            batchHeader     += #Carat + subStr(rrrNumber, 1, #15);
        }
        // Line 9
        batchHeader     += #Carat + subStr(rrrNumber, 1, #15);
        // Line 10
        batchHeader     += #Carat;
        // Line 11
        batchHeader     += #Carat;
        // Line 12
        batchHeader     += #Carat + TaxWithholdRegNumbers_IN::find(batchHdrOrig.TaxWithholdRegNumber).RegistrationNumber;
        // Line 13
        if (_correctionType != #5)
        {
            batchHeader     += #Carat + TaxWithholdRegNumbers_IN::find(batchHdrOrig.TaxWithholdRegNumber).RegistrationNumber;
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 14
        batchHeader     += #Carat;
        // Line 15
        if (_correctionType == 0 || _correctionType == #5 || _correctionType == #9)
        {
            batchHeader     += #Carat;
        }
        else if (_correctionType == 1)
        {
            batchHeader     += #Carat + (taxInformationLegalEntity.panStatus == TaxPermanentAccountStatus_IN::Available ? taxInformationLegalEntity.panNumber : 'PANNOTREQD');
        }
        else if (_correctionType == #2 || _correctionType == #3)
        {
            if (batchUpdateIndicator == 1)
            {
                batchHeader     += #Carat + (taxInformationLegalEntity.panStatus == TaxPermanentAccountStatus_IN::Available ? taxInformationLegalEntity.panNumber : 'PANNOTREQD');
            }
            else
            {
                batchHeader     += strRep(#Carat,1);
            }
        }
        // Line 16
        batchHeader     += #Carat + subStr(fileHdrOrig.AssesmentYear, 1, #6);
        // Line 17
        batchHeader     += #Carat + subStr(fileHdrOrig.FinancialYear, 1, #6);
        // Line 18
        batchHeader     += #Carat + TaxWithholdEFilling_IN::getQuarter(toDate);
        // Line 19
        if (_correctionType == #2 || _correctionType == #3)
        {
            if (batchUpdateIndicator == 1)
            {
                batchHeader     += #Carat + subStr(DirPartyTable::findRec(CompanyInfo::current()).Name, 1, #75);
            }
            else
            {
                batchHeader     += #Carat + subStr(batchHdrLastCorrection.DeductorName, 1, #75);
            }
        }
        else if (_correctionType == 1)
        {
                batchHeader     += #Carat + subStr(DirPartyTable::findRec(CompanyInfo::current()).Name, 1, #75);
        }
        else
        {
            batchHeader     += #Carat + subStr(batchHdrLastCorrection.DeductorName, 1, #75);
        }
        if (_correctionType == 1)
        {
            // Line 20
            batchHeader     += #Carat;
            // Line 21~25
            batchHeader     += #Carat + subStr(address, 1, #125);
            // Line 26~30
            if (lineCount < #5)
            {
                batchHeader     += strRep(#Carat, (#Five - lineCount));
            }

                batchHeader     += #Carat + int2str(TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddress.State));
                batchHeader     += #Carat + subStr(logisticsPostalAddress.ZipCode, 1, #6);
                batchHeader     += #Carat + subStr(deductorEmail , 1, #75);
                batchHeader     += #Carat + substr(deductorSTDCode, 1, #5);
                batchHeader     += #Carat + subStr(deductorPhoneSubscriber, 1, #10);
            // Line 31
            if (changeInDeductorsAddress == NoYes::No)
            {
                batchHeader     += #Carat + #No;
            }
            else
            {
                batchHeader     += #Carat + #Yes;
            }
        }
        else if (_correctionType == #2 || _correctionType == #3)
        {
            if (batchUpdateIndicator == 1)
            {
                // Line 20
                batchHeader     += #Carat;
                // Line 21~25
                batchHeader     += #Carat + subStr(address, 1, #125);
                if (lineCount < #5)
                {
                    batchHeader     += strRep(#Carat, (#Five - lineCount));
                }
                // Line 26~30
                batchHeader     += #Carat + int2str(TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddress.State));
                batchHeader     += #Carat + subStr(logisticsPostalAddress.ZipCode, 1, #6);
                batchHeader     += #Carat + subStr(deductorEmail, 1, #75);
                batchHeader     += #Carat + substr(deductorSTDCode, 1, #5);
                batchHeader     += #Carat + subStr(deductorPhoneSubscriber, 1, #10);
                // Line 31
                if (changeInDeductorsAddress == NoYes::No)
                {
                    batchHeader     += #Carat + #No;
                }
                else
                {
                    batchHeader     += #Carat + #Yes;
                }
            }
            else
            {
                // Line 20~31
                batchHeader     += strRep(#Carat, #12);
            }
        }
        else
        {
            // Line 20~31
            batchHeader     += strRep(#Carat, #12);
        }
        // Line 32
        if (_correctionType == 1)
        {
            batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::typeOfDeductorToStr(taxInformationLegalEntity.TypeOfDeductor), 1, 1);
        }
        else if (_correctionType == #2 || _correctionType == #3)
        {
            if (batchUpdateIndicator == 1)
            {
                batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::typeOfDeductorToStr(taxInformationLegalEntity.TypeOfDeductor), 1, 1);
            }
            else
            {
                batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::typeOfDeductorToStr(batchHdrLastCorrection.DeductorType), 1, 1);
            }
        }
        else
        {
            batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::typeOfDeductorToStr(batchHdrLastCorrection.DeductorType), 1, 1);
        }
        // Line 33
        if (_correctionType == 0 || _correctionType == #5 || _correctionType == #9)
        {
            batchHeader     += #Carat;
        }
        else if (_correctionType == 1)
        {
            batchHeader     += #Carat + subStr(responsibleName, 1, #75);
        }
        else if (_correctionType == #2 || _correctionType == #3)
        {
            if (batchUpdateIndicator == 1)
            {
                batchHeader     += #Carat + subStr(responsibleName, 1, #75);
            }
            else
            {
                batchHeader     += #Carat;
            }
        }
        // Line 34
        if (_correctionType == 0 || _correctionType == #5 || _correctionType == #9)
        {
            batchHeader     += #Carat;
        }
        else if (_correctionType == 1)
        {
            batchHeader     += #Carat + subStr(designation, 1, #20);
        }
        else if (_correctionType == #2 || _correctionType == #3)
        {
            if (batchUpdateIndicator == 1)
            {
                batchHeader     += #Carat + subStr(designation,1,#20);
            }
            else
            {
                batchHeader     += #Carat;
            }
        }
        if (_correctionType == 1)
        {
            // Line 35~39
            batchHeader     += #Carat + responsibleAddress;
            if (lineCount < #5)
            {
                batchHeader     += strRep(#Carat, (#Five- lineCount));
            }
            // Line 40~45
            batchHeader     += #Carat + int2str(TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State));
            batchHeader     += #Carat + subStr(logisticsPostalAddressResponsible.ZipCode, 1, #6);
            batchHeader     += #Carat + subStr(responsibleEmail, 1, #75);
            batchHeader     += #Carat + substr(responsibleCellularPhone, 1, #10);
            batchHeader     += #Carat + substr(responsibleSTDCode, 1, #5);
            batchHeader     += #Carat + substr(responsiblePhoneSubscriber, 1, #10);

            // Line 46
            if (responsiblePersonsAddress == NoYes::No)
            {
                batchHeader     += #Carat + #No;
            }
            else
            {
                batchHeader     += #Carat + #Yes;
            }
        }
        else if (_correctionType == #2 || _correctionType == #3)
        {
            if (batchUpdateIndicator == 1)
            {
                // Line 35~39
                batchHeader     += #Carat + responsibleAddress;
                if (lineCountCorrection < #5)
                {
                    batchHeader     += strRep(#Carat, (#Five - lineCount));
                }
                // Line 40~45
                batchHeader     += #Carat + int2str(TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State));
                batchHeader     += #Carat + subStr(logisticsPostalAddressResponsible.ZipCode, 1, #6);
                batchHeader     += #Carat + substr(responsibleEmail, 1, #75);
                batchHeader     += #Carat + substr(responsibleCellularPhone, 1, #10);
                batchHeader     += #Carat + substr(responsibleSTDCode, 1, #5);
                batchHeader     += #Carat + substr(responsiblePhoneSubscriber, 1, #10);
                // Line 46
                if (responsiblePersonsAddress == NoYes::No)
                {
                    batchHeader      += #Carat + #No;
                }
                else
                {
                    batchHeader      += #Carat + #Yes;
                }
            }
            else
            {
                // Line 35~46
                batchHeader     += strRep(#Carat, #12);
            }
        }
        else
        {
            // Line 35~46
            batchHeader     += strRep(#Carat, #12);
        }
        // Line 47
        if (_correctionType == #2 || _correctionType == #3)
        {
            totalBatchDepositAmount = this.getTotalBatchDepositAmount(_correctionType);
            batchHeader     += #Carat + strPoke(subStr(num2str(totalBatchDepositAmount + interest + otherCharges + fee, 1, #2, 1, 0), 1, #18), #Zero, #16);
        }
        else if (_correctionType == #9)
        {
            this.calcTaxWithholdCorrection();
            batchHeader     += #Carat + strPoke(subStr(num2str(taxWithholdTotalAmount, 1, #2, 1, 0), 1, #18), #Zero, #16);
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 48, 49, 50
        batchHeader     += strRep(#Carat, #3);
        // Line 51
        batchHeader     += #Carat + #AOApproval;
        // Line 52
        batchHeader     += #Carat;
        // Line 53
        // carat + last deductor type
        if (_correctionType == #1 ||
            (_correctionType == #2 && batchUpdateIndicator == 1) ||
            (_correctionType == #3 && batchUpdateIndicator == 1)
           )
        {
            batchHeader     +=  #Carat + subStr(TaxWithholdEFilling_IN::typeOfDeductorToStr(batchHdrOrig.DeductorType), 1, #1);
        }
        else
        {
            batchHeader     +=  #Carat;
        }
        // Line 54
        if ((_correctionType == #1 ||
            (_correctionType == #2 && batchUpdateIndicator == 1) ||
            (_correctionType == #3 && batchUpdateIndicator == 1)) &&
            (conFind([TypeOfDeductor_IN::StateGovernmentS,TypeOfDeductor_IN::StatutoryBodyE,
                         TypeOfDeductor_IN::AutonomousBodyH,TypeOfDeductor_IN::LocalAuthorityN],taxInformationLegalEntity.TypeOfDeductor))
           )
        {
            batchHeader     +=  #Carat + subStr(taxInformationLegalEntity.StateCode, 1, #2);
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 55, 56
        if ((_correctionType == #1 ||
            (_correctionType == #2 && batchUpdateIndicator == 1) ||
            (_correctionType == #3 && batchUpdateIndicator == 1)) &&
            (conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS,
                     TypeOfDeductor_IN::StatutoryBodyD,TypeOfDeductor_IN::StatutoryBodyE,
                     TypeOfDeductor_IN::AutonomousBodyG,TypeOfDeductor_IN::AutonomousBodyH,
                     TypeOfDeductor_IN::LocalAuthorityL,TypeOfDeductor_IN::LocalAuthorityN],taxInformationLegalEntity.TypeOfDeductor))
           )
        {
            batchHeader     +=  #Carat + subStr(taxInformationLegalEntity.paoCode, 1, #20);
            batchHeader     +=  #Carat + subStr(taxInformationLegalEntity.ddoCode, 1, #20);
        }
        else
        {
            batchHeader     += #Carat;
            batchHeader     += #Carat;
        }
        // Line 57, 58
        if ((_correctionType == #1 ||
            (_correctionType == #2 && batchUpdateIndicator == 1) ||
            (_correctionType == #3 && batchUpdateIndicator == 1)) &&
            (conFind([TypeOfDeductor_IN::CentralGovernmentA,
                     TypeOfDeductor_IN::StatutoryBodyD,TypeOfDeductor_IN::StatutoryBodyE,
                     TypeOfDeductor_IN::AutonomousBodyG,TypeOfDeductor_IN::AutonomousBodyH,
                     TypeOfDeductor_IN::LocalAuthorityL,TypeOfDeductor_IN::LocalAuthorityN],taxInformationLegalEntity.TypeOfDeductor))
           )
        {
            batchHeader     +=  #Carat + ((taxInformationLegalEntity.MinistryCode != 0) ? subStr(int2str(taxInformationLegalEntity.MinistryCode), 1, #3) : '');
            if (taxInformationLegalEntity.MinistryType == TaxWithholdMinistryType_IN::Others)
            {
                batchHeader     +=  #Carat + subStr(taxInformationLegalEntity.MinistryName, 1, 150);
            }
            else
            {
                batchHeader     += #Carat;
            }
        }
        else
        {
            batchHeader     += #Carat;
            batchHeader     += #Carat;
        }
        // Line 59
        batchHeader     += #Carat + TaxWithholdRegNumbers_IN::find(tanNumber).TANRegistrationNumber;
        // Line 60, 61
        if ((_correctionType == #1 ||
            (_correctionType == #2 && batchUpdateIndicator == 1) ||
            (_correctionType == #3 && batchUpdateIndicator == 1)) &&
            (conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS,
                     TypeOfDeductor_IN::StatutoryBodyD,TypeOfDeductor_IN::StatutoryBodyE,
                     TypeOfDeductor_IN::AutonomousBodyG,TypeOfDeductor_IN::AutonomousBodyH,
                     TypeOfDeductor_IN::LocalAuthorityL,TypeOfDeductor_IN::LocalAuthorityN],taxInformationLegalEntity.TypeOfDeductor))
           )
        {
            batchHeader     +=  #Carat + subStr(taxInformationLegalEntity.paoRegNum, 1, #7);
            batchHeader     +=  #Carat + subStr(taxInformationLegalEntity.ddoRegNum, 1, #10);
        }
        else
        {
            batchHeader     += #Carat;
            batchHeader     += #Carat;
        }

        // Line 62
        if (deductorLogisticsElectronicAddress.Locator)
        {
            batchHeader     += #Carat + #EmployerDeductorSTDCode;
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 63
        batchHeader     += #Carat + subStr(deductorLogisticsElectronicAddress.Locator,
                                            1, #10);
        // Line 64
        batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::getLogisticsElectronicAddress(companyInfo.RecId, LogisticsElectronicAddressMethodType::Email, NoYes::No).Locator,
                                            1, #75);
        // Line 65
        if (responsiblePersonLogisticsElectronicAddress.Locator)
        {
            batchHeader     += #Carat + #EmployerDeductorSTDCode;
        }
        else
        {
            batchHeader     += #Carat;
        }
        // Line 66
        batchHeader     += #Carat + subStr(responsiblePersonLogisticsElectronicAddress.Locator,
                                            1, #10);
        // Line 67
        batchHeader     += #Carat + subStr(TaxWithholdEFilling_IN::getLogisticsElectronicAddress(hcmWorker.Person, LogisticsElectronicAddressMethodType::Email, NoYes::No).Locator,
                                            1, #75);
        // Line 68, 69
        batchHeader     += strrep(#Carat, #2);

        this.writeToFile(batchHeader);
        lineNumberInFile++;
        batchNumber++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printChallanDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the challan details to efilling file.
    /// </summary>
    public void printChallanDetail()
    {
        if (taxTypeLoc == TaxWithholdType_IN::TDS)
        {
            while select componentGroupTable
                where componentGroupTable.TaxType   == taxTypeLoc
                   && componentGroupTable.Status    == componentStatus
            {
                this.challanDetails(componentGroupTable.RecId, componentGroupTable.SectionCode);
            }
        }
        else
        {
            while select componentGroupTable
                where componentGroupTable.TaxType == taxTypeLoc
            {
                this.challanDetails(componentGroupTable.RecId, componentGroupTable.SectionCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printChallanDetailCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the correction challan details to efilling files.
    /// </summary>
    /// <param name="_correctionType">
    /// The correction type.
    /// </param>
    public void printChallanDetailCorrection(int _correctionType)
    {
        int         counterI,counterJ, counterK, counterM = 1;
        container   tempChallanData = conNull();
        boolean     alreadyInserted;
        ;

        counterI = 1;
        counterK = 1;
        if (_correctionType == #2)
        {
            while (counterI <= conLen(challanDetailsData))
            {
                if (conLen(tempChallanData) == 0)
                {
                    tempChallanData = conIns(tempChallanData, counterI, conPeek(challanDetailsData,1));
                }
                else
                {
                    counterJ = 1;
                    while (counterJ <= conLen(tempChallanData))
                    {
                        if (conPeek(challanDetailsData,counterI) < conPeek(tempChallanData,counterJ))
                        {
                            tempChallanData = conIns(tempChallanData, counterJ, conPeek(challanDetailsData, counterI));
                            alreadyInserted   = true;
                            break;
                        }
                        counterJ+= 1;
                    }
                    if (alreadyInserted == false)
                    {
                        tempChallanData = conIns(tempChallanData, counterJ, conPeek(challanDetailsData, counterI));
                    }
                }
                counterI += 1;
            }
        }
        else if (_correctionType == #3)
        {
            while (counterI <= conLen(challanData))
            {
                if (conLen(tempChallanData) == 0)
                {
                    tempChallanData = conIns(tempChallanData, counterI, conPeek(challanData,1));
                }
                else
                {
                    counterJ = 1;
                    while (counterJ <= conLen(tempChallanData))
                    {
                        if (conPeek(challanData,counterI) < conPeek(tempChallanData,counterJ))
                        {
                            tempChallanData = conIns(tempChallanData, counterJ, conPeek(challanData, counterI));
                            alreadyInserted   = true;
                            break;
                        }
                        counterJ+= 1;
                    }
                    if (alreadyInserted == false)
                    {
                        tempChallanData = conIns(tempChallanData, counterJ, conPeek(challanData, counterI));
                    }
                }
                counterI += 1;
            }

            while (counterK <= conLen(challanDetailsData))
            {
                counterJ = 1;
                for (counterM = 1; counterM <= conLen(challanDetailsData); counterM++)
                {
                    if (!conFind(tempChallanData, conPeek(challanDetailsData, counterM)))
                    {
                        challanDetailsNumbers = conIns(challanDetailsNumbers, counterM, conPeek(challanDetailsData, counterM));
                    }
                }
                while (counterJ <= conLen(tempChallanData))
                {
                    if (challanDetailsNumbers)
                    {
                        if (conPeek(challanDetailsNumbers, counterK) < conPeek(tempChallanData, counterJ))
                        {
                                tempChallanData = conIns(tempChallanData, counterJ, conPeek(challanDetailsNumbers, counterK));
                                alreadyInserted   = true;
                                counterI+= 1;
                                break;
                        }
                    }
                    counterJ+= 1;
                }
                if (alreadyInserted == false)
                {
                    tempChallanData = conIns(tempChallanData, counterI, conPeek(challanDetailsNumbers, counterK));
                    counterI+= 1;
                }
                counterK += 1;
            }
        }
        else
        {
            while (counterI <= conLen(challanData))
            {
                if (conLen(tempChallanData) == 0)
                {
                    tempChallanData = conIns(tempChallanData, counterI, conPeek(challanData,1));
                }
                else
                {
                    counterJ = 1;
                    while (counterJ <= conLen(tempChallanData))
                    {
                        if (conPeek(challanData,counterI) < conPeek(tempChallanData,counterJ))
                        {
                            tempChallanData = conIns(tempChallanData, counterJ, conPeek(challanData, counterI));
                            alreadyInserted   = true;
                            break;
                        }
                        counterJ+= 1;
                    }
                    if (alreadyInserted == false)
                    {
                        tempChallanData = conIns(tempChallanData, counterJ, conPeek(challanData, counterI));
                    }
                }
                counterI += 1;
            }
        }
        counterI = 1;
        if (_correctionType == #9)
        {
            while (counterI <= conLen(newDeducteeData))
            {
                this.challanDetailsC9Correction(conPeek(newDeducteeData, counterI));
                counterI++;
            }
        }
        else if (_correctionType == #2)
        {
            while (counterI <= conLen(tempChallanData))
            {
                numberOfChallansLoc++;
                this.challanDetailsCorrection(_correctionType, conPeek(tempChallanData, counterI));
                counterI += 1;
            }
        }
        else
        {
            while (counterI <= conLen(tempChallanData))
            {
                this.challanDetailsCorrection(_correctionType, conPeek(tempChallanData, counterI));
                counterI += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFileHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the file header to efilling files.
    /// </summary>
    /// <param name="_correctionReturn">
    /// Correct return or not.
    /// </param>
    public void printFileHeader(boolean _correctionReturn=false)
    {
        fileHeader += int2str(numberOfLinesInFile);
        fileHeader += #Carat + #FileHeader;
        if (formNumber != #27EQ)
        {
            fileHeader += #Carat + #FileType1;
        }
        else
        {
            fileHeader += #Carat + #FileTypeTC1;
        }
        if (_correctionReturn)
        {
            fileHeader += #Carat + #UploadTypeC;
        }
        else
        {
            fileHeader += #Carat + #UploadTypeR;
        }
        fileHeader += #Carat + date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
        fileHeader += #Carat + int2str(fileSeqNumber);
        fileHeader += #Carat + #UploaderTypeD;
        fileHeader += #Carat + TaxWithholdRegNumbers_IN::find(tanNumber).RegistrationNumber;
        fileHeader += #Carat + int2str(numberOfBatches);
        fileHeader += #Carat + subStr(utilityName,1,75);
        fileHeader += strRep(#Carat, #8);
        this.writeToFile(fileHeader);
        numberOfLinesInFile++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFileHeaderCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the correction file header to efilling files.
    /// </summary>
    /// <param name="_correctionReturn">
    /// Correct return or not.
    /// </param>
    public void printFileHeaderCorrection(boolean _correctionReturn = false)
    {
        ;

        fileHeader += int2str(lineNumberInFile);
        fileHeader += #Carat + #FileHeader;
        if (formNumber != #27EQ)
        {
            fileHeader += #Carat + #FileType1;
        }
        else
        {
            fileHeader += #Carat + #FileTypeTC1;
        }
        if (_correctionReturn)
        {
            fileHeader += #Carat + #UploadTypeC;
        }
        else
        {
            fileHeader += #Carat + #UploadTypeR;
        }
        fileHeader += #Carat + date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), #123, #2, 0, #2, 0, #4, DateFlags::FormatAll);
        fileHeader += #Carat + int2str(fileSeqNumber);
        fileHeader += #Carat + #UploaderTypeD;
        fileHeader += #Carat + TaxWithholdRegNumbers_IN::find(tanNumber).RegistrationNumber;
        fileHeader += #Carat + int2str(numberOfBatches);
        fileHeader += #Carat + subStr(utilityName,1,75);
        fileHeader += strRep(#Carat, #7);
        fileHeader += #Carat + this.parmFileHash();
        this.writeToFile(fileHeader);
        lineNumberInFile++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates line details to efilling files.
    /// </summary>
    public void printFromTable()
    {
        TaxWithholdFileHeader_IN           taxWithholdFileHeader;
        TaxWithholdStatementLine_IN        taxWithholdStatementLine;
        TaxWithholdDeducteeDetail_IN       taxWithholdDeducteeDetail;
        TaxWithholdChallanDetail_IN        taxWithholdChallanDetail;
        #TaxWithhold_IN

        taxWithholdFileHeader  = TaxWithholdFileHeader_IN::findByTAN(tanNumber, taxWithholdStatement, fromDate, toDate, 0);
        while select taxWithholdStatementLine order by LineNumber asc
            where taxWithholdStatementLine.RecIdFileHdr == taxWithholdFileHeader.RecId
        {
            if (taxWithholdStatementLine.LineNumber == 1)
            {
                this.writeToFile(taxWithholdStatementLine.LineDetails);
            }
            else
            {
                this.writeToFile(taxWithholdStatementLine.LineDetails);
            }
        }
        while select RecIdFileHdr, TotalDepositAmount from taxWithholdChallanDetail
            where taxWithholdChallanDetail.RecIdFileHdr == taxWithholdFileHeader.RecId
        totalTaxDeposited += taxWithholdChallanDetail.TotalDepositAmount;

        while select RecIdFileHdr, TotalAmountPaid, TotalTaxDeducted from taxWithholdDeducteeDetail
            where taxWithholdDeducteeDetail.RecIdFileHdr == taxWithholdFileHeader.RecId
        {
            totalNumberOfDeductees++;
            totalAmountPaid     += taxWithholdDeducteeDetail.TotalAmountPaid;
            totalTaxDeducted    += taxWithholdDeducteeDetail.TotalTaxDeducted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run27AReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains code to run the report when it is called from Menu.
    /// </summary>
    public void run27AReport()
    {
        Args args = new Args();
        MenuFunction menuFunction = new MenuFunction(menuitemOutputStr(TaxWithholdReport27A_IN), MenuItemType::Output);

        args.parmObject(report27AContract);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets file number.
    /// </summary>
    public void setFileNumber()
    {
        TaxWithholdFileHeader_IN      taxWithholdFileHeader;
        ;

        select maxof(FileSequenceNumber) from taxWithholdFileHeader;
        fileSeqNumber = taxWithholdFileHeader.FileSequenceNumber + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodFinancialAssesmentYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Period base on the finanacial assesment year.
    /// </summary>
    public void setPeriodFinancialAssesmentYear()
    {
        int month;

        financialYear  = strDel(financialYear, #5, #2);
        assessmentYear = strDel(assessmentYear, #5, #2);
        month          = mthOfYr(fromDate);
        switch  (month)
        {
            case #4:
                period = #Period1;
                break;
            case #7:
                period = #Period2;
                break;
            case #10:
                period = #Period3;
                break;
            case 1:
                period = #Period4;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construtEFillingByConsolidatedFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// construct a TaxWithholdEFilling_IN object which contains Hash value
    /// </summary>
    /// <param name="_path">
    /// path of the consolidated statement file
    /// </param>
    /// <returns>
    /// TaxWithholdEFilling_IN
    /// </returns>
    Public static TaxWithholdEFilling_IN construtEFillingByConsolidatedFile(Filename _path)
    {
        TextIo          consolidatedFile;
        //TextStreamIo           consolidatedFile;
        container        fileRecord;
        int              i;
        int              delimiterPos;
        int              len;
        str              linetext;
        str              fileHash;
        FileIOPermission fileIOPermission;
        TaxWithholdEFilling_IN taxWithholdEFilling = new TaxWithholdEFilling_IN();
        #TaxWithhold_IN
        #File

        // Assert permission.
        fileIOPermission = new FileIOPermission(_path, #io_read);
        fileIOPermission.assert();

        // Read file
        consolidatedFile = new TextIo(_path, #io_read);
        //consolidatedFile = TextStreamIo::constructForRead(null);
// PostR1AXLTODO: Step 1: Uncomment the `readStream` parameter.
//       You need to provide a System.IO.Stream variable to read data from.
//       If you receive a file from user, use the following code before calling the construct:
//       System.IO.Stream readStream = File::UseFileFromURL(File::GetFileFromUser());
// PostR1AXLTODO: Step 2: Use `constructForRead` instead of the `constructForMode`.
//       `constructForMode` is obsolete and must not be used after the migration is complete;
        if (!consolidatedFile)
        {
            throw error("@SYS26757");
        }

        fileRecord = consolidatedFile.read();

        i = 1;
        lineText = conpeek(fileRecord, 1);

        // Below logic is to validate the File Hash which is in the 13th position based on the delimiter "^"
        while (i <= #13)
        {
            len = strlen(lineText);
            delimiterPos = strfind(lineText, #Carat, 1, len);
            if (delimiterPos == 0)
            {
                //read the next line if delimiter is is not found
                fileRecord = consolidatedFile.read();
                lineText = lineText + any2str(conpeek(fileRecord, 1));
                len = strlen(lineText);
                delimiterPos = strfind(lineText, #Carat, 1, len);
            }

            if (i == #13)
            {
                fileHash = substr(lineText, 1, delimiterPos -1);
            }
            lineText = substr(lineText, delimiterPos + 1, len - delimiterPos);
            i++;
        }

        // To validate File Hash
        if (!(taxWithholdEFilling.isHashValueValid(fileHash)))
        {
            return null;
        }
        taxWithholdEFilling.parmFileHash(fileHash);
        return taxWithholdEFilling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deducteeDetailsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deductee details change.
    /// </summary>
    /// <param name="_tanNumber">
    /// The TAN number.
    /// </param>
    /// <param name="_formNumber">
    /// The statement type.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The container which set  the deductee detail change.
    /// </returns>
    public static container deducteeDetailsChanged(TaxWithholdComponentGroupRecId_IN    _tanNumber,
                                                   TaxWithholdStatement_IN              _formNumber,
                                                   FromDate                             _fromDate,
                                                   ToDate                               _toDate,
                                                   TaxWithholdType_IN                   _taxType)
    {
        TaxWithholdDeducteeDetail_IN    taxWithholddeducteeDetail,taxWithholddeducteeDetail1;
        TaxWithholdDeducteeDetail_IN    taxWithholddeducteeDetail2,taxWithholddeducteeDetailLocal;
        CustTable                       custTable;
        VendTable                       vendTable;
        boolean                         otherDetailChanged;
        boolean                         onlyPANChanged = false, c9LastCorrection;
        int                             deducteeCode, challanCount;
        int                             counterI, counterJ, counterK, correction;
        container                       data, deducteeData, data1;
        TaxWithholdBatchHeader_IN       taxWithholdBatchHeader;
        container                       accountNum, custAccountNum;
        TaxWithholdDeducteeDetail_IN    taxWithholdDeducteeDetailLoc;
        boolean                         updateDetails = false;
        Counter                         counterAccount;
        Name                            vendName;
        Name                            custName;
        TaxInformationVendTable_IN      taxInformationVendTableLoc;
        TaxInformationCustTable_IN      taxInformationCustTableloc;

        while select taxWithholddeducteeDetail
            group by VendDeducteeNumber asc
               where taxWithholddeducteeDetail.FromDate        == _fromDate
                  && taxWithholddeducteeDetail.ToDate          == _toDate
                  && taxWithholddeducteeDetail.FormNumber      == _formNumber
                  && taxWithholddeducteeDetail.TaxWithholdRegNumber == _tanNumber
        {
            select maxof(CorrectionFile) from taxWithholddeducteeDetail2
               where taxWithholddeducteeDetail2.VendDeducteeNumber   == taxWithholddeducteeDetail.VendDeducteeNumber
                  && taxWithholddeducteeDetail2.FromDate             == _fromDate
                  && taxWithholddeducteeDetail2.ToDate               == _toDate
                  && taxWithholddeducteeDetail2.FormNumber           == _formNumber
                  && taxWithholddeducteeDetail2.TaxWithholdRegNumber       == _tanNumber;
            select taxWithholddeducteeDetailLocal
               where taxWithholddeducteeDetailLocal.VendDeducteeNumber      == taxWithholddeducteeDetail.VendDeducteeNumber
                  && taxWithholddeducteeDetailLocal.CorrectionFile          == taxWithholddeducteeDetail2.CorrectionFile
                  && taxWithholddeducteeDetailLocal.FromDate                == _fromDate
                  && taxWithholddeducteeDetailLocal.ToDate                  == _toDate
                  && taxWithholddeducteeDetailLocal.FormNumber              == _formNumber
                  && taxWithholddeducteeDetailLocal.TaxWithholdRegNumber    == _tanNumber;
            counterK = 1;
            updateDetails       = false;
            c9LastCorrection    = false;
            while (true)
            {
                taxWithholdBatchHeader = TaxWithholdBatchHeader_IN::findByFileHdr(taxWithholddeducteeDetailLocal.RecIdFileHdr, counterK);
                if (!taxWithholdBatchHeader)
                {
                    break;
                }
                else
                {
                    if (taxWithholdBatchHeader.CorrectionType ==  TaxWithholdCorrectionType_IN::C9 && taxWithholdBatchHeader.BatchRecordNumber == taxWithholddeducteeDetailLocal.BatchRecordNumber)
                    {
                        c9LastCorrection = true;
                        break;
                    }
                }
                counterK++;
            }
            if (c9LastCorrection)
            {
                correction =  taxWithholddeducteeDetailLocal.CorrectionFile;
                while (correction >= 0 && _taxType == TaxWithholdType_IN::TDS)
                {
                    [data,onlyPANChanged,otherDetailChanged,deducteeData,data1] =
                    TaxWithholdEFilling_IN::deducteeDetailsChangedC9VendCorrection(data,
                                                                                   onlyPANChanged,
                                                                                   otherDetailChanged,
                                                                                   deducteeData,
                                                                                   correction,
                                                                                   taxWithholddeducteeDetail.VendDeducteeNumber,
                                                                                   _fromDate,
                                                                                   _toDate,
                                                                                   _tanNumber,
                                                                                   data1,
                                                                                   _formNumber);
                     correction--;
                }
                if (!conFind(accountNum, taxWithholddeducteeDetail.VendDeducteeNumber))
                {
                    vendTable = VendTable::find(taxWithholddeducteeDetail.VendDeducteeNumber);
                    if (vendTable)
                    {
                        taxInformationVendTableLoc = vendTable.getTaxInformationVendTable_IN();
                        vendName = DirPartyTable::findRec(vendTable.Party).Name;
                        ttsbegin;
                        update_recordset taxWithholdDeducteeDetailLoc
                            setting DeducteePANNumber = taxInformationVendTableLoc.panNumber,
                                    DeducteeCode      = deducteeCode,
                                    DeducteeName      = vendName,
                                   DeducteePANStatus = taxInformationVendTableLoc.panStatus
                            where taxWithholdDeducteeDetailLoc.VendDeducteeNumber   == vendTable.AccountNum
                               && taxWithholdDeducteeDetailLoc.FromDate             == _fromDate
                               && taxWithholdDeducteeDetailLoc.ToDate               == _toDate;
                        ttscommit;
                        counterAccount++;
                        accountNum = conPoke(accountNum, counterAccount, taxWithholddeducteeDetail.VendDeducteeNumber);
                    }
                }
            }
            else
            {
                while select DeducteePANNumber, CorrectionFile, FromDate, ToDate, FormNumber, TaxWithholdRegNumber,
                             ChallanDetailRecordNumber, RecIdFileHdr, BatchRecordNumber, DeducteeDetailRecordNumber, DeducteeCode,
                             DeducteeName, DeducteePANStatus, VendDeducteeNumber
                    from taxWithholddeducteeDetail1
                    where taxWithholddeducteeDetail1.VendDeducteeNumber   == taxWithholddeducteeDetail.VendDeducteeNumber
                       && taxWithholddeducteeDetail1.CorrectionFile       == taxWithholddeducteeDetail2.CorrectionFile
                       && taxWithholddeducteeDetail1.FromDate             == _fromDate
                       && taxWithholddeducteeDetail1.ToDate               == _toDate
                       && taxWithholddeducteeDetail1.FormNumber           == _formNumber
                       && taxWithholddeducteeDetail1.TaxWithholdRegNumber       == _tanNumber
                {
                    select vendTable
                       where  vendTable.AccountNum == taxWithholddeducteeDetail.VendDeducteeNumber;
                    if (vendTable)
                    {
                         taxInformationVendTableLoc = vendTable.getTaxInformationVendTable_IN();
                        if (taxInformationVendTableLoc.panNumber  != taxWithholddeducteeDetail1.DeducteePANNumber)

                        {
                            if (otherDetailChanged)
                            {
                                onlyPANChanged = false;
                            }
                            else
                            {
                                onlyPANChanged = true;
                                updateDetails  = true;
                            }

                            counterI = conFind(data,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            if (counterI == 0)
                            {
                                data = conPoke(data,conLen(data)+1, taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            }
                            counterJ = conFind(deducteeData,taxWithholddeducteeDetail1.RecIdFileHdr,taxWithholddeducteeDetail1.BatchRecordNumber,taxWithholddeducteeDetail1.ChallanDetailRecordNumber,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            if (counterJ == 0)
                            {
                                deducteeData    =  conPoke(deducteeData, conLen(deducteeData)+1,taxWithholddeducteeDetail1.RecIdFileHdr);
                                deducteeData    =  conPoke(deducteeData, conLen(deducteeData)+1,taxWithholddeducteeDetail1.BatchRecordNumber);
                                deducteeData    =  conPoke(deducteeData, conLen(deducteeData)+1,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                                deducteeData    =  conPoke(deducteeData, conLen(deducteeData)+1,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            }
                        }
                        if (taxInformationVendTableLoc.NatureOfAssessee == NatureOfAssessee_IN::Company)
                        {
                            deducteeCode = 1;
                        }
                        else
                        {
                            deducteeCode = #2;
                        }
                        vendName = DirPartyTable::findRec(vendTable.Party).Name;
                        if (taxWithholddeducteeDetail1.DeducteeCode != deducteeCode                                 ||
                            taxWithholddeducteeDetail1.DeducteeName != vendName                               ||
                            (taxInformationVendTableLoc.panStatus                 != taxWithholddeducteeDetail1.DeducteePANStatus &&
                             taxInformationVendTableLoc.panStatus                 != PANStatus_IN::Received))
                        {
                            otherDetailChanged  = true;
                            onlyPANChanged      = false;
                            updateDetails       = true;
                            counterI                   = conFind(data,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            if (counterI == 0)
                            {
                                data = conPoke(data,conLen(data)+1,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            }
                            counterJ                   = conFind(deducteeData,taxWithholddeducteeDetail1.RecIdFileHdr,taxWithholddeducteeDetail1.BatchRecordNumber,
                                                          taxWithholddeducteeDetail1.ChallanDetailRecordNumber,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            if (counterJ == 0)
                            {
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.RecIdFileHdr);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.BatchRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            }
                        }
                        if (!conFind(accountNum, taxWithholddeducteeDetail.VendDeducteeNumber) && updateDetails  == true)
                        {
                            vendName = DirPartyTable::findRec(vendTable.Party).Name;
                            ttsbegin;
                            update_recordset taxWithholdDeducteeDetailLoc
                                setting DeducteePANNumber = taxInformationVendTableLoc.panNumber,
                                        DeducteeCode      = deducteeCode,
                                        DeducteeName      = vendName,
                                        DeducteePANStatus = taxInformationVendTableLoc.panStatus
                                where taxWithholdDeducteeDetailLoc.VendDeducteeNumber   == vendTable.AccountNum
                                   && taxWithholdDeducteeDetailLoc.FromDate             == _fromDate
                                   && taxWithholdDeducteeDetailLoc.ToDate               == _toDate;
                            ttscommit;
                            counterAccount++;
                            accountNum = conPoke(accountNum, counterAccount, taxWithholddeducteeDetail.VendDeducteeNumber);
                        }
                    }
                }
            }
        }
        while select FromDate, ToDate, DeducteeNumber, FormNumber, TaxWithholdRegNumber   from taxWithholddeducteeDetail
            group by DeducteeNumber asc
                where taxWithholddeducteeDetail.FromDate        == _fromDate
                   && taxWithholddeducteeDetail.ToDate          == _toDate
                   && taxWithholddeducteeDetail.FormNumber      == _formNumber
                   && taxWithholddeducteeDetail.TaxWithholdRegNumber  == _tanNumber
        {
            select maxof(CorrectionFile) from taxWithholddeducteeDetail2
                where taxWithholddeducteeDetail2.DeducteeNumber       == taxWithholddeducteeDetail.DeducteeNumber
                   && taxWithholddeducteeDetail2.FromDate             == _fromDate
                   && taxWithholddeducteeDetail2.ToDate               == _toDate
                   && taxWithholddeducteeDetail2.FormNumber           == _formNumber
                   && taxWithholddeducteeDetail2.TaxWithholdRegNumber       == _tanNumber;
            select taxWithholddeducteeDetailLocal
               where taxWithholddeducteeDetailLocal.DeducteeNumber    == taxWithholddeducteeDetail.DeducteeNumber
                  && taxWithholddeducteeDetailLocal.CorrectionFile    == taxWithholddeducteeDetail2.CorrectionFile
                  && taxWithholddeducteeDetailLocal.FromDate          == _fromDate
                  && taxWithholddeducteeDetailLocal.ToDate            == _toDate
                  && taxWithholddeducteeDetailLocal.FormNumber        == _formNumber
                  && taxWithholddeducteeDetailLocal.TaxWithholdRegNumber    == _tanNumber;
            counterK            = 1;
            counterAccount      = 0;
            c9LastCorrection    = false;
            updateDetails       = false;
            while (true)
            {
                taxWithholdBatchHeader = TaxWithholdBatchHeader_IN::findByFileHdr(taxWithholddeducteeDetailLocal.RecIdFileHdr, counterK);
                if (!taxWithholdBatchHeader)
                {
                    break;
                }
                else
                {
                    if (taxWithholdBatchHeader.CorrectionType ==  TaxWithholdCorrectionType_IN::C9 && taxWithholdBatchHeader.BatchRecordNumber == taxWithholddeducteeDetailLocal.BatchRecordNumber)
                    {
                        c9LastCorrection = true;
                        break;
                    }
                }
                counterK++;
            }
            if (c9LastCorrection)
            {
                correction =  taxWithholddeducteeDetailLocal.CorrectionFile;
                while (correction >= 0 && (_taxType == TaxWithholdType_IN::TCS || _taxType == TaxWithholdType_IN::TDS))
                {
                    [data,onlyPANChanged,otherDetailChanged,deducteeData,data1] =
                    TaxWithholdEFilling_IN::deducteeDetailsChangedC9CustCorrection(data,
                                                                                   onlyPANChanged,
                                                                                   otherDetailChanged,
                                                                                   deducteeData,
                                                                                   correction,
                                                                                   taxWithholddeducteeDetail.DeducteeNumber,
                                                                                   _fromDate,
                                                                                   _toDate,
                                                                                   _tanNumber,
                                                                                   data1,
                                                                                   _formNumber);
                      correction--;
                }
                if (!conFind(custAccountNum, taxWithholddeducteeDetail.DeducteeNumber))
                {
                    custTable = CustTable::find(taxWithholddeducteeDetail.DeducteeNumber);
                    custName  = DirPartyTable::findRec(custTable.Party).Name;
                    if (custTable)
                    {
                        taxInformationCustTableloc = custTable.getTaxInformationCustTable_IN();
                        ttsbegin;
                        update_recordset taxWithholdDeducteeDetailLoc
                            setting DeducteePANNumber = taxInformationCustTableloc.panNumber,
                                    DeducteeCode      = deducteeCode,
                                    DeducteeName      = custName,
                                    DeducteePANStatus = taxInformationCustTableloc.PanStatus
                            where taxWithholdDeducteeDetailLoc.DeducteeNumber       == custTable.AccountNum
                               && taxWithholdDeducteeDetailLoc.FromDate             == _fromDate
                               && taxWithholdDeducteeDetailLoc.ToDate               == _toDate;
                        ttscommit;
                        counterAccount++;
                        custAccountNum = conPoke(custAccountNum, counterAccount, taxWithholddeducteeDetail.DeducteeNumber);
                    }
                }
            }
            else
            {
                while select taxWithholddeducteeDetail1
                    where  taxWithholddeducteeDetail1.DeducteeNumber  == taxWithholddeducteeDetail.DeducteeNumber
                       &&  taxWithholddeducteeDetail1.CorrectionFile  == taxWithholddeducteeDetail2.CorrectionFile
                       &&  taxWithholddeducteeDetail1.FromDate        == _fromDate
                       &&  taxWithholddeducteeDetail1.ToDate          == _toDate
                       &&  taxWithholddeducteeDetail1.FormNumber      == _formNumber
                       &&  taxWithholddeducteeDetail1.TaxWithholdRegNumber  == _tanNumber
                {
                    select custTable
                       where custTable.AccountNum  == taxWithholddeducteeDetail.DeducteeNumber;
                    if (custTable)
                    {
                        taxInformationCustTableloc = custTable.getTaxInformationCustTable_IN();
                        if (taxInformationCustTableloc.panNumber  != taxWithholddeducteeDetail1.DeducteePANNumber)
                        {
                            if (otherDetailChanged)
                            {
                                onlyPANChanged = false;
                            }
                            else
                            {
                                onlyPANChanged = true;
                                updateDetails  = true;
                            }
                            counterI = conFind(data,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            if (counterI == 0)
                            {
                                data = conPoke(data,conLen(data)+1,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            }
                            counterJ = conFind(deducteeData,taxWithholddeducteeDetail1.RecIdFileHdr,taxWithholddeducteeDetail1.BatchRecordNumber,taxWithholddeducteeDetail1.ChallanDetailRecordNumber,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            if (counterJ == 0)
                            {
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.RecIdFileHdr);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.BatchRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            }
                        }
                        if (taxInformationCustTableloc.NatureOfAssessee == NatureOfAssessee_IN::Company)
                        {
                            deducteeCode = 1;
                        }
                        else
                        {
                            deducteeCode = #2;
                        }

                        custName  = DirPartyTable::findRec(custTable.Party).Name;
                        if (taxWithholddeducteeDetail1.DeducteeCode  != deducteeCode                            ||
                            taxWithholddeducteeDetail1.DeducteeName  != custName                                ||
                           (taxInformationCustTableloc.PanStatus           != taxWithholddeducteeDetail1.DeducteePANStatus   &&
                            taxInformationCustTableloc.PanStatus           != PANStatus_IN::Received))

                        {
                            otherDetailChanged  = true;
                            onlyPANChanged      = false;
                            updateDetails       = true;
                            counterI = conFind(data,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            if (counterI == 0)
                            {
                                data = conPoke(data,conLen(data)+1,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                            }
                            counterJ = conFind(deducteeData,taxWithholddeducteeDetail1.RecIdFileHdr,taxWithholddeducteeDetail1.BatchRecordNumber,taxWithholddeducteeDetail1.ChallanDetailRecordNumber,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            if (counterJ == 0)
                            {
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.RecIdFileHdr);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.BatchRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.ChallanDetailRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholddeducteeDetail1.DeducteeDetailRecordNumber);
                            }
                        }
                        if (!conFind(custAccountNum, taxWithholddeducteeDetail.DeducteeNumber) && updateDetails  == true)
                        {
                            custName  = DirPartyTable::findRec(custTable.Party).Name;
                            ttsbegin;
                            update_recordset taxWithholdDeducteeDetailLoc
                                setting DeducteePANNumber = taxInformationCustTableloc.panNumber,
                                        DeducteeCode      = deducteeCode,
                                        DeducteeName      = custName,
                                        DeducteePANStatus = taxInformationCustTableloc.PanStatus
                                where taxWithholdDeducteeDetailLoc.DeducteeNumber       == custTable.AccountNum
                                   && taxWithholdDeducteeDetailLoc.FromDate             == _fromDate
                                   && taxWithholdDeducteeDetailLoc.ToDate               == _toDate;
                            ttscommit;
                            counterAccount++;
                            custAccountNum = conPoke(custAccountNum, counterAccount, taxWithholddeducteeDetail.DeducteeNumber);
                        }
                    }
                }
            }
        }
        challanCount = conLen(data);
        return [onlyPANChanged, challanCount, data, deducteeData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deducteeDetailsChangedC9CustCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cust C9 correction deductee details.
    /// </summary>
    /// <param name="_data">
    /// The deductee data.
    /// </param>
    /// <param name="_onlyPANChanged">
    /// Whether only PAN changed.
    /// </param>
    /// <param name="_otherDetailChanged">
    /// Whether other details changed.
    /// </param>
    /// <param name="_deducteeData">
    /// The deductee data.
    /// </param>
    /// <param name="_correction">
    /// The Correction number.
    /// </param>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_tanNumber">
    /// The TAN number.
    /// </param>
    /// <param name="_data1">
    /// The deductee data.
    /// </param>
    /// <param name="_taxWithholdStatement">
    /// The statement type.
    /// </param>
    /// <returns>
    /// The deductee change data.
    /// </returns>
    public static container deducteeDetailsChangedC9CustCorrection(container               _data,
                                                                   boolean                 _onlyPANChanged,
                                                                   boolean                 _otherDetailChanged,
                                                                   container               _deducteeData,
                                                                   int                     _correction,
                                                                   CustAccount             _accountNum,
                                                                   FromDate                _fromDate,
                                                                   ToDate                  _toDate,
                                                                   TaxWithholdRegNumberRecId_IN  _tanNumber,
                                                                   container               _data1,
                                                                   TaxWithholdStatement_IN _taxWithholdStatement)
    {
        TaxWithholdDeducteeDetail_IN    taxWithholdDeducteeDetail,taxWithholdDeducteeDetail1;
        CustTable                       custTable;
        boolean                         otherDetailChanged;
        boolean                         onlyPANChanged = false;
        int                             deducteeCode;
        int                             counterI, counterJ, counterK = 1, counterM;
        container                       data,deducteeData,data1;
        Name                            custName;
        TaxInformationCustTable_IN      custInformationCustTableLoc;

        data                = _data;
        onlyPANChanged      = _onlyPANChanged;
        otherDetailChanged  = _otherDetailChanged;
        deducteeData        = _deducteeData;
        data1               = _data1;
        select DeducteeNumber, DeducteePANNumber, DeducteePANStatus, DeducteeCode, DeducteeName from taxWithholdDeducteeDetail
           where taxWithholdDeducteeDetail.DeducteeNumber == _accountNum
              && taxWithholdDeducteeDetail.FromDate       == _fromDate
              && taxWithholdDeducteeDetail.ToDate         == _toDate
              && taxWithholdDeducteeDetail.FormNumber     == _taxWithholdStatement
              && taxWithholdDeducteeDetail.TaxWithholdRegNumber == _tanNumber
              && taxWithholdDeducteeDetail.CorrectionFile == _correction;

        select  Party,AccountNum from custTable
           where  custTable.AccountNum == taxWithholdDeducteeDetail.DeducteeNumber;
        if (custTable)
        {
            custInformationCustTableLoc = custTable.getTaxInformationCustTable_IN();
            if (custInformationCustTableLoc.panNumber  != taxWithholdDeducteeDetail.DeducteePANNumber)
            {
                if (otherDetailChanged)
                {
                    onlyPANChanged = false;
                }
                else
                {
                    onlyPANChanged  = true;
                }
                while select ChallanDetailRecordNumber from taxWithholdDeducteeDetail1
                    where taxWithholdDeducteeDetail1.DeducteeNumber    == _accountNum
                       && taxWithholdDeducteeDetail1.FromDate          == _fromDate
                       && taxWithholdDeducteeDetail1.ToDate            == _toDate
                       && taxWithholdDeducteeDetail1.FormNumber        == _taxWithholdStatement
                       && taxWithholdDeducteeDetail1.TaxWithholdRegNumber    == _tanNumber
                       && taxWithholdDeducteeDetail1.CorrectionFile    == _correction
                {
                    counterI = conFind(data,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                    if (counterI == 0)
                    {
                        data = conPoke(data,conLen(data)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                    }
                }
                while (counterK <= conLen(data))
                {
                    counterM = conPeek(data, counterK);
                    while select ChallanDetailRecordNumber, DeducteeNumber, RecIdFileHdr, BatchRecordNumber, DeducteeDetailRecordNumber  from taxWithholdDeducteeDetail1
                        where taxWithholdDeducteeDetail1.DeducteeNumber              == _accountNum
                           && taxWithholdDeducteeDetail1.FromDate                    == _fromDate
                           && taxWithholdDeducteeDetail1.ToDate                      == _toDate
                           && taxWithholdDeducteeDetail1.FormNumber                  == _taxWithholdStatement
                           && taxWithholdDeducteeDetail1.TaxWithholdRegNumber              == _tanNumber
                           && taxWithholdDeducteeDetail1.CorrectionFile              == _correction
                           && taxWithholdDeducteeDetail1.ChallanDetailRecordNumber   == counterM
                    {
                        counterJ = conFind(data1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber,taxWithholdDeducteeDetail1.DeducteeNumber);
                        if (!counterJ)
                        {
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.RecIdFileHdr);
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.BatchRecordNumber);
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.DeducteeDetailRecordNumber);
                        }
                    }
                    counterK++;
                    data1 =  conPoke(data1,conLen(data1)+1,counterM);
                    data1 =  conPoke(data1,conLen(data1)+1,_accountNum);
                }
            }
            if (custInformationCustTableLoc.NatureOfAssessee == NatureOfAssessee_IN::Company)
            {
                deducteeCode = 1;
            }
            else
            {
                deducteeCode = #2;
            }
            custName = DirPartyTable::findRec(custTable.Party).Name;
            if (taxWithholdDeducteeDetail.DeducteeCode  != deducteeCode                         ||
                taxWithholdDeducteeDetail.DeducteeName  != custName                       ||
                (custInformationCustTableLoc.PanStatus          != taxWithholdDeducteeDetail.DeducteePANStatus &&
                 custInformationCustTableLoc.PanStatus          != PANStatus_IN::Received))
            {
                if (taxWithholdDeducteeDetail.DeducteeCode      != deducteeCode  ||
                   taxWithholdDeducteeDetail.DeducteeName      != custName)
                {
                    otherDetailChanged  = true;
                    onlyPANChanged      = false;
                    while select ChallanDetailRecordNumber from taxWithholdDeducteeDetail1
                        where taxWithholdDeducteeDetail1.DeducteeNumber    == _accountNum
                           && taxWithholdDeducteeDetail1.FromDate          == _fromDate
                           && taxWithholdDeducteeDetail1.ToDate            == _toDate
                           && taxWithholdDeducteeDetail1.FormNumber        == _taxWithholdStatement
                           && taxWithholdDeducteeDetail1.TaxWithholdRegNumber    == _tanNumber
                           && taxWithholdDeducteeDetail1.CorrectionFile    == _correction
                    {
                        counterI =   conFind(data,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                        if (counterI == 0)
                        {
                            data = conPoke(data,conLen(data)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                        }
                    }
                    counterK = 1;
                    while (counterK <= conLen(data))
                    {
                        counterM = conPeek(data,counterK);
                        while select ChallanDetailRecordNumber, DeducteeNumber, RecIdFileHdr, BatchRecordNumber, DeducteeDetailRecordNumber  from taxWithholdDeducteeDetail1
                            where taxWithholdDeducteeDetail1.DeducteeNumber              == _accountNum
                               && taxWithholdDeducteeDetail1.FromDate                    == _fromDate
                               && taxWithholdDeducteeDetail1.ToDate                      == _toDate
                               && taxWithholdDeducteeDetail1.FormNumber                  == _taxWithholdStatement
                               && taxWithholdDeducteeDetail1.TaxWithholdRegNumber              == _tanNumber
                               && taxWithholdDeducteeDetail1.CorrectionFile              == _correction
                               && taxWithholdDeducteeDetail1.ChallanDetailRecordNumber   == counterM
                        {
                            counterJ = conFind(data1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber,taxWithholdDeducteeDetail1.DeducteeNumber);
                            if (!counterJ)
                            {
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.RecIdFileHdr);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.BatchRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.DeducteeDetailRecordNumber);
                            }
                        }
                        counterK++;
                        data1 =  conPoke(data1,conLen(data1)+1,counterM);
                        data1 =  conPoke(data1,conLen(data1)+1,_accountNum);
                    }
                }
            }
        }
        return [data,onlyPANChanged,otherDetailChanged,deducteeData,data1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deducteeDetailsChangedC9VendCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vend C9 correction deductee details.
    /// </summary>
    /// <param name="_data">
    /// The deductee data.
    /// </param>
    /// <param name="_onlyPANChanged">
    /// Whether only PAN changed.
    /// </param>
    /// <param name="_otherDetailChanged">
    /// Whether other details changed.
    /// </param>
    /// <param name="_deducteeData">
    /// The deductee data.
    /// </param>
    /// <param name="_correction">
    /// The Correction number.
    /// </param>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_tanNumber">
    /// The TAN number.
    /// </param>
    /// <param name="_dataLoc">
    /// The deductee data.
    /// </param>
    /// <param name="_taxWithholdStatement">
    /// The statement type.
    /// </param>
    /// <returns>
    /// The deductee change data.
    /// </returns>
    public static container deducteeDetailsChangedC9VendCorrection(container               _data,
                                                                   boolean                 _onlyPANChanged,
                                                                   boolean                 _otherDetailChanged,
                                                                   container               _deducteeData,
                                                                   int                     _correction,
                                                                   CustAccount             _accountNum,
                                                                   FromDate                _fromDate,
                                                                   ToDate                  _toDate,
                                                                   TaxWithholdRegNumberRecId_IN  _tanNumber,
                                                                   container               _dataLoc,
                                                                   TaxWithholdStatement_IN _taxWithholdStatement)
    {
        TaxWithholdDeducteeDetail_IN    taxWithholdDeducteeDetail,taxWithholdDeducteeDetail1;
        VendTable                       vendTable;
        boolean                         otherDetailChanged;
        boolean                         onlyPANChanged = false;
        int                             deducteeCode;
        int                             counterI, counterJ, counterK = 1, counterM;
        container                       data,deducteeData, dataLoc;
        Name                            vendName;
        TaxInformationVendTable_IN      taxInformationVendTableLoc;

        data                = _data;
        onlyPANChanged      = _onlyPANChanged;
        otherDetailChanged  = _otherDetailChanged;
        deducteeData        = _deducteeData;
        dataLoc             = _dataLoc;
        select VendDeducteeNumber, DeducteePANNumber, DeducteePANStatus, DeducteeCode, DeducteeName from taxWithholdDeducteeDetail
           where taxWithholdDeducteeDetail.VendDeducteeNumber   == _accountNum
              && taxWithholdDeducteeDetail.FromDate             == _fromDate
              && taxWithholdDeducteeDetail.ToDate               == _toDate
              && taxWithholdDeducteeDetail.FormNumber           == _taxWithholdStatement
              && taxWithholdDeducteeDetail.TaxWithholdRegNumber       == _tanNumber
              && taxWithholdDeducteeDetail.CorrectionFile       == _correction;

        select AccountNum from vendTable
           where  vendTable.AccountNum == taxWithholdDeducteeDetail.VendDeducteeNumber;
        if (vendTable)
        {
            taxInformationVendTableLoc = vendTable.getTaxInformationVendTable_IN();
            if (taxInformationVendTableLoc.panNumber   != taxWithholdDeducteeDetail.DeducteePANNumber)
            {
                if (otherDetailChanged)
                {
                    onlyPANChanged = false;
                }
                else
                {
                    onlyPANChanged  = true;
                }
                while select ChallanDetailRecordNumber from taxWithholdDeducteeDetail1
                    where taxWithholdDeducteeDetail1.VendDeducteeNumber    == _accountNum
                       && taxWithholdDeducteeDetail1.FromDate              == _fromDate
                       && taxWithholdDeducteeDetail1.ToDate                == _toDate
                       && taxWithholdDeducteeDetail1.FormNumber            == _taxWithholdStatement
                       && taxWithholdDeducteeDetail1.TaxWithholdRegNumber        == _tanNumber
                       && taxWithholdDeducteeDetail1.CorrectionFile        == _correction
                {
                    counterI = conFind(data,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                    if (counterI == 0)
                    {
                        data = conPoke(data,conLen(data)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                    }
                }
                while (counterK <= conLen(data))
                {
                    counterM = conPeek(data,counterK);
                    while select ChallanDetailRecordNumber, VendDeducteeNumber, RecIdFileHdr, BatchRecordNumber, DeducteeDetailRecordNumber from taxWithholdDeducteeDetail1
                        where taxWithholdDeducteeDetail1.VendDeducteeNumber        == _accountNum
                           && taxWithholdDeducteeDetail1.FromDate                  == _fromDate
                           && taxWithholdDeducteeDetail1.ToDate                    == _toDate
                           && taxWithholdDeducteeDetail1.FormNumber                == _taxWithholdStatement
                           && taxWithholdDeducteeDetail1.TaxWithholdRegNumber      == _tanNumber
                           && taxWithholdDeducteeDetail1.CorrectionFile            == _correction
                           && taxWithholdDeducteeDetail1.ChallanDetailRecordNumber == counterM
                    {
                        counterJ = conFind(dataLoc,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber,taxWithholdDeducteeDetail1.VendDeducteeNumber);
                        if (!counterJ)
                        {
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.RecIdFileHdr);
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.BatchRecordNumber);
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                            deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.DeducteeDetailRecordNumber);
                        }
                    }
                    counterK++;
                    dataLoc =  conPoke(dataLoc,conLen(dataLoc)+1, counterM);
                    dataLoc =  conPoke(dataLoc,conLen(dataLoc)+1,_accountNum);
                }
            }
            if (taxInformationVendTableLoc.NatureOfAssessee == NatureOfAssessee_IN::Company)
            {
                deducteeCode = 1;
            }
            else
            {
                deducteeCode = #2;
            }

            vendName = DirPartyTable::findRec(vendTable.Party).Name;
            if (taxWithholdDeducteeDetail.DeducteeCode  != deducteeCode   ||
                taxWithholdDeducteeDetail.DeducteeName  != vendName ||
               (taxInformationVendTableLoc.panStatus          != taxWithholdDeducteeDetail.DeducteePANStatus   &&
                taxInformationVendTableLoc.panStatus          != PANStatus_IN::Received))

            {
                if (taxWithholdDeducteeDetail.DeducteeCode       != deducteeCode  ||
                    taxWithholdDeducteeDetail.DeducteeName       != vendName)
                {
                    otherDetailChanged  = true;
                    onlyPANChanged      = false;
                    while select ChallanDetailRecordNumber from taxWithholdDeducteeDetail1
                        where taxWithholdDeducteeDetail1.VendDeducteeNumber    == _accountNum
                           && taxWithholdDeducteeDetail1.FromDate              == _fromDate
                           && taxWithholdDeducteeDetail1.ToDate                == _toDate
                           && taxWithholdDeducteeDetail1.FormNumber            == _taxWithholdStatement
                           && taxWithholdDeducteeDetail1.TaxWithholdRegNumber  == _tanNumber
                           && taxWithholdDeducteeDetail1.CorrectionFile        == _correction
                    {
                        counterI =   conFind(data,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                        if (counterI == 0)
                        {
                            data = conPoke(data,conLen(data)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                        }
                    }
                    counterK = 1;
                    while (counterK <= conLen(data))
                    {
                        counterM = conPeek(data,counterK);
                        while select ChallanDetailRecordNumber, VendDeducteeNumber, RecIdFileHdr, BatchRecordNumber, DeducteeDetailRecordNumber from taxWithholdDeducteeDetail1
                            where taxWithholdDeducteeDetail1.VendDeducteeNumber          == _accountNum
                               && taxWithholdDeducteeDetail1.FromDate                    == _fromDate
                               && taxWithholdDeducteeDetail1.ToDate                      == _toDate
                               && taxWithholdDeducteeDetail1.FormNumber                  == _taxWithholdStatement
                               && taxWithholdDeducteeDetail1.TaxWithholdRegNumber              == _tanNumber
                               && taxWithholdDeducteeDetail1.CorrectionFile              == _correction
                               && taxWithholdDeducteeDetail1.ChallanDetailRecordNumber   == counterM
                        {
                            counterJ = conFind(dataLoc,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber,taxWithholdDeducteeDetail1.VendDeducteeNumber);
                            if (!counterJ)
                            {
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.RecIdFileHdr);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.BatchRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.ChallanDetailRecordNumber);
                                deducteeData =  conPoke(deducteeData,conLen(deducteeData)+1,taxWithholdDeducteeDetail1.DeducteeDetailRecordNumber);
                            }
                        }
                        counterK++;
                        dataLoc =  conPoke(dataLoc,conLen(dataLoc)+1,counterM);
                        dataLoc =  conPoke(dataLoc,conLen(dataLoc)+1,_accountNum);
                    }
                }
            }
        }
        return [data,onlyPANChanged,otherDetailChanged,deducteeData,dataLoc];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductorDetailsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether the deductor detail changed.
    /// </summary>
    /// <param name="_tanNumber">
    /// The TAN number.
    /// </param>
    /// <param name="_formNumber">
    /// The statement type.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_fullName">
    /// The full name.
    /// </param>
    /// <param name="_designation">
    /// The designation.
    /// </param>
    /// <param name="_deductorEmail">
    /// The Email address of the deductor.
    /// </param>
    /// <param name="_deductorTelePhone">
    /// The Telephone number of the deductor.
    /// </param>
    /// <param name="_responsibleAddress">
    /// The address of the responsible person.
    /// </param>
    /// <param name="_responsibleStateCode">
    /// The State code of the responsible person.
    /// </param>
    /// <param name="_responsibleEmail">
    /// The Email address of the responsible person.
    /// </param>
    /// <param name="_responsibleTelePhone">
    /// The Telephone number of the responsible person.
    /// </param>
    /// <param name="_responsibleName">
    /// The name of the responsible person.
    /// </param>
    /// <returns>
    /// Whether the deductor details changed.
    /// </returns>
    public static boolean deductorDetailsChanged(TaxWithholdRegNumberRecId_IN    _tanNumber,
                                                 TaxWithholdStatement_IN        _formNumber,
                                                 FromDate                       _fromDate,
                                                 ToDate                         _toDate,
                                                 str                            _fullName,
                                                 str                            _designation,
                                                 Email                          _deductorEmail,
                                                 Phone                          _deductorTelePhone,
                                                 str                            _responsibleAddress,
                                                 int                            _responsibleStateCode,
                                                 Email                          _responsibleEmail,
                                                 Phone                          _responsibleTelePhone,
                                                 Name                           _responsibleName)
    {
        TaxWithholdFileHeader_IN       fileHdr;
        TaxWithholdBatchHeader_IN      batchHeader;
        CompanyInfo                    companyInfo;
        Integer                        stateCode;

        LogisticsPostalAddress         logisticsPostalAddress;
        DirPartyLocation               dirPartyLocation;
        LogisticsLocation              logisticsLocation;
        LogisticsLocationEntity        logisticsLocationEntity;
        TaxInformationLegalEntity_IN   taxInformationLegalEntity;

        companyInfo = CompanyInfo::find();
        taxInformationLegalEntity = CompanyInfoHelper::getTaxInformationLegalEntity_IN(companyInfo);

        fileHdr     = TaxWithholdEFilling_IN::headerRecord(_tanNumber, _formNumber, _fromDate, _toDate);

        dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(companyInfo.RecId);

        if (dirPartyLocation)
        {
            logisticsLocation = LogisticsLocation::find(dirPartyLocation.Location);
        }
        else
        {
            select firstonly Party, RecId, Location from dirPartyLocation
                    where   dirPartyLocation.Party      == companyInfo.RecId
                      &&    dirPartyLocation.IsPrimary  == false
                      &&    dirPartyLocation.IsPostalAddress == true;

            logisticsLocation = LogisticsLocation::find(dirPartyLocation.Location);
        }

        logisticsLocationEntity = LogisticsLocationEntity::constructFromLocationRecId(logisticsLocation.RecId);

        if (TaxInformation_IN::findDefaultbyLocation(logisticsLocation.RecId).tan == _tanNumber)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);

            stateCode   =  TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddress.State);
            select batchHeader
               where batchHeader.RecIdFileHdr == fileHdr.RecId;
            if (batchHeader.DeductorName                       != companyInfo.Name                          ||
                batchHeader.PanNumber                          != taxInformationLegalEntity.panNumber       ||
                batchHeader.DeductorType                       != taxInformationLegalEntity.TypeOfDeductor  ||
                batchHeader.DeductorAddress                    != logisticsPostalAddress.Street             ||
                batchHeader.DeductorStateCode                  != stateCode                                 ||
                batchHeader.DeliveyLocation                    != logisticsPostalAddress.RecId              ||
                batchHeader.DeductorEmail                      != _deductorEmail                            ||
                batchHeader.DeductorTelePhone                  != _deductorTelePhone                        ||
                batchHeader.ResponsiblePersonAddress           != _responsibleAddress                       ||
                batchHeader.ResponsiblePersonStateCode         != _responsibleStateCode                     ||
                batchHeader.ResponsiblePersonEmail             != _responsibleEmail                         ||
                batchHeader.ResponsiblePersonTelePhone         != _responsibleTelePhone                     ||
                batchHeader.ResponsiblePersonsName             != _responsibleName                          ||
                batchHeader.ResponsiblePersonsDesignation      != strLTrim(strRTrim(_designation)))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsElectronicAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record in LogisticsElectronicAddress table
    /// </summary>
    /// <param name="_partyRecId">
    /// Party RecId
    /// </param>
    /// <param name="_addressMethodType">
    /// Address Method Type
    /// </param>
    /// <param name="_isMobile">
    /// is mobile phone number or not
    /// </param>
    /// <param name="_isPrimary">
    /// is primary electronic address or not
    /// </param>
    /// <returns>
    /// The recod found
    /// </returns>
    public static LogisticsElectronicAddress getLogisticsElectronicAddress(
        DirPartyRecId                           _partyRecId,
        LogisticsElectronicAddressMethodType    _addressMethodType,
        NoYes                                   _isMobile = NoYes::No,
        NoYes                                   _isPrimary = NoYes::Yes)
    {
        LogisticsElectronicAddress logisticsElectronicAddress;
        DirPartyLocation partyLocation;

        select firstonly logisticsElectronicAddress
            where logisticsElectronicAddress.Type           == _addressMethodType
                && logisticsElectronicAddress.IsPrimary == _isPrimary
                && logisticsElectronicAddress.IsMobilePhone == _isMobile
        exists join partyLocation
            where partyLocation.Location    == logisticsElectronicAddress.Location
            && partyLocation.Party          == _partyRecId;

        return logisticsElectronicAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMobilePhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets mobile phone number for a dir party.
    /// </summary>
    /// <param name="_partyRecId">
    /// The recId of the dir party.
    /// </param>
    /// <returns>
    /// The mobile phone number.
    /// </returns>
    public static PhoneLocal getMobilePhone(DirPartyRecId _partyRecId)
    {
        return TaxWithholdEFilling_IN::getPhoneLogisticsElectronicAddress(_partyRecId, NoYes::Yes).Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets telephone number for a dir party.
    /// </summary>
    /// <param name="_partyRecId">
    /// The recId of the dir party.
    /// </param>
    /// <returns>
    /// The telephone number.
    /// </returns>
    public static PhoneLocal getPhone(DirPartyRecId _partyRecId)
    {
        return TaxWithholdEFilling_IN::getPhoneLogisticsElectronicAddress(_partyRecId, NoYes::No).Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhoneLogisticsElectronicAddress</Name>
				<Source><![CDATA[
    private static LogisticsElectronicAddress getPhoneLogisticsElectronicAddress(DirPartyRecId _partyRecId, NoYes _isMobile = NoYes::No)
    {
        LogisticsElectronicAddress logisticsElectronicAddress;
        DirPartyLocation partyLocation;

        select firstonly logisticsElectronicAddress
            order by logisticsElectronicAddress.IsPrimary desc
            where logisticsElectronicAddress.Type           == LogisticsElectronicAddressMethodType::Phone
                && logisticsElectronicAddress.IsMobilePhone == _isMobile
        exists join partyLocation
            where partyLocation.Location    == logisticsElectronicAddress.Location
            && partyLocation.Party          == _partyRecId;

        return logisticsElectronicAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quarter.
    /// </summary>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// The quarter string.
    /// </returns>
    public static str getQuarter(date _toDate)
    {
        str     qtr;
        ;

        switch (mthOfYr(_toDate))
        {
            case #3:
                qtr = #Period4;
                break;
            case #6:
                qtr = #Period1;
                break;
            case #9:
                qtr = #Period2;
                break;
            case #12:
                qtr = #Period3;
                break;
        }
        return qtr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file header records.
    /// </summary>
    /// <param name="_tanNumber">
    /// The TAN number.
    /// </param>
    /// <param name="_formNumber">
    /// The statement type.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_originalReturn">
    /// Correction or Original.
    /// </param>
    /// <returns>
    /// The file header records.
    /// </returns>
    public static TaxWithholdFileHeader_IN   headerRecord(TaxWithholdRegNumberRecId_IN   _tanNumber,
                                                                 TaxWithholdStatement_IN        _formNumber,
                                                                 FromDate                       _fromDate,
                                                                 ToDate                         _toDate,
                                                                 boolean                        _originalReturn = false)
    {
        TaxWithholdFileHeader_IN    fileHdr;
        int                         correctionFile;
        ;

        if (_originalReturn)
        {
            correctionFile = 0;
        }
        else
        {
            select maxof(CorrectionFile) from fileHdr
               where fileHdr.TaxWithholdRegNumber  == _tanNumber
                  && fileHdr.FormNumber      == _formNumber
                  && fileHdr.FromDate        == _fromDate
                  && fileHdr.ToDate           == _toDate;
            correctionFile = fileHdr.CorrectionFile;
        }
        return TaxWithholdFileHeader_IN::findByTAN(_tanNumber, _formNumber, _fromDate, _toDate, correctionFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhoneNumberValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that if phone sections is an valide India phone sections, for valide phone sections, it should contain two part:
    /// [STD code, subsriber number].
    /// </summary>
    /// <param name="phoneSections">
    /// The <c>phonesections</c> need to be validate.
    /// </param>
    /// <returns>
    /// True if <c>phonesections</c> is valid, false if <c>phonesections</c> is invalid.
    /// </returns>
    private static boolean isPhoneNumberValid(container phoneSections)
    {
        #define.validSectionLen(2)
        return conlen(phoneSections) == #validSectionLen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChallanDeducteeCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the new challan deductee detail count.
    /// </summary>
    /// <param name="_tanNumber">
    /// The TAN number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_componentStatus">
    /// The component status : Resident or NonResident.
    /// </param>
    /// <param name="_taxTypeLoc">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The new challan deductee.
    /// </returns>
    public static  container   newChallanDeducteeCount(TaxWithholdRegNumberRecId_IN   _tanNumber,
                                                       FromDate                       _fromDate,
                                                       ToDate                         _toDate,
                                                       TaxWithholdComponentStatus_IN  _componentStatus,
                                                       TaxWithholdType_IN             _taxTypeLoc)
    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        container               voucherNumber = conNull();
        int                     counter;
        TaxWithholdCodeType_IN  codeType;

        codeType = TaxWithhold_IN::TaxWithholdType2TaxWithholdCodeType(_taxTypeLoc);
        if (_taxTypeLoc == TaxWithholdType_IN::TDS)
        {
            while select taxWithholdTrans
                group by LedgerVoucher
                where taxWithholdTrans.TaxWithholdRegNumber == _tanNumber
                   && taxWithholdTrans.TransDate            >= _fromDate
                   && taxWithholdTrans.TransDate            <= _toDate
                   && taxWithholdTrans.LineStatus           == ""
                   && taxWithholdTrans.ComponentStatus      == _componentStatus
                   && taxWithholdTrans.TransactionReversal  == false
                   && taxWithholdTrans.InventRefId          == ""
                   && taxWithholdTrans.TaxType              == codeType
            {
                if (taxWithholdTrans.LedgerVoucher != "")
                {
                    counter++;
                    voucherNumber = conPoke(voucherNumber,conLen(voucherNumber)+1,taxWithholdTrans.LedgerVoucher);
                }
            }
        }
        else
        {
            while select taxWithholdTrans
                group by LedgerVoucher
                where taxWithholdTrans.TaxWithholdRegNumber == _tanNumber
                   && taxWithholdTrans.TransDate            >= _fromDate
                   && taxWithholdTrans.TransDate            <= _toDate
                   && taxWithholdTrans.LineStatus           == ""
                   && taxWithholdTrans.TransactionReversal  == false
                   && taxWithholdTrans.InventRefId          == ""
                   && taxWithholdTrans.TaxType              == codeType
            {
                if (taxWithholdTrans.LedgerVoucher != "")
                {
                    counter++;
                    voucherNumber = conPoke(voucherNumber, conLen(voucherNumber) + 1, taxWithholdTrans.LedgerVoucher);
                }
            }
        }
        return [counter, voucherNumber];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStateCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the state code.
    /// </summary>
    /// <param name="_stateName">
    /// The state name.
    /// </param>
    /// <returns>
    /// The state code.
    /// </returns>
    public static StreetNum setStateCode(Description _stateName)
    {
        Description     stateName;
        ;

        stateName = strUpr(_stateName);
        if (stateName == #StateCode1)
        {
            return 1;
        }
        else if (stateName == #StateCode2)
        {
            return #2;
        }
        else if (stateName == #StateCode3)
        {
            return #3;
        }
        else if (stateName == #StateCode4)
        {
            return #4;
        }
        else if (stateName == #StateCode5)
        {
            return #5;
        }
        else if (stateName == #StateCode6)
        {
            return #6;
        }
        else if (stateName == #StateCode7)
        {
            return #7;
        }
        else if (stateName == #StateCode8)
        {
            return #8;
        }
        else if (stateName == #StateCode9)
        {
            return #9;
        }
        else if (stateName == #StateCode10)
        {
            return #10;
        }
        else if (stateName == #StateCode11)
        {
            return #11;
        }
        else if (stateName == #StateCode12)
        {
            return #12;
        }
        else if (stateName == #StateCode13)
        {
            return #13;
        }
        else if (subStr(stateName, 1, strLen(#StateCode14)) == #StateCode14)
        {
            return #14;
        }
        else if (stateName == #StateCode15)
        {
            return #15;
        }
        else if (stateName == #StateCode16)
        {
            return #16;
        }
        else if (stateName == #StateCode17)
        {
            return #17;
        }
        else if (stateName == #StateCode18)
        {
            return #18;
        }
        else if (stateName == #StateCode19)
        {
            return #19;
        }
        else if (stateName == #StateCode20)
        {
            return #20;
        }
        else if (stateName == #StateCode21)
        {
            return #21;
        }
        else if (stateName == #StateCode22)
        {
            return #22;
        }
        else if (stateName == #StateCode23)
        {
            return #23;
        }
        else if (stateName == #StateCode24)
        {
            return #24;
        }
        else if (stateName == #StateCode25)
        {
            return #25;
        }
        else if (stateName == #StateCode26)
        {
            return #26;
        }
        else if (stateName == #StateCode27)
        {
            return #27;
        }
        else if (stateName == #StateCode28)
        {
            return #28;
        }
        else if (stateName == #StateCode29)
        {
            return #29;
        }
        else if (stateName == #StateCode30)
        {
            return #30;
        }
        else if (stateName == #StateCode31)
        {
            return #31;
        }
        else if (stateName == #StateCode32)
        {
            return #32;
        }
        else if (stateName == #StateCode33)
        {
            return #33;
        }
        else if (stateName == #StateCode34)
        {
            return #34;
        }
        else if (stateName == #StateCode35)
        {
            return #35;
        }
        else
        {
            return #99;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeOfDeductorToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string of deductor type.
    /// </summary>
    /// <param name="_typeOfDeductor">
    /// The type of deductor.
    /// </param>
    /// <returns>
    /// The string of deductor type.
    /// </returns>
    static str typeOfDeductorToStr(TypeOfDeductor_IN _typeOfDeductor)
    {
        str typeOfDeductorStr;
        switch (_typeOfDeductor)
        {
            case TypeOfDeductor_IN::CentralGovernmentA :
            typeOfDeductorStr = 'A';
            break;

            case TypeOfDeductor_IN::StateGovernmentS :
            typeOfDeductorStr = 'A';
            break;

            case TypeOfDeductor_IN::StatutoryBodyD :
            typeOfDeductorStr = 'A';
            break;

            case TypeOfDeductor_IN::StatutoryBodyE :
            typeOfDeductorStr = 'E';
            break;

            case TypeOfDeductor_IN::AutonomousBodyG :
            typeOfDeductorStr = 'G';
            break;

            case TypeOfDeductor_IN::AutonomousBodyH :
            typeOfDeductorStr = 'H';
            break;

            case TypeOfDeductor_IN::LocalAuthorityL :
            typeOfDeductorStr = 'L';
            break;

            case TypeOfDeductor_IN::LocalAuthorityN :
            typeOfDeductorStr = 'N';
            break;

            case TypeOfDeductor_IN::CompanyK :
            typeOfDeductorStr = 'K';
            break;

            case TypeOfDeductor_IN::BranchDivisionOfCompanyM :
            typeOfDeductorStr = 'M';
            break;

            case TypeOfDeductor_IN::AssociationOfPersonP :
            typeOfDeductorStr = 'P';
            break;

            case TypeOfDeductor_IN::AssociationOfPersonT :
            typeOfDeductorStr = 'T';
            break;

            case TypeOfDeductor_IN::ArtificialJudicialPersonJ :
            typeOfDeductorStr = 'J';
            break;

            case TypeOfDeductor_IN::BodyOfIndividualsB :
            typeOfDeductorStr = 'B';
            break;

            case TypeOfDeductor_IN::IndividualHUFQ :
            typeOfDeductorStr = 'Q';
            break;

            case TypeOfDeductor_IN::FirmF :
            typeOfDeductorStr = 'F';
            break;
        }
        return typeOfDeductorStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wordWrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the word wrap.
    /// </summary>
    /// <param name="_stringLength">
    /// The string length.
    /// </param>
    /// <param name="_length">
    /// The line length.
    /// </param>
    /// <returns>
    /// The word wrap.
    /// </returns>
    public static container wordWrap(str _stringLength,
                                     int _length)
    {
        str    copyOfLine, lineWrapped, curLine, nl = '\n';
        int    lineCount;
        int    lastWord, posn, curLen;
        int    lastWord(str _string)
        {
            int f, total;
            f = strFind(_string, ' ', 1, strLen(_string));
            total = f;
            while (true)
            {
                _string = strDel(_string, 1, f);
                f = strFind(_string, ' ', 1, strLen(_string));
                if (f == 0)
                {
                    break;
                }
                total += f;
            }
            return total;
        }
        ;

        copyOfLine = strRTrim(strLTrim(_stringLength));
        do
        {
            if (lineCount > #5)
            {
                break;
            }
            if (strLen(copyOfLine) <= _length)
            {
                curLine = copyOfLine;
                curLen = strLen(curLine);
                while (curLen > 0)
                {
                    posn = strFind(curLine, nl, 1, curLen);
                    if (posn > 0)
                    {
                        copyOfLine = strDel(copyOfLine, 1, posn);
                        curLine = strDel(curLine, posn, curLen-posn+1);
                        if (strLen(lineWrapped) > 0)
                        {
                            lineWrapped += '^';
                        }
                        lineWrapped += curLine;
                        lineCount++;
                    }
                    else
                    {
                        break;
                    }

                    curLine = copyOfLine;
                    curLen = strLen(curLine);
                }

                if (strLen(lineWrapped) >0)
                {
                    lineWrapped += '^';
                }
                lineWrapped += curLine;
                lineCount++;
                return [lineWrapped, lineCount];
            }
            curLine = subStr(copyOfLine, 1, _length);
            copyOfLine = strDel(copyOfLine, 1, _length);
            posn = strFind(curLine, nl, 1, strLen(curLine));
            if (posn > 0)
            {
                copyOfLine = subStr(curLine, posn+1, _length-posn) + copyOfLine;
                curLine = strDel(curLine, posn, _length-posn+1);
            }
            else if (subStr(curLine, _length, 1) != ' ' && subStr(copyOfLine, 1, 1) != ' ')
            {
                lastWord = lastWord(curLine);
                if (lastWord > 0)
                {
                    copyOfLine = subStr(curLine, lastWord+1, _length-lastWord) + copyOfLine;
                    curLine = strDel(curLine, lastWord+1, _length-lastWord);
                }
            }

            copyOfLine = strLTrim(copyOfLine);
            if (strLen(lineWrapped) > 0)
            {
                lineWrapped += '^';
            }
            lineWrapped += curLine;
            lineCount++;
        }
        while (strLen(copyOfLine)>1);
        return [lineWrapped, lineCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the info to file.
    /// </summary>
    /// <param name="_data">
    /// The data to write.
    /// </param>
    public void writeToFile(str _data)
    {
        if (headerData == null)
        {
            headerData = TextStreamIo::constructForWrite();
        }

        headerData.write(_data);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>