<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashReceiptUpdateLV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the main class to create and update cash receipt transactions.
/// </summary>
public class CashReceiptUpdateLV extends RunBaseBatch implements BatchRetryable
{
    TransDate               fromDate;
    TransDate               toDate;
    CashReceiptTableRecId   batchNum;
    RCashTrans              rCashTrans;
    QueryRun                queryRun;
    Query                   query;
    QueryBuildDataSource    queryBuildDataSource;

    DialogField             fromDateField;
    DialogField             toDateField;
    DialogField             batchNumField;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        fromDate,
        toDate,
        batchNum
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup     dialogDate;
        DialogGroup     dialogCriteria;
        DialogRunbase   dialog;

        dialog = super();

        dialogDate      = dialog.addGroup("@GLS113273");
        fromDateField   = dialog.addFieldValue(extendedTypeStr(TransDate), fromDate, "@GLS113274");
        toDateField     = dialog.addFieldValue(extendedTypeStr(TransDate), toDate,   "@GLS113275");

        dialogCriteria  = dialog.addGroup("@SYS1046");
        batchNumField   = dialog.addFieldValue(extendedTypeStr(CashReceiptTableRecId), batchNum, "@GLS113276");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashReceiptNumber</Name>
				<Source><![CDATA[
    private int getCashReceiptNumber(str _cashReceiptsNum, str _fmt)
    {
        return str2int(strDel(_cashReceiptsNum, 1, strFind(_fmt, '#', 1, 20) - 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method extracts the dialog parameters and saves them in class variables.
    /// </summary>
    /// <returns>
    ///  Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        fromDate    = fromDateField.value();
        toDate      = toDateField.value();
        batchNum    = batchNumField.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(RCashTrans));
        queryBuildDataSource.addRange(fieldNum(RCashTrans, AccountNum));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The purpose of this dialog is to summarize the continuous cash receipts and create a cash receipt
    /// transaction for each continuous bunch. The receipts are gathered from cash transactions table (RCashTrans).
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        LvCashReceiptTable lvCashReceiptTabe;
        LvCashReceiptTrans lvCashReceiptTrans;
        int                num;

        query = queryRun.query();
        queryBuildDataSource = query.dataSourceTable(tableNum(RCashTrans));

        if (fromDate || toDate)
        {
            queryBuildDataSource.addRange(fieldNum(RCashTrans,TransDate)).value(queryRange(fromDate, toDate));
        }

        if (batchNum)
        {
            queryBuildDataSource.addRange(fieldNum(RCashTrans,LvCashReceiptTable)).value(queryValue(batchNum));
        }

        queryBuildDataSource.addSortField(fieldNum(RCashTrans,CashReceiptNumLV));

        try
        {
            ttsbegin;

            while (queryRun.next())
            {
                rCashTrans = queryRun.get(tableNum(RCashTrans));
                lvCashReceiptTabe = LvCashReceiptTable::find(rCashTrans.LvCashReceiptTable);
                num = this.getCashReceiptNumber(rCashTrans.CashReceiptNumLV, lvCashReceiptTabe.Format);

                if (!LvCashReceiptTrans::exist(rCashTrans.LvCashReceiptTable, num, num))
                {
                    if (!lvCashReceiptTrans.LvCashReceiptTable)
                    {
                        lvCashReceiptTrans.LvCashReceiptTable = lvCashReceiptTabe.RecId;
                        lvCashReceiptTrans.TransactionDate    = toDate;
                        lvCashReceiptTrans.FromNumber         = num;
                        lvCashReceiptTrans.ToNumber           = lvCashReceiptTrans.FromNumber;
                        lvCashReceiptTrans.AmountMST          = rCashTrans.AmountMST;
                        lvCashReceiptTrans.Type               = LvCashReceiptTransactionsType::Used;
                    }
                    else if (lvCashReceiptTrans.LvCashReceiptTable   != rCashTrans.LvCashReceiptTable
                          || lvCashReceiptTrans.ToNumber  != num - 1)
                    {
                        if (lvCashReceiptTrans.validateWrite())
                        {
                            lvCashReceiptTrans.insert();
                            info(strFmt("@GLS113277",
                                        lvCashReceiptTabe.BatchId,
                                        lvCashReceiptTrans.FromNumber,
                                        lvCashReceiptTrans.ToNumber));

                            lvCashReceiptTrans.LvCashReceiptTable = lvCashReceiptTabe.RecId;
                            lvCashReceiptTrans.TransactionDate    = toDate;
                            lvCashReceiptTrans.FromNumber         = num;
                            lvCashReceiptTrans.ToNumber           = lvCashReceiptTrans.FromNumber;
                            lvCashReceiptTrans.AmountMST          = rCashTrans.AmountMST;
                            lvCashReceiptTrans.Type               = LvCashReceiptTransactionsType::Used;
                        }
                    }
                    else
                    {
                        lvCashReceiptTrans.ToNumber = num;
                        lvCashReceiptTrans.AmountMST += rCashTrans.AmountMST;
                    }
                }
            }

            if (lvCashReceiptTrans.LvCashReceiptTable)
            {
                if (lvCashReceiptTrans.validateWrite())
                {
                    lvCashReceiptTrans.insert();
                    info(strFmt("@GLS113277",
                                lvCashReceiptTabe.BatchId,
                                lvCashReceiptTrans.FromNumber,
                                lvCashReceiptTrans.ToNumber));
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,queryCon] = packedClass;
                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initParmDefault();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dialog parameters.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object which calls this method.
    /// </param>
    /// <returns>
    ///  True if the toDate is greater than fromDate and toDate is not null.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (ret && ! toDate)
        {
            ret = checkFailed(strFmt("@SYS84378", "@GLS113275"));
        }

        if (ret && fromDate > toDate)
        {
            ret = checkFailed("@SYS103965");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS113278";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CashReceiptUpdateLV cashReceiptUpdate = new CashReceiptUpdateLV();

        if (cashReceiptUpdate.prompt())
        {
            cashReceiptUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>