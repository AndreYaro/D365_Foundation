<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceCFDIRetailStatementRefProcessor_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceCFDIRetailStatementRefProcessor_MX</c> class operates with incomplete CFDI UUID references for Retail Statement related EInvoices and transform them to <c>EInvoiceCFDIReference_MX</c> records.
/// </summary>
[RetailEInvoiceCFDIRefProcessorAttribute_MX(tableStr(RetailStatementJour))]
class RetailEInvoiceCFDIRetailStatementRefProcessor_MX extends RetailEInvoiceCFDIRefProcessor_MX
{
    RetailStatementJour statementJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCFDIStatementReference</Name>
				<Source><![CDATA[
    public void createCFDIStatementReference()
    {
        this.createCFDIReturnStatementReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEInvoiceJour</Name>
				<Source><![CDATA[
    protected void initFromEInvoiceJour(EInvoiceJour_MX _eInvoiceJour)
    {
        super(_eInvoiceJour);
        statementJour = eInvoiceJour.invoiceJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIReturnStatementReference</Name>
				<Source><![CDATA[
    protected void createCFDIReturnStatementReference()
    {
        if (eInvoiceJour.IsReturn)
        {
            RetailEInvoiceCFDIReference_MX reference;
 
            RetailTransactionSalesTrans salesTrans;
            RetailStoreTable store;
 
            RefRecId eInvoiceJourRecId = eInvoiceJour.RecId;
 
            EInvoiceCFDIReferenceType_MX insertReferenceType = EInvoiceCFDIReferenceType_MX::GoodsReturn;
 
            insert_recordset reference
                (Store, Terminal, TransactionId, ReferenceType, EInvoiceJour)
                select ReturnStore, ReturnTerminalId, ReturnTransactionId, insertReferenceType, eInvoiceJourRecId from salesTrans
                    group by ReturnStore, ReturnTerminalId, ReturnTransactionId
                    where salesTrans.statementId == statementJour.statementId
                        && salesTrans.store == statementJour.storeId
                        && salesTrans.returnTerminalId
                        && salesTrans.ReturnTransactionId;
 
            select firstOnly RecId from reference
                where reference.EInvoiceJour == eInvoiceJourRecId;
 
            if (reference)
            {
                info(strFmt("@RetailEInvoiceCFDI:EInvoiceForRetailStatementCreatedInStatusDraft", statementJour.statementId));
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::Draft;
                eInvoiceJour.CFDIMessageStatus = EInvoiceCFDIMessageStatus_MX::Blank;
                eInvoiceJour.update();
 
                update_recordSet reference
                    setting Channel = store.RecId
                        where reference.EInvoiceJour == eInvoiceJour.RecId
                    join RecId from store
                        where store.StoreNumber == reference.Store;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEInvoiceReturnReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills return references by information from EInvoice.
    /// </summary>
    /// <param name="_targetEInvoiceJourRecId">
    /// A reference to <c>EInvoiceJour_MX</c> to limit processed record set; optional.
    /// </param>
    /// <remarks>
    /// The UUID of original EINvoice can be absent on the stage of EInvoice creation for return.
    /// Moreover the retail statement can be abcent on the stage.
    /// The procedure searches statement and related EInvoice based on saved information about returnd transaction and update reference by UUID in case it is found
    /// </remarks>
    public static void updateEInvoiceReturnReferences(RefRecId _targetEInvoiceJourRecId = 0)
    {
        EInvoiceJour_MX eInvoice;
        EInvoiceJour_MX returnEInvoice;
        RetailStatementJour returnStatementJour;
        RetailTransactionTable returnTransction;
        RetailEInvoiceCFDIReference_MX reference;

        update_recordSet reference
            setting CFDIUUID = returnEInvoice.CFDIUUID
            where !reference.CFDIUUID
                && reference.ReferenceType == EInvoiceCFDIReferenceType_MX::GoodsReturn
            join CFDIUUID from returnEInvoice
                where returnEInvoice.CFDIUUID
            exists join returnStatementJour
                where returnStatementJour.RecId == returnEInvoice.RefRecId
                    && returnStatementJour.TableId == returnEInvoice.RefTableId
            exists join returnTransction
                where returnTransction.Channel == reference.Channel
                    && returnTransction.store == reference.Store
                    && returnTransction.terminal == reference.Terminal
                    && returnTransction.transactionId == reference.TransactionId
                    && returnTransction.statementId == returnStatementJour.statementId
            exists join eInvoice
                where eInvoice.RecId == reference.EInvoiceJour
                    && (eInvoice.RefTableId == tableNum(RetailStatementJour))
                    && eInvoice.CFDIStatus == EInvoiceCFDIStatus_MX::Draft
                    && (!_targetEInvoiceJourRecId || eInvoice.RecId == _targetEInvoiceJourRecId)
                    && eInvoice.IsReturn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>