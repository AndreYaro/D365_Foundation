<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListReportingEngine_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>EUSalesListReportingEngine_HU</c> extends the functionality of <c>EUSalesListReportingEngine</c>
///     class to support Hungarian specific requirements.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoHU)]
class EUSalesListReportingEngine_HU extends EUSalesListReportingEngine implements BatchRetryable
{
    DialogGroup                     dialogGroupCorrection;
    DialogField                     dialogCorrection;
    DialogField                     dialogChangeInPeriodicity;
    Correct                         correction;
    NoYes                           changeInPeriodicity;
    IntrastatParameters             intrastatParameters;
    AmountMST                       totalAmountTriangularIntermediate;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        correction,
        changeInPeriodicity
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected EUSalesListReportingHeader addHeader()
    {
        #DEFINE.NUMBERS('1234567890')
        EUSalesListReportingHeader  euSalesListReportingHeader;
        LogisticsPostalAddress      logisticsPostalAddress;
        HcmWorker                   hcmWorker;

        euSalesListReportingHeader = super();
        euSalesListReportingHeader.ChangeInPeriodicity_HU = changeInPeriodicity;
        euSalesListReportingHeader.Correction             = correction;
        euSalesListReportingHeader.CompanyBuildNum_HU     = intrastatParameters.CompanyBuildNum_HU;
        euSalesListReportingHeader.CompanyStairwayNum_HU  = intrastatParameters.CompanyStairwayNum_HU;
        euSalesListReportingHeader.CompanyFloorNum_HU     = intrastatParameters.CompanyFloorNum_HU;
        euSalesListReportingHeader.CompanyDoorNum_HU      = intrastatParameters.CompanyDoorNum_HU;

        if (intrastatParameters.FilledBy)
        {
            hcmWorker = HcmWorker::find(intrastatParameters.FilledBy);
            euSalesListReportingHeader.Phone = strKeep(hcmWorker.phone(), #NUMBERS);
            euSalesListReportingHeader.HcmWorkerRecId = hcmWorker.RecId;
        }

        if (intrastatParameters.LegalEntityRecId)
        {
            euSalesListReportingHeader.LegalEntity = intrastatParameters.LegalEntityRecId;
            euSalesListReportingHeader.euSalesListTaxCode = TaxCountryRegionParameters::find(DirParty::primaryPostalAddress(intrastatParameters.LegalEntityRecId).CountryRegionId).SalesTaxCode;
        }

        // Strip CoRegNum
        euSalesListReportingHeader.StrippedVATNum = TaxVATNumTable::stripVATNum(
            CompanyInfo::findRecId(euSalesListReportingHeader.LegalEntity).CoRegNum,
            euSalesListReportingHeader.euSalesListTaxCode);

        // Set reference to address. This is either explicitly defined in parameters, or defaulted from the legal entity for which we are reporting
        logisticsPostalAddress = intrastatParameters.Location ?
            LogisticsPostalAddress::findByLocation(intrastatParameters.Location) :
            CompanyInfo::findRecId(euSalesListReportingHeader.LegalEntity).postalAddress();

        euSalesListReportingHeader.LogisticsPostalAddressAlternate = logisticsPostalAddress.RecId;

        euSalesListReportingHeader.update();

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineToTotals</Name>
				<Source><![CDATA[
    protected void addLineToTotals(EUSalesListReportingLine _euSalesListReportingLine)
    {
        super(_euSalesListReportingLine);
        totalAmountTriangularIntermediate += _euSalesListReportingLine.TriangularIntermediateAmountMST_HU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGrandTotals</Name>
				<Source><![CDATA[
    protected void calculateGrandTotals(EUSalesListReportingHeader _euSalesListReportingHeader)
    {
        _euSalesListReportingHeader.TotalAmountTriangularIntermediate_HU = totalAmountTriangularIntermediate;

        super(_euSalesListReportingHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.curFormGroup(dialogGroupDate.formGroup());
        dialogChangeInPeriodicity = dialog.addFieldValue(enumStr(NoYes), changeInPeriodicity, "@GLS222908", "@GLS222909");

        dialogGroupCorrection = dialog.addGroup("@SYS13069");
        dialogCorrection = dialog.addFieldValue(extendedTypeStr(Correct), correction, "@SYS13069", "@SYS334906");

        this.setEnableChangeInPeriodicity();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        changeInPeriodicity = dialogChangeInPeriodicity.value();
        correction          = dialogCorrection.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyLine</Name>
				<Source><![CDATA[
    protected boolean isEmptyLine(EUSalesListReportingLine _euSalesListReportingLine)
    {
        boolean ret;

        ret = super(_euSalesListReportingLine) && _euSalesListReportingLine.TriangularIntermediateAmountMST_HU == 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        intrastatParameters = IntrastatParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingPeriodType_Modified</Name>
				<Source><![CDATA[
    public boolean reportingPeriodType_Modified(FormComboBoxControl _formControl)
    {
        boolean ret;

        ret = super(_formControl);

        this.setEnableChangeInPeriodicity();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnableChangeInPeriodicity</Name>
				<Source><![CDATA[
    private void setEnableChangeInPeriodicity()
    {
        if (dialogReportingPeriodType.value() == EUSalesListReportingPeriodType::Monthly)
        {
            dialogChangeInPeriodicity.enabled(true);
        }
        else
        {
            dialogChangeInPeriodicity.value(NoYes::No);
            dialogChangeInPeriodicity.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAmounts</Name>
				<Source><![CDATA[
    protected void updateLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesList                 euSalesList;

        euSalesList = queryRun.get(tableNum(EUSalesList));

        if (euSalesList.AmountMST && euSalesList.Listcode == Listcode::TriangularIntermediateRole_HU)
        {
            _euSalesListReportingLine.selectForUpdate(true);
            _euSalesListReportingLine.TriangularIntermediateAmountMST_HU += euSalesList.AmountMST;
        }

        super(_euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>