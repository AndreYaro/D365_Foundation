<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ISO7064</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ISO7064
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>verifyMOD1271_36</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified string has correct check digits or letters according to ISO 7064, MOD 1271-36.
    /// </summary>
    /// <param name="_string">
    /// The string to be validated.
    /// </param>
    /// <returns>
    /// true if the given string is correct; false, otherwise.
    /// </returns>
    /// <remarks>
    /// Algorithm is described in ISO/IEC 7064, MOD 1271-36 for alphanumeric strings with two check digits or letters.
    /// It can be used for ISO 13616 IBAN and ISO 11649 Creditor Reference.
    /// </remarks>
    public static boolean verifyMOD1271_36(str _string)
    {
        boolean ret   = true;
        boolean error = true;

        if (_string)
        {
            str sourceStr = strUpr(SysCompareText::suppressWhiteSpace(_string));
            int64   remainder;
            if (strNFind(sourceStr,'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',1,strLen(sourceStr)) == 0)
            {
                str     sourceNum;
                str     buf;
                int		i;

                sourceStr = subStr(sourceStr,5,strLen(sourceStr)) + subStr(sourceStr,1,4);
                int		lengthStr = strLen(sourceStr);

                for (i = 1; i <= lengthStr; i++)
                {
                    if (strFind(subStr(sourceStr,i,1),'0123456789',1,1))
                    {
                        buf = subStr(sourceStr,i,1);
                    }
                    else // convert letters into numerics
                    {
                        buf = int2str(char2num(subStr(sourceStr,i,1),1) - 55);
                    }

                    sourceNum = sourceNum + buf;
                }

                int64   num;
                if (System.Double::Parse(sourceNum) > 97)
                {
                    str digits    = subStr(sourceNum, strLen(sourceNum) - 1, strLen(sourceNum));
                    sourceNum   = subStr(sourceNum, 1, strLen(sourceNum) - 2);
                    while (strLen(sourceNum) > 2)        // calculating the check digits
                    {
                        buf       = subStr(sourceNum,1,9);
                        sourceNum   = subStr(sourceNum,10,strLen(sourceNum));

                        num       = str2int64(buf);
                        remainder = num mod 97;
                        sourceNum   = int642str(remainder) + sourceNum;
                    }
                    sourceNum     = sourceNum + digits;
                    remainder   = str2int64(sourceNum) mod 97;
                    error       = false;
                }
            }

            if (remainder != 1 || error)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>