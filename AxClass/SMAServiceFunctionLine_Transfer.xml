<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceFunctionLine_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmaServiceFunctionLine_Transfer extends SMAServiceFunctionLine implements BatchRetryable
{
    //table buffers
    SMAParameters           serviceParameter;
    SMAServiceOrderTable    serviceOrderTable;
    SMAServiceOrderLine     serviceOrderLine;
    SMAServiceOrderLine     line;

    //variables
    ProjJournalId           journalId_Hour;
    ProjJournalId           journalId_Fee;
    LedgerJournalId         journalId_Expense;
    InventJournalId         journalId_ItemConsum;

    JournalId               journalId;
    JournalDescription      journalName;
    str                     journalType;
    str                     journalAction;

    ProjJournalTable        projJournalTable;
    ProjJournalName         projJournalName;

    LedgerJournalTable      ledgerJournalTable;
    LedgerJournalName       ledgerJournalName;

    InventJournalTable      inventJournalTable;
    InventJournalName       inventJournalName;

    JournalVoucherNum       journalVoucherNum;
    Voucher                 ledgerVoucherCost;
    TransDate               oldTransDate;
    boolean                 postJournals;

    List                    listItemConsum;
    ListIterator            listIterator;

    boolean                 summeryJournal;
    private boolean         initDefaultDimensionAfterInventDim;

    ProjId                  projId;
    // <GIN>
    PSAProjTrans            projTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the given <c>SMATransactionType</c>.
    /// </summary>
    /// <param name = "_transType">
    /// The <c>SMATransactionType</c> value.
    /// </param>
    /// <returns>
    /// true if the <c>SMATransactionType</c> value is valid; otherwise, false.
    /// </returns>
    protected boolean checkJournalType(SMATransactionType _transType)
    {
        boolean ret = false;

        this.prefixSet("@SYS13894");        //Checking

        switch (_transType)
        {
            case SMATransactionType::Hour, SMATransactionType::Fee:
                ret = this.checkProjJournal(_transType);
                break;

            case SMATransactionType::Expense:
                ret = this.checkPostLedgerJournal(NoYes::No);
                break;

            case SMATransactionType::Item:
                ret = this.checkPostInventJournal(JournalCheckPostType::Check);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostInventJournal</Name>
				<Source><![CDATA[
    public boolean checkPostInventJournal(JournalCheckPostType _journalCheckPostType)
    {
        JournalCheckPost        journalCheckPost;
        boolean                 ret = true;

        journalCheckPost = InventJournalCheckPost::newJournalCheckPost(_journalCheckPostType, inventJournalTable);

        journalCheckPost.parmAutoBlock(true);
        journalCheckPost.runOperation();
        ret = journalCheckPost.parmCheckJournalResult();

        // service order line of type item are transferred to Invent journal anyway even though errors are found
        if (_journalCheckPostType != JournalCheckPostType::Check)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostLedgerJournal</Name>
				<Source><![CDATA[
    public boolean checkPostLedgerJournal(NoYes _post)
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        boolean                 ret = false;

        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable,_post);

        try
        {
            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
            ret = true;
        }
        catch (Exception::Error)
        {
            ret = checkFailed("@SYS24802");
        }

        ret = ret && !ledgerJournalCheckPost.parmPostingResults().errorInJournal();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjJournal</Name>
				<Source><![CDATA[
    public boolean checkProjJournal(SMATransactionType _transactionType)
    {
        ProjJournalCheckPost    projJournalCheckPost;
        JournalTableData        journalTableData;
        boolean                 ret = false;

        switch (_transactionType)
        {
            case SMATransactionType::Hour :
                projJournalCheckPost = ProjJournalCheckPost::newJournalCheckPost(true, false, JournalCheckPostType::Check, tableNum(ProjJournalTable), this.parmJournalId_Hour());
                break;

            case SMATransactionType::Fee :
                projJournalCheckPost = ProjJournalCheckPost::newJournalCheckPost(true, false, JournalCheckPostType::Check, tableNum(ProjJournalTable), this.parmJournalId_Fee());
                break;
        }

        if (projJournalCheckPost)
        {
            projJournalCheckPost.runOperation();
            journalTableData = JournalTableData::newTable(projJournalTable);

            // test to see if journal contains errors
            ret = journalTableData.journalErrorTransList().count() == 0;
            ret = ret && projJournalCheckPost.parmCheckJournalResult();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearJournalIds</Name>
				<Source><![CDATA[
    public void clearJournalIds()
    {
        this.parmJournalId_Expense('');
        this.parmJournalId_Fee('');
        this.parmJournalId_Hour('');
        this.parmJournalId_ItemConsum('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project journal line.
    /// </summary>
    /// <returns>true if created; otherwise, false.</returns>
    protected boolean createProjJournalLine()
    {
        switch (serviceOrderLine.TransactionType)
        {
            case SMATransactionType::Hour:
                return this.createProjJournalLine_Hour();

            case SMATransactionType::Expense:
                return this.createProjJournalLine_Expense();

            case SMATransactionType::Fee:
                return this.createProjJournalLine_Fee();

            case SMATransactionType::Item:
                return this.createProjJournalLine_ItemConsum();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(SMAServiceOrderLine _serviceLine)
    {
        this.parmServiceOrderLine(queryRun.get(tableNum(SMAServiceOrderLine)));

        if (!this.createProjJournalLine())
        {
            // Cancellation - journal line has not been created.
            throw error("@SYS72601");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournals</Name>
				<Source><![CDATA[
    protected void createJournals(SMATransactionType  _type)
    {
        this.writeMessage("@SYS79010", true);

        if (_type)
        {
            switch (_type)
            {
                case SMATransactionType::Hour :
                    projJournalName = ProjJournalName::find(serviceParameter.ProjJournalHour);

                    projJournalTable.clear();
                    projJournalTable.initValue();
                    projJournalTable.initFromProjJournalName(projJournalName);
                    projJournalTable.Description    = projJournalName.Description;
                    projJournalTable.StatusNameId   = projJournalName.StatusNameId;
                    projJournalTable.JournalType    = ProjJournalType::Hour;
                    projJournalTable.BlockUserId    = curUserId();
                    projJournalTable.insert();

                    this.parmJournalId_Hour(projJournalTable.JournalId);
                    this.parmSummeryJournal(projJournalTable.DetailSummary == DetailSummary::Summary);
                    break;

                case SMATransactionType::Expense :
                    ledgerJournalName = LedgerJournalName::find(serviceParameter.ProjJournalExpense);

                    ledgerJournalTable.clear();
                    ledgerJournalTable.initValue();
                    ledgerJournalTable.JournalNum  = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
                    ledgerJournalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);
                    ledgerJournalTable.Name        = ledgerJournalName.Name;
                    ledgerJournalTable.JournalType = LedgerJournalType::Cost;

                    journalVoucherNum              = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable));

                    if (ledgerJournalTable.validateWrite())
                    {
                        ledgerJournalTable.insert();
                    }

                    this.parmJournalId_Expense(ledgerJournalTable.JournalNum);
                    break;

                case SMATransactionType::Fee :
                    projJournalName = ProjJournalName::find(serviceParameter.ProjJournalFee);

                    projJournalTable.clear();
                    projJournalTable.initValue();
                    projJournalTable.initFromProjJournalName(projJournalName);
                    projJournalTable.Description    = projJournalName.Description;
                    projJournalTable.StatusNameId   = projJournalName.StatusNameId;
                    projJournalTable.JournalType    = ProjJournalType::Revenue;
                    projJournalTable.BlockUserId    = curUserId();
                    projJournalTable.insert();

                    this.parmJournalId_Fee(projJournalTable.JournalId);
                    this.parmSummeryJournal(projJournalTable.DetailSummary == DetailSummary::Summary);
                    break;

                case SMATransactionType::Item :

                    listItemConsum = new List(Types::Int64);

                    inventJournalName = InventJournalName::find(serviceParameter.ProjJournalMaterial);

                    inventJournalTable.clear();
                    inventJournalTable.initValue();
                    inventJournalTable.initFromInventJournalName(inventJournalName);
                    inventJournalTable.Description    = inventJournalName.Description;
                    inventJournalTable.JournalType    = InventJournalType::project;
                    inventJournalTable.BlockUserId    = curUserId();
                    inventJournalTable.insert();

                    this.parmJournalId_ItemConsum(inventJournalTable.JournalId);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjJournalLine_Expense</Name>
				<Source><![CDATA[
    protected boolean createProjJournalLine_Expense()
    {
        boolean                     ret                                = false;
        LedgerJournalTrans          ledgerJournalTransExpense          = null;
        LedgerJournalEngine_ProjectCost     ledgerJournalEngine;
        // <GIN>
        LedgerJournalTransTaxExtensionIN            ledgerJournalTransExpenseTaxExtensionIN         = null;
        ProjTable                                   projTable;
        SMAServiceOrderLineTaxExtension_IN          smaServiceOrderLineTaxExtension_IN;
        #ISOCountryRegionCodes;
        // </GIN>

        // Create Expense journal.
        this.writeMessage("@SYS97923", true);

        if (! this.parmJournalId_Expense())
        {
            this.createJournals(SMATransactionType::Expense);
        }

        ledgerJournalTransExpense.clear();
        // We set the currency cod before initValue() so that correct exchange rate is set.
        ledgerJournalTransExpense.CurrencyCode        = serviceOrderLine.CurrencyIdCost;
        ledgerJournalTransExpense.initValue();

        if (ledgerJournalName.NewVoucher != NewVoucher::OneVoucher || !ledgerVoucherCost)
        {
            ledgerVoucherCost                         = journalVoucherNum.getNew(false);
        }
        ledgerJournalTransExpense.Voucher             = ledgerVoucherCost;
        ledgerJournalTransExpense.JournalNum          = this.parmJournalId_Expense();
        ledgerJournalTransExpense.parmAccount(this.projId(), LedgerJournalACType::Project);
        ledgerJournalTransExpense.Invoice             = serviceOrderLine.InvoiceId;
        ledgerJournalTransExpense.TransactionType     = LedgerTransType::Project;
        ledgerJournalTransExpense.TransDate           = serviceOrderLine.DateExecution;
        ledgerJournalTransExpense.SettleVoucher       = SettlementType::None;
        ledgerJournalTransExpense.AcknowledgementDate = ledgerJournalTransExpense.TransDate;
        ledgerJournalTransExpense.Txt                 = serviceOrderLine.ProjTransTxt ? serviceOrderLine.ProjTransTxt : serviceOrderLine.Description;
        ledgerJournalTransExpense.AmountCurDebit      = CurrencyExchange::round(serviceOrderLine.Qty * serviceOrderLine.ProjCostPrice, serviceOrderLine.CurrencyIdCost);
        ledgerJournalTransExpense.AmountCurCredit     = 0.0;
        ledgerJournalTransExpense.OffsetLedgerDimension = serviceOrderLine.LedgerDimension;
        ledgerJournalTransExpense.OffsetAccountType   = serviceOrderLine.OffsetAccountTypeExpense;

        // Set up Expense Sales / Item tax group
        ledgerJournalTransExpense.TaxGroup          = serviceOrderLine.TaxGroupExpense;
        ledgerJournalTransExpense.TaxItemGroup      = serviceOrderLine.TaxItemGroupExpense;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            projTable                                       = ProjTable::find(this.projId());
            smaServiceOrderLineTaxExtension_IN              =   serviceOrderLine.smaServiceOrderLineTaxExtension_IN();

            ledgerJournalTransExpenseTaxExtensionIN         = ledgerJournalTransExpense.ledgerJournalTransTaxExtensionIN();
            ledgerJournalTransExpenseTaxExtensionIN.AssessableValueTransactionCurrency    = smaServiceOrderLineTaxExtension_IN.AssessableValueTransactionCurrency;
            ledgerJournalTransExpenseTaxExtensionIN.MaximumRetailPrice = smaServiceOrderLineTaxExtension_IN.MaximumRetailPrice;

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                ledgerJournalTransExpenseTaxExtensionIN.tcsGroup       = smaServiceOrderLineTaxExtension_IN.tcsGroup;
                ledgerJournalTransExpenseTaxExtensionIN.tdsGroup       = smaServiceOrderLineTaxExtension_IN.tdsGroup;
            }

            ledgerJournalTransExpenseTaxExtensionIN.ServiceEventGroup           = SMAAgreementTable::find(serviceOrderTable.AgreementId).ServiceEventGroup_IN;
            ledgerJournalTransExpense.packledgerJournalTransTaxExtensionIN(ledgerJournalTransExpenseTaxExtensionIN);
        }
        // </GIN>

        if (!ledgerJournalTransExpense.parmOffsetLedgerDimension())
        {
            // Missing setup of an offset account for the expense.
            throw error("@SYS92416");
        }

        // if offset account is vendor
        if (ledgerJournalTransExpense.OffsetAccountType == LedgerJournalACType::Vend)
        {
            ledgerJournalTransExpense.Approved = true;
            ledgerJournalTransExpense.Approver = HcmWorker::userId2Worker(curUserId());
        }

        if (LedgerParameters::isChineseVoucher_CN())
        {
            ledgerJournalTransExpense.LedgerVoucherType_CN = LedgerVoucherType_CN::findDefault().RecId;
            this.setVoucher_CN(ledgerJournalTransExpense);
        }

        // Do the insert of the base LedgerJournalTrans table first as we need the RecId to
        // save the project specific LedgerJournalTrans_Project table.
        if (ledgerJournalTransExpense.validateWrite())
        {
            ledgerJournalTransExpense.insert();

            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(serviceOrderLine, ledgerJournalTransExpense);
            }
            // </GTE>
        }

        // Now build the LedgerJournalTrans_Project record.
        LedgerJournalTrans_Project ledgerJournalTransExpenseProject = this.initLedgerJournalTrans_ProjectExpense(ledgerJournalTransExpense);

        // Recalculate Cash Disc according to Offset Account set up
        ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::Cost);
        ledgerJournalEngine.newJournalActive(ledgerJournalTable);
        ledgerJournalEngine.initDefaultDimension(ledgerJournalTransExpense);
        // <GIN>
        // Commented the code as it is not standard functionality
        // ledgerJournalEngine.offsetAccountModified(ledgerJournalTransExpense, ledgerJournalTransExpenseProject);
        // ledgerJournalEngine.initFromOffsetAccount(ledgerJournalTransExpense, ledgerJournalTransExpenseProject);

        // ledgerJournalEngine.offsetAcctModified(ledgerJournalTransExpense, ledgerJournalTransExpenseProject);
        // </GIN>
        ledgerJournalEngine.cashDiscCodeModified(ledgerJournalTransExpense);

        ledgerJournalTransExpense.DefaultDimension = serviceOrderLine.DefaultDimension;

        if (ledgerJournalTransExpense.validateWrite())
        {
            ledgerJournalTransExpense.update();
        }

        // This record will not validate OK if the LEdgerJournalTrans did not insert correctly
        // as we use the recid as a key field on this record.
        if (ledgerJournalTransExpenseProject.validateWrite())
        {
            ledgerJournalTransExpenseProject.insert();
            this.updateServiceOrderLine();
            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(serviceOrderLine, ledgerJournalTransExpenseProject);
            }
            // </GTE>
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans_ProjectExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>LedgerJournalTrans_Project</c> expense record instance.
    /// </summary>
    /// <param name="_ledgerJournalTransExpense">
    /// A <c>LedgerJournalTrans</c> record instance.
    /// </param>
    /// <returns>
    /// The initialized <c>LedgerJournalTrans_Project</c> expense record instance.
    /// </returns>
    protected LedgerJournalTrans_Project initLedgerJournalTrans_ProjectExpense(LedgerJournalTrans _ledgerJournalTransExpense)
    {
        LedgerJournalTrans_Project ledgerJournalTransExpenseProject = null;

        ledgerJournalTransExpenseProject.ProjTransDate   = serviceOrderLine.DateExecution;
        ledgerJournalTransExpenseProject.RefRecId        = _ledgerJournalTransExpense.RecId;
        ledgerJournalTransExpenseProject.ProjId          = this.projId();
        ledgerJournalTransExpenseProject.CategoryId      = serviceOrderLine.ProjCategoryId;
        ledgerJournalTransExpenseProject.ActivityNumber  = serviceOrderLine.ActivityNumber;
        ledgerJournalTransExpenseProject.TransId         = serviceOrderLine.ProjTransId;
        ledgerJournalTransExpenseProject.Qty             = serviceOrderLine.Qty;
        ledgerJournalTransExpenseProject.SalesCurrencyId = serviceOrderLine.ProjCurrencyCode;
        ledgerJournalTransExpenseProject.SalesPrice      = serviceOrderLine.ProjSalesPrice;
        ledgerJournalTransExpenseProject.CostPrice       = serviceOrderLine.ProjCostPrice;
        ledgerJournalTransExpenseProject.Resource        = ResourceFacade::findOrCreateByWorker(serviceOrderLine.Worker);

        if (serviceOrderLine.ProjLinePropertyId)
        {
            ledgerJournalTransExpenseProject.LinePropertyId = serviceOrderLine.ProjLinePropertyId;
        }

        // Set up Project Sales / item tax group
        ledgerJournalTransExpenseProject.TaxGroupSales     = serviceOrderLine.ProjTaxGroup;
        ledgerJournalTransExpenseProject.TaxItemGroupSales = serviceOrderLine.ProjTaxItemGroup;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            LedgerJournalTrans_ProjectTaxExtensionIN ledgerJournalTrans_ProjTaxExtension;

            ledgerJournalTrans_ProjTaxExtension.AssessableValueTransactionCurrency = serviceOrderLine.smaServiceOrderLineTaxExtension_IN().AssessableValueTransactionCurrency;
            ledgerJournalTransExpenseProject.packLedgerJournalTrans_Project_IN(ledgerJournalTrans_ProjTaxExtension);
        }
        // </GIN>

        return ledgerJournalTransExpenseProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjJournalLine_Fee</Name>
				<Source><![CDATA[
    protected boolean createProjJournalLine_Fee()
    {
        boolean                 ret = false;

        // Create fee journal.
        this.writeMessage("@SYS79008", true);

        if (! this.parmJournalId_Fee())
        {
            this.createJournals(SMATransactionType::Fee);
        }

        ProjJournalTrans projJournalTransFee = this.initProjJournalTrans_Fee();

        if (projJournalTransFee.validateWrite())
        {
            projJournalTransFee.insert();

            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(serviceOrderLine, projJournalTransFee);
            }
            // </GTE>

            this.updateServiceOrderLine();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjJournalTrans_Fee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjJournalTrans</c> fee record instance.
    /// </summary>
    /// <returns>
    /// The initialized <c>ProjJournalTrans</c> fee record instance.
    /// </returns>
    protected ProjJournalTrans initProjJournalTrans_Fee()
    {
        ProjJournalTrans projJournalTransFee = null;

        projJournalTransFee.clear();
        projJournalTransFee.initValue();

        projJournalTransFee.JournalId       = this.parmJournalId_Fee();
        projJournalTransFee.TransId         = serviceOrderLine.ProjTransId;
        projJournalTransFee.ProjTransDate   = serviceOrderLine.DateExecution;
        projJournalTransFee.Resource        = ResourceFacade::findOrCreateByWorker(serviceOrderLine.Worker);
        projJournalTransFee.setResourceCategory();

        JournalTableData journalTableData = JournalTableData::newTable(this.parmProjJournalTable());
        ProjJournalTransData journalTransData = new ProjJournalTransData(projJournalTransFee, journalTableData);

        projJournalTransFee.setTransDate();
        projJournalTransFee.setPeriodDate();

        projJournalTransFee.initFromProjJournalTable(this.parmProjJournalTable());

        projJournalTransFee.ProjId          = this.projId();
        ProjTable projTable                 = ProjTable::find(this.projId());

        projJournalTransFee.initFromProjTable(projTable);

        projJournalTransFee.ActivityNumber  = serviceOrderLine.ActivityNumber;
        projJournalTransFee.CategoryId      = serviceOrderLine.ProjCategoryId;

        if (serviceOrderLine.ProjLinePropertyId)
        {
            projJournalTransFee.LinePropertyId  = serviceOrderLine.ProjLinePropertyId;
        }

        // set up Item tax group
        if (serviceOrderLine.ProjTaxItemGroup)
        {
            projJournalTransFee.TaxItemGroupId  = serviceOrderLine.ProjTaxItemGroup;
        }
        else
        {
            projJournalTransFee.TaxItemGroupId  = ProjCategory::find(projJournalTransFee.CategoryId).TaxItemGroupId;
        }

        // Set up Sales tax group
        if (serviceOrderLine.ProjTaxGroup)
        {
            projJournalTransFee.TaxGroupId      = serviceOrderLine.ProjTaxGroup;
        }
        else
        {
            projJournalTransFee.TaxGroupId      = projTable.TaxGroupId;
        }

        projJournalTransFee.CurrencyId          = serviceOrderLine.ProjCurrencyCode;
        projJournalTransFee.SalesPrice          = serviceOrderLine.ProjSalesPrice;
        projJournalTransFee.CostPrice           = serviceOrderLine.ProjCostPrice;
        projJournalTransFee.Qty                 = serviceOrderLine.Qty;
        projJournalTransFee.Txt                 = serviceOrderLine.ProjTransTxt ? serviceOrderLine.ProjTransTxt : serviceOrderLine.Description;
        projJournalTransFee.ActivityNumber      = serviceOrderLine.ActivityNumber;
        projJournalTransFee.DefaultDimension    = projJournalTransFee.copyDimension(serviceOrderLine.DefaultDimension);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            ProjJournalTransTaxExtensionIN     projJournalTransFeeTaxExtensionIN = null;
            SMAServiceOrderLineTaxExtension_IN smaServiceOrderLineTaxExtension_IN;
            #ISOCountryRegionCodes;

            projJournalTransFeeTaxExtensionIN                                       = projJournalTransFee.projJournalTransTaxExtensionIN();
            smaServiceOrderLineTaxExtension_IN                                      = serviceOrderLine.smaServiceOrderLineTaxExtension_IN();

            projJournalTransFeeTaxExtensionIN.AssessableValueTransactionCurrency    = smaServiceOrderLineTaxExtension_IN.AssessableValueTransactionCurrency;
            projJournalTransFeeTaxExtensionIN.MaximumRetailPrice                    = smaServiceOrderLineTaxExtension_IN.MaximumRetailPrice;

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                projJournalTransFeeTaxExtensionIN.tcsGroup                  = smaServiceOrderLineTaxExtension_IN.tcsGroup;
                projJournalTransFeeTaxExtensionIN.tdsGroup                  = smaServiceOrderLineTaxExtension_IN.tdsGroup;
            }
            projJournalTransFeeTaxExtensionIN.ServiceEventGroup             = SMAAgreementTable::find(serviceOrderTable.AgreementId).ServiceEventGroup_IN;
            projJournalTransFee.packProjJournalTrans_IN(projJournalTransFeeTaxExtensionIN);
        }
        // </GIN>

        if (journalTransData.findVoucher())
        {
            projJournalTransFee.Voucher        = journalTransData.findVoucher();
        }
        else
        {
            if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
            {
                journalTransData.initVoucher('', false, false);
            }
        }

        return projJournalTransFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjJournalLine_Hour</Name>
				<Source><![CDATA[
    protected boolean createProjJournalLine_Hour()
    {
        boolean                 ret = false;

        //    Create hour journal.
        setPrefix("@SYS79010");

        if (! this.parmJournalId_Hour())
        {
            this.createJournals(SMATransactionType::Hour);
        }

        ProjJournalTrans projJournalTransHour = this.initProjJournalTrans_Hour();

        if (projJournalTransHour.validateWrite())
        {
            projJournalTransHour.insert();

            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(serviceOrderLine, projJournalTransHour);
            }
            // </GTE>

            this.updateServiceOrderLine();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjJournalTrans_Hour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjJournalTrans</c> hour record instance.
    /// </summary>
    /// <returns>
    /// The initialized <c>ProjJournalTrans</c> hour record instance.
    /// </returns>
    protected ProjJournalTrans initProjJournalTrans_Hour()
    {
        ProjJournalTrans projJournalTransHour = null;

        projJournalTransHour.clear();
        projJournalTransHour.initValue();

        projJournalTransHour.JournalId          = this.parmJournalId_Hour();
        projJournalTransHour.TransId            = serviceOrderLine.ProjTransId;
        projJournalTransHour.ProjTransDate      = serviceOrderLine.DateExecution;
        projJournalTransHour.Resource           = ResourceFacade::findOrCreateByWorker(serviceOrderLine.Worker);
        projJournalTransHour.setResourceCategory();

        JournalTableData journalTableData = JournalTableData::newTable(this.parmProjJournalTable());
        ProjJournalTransData journalTransData = new ProjJournalTransData(projJournalTransHour, journalTableData);

        projJournalTransHour.setTransDate();
        projJournalTransHour.setPeriodDate();

        projJournalTransHour.initFromProjJournalTable(this.parmProjJournalTable());

        projJournalTransHour.ProjId             = this.projId();
        ProjTable projTable                     = ProjTable::find(projJournalTransHour.ProjId);

        projJournalTransHour.initFromProjTable(projTable);

        projJournalTransHour.ActivityNumber     = serviceOrderLine.ActivityNumber;
        projJournalTransHour.CategoryId         = serviceOrderLine.ProjCategoryId;

        if (serviceOrderLine.ProjLinePropertyId)
        {
            projJournalTransHour.LinePropertyId = serviceOrderLine.ProjLinePropertyId;
        }

        projJournalTransHour.Qty                = serviceOrderLine.Qty;
        projJournalTransHour.Txt                = serviceOrderLine.ProjTransTxt ? serviceOrderLine.ProjTransTxt : serviceOrderLine.Description;

        // Set up Item tax group
        if (serviceOrderLine.ProjTaxItemGroup)
        {
            projJournalTransHour.TaxItemGroupId  = serviceOrderLine.ProjTaxItemGroup;
        }
        else
        {
            projJournalTransHour.TaxItemGroupId  = ProjCategory::find(projJournalTransHour.CategoryId).TaxItemGroupId;
        }

        // Set up Sales tax group
        if (serviceOrderLine.ProjTaxGroup)
        {
            projJournalTransHour.TaxGroupId      = serviceOrderLine.ProjTaxGroup;
        }
        else
        {
            projJournalTransHour.TaxGroupId      = projTable.TaxGroupId;
        }

        projJournalTransHour.CurrencyId         = serviceOrderLine.ProjCurrencyCode;
        projJournalTransHour.CostPrice          = serviceOrderLine.ProjCostPrice;
        projJournalTransHour.SalesPrice         = serviceOrderLine.ProjSalesPrice;
        projJournalTransHour.DefaultDimension   = serviceOrderLine.DefaultDimension;
        projJournalTransHour.FromTime           = serviceOrderLine.TimeSheetStartTime;
        projJournalTransHour.ToTime             = serviceOrderLine.TimeSheetEndTime;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            ProjJournalTransTaxExtensionIN     projJournalTransHourTaxExtensionIN = null;
            SMAServiceOrderLineTaxExtension_IN smaServiceOrderLineTaxExtension_IN;
            #ISOCountryRegionCodes;

            projJournalTransHourTaxExtensionIN  = projJournalTransHour.projJournalTransTaxExtensionIN();
            smaServiceOrderLineTaxExtension_IN  = serviceOrderLine.smaServiceOrderLineTaxExtension_IN();

            projJournalTransHourTaxExtensionIN.AssessableValueTransactionCurrency   = smaServiceOrderLineTaxExtension_IN.AssessableValueTransactionCurrency;
            projJournalTransHourTaxExtensionIN.MaximumRetailPrice                   = smaServiceOrderLineTaxExtension_IN.MaximumRetailPrice;
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                projJournalTransHourTaxExtensionIN.tdsGroup                  = smaServiceOrderLineTaxExtension_IN.tdsGroup;
                projJournalTransHourTaxExtensionIN.tcsGroup                  = smaServiceOrderLineTaxExtension_IN.tcsGroup;
            }
            projJournalTransHourTaxExtensionIN.ServiceEventGroup = SMAAgreementTable::find(serviceOrderTable.AgreementId).ServiceEventGroup_IN;
            projJournalTransHour.packProjJournalTrans_IN(projJournalTransHourTaxExtensionIN);
        }
        // </GIN>

        if (journalTransData.findVoucher())
        {
            projJournalTransHour.Voucher        = journalTransData.findVoucher();
        }
        else
        {
            if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
            {
                journalTransData.initVoucher('', false, false);
            }
        }

        return projJournalTransHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjJournalLine_ItemConsum</Name>
				<Source><![CDATA[
    protected boolean createProjJournalLine_ItemConsum()
    {
        // Item Consumption
        boolean                 ret = false;

        // Create Item consumption journal
        setPrefix("@SYS97922");

        InventJournalTrans inventJournalTransItem = this.initInventJournalTrans_ItemConsumption();

        if (inventJournalTransItem.validateWrite())
        {
            inventJournalTransItem.insert();

            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(serviceOrderLine, inventJournalTransItem);
            }
            // </GTE>

            this.updateServiceOrderLine();

            listItemConsum.addEnd(serviceOrderLine.RecId);

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventJournalTrans_ItemConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>InventJournalTrans</c> item consumption record instance.
    /// </summary>
    /// <returns>
    /// The initialized <c>ProjJournalTrans</c> item consumption record instance.
    /// </returns>
    protected InventJournalTrans initInventJournalTrans_ItemConsumption()
    {
        InventJournalTrans inventJournalTransItem = null;
        
        inventJournalTransItem.clear();
        inventJournalTransItem.initValue();

        if (! this.parmJournalId_ItemConsum())
        {
            this.createJournals(SMATransactionType::Item);
        }

        inventJournalTransItem.ProjTransId          = serviceOrderLine.ProjTransId;
        inventJournalTransItem.JournalId            = this.parmJournalId_ItemConsum();
        inventJournalTransItem.JournalType          = InventJournalType::project;
        inventJournalTransItem.ProjId               = serviceOrderLine.ProjId;
        inventJournalTransItem.ActivityNumber       = serviceOrderLine.ActivityNumber;
        inventJournalTransItem.ProjCategoryId       = serviceOrderLine.ProjCategoryId;
        inventJournalTransItem.ProjLinePropertyId   = serviceOrderLine.ProjLinePropertyId;
        inventJournalTransItem.Qty                  = serviceOrderLine.Qty;
        inventJournalTransItem.ProjUnitID           = serviceOrderLine.Unit;
        inventJournalTransItem.Worker               = serviceOrderLine.Worker;    
        
        if (!initDefaultDimensionAfterInventDim)
        {
            inventJournalTransItem.DefaultDimension = inventJournalTransItem.copyDimension(serviceOrderLine.DefaultDimension);
        }

        inventJournalTransItem.ItemId               = serviceOrderLine.ItemId;
        inventJournalTransItem.setInventDimId(serviceOrderLine.InventDimId);        

        if (initDefaultDimensionAfterInventDim)
        {
            inventJournalTransItem.DefaultDimension = inventJournalTransItem.copyDimension(serviceOrderLine.DefaultDimension);
        }

        inventJournalTransItem.ProjTaxGroupId       = serviceOrderLine.ProjTaxGroup;
        inventJournalTransItem.ProjTaxItemGroupId   = serviceOrderLine.ProjTaxItemGroup;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            InventJournalTransTaxExtensionIN    inventJournalTransItemTaxExtensionIN = null;
            SMAServiceOrderLineTaxExtension_IN  smaServiceOrderLineTaxExtension_IN;
            #ISOCountryRegionCodes;

            smaServiceOrderLineTaxExtension_IN                                  = serviceOrderLine.smaServiceOrderLineTaxExtension_IN();

            inventJournalTransItemTaxExtensionIN                                    = inventJournalTransItem.inventJournalTransTaxExtensionIN();

            inventJournalTransItemTaxExtensionIN.AssessableValueTransactionCurrency = smaServiceOrderLineTaxExtension_IN.AssessableValueTransactionCurrency;
            inventJournalTransItemTaxExtensionIN.MaximumRetailPrice                 = smaServiceOrderLineTaxExtension_IN.MaximumRetailPrice;

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                inventJournalTransItemTaxExtensionIN.tdsGroup                   = smaServiceOrderLineTaxExtension_IN.tdsGroup;
                inventJournalTransItemTaxExtensionIN.tcsGroup                   = smaServiceOrderLineTaxExtension_IN.tcsGroup;
            }

            inventJournalTransItemTaxExtensionIN.ServiceEventGroup              = SMAAgreementTable::find(serviceOrderTable.AgreementId).ServiceEventGroup_IN;
            inventJournalTransItem.packInventJournalTrans_IN(inventJournalTransItemTaxExtensionIN);
        }
        // </GIN>

        inventJournalTransItem.TransDate            = serviceOrderLine.DateExecution;
        inventJournalTransItem.ProjSalesCurrencyId  = serviceOrderLine.ProjCurrencyCode;
        inventJournalTransItem.ProjSalesPrice       = serviceOrderLine.ProjSalesPrice;
        inventJournalTransItem.CostPrice            = serviceOrderLine.ProjCostPrice;
        inventJournalTransItem.CostAmount           = inventJournalTransItem.calcCostAmount();

        return inventJournalTransItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextServiceOrderLine</Name>
				<Source><![CDATA[
    protected void getNextServiceOrderLine()
    {
        line = null;

        if (queryRun.next())
        {
            line = queryRun.get(tableNum(SMAServiceOrderLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStagesAllowed</Name>
				<Source><![CDATA[
    public str getStagesAllowed()
    {
        #define.separator("\,")

        SMAStageTable   stageTable;
        str             tmpStageStr = '';

        while select StageId, StageCanTransfer from stageTable order by StageId where stageTable.StageCanTransfer == NoYes::Yes
        {
            if (tmpStageStr)
            {
                tmpStageStr = tmpStageStr + #separator;
            }

            tmpStageStr = tmpStageStr + stageTable.StageId;
        }

        return tmpStageStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        // turn on/off posting of journals
        postJournals = true;

        initDefaultDimensionAfterInventDim = SMAServiceOrderPostInitDefaultDimensionAfterInventDimFlight::instance().isEnabled() &&
            InventParameters::find().MultiSiteDimensionLink == InventMultiSiteDimensionLink::Active;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId_Expense</Name>
				<Source><![CDATA[
    public LedgerJournalId parmJournalId_Expense(LedgerJournalId _journalId_Expense = journalId_Expense)
    {
        journalId_Expense = _journalId_Expense;
        return journalId_Expense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId_Fee</Name>
				<Source><![CDATA[
    public ProjJournalId parmJournalId_Fee(ProjJournalId _journalId_Fee = journalId_Fee)
    {
        journalId_Fee = _journalId_Fee;
        return journalId_Fee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId_Hour</Name>
				<Source><![CDATA[
    public ProjJournalId parmJournalId_Hour(ProjJournalId _journalId_Hour = journalId_Hour)
    {
        journalId_Hour = _journalId_Hour;
        return journalId_Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId_ItemConsum</Name>
				<Source><![CDATA[
    public InventJournalId parmJournalId_ItemConsum(InventJournalId _journalId_ItemConsum = journalId_ItemConsum)
    {
        journalId_ItemConsum = _journalId_ItemConsum;
        return journalId_ItemConsum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjJournalTable</Name>
				<Source><![CDATA[
    public ProjJournalTable parmProjJournalTable(ProjJournalTable _projJournalTable = projJournalTable)
    {
        projJournalTable = _projJournalTable;
        return projJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceOrderLine</Name>
				<Source><![CDATA[
    public SMAServiceOrderLine parmServiceOrderLine(SMAServiceOrderLine _serviceOrderLine = serviceOrderLine)
    {
        serviceOrderLine = _serviceOrderLine;
        return serviceOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummeryJournal</Name>
				<Source><![CDATA[
    public boolean parmSummeryJournal(boolean _summeryJournal = summeryJournal)
    {
        summeryJournal = _summeryJournal;
        return summeryJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingReady</Name>
				<Source><![CDATA[
    private boolean postingReady(JournalId  _journalId)
    {
        boolean             ret = true;

        if (ProjJournalTable::find(_journalId).StatusNameId)
        {
            projJournalTable = ProjJournalTable::find(_journalId);
            ret = ProjJournalStatusLine::find(projJournalTable.StatusNameId,projJournalTable.Status).PostingReady;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournals</Name>
				<Source><![CDATA[
    protected void postJournals()
    {
        boolean     ret = false;

        // Checking and posting journals
        this.writeMessage("@SYS92441",true);

        if (this.parmJournalId_Hour() && this.postingReady(this.parmJournalId_Hour()))
        {
            ret = this.postJournalTransType(SMATransactionType::Hour);
        }

        if (this.parmJournalId_Fee())
        {
            ret = this.postJournalTransType(SMATransactionType::Fee);
        }

        if (this.parmJournalId_Expense())
        {
            ret = this.postJournalTransType(SMATransactionType::Expense);
        }

        if (this.parmJournalId_ItemConsum())
        {
            ret = this.postJournalTransType(SMATransactionType::Item);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareJournalTransTypeForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the line for posting.
    /// </summary>
    /// <param name = "_transType">The transaction type.</param>
    /// <returns>The journal id.</returns>
    protected ProjJournalId prepareJournalTransTypeForPosting(SMATransactionType _transType)
    {
        ProjJournalId projJournalId;

        switch (_transType)
        {
            case SMATransactionType::Hour:
                projJournalId = this.parmJournalId_Hour();
                this.prefixJournalType("@SYS59154");  // Hour journal
                this.prefixJournalName(ProjJournalTable::find(journalId).Description);
                break;

            case SMATransactionType::Expense:
                projJournalId = this.parmJournalId_Expense();
                this.prefixJournalType("@SYS24042");    // Ledger journal
                this.prefixJournalName(LedgerJournalTable::find(journalId).Name);
                ledgerJournalTable = LedgerJournalTable::find(projJournalId);
                break;

            case SMATransactionType::Item:
                projJournalId = this.parmJournalId_ItemConsum();
                this.prefixJournalType("@SYS81925");     // Item journal
                this.prefixJournalName(InventJournalTable::name(journalId));
                inventJournalTable = InventJournalTable::find(projJournalId);
                break;

            case SMATransactionType::Fee:
                projJournalId = this.parmJournalId_Fee();
                this.prefixJournalType("@SYS73715");    // Fee journal
                this.prefixJournalName(ProjJournalTable::find(journalId).Description);
                break;
        }

        return projJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalTransType</Name>
				<Source><![CDATA[
    protected boolean postJournalTransType(SMATransactionType _transType)
    {
        boolean             ret = false;
        ProjJournalId       projJournalId = this.prepareJournalTransTypeForPosting(_transType);

        if (!projJournalId)
        {
            throw error("@SYS26538");
        }

        this.prefixJournalId(projJournalId);

        ret = this.checkJournalType(_transType);

        if (ret)
        {
            this.postJournalType(_transType, projJournalId);
        }
        else
        {
            if (_transType != SMATransactionType::Item)
            {
                throw error(strFmt("@SYS30708", projJournalId));
            }

            ret = checkFailed(strFmt("@SYS99888", projJournalId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the journal with the given <c>ProjJournalId</c> based on the passed <c>SMATransactionType</c>.
    /// </summary>
    /// <param name = "_transType">
    /// The <c>SMATransactionType</c> of the journal.
    /// </param>
    /// <param name = "_projJournalId">
    /// The <c>ProjJournalId</c> of the journal to be posted
    /// </param>
    /// <returns>
    /// true, if the journal was posted successfully; otherwise, false.
    /// </returns>
    protected boolean postJournalType(SMATransactionType _transType, ProjJournalId _projJournalId)
    {
        boolean ret = false;

        this.prefixSet("@SYS5943");     // Posting
        switch (_transType)
        {
            case SMATransactionType::Hour, SMATransactionType::Fee:
                ret = this.postProjJournal(_projJournalId);
                break;

            case SMATransactionType::Expense:
                ret = this.checkPostLedgerJournal(NoYes::Yes);
                break;

            case SMATransactionType::Item:
                ret = this.checkPostInventJournal(JournalCheckPostType::Post);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjJournal</Name>
				<Source><![CDATA[
    private boolean postProjJournal(JournalId _journalId)
    {
        #OCCRetryCount
        ProjJournalCheckPost projJournalCheckPost;

        try
        {
            ttsbegin;

            projJournalCheckPost = ProjJournalCheckPost::newJournalCheckPost(true,
                                                                             true,
                                                                             JournalCheckPostType::Post,
                                                                             tableNum(ProjJournalTable),
                                                                             _journalId);
            projJournalCheckPost.runOperation();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return ProjJournalTable::find(this.parmJournalId_Hour()).Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefixJournalId</Name>
				<Source><![CDATA[
    private JournalId prefixJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefixJournalName</Name>
				<Source><![CDATA[
    private JournalDescription prefixJournalName(JournalDescription _journalName = journalName)
    {
        journalName = _journalName;
        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefixJournalType</Name>
				<Source><![CDATA[
    private str prefixJournalType(str _journalType = journalType)
    {
        journalType = _journalType;

        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefixSet</Name>
				<Source><![CDATA[
    public void prefixSet(str _journalAction)
    {
        this.writeMessage(strFmt('%1 - %2 : %3,%4',_journalAction,journalType,journalId,journalName), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId(ProjId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public SysQueryRun queryBuild()
    {
        QueryBuildDataSource    qbdsProjectTable;
        QueryBuildDataSource    qbdsServiceOrder;
        QueryBuildDataSource    qbdsServiceOrderLine;
        SysQueryRun             localQueryRun;

        // Creating the query on the fly
        serviceQuery = new Query();

        if (!serviceQuery)
        {
            // Query run is not initialized
            throw error("@SYS87642");
        }

        qbdsProjectTable    = serviceQuery.addDataSource(tableNum(ProjTable));

        qbdsServiceOrder    = qbdsProjectTable.addDataSource(tableNum(SMAServiceOrderTable));
        qbdsServiceOrder.relations(true);

        // Add datasources to serviceQuery dependent on caller parameters
        qbdsServiceOrderLine = qbdsServiceOrder.addDataSource(tableNum(SMAServiceOrderLine));
        qbdsServiceOrderLine.relations(true);

        this.queryUpdateRange();
        // order by transType, projId, serviceOrderId
        qbdsServiceOrderLine.orderMode(OrderMode::OrderBy);
        qbdsServiceOrderLine.addSortField(fieldNum(SMAServiceOrderLine,TransactionType));
        qbdsServiceOrderLine.addSortField(fieldNum(SMAServiceOrderLine,ProjId));
        qbdsServiceOrderLine.addSortField(fieldNum(SMAServiceOrderLine,ServiceOrderId));

        queryRun = new SysQueryRun(serviceQuery);
        localQueryRun = this.queryRun();
        localQueryRun.promptShowSorting(false);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseItemConsum</Name>
				<Source><![CDATA[
    void reverseItemConsum()
    {
        SMAServiceOrderLine serviceLine;

        // delete the journal with errors
        ttsbegin;
        delete_from inventJournalTable where inventJournalTable.JournalId == this.parmJournalId_ItemConsum();
        ttscommit;

        // remove the journal name
        this.parmJournalId_ItemConsum('');

        // reset the list of recId's
        listIterator = new ListIterator(listItemConsum);

        ttsbegin;
        while (listIterator.more())
        {
            serviceLine.selectForUpdate(true);

            select firstonly serviceLine where serviceLine.RecId == listIterator.value();
            serviceLine.ServiceOrderStatus = SMAServiceOrderStatus::Created;
            serviceLine.update();

            listIterator.next();
        }
        ttscommit;

        checkFailed(strFmt("@SYS3458","@SYS7407"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        QueryBuildDataSource    qbds;
        container               serviceOrderIdList      = conNull();
        Counter                 counter                 = 0;
        ProjId                  serviceProjId           = '';

        ttsbegin;

        ledgerVoucherCost = '';

        serviceParameter = SMAParameters::find();

        qbds = queryRun.query().dataSourceTable(tableNum(SMAServiceOrderLine));
        this.setTransactionTypes(qbds);

        this.setQueryDatePeriod();

        if (!queryRun.next())
        {
            // No lines found for post.
            error("@SYS99244");
        }
        else
        {
            line = queryRun.get(tableNum(SMAServiceOrderLine));
            while (line)
            {
                if (serviceProjId != '')
                {
                    ttsbegin;
                    // go through all agreement lines for one agreement and create PreService order lines
                    while ((line) && (serviceProjId == line.ProjId))
                    {
                        if (queryRun.changed(tableNum(SMAServiceOrderTable)))
                        {
                            //add the ServiceOrderId to the list
                            counter++;
                            serviceOrderIdList = conIns(serviceOrderIdList,counter, serviceOrderTable.ServiceOrderId);
                        }
                        //
                        this.createJournalLine(line);
                        this.getNextServiceOrderLine();
                    }

                    // validate Item journal
                    if (this.parmJournalId_ItemConsum() && this.checkJournalType(SMATransactionType::Item) == false)
                    {
                        this.reverseItemConsum();
                    }

                    // totals on journals
                    this.sumJournals();

                    // post journals
                    if (postJournals)
                    {
                        this.postJournals();
                        ledgerVoucherCost = '';
                    }

                    ttscommit;

                    // update service order progress
                    for (counter = 1; counter <= conLen(serviceOrderIdList); counter++)
                    {
                        ttsbegin;
                        serviceOrderTable = SMAServiceOrderTable::find(conPeek(serviceOrderIdList, counter), true);
                        serviceOrderTable.updateProgress();
                        serviceOrderTable.update(true,this.isInBatch());
                        ttscommit;
                    }
                }

                if (line)
                {
                    // get next projId
                    serviceOrderTable   = queryRun.get(tableNum(SMAServiceOrderTable));
                    serviceProjId       = serviceOrderTable.ProjId;
                    counter = 0;
                    serviceOrderIdList  = conNull();
                    this.projId(serviceProjId);
                    this.clearJournalIds();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasicRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates basic locked ranges for the query.
    /// </summary>
    protected void setBasicRanges()
    {
        QueryBuildDataSource    qbds_ServiceOrder;
        QueryBuildDataSource    qbds_ServiceOrderLine;

        QueryBuildRange         qbr_Progress;
        QueryBuildRange         qbr_Status;
        QueryBuildRange         qbr_SignOff;
        QueryBuildRange         qbr_TransactionType;

        super();

        qbds_ServiceOrder       = serviceQuery.dataSourceTable(tableNum(SMAServiceOrderTable));
        qbds_ServiceOrderLine   = serviceQuery.dataSourceTable(tableNum(SMAServiceOrderLine));

        // Add range Progress with value In Progress
        qbr_Progress = qbds_ServiceOrder.addRange(fieldNum(SMAServiceOrderTable, Progress));
        qbr_Progress.value(queryValue(SMAServiceOrderProgress::InProcess));
        qbr_Progress.status(RangeStatus::Locked);

        // Add range Status with value 'Created'
        qbr_Status = qbds_ServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderStatus));
        qbr_Status.value(queryValue(SMAServiceOrderStatus::Created));
        qbr_Status.status(RangeStatus::Locked);

        // Add range SignOff with value 'Yes'
        qbr_SignOff = qbds_ServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, SignOff));
        qbr_SignOff.value(queryValue(NoYes::Yes));
        qbr_SignOff.status(RangeStatus::Locked);

        qbr_TransactionType = qbds_ServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, TransactionType));
        qbr_TransactionType.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals on journals.
    /// </summary>
    protected void sumJournals()
    {
        ProjJournalTable    tmpProjJournalTable;
        InventJournalTable  tmpInventJournalTable;

        if (this.parmJournalId_Hour())
        {
            ttsbegin;
            tmpProjJournalTable = ProjJournalTable::find(this.parmJournalId_Hour(),true);
            ProjJournalTable::initTotal(tmpProjJournalTable);
            tmpProjJournalTable.BlockUserId = '';
            tmpProjJournalTable.update();
            ttscommit;
        }

        if (this.parmJournalId_Fee())
        {
            ttsbegin;
            tmpProjJournalTable = ProjJournalTable::find(this.parmJournalId_Fee(),true);
            ProjJournalTable::initTotal(tmpProjJournalTable);
            tmpProjJournalTable.BlockUserId = '';
            tmpProjJournalTable.update();
            ttscommit;
        }

        if (this.parmJournalId_ItemConsum())
        {
            ttsbegin;
            tmpInventJournalTable = InventJournalTable::find(this.parmJournalId_ItemConsum(), true);
            InventJournalTable::initTotal(tmpInventJournalTable);
            tmpInventJournalTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceOrderLine</Name>
				<Source><![CDATA[
    private void updateServiceOrderLine()
    {
        SMAServiceOrderLine     tmpServiceOrderLine;

        ttsbegin;
        tmpServiceOrderLine                    = SMAServiceOrderLine::find(this.parmServiceOrderLine().ServiceOrderId,this.parmServiceOrderLine().ServiceOrderLineNum,true);
        tmpServiceOrderLine.ServiceOrderStatus = SMAServiceOrderStatus::Posted;
        tmpServiceOrderLine.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMessage</Name>
				<Source><![CDATA[
    protected void writeMessage(str _strMsg, boolean _setPrefix = false)
    {
        if (showInfolog)
        {
            if (_setPrefix)
            {
                setPrefix(_strMsg);
            }
            else
            {
                info(_strMsg);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS90993";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucher_CN</Name>
				<Source><![CDATA[
    private void setVoucher_CN(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans legderJournalTrans;
        select firstonly Voucher_CN, RecId from legderJournalTrans
            where legderJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
                && legderJournalTrans.Voucher == _ledgerJournalTrans.Voucher
                && legderJournalTrans.LedgerVoucherType_CN == _ledgerJournalTrans.LedgerVoucherType_CN;

        if (legderJournalTrans.RecId)
        {
            _ledgerJournalTrans.Voucher_CN = legderJournalTrans.Voucher_CN;
        }
        else
        {
            if (_ledgerJournalTrans.LedgerVoucherType_CN)
            {
                RefRecId numberSequenceTable = LedgerVoucherType_CN::find(_ledgerJournalTrans.LedgerVoucherType_CN).NumberSequenceTable;
                _ledgerJournalTrans.Voucher_CN = NumberSeq_Voucher_CN::newGetVoucherFromCode(numberSequenceTable, _ledgerJournalTrans.TransDate).voucher();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>