<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>BankReconciliationUtility</c> is utility of bank reconciliation.
/// </summary>
[SysObsolete('Class BankReconciliationUtility is not used anymore.', false, 26\07\2021)]
class BankReconciliationUtility
{
    BankReconciliationHeader    reconciliation;

    #macrolib.BankReconciliationConditions
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconciliation</Name>
				<Source><![CDATA[
    private BankReconciliationHeader parmReconciliation(BankReconciliationHeader _reconciliation = reconciliation)
    {
        reconciliation = _reconciliation;

        return reconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tranverseAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tranverses the adjustment of the reconciliation.
    /// </summary>
    public void tranverseAdjustment()
    {
        BankReconciliationHistoryDetails    openedItem;
        BankStmtISOReportEntry              reportEntry;
        BankStmtISOAccountStatement         statement;
        BankStmtISOPartyIdentification      partyIdentification;
        BankReconciliationMatchingItemView  matchingItemView;

        if (reconciliation.IsReconciled())
        {
            while select * from reportEntry
                where reportEntry.IsNewBankDocument
            join Identification from statement
                where reportEntry.BankStmtISOAccountStatement == statement.RecId
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            #IsStatementLineMatched(matchingItemView, reportEntry, reconciliation)
            #StatementLineInReconciliationHistory(openedItem, reportEntry, reconciliation)
            {
                this.visitedAdjustment(
                    reportEntry,
                    statement,
                    partyIdentification,
                    matchingItemView.RecId != 0,
                    matchingItemView.BankReconciliationMatchingType);
            }
        }
        else
        {
            TransDateTime cutoffDateTime = reconciliation.getCutOffDateTime();

            while select * from reportEntry
                #StatementLineForReconcile(reportEntry, cutoffDateTime, statement, reconciliation)
                && reportEntry.IsNewBankDocument
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            #IsStatementLineMatched(matchingItemView, reportEntry, reconciliation)
            {
                this.visitedAdjustment(
                    reportEntry,
                    statement,
                    partyIdentification,
                    matchingItemView.RecId != 0,
                    matchingItemView.BankReconciliationMatchingType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tranverseDocument</Name>
				<Source><![CDATA[
/// <summary>
    /// Tranverses the document of the reconciliation.
    /// </summary>
    public void tranverseDocument()
    {
        BankReconciliationHistoryDetails    openedItem;
        BankDocumentTableView               documentView;
        BankReconciliationMatchingItemView  matchingItemView;
        BankAccountTrans                    locBankAccountTrans;

        if (reconciliation.IsReconciled())
        {
            while select * from documentView
                #IsDocumentMatched(matchingItemView, documentView, reconciliation)
                #DocumentInReconciliationHistory(openedItem, documentView, reconciliation)
            {
                this.visitedDocument(
                    documentView,
                    matchingItemView.RecId != 0);
            }
        }
        else
        {
            while select * from documentView
                #DocumentForReconcile(documentView, reconciliation)
                #IsDocumentMatched(matchingItemView, documentView, reconciliation)
            {
                this.visitedDocument(
                    documentView,
                    matchingItemView.RecId != 0);
            }
             //Selecting the records reconciled cancelled check records but still open from timeline
            while select * from documentView
                where documentView.IsReconciled == NoYes::Yes
                    && documentView.DocumentType == BankDocumentBookType::Cheque
                    && documentView.AccountId   == reconciliation.AccountId
                    && documentView.DocumentDate <= reconciliation.CutoffDate
                    && documentView.Cancelled   == NoYes::Yes
                    && documentView.SourceRelationType == tableNum(BankChequeTable)
                #IsDocumentMatched(matchingItemView, documentView, reconciliation)
                exists join locBankAccountTrans
                    where locBankAccountTrans.SourceTableId == documentView.SourceRelationType
                        && locBankAccountTrans.SourceRecId == documentView.SourceRecId
                        && locBankAccountTrans.Cancel == NoYes::Yes
                        && locBankAccountTrans.TransDate > reconciliation.CutoffDate
            {
                this.visitedDocument(documentView, matchingItemView.RecId != 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tranverseStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tranverses the statement of the reconciliation.
    /// </summary>
    public void tranverseStatement()
    {
        BankReconciliationHistoryDetails    openedItem;
        BankStmtISOReportEntry              reportEntry;
        BankStmtISOAccountStatement         statement;
        BankStmtISOPartyIdentification      partyIdentification;
        BankReconciliationMatchingItemView  matchingItemView;

        if (reconciliation.IsReconciled())
        {
            while select reportEntry
            join Identification, Posted from statement
                where reportEntry.BankStmtISOAccountStatement == statement.RecId
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            outer join RecId, BankReconciliationMatchingType from matchingItemView
                where reportEntry.RecId == matchingItemView.BankStmtISOReportEntry
                    && matchingItemView.BankReconciliationHeader == reconciliation.RecId
            exists join openedItem
                where reportEntry.RecId == openedItem.BankStmtISOReportEntry
                    && openedItem.BankReconciliationHeader == reconciliation.RecId
            {
                this.visitedStatement(
                    reportEntry,
                    statement,
                    partyIdentification,
                    matchingItemView.RecId != 0,
                    matchingItemView.BankReconciliationMatchingType);
            }
        }
        else
        {
            TransDateTime cutoffDateTime = reconciliation.getCutOffDateTime();
            
            while select reportEntry
                where reportEntry.Reconciled == NoYes::No
                    && reportEntry.BookingDateTime <= cutoffDateTime
            join Identification, Posted from statement
                where reportEntry.BankStmtISOAccountStatement == statement.RecId
                    && statement.BankAccountTable == reconciliation.AccountId
                    && statement.Status != BankStatementStatus::Open
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            outer join RecId, BankReconciliationMatchingType from matchingItemView
                where reportEntry.RecId == matchingItemView.BankStmtISOReportEntry
                    && matchingItemView.BankReconciliationHeader == reconciliation.RecId
            {
                this.visitedStatement(
                    reportEntry,
                    statement,
                    partyIdentification,
                    matchingItemView.RecId != 0,
                    matchingItemView.BankReconciliationMatchingType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitedAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ouccurs when visiting a bank statement line.
    /// </summary>
    /// <param name="_reportEntry">
    /// The bank statement line.
    /// </param>
    /// <param name="_statement">
    /// The bank statement.
    /// </param>
    /// <param name="_partyIdentification">
    /// The party identification of bank statement.
    /// </param>
    /// <param name="_isMatched">
    /// Whether it is matched.
    /// </param>
    /// <param name="_matchingType">
    /// The matching type.
    /// </param>
    delegate void visitedAdjustment(
        BankStmtISOReportEntry              _reportEntry,
        BankStmtISOAccountStatement         _statement,
        BankStmtISOPartyIdentification      _partyIdentification,
        NoYesId                             _isMatched,
        BankReconciliationMatchingType      _matchingType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ouccurs when visiting a bank document.
    /// </summary>
    /// <param name="_documentView">
    /// The bank document view.
    /// </param>
    /// <param name="_isMatched">
    /// Whether it is matched.
    /// </param>
    delegate void visitedDocument(
        BankDocumentTableView               _documentView,
        NoYesId                             _isMatched)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitedStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ouccurs when visiting a bank statement line.
    /// </summary>
    /// <param name="_reportEntry">
    /// The bank statement line.
    /// </param>
    /// <param name="_statement">
    /// The bank statement.
    /// </param>
    /// <param name="_partyIdentification">
    /// The party identification of bank statement.
    /// </param>
    /// <param name="_isMatched">
    /// Whether it is matched.
    /// </param>
    /// <param name="_matchingType">
    /// The matching type.
    /// </param>
    delegate void visitedStatement(
        BankStmtISOReportEntry              _reportEntry,
        BankStmtISOAccountStatement         _statement,
        BankStmtISOPartyIdentification      _partyIdentification,
        NoYesId                             _isMatched,
        BankReconciliationMatchingType      _matchingType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>BankReconciliationUtility</c>.
    /// </summary>
    /// <param name="_reconciliation">
    /// The bank reconciliation header.
    /// </param>
    /// <returns>
    /// A new instance of <c>BankReconciliationUtility</c>.
    /// </returns>
    public static BankReconciliationUtility construct(BankReconciliationHeader _reconciliation)
    {
        BankReconciliationUtility   utility = new BankReconciliationUtility();

        utility.parmReconciliation(_reconciliation);

        return utility;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>