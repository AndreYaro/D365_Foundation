<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventReserveDBUpgradeBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventReserveDBUpgradeBuilder</c> class is responsible for updating records in table <c>WHSInventReserve</c> with inventory dimension values from table <c>InventDim</c>.
/// </summary>
final internal class WHSInventReserveDBUpgradeBuilder extends ApplicationSQLObjects
{
    private str inventReserveTableName;
    private str inventReservePartition;
    private str inventReserveDataAreaId;
    private str inventReserveInventDimId;
    private str inventReserveConfigId;
    private str inventReserveInventBatchId;
    private str inventReserveInventColorId;
    private str inventReserveInventLocationId;
    private str inventReserveInventSerialId;
    private str inventReserveInventSiteId;
    private str inventReserveInventSizeId;
    private str inventReserveInventStatusId;
    private str inventReserveInventStyleId;
    private str inventReserveInventVersionId;
    private str inventReserveLicensePlateId;
    private str inventReserveWMSLocationId;
    private str inventReserveWMSPalletId;
    private str inventReserveInventGtdId_RU;
    private str inventReserveInventOwnerId_RU;
    private str inventReserveInventProfileId_RU;
    private str inventReserveInventDimension1;
    private str inventReserveInventDimension2;
    private str inventReserveInventDimension3;
    private str inventReserveInventDimension4;
    private str inventReserveInventDimension5;
    private str inventReserveInventDimension6;
    private str inventReserveInventDimension7;
    private str inventReserveInventDimension8;
    private str inventReserveInventDimension9;
    private str inventReserveInventDimension10;
    private str inventReserveInventDimension11;
    private str inventReserveInventDimension12;

    private str inventDimTableName;
    private str inventDimPartition;
    private str inventDimDataAreaId;
    private str inventDimInventDimId;
    private str inventDimConfigId;
    private str inventDimInventBatchId;
    private str inventDimInventColorId;
    private str inventDimInventLocationId;
    private str inventDimInventSerialId;
    private str inventDimInventSiteId;
    private str inventDimInventSizeId;
    private str inventDimInventStatusId;
    private str inventDimInventStyleId;
    private str inventDimInventVersionId;
    private str inventDimLicensePlateId;
    private str inventDimWMSLocationId;
    private str inventDimWMSPalletId;
    private str inventDimInventGtdId_RU;
    private str inventDimInventOwnerId_RU;
    private str inventDimInventProfileId_RU;
    private str inventDimInventDimension1;
    private str inventDimInventDimension2;
    private str inventDimInventDimension3;
    private str inventDimInventDimension4;
    private str inventDimInventDimension5;
    private str inventDimInventDimension6;
    private str inventDimInventDimension7;
    private str inventDimInventDimension8;
    private str inventDimInventDimension9;
    private str inventDimInventDimension10;
    private str inventDimInventDimension11;
    private str inventDimInventDimension12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFunctions</Name>
				<Source><![CDATA[
    protected boolean createFunctions()
    {
        //If skip feature toggle is on, skip updating data
        if (WHSInventReserveInventDimSkipDataUpdateToggle::instance().isEnabled())
        {
            return true;
        }

        return this.updateWHSInventReserveWithInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSInventReserveWithInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table <c>WHSInventReserve</c> with inventory dimensions
    /// </summary>
    /// <returns>
    /// True if the data upgrade was successful; otherwise, false.
    /// </returns>
    private boolean updateWHSInventReserveWithInventDim()
    {
        if (WHSInventReserveInventDimEnable::hasDataUpgradeCompleted())
        {
            return true;
        }

        boolean isSuccessful;

        var logger = InventInstrumentationLogger::createLogger(classStr(WHSInventReserveDBUpgradeBuilder));
        var activity = logger.activity(methodStr(WHSInventReserveDBUpgradeBuilder, updateWHSInventReserveWithInventDim));
        using (var activityContext = logger.activityContext(activity))
        {
            SysSQLStatementText sqlStatementText = this.getUpdateSqlStmt();

            isSuccessful = this.executeSQLStatement(sqlStatementText);

            if (isSuccessful && !WHSInventReserveSkipDBTriggerCreationFlight::instance().isEnabled())
            {
                WHSInventReserveInventDimEnable::markDataUpgradeComplete();
            }
        }
        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateSqlStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL statement to update data on <c>WHSINVENTRESERVE</c>.
    /// </summary>
    /// <returns>The SQL statement to update data.</returns>
    /// <remarks>
    /// BEGIN
    ///     UPDATE WHSINVENTRESERVE
    ///     SET WHSINVENTRESERVE.CONFIGID = INVENTDIM.CONFIGID,
    ///         WHSINVENTRESERVE.INVENTSIZEID = INVENTDIM.INVENTSIZEID,
    ///         WHSINVENTRESERVE.INVENTCOLORID = INVENTDIM.INVENTCOLORID,
    ///         WHSINVENTRESERVE.INVENTSTYLEID = INVENTDIM.INVENTSTYLEID,
    ///         WHSINVENTRESERVE.INVENTVERSIONID = INVENTDIM.INVENTVERSIONID,
    ///         WHSINVENTRESERVE.INVENTSITEID = INVENTDIM.INVENTSITEID,
    ///         WHSINVENTRESERVE.INVENTLOCATIONID = INVENTDIM.INVENTLOCATIONID,
    ///         WHSINVENTRESERVE.INVENTBATCHID = INVENTDIM.INVENTBATCHID,
    ///         WHSINVENTRESERVE.WMSLOCATIONID = INVENTDIM.WMSLOCATIONID,
    ///         WHSINVENTRESERVE.WMSPALLETID = INVENTDIM.WMSPALLETID,
    ///         WHSINVENTRESERVE.LICENSEPLATEID = INVENTDIM.LICENSEPLATEID,
    ///         WHSINVENTRESERVE.INVENTSTATUSID = INVENTDIM.INVENTSTATUSID,
    ///         WHSINVENTRESERVE.INVENTSERIALID = INVENTDIM.INVENTSERIALID,
    ///         WHSINVENTRESERVE.INVENTDIMENSION1 = INVENTDIM.INVENTDIMENSION1,
    ///         WHSINVENTRESERVE.INVENTDIMENSION2 = INVENTDIM.INVENTDIMENSION2,
    ///         WHSINVENTRESERVE.INVENTDIMENSION3 = INVENTDIM.INVENTDIMENSION3,
    ///         WHSINVENTRESERVE.INVENTDIMENSION4 = INVENTDIM.INVENTDIMENSION4,
    ///         WHSINVENTRESERVE.INVENTDIMENSION5 = INVENTDIM.INVENTDIMENSION5,
    ///         WHSINVENTRESERVE.INVENTDIMENSION6 = INVENTDIM.INVENTDIMENSION6,
    ///         WHSINVENTRESERVE.INVENTDIMENSION7 = INVENTDIM.INVENTDIMENSION7,
    ///         WHSINVENTRESERVE.INVENTDIMENSION8 = INVENTDIM.INVENTDIMENSION8,
    ///         WHSINVENTRESERVE.INVENTDIMENSION9 = INVENTDIM.INVENTDIMENSION9,
    ///         WHSINVENTRESERVE.INVENTDIMENSION10 = INVENTDIM.INVENTDIMENSION10,
    ///         WHSINVENTRESERVE.INVENTDIMENSION11 = INVENTDIM.INVENTDIMENSION11,
    ///         WHSINVENTRESERVE.INVENTDIMENSION12 = INVENTDIM.INVENTDIMENSION12,
    ///         WHSINVENTRESERVE.INVENTGTDID_RU = INVENTDIM.INVENTGTDID_RU,
    ///         WHSINVENTRESERVE.INVENTPROFILEID_RU = INVENTDIM.INVENTPROFILEID_RU,
    ///         WHSINVENTRESERVE.INVENTOWNERID_RU = INVENTDIM.INVENTOWNERID_RU
    ///     FROM WHSINVENTRESERVE
    ///     JOIN INVENTDIM
    ///         ON WHSINVENTRESERVE.PARTITION = INVENTDIM.PARTITION
    ///         AND WHSINVENTRESERVE.DATAAREAID = INVENTDIM.DATAAREAID
    ///         AND WHSINVENTRESERVE.INVENTDIMID = INVENTDIM.INVENTDIMID
    /// END
    /// </remarks>
    private SysSQLStatementText getUpdateSqlStmt()
    {
        SysSQLStatementText sqlStmt = 'BEGIN';
        sqlStmt += ' UPDATE ' + inventReserveTableName + ' SET ';

        if (inventReserveInventDimension1 && inventDimInventDimension1)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension1 + ' = ' + inventDimTableName + '.' + inventDimInventDimension1 + ', ';
        }
        if (inventReserveInventDimension2 && inventDimInventDimension2)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension2 + ' = ' + inventDimTableName + '.' + inventDimInventDimension2 + ', ';
        }
        if (inventReserveInventDimension3 && inventDimInventDimension3)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension3 + ' = ' + inventDimTableName + '.' + inventDimInventDimension3 + ', ';
        }
        if (inventReserveInventDimension4 && inventDimInventDimension4)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension4 + ' = ' + inventDimTableName + '.' + inventDimInventDimension4 + ', ';
        }
        if (inventReserveInventDimension5 && inventDimInventDimension5)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension5 + ' = ' + inventDimTableName + '.' + inventDimInventDimension5 + ', ';
        }
        if (inventReserveInventDimension6 && inventDimInventDimension6)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension6 + ' = ' + inventDimTableName + '.' + inventDimInventDimension6 + ', ';
        }
        if (inventReserveInventDimension7 && inventDimInventDimension7)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension7 + ' = ' + inventDimTableName + '.' + inventDimInventDimension7 + ', ';
        }
        if (inventReserveInventDimension8 && inventDimInventDimension8)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension8 + ' = ' + inventDimTableName + '.' + inventDimInventDimension8 + ', ';
        }
        if (inventReserveInventDimension9 && inventDimInventDimension9)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension9 + ' = ' + inventDimTableName + '.' + inventDimInventDimension9 + ', ';
        }
        if (inventReserveInventDimension10 && inventDimInventDimension10)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension10 + ' = ' + inventDimTableName + '.' + inventDimInventDimension10 + ', ';
        }
        if (inventReserveInventDimension11 && inventDimInventDimension11)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension11 + ' = ' + inventDimTableName + '.' + inventDimInventDimension11 + ', ';
        }
        if (inventReserveInventDimension12 && inventDimInventDimension12)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension12 + ' = ' + inventDimTableName + '.' + inventDimInventDimension12 + ', ';
        }
        if (inventReserveInventGtdId_RU && inventDimInventGtdId_RU)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventGtdId_RU + ' = ' + inventDimTableName + '.' + inventDimInventGtdId_RU + ', ';
        }
        if (inventReserveInventProfileId_RU && inventDimInventProfileId_RU)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventProfileId_RU + ' = ' + inventDimTableName + '.' + inventDimInventProfileId_RU + ', ';
        }
        if (inventReserveInventOwnerId_RU && inventDimInventOwnerId_RU)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventOwnerId_RU + ' = ' + inventDimTableName + '.' + inventDimInventOwnerId_RU + ', ';
        }
        if (inventReserveConfigId && inventDimConfigId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveConfigId + ' = ' + inventDimTableName + '.' + inventDimConfigId + ', ';
        }
        if (inventReserveInventSizeId && inventDimInventSizeId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventSizeId + ' = ' + inventDimTableName + '.' + inventDimInventSizeId + ', ';
        }
        if (inventReserveInventColorId && inventDimInventColorId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventColorId + ' = ' + inventDimTableName + '.' + inventDimInventColorId + ', ';
        }
        if (inventReserveInventStyleId && inventDimInventStyleId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventStyleId + ' = ' + inventDimTableName + '.' + inventDimInventStyleId + ', ';
        }
        if (inventReserveInventVersionId && inventDimInventVersionId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventVersionId + ' = ' + inventDimTableName + '.' + inventDimInventVersionId + ', ';
        }
        if (inventReserveWMSLocationId && inventDimWMSLocationId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveWMSLocationId + ' = ' + inventDimTableName + '.' + inventDimWMSLocationId + ', ';
        }
        if (inventReserveWMSPalletId && inventDimWMSPalletId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveWMSPalletId + ' = ' + inventDimTableName + '.' + inventDimWMSPalletId + ', ';
        }
        if (inventReserveLicensePlateId && inventDimLicensePlateId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveLicensePlateId + ' = ' + inventDimTableName + '.' + inventDimLicensePlateId + ', ';
        }
        if (inventReserveInventStatusId && inventDimInventStatusId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventStatusId + ' = ' + inventDimTableName + '.' + inventDimInventStatusId + ', ';
        }
        // The following dimension has the same configurtion key as WHSInventReserve - LogisticsBasic
        sqlStmt += inventReserveTableName + '.' + inventReserveInventSiteId + ' = ' + inventDimTableName + '.' + inventDimInventSiteId + ', ';
        sqlStmt += inventReserveTableName + '.' + inventReserveInventLocationId + ' = ' + inventDimTableName + '.' + inventDimInventLocationId + ', ';
        sqlStmt += inventReserveTableName + '.' + inventReserveInventBatchId + ' = ' + inventDimTableName + '.' + inventDimInventBatchId + ', ';
        sqlStmt += inventReserveTableName + '.' + inventReserveInventSerialId + ' = ' + inventDimTableName + '.' + inventDimInventSerialId + ' ';

        sqlStmt += 'FROM ' + inventReserveTableName + ' JOIN ' + inventDimTableName + ' ';
        sqlStmt += 'ON ' + inventReserveTableName + '.' + inventReservePartition + ' = ' + inventDimTableName + '.' + inventDimPartition + ' ';
        sqlStmt += 'AND ' + inventReserveTableName + '.' + inventReserveDataAreaId + ' = ' + inventDimTableName + '.' + inventDimDataAreaId + ' ';
        sqlStmt += 'AND ' + inventReserveTableName + '.' + inventReserveInventDimId + ' = ' + inventDimTableName + '.' + inventDimInventDimId + ' ';
        sqlStmt += 'END';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var builder = WHSInventReserveDBUpgradeBuilder::contruct();

        builder.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSInventReserveDBUpgradeBuilder</c> class.
    /// </summary>
    /// <returns>The new instance of the <c>WHSInventReserveDBUpgradeBuilder</c> class.</returns>
    public static WHSInventReserveDBUpgradeBuilder contruct()
    {
        return new WHSInventReserveDBUpgradeBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);

        SysDictTable inventReserveDictTable     = new SysDictTable(tableNum(WHSInventReserve));
        inventReserveTableName                  = inventReserveDictTable.name(DbBackend::Sql);
        inventReservePartition                  = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, Partition)).name(DbBackend::Sql);
        inventReserveDataAreaId                 = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, DataAreaId)).name(DbBackend::Sql);
        inventReserveInventDimId                = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimId)).name(DbBackend::Sql);
        inventReserveConfigId                   = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, Configid)).name(DbBackend::Sql);
        inventReserveInventBatchId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventBatchId)).name(DbBackend::Sql);
        inventReserveInventColorId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventColorId)).name(DbBackend::Sql);
        inventReserveInventLocationId           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventLocationId)).name(DbBackend::Sql);
        inventReserveInventSerialId             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventSerialId)).name(DbBackend::Sql);
        inventReserveInventSiteId               = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventSiteId)).name(DbBackend::Sql);
        inventReserveInventSizeId               = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventSizeId)).name(DbBackend::Sql);
        inventReserveInventStatusId             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventStatusId)).name(DbBackend::Sql);
        inventReserveInventStyleId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventStyleId)).name(DbBackend::Sql);
        inventReserveInventVersionId            = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventVersionId)).name(DbBackend::Sql);
        inventReserveLicensePlateId             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, LicensePlateId)).name(DbBackend::Sql);
        inventReserveWMSLocationId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, wMSLocationId)).name(DbBackend::Sql);
        inventReserveWMSPalletId                = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, wMSPalletId)).name(DbBackend::Sql);
        inventReserveInventGtdId_RU             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventGtdId_RU)).name(DbBackend::Sql);
        inventReserveInventOwnerId_RU           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventOwnerId_RU)).name(DbBackend::Sql);
        inventReserveInventProfileId_RU         = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventProfileId_RU)).name(DbBackend::Sql);
        inventReserveInventDimension1           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension1)).name(DbBackend::Sql);
        inventReserveInventDimension2           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension2)).name(DbBackend::Sql);
        inventReserveInventDimension3           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension3)).name(DbBackend::Sql);
        inventReserveInventDimension4           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension4)).name(DbBackend::Sql);
        inventReserveInventDimension5           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension5)).name(DbBackend::Sql);
        inventReserveInventDimension6           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension6)).name(DbBackend::Sql);
        inventReserveInventDimension7           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension7)).name(DbBackend::Sql);
        inventReserveInventDimension8           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension8)).name(DbBackend::Sql);
        inventReserveInventDimension9           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension9)).name(DbBackend::Sql);
        inventReserveInventDimension10          = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension10)).name(DbBackend::Sql);
        inventReserveInventDimension11          = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension11)).name(DbBackend::Sql);
        inventReserveInventDimension12          = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension12)).name(DbBackend::Sql);

        SysDictTable inventDimDictTable     = new SysDictTable(tableNum(InventDim));
        inventDimTableName                  = inventDimDictTable.name(DbBackend::Sql);
        inventDimPartition                  = inventDimDictTable.fieldObject(fieldNum(InventDim, Partition)).name(DbBackend::Sql);
        inventDimDataAreaId                 = inventDimDictTable.fieldObject(fieldNum(InventDim, DataAreaId)).name(DbBackend::Sql);
        inventDimInventDimId                = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimId)).name(DbBackend::Sql);
        inventDimConfigId                   = inventDimDictTable.fieldObject(fieldNum(InventDim, Configid)).name(DbBackend::Sql);
        inventDimInventBatchId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventBatchId)).name(DbBackend::Sql);
        inventDimInventColorId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventColorId)).name(DbBackend::Sql);
        inventDimInventLocationId           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventLocationId)).name(DbBackend::Sql);
        inventDimInventSerialId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSerialId)).name(DbBackend::Sql);
        inventDimInventSiteId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSiteId)).name(DbBackend::Sql);
        inventDimInventSizeId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSizeId)).name(DbBackend::Sql);
        inventDimInventStatusId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStatusId)).name(DbBackend::Sql);
        inventDimInventStyleId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStyleId)).name(DbBackend::Sql);
        inventDimInventVersionId            = inventDimDictTable.fieldObject(fieldNum(InventDim, InventVersionId)).name(DbBackend::Sql);
        inventDimLicensePlateId             = inventDimDictTable.fieldObject(fieldNum(InventDim, LicensePlateId)).name(DbBackend::Sql);
        inventDimWMSLocationId              = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSLocationId)).name(DbBackend::Sql);
        inventDimWMSPalletId                = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSPalletId)).name(DbBackend::Sql);
        inventDimInventGtdId_RU             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventGtdId_RU)).name(DbBackend::Sql);
        inventDimInventOwnerId_RU           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventOwnerId_RU)).name(DbBackend::Sql);
        inventDimInventProfileId_RU         = inventDimDictTable.fieldObject(fieldNum(InventDim, InventProfileId_RU)).name(DbBackend::Sql);
        inventDimInventDimension1           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension1)).name(DbBackend::Sql);
        inventDimInventDimension2           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension2)).name(DbBackend::Sql);
        inventDimInventDimension3           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension3)).name(DbBackend::Sql);
        inventDimInventDimension4           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension4)).name(DbBackend::Sql);
        inventDimInventDimension5           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension5)).name(DbBackend::Sql);
        inventDimInventDimension6           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension6)).name(DbBackend::Sql);
        inventDimInventDimension7           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension7)).name(DbBackend::Sql);
        inventDimInventDimension8           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension8)).name(DbBackend::Sql);
        inventDimInventDimension9           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension9)).name(DbBackend::Sql);
        inventDimInventDimension10          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension10)).name(DbBackend::Sql);
        inventDimInventDimension11          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension11)).name(DbBackend::Sql);
        inventDimInventDimension12          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension12)).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>