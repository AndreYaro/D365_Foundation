<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Vir_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventMov_Vir_Transfer extends InventMov_Virtuel
{
    boolean    countryRegion_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                }
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            if (this.projId())
            {
                cacheAccountOperations = ProjPosting::getInventLedgerDimension(ProjAccountType::CostAccount,
                                                                      this.projId(),
                                                                      this.projCategoryId());
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
                }
                else
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
                }
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimPhysical</Name>
				<Source><![CDATA[
    public boolean checkDimPhysical(
        InventQty   _qty,
        InventDim   _inventDim,
        boolean     _finalCheck,
        boolean     _showError = true
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransPosting</Name>
				<Source><![CDATA[
    public boolean createInventTransPosting()
    {
        return this.transQty() >= 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the set of financial dimensions to use when posting the transfer.
    /// </summary>
    /// <returns>
    ///    The set of financial dimensions.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        return InventSite::changeDimension(this.inventTable().DefaultDimension, this.inventdim().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedFinancially()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common)
    {
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        super(_common);

        transType = InventTransType::InventTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return  this.transQty() >= 0 ? 1 : -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        boolean                 _allowNegative = false)
    {
        if (_updateNow.parmFinancial() <= 0)
        {
            return 0;
        }

        if (_updateNow.parmCurrencyCode() != CompanyInfoHelper::standardCurrency())
        {
            throw error("@SYS2009");
        }

        CostAmount costAmountMST = _updateNow.parmCostAmountCur();
        _updateNow.updOperationsAmountLedger(-_updateNow.parmCostAmountCur());

        return costAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventMovement newParameters(
        InventTransId           _inventTransId,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        TransDate               _transDate,
        InventQty               _qty,
        NoYes                   _mustBeQuarantineControlled
        , PdsCWInventQty          _cwQty = 0
        )
    {
        InventMov_Vir_Transfer movement_Virtuel = new InventMov_Vir_Transfer(null);

        movement_Virtuel.parmTransQty(_qty);
        movement_Virtuel.pdsCWParmTransQty(_cwQty);
        movement_Virtuel.parmTransDate(_transDate);
        movement_Virtuel.parmInventTransId(_inventTransId);
        movement_Virtuel.parmItemId(_itemId);
        movement_Virtuel.parmInventDimId(_inventDimId);
        movement_Virtuel.parmMustBeQuarantineControlled(_mustBeQuarantineControlled);

        return movement_Virtuel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>