<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningReleaseForPaymentTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollEarningReleaseForPaymentTask</c> class provides a dialog to process the earning statement to release for payment or to hold from payment.
/// </summary>
class PayrollEarningReleaseForPaymentTask extends RunBaseBatch implements BatchRetryable
{
    // Packed variables
    container                       batchTaskGroupList;
    PayrollPayPeriodRecId           payPeriodRecId;
    PayrollEarningPaymentProcessingAction  payrollEarningPaymentProcessingAction;
    boolean                         releaseOnHoldEarnings;

    private const int currentVersion = 1;

    #localmacro.CurrentList
        payPeriodRecId,
        batchTaskGroupList,
        payrollEarningPaymentProcessingAction,
        releaseOnHoldEarnings
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchTaskGroupList</Name>
				<Source><![CDATA[
    public container parmBatchTaskGroupList(container _batchTaskGroupList = batchTaskGroupList)
    {
        batchTaskGroupList = _batchTaskGroupList;

        return batchTaskGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningPaymentProcessingAction</Name>
				<Source><![CDATA[
    public PayrollEarningPaymentProcessingAction parmEarningPaymentProcessingAction(PayrollEarningPaymentProcessingAction _payrollEarningPaymentProcessingAction = payrollEarningPaymentProcessingAction)
    {
        payrollEarningPaymentProcessingAction = _payrollEarningPaymentProcessingAction;

        return payrollEarningPaymentProcessingAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriodRecId</Name>
				<Source><![CDATA[
    public PayrollPayPeriodRecId parmPayPeriodRecId(PayrollPayPeriodRecId _payPeriodRecId = payPeriodRecId)
    {
        payPeriodRecId = _payPeriodRecId;

        return payPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseOnHoldEarnings</Name>
				<Source><![CDATA[
    public boolean parmReleaseOnHoldEarnings(boolean _releaseOnHoldEarnings = releaseOnHoldEarnings)
    {
        releaseOnHoldEarnings = _releaseOnHoldEarnings;

        return releaseOnHoldEarnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        PayrollEarningStatement payrollEarningStatement;
        HcmWorkerRecId          workerRecId;
        container               batchTaskWorkerList;
        List                    batchTaskPositionList;
        ListEnumerator          enumerator;
        int64                   earningStatementCount;
        int                     linesReleasedOrHold;

        //
        // The calling process has supplied a container with a list of 1..n workers and the corresponding Positions for each worker
        // to process earnings, so loop through this list of workers, and also loop through the positions for each worker
        //
        for (int i = 1; i <= conLen(batchTaskGroupList); i++)
        {
            batchTaskWorkerList = conPeek(batchTaskGroupList, i);
            workerRecId = conPeek(batchTaskWorkerList, 1);

            if (workerRecId == 0 )
            {
                //worker needs to be set for any calculation
                continue;
            }

            batchTaskPositionList = List::create(conPeek(batchTaskWorkerList, 2));
            enumerator = batchTaskPositionList.getEnumerator();

            while (enumerator.moveNext())
            {
                if (enumerator.current() == 0)
                {
                    //position needs to be set for any calculation
                    continue;
                }

                try
                {
                    while select RecId from payrollEarningStatement where payrollEarningStatement.Worker == workerRecId && payrollEarningStatement.PayPeriod == payPeriodRecId
                    {
                        linesReleasedOrHold = PayrollEarningStatementLine::updateLinesStatusByHeaderPosition(payrollEarningStatement.RecId, enumerator.current(), this.parmEarningPaymentProcessingAction(), releaseOnHoldEarnings);

                        //
                        // Check If there is any line in an earning statement that does not have hold or release status to determine the earning statement has released or onHold.
                        // Do not check the status if there is no line released or hold by the processs
                        //
                        if (linesReleasedOrHold && !PayrollEarningStatementLine::lineBesideHeaderAndStatusExists(payrollEarningStatement.RecId,
                                    this.parmEarningPaymentProcessingAction() == PayrollEarningPaymentProcessingAction::ReleaseForPayment ?
                                        PayrollPaymentProcessingStatus::Released : PayrollPaymentProcessingStatus::OnHold))
                        {
                            earningStatementCount +=1;
                        }
                    }
                }
                catch (Exception::Error)
                {
                    // Assumes that any error message was already raised at the point that threw the exception,
                    // so continue to the next worker.
                    continue;
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        error(strFmt("@Payroll:DeadlockCreatingPaymentForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                        continue;
                    }
                    else
                    {
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            error(strFmt("@Payroll:UpdateconflictCreatingPaymentForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                            continue;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        error(strFmt("@Payroll:UpdateconflictCreatingPaymentForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                        continue;
                    }
                }
            }
        }

        info (strFmt("@SYS4000368", earningStatementCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case currentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>