<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_LedgerSheet_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>OXMLExcelReport_LedgerSheet_RU</c> is the base class for the reports
/// using <c>FormListControl</c> control.
/// </summary>
abstract class OXMLExcelReport_LedgerSheet_RU extends XMLExcelReport_RU
{
    Object              paramIntoReport;
    FormListControl     formListControl;

    int                 fetchedRow;
    int                 fetchedItemIdx;
    boolean             canFetchItem;

    container           conRepeatableColumn;

    Map                 mapHeaderBuff;

    Map                 mapRowBuff;

    TempStr             reportTitle;
    boolean             mayPrintReportHeader;

    Set                 setNotPrintColumn;

    boolean             readLastRowIntoBuffer;
    int                 numLastRowBuffer;

    Map                 mapMergeBodyColumnInfo;
    RLedgerSheetEngine  rLedgerSheetEngine;
    TempStr             reportCaption;

    protected const str bodyType_Default = "Def";
    protected const str bodyType_Bold = "Bold";
    protected const str headerType_Default = "HEADER";
    protected const str firstMergeCol = "firstCol";
    protected const str lastMergeCol = "lastCol";
    protected const int firstColumnNum = 0;
    protected const int firstRowNum = 0;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValueInMapMergeBodyColumnInfo</Name>
				<Source><![CDATA[
     /// <summary>
    /// adds column nums into merged columns map
    /// </summary>
    /// <param name="_sMapCode">
    /// column type - map kay
    /// </param>
    /// <param name="_fromColumn">
    /// first merged column num
    /// </param>
    /// <param name="_toColumn">
    /// last merged column num
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addValueInMapMergeBodyColumnInfo(TempStr _sMapCode, int  _fromColumn, int _toColumn)
    {
        Struct      struct;
        Map         map;

        if (! this.checkAddValueInMapMerge(_fromColumn, _toColumn))
            throw Exception::Error;

        if (mapMergeBodyColumnInfo.exists(_sMapCode))
            map = mapMergeBodyColumnInfo.lookup(_sMapCode);
        else
        {
            map  = new Map(Types::Integer, Types::Class);
            mapMergeBodyColumnInfo.insert(_sMapCode, map);
        }

        struct = new Struct(Types::Integer, firstMergeCol, Types::Integer, lastMergeCol);
        struct.value(firstMergeCol, _fromColumn);
        struct.value(lastMergeCol,  _toColumn);

        map.insert(_fromColumn, struct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAddValueInMapMerge</Name>
				<Source><![CDATA[
    /// <summary>
    /// check merged column nums before adding into merge columns map
    /// </summary>
    /// <param name="_fromColumn">
    /// first merged column num
    /// </param>
    /// <param name="_toColumn">
    /// last merged column num
    /// </param>
    /// <returns>
    /// true, if check passed ok, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkAddValueInMapMerge(int  _fromColumn, int _toColumn)
    {
        boolean     bRet = true;

        if (_fromColumn > _toColumn)
        {
            bRet = false;
            error("@GLS110498");
        }

        if (setNotPrintColumn.in(_fromColumn))
        {
            bRet = false;
            error("@GLS110499");
        }

        if (!this.isRepeatableCorrect(_fromColumn, _toColumn))
        {
            bRet = false;
            error("@GLS110501");
        }

        if (_toColumn > this.numLastCol())
        {
            bRet = false;
            error("@GLS110500");
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>choiceBodySection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Chooses report section depending on current raw data
    /// </summary>
    /// <param name="_mapBuff">
    /// current raw data
    /// </param>
    /// <returns>
    /// section bookmark
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Bookmark choiceBodySection(Map _mapBuff)
    {
        return bodyType_Default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSetNotPrintColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Set with not printable columns
    /// </summary>
    /// <param name="_conNotPrintColumn">
    /// container with non-printable columns numbers
    /// </param>
    /// <returns>
    /// Set with not printable columns
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Set createSetNotPrintColumn(container  _conNotPrintColumn)
    {
        Set     retSet;
        int     cx, iCnt, val;

        retSet = new Set(Types::Integer);

        if (_conNotPrintColumn != connull())
        {
            iCnt = conlen(_conNotPrintColumn);

            for (cx = 1; cx <= iCnt; cx++)
            {
                val = conpeek(_conNotPrintColumn, cx);
                retSet.add(val);
            }
        }

        return retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchRowIntoBuff_Next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetchs next raw data into map
    /// </summary>
    /// <returns>
    /// map filled with raw data
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map fetchRowIntoBuff_Next()
    {
        FormListItem    formListItem;

        Map             map = null;
        int             idx, cx, iCntColumn, maxFormListControlNum;

        maxFormListControlNum  = formListControl.getCount() - 1;

        if ((fetchedRow >= maxFormListControlNum))
            //There aren't data for printed
            return null;

        iCntColumn = formListControl.getColumnCount();

        if (canFetchItem)
        {
            idx = formListControl.getNextItem(FormListNext::All, fetchedItemIdx);

            if (idx > -1)
            {
                fetchedRow++;
                fetchedItemIdx = idx;
                map            = new Map(Types::Integer, Types::String);

                //Read row into buffer
                for (cx = firstColumnNum; cx < iCntColumn; cx++)
                {
                    formListItem = formListControl.getItem(fetchedItemIdx, cx);
                    map.insert(cx, formListItem.text());
                }
            }
            else
                canFetchItem = false;
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchRowIntoBuff_Start</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits fetch variables before first fetch
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fetchRowIntoBuff_Start()
    {
        canFetchItem   = true;
        fetchedItemIdx = -1;
        fetchedRow     = firstRowNum - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetchs raw data into map
    /// </summary>
    /// <param name="_numFetchRow">
    /// raw number to be fetched
    /// </param>
    /// <returns>
    /// map filled with raw data
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map getBuffer(int _numFetchRow)
    {
        Map     map, mapNextRow;
        int     row = 0;

        void readNextRow()
        {
            if (! readLastRowIntoBuffer)
            {
                row += 1;

                if (! mapRowBuff.exists(row))
                {
                    mapNextRow = this.fetchRowIntoBuff_Next();

                    this.insertIntoMap(mapNextRow,row);
                }
            }
        }

        row = _numFetchRow;

        if (mapRowBuff.exists(row))
        {
            map = mapRowBuff.lookup(row);
        }
        else
        {
            if (readLastRowIntoBuffer)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            map = this.fetchRowIntoBuff_Next();
            this.insertIntoMap(map,row);
        }

        readNextRow();
        readNextRow();

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays report title
    /// </summary>
    /// <returns>
    /// Report title
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TempStr getReportTitle()
    {
        return reportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapMergeControlInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// inits merged columns map by report columns
    /// </summary>
    /// <remarks>
    /// use method addValueInMapMergeBodyColumnInfo to add merged columns in overriden methods
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initMapMergeControlInfo()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMap</Name>
				<Source><![CDATA[
        private void insertIntoMap(Map _map,int _row)
    {
        if (_map)
        {
            mapRowBuff.insert(_row, _map);
        }
        else
        {
            readLastRowIntoBuffer = true;
            numLastRowBuffer = _row - 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether raw is last in the report
    /// </summary>
    /// <param name="_row">
    /// total num of raws filled
    /// </param>
    /// <returns>
    /// true, if raw is last in the report, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isLastRow(int _row)
    {
        return (readLastRowIntoBuffer) && (_row >= numLastRowBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRepeatableCorrect</Name>
				<Source><![CDATA[
    /// <summary>
    /// check repeatable column nums before adding into merge columns map
    /// </summary>
    /// <param name="_fromColumn">
    /// first merged column num
    /// </param>
    /// <param name="_toColumn">
    /// last merged column num
    /// </param>
    /// <returns>
    /// true, if check passed ok, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isRepeatableCorrect(int _fromColumn, int _toColumn)
    {
        int     cx, iTmp, iLen;

        if (conRepeatableColumn == connull())
            //There aren't columns repeatable, so there are no spaces
            return true;

        iLen = conlen(conRepeatableColumn);

        for (cx = 1; cx <= iLen - 1; cx++)
        {
            iTmp = conpeek(conRepeatableColumn, cx);

            if ((iTmp >= _fromColumn) && (iTmp <= _toColumn))
                return false;
        }

        iTmp = conpeek(conRepeatableColumn, iLen);

        return (iTmp <= _fromColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numLastCol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines total number of report columns
    /// </summary>
    /// <returns>
    /// total number of report columns
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int numLastCol()
    {
        return formListControl.getColumnCount() + firstColumnNum - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs report
    /// </summary>
    public void run()
    {
        FormListColumn  formListColumn;
        int             iCount, cx;

        readLastRowIntoBuffer   = false;
        numLastRowBuffer        = 0;

        mapRowBuff = new Map(Types::Integer, Types::Class); //Reset buffer of data

        //Create MAP of title columns
        mapHeaderBuff = new Map(Types::Integer, Types::String);

        iCount = formListControl.getColumnCount();

        for (cx = 0; cx < iCount; cx++)
        {
            formListColumn = formListControl.getColumn(cx);
            mapHeaderBuff.insert(cx, formListColumn.text());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance variables.
    /// </summary>
    /// <param name="_formListControl">
    /// RLedgerSheet form list control.
    /// </param>
    /// <param name="_rLedgerSheetEngine">
    /// <c>RLedgerSheetEngine</c> class instance.
    /// </param>
    /// <param name="_reportTitle">
    /// Report title.
    /// </param>
    /// <param name="_reportCaption">
    /// Report caption.
    /// </param>
    /// <param name="_conRepeatableColumn">
    /// Container with repeatable columns; optional.
    /// </param>
    /// <param name="_conNotPrintColumn">
    /// Containter with non-printable columns; optional.
    /// </param>
    /// <param name="_paramIntoReport">
    /// Into report object; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws exception if _formListControl parameter is not specified.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setParameters(FormListControl         _formListControl,
                              RLedgerSheetEngine      _rLedgerSheetEngine,
                              TempStr                 _reportTitle,
                              TempStr                 _reportCaption,
                              container               _conRepeatableColumn   = [0],
                              container               _conNotPrintColumn     = connull(),
                              Object                  _paramIntoReport       = null)
    {
        if (!_formListControl)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        rLedgerSheetEngine = _rLedgerSheetEngine;
        reportCaption      = _reportCaption;

        paramIntoReport     = _paramIntoReport;
        formListControl     = _formListControl;
        reportTitle         = _reportTitle;

        conRepeatableColumn    = _conRepeatableColumn;
        setNotPrintColumn      = this.createSetNotPrintColumn(_conNotPrintColumn);
        mapMergeBodyColumnInfo = new Map(Types::String, Types::Class);

        //Create MAP of "body" sections
        this.initMapMergeControlInfo();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>