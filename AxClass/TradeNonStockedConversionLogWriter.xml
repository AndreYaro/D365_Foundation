<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionLogWriter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeNonStockedConversionLogWriter</c> class writes entries in the conversion logs.
/// </summary>
class TradeNonStockedConversionLogWriter
{
    TradeNonStockedConversionItem           tradeNonStockedConversionItem;
    TradeNonStockedCurrentItemModelGroupId  originalItemModelGroupId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initiates a log record in the <c>TradeNonStockedConversionLog</c> table.
    /// </summary>
    /// <param name="_tradeNonStockedConversionLog">
    ///   A <c>TradeNonStockedConversionLog</c> record.
    /// </param>
    /// <param name="_refTableId">
    ///   The ID of the related table.
    /// </param>
    /// <param name="_refFieldId">
    ///  The ID of the related field.
    /// </param>
    /// <param name="_identifyingAttributeValue">
    ///  The value of the related field.
    /// </param>
    /// <param name="_refParentTableId">
    ///  The ID of the related parent table; optional.
    /// </param>
    /// <param name="_parentIdentifyingAttributeValue">
    ///  The value of the related parent record; optional.
    /// </param>
    private void initLog(
        TradeNonStockedConversionLog                _tradeNonStockedConversionLog,
        RefTableId                                  _refTableId,
        FieldId                                     _refFieldId,
        TradeNonStockedIdentifyingAttributeValue    _identifyingAttributeValue,
        RefTableId                                  _refParentTableId = 0,
        TradeNonStockedIdentifyingAttributeValue    _parentIdentifyingAttributeValue = '')
    {
        TradeNonStockedConversionLogParent  tradeNonStockedConversionLogParent;

        if (_refParentTableId)
        {
            tradeNonStockedConversionLogParent = this.writeLogParent(_refParentTableId, _parentIdentifyingAttributeValue);
        }

        _tradeNonStockedConversionLog.IdentifyingTable          = _refTableId;
        _tradeNonStockedConversionLog.IdentifyingField          = _refFieldId;
        _tradeNonStockedConversionLog.IdentifyingAttributeValue = _identifyingAttributeValue;
        _tradeNonStockedConversionLog.initFromTradeNonStockedConversionItem(this.parmTradeNonStockedConversionItem());
        _tradeNonStockedConversionLog.initFromTradeNonStockedConvertLogParent(tradeNonStockedConversionLogParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalItemModelGroupId</Name>
				<Source><![CDATA[
        public TradeNonStockedCurrentItemModelGroupId parmOriginalItemModelGroupId(TradeNonStockedCurrentItemModelGroupId _originalItemModelGroupId = originalItemModelGroupId)
    {
        originalItemModelGroupId = _originalItemModelGroupId;
        return originalItemModelGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversionItem</Name>
				<Source><![CDATA[
        public TradeNonStockedConversionItem parmTradeNonStockedConversionItem(TradeNonStockedConversionItem _tradeNonStockedConversionItem = tradeNonStockedConversionItem)
    {
        tradeNonStockedConversionItem = _tradeNonStockedConversionItem;
        return tradeNonStockedConversionItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeChangeLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a log record in the <c>TradeNonStockedConversionChangeLog</c> table.
    /// </summary>
    /// <param name="_changeType">
    /// An element in the <c>TradeNonStockedConversionChangeType</c> enumeration.
    /// </param>
    /// <param name="_refTableId">
    /// The ID of the related table.
    /// </param>
    /// <param name="_refFieldId">
    /// The ID of the related field.
    /// </param>
    /// <param name="_identifyingAttributeValue">
    /// The value of the related field.
    /// </param>
    /// <param name="_refParentTableId">
    /// The ID of the related parent table; optional.
    /// </param>
    /// <param name="_parentIdentifyingAttributeValue">
    /// The value of the related parent record; optional.
    /// </param>
    public void writeChangeLog(
        TradeNonStockedConversionChangeType         _changeType,
        RefTableId                                  _refTableId,
        FieldId                                     _refFieldId,
        TradeNonStockedIdentifyingAttributeValue    _identifyingAttributeValue,
        RefTableId                                  _refParentTableId = 0,
        TradeNonStockedIdentifyingAttributeValue    _parentIdentifyingAttributeValue = '')
    {
        TradeNonStockedConversionChangeLog tradeNonStockedConvesionChangeLog;
        TradeNonStockedCurrentItemModelGroupId itemModelGroup;
        ttsbegin;
        this.initLog(tradeNonStockedConvesionChangeLog,
                     _refTableId,
                     _refFieldId,
                     _identifyingAttributeValue,
                     _refParentTableId,
                     _parentIdentifyingAttributeValue);

        tradeNonStockedConvesionChangeLog.ChangeType = _changeType;
        tradeNonStockedConvesionChangeLog.ConvertedDateTime = DateTimeUtil::utcNow();
        itemModelGroup = this.parmOriginalItemModelGroupId() ? this.parmOriginalItemModelGroupId() : this.parmTradeNonStockedConversionItem().currentItemModelGroup();
        tradeNonStockedConvesionChangeLog.OriginalItemModelGroupId          = itemModelGroup;
        tradeNonStockedConvesionChangeLog.OriginalItemModelGroupDataAreaId  = getCompany(tableNum(InventModelGroup), this.parmTradeNonStockedConversionItem().legalEntity().DataArea);
        tradeNonStockedConvesionChangeLog.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCheckLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a log record in the <c>TradeNonStockedConversionCheckLog</c> table.
    /// </summary>
    /// <param name="_issueType">
    /// An element in the <c>TradeNonStockedConversionIssue</c> enumeration type.
    /// </param>
    /// <param name="_refTableId">
    /// The ID of the related table.
    /// </param>
    /// <param name="_refFieldId">
    /// The ID of the related field.
    /// </param>
    /// <param name="_identifyingAttributeValue">
    /// The value of the related field.
    /// </param>
    /// <param name="_refParentTableId">
    /// The ID of the related parent table; optional.
    /// </param>
    /// <param name="_parentIdentifyingAttributeValue">
    /// The value of the related parent record; optional.
    /// </param>
    public void writeCheckLog(
        TradeNonStockedConversionIssue              _issueType,
        RefTableId                                  _refTableId,
        FieldId                                     _refFieldId,
        TradeNonStockedIdentifyingAttributeValue    _identifyingAttributeValue,
        RefTableId                                  _refParentTableId = 0,
        TradeNonStockedIdentifyingAttributeValue    _parentIdentifyingAttributeValue = '')
    {
        TradeNonStockedConversionCheckLog   tradeNonStockedConversionCheckLog;

        ttsbegin;
        this.initLog(tradeNonStockedConversionCheckLog,
                     _refTableId,
                     _refFieldId,
                     _identifyingAttributeValue,
                     _refParentTableId,
                     _parentIdentifyingAttributeValue);

        tradeNonStockedConversionCheckLog.IssueType                 = _issueType;
        tradeNonStockedConversionCheckLog.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a log record in the <c>TradeNonStockedConversionLogParent</c> table.
    /// </summary>
    /// <param name="_refTableId">
    ///   The ID of the related table.
    /// </param>
    /// <param name="_identifyingAttributeValue">
    ///   The value of the related record.
    /// </param>
    /// <returns>
    ///   A <c>TradeNonStockedConversionLogParent</c> record.
    /// </returns>
    protected TradeNonStockedConversionLogParent writeLogParent(
        RefTableId                                  _refTableId,
        TradeNonStockedIdentifyingAttributeValue    _identifyingAttributeValue)
    {
        TradeNonStockedConversionLogParent  tradeNonStockedConversionLogParent;

        if (_refTableId)
        {
            tradeNonStockedConversionLogParent = TradeNonStockedConversionLogParent::findIdentifying(_refTableId, _identifyingAttributeValue);
            if (!tradeNonStockedConversionLogParent)
            {
                tradeNonStockedConversionLogParent.IdentifyingTable = _refTableId;
                tradeNonStockedConversionLogParent.IdentifyingAttributeValue = _identifyingAttributeValue;
                tradeNonStockedConversionLogParent.insert();
            }
        }

        return tradeNonStockedConversionLogParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static TradeNonStockedConversionLogWriter construct()
    {
        return new TradeNonStockedConversionLogWriter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLogWriter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>TradeNonStockedConversionLogWriter</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversionItem">
    /// A <c>TradeNonStockedConversionItem</c> table record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>TradeNonStockedConversionLogWriter</c> class.
    /// </returns>
    static public TradeNonStockedConversionLogWriter newLogWriter(TradeNonStockedConversionItem _tradeNonStockedConversionItem)
    {
        TradeNonStockedConversionLogWriter tradeNonStockedConversionLogWriter = TradeNonStockedConversionLogWriter::construct();

        tradeNonStockedConversionLogWriter.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);
        return tradeNonStockedConversionLogWriter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>