<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CurrencyLedgerGainLossAccountFormAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CurrencyLedgerGainLossAccountFormAppSuite_Extension</c> class is the extension class of the <c>CurrencyLedgerGainLossAccount</c> form.
/// </summary>
[ExtensionOf(formStr(CurrencyLedgerGainLossAccount))]
public final class CurrencyLedgerGainLossAccountFormAppSuite_Extension
{
    private boolean ledgerSupportsGainLossFromNetValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillLedgerDimensionGrid</Name>
				<Source><![CDATA[
    public void fillLedgerDimensionGrid()
    {
        ledgerSupportsGainLossFromNetValue = CurrencyLedgerGainLossAccount_PL::ledgerSupportsGainLossFromNetValue(LedgerId.value());
        next fillLedgerDimensionGrid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSupportsGainLossFromNetValue</Name>
				<Source><![CDATA[
    public boolean ledgerSupportsGainLossFromNetValue()
    {
        return ledgerSupportsGainLossFromNetValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTable</Name>
				<Source><![CDATA[
    public Ledger ledgerTable()
    {
        return ledgerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        next run();

        if (CurrencyLedgerGainLossFromNetValueFeature_PL::isEnabled())
        {
            TmpCurrencyLedgerGainLossAccount_ExchAdjTaxable_RU.delete(enum2str(ExchAdjTaxableType_W::Tax));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    public void populateTmpTable(CurrencyCode _currencyCode, RefRecId _ledger)
    {
        ttsbegin;

        next populateTmpTable(_currencyCode, _ledger);

        if (CurrencyLedgerGainLossFromNetValueFeature_PL::isEnabled() && ledgerSupportsGainLossFromNetValue)
        {
            CurrencyLedgerGainLossAccount currencyLedgerGainLossAccount;
            CurrencyLedgerGainLossAccount_PL currencyLedgerGainLossAccount_PL;
            TmpCurrencyLedgerGainLossAccount tmpCurrencyLedgerGainLossAccountLoc;

            tmpCurrencyLedgerGainLossAccountLoc.linkPhysicalTableInstance(TmpCurrencyLedgerGainLossAccount);

            while select currencyLedgerGainLossAccount
                where currencyLedgerGainLossAccount.CurrencyCode == _currencyCode
                   && currencyLedgerGainLossAccount.Ledger == _ledger
            join currencyLedgerGainLossAccount_PL
                where currencyLedgerGainLossAccount_PL.CurrencyLedgerGainLossAccount == currencyLedgerGainLossAccount.RecId
            {
                select firstonly forupdate tmpCurrencyLedgerGainLossAccountLoc
                    where tmpCurrencyLedgerGainLossAccountLoc.CurrencyLedgerGainLossAccount == currencyLedgerGainLossAccount.RecId;

                if (tmpCurrencyLedgerGainLossAccountLoc)
                {
                    tmpCurrencyLedgerGainLossAccountLoc.ExchAdjTaxable_RU = currencyLedgerGainLossAccount_PL.ExchAdjTaxableType;
                    tmpCurrencyLedgerGainLossAccountLoc.TaxLedgerDimension_RU = currencyLedgerGainLossAccount_PL.RealizedTaxLedgerDimension;
                    tmpCurrencyLedgerGainLossAccountLoc.TaxAccountName_RU =
                        MainAccount::getLocalizedNameByMainAccountId(
                            LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(tmpCurrencyLedgerGainLossAccountLoc.TaxLedgerDimension_RU), ledgerTable.ChartOfAccounts);
                    tmpCurrencyLedgerGainLossAccountLoc.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>