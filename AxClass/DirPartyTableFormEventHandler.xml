<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyTableFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class DirPartyTableFormEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RelationsTabPagePageActivatedGlobal</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(DirPartyTable, RelationsTabPage), FormControlEventType::PageActivated)]
    public static void RelationsTabPagePageActivatedGlobal(FormControl control, FormControlEventArgs e)
    {
        FormRun         form = control.formRun();
        FormGridControl relationsGrid = form.design().controlName(formcontrolstr(DirPartyTable, RelationsGrid));

        form.refreshHeaderTabPage();
        relationsGrid.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirRelationshipViewModifiedGlobal</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(DirPartyTable, DirRelationshipView), FormControlEventType::Modified)]
    public static void DirRelationshipViewModifiedGlobal(FormControl control, FormControlEventArgs e)
    {
        FormRun             form = control.formRun();
        FormDesign          design = form.design();
        FormGroupControl    childToParentGroup = design.controlName(formcontrolstr(DirPartyTable, ChildToParentGroup));
        FormGroupControl    parentToChildGroup = design.controlName(formcontrolstr(DirPartyTable, ParentToChildGroup));
        FormComboBoxControl dirRelationshipView = control as FormComboBoxControl;

        childToParentGroup.visible(dirRelationshipView.selection() == DirRelationshipView::ChildToParent);
        parentToChildGroup.visible(dirRelationshipView.selection() == DirRelationshipView::ParentToChild);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DateEffectiveExpiredModifiedGlobal</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(DirPartyTable, DateEffectiveExpired), FormControlEventType::Modified)]
    public static void DateEffectiveExpiredModifiedGlobal(FormControl control, FormControlEventArgs e)
    {
        DirPartyTableFormEventHandler::updateDirPartyRelationshipRanges(control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DateEffectiveActiveModifiedGlobal</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(DirPartyTable, DateEffectiveActive), FormControlEventType::Modified)]
    public static void DateEffectiveActiveModifiedGlobal(FormControl control, FormControlEventArgs e)
    {
        DirPartyTableFormEventHandler::updateDirPartyRelationshipRanges(control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DateEffectiveFutureModifiedGlobal</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(DirPartyTable, DateEffectiveFuture), FormControlEventType::Modified)]
    public static void DateEffectiveFutureModifiedGlobal(FormControl control, FormControlEventArgs e)
    {
        DirPartyTableFormEventHandler::updateDirPartyRelationshipRanges(control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_Post_refreshHeaderTabPage</Name>
				<Source><![CDATA[
    [PostHandlerFor(formstr(DirPartyTable), formmethodstr(DirPartyTable, refreshHeaderTabPage))]
    public static void DirPartyTable_Post_refreshHeaderTabPage(XppPrePostArgs args)
    {
        FormRun             form = args.getThis();
        FormDataSource      dirPartyRelationship_ds = form.dataSource(formdatasourcestr(DirPartyTable, DirPartyRelationship)) as FormDataSource;
        FormTabPageControl  relationsTabPage = form.design().controlName(formcontrolstr(DirPartyTable, RelationsTabPage));

        if (relationsTabPage.isActivePage() && (form.getCreatingNewParty()|| form.getDirPartyTableRecId()))
        {
            form.updateRange(dirPartyRelationship_ds);
            dirPartyRelationship_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_Post_updateControls</Name>
				<Source><![CDATA[
    [PostHandlerFor(formstr(DirPartyTable), formmethodstr(DirPartyTable, updateControls))]
    public static void DirPartyTable_Post_updateControls(XppPrePostArgs args)
    {
        #ISOCountryRegionCodes

        FormRun         form = args.getThis();
        FormDesign      design = form.design();
        DirPartyRecId   dirPartyTableRecId  = form.getDirPartyTableRecId();
        DirPartyType    dirPartyTableType   = form.getDirPartyTableType();

        if (dirPartyTableRecId)
        {
            FormFunctionButtonControl setupHcmWorkerButton  = design.controlName(formcontrolstr(DirPartyTable, SetupHcmWorkerButton));

            setupHcmWorkerButton.enabled(dirPartyTableType == DirPartyType::Person);
            if (dirPartyTableType == DirPartyType::Person)
            {
                if (DirPartyTableHelper::isWorker(dirPartyTableRecId))
                {
                    // Employee record already created
                    setupHcmWorkerButton.enabled(false);
                }
            }

            FormFunctionButtonControl hcmApplicantNew   = design.controlName(formcontrolstr(DirPartyTable, HcmApplicantNew));
            // Enable Applicant button if Party record is a person and doesn't have an existing applicant role
            if (dirPartyTableRecId && dirPartyTableType == DirPartyType::Person && !DirPartyTableHelper::isApplicant(dirPartyTableRecId))
            {
                hcmApplicantNew.enabled(true);
            }
            else
            {
                hcmApplicantNew.enabled(false);
            }

            FormFunctionButtonControl custTableNew          = design.controlName(formcontrolstr(DirPartyTable, SetupCustTableButton));
            FormFunctionButtonControl vendTableNew          = design.controlName(formcontrolstr(DirPartyTable, VendTableNew));
            FormFunctionButtonControl smmBusRelTableNew     = design.controlName(formcontrolstr(DirPartyTable, SmmBusRelTableNew));
            FormFunctionButtonControl setupCategoryButton   = design.controlName(formcontrolstr(DirPartyTable, SetupCategoryButton));

            custTableNew.enabled(!DirPartyTableHelper::isCustomer(dirPartyTableRecId));
            boolean isVendor = DirPartyTableHelper::isvendor(dirPartyTableRecId);
            vendTableNew.enabled(!isVendor);
            smmBusRelTableNew.enabled(!DirPartyTableHelper::isRelation(dirPartyTableRecId));
            setupCategoryButton.enabled(isVendor);

            smmQuotationCompetitorGroup smmQuotationCompetitorGroup;
            FormFunctionButtonControl   smmQuotationCompetitorGroupNew  = design.controlName(formcontrolstr(DirPartyTable, SmmQuotationCompetitorGroupNew));

            select firstonly RecId from smmQuotationCompetitorGroup
                where smmQuotationCompetitorGroup.Party == dirPartyTableRecId;
            smmQuotationCompetitorGroupNew.enabled(smmQuotationCompetitorGroup.RecId ? false : true);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            boolean isOrganization = dirPartyTableType == DirPartyType::Organization;

            FormFunctionButtonControl setupOtherClientsButton   = design.controlName(formcontrolstr(DirPartyTable, SetupOtherClientsButton));
            FormFunctionButtonControl dirPartyCheckDuplicate    = design.controlName(formcontrolstr(DirPartyTable, DirPartyCheckDuplicate));

            setupOtherClientsButton.visible(true);
            setupOtherClientsButton.enabled(isOrganization);

            if (isOrganization && LvOtherClients::findByOrganization(dirPartyTableRecId))
            {
                dirPartyCheckDuplicate.enabled(false);
            }
            else
            {
                dirPartyCheckDuplicate.enabled(true);
            }
        }

        FormFunctionButtonControl alcoholLicenseRelTable_RU = design.controlName(formcontrolstr(DirPartyTable, AlcoholLicenseRelTable_RU));

        alcoholLicenseRelTable_RU.enabled(dirPartyTableType == DirPartyType::LegalEntity || dirPartyTableType == DirPartyType::Organization);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDirPartyRelationshipRanges</Name>
				<Source><![CDATA[
    private static void updateDirPartyRelationshipRanges(FormControl control)
    {
        FormRun             form = control.formRun();
        FormDataSource      dirPartyRelationship_ds = form.dataSource(formdatasourcestr(DirPartyTable, DirPartyRelationship)) as FormDataSource;
        FormDesign          design = form.design();
        FormCheckBoxControl dateEffectiveActive = design.controlName(formcontrolstr(DirPartyTable, DateEffectiveActive));
        FormCheckBoxControl dateEffectiveExpired = design.controlName(formcontrolstr(DirPartyTable, DateEffectiveExpired));
        FormCheckBoxControl dateEffectiveFuture = design.controlName(formcontrolstr(DirPartyTable, DateEffectiveFuture));

        QueryBuildDataSource    qbd = dirPartyRelationship_ds.query().dataSourceTable(tableNum(DirPartyRelationship));
        QueryBuildRange         qbRangeFrom = SysQuery::findOrCreateRange(qbd, fieldNum(DirPartyRelationship, ValidFrom));

        str qRange = strFmt(DateEffectivenessCheck::queryRange(dateEffectiveActive.checked(),
                                                                dateEffectiveExpired.checked(),
                                                                dateEffectiveFuture.checked()),
                                                                qbd.name(),
                                                                fieldStr(DirPartyRelationship, ValidFrom),
                                                                fieldStr(DirPartyRelationship, ValidTo),
                                                                DateEffectivenessCheck::queryDate());

        qbRangeFrom.value(qRange);

        dirPartyRelationship_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_Post_updateQuery</Name>
				<Source><![CDATA[
    [PostHandlerFor(formstr(DirPartyTable), formmethodstr(DirPartyTable, updateQuery))]
    public static void DirPartyTable_Post_updateQuery(XppPrePostArgs args)
    {
        FormRun             form = args.getThis();
        FormDataSource      dirPartyTable_ds = form.dataSource(formdatasourcestr(DirPartyTable, DirPartyTable)) as FormDataSource;
        FormComboBoxControl roleView = form.design().controlName(formcontrolstr(DirPartyTable, RoleView));

        Query query = dirPartyTable_ds.query();

        QueryBuildDataSource qbds = query.dataSourceName(dirPartyTable_ds.name());

        QueryBuildDataSource qbdsDirPartyView = query.dataSourceTable(tablenum(DirPartyView), 1);

        if (!qbdsDirPartyView)
        {
            qbdsDirPartyView = qbds.addDataSource(tableStr(DirPartyView));
            qbdsDirPartyView.addLink(fieldNum(DirPartyTable, RecId), fieldNum(DirPartyView, Party), dirPartyTable_ds.name());
            qbdsDirPartyView.joinMode(JoinMode::ExistsJoin);
        }
        qbdsDirPartyView.enabled(true);

        QueryBuildDataSource qbdsDirPartyView2 = query.dataSourceTable(tablenum(DirPartyView), 2);
        if (!qbdsDirPartyView2)
        {
            qbdsDirPartyView2 = qbds.addDataSource(tableStr(DirPartyView));
            qbdsDirPartyView2.addLink(fieldNum(DirPartyTable, RecId), fieldNum(DirPartyView, Party), dirPartyTable_ds.name());
            qbdsDirPartyView2.joinMode(JoinMode::ExistsJoin);
        }
        qbdsDirPartyView2.enabled(true);

        QueryBuildRange partyRoleTypeRange = SysQuery::findOrCreateRange(qbdsDirPartyView, fieldNum(DirPartyView, unionAllBranchId));
        QueryBuildRange partyRoleTypeRange2 = SysQuery::findOrCreateRange(qbdsDirPartyView2, fieldNum(DirPartyView, unionAllBranchId));

        switch (roleView.selection())
        {
            case DirPartyRoleView::CustomersOnly :
                partyRoleTypeRange.value(queryValue(1));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::VendorsOnly :
                partyRoleTypeRange.value(queryValue(2));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::BusinessRelationsOnly :
                partyRoleTypeRange.value(queryValue(3));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::ContactsOnly :
                partyRoleTypeRange.value(queryValue(4));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::CompetitorsOnly :
                partyRoleTypeRange.value(queryValue(5));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::EmployeesOnly :
                partyRoleTypeRange.value(queryValue(6));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::ApplicantsOnly :
                partyRoleTypeRange.value(queryValue(7));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::ProspectiveVendorsOnly :
                partyRoleTypeRange.value(queryValue(9));
                qbdsDirPartyView2.enabled(false);
                break;

            case DirPartyRoleView::ExclusiveEmployeeAndApplicant :
                partyRoleTypeRange.value(queryValue(6));
                partyRoleTypeRange2.value(queryValue(7));
                break;

            case DirPartyRoleView::ExclusiveBusRelAndCustomer :
                partyRoleTypeRange.value(queryValue(3));
                partyRoleTypeRange2.value(queryValue(1));
                break;

            case DirPartyRoleView::ExclusiveBusRelAndVendor :
                partyRoleTypeRange.value(queryValue(3));
                partyRoleTypeRange2.value(queryValue(2));
                break;

            case DirPartyRoleView::ExclusiveCustomerAndEmployee :
                partyRoleTypeRange.value(queryValue(1));
                partyRoleTypeRange2.value(queryValue(6));
                break;

            case DirPartyRoleView::ExclusiveCustomerAndVendor :
                partyRoleTypeRange.value(queryValue(1));
                partyRoleTypeRange2.value(queryValue(2));
                break;

            case DirPartyRoleView::ExclusiveEmployeeAndVendor :
                partyRoleTypeRange.value(queryValue(6));
                partyRoleTypeRange2.value(queryValue(2));
                break;

            default :
                DirPartyTableFormEventHandler::setRangeForAdditionalRoleRange(partyRoleTypeRange, partyRoleTypeRange2, qbdsDirPartyView, qbdsDirPartyView2);
                DirPartyTableFormRoleViewRange::additionalRoleRanges(roleView.selection(), partyRoleTypeRange, partyRoleTypeRange2, qbdsDirPartyView, qbdsDirPartyView2);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeForAdditionalRoleRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets range for additional role ranges that are not handles in DirPartyTable_Post_updateQuery().
    /// </summary>
    /// <param name="_partyRoleTypeRange">
    /// Query build range for <c>unionAllBranchId</c> field of <c>DirPartyView</c> for occurence 1.
    /// </param>
    /// <param name="_partyRoleTypeRange2">
    /// Query build range for <c>unionAllBranchId</c> field of <c>DirPartyView</c> for occurence 2.
    /// </param>
    /// <param name="_qbdsDirPartyView">
    /// The datasourcetable for table <c>DirPartyView</c> for occurrence 1.
    /// </param>
    /// <param name="_qbdsDirPartyView2">
    /// The datasourcetable for table <c>DirPartyView</c> for occurrence 2.
    /// </param>
    protected static void setRangeForAdditionalRoleRange(QueryBuildRange _partyRoleTypeRange, QueryBuildRange _partyRoleTypeRange2, QueryBuildDataSource _qbdsDirPartyView, QueryBuildDataSource _qbdsDirPartyView2)
    {
        _partyRoleTypeRange.value(SysQuery::valueUnlimited());
        _qbdsDirPartyView.enabled(false);

        _partyRoleTypeRange2.value(SysQuery::valueUnlimited());
        _qbdsDirPartyView2.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RoleView_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(DirPartyTable, RoleView), FormControlEventType::Modified)]
    public static void RoleView_OnModified(FormControl sender, FormControlEventArgs e)
    {
        XppPrePostArgs updateQueryArgs = new XppPrePostArgs(sender.formRun(), '', XppEventHandlerCalledWhen::Post);
        DirPartyTableFormEventHandler::DirPartyTable_Post_updateQuery(updateQueryArgs);

        FormRun         form = sender.formRun();
        FormDataSource  dirPartyTable_ds = form.dataSource(formdatasourcestr(DirPartyTable, DirPartyTable)) as FormDataSource;

        if (dirPartyTable_ds)
        {
            dirPartyTable_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyRelationship_RelationTypeId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup operation for field RelationTypeId while filtering the <c>DirPartyRelationshipType</c> items that are only used for XDS.
    /// </summary>
    /// <param name = "sender"></param>
    /// <param name = "e"></param>
    [FormControlEventHandler(formControlStr(DirPartyTable, DirPartyRelationship_RelationTypeId), FormControlEventType::Lookup)]
    public static void DirPartyRelationship_RelationTypeId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        SysTableLookup          relationsLookup;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        Query                   query = new Query();
        // Fields between Customer (29) and ProspectiveContInLE (40) are only used for XDS and should not be available in the lookup.
        str                     filterValues = "(%1 != %2) && (%1 != %3) && (%1 != %4) && (%1 != %5) && (%1 != %6) && (%1 != %7) && " +
                                               "(%1 != %8) && (%1 != %9) && (%1 != %10) && (%1 != %11) && (%1 != %12) && (%1 != %13)";

        relationsLookup = SysTableLookup::newParameters(tableNum(DirRelationshipTypeTable), sender, true);
        relationsLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, RelationshipTypeId));
        relationsLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, Description));
        relationsLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ChildPartyType));
        relationsLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ParentPartyType));
        relationsLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ChildParentName));
        relationsLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ParentChildName));

        qbd = query.addDataSource(tableNum(DirRelationshipTypeTable));
        qbr = qbd.addRange(fieldNum(DirRelationshipTypeTable, SystemType));

        str columnName = strFmt("%1.%2", qbd.name(), fieldStr(DirRelationshipTypeTable, SystemType));
        qbr.value(strFmt(filterValues, columnName,
            enum2int(DirSystemRelationshipType::Customer),
            enum2int(DirSystemRelationshipType::Vendor),
            enum2int(DirSystemRelationshipType::Prospect),
            enum2int(DirSystemRelationshipType::Competitor),
            enum2int(DirSystemRelationshipType::Worker),
            enum2int(DirSystemRelationshipType::Applicant),
            enum2int(DirSystemRelationshipType::DisallowedVendor),
            enum2int(DirSystemRelationshipType::ProspectiveVendInLE),
            enum2int(DirSystemRelationshipType::ContactPersonInLE),
            enum2int(DirSystemRelationshipType::PersonalContactInLE),
            enum2int(DirSystemRelationshipType::PartyInLE),
            enum2int(DirSystemRelationshipType::ProspectiveContInLE)));

        qbr.status(RangeStatus::Hidden);

        relationsLookup.parmQuery(query);
        relationsLookup.performFormLookup();

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>