<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PurchRFQTotals extends TradeTotals
{
    PurchRFQUpdate specQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateFreeValue</Name>
				<Source><![CDATA[
    protected AmountCur calculateFreeValue()
    {
        freeValue   = VendTable::find(this.invoiceAccount()).freeValueCur(totalAmount);
        return freeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount cashDiscAmount()
    {
        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(orderTable.TableId, orderTable.RecId))
        {
            totalCashDisc = VendParameters::cashDiscAmount(this.cashDiscCode(), this.currencyCode(), this.totalAmount(), this.totalAmount() - this.totalTaxAmount(), this.cashDiscPercent());
        }
        return totalCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    protected DiscDate cashDiscDate()
    {
        return VendParameters::cashDiscDate(this.cashDiscCode(), this.documentDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    public DiscPct cashDiscPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    protected Weight categoryWeight()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        return TradeTotalsQueryRun::newFromQueryRun(this.queryBuild());
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMax</Name>
				<Source><![CDATA[
    public AmountMST creditMax()
    {
        return VendTable::find(this.invoiceAccount()).CreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate exchRate()
    {
        return ExchangeRateHelper::exchRate(this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary()
    {
        return ExchangeRateHelper::exchRateSecond(this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item module type.
    /// </summary>
    /// <returns>
    /// The item module type for the order.
    /// </returns>
    protected ModuleInventPurchSales itemModuleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        return this.queryGet(lineQueryRun.parmQueryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean lineQueryRunNext(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        return this.nextLine(lineQueryRun.parmQueryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCustVend</Name>
				<Source><![CDATA[
    protected MarkupAmount markupCustVend(Markup _markup)
    {
        return -_markup.markupCustVend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _orderTable,
             PurchRFQUpdate _specQty = PurchRFQUpdate::All)
    {
        super(_orderTable);

        specQty = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    protected boolean nextLine(
        QueryRun    _queryRun)
    {
        return _queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that remains in catch weight units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in catch weight units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected PdsCWInventQty pdsCWQtyRemain()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the order line quantity in catch weight units.
    /// </summary>
    /// <returns>
    /// The order line quantity in catch weight units.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty  qtyInvent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in inventory units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in inventory units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected InventQty qtyInventRemain()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    abstract protected QueryRun  queryBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    abstract protected Common  queryGet(
        QueryRun    _transact)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the round-off amount for purchase.
    /// </summary>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    /// The <c>RoundOff</c> field defined for purchase on the <c>Currency</c> table.
    /// </returns>
    protected RoundOff roundOff(CurrencyCode _currencyCode)
    {
        return Currency::roundOffPurch(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the rounding form for purchase.
    /// </summary>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    /// The <c>RoundOffType</c> field defined for purchase on the <c>Currency</c> table.
    /// </returns>
    protected RoundOffType roundOffType(CurrencyCode _currencyCode)
    {
        return Currency::roundOffTypePurch(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineRecId</Name>
				<Source><![CDATA[
    protected recId sourceLineRecId()
    {
        PurchRFQParmLine   purchRFQParmLine;
        if (orderline.TableId == tablenum(PurchRFQParmLine))
        {
            purchRFQParmLine = orderline;
            return purchRFQParmLine.RFQLineRecId;
        }

        return orderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public EUROTriangulation triangulation()
    {
        return Currency::triangulation(this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQTotals construct(Common           _orderTable,
                                    PurchRFQUpdate   _specQty   = PurchRFQUpdate::All)
    {
        switch (_orderTable.TableId)
        {
            case tableNum(PurchRFQTable)        :   return PurchRFQTotals_Trans::construct(_orderTable, _specQty);
            case tableNum(PurchRFQReplyTable)   :   return PurchRFQTotals_ReplyTrans::construct(_orderTable, _specQty);
            case tableNum(PurchRFQParmTable)    :   return PurchRFQTotals_ParmTrans::construct(_orderTable, _specQty);
            case tableNum(PurchRFQCaseTable)    :   return PurchRFQTotals_CaseTrans::construct(_orderTable, _specQty);
        }
        throw(error(strFmt("@SYS19306", funcName())));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>