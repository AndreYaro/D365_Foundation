<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationCustInvoiceCalcTaxCommon</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>TaxIntegrationCustInvoiceCalcTaxCommon</c> class includes common logic abstracted from core tax (mainly from class <c>CustInvoiceCalcTax_Table</c>),
///  so as to facilitate tax calculation for both tax integration and core tax.
/// </summary>
/// <remarks>
///  Currently, only tax integration calls these methods, but not refactor core tax part, so as to decrease the impact.
///  In future, need to refactor core tax part to call these methods, too.
/// </remarks>
internal final class TaxIntegrationCustInvoiceCalcTaxCommon
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerDimensionOfMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension of markup of <c>CustInvoiceLine</c>.
    /// </summary>
    /// <param name = "_custInvoiceLine">The <c>CustInvoiceLine</c>.</param>
    /// <param name = "_custInvoiceTable">The <c>CustInvoiceTable</c>.</param>
    /// <returns>The <c>DimensionDefault</c>.</returns>
    /// <remarks>
    /// The logic abstracted from CustInvoiceCalcTax_Table::markupDimension.
    /// </remarks>
    internal static DimensionDefault getLedgerDimensionOfMarkup(CustInvoiceLine _custInvoiceLine, CustInvoiceTable _custInvoiceTable)
    {
        if (_custInvoiceLine)
        {
            return _custInvoiceLine.DefaultDimension;
        }

        return _custInvoiceTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationLedgerDimensionOfMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets operation ledger dimension of markup.
    /// </summary>
    /// <param name = "_custInvoiceLine">The <c>CustInvoiceLine</c>.</param>
    /// <param name = "_markupTrans">The <c>MarkupTrans</c>.</param>
    /// <returns>The ledger dimension account.</returns>
    /// <remarks>
    /// The logic abstracted from CustInvoiceCalcTax_Table::operationAccountMarkup.
    /// </remarks>
    internal static LedgerDimensionAccount getOperationLedgerDimensionOfMarkup(CustInvoiceLine _custInvoiceLine, MarkupTrans _markupTrans)
    {
        LedgerDimensionAccount result;
        MarkupTable markupTable = _markupTrans.markupTable();

        switch (markupTable.VendType)
        {
            case MarkupType::Item :
                if (_custInvoiceLine)
                {
                    result = _custInvoiceLine.LedgerDimension;
                }
                break;
            case MarkupType::LedgerAccount :
                result = markupTable.parmVendorLedgerDimension();
                break;

            case MarkupType::CustVend :
                result = markupTable.parmCustomerLedgerDimension();
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingTypeOfMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger posting type of markup.
    /// </summary>
    /// <param name = "_custInvoiceLine">The <c>CustInvoiceLine</c>.</param>
    /// <param name = "_markupTrans">The <c>MarkupTrans</c>.</param>
    /// <returns>The ledger posting type.</returns>
    /// <remarks>
    /// The logic abstracted from CustInvoiceCalcTax_Table::operationPostingMarkup.
    /// </remarks>
    internal static LedgerPostingType getLedgerPostingTypeOfMarkup(CustInvoiceLine _custInvoiceLine, MarkupTrans _markupTrans)
    {
        LedgerPostingType ledgerPostingType;
        switch (_markupTrans.markupTable().VendType)
        {
            case MarkupType::Item:
                if (_custInvoiceLine)
                {
                    ledgerPostingType = TaxIntegrationCustInvoiceCalcTaxCommon::getLedgerPostingTypeOfCustInvoiceLine();
                }
                break;

            case MarkupType::LedgerAccount:
                ledgerPostingType = _markupTrans.markupTable().VendPosting;
                break;

            case MarkupType::CustVend:
                ledgerPostingType = LedgerPostingType::CustBalance;
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingTypeOfCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type of <c>CustInvoiceLine</c>.
    /// </summary>
    /// <returns>The ledger posting type</returns>
    /// <remarks>
    /// The logic abstracted from CustInvoiceCalcTax_Table::operationPosting.
    /// </remarks>
    internal static LedgerPostingType getLedgerPostingTypeOfCustInvoiceLine()
    {
        return LedgerPostingType::CustRevenue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>