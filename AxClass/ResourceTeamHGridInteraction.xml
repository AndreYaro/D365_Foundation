<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResourceTeamHGridInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ResourceTeamHGridInteraction extends ServerInteraction
{
    ResourceTeamHGridSessionContext sessionContext;
    ResourceTeamHGridInteractionContext interactionContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSessionContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set session context for resource team hierarchical grid.
    /// </summary>
    /// <param name = "_sessionContext">Session context.</param>
    public void setSessionContext(HierarchicalGridSessionContext _sessionContext)
    {
        sessionContext = _sessionContext as ResourceTeamHGridSessionContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInteractionContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set interaction context for resource team hierarchical grid.
    /// </summary>
    /// <param name = "_interactionContext">Interaction context.</param>
    public void setInteractionContext(IInteractionContext _interactionContext)
    {
        interactionContext = _interactionContext as ResourceTeamHGridInteractionContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDataRetrievalAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute data retrieval action according to user action.
    /// </summary>
    /// <param name = "_action">User action.</param>
    /// <returns>Resource team data in <c>CollectionDataContract</c> if user action is get.</returns>
    public CollectionDataContract executeDataRetrievalAction(ActionDataContract _action)
    {
        IServerActions              serverActions;
        CollectionDataContract      dataCollection;

        ResProjTeamController projTeamController = ResProjTeamController::getInstanceFromProjId(sessionContext.parmProjId());
        Enumerator argsEnumerator = _action.parmArgs().getEnumerator();

        switch (_action.parmName())
        {
            case '':
                dataCollection = this.getCollectionData();
                break;
            case 'openEditResourceDialog':
                break;
            case 'releaseResource':
                while (argsEnumerator.moveNext())
                {
                    int64 activityResource = str2int64(argsEnumerator.current());
                    projTeamController.release(activityResource);
                }
                break;
            case 'deleteResource':
                while (argsEnumerator.moveNext())
                {
                    int64 activityResource = str2int64(argsEnumerator.current());
                    projTeamController.removeV2(activityResource, false);
                }
                break;
            case 'confirmResource':
                while (argsEnumerator.moveNext())
                {
                    int64 activityResource = str2int64(argsEnumerator.current());
                    projTeamController.confirm(activityResource);
                }
                break;
            default:
                error("@Res:UnrecongnizedOperation");
                break;
        }

        if (dataCollection == null)
        {
            dataCollection = CollectionDataContract::construct();
        }

        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionData</Name>
				<Source><![CDATA[
    private CollectionDataContract getCollectionData() {
        #TimeConstants
        List items = new List(Types::Class);
        ResourceTeamDataContract resourceTeamData, roleData;
        PSAProjSchedRole psaProjSchedRole;
        Map roleMap = new Map(Types::String, Types::Class);
        str parentId, bookedHours, assignedHours;

        while select psaProjSchedRole
            where psaProjSchedRole.ProjId == sessionContext.parmProjId()
        {
            resourceTeamData = ResourceTeamDataContract::construct();
            resourceTeamData.parmId(int642str(psaProjSchedRole.RecId));
            parentId = this.getParentId(psaProjSchedRole.ResourceCategory);
            if (!roleMap.exists(parentId))
            {
                roleData = ResourceTeamDataContract::construct();
                roleData.parmId(parentId);
                roleData.parmName(ResourceCategoryFacade::getId(psaProjSchedRole.ResourceCategory));
                roleData.parmEngagementId(sessionContext.parmProjId());
                roleMap.insert(parentId, roleData);
                items.addEnd(roleData);
            }

            roleData = roleMap.lookup(parentId);
            roleData.parmEngagementId(sessionContext.parmProjId());
            resourceTeamData.parmCategoryId(ResourceCategoryFacade::getId(psaProjSchedRole.ResourceCategory));
            if (psaProjSchedRole.Resource)
            {
                resourceTeamData.parmName(strFmt("@Res:ResourceNameAndLegalEntity", psaProjSchedRole.Name, ResourceFacade::getLegalEntityId(psaProjSchedRole.Resource)));
            }
            else
            {
                resourceTeamData.parmName(psaProjSchedRole.Name);
            }
            resourceTeamData.parmStartDate(psaProjSchedRole.PSARoleStartDate);
            resourceTeamData.parmEndDate(psaProjSchedRole.PSARoleEndDate);
            resourceTeamData.parmHardBookedHours(ActivityResourceFacade::getBookedCapacity(psaProjSchedRole.RecId, ResCommitType::HardBook) / #SecondsPerHour);
            resourceTeamData.parmSoftBookedHours(ActivityResourceFacade::getBookedCapacity(psaProjSchedRole.RecId, ResCommitType::SoftBook) / #SecondsPerHour);
            resourceTeamData.parmHardAssignedHours(ActivityResourceFacade::getAssignedCapacity(psaProjSchedRole.RecId, ResCommitType::HardBook) / #SecondsPerHour);
            resourceTeamData.parmSoftAssignedHours(ActivityResourceFacade::getAssignedCapacity(psaProjSchedRole.RecId, ResCommitType::SoftBook) / #SecondsPerHour);
            resourceTeamData.parmBookedHours(this.getHoursDisplayString(resourceTeamData.parmHardBookedHours(),resourceTeamData.parmSoftBookedHours()));
            resourceTeamData.parmAssignedHours(this.getHoursDisplayString(resourceTeamData.parmHardAssignedHours(),resourceTeamData.parmSoftAssignedHours()));
            resourceTeamData.parmParentId(parentId);
            items.addEnd(resourceTeamData);
        }

        CollectionDataContract collection = CollectionDataContract::construct();
        collection.parmItems(items);
        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHoursDisplayString</Name>
				<Source><![CDATA[
    private str getHoursDisplayString(Hours hardHours, Hours softHours)
    {
        str s = strfmt('%1', hardHours + softHours);
        if (softHours > 0)
        {
            s = strfmt('%1%2', s, '*');
        }

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentId</Name>
				<Source><![CDATA[
    private str getParentId(ResourceCategoryRecId category)
    {
        return strfmt('%1;%2',tablenum(ResourceCategoryView),Category);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// There is no execute action needed for this control and over wirter this method over parent class.
    /// </summary>
    /// <param name = "_action">User action.</param>
    /// <returns>Empty value.</returns>
    protected str executeAction(ActionDataContract _action)
    {
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>