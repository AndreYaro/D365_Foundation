<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardRequestRecorder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CreditCardRequestRecorder
{
    private RefTableId refTableId;
    private RefRecId refRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CreditCardRequestRecorder construct(RefTableId _refTableId, RefRecId _refRecId)
    {
        return new CreditCardRequestRecorder(_refTableId, _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCheck</Name>
				<Source><![CDATA[
    internal static container preCheck(RefTableId _refTableId, RefRecId _refRecId, CreditCardOperation _creditCardOperation)
    {
        CreditCardRequestStatus prevStatus = CreditCardRequest::getLastStatus(_refTableId, _refRecId);

        return [prevStatus, CreditCardRequestRecorder::canProceed(_creditCardOperation, CreditCardRequestStatus::InProcess, prevStatus)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSentRequest</Name>
				<Source><![CDATA[
    internal boolean registerSentRequest(UserConnection _userConnection, CreditCardRequestRecordContext _creditCardRequestContext)
    {
        CreditCardRequest creditCardRequest = CreditCardRequest::getLastRecord(refTableId, refRecId);

        CreditCardPaymentCardToken payload = '';
        if (CreditCardProcessHelper::idempotencyEnabled())
        {
            payload = CreditCardPaymentProperties::convertPropertyArrayToCompressedXML(_creditCardRequestContext.getCreditCardPaymentProperties().toArray());
        }

        return CreditCardRequestRecorder::recordCreditCardRequest(
            _userConnection,
            refTableId,
            refRecId,
            CreditCardRequestStatus::InProcess,
            _creditCardRequestContext.getCreditCardOperation(),
            creditCardRequest.nextSeqNum(),
            _creditCardRequestContext.getAmountCur(),
            _creditCardRequestContext.getSalesId(),
            _creditCardRequestContext.getIdempotencyKey(),
            _creditCardRequestContext.getCreditCardProcessorsId(),
            _creditCardRequestContext.getCreditCardConnectorName(),
            _creditCardRequestContext.getSalesInvoiceId(),
            _creditCardRequestContext.getCreditCardAuthorization(),
            _creditCardRequestContext.getMCRCustPaymLineNum(),
            payload);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markRequestFinished</Name>
				<Source><![CDATA[
    internal boolean markRequestFinished(UserConnection _userConnection, CreditCardRequestRecordContext _creditCardRequestContext)
    {
        return this.updateRequestStatus(_userConnection, CreditCardRequestStatus::Received, _creditCardRequestContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markRequestFailed</Name>
				<Source><![CDATA[
    internal boolean markRequestFailed(UserConnection _userConnection, CreditCardRequestRecordContext _creditCardRequestContext)
    {
        return this.updateRequestStatus(_userConnection, CreditCardRequestStatus::NetworkError, _creditCardRequestContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markRequestManualFinished</Name>
				<Source><![CDATA[
    internal boolean markRequestManualFinished(UserConnection _userConnection, CreditCardRequestRecordContext _creditCardRequestContext)
    {
        return this.updateRequestStatus(_userConnection, CreditCardRequestStatus::ManuallyResolved, _creditCardRequestContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCreditCardRequest</Name>
				<Source><![CDATA[
    private static boolean recordCreditCardRequest(
        UserConnection _userConnection,
        RefTableId _refTableId,
        RefRecId _refRecId,
        CreditCardRequestStatus _requestStatus,
        CreditCardOperation _ccOperation,
        int _seqNum,
        AmountCur _amountCur,
        SalesId _salesId,
        str _idempotencyKey = '',
        CreditCardProcessorsId _creditCardProcessorsId = 0,
        CreditCardConnectorName _creditCardConnectorName = '',
        SalesInvoiceId _salesInvoiceId = '',
        CreditCardAuthorization _creditCardAuthorization = '',
        LineNum _mcrCustPaymLineNum = 0,
        CreditCardPaymentCardToken _payload = '')
    {
        #OCCRetryCount
        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
        
        try
        {
            CreditCardRequest creditCardRequest;
            creditCardRequest.setConnection(_userConnection);

            creditCardRequest.RefTableId = _refTableId;
            creditCardRequest.RefRecId = _refRecId;
            creditCardRequest.CreditCardRequestStatus = _requestStatus;
            creditCardRequest.CreditCardOperation = _ccOperation;
            creditCardRequest.SeqNum = _seqNum;
            creditCardRequest.AmountCur = _amountCur;
            creditCardRequest.SalesId = _salesId;
            creditCardRequest.IdempotencyKey = _idempotencyKey;
            creditCardRequest.CreditCardProcessors = _creditCardProcessorsId;
            creditCardRequest.CreditCardConnectorName = _creditCardConnectorName;
            creditCardRequest.SalesInvoiceId = _salesInvoiceId;
            creditCardRequest.Authorization = _creditCardAuthorization;
            creditCardRequest.MCRPaymLineNum = _mcrCustPaymLineNum;
            creditCardRequest.RequestPayload = _payload;
            creditCardRequest.insert();
        }
        catch (Exception::DuplicateKeyException)
        {
            return false;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < #RetryNum)
            {
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
            else
            {
                return false;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
            else
            {
                return false;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
            else
            {
                return false;
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(RefTableId _refTableId, RefRecId _refRecId)
    {
        refTableId = _refTableId;
        refRecId = _refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStatus</Name>
				<Source><![CDATA[
    private boolean updateRequestStatus(
        UserConnection _userConnection, 
        CreditCardRequestStatus _requestStatus, 
        CreditCardRequestRecordContext _creditCardRequestContext)
    {
        CreditCardRequest creditCardReqeust = CreditCardRequest::getLastRecord(refTableId, refRecId);
        CreditCardRequestStatus prevStatus = creditCardReqeust.getStatus();

        if (_requestStatus == CreditCardRequestStatus::ManuallyResolved
            && (prevStatus == CreditCardRequestStatus::ManuallyResolved
            || prevStatus == CreditCardRequestStatus::Received))
        {
            return true;
        }

        if (CreditCardRequestRecorder::canProceed(_creditCardRequestContext.getCreditCardOperation(), _requestStatus, prevStatus))
        {
            return CreditCardRequestRecorder::recordCreditCardRequest(
                _userConnection,
                refTableId,
                refRecId,
                _requestStatus,
                _creditCardRequestContext.getCreditCardOperation(),
                creditCardReqeust.nextSeqNum(),
                _creditCardRequestContext.getAmountCur(),
                _creditCardRequestContext.getSalesId(),
                _creditCardRequestContext.getIdempotencyKey(),
                _creditCardRequestContext.getCreditCardProcessorsId(),
                _creditCardRequestContext.getCreditCardConnectorName(),
                '',
                '',
                _creditCardRequestContext.getMCRCustPaymLineNum());
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProceed</Name>
				<Source><![CDATA[
    private static boolean canProceed(CreditCardOperation _creditCardOperation, CreditCardRequestStatus _currentStatus, CreditCardRequestStatus _prevStatus)
    {
        CreditCardRequestContext creditCardRequestContext = new CreditCardRequestContext(_prevStatus, _creditCardOperation, CreditCardProcessHelper::idempotencyEnabled());
        ICreditCardOperationControl creditCardOperationControl = CreditCardOperationControlBase::construct(creditCardRequestContext);

        return creditCardOperationControl.canProceed(_currentStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>