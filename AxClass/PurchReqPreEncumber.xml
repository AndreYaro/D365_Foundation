<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqPreEncumber</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqPreEncumber extends RunBase
{
    PurchReqTable           purchReqTable;
    PurchReqLine            purchReqLine;
    List                    purchReqTableList;
    List                    purchReqLineList;

    boolean                 showResult;
    PurchReqProcessingState processingState;

    private PurchReqInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        showResult = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessingState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the processing state that indicates whether to record or reverse budget fund reservation.
    /// </summary>
    /// <param name="_processingState">
    /// The processing state of the purchase requisition.
    /// </param>
    /// <returns>
    /// The processing state of the purchase requisition.
    /// </returns>
    public PurchReqProcessingState parmProcessingState(PurchReqProcessingState _processingState = processingState)
    {
        processingState = _processingState;
        return processingState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance variable <c>PurchReqLine</c>.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The purchase requisition line used for recording or reversing budget fund reservation.
    /// </param>
    /// <returns>
    /// The <c>PurchReqLine</c> instance variable.
    /// </returns>
    public PurchReqLine parmPurchReqLine(PurchReqLine _purchReqLine = purchReqLine)
    {
        purchReqLine = _purchReqLine;

        purchReqLineList = new List(Types::Record);
        purchReqLineList.addEnd(purchReqLine);

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLineList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance variable <c>PurchReqLineList</c>.
    /// </summary>
    /// <param name="_purchReqLineList">
    /// A list of purchase requisition lines used for recording or reversing budget fund reservation.
    /// </param>
    /// <returns>
    /// The <c>PurchReqLineList</c> instance variable.
    /// </returns>
    public List parmPurchReqLineList(List _purchReqLineList = purchReqLineList)
    {
        purchReqLineList = _purchReqLineList;
        return purchReqLineList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance variable <c>PurchReqTable</c>.
    /// </summary>
    /// <param name="_purchReqTable">
    /// The purchase requisition table used for recording or reversing budget fund reservation.
    /// </param>
    /// <returns>
    /// The <c>PurchReqTable</c> instance variable.
    /// </returns>
    public PurchReqTable parmPurchReqTable(PurchReqTable  _purchReqTable = purchReqTable)
    {
        purchReqTable = _purchReqTable;

        purchReqTableList = new List(Types::Record);
        purchReqTableList.addEnd(purchReqTable);

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqTableList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance variable <c>PurchReqTableList</c>.
    /// </summary>
    /// <param name="_purchReqTableList">
    /// A list of purchase requisitions to record or reverse budget fund reservation.
    /// </param>
    /// <returns>
    /// The <c>cPurchReqTableList</c> instance variable.
    /// </returns>
    public List parmPurchReqTableList(List _purchReqTableList = purchReqTableList)
    {
        purchReqTableList = _purchReqTableList;
        return purchReqTableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets whether the processing result should be shown in the infolog.
    /// </summary>
    /// <param name="_showResult">
    /// A flag that indicates whether the processing result should be shown in the infolog.
    /// </param>
    /// <returns>
    /// A flag that indicates whether the processing result should be shown in the infolog.
    /// </returns>
    public boolean parmShowResult(boolean _showResult = showResult)
    {
        showResult = _showResult;
        return showResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records or reverses a budget fund reservation.
    /// </summary>
    public void run()
    {
        using (var activityContext = this.instrumentationLogger().preEncumbrance().run(processingState))
        {
            switch (processingState)
            {
                case PurchReqProcessingState::Record:
                    if (purchReqLineList)
                    {
                        PurchReqPreEncumber::recordBudgetFundReservation(purchReqLineList.pack(), tableNum(PurchReqLine), showResult);
                    }
                    else if (purchReqTableList)
                    {
                        PurchReqPreEncumber::recordBudgetFundReservation(purchReqTableList.pack(), tableNum(PurchReqTable), showResult);
                    }
                    else
                    {
                        throw error(Error::missingRecord(funcName()));
                    }
                    break;
                default:
                    throw error(strFmt("@SYS22828",funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new voucher that will be used for recording or reversing a budget fund reservation.
    /// </summary>
    /// <returns>
    /// The number sequence value of the new voucher.
    /// </returns>
    public static NumberSeq allocateVoucher()
    {
        return NumberSeq::newGetVoucher(PurchParameters::numRefPurchReqVoucher());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReqPreEncumber construct()
    {
        return new PurchReqPreEncumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfoLogMessage</Name>
				<Source><![CDATA[
    private static str getInfoLogMessage(int _line)
    {
        System.Exception clrException;
        str message;
        str separator = ' ';
        int i;

        clrException = CLRInterop::getLastException();
        if (clrException)
        {
            error(clrException.get_Message());
            clrException = clrException.get_InnerException();
            message = clrException.get_Message();
            
            ApplicationUnhandledExceptionLogger::logCLRException(clrException);
        }
        else
        {
            // get the current line
            message = SysInfologMessageStruct::construct(infolog.text(infologLine())).message();
            // append the inner messages
            for (i = infologLine() - 1; i > _line; i--)
            {
                message += separator + SysInfologMessageStruct::construct(infolog.text(i)).message();
            }
        }

        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreEncumbranceEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether pre-encumbrance is enabled for a buying legal entity.
    /// </summary>
    /// <param name="_buyingLegalEntity">
    /// The record ID of the buying legal entity.
    /// </param>
    /// <returns>
    /// true if pre-encumbrance is enabled; otherwise, false.
    /// </returns>
    public static boolean isPreEncumbranceEnabled(RecId _buyingLegalEntity)
    {
        changecompany(CompanyInfo::findRecId(_buyingLegalEntity).DataArea)
        {
            return LedgerParameters::find().IsPreEncumbranceProcessEnabled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessingError</Name>
				<Source><![CDATA[
    public static void logProcessingError(RecId _purchReqTableRecId, RecId _purchReqLineRecId, str _errorDescription)
    {
        PurchReqInstrumentationLogger instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(PurchReqPreEncumber));

        using (var activityContext = instrumentationLogger.preEncumbrance().logProcessingError(_purchReqTableRecId, _purchReqLineRecId))
        {
            PurchReqLine    purchReqLine;
            BudgetSource    budgetSource;

            if (_purchReqLineRecId)
            {
                PurchReqLineProcessingError::logProcessingError(_purchReqLineRecId, PurchReqLineProcessingErrorType::PreEncumbranceError, _errorDescription);
            }
            else
            {
                // If the purchase requisition line is unknown, then that means there was a budget confirmation failure,
                // so we need to figure out the lines that failed budget confirmation.
                while select RecId, SourceDocumentLine, PurchReqTable from purchReqLine
                            where purchReqLine.PurchReqTable == _purchReqTableRecId
                      join RecId, CheckResult from budgetSource
                            where budgetSource.BudgetSourceType   == BudgetSourceType::SourceDocumentLine
                               && budgetSource.SourceDocumentLine == purchReqLine.SourceDocumentLine
                               && budgetSource.CheckResult        == BudgetCheckResult::Failed
                {
                    PurchReqLineProcessingError::logProcessingError(purchReqLine.RecId, PurchReqLineProcessingErrorType::PreEncumbranceError, _errorDescription);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormDataSource              formDataSource;
        PurchReqTable               purchReqTable;
        List                        purchReqTableList = new List(Types::Record);
        PurchReqPreEncumber         purchReqPreEncumber;
        PurchReqProcessingState     purchReqProcessingState;

        if (!_args || _args.dataset() != tableNum(PurchReqTable))
        {
            throw error(Error::missingRecord(funcName()));
        }

        formDataSource          = FormDataUtil::getFormDataSource(_args.record());
        purchReqProcessingState = _args.parmEnum();

        if (formDataSource)
        {
            for (purchReqTable = formDataSource.getFirst(true)
                    ? formDataSource.getFirst(true)
                    : _args.record(); (purchReqTable && purchReqTable.isConsumption()); purchReqTable = formDataSource.getNext())
            {
                purchReqTableList.addEnd(purchReqTable);
            }
        }

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            purchReqPreEncumber = PurchReqPreEncumber::construct();
            purchReqPreEncumber.parmPurchReqTableList(purchReqTableList);
            purchReqPreEncumber.parmProcessingState(purchReqProcessingState);
            purchReqPreEncumber.parmShowResult(true);
            purchReqPreEncumber.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the subledger journal accounting entries for an accounting event to the general ledger.
    /// </summary>
    /// <param name="_purchReqTable">
    /// The record to perform posting for.
    /// </param>
    protected static void post(PurchReqTable _purchReqTable)
    {
        PurchReqInstrumentationLogger instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(PurchReqPreEncumber));

        using (var activityContextTotals = instrumentationLogger.preEncumbrance().totals(_purchReqTable.RecId))
        {
            PurchtotalsForm                 purchtotalsForm = PurchtotalsForm::newPurchTotalsForm(_purchReqTable);
            purchtotalsForm.setCurrencyCode(SystemParameters::find(false).SystemCurrencyCode);
            purchtotalsForm.calctotals();
        }

        using (var activityContextSourceDocument = instrumentationLogger.preEncumbrance().submitSourceDocument(_purchReqTable.RecId))
        {
            SourceDocumentProcessorFacade::submitSourceDocumentImplementation(_purchReqTable, false, SourceDocumentAccountingStatus::Completed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordBudgetFundReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records a budget fund reservation for a list of purchase requisitions or purchase requisition lines.
    /// </summary>
    /// <param name="_packedList">
    /// The list of purchase requisitions or purchase requisition lines packed in a container.
    /// </param>
    /// <param name="_listTableId">
    /// The table ID of the list in the container.
    /// </param>
    /// <param name="_showResult">
    /// A Boolean value that indicates whether the processing result is displayed in an infolog.
    /// </param>
    protected static void recordBudgetFundReservation(container _packedList, RefTableId _listTableId, boolean _showResult = false)
    {
        PurchReqInstrumentationLogger instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(PurchReqPreEncumber));

        using (var activityContext = instrumentationLogger.preEncumbrance().recordBudgetFundReservation(_listTableId))
        {
            PurchReqPreEncumber::recordBudgetFundReservationRun([_packedList, tableNum(PurchReqTable), _showResult]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordBudgetFundReservationRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records budget fund reservation for a list of purchase requisitions or purchase requisition lines.
    /// </summary>
    /// <param name="_input">
    /// A container that contains the input arguments to run the reservation.
    /// </param>
    /// <remarks>
    ///  The <paramref name="_input" />
    ///   parameter contains the following:
    ///  <list type="number">
    ///   <item>
    ///   <description>The list of purchase requisitions or purchase requisition lines.</description>
    ///   </item>
    ///   <item>
    ///   <description>The table ID of the list.</description>
    ///   </item>
    ///   <item>
    ///   <description>A Boolean value that indicates whether the processing result should be shown in an
    ///   infolog.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public static void recordBudgetFundReservationRun(container _input)
    {
        List                                    purchReqTableList;
        ListEnumerator                          listEnumerator;
        PurchReqLineProcessingError             purchReqLineProcessingError;
        PurchReqLine                            purchReqLine;
        PurchReqTable                           purchReqTable;

        container                               packedList;
        RefTableId                              listTableId;
        boolean                                 showResult;
        [packedList, listTableId, showResult] = _input;

        switch (listTableId)
        {
            case tableNum(PurchReqTable):
                PurchReqInstrumentationLogger instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(PurchReqPreEncumber));
                
                purchReqTableList = List::create(packedList);
                listEnumerator    = purchReqTableList.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    purchReqTable = listEnumerator.current();

                    boolean isConsumption = purchReqTable.isConsumption();

                    using (var activityContext = instrumentationLogger.preEncumbrance().recordBudgetFundReservationPost(purchReqTable.RecId, isConsumption))
                    {
                        if (isConsumption)
                        {
                            try
                            {
                                using (var activityContextDeleteErrors = instrumentationLogger.preEncumbrance().deleteProcessingError(purchReqTable.RecId))
                                {
                                    delete_from purchReqLineProcessingError
                                        exists join purchReqLine where
                                            purchReqLine.RecId          == purchReqLineProcessingError.PurchReqLine &&
                                            purchReqLine.PurchReqTable  == purchReqTable.RecId;
                                }

                                ttsbegin;
                                PurchReqPreEncumber::post(purchReqTable);

                                using (var activityContextDeleteErrors = instrumentationLogger.preEncumbrance().updateLines(purchReqTable.RecId))
                                {
                                    while select forupdate purchReqLine
                                        where purchReqLine.PurchReqTable == purchReqTable.RecId
                                    {
                                        purchReqLine.IsPreEncumbranceRequired   = UnknownNoYes::Yes;
                                        purchReqLine.doUpdate();
                                    }
                                }
                                ttscommit;

                                RequisitionReleaseStrategy::runAutoPurchOrderGeneration(purchReqTable.RecId);

                                if (showResult && purchReqTable.canRecordPreEncumbrance())
                                {
                                    info(strFmt("@SYS327998", purchReqTable.PurchReqId, purchReqTable.PurchReqName));
                                }
                            }
                            catch
                            {
                                using (var activityContextErrors = instrumentationLogger.preEncumbrance().logPreEncumbranceErrors(purchReqTable.RecId))
                                {
                                    purchReqTable.logPreEncumbranceErrors();
                                    purchReqTable.logBudgetErrors();
                                }

                                if (showResult)
                                {
                                    error(strFmt("@SYS327999", purchReqTable.PurchReqId, purchReqTable.PurchReqName));
                                }
                            }
                        }
                    }
                }
                break;

            default:
                //Posting can only be done for an entire purchase requisition, cannot be done by line.
                throw error(strFmt("@SYS22828",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchReqInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>