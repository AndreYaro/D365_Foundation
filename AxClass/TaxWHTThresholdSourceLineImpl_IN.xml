<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWHTThresholdSourceLineImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents threshold application in withholding tax.
/// </summary>
class TaxWHTThresholdSourceLineImpl_IN extends ThresholdSourceLine_IN
{
    AccountNum                  accountNum;
    AccountType_IN              accountType;
    TaxWithholdCode             taxWithholdCode;
    NoYesId                     isOverLook;
    AmountMST                   curTransLineAmountMST;
    TaxWithholdCalculation_IN   taxWithholdCalculation;

    private boolean isProgressiveApplicable = true;
    private TaxWithholdGroup taxWithholdGroup;
    private boolean isPriceInclusive;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsPriceInclusive</Name>
				<Source><![CDATA[
    internal boolean parmIsPriceInclusive(boolean _isPriceInclusive = isPriceInclusive)
    {
        isPriceInclusive = _isPriceInclusive;
        return isPriceInclusive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProgressiveApplicable</Name>
				<Source><![CDATA[
    internal boolean parmIsProgressiveApplicable(boolean _isProgressiveApplicable = isProgressiveApplicable)
    {
        isProgressiveApplicable = _isProgressiveApplicable;
        return isProgressiveApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets account number.
    /// </summary>
    /// <param name="_accountNum">
    /// accountNum
    /// </param>
    /// <returns>
    /// accountNum
    /// </returns>
    public AccountNum parmAccountNum(AccountNum _accountNum = accountNum)
    {
        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets account type.
    /// </summary>
    /// <param name="_accountType">
    /// accountType
    /// </param>
    /// <returns>
    /// accountType
    /// </returns>
    public AccountType_IN parmAccountType(AccountType_IN _accountType = accountType)
    {
        accountType = _accountType;
        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurTransLineAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets current amount of transaction line.
    /// </summary>
    /// <param name="_curTransLineAmountMST">
    /// current amount of transline
    /// </param>
    /// <returns>
    /// current amount of transline
    /// </returns>
    public AmountMST parmCurTransLineAmountMST(AmountMST _curTransLineAmountMST = curTransLineAmountMST)
    {
        curTransLineAmountMST = _curTransLineAmountMST;
        return curTransLineAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOverLook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets <c>isOverLook</c>.
    /// </summary>
    /// <param name="_isOverLook">
    /// isOverLook
    /// </param>
    /// <returns>
    /// isOverLook
    /// </returns>
    public NoYesId parmIsOverLook(NoYesId _isOverLook = isOverLook)
    {
        isOverLook = _isOverLook;
        return isOverLook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets <c>taxWithholdCalculation</c>.
    /// </summary>
    /// <param name="_taxWithholdCalculation">
    /// <c>TaxWithholdCalculation_IN</c>
    /// </param>
    /// <returns>
    /// <c>TaxWithholdCalculation_IN</c>
    /// </returns>
    public TaxWithholdCalculation_IN parmTaxWithholdCalculation(TaxWithholdCalculation_IN _taxWithholdCalculation = taxWithholdCalculation)
    {
        taxWithholdCalculation = _taxWithholdCalculation;
        return taxWithholdCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets <c>taxwithholdCode</c>.
    /// </summary>
    /// <param name="_taxWithholdCode">
    /// <c>taxWithholdCode</c>
    /// </param>
    /// <returns>
    /// <c>taxWithholdCode</c>
    /// </returns>
    public TaxWithholdCode parmTaxWithholdCode(TaxWithholdCode _taxWithholdCode = taxWithholdCode)
    {
        taxWithholdCode = _taxWithholdCode;
        return taxWithholdCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdGroup parmTaxWithholdGroup(TaxWithholdGroup _taxWithholdGroup = taxWithholdGroup)
    {
        taxWithholdGroup = _taxWithholdGroup;
        return taxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThreholdLineTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets <c>TransDate</c>.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction Date
    /// </param>
    /// <returns>
    /// Transation Date
    /// </returns>
    public TransDate parmThreholdLineTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThresholdLineTypeEnumNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets enum id, which represents application type.
    /// </summary>
    /// <returns>
    /// Application type
    /// </returns>
    public ThresholdEnumNum_IN parmThresholdLineTypeEnumNum()
    {
        return enumNum(TaxThresholdSourceLineType_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThresholdLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets enum value, which represents application, such as withholding tax.
    /// </summary>
    /// <returns>
    /// Sepcified application
    /// </returns>
    public ThresholdEnumValue_IN parmThresholdLineTypeEnumValue()
    {
        return TaxThresholdSourceLineType_IN::TaxWithhold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPANNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PAN number of associated customer/vendor.
    /// </summary>
    /// <returns>PAN number of type <c>PANNumber_IN</c>.</returns>
    public PANNumber_IN getPANNumber()
    {
        Debug::assert(accountType == AccountType_IN::Vend || accountType == AccountType_IN::Cust);

        PANNumber_IN pAN;
        if (accountType == AccountType_IN::Vend)
        {
            VendTable vendTableLoc = VendTable::find(accountNum);
            if (vendTableLoc.RecId)
            {
                TaxInformationVendTable_IN taxInfo = vendTableLoc.getTaxInformationVendTable_IN();
                if (taxInfo.RecId)
                {
                    pAN = taxInfo.PANNumber;
                }
            }
        }
        else if (accountType == AccountType_IN::Cust)
        {
            CustTable custTableLoc = CustTable::find(accountNum);
            if (custTableLoc.RecId)
            {
                TaxInformationCustTable_IN taxInfo = custTableLoc.getTaxInformationCustTable_IN();
                if (taxInfo.RecId)
                {
                    pAN = taxInfo.PANNumber;
                }
            }
        }
        return pAN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPANBasedAccumulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the setting of PAN based accumulation.
    /// </summary>
    /// <returns>true if PAN based accumulation is activated; otherwise, false.</returns>
    public NoYes isPANBasedAccumulation()
    {
        return TaxWithholdTable::find(taxWithholdCode).PanBasedAccumulation_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns object of <c>TaxWHTThresholdSourceLineImpl_IN</c>.
    /// </summary>
    /// <param name="_taxWithholdCalculation">
    /// <c>taxWithholdCalculation</c>
    /// </param>
    /// <param name="_accountType">
    /// account type
    /// </param>
    /// <param name="_accountNum">
    /// account number
    /// </param>
    /// <param name="_taxWithholdCode">
    /// <c>taxWithholdCode</c>
    /// </param>
    /// <param name="_transDate">
    /// transaction date
    /// </param>
    /// <param name="_curTransLineAmountMST">
    /// current transline amount
    /// </param>
    /// <param name="_isOverLook">
    /// isOverLooked or not
    /// </param>
    /// <returns>
    /// object of <c>TaxWHTThresholdSourceLineImpl_IN</c>
    /// </returns>
    public static TaxWHTThresholdSourceLineImpl_IN construct(
        TaxWithholdCalculation_IN   _taxWithholdCalculation,
        AccountType_IN              _accountType,
        AccountNum                  _accountNum,
        TaxWithholdCode             _taxWithholdCode,
        Transdate                   _transDate,
        AmountMST                   _curTransLineAmountMST,
        NoYesId                     _isOverLook = false)
    {
        TaxWHTThresholdSourceLineImpl_IN taxWHTThresholdSourceLineImpl;
        taxWHTThresholdSourceLineImpl = new TaxWHTThresholdSourceLineImpl_IN();

        taxWHTThresholdSourceLineImpl.parmTaxWithholdCalculation(_taxWithholdCalculation);
        taxWHTThresholdSourceLineImpl.parmAccountType(_accountType);
        taxWHTThresholdSourceLineImpl.parmAccountNum(_accountNum);
        taxWHTThresholdSourceLineImpl.parmTaxWithholdCode(_taxWithholdCode);
        taxWHTThresholdSourceLineImpl.parmThreholdLineTransDate(_transDate);
        taxWHTThresholdSourceLineImpl.parmCurTransLineAmountMST(_curTransLineAmountMST);
        taxWHTThresholdSourceLineImpl.parmIsOverLook(_isOverLook);

        return taxWHTThresholdSourceLineImpl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>