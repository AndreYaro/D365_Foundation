<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListReportingEngine_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_SE</c> class extends the functionality of the
/// <c>EUSalesListReportingEngine</c> class in order to support the requirements that are specific to
/// Sweden.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoSE)]
public class EUSalesListReportingEngine_SE extends EUSalesListReportingEngine implements BatchRetryable
{
    private ContactPersonId contactPersonId;
    private DialogField dialogContactPersonId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.curFormGroup(dialogGroupExportOptions.formGroup());
        dialogContactPersonId = dialog.addFieldValue(extendedTypeStr(ContactPersonId), contactPersonId);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        contactPersonId  = dialogContactPersonId.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactPersonId</Name>
				<Source><![CDATA[
    public ContactPersonId parmContactPersonId(ContactPersonId _contactPersonId = contactPersonId)
    {
        contactPersonId = _contactPersonId;
        return contactPersonId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (generateFile && !contactPersonId)
        {
            ret = checkFailed(strFmt("@SYS84753", extendedTypeId2pname(extendedTypeNum(ContactPersonId))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader header;

        header = super();
        header.ContactPersonId = contactPersonId;
        header.doUpdate();

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList, super()];

        packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_SE), varStr(contactPersonId), contactPersonId);

        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);
        container packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = packedClass;
                contactPersonId = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_SE), varStr(contactPersonId));
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>