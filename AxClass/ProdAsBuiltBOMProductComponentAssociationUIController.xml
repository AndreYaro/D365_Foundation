<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMProductComponentAssociationUIController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdAsBuiltBOMProductComponentAssociationUIController
{
    ProdAsBuiltBOMAssociationController associationController;
    FormDataSource                      prodAsBuiltBOMProductLotAssociation_ds;
    FormDataSource                      prodAsBuiltBOMComponentLotAssociation_ds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setAssociationController</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentAssociationUIController setAssociationController(ProdAsBuiltBOMAssociationController _associationController)
    {
        associationController = _associationController;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdAsBuiltBOMProductLotAssociationDs</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentAssociationUIController setProdAsBuiltBOMProductLotAssociationDs(FormDataSource _prodAsBuiltBOMProductLotAssociation_ds)
    {
        prodAsBuiltBOMProductLotAssociation_ds = _prodAsBuiltBOMProductLotAssociation_ds;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdAsBuiltBOMComponentLotAssociationDs</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentAssociationUIController setProdAsBuiltBOMComponentLotAssociationDs(FormDataSource _prodAsBuiltBOMComponentLotAssociation_ds)
    {
        prodAsBuiltBOMComponentLotAssociation_ds = _prodAsBuiltBOMComponentLotAssociation_ds;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMarkedProductAssociationRows</Name>
				<Source><![CDATA[
    internal void deleteMarkedProductAssociationRows()
    {
        if (prodAsBuiltBOMProductLotAssociation_ds.anyMarked() || prodAsBuiltBOMProductLotAssociation_ds.cursor())
        {
            ProdAsBuiltBOMProductLotAssociation selection = prodAsBuiltBOMProductLotAssociation_ds.getFirst(1);
            if (!selection)
            {
                selection = prodAsBuiltBOMProductLotAssociation_ds.cursor();
            }
            do
            {
                if (selection)
                {
                    if (!selection.IsCompleted)
                    {
                        ProdAsBuiltBOMProductLotAssociation productAssociation;

                        delete_from productAssociation
                            where productAssociation.RecId == selection.RecId;

                        associationController.rereadSumProductInventGoodErrorQty(ProdAsBuiltBOMFormulaProducts::find(selection.InventTransId));
                    }
                    else
                    {
                        error(strFmt("@SCM:TrackedComponentsProductAssocitionDeletionCheck", selection.MatchId));
                    }
                }
                selection = prodAsBuiltBOMProductLotAssociation_ds.getNext();
            }
            while (selection);
            prodAsBuiltBOMProductLotAssociation_ds.research();
            associationController.resetMapComponentLotBuilder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMarkedComponentAssociationRows</Name>
				<Source><![CDATA[
    internal void deleteMarkedComponentAssociationRows()
    {
        if (prodAsBuiltBOMComponentLotAssociation_ds.anyMarked() || prodAsBuiltBOMComponentLotAssociation_ds.cursor())
        {
            ProdAsBuiltBOMComponentLotAssociation selection = prodAsBuiltBOMComponentLotAssociation_ds.getFirst(1);
            if (!selection)
            {
                selection = prodAsBuiltBOMComponentLotAssociation_ds.cursor();
            }
            do
            {
                if (selection)
                {
                    ProdAsBuiltBOMComponentLotAssociationOnhandController::construct(selection).unpick();
                    ProdAsBuiltBOMComponentLotAssociation componentAssociation;

                    selection.deleteDependent();

                    delete_from componentAssociation
                        where componentAssociation.RecId == selection.RecId;

                    associationController.rereadSumComponentLotConsumptionQty(ProdBOM::findTransId(selection.InventTransId));
                }
                selection = prodAsBuiltBOMComponentLotAssociation_ds.getNext();
            }
            while (selection);
            prodAsBuiltBOMComponentLotAssociation_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductMatchId</Name>
				<Source><![CDATA[
    internal void lookupProductMatchId(ProdAsBuiltBOMFormulaProducts _productLot, FormControl _formControl, str _filterStr)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProdAsBuiltBOMProductLotAssociation), _formControl, true);
        sysTableLookup.addLookupfield(fieldNum(ProdAsBuiltBOMProductLotAssociation, MatchId), true);
        sysTableLookup.addLookupfield(fieldNum(ProdAsBuiltBOMProductLotAssociation, ItemId), false);
        sysTableLookup.addLookupfield(fieldNum(ProdAsBuiltBOMProductLotAssociation, ProductType), false);

        Query lookupQuery = new Query();
        QueryBuildDataSource qbds = lookupQuery.addDataSource(tableNum(ProdAsBuiltBOMProductLotAssociation));
        qbds.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, ReferenceId)).value(_productLot.ProdId);

        sysTableLookup.parmQuery(lookupQuery);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductLot</Name>
				<Source><![CDATA[
    internal void lookupProductLot(ProdAsBuiltBOMFormulaProducts _productLot, FormControl _formControl, str _filterStr)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProdAsBuiltBOMFormulaProducts), _formControl, true);
        sysTableLookup.addLookupfield(fieldNum(ProdAsBuiltBOMFormulaProducts, InventTransId), true);
        sysTableLookup.addLookupfield(fieldNum(ProdAsBuiltBOMFormulaProducts, ItemId), false);
        sysTableLookup.addLookupfield(fieldNum(ProdAsBuiltBOMFormulaProducts, ProdId), false);

        Query lookupQuery = new Query();
        QueryBuildDataSource qbds = lookupQuery.addDataSource(tableNum(ProdAsBuiltBOMFormulaProducts));
        qbds.addRange(fieldNum(ProdAsBuiltBOMFormulaProducts, ProdId)).value(_productLot.ProdId);

        sysTableLookup.parmQuery(lookupQuery);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponentLot</Name>
				<Source><![CDATA[
    internal void lookupComponentLot(ProdAsBuiltBOMFormulaProducts _productLot, FormControl _formControl, str _filterStr)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProdBOM), _formControl, true);
        sysTableLookup.addLookupfield(fieldNum(ProdBOM, InventTransId), true);
        sysTableLookup.addLookupfield(fieldNum(ProdBOM, ItemId), false);
        sysTableLookup.addLookupfield(fieldNum(ProdBOM, ProdId), false);

        Query lookupQuery = new Query();
        QueryBuildDataSource qbds = lookupQuery.addDataSource(tableNum(ProdBOM));
        qbds.addRange(fieldNum(ProdBOM, ProdId)).value(_productLot.ProdId);

        sysTableLookup.parmQuery(lookupQuery);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickComponents</Name>
				<Source><![CDATA[
    internal void pickComponents()
    {
        List selectionList = new List(Types::String);
        if (prodAsBuiltBOMProductLotAssociation_ds.anyMarked() || prodAsBuiltBOMProductLotAssociation_ds.cursor())
        {
            ProdAsBuiltBOMProductLotAssociation selection = prodAsBuiltBOMProductLotAssociation_ds.getFirst(1);

            if (!selection)
            {
                selection = prodAsBuiltBOMProductLotAssociation_ds.cursor();
            }
            do
            {
                if (selection && !selection.IsCompleted)
                {
                    selectionList.addEnd(selection.MatchId);
                }
                selection = prodAsBuiltBOMProductLotAssociation_ds.getNext();
            }
            while (selection);
        }

        if (selectionList.elements())
        {
            boolean result = ProdAsBuiltBOMComponentLotAssociationOnhandController::pickComponents(selectionList);

            if (result)
            {
                prodAsBuiltBOMComponentLotAssociation_ds.research(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReportAsFinishedJournal</Name>
				<Source><![CDATA[
    internal void openReportAsFinishedJournal(JournalId journalId)
    {
        if (!journalId)
        {
            info("@SYS71699");
            return;
        }

        ProdJournalTable prodJournalTable = ProdJournalTable::find(journalId);
        if (prodJournalTable)
        {
            Args args = new Args();
            args.name(formstr(ProdJournalTable));
            args.parmEnumType(enumnum(ProdJournalType));
            args.parmEnum(enum2int(ProdJournalType::ReportFinished));
            args.record(prodJournalTable);

            FormRun formProdJournalTable = classfactory.formRunClass(args);
            formProdJournalTable.init();
            formProdJournalTable.run();

            Object formRun = formProdJournalTable;
            JournalFormTable journalForm = formRun.journalForm();
            journalForm.datasourceInitPost(prodJournalTable);
            journalForm.openLinesForm();
        }
        else
        {
            warning(strfmt("@SYS21496",journalId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductComponentAssociationUIController construct(ProdAsBuiltBOMAssociationController _associationController,
                                                                                    FormDataSource                      _prodAsBuiltBOMProductLotAssociation_ds,
                                                                                    FormDataSource                      _prodAsBuiltBOMComponentLotAssociation_ds)
    {
        var uiController = new ProdAsBuiltBOMProductComponentAssociationUIController();

        uiController.setAssociationController(_associationController)
                    .setProdAsBuiltBOMProductLotAssociationDs(_prodAsBuiltBOMProductLotAssociation_ds)
                    .setProdAsBuiltBOMComponentLotAssociationDs(_prodAsBuiltBOMComponentLotAssociation_ds);

        return uiController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>