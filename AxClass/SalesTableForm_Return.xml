<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableForm_Return</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesTableForm_Return</c> class is used to handle return order form events.
/// </summary>
/// <remarks>
///    Inherited from <c>SalesTableForm</c>.
/// </remarks>
class   SalesTableForm_Return
    extends SalesTableForm
{
    FormDataSource          formDataSource;
    Args                    args;

    MCRReturnTableConfigure mcrReturnTableConfigure;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEnableInterCompanyOnHandButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to enable the intercompany on-hand button.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record to use to determine whether to enable the button.
    /// </param>
    /// <returns>
    /// true if the intercompany button is to be enabled; otherwise, false.
    /// </returns>
    public boolean allowEnableInterCompanyOnHandButton(SalesLine _salesLine)
    {
        return _salesLine.isStocked() && this.interCompanyShowButtonLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonReplacementOrder</Name>
				<Source><![CDATA[
    void buttonReplacementOrder()
    {
        Args            newArgs = new Args();

        SalesTable returnTable = formDataSource.cursor();

        SalesTable newSalesTable = SalesTable::find(returnTable.ReturnReplacementId);

        if (newSalesTable)
        {
            newArgs.caller(formDataSource.formRun());
            newArgs.record(newSalesTable);
            newArgs.parmEnumeration(SalesTableMode::Simple);
            new MenuFunction(menuitemDisplayStr(SalesTable), MenuItemType::Display).run(newArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineAgreementLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links an agreement line with a sales line that is based on the original sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line record that will be linked with the agreement line.
    /// </param>
    /// <returns>
    /// true if the order header was updated; otherwise, false.
    /// </returns>
    public boolean createLineAgreementLink(SalesLine _salesLine)
    {
        AgreementLine                           localAgreementLine;
        AgreementHeader                         localAgreementHeader;
        SalesLine                               origSalesLine;
        CustInvoiceTrans                        origInvoicedLine;
        AgreementLineReleasedLine               origInvoicedLineLink;
        boolean                                 doRereadReturnHeader;

        // Locate AgreementLine that was associated with original sales line:
        select firstonly RecId from origSalesLine
        where origSalesLine.RecId == _salesLine.RecId
            join RecId, InventTransId
            from origInvoicedLine
            where origSalesLine.InventTransIdReturn == origInvoicedLine.InventTransId
                join AgreementLine, CustInvoiceTrans
                from origInvoicedLineLink
                where  origInvoicedLine.RecId == origInvoicedLineLink.CustInvoiceTrans
                    join RecId, Agreement
                    from localAgreementLine
                    where localAgreementLine.RecId == origInvoicedLineLink.AgreementLine
                        join RecId
                        from localAgreementHeader
                        where localAgreementHeader.RecId == localAgreementLine.Agreement;

        if (localAgreementLine)
        {
            ttsbegin;

            // Update Return lines reference to the agreement line...
            _salesLine.MatchingAgreementLine = localAgreementLine.RecId;
            _salesLine.update();

            // Update (if required) Return Order header's link to agreement header
            SalesTable returnOrderHeader = formDataSource.cursor();
            if (!returnOrderHeader.MatchingAgreement)
            {
                returnOrderHeader.MatchingAgreement = localAgreementLine.Agreement;
                returnOrderHeader.update();

                // Need to reread Release order header.
                doRereadReturnHeader = true;

                // Create proper relation bethween agreement header and release order header
                localAgreementHeader.createAgreementReleaseHeaderMatch(returnOrderHeader);
            }
            else
            {
                Debug::assert(returnOrderHeader.MatchingAgreement == localAgreementLine.Agreement);
            }

            // We don't need to create relational entity record for line anymore - it is created when line is inserted/updated
            ttscommit;
        }
        return doRereadReturnHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineAllowed</Name>
				<Source><![CDATA[
    public boolean createLineAllowed(SalesLine _salesLine)
    {
        boolean ret = this.editLineAllowed()
            && !salesTable.interCompanyAllowIndirectCreationOrig()
            && !salesTable.existRegisteredReceivedInvoicedLines();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSalesType</Name>
				<Source><![CDATA[
    SalesType defaultSalesType()
    {
        return SalesType::ReturnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLineAllowed</Name>
				<Source><![CDATA[
    public boolean editLineAllowed(SalesLine _salesLine = null)
    {
        boolean ret = super();

        if (ret)
        {
            if (salesTable.ReturnStatus == ReturnStatusHeader::Canceled
            || salesTable.ReturnStatus == ReturnStatusHeader::Closed
            || salesTable.ReturnStatus == ReturnStatusHeader::None)
            {
                ret = false;
            }

            if (ret
                && salesTable.SalesStatus != SalesStatus::Backorder
                && RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
            {
                //dont allow the return to be modified unless the order is at an open status
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesType</Name>
				<Source><![CDATA[
    boolean  editSalesType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInventoryButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line level inventory menu items are enabled.
    /// </summary>
    /// <param name="_salesLine">
    /// A table buffer that contains the current <c>SalesLine Table</c> values.
    /// </param>
    /// <param name="_buttonTransactions">
    /// The transactions button.
    /// </param>
    /// <param name="_buttonOnHand">
    /// The on hand button.
    /// </param>
    /// <param name="_buttonLot">
    /// The lot button.
    /// </param>
    /// <param name="_buttonTrace">
    /// The trace button.
    /// </param>
    /// <remarks>
    /// The inventory marking button is disabled for order lines with multiple deliveries.Only Dimensions
    /// button is enabled for non-inventoried lines.
    /// </remarks>
    public void enableLineInventoryButtons(SalesLine                    _salesLine,
                                           FormFunctionButtonControl    _buttonTransactions,
                                           FormFunctionButtonControl    _buttonOnHand,
                                           FormFunctionButtonControl    _buttonLot,
                                           FormFunctionButtonControl    _buttonTrace)
    {
        SalesTableType menuSalesTableType       = salesTable.type();
        boolean        isStocked                = _salesLine.isStocked();
        boolean        returnItem               = salesTable.returnItem();
        boolean        hasMultipleDeliveries    = _salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries;
        boolean        isOrderCanceled          = _salesLine.ReturnStatus == ReturnStatusLine::Canceled;

        if (_buttonTransactions)
        {
            _buttonTransactions.enabled (isStocked && !isOrderCanceled && !hasMultipleDeliveries && menuSalesTableType.inventTransactInvoke());
        }

        if (_buttonOnHand)
        {
            _buttonOnHand.enabled       (isStocked && !isOrderCanceled && menuSalesTableType.inventOnHandInvoke());
        }

        if (_buttonLot)
        {
            _buttonLot.enabled          (isStocked && !isOrderCanceled && !hasMultipleDeliveries && menuSalesTableType.inventLotInvoke());
        }

        if (_buttonTrace)
        {
            _buttonTrace.enabled        (isStocked && !isOrderCanceled && !hasMultipleDeliveries);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySetLineAccess</Name>
				<Source><![CDATA[
    public void interCompanySetLineAccess(SalesLine _salesLine, LogisticsLocation _location = null, LogisticsPostalAddress _postalAddress = null, Object _address = null, Object _lineAddress = null)
    {
        boolean        isInterCompanyOrder        = salesTable.isInterCompanyOrder();
        super(_salesLine, null, null, _address, _lineAddress);

        if (FormDataUtil::getFormDataSource(_salesLine))
        {
            FormDataSource salesLine_ds = FormDataUtil::getFormDataSource(_salesLine);

            if (isInterCompanyOrder
            &&  _salesLine.InterCompanyOrigin == InterCompanyOrigin::Derived)
            {
                if (#PdsEnabled)
                {
                    this.enableLineSalesQtyFields(_salesLine, false, false);
                    this.enableLineExpectedRetQtyFields(_salesLine, false);
                    salesLine_ds.object(fieldNum(SalesLine,SalesUnit              )).allowEdit(false);
                }
                else
                {
                    salesLine_ds.object(fieldNum(SalesLine,SalesQty               )).allowEdit(false);
                    salesLine_ds.object(fieldNum(SalesLine,ExpectedRetQty         )).allowEdit(false);
                    salesLine_ds.object(fieldNum(SalesLine,SalesUnit              )).allowEdit(false);
                    salesLine_ds.object(fieldNum(SalesLine,QtyOrdered             )).allowEdit(false);
                }
            }
            else
            {
                if (#PdsEnabled)
                {
                    this.enableLineSalesQtyFields(_salesLine, false, _salesLine.isStocked());
                    this.enableLineExpectedRetQtyFields(_salesLine, true);
                    salesLine_ds.object(fieldNum(SalesLine,SalesUnit              )).allowEdit(true);
                }
                else
                {
                    salesLine_ds.object(fieldNum(SalesLine,SalesQty               )).allowEdit(true);
                    salesLine_ds.object(fieldNum(SalesLine,ExpectedRetQty         )).allowEdit(true);
                    salesLine_ds.object(fieldNum(SalesLine,SalesUnit              )).allowEdit(true);
                    salesLine_ds.object(fieldNum(SalesLine,QtyOrdered             )).allowEdit(_salesLine.isStocked());
                }
            }

            if (_salesLine.interCompanySalesLineExist() || _salesLine.isDerivedIntercompanyLine())
            {
                salesLine_ds.object(fieldNum(SalesLine,ReturnDispositionCodeId)).allowEdit(false);
            }
            else
            {
                salesLine_ds.object(fieldNum(SalesLine,ReturnDispositionCodeId)).allowEdit(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyShowButtonLine</Name>
				<Source><![CDATA[
    public boolean interCompanyShowButtonLine()
    {
        return InterCompanyTradingRelation::tradingRelationExists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the main Return Order form.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    IdentifierName lastValueElementName()
    {
        return formStr(ReturnTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmFormDataSource(FormDataSource _formDataSource = formDataSource)
    {
        formDataSource = _formDataSource;
        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesTable</Name>
				<Source><![CDATA[
    Query querySalesTable(Query querySalesTable)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            QueryBuildDataSource queryBuildDataSource = querySalesTable.dataSourceTable(tableNum(SalesTable));
            queryBuildDataSource.addRange(fieldNum(SalesTable, SalesType)).value(queryValue(SalesType::ReturnItem));
            //This gets set in 'parmArgs' and is called from Forms\ReturnTable or Forms\ReturnTableListPage
            if (args.parmObject() && classIdGet(args.parmObject()) == classIdGet(mcrReturnTableConfigure))
            {
                mcrReturnTableConfigure = args.parmObject();

                if (mcrReturnTableConfigure.parmSalesId() != "")
                {
                    queryBuildDataSource.addRange(fieldNum(SalesTable, SalesId)).value(queryValue(mcrReturnTableConfigure.parmSalesId()));
                }

                if (mcrReturnTableConfigure.parmCustAccount() != "")
                {
                    queryBuildDataSource.addRange(fieldNum(SalesTable, CustAccount)).value(queryValue(mcrReturnTableConfigure.parmCustAccount()));
                }

                if (mcrReturnTableConfigure.parmOriginalSalesId() != "")
                {
                    queryBuildDataSource.addRange(fieldNum(MCRReturnSalesTable, OriginalSalesId)).value(queryValue(mcrReturnTableConfigure.parmOriginalSalesId()));
                }
            }
            queryBuildDataSource.addSortField(fieldNum(SalesTable, RecId));
        }
        else
        {
            QueryBuildRange qbr = querySalesTable.dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesType));
            qbr.value(queryValue(SalesType::ReturnItem));
            qbr.status(RangeStatus::Locked);
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLineAgreementLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a linked agreement line from a sales line that is based on the original sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line record that will be un-linked from the agreement line.
    /// </param>
    /// <returns>
    /// true if order header was updated; otherwise, false.
    /// </returns>
    public boolean removeLineAgreementLink(SalesLine _salesLine)
    {
        SalesLine                               localSalesLine;
        SalesTable                              origSalesTable = salesTable.orig().data();
        SalesAgreementHeader                    salesAgreementHeader;
        boolean                                 doRereadReturnHeader;

        ttsbegin;
        _salesLine.unLinkAgreementLine(true);

        // If no return sales lines left (in this return order)that are linked to the agreement lines,
        // remove link to the agreement header from a current header record
        select firstonly RecId from localSalesLine
            where   localSalesLine.MatchingAgreementLine != 0
                    && localSalesLine.SalesId == _salesLine.SalesId;
        if (!localSalesLine.RecId)
        {
            SalesTable salesTableHeaderForUpdate = _salesLine.salesTable(true);
            if (salesTableHeaderForUpdate)
            {
                salesAgreementHeader.removeAgreementReleaseHeaderMatch(salesTableHeaderForUpdate);
                salesTableHeaderForUpdate.MatchingAgreement = 0;
                salesTableHeaderForUpdate.update();
                doRereadReturnHeader = true;
            }
        }
        ttscommit;

        return doRereadReturnHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnCancel</Name>
				<Source><![CDATA[
    public void returnCancel()
    {
        MCRSalesOrderCancellation   mcrSalesOrderCancellation;

        SalesTable returnTable = formDataSource.cursor();
        SalesId curSalesId = returnTable.SalesId;

        // Cancelled return orders cannot be reopened. Are you sure you want to cancel?
        if (Box::yesNo("@SYS106095", DialogButton::No, "") == DialogButton::Yes)
        {
            boolean mcrOrderCompletionEnabled = RetailMCRChannelTable::mcrEnableOrderCompletion(returnTable);
            if (mcrOrderCompletionEnabled)
            {
                mcrSalesOrderCancellation = new MCRSalesOrderCancellation();
                mcrSalesOrderCancellation.preCancel(returnTable);
            }

            // %1 return order(s) was cancelled
            info(strFmt("@SYS104942", SalesTable::changeReturnStatus(formDataSource, ReturnUpdateAction::Cancel)));

            formDataSource.research();
            formDataSource.positionToRecord(SalesTable::find(curSalesId));

            if (mcrOrderCompletionEnabled)
            {
                returnTable = formDataSource.cursor();
                if (returnTable.SalesStatus == SalesStatus::Canceled)
                {
                    mcrSalesOrderCancellation.postCancelOrder(returnTable);
                }

                mcrSalesOrderCancellation.postCancelAdjPayment(returnTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnCreateReplacement</Name>
				<Source><![CDATA[
    void returnCreateReplacement()
    {
        Args            newArgs    = new Args();

        SalesTable returnTable = formDataSource.cursor();
        SalesId curSalesId = returnTable.SalesId;

        if (!returnTable.createReplacementOrderAllowed())
        {
            return;
        }

        SalesTableForm replacementTableForm = SalesTableForm::construct(SalesTableFormId::None, args.record());
        replacementTableForm.custAccount(returnTable.CustAccount);
        replacementTableForm.invoiceAccount(returnTable.InvoiceAccount);
        replacementTableForm.returnItemNum(returnTable.ReturnItemNum);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // exchange logic for defaulting
            SalesTable salesTableOriginal = SalesTable::find(returnTable.SalesId);
            MCRSalesTable mcrSalesTableOriginal = salesTableOriginal.mcrSalesTable();
            replacementTableForm.parmMCRIsExchange(NoYes::Yes);
            replacementTableForm.parmMCROriginalSalesId(returnTable.SalesId);
            replacementTableForm.parmMCROriginalDlvMode(salesTableOriginal.DlvMode);
            MCROrderParameters mcrOrderParameters = MCROrderParameters::find();
            if (mcrOrderParameters.mcrExchangeSourceCode == MCRExchangeSourceCode::Original)
            {
                replacementTableForm.parmMCRSourceId(mcrSalesTableOriginal.SourceId);

                //If the original source code is not valid, use the default one specified in sales parameters
                Catalog catalog = Catalog::find(MCRSourceCodeSetup::find(returnTable.mcrSalesTable().SourceId).Catalog);

                if (!mcrOrderParameters.mcrAllowExpiredSourceCode &&
                    (catalog.ValidFrom > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) ||
                     catalog.ValidTo < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) )
                {
                    replacementTableForm.parmMCRSourceId(mcrOrderParameters.mcrDefaultExchangeSourceID);
                }
            }
            else if (mcrOrderParameters.mcrExchangeSourceCode == MCRExchangeSourceCode::DefaultSourceCode)
            {
                replacementTableForm.parmMCRSourceId(mcrOrderParameters.mcrDefaultExchangeSourceID);
            }

            replacementTableForm.parmMCRSmmCampaignId(salesTableOriginal.SmmCampaignId);
            replacementTableForm.parmMCRContactPersonID(salesTableOriginal.ContactPersonId);
            replacementTableForm.parmMCRSmmTMCallListID(salesTableOriginal.mcrSalesTable().SmmTMCallListId);
        }

        replacementTableForm.replacementOrder(true);

        if (replacementTableForm.create())
        {
            SalesTable newSalesTable = replacementTableForm.salesTable();

            if (newSalesTable)
            {
                formDataSource.executeQuery();

                newArgs.record(newSalesTable);
                newArgs.caller(formDataSource.formRun());

                new MenuFunction(menuitemDisplayStr(SalesTable), MenuItemType::Display).run(newArgs);
                formDataSource.reread();

                formDataSource.positionToRecord(SalesTable::find(curSalesId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormChangedInventoriedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form to reflect the current inventoried status, that is, after a change to the
    /// <c>itemId</c>, <c>category</c>, or <c>inventoriedItem</c> field.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record that is used to determine whether to enable the buttons.
    /// </param>
    /// <param name="_salesLineDataSource">
    /// The <c>SalesLine</c> data source on which to enable the fields.
    /// </param>
    /// <param name="_intercompanyLineButtonGroup">
    /// The button group which hold the intercompany buttons.
    /// </param>
    /// <param name="_buttonLineInventTrans">
    /// The button to view inventory transactions on the line.
    /// </param>
    /// <param name="_buttonLineInventOnHand">
    /// The button to view inventory available for the item on the line.
    /// </param>
    /// <param name="_buttonLineInventLot">
    /// The button to view the inventory lot details for the line.
    /// </param>
    /// <param name="_buttonLineInventDimTracking">
    /// The button to view inventory trace for the line.
    /// </param>
    public void updateFormChangedInventoriedStatus(
        SalesLine                       _salesLine,
        FormDataSource                  _salesLineDataSource,
        FormButtonGroupControl          _intercompanyLineButtonGroup,
        FormFunctionButtonControl       _buttonLineInventTrans,
        FormFunctionButtonControl       _buttonLineInventOnHand,
        FormFunctionButtonControl       _buttonLineInventLot,
        FormFunctionButtonControl       _buttonLineInventDimTracking)
    {
        boolean isCategoryBased = _salesLine.isCategoryBased();

        // Disable category editing if itemid is selected for the line
        _salesLineDataSource.object(fieldNum(SalesLine, SalesCategory)).allowEdit(isCategoryBased);

        // Disable itemid editing if a category is selected for the line
        _salesLineDataSource.object(fieldNum(SalesLine, ItemId)).allowEdit(!isCategoryBased);

        _intercompanyLineButtonGroup.enabled(this.allowEnableInterCompanyOnHandButton(_salesLine));
        this.enableLineInventoryButtons(_salesLine, _buttonLineInventTrans, _buttonLineInventOnHand, _buttonLineInventLot, _buttonLineInventDimTracking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls whether the item in question should be replaced with the alternative item set up in the
    ///    Item details form.
    /// </summary>
    /// <returns>
    ///    true if the item in question should be replace with the alternative item set up; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Overridden to return false as for Return orders alternatve items should never be used.
    /// </remarks>
    public boolean useAlternativeItem()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>