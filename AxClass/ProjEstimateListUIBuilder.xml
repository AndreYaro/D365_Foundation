<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjEstimateListUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjEstimateListUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField estimateDateField;
    DialogField menuitemTypeDialogField;

    int                     menuNumber;
    ProjEstimateListContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQueryRange</Name>
				<Source><![CDATA[
    private void addQueryRange()
    {
        Query           query;
        MapEnumerator   mapEnum;

        SrsReportRunController srsController = this.controller();
        mapEnum = srsController.parmReportContract().parmQueryContracts().getEnumerator();

        while (mapEnum.moveNext())
        {
            query = mapEnum.currentValue();
            if (query)
            {
                query.dataSourceTable(tableNum(ProjWIPTable)).addRange(fieldNum(ProjWIPTable, ProjId));
            }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        contract = this.dataContractObject() as ProjEstimateListContract;
        super();
        this.setParameterVisibility(this.controller().parmArgs());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    public void dialogSelectCtrl()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers data from the dialog into the data contract object.
    /// </summary>
    public void getFromDialog()
    {
        super();
        contract.parmMenuItemType(menuNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodFromLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the lookup for the budget cycle field.
    /// </summary>
    /// <param name="_periodFromControl">
    /// The <c>FormStringControl</c> class for which the lookup fields must be associated.
    /// </param>
    public void periodFromLookup(FormDateControl _periodFromControl)
    {
        DialogField periodIdField;
        periodIdField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjPeriodId));
        ProjPeriodLine::lookupPeriod(estimateDateField.control(), periodIdField.value(),estimateDateField.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to register the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // Override the Lookup method of PeriodFrom field.
        estimateDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjEstimateDate));
        estimateDateField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(ProjEstimateListUIBuilder, periodFromLookup), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preBuild</Name>
				<Source><![CDATA[
    public void preBuild()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>readEstimateListParameters</Name>
				<Source><![CDATA[
    public void readEstimateListParameters(Args   _args)
    {
        ProjControlPeriod projControlPeriod;
        ProjControlPosting projControlPosting;

        if (_args.parmObject())
        {
            switch (classIdGet(_args.parmObject()))
            {
                case classNum(ProjControlPeriodCreate),
                    classNum(ProjControlPeriodCalculate),
                    classNum(ProjControlPeriodDelete),
                    classNum(ProjControlPeriodEliminate),
                    classNum(ProjControlPeriodUpdate),
                    classNum(ProjControlPeriodUpdateCheck)     :

                    projControlPeriod   = _args.parmObject();

                    this.setEstimateListParameters(projControlPeriod.outputIncludeCreated(),
                    projControlPeriod.outputIncludeEliminated(),
                    projControlPeriod.outputIncludePosted(),
                    projControlPeriod.outputIncludeReversed(),
                    projControlPeriod.parmProjPeriodId(),
                    projControlPeriod.parmProjPeriodTo(),
                    projControlPeriod.parmProjControlTypeOutput());
                    break;

                case classNum(ProjControlPosting) :

                    projControlPosting = _args.parmObject();

                    this.setEstimateListParameters(false,false,false,false,
                    projControlPosting.parmProjPeriodId(),
                    projControlPosting.parmPeriodTo(),
                    projControlPosting.parmProjControlTypeOutput());

                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEstimateListParameters</Name>
				<Source><![CDATA[
    public void setEstimateListParameters(NoYes _includeCreatedTrans,NoYes _includeEliminated,
                                        NoYes _includePosted,NoYes _includeReversed,
                                        ProjPeriodId _projPeriodId, ProjPeriodTo    _period,
                                        ProjControlTypeOutput _outputResult)
    {
        DialogField             dialogField1;

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjPeriodId));
        if (dialogField1)
        {
            dialogField1.value(_projPeriodId);
        }

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjEstimateDate));
        if (dialogField1)
        {
            dialogField1.value(_period);
        }

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjCreated));
        if (dialogField1)
        {
            dialogField1.value(_includeCreatedTrans);
        }

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjPosted));
        if (dialogField1)
        {
            dialogField1.value(_includePosted);
        }

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjReversed));
        if (dialogField1)
        {
            dialogField1.value(_includeReversed);
        }

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjIncludeEliminated));
        if (dialogField1)
        {
            dialogField1.value(_includeEliminated);
        }

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ProjEstimateListContract, parmProjIncludeWarnings));
        if (dialogField1)
        {
            dialogField1.value(_outputResult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupDataVisibility</Name>
				<Source><![CDATA[
    public void setGroupDataVisibility(boolean _visible = false)
    {
        this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjIncludeEliminated), _visible);
        this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmEstimateColumn), _visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupEstimateStatusVisibility</Name>
				<Source><![CDATA[
    public void setGroupEstimateStatusVisibility(boolean _visible = false)
    {
        this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjCreated), _visible);
        this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjElimination), _visible);
        this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjPosted), _visible);
        this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjReversed), _visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupWarningVisibility</Name>
				<Source><![CDATA[
    public void setGroupWarningVisibility(boolean _visible = false)
    {
        this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjIncludeWarnings), _visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameterVisibility</Name>
				<Source><![CDATA[
    private void setParameterVisibility(Args args)
    {
        MenuItemNameOutput      menuName;

        menuName = args.menuItemName();

        switch (menuName)
        {
            case menuitemOutputStr(ProjListEstimateprodBacklogConsum):
                this.setGroupWarningVisibility(false);
                this.setGroupEstimateStatusVisibility(false);
                this.setGroupDataVisibility(false);
                menuNumber = 0;
                break;

            case menuitemOutputStr(ProjListEstimateProdBacklogOnAcc):
                this.setGroupWarningVisibility(false);
                this.setGroupEstimateStatusVisibility(false);
                this.setGroupDataVisibility(false);
                menuNumber = 1;
                break;

            case menuitemOutputStr(ProjListEstimateprodBacklogPL):
                this.setGroupWarningVisibility(false);
                this.setGroupEstimateStatusVisibility(false);
                this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmEstimateColumn), false);
                menuNumber = 2;
                break;

            case menuitemOutputStr(ProjListEstimateReadyForElimination):
                this.setGroupWarningVisibility(false);
                this.setGroupEstimateStatusVisibility(false);
                this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmEstimateColumn), false);
                menuNumber = 3;
                break;
            //ProjListEstimateReport.ProjListEstimate.Report
            case menuitemOutputStr(ProjListEstimateWonFixedPriceProjPL):
                this.setGroupWarningVisibility(false);
                this.setGroupEstimateStatusVisibility(false);
                this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjIncludeEliminated), false);
                menuNumber = 4;
                break;
            //ProjEstimateListReport.ProjEstimateList.Report
            case menuitemOutputStr(ProjEstimateList):
                menuNumber = 6;
                this.setGroupDataVisibility(false);
                this.readEstimateListParameters(args);
                break;
            //ProjListEstimateHourRateReport.ProjListEstimateHourRate.Report
            default:
                this.setGroupWarningVisibility(false);
                this.setGroupEstimateStatusVisibility(false);
                this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjIncludeEliminated), false);
                menuNumber = 5;
                break;
        }

        if (menuNumber == 0 || menuNumber == 1 || menuNumber == 2 || menuNumber == 3)
        {
            this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmEstimateColumn), false);
        }

        if (menuNumber == 0 || menuNumber == 1 || menuNumber == 4)
        {
            this.setVisibilityForControls(methodStr(ProjEstimateListContract, parmProjIncludeEliminated), false);
        }

        if (menuNumber == 0 || menuNumber == 1 || menuNumber == 2 || menuNumber == 4)
        {
            this.addQueryRange();
        }

        if (menuNumber == 3)
        {
            this.controller().parmDisplayQueryFilter(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForControls</Name>
				<Source><![CDATA[
    private void setVisibilityForControls(IdentifierName methodName, boolean _visible = false)
    {
        DialogField dialogField1;

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(),  methodName);
        if (dialogField1)
        {
            dialogField1.visible(_visible);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>