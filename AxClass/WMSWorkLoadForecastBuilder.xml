<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsWorkLoadForecastBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WMSWorkLoadForecastBuilder</c> class creates a warehouse workload forecast.
/// </summary>
public class WmsWorkLoadForecastBuilder
{
    WMSSpaceUtilInconsistencyLogger inconsistencyLogger;
    TransDate                       fromDate;
    TransDate                       toDate;
    ReqPlanId                       reqPlanId;
    PeriodTemplateName              periodTemplateName;
    RefRecId                        reportSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildBacklogQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query to retrieve backlog records for master plan.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class, which contains backlog records for master plan.
    /// </returns>
    protected Query buildBacklogQuery()
    {
        QueryBuildDataSource    reqTransDatasource;
        QueryBuildDataSource    inventDimDataSource;
        Query                   query = new Query();

        reqTransDatasource = query.addDataSource(tableNum(ReqTrans));
        inventDimDataSource = reqTransDatasource.addDataSource(tableNum(InventDim));
        inventDimDataSource.relations(true);

        reqTransDatasource.addRange(fieldNum(ReqTrans, PlanVersion)).value(queryValue(this.getCurrentReqPlan()));
        reqTransDatasource.addRange(fieldNum(ReqTrans, ReqDate)).value(queryRange(dateNull(), fromDate));

        reqTransDatasource.addGroupByField(fieldNum(ReqTrans, ItemId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventSiteId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventLocationId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates work load forecast.
    /// </summary>
    public void buildForecast()
    {
        ttsbegin;

        this.setupReportRun();

        this.processForecastRecords(this.buildBacklogQuery(), WMSWorkloadProcessorBacklog::newFromReportSetup(reqPlanId, fromDate, toDate, periodTemplateName));

        this.processForecastRecords(this.buildPlannedForecastQuery(), WMSWorkloadProcessorPlannedForecast::newFromReportSetup(reqPlanId, fromDate, toDate, periodTemplateName));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPlannedForecastQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query to retrieve item combinations within expected master plan records.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    protected Query buildPlannedForecastQuery()
    {
        QueryBuildDataSource            reqTransDatasource;
        QueryBuildDataSource            inventDimDataSource;
        Query                           query = new Query();

        reqTransDatasource = query.addDataSource(tableNum(ReqTrans));
        inventDimDataSource = reqTransDatasource.addDataSource(tableNum(InventDim));
        inventDimDataSource.relations(true);

        reqTransDatasource.addRange(fieldNum(ReqTrans, PlanVersion)).value(queryValue(this.getCurrentReqPlan()));
        reqTransDatasource.addRange(fieldNum(ReqTrans, ReqDate)).value(queryRange(fromDate, toDate));

        reqTransDatasource.addGroupByField(fieldNum(ReqTrans, ItemId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventSiteId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventLocationId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFallBackWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates specified inventory dimensions with the default warehouse.
    /// </summary>
    /// <param name="_inventDim">
    /// An instance of the <c>InventDim</c> class.
    /// </param>
    /// <returns>
    /// The original inventory dimensions with the default warehouse set.
    /// </returns>
    protected InventDim checkFallBackWarehouse(InventDim _inventDim)
    {
        InventDim   newInventDim;

        newInventDim.initFromInventDim(_inventDim);

        if (!newInventDim.InventLocationId)
        {
            newInventDim.InventLocationId = InventFallbackWarehouse::find(newInventDim.InventSiteId).InventLocationId;
        }

        return newInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentReqPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current master plan version.
    /// </summary>
    /// <returns>
    ///     A reference to the master plan version.
    /// </returns>
    protected RefRecId getCurrentReqPlan()
    {
        return
               ReqPlan::findReqPlanId(reqPlanId).findActiveVersion().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInconsistencyLogger</Name>
				<Source><![CDATA[
        public WMSSpaceUtilInconsistencyLogger parmInconsistencyLogger(WMSSpaceUtilInconsistencyLogger _inconsistencyLogger = inconsistencyLogger)
    {
        inconsistencyLogger = _inconsistencyLogger;

        return inconsistencyLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodTemplateName</Name>
				<Source><![CDATA[
        public PeriodTemplateName parmPeriodTemplateName(PeriodTemplateName _periodTemplateName = periodTemplateName)
    {
        periodTemplateName = _periodTemplateName;

        return periodTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSetup</Name>
				<Source><![CDATA[
        public RefRecId parmReportSetup(RefRecId _reportSetup = reportSetup)
    {
        reportSetup = _reportSetup;

        return reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
        public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processForecastRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Process all <c>ReqTrans</c> records for the given query.
    /// </summary>
    /// <param name="_query">
    ///     An instance of the <c>Query</c> object, which contains <c>ReqTrans</c> records.
    /// </param>
    /// <param name="_workloadProcessor">
    ///     An instance of the <c>WMSWorkloadProcessor</c> class, which processes the planned forecast records.
    /// </param>
    protected void processForecastRecords(Query  _query, WMSWorkloadProcessor _workloadProcessor)
    {
        QueryRun        queryRun;
        ReqTrans        reqTrans;
        InventDim       inventDim;
        InventDim       inventDimOrigin;

        queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            reqTrans        = queryRun.get(tableNum(ReqTrans));
            inventDimOrigin = queryRun.get(tableNum(InventDim));

            inventDim = this.checkFallBackWarehouse(inventDimOrigin);

            if (inventDim.InventLocationId)
            {
                _workloadProcessor.createForecast(reportSetup, reqTrans.ItemId, inventDim, inventDimOrigin);
            }
            else
            {
                inconsistencyLogger.logProductFallBackInconsistency(reqTrans.ItemId, inventDim.InventSiteId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReportRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepare current report run.
    /// </summary>
    protected void setupReportRun()
    {
        WMSWorkLoadForecast     workloadForecast;
        WMSSpaceUtilizationRun  spaceUtilizationRun;
        ReqLog                  log;

        ttsbegin;

        inconsistencyLogger.deleteExistingLog();

        delete_from workloadForecast
            where workloadForecast.wmsReportSetup == reportSetup;

        delete_from spaceUtilizationRun
            where spaceUtilizationRun.wmsReportSetup == reportSetup;

        select firstonly EndDateTime from log
            order by EndDateTime desc
                where log.ReqPlanId == reqPlanId;

        spaceUtilizationRun.PlanId = reqPlanId;
        spaceUtilizationRun.LastRun = log.EndDateTime;
        spaceUtilizationRun.wmsReportSetup = reportSetup;
        spaceUtilizationRun.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSWorkLoadForecastBuilder construct()
    {
        return new WMSWorkLoadForecastBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDataContractAndPeriodTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSWorkLoadForecastBuilder</c> class from the
    /// <c>WMSWorkLoadServiceDataContract</c> and <c>PeriodTemplateName</c> objects.
    /// </summary>
    /// <param name="_dataContract">
    /// An instance of <c>WMSWorkLoadServiceDataContract</c> class.
    /// </param>
    /// <param name="_periodTemplateName">
    /// A period template name.
    /// </param>
    /// <returns>
    /// An instance of <c>WMSWorkLoadForecastBuilder</c> class.
    /// </returns>
    public static WMSWorkLoadForecastBuilder newFromDataContractAndPeriodTemplate(WMSWorkLoadServiceDataContract _dataContract, PeriodTemplateName _periodTemplateName)
    {
        TransDate                       startDate;
        WMSWorkLoadForecastBuilder      workLoadForecastBuilder = WMSWorkLoadForecastBuilder::construct();

        startDate = WMSReportSetup::getCompanyTodayDate();

        workLoadForecastBuilder.parmPeriodTemplateName(_periodTemplateName);
        workLoadForecastBuilder.parmFromDate(startDate);
        workLoadForecastBuilder.parmToDate(startDate + _dataContract.parmNumberOfDays());
        workLoadForecastBuilder.parmReqPlanId(_dataContract.parmReqPlanId());
        workLoadForecastBuilder.parmReportSetup(_dataContract.parmReportSetupRecId());

        return workLoadForecastBuilder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>