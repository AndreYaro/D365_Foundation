<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseConsume</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the consumption of the vendor response to the purchase order.
/// </summary>
public class PurchaseOrderResponseConsume
{
    protected boolean isPurchTableUpdateRequired;
    protected boolean isPurchLineUpdateRequired;
    private int lastLineNumber = 0;
    private Map infoMessage = new Map (Types::String, Types::Enum);

    protected PurchTable purchTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consumePurchaseOrderResponseToPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consume <c>PurchaseOrderResponseHeader</c> changes and its <c>PurchaseOrderResponseLine</c> changes into 
    /// the corresponding <c>PurchTable</c> and the related <c>PurchLine</c>.
    /// </summary>
    public void consumePurchaseOrderResponseToPurchaseOrder()
    {
        System.Exception exception;

        this.checkPurchaseOrderStatusAndDocumentState();
        try
        {
            if (!isPurchTableUpdateRequired && !isPurchLineUpdateRequired)
            {
                this.updateResponseConsumptionStateToConsumed();
            }
            else if (purchTable.ChangeRequestRequired)
            {
                this.consumePurchaseOrderResponseWithChangeManagement();
            }
            else
            {
                this.consumePurchaseOrderResponse();
            }
        }
        catch(exception)
        {
            if (lastLineNumber)
            {
                throw error(strFmt("@SCM:PurchaseOrderResponseConsumeLineError", lastLineNumber));
            }
            else
            {
                throw error("@SCM:PurchaseOrderResponseConsumeHeaderError");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResponseConsumptionStateToConsumed</Name>
				<Source><![CDATA[
    protected void updateResponseConsumptionStateToConsumed()
    {
        purchTable.responseHeader(true).updateResponseHeaderAndLinesConsumptionStateToConsumed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumePurchaseOrderResponseHeaderChanges</Name>
				<Source><![CDATA[
    private void consumePurchaseOrderResponseHeaderChanges(PurchaseOrderResponseHeader _purchaseOrderResponseHeader)
    {
        ttsbegin;
        if (_purchaseOrderResponseHeader.ConsumptionState == ConsumptionState::NotConsumed && purchTable.checkUpdate(false))
        {
            if (this.checkIfPurchTableRequiresUpdate(_purchaseOrderResponseHeader))
            {
                purchTable.selectForUpdate();
                purchTable.DlvMode = _purchaseOrderResponseHeader.DlvMode;
                purchTable.Transport = DlvMode::find(purchTable.DlvMode).Transport;
                purchTable.DlvTerm = _purchaseOrderResponseHeader.DlvTerm;
                purchTable.ConfirmedDlv = _purchaseOrderResponseHeader.ConfirmedDlv;
                purchTable.VendorRef = _purchaseOrderResponseHeader.VendorRef;
                purchTable.update();
                infoMessage.insert("@SCM:PurchaseOrderResponseConsumeHeader", NoYes::No);
            }
            else
            {
                infoMessage.insert("@SCM:PurchaseOrderResponseConsumeHeader_NoChange", NoYes::No);
            }

            _purchaseOrderResponseHeader.ConsumptionState = ConsumptionState::Consumed;
            _purchaseOrderResponseHeader.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumePurchaseOrderResponseWithChangeManagement</Name>
				<Source><![CDATA[
    private void consumePurchaseOrderResponseWithChangeManagement()
    {
        ttsbegin;
        
        this.prepareConsumptionForPurchaseOrderWithChangeManagement();

        this.consumePurchaseOrderResponse();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareConsumptionForPurchaseOrderWithChangeManagement</Name>
				<Source><![CDATA[
    private void prepareConsumptionForPurchaseOrderWithChangeManagement()
    {
        this.checkPurchaseOrderDocumentState_ChangeManagement();

        VersioningPurchaseOrder::newPurchaseOrder(purchTable).resetToDraft();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumePurchaseOrderResponse</Name>
				<Source><![CDATA[
    protected void consumePurchaseOrderResponse()
    {
        PurchaseOrderResponseHeader purchaseOrderResponseHeader = purchTable.responseHeader(true);

        ttsbegin;

        this.consumePurchaseOrderResponseHeaderChanges(purchaseOrderResponseHeader);

        this.consumePurchaseOrderResponseLinesChanges();

        this.printInfoMessages();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumePurchaseOrderResponseLinesChanges</Name>
				<Source><![CDATA[
    private void consumePurchaseOrderResponseLinesChanges()
    {
        ttsbegin;

        this.consumeFirstPurchaseOrderResponeLineAndInitiateArchivingOnPurchLine();
        this.consumeRemainingPurchaseOrderResponseLines();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeFirstPurchaseOrderResponeLineAndInitiateArchivingOnPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consume changes from the first <c>PurchaseOrderResponseLine</c> to its related <c>PurchLine</c> which will initiate archiving for all the related <c>PurchLine</c> records.
    /// </summary>
    /// <remarks>
    /// Selecting all the lines for update will cause an update conflict after the archiving caused by the update of the first line, this is the reason to split it into two updates.
    /// </remarks>
    protected void consumeFirstPurchaseOrderResponeLineAndInitiateArchivingOnPurchLine()
    {
        PurchaseOrderResponseLine responseLine;
        PurchLine purchLine;

        Query query = this.buildResponseLinesConsumptionQuery(true);
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            purchLine = queryRun.get(tableNum(PurchLine));
            responseLine = queryRun.get(tableNum(PurchaseOrderResponseLine));
        
            if (purchLine.RecId)
            {
                this.validateAndConsumeResponseLine(purchLine, responseLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeRemainingPurchaseOrderResponseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consume changes from <c>PurchaseOrderResponseLine</c> to the related <c>PurchLine</c>.
    /// </summary>
    protected void consumeRemainingPurchaseOrderResponseLines()
    {
        PurchLine purchLine;
        PurchaseOrderResponseLine responseLine;

        Query query = this.buildResponseLinesConsumptionQuery(false);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            purchLine = queryRun.get(tableNum(PurchLine));
            responseLine = queryRun.get(tableNum(PurchaseOrderResponseLine));
            
            if (purchLine.RecId)
            {
                this.validateAndConsumeResponseLine(purchLine, responseLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildResponseLinesConsumptionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the response lines that will be consumed to the purchase order.
    /// </summary>
    /// <param name = "_firstOnly">
    /// If only the first record should be selected.
    /// </param>
    /// <returns>
    /// <c>Query</c> object for the response lines that will be consumed to the purchase order.
    /// </returns>
    protected Query buildResponseLinesConsumptionQuery(boolean _firstOnly)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsPurchLine = query.addDataSource(tableNum(PurchLine));
        qbdsPurchLine.update(true);
        qbdsPurchLine.firstOnly(_firstOnly);
        qbdsPurchLine.addRange(fieldNum(PurchLine, PurchId)).value(queryValue(purchTable.PurchId));

        QueryBuildDataSource qbdsResponseLine = qbdsPurchLine.addDataSource(tableNum(PurchaseOrderResponseLine));
        qbdsResponseLine.update(true);
        qbdsResponseLine.joinMode(JoinMode::InnerJoin);
        qbdsResponseLine.addLink(fieldNum(PurchLine, RecId), fieldNum(PurchaseOrderResponseLine, PurchLine));

        str lineStateRange = strfmt('((%1.%2 == %3) || (%1.%2 == %4))',
                                    query.dataSourceTable(tableNum(PurchaseOrderResponseLine)).name(),
                                    fieldStr(PurchaseOrderResponseLine, LineState),
                                    any2int(PurchaseOrderResponseLineState::Accepted),
                                    any2int(PurchaseOrderResponseLineState::AcceptedWithChanges));

        qbdsResponseLine.addRange(fieldNum(PurchaseOrderResponseLine, ConsumptionState)).value(queryValue(ConsumptionState::NotConsumed));
        qbdsResponseLine.addRange(fieldNum(PurchaseOrderResponseLine, LineState)).value(lineStateRange);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResponseLinesModifiedRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add range to the given query range to check if the <c>PurchLine</c> record is different from its related response line.
    /// </summary>
    /// <param name = "_query">
    /// The <c>Query</c> object for adding the range.
    /// </param>
    private void addResponseLinesModifiedRange(Query _query)
    {
        str responseLinesModifiedRange = strfmt('((%1.%3 != %2.%4) || (%1.%5 != %2.%6))',
                                                _query.dataSourceTable(tableNum(PurchLine)).name(),
                                                _query.dataSourceTable(tableNum(PurchaseOrderResponseLine)).name(),
                                                fieldStr(PurchLine, PurchQty),
                                                fieldStr(PurchaseOrderResponseLine, PurchQty),
                                                fieldStr(PurchLine, ConfirmedDlv),
                                                fieldStr(PurchaseOrderResponseLine, ConfirmedDlv));

        _query.dataSourceTable(tableNum(PurchaseOrderResponseLine)).addRange(fieldNum(PurchaseOrderResponseLine, RecId)).value(responseLinesModifiedRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndConsumeResponseLine</Name>
				<Source><![CDATA[
    protected void validateAndConsumeResponseLine(PurchLine _purchLine, PurchaseOrderResponseLine _responseLine)
    {
        if (this.checkIfResponseLineCannotBeConsumedAndUpdateConsumptionState(_purchLine, _responseLine))
        {
            return;
        }
        this.consumeChangesToPurchLineAndUpdateResponseLineConsumptionState(_purchLine, _responseLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConsumeChangesToPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order line must be updated.
    /// </summary>
    /// <param name = "_purchLine">A purchase order line.</param>
    /// <param name = "_responseLine">A purchase order response line.</param>
    /// <returns>true if the purchase order line is changed; otherwise, false.</returns>
    protected boolean mustConsumeChangesToPurchLine(PurchLine _purchLine, PurchaseOrderResponseLine _responseLine)
    {
        return (_purchLine.PurchQty != _responseLine.PurchQty || _purchLine.ConfirmedDlv != _responseLine.ConfirmedDlv);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPurchaseQuantityChanged</Name>
				<Source><![CDATA[
    private boolean hasPurchaseQuantityChanged(PurchLine _purchLine, PurchaseOrderResponseLine _responseLine)
    {
        return _purchLine.PurchQty != _responseLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeChangesToPurchLineAndUpdateResponseLineConsumptionState</Name>
				<Source><![CDATA[
    private void consumeChangesToPurchLineAndUpdateResponseLineConsumptionState(PurchLine _purchLine, PurchaseOrderResponseLine _responseLine)
    {
        boolean purchQtyChanged = _purchLine.PurchQty != _responseLine.PurchQty;

        lastLineNumber = _responseLine.LineNumber;

        if (this.mustConsumeChangesToPurchLine(_purchLine, _responseLine))
        {
            infoMessage.insert(strFmt("@SCM:PurchaseOrderResponseConsumeLine", _responseLine.LineNumber), NoYes::No);

            this.initializePurchLine(_purchLine, _responseLine);

            if (purchQtyChanged)
            {
                PurchLine::modifyPurchQty(_purchLine, _purchLine.inventDim(), false, InventMovementQuantityErrorCorrectionMethods::acceptUserInputWithWarning());
                InventMovement::bufferSetRemainQty(_purchLine);
            }

            _purchLine.update();
        }
        else
        {
            infoMessage.insert(strFmt("@SCM:PurchaseOrderResponseConsumeLine_NoChange", _responseLine.LineNumber), NoYes::No);
        }

        this.updateResponseLineConsumptionState(_responseLine, ConsumptionState::Consumed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase order line from the purchase order response line.
    /// </summary>
    /// <param name = "_purchLine">A purchase order line.</param>
    /// <param name = "_responseLine">A purchase order response line.</param>
    protected void initializePurchLine(PurchLine _purchLine, PurchaseOrderResponseLine _responseLine)
    {
        this.initializePurchLineFromResponseLine(_purchLine, _responseLine);

        if (_purchLine.MatchingAgreementLine)
        {
            this.validateAgreementLink(_purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchLineFromResponseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase order line from the purchase order response line.
    /// </summary>
    /// <param name = "_purchLine">A purchase order line.</param>
    /// <param name = "_responseLine">A purchase order response line.</param>
    protected void initializePurchLineFromResponseLine(PurchLine _purchLine, PurchaseOrderResponseLine _responseLine)
    {
        _purchLine.PurchQty = _responseLine.PurchQty;
        _purchLine.ConfirmedDlv = _responseLine.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResponseLineConsumptionState</Name>
				<Source><![CDATA[
    protected void updateResponseLineConsumptionState(PurchaseOrderResponseLine _responseLine, ConsumptionState _consumptionState)
    {
        _responseLine.ConsumptionState = _consumptionState;
        _responseLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfResponseLineCannotBeConsumedAndUpdateConsumptionState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the <c>PurchaseOrderResponseLine</c> record cannot be consumed and update its consumption state.
    /// </summary>
    /// <param name = "_purchLine">
    /// The <c>PurchLine</c> record associated with the <c>PurchaseOrderResponseLine</c> record.
    /// </param>
    /// <param name = "_responseLine">
    /// The given <c>PurchaseOrderResponseLine</c> record.
    /// </param>
    /// <returns>
    /// true, if the <c>PurchaseOrderResponseLine</c> record cannot be consumed; otherwise, false.
    /// </returns>
    protected boolean checkIfResponseLineCannotBeConsumedAndUpdateConsumptionState(PurchLine _purchLine, PurchaseOrderResponseLine _responseLine)
    {
        if (_purchLine.IsDeleted)
        {
            this.showWarningAndUpdateConsumptionState("@SCM:PurchaseOrderResponseConsumeLine_NotAllowed", _purchLine.LineNumber, "@SYS332948", _responseLine);
            return true;
        }

        if (_purchLine.isCanceled() || _purchLine.isInvoiced())
        {
            this.showWarningAndUpdateConsumptionState("@SCM:PurchaseOrderResponseConsumeLine_NotAllowed", _purchLine.LineNumber, enum2Str(_purchLine.PurchStatus), _responseLine);
            return true;
        }

        if (_purchLine.DeliveryType == TradeLineDlvType::DropShip && _purchLine.PurchQty != _responseLine.PurchQty)
        {
            this.showWarningAndUpdateConsumptionState("@SCM:PurchaseOrderResponseConsumeLine_DirectDelivery", _purchLine.LineNumber, enum2Str(TradeLineDlvType::DropShip), _responseLine);
            return true;
        }

        if (_purchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            this.showWarningAndUpdateConsumptionState("@SCM:PurchaseOrderResponseConsumeLine_NotAllowed", _purchLine.LineNumber, enum2Str(LineDeliveryType::OrderLineWithMultipleDeliveries), _responseLine);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningAndUpdateConsumptionState</Name>
				<Source><![CDATA[
    private void showWarningAndUpdateConsumptionState(str _warningMsg, LineNum _purchLineNumber, str _reason, PurchaseOrderResponseLine _responseLine)
    {
        infoMessage.insert(strFmt(_warningMsg, _purchLineNumber, strLwr(_reason)), NoYes::Yes);
        this.updateResponseLineConsumptionState(_responseLine, ConsumptionState::CannotBeConsumed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgreementLink</Name>
				<Source><![CDATA[
    private void validateAgreementLink(PurchLine _purchLine)
    {
        AgreementLine agreementLine = AgreementLine::find(_purchLine.MatchingAgreementLine);

        if (agreementLine.RecId)
        {
            if (!agreementLine.isLinkValid(_purchLine, false))
            {
                infoMessage.insert(strFmt("@SCM:PurchaseOrderResponseConsumeLine_AgreementLine", _purchLine.LineNumber), NoYes::Yes);
                _purchLine.unLinkAgreementLine();
                _purchLine.MatchingAgreementLine = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchaseOrderDocumentState_ChangeManagement</Name>
				<Source><![CDATA[
    private void checkPurchaseOrderDocumentState_ChangeManagement()
    {
        VersioningDocumentState documentState = purchTable.DocumentState;

        if (documentState == VersioningDocumentState::Rejected || documentState == VersioningDocumentState::InReview)
        {
            throw error("@SCM:PurchaseOrderResponseConsume_InReviewOrRejected");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchaseOrderStatusAndDocumentState</Name>
				<Source><![CDATA[
    private void checkPurchaseOrderStatusAndDocumentState()
    {
        if (purchTable.isCanceled() || purchTable.isInvoiced())
        {
            throw error(strFmt("@SCM:PurchaseOrderResponseConsumeNotAllowed", purchTable.PurchStatus));
        }

        if (purchTable.DocumentState == VersioningDocumentState::Finalized)
        {
            throw error(strFmt("@SCM:PurchaseOrderResponseConsume_Finalized", purchTable.DocumentState));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPurchTableRequiresUpdate</Name>
				<Source><![CDATA[
    protected boolean checkIfPurchTableRequiresUpdate(PurchaseOrderResponseHeader _responseHeader)
    {
        return purchTable.DlvMode != _responseHeader.DlvMode
                || purchTable.DlvTerm != _responseHeader.DlvTerm
                || purchTable.VendorRef != _responseHeader.VendorRef
                || purchTable.ConfirmedDlv != _responseHeader.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPurchLinesRequireUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a <c>PurchLine</c> record associated with the given <c>PurchId</c> that requires an update
    /// based on its related <c>PurchaseOrderResponseLine</c> record.
    /// </summary>
    /// <param name = "_purchId">
    /// The <c>PurchId</c> value to filter on.
    /// </param>
    /// <returns>
    /// true if there is a <c>PurchLine</c> record which requires an update; otherwise, false.
    /// </returns>
    protected boolean checkIfPurchLinesRequireUpdate(PurchId _purchId)
    {
        PurchLine purchLine;
        PurchaseOrderResponseLine purchaseOrderResponseLine;

        Query query = this.buildPurchLinesRequireUpdateQuery();

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            purchLine = queryRun.get(tableNum(PurchLine));
        }

        return purchLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchLinesRequireUpdateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the <c>PurchLine</c> records that rquire an update
    /// based on its related <c>PurchaseOrderResponseLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> object for the <c>PurchLine</c> records that rquire an update.
    /// </returns>
    protected Query buildPurchLinesRequireUpdateQuery()
    {
        Query query = this.buildResponseLinesConsumptionQuery(true);
        this.addResponseLinesModifiedRange(query);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInfoMessages</Name>
				<Source><![CDATA[
    protected void printInfoMessages()
    {
        if (!infoMessage.empty())
        {
            MapEnumerator infoMessagesEnumerator = infoMessage.getEnumerator();
            while (infoMessagesEnumerator.moveNext())
            {
                if (infoMessagesEnumerator.currentValue() == NoYes::Yes)
                {
                    warning(infoMessagesEnumerator.currentKey());
                }
                else
                {
                    info(infoMessagesEnumerator.currentKey());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    protected PurchTable parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsPurchTableUpdateRequired</Name>
				<Source><![CDATA[
    public boolean getIsPurchTableUpdateRequired()
    {
        return isPurchTableUpdateRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsPurchLineUpdateRequired</Name>
				<Source><![CDATA[
    public boolean getIsPurchLineUpdateRequired()
    {
        return isPurchLineUpdateRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>PurchaseOrderResponseConsume</c> and initializes it with the passed in <c>PurchTable</c>.
    /// </summary>
    /// <param name = "_purchTable"><c>PurchTable</c> record.</param>
    /// <returns>Instance of <c>PurchaseOrderResponseConsume</c>.</returns>
    public static PurchaseOrderResponseConsume construct(PurchTable _purchTable)
    {
        PurchaseOrderResponseConsume purchaseOrderResponseConsume = new PurchaseOrderResponseConsume();
        purchaseOrderResponseConsume.parmPurchTable(_purchTable);
        purchaseOrderResponseConsume.isPurchTableUpdateRequired = purchaseOrderResponseConsume.checkIfPurchTableRequiresUpdate(_purchTable.responseHeader());
        purchaseOrderResponseConsume.isPurchLineUpdateRequired = purchaseOrderResponseConsume.checkIfPurchLinesRequireUpdate(_purchTable.PurchId);
        return purchaseOrderResponseConsume;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>