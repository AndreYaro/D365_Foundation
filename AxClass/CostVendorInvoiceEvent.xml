<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostVendorInvoiceEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostVendorInvoiceEvent</c> class implements the invoice inventory event.
/// </summary>
public class CostVendorInvoiceEvent extends CostInventoryEvent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCostEvent</Name>
				<Source><![CDATA[
    protected CostEvent createCostEvent()
    {
        return CostAdjustmentEvent::create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingRules</Name>
				<Source><![CDATA[
    protected List getPostingRules()
    {
        List list = new List(Types::Class);
        list.addEnd(CostRelieveCost::construct());

        if (PurchParameters::find().ProductReceiptCharges)
        {
            CostInvoiceMarkup invoiceMarkup = CostInvoiceMarkup::newInventoryEvent(this);
            Enumerator enumerator = invoiceMarkup.getSourceEnumerator();
            while (enumerator.moveNext())
            {
                CostEntrySource source = enumerator.current();
                list.addEnd(CostAllocateCostFromSource::newSourceAmount(source, invoiceMarkup.getAmount(source, totalQuantity)));
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReconcilingEntries</Name>
				<Source><![CDATA[
    protected void loadReconcilingEntries()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostTransState</Name>
				<Source><![CDATA[
    protected InventCostTransState parmInventCostTransState()
    {
        return InventCostTransState::Financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostVendorInvoiceEvent construct()
    {
        return new CostVendorInvoiceEvent();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
