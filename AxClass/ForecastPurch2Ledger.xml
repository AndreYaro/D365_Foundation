<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastPurch2Ledger</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class ForecastPurch2Ledger extends Forecast2Ledger implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> method
    ///    returns false, this method will not have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BudgetTransactionLine</c> table record.
    /// </summary>
    /// <param name="_forecastPurch">
    ///    The <c>ForecastPurch</c> table record that contains information for the
    ///    <c>BudgetTransactionLine</c> table record.
    /// </param>
    /// <param name="_defaultAccount">
    ///    The ledger dimension default account reference to be processed for inclusion in the budget ledger
    ///    dimension.
    /// </param>
    /// <param name="_amountCur">
    ///    The amount for the <c>BudgetTransactionLine</c> table record.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity for the <c>BudgetTransactionLine</c> table record; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The creation process encountered an error and was not completed.
    /// </exception>
    protected void createBudgetTransactionLine(
        ForecastPurch _forecastPurch,
        LedgerDimensionDefaultAccount _defaultAccount,
        AmountCur _amountCur,
        Qty _quantity = 0)
    {
        BudgetTransactionLine budgetTransactionLine;

        ttsbegin;

        // Increment the number of budget transaction lines and assign the value to LineNumber.
        numOfBudgetTransactionLines += 1;
        budgetTransactionLine.LineNumber = numOfBudgetTransactionLines;

        budgetTransactionLine.BudgetTransactionHeader = budgetTransactionHeader.RecId;

        // Set the budget transaction line fields.
        budgetTransactionLine.LedgerDimension = budgetTransactionManager.getLedgerDimensionBudget(_defaultAccount, _forecastPurch.DefaultDimension, strfmt("@SYS300282", budgetTransactionCode.BudgetTransactionType));

        // Add any dimension attributes that are not enabled for budget to the cache.
        // This cache will be used at the end of the process to warn users that some dimension attributes
        // were not transferred to budget transactions.
        budgetTransactionManager.cacheDimAttributesNotBudgetEnabled(_defaultAccount);
        budgetTransactionManager.cacheDefaultDimAttribNotBudgetEnabled(_forecastPurch.DefaultDimension);

        budgetTransactionLine.Date = _forecastPurch.StartDate;
        budgetTransactionLine.Comment = _forecastPurch.Comment;

        budgetTransactionLine.TransactionCurrency = _forecastPurch.Currency;
        budgetTransactionLine.TransactionCurrencyAmount = CurrencyExchangeHelper::amount(_amountCur, budgetTransactionLine.TransactionCurrency);
        budgetTransactionLine.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                                                            budgetTransactionLine.TransactionCurrencyAmount,
                                                            budgetTransactionLine.TransactionCurrency,
                                                            budgetTransactionLine.Date);
        budgetTransactionLine.Quantity = _quantity;

        if (budgetTransactionLine.validateWrite() == true &&
            BudgetTransactionManager::validateLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.Date) == true)
        {
            budgetTransactionLine.write();
        }
        else
        {
            // The budget transaction line must be created to complete the transfer.
            throw error("@SYS131643");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super();

        dialogModel = dialog.addField(extendedtypestr(BudgetModelHeadId), "@SYS1966");
        dialogModel.helpText("@SYS25645");
        dialogModel.value(toModel);

        dialogDeleteOld = dialog.addField(enumstr(NoYes), "@SYS27037", "@SYS55287");
        dialogDeleteOld.value(deleteOld);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes variables used for budget transactions during the purchase forecast budget transfer
    ///    process.
    /// </summary>
    /// <remarks>
    ///    Sets the <c>BudgetTransactionType</c> enumeration value to <c>PurchForecast</c>, gets the default
    ///    budget transaction code for purchase forecast, and gets the parameter that determines whether the
    ///    transferred budget is completed.
    /// </remarks>
    protected void initBudgetTransaction()
    {
        budgetTransactionManager = BudgetTransactionManager::construct();

        budgetTransactionType = BudgetTransactionType::PurchForecast;

        // Get the default budget transaction code.
        budgetTransactionCode = BudgetTransactionCode::findDefaultByTransactionType(budgetTransactionType);

        // Get the parameter that determines whether the transferred budget is completed for purchase forecast.
        isBudgetTransStatusCompleted = BudgetParameters::find().IsSupplyFcstBudgetTransCreateAsCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        qr = new QueryRun(querystr(ForecastPurch2Ledger));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        // Initialize the budget transaction objects needed for the transfer.
        this.initBudgetTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post()
    {
        LedgerDimensionDefaultAccount   receiptACLedgerDimension;
        LedgerDimensionDefaultAccount   discACLedgerDimension;
        Amount                          bruttoAmount;
        Amount                          discAmount;
        Amount                          budgetTransAmount;
        ForecastPurch                   forecastPurch;
        str                             prefixField;
        InventTable                     inventTable;

        progress.setCount(2);

        ttsbegin;

        while (qr.next())
        {
            forecastPurch = qr.getNo(1);

            prefixField = #PrefixField(ForecastPurch,StartDate);
            setprefix(prefixField);
            progress.setText("@SYS27603"+' '+prefixField);

            bruttoAmount    = forecastPurch.grossAmount();
            inventTable     = forecastPurch.inventTable();

            if (inventTable && inventTable.modelGroup().PostOnhandFinancial)  // sp4
            {
                receiptACLedgerDimension = forecastPurch.accountReceiptLedgerDimension();
                this.validateDefaultAccount(receiptACLedgerDimension, InventPosting::accountType2LedgerPostingType(InventAccountType::PurchReceipt));
            }
            else
            {
                receiptACLedgerDimension = forecastPurch.accountConsumptionLedgerDimension();
                this.validateDefaultAccount(receiptACLedgerDimension, InventPosting::accountType2LedgerPostingType(InventAccountType::PurchConsump));
            }

            discACLedgerDimension = forecastPurch.accountDiscLedgerDimension();

            if (receiptACLedgerDimension)
            {
                if (budgetTransactionHeader.RecId == 0)
                {
                    this.createBudgetTransactionHeader();
                }

                discAmount = -(bruttoAmount - forecastPurch.Amount);

                if (discAmount)
                {
                    if (discACLedgerDimension)
                    {
                        this.createBudgetTransactionLine(forecastPurch, discACLedgerDimension, discAmount);

                        budgetTransAmount = bruttoAmount;
                    }
                    else
                    {
                        this.validateDefaultAccount(discACLedgerDimension, InventPosting::accountType2LedgerPostingType(InventAccountType::PurchDisc));
                    }
                }
                else
                {
                    budgetTransAmount = forecastPurch.Amount;
                }

                this.createBudgetTransactionLine(forecastPurch, receiptACLedgerDimension, budgetTransAmount, forecastPurch.PurchQty);
            }
        }

        if (budgetTransactionPost != null)
        {
            // Budget transactions are to be completed as part of the transfer
            budgetTransactionPost.runOperation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        setprefix(ForecastPurch2Ledger::description());

        // Do not call the confirmDraftBudgetTransNoReverse method during the validate.
        // It is only intended to be confirmed during the dialog validation.
        doConfirmDraftBudgetTransNoReverse = false;

        if (this.validate() == false)
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            this.progressInit(ForecastPurch2Ledger::description(),2,#AviFileCopy);

            progress.setCount(1);

            progress.setCount(2);
            this.post();

            ttscommit;

            if (deleteOld == NoYes::Yes)
            {
                // Reverse the budget transaction lines that were prviously transferred.
                // Process the reversal outside of the transfer tts to ensure any budget funds available checks
                // for the reversal are processed as confirmed.
                this.reverseExistingCompletedBudgetTrans();
            }

            // Provide warning for dimension attributes in use on forecast not part of budget structure
            budgetTransactionManager.showWarningsDimAttsNotBudgetEnabled("@SYS300283");
        }
        catch (Exception::Deadlock)
        {
            if (appl.ttsLevel() == 0 &&
                xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS27034";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ForecastPurch2Ledger budgetPurch2Ledger = new ForecastPurch2Ledger();

        if (budgetPurch2Ledger.prompt())
            budgetPurch2Ledger.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>