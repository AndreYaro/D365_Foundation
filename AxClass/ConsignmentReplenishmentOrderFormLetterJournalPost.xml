<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsignmentReplenishmentOrderFormLetterJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ConsignmentReplenishmentOrderFormLetterJournalPost</c> class is the class used to post journals
///    when updating consignment replenishment orders.
/// </summary>
public class ConsignmentReplenishmentOrderFormLetterJournalPost extends FormletterJournalPost
{
    protected ConsignmentReplenishmentOrderLine                 consignmentReplenishmentOrderLine;
    protected ConsignmentProductReceiptJournalHeader            consignmentProductReceiptJournalHeader;
    protected ConsignmentProductReceiptJournalLine              consignmentProductReceiptJournalLine;
    protected ConsignmentDraftReplenishmentOrderJournalHeader   consignmentDraftReplenishmentOrderJournalHeader;
    protected ConsignmentDraftReplenishmentOrderJournalLine     consignmentDraftReplenishmentOrderJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs a new instance of the <c>ConsignmentReplenishmentOrderFormLetterJournalPost</c> class.
    /// </summary>
    /// <returns>
    ///  A <c>ConsignmentReplenishmentOrderFormLetterJournalPost</c> class instance.
    /// </returns>
    public static ConsignmentReplenishmentOrderFormLetterJournalPost construct()
    {
        return new ConsignmentReplenishmentOrderFormLetterJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _journalline)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return consignmentProductReceiptJournalHeader.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected TableId journalLineTableId()
    {
        return tableNum(ConsignmentDraftReplenishmentOrderJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = consignmentProductReceiptJournalLine)
    {
        consignmentProductReceiptJournalLine = _journalLine as ConsignmentProductReceiptJournalLine;
        return consignmentProductReceiptJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = consignmentDraftReplenishmentOrderJournalHeader)
    {
        consignmentDraftReplenishmentOrderJournalHeader = _parmTable as ConsignmentDraftReplenishmentOrderJournalHeader;

        return consignmentDraftReplenishmentOrderJournalHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    protected Common sourceLine()
    {
        return consignmentReplenishmentOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return consignmentProductReceiptJournalHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt  transactionLogTxt()
    {
        return "@Consignment:StaticText_TransactionLogText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType transactionLogType()
    {
        return TransactionLogType::ConsignmentReplenishmentOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return consignmentProductReceiptJournalHeader.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormletterJournalTrans</Name>
				<Source><![CDATA[
    protected void selectFormletterJournalTrans()
    {
        select consignmentProductReceiptJournalLine
                where consignmentProductReceiptJournalLine.ProductReceiptJournalHeader == consignmentProductReceiptJournalHeader.RecId;

        formletterJournalTrans.data(consignmentProductReceiptJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextFormletterJournalTrans</Name>
				<Source><![CDATA[
    protected void nextFormletterJournalTrans()
    {
        next consignmentProductReceiptJournalLine;

        formletterJournalTrans.data(consignmentProductReceiptJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = consignmentProductReceiptJournalHeader)
    {
        consignmentProductReceiptJournalHeader = _journalTable as ConsignmentProductReceiptJournalHeader;
        return consignmentProductReceiptJournalHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        super();

        select firstonly forupdate consignmentReplenishmentOrderLine
            where consignmentReplenishmentOrderLine.RecId == consignmentProductReceiptJournalLine.ReplenishmentOrderLine
        outer join consignmentDraftReplenishmentOrderJournalLine
            where consignmentDraftReplenishmentOrderJournalLine.ParmId                  == consignmentDraftReplenishmentOrderJournalHeader.ParmId
               && consignmentDraftReplenishmentOrderJournalLine.ReplenishmentOrderLine  == consignmentReplenishmentOrderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherObjectDocument</Name>
				<Source><![CDATA[
    protected container ledgerVoucherObjectDocument(LedgerVoucherObject _ledgerVoucherObject)
    {
        return consignmentProductReceiptJournalHeader.ExternalDocumentDate ? [consignmentProductReceiptJournalHeader.ExternalDocumentDate] : [consignmentProductReceiptJournalHeader.DeliveryDate, consignmentProductReceiptJournalHeader.InternalProductReceiptNumber];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPhysical</Name>
				<Source><![CDATA[
    private void postPhysical()
    {
        var inventUpd_Physical = InventUpd_Physical::newConsignmentProductReceipt(
                                                                        InventMovement::construct(consignmentReplenishmentOrderLine),
                                                                        ledgerVoucher,
                                                                        consignmentProductReceiptJournalHeader.InternalProductReceiptNumber,
                                                                        consignmentProductReceiptJournalLine);

        inventUpd_Physical.updateNow(ledgerVoucher);

        updateNowInvent = inventUpd_Physical.updPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFinancial</Name>
				<Source><![CDATA[
    private void postFinancial()
    {
        var inventUpd_FinancialLite = InventUpd_FinancialLite::newConsignmentProductReceipt(
                                                                        InventMovement::construct(consignmentReplenishmentOrderLine),
                                                                        consignmentProductReceiptJournalLine);
        inventUpd_FinancialLite.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    protected void postInventory()
    {
        this.postPhysical();
        this.postFinancial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    protected void updateSourceLine()
    {
        consignmentReplenishmentOrderLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    protected void endPostLine()
    {
        boolean     doCascadeDetailsToBatchesCreated;

        if (#PdsEnabled)
        {
            doCascadeDetailsToBatchesCreated = consignmentDraftReplenishmentOrderJournalLine.setVendorBatchInfo();
        }

        super();

        if (#PdsBatchAttribEnabled)
        {
            PdsBatchAttributesInput::cascadeDetailsToBatchAttributes(consignmentDraftReplenishmentOrderJournalLine);
        }

        if (doCascadeDetailsToBatchesCreated)
        {
            consignmentDraftReplenishmentOrderJournalLine.bufferVendorBatchInfo().cascadeDetailsToBatchesCreated(consignmentProductReceiptJournalHeader.InternalProductReceiptNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax doucment.
    /// </summary>
    /// <param name="_checkLedgerVoucher">
    /// A Boolean value that indicates whether checking the LedgerVoucher; optional.
    /// </param>
    public void PostTaxDocument(boolean _checkLedgerVoucher = true)
    {
        //Override this method to skip postTaxDocument for this transaction because there is no tax involved.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>