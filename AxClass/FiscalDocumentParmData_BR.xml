<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentParmData_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FiscalDocumentParmData_BR</c> class  encapsulates the representation of a fiscal document in memory.
/// </summary>
public class FiscalDocumentParmData_BR
{
    #FiscalDocumentModels_BR

    AmountCur                               totalAmount;
    CNPJCPFNum_BR                           deliveryCNPJCPF;
    DlvStateRegistered_BR                   vehicleLicensePlateState;
    FiscalDocDirection_BR                   direction;
    FiscalDocumentClassification_BR         classification;
    FiscalDocumentPartyName_BR              fiscalEstablishmentName;
    FiscalDocumentPurpose_BR                purpose;
    FiscalDocumentSeries_BR                 fiscalDocumentSeries;
    FiscalEstablishmentId_BR                fiscalEstablishmentId;
    IENum_BR                                deliveryIE;
    InvoiceDate                             fiscalDocumentDate;
    FiscalDocumentDateTime_BR               fiscalDocumentDateTime;
    FiscalDocumentDateTimeOffset_BR         fiscalDocumentDateTimeOffset;
    RefRecId                                refRecId;
    RefRecId                                salesCarrierRecId;
    RefTableId                              refTableId;
    TaxFiscalDocuModel_BR                   model;
    boolean                                 isProForma;
    CustVendFinalUser_BR                    finalUser;
    EFDocPresenceType_BR                    presenceType;
    EFDocPaymentMethod_BR                   paymentMethod;
    AmountCur                               paymentAmount;

    LogisticsPostalAddressRecId             salesCarrierPostalAddress;
    LogisticsPostalAddressRecId             fiscalEstablishmentPostalAddress;
    CNPJCPFNum_BR                           fiscalEstablishmentCNPJCPF;
    IENum_BR                                fiscalEstablishmentIE;
    CCMNum_BR                               fiscalEstablishmentCCMNum;
    Phone                                   fiscalEstablishmentPhone;
    TributarySubstitutionRegistry_BR        fiscalEstablishmentTribSubstitutionReg;

    FiscalDocumentPartyName_BR              thirdPartyName;
    LogisticsPostalAddressRecId             thirdPartyPostalAddress;
    CNPJCPFNum_BR                           thirdPartyCNPJCPF;
    EFDocForeignerId_BR                     thirdPartyForeignerId;
    IENum_BR                                thirdPartyIE;
    CCMNum_BR                               thirdPartyCCMNum;
    Phone                                   thirdPartyPhone;
    TeleFax                                 thirdPartyFax;
    LogisticsElectronicAddressLocator       thirdPartyEmail;
    ICMSContributor_BR                      thirdPartyIcmsContributor;

    CustVendAC                              fiscalDocumentAccountNum;
    FiscalDocumentFreightTerms_BR           freightChargeTerms;
    InvoiceComplementaryType_BR             complementaryType;
    DiscAmount                              totalDiscountAmount;
    RefRecId                                complementedFiscalDocument;
    LogisticsPostalAddressRecId             deliveryLogisticsPostalAddress;
    DlvNoOfCarrier_BR                       vehicleLicensePlateNumber;
    DlvTransportBrand_BR                    packingBrand;
    DlvTermId                               deliveryTerm;
    FiscalDocumentType_BR                   fiscalDocumentType;
    DlvModeId                               deliveryMode;
    InvoiceId                               fiscalDocumentNumber;
    EFDocAccessKey_BR                       fiscalDocumentAccessKey;
    InvoiceGoodsAmount_BR                   totalGoodsAmount;
    InvoiceServicesAmount_BR                totalServicesAmount;
    TransDate                               accountingDate;
    AccountingDate                          cancelAccountingDate;
    MarkupSumOthers_BR                      totalMarkupOtherAmount;
    MarkupSumFreight_BR                     totalMarkupFreightAmount;
    MarkupSumInsurance_BR                   totalMarkupInsuranceAmount;
    MarkupSumSiscomex_BR                    totalMarkupSiscomexAmount;
    FiscalDocumentIssuer_BR                 fiscalDocumentIssuer;
    InvoiceId                               fiscalDocNumber;
    Voucher                                 voucher;
    FiscalDocumentSpecie_BR                 specie;
    CustVendType_BR                         fiscalDocumentAccountType;
    CFPSId_BR                               cfpsId;
    TaxServiceCodeOnDlvAddress_BR           serviceCodeOnDlvAddress;
    Voucher                                 inventoryVoucher;
    FiscalDocumentStatus_BR                 status;

    private NoYes                           thirdPartySalesDigitalPlatform;
    private ThirdPartySalesDigitalPlatformCNPJ_BR thirdPartySalesDigitalPlatformCNPJ;
    private ThirdPartySalesDigitalPlatformSalesResponsible_BR thirdPartySalesDigitalPlatformSalesResponsible;
    private List listofThirdPartySalesDigitalPlatformCardPaymentsParmData;

    FiscalDocumentCustVendTransParmData_BR  custVendTransParmData;
    List                                    listOfFiscalDocumentLineParmData;
    List                                    listOfShipmentStatParmData;
    List                                    listOfFiscalReferenceParmData;
    List                                    listOfFiscalDocumentPaymentTransParmData;
    FiscalDocumentTextListParmData_BR       listOfTextsParmData;
    FiscalDocumentTextTagReplacer_BR        textTagReplacer;

    FiscalDocumentOperationDescription_BR   fiscalDocumentOperationDescription;

    RefRecId                                importDeclarationRecId;

    TypeOfCTe_BR                            typeOfCTe;

    Integer                                 eFiscaldocumentNumericCode;
    RecId                                   fiscalDocumentRecId;

    EFDocApplicationVersion_BR              applicationVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a Fiscal Document line to the ParmData object model
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    ///     The instance of <c>FiscalDocumentLineParmData_BR</c> to be added to the list of Fiscal Document lines.
    /// </param>
    public void addLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        listOfFiscalDocumentLineParmData.addEnd(_fiscalDocumentLineParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentStat</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a Shipment parcel to the Fiscal Document ParmData object.
    /// </summary>
    /// <param name="_fiscalDocumentShipmentStatParmData">
    ///     The instance of <c>FiscalDocumentShipmentStatParmData_BR</c> to be added to the list of shipment parcels of the Fiscal Document.
    /// </param>
    public void addShipmentStat(FiscalDocumentShipmentStatParmData_BR _fiscalDocumentShipmentStatParmData)
    {
        listOfShipmentStatParmData.addEnd(_fiscalDocumentShipmentStatParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHavePresumedTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if this type of fiscal document can have presumed taxes.
    /// </summary>
    /// <returns>
    ///     Returns true if current type of fiscal document can have presumed taxes, otherwise, returns false;
    /// </returns>
    public boolean canHavePresumedTax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>couldBeReferencedByEfdocumentReceivedXml</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if a EFDocumentReceivedXml_BR record could reference the
    ///     fiscal document that will be generated from this parm object.
    /// </summary>
    /// <returns>
    ///     Returns true if a EFDocumentReceivedXml_BR register could reference the
    ///     fiscal document that will be generated from this parm object, otherwise, returns false;
    /// </returns>
    public boolean couldBeReferencedByEfdocumentReceivedXml()
    {
        return fiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty && this.isElectronic();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>FiscalDocumentClassification_BR</c> for this fiscal document.
    /// </summary>
    /// <returns>
    ///     The value in the <c>FiscalDocumentClassification_BR</c> base enum that describes the classification of the fiscal document.
    /// </returns>
    public FiscalDocumentClassification_BR getClassification()
    {
        if (classification == FiscalDocumentClassification_BR::Unknown)
        {
            if (this.parmRefTableId() == tableNum(CustInvoiceJour)
                && this.parmDirection() == FiscalDocDirection_BR::Outgoing)
            {
                return FiscalDocumentClassification_BR::Sales;
            }
            else if (this.parmRefTableId() == tableNum(VendInvoiceJour)
                && this.parmDirection() == FiscalDocDirection_BR::Incoming)
            {
                return FiscalDocumentClassification_BR::Purch;
            }
            else if (this.parmRefTableId() == tableNum(CustInvoiceJour)
                && this.parmDirection() == FiscalDocDirection_BR::Incoming)
            {
                return FiscalDocumentClassification_BR::Return;
            }
            else if (this.parmRefTableId() == tableNum(VendInvoiceJour)
                && this.parmDirection() == FiscalDocDirection_BR::Outgoing)
            {
                return FiscalDocumentClassification_BR::Return;
            }
            else if (this.parmRefTableId() == tableNum(CustPackingSlipJour))
            {
                return FiscalDocumentClassification_BR::DeliverySlip;
            }
            else if (this.parmComplementaryType() != InvoiceComplementaryType_BR::Blank)
            {
                return FiscalDocumentClassification_BR::Complementary;
            }
            else if (this.parmRefTableId() == tableNum(TaxFiscalDocument_BR))
            {
                return FiscalDocumentClassification_BR::TaxTransfer;
            }
        }
        return classification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasItemsOfType</Name>
				<Source><![CDATA[
    private boolean hasItemsOfType(FiscalDocumentLineItemType_BR _fiscalDocumentLineType)
    {
        ListEnumerator                  leLines;
        FiscalDocumentLineParmData_BR   line;

        if (!this.parmLines())
        {
            return false;
        }

        leLines = this.parmLines().getEnumerator();

        while (leLines.moveNext())
        {
            line = leLines.current();
            if (line.parmItemType() == _fiscalDocumentLineType)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProductItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns whether there is at least one line with an item if type product.
    /// </summary>
    /// <returns>
    ///     True if there is at least one line of type product. False otherwise.
    /// </returns>
    public boolean hasProductItems()
    {
        return this.hasItemsOfType(FiscalDocumentLineItemType_BR::Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasServiceItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns whether there is at least one line with an item if type service.
    /// </summary>
    /// <returns>
    ///     True if there is at least one line of type service. False otherwise.
    /// </returns>
    public boolean hasServiceItems()
    {
        return this.hasItemsOfType(FiscalDocumentLineItemType_BR::Service);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEFDocumentCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether this document is marked as Electronic fiscal document for services (City)
    /// </summary>
    /// <returns>
    /// True if it is; false otherwise.
    /// </returns>
    /// <remarks>
    /// True if the related Fiscal document type has the Electronic invoice flag and the issuer is the own company.
    /// </remarks>
    public boolean isEFDocumentCity()
    {
        return (    this.parmFiscalDocumentType().ElectronicInvoice   == NoYes::Yes
                &&  this.parmFiscalDocumentIssuer()                   == FiscalDocumentIssuer_BR::OwnEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isElectronic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether this document is electronic or not.
    /// </summary>
    /// <returns>true if document is electronic; false otherwise.</returns>
    public boolean isElectronic()
    {
        return (model == #FiscalDocModel_55);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>FiscalDocumentParmData_BR</c> object references an external fiscal document.
    /// </summary>
    /// <returns>
    /// True if the <c>FiscalDocumentParmData_BR</c> object references an external fiscal document; otherwise, false.
    /// </returns>
    public boolean isExternal()
    {
        return !(this.parmRefRecId() && this.parmRefTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignOperation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the fiscal document is for a foreign party.
    /// </summary>
    /// <returns>
    ///     True if fiscal document is for a foreign party; false otherwise.
    /// </returns>
    public boolean isForeignOperation()
    {
        LogisticsPostalAddress fiscalEstablishmentAddress;
        LogisticsPostalAddress partyAddress;

        if (this.parmThirdPartyPostalAddress() == 0)
            return false;

        fiscalEstablishmentAddress   = LogisticsPostalAddress::findRecId(this.parmFiscalEstablishmentPostalAddress());
        partyAddress                 = LogisticsPostalAddress::findRecId(this.parmThirdPartyPostalAddress());

        return fiscalEstablishmentAddress.CountryRegionId != partyAddress.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModel2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether this document is model 2 or not.
    /// </summary>
    /// <returns>true if document is model 2; false otherwise.</returns>
    public boolean isModel2()
    {
        return (model == #FiscalDocModel_02);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOfClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the current Fiscal Document classification is part of the classification passed in as parameter.
    /// </summary>
    /// <param name="_fiscalDocumentClassification">
    ///     Base enum <c>FiscalDocumentClassification_BR</c> that indicates the classification against which the current Fiscal Document is to be tested.
    ///     FiscalDocumentClassification_BR has its elements defined in powers of two (1, 2, 4, 8, 16, 32, ...)
    /// </param>
    /// <returns>
    ///     True when the Fiscal Document is part of the classification passed in as parameter. False otherwise.
    /// </returns>
    public boolean isOfClassification(FiscalDocumentClassification_BR _fiscalDocumentClassification)
    {
        return  _fiscalDocumentClassification == FiscalDocumentClassification_BR::All
                || (_fiscalDocumentClassification & this.getClassification()) == this.getClassification();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        classification                              = FiscalDocumentClassification_BR::Unknown;
        listOfFiscalDocumentLineParmData            = new List(Types::Class);
        listOfShipmentStatParmData                  = new List(Types::Class);
        listOfFiscalReferenceParmData               = new List(Types::Class);
        listofThirdPartySalesDigitalPlatformCardPaymentsParmData = new List(Types::Class);
        listOfTextsParmData                         = FiscalDocumentTextListParmData_BR::construct();
        textTagReplacer                             = FiscalDocumentTextTagReplacer_BR::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public TransDate parmAccountingDate(TransDate _accountingDate = accountingDate)
    {
        accountingDate = _accountingDate;

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmCancelAccountingDate(AccountingDate _cancelAccountingDate = cancelAccountingDate)
    {
        cancelAccountingDate = _cancelAccountingDate;

        return cancelAccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCFPSId</Name>
				<Source><![CDATA[
    public CFPSId_BR parmCFPSId(CFPSId_BR _cfpsId = cfpsId)
    {
        cfpsId = _cfpsId;

        return cfpsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComplementaryType</Name>
				<Source><![CDATA[
    public InvoiceComplementaryType_BR parmComplementaryType(InvoiceComplementaryType_BR _complementaryType = complementaryType)
    {
        complementaryType = _complementaryType;

        return complementaryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComplementedFiscalDocument</Name>
				<Source><![CDATA[
    public RefRecId parmComplementedFiscalDocument(RefRecId _complementedFiscalDocument = complementedFiscalDocument)
    {
        complementedFiscalDocument = _complementedFiscalDocument;

        return complementedFiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    public FiscalDocumentCustVendTransParmData_BR parmCustVendTrans(FiscalDocumentCustVendTransParmData_BR _custVendTransParmData = custVendTransParmData)
    {
        custVendTransParmData = _custVendTransParmData;
        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryCNPJCPF</Name>
				<Source><![CDATA[
    public CNPJCPFNum_BR parmDeliveryCNPJCPF(CNPJCPFNum_BR _deliveryCNPJCPF = deliveryCNPJCPF)
    {
        deliveryCNPJCPF = _deliveryCNPJCPF;

        return deliveryCNPJCPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryIE</Name>
				<Source><![CDATA[
    public IENum_BR parmDeliveryIE(IENum_BR _deliveryIE = deliveryIE)
    {
        deliveryIE = _deliveryIE;

        return deliveryIE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryLogisticsPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmDeliveryLogisticsPostalAddress(LogisticsPostalAddressRecId _deliveryLogisticsPostalAddress = deliveryLogisticsPostalAddress)
    {
        deliveryLogisticsPostalAddress = _deliveryLogisticsPostalAddress;

        return deliveryLogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryMode</Name>
				<Source><![CDATA[
    public DlvModeId parmDeliveryMode(DlvModeId _deliveryMode = deliveryMode)
    {
        deliveryMode = _deliveryMode;

        return deliveryMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryTerm</Name>
				<Source><![CDATA[
    public DlvTermId parmDeliveryTerm(DlvTermId _deliveryTerm = deliveryTerm)
    {
        deliveryTerm = _deliveryTerm;

        return deliveryTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartySalesDigitalPlatformCNPJ</Name>
				<Source><![CDATA[
    public ThirdPartySalesDigitalPlatformCNPJ_BR parmThirdPartySalesDigitalPlatformCNPJ(ThirdPartySalesDigitalPlatformCNPJ_BR _thirdPartySalesDigitalPlatformCNPJ = thirdPartySalesDigitalPlatformCNPJ)
    {
        thirdPartySalesDigitalPlatformCNPJ = _thirdPartySalesDigitalPlatformCNPJ;

        return thirdPartySalesDigitalPlatformCNPJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartySalesDigitalPlatformCardPayments</Name>
				<Source><![CDATA[
    public List parmThirdPartySalesDigitalPlatformCardPayments(List _listofThirdPartySalesDigitalPlatformCardPaymentsParmData = listofThirdPartySalesDigitalPlatformCardPaymentsParmData)
    {
        listofThirdPartySalesDigitalPlatformCardPaymentsParmData = _listofThirdPartySalesDigitalPlatformCardPaymentsParmData;

        return listofThirdPartySalesDigitalPlatformCardPaymentsParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartySalesDigitalPlatformSalesResponsible</Name>
				<Source><![CDATA[
    public ThirdPartySalesDigitalPlatformSalesResponsible_BR parmThirdPartySalesDigitalPlatformSalesResponsible(ThirdPartySalesDigitalPlatformSalesResponsible_BR _thirdPartySalesDigitalPlatformSalesResponsible = thirdPartySalesDigitalPlatformSalesResponsible)
    {
        thirdPartySalesDigitalPlatformSalesResponsible = _thirdPartySalesDigitalPlatformSalesResponsible;

        return thirdPartySalesDigitalPlatformSalesResponsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirection</Name>
				<Source><![CDATA[
    public FiscalDocDirection_BR parmDirection(FiscalDocDirection_BR _direction = direction)
    {
        direction = _direction;

        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentAccessKey</Name>
				<Source><![CDATA[
    public EFDocAccessKey_BR parmFiscalDocumentAccessKey(EFDocAccessKey_BR _fiscalDocumentAccessKey = fiscalDocumentAccessKey)
    {
        fiscalDocumentAccessKey = _fiscalDocumentAccessKey;

        return fiscalDocumentAccessKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentAccountNum</Name>
				<Source><![CDATA[
    public CustVendAC parmFiscalDocumentAccountNum(CustVendAC _fiscalDocumentAccountNum = fiscalDocumentAccountNum)
    {
        fiscalDocumentAccountNum = _fiscalDocumentAccountNum;

        return fiscalDocumentAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentAccountType</Name>
				<Source><![CDATA[
    public CustVendType_BR parmFiscalDocumentAccountType(CustVendType_BR _fiscalDocumentAccountType = fiscalDocumentAccountType)
    {
        fiscalDocumentAccountType = _fiscalDocumentAccountType;

        return fiscalDocumentAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentDate</Name>
				<Source><![CDATA[
    public InvoiceDate parmFiscalDocumentDate(InvoiceDate _fiscalDocumentDate = fiscalDocumentDate)
    {
        fiscalDocumentDate = _fiscalDocumentDate;

        return fiscalDocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentIssuer</Name>
				<Source><![CDATA[
    public FiscalDocumentIssuer_BR parmFiscalDocumentIssuer(FiscalDocumentIssuer_BR _fiscalDocumentIssuer = fiscalDocumentIssuer)
    {
        fiscalDocumentIssuer = _fiscalDocumentIssuer;

        return fiscalDocumentIssuer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentNumber</Name>
				<Source><![CDATA[
    public InvoiceId parmFiscalDocumentNumber(InvoiceId _fiscalDocumentNumber = fiscalDocumentNumber)
    {
        fiscalDocumentNumber = _fiscalDocumentNumber;

        return fiscalDocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentOperationDescription</Name>
				<Source><![CDATA[
    public FiscalDocumentOperationDescription_BR parmFiscalDocumentOperationDescription(FiscalDocumentOperationDescription_BR _fiscalDocumentOperationDescription = fiscalDocumentOperationDescription)
    {
        fiscalDocumentOperationDescription = _fiscalDocumentOperationDescription;
        return fiscalDocumentOperationDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentSeries</Name>
				<Source><![CDATA[
    public FiscalDocumentSeries_BR parmFiscalDocumentSeries(FiscalDocumentSeries_BR _fiscalDocumentSeries = fiscalDocumentSeries)
    {
        fiscalDocumentSeries = _fiscalDocumentSeries;

        return fiscalDocumentSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentType</Name>
				<Source><![CDATA[
    public FiscalDocumentType_BR parmFiscalDocumentType(FiscalDocumentType_BR _fiscalDocumentType = fiscalDocumentType)
    {
        fiscalDocumentType = _fiscalDocumentType;

        return fiscalDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentCCMNum</Name>
				<Source><![CDATA[
    public CCMNum_BR parmFiscalEstablishmentCCMNum(CCMNum_BR _fiscalEstablishmentCCMNum = fiscalEstablishmentCCMNum)
    {
        fiscalEstablishmentCCMNum = _fiscalEstablishmentCCMNum;

        return fiscalEstablishmentCCMNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentCNPJCPF</Name>
				<Source><![CDATA[
    public CNPJCPFNum_BR parmFiscalEstablishmentCNPJCPF(CNPJCPFNum_BR _fiscalEstablishmentCNPJCPF = fiscalEstablishmentCNPJCPF)
    {
        fiscalEstablishmentCNPJCPF = _fiscalEstablishmentCNPJCPF;

        return fiscalEstablishmentCNPJCPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentID</Name>
				<Source><![CDATA[
    public FiscalEstablishmentId_BR parmFiscalEstablishmentID(FiscalEstablishmentId_BR _fiscalEstablishmentId = fiscalEstablishmentId)
    {
        fiscalEstablishmentId = _fiscalEstablishmentId;

        return fiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentIE</Name>
				<Source><![CDATA[
    public IENum_BR parmFiscalEstablishmentIE(IENum_BR _fiscalEstablishmentIE = fiscalEstablishmentIE)
    {
        fiscalEstablishmentIE = _fiscalEstablishmentIE;

        return fiscalEstablishmentIE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentName</Name>
				<Source><![CDATA[
    public FiscalDocumentPartyName_BR parmFiscalEstablishmentName(FiscalDocumentPartyName_BR _fiscalEstablishmentName = fiscalEstablishmentName)
    {
        fiscalEstablishmentName = _fiscalEstablishmentName;

        return fiscalEstablishmentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentPhone</Name>
				<Source><![CDATA[
    public Phone parmFiscalEstablishmentPhone(Phone _fiscalEstablishmentPhone = fiscalEstablishmentPhone)
    {
        fiscalEstablishmentPhone = _fiscalEstablishmentPhone;

        return fiscalEstablishmentPhone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmFiscalEstablishmentPostalAddress(LogisticsPostalAddressRecId _fiscalEstablishmentPostalAddress = fiscalEstablishmentPostalAddress)
    {
        fiscalEstablishmentPostalAddress = _fiscalEstablishmentPostalAddress;

        return fiscalEstablishmentPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentTribSubstReg</Name>
				<Source><![CDATA[
    public TributarySubstitutionRegistry_BR parmFiscalEstablishmentTribSubstReg(TributarySubstitutionRegistry_BR _fiscalEstablishmentTribSubstitutionReg = fiscalEstablishmentTribSubstitutionReg)
    {
        fiscalEstablishmentTribSubstitutionReg = _fiscalEstablishmentTribSubstitutionReg;

        return fiscalEstablishmentTribSubstitutionReg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreightChargeTerms</Name>
				<Source><![CDATA[
    public FiscalDocumentFreightTerms_BR parmFreightChargeTerms(FiscalDocumentFreightTerms_BR _freightChargeTerms = freightChargeTerms)
    {
        freightChargeTerms = _freightChargeTerms;

        return freightChargeTerms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportDeclaration</Name>
				<Source><![CDATA[
    public RefRecId parmImportDeclaration(RefRecId _importDeclarationRecId = importDeclarationRecId)
    {
        importDeclarationRecId = _importDeclarationRecId;

        return importDeclarationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryVoucher</Name>
				<Source><![CDATA[
    public Voucher parmInventoryVoucher(Voucher _inventoryVoucher = inventoryVoucher)
    {
        inventoryVoucher = _inventoryVoucher;

        return inventoryVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProForma</Name>
				<Source><![CDATA[
    public boolean parmIsProForma(boolean _isProForma = isProForma)
    {
        isProForma = _isProForma;
        return isProForma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLines</Name>
				<Source><![CDATA[
    public List parmLines(List _listOfFiscalDocumentLineParmData = listOfFiscalDocumentLineParmData)
    {
        listOfFiscalDocumentLineParmData = _listOfFiscalDocumentLineParmData;
        return listOfFiscalDocumentLineParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListOfFiscalReference</Name>
				<Source><![CDATA[
    public List parmListOfFiscalReference(List _listOfFiscalReferenceParmData = listOfFiscalReferenceParmData)
    {
        listOfFiscalReferenceParmData = _listOfFiscalReferenceParmData;

        return listOfFiscalReferenceParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListOfShipmentStat</Name>
				<Source><![CDATA[
    public List parmListOfShipmentStat(List _listOfFiscalDocumentShipmentStatParmData = listOfShipmentStatParmData)
    {
        listOfShipmentStatParmData = _listOfFiscalDocumentShipmentStatParmData;
        return listOfShipmentStatParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListOfTextsParmData</Name>
				<Source><![CDATA[
    public FiscalDocumentTextListParmData_BR parmListOfTextsParmData(FiscalDocumentTextListParmData_BR _listOfTextsParmData = listOfTextsParmData)
    {
        listOfTextsParmData = _listOfTextsParmData;

        return listOfTextsParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModel</Name>
				<Source><![CDATA[
    public TaxFiscalDocuModel_BR parmModel(TaxFiscalDocuModel_BR _model = model)
    {
        model = _model;

        return model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingBrand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the PackingBrand parameter
    /// </summary>
    /// <param name="_packingBrand">
    /// The value of the Packing Brand to be set
    /// </param>
    /// <returns>
    /// The value of the PackingPrand parameter
    ///     True if fiscal document is for a foreign party; false otherwise.
    /// </returns>
    public DlvTransportBrand_BR parmPackingBrand(DlvTransportBrand_BR _packingBrand = packingBrand)
    {
        packingBrand = _packingBrand;

        return packingBrand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentAmount</Name>
				<Source><![CDATA[
    public AmountCur parmPaymentAmount(AmountCur _paymentAmount = paymentAmount)
    {
        paymentAmount = _paymentAmount;
        
        return paymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentMethod</Name>
				<Source><![CDATA[
    public EFDocPaymentMethod_BR parmPaymentMethod(EFDocPaymentMethod_BR _paymentMethod = paymentMethod)
    {
        paymentMethod = _paymentMethod;
        
        return paymentMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurpose</Name>
				<Source><![CDATA[
    public FiscalDocumentPurpose_BR parmPurpose(FiscalDocumentPurpose_BR _purpose = purpose)
    {
        purpose = _purpose;
        return purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    public RefRecId parmRefRecId(RefRecId _refRecId = refRecId)
    {
        refRecId = _refRecId;

        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    public RefTableId parmRefTableId(RefTableId _refTableId = refTableId)
    {
        refTableId = _refTableId;

        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartySalesDigitalPlatform</Name>
				<Source><![CDATA[
    public NoYes parmThirdPartySalesDigitalPlatform(NoYes _thirdPartySalesDigitalPlatform = thirdPartySalesDigitalPlatform)
    {
        thirdPartySalesDigitalPlatform = _thirdPartySalesDigitalPlatform;

        return thirdPartySalesDigitalPlatform;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCarrier</Name>
				<Source><![CDATA[
    public RefRecId parmSalesCarrier(RefRecId _salesCarrierRecId = salesCarrierRecId)
    {
        salesCarrierRecId = _salesCarrierRecId;

        return salesCarrierRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCarrierPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmSalesCarrierPostalAddress(LogisticsPostalAddressRecId _salesCarrierPostalAddress = salesCarrierPostalAddress)
    {
        salesCarrierPostalAddress= _salesCarrierPostalAddress;

        return salesCarrierPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceCodeOnDlvAddress</Name>
				<Source><![CDATA[
    public TaxServiceCodeOnDlvAddress_BR parmServiceCodeOnDlvAddress(TaxServiceCodeOnDlvAddress_BR _serviceCodeOnDlvAddress = serviceCodeOnDlvAddress)
    {
        serviceCodeOnDlvAddress = _serviceCodeOnDlvAddress;

        return serviceCodeOnDlvAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecie</Name>
				<Source><![CDATA[
    public FiscalDocumentSpecie_BR parmSpecie(FiscalDocumentSpecie_BR _specie = specie)
    {
        specie = _specie;

        return specie;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatus</Name>
				<Source><![CDATA[
    public FiscalDocumentStatus_BR parmStatus(FiscalDocumentStatus_BR _status = status)
    {
        status = _status;

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTextTagReplacer</Name>
				<Source><![CDATA[
    public FiscalDocumentTextTagReplacer_BR parmTextTagReplacer(FiscalDocumentTextTagReplacer_BR _textTagReplacer = textTagReplacer)
    {
        textTagReplacer = _textTagReplacer;
        return textTagReplacer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyCCMNum</Name>
				<Source><![CDATA[
    public CCMNum_BR parmThirdPartyCCMNum(CCMNum_BR _thirdPartyCCMNum = thirdPartyCCMNum)
    {
        thirdPartyCCMNum = _thirdPartyCCMNum;

        return thirdPartyCCMNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyCNPJCPF</Name>
				<Source><![CDATA[
    public CNPJCPFNum_BR parmThirdPartyCNPJCPF(CNPJCPFNum_BR _thirdPartyCNPJCPF = thirdPartyCNPJCPF)
    {
        thirdPartyCNPJCPF = _thirdPartyCNPJCPF;

        return thirdPartyCNPJCPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyFax</Name>
				<Source><![CDATA[
    public TeleFax parmThirdPartyFax(TeleFax _thirdPartyFax = thirdPartyFax)
    {
        thirdPartyFax = _thirdPartyFax;

        return thirdPartyFax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyIE</Name>
				<Source><![CDATA[
    public IENum_BR parmThirdPartyIE(IENum_BR _thirdPartyIE = thirdPartyIE)
    {
        thirdPartyIE = _thirdPartyIE;

        return thirdPartyIE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyName</Name>
				<Source><![CDATA[
    public FiscalDocumentPartyName_BR parmThirdPartyName(FiscalDocumentPartyName_BR _thirdPartyName = thirdPartyName)
    {
        thirdPartyName = _thirdPartyName;

        return thirdPartyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyPhone</Name>
				<Source><![CDATA[
    public Phone parmThirdPartyPhone(Phone _thirdPartyPhone = thirdPartyPhone)
    {
        thirdPartyPhone = _thirdPartyPhone;

        return thirdPartyPhone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmThirdPartyPostalAddress(LogisticsPostalAddressRecId _thirdPartyPostalAddress = thirdPartyPostalAddress)
    {
        thirdPartyPostalAddress = _thirdPartyPostalAddress;

        return thirdPartyPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalAmount</Name>
				<Source><![CDATA[
    public AmountCur parmTotalAmount(AmountCur _totalAmount = totalAmount)
    {
        totalAmount = abs(_totalAmount);

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalDiscountAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmTotalDiscountAmount(DiscAmount _totalDiscountAmount = totalDiscountAmount)
    {
        totalDiscountAmount = abs(_totalDiscountAmount);

        return totalDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalGoodsAmount</Name>
				<Source><![CDATA[
    public InvoiceGoodsAmount_BR parmTotalGoodsAmount(InvoiceGoodsAmount_BR _totalGoodsAmount = totalGoodsAmount)
    {
        totalGoodsAmount = abs(_totalGoodsAmount);

        return totalGoodsAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalMarkupFreightAmount</Name>
				<Source><![CDATA[
    public MarkupSumFreight_BR parmTotalMarkupFreightAmount(MarkupSumFreight_BR _totalMarkupFreightAmount = totalMarkupFreightAmount)
    {
        totalMarkupFreightAmount = abs(_totalMarkupFreightAmount);

        return totalMarkupFreightAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalMarkupInsuranceAmount</Name>
				<Source><![CDATA[
    public MarkupSumInsurance_BR parmTotalMarkupInsuranceAmount(MarkupSumInsurance_BR _totalMarkupInsuranceAmount = totalMarkupInsuranceAmount)
    {
        totalMarkupInsuranceAmount = abs(_totalMarkupInsuranceAmount);

        return totalMarkupInsuranceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalMarkupOtherAmount</Name>
				<Source><![CDATA[
    public MarkupSumOthers_BR parmTotalMarkupOtherAmount(MarkupSumOthers_BR _totalMarkupOtherAmount = totalMarkupOtherAmount)
    {
        totalMarkupOtherAmount = abs(_totalMarkupOtherAmount);

        return totalMarkupOtherAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalMarkupSiscomexAmount</Name>
				<Source><![CDATA[
    public MarkupSumSiscomex_BR parmTotalMarkupSiscomexAmount(MarkupSumSiscomex_BR _totalMarkupSiscomexAmount = totalMarkupSiscomexAmount)
    {
        totalMarkupSiscomexAmount = abs(_totalMarkupSiscomexAmount);

        return totalMarkupSiscomexAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalServicesAmount</Name>
				<Source><![CDATA[
    public InvoiceServicesAmount_BR parmTotalServicesAmount(InvoiceServicesAmount_BR _totalServicesAmount = totalServicesAmount)
    {
        totalServicesAmount = abs(_totalServicesAmount);

        return totalServicesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfCTe</Name>
				<Source><![CDATA[
    public TypeOfCTe_BR parmTypeOfCTe(TypeOfCTe_BR _typeOfCTe = typeOfCTe)
    {
        typeOfCTe = _typeOfCTe;

        return typeOfCTe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVehicleLicensePlateNumber</Name>
				<Source><![CDATA[
    public DlvNoOfCarrier_BR parmVehicleLicensePlateNumber(DlvNoOfCarrier_BR _vehicleLicensePlateNumber = vehicleLicensePlateNumber)
    {
        vehicleLicensePlateNumber = _vehicleLicensePlateNumber;

        return vehicleLicensePlateNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVehicleLicensePlateState</Name>
				<Source><![CDATA[
    public DlvStateRegistered_BR parmVehicleLicensePlateState(DlvStateRegistered_BR _vehicleLicensePlateState = vehicleLicensePlateState)
    {
        vehicleLicensePlateState = _vehicleLicensePlateState;

        return vehicleLicensePlateState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGenerateElectronicDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the fiscal document should also be generated in XML (NF-e)
    /// when it is posted.
    /// </summary>
    /// <returns>true if XML should be generated; false otherwise.</returns>
    public boolean shouldGenerateElectronicDocument()
    {
        return fiscalDocumentIssuer == FiscalDocumentIssuer_BR::OwnEstablishment
            && this.isElectronic();
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>DirPartyType</c> of fiscal document third party.
    /// </summary>
    /// <returns>
    ///     The <c>DirPartyType</c> of the fiscal document party.
    /// </returns>
    public DirPartyType thirdPartyType()
    {
        CustTable       custTable;
        VendTable       vendTable;
        DirPartyType    dirPartyType;

        switch (this.parmFiscalDocumentAccountType())
        {
            case CustVendType_BR::Customer :
            custTable       = CustTable::find(this.parmFiscalDocumentAccountNum());
            dirPartyType    = custTable.partyType();
                break;

            case CustVendType_BR::Vendor :
            vendTable       = VendTable::find(this.parmFiscalDocumentAccountNum());
            dirPartyType    = vendTable.partyType();
                break;

            case CustVendType_BR::FiscalEstablishment :
                dirPartyType = DirPartyType::Organization;
                break;
        }

        return dirPartyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailConsumerDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether this document is a retail consumer fiscal document (02 or 65)
    /// </summary>
    /// <returns>true if retail consumer fiscal document; false otherwise.</returns>
    public boolean isRetailConsumerDocument()
    {
        return (this.isModel2() || model == #FiscalDocModel_65);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEFiscalDocumentNumericCode</Name>
				<Source><![CDATA[
    public Integer parmEFiscalDocumentNumericCode(Integer _eFiscalDocumentNumericCode = eFiscalDocumentNumericCode)
    {
        eFiscalDocumentNumericCode = _eFiscalDocumentNumericCode;

        return eFiscalDocumentNumericCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalUser</Name>
				<Source><![CDATA[
    public CustVendFinalUser_BR parmFinalUser(CustVendFinalUser_BR _finalUser = finalUser)
    {
        finalUser = _finalUser;

        return finalUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentDateTime</Name>
				<Source><![CDATA[
    public FiscalDocumentDateTime_BR parmFiscalDocumentDateTime(FiscalDocumentDateTime_BR _fiscalDocumentDateTime = fiscalDocumentDateTime)
    {
        fiscalDocumentDateTime = _fiscalDocumentDateTime;

        return fiscalDocumentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentDateTimeOffset</Name>
				<Source><![CDATA[
    public FiscalDocumentDateTimeOffset_BR parmFiscalDocumentDateTimeOffset(FiscalDocumentDateTimeOffset_BR _fiscalDocumentDateTimeOffset = fiscalDocumentDateTimeOffset)
    {
        fiscalDocumentDateTimeOffset = _fiscalDocumentDateTimeOffset;

        return fiscalDocumentDateTimeOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentTrans</Name>
				<Source><![CDATA[
    public List parmPaymentTrans(List _listOfFiscalDocumentPaymentTransParmData = listOfFiscalDocumentPaymentTransParmData)
    {
        listOfFiscalDocumentPaymentTransParmData = _listOfFiscalDocumentPaymentTransParmData;
        return listOfFiscalDocumentPaymentTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresenceType</Name>
				<Source><![CDATA[
    public EFDocPresenceType_BR parmPresenceType(EFDocPresenceType_BR _presenceType = presenceType)
    {
        presenceType = _presenceType;

        return presenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyEmail</Name>
				<Source><![CDATA[
    public LogisticsElectronicAddressLocator parmThirdPartyEmail(LogisticsElectronicAddressLocator _thirdPartyEmail = thirdPartyEmail)
    {
        thirdPartyEmail = _thirdPartyEmail;

        return thirdPartyEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyForeignerId</Name>
				<Source><![CDATA[
    public EFDocForeignerId_BR parmThirdPartyForeignerId(EFDocForeignerId_BR _thirdPartyForeignerId = thirdPartyForeignerId)
    {
        thirdPartyForeignerId = _thirdPartyForeignerId;

        return thirdPartyForeignerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThirdPartyIcmsContributor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the Third party ICMS contributor id parameter
    /// </summary>
    /// <param name="_thirdPartyIcmsContributor">
    /// The value of the Third party foreigner id to be set
    /// </param>
    /// <returns>
    /// The value of the Third party ICMS contributor parameter
    /// </returns>
    public ICMSContributor_BR parmThirdPartyIcmsContributor(ICMSContributor_BR _thirdPartyIcmsContributor = thirdPartyIcmsContributor)
    {
        thirdPartyIcmsContributor = _thirdPartyIcmsContributor;

        return thirdPartyIcmsContributor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the Fiscal Document RecId of the corresponding FiscalDocument_BR record
    /// </summary>
    /// <param name="_fiscalDocumentRecId">
    /// The value of the Fiscal Document RecId to be set
    /// </param>
    /// <returns>
    /// The value of the Fiscal Document RecId parameter
    /// </returns>
    public RecId parmFiscalDocumentRecId(RecId _fiscalDocumentRecId = fiscalDocumentRecId)
    {
        fiscalDocumentRecId = _fiscalDocumentRecId;

        return fiscalDocumentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value indicating whether the document is generated from retail or not.
    /// </summary>
    /// <returns>Always false.</returns>
    /// <remarks>For the retail documents it is not required to generate XML in HQ. All XML documents are created in retail channel.</remarks>
    public boolean isRetailDocument()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliverySuframaNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the suframa number of the company which will receive the goods.
    /// </summary>
    /// <returns>
    /// Suframa number of the company which will receive the goods.
    /// </returns>
    internal str getDeliverySuframaNumber()
    {
        CustTable custTable;

        if (this.parmFiscalDocumentAccountType() == CustVendType_BR::Customer)
        {
            select firstOnly SuframaNumber_BR from custTable
                where custTable.AccountNum == this.parmFiscalDocumentAccountNum();
        }

        return custTable.SuframaNumber_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApplicationVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the application version which was used while processing this fiscal document.
    /// </summary>
    /// <param name ="_applicationVersion">The application version.</param>
    /// <returns>
    /// The application version which was used while processing this fiscal document.
    /// </returns>
    [Hookable(false)]
    public EFDocApplicationVersion_BR parmApplicationVersion(EFDocApplicationVersion_BR _applicationVersion = applicationVersion)
    {
        applicationVersion = _applicationVersion;
        return applicationVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>