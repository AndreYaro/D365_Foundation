<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationListPageRuleImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesQuotationListPageRuleImpl</c> class provides the implementation of rules that govern
///    the enabled state of controls on the <c>SalesQuotationListPage</c> form.
/// </summary>
class SalesQuotationListPageRuleImpl implements ButtonStateProvider
{
    SalesQuotationTable         salesQuotationTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleBusRelAccountValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the <c>BusRelAccount</c> is valid.
    /// </summary>
    /// <returns>
    ///    true if the BusRelAccount is valid; otherwise, false.
    /// </returns>
    private boolean checkRuleBusRelAccountValid()
    {
        return salesQuotationTable && salesQuotationTable.BusRelAccount != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChangeReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the reason code can be changed.
    /// </summary>
    /// <returns>
    ///    true if a change reason code can be called; otherwise, false.
    /// </returns>
    private boolean checkRuleChangeReasonCode()
    {
        return salesQuotationTable && !salesQuotationTable.checkUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleConfirmationJournalsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the confirmation journal exists.
    /// </summary>
    /// <returns>
    ///    true if a confirmation journal exists; otherwise, false.
    /// </returns>
    private boolean checkRuleConfirmationJournalsExist()
    {
        if (salesQuotationTable)
        {
            container existingJournals = salesQuotationTable.existingJournals();

            return conpeek(existingJournals, SalesQuotationTableType::posConfirmation()) ? true : false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleConvertToCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a business relation can be converted to a customer.
    /// </summary>
    /// <returns>
    ///    true if business relation may be converted to a customer; otherwise, false.
    /// </returns>
    private boolean checkRuleConvertToCustomer()
    {
        return salesQuotationTable && salesQuotationTable.type().mayConvert2Customer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleCreatedOrSent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the status is created or sent.
    /// </summary>
    /// <returns>
    ///    true if the status is created or sent; otherwise, false.
    /// </returns>
    private boolean checkRuleCreatedOrSent()
    {
        return salesQuotationTable && salesQuotationTable.checkUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleCustAccountExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the customer account exists.
    /// </summary>
    /// <returns>
    ///    true if a customer account exists; otherwise, false.
    /// </returns>
    private boolean checkRuleCustAccountExist()
    {
        return salesQuotationTable && salesQuotationTable.CustAccount != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsProjectQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the current quotation is a project quotation.
    /// </summary>
    /// <returns>
    ///    true if the type of quotation is project; otherwise, false.
    /// </returns>
    private boolean checkRuleIsProjectQuotation()
    {
        return salesQuotationTable && salesQuotationTable.QuotationType == QuotationType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsProjectQuotationVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that current quotation is a project quotation.
    /// </summary>
    /// <returns>
    ///    true if a type of quotation is project; otherwise, false.
    /// </returns>
    private boolean checkRuleIsProjectQuotationVisible()
    {
        return salesQuotationTable && salesQuotationTable.QuotationType == QuotationType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsSalesQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the current quotation is a sales quotation.
    /// </summary>
    /// <returns>
    ///    true if the current quotation is a sales quotation; otherwise, false.
    /// </returns>
    private boolean checkRuleIsSalesQuotation()
    {
        return salesQuotationTable && salesQuotationTable.QuotationType == QuotationType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsSalesQuotationVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the current quotation is a sales quotation.
    /// </summary>
    /// <returns>
    ///    true if the current quotation is a sales quotation; otherwise, false.
    /// </returns>
    private boolean checkRuleIsSalesQuotationVisible()
    {
        return !salesQuotationTable || salesQuotationTable.QuotationType == QuotationType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleQuotationExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that a quotation exists.
    /// </summary>
    /// <returns>
    ///    true if a quotation exists; otherwise, false.
    /// </returns>
    private boolean checkRuleQuotationExist()
    {
        return salesQuotationTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleQuotationJournalsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the quotation journal exists.
    /// </summary>
    /// <returns>
    ///    true if a quotation journal exist, otherwise, false.
    /// </returns>
    private boolean checkRuleQuotationJournalsExist()
    {
        if (salesQuotationTable)
        {
            container existingJournals = salesQuotationTable.existingJournals();

            return conpeek(existingJournals, SalesQuotationTableType::posQuotation()) ? true : false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that a sales order reference exists.
    /// </summary>
    /// <returns>
    ///    true if the reference to a sales order exists; otherwise, false.
    /// </returns>
    private boolean checkRuleSalesOrder()
    {
        return salesQuotationTable && salesQuotationTable.SalesIdRef != '' && !salesQuotationTable.isTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the status is sent.
    /// </summary>
    /// <returns>
    ///    true if the status is sent; otherwise, false.
    /// </returns>
    private boolean checkRuleSent()
    {
        return salesQuotationTable && salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUpdateConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the confirmation can be updated.
    /// </summary>
    /// <returns>
    ///    true if quotation may be confirmed; otherwise, false.
    /// </returns>
    private boolean checkRuleUpdateConfirmation()
    {
        return salesQuotationTable && salesQuotationTable.type().mayConfirmationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUpdateQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the quotation can be updated.
    /// </summary>
    /// <returns>
    ///    true if the quotation can be updated; otherwise, false.
    /// </returns>
    private boolean checkRuleUpdateQuotation()
    {
        return salesQuotationTable && salesQuotationTable.type().mayQuotationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the internal cache.
    /// </summary>
    /// <remarks>
    ///    This method is called from <c>FormButtonManager</c>.
    /// </remarks>
    void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets cached values
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    The rule to be executed.
    /// </param>
    /// <remarks>
    ///    Updates the internal cache.
    /// </remarks>
    void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data sources of a form.
    /// </summary>
    /// <param name="datasources1">
    ///    The first form data source.
    /// </param>
    /// <param name="datasources2">
    ///    The second form data source; optional.
    /// </param>
    /// <param name="datasources3">
    ///    The third form data source; optional.
    /// </param>
    /// <param name="datasources4">
    ///    The fourth form data source; optional.
    /// </param>
    /// <param name="datasources5">
    ///    The fifth form data source; optional.
    /// </param>
    void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        salesQuotationTable = datasources1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>