<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_ProdCalcTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetPanel_ProdCalcTrans</c> class is used by <c>ProdCalcTrans</c> form.
/// </summary>
/// <remarks>
///    This class uses the production ID and <c>CostSheetProdCalcMode</c> value to retrieve
///    <c>ProdCalcTrans</c> records that are used in costing sheet representation.
/// </remarks>
class CostSheetPanel_ProdCalcTrans extends CostSheetPanel
{
    InventTransRefId        transRefId;
    PlanName                transRefPlanName;
    ProdTransRefType        transRefType;
    CostSheetProdCalcMode   costSheetProdCalcMode;
    CostSheetProdFlowMode   costSheetProdFlowMode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        per = CostSheetPanelPer::Unit;
        perComboBox.selection(new SysDictEnum(enumNum(CostSheetPanelPer)).value2Index(per));

        qty = 1;
        qtyReal.realValue(qty);
        qtyReal.allowEdit(this.allowEditQty());

        switch (transRefType)
        {
            case ProdTransRefType::Production:
                view = CostSheetPanelView::CostSheet;
                prodCalcModeComboBox.visible(true);
                break;
            case ProdTransRefType::ProductionFlow:
                view = CostSheetPanelView::CostRollup;
                perComboBox.visible(false);
                qtyReal.visible(false);
                unitIdString.visible(false);
                prodFlowModeComboBox.visible(true);
                break;
            case ProdTransRefType::BackflushCosting:
                view = CostSheetPanelView::CostSheet;
                perComboBox.visible(false);
                qtyReal.visible(false);
                unitIdString.visible(false);
                prodFlowModeComboBox.visible(true);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        viewComboBox.selection(enum2int(view));
        this.modifiedView();
        viewComboBox.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    protected void initUnitIdAndLotSize()
    {
        if (transRefType == ProdTransRefType::Production)
        {
            ProdTable prodTable = ProdTable::find(transRefId);

            if (costSheetProdCalcMode == CostSheetProdCalcMode::Costing)
            {
                lotSize = prodTable.reportedFinishedGood();
            }
            else
            {
                lotSize = prodTable.QtySched;
            }

            if (lotSize == 0.00)
            {
                lotSize = 1.00;
            }

            if (per == CostSheetPanelPer::LotSize)
            {
                qtyReal.realValue(lotSize);
            }

            unitID = prodTable.inventTable().inventUnitId();

            if (unitIdString != null)
            {
                unitIdString.text(unitID);
            }
        }
        else
        {
            lotSize = 1.00;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    protected container packedRecordsList()
    {
        switch (transRefType)
        {
            case ProdTransRefType::Production:
                return CostSheetPanel_ProdCalcTrans::packedServerProdTransRefId(transRefId, costSheetProdCalcMode);

            case ProdTransRefType::ProductionFlow:
            case ProdTransRefType::BackflushCosting:
                return CostSheetPanel_ProdCalcTrans::packedServerFlowTransRefId(transRefPlanName, costSheetProdFlowMode, transRefType);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProdCalcMode</Name>
				<Source><![CDATA[
    protected void modifiedProdCalcMode()
    {
        costSheetProdCalcMode = any2Enum(prodCalcModeComboBox.selection());
        this.fill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProdFlowMode</Name>
				<Source><![CDATA[
    protected void modifiedProdFlowMode()
    {
        costSheetProdFlowMode = any2Enum(prodFlowModeComboBox.selection());
        this.fill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRefId</Name>
				<Source><![CDATA[
    public InventTransRefId parmTransRefId(InventTransRefId _transRefId = transRefId)
    {
        transRefId = _transRefId;

        return transRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRefPlanName</Name>
				<Source><![CDATA[
    public PlanName parmTransRefPlanName(PlanName _transRefPlanName = transRefPlanName)
    {
        transRefPlanName = _transRefPlanName;

        return transRefPlanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRefType</Name>
				<Source><![CDATA[
    public ProdTransRefType parmTransRefType(ProdTransRefType _transRefType = transRefType)
    {
        transRefType = _transRefType;

        return transRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class and adds controls to the caller form at runtime.
    /// </summary>
    /// <param name="_formRun">
    ///    The caller form.
    /// </param>
    /// <param name="_parentId">
    ///    The ID of the caller form tab page or group to which to add the complex control.
    /// </param>
    /// <returns>
    ///    The instance of the class.
    /// </returns>
    /// <remarks>
    ///    This method should be called before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public static CostSheetPanel_ProdCalcTrans newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_ProdCalcTrans costSheetPanel = new CostSheetPanel_ProdCalcTrans();

        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerFlowTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>ProdCalcTrans</c> records and fills in the cost rollup table buffer.
    /// </summary>
    /// <param name="_transRefPlanName">
    ///    The production flow name.
    /// </param>
    /// <param name="_costSheetProdFlowMode">
    ///    A <c>CostSheetProdFlowMode</c> value.
    /// </param>
    /// <param name="_transRefType">
    ///    A <c>ProdTransRefType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A packed list that has cost rollup records.
    /// </returns>
    private static container packedServerFlowTransRefId(
        PlanName                _transRefPlanName,
        CostSheetProdFlowMode   _costSheetProdFlowMode,
        ProdTransRefType        _transRefType = ProdTransRefType::ProductionFlow
        )
    {
        InventItemCostGroupRollup  inventItemCostGroupRollup;
        CostTmpCostRollup          tmpCostRollup,tmpCostRollupBreakDown;
        ProdCalcTrans              prodCalcTrans;

        void addBOMRecordToRollup()
        {
            tmpCostRollup.initFromProdCalcTrans(prodCalcTrans, CostSheetProdCalcMode::Costing);
            tmpCostRollup.insert();
        }

        void setSplitField()
        {
            // Set Split field to Yes for all lines that have cost breakdowns.
            // The Level field for the breakdown lines is of this format: 1.0001, 1.0002, 2.0001, etc.
            // We can only have one level of breakdown.
            update_recordset tmpCostRollup
            setting Split = NoYes::Yes
            exists join tmpCostRollupBreakDown
                where   tmpCostRollupBreakDown.Level > tmpCostRollup.Level
                    &&  tmpCostRollupBreakDown.Level < tmpCostRollup.Level+1;
        }

        if (_transRefPlanName == '')
        {
            return new List(Types::Record).pack();
        }

        if (_costSheetProdFlowMode == CostSheetProdFlowMode::WIPOut)
        {
            while select Resource, InventDimId, RealQty, UnitId
            from prodCalcTrans
                where prodCalcTrans.TransRefId == _transRefPlanName
                   && prodCalcTrans.TransRefType == _transRefType
                   && prodCalcTrans.CollectRefLevel == 0
            {
                InventItemPrice inventItemPrice = InventItemPrice::findCurrent(prodCalcTrans.Resource, CostingVersionPriceType::Cost, prodCalcTrans.InventDimId);

                while select inventItemCostGroupRollup
                    where inventItemCostGroupRollup.InventItemPriceRefRecId == inventItemPrice.RecId
                {
                    tmpCostRollup.initFromInventItemCostGroupRollupMap(inventItemCostGroupRollup, inventItemPrice);
                    // CostAmount is now for 1 InventItemPriceUnit
                    real conversionQtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventItemPrice.ItemId,
                                                                                                                   inventItemPrice.InventDimId,
                                                                                                                   prodCalcTrans.RealQty,
                                                                                                                   prodCalcTrans.UnitId,
                                                                                                                   inventItemPrice.UnitID,
                                                                                                                   NoYes::No);

                    tmpCostRollup.CostAmount = tmpCostRollup.CostAmount * conversionQtyUnit / inventItemPrice.priceQty();

                    tmpCostRollup.insert();
                }
            }
        }

        if (_costSheetProdFlowMode == CostSheetProdFlowMode::WIPIn)
        {
            CostAmount totalCostAmount = 0;

            while select prodCalcTrans
                where prodCalcTrans.TransRefId == _transRefPlanName
                   && prodCalcTrans.TransRefType == _transRefType
                   && prodCalcTrans.CollectRefLevel != 0
            {
                // BOM lines will be used only when calculating 'Single' rollup level. 'Multilevel' should ignore BOM lines
                addBOMRecordToRollup();

                if (prodCalcTrans.CollectRefLevel == 1)
                {
                    totalCostAmount += prodCalcTrans.realCostAmountTotal();
                }
            }

            // Total is without cost group, sum of Level 1 records
            tmpCostRollup.clear();
            tmpCostRollup.Level = InventCostLevel::Total;
            tmpCostRollup.Split = NoYes::Yes;
            tmpCostRollup.CostAmount = totalCostAmount;
            tmpCostRollup.insert();
        }

        setSplitField();

        List list = new List(Types::Record);

        while select CostGroupId, Level, Split, sum(CostAmount) from tmpCostRollup
            group by CostGroupId, Level, Split
        {
            list.addEnd(tmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerProdTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>ProdCalcTrans</c> records and fills in the cost rollup table buffer.
    /// </summary>
    /// <param name="_transRefId">
    ///    The production ID.
    /// </param>
    /// <param name="_costSheetProdCalcMode">
    ///    A <c>CostSheetProdCalcMode</c> value.
    /// </param>
    /// <param name="_tmpProdCalcTrans">
    ///    A temporary table buffer that is used for recursive calls; optional.
    /// </param>
    /// <param name="_originLevel">
    /// The origin Production Level.
    /// </param>
    /// <returns>
    ///    A packed list that has cost rollup records.
    /// </returns>
    private static container packedServerProdTransRefId(
        InventTransRefId        _transRefId,
        CostSheetProdCalcMode   _costSheetProdCalcMode,
        ProdCalcTrans           _tmpProdCalcTrans = null,
        ProdCollectRefLevel     _originLevel = ProdTable::find(_transRefId).CollectRefLevel)
    {
        ProdCalcTrans           tmpProdCalcTrans;
        ProdCalcTrans           tmpProdCalcTransCopy;
        ProdCalcTrans           tmpProdCalcTransBreakdown;
        ProdCalcTrans           prodCalcTrans;
        CostTmpCostRollup       costTmpCostRollup;

        void addBOMRecordToRollup(NoYes _split)
        {
            tmpProdCalcTrans.CollectRefLevel -= _originLevel;
            costTmpCostRollup.initFromProdCalcTrans(tmpProdCalcTrans, _costSheetProdCalcMode);
            costTmpCostRollup.Split = _split;
            costTmpCostRollup.insert();
        }

        if (_transRefId == '')
        {
            return new List(Types::Record).pack();
        }

        tmpProdCalcTrans.setTmp();
        if (_tmpProdCalcTrans.isTmp())
        {
            tmpProdCalcTrans.setTmpData(_tmpProdCalcTrans);
        }
        else
        {
            prodCalcTrans.recordLevelSecurity(true);

            while select prodCalcTrans
                where prodCalcTrans.CollectRefProdId == ProdTable::find(_transRefId).CollectRefProdId
            {
                tmpProdCalcTrans.data(prodCalcTrans);
                tmpProdCalcTrans.insert();
            }
        }

        select firstonly tmpProdCalcTrans
            where tmpProdCalcTrans.TransRefId == _transRefId
               && tmpProdCalcTrans.TransRefType == ProdTransRefType::Production
               && tmpProdCalcTrans.CalcType   == ItemCalcType::Production;

        if (!tmpProdCalcTrans.CollectRefProdId)
            return new List(Types::Record).pack();

        ProdCollectRefLevel collectRefLevel = tmpProdCalcTrans.CollectRefLevel;

        if (tmpProdCalcTrans.CollectRefLevel == _originLevel)
        {
            // this single record will be used when displaying 'Total' rollup level
            tmpProdCalcTrans.CollectRefLevel = 0;
            costTmpCostRollup.initFromProdCalcTrans(tmpProdCalcTrans, _costSheetProdCalcMode);
            costTmpCostRollup.insert();
        }

        tmpProdCalcTransBreakdown.setTmp();
        tmpProdCalcTransBreakdown.setTmpData(tmpProdCalcTrans);

        tmpProdCalcTransCopy.setTmp();
        tmpProdCalcTransCopy.setTmpData(tmpProdCalcTrans);

        List list = new List(Types::Record);

        while select tmpProdCalcTrans
            where tmpProdCalcTrans.TransRefId      == _transRefId
               && tmpProdCalcTrans.TransRefType    == ProdTransRefType::Production
               && tmpProdCalcTrans.CollectRefLevel == collectRefLevel + 1
        {
            if (tmpProdCalcTrans.CalcType == ItemCalcType::BOM)
            {
                boolean breakdownExists = false;
                while select CostGroupId, CollectRefLevel, bom, Qty, sum(CostAmount), sum(CostMarkup), sum(RealCostAmount), sum(RealCostAdjustment)
                    from tmpProdCalcTransBreakdown
                    group by CostGroupId, CollectRefLevel, bom, Qty
                    where tmpProdCalcTransBreakdown.TransRefId         == _transRefId
                       && tmpProdCalcTransBreakdown.TransRefType       == ProdTransRefType::Production
                       && tmpProdCalcTransBreakdown.Resource           == tmpProdCalcTrans.Resource
                       && tmpProdCalcTransBreakdown.IdRefTableId       == tmpProdCalcTrans.IdRefTableId
                       && tmpProdCalcTransBreakdown.IdRefRecId         == tmpProdCalcTrans.IdRefRecId
                       && tmpProdCalcTransBreakdown.CollectRefLevel    == collectRefLevel + 2
                       && tmpProdCalcTransBreakdown.CalcType           == ItemCalcType::CostGroup
                       && tmpProdCalcTransBreakdown.LineNum            >  tmpProdCalcTrans.LineNum
                       && tmpProdCalcTransBreakdown.LineNum            <  tmpProdCalcTrans.LineNum + 1
                {
                    breakdownExists = true;
                    tmpProdCalcTransBreakdown.CollectRefLevel -= _originLevel;
                    costTmpCostRollup.initFromProdCalcTrans(tmpProdCalcTransBreakdown, _costSheetProdCalcMode);
                    costTmpCostRollup.insert();
                }

                if (breakdownExists)
                {
                    if ((tmpProdCalcTrans.CollectRefLevel - _originLevel) == 1)
                    {
                        // BOM lines will be used only when calculating 'Single' rollup level. 'Multilevel' should ignore BOM lines, but always consider their components
                        tmpProdCalcTrans.CollectRefLevel -= _originLevel;
                        costTmpCostRollup.initFromProdCalcTrans(tmpProdCalcTrans, _costSheetProdCalcMode);
                        costTmpCostRollup.insert();
                    }
                    continue; // cost breakdown exists - we don't care whether the std cost item initiates a sub-production or not
                }

                if (tmpProdCalcTrans.DerivedReference == InventRefType::Production && tmpProdCalcTrans.DerivedRefNum)
                {
                    // recursive call
                    List subProductionDataList = List::create(CostSheetPanel_ProdCalcTrans::packedServerProdTransRefId(tmpProdCalcTrans.DerivedRefNum,
                                                                                                                   _costSheetProdCalcMode,
                                                                                                                   tmpProdCalcTransCopy,
                                                                                                                   _originLevel));
                    if (subProductionDataList.elements() > 0)
                    {
                        list.appendList(subProductionDataList);
                        if ((tmpProdCalcTrans.CollectRefLevel - _originLevel) == 1)
                        {
                            // BOMs will be used only when calculating 'Single' rollup level. 'Multilevel' should ignore BOMs itself, but always consider their components
                            addBOMRecordToRollup(NoYes::Yes);
                        }
                    }
                    else
                    {
                        addBOMRecordToRollup(NoYes::No); // sub-production exists, but has no lines. Use BOM line instead
                    }
                }
                else
                {
                    addBOMRecordToRollup(NoYes::No); // the BOM has neither breakdown nor sub-production. Use BOM line instead
                }
            }
            else
            {
                addBOMRecordToRollup(NoYes::No); // make sure that the Split for non-BOM items is set to No
            }
        }

        while select CostGroupId, Level, Split, sum(CostAmount) from costTmpCostRollup
            group by CostGroupId, Level, Split
        {
            list.addEnd(costTmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>