<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineSalesLineImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>SalesLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(SalesLine))]
public class TaxModelDocLineSalesLineImpl_IN extends TaxModelDocLineWithholdImpl_IN
{
    SalesTable      salesTable;
    SalesLine       salesLine;
    SalesCalcTax    salesCalcTax;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
        /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    public Direction_IN getCustomsDirection()
    {
        return Direction_IN::Export;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        if (FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
        {
            return salesTable.custTable_InvoiceAccount();
        }

        return salesTable.custTable_CustAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        AmountCur ret;

        if (salesLine.SalesQty != 0)
        {
            // Consistent with legacy tax behavior on sales line,
            // where only amount for quantity not invoiced is shown.
            ret = CurrencyExchangeHelper::amount(
                salesLine.salesLine_IN().AssessableValueTransactionCurrency * (salesLine.RemainSalesPhysical + salesLine.RemainSalesFinancial) / salesLine.SalesQty,
                salesLine.CurrencyCode);
        }
        else
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales order line shipping date.
    /// </summary>
    /// <returns>
    /// The sales order line shipping date.
    /// </returns>
    public Date getDeliveryDate()
    {
        return salesLine.deliveryDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount.
    /// </returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = salesLine.PriceUnit == 0? 1 : salesLine.PriceUnit;

        Amount netAmount = (salesLine.SalesQty * ((salesLine.SalesPrice - salesLine.discAmount()) / priceUnit)) * (100 - salesLine.discPercent()) / 100;

        totalDisc = netAmount * salesTable.DiscPercent / 100 + (salesLine.SalesQty * salesLine.SalesPrice / priceUnit) - netAmount;

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        Qty ret;

        if (salesCalcTax)
        {
            ret = salesCalcTax.transQty();
        }
        else
        {
            if (salesLine.RemainSalesFinancial * salesLine.RemainSalesPhysical < 0)
            {
                ret = salesLine.RemainSalesFinancial;
            }
            else
            {
                ret = salesLine.RemainSalesPhysical + salesLine.RemainSalesFinancial;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        TransDate       taxCalculationDate;

        if (_taxType == TaxType_IN::Excise)
        {
            taxCalculationDate = DateTimeUtil::date(salesTable.CreatedDateTime);
        }
        else
        {
            taxCalculationDate = salesLine.taxDate(DateTimeUtil::date(salesTable.CreatedDateTime));
        }

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return salesTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        salesLine = _documentLineMap;
        salesTable = salesLine.salesTable();

        super(_documentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    public NoYes isExciseCENVATCreditAvailed()
    {
        return NoYes::NO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base Model.
    /// </summary>
    /// <param name="_baseModel">
    /// The base model.
    /// </param>
    public void setBaseModel(Object _baseModel)
    {
        if (_baseModel is SalesCalcTax)
        {
            salesCalcTax = _baseModel as SalesCalcTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        TaxableDocumentDescriptorFactory	taxableDocumentDescriptorFactory = new TaxableDocumentDescriptorFactory();
        TaxableDocumentDescriptor	taxableDocumentDescriptor = TaxableDocumentDescriptor::construct(
            taxableDocumentDescriptorFactory.determineTaxableDocumentDescriptor(salesTable), salesTable);

        if (salesTable.ProjId
            && !taxableDocumentDescriptor.skipTaxDocument())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type with sales invoice.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        TaxableDocumentDescriptorFactory    taxableDocumentDescriptorFactory    = new TaxableDocumentDescriptorFactory();
        TaxableDocumentDescriptor           taxableDocumentDescriptor           = TaxableDocumentDescriptor::construct(taxableDocumentDescriptorFactory.determineTaxableDocumentDescriptor(salesTable), salesTable);

        if (salesTable.ProjId
            && !taxableDocumentDescriptor.skipTaxDocument())
        {
            if (salesTable.ProjId)
            {
                return TaxModuleType::Project;
            }
            else
            {
                return TaxModuleType::SalesInvoice;
            }
        }
        else
        {
            return TaxModuleType::SalesInvoice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return salesLine.SalesStatus != SalesStatus::Invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foreign transaction; otherwise, false.
    /// </returns>
    public NoYes isForeignTransaction()
    {
        SalesLine_IN   salesLine_IN;

        select firstonly ExportOrder from SalesLine_IN
            where SalesLine_IN.SalesLine == salesLine.RecId;

        return salesTable.CustomsExportOrder_IN || salesLine_IN.ExportOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getTransTaxPostalAddress()
    {
        return LogisticsPostalAddress::findRecId(this.getTaxLocationRefRecid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name = "_type">The transaction tax information type.</param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from company address.
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Deemed export property of party.
    /// </summary>
    /// <returns>
    /// True, if it is Deemed export(TaxGSTEPZCode_IN = BTP/EHTP/EOU/STP or Registration number's Type = UID), else false 
    /// </returns>
    public NoYes getIsDeemedExport()
    {
        LogisticsLocationExt logisticsLocationExt = LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location);
        NoYes                ret = logisticsLocationExt.isDeemedExportType();

        if (!ret)
        {
            TaxRegistrationNumbers_IN taxRegistrationNumbers_IN = TaxRegistrationNumbers_IN::find(this.getPartyGSTRegistrationRefRecId());
            ret = taxRegistrationNumbers_IN.Type == GSTType_IN::UID;
        }

        return  ret;
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SEZ property of party.
    /// </summary>
    /// <returns>
    /// True, if the party is SEZ, else false 
    /// </returns>
    public NoYes getIsSEZParty()
    {
        return LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location).TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return salesTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return salesTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportCalcTaxInAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether support calculate tax in accounting currency for this transaction line.
    /// </summary>
    /// <returns>
    /// True if support, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isSupportCalcTaxInAccountingCurrency()
    {
        //Only support non-retail export order
        return this.isForeignTransaction() && salesTable.isRetailSale() == NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>