<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXSeedDataLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The logger class for cdx seed data related operations.
/// </summary>
internal class RetailCDXSeedDataLogger extends RetailCDXLogger
{
    RetailCDXSeedDataBase seedDataBaseInitializerInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCDXSeedDataLogger</c> class.
    /// </summary>
    /// <param name = "context">The data sync context object.</param>
    internal void new(RetailCDXSeedDataBase _seedDataBaseInstance = null)
    {
        super();
        this.seedDataBaseInitializerInstance = _seedDataBaseInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXInitializeSchedulerStart</Name>
				<Source><![CDATA[
    internal void logCDXInitializeSchedulerStart()
    {
        this.logStartEvent('CDXInitializeScheduler', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXInitializeSchedulerFailure</Name>
				<Source><![CDATA[
    internal void logCDXInitializeSchedulerFailure(System.Exception exception)
    {
        this.logEvent('CDXInitializeSchedulerFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXInitializeSchedulerStop</Name>
				<Source><![CDATA[
    internal void logCDXInitializeSchedulerStop(System.Exception exception)
    {
        this.logStopEvent('CDXInitializeScheduler', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventDataFromContext</Name>
				<Source><![CDATA[
    private container getEventDataFromContext(System.Exception exception = null)
    {
        boolean success; str errorMessage;
        [success, errorMessage] = this.getResultFromException([exception]);

        if (seedDataBaseInitializerInstance)
        {
            return [seedDataBaseInitializerInstance.getSchemaName(),
                    seedDataBaseInitializerInstance.shouldClearPreviousSeedData(),
                    seedDataBaseInitializerInstance.paramIsExecutedFromUI(),
                    this.duration('CDXInitializeScheduler'),
                    success,
                    errorMessage,
                    this.previousErrorEvent,
                    seedDataBaseInitializerInstance.paramUpdateSubjobsOnly()];
        }
        else
        {
            return ['',
                    false,
                    false,
                    0,
                    false,
                    errorMessage,
                    this.previousErrorEvent,
                    false];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>