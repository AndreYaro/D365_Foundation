<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceSalesAgreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>RetailTransactionServiceSalesAgreement</c> provides sales agreement info for Retail transaction service.
/// </summary>
internal class RetailTransactionServiceSalesAgreement
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSalesAgreementOnHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the MatchingAgreement field in the order header.
    /// </summary>
    /// <remark>
    /// The method just sets the MatchingAgreement field in the order header, but does not save it into DB, the caller should take the responsibility to persist data.
    /// </remark>
    /// <param name = "_orderHeader">The order header to set MatchingAgreement.</param>
    /// <param name = "_salesAgreementRecordId">The sales agreement record id to be set to the order header.</param>
    public static void setSalesAgreementOnHeader(RetailOrderHeaderMap _orderHeader, RefRecId _salesAgreementRecordId)
    {
        if (_orderHeader.TableId == tableNum(SalesTable) && _salesAgreementRecordId != 0)
        {
            // Update the MatchingAgreement field on SalesTable.
            SalesTable salesTable = _orderHeader;
            salesTable.MatchingAgreement = _salesAgreementRecordId;

            // Creates the link <c>AgreementReleaseHeaderMatch</c> record between a <c>SalesTable</c> record and an <c>AgreementHeader</c> record.
            // Refer to SalesAutoCreate_ReleaseFromAgreement class.
            AgreementReleaseHeaderMatch agreementReleaseHeaderMatch;

            select firstonly agreementReleaseHeaderMatch
                where agreementReleaseHeaderMatch.SalesTableSalesId == salesTable.SalesId
                    && agreementReleaseHeaderMatch.SalesTableDataAreaId == salesTable.DataAreaId;

            if (!agreementReleaseHeaderMatch.RecId)
            {
                agreementReleaseHeaderMatch.initFromSalesTable(salesTable);
                agreementReleaseHeaderMatch.MatchingReleaseOrderAgreement = _salesAgreementRecordId;
                agreementReleaseHeaderMatch.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the sales agreement availability for a retail order.
    /// </summary>
    /// <param name = "_salesTable">The sales table.</param>
    /// <returns>Returns true if the linked sales agreement is still valid, otherwise false.</returns>
    internal static boolean validateSalesAgreement(SalesTable _salesTable)
    {
        if (_salesTable && _salesTable.isRetailSale() && _salesTable.MatchingAgreement)
        {
            SalesLine salesLine;
            AgreementLine agreementLine;

            while select salesLine
                where salesLine.SalesId ==_salesTable.SalesId && salesLine.MatchingAgreementLine != 0
            {
                agreementLine = AgreementLine::find(salesLine.MatchingAgreementLine, false);

                // Current sales line quantity/amount has been taken into consideration, so compare to 0.
                boolean isValid = agreementLine.checkRemaining(0);

                if (!isValid)
                {
                    eventSource.EventWritePricingSalesAgreementValidationFailed(_salesTable.RecId, salesLine.RecId, agreementLine.RecId);
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOrderBySalesIdWhenSalesAgreementValidationFails</Name>
				<Source><![CDATA[
    public static void cancelOrderBySalesIdWhenSalesAgreementValidationFails(SalesTable _salesTable)
    {
        boolean isLinkValidSalesAgreement = RetailTransactionServiceSalesAgreement::validateSalesAgreement(_salesTable);

        if (!isLinkValidSalesAgreement)
        {
            SalesUpdateRemain salesUpdateRemain = SalesUpdateRemain::construct();
            salesUpdateRemain.cancelOpenOrderLinesDeliveryRemainder(_salesTable);
            eventSource.ordersCreateCustomerOrderWhenSalesAgreementValidationFailedThenCancelled(funcName(), _salesTable.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>