<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyVendTablePaymentPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTablePaymentPost</c> class creates and posts payments for vendor royalties.
/// </summary>
class MCRRoyaltyVendTablePaymentPost
{
    LedgerJournalTable                  ledgerJournalTable;
    MCRLedgerJournal                    mcrLedgerJournal;
    Amount                              totalAmount;
    Num                                 invoiceId;
    VendInvoiceInfoTable                vendInvoiceInfoTable;
    VendInvoiceInfoSubTable             vendInvoiceInfoSubTable;
    
    private MCRRoyaltyInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>VendInvoiceInfoLine</c> object to
    /// be consumed by the vendor service.
    /// </summary>
    /// <param name="_vendInvoiceInfoTableNum">
    /// The invoice number to be used on the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <param name="_vendInvoiceInfoSubTable">
    /// The <c>VendInvoiceInfoSubTable</c> from which to initialize
    /// the <c>VendInvoiceInfoLine</c> object.
    /// </param>
    /// <param name="_procurementCategoryId">
    /// The procurement category number to be used on the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <param name="_lineAmount">
    /// The line amount to be used on the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <param name="_mcrRoyaltyVendTable">
    /// The royalty claim record from which to initialize
    /// the <c>VendInvoiceInfoLine</c> object.
    /// </param>
    /// <returns>
    /// The fully populated <c>VendInvoiceInfoLine</c> object.
    /// </returns>
    private VendInvoiceInfoLine createVendInvoiceInfoLine(
                                                Num                                 _vendInvoiceInfoTableNum,
                                                VendInvoiceInfoSubTable             _vendInvoiceInfoSubTable,
                                                EcoResCategoryId                    _procurementCategoryId,
                                                AmountCur                           _lineAmount,
                                                MCRRoyaltyVendTable                 _mcrRoyaltyVendTable)
    {
        VendInvoiceInfoLine                 vendInvoiceInfoLine;

        vendInvoiceInfoLine.initValue();
        vendInvoiceInfoLine.ParmId = _vendInvoiceInfoSubTable.ParmId;
        vendInvoiceInfoLine.TableRefId = _vendInvoiceInfoSubTable.TableRefId;

        vendInvoiceInfoLine.ProcurementCategory = EcoResCategory::find(_procurementCategoryId).RecId;
        vendInvoiceInfoLine.modifiedField(fieldnum(VendInvoiceInfoLine, ProcurementCategory));
        vendInvoiceInfoLine.LineAmount = _lineAmount;
        vendInvoiceInfoLine.modifiedField(fieldnum(VendInvoiceInfoLine, LineAmount));
        if (_lineAmount > 0)
        {
            vendInvoiceInfoLine.ReceiveNow = 1;
        }
        else
        {
            vendInvoiceInfoLine.ReceiveNow = -1;
        }
        vendInvoiceInfoLine.modifiedField(fieldnum(VendInvoiceInfoLine, ReceiveNow));

        vendInvoiceInfoLine.Description = _mcrRoyaltyVendTable.RoyaltyClaimId;
        vendInvoiceInfoLine.insert();

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceInfoSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>VendInvoiceInfoSubTable</c> object to be consumed by the vendor service.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The vendor invoice header object.
    /// </param>
    /// <returns>
    /// The fully populated <c>VendInvoiceInfoSubTable</c> object.
    /// </returns>
    protected VendInvoiceInfoSubTable createVendInvoiceInfoSubTable(
    VendInvoiceInfoTable    _vendInvoiceInfoTable
    )
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTableLocal;

        vendInvoiceInfoSubTableLocal.initValue();
        vendInvoiceInfoSubTableLocal.ParmId = _vendInvoiceInfoTable.ParmId;
        vendInvoiceInfoSubTableLocal.TableRefId = _vendInvoiceInfoTable.TableRefId;
        vendInvoiceInfoSubTableLocal.insert();

        return vendInvoiceInfoSubTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>VendInvoiceInfoTable</c> object to be consumed by the vendor service.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date for the invoice.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account used on the invoice.
    /// </param>
    /// <param name="_companyInfoRecId">
    /// The company to create the invoice for.
    /// </param>
    /// <param name="_invoiceNum">
    /// The unique number associated with the invoice.
    /// </param>
    /// <returns>
    /// The fully populated <c>VendInvoiceInfoTable</c> object.
    /// </returns>
    protected VendInvoiceInfoTable createVendInvoiceInfoTable(
    TransDate               _transDate,
    VendAccount             _vendAccount,
    CompanyInfoRecId        _companyInfoRecId,
    Num                     _invoiceNum
    )
    {
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;

        vendInvoiceInfoTableLocal.initValue();
        vendInvoiceInfoTableLocal.Num = _invoiceNum;
        vendInvoiceInfoTableLocal.modifiedField(fieldnum(VendInvoiceInfoTable, Num));
        vendInvoiceInfoTableLocal.InvoiceAccount = _vendAccount;
        vendInvoiceInfoTableLocal.modifiedField(fieldnum(VendInvoiceInfoTable, InvoiceAccount));
        vendInvoiceInfoTableLocal.OrderAccount = _vendAccount;
        vendInvoiceInfoTableLocal.modifiedField(fieldnum(VendInvoiceInfoTable, OrderAccount));
        vendInvoiceInfoTableLocal.CurrencyCode = Ledger::accountingCurrency(_companyInfoRecId);
        vendInvoiceInfoTableLocal.modifiedField(fieldnum(VendInvoiceInfoTable, CurrencyCode));
        vendInvoiceInfoTableLocal.TransDate = _transDate;
        vendInvoiceInfoTableLocal.DocumentDate = _transDate;
        vendInvoiceInfoTableLocal.modifiedField(fieldnum(VendInvoiceInfoTable, TransDate));
        vendInvoiceInfoTableLocal.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
        vendInvoiceInfoTableLocal.modifiedField(fieldnum(VendInvoiceInfoTable, VendInvoiceSaveStatus));
        vendInvoiceInfoTableLocal.ParmJobStatus = ParmJobStatus::Waiting;
        vendInvoiceInfoTableLocal.modifiedField(fieldnum(VendInvoiceInfoTable, ParmJobStatus));
        vendInvoiceInfoTableLocal.defaultRow();

        vendInvoiceInfoTableLocal.insert();

        return vendInvoiceInfoTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a vendor invoice to post royalty claims.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The royalty claim record to add to the vendor invoice.
    /// </param>
    public void createVendorInvoice(MCRRoyaltyVendTable _mcrRoyaltyVendTable)
    {
        AmountCur rebateAmt = _mcrRoyaltyVendTable.ledgerPostingAmount();

        using (var activityContext = this.instrumentationLogger().royaltyClaimActivities().createVendorInvoice(_mcrRoyaltyVendTable))
        {
            if (!invoiceId)
            {
                Num invoiceNum = this.getVendorInvoiceNumberSeq().num();
                invoiceId = this.parmInvoiceId(invoiceNum);

                vendInvoiceInfoTable = this.createVendInvoiceInfoTable(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                       _mcrRoyaltyVendTable.VendAccount,
                                                                       CompanyInfo::current(),
                                                                       invoiceNum);

                vendInvoiceInfoSubTable = this.createVendInvoiceInfoSubTable(vendInvoiceInfoTable);
            }

            CurrencyCode ledgerCurrency = Ledger::accountingCurrencyByLedger(Ledger::current());
            if (ledgerCurrency != _mcrRoyaltyVendTable.CurrencyCode)
            {
                rebateAmt = CurrencyExchangeHelper::amountCur2MST(rebateAmt, _mcrRoyaltyVendTable.CurrencyCode);
            }

            VendParameters vendParameters = VendParameters::find();

            VendInvoiceInfoLine vendInvoiceInfoLine = this.createVendInvoiceInfoLine(vendInvoiceInfoTable.Num,
                                                                                     vendInvoiceInfoSubTable,
                                                                                     vendParameters.MCRProcurementCategory,
                                                                                     rebateAmt,
                                                                                     _mcrRoyaltyVendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows infolog message when rebate posting succeeds.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The royalty claim record for which to display the end informational log.
    /// </param>
    protected void endInfoLog(MCRRoyaltyVendTable _mcrRoyaltyVendTable)
    {
        MCRRoyaltyVendTrans mcrRoyaltyVendTrans;

        mcrRoyaltyVendTrans = MCRRoyaltyVendTrans::findFirstByRoyaltyClaimIdTransaction(_mcrRoyaltyVendTable.RoyaltyClaimId,
                                                                               MCRRoyaltyTransactionType::VendorPayment);
        if (mcrRoyaltyVendTrans)
        {
            info(strFmt("@MCR4410251", _mcrRoyaltyVendTable.RoyaltyClaimId));
            info(strFmt("@GLS222667", mcrRoyaltyVendTrans.RoyaltyInvoiceId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvoiceNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSeq</c> object for the vendor invoice number sequence defined in the accounts payable parameters.
    /// </summary>
    /// <returns>
    /// The <c>NumberSeq</c> object for the vendor invoice number sequence.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>NumberSeq</c> object could not be initialized.
    /// </exception>
    protected NumberSeq getVendorInvoiceNumberSeq()
    {
        NumberSeq               numberSeq;
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTable;

        numberSequenceReference = VendParameters::mcrNumRefRoyaltyVendInvoiceId();

        numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceTable)
        {
            // numberSequenceTable.Manual cannot be yes. This traps for sequences that were changed to manual after being referenced in AP Parameters.
            if (numberSequenceTable.Manual   == NoYes::Yes)
            {
                throw error(strFmt("@SYS131762","@MCR4410252"));
            }
            else
            {
                numberSeq = NumberSeq::newGetNum(numberSequenceReference);
            }
        }

        if (numberSeq == null)
        {
            throw error(strfmt("@GLS111556", new DictType(extendedtypenum(MCRRoyaltyVendInvoiceId)).label(), "@SYS76218"));
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ledgerJournalName</c> record used for royalty payment posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record to be used for royalty payment posting.
    /// </returns>
    public LedgerJournalName ledgerJournalName()
    {
        return LedgerJournalName::find(VendParameters::find().MCRRoyaltyJournalName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ledgerJournalName</c> record used for vendor rebate process posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalNameProcess()
    {
        return LedgerJournalName::find(VendParameters::find().MCRRoyaltyJournalName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence code used to create a journal name.
    /// </summary>
    /// <param name="_ledgerJournalName">
    /// The jounal for which to retrieve the number sequence.
    /// </param>
    /// <returns>
    /// The number sequence code used to create journals.
    /// </returns>
    public NumberSequenceCode ledgerJournalNameVoucher(LedgerJournalName _ledgerJournalName)
    {
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_ledgerJournalName.NumberSequenceTable);

        return numberSequenceTable.NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the <c>MCRRoyaltyVendTablePaymentPost</c> class.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The <c>MCRRoyaltyVendTable</c> record for which to post payment.
    /// </param>
    public void main(MCRRoyaltyVendTable _mcrRoyaltyVendTable)
    {
        MCRRoyaltyVendTable mcrRoyaltyVendTableLocal = MCRRoyaltyVendTable::findByRecId(_mcrRoyaltyVendTable.RecId);

        using (var activityContext = this.instrumentationLogger().royaltyClaimActivities().paymentPostMain(mcrRoyaltyVendTableLocal))
        {
            if (mcrRoyaltyVendTableLocal)
            {
                if (this.validate(mcrRoyaltyVendTableLocal))
                {
                    ttsBegin;
                    mcrRoyaltyVendTableLocal.status().runPayment();
                    if (mcrRoyaltyVendTableLocal.RoyaltyJournalRefNum)
                    {
                        this.postAccrualReversal(mcrRoyaltyVendTableLocal);
                    }

                    this.createVendorInvoice(mcrRoyaltyVendTableLocal);

                    mcrRoyaltyVendTableLocal = MCRRoyaltyVendTable::findByRecId(mcrRoyaltyVendTableLocal.RecId, true);

                    mcrRoyaltyVendTableLocal.setFinalStatus();

                    if (!mcrRoyaltyVendTableLocal.ProcessDate)
                    {
                        mcrRoyaltyVendTableLocal.ProcessDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    }

                    if (mcrRoyaltyVendTableLocal.validateWrite())
                    {
                        mcrRoyaltyVendTableLocal.update();
                    }
                    else
                    {
                        error(strFmt("@MCR:MCRRoyaltyVendTableValidationError", mcrRoyaltyVendTableLocal.RoyaltyClaimId));
                    }

                    MCRRoyaltyVendTrans::insertFromMCRRoyaltyVendTable(mcrRoyaltyVendTableLocal,
                                                                        MCRRoyaltyTransactionType::VendorPayment,
                                                                        mcrRoyaltyVendTableLocal.ledgerPostingAmount(),
                                                                        '',
                                                                        invoiceId);
                    ttsCommit;
                    this.endInfoLog(mcrRoyaltyVendTableLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substantiates the <c>MCRRoyaltyVendTablePaymentPost</c> object.
    /// </summary>
    public void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invoice ID for the current instance of the <c>MCRRoyaltyVendTablePaymentPost</c> class.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice ID to set as the invoide ID for the class instance.
    /// </param>
    /// <returns>
    /// The invoice ID for the current instance of the <c>MCRRoyaltyVendTablePaymentPost</c> class.
    /// </returns>
    public Num parmInvoiceId(Num _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAccrualReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a journal that reverses the previous accrual journal.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The royalty claim record for which to create an accrual reversal journal.
    /// </param>
    /// <remarks>
    /// Posts a journal that reverses the previous accrual journal prior to posting a vendor invoice for a royalty.
    /// </remarks>
    public void postAccrualReversal(MCRRoyaltyVendTable _mcrRoyaltyVendTable)
    {
        Voucher                     voucher;
        NumberSeq                   numberSeq;
        LedgerJournalTable          ledgerJournalTableAccrual;
        LedgerJournalTrans          ledgerJournalTransAccrual;
        SalesLine                   salesLine;
        List                        dimensionSources;
        Amount                      amount;

        amount = _mcrRoyaltyVendTable.ledgerPostingAmount();

        numberSeq = NumberSeq::newGetVoucherFromCode(
                                    this.ledgerJournalNameVoucher(this.ledgerJournalNameProcess()),
                                    NumberSeqScopeFactory::createDefaultScope(),
                                    false);

        using (var activityContext = this.instrumentationLogger().royaltyClaimActivities().postAccrualReversal(_mcrRoyaltyVendTable))
        {
            ttsBegin;
            voucher = numberSeq.voucher();

            ledgerJournalTableAccrual               = ledgerJournalTable.pdsInitFromledgerJournalName(this.ledgerJournalNameProcess());
            salesLine                               = SalesLine::findInventTransId(_mcrRoyaltyVendTable.InventTransId);
            dimensionSources                        = new List(Types::Class);
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_mcrRoyaltyVendTable.getDefaultDimension()));

            ledgerJournalTableAccrual.Name          = strFmt("%1 %2 %3", ledgerJournalTableAccrual.Name, "@SYS77038", "@SYS8776");
            ledgerJournalTableAccrual.insert();

            ledgerJournalTransAccrual.initValue();
            ledgerJournalTransAccrual                       = ledgerJournalTransAccrual;
            ledgerJournalTransAccrual.JournalNum            = ledgerJournalTableAccrual.JournalNum;
            ledgerJournalTransAccrual.AccountType           = LedgerJournalACType::Ledger;
            ledgerJournalTransAccrual.OffsetAccountType     = LedgerJournalACType::Ledger;
            ledgerJournalTransAccrual.Voucher               = voucher;

            ledgerJournalTransAccrual.LedgerDimension       = LedgerDimensionDefaultingEngine::createLedgerDimension(_mcrRoyaltyVendTable.LedgerDimension, dimensionSources);

            ledgerJournalTransAccrual.TaxGroup              = MainAccountLegalEntity::findByMainAccountLegalEntity(
                                                        LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerJournalTransAccrual.LedgerDimension),
                                                        CompanyInfo::current()).TaxGroup;

            ledgerJournalTransAccrual.Txt                   = strFmt("%1 %2 %3", "@MCR4410134", "@SYS77038", "@SYS8776");

            if (amount >= 0)
            {
                ledgerJournalTransAccrual.AmountCurCredit   = 0;
                ledgerJournalTransAccrual.AmountCurDebit    = amount;
            }
            else
            {
                ledgerJournalTransAccrual.AmountCurDebit    = 0;
                ledgerJournalTransAccrual.AmountCurCredit   = abs(amount);
            }

            ledgerJournalTransAccrual.OffsetLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(_mcrRoyaltyVendTable.OffsetLedgerDimension, dimensionSources);

            ledgerJournalTransAccrual.DocumentDate         = _mcrRoyaltyVendTable.ProcessDate;
            ledgerJournalTransAccrual.CurrencyCode         = _mcrRoyaltyVendTable.CurrencyCode;
            ledgerJournalTransAccrual.TransDate            = _mcrRoyaltyVendTable.ProcessDate;
            ledgerJournalTransAccrual.Invoice              = _mcrRoyaltyVendTable.SalesInvoiceId;

            this.setLedgerJournalTransCurrencyExchRate(ledgerJournalTransAccrual);

            ledgerJournalTransAccrual.insert();

            ttsCommit;

            // reverse the original accrual sign - normally this will be negative here
            MCRRoyaltyVendTrans::insertFromMCRRoyaltyVendTable(_mcrRoyaltyVendTable,
                                                            MCRRoyaltyTransactionType::RoyaltyAccrual,
                                                            -_mcrRoyaltyVendTable.ledgerPostingAmount(),
                                                            ledgerJournalTransAccrual.JournalNum);

            LedgerJournalPost::postJournal(ledgerJournalTableAccrual, NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a vendor invoice journal for a royalty.
    /// </summary>
    public void postVendorInvoice()
    {
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        MCRRoyaltyVendTable                 mcrRoyaltyVendTableLocal;
        SalesLine                           salesLine;
        VendTable                           vendTable;

        using (var activityContext = this.instrumentationLogger().royaltyClaimActivities().postVendorInvoice(vendInvoiceInfoTable))
        {
            if (vendInvoiceInfoTable)
            {
                ttsBegin;
                while select forupdate vendInvoiceInfoLine
                    order by RecId asc
                    where vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                        &&    vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    join mcrRoyaltyVendTableLocal
                    where mcrRoyaltyVendTableLocal.RoyaltyClaimId   == vendInvoiceInfoLine.Description
                    outer join DefaultDimension, RecId from salesLine
                    where salesLine.RecId       == mcrRoyaltyVendTableLocal.SalesLineRefRecId
                    outer join DefaultDimension from vendTable
                    where vendTable.AccountNum  == mcrRoyaltyVendTableLocal.VendAccount

                {
                    if (salesLine.RecId)
                    {
                        vendInvoiceInfoLine.DefaultDimension = salesLine.DefaultDimension;
                    }
                    else
                    {
                        vendInvoiceInfoLine.DefaultDimension = vendTable.DefaultDimension;
                    }
                    // Fully distribute the source document line
                    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(vendInvoiceInfoLine,
                                    false, SourceDocumentLineAccountingStatus::FullyDistributed);
                }

                // Post the saved vendor invoice
                VendInvoicePaymentAuthorizationTask::postSavedInvoice(vendInvoiceInfoTable);
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets exchange rate information in the <c>LedgerJournalTrans</c> based on the currency code and transaction date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to set the values on.
    /// </param>
    protected void setLedgerJournalTransCurrencyExchRate(LedgerJournalTrans  _ledgerJournalTrans)
    {
        _ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);

        _ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the vendor account.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The royalty claim record to be validated.
    /// </param>
    /// <returns>
    /// true if the values are valid; otherwise, check failed.
    /// </returns>
    protected boolean validate(MCRRoyaltyVendTable _mcrRoyaltyVendTable)
    {
        boolean ret = true;

        if (_mcrRoyaltyVendTable.mcrRoyaltyContract().CumulateSalesBy != MCRRoyaltyCumulationPeriod::Invoice
            && !_mcrRoyaltyVendTable.RoyaltyJournalRefNum)
        {
            ret = checkFailed("@MCR4410133");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private MCRRoyaltyInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MCRRoyaltyInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>