<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseCharge_Global_Feature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

/// <summary>
/// This class represents Reverse charge feature for all the countries for integration with Feature Management.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class ReverseCharge_Global_Feature implements IFeatureMetadata, IFeatureMetadataEnablementNotifiable
{
    #ISOCountryRegionCodes

    private static ReverseCharge_Global_Feature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new ReverseCharge_Global_Feature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>An <c>ReverseCharge_Global_Feature</c> instance.</returns>
    [Hookable(false)]
    public static ReverseCharge_Global_Feature instance()
    {
        return ReverseCharge_Global_Feature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Tax:ReverseCharge_Global_FeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Tax:ReverseCharge_Global_FeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2146901';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        ttsbegin;

        DataArea dataArea;
        while select id from dataArea where dataArea.isVirtual == NoYes::No
        {
            changecompany(dataArea.id)
            {
                if (!ReverseCharge_Global_Feature::isCountryRegionSupportedByDefault() 
                    && !ReverseCharge_GCC_Feature::isCountryRegionInGCC()
                    && !ReverseCharge_Global_Feature::isCountryRegionNotSupported())
                {
                    ReverseChargeParameters_W reverseChargeParameters = ReverseChargeParameters_W::find(true);

                    if (reverseChargeParameters.Enabled == NoYes::Yes)
                    {
                        reverseChargeParameters.Enabled = NoYes::No;
                        reverseChargeParameters.update();
                    }
                }
            }
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionSupportedByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isCountryRegionSupportedByDefault()
    {
        const container RCDefaultCountries = [
            'AE', 'AT', 'BE', 'BG', 'CH', 'CY', 'CZ', 'DE', 'DK', 'EE', 'GR', 'ES',
            'FI', 'FR', 'GB', 'HR', 'HU', 'IE', 'IS', 'IT', 'LI', 'LT', 'LU', 'LV',
            'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'SA', 'SE', 'SG', 'SI', 'SK'];

        return SysCountryRegionCode::isLegalEntityInCountryRegion(RCDefaultCountries);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionNotSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isCountryRegionNotSupported()
    {
        const container RCUnsupportedCountries = ['BR', 'IN', 'RU'];

        return SysCountryRegionCode::isLegalEntityInCountryRegion(RCUnsupportedCountries);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>