<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNotePostReDraw</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPromissoryNotePostReDraw</c> class is used to post a redraw promissory note journal.
/// </summary>
public class VendPromissoryNotePostReDraw extends VendPromissoryNotePost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
    protected void postNextStep(CustVendVoucher _vendVoucher, CustVendTrans _settlingTrans)
    {
        VendVoucher             vendVoucher = _vendVoucher;
        VendTrans               settlingTrans = _settlingTrans;
        VendSettlement          vendSettlement;
        VendTrans               settledTrans;
        VendTrans               nextStepTrans;
        Counter                 numOfSettledTrans;
        VendPromissoryNoteJour  vendPromissoryNoteJour;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;

        if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
        {
            super(vendVoucher, settlingTrans);

            this.createPromissoryNoteInvoice(VendPromissoryNoteJour::find(ledgerJournalTrans.NegInstId), settlingTrans);
        }
        else
        {
            nextStepTrans.data(settlingTrans);

            vendVoucher.parmSettlementType(SettlementType::None);
            vendVoucher.parmPostingProfile(CustVendNegInstPost::getPostingProfile(ledgerJournalType,
                                                                                  ledgerJournalTrans.BankRemittanceType));

            // Creates new open transactions for transactions settled by the settling transaction.
            // This code is run when posting a redraw promissory note journal.
            // In this code the settlingTrans, settledTrans, and custSettlement will always be in the current company so we do not
            // need to do a cross company select statement and do not need to changeCompany after the select statement.
            while select OffsetRecid from vendSettlement
                where vendSettlement.TransRecId == settlingTrans.RecId
                join settledTrans
                    where settledTrans.RecId == vendSettlement.OffsetRecid
            {
                numOfSettledTrans++;
                nextStepTrans.AmountCur = settledTrans.AmountCur;
                nextStepTrans.AmountMST = settledTrans.AmountMST;
                vendVoucher.parmAmountCur(nextStepTrans.AmountCur);
                vendVoucher.parmTransTxt(strfmt("@SYS83924", enum2str(ledgerJournalTrans.CustVendNegInstProtestReason), settledTrans.PromissoryNoteID));

                vendVoucher.post(ledgerVoucher, nextStepTrans);

                vendPromissoryNoteJour = VendPromissoryNoteJour::find(settledTrans.PromissoryNoteID, true);
                nextStepTrans.AmountCur = -nextStepTrans.AmountCur;
                vendPromissoryNoteTrans = this.insertNegInstTrans(vendPromissoryNoteJour, nextStepTrans);

                if (isConditionalTaxSpain)
                {
                    this.taxSettlement_ES(vendPromissoryNoteTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>protestProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the selected option on journal to protest settled process; that can be "as invoice" or "as open payment".
    /// </summary>
    /// <returns>
    ///     The protest settled process option.
    ///</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendNegInstProtestProcess protestProcess()
    {
        return ledgerJournalTrans.ledgerJournalTable().CustVendNegInstProtestProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqNum</Name>
				<Source><![CDATA[
    protected CustVendNegInstSeqNum seqNum(VendPromissoryNoteID _vendPromissoryNoteID)
    {
        CustVendNegInstSeqNum seqNum = super(_vendPromissoryNoteID);

        if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
        {
            seqNum++;
        }

        return seqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::Redrawn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>