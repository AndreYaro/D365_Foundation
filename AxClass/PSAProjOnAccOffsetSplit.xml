<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjOnAccOffsetSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class psaProjOnAccOffsetSplit extends RunBase
{
    Amount                      splitAmount;
    ProjFundingSourceRefId      projFundingSourceRecId;
    PSATmpProjProposalTrans     tmpProjProposalTrans;
    DialogField                 dialogAmount;
    boolean                     splitHappened;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@PSA11597";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialogoffset = super();

        dialogAmount  = dialogoffset.addFieldValue(extendedTypeStr(Amount), splitAmount,"@PSA1033", "@PSA1034");

        return dialogoffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        splitAmount  = dialogAmount.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSplitHappened</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the split transactions were created, i.e. the user entered a valid amount and the process executed successfully.
    /// </summary>
    /// <returns>
    /// true if the split happened, false otherwise.
    /// </returns>
    public boolean hasSplitHappened()
    {
        return splitHappened;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjFundingSource(ProjFundingSourceRefId _projFundingSourceRecId = projFundingSourceRecId)
    {
        projFundingSourceRecId = _projFundingSourceRecId;

        return projFundingSourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpProjProposal</Name>
				<Source><![CDATA[
    public PSATmpProjProposalTrans parmTmpProjProposal(PSATmpProjProposalTrans _tmpProjProposalTrans = tmpProjProposalTrans)
    {
        tmpProjProposalTrans = _tmpProjProposalTrans;

        return tmpProjProposalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (!this.prompt())
        {
            return;
        }

        setPrefix(this.caption());

        if (! this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            this.splitTransAction();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTransAction</Name>
				<Source><![CDATA[
    public void splitTransAction()
    {
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTrans          newProjOnAccTrans;
        ProjOnAccTransId        newtransId;
        NumberSeq               numberSeq;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjOnAccTransSale      newProjOnAccTransSale;
        ProjFundingSourceRefId  projFundingSource;
        Map                     amountDistributionMap;
        Map                     distributionPercentageMap;
        MapEnumerator           enumerateMap;
        AmountCur               percentageDistributed;
        AmountCur               distributionPercentage;
        AmountCur               totalDistributionAmount;
        AmountCur               amountToDistributed;
        AmountCur               amountDistributed;
        AmountCur               localSplitAmount;

        // <GIN>
        ProjTable                       projTable;
        #ISOCountryRegionCodes
        // </GIN>

        amountDistributionMap      = new Map(Types::Int64, Types::Real);
        distributionPercentageMap  = new Map(Types::Int64, Types::Real);

        projFundingSource   = this.parmProjFundingSource();

        // No reason to continue. Nothing to distribute
        if (splitAmount == 0.00)
        {
            return;
        }

        //
        // Validate deduction split amount
        // Note split amount entered in the dialog is a positive value.
        // The offset transactions in the system are negative. Convert to a local value for processing
        //
        localSplitAmount = -splitAmount;

        // Original offset transaction
        select projOnAccTrans where projOnAccTrans.RecId ==  tmpProjProposalTrans.RefRecIdTrans;

        // Singleton funding source split
        if (projFundingSource != 0)
        {
            // Find the orignal amount
            select Amount from projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId &&
                      projOnAccTransSale.FundingSource == projFundingSource &&
                      (projOnAccTransSale.TransStatus == ProjTransStatus::Registered ||
                      projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);

            // No valid amount found to distribute
            if (projOnAccTransSale.Amount == 0)
            {
                return;
            }

            // No reason to distribute 100% of amount
            if (projOnAccTransSale.Amount == localSplitAmount)
            {
                return;
            }

            // This is checked in the UI, so the condition should not exist.
            if (localSplitAmount < projOnAccTransSale.Amount)
            {
                return;
            }

            // Create maps
            amountDistributionMap.insert(projFundingSource, localSplitAmount);
            distributionPercentageMap.insert(projFundingSource, 100.00);
        }
        else
        {
            // find total offset amount
            select sum(Amount) from projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId &&
                      (projOnAccTransSale.TransStatus == ProjTransStatus::Registered ||
                       projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);
            totalDistributionAmount = projOnAccTransSale.Amount;

            // No valid amount found to distribute
            if (totalDistributionAmount == 0.00)
            {
                return;
            }

            // No reason to distribute 100% of amount
            if (totalDistributionAmount == localSplitAmount)
            {
                return;
            }

            // This is checked in the UI, so the condition should not exist.
            if (localSplitAmount < totalDistributionAmount)
            {
                return;
            }

            //
            // Create distribution percentage map based on original offset transaction amounts
            // the order by 'Amount' field is to place rounding differences on the funding source with the largest amount.
            //
            while select Amount, FundingSource from projOnAccTransSale
                order Amount asc
                where projOnAccTransSale.TransId == projOnAccTrans.TransId &&
                      (projOnAccTransSale.TransStatus == ProjTransStatus::Registered ||
                       projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                distributionPercentage = projOnAccTransSale.Amount/totalDistributionAmount * 100.00;
                percentageDistributed += distributionPercentage;

                if (distributionPercentageMap.exists(projOnAccTransSale.FundingSource))
                {
                    distributionPercentage += distributionPercentageMap.lookup(projOnAccTransSale.FundingSource);
                    distributionPercentageMap.remove(projOnAccTransSale.FundingSource);
                }

                // No need to keep track of funding sources with percentage distribution of 0.00
                if (distributionPercentage != 0.00)
                {
                    distributionPercentageMap.insert(projOnAccTransSale.FundingSource, distributionPercentage);
                }
            }

            if (percentageDistributed != 100.00)
            {
                // Assign rounding to a last funding source processed
                distributionPercentage = distributionPercentageMap.lookup(projFundingSource) + (100.00 - percentageDistributed);
                distributionPercentageMap.remove(projOnAccTransSale.FundingSource);
                distributionPercentageMap.insert(projFundingSource, distributionPercentage);
            }

            // Create the amount map for the new offset transaction
            enumerateMap = new MapEnumerator(distributionPercentageMap);
            while (enumerateMap.moveNext())
            {
                amountToDistributed = CurrencyExchangeHelper::amount(localSplitAmount * enumerateMap.currentValue() / 100.00, projOnAccTrans.CurrencyId);
                amountDistributionMap.insert(enumerateMap.currentKey(), amountToDistributed);

                amountDistributed += amountToDistributed;
            }

            if (amountDistributed != localSplitAmount)
            {
                // Assign rounding to a last funding source processed
                amountToDistributed = distributionPercentageMap.lookup(projOnAccTransSale.FundingSource) + (localSplitAmount - amountDistributed);
                amountDistributionMap.remove(projOnAccTransSale.FundingSource);
                amountDistributionMap.insert(projOnAccTransSale.FundingSource, amountToDistributed);
            }
        }

        numberSeq           = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase());
        newtransId          = numberSeq.num();

        ttsbegin;

        // Create the new offset transaction header
        newProjOnAccTrans.clear();
        this.initNewProjOnAccTrans(newProjOnAccTrans, projOnAccTrans);
        newProjOnAccTrans.TransId =  newtransId;
        newProjOnAccTrans.insert();

        // Create the new offset transaction sales lines from the map of amounts and update the orignal transaction
        enumerateMap = new MapEnumerator(amountDistributionMap);
        while (enumerateMap.moveNext())
        {
            //
            // Update the original offset transaction to reflect the split first.
            // Information is needed from this record to create the new entry
            // Updating first avoid traversing the map twice.
            //
            select forupdate projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId &&
                        projOnAccTransSale.FundingSource == enumerateMap.currentKey();
            projOnAccTransSale.Amount -= enumerateMap.currentValue();
            projOnAccTransSale.update();

            // Only create entries for non-zero amounts in the new transaction
            if (enumerateMap.currentValue() != 0.00)
            {
                newProjOnAccTransSale.clear();
                newProjOnAccTransSale.initValue();
                newProjOnAccTransSale.LedgerTransdate   = projOnAccTrans.TransDate;
                newProjOnAccTransSale.TransId           = newtransId;
                newProjOnAccTransSale.FundingSource     = enumerateMap.currentKey();
                newProjOnAccTransSale.Amount            = enumerateMap.currentValue();
                this.initNewProjOnAccTransSale(newProjOnAccTransSale, projOnAccTransSale);
                newProjOnAccTransSale.insert();

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    projTable = ProjTable::find(projOnAccTrans.ProjID);
                    TransTaxInformationHelper::copyTransTaxInformation(projTable, newProjOnAccTransSale);
                }
                // </GIN>
            }
        }

        if (TaxParameters::checkTaxParameters_IN())
        {
            projOnAccTrans.reread();
            newProjOnAccTrans.reread();

            AmountCur originalAssessableValue = projOnAccTrans.projOnAccTransTaxExtensionIN().AssessableValueTransactionCurrency;
            AmountCur totalSalesAmountCur = projOnAccTrans.TotalSalesAmountCur + newProjOnAccTrans.TotalSalesAmountCur;

            if (totalSalesAmountCur)
            {
                AmountCur assessableValue = projOnAccTrans.TotalSalesAmountCur / totalSalesAmountCur * originalAssessableValue;
                projOnAccTrans.projOnAccTransTaxExtensionIN().updateAssessableValueTransacationCurrency(assessableValue);

                AmountCur assessableValueForNew = totalSalesAmountCur - assessableValue;
                newProjOnAccTrans.projOnAccTransTaxExtensionIN().updateAssessableValueTransacationCurrency(assessableValueForNew);
            }
        }

        // Update the temp table used in creating the invoice proposal
        tmpProjProposalTrans.LineAmount  = tmpProjProposalTrans.LineAmount - localSplitAmount;
        tmpProjProposalTrans.update();

        tmpProjProposalTrans.initFromProjOnAccTrans(ProjOnAccTrans::find(newProjOnAccTrans.TransId));
        tmpProjProposalTrans.insert();

        splitHappened = true;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewProjOnAccTrans</Name>
				<Source><![CDATA[
    [Wrappable]
    protected void initNewProjOnAccTrans( ProjOnAccTrans _newProjOnAccTrans, ProjOnAccTrans _projOnAccTrans )
    {
        _newProjOnAccTrans.ProjID                       =  _projOnAccTrans.ProjID;
        _newProjOnAccTrans.TransDate                    =  _projOnAccTrans.TransDate;
        _newProjOnAccTrans.Description                  =  _projOnAccTrans.Description;
        _newProjOnAccTrans.TransactionOrigin            =  _projOnAccTrans.TransactionOrigin;
        
        _newProjOnAccTrans.CurrencyId                   =  _projOnAccTrans.CurrencyId;
        _newProjOnAccTrans.TaxItemGroupId               =  _projOnAccTrans.TaxItemGroupId;
        _newProjOnAccTrans.TaxGroupId                   =  _projOnAccTrans.TaxGroupId;
        _newProjOnAccTrans.psaProjProgressInvoice       =  _projOnAccTrans.psaProjProgressInvoice;
        _newProjOnAccTrans.psaRefTableIdBudgetTrans     =  _projOnAccTrans.psaRefTableIdBudgetTrans;
        _newProjOnAccTrans.psaRefRecIdBudgetTrans       =  _projOnAccTrans.psaRefRecIdBudgetTrans;
        _newProjOnAccTrans.DefaultDimension             =  _projOnAccTrans.DefaultDimension;
        _newProjOnAccTrans.psaIsOnAccount               =  _projOnAccTrans.psaIsOnAccount;
        _newProjOnAccTrans.Qty                          =  _projOnAccTrans.Qty;
        _newProjOnAccTrans.psaRefRecId                  =  _projOnAccTrans.psaRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewProjOnAccTransSale</Name>
				<Source><![CDATA[
    [Wrappable]
    protected void initNewProjOnAccTransSale( ProjOnAccTransSale _newProjOnAccTransSale, ProjOnAccTransSale _projOnAccTransSale )
    {
        _newProjOnAccTransSale.DefaultDimension  = _projOnAccTransSale.DefaultDimension;
        _newProjOnAccTransSale.TransStatus       = _projOnAccTransSale.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;

        splitAmount  =  - tmpProjProposalTrans.LineAmount;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (- tmpProjProposalTrans.LineAmount <= splitAmount || splitAmount <= 0)
        {
            return checkFailed("@PSA1036");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PSA1032";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>