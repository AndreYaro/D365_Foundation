<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailScaleUnitUnregistrationUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailScaleUnitUnregistrationUtility</c> class is responsible to unregister a Retail Scale Unit.
/// </summary>
public class RetailScaleUnitUnregistrationUtility
{
    private str scaleUnitId;
    const str   DefaultName = 'Default';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailScaleUnitUnregistrationUtility</c> class.
    /// </summary>
    /// <param name = "_scaleUnitId">The retail scale unit id.</param>
    protected void new(str _scaleUnitId)
    {
        scaleUnitId = _scaleUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterRetailScaleUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unregisters a Retail Scale Unit.
    /// </summary>
    /// <param name = "_scaleUnitId">The Id of the Retail Scale Unit.</param>
    public static void unregisterRetailScaleUnit(str _scaleUnitId)
    {
        ApplicationEventSource::EventWriteRetailScaleUnitUnregistrationScaleUnitStart(_scaleUnitId, 'Begin unregistration of retail scale unit.');

        RetailScaleUnitUnregistrationUtility utility = new RetailScaleUnitUnregistrationUtility(_scaleUnitId);

        utility.unregister();

        ApplicationEventSource::EventWriteRetailScaleUnitUnregistrationScaleUnitStop(_scaleUnitId, 'End unregistration of retail scale unit.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregister</Name>
				<Source><![CDATA[
    private void unregister()
    {
        RetailScaleUnit retailScaleUnit;

        ttsbegin;

        select firstonly forupdate retailScaleUnit
            where   retailScaleUnit.Id              == scaleUnitId
                &&  retailscaleUnit.IsSystemRecord  == NoYes::Yes;

        if (retailScaleUnit)
        {
            this.updateChannelsToDefaultOrNone();
            this.unbindRetailScaleUnitConfiguration(retailScaleUnit);

            retailScaleUnit.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChannelsToDefaultOrNone</Name>
				<Source><![CDATA[
    private void updateChannelsToDefaultOrNone()
    {
        RetailConnDatabaseProfile   defaultDatabase;
        RetailChannelProfile        defaultProfile;
        RetailConnDatabaseProfile   retailScaleUnitDatabase;
        RetailCDXDataGroup          currentDataGroup;
        RetailScaleUnit             scaleUnits;
        #RetailCDX;

        ApplicationEventSource::EventWriteRetailScaleUnitUnregistrationUpdateChannelsToDefaultStart(scaleUnitId, 'Begin assigning channels back to Default or None for retail scale unit.');

        select firstonly retailScaleUnitDatabase
                where retailScaleUnitDatabase.Name == scaleUnitId;

        select firstonly defaultDatabase
            where defaultDatabase.Name == #RetailConnDatabaseProfile_DefaultDBName;

        select firstonly defaultProfile
                where defaultProfile.Name == #RetailConnDatabaseProfile_DefaultDBName;

        select count(RecId) from scaleUnits;
        currentDataGroup = RetailCDXDataGroup::find(defaultDatabase.DataGroup);

        // Update the channels that were pointing to default channel DB and channel Profile to the new one.
        ttsbegin;
        RetailDeploymentUtility::updateChannelDatabaseAndProfileReferences(retailScaleUnitDatabase, defaultDatabase, defaultProfile);

        if (currentDataGroup.Name == #RetailCdxDataGroup_LegacyName  && scaleUnits.RecId == 0)
        {
            RetailDeploymentUtility::updateDefaultDatabaseGroupMapping(#RetailCdxDataGroup_LegacyName, #RetailCdxDataGroup_DefaultName);
        }
        ttscommit;

        ApplicationEventSource::EventWriteRetailScaleUnitUnregistrationUpdateChannelsToDefaultStop(scaleUnitId, 'End assigning channels back to Default or None for retail scale unit.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>unbindRetailScaleUnitConfiguration</Name>
				<Source><![CDATA[
    private void unbindRetailScaleUnitConfiguration(RetailScaleUnit _retailScaleUnit)
    {
        RetailConnDatabaseProfile           channelDatabase;
        RetailChannelProfile                channelProfile;
        RetailChannelProfileProperty        channelProfileProperty;
        RetailIdentityProvider              identityProvider;
        RetailRelyingParty                  relyingParty;
        RetailScaleUnitConfiguration        retailScaleUnitConfiguration;

        ApplicationEventSource::EventWriteRetailScaleUnitUnregistrationUnbindScaleUnitConfigurationStart(scaleUnitId, 'Begin unbinding retail scale unit configurations for retail scale unit.');

        while select forupdate retailScaleUnitConfiguration
                where retailScaleUnitConfiguration.RetailScaleUnit == _retailScaleUnit.RecId
        {
            if (retailScaleUnitConfiguration.IsSystemRecord == NoYes::Yes)
            {
                switch(retailScaleUnitConfiguration.RefTableId)
                {
                    case tableNum(RetailConnDatabaseProfile):
                            delete_from channelDatabase
                                where channelDatabase.RecId == retailScaleUnitConfiguration.RefRecId;
                        break;
                    case tableNum(RetailChannelProfile):
                            delete_from channelProfile
                                where channelProfile.RecId == retailScaleUnitConfiguration.RefRecId;
                        break;
                    case tableNum(RetailChannelProfileProperty):
                            delete_from channelProfileProperty
                                where channelProfileProperty.RecId == retailScaleUnitConfiguration.RefRecId;
                        break;
                    case tableNum(RetailIdentityProvider):
                            delete_from identityProvider
                                where identityProvider.RecId == retailScaleUnitConfiguration.RefRecId;
                        break;
                    case tableNum(RetailRelyingParty):
                        delete_from relyingParty
                                where relyingParty.RecId == retailScaleUnitConfiguration.RefRecId;
                        break;
                    default:
                        throw error(strFmt("@RetailScaleUnit:RetailScaleUnitInvalidConfiguration", tableId2PName(retailScaleUnitConfiguration.RefTableId)));
                }
            }

            retailScaleUnitConfiguration.delete();
        }

        ApplicationEventSource::EventWriteRetailScaleUnitUnregistrationUnbindScaleUnitConfigurationStop(scaleUnitId, 'End unbinding retail scale unit configurations for retail scale unit.');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>