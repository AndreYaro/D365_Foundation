<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransDetailsHelper_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class containing helper method to process details version of the report in all Eastern Europe countries.
/// </summary>
public class TaxSpecPerLedgerTransDetailsHelper_W extends TaxSpecPerLedgerTransBaseHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillReportTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the records to tmp table.
    /// </summary>
    private void fillReportTable()
    {
        #EECountryRegionCodes

        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        TaxTrans taxTrans;
        TaxAccountingDistParentLineView acctDistView;
        TransactionReversalTrans reversalTrans;
        TaxTable taxtable;
        TaxTrans_W taxTransW;

        #LOCALMACRO.DefaultWhereClause
                    generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.Ledger == ledgerRecId
                    && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
                    && mainAccountLedgerDimensionView.MainAccount >= fromMainAccount
                    && mainAccountLedgerDimensionView.MainAccount <= toMainAccount
                    && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount ||
                        taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax ||
                        taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable)
                    && taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTrans.TaxCode >= fromTaxCode
                    && taxTrans.TaxCode <= toTaxCode
                    && taxTrans.TaxOrigin != TaxOrigin::TaxReporting
                    && taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= ToDate
                    && taxtable.TaxCode == taxTrans.TaxCode
                    join taxTransW
                        where taxTransW.VatDueDate_W >= fromVATDate
                            && taxTransW.VatDueDate_W <= toVATDate
                            && taxTransW.TaxTrans == taxTrans.RecId
        #ENDMACRO

        // Process Legacy documents
        insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection, TaxInCostPriceMST, TaxAmount, TaxBaseAmount,
                                TaxCodeName)
        select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
            join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
            join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
            join taxTransGeneralJournalAccountEntry
            join RecId, TaxCode, TaxDirection, TaxInCostPriceMST, TaxAmount, TaxBaseAmount from taxTrans
            join TaxName from taxtable
            where #DefaultWhereClause
                && (taxTrans.SourceDocumentLine == 0 ||
                    taxTrans.TaxOrigin == TaxOrigin::CashDisc ||
                    taxTrans.TaxOrigin == TaxOrigin::Payment ||
                    taxTrans.TaxOrigin == TaxOrigin::TaxReversed);

        // Process source document based documents

        if (TaxSpecPerLedgerTransReportExcludInterunitFlight::instance().isEnabled())
        {
            SubledgerJournalAccountEntry subledgerJournalAccountEntry;

            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                    GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                    FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                    TaxBaseAmount,
                                    TaxTrans, TaxCode, TaxDirection, TaxCodeName, TaxAmount)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join AccountingCurrencyAmount from taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection from taxTrans
                join TaxName from taxtable
                    where #DefaultWhereClause
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                join AccountingCurrencyAmount from acctDistView
                    where acctDistView.SourceDocumentLine == taxTrans.SourceDocumentLine
                        && acctDistView.ParentDistributionLedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
                        && acctDistView.IgnoreRecord == NoYes::No
                        && (((taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ExtendedPrice || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge)
                               && acctDistView.MonetaryAmount == MonetaryAmount::Tax) ||
                             ( (taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::PriceVariance || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ChargeVariance)
                               && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance))
                exists join subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == acctDistView.SubledgerJournalAccountEntry
                        && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit
                        && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit;
        }
        else
        {
            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                    GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                    FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                    TaxBaseAmount,
                                    TaxTrans, TaxCode, TaxDirection, TaxCodeName, TaxAmount)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join AccountingCurrencyAmount from taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection from taxTrans
                join TaxName from taxtable
                    where #DefaultWhereClause
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                join AccountingCurrencyAmount from acctDistView
                    where acctDistView.SourceDocumentLine == taxTrans.SourceDocumentLine
                        && acctDistView.ParentDistributionLedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
                        && acctDistView.IgnoreRecord == NoYes::No
                        && (((taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ExtendedPrice || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge)
                               && acctDistView.MonetaryAmount == MonetaryAmount::Tax) ||
                             ( (taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::PriceVariance || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ChargeVariance)
                               && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance));
        }

        // Pickup transactions that have zero dollar tax amounts. TaxTrans record present but no accountingdistrubution record.
        if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportIncTaxForSourceDocFlighting::instance()))
        {
            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection, TaxBaseAmount, TaxAmount, TaxCodeName)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join RecId,TaxCode, TaxDirection, TaxBaseAmount, TaxAmount from taxTrans
                join TaxName from taxtable
                    where #DefaultWhereClause
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                notExists join acctDistView
                    where acctDistView.SourceDocumentLine == taxTrans.SourceDocumentLine
                    && acctDistView.ParentDistributionLedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
                    && acctDistView.IgnoreRecord == NoYes::No;
        }
        else
        {
            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection, TaxBaseAmount, TaxCodeName)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection, TaxBaseAmount from taxTrans
                join TaxName from taxtable
                    where #DefaultWhereClause
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                notExists join acctDistView
                    where acctDistView.SourceDocumentLine == taxTrans.SourceDocumentLine
                    && acctDistView.ParentDistributionLedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
                    && acctDistView.IgnoreRecord == NoYes::No;
        }

        if (isReportByAccTypeExpenditureFeatureEnabled)
        {
            GeneralJournalAccountEntry generalJournalAccountEntryInvoice;
            InventTransOrigin inventTransOrigin;
            InventTransPosting inventTransPosting;

            update_recordSet reportTable
            setting AmountDebit = generalJournalAccountEntryInvoice.AccountingCurrencyAmount
                where reportTable.AmountCredit == 0
            join generalJournalAccountEntry
                where reportTable.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump
            join generalJournalEntry
                where reportTable.GeneralJournalEntry == generalJournalEntry.RecId
            join inventTransPosting
                where generalJournalEntry.SubledgerVoucher == inventTransPosting.Voucher
                    && generalJournalAccountEntry.LedgerDimension == inventTransPosting.OffsetLedgerDimension
                    && inventTransPosting.PostingTypeOffset == generalJournalAccountEntry.PostingType
                    && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
            join taxTrans
                where reportTable.TaxTrans == taxTrans.RecId
                    && taxTrans.SourceDocumentLine != 0
            join AccountingCurrencyAmount from generalJournalAccountEntryInvoice
                where generalJournalEntry.RecId == generalJournalAccountEntryInvoice.GeneralJournalEntry
                    && generalJournalAccountEntryInvoice.LedgerDimension == inventTransPosting.LedgerDimension
                    && generalJournalAccountEntryInvoice.PostingType == inventTransPosting.PostingType
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == taxTrans.InventTransId
                    && inventTransOrigin.RecId == inventTransPosting.InventTransOrigin;
        }

        update_recordSet reportTable
        setting VatDueDate_W = taxTransW.VatDueDate_W
            join taxTransW
                where taxTransW.TaxTrans == reportTable.TaxTrans;

        // Update voucher values for summurized vouchers
        update_recordSet reportTable
        setting Voucher = literalStr("@SYS110428")
            where reportTable.Voucher == '';

        // Fix amount credit and amount debit.
        update_recordSet reportTable
        setting AmountCredit = -1 * reportTable.AmountDebit,
                AmountDebit = 0
            where reportTable.IsCredit == true;

        update_recordSet reportTable
        setting TaxReceivable = reportTable.TaxAmount - reportTable.TaxInCostPriceMST
            where reportTable.TaxDirection == TaxDirection::IncomingTax;

        update_recordSet reportTable
        setting TaxPayable = -1 * reportTable.TaxAmount
            where reportTable.TaxDirection == TaxDirection::OutgoingTax;

        update_recordSet reportTable
        setting TraceNum = reversalTrans.TraceNum
        join firstOnly TraceNum from reversalTrans
            where reversalTrans.RefTableId == tableNum(GeneralJournalAccountEntry)
                && reversalTrans.RefRecId == reportTable.GeneralJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes report data for detailed version of the report when only default query ranges are present.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Should not be called for processing totals only version.
    /// </exception>
    public void process()
    {
        if (contract.parmTotalOnly())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        reportTable.setConnection(userConnection);

        this.initializeRanges();
        this.fillReportTable();

        select firstOnly RecId from reportTable;
        this.updateRecordNumbers(reportTable.getPhysicalTableName());
        this.updateMainAccountName();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>