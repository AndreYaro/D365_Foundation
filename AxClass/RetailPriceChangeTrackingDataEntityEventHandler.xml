<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingDataEntityEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal class RetailPriceChangeTrackingDataEntityEventHandler
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    const int RetryMax = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DataEntity_OnMappingEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data event handler to set retail price change tracking for table level event handlers to ignore the row.
    /// </summary>
    /// <param name = "entity">The data entity buffer.</param>
    /// <param name = "_eventArgs">The data event args.</param>
    public static void DataEntity_OnMappingEntityToDataSource(Common entity, DataEventArgs _eventArgs)
    {
        RetailPriceChangeTrackingContext context;

        DataEntityContextEventArgs args = _eventArgs as DataEntityContextEventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = args.parmEntityDataSourceContext();

        if (RetailPriceChangeTrackingDataEntityEventHandler::isRowBasedPriceChangetrackingSkippedForDataSource(dataSourceCtx.name())
            && entity.isEntityInDataManagementContext())
        {
            RetailPriceChangeTrackingDataEntityEventHandler::setPriceChangeTrackingContext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DMFDefinitionGroupExecution_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data event handler to trigger full refresh after the import is completed.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    public static void DMFDefinitionGroupExecution_onUpdated(Common sender, DataEventArgs e)
    {
        // If the data entity is not in the list of change tracking.
        // The flag will not be set on inserted event to skip line level change tracking, and does not need full refresh when completes.
        if (!RetailPriceChangeTrackingHelper::isDMFDataEntityImport())
        {
            return;
        }

        DMFDefinitionGroupExecution updatedInstance = sender;

        if (updatedInstance.TargetStatus == DMFBatchJobStatus::Finished 
            || updatedInstance.TargetStatus == DMFBatchJobStatus::Error) // may have partially success when run in batch
        {
            System.Exception ex;
            int retryCount = 0;

            // Add try catch logic to avoid impacting the data entity import result.
            try
            {
                DMFEntity dmfEntity = DMFEntity::find(updatedInstance.Entity);

                if (RetailPriceChangeTrackingDataEntityEventHandler::isRowBasedPriceChangeTrackingSkippedForEntity(dmfEntity.TargetEntity))
                {
                    DMFOperationType operationType = DMFUtil::getOperationTypeForExecution(updatedInstance.ExecutionId);

                    if (operationType == DMFOperationType::Import)
                    {
                        DMFExecutionSummaryStatus entityExecutionStatus = DMFExecutionStatusHelper::GetEntityExecutionSummaryStatus(updatedInstance);

                        if (entityExecutionStatus == DMFExecutionSummaryStatus::Succeeded || entityExecutionStatus == DMFExecutionSummaryStatus::PartiallySucceeded)
                        {
                            eventSource.EventWritePriceChangeTrackingFullRefresh(
                            'Data entity import complete',
                            classStr(RetailPriceChangeTrackingDataEntityEventHandler),
                            staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DMFDefinitionGroupExecution_onUpdated),
                            '');

                            RetailPriceChangeTracking::writeFullRefreshRecord();
                        }
                    }
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                eventSource.EventWritePriceChangeTrackingError(
                    'Track full refresh when data entity import complete',
                    classStr(RetailPriceChangeTrackingDataEntityEventHandler),
                    staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DMFDefinitionGroupExecution_onUpdated),
                    '');

                if (retryCount < RetryMax)
                {
                    retryCount++;
                    retry;
                }
                else
                {
                    throw Exception::DuplicateKeyException;
                }
            }
            catch(Exception::UpdateConflict)
            {
                eventSource.EventWritePriceChangeTrackingError(
                    'Track full refresh when data entity import complete',
                    classStr(RetailPriceChangeTrackingDataEntityEventHandler),
                    staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DMFDefinitionGroupExecution_onUpdated),
                    '');

                if (retryCount < RetryMax)
                {
                    retryCount++;
                    retry;
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch(ex)
            {
                eventSource.EventWritePriceChangeTrackingError(
                    'Track full refresh when data entity import complete',
                    classStr(RetailPriceChangeTrackingDataEntityEventHandler),
                    staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DMFDefinitionGroupExecution_onUpdated),
                    '');

                throw ex;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRowBasedPriceChangeTrackingSkippedForEntity</Name>
				<Source><![CDATA[
    private static boolean isRowBasedPriceChangeTrackingSkippedForEntity(str _entityName)
    {
        switch (_entityName)
        {
            case tableStr(RetailDiscountEntity):
            case tableStr(RetailDiscountLineEntity):
            case tableStr(RetailDiscountPriceGroupEntity):
            case tableStr(SalesLineDiscountAgreementEntity):
            case tableStr(SalesPriceAgreementEntity):
            case tableStr(PriceDiscPriceCustomerGroupEntity):
            case tableStr(RetailChannelPriceGroupEntity):
            case tableStr(RetailCatalogPriceGroupEntity):
            case tableStr(RetailCatalogEntity):
            case tableStr(RetailCatalogProductEntity):
            case tableStr(EcoResReleasedProductEntity):
            case tableStr(EcoResReleasedProductV2Entity):
            case tableStr(EcoResReleasedDistinctProductCDSEntity):
            case tableStr(EcoResSellableReleasedProductEntity):
            case tableStr(EcoResProductCategoryAssignmentEntity):
            case tableStr(EcoResProductAttributeValueEntity):
            case tableStr(EcoResProductEntity):
            case tableStr(EcoResProductV2Entity):
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRowBasedPriceChangetrackingSkippedForDataSource</Name>
				<Source><![CDATA[
    private static boolean isRowBasedPriceChangetrackingSkippedForDataSource(str _dataSourceName)
    {
        switch (_dataSourceName)
        {
            case dataEntityDataSourceStr(RetailDiscountEntity, RetailPeriodicDiscount):
            case dataEntityDataSourceStr(RetailDiscountLineEntity, RetailPeriodicDiscountLine):
            case dataEntityDataSourceStr(RetailDiscountPriceGroupEntity, RetailDiscountPriceGroup):
            case dataEntityDataSourceStr(SalesLineDiscountAgreementEntity, PriceDiscTable):
            case dataEntityDataSourceStr(SalesPriceAgreementEntity, PriceDiscTable):
            case dataEntityDataSourceStr(PriceDiscPriceCustomerGroupEntity, PriceDiscGroup):
            case dataEntityDataSourceStr(RetailChannelPriceGroupEntity, RetailChannelPriceGroup):
            case dataEntityDataSourceStr(RetailCatalogPriceGroupEntity, RetailCatalogPriceGroup):
            case dataEntityDataSourceStr(RetailCatalogEntity, Catalog):
            case dataEntityDataSourceStr(RetailCatalogProductEntity, Catalog):
            case dataEntityDataSourceStr(EcoResReleasedProductEntity, InventTableModuleSales):
            case dataEntityDataSourceStr(EcoResReleasedProductV2Entity, InventTableModuleSales):
            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventTableModuleSales):
            case dataEntityDataSourceStr(EcoResSellableReleasedProductEntity, InventTableModuleSales):
            case dataEntityDataSourceStr(EcoResProductCategoryAssignmentEntity, EcoResProductCategory):
            case dataEntityDataSourceStr(EcoResProductAttributeValueEntity, EcoResProductCategory):
            case dataEntityDataSourceStr(EcoResProductEntity, EcoResProductCategoryRetail):
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductCategoryRetail):
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceChangeTrackingContext</Name>
				<Source><![CDATA[
    private static void setPriceChangeTrackingContext()
    {
        RetailPriceChangeTrackingContext context = RetailPriceChangeTrackingContext::current();

        if (context == null)
        {
            context = RetailPriceChangeTrackingContext::construct();
        }

        if (context.parmDataImporting() == false)
        {
            context.parmDataImporting(true);
            context.parmIsInDataManagementContext(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>