<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCalcTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute (querystr(BOMCalcTrans)),
    SRSReportParameterAttribute(classstr(BOMCalcTransContract))
]

public class BOMCalcTransDP extends SrsReportDataProviderPreProcessTempDB
{
    private BOMCalcTable queryBOMCalcTable;
    private BOMCalcTrans queryBOMCalcTrans;
    private InventDim queryInventDim;
    private InventTable queryInventTable;

    BOMCalcTransTmp bomCalcTransTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBOMCalcTransTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute(tableStr(BOMCalcTransTmp))
    ]
    public BOMCalcTransTmp getBOMCalcTransTmp()
    {
        select bomCalcTransTmp;
        return bomCalcTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query                   query;
        QueryRun                queryRun;

        query = this.parmQuery();
        queryRun = new QueryRun(query);

        bomCalcTransTmp.setConnection(this.parmUserConnection());
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(BOMCalcTransTmp), true, true, true, false, true, bomCalcTransTmp);
        int recCount = 0;

        while (queryRun.next())
        {
            this.initializeBomCalcTransTmp(queryRun);

            recordInsertList.add(bomCalcTransTmp);
            recCount++;

            if (recCount == 10000)
            {
                recCount = 0;
                recordInsertList.insertDatabase();
                recordInsertList = new RecordInsertList(tableNum(BOMCalcTransTmp), true, true, true, false, true, bomCalcTransTmp);
            }
        }

        if (recCount != 0)
        {
            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBomCalcTransTmp</Name>
				<Source><![CDATA[
    protected void initializeBomCalcTransTmp(QueryRun _queryRun) 
    {
        queryBOMCalcTable = _queryRun.get(tableNum(BOMCalcTable));
        queryBOMCalcTrans = _queryRun.get(tableNum(BOMCalcTrans));
        queryInventDim = _queryRun.get(tableNum(InventDim));
        queryInventTable = _queryRun.get(tableNum(InventTable));

        bomCalcTransTmp.clear();

        bomCalcTransTmp.CostMarkup = queryBOMCalcTable.CostMarkup;
        bomCalcTransTmp.CostPrice = queryBOMCalcTable.CostPrice;
        bomCalcTransTmp.PriceCalcId = queryBOMCalcTable.PriceCalcId;
        bomCalcTransTmp.Qty = queryBOMCalcTable.Qty;
        bomCalcTransTmp.SalesMarkup = queryBOMCalcTable.SalesMarkup;
        bomCalcTransTmp.SalesPrice = queryBOMCalcTable.SalesPrice;
        bomCalcTransTmp.TransDate = queryBOMCalcTable.TransDate;
        bomCalcTransTmp.UnitIdBOMCalcTable = queryBOMCalcTable.UnitId;
        bomCalcTransTmp.ItemId = queryBOMCalcTable.ItemId;
        bomCalcTransTmp.ProfitSet = queryBOMCalcTable.ProfitSet;
        bomCalcTransTmp.CostPricePcsBOMCalcTable = queryBOMCalcTable.costPricePcs();
        bomCalcTransTmp.SalesPricePcsBOMCalcTable = queryBOMCalcTable.salesPricePcs();

        bomCalcTransTmp.CalcType = queryBOMCalcTrans.CalcType;
        bomCalcTransTmp.CostGroupId = queryBOMCalcTrans.CostGroupId;
        bomCalcTransTmp.Resource = queryBOMCalcTrans.Resource;
        bomCalcTransTmp.UnitIdBOMCalcTrans = queryBOMCalcTrans.UnitId;
        bomCalcTransTmp.Level = queryBOMCalcTrans.Level;
        bomCalcTransTmp.Oprid = queryBOMCalcTrans.Oprid;
        bomCalcTransTmp.ConsumptionSum = queryBOMCalcTrans.consumptionSum();
        bomCalcTransTmp.CostPricePcsBOMCalcTrans = queryBOMCalcTrans.costPricePcs();
        bomCalcTransTmp.CostPriceSumBOMCalcTrans = queryBOMCalcTrans.costPriceSum();
        bomCalcTransTmp.DisplayDescription = queryBOMCalcTrans.displayDescription();
        bomCalcTransTmp.SalesPricePcsBOMCalcTrans = queryBOMCalcTrans.salesPricePcs();
        bomCalcTransTmp.SalesPriceSumBOMCalcTrans = queryBOMCalcTrans.salesPriceSum();

        bomCalcTransTmp.InventDimId = queryInventDim.InventDimId;
        bomCalcTransTmp.InventBatchId = queryInventDim.InventBatchId;
        bomCalcTransTmp.WMSLocationId = queryInventDim.WMSLocationId;
        bomCalcTransTmp.WMSPalletId = queryInventDim.WMSPalletId;
        bomCalcTransTmp.InventSerialId = queryInventDim.InventSerialId;
        bomCalcTransTmp.InventLocationId = queryInventDim.InventLocationId;
        bomCalcTransTmp.ConfigId = queryInventDim.ConfigId;
        bomCalcTransTmp.InventSizeId = queryInventDim.InventSizeId;
        bomCalcTransTmp.InventColorId = queryInventDim.InventColorId;
        bomCalcTransTmp.InventSiteId = queryInventDim.InventSiteId;
        bomCalcTransTmp.InventGtdId_RU = queryInventDim.InventGtdId_RU;
        bomCalcTransTmp.InventProfileId_RU = queryInventDim.InventProfileId_RU;
        bomCalcTransTmp.InventOwnerId_RU = queryInventDim.InventOwnerId_RU;
        bomCalcTransTmp.InventStyleId = queryInventDim.InventStyleId;
        bomCalcTransTmp.LicensePlateId = queryInventDim.LicensePlateId;
        bomCalcTransTmp.InventStatusId = queryInventDim.InventStatusId;

        bomCalcTransTmp.PmfProductType = queryInventTable.PmfProductType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>