<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustStatisticsUS</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustStatisticsUS
{
    AmountMST balanceAge[,10];
    Counter numOfAge;

    TransDate s_InvoiceDate;
    InvoiceId s_InvoiceId;
    Amount s_InvoiceTotal;

    TransDate s_PaymDate;
    DocumentNum s_PaymNum;
    Amount s_PaymTotal;

    TransDate s_CollectionLetterDate;
    CollectionLetterNum s_CollectionLetterNum;
    Amount s_CollectionLetterTotal;

    TransDate s_InterestDate;
    InterestNote s_InterestNum;
    Amount s_InterestTotal;

    Amount highestBalance;
    Amount invoiceAverage;

    AmountMST balance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the balance and the highest balance.
    /// </summary>
    /// <param name = "_custTrans">
    /// The customer transaction table record.
    /// </param>
    protected void updateBalance(CustTrans _custTrans)
    {
        balance += _custTrans.AmountMST;
 
        highestBalance = max(highestBalance, balance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceVal</Name>
				<Source><![CDATA[
    private void setInvoiceVal(TransDate _s_InvoiceDate, InvoiceId _s_InvoiceId, Amount _s_InvoiceTotal)
    {
        s_InvoiceDate = _s_InvoiceDate;
        s_InvoiceId = _s_InvoiceId;
        s_InvoiceTotal = _s_InvoiceTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymVal</Name>
				<Source><![CDATA[
    private void setPaymVal(TransDate _s_PaymDate, DocumentNum _s_PaymNum, Amount _s_PaymTotal)
    {
        s_PaymDate = _s_PaymDate;
        s_PaymNum = _s_PaymNum;
        s_PaymTotal = _s_PaymTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCollectionLetterVal</Name>
				<Source><![CDATA[
    private void setCollectionLetterVal(TransDate _s_CollectionLetterDate, CollectionLetterNum _s_CollectionLetterNum, Amount _s_CollectionLetterTotal)
    {
        s_CollectionLetterDate = _s_CollectionLetterDate;
        s_CollectionLetterNum = _s_CollectionLetterNum;
        s_CollectionLetterTotal = _s_CollectionLetterTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterestVal</Name>
				<Source><![CDATA[
    private void setInterestVal(TransDate _s_InterestDate, InterestNote _s_InterestNum, Amount _s_InterestTotal)
    {
        s_InterestDate = _s_InterestDate;
        s_InterestNum = _s_InterestNum;
        s_InterestTotal = _s_InterestTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and update statistics value.
    /// </summary>
    /// <param name="custTable">
    /// The <c>CustTable</c> table.
    /// </param>
    /// <param name="_invoiceCustomer">
    /// If Yes, calculate statistics based on customer's invoice account; otherwise, pull from the customer's order account number.
    /// </param>
    void calcStatistics(CustTable custTable, NoYes invoiceCustomer = NoYes::Yes)
    {
        CustTrans custTrans;
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        CustCollectionLetterJour custCollectionLetterJour;
        CustInterestJour custInterestJour;

        this.setInvoiceVal(dateNull(), '', 0);

        this.setPaymVal(dateNull(), '', 0);

        this.setCollectionLetterVal(dateNull(), '', 0);

        this.setInterestVal(dateNull(), '', 0);

        highestBalance = 0;
        invoiceAverage = 0;

        custInvoiceJour = custTable.lastInvoiceJournal(invoiceCustomer);

        if (custInvoiceJour)
        {
            this.setInvoiceVal(custInvoiceJour.InvoiceDate, custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceAmountMST);
        }

        projInvoiceJour = custTable.lastProjInvoice();

        if (projInvoiceJour && (!s_InvoiceDate || projInvoiceJour.InvoiceDate> s_InvoiceDate))
        {
            this.setInvoiceVal(projInvoiceJour.InvoiceDate, projInvoiceJour.ProjInvoiceId, projInvoiceJour.amountMST(projInvoiceJour.InvoiceAmount));
        }

        custTrans = custTable.lastPayment();

        if (custTrans)
        {
            this.setPaymVal(custTrans.TransDate, custTrans.DocumentNum, -custTrans.AmountMST);
        }

        custCollectionLetterJour = custTable.lastCollectionLetterJour();

        if (custCollectionLetterJour)
        {
            this.setCollectionLetterVal(custCollectionLetterJour.CollectionLetterDate, custCollectionLetterJour.CollectionLetterNum, custCollectionLetterJour.sumAmount());
        }

        custInterestJour = custTable.lastInterestJournal();

        if (custInterestJour)
        {
            this.setInterestVal(custInterestJour.Updated, custInterestJour.InterestNote, custInterestJour.sumInterestAmountFee());
        }

        balance = 0;
        while select sum(AmountMST), TransDate from custTrans
        group by TransDate
        where custTrans.AccountNum == custTable.AccountNum
        {
            this.updateBalance(custTrans);
        }

        invoiceAverage = this.calculateInvoiceAverage(custTable.AccountNum, invoiceCustomer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceAverage</Name>
				<Source><![CDATA[
    private Amount calcInvoiceAverage(int _numOfInvoices, Amount _sumOfCustInvoiceJour, Amount _sumOfProjInvoiceJour)
    {
        return _numOfInvoices ? (_sumOfCustInvoiceJour + _sumOfProjInvoiceJour) / _numOfInvoices : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceAverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice average.
    /// </summary>
    /// <param name="_accountNum">
    /// The customer account number.
    /// </param>
    /// <param name="_invoiceCustomer">
    /// If Yes, calculate statistics based on customer's invoice account; otherwise, pull from the customer's order account number.
    /// </param>
    /// <returns>
    /// Invoice average.
    /// </returns>
    internal Amount calculateInvoiceAverage(CustAccount _accountNum, NoYes _invoiceCustomer)
    {
        int numOfCustInvoiceJour = CustInvoiceJour::calcNumOfCustInvoiceJour(_accountNum, _invoiceCustomer);

        Amount sumOfCustInvoiceJour;

        if (numOfCustInvoiceJour)
        {
            sumOfCustInvoiceJour = CustInvoiceJour::calcSumOfCustInvoiceJour(_accountNum, _invoiceCustomer);
        }

        int numOfProjInvoiceJour;
        Amount sumOfProjInvoiceJour;

        if (Project::Enabled())
        {
            numOfProjInvoiceJour = ProjInvoiceJour::calcNumOfProjInvoiceJour(_accountNum);

            if (numOfProjInvoiceJour)
            {
                // Get the sum of all journals where transaction is in accounting currency
                sumOfProjInvoiceJour = ProjInvoiceJour::calculateInvoiceSumInMSTForProjectInvoicesInMST(_accountNum);

                // Add in the journals where transaction is NOT in accounting currency, converted to accounting currency
                sumOfProjInvoiceJour += ProjInvoiceJour::calculateInvoiceSumInMSTForProjectInvoicesNotInMST(_accountNum);
            }
        }

        int numOfInvoices = numOfCustInvoiceJour + numOfProjInvoiceJour;

        return this.calcInvoiceAverage(numOfInvoices, sumOfCustInvoiceJour, sumOfProjInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestBalance</Name>
				<Source><![CDATA[
    Amount highestBalance()
    {
        return highestBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAverage</Name>
				<Source><![CDATA[
    Amount invoiceAverage()
    {
        return invoiceAverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastCollectionLetterDate</Name>
				<Source><![CDATA[
    TransDate lastCollectionLetterDate()
    {
        return s_CollectionLetterDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastCollectionLetterNum</Name>
				<Source><![CDATA[
    CollectionLetterNum lastCollectionLetterNum()
    {
        return s_CollectionLetterNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastCollectionLetterTotal</Name>
				<Source><![CDATA[
    Amount lastCollectionLetterTotal()
    {
        return s_CollectionLetterTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInterestDate</Name>
				<Source><![CDATA[
    TransDate lastInterestDate()
    {
        return s_InterestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInterestNote</Name>
				<Source><![CDATA[
    InterestNote lastInterestNote()
    {
        return s_InterestNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInterestTotal</Name>
				<Source><![CDATA[
    Amount lastInterestTotal()
    {
        return s_InterestTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceDate</Name>
				<Source><![CDATA[
    TransDate lastInvoiceDate()
    {
        return s_InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceId</Name>
				<Source><![CDATA[
    InvoiceId lastInvoiceId()
    {
        return s_InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceTotal</Name>
				<Source><![CDATA[
    Amount lastInvoiceTotal()
    {
        return s_InvoiceTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentDate</Name>
				<Source><![CDATA[
    TransDate lastPaymentDate()
    {
        return s_PaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentNum</Name>
				<Source><![CDATA[
    DocumentNum lastPaymentNum()
    {
        return s_PaymNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentTotal</Name>
				<Source><![CDATA[
    Amount lastPaymentTotal()
    {
        return s_PaymTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpStatPerVal</Name>
				<Source><![CDATA[
    private static void initTmpStatPerVal(TmpStatPer _tmpStatPer)
    {
        _tmpStatPer.InvoiceQty = 0;
        _tmpStatPer.InvoiceTotal = 0;
        _tmpStatPer.PaymQty = 0;
        _tmpStatPer.PaymTotal = 0;
        _tmpStatPer.CollectionLetterQty = 0;
        _tmpStatPer.CollectionLetterTotal = 0;
        _tmpStatPer.InterestQty = 0;
        _tmpStatPer.InterestTotal = 0;
        _tmpStatPer.NotDonePaymentQty = 0;
        _tmpStatPer.NotDonePaymentTotal = 0;
        _tmpStatPer.DiscAmountUsed = 0;
        _tmpStatPer.AveragePaymDays = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    static void calcTotals(CustTable custTable,
        NoYes invoiceCustomer,
        TmpStatPer tmpStatPer)
    {
        CustTrans custTrans;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        LedgerEntry ledgerEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        BankTransactionType bankTransactionType;
        CustTrans custOffsetTrans;
        CustSettlement custSettlement;
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        CustCollectionLetterJour custCollectionLetterJour;
        CustInterestJour custInterestJour;
        Counter numOfInvoices;
        CustTransDetails custTransDetails = new CustTransDetails(custTrans);

        CustStatisticsUS::initTmpStatPerVal(tmpStatPer);

        //Ensure RLS is used
        custInvoiceJour.recordLevelSecurity(true);
        projInvoiceJour.recordLevelSecurity(true);
        custTrans.recordLevelSecurity(true);
        generalJournalEntry.recordLevelSecurity(true);
        ledgerEntry.recordLevelSecurity(true);
        generalJournalAccountEntry.recordLevelSecurity(true);
        custCollectionLetterJour.recordLevelSecurity(true);
        custInterestJour.recordLevelSecurity(true);
        subledgerVoucherGeneralJournalEntry.recordLevelSecurity(true);

        select sum(InvoiceAmountMST), count(RecId) from custInvoiceJour
        where ((custInvoiceJour.InvoiceAccount == custTable.AccountNum && invoiceCustomer) ||
              ( custInvoiceJour.OrderAccount == custTable.AccountNum && !invoiceCustomer)) &&
                custInvoiceJour.InvoiceDate >= tmpStatPer.StartDate &&
                custInvoiceJour.InvoiceDate <= tmpStatPer.EndDate;

        tmpStatPer.InvoiceQty = any2int(custInvoiceJour.RecId);
        tmpStatPer.InvoiceTotal = custInvoiceJour.InvoiceAmountMST;

        while select projInvoiceJour
        where projInvoiceJour.InvoiceAccount == custTable.AccountNum &&
              projInvoiceJour.InvoiceDate >= tmpStatPer.StartDate &&
              projInvoiceJour.InvoiceDate <= tmpStatPer.EndDate
        {
            tmpStatPer.InvoiceQty ++;
            tmpStatPer.InvoiceTotal += projInvoiceJour.amountMST(projInvoiceJour.InvoiceAmount);
        }

        numOfInvoices = 0;

        RecId custTransPrevRecId;

        while select RecId, AmountMST, TransDate from custTrans
            order by RecId
            where custTrans.AccountNum == custTable.AccountNum
                && custTrans.TransDate >= tmpStatPer.StartDate
                && custTrans.TransDate <= tmpStatPer.EndDate
                && custTrans.Invoice == ''
                && custTrans.AmountCur < 0
                && custTrans.CancelledPayment == NoYes::No
            join RecId from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == custTrans.Voucher
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == CompanyInfo::find().DataArea
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == custTrans.TransDate
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            join RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && (generalJournalAccountEntry.PostingType == LedgerPostingType::CustPayment
                        || generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance)
                    && (generalJournalAccountEntry.PaymentReference
                        || custTrans.TransType == LedgerTransType::Payment)
        {
            if (custTrans.RecId != custTransPrevRecId)
            {
                tmpStatPer.PaymQty ++;
                tmpStatPer.PaymTotal += -custTrans.AmountMST;
                custTransPrevRecId = custTrans.RecId;

                while select OffsetAccountNum, OffsetTransVoucher, OffsetCompany, TransRecId from custSettlement
                    where custSettlement.TransRecId == custTrans.RecId &&
                            custSettlement.OffsetTransVoucher &&
                            custSettlement.CanBeReversed == NoYes::Yes
                {
                    while select crossCompany TransDate from custOffsetTrans
                        where custOffsetTrans.AccountNum == custSettlement.OffsetAccountNum &&
                                custOffsetTrans.Voucher == custSettlement.OffsetTransVoucher &&
                                custOffsetTrans.DataAreaId == custSettlement.OffsetCompany &&
                                custOffsetTrans.Invoice
                    {
                        numOfInvoices ++;
                        tmpStatPer.AveragePaymDays += (custTrans.TransDate- custOffsetTrans.TransDate);
                    }
                }
            }
        }

        if (numOfInvoices > 0)
        {
            tmpStatPer.AveragePaymDays = real2int(tmpStatPer.AveragePaymDays / numOfInvoices);
        }

        while select AmountCur, AmountMST, RecId from custTrans
            where custTrans.AccountNum == custTable.AccountNum &&
                  custTrans.TransDate >= tmpStatPer.StartDate &&
                  custTrans.TransDate <= tmpStatPer.EndDate &&
                  custTrans.AmountCur > 0
        {
            if (custTrans.AmountCur)
            {
                custTransDetails.setCustVendTrans(custTrans);
                if (custTransDetails.utilizedCashDisc())
                {
                    tmpStatPer.DiscAmountUsed += custTrans.AmountMST * custTransDetails.utilizedCashDisc() / custTrans.AmountCur;
                }
            }
        }

        while select custCollectionLetterJour
            where custCollectionLetterJour.AccountNum == custTable.AccountNum &&
                  custCollectionLetterJour.CollectionLetterDate >= tmpStatPer.StartDate &&
                  custCollectionLetterJour.CollectionLetterDate <= tmpStatPer.EndDate &&
                  custCollectionLetterJour.Canceled == dateNull()
        {
            tmpStatPer.CollectionLetterQty ++;

            tmpStatPer.CollectionLetterTotal += custCollectionLetterJour.sumAmount();
        }

        while select custInterestJour
            where custInterestJour.AccountNum == custTable.AccountNum &&
                  custInterestJour.Updated >= tmpStatPer.StartDate &&
                  custInterestJour.Updated <= tmpStatPer.EndDate
        {
            tmpStatPer.InterestQty ++;
            tmpStatPer.InterestTotal += custInterestJour.sumInterestAmountFee();
        }

        bankTransactionType = BankParameters::find().nsfTransactionType;

        select sum(AmountMST), count(RecId) from custTrans
            where custTrans.AccountNum == custTable.AccountNum
                && custTrans.TransDate >= tmpStatPer.StartDate
                && custTrans.TransDate <= tmpStatPer.EndDate
                && custTrans.CancelledPayment == NoYes::Yes
                && custTrans.Invoice == ''
                && custTrans.AmountCur < 0
            join RecId from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == custTrans.Voucher
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == CompanyInfo::find().DataArea
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == custTrans.TransDate
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            join RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && (generalJournalAccountEntry.PostingType == LedgerPostingType::CustPayment
                        || generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
                        && (generalJournalAccountEntry.PaymentReference
                        || custTrans.TransType == LedgerTransType::Payment));

        tmpStatPer.NotDonePaymentQty = any2int(custTrans.RecId);
        tmpStatPer.NotDonePaymentTotal = -custTrans.AmountMST;

        tmpStatPer.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CalculateStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the customer statistics and returns a container of the statistics results.
    /// </summary>
    /// <param name="linkedCustTable">
    ///    The customer for which to calculate the statistics.
    /// </param>
    /// <returns>
    ///    Statistics values.
    /// </returns>
    /// <remarks>
    ///    ('lastInvoiceDate', 'lastInvoiceTotal', 'lastPaymentDate', 'lastPaymentTotal', 'highestBalance',
    ///    'invoiceAverage')
    /// </remarks>
    public static Container CalculateStatistics(CustTable linkedCustTable)
    {
        CustStatisticsUS custStatistics;
        Container CustStatisticsContainer;
        custStatistics = new CustStatisticsUS();
        custStatistics.calcStatistics(linkedCustTable);

        CustStatisticsContainer = [custStatistics.lastInvoiceDate(), custStatistics.lastInvoiceTotal(), custStatistics.lastPaymentDate(), custStatistics.lastPaymentTotal(), custStatistics.highestBalance(), custStatistics.invoiceAverage()];

        return CustStatisticsContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>