<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTransType_Output</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WmsOrderTransType_Output extends WMSOrderTransType
{
    boolean     skipOverDeliveryCheck;
    boolean     pdsIsCWFullVisibilityItem;                  // Cache if the related item is a full visibility catch weight item
    boolean     pdsIsCWFullVisibilityItemInitialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a picking line.
    /// </summary>
    /// <param name="_checkRoute">
    /// A Boolean value that indicates whether to verify that the related picking route should be ended;
    /// optional.
    /// </param>
    /// <remarks>
    ///  The cancellation consists of the following steps:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Removes the child reference on inventory transactions related to the canceled
    ///   quantity.</description>
    ///   </item>
    ///   <item>
    ///   <description>Removes over-delivered inventory transactions by updating remaining quantity on the
    ///   parent.</description>
    ///   </item>
    ///   <item>
    ///   <description>Unreserves the canceled quantity.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Changes the status on the <c>WMSOrderTrans</c> record that is being canceled.
    ///    </description>
    ///   </item>
    ///   <item>
    ///   <description>Verifies that the related picking route should be ended.</description>
    ///   </item>
    ///   <item>
    ///   <description>Finishes the inventory order if there is no quantity left after the
    ///   cancellation.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public void cancel(boolean _checkRoute = true)
    {
        InventMovement              inventMovement;
        InventMovement              inventMovementParent;
        InventMovement              movementParentTransferReceipt;
        InventUpd_ChildReference    childReference;
        InventQty                   qtyOverDelivered;
        InventQty                   maxAcceptableQtyOverDelivered;
        InventQty                   minQtyWmsOrderTrans;
        InventQty                   qtyChangeChildTrans;
        InventQty                   qtyRemaingChangeParent;
        InventQty                   qtyUnit;
        InventQty                   qtyCancel;
        PdsCWInventQty              pdsCWQtyOverDelivered;
        PdsCWInventQty              pdsCWQtyRemaingChangeParent;
        PdsCWInventQty              pdsCWQtyCancel;

        wmsOrder = this.wmsOrder();

        inventMovement       = wmsOrderTrans.inventMovement();
        inventMovementParent = inventMovement.parentMovement();

        qtyChangeChildTrans  = wmsOrderTrans.Qty;
        qtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(wmsOrder.ItemId,
                                                                                        wmsOrder.InventDimId,
                                                                                        qtyChangeChildTrans,
                                                                                        inventMovementParent.inventTable().inventUnitId(),
                                                                                        inventMovementParent.transUnitId(),
                                                                                        NoYes::Yes);

        // Remove child reference on inventory transactions related to cancelled quantity
        childReference = InventUpd_ChildReference::newParameters(inventMovement, qtyChangeChildTrans,qtyUnit, false, wmsOrderTrans.InventDimId, wmsOrderTrans.PdsCWQty);

        if (wmsOrderTrans.isReserved)
        {
            childReference.parmExcludeOnOrder(true);
        }

        childReference.updateNow();

        // Remove over delivered inventory transactions by updating remaining quantity on parent
        if (WMSOrderUnReserveQtyWhenCancelFlight::instance().isEnabled() && !inventMovement.pdsCWItem())
        {
            qtyOverDelivered = wmsOrder.calcQtyOverdelivered();
        }
        else
        {
            qtyOverDelivered = wmsOrder.qtyOverdelivered();
        }

        if (inventMovement.pdsCWItem())
        {
            pdsCWQtyOverDelivered = wmsOrder.pdsCWQtyOverdelivered();
            // Over delivered quantity can't be larger than max acceptable overdelivery quantity of WMSOrderTrans.
            minQtyWmsOrderTrans = PdsCatchWeight::minInventQty(wmsOrder.ItemId, wmsOrderTrans.PdsCWQty);
            if (wmsOrderTrans.Qty > minQtyWmsOrderTrans)
            {
                maxAcceptableQtyOverDelivered = wmsOrderTrans.Qty - minQtyWmsOrderTrans;
            }
            else
            {
                maxAcceptableQtyOverDelivered = 0;
            }

            if (qtyOverDelivered > maxAcceptableQtyOverDelivered)
            {
                qtyOverDelivered = maxAcceptableQtyOverDelivered;
            }
        }

        if (qtyOverDelivered > 0 || pdsCWQtyOverDelivered > 0)
        {
            qtyRemaingChangeParent = (qtyOverDelivered > wmsOrderTrans.Qty) ? wmsOrderTrans.Qty : qtyOverDelivered;
            pdsCWQtyRemaingChangeParent = (pdsCWQtyOverDelivered > wmsOrderTrans.PdsCWQty) ? wmsOrderTrans.PdsCWQty : pdsCWQtyOverDelivered;

            if (!inventMovementParent.mustBeRemainControlled())
            {
                throw(error(strFmt("@SYS54471", qtyRemaingChangeParent)));
            }

            qtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(wmsOrder.ItemId,
                                                                                            wmsOrder.InventDimId,
                                                                                            qtyRemaingChangeParent,
                                                                                            inventMovementParent.inventTable().inventUnitId(),
                                                                                            inventMovementParent.transUnitId(),
                                                                                            NoYes::Yes);

            inventMovementParent.addRemainPhysical(qtyRemaingChangeParent);
            inventMovementParent.addRemainPhysicalUnit(qtyUnit);
            inventMovementParent.pdsCWAddRemainPhysical(pdsCWQtyRemaingChangeParent);
            if (inventMovementParent.isTransfer())
            {
                movementParentTransferReceipt = inventMovementParent.newMovement_TransferReceipt();
                movementParentTransferReceipt.addRemainPhysical(-qtyRemaingChangeParent);
                movementParentTransferReceipt.addRemainPhysicalUnit(-qtyUnit);
                movementParentTransferReceipt.pdsCWAddRemainPhysical(-pdsCWQtyRemaingChangeParent);
            }
            inventMovementParent.updateBuffer(false);
        }

        // Un-reserve cancelled quantity
        if (qtyOverDelivered < wmsOrderTrans.Qty)
        {
            qtyCancel = wmsOrderTrans.Qty - qtyOverDelivered;
            pdsCWQtyCancel = wmsOrderTrans.PdsCWQty - pdsCWQtyOverDelivered;

            if (wmsOrderTrans.IsReserved)
            {
                this.unReserve(false, true, qtyCancel, true, pdsCWQtyCancel);
            }
            else
            {
                this.updateInventTransDimToParentDim(-qtyCancel, true, -pdsCWQtyCancel);
            }
        }
        else
        {
            wmsOrderTrans.IsReserved = NoYes::No;
        }

        wmsOrderTrans.changeStatus(WMSExpeditionStatus::Cancelled);

        if (_checkRoute)
        {
            this.checkFinishRoute(wmsOrderTrans.wmsPickingRoute(true));
        }

        wmsOrder = wmsOrderTrans.wmsOrder(true);
        //Finish inventory order if no quantity left after cancelation.
        if (wmsOrder.Qty == 0 && wmsOrder.QtyNoShipment == 0
            && (!inventMovement.pdsCWItem() || (inventMovement.pdsCWItem() && wmsOrder.PdsCWQty == 0 && wmsOrder.PdsCWQtyNoShipment == 0)))
        {
            wmsOrder.finish();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSwitchReservations</Name>
				<Source><![CDATA[
    protected boolean canSwitchReservations(WMSOrderTrans _otherTrans)
    {
        InventDim       inventDimThis       = wmsOrderTrans.inventDim();
        InventDim       inventDim_Other     = _otherTrans.inventDim();

        if (wmsOrderTrans.ItemId != _otherTrans.ItemId)
        {
            return false;
        }

        if (!InventDim::isInventDimEqualProductDim(EcoResProductDimGroupSetup::newItemId(wmsOrderTrans.ItemId), inventDimThis, inventDim_Other))
        {
            return false;
        }

        if (!InventDim::isInventDimFixedEqual(inventDimThis, inventDim_Other, wmsOrderTrans.InventDimFixed, false))
        {
            return false;
        }

        if (!InventDim::isInventDimFixedEqual(inventDimThis, inventDim_Other, _otherTrans.InventDimFixed, false))
        {
            return false;
        }

        if (!wmsOrderTrans.IsReserved && _otherTrans.wmsShipment().RequireAllReserved)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinishInTransportLine</Name>
				<Source><![CDATA[
    protected boolean checkFinishInTransportLine(InventDim _inventDimToNew = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinishPickingLine</Name>
				<Source><![CDATA[
    public void checkFinishPickingLine(
        InventDim       _inventDimPicked,
        InventQty       _pickedQty,
        PdsCWInventQty  _pdsCWPickedQty = 0,
        boolean         _lockActiveDimensions = false
        )
    {
        InventDim               inventDimReserved = wmsOrderTrans.inventDim();
        InventMovement          inventMovement = this.inventMovement();
        InventDimParm           inventDimParmFrom;
        InventUpd_Picked        inventUpd_Picked;
        boolean                 mustBeReserved = false; // reservation was only mandatory for the obsoleted consolidated picking

        if (wmsOrderTrans.Qty > _pickedQty)
        {
            wmsOrderTrans.split(wmsOrderTrans.Qty - _pickedQty, wmsOrderTrans.PdsCWQty - _pdsCWPickedQty);
        }

        this.updateReservations(_inventDimPicked, inventDimReserved, inventMovement, mustBeReserved, _lockActiveDimensions);
        inventDimParmFrom.initFromInventDim(_inventDimPicked);

        inventUpd_Picked = InventUpd_Picked::newParameters(inventMovement,
                            _inventDimPicked, inventDimParmFrom,
                            inventDimReserved, inventDimParmFrom,
                            -_pickedQty, wmsOrderTrans.RouteId,
                            -_pdsCWPickedQty);

        if (!inventUpd_Picked.check())
        {
            throw(error("@SYS54637"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseInventoryTransactions</Name>
				<Source><![CDATA[
    public void releaseInventoryTransactions()
    {
        if (wmsOrderTrans.IsReserved)
        {
            this.unReserve();
        }
        else
        {
            const boolean UseParentMovement = false;
            this.updateInventTransDimToParentDim(-wmsOrderTrans.Qty, UseParentMovement, -wmsOrderTrans.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishInTransportLine</Name>
				<Source><![CDATA[
    protected void finishInTransportLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishOutTransportLine</Name>
				<Source><![CDATA[
    protected void finishOutTransportLine(WMSPalletId _toPalletId)
    {
        InventDim               inventDimFrom   = wmsOrderTrans.inventDim();
        // Outbound transports are picked on the from location
        this.pickItems(inventDimFrom, inventDimFrom, wmsOrderTrans.Qty, false, _toPalletId, wmsOrderTrans.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishPickingLine</Name>
				<Source><![CDATA[
    public void finishPickingLine(
        WMSPickPalletId     _wmsPickPalletId,
        InventDim           _inventDimPicked,
        HcmWorkerRecId      _worker,
        WMSExpeditionTime   _time,
        boolean             _startRoute = true,
        boolean             _checkRoute = true)
    {
        InventDim               inventDimReserved,inventDimOutBound;
        WMSPickingRoute         wmsPickingRoute;
        InventMovement          inventMovement;
        NoYes                   useEmptyPalletLocation = NoYes::No;

        if (!this.doesStatusAllowPicking())
        {
            throw error(strFmt("@SYS329320",wmsOrderTrans.InventTransId,wmsOrderTrans.ExpeditionStatus));
        }

        inventDimReserved   = wmsOrderTrans.inventDim();
        inventMovement      = this.inventMovement();
        inventDimOutBound   = wmsOrderTrans.toInventDim();

        if (_startRoute || _checkRoute)
        {
            wmsPickingRoute = wmsOrderTrans.wmsPickingRoute(true);
        }

        if (!this.pdsValidateCatchWeight())
        {
            //already have the info log message!
            throw Exception::Error;
        }

        if (_startRoute && wmsPickingRoute.ExpeditionStatus == WMSExpeditionStatus::Activated)
        {
            wmsPickingRoute.start(_worker);
        }

        wmsOrderTrans.OperatorWorker     = _worker;
        wmsOrderTrans.ExpeditionTime     = _time;

        if (wmsOrderTrans.Qty)
        {
            this.updateReservations(_inventDimPicked, inventDimReserved, inventMovement,false);

            this.pickItems(_inventDimPicked, inventDimReserved, wmsOrderTrans.Qty,useEmptyPalletLocation, _wmsPickPalletId, wmsOrderTrans.PdsCWQty);

            wmsOrderTrans.changeStatus(WMSExpeditionStatus::Picked);
        }
        else
        {
            this.cancel(false);
        }

        if (_checkRoute)
        {
            this.checkFinishRoute(wmsPickingRoute);
        }

        // if line is canceled, nothing has been removed from inventory so a refill will not be triggered
        if (wmsOrderTrans.Qty)
        {
            this.activateRefillTransport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishRefillTransportLine</Name>
				<Source><![CDATA[
    protected void finishRefillTransportLine()
    {
        // Refill transports are not of type Output
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipOverDeliveryCheck</Name>
				<Source><![CDATA[
    public boolean parmSkipOverDeliveryCheck(boolean _skipOverDeliveryCheck = skipOverDeliveryCheck)
    {
        skipOverDeliveryCheck = _skipOverDeliveryCheck;

        return skipOverDeliveryCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddQtyToWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the quantity on the <c>WMSOrder</c> record due to changes in catch weight reservation quantity.
    /// </summary>
    /// <param name="_wmsOrder">
    ///    The output order to update.
    /// </param>
    /// <param name="_extraQty">
    ///    The quantity to add.
    /// </param>

    protected void pdsCWAddQtyToWMSOrder(
        WMSOrder    _wmsOrder,
        InventQty   _extraQty)
    {
        _wmsOrder.Qty += _extraQty;
        _wmsOrder.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsCWFullVisibilityItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the item used is a full visibility item.
    /// </summary>
    /// <returns>
    ///    true if the item used is a full visibility item; otherwise, false.
    /// </returns>
    protected boolean pdsIsCWFullVisibilityItem()
    {
        if (!pdsIsCWFullVisibilityItemInitialized && wmsOrderTrans.ItemId)
        {
            pdsIsCWFullVisibilityItem = PdsGlobal::pdsIsCWFullVisItem(wmsOrderTrans.ItemId);
            pdsIsCWFullVisibilityItemInitialized = true;
        }
        return pdsIsCWFullVisibilityItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickItems</Name>
				<Source><![CDATA[
    public void pickItems(
        InventDim       _inventDimFrom,
        InventDim       _inventDimReserved,
        InventQty       _qty,
        boolean         _checkEmptyPallet,
        str             _toPalletId,
        PdsCWInventQty  _pdsCWQty = 0)
    {
        
        InventDimParm       inventDimParm;
        InventDim           inventDimTo; 

        setPrefix(strFmt("@SYS51033", wmsOrderTrans.ItemId, _inventDimReserved.preFix()));
        inventDimParm.setAllInventDim();
        wmsOrderTrans.InventDimId = _inventDimFrom.InventDimId;

        inventDimTo                 = wmsOrderTrans.toInventDim();
        wmsOrderTrans.ToInventDimId = InventDim::findOrCreate(inventDimTo).InventDimId;

        InventMovement inventMovement  = this.inventMovement();
        if (skipOverDeliveryCheck && inventMovement is InventMov_WMSOrder)
        {
            InventMov_WMSOrder inventMov_WMSOrder = inventMovement as InventMov_WMSOrder;
            inventMov_WMSOrder.parmSkipOverDeliveryCheck(true);
        }

        InventUpd_Picked inventUpd_Picked = InventUpd_Picked::newParameters(inventMovement,
                            _inventDimFrom, inventDimParm,
                            _inventDimReserved, inventDimParm,
                            -_qty,wmsOrderTrans.RouteId,
                            -_pdsCWQty);

        inventUpd_Picked.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsReservedFromTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the reserved status based on <c>InventTrans</c> for this order.
    /// </summary>
    /// <param name="_inventDimNew">
    ///     <c>InventDim</c> to check against.
    /// </param>
    protected void setIsReservedFromTransactions(
        InventDim           _inventDimNew)
    {
        WMSOrderTrans               otherLines;
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;

        // select quantity on other lines for the same output order
        select sum(Qty) from otherLines
            where otherLines.OrderId        == wmsOrderTrans.OrderId        // Same output order
              &&  otherLines.InventDimId    == _inventDimNew.InventDimId    // Same dimensions
              &&  otherLines.RecId          != wmsOrderTrans.RecId          // Do not include this line
              &&  otherLines.IsReserved;

        // Subtract quantity for other lines and see if there is still something left reserved for this line
        while select RecId, Qty, StatusIssue, InventDimId from inventTrans
            order by StatusIssue
            join TableId from inventTransOrigin
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            && inventTransOrigin.InventTransId == wmsOrderTrans.InventTransId
            && inventTrans.InventDimId == _inventDimNew.InventDimId
            && inventTrans.TransChildType == InventTransChildType::WMSOrder
            && inventTrans.TransChildRefId == wmsOrderTrans.OrderId
            && inventTrans.StatusReceipt == StatusReceipt::None
            && (inventTrans.StatusIssue == StatusIssue::ReservPhysical
            || inventTrans.StatusIssue == StatusIssue::ReservOrdered)
        {
            if (otherLines.Qty > 0)
            { // Assume that the first transactions are for the other lines
                if (otherLines.Qty >= -inventTrans.Qty)
                {
                    otherLines.Qty += inventTrans.Qty;
                }
                else
                {
                    break;      // it has remaining quantity
                }
            }
            else
            { // Not needed for other lines
                break;
            }
        }

        if (inventTrans.RecId)
        {
            wmsOrderTrans.IsReserved = inventTrans.isWMSReserved();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchReservationWithExisting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches reservations between two specified <c>WMSOrderTrans</c> records.
    /// </summary>
    /// <param name="_inventDimNew">
    /// The new inventory dimensions that are assigned to the current transaction.
    /// </param>
    /// <param name="_inventDimOld">
    /// The inventory dimensions that were originally assigned to the current transaction.
    /// </param>
    /// <param name="_inventMovement">
    /// The inventory movement that is related to the current transaction.
    /// </param>
    /// <param name="_existingReservation">
    /// The <c>WMSOrderTrans</c> record that represents the other transaction in the switch.
    /// </param>
    protected void switchReservationWithExisting(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventMovement      _inventMovement,
        WMSOrderTrans       _existingReservation)
    {
        boolean                     wasWMSOrderTransReserved = wmsOrderTrans.IsReserved;
        InventDimParm               inventDimParmFrom;
        WMSOrderTransType           existingReservationsWMSOrderTransType;
        InventUpd_ChangeDimension   inventUpd_ChangeDimension;
        InventQty                   extraQty = _existingReservation.Qty - wmsOrderTrans.Qty; // different catch weight on existing

        inventDimParmFrom.initFromInventDim(_inventDimOld);

        // Remove reservation on the existing transaction, so items become available for this transaction.
        existingReservationsWMSOrderTransType   = _existingReservation.wmsOrderTransType();
        existingReservationsWMSOrderTransType.unReserve(true, false);

        if (extraQty != 0 && _inventMovement.pdsCWItem())
        { // adjust inventory quantities for catch weight items with different reserved quantity
            this.updateReservationsUpdateCWInvent(_inventMovement, -extraQty);
            wmsOrderTrans.Qty += extraQty;
            this.pdsCWAddQtyToWMSOrder(this.wmsOrder(true), extraQty);
        }
        _existingReservation.doUpdate();

        //change dimensions on the inventTrans from the old to the new which was just un-reserved from the existing reservation
        inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(_inventMovement, _inventDimOld, inventDimParmFrom,
            _inventDimNew, -wmsOrderTrans.Qty, -wmsOrderTrans.PdsCWQty);
        inventUpd_ChangeDimension.parmAllowReserveReduction(true);
        inventUpd_ChangeDimension.updateNow();

        this.updateReservationsReserveExisting(_existingReservation, _inventDimNew, _inventDimOld, wasWMSOrderTransReserved, _inventMovement.pdsCWItem());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPick</Name>
				<Source><![CDATA[
    public void unPick(
        InventQty       _unPickQty,
        InventDim       _inventDimUnPickTo = wmsOrderTrans.inventDim(),
        boolean         _cancelPickingLine = false,
        PdsCWInventQty  _pdsCWUnPickQty = 0
        )
    {
        WMSOrderTransUnPick    wmsOrderTransUnPick = WMSOrderTransUnPick::newWMSOrderTrans(wmsOrderTrans);

        wmsOrderTransUnPick.unPick(_unPickQty,_inventDimUnPickTo,_cancelPickingLine, _pdsCWUnPickQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the reservation on the current <c>WMSOrderTrans</c> record or part of it.
    /// </summary>
    /// <param name="_unreservePrereserved">
    /// A Boolean value that indicates whether to cancel the reservation on the pre-reserved transactions;
    /// optional.
    /// </param>
    /// <param name="_allowReReservation">
    /// A Boolean value that indicates whether to allow re-reservation; optional.
    /// </param>
    /// <param name="_qty">
    /// The quantity that will have the reservation canceled: optional.
    /// </param>
    /// <param name="_useParentMovement">
    /// A Boolean value that indicates whether to use the current movement object or the parent movement
    /// object; optional.
    /// </param>
    /// <param name="_pdsCWQty">
    /// The catch weight quantity that will be unreserved: optional.
    /// </param>
    /// <remarks>
    /// The parent movement object is used to cancel the reservation transactions where the child reference
    /// has been removed before this operation.
    /// </remarks>
    public void unReserve(
        boolean         _unreservePrereserved = false,
        boolean         _allowReReservation   = true,
        InventQty       _qty                  = wmsOrderTrans.Qty,
        boolean         _useParentMovement    = false,
        PdsCWInventQty  _pdsCWQty             = wmsOrderTrans.PdsCWQty
        )
    {
        InventMovement          inventMovement;
        InventMovement          inventMovementToUpdate;
        InventUpd_Reservation   inventUpd_Reservation;
        InventDim               inventDim;
        InventDimParm           inventDimParm;

        if (!_qty)
        {
            wmsOrderTrans.IsReserved = NoYes::No;
            return;
        }

        if (wmsOrderTrans.isPhysicalUpdated())
        {
            throw(error(strFmt("@SYS54079", wmsOrderTrans.ItemId, wmsOrderTrans.locationId())));
        }

        if (wmsOrderTrans.ExpeditionStatus != WMSExpeditionStatus::None
            && wmsOrderTrans.IsReserved == NoYes::Yes
            && (_unreservePrereserved || !wmsOrderTrans.PreReserved))
        {
            inventMovement = this.inventMovement();
            inventDim = wmsOrderTrans.inventDim();
            inventDimParm.setAllInventDim();

            inventMovementToUpdate = _useParentMovement ? inventMovement.parentMovement() : inventMovement;

            inventUpd_Reservation = InventUpd_Reservation::newParameters(
                inventMovementToUpdate,
                inventDim,
                inventDimParm,
                wmsOrderTrans.InventDimFixed,
                _qty,
                _allowReReservation,
                false,
                _pdsCWQty);

            inventUpd_Reservation.updateNow();

            wmsOrderTrans.IsReserved = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransDimToParentDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets the inventory dimension inventory transactions related to the current <c>WMSOrderTrans</c> records to
    ///     the inventory dimensions of the parent movement.
    /// </summary>
    /// <param name="_qty">
    ///     The quantity that will be changed.
    /// </param>
    /// <param name="_useParentMovement">
    ///     A Boolean value that indicates whether to work with the output order movement or the parent movement.
    /// </param>
    /// <param name="_cwQty">
    ///     The catch weight that will be changed.
    /// </param>
    /// <remarks>
    ///     Only 'On Order' quantities are considered.
    ///     The <paramref>_cwQty</paramref> parameter has been introduced in the AX2012 R2 release
    ///     to support the catch weight feature which requires to track both inventory quantity
    ///     and catch weight quantity rather than just inventory quantity.
    /// </remarks>
    public void updateInventTransDimToParentDim(
        InventQty       _qty,
        boolean         _useParentMovement,
        PdsCWInventQty  _cwQty)
    {
        InventDim                   inventDimFrom;
        InventDim                   inventDimTo;
        InventDimParm               inventDimParm;
        InventMovement              inventMovement;
        InventTransIdSum            inventTransIdSum;
        InventUpd_ChangeDimension   inventUpd_ChangeDimension;
        InventQty                   qty = _qty;
        PdsCWInventQty              cwQty = _cwQty;

        if (   !wmsOrderTrans.IsReserved
            && (qty < 0 || cwQty < 0))
        {
            if (wmsOrderTrans.isPhysicalUpdated())
            {
                throw error(strFmt("@SYS54471", -qty));
            }

            inventMovement = this.inventMovement();
            if (_useParentMovement)
            {
                inventMovement = inventMovement.parentMovement();
            }

            // the new dimensions are the dimensions from the movement
            inventDimTo = inventMovement.inventdim();

            if (wmsOrderTrans.InventDimId != inventDimTo.InventDimId)
            {
                inventDimParm.setAllInventDim();
                inventDimFrom = wmsOrderTrans.inventDim();

                // determine the 'on order' quantity for the movement and inventory dimension
                if (_useParentMovement)
                {
                    inventTransIdSum = InventTransIdSum::newTransIdNoChildType(inventMovement.inventTransOriginId());
                }
                else
                {
                    inventTransIdSum = InventTransIdSum::newTransIdChildType(
                                                                    inventMovement.inventTransOriginId(),
                                                                    inventMovement.transChildType(),
                                                                    inventMovement.transChildRefId());
                }
                inventTransIdSum.parmInventDimCriteria(inventDimFrom);
                inventTransIdSum.parmInventDimParmCriteria(inventDimParm);

                // reduce quantity if needed
                qty = max(qty,inventTransIdSum.onOrder());
                cwQty = max(cwQty,inventTransIdSum.onOrder());

                // change dimensions
                if (qty < 0 || cwQty < 0)
                {
                    inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(
                                                                                inventMovement,
                                                                                inventDimFrom,
                                                                                inventDimParm,
                                                                                inventDimTo,
                                                                                qty,
                                                                                cwQty);
                    inventUpd_ChangeDimension.parmOnlySelectOnOrder(true);
                    inventUpd_ChangeDimension.updateNow();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationChangeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes inventory dimensions on related inventory transactions
    /// </summary>
    /// <param name="_inventDimNew">
    ///    The new inventory dimensions.
    /// </param>
    /// <param name="_inventDimOld">
    ///    The current inventory dimensions.
    /// </param>
    /// <param name="_inventMovement">
    ///    The inventory movement related to the <c>wmsOrderTrans</c> record.
    /// </param>
    /// <param name="_qtyToChange">
    ///    The quantity to update in inventory unit.
    /// </param>
    /// <param name="_pdsCWQtyToChange">
    ///    The catch weight quantity to reserve.
    /// </param>
    /// <param name="_allowReserveReduction">
    ///    true if it is OK not to update full quantity; otherwise, false.
    /// </param>
    /// <param name="_onlySelectOnOrder">
    ///    true if only transactions with IssueStatus::OnOrder need to change dimension. otherwise, false.
    /// </param>
    /// <param name="_onlySelectReserved">
    ///    true if only transactions with IssueStatus::OnOrder need to change dimension. otherwise, false.
    /// </param>
    protected void updateReservationChangeDimension(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventMovement      _inventMovement,
        InventQty           _qtyToChange,
        PdsCWInventQty      _pdsCWQtyToChange,
        boolean             _allowReserveReduction,
        boolean             _onlySelectOnOrder = false,
        boolean             _onlySelectReserved = false)
    {
        InventDimParm               inventDimParmFrom;
        InventDimParm               inventDimParmTo;
        InventUpd_ChangeDimension   inventUpd_ChangeDimension;

        inventDimParmFrom.initFromInventDim(_inventDimOld);
        inventDimParmTo.initFromInventDim(_inventDimNew);
        inventDimParmFrom = InventDimParm::orParms(inventDimParmFrom, InventDimParm::xorParms(inventDimParmFrom, inventDimParmTo));

        inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(_inventMovement,
                                                                             _inventDimOld,
                                                                             inventDimParmFrom,
                                                                             _inventDimNew,
                                                                             -_qtyToChange,
                                                                             -_pdsCWQtyToChange);

        inventUpd_ChangeDimension.parmAllowReserveReduction(_allowReserveReduction);
        inventUpd_ChangeDimension.parmOnlySelectOnOrder(_onlySelectOnOrder);
        inventUpd_ChangeDimension.parmOnlySelectReserved(_onlySelectReserved);
        inventUpd_ChangeDimension.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates dimensions for transactions.
    /// </summary>
    /// <param name="_inventDimNew">
    ///    The new inventory dimensions.
    /// </param>
    /// <param name="_inventDimOld">
    ///    The current inventory dimensions.
    /// </param>
    /// <param name="_inventMovement">
    ///    The inventory movement related to the <c>wmsOrderTrans</c> record.
    /// </param>
    /// <param name="_throwOnError">
    ///    true if an exception should be thrown if reservation cannot be completed; otherwise, false. Optional.
    /// </param>
    /// <param name="_lockActiveDimensions">
    ///    true if the picking line must be locked on the specified dimensions; otherwise, false. Optional.
    /// </param>

    public void updateReservations(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventMovement      _inventMovement = this.inventMovement(),
        boolean             _throwOnError = true,
        boolean             _lockActiveDimensions = false)
    {
        boolean                     wasWMSOrderTransReserved = wmsOrderTrans.IsReserved;
        InventDimParm               inventDimParmFrom;

        if (InventDim::isInventDimEqual(_inventDimNew, _inventDimOld))
        {
            return;
        }

        if (this.mustUpdateReservationsWithoutDimensionCheck(_inventDimNew, _inventDimOld, _inventMovement))
        {
            this.updateReservationsNoDimCheck(_inventDimNew, _inventDimOld, _inventMovement);
        }
        else
        {
            this.updateReservationsWithDimCheck(_inventDimNew, _inventDimOld, _inventMovement, _throwOnError, _lockActiveDimensions);
        }

        wmsOrderTrans.InventDimId = _inventDimNew.InventDimId;
        wmsOrderTrans.update();

        //we might have released reserved quantity so other wmsOrderTrans on same inventTransId can be marked as reserved
        if (wasWMSOrderTransReserved)
        {
            inventDimParmFrom.initFromInventDim(_inventDimOld);
            wmsOrderTrans.syncIsReservedFromInventTrans(_inventDimOld,inventDimParmFrom);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateReservationsWithoutDimensionCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the reservations should be updated without checking the inventory dimensions.
    /// </summary>
    /// <param name = "_inventDimNew">The new inventory dimensions.</param>
    /// <param name = "_inventDimOld">The current inventory dimensions.</param>
    /// <param name = "_inventMovement">The inventory movement related to the <c>wmsOrderTrans</c> record.</param>
    /// <returns>true if the reservations should be updated without checking the inventory dimensions; otherwise, false.</returns>
    protected boolean mustUpdateReservationsWithoutDimensionCheck(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventMovement      _inventMovement = this.inventMovement())
    {
        return !InventDim::mustCheckDimChange(_inventMovement.inventDimGroupSetup(), _inventDimOld, _inventDimNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationsNoDimCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates dimensions for transactions directly as no changed dimensions require reservation validation.
    /// </summary>
    /// <param name="_inventDimNew">
    ///    The new inventory dimensions.
    /// </param>
    /// <param name="_inventDimOld">
    ///    The current inventory dimensions.
    /// </param>
    /// <param name="_inventMovement">
    ///    The inventory movement related to the <c>wmsOrderTrans</c> record.
    /// </param>

    protected void updateReservationsNoDimCheck(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventMovement      _inventMovement)
    {
        this.updateReservationChangeDimension(_inventDimNew, _inventDimOld, _inventMovement, wmsOrderTrans.Qty, wmsOrderTrans.PdsCWQty, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationsReserveAvail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reserves what is needed and possible from available on hand.
    /// </summary>
    /// <param name="_inventDimNew">
    ///    The new inventory dimensions.
    /// </param>
    /// <param name="_inventDimOld">
    ///    The current inventory dimensions.
    /// </param>
    /// <param name="_inventDimPhysicalNew">
    ///    The physical inventory dimensions for the new inventory dimensions.
    /// </param>
    /// <param name="_inventMovement">
    ///    The inventory movement related to the <c>wmsOrderTrans</c> record.
    /// </param>
    /// <param name="_qtyToReserve">
    ///    The quantity to reserve in inventory unit.
    /// </param>
    /// <param name="_pdsCWQtyToReserve">
    ///    The catch weight quantity to reserve.
    /// </param>
    /// <returns>
    ///    A container with changed quantity and changed catch weight quantity.
    /// </returns>
    protected container updateReservationsReserveAvail(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventDim           _inventDimPhysicalNew,
        InventMovement      _inventMovement,
        InventQty           _qtyToReserve,
        PdsCWInventQty      _pdsCWQtyToReserve)
    {
        InventOnHandQty                 inventOnHandQty;
        InventDimParm                   inventDimParmActivePhyscicalInvent;
        InventQty                       qtyChanged = 0;
        PdsCWInventQty                  pdsCWQtyChanged = 0;
        boolean                         onlySelectOnOrder;
        boolean                         onlySelectReserved;

        if (_qtyToReserve > 0)
        {
            _inventMovement.inventDimGroupSetup().inventDimParmActivePhysicalInventory(inventDimParmActivePhyscicalInvent);

            inventOnHandQty = InventOnHandQty::newEstimatedUpdate(_inventMovement, _inventDimPhysicalNew);
            //if some transactions aren't reserved this is not guaranteed to lead to a reservation
            if (inventOnHandQty.availPhysical() > 0)
            {
                if (_inventMovement.pdsCWItem())
                {
                    pdsCWQtyChanged = (_pdsCWQtyToReserve > inventOnHandQty.pdsCWAvailPhysical()) ? inventOnHandQty.pdsCWAvailPhysical() : _pdsCWQtyToReserve;

                    qtyChanged = (pdsCWQtyChanged < _pdsCWQtyToReserve && inventOnHandQty.availPhysical() < _qtyToReserve) ?
                        inventOnHandQty.availPhysical() : _qtyToReserve;
                }
                else
                {
                    qtyChanged = (_qtyToReserve > inventOnHandQty.availPhysical()) ? inventOnHandQty.availPhysical() : _qtyToReserve;
                }

                onlySelectOnOrder = !wmsOrderTrans.IsReserved;
                onlySelectReserved = wmsOrderTrans.IsReserved;
                this.updateReservationChangeDimension(_inventDimNew, _inventDimOld, _inventMovement, qtyChanged, pdsCWQtyChanged, false, onlySelectOnOrder, onlySelectReserved);

                if (!_inventMovement.inventModelGroup().NegativePhysical)
                {
                    // ensure that all active physical dimensions are included in reservation check.
                    inventOnHandQty.parmInventDimParm(InventDimParm::orParms(inventOnHandQty.parmInventDimParm(), inventDimParmActivePhyscicalInvent));
                    inventOnHandQty.addReservationCheck(false);
                }
            }
        }

        return [qtyChanged, pdsCWQtyChanged];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationsReserveExisting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Re-reserve an existing output order line.
    /// </summary>
    /// <param name="_existingReservation">
    ///    The <c>WMSOrderTrans</c> representing the line to reserve again.
    /// </param>
    /// <param name="_inventDimNew">
    ///    The new inventory dimensions assigned to the current transaction.
    /// </param>
    /// <param name="_inventDimOld">
    ///    The inventory dimensions originally assigned to the current transaction.
    /// </param>
    /// <param name="_wasWMSOrderTransReserved">
    ///    true if the original line was reserved; otherwise, false.
    /// </param>
    /// <param name="_pdsIsCWItem">
    ///    true if the item is a catch weight item; otherwise, false.
    /// </param>
    protected void updateReservationsReserveExisting(
        WMSOrderTrans       _existingReservation,
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        boolean             _wasWMSOrderTransReserved,
        boolean             _pdsIsCWItem)
    {
        InventDimId                 inventDimIdExisting = _existingReservation.InventDimId;
        InventDimParm               inventDimParmFrom;
        InventDimParm               inventDimParmAll;
        InventDim                   inventDimExistingMovement;
        InventDimParm               inventDimParmSelectExistingCriteria;
        InventDimParm               inventDimParmPhysical;
        InventDim                   inventDimReceiptOld;
        InventDim                   inventDimReceiptNew;
        WMSOrderTrans               existingReservationPart;
        WMSOrderTransType           existingReservationsWMSOrderTransType;
        InventUpd_ChangeDimension   inventUpd_ChangeDimension;
        InventMovement              inventMovementExisting;
        InventMovement              inventMovementExistingReceipt;
        InventDimId                 inventDimIdTo;
        InventDim                   inventDimWithOnHand;
        InventDimOnHand             inventDimOnHand;
        InventDimOnHandIterator     inventDimOnHandIterator;
        InventDimOnHandMember       inventDimOnHandMember;
        InventQty                   qtyRemaining = 0;
        InventQty                   qtyOnHand;
        InventQty                   reservationQty;
        PdsCatchWeightItem          pdsCatchWeightItem;

        PdsCatchWeightItem pdsCatchWeightItem()
        {
            if (!pdsCatchWeightItem.RecId)
            {
                pdsCatchWeightItem = PdsCatchWeightItem::find(_existingReservation.ItemId);
            }
            return pdsCatchWeightItem;
        }

        void pdsCWAdjustInventQtyOnTrans(InventQty _newQty)
        {
            this.updateReservationsUpdateCWInvent(inventMovementExisting, _existingReservation.Qty - _newQty);
            this.pdsCWAddQtyToWMSOrder(_existingReservation.wmsOrder(true), _newQty - _existingReservation.Qty);
            if (inventMovementExistingReceipt)
            { // Also create more transaction on the transport receipt
                this.updateReservationsUpdateCWInvent(inventMovementExistingReceipt, -(_existingReservation.Qty - _newQty), inventDimIdTo, InventDirection::Receipt);
                inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovementExistingReceipt, inventDimReceiptOld, inventDimParmFrom,
                                    inventDimReceiptNew, _existingReservation.Qty - _newQty);
            }
            _existingReservation.Qty = _newQty;
            _existingReservation.doUpdate();
        }

        //because the existing transaction was un-reserved we have to find transactions based on the movements dimensions
        inventDimParmSelectExistingCriteria.clear();
        inventDimParmSelectExistingCriteria.initFromInventDim(inventDimExistingMovement);

        inventDimParmFrom.initFromInventDim(_inventDimOld);

        existingReservationsWMSOrderTransType   = _existingReservation.wmsOrderTransType();
        inventMovementExisting = existingReservationsWMSOrderTransType.inventMovement();
        inventDimExistingMovement = inventMovementExisting.inventdim();

        switch (inventMovementExisting.transType())
        {
            case InventTransType::InventTransfer:
            case InventTransType::QuarantineOrder:
                throw error("@SYS53948");
            default:
                //make sure this is set based on the current existingReservations
                inventDimIdTo = _existingReservation.ToInventDimId;
        }

        //determine if the existingReservations wmsOrderTrans should be reserved
        if (_wasWMSOrderTransReserved)
        { // As the original wmsOrderTrans was reserved we can reuse the dimensions and reserve the full quantity here.
            if (_inventDimOld.InventSerialId && this.pdsIsCWFullVisibilityItem())
            { // Was reserved on existing full visible item with serial number
                inventDimParmAll.setAllInventDim();
                qtyOnHand = InventOnHandQty::newItemDim(inventMovementExisting.itemId(), _inventDimOld, inventDimParmAll).availPhysical();
                if (qtyOnHand != _existingReservation.Qty)
                { // adjust quantity to the physical quantity
                    pdsCWAdjustInventQtyOnTrans(qtyOnHand);
                }
            }

            // push the new dimensions to the transactions to ensure that we reserve on exactly those dimensions
            inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovementExisting,inventDimExistingMovement,inventDimParmSelectExistingCriteria,
                                            _inventDimOld, -_existingReservation.Qty, -_existingReservation.PdsCWQty);
            inventUpd_ChangeDimension.parmOnlySelectOnOrder(true);
            inventUpd_ChangeDimension.updateNow();
            _existingReservation.reserve(_inventDimOld,inventDimIdTo);
        }
        else
        { // examine if there is something on hand which can be reserved instead.
            if (_pdsIsCWItem)
            {
                qtyRemaining = _existingReservation.PdsCWQty;
            }
            else
            {
                qtyRemaining = _existingReservation.Qty;
            }

            inventMovementExisting.inventDimGroupSetup().inventDimParmActivePhysicalInventory(inventDimParmPhysical);
            inventDimParmPhysical.ItemIdFlag = NoYes::Yes;  // Need to ensure that ItemId is part of group by fields

            inventDimOnHand = InventDimOnHand::newAvailPhysical(_existingReservation.ItemId, _inventDimOld, inventDimParmFrom, InventDimOnHandLevel::SpecPositive, inventDimParmPhysical);
            inventDimOnHandIterator = inventDimOnHand.onHandIterator();
            while (inventDimOnHandIterator.more() && qtyRemaining > 0)
            {
                inventDimOnHandMember = inventDimOnHandIterator.value();
                if (inventDimOnHandMember.parmInventQty() > 0 && inventDimOnHandMember.parmInventDimId() != inventDimIdExisting)
                {
                    inventDimWithOnHand = InventDim::find(inventDimOnHandMember.parmInventDimId());
                    if (_pdsIsCWItem)
                    {
                        qtyOnHand = inventDimOnHandMember.parmInventQty();
                        if (inventDimOnHandMember.pdsCWParmInventQty() >= qtyRemaining)
                        {
                            if (this.pdsIsCWFullVisibilityItem() && inventDimOnHandMember.pdsCWParmInventQty() == 1)
                            { // reserve actual on hand quantity if a specific serial number is identified
                                reservationQty = qtyOnHand;
                            }
                            else
                            {
                                reservationQty = inventDimOnHandMember.pdsCWParmInventQty() * pdsCatchWeightItem().PdsCWMin;
                            }
                            if (reservationQty != _existingReservation.Qty)
                            { // about to change quantity on existing line, so also adjust transactions
                                pdsCWAdjustInventQtyOnTrans(reservationQty);
                            }
                            existingReservationPart = _existingReservation;
                        }
                        else
                        {
                            if (this.pdsIsCWFullVisibilityItem() && inventDimOnHandMember.pdsCWParmInventQty() == 1)
                            { // reserve actual on hand quantity if a specific serial number is identified
                                reservationQty = qtyOnHand;
                                if (reservationQty < _existingReservation.Qty)
                                { // CW on hand quantity bigger than existing reservation, but requested inventory reservation quantity is less
                                    throw error("@SYS53948");
                                }
                                existingReservationPart = _existingReservation.split(qtyOnHand, inventDimOnHandMember.pdsCWParmInventQty());
                            }
                            else
                            { // reserve minimal quantity until a specific serial number is specified
                                reservationQty = inventDimOnHandMember.pdsCWParmInventQty() * pdsCatchWeightItem().PdsCWMin;
                                if (reservationQty > _existingReservation.Qty)
                                {
                                    existingReservationPart = _existingReservation.split(reservationQty, inventDimOnHandMember.pdsCWParmInventQty());
                                }
                                else
                                { // CW on hand quantity bigger than existing reservation, but requested inventory reservation quantity is less
                                    throw error("@SYS53948");
                                }
                            }
                        }
                        //start by pushing the new dimensions to the transactions to ensure that we reserve on exactly those dimensions
                        inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovementExisting, inventMovementExisting.inventdim(), inventDimParmSelectExistingCriteria,
                                                        inventDimWithOnHand, -existingReservationPart.Qty, -_existingReservation.PdsCWQty);
                        inventUpd_ChangeDimension.parmOnlySelectOnOrder(true);
                        inventUpd_ChangeDimension.updateNow();

                        existingReservationPart.reserve(inventDimWithOnHand, inventDimIdTo);
                        qtyRemaining -= existingReservationPart.PdsCWQty;
                    }
                    else
                    {
                        if (inventDimOnHandMember.parmInventQty() >= qtyRemaining)
                        {
                            existingReservationPart = _existingReservation;
                        }
                        else
                        {
                            existingReservationPart = _existingReservation.split(inventDimOnHandMember.parmInventQty());
                        }
                        //start by pushing the new dimensions to the transactions to ensure that we reserve on exactly those dimensions
                        inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovementExisting, inventMovementExisting.inventdim(), inventDimParmSelectExistingCriteria,
                                                        inventDimWithOnHand, -existingReservationPart.Qty);
                        inventUpd_ChangeDimension.parmOnlySelectOnOrder(true);
                        inventUpd_ChangeDimension.updateNow();

                        existingReservationPart.reserve(inventDimWithOnHand, inventDimIdTo);
                        qtyRemaining -= existingReservationPart.Qty;
                    }
                }
                inventDimOnHandIterator.next();
            }
        }

        if (qtyRemaining > 0)
        {
            _existingReservation.IsReserved  = NoYes::No;
            _existingReservation.InventDimId = inventMovementExisting.inventDimId();//reservation is reversed so dim must be updated
            _existingReservation.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationsReserveNew</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reserves required quantity based on availability by creating new reservations.
    /// </summary>
    /// <param name="_inventDimNew">
    ///     The new inventory dimensions.
    /// </param>
    /// <param name="_inventMovement">
    ///     The inventory movement related to the <c>wmsOrderTrans</c> record.
    /// </param>
    /// <param name="_qtyToReserve">
    ///    The quantity to reserve in inventory unit.
    /// </param>
    /// <param name="_pdsCWQtyToReserve">
    ///    The catch weight quantity to reserve.
    /// </param>
    /// <param name="_lockActiveDimensions">
    ///     Whether to mark dimensions as locked.
    /// </param>
    protected void updateReservationsReserveNew(
        InventDim           _inventDimNew,
        InventMovement      _inventMovement,
        InventQty           _qtyToReserve,
        PdsCWInventQty      _pdsCWQtyToReserve,
        boolean             _lockActiveDimensions)
    {
        InventDimParm               inventDimParmAll;
        InventUpd_Reservation       inventUpd_Reservation;

        if (_qtyToReserve > 0)
        {
            inventDimParmAll.setAllInventDim();//we should find inventTrans that match the dimensions exactly
            _inventDimNew = InventDim::findOrCreate(_inventDimNew);//selection is going to be on inventDimId so ensure that InventDimId and dimensions are in sync

            //we cannot assume that quantity is reserved due to the ordering in inventUpd_ChangeDimension.updateChangeIssue();
            inventUpd_Reservation = InventUpd_Reservation::newParameters(_inventMovement,
                                                                         _inventDimNew,
                                                                         inventDimParmAll,
                                                                         (wmsOrderTrans.InventDimFixed ? wmsOrderTrans.InventDimFixed : inventDimParmAll.inventDimFixed()),
                                                                         -_qtyToReserve,
                                                                         true, // _allowAutoReserveDim
                                                                         false, // _showInfo
                                                                         -_pdsCWQtyToReserve);
            inventUpd_Reservation.parmAllowReserveReduction(true);
            inventUpd_Reservation.updateNow();

            wmsOrderTrans.IsReserved = NoYes::Yes;
            if (_lockActiveDimensions)
            { // Mark the dimensions as locked, so they are not taken in return for other dimensions.
                wmsOrderTrans.InventDimFixed = inventDimParmAll.inventDimFixed();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationsSwap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reserves what is needed and possible by swapping with other reserved lines.
    /// </summary>
    /// <param name="_inventDimNew">
    ///    The new inventory dimensions.
    /// </param>
    /// <param name="_inventDimOld">
    ///    The current inventory dimensions.
    /// </param>
    /// <param name="_inventDimPhysicalNew">
    ///    The physical inventory dimensions for the new inventory dimensions.
    /// </param>
    /// <param name="_inventDimParmPhysical">
    ///    The identification of physical inventory dimensions for the item.
    /// </param>
    /// <param name="_inventMovement">
    ///    The inventory movement related to the <c>wmsOrderTrans</c> record.
    /// </param>
    /// <param name="_qtyToReserve">
    ///    The quantity to reserve in inventory unit.
    /// </param>
    /// <param name="_pdsCWQtyToReserve">
    ///    The catch weight quantity to reserve.
    /// </param>
    /// <returns>
    ///    A container with changed quantity and changed catch weight quantity.
    /// </returns>

    protected container updateReservationsSwap(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventDim           _inventDimPhysicalNew,
        InventDimParm       _inventDimParmPhysical,
        InventMovement      _inventMovement,
        InventQty           _qtyToReserve,
        PdsCWInventQty      _pdsCWQtyToReserve)
    {
        InventDim                   inventDimExisting;
        InventQty                   inventQtyRemaining = _qtyToReserve;
        InventQty                   qtyChanged = 0;
        WMSOrderTrans               existingReservations;

        boolean                     pdsIsCWItem = _inventMovement.pdsCWItem();
        PdsCWInventQty              pdsCWQtyRemaining = _pdsCWQtyToReserve;
        PdsCWInventQty              pdsCWQtyChanged = 0;
        InventQty                   qtyRemaining = pdsIsCWItem ? pdsCWQtyRemaining : inventQtyRemaining;
        InventQty                   qtyBefore;

        if (inventQtyRemaining > 0)
        {
            //try to change reservations for other route lines
            while select forupdate existingReservations
                where existingReservations.ItemId            == wmsOrderTrans.ItemId
                   && existingReservations.FullPallet        == wmsOrderTrans.FullPallet
                   && existingReservations.RecId             != wmsOrderTrans.RecId
                   && existingReservations.OrderType         == wmsOrderTrans.OrderType
                   && existingReservations.IsReserved        == NoYes::Yes
                   && (existingReservations.ExpeditionStatus == WMSExpeditionStatus::Registered
                   ||  existingReservations.ExpeditionStatus == WMSExpeditionStatus::Activated)
                #InventDimExistsJoin(existingReservations.inventDimId, inventDimExisting, _inventDimPhysicalNew, _inventDimParmPhysical)
            {
                if (this.canSwitchReservations(existingReservations))
                {
                    if (pdsIsCWItem)
                    {
                        if (pdsCWQtyRemaining < existingReservations.PdsCWQty)
                        {
                            existingReservations.split(existingReservations.Qty - inventQtyRemaining, existingReservations.PdsCWQty - pdsCWQtyRemaining);    // Now existingReservation.PdsCWQty equals pdsCWQtyRemaining
                        }
                    }
                    else
                    {
                        if (inventQtyRemaining < existingReservations.Qty)
                        {
                            existingReservations.split(existingReservations.Qty - inventQtyRemaining, existingReservations.PdsCWQty);    // Now existingReservation.Qty equals qtyRemaining
                        }
                    }

                    qtyBefore = existingReservations.Qty; // Quantity being released, so we can use this later
                    this.switchReservationWithExisting(_inventDimNew, _inventDimOld, _inventMovement, existingReservations);

                    qtyChanged += qtyBefore;
                    inventQtyRemaining -= qtyBefore;

                    if (pdsIsCWItem)
                    {
                        pdsCWQtyChanged += existingReservations.PdsCWQty;
                        pdsCWQtyRemaining -= existingReservations.PdsCWQty;
                        qtyRemaining -= existingReservations.PdsCWQty;
                    }
                    else
                    {
                        qtyRemaining -= qtyBefore;
                    }
                }
                if (qtyRemaining <= 0)
                {
                    break;
                }
            }
        }
        return [qtyChanged, pdsCWQtyChanged];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationsUpdateCWInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create, adjust or delete inventory transactions so the total inventory quantity on transactions is adjusted,
    ///    but leaving catch weight quantity unchanged
    /// </summary>
    /// <param name="_inventMovement">
    ///    The inventory movement for which transactions are adjusted.
    /// </param>
    /// <param name="_qtyToAddToTransaction">
    ///    The quantity to add to transactions.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimensions of the transaction to update.
    /// </param>
    /// <param name="_direction">
    ///    The direction (issue or receipt) of the transactions to adjust.
    /// </param>

    protected void updateReservationsUpdateCWInvent(
        InventMovement      _inventMovement,
        InventQty           _qtyToAddToTransaction,
        InventDimId         _inventDimId = _inventMovement.inventDimId(),
        InventDirection     _direction  = InventDirection::Issue)
    {
        InventUpd_Estimated     estimated;

        estimated = InventUpd_Estimated::newInventMovement(_inventMovement);
        estimated.pdsAdjustTransactionQty(_direction, _qtyToAddToTransaction, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationsWithDimCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates dimensions for transactions by doing full reservations with potential swapping of reservations.
    /// </summary>
    /// <param name="_inventDimNew">
    ///    The new inventory dimensions.
    /// </param>
    /// <param name="_inventDimOld">
    ///    The current inventory dimensions.
    /// </param>
    /// <param name="_inventMovement">
    ///    The inventory movement related to the <c>wmsOrderTrans</c> record.
    /// </param>
    /// <param name="_throwOnError">
    ///    true if an exception should be thrown if reservation cannot be completed; otherwise, false.
    /// </param>
    /// <param name="_lockActiveDimensions">
    ///    true if the picking line must be locked on the specified dimensions; otherwise, false.
    /// </param>

    protected void updateReservationsWithDimCheck(
        InventDim           _inventDimNew,
        InventDim           _inventDimOld,
        InventMovement      _inventMovement,
        boolean             _throwOnError,
        boolean             _lockActiveDimensions)
    {
        InventDimParm               inventDimParmFrom;
        InventDimParm               inventDimParmActivePhyscicalInvent;
        InventDim                   inventDimPhysicalNew;
        InventQty                   inventQtyRemaining = wmsOrderTrans.Qty;
        InventQty                   inventQtyChanged;
        InventQty                   inventQtyTotalChanged = 0;

        boolean                     isCWItem = _inventMovement.pdsCWItem();
        PdsCWInventQty              pdsCWQtyRemaining = wmsOrderTrans.PdsCWQty;
        PdsCWInventQty              pdsCWQtyChanged;
        PdsCWInventQty              pdsCWQtyTotalChanged = 0;
        InventQty                   qtyRemaining = isCWItem ? pdsCWQtyRemaining : inventQtyRemaining; // Quantity remaining in relevant unit (inventory or catch weight)

        inventDimParmFrom.initFromInventDim(_inventDimOld);

        if (qtyRemaining > 0)
        { // Try to reserve on available quantity with specified dimensions
            _inventMovement.inventDimGroupSetup().inventDimParmActivePhysicalInventory(inventDimParmActivePhyscicalInvent);
            inventDimPhysicalNew.data(_inventDimNew);
            inventDimPhysicalNew.clearNotSelectedDim(inventDimParmActivePhyscicalInvent);

            [inventQtyChanged, pdsCWQtyChanged] = this.updateReservationsReserveAvail(_inventDimNew, _inventDimOld, inventDimPhysicalNew,
                    _inventMovement, inventQtyRemaining, pdsCWQtyRemaining);

            inventQtyRemaining -= inventQtyChanged;
            inventQtyTotalChanged += inventQtyChanged;
            pdsCWQtyRemaining -= pdsCWQtyChanged;
            pdsCWQtyTotalChanged += pdsCWQtyChanged;
            qtyRemaining -= isCWItem ? pdsCWQtyChanged : inventQtyChanged;
        }

        if (qtyRemaining > 0 && !(inventQtyChanged == 0 && !wmsOrderTrans.isReserved))
        {
            //try to change reservations for other route lines
            [inventQtyChanged, pdsCWQtyChanged] = this.updateReservationsSwap(_inventDimNew, _inventDimOld, inventDimPhysicalNew, inventDimParmActivePhyscicalInvent,
                    _inventMovement, inventQtyRemaining, pdsCWQtyRemaining);

            inventQtyRemaining -= inventQtyChanged;
            inventQtyTotalChanged += inventQtyChanged;
            pdsCWQtyRemaining -= pdsCWQtyChanged;
            pdsCWQtyTotalChanged += pdsCWQtyChanged;
            qtyRemaining -= isCWItem ? pdsCWQtyChanged : inventQtyChanged;
        }

        if (qtyRemaining > 0)
        {
            if (_throwOnError)
            {
                throw(error("@SYS53948"));
            }
            else
            {
                warning("@SYS53948");
            }
        }

        if (qtyRemaining > 0)
        {  
            boolean onlySelectOnOrder = !wmsOrderTrans.isReserved;
            // Could not be fully reserved, but this was accepted - now set dimensions and other fields to reflect this
            wmsOrderTrans.IsReserved = NoYes::No;

            if (inventQtyRemaining != wmsOrderTrans.Qty)
            { //this will only happen if there is On-hand or quantity could be reserved from another route
                wmsOrderTrans.InventDimId = _inventDimNew.InventDimId;
                wmsOrderTrans = wmsOrderTrans.split(inventQtyTotalChanged, pdsCWQtyTotalChanged);
            }

            // Change dimensions for transactions
            this.updateReservationChangeDimension(_inventDimNew, _inventDimOld, _inventMovement, inventQtyRemaining, pdsCWQtyRemaining, true, onlySelectOnOrder);

            // Set isReserved based on reservations in inventory transactions
            this.setIsReservedFromTransactions(_inventDimNew);
        }

        if (inventQtyTotalChanged > 0)
        {
            this.updateReservationsReserveNew(_inventDimNew, _inventMovement, inventQtyTotalChanged, pdsCWQtyTotalChanged, _lockActiveDimensions);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>