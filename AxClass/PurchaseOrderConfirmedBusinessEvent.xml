<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderConfirmedBusinessEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchaseOrderConfirmedBusinessEvent</c> class extends <c>BusinessEventsBase</c> to provide purchase order confirmed business event.
/// </summary>
[BusinessEvents(classStr(PurchaseOrderConfirmedBusinessEventContract),
    'ProcurementAndSourcing:PurchaseOrderConfirmedBusinessEventName',
    'ProcurementAndSourcing:PurchaseOrderConfirmedBusinessEventDescription',
    ModuleAxapta::PurchaseOrder)]
public final class PurchaseOrderConfirmedBusinessEvent extends BusinessEventsBase
{
    private VendPurchOrderJour vendPurchOrderJour;
    private PurchTable purchTable;  
       
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new PurchaseOrderConfirmedBusinessEvent business event.
    /// </summary>
    /// <param name = "_vendPurchOrderJour">The <c>VendPurchOrderJour</c> record.</param>
    /// <param name = "_purchTable">The <c>PurchTable</c> record.</param>
    /// <returns>A new <c>PurchaseOrderConfirmedBusinessEvent</c> business event.</returns>
    public static PurchaseOrderConfirmedBusinessEvent construct(VendPurchOrderJour _vendPurchOrderJour, PurchTable _purchTable)
    {
        var event = new PurchaseOrderConfirmedBusinessEvent();
        event.parmVendPurchOrderJour(_vendPurchOrderJour);
        event.parmPurchTable(_purchTable);

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides to provide purchase order confirmed data.
    /// </summary>
    /// <returns>The <c>PurchaseOrderConfirmedBusinessEventContract</c> of the event.</returns>
    public BusinessEventsContract buildContract()
    {
        var contract = PurchaseOrderConfirmedBusinessEventContract::construct();
        contract.parmLegalEntity(vendPurchOrderJour.DataAreaId);
        contract.parmPurchaseJournal(vendPurchOrderJour.PurchOrderDocNum);
        contract.parmPurchaseType(enum2Symbol(enumNum(PurchaseType), purchTable.PurchaseType));
        contract.parmPurchaseOrderDate(vendPurchOrderJour.PurchOrderDate);
        contract.parmPurchaseOrderNumber(vendPurchOrderJour.PurchId);
        contract.parmTransactionCurrency(purchTable.CurrencyCode);
        contract.parmTransactionCurrencyAmount(vendPurchOrderJour.Amount);
        contract.parmVendorAccount(vendPurchOrderJour.OrderAccount);
        
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPurchOrderJour</Name>
				<Source><![CDATA[
    private VendPurchOrderJour parmVendPurchOrderJour(VendPurchOrderJour _vendPurchOrderJour = vendPurchOrderJour)
    {
        vendPurchOrderJour = _vendPurchOrderJour;

        return vendPurchOrderJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    private PurchTable parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record context for this event.
    /// </summary>
    /// <returns>The <c>PurchTable</c> buffer for the record context for this event.</returns>
    public Common getContextRecord()
    {
        return this.parmPurchTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>