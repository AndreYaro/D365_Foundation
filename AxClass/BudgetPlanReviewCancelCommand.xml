<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanReviewCancelCommand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanReviewCancelCommand</c> class manages the workflow command cancellation action.
/// </summary>
public class BudgetPlanReviewCancelCommand extends WorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Protected default constructor that construct factory methods used to instantiate the
    /// <c>BudgetPlanReviewCancelCommand</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>WorkflowCancelDialog</c> class to surface a cancel dialog box and performs the
    /// cancellation logic for the selected workflow instance or instances.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>WorkflowCancelManager</c> class.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The specified arguments are null.
    /// </exception>
    /// <remarks>
    /// Both parent and child workflows will be canceled in one transaction.
    /// In super() call it will pop up a dialog to confirm if we want to recall the workflow.
    /// We cannot pop up a dialog in a transaction so super() cannot be called here.
    /// </remarks>
    public void run(Args _args)
    {
        List workflowsToCancel = new List(Types::Guid);
        LabelString cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt;

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        workflowsToCancel = WorkflowCancelManager::getWorkflowsToCancel(_args.caller());        

        if (workflowsToCancel.elements() == 0)
        {
            return;
        }

        [cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt] = WorkflowCancelManager::getDialogContent(_args);
            
        WorkflowCancelDialog workflowCancelDialog = WorkflowCancelDialog::construct(cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt);
        workflowCancelDialog.run();

        if (workflowCancelDialog.parmIsClosedOK())
        {
            workflowsToCancel = BudgetPlanReviewCancelCommand::getWorkflowsToCancelIncludeChildWorkflow(workflowsToCancel);

            WorkflowCancelManager::cancelWorkflows(workflowsToCancel, workflowCancelDialog.parmWorkflowComment());

            this.updateDocument(_args);

            _args.caller().updateWorkflowControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the budget plan workflow status for the cancel action.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>BudgetPlanReviewCancelCommand</c> class.
    /// </param>
    public void updateDocument(Args _args)
    {
        FormDataSource      budgetPlanHeader_ds;
        BudgetPlanHeader    budgetPlanHeader;

        budgetPlanHeader = _args.record() as BudgetPlanHeader;

        if (FormDataUtil::getFormDataSource(budgetPlanHeader))
        {
            // Update the data source when called from a client form.
            budgetPlanHeader_ds = FormDataUtil::getFormDataSource(budgetPlanHeader);
            budgetPlanHeader_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetPlanReviewCancelCommand</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanReviewCancelCommand</c> class.
    /// </returns>
    public static BudgetPlanReviewCancelCommand construct()
    {
        return new BudgetPlanReviewCancelCommand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the main method.
    /// </summary>
    /// <param name="_args">
    /// Any command argument to use.
    /// </param>
    public static void main(Args _args)
    {
        BudgetPlanHeader                budgetPlanHeader;
        BudgetPlanReviewCancelCommand   workflowCancelManager;
        boolean                         cancelUpdate;
        WorkflowTrackingStatusTable     workflowTrackingStatusTable;

        budgetPlanHeader = _args.record() as BudgetPlanHeader;

        if (!budgetPlanHeader)
        {
            select firstonly ContextRecId from workflowTrackingStatusTable
                where workflowTrackingStatusTable.RecId == _args.record().RecId;

            budgetPlanHeader = BudgetPlanHeader::find(workflowTrackingStatusTable.ContextRecId);
        }

        if (budgetPlanHeader)
        {
            if (BudgetPlan::doesBudgetPlanHaveChild(budgetPlanHeader.RecId)
                && Box::yesNo(strFmt("@Budget:BudgetPlanWorkflowRecallPrompt", budgetPlanHeader.DocumentNumber), DialogButton::No) == DialogButton::No)
            {
                cancelUpdate = true;
            }

            if (!cancelUpdate)
            {
                workflowCancelManager = BudgetPlanReviewCancelCommand::construct();

                workflowCancelManager.run(_args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsToCancelIncludeChildWorkflow</Name>
				<Source><![CDATA[
    private static List getWorkflowsToCancelIncludeChildWorkflow(List _parentWorkflow)
    {
        List workflowsToCancel = new List(Types::Guid);

        if (_parentWorkflow.empty())
        {
            return workflowsToCancel;
        }

        ListEnumerator listEnumerator = _parentWorkflow.getEnumerator();

        BudgetPlanHeader        parentBudgetPlanHeader, childBudgetPlanHeader;
        WorkflowWorkItemTable   wfWorkItemTable, parentWFWorkItemTable;

        while (listEnumerator.moveNext())
        {
            while select CorrelationId from wfWorkItemTable
                exists join childBudgetPlanHeader
                exists join parentBudgetPlanHeader
                exists join parentWFWorkItemTable
                where childBudgetPlanHeader.RecId == wfWorkItemTable.RefRecId
                    && parentBudgetPlanHeader.RecId == childBudgetPlanHeader.ParentBudgetPlanHeader
                    && parentWFWorkItemTable.RefRecId == parentBudgetPlanHeader.RecId
                    && parentWFWorkItemTable.CorrelationId == listEnumerator.current()
                    && wfWorkItemTable.RefTableId == tableNum(BudgetPlanHeader)
            {
                workflowsToCancel.addEnd(wfWorkItemTable.CorrelationId);
            }

            workflowsToCancel.addEnd(listEnumerator.current());
        }
     
        return workflowsToCancel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>