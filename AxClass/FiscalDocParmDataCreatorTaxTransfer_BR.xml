<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorTaxTransfer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>FiscalDocumentParmData_BR</c> which represents a tax transfer fiscal document.
/// </summary>
class FiscalDocParmDataCreatorTaxTransfer_BR extends FiscalDocumentParmDataCreator_BR
{
    TaxFiscalDocument_BR taxFiscalDocument;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return taxFiscalDocument.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
        protected RecId fiscalReferenceSourceRecId()
    {
        return taxFiscalDocument.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
        protected TableId fiscalReferenceSourceTableId()
    {
        return taxFiscalDocument.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
        protected boolean hasCustVendTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
        protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR fiscalDocument = new FiscalDocumentParmData_BR();
        FiscalEstablishment_BR    fiscalEstablishment;
        CustTable custTable;
        VendTable vendTable;

        //Basic fiscal document identification
        fiscalDocument.parmDirection(taxFiscalDocument.Direction);
        fiscalDocument.parmFiscalDocumentNumber(taxFiscalDocument.InvoiceNumber);
        fiscalDocument.parmModel(taxFiscalDocument.Model);
        fiscalDocument.parmFiscalDocumentSeries(taxFiscalDocument.Series);
        fiscalDocument.parmFiscalDocumentDate(taxFiscalDocument.InvoiceDate);
        fiscalDocument.parmSpecie(taxFiscalDocument.Specie);
        fiscalDocument.parmAccountingDate(taxFiscalDocument.InvoiceDate);
        fiscalDocument.parmVoucher(taxFiscalDocument.Voucher);
        fiscalDocument.parmPurpose(FiscalDocumentPurpose_BR::Adjustment);
        fiscalDocument.parmFreightChargeTerms(FiscalDocumentFreightTerms_BR::Nofreight);
        fiscalDocument.parmFiscalDocumentAccessKey(taxFiscalDocument.AccessKey);
        fiscalDocument.parmFinalUser(NoYes::No);
        fiscalDocument.parmPresenceType(EFDocPresenceType_BR::DoesNotApply);
        fiscalDocument.parmPaymentMethod(EFDocPaymentMethod_BR::NoPayment);
    
        //Internal references
        fiscalDocument.parmFiscalDocumentAccountNum(taxFiscalDocument.AccountNum);
        fiscalDocument.parmFiscalDocumentAccountType(taxFiscalDocument.AccountType);
        fiscalDocument.parmRefRecId(taxFiscalDocument.RecId);
        fiscalDocument.parmRefTableId(taxFiscalDocument.TableId);

        fiscalEstablishment = FiscalEstablishment_BR::findById(taxFiscalDocument.FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentName          (fiscalEstablishment.Name);
        fiscalDocument.parmFiscalEstablishmentID            (fiscalEstablishment.FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentPostalAddress (fiscalEstablishment.postalAddress().RecId);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF       (fiscalEstablishment.CNPJCPFNum_BR);
        fiscalDocument.parmFiscalEstablishmentIE            (fiscalEstablishment.IENum_BR);
        fiscalDocument.parmFiscalEstablishmentCCMNum        (fiscalEstablishment.CCMNum_BR);
        fiscalDocument.parmFiscalEstablishmentPhone         (fiscalEstablishment.phone());

        //Party information
        fiscalDocument.parmThirdPartyPostalAddress(taxFiscalDocument.LogisticsPostalAddress);
        if (taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSInstallment)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00072, funcName());

            fiscalDocument.parmFiscalDocumentIssuer(FiscalDocumentIssuer_BR::OwnEstablishment);
            fiscalDocument.parmThirdPartyCNPJCPF(fiscalEstablishment.CNPJCPFNum_BR);
            fiscalDocument.parmThirdPartyIE(fiscalEstablishment.IENum_BR);
            fiscalDocument.parmThirdPartyName(fiscalEstablishment.Name);
            fiscalDocument.parmThirdPartyPhone(fiscalEstablishment.phone());
            fiscalDocument.parmThirdPartyFax(fiscalEstablishment.telefax());
            fiscalDocument.parmThirdPartyEmail(fiscalEstablishment.email());
            fiscalDocument.parmThirdPartyIcmsContributor(true);
        }
        else
        {
            if (taxFiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
            {
                fiscalDocument.parmFiscalDocumentIssuer(FiscalDocumentIssuer_BR::OwnEstablishment);
                custTable = CustTable::find(taxFiscalDocument.AccountNum);
                fiscalDocument.parmThirdPartyCNPJCPF(custTable.cnpjcpfNum_BR);
                fiscalDocument.parmThirdPartyIE(custTable.ieNum_BR);
                fiscalDocument.parmThirdPartyName(custTable.name());
                fiscalDocument.parmThirdPartyPhone(custTable.phone());
                fiscalDocument.parmThirdPartyFax(custTable.telefax());
                fiscalDocument.parmThirdPartyEmail(custTable.email());
                fiscalDocument.parmThirdPartyIcmsContributor(custTable.ICMSContributor_BR);
            }
            else
            {
                fiscalDocument.parmFiscalDocumentIssuer(FiscalDocumentIssuer_BR::ThirdParty);
                vendTable = VendTable::find(taxFiscalDocument.AccountNum);
                fiscalDocument.parmThirdPartyCNPJCPF(vendTable.cnpjcpfNum_BR);
                fiscalDocument.parmThirdPartyIE(vendTable.ieNum_BR);
                fiscalDocument.parmThirdPartyName(vendTable.name());
                fiscalDocument.parmThirdPartyPhone(vendTable.phone());
                fiscalDocument.parmThirdPartyFax(vendTable.telefax());
                fiscalDocument.parmThirdPartyEmail(vendTable.email());
                fiscalDocument.parmThirdPartyIcmsContributor(vendTable.ICMSContributor_BR);
            }
        }

        this.initTagsReplacer(fiscalDocument.parmTextTagReplacer());
        fiscalDocument.parmListOfTextsParmData(this.addTexts(taxFiscalDocument));

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
        protected List initLinesParmData()
    {
        List ret = new List(Types::Class);
        FiscalDocumentLineParmData_BR fiscalDocLine = new FiscalDocumentLineParmData_BR();
        TaxFiscalDocumentLine_BR taxFiscalDocLine;
        InventTable inventTable;

        LogisticsPostalAddress          logisticsPostalAddress;
        TaxBenefitCodeSetupHeading_BR   taxBenefitCodeSetupHeading;
        
        ItemId itemId = BrazilParameters::find().FiscalDocumentItemId;
        
        if (taxFiscalDocument.isOutgoing())
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(taxFiscalDocument.LogisticsPostalAddress);
        }
        else
        {
            logisticsPostalAddress = FiscalEstablishment_BR::findById(taxFiscalDocument.FiscalEstablishmentId).postalAddress();
        }
        taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);

        select taxFiscalDocLine
            where taxFiscalDocLine.TaxFiscalDocument == taxFiscalDocument.RecId;

        inventTable = InventTable::find(itemId);

        fiscalDocLine.parmCFOP(taxFiscalDocLine.getCFOPTable().cfopId);
        fiscalDocLine.parmDescription(taxFiscalDocLine.Description);
        fiscalDocLine.parmItemId(inventTable.ItemId);
        fiscalDocLine.parmItemType(inventTable.ItemType == ItemType::Item ? FiscalDocumentLineItemType_BR::Product : FiscalDocumentLineItemType_BR::Service);
        fiscalDocLine.parmUnit('R$');
        fiscalDocLine.parmScaleIndicator(inventTable.ScaleIndicator_BR);
        fiscalDocLine.parmCNPJ(inventTable.CNPJ_BR);
        
        fiscalDocLine.parmBenefitCode(TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                        taxBenefitCodeSetupHeading.RecId,
                                        itemId,
                                        taxFiscalDocument.AccountType,
                                        taxFiscalDocument.AccountNum,
                                        fiscalDocLine.parmCFOP(),
                                        SalesPurchTrntype_BR::TaxTransfer));
        fiscalDocLine.parmAdjustmentCode53(TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                            taxBenefitCodeSetupHeading.RecId,
                                            itemId,
                                            taxFiscalDocument.AccountType,
                                            taxFiscalDocument.AccountNum,
                                            fiscalDocLine.parmCFOP(),
                                            SalesPurchTrntype_BR::TaxTransfer));
        fiscalDocLine.parmObservationCode(TaxBenefitCodeSetupData_BR::findObservationCode(
                                            taxBenefitCodeSetupHeading.RecId,
                                            itemId,
                                            taxFiscalDocument.AccountType,
                                            taxFiscalDocument.AccountNum,
                                            fiscalDocLine.parmCFOP(),
                                            SalesPurchTrntype_BR::TaxTransfer));
        
        fiscalDocLine.parmFiscalClassification(inventTable.TaxFiscalClassification_BR);

        fiscalDocLine.parmFinancialLedgerDimension(FiscalDocParmDataCreatorTaxTransfer_BR::getFinancialDimension(taxFiscalDocLine));

        fiscalDocLine.parmRefRecId(taxFiscalDocLine.RecId);
        fiscalDocLine.parmRefTableId(taxFiscalDocLine.TableId);

        this.initTagsReplacer(fiscalDocLine.parmTextTagReplacer());
        fiscalDocLine.parmListOfTextsParmData().appendList(this.addTexts(taxFiscalDocLine));

        ret.addEnd(fiscalDocLine);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
        protected List initListOfInstallments()
    {
        List ret = new List(Types::Class);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
        protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List ret = new List(Types::Class);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagsReplacer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FiscalDocumentTextTagReplacer_BR</c> object to replace fiscal document text's placeholders
    /// for tax transfer fiscal documents.
    /// </summary>
    /// <param name="_replacer">
    /// <c>FiscalDocumentTextTagReplacer_BR</c> to be initialized.
    /// </param>
    protected void initTagsReplacer(FiscalDocumentTextTagReplacer_BR _replacer)
    {
        CustTable custTable;
        VendTable vendTable;

        if (taxFiscalDocument.AccountType == CustVendType_BR::Customer)
        {
            custTable = CustTable::find(taxFiscalDocument.AccountNum);

            _replacer.parmCustomer_Address(custTable.postalAddress().Address);
            _replacer.parmCustomer_CnpjCpf(custTable.CNPJCPFNum_BR);
            _replacer.parmCustomer_IE(custTable.IENum_BR);
            _replacer.parmCustomer_Name(custTable.name());
        }
        else
        {
            vendTable = VendTable::find(taxFiscalDocument.AccountNum);

            _replacer.parmVendor_Address(vendTable.postalAddress().Address);
            _replacer.parmVendor_CnpjCpf(vendTable.CNPJCPFNum_BR);
            _replacer.parmVendor_IE(vendTable.IENum_BR);
            _replacer.parmVendor_Name(vendTable.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax transfer document that will originate the fiscal document.
    /// </summary>
    /// <param name="_taxFiscalDocument">
    /// Record from tax fiscal document table to originate the fiscal document.
    /// </param>
    public void parmTaxFiscalDocument(TaxFiscalDocument_BR _taxFiscalDocument)
    {
        taxFiscalDocument = _taxFiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        return FiscalDocumentPurpose_BR::Adjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPovertyFundTaxForLine</Name>
				<Source><![CDATA[
    protected void setPovertyFundTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, FiscalDocumentTaxPovertyFundCalc_BR _fiscalDocumentTaxPovertyFundCalc)
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given TaxFiscalDocumentLine_BR.
    /// </summary>
    /// <param name="_taxFiscalDocLine">
    /// The TaxFiscalDocumentLine_BR record.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static RecId getFinancialDimension(TaxFiscalDocumentLine_BR _taxFiscalDocLine)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(_taxFiscalDocLine.getLedgerDimension(), 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>