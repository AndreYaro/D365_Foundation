<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostIterationCompletionTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Waits for <c>InventCostCalculateTask</c> classes to be completed for a given iteration.
/// </summary>
class InventCostIterationCompletionTask extends InventCostLevelCompletionTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates batch tasks for the next iteration.
    /// </summary>
    /// <remarks>
    /// If level is zero task are created for next iteration.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Iterations can only occur on level zero therefore the level must be zero.
    /// </exception>
    protected void doRun()
    {
        if (bomLevel > 0)
        {
            throw error("@SYS4001007");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    protected ClassDescription getTaskDescription()
    {
        return InventCostIterationCompletionTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMLevel</Name>
				<Source><![CDATA[
    public BOMLevel parmBOMLevel(BOMLevel _bomLevel = bomLevel)
    {
        bomLevel = _bomLevel;

        return bomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostIterationCompletionTask construct()
    {
        return new InventCostIterationCompletionTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS4001038";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostIterationCompletionTask</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <param name="_bomLevel">
    /// The level for which the inventory closing should be performed.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostIterationCompletionTask</c> class.
    /// </returns>
    public static InventCostIterationCompletionTask newTask(
        Voucher             _voucher,
        TransDate           _transDate,
        BOMLevel            _bomLevel
        )
    {
        InventCostIterationCompletionTask inventCostIterationCompletionTask = InventCostIterationCompletionTask::construct();

        inventCostIterationCompletionTask.parmVoucher(_voucher);
        inventCostIterationCompletionTask.parmTransDate(_transDate);
        inventCostIterationCompletionTask.parmBOMLevel(_bomLevel);

        return inventCostIterationCompletionTask;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>