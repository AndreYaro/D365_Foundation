<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionArchivedCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Xpp.PlatformExtensions;

/// <summary>
/// The <c>WHSInventoryTransactionArchivedCleanup</c> class cleans up archived warehouse-specific inventory transactions.
/// </summary>
internal final class WHSInventoryTransactionArchivedCleanup extends SysBatchTask
{
    private WhsInstrumentationLogger instrumentationLogger;
    private boolean isWHSInventoryTransactionArchivedCleanupSkipFlight = WHSInventoryTransactionArchivedCleanupSkipFlight::instance().isEnabled();
    private boolean isWHSInventoryTransactionArchivedCleanupQueryFlightEnabled = WHSInventoryTransactionArchivedCleanupQueryFlight::instance().isEnabled();
    private boolean isWHSInventoryTransactionArchivedCleanupIndexHintFlightEnabled = WHSInventoryTransactionArchivedCleanupIndexHintFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleanup archived warehouse inventory transactions.
    /// </summary>
    [Hookable(false)]
    public void run()
    {
        #OCCRetryCount
        int infologLine = infologLine();

        try
        {
            using (var activityContext = this.instrumentationLogger().archivedTransactionsCleanupActivities().executeArchivedTransactionsCleanup())
            {
                var stopWatch = System.Diagnostics.Stopwatch::StartNew();

                Set companiesToCleanup = this.getCompaniesToCleanup();
                SetEnumerator companiesToCleanupEnumerator = companiesToCleanup.getEnumerator();

                while (companiesToCleanupEnumerator.moveNext())
                {
                    this.cleanupReservationTransactionsInCompany(companiesToCleanupEnumerator.current());
                }

                this.instrumentationLogger().archivedTransactionsCleanupActivities().logCleanupMetadata(
                    activityContext,
                    stopWatch.ElapsedMilliseconds);
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::Error)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::isExceptionErrorCausedBySQLError(infologLine)
                && ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReservationTransactionsInCompany</Name>
				<Source><![CDATA[
    private void cleanupReservationTransactionsInCompany(DataAreaId _dataAreaId)
    {
        using (var activityContext = this.instrumentationLogger().archivedTransactionsCleanupActivities().executeReservationTransactionsCleanup())
        {
            int64 totalDeletedRows = 0;
            var stopWatch = System.Diagnostics.Stopwatch::StartNew();

            changecompany(_dataAreaId)
            {
                // Each company can have different settings.
                WHSParameters whsParameters = WHSParameters::find();

                if (whsParameters.CleanupArchivedWarehouseReservationTransactions == NoYes::Yes)
                {
                    utcdatetime maxDateTimeToKeep = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -whsParameters.CleanupArchivedWarehouseReservationTransactionsAfterDays);

                    WHSInventoryTransactionArchiveView transactionArchiveView;

                    if (isWHSInventoryTransactionArchivedCleanupQueryFlightEnabled)
                    {
                        while select sum(InventoryQuantity)
                            from transactionArchiveView
                            group by ReferenceCategory, ReferenceId, ItemId,
                                InventSiteId, InventLocationId, WMSLocationId, LicensePlateId, InventStatusId,                                  // storage dimensions
                                configId, InventColorId, InventStyleId, InventSizeId, InventVersionId,                                          // product dimensions
                                InventBatchId, InventSerialId, InventGTDId_RU, InventOwnerId_RU, InventProfileId_RU,                            // tracking dimensions and RU-specific
                                InventDimension1, InventDimension2, InventDimension3, InventDimension4, InventDimension5, InventDimension6,     // extensibility dimensions
                                InventDimension7, InventDimension8, InventDimension9, InventDimension10, InventDimension11, InventDimension12   // extensibility dimensions
                            where (    transactionArchiveView.Type == WHSInventoryTransactionTypeEnum::PhysicalReservation
                                    || transactionArchiveView.Type == WHSInventoryTransactionTypeEnum::RemovedPhysicalReservation)
                                && transactionArchiveView.ArchivedDateTime <= maxDateTimeToKeep // CreatedDateTime is not created for the view and is ignored.
                        {
                            totalDeletedRows += this.deleteReservations(transactionArchiveView, maxDateTimeToKeep);
                        }
                    } 
                    else
                    {
                        while select sum(InventoryQuantity)
                            from transactionArchiveView
                            group by ReferenceCategory, ReferenceId, ItemId,
                                InventSiteId, InventLocationId, WMSLocationId, LicensePlateId, InventStatusId,                                  // storage dimensions
                        configId, InventColorId, InventStyleId, InventSizeId, InventVersionId,                                          // product dimensions
                        InventBatchId, InventSerialId, InventGTDId_RU, InventOwnerId_RU, InventProfileId_RU,                            // tracking dimensions and RU-specific
                        InventDimension1, InventDimension2, InventDimension3, InventDimension4, InventDimension5, InventDimension6,     // extensibility dimensions
                        InventDimension7, InventDimension8, InventDimension9, InventDimension10, InventDimension11, InventDimension12   // extensibility dimensions
                        where (    transactionArchiveView.Type == WHSInventoryTransactionTypeEnum::PhysicalReservation
                                    || transactionArchiveView.Type == WHSInventoryTransactionTypeEnum::RemovedPhysicalReservation)
                                && transactionArchiveView.CreatedDateTime <= maxDateTimeToKeep
                        {
                            totalDeletedRows += this.deleteReservations(transactionArchiveView, maxDateTimeToKeep);
                        }
                    }
                }
            }

            this.instrumentationLogger().archivedTransactionsCleanupActivities().logReservationCleanupMetadata(
                activityContext,
                _dataAreaId,
                totalDeletedRows,
                stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReservations</Name>
				<Source><![CDATA[
    private int64 deleteReservations(WHSInventoryTransactionArchiveView _transactionArchiveView, utcdatetime _maxDateTimeToKeep)
    {
        int64 deletedRows = 0;

        if (_transactionArchiveView.InventoryQuantity == 0)
        {
            ttsbegin;

            WHSInventoryTransactionArchive transactionArchive;

            if (isWHSInventoryTransactionArchivedCleanupIndexHintFlightEnabled)
            {
                CommonExtensions::SetSqlDeleteIndexHint(transactionArchive, indexStr(WHSInventoryTransactionArchive, ReferenceItemTypeIdx));
            }

            if (isWHSInventoryTransactionArchivedCleanupSkipFlight)
            {
                transactionArchive.skipDataMethods(true);
                transactionArchive.skipBusinessEvents(true);
                transactionArchive.skipDatabaseLog(true);
            }

            delete_from transactionArchive
                where (    transactionArchive.Type == WHSInventoryTransactionTypeEnum::PhysicalReservation
                        || transactionArchive.Type == WHSInventoryTransactionTypeEnum::RemovedPhysicalReservation)
                    && transactionArchive.CreatedDateTime <= _maxDateTimeToKeep
                    && transactionArchive.ReferenceCategory == _transactionArchiveView.ReferenceCategory
                    && transactionArchive.ReferenceId == _transactionArchiveView.ReferenceId
                    && transactionArchive.ItemId == _transactionArchiveView.ItemId
                    // storage dimensions.
                    && transactionArchive.InventSiteId == _transactionArchiveView.InventSiteId
                    && transactionArchive.InventLocationId == _transactionArchiveView.InventLocationId
                    && transactionArchive.WMSLocationId == _transactionArchiveView.WMSLocationId
                    && transactionArchive.LicensePlateId == _transactionArchiveView.LicensePlateId
                    && transactionArchive.InventStatusId == _transactionArchiveView.InventStatusId
                    // product dimensions.
                    && transactionArchive.configId == _transactionArchiveView.configId
                    && transactionArchive.InventColorId == _transactionArchiveView.InventColorId
                    && transactionArchive.InventStyleId == _transactionArchiveView.InventStyleId
                    && transactionArchive.InventSizeId == _transactionArchiveView.InventSizeId
                    && transactionArchive.InventVersionId == _transactionArchiveView.InventVersionId
                    // tracking dimensions and RU-specific.
                    && transactionArchive.InventBatchId == _transactionArchiveView.InventBatchId
                    && transactionArchive.InventSerialId == _transactionArchiveView.InventSerialId
                    && transactionArchive.InventGTDId_RU == _transactionArchiveView.InventGTDId_RU
                    && transactionArchive.InventOwnerId_RU == _transactionArchiveView.InventOwnerId_RU
                    && transactionArchive.InventProfileId_RU == _transactionArchiveView.InventProfileId_RU
                    // extensibility dimensions.
                    && transactionArchive.InventDimension1 == _transactionArchiveView.InventDimension1
                    && transactionArchive.InventDimension2 == _transactionArchiveView.InventDimension2
                    && transactionArchive.InventDimension3 == _transactionArchiveView.InventDimension3
                    && transactionArchive.InventDimension4 == _transactionArchiveView.InventDimension4
                    && transactionArchive.InventDimension5 == _transactionArchiveView.InventDimension5
                    && transactionArchive.InventDimension6 == _transactionArchiveView.InventDimension6
                    && transactionArchive.InventDimension7 == _transactionArchiveView.InventDimension7
                    && transactionArchive.InventDimension8 == _transactionArchiveView.InventDimension8
                    && transactionArchive.InventDimension9 == _transactionArchiveView.InventDimension9
                    && transactionArchive.InventDimension10 == _transactionArchiveView.InventDimension10
                    && transactionArchive.InventDimension11 == _transactionArchiveView.InventDimension11
                    && transactionArchive.InventDimension12 == _transactionArchiveView.InventDimension12
                ;

            deletedRows += transactionArchive.RowCount();

            ttscommit;
        }
        return deletedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompaniesToCleanup</Name>
				<Source><![CDATA[
    private Set getCompaniesToCleanup()
    {
        Set companiesToCleanup = new Set(Types::String);

        WHSInventoryTransactionArchive transactionArchive;

        while select crossCompany dataAreaId
            from transactionArchive
            group by dataAreaId
        {
            companiesToCleanup.add(transactionArchive.DataAreaId);
        }

        return companiesToCleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the description for the batch job.
    /// </summary>
    /// <returns>
    /// The description for the batch job.
    /// </returns>
    [Hookable(false)]
    public static ClassDescription description()
    {
        return "@WHSInventory:WHSInventoryTransactionArchivedCleanup_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates recurrence.
    /// </summary>
    /// <param name = "_batchJobId">Batch job RecId.</param>
    /// <param name = "_recurrence">Recurrence data that needs to be valided.</param>
    /// <returns>true if _recurrence is valid; otherwise, false.</returns>
    [Hookable(false)]
    public boolean validateRecurrence(RecId _batchJobId, SysRecurrenceData _recurrence)
    {
        return WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>