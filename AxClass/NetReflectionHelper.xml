<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NetReflectionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class provides reflection calls.
/// </summary>
public static class NetReflectionHelper
{
    private static Map methodInfoCache = new Map(Types::Container, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>structuralEquals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares two collections.
    /// </summary>
    /// <param name = "_object1">The first collection.</param>
    /// <param name = "_object2">The second collection.</param>
    /// <returns>True if equal; otherwise false.</returns>
    public static boolean structuralEquals(System.Collections.IStructuralEquatable _object1, System.Collections.IStructuralEquatable _object2)
    {
        return _object1.Equals(_object2, System.Collections.StructuralComparisons::StructuralEqualityComparer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMethodInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the MethodInfo.
    /// </summary>
    /// <param name = "_objectType">The object type.</param>
    /// <param name = "_methodName">The method name.</param>
    /// <param name = "_genericArguments">The list of generic arguments.</param>
    /// <param name = "_parametersTypes">The list of parameters types.</param>
    /// <returns>The MethodInfo.</returns>
    public static System.Reflection.MethodInfo findMethodInfo(System.Type _objectType, str _methodName, System.Type[] _genericArguments, System.Type[] _parametersTypes = null)
    {
        System.Reflection.MethodInfo methodInfo = null;

        container cacheKey = [_objectType, _methodName, _genericArguments, _parametersTypes];

        if (methodInfoCache.exists(cacheKey))
        {
            methodInfo = methodInfoCache.lookup(cacheKey) as System.Reflection.MethodInfo;
        }
        else
        {
            System.Collections.IEnumerator methodsEnumerator = _objectType.GetMethods().GetEnumerator();

            while (methodsEnumerator.MoveNext())
            {
                System.Reflection.MethodInfo currentMethodInfo = methodsEnumerator.Current as System.Reflection.MethodInfo;
                if (currentMethodInfo.Name == _methodName)
                {
                    System.Type[] genericArguments = currentMethodInfo.GetGenericArguments();
                    if (genericArguments.Length == _genericArguments.Length)
                    {
                        System.Reflection.MethodInfo genericMethodInfo = null;

                        try
                        {
                            genericMethodInfo = currentMethodInfo.MakeGenericMethod(_genericArguments);
                        }
                        catch
                        {
                        }

                        if (genericMethodInfo != null)
                        {
                            System.Reflection.ParameterInfo[] parameters = genericMethodInfo.GetParameters();

                            if (parameters.Length == 0
                                && (_parametersTypes == null || _parametersTypes.Length == 0))
                            {
                                methodInfo = genericMethodInfo;
                                break;
                            }
                            else if (_parametersTypes != null
                                && parameters.Length == _parametersTypes.Length)
                            {
                                System.Collections.ArrayList parametersTypes = new System.Collections.ArrayList();
                                for (int idx = 0; idx < parameters.Length; idx++)
                                {
                                    System.Reflection.ParameterInfo parameter = parameters.GetValue(idx) as System.Reflection.ParameterInfo;
                                    parametersTypes.Add(parameter.ParameterType);
                                }

                                if (NetReflectionHelper::structuralEquals(parametersTypes.ToArray(), _parametersTypes))
                                {
                                    methodInfo = genericMethodInfo;
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            if (methodInfo != null)
            {
                methodInfoCache.insert(cacheKey, methodInfo);
            }
        }

        return methodInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokerGenericMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the generic method.
    /// </summary>
    /// <param name = "_instance">The instance.</param>
    /// <param name = "_methodName">The method name.</param>
    /// <param name = "_genericArgumentsStr">The list of generic arguments.</param>
    /// <param name = "_parametersTypesSre">The list of paramaters types.</param>
    /// <param name = "_parameters">The list of parameters.</param>
    /// <returns>The execution result.</returns>
    public static System.Object invokerGenericMethod(System.Object _instance, str _methodName, container _genericArgumentsStr, container _parametersTypesSre = conNull(), container _parameters = conNull())
    {
        if (_genericArgumentsStr == conNull()
            || conLen(_genericArgumentsStr) == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        System.Type[] genericArguments = new System.Type[conLen(_genericArgumentsStr)]();
        for (int idx = 0; idx < conLen(_genericArgumentsStr); idx++)
        {
            str typeName = conPeek(_genericArgumentsStr, idx + 1);
            genericArguments.SetValue(System.Type::GetType(typeName, true), idx);
        }

        System.Type[] parametersTypes = null;

        if (_parametersTypesSre != conNull()
            && conLen(_parametersTypesSre) > 0)
        {
            parametersTypes = new System.Type[conLen(_parametersTypesSre)]();
            for (int idx = 0; idx < conLen(_parametersTypesSre); idx++)
            {
                str typeName = conPeek(_parametersTypesSre, idx + 1);
                parametersTypes.SetValue(System.Type::GetType(typeName, true), idx);
            }
        }

        return NetReflectionHelper::invokerGenericMethodImpl(_instance, _methodName, genericArguments, parametersTypes, _parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokerGenericMethodImpl</Name>
				<Source><![CDATA[
    private static System.Object invokerGenericMethodImpl(System.Object _instance, str _methodName, System.Type[] _genericArguments, System.Type[] _parametersTypes = null, System.Object[] _parameters = null)
    {
        System.Object result = null;
            
        System.Reflection.MethodInfo methodInfo = NetReflectionHelper::findMethodInfo(_instance.GetType(), _methodName, _genericArguments, _parametersTypes);
        if (methodInfo != null)
        {
            System.Collections.ArrayList normalizedParameters = new System.Collections.ArrayList();
            if (_parametersTypes != null)
            {
                for (int idx = 0; idx < _parametersTypes.Length; idx++)
                {
                    normalizedParameters.Add(_parameters == null || _parameters.Length < idx
                        ? System.Type::Missing
                        : _parameters.GetValue(idx));
                }
            }
            try
            {
                result = methodInfo.Invoke(_instance, normalizedParameters.ToArray());
            }
            catch
            {
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>