<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalculatingWIPEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdCalculatingWIPEngine_RU
{
    ProdId                  prodId;
    ProdTable               prodTable;
    InventTable             prodInventTable;

    CostAmount              receiptCostAmount;

    ProdReportedGood        prodReportedGood;

    OprNum                  firstOprNum;

    CurrencyCode            standardCurrency;
    CurrencyCode            currencySec;

    Voucher                 voucher;
    TransDate               calculationDate;

    InventCostItemDim       inventCostItemDim;
    InventTransCurrency_RU  inventTransCurrency;

    LedgerVoucher           ledgerVoucher;

    Map                     mapInventTable;
    Map                     mapInventModelGroup;

    Voucher                 voucherPhysical;

    boolean                 isEndJob;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustCost</Name>
				<Source><![CDATA[
    protected void adjustCost(InventTransId _inventTransId,
                              Amount        _diffCostAmount,
                              InventQty     _totalQty)
    {
        InventAdjustAllocate    adjustAllocate;
        InventTrans             inventTrans;

        if (! _diffCostAmount || ! _totalQty)
            return;

        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            adjustAllocate  = new InventAdjustAllocate(_totalQty, _diffCostAmount);
        }
        else
        {
            adjustAllocate  = new InventAdjustAllocate(_totalQty, CurrencyExchangeHelper::curAmount(_diffCostAmount, currencySec, calculationDate));
        }

        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(_inventTransId);

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin   == inventTransOrigin.RecId  &&
                  inventTrans.StatusReceipt       <= StatusReceipt::Purchased &&
                  inventTrans.StatusIssue         <= StatusIssue::Sold        &&
                  inventTrans.ValueOpen           == InventTransOpen::Yes     &&
                  inventTrans.PackingSlipReturned == NoYes::No                &&
                ! adjustAllocate.isAllocated()
        {
            this.createAdjustSettlement(inventTrans, adjustAllocate.calcAdjustment(inventTrans), _totalQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPost</Name>
				<Source><![CDATA[
    protected void adjustPost()
    {
        InventAdjustPost adjustPost;

        if (inventCostItemDim != null)
            return;

        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            adjustPost = new InventAdjustPost(voucher,
                                              calculationDate,
                                              InventAdjustmentSpec::ItemNum,
                                              LedgerTransTxt::ProdHistoricalCostAdjustment,
                                              NoYes::No,
                                              '',
                                              true);
        }
        else
        {
            adjustPost = new InventAdjustPostSecCur_RU(voucher,
                                                       calculationDate,
                                                       InventAdjustmentSpec::ItemNum,
                                                       LedgerTransTxt::ProdHistoricalCostAdjustment,
                                                       NoYes::No,
                                                       '',
                                                       true);
        }

        adjustPost.updateNow(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostFactAmounts</Name>
				<Source><![CDATA[
    protected void calcCostFactAmounts()
    {
        Error::missingOverride(funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInitialData</Name>
				<Source><![CDATA[
    protected void calcInitialData()
    {
        Error::missingOverride(funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    protected CostAmount costValue(InventTrans _inventTrans)
    {
        InventSettlement inventSettlement;

        if (this.isUpdatedFinancialLater(_inventTrans))
            return 0;

        select sum(CostAmountAdjustment) from inventSettlement
            where inventSettlement.TransRecId               == _inventTrans.RecId   &&
                  inventSettlement.InventTransCurrency_RU   == inventTransCurrency  &&
                  inventSettlement.TransDate                >  calculationDate      &&
                  inventSettlement.Cancelled                == NoYes::No            &&
                  inventSettlement.CostAmountAdjustment     != 0;

        if (inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
        {
            return _inventTrans.costValueSecCur_RU() - CurrencyExchangeHelper::amount(inventSettlement.CostAmountAdjustment, currencySec);
        }

        return _inventTrans.costValue() - CurrencyExchangeHelper::amount(inventSettlement.CostAmountAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustSettlement</Name>
				<Source><![CDATA[
    protected void createAdjustSettlement(InventTrans   _inventTrans,
                                          CostAmount    _adjustment,
                                          InventQty     _inventQty)
    {
        InventSettlement    inventSettlementUpdate;

        Amount              adjustment = _adjustment;

        if (! adjustment)
            return;

        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            _inventTrans.CostAmountAdjustment += adjustment;
        }
        else
        {
            adjustment = CurrencyExchangeHelper::amountMST2MSTSecond_RU(adjustment, calculationDate);
            _inventTrans.CostAmountSecCurAdjustment_RU += adjustment;
        }

        InventSettlement inventSettlementInsert = this.initInventSettlement(_inventTrans, adjustment);

        select forupdate firstonly inventSettlementUpdate
            where inventSettlementUpdate.TransRecId                  == _inventTrans.RecId                                  &&
                  inventSettlementUpdate.TransDate                   == inventSettlementInsert.TransDate                    &&
                  inventSettlementUpdate.Voucher                     == inventSettlementInsert.Voucher                      &&
                  inventSettlementUpdate.SettleModel                 == inventSettlementInsert.SettleModel                  &&
                  inventSettlementUpdate.SettleType                  == inventSettlementInsert.SettleType                   &&
                  inventSettlementUpdate.OperationsLedgerDimension   == inventSettlementInsert.OperationsLedgerDimension    &&
                  inventSettlementUpdate.OperationsPosting           == inventSettlementInsert.OperationsPosting            &&
                  inventSettlementUpdate.BalanceSheetLedgerDimension == inventSettlementInsert.BalanceSheetLedgerDimension  &&
                  inventSettlementUpdate.BalanceSheetPosting         == inventSettlementInsert.BalanceSheetPosting          &&
                  inventSettlementUpdate.Cancelled                   == 0;

        if (inventSettlementUpdate.RecId)
        {
            inventSettlementUpdate.CostAmountAdjustment += adjustment;
            if (inventSettlementUpdate.CostAmountAdjustment)
            {
                inventSettlementUpdate.update();
            }
            else
            {
                inventSettlementUpdate.delete();
            }
        }
        else
        {
            inventSettlementInsert.insert();
        }

        CostAmount costAmount = this.costValue(_inventTrans);
        if (((_inventQty > 0 && costAmount < 0) || (_inventQty < 0 && costAmount > 0)) ||
            InventAdj::isOnhandAdjusted(_inventTrans.InventTransOrigin, 0, '', inventTransCurrency))
        {
            this.createErrorAdjustment(_inventTrans, -adjustment);
        }
        else
        if (this.isItemStandardCost(_inventTrans.ItemId))
        {
            _inventTrans.updateStdCostAdjust(-adjustment, calculationDate, voucher, _inventTrans.dimensionFinancialDefaultDimension(), inventTransCurrency);
        }
        else
        {
            this.updateCostAmountStd(_inventTrans);
        }

        _inventTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorAdjustment</Name>
				<Source><![CDATA[
    protected void createErrorAdjustment(InventTrans    _inventTrans,
                                         CostAmount     _adjustment)
    {
        if (! _adjustment)
            return;

        InventSettlement inventSettlement = this.initInventSettlement(_inventTrans, _adjustment, true);
        inventSettlement.insert();

        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            _inventTrans.CostAmountAdjustment += _adjustment;
        }
        else
        {
            _inventTrans.CostAmountSecCurAdjustment_RU += _adjustment;
        }

        _inventTrans.skipTTSCheck(true);
        this.updateCostAmountStd(_inventTrans);
        _inventTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdReceiptAdjust</Name>
				<Source><![CDATA[
    protected void createProdReceiptAdjust()
    {
        CostAmount          adjustment;

        InventQty           financialQty;

        InventTrans         inventTrans;

        InventTransIdSum    transIdSum;

        if (prodReportedGood && receiptCostAmount > 0)
        {
            InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(prodTable.InventTransId);

            if (! isEndJob)
            {
                transIdSum = InventTransIdSum_DataPhysical_RU::newDataPhysical(prodTable.InventTransId, calculationDate);

                select sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId  &&
                          inventTrans.StatusReceipt         == StatusReceipt::Purchased &&
                          inventTrans.DateFinancial         <= calculationDate          &&
                          inventTrans.StatusIssue           == StatusIssue::None        &&
                          inventTrans.PackingSlipReturned   == NoYes::No;
                financialQty    = inventTrans.Qty;
            }
            else
            {
                transIdSum      = InventTransIdSum::newTransOriginId(inventTransOrigin.RecId);
                financialQty    = transIdSum.financial();
            }

            CostAmount costAmountTotal = receiptCostAmount;
            CostAmount costAmountRemain = costAmountTotal;

            InventQty qtyTotal = financialQty + transIdSum.physical();
            InventQty qtyRemain = qtyTotal;

            if (financialQty && costAmountTotal)
            {
                while select forupdate inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId      &&
                          inventTrans.StatusReceipt         == StatusReceipt::Purchased     &&
                          (inventTrans.DateFinancial        <= calculationDate || isEndJob) &&
                          inventTrans.StatusIssue           == StatusIssue::None            &&
                          inventTrans.PackingSlipReturned   == NoYes::No
                {
                    if (inventTrans.Qty >= qtyRemain)
                    {
                        adjustment = CurrencyExchangeHelper::amount(costAmountRemain);
                    }
                    else
                    {
                        adjustment = CurrencyExchangeHelper::amount(costAmountTotal * inventTrans.Qty / qtyTotal);
                        adjustment = abs(adjustment) > abs(costAmountRemain) ? costAmountRemain : adjustment;
                    }

                    CostAmount costAmount = inventTrans.costValue();

                    ProdWIPHistoricalCostTable_RU::createProductionRecord(prodTable.ProdId,
                                                                          prodTable.ItemId,
                                                                          inventTrans.DateFinancial,
                                                                          inventTrans.Voucher,
                                                                          calculationDate,
                                                                          voucher,
                                                                          adjustment,
                                                                          adjustment - costAmount,
                                                                          isEndJob,
                                                                          inventCostItemDim ? true : false);

                    costAmountRemain    -= adjustment;
                    adjustment          = adjustment - costAmount;

                    this.createAdjustSettlement(inventTrans, adjustment, qtyTotal);

                    qtyRemain -= inventTrans.Qty;
                }
            }

            receiptCostAmount = costAmountRemain;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseAdjust</Name>
				<Source><![CDATA[
    protected void createReleaseAdjust(ProdReleaseTrans_RU  _prodReleaseTrans,
                                       Amount               _totalTransAmount,
                                       InventQty            _totalQty)
    {
        if ((_totalTransAmount > 0 && _totalQty > 0) || (_totalTransAmount < 0 && _totalQty < 0))
        {
            Amount diffCostAmount = CurrencyExchangeHelper::amount(_totalTransAmount - ProdWIPHistoricalCostTable_RU::lastReleaseCostAmount(_prodReleaseTrans.RecId));

            if (inventCostItemDim != null)
            {
                // others invent transactions will be recalced in the next iteration of the inventory closing by using reference and return lot id
                inventCostItemDim.updateTransIdReceiptForWIPCalc_RU(_prodReleaseTrans.InventTransId, diffCostAmount, voucherPhysical);
            }
            else
            {
                this.adjustCost(_prodReleaseTrans.InventTransId, diffCostAmount, _totalQty);
                if (_prodReleaseTrans.AutodetectionInventTransId)
                {
                    this.adjustCost(_prodReleaseTrans.AutodetectionInventTransId, -diffCostAmount, -_totalQty);
                }
            }

            ProdWIPHistoricalCostTable_RU::createReleaseRecord(prodId,
                                                               _prodReleaseTrans.ItemId,
                                                               _prodReleaseTrans.RecId,
                                                               calculationDate,
                                                               voucher,
                                                               _totalTransAmount,
                                                               diffCostAmount,
                                                               isEndJob,
                                                               inventCostItemDim ? true : false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSettlement</Name>
				<Source><![CDATA[
    protected InventSettlement initInventSettlement(InventTrans _inventTrans,
                                                    CostAmount  _adjustment,
                                                    boolean     _errorAdjustment = false)
    {
        InventSettlement    inventSettlement;
        InventTransPosting  inventTransPosting;

        select firstonly * from inventTransPosting
            index hint DateVoucherTransIdx
            where inventTransPosting.Voucher                 == _inventTrans.Voucher            &&
                  inventTransPosting.TransDate               == _inventTrans.DateFinancial      &&
                  inventTransPosting.InventTransOrigin       == _inventTrans.InventTransOrigin  &&
                  inventTransPosting.InventTransPostingType  == InventTransPostingType::Financial;

        inventSettlement.initFromInventTrans(_inventTrans, inventTransPosting.DefaultDimension);

        inventSettlement.TransDate               = calculationDate;
        inventSettlement.Voucher                 = voucher;

        inventSettlement.CostAmountAdjustment    = _adjustment;
        inventSettlement.SettleModel             = InventSettleModel::Adjustment;
        inventSettlement.SettleType              = InventSettleType::CompleteAdjustment;
        inventSettlement.InventTransCurrency_RU  = inventTransCurrency;

        if (inventTransPosting.PostingType != LedgerPostingType::None)
        {
            inventSettlement.BalanceSheetPosting         = inventTransPosting.PostingType;
            inventSettlement.BalanceSheetLedgerDimension = inventTransPosting.LedgerDimension;
            if (! inventSettlement.BalanceSheetLedgerDimension)
            {
               inventSettlement.BalanceSheetLedgerDimension = InventAdj::errorAccountBalanceSheet(_inventTrans.ItemId,
                                                                                                  this.inventTable(_inventTrans.ItemId).itemGroupId(),
                                                                                                  _inventTrans.Qty,
                                                                                                  _inventTrans.inventDim());
            }

            inventSettlement.OperationsPosting      = inventTransPosting.PostingTypeOffset;
            if (! inventSettlement.OperationsPosting || _errorAdjustment)
                inventSettlement.OperationsPosting  = InventAdj::errorPostingOperations(_adjustment);

            inventSettlement.OperationsLedgerDimension = inventTransPosting.OffsetLedgerDimension;
            if (! inventSettlement.OperationsLedgerDimension || _errorAdjustment)
            {
                inventSettlement.OperationsLedgerDimension = InventAdj::errorAccountOperations(_inventTrans.ItemId,
                                                                                               this.inventTable(_inventTrans.ItemId).itemGroupId(),
                                                                                               _adjustment,
                                                                                               _inventTrans.inventDim());
            }
        }

        return inventSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    public void initValues()
    {
        standardCurrency    = CompanyInfoHelper::standardCurrency();
        currencySec         = CompanyInfoHelper::secondaryCurrency_RU();

        prodReportedGood    = prodTable.reportedFinishedGood();

        firstOprNum         = (select firstonly OprNum from prodRoute order by OprNum where prodRoute.ProdId == prodTable.ProdId).OprNum;

        if (inventCostItemDim == null)
        {
            mapInventTable      = new Map(Types::String, Types::Record);
            mapInventModelGroup = new Map(Types::String, Types::Record);
        }

        prodInventTable     = this.inventTable(prodTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    protected InventTable inventTable(ItemId _itemId)
    {
        InventTable inventTable;

        if (mapInventTable.exists(_itemId))
            return mapInventTable.lookup(_itemId);

        inventTable.disableCache(true);

        select firstonly inventTable
            where inventTable.ItemId == _itemId;

        inventTable.disableCache(false);

        mapInventTable.insert(_itemId, inventTable);

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemStandardCost</Name>
				<Source><![CDATA[
    protected boolean isItemStandardCost(ItemId _itemId)
    {
        InventModelGroup inventModelGroup;

        if (mapInventModelGroup.exists(_itemId))
        {
            inventModelGroup = mapInventModelGroup.lookup(_itemId);
            return inventModelGroup.StandardCost;
        }

        inventModelGroup = this.inventTable(_itemId).modelGroup();
        mapInventModelGroup.insert(_itemId, inventModelGroup);

        return inventModelGroup.StandardCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdatedFinancialLater</Name>
				<Source><![CDATA[
    protected boolean isUpdatedFinancialLater(InventTrans _inventTrans)
    {
        return _inventTrans.DateFinancial > calculationDate && _inventTrans.isUpdatedFinancial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopProdRelease</Name>
				<Source><![CDATA[
    protected void loopProdRelease()
    {
        Error::missingOverride(funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationDate</Name>
				<Source><![CDATA[
    public TransDate parmCalculationDate(TransDate _calculationDate = calculationDate)
    {
        calculationDate = _calculationDate;

        return calculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostItemDim</Name>
				<Source><![CDATA[
    public InventCostItemDim parmInventCostItemDim(InventCostItemDim _inventCostItemDim = inventCostItemDim)
    {
        inventCostItemDim = _inventCostItemDim;

        return inventCostItemDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;

        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEndJob</Name>
				<Source><![CDATA[
    public boolean parmIsEndJob(boolean _isEndJob = isEndJob)
    {
        isEndJob = _isEndJob;

        return isEndJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapInventModelGroup</Name>
				<Source><![CDATA[
    public Map parmMapInventModelGroup(Map _mapInventModelGroup = mapInventModelGroup)
    {
        mapInventModelGroup = _mapInventModelGroup;

        return mapInventModelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapInventTable</Name>
				<Source><![CDATA[
    public Map parmMapInventTable(Map _mapInventTable = mapInventTable)
    {
        mapInventTable = _mapInventTable;

        return mapInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId      = _prodId;
        prodTable   = ProdTable::find(prodId);

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherPhysical</Name>
				<Source><![CDATA[
    public Voucher parmVoucherPhysical(Voucher _voucherPhysical = voucherPhysical)
    {
        voucherPhysical = _voucherPhysical;

        return voucherPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCostAmount</Name>
				<Source><![CDATA[
    public CostAmount receiptCostAmount()
    {
        return receiptCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected void run()
    {
        #OCCRetryCount

        ProdWIPCancelCallerType_RU wipCancelCallerType = (inventCostItemDim != null) ? ProdWIPCancelCallerType_RU::InventClosing : ProdWIPCancelCallerType_RU::WIPCalculation;

        if (! this.validate())
        {
            if (inventCostItemDim != null)
            {
                error("@SYS25904");
                return;
            }

            throw error("@SYS25904");
        }
        try
        {
            if (! inventCostItemDim)
                ttsbegin;

            this.initValues();

            ProdCalculatingWIPCancelEngine_RU::newFromWIPCalculation(prodId, calculationDate, wipCancelCallerType, inventCostItemDim != null ? voucher : '').run();

            this.calcInitialData();
            this.calcCostFactAmounts();
            this.loopProdRelease();

            this.createProdReceiptAdjust();

            this.adjustPost();

            if (! inventCostItemDim)
                ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostAmountStd</Name>
				<Source><![CDATA[
    protected void updateCostAmountStd(InventTrans _inventTrans)
    {
        if (_inventTrans.Qty > 0 && ! this.isItemStandardCost(_inventTrans.ItemId))
        {
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
                _inventTrans.CostAmountStd          = _inventTrans.costValue();
            }
            else
            {
                _inventTrans.CostAmountStdSecCur_RU = _inventTrans.costValueSecCur_RU();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

        if (! ProdTable::exist(prodId))
            ret = checkFailed(strFmt(ProdTable::txtNotExist(), prodId));

        if (! calculationDate)
            ret = checkFailed("@GLS115872");

        if (! voucher)
            ret = checkFailed("@GLS115873");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdCalculatingWIPEngine_RU construct(ProdCalculatingMethod_RU _prodCalculatingMethod)
    {
        switch (_prodCalculatingMethod)
        {
            case ProdCalculatingMethod_RU::Normative:       return ProdCalculatingWIPNormative_RU::construct();
            case ProdCalculatingMethod_RU::Proportionally:  return ProdCalculatingWIPProportionally_RU::construct();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromInventClosing</Name>
				<Source><![CDATA[
    public static void runFromInventClosing(ProdId                  _prodId,
                                            TransDate               _transDate,
                                            Voucher                 _voucher,
                                            InventCostItemDim       _inventCostItemDim,
                                            InventTransCurrency_RU  _inventTransCurrency,
                                            Map                     _mapInventTable,
                                            Map                     _mapInventModelGroup,
                                            Voucher                 _voucherPhysical = '')
    {
        ProdTable                   prodTable = ProdTable::find(_prodId);

        ProdCalculatingWIPEngine_RU prodCalculatingWIPEngine = ProdCalculatingWIPEngine_RU::construct(prodTable.prodParametersDim().CalculatingMethod_RU);
        prodCalculatingWIPEngine.parmProdId(_prodId);
        prodCalculatingWIPEngine.parmInventCostItemDim(_inventCostItemDim);
        prodCalculatingWIPEngine.parmCalculationDate(_transDate);
        prodCalculatingWIPEngine.parmVoucher(_voucher);
        prodCalculatingWIPEngine.parmInventTransCurrency(_inventTransCurrency);
        prodCalculatingWIPEngine.parmMapInventModelGroup(_mapInventModelGroup);
        prodCalculatingWIPEngine.parmMapInventTable(_mapInventTable);
        prodCalculatingWIPEngine.parmVoucherPhysical(_voucherPhysical);
        prodCalculatingWIPEngine.parmIsEndJob(prodTable.RealDate && prodTable.RealDate <= _transDate);
        prodCalculatingWIPEngine.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromInventClosingCancel</Name>
				<Source><![CDATA[
    public static void runFromInventClosingCancel(ProdId    _prodId,
                                                  Voucher   _voucher,
                                                  TransDate _transDate)
    {
        ProdTable                   prodTable = ProdTable::find(_prodId);

        ProdCalculatingWIPEngine_RU prodCalculatingWIPEngine = ProdCalculatingWIPEngine_RU::construct(prodTable.prodParametersDim().CalculatingMethod_RU);
        prodCalculatingWIPEngine.parmProdId(_prodId);
        prodCalculatingWIPEngine.parmCalculationDate(_transDate);
        prodCalculatingWIPEngine.parmVoucher(_voucher);
        prodCalculatingWIPEngine.parmInventTransCurrency(InventTransCurrency_RU::PrimaryCur);
        prodCalculatingWIPEngine.parmIsEndJob(prodTable.RealDate && prodTable.RealDate <= _transDate);
        prodCalculatingWIPEngine.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromProdTable</Name>
				<Source><![CDATA[
    public static CostAmount runFromProdTable(ProdId        _prodId,
                                              LedgerVoucher _ledgerVoucher,
                                              boolean       _isEndJob)
    {
        ProdCalculatingWIPEngine_RU prodCalculatingWIPEngine = ProdCalculatingWIPEngine_RU::construct(ProdTable::find(_prodId).prodParametersDim().CalculatingMethod_RU);
        prodCalculatingWIPEngine.parmProdId(_prodId);
        prodCalculatingWIPEngine.parmLedgerVoucher(_ledgerVoucher);
        prodCalculatingWIPEngine.parmCalculationDate(_ledgerVoucher.findLedgerVoucherObject().parmTransDate());
        prodCalculatingWIPEngine.parmVoucher(_ledgerVoucher.findLedgerVoucherObject().parmSubledgerVoucher());
        prodCalculatingWIPEngine.parmInventTransCurrency(InventTransCurrency_RU::PrimaryCur);
        prodCalculatingWIPEngine.parmIsEndJob(_isEndJob);
        prodCalculatingWIPEngine.run();

        return prodCalculatingWIPEngine.receiptCostAmount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
