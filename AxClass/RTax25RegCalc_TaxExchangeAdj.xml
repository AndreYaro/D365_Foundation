<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_TaxExchangeAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25RegCalc_TaxExchangeAdj extends RTax25RegCalc implements BatchRetryable
{
    AmountMST                       totalExchAdjGain, totalExchAdjLoss,
                                    totalTypeExchAdjGain, totalTypeExchAdjLoss,
                                    totalCTA, totalCTL,
                                    totalTypeCTA, totalTypeCTL;
    DimensionAttribute              dimAttr;
    CustVendTrans                   custVendTrans;
    CustVendSettlement              custVendSettlement;
    EmplTrans_RU                    emplTrans;
    RecordSortedList                registerTransList;
    Counter                         transCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        RefRecId                lastProfitTableRecId;
        RTax25RegisterTrans_TaxExchangeAdj          regTrans;
        int                     i = 1;
        boolean                 loop;
        boolean                 firstIteration = false;
        ;

        try
        {
            ttsbegin;

            super();

            regQuery.addHeaderRecord(0, conNull(), 0, '', i);

            custVendTrans       = new DictTable(tableNum(CustTrans)).makeRecord();
            custVendSettlement  = new DictTable(tableNum(CustSettlement)).makeRecord();
            this.selectCustVendTrans();
            custVendTrans       = new DictTable(tableNum(VendTrans)).makeRecord();
            custVendSettlement  = new DictTable(tableNum(VendSettlement)).makeRecord();
            this.selectCustVendTrans();

            this.selectEmplTrans();

            this.progressInit('', transCount);

            loop = registerTransList.first(regTrans);
            while (loop)
            {
                progress.setText(strFmt("@GLS111968", regTrans.ExpenseIncomeType));

                if (regTrans.rTax25ProfitTable != lastProfitTableRecId || !firstIteration)
                {
                    if (firstIteration)
                    {
                        i++;
                        regQuery.addFooterRecord(lastProfitTableRecId,
                                                 this.createFooter(),
                                                 0,
                                                 lastProfitTableRecId ? strFmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449",
                                                 i);
                        totalTypeExchAdjGain = 0; totalTypeExchAdjLoss = 0;
                        totalTypeCTA         = 0; totalTypeCTL         = 0;
                    }
                    i++;
                    lastProfitTableRecId = regTrans.rTax25ProfitTable;
                    regQuery.addHeaderRecord(regTrans.rTax25ProfitTable,
                                             conNull(),
                                             0,
                                             regTrans.rTax25ProfitTable ?
                                             strFmt("@GLS104112", RTax25ProfitTable::find(regTrans.rTax25ProfitTable).ProfitId) : "@GLS104447",
                                             i);
                    firstIteration = true;
                }
                i++;

                regTrans.LineNumber = -regTrans.LineNumber;
                if (regQuery.getSortedList().find(regTrans))
                {
                    regQuery.getSortedList().del(regTrans);
                    regTrans.LineNumber = i;
                    regQuery.getSortedList().ins(regTrans);
                }
                totalTypeExchAdjGain   += regTrans.ExchAdjIncome;
                totalTypeExchAdjLoss   += regTrans.ExchAdjExpense;
                totalTypeCTA           += regTrans.CTAAmount;
                totalTypeCTL           += regTrans.CTLAmount;
                totalExchAdjGain       += regTrans.ExchAdjIncome;
                totalExchAdjLoss       += regTrans.ExchAdjExpense;
                totalCTA               += regTrans.CTAAmount;
                totalCTL               += regTrans.CTLAmount;

                lastProfitTableRecId = regTrans.rTax25ProfitTable;

                loop = registerTransList.next(regTrans);

                progress.incCount();
            }

            if (firstIteration)
            {
                i++;
                regQuery.addFooterRecord(lastProfitTableRecId,
                                         this.createFooter(),
                                         0,
                                         lastProfitTableRecId ? strFmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449",
                                         i);
            }

            totalTypeExchAdjGain   = totalExchAdjGain;
            totalTypeExchAdjLoss   = totalExchAdjLoss;
            totalTypeCTA           = totalCTA;
            totalTypeCTL           = totalCTL;
            i++;
            regQuery.addFooterRecord(0, this.createFooter(), 0, '', i);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExchAdj</Name>
				<Source><![CDATA[
    #define.Coeff(10000)
    private void calculateExchAdj(AmountMST         _exchAdj,
                                  RTax25Description _description,
                                  TransDate         _transDate,
                                  boolean           _lossGain = false)
    {
        RTax25RegisterTrans_TaxExchangeAdj  regTrans;
        RefRecId                profitTableRecId;
        Tax                     tax;
        AmountMST               exchAdjGain, exchAdjLoss,
                                ctA, ctL;
        CustVendExchAdjParm_W   exchAdjParm;
        ;

        exchAdjParm = emplTrans ? CustVendExchAdjParm_W::newFromParmEmpl(emplTrans) : CustVendExchAdjParm_W::newFromParm(custVendTrans, false, false, LedgerTransType::AdvanceAdjustment_RU);

        if (! _exchAdj)
            return;

        tax  = new Tax();

        if ((((custVendTrans.TableId == tableNum(CustTrans) && _exchAdj < 0) ||
              (custVendTrans.TableId == tableNum(VendTrans) && _exchAdj > 0)) && ! emplTrans) ||
            (emplTrans && ! _lossGain))

        {
            exchAdjGain = abs(_exchAdj);
            exchAdjLoss = 0;
            profitTableRecId = exchAdjParm.rTax25ExchAdjDimension().getProfitTableRecId(RTax25ExchAdjType::Gain);
            ctL = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                              _transDate,
                                              CompanyInfoHelper::standardCurrency(),
                                              exchAdjGain,
                                              TaxModuleType::Voucher);
            ctA = 0;
        }
        else
        {
            exchAdjLoss = abs(_exchAdj);
            exchAdjGain = 0;
            profitTableRecId = exchAdjParm.rTax25ExchAdjDimension().getProfitTableRecId(RTax25ExchAdjType::Loss);
            ctA = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                              _transDate,
                                              CompanyInfoHelper::standardCurrency(),
                                              exchAdjLoss,
                                              TaxModuleType::Voucher);
            ctL = 0;
        }

        transCount++;
        regTrans = regQuery.addBodyRecord(profitTableRecId,
                                                     [_transDate,
                                                      RTax25ProfitTable::find(profitTableRecId).Description,
                                                      emplTrans ? emplTrans.EmplAccount : custVendTrans.AccountNum,
                                                      exchAdjGain, ctA,
                                                      exchAdjLoss, ctL],
                                                      emplTrans ? emplTrans.TableId : custVendTrans.TableId,
                                                      emplTrans ? emplTrans.RecId : custVendTrans.RecId,
                                                      _description,
                                                      -(date2num(_transDate)*#Coeff + transCount));
        regTrans.LineNumber = -regTrans.LineNumber;
        registerTransList.ins(regTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container createFooter()
    {
        return [dateNull(), '', '', totalTypeExchAdjGain, totalTypeCTA, totalTypeExchAdjLoss, totalTypeCTL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;

        dimAttr = DimensionAttribute::find( RTax25Parameters::find().DimensionAttribute);
        registerTransList = new RecordSortedList(tableNum(RTax25RegisterTrans_TaxExchangeAdj));
        registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_TaxExchangeAdj, RTax25ProfitTable),
                                    fieldnum(RTax25RegisterTrans_TaxExchangeAdj, LineNumber));

        ret = super(_registerJournalTrans, _batch);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCustVendTrans</Name>
				<Source><![CDATA[
    private void selectCustVendTrans()
    {
        AmountMST               exchAdj;
        AmountCur               openAmount;
        CustVendTrans           offsetCustVendTrans;
        CustVendSettlement      reverseSettlement;
        int                     sign;
        ;

        while select custVendTrans
            order by TransDate asc
            where custVendTrans.TransDate    <= dateTo                          &&
                  custVendTrans.CurrencyCode != CompanyInfoHelper::standardCurrency() &&
                  custVendTrans.Prepayment
        {
            while select custVendSettlement
                where custVendSettlement.OffsetRecId == custVendTrans.RecId  &&
                      (custVendSettlement.CanBeReversed                      ||
                       custVendSettlement.ReversedRecId_RU)                  &&
                      (custVendSettlement.TransDate  >= dateFrom             &&
                       custVendSettlement.TransDate  <= dateTo)
            {
                offsetCustVendTrans = new DictTable(custVendTrans.TableId).makeRecord();
                reverseSettlement   = new DictTable(custVendSettlement.TableId).makeRecord();
                sign = 1;
                if (custVendSettlement.ReversedRecId_RU)
                {
                    select firstonly TransDate from reverseSettlement
                        where reverseSettlement.RecId == custVendSettlement.ReversedRecId_RU;
                    if (reverseSettlement.TransDate >= dateFrom &&
                        reverseSettlement.TransDate <= dateTo)
                        continue;

                    if (custVendSettlement.ReverseTrans_RU)
                    {
                        sign = -1;
                    }
                }

                select firstonly offsetCustVendTrans
                    where offsetCustVendTrans.RecId == custVendSettlement.TransRecId;

                if (! offsetCustVendTrans.RecId)
                    continue;

                if (custVendTrans.TransDate >= dateFrom && offsetCustVendTrans.TransDate >= dateFrom)
                {
                    exchAdj = CurrencyExchangeHelper::amount(abs(custVendSettlement.SettleAmountCur) * (ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, offsetCustVendTrans.TransDate) - ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, custVendTrans.TransDate)) / 100);
                }
                else if (custVendTrans.TransDate < dateFrom && offsetCustVendTrans.TransDate >= dateFrom)
                {
                    exchAdj = CurrencyExchangeHelper::amount(abs(custVendSettlement.SettleAmountCur) * (ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, offsetCustVendTrans.TransDate) - ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, dateFrom - 1)) / 100);
                }
                else
                {
                    continue;
                }
                this.calculateExchAdj(exchAdj, "@GLS112747", offsetCustVendTrans.TransDate);
            }

            CustVendExchAdjustment_W::reverseTransAmounts(custVendTrans);
            openAmount = abs(conPeek(CustVendExchAdjustment_W::getOpenAmounts(custVendTrans, dateTo), 1));
            if (openAmount)
            {
                sign = custVendTrans.Correct ? -1 : 1;
                if (custVendTrans.TransDate >= dateFrom)
                {
                    exchAdj = CurrencyExchangeHelper::amount(openAmount * (ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, dateTo) - ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, custVendTrans.TransDate)) / 100);
                }
                else
                {
                    exchAdj = CurrencyExchangeHelper::amount(openAmount * (ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, dateTo) - ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, dateFrom - 1)) / 100);
                }
                this.calculateExchAdj(exchAdj, "@GLS112748", dateTo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectEmplTrans</Name>
				<Source><![CDATA[
    private void selectEmplTrans()
    {
        AmountMST               advAdj;
        AmountCur               amountCur, settleCur;
        EmplSettlement_RU       emplSettlement, emplSettlementLast;
        TransDate               transDate, settleDate, settleDateLast;
        int                     sign;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        while select emplTrans
            order by TransDate asc
            where emplTrans.TransDate    <= dateTo                               &&
                  emplTrans.CurrencyCode != CompanyInfoHelper::standardCurrency()      &&
                 (emplTrans.TransType    == EmplTransSourceType_RU::Bank         ||
                  emplTrans.TransType    == EmplTransSourceType_RU::CashDoc)     &&
                 (emplTrans.Closed       == dateNull()                           ||
                 (emplTrans.Closed       >= dateFrom))                           &&
                 ((emplTrans.AmountCur   > 0 && ! emplTrans.Correct)             ||
                 (emplTrans.AmountCur    < 0 && emplTrans.Correct))
        {
            sign        = emplTrans.Correct ? -1 : 1;
            settleCur   = 0;
            settleDate  = dateNull();

            while select sum(SettleAmountCurDebit) from emplSettlement
                group by TransDate
                where emplSettlement.DebitRecId == emplTrans.RecId  &&
                      (emplSettlement.TransDate >= dateFrom         &&
                      emplSettlement.TransDate  <= dateTo)
            {
                settleDate = emplSettlement.TransDate;

                select sum(SettleAmountCurDebit), maxof(TransDate) from emplSettlementLast
                    where emplSettlementLast.DebitRecId == emplTrans.RecId &&
                          emplSettlementLast.TransDate  < settleDate;

                settleDateLast  = emplSettlementLast.TransDate;
                transDate       = (settleDateLast != dateNull()) ? settleDateLast :
                                  (emplTrans.TransDate >= dateFrom) ? emplTrans.TransDate : (dateFrom - 1);
                amountCur       = emplTrans.AmountCur - emplSettlementLast.SettleAmountCurDebit;

                advAdj = abs(amountCur) * (ExchangeRateHelper::exchRate(emplTrans.CurrencyCode, settleDate) -
                              ExchangeRateHelper::exchRate(emplTrans.CurrencyCode, transDate)) / 100;

                this.calculateExchAdj(advAdj, "@GLS114573", settleDate, (advAdj < 0));

                settleCur = emplSettlementLast.SettleAmountCurDebit + emplSettlement.SettleAmountCurDebit;
            }

            transDate = (settleDate != dateNull()) ? settleDate :
                        (emplTrans.TransDate >= dateFrom) ? emplTrans.TransDate : (dateFrom - 1);
            amountCur = emplTrans.AmountCur - settleCur;

            advAdj = abs(amountCur) * (ExchangeRateHelper::exchRate(emplTrans.CurrencyCode, dateTo) -
                              ExchangeRateHelper::exchRate(emplTrans.CurrencyCode, transDate)) / 100;

            this.calculateExchAdj(advAdj, "@GLS114573", dateTo, (advAdj < 0));
        }

        while select emplTrans
            order by TransDate asc
            where emplTrans.TransDate <= dateTo    &&
                  emplTrans.Reversed  == NoYes::No &&
                  emplTrans.TransType == EmplTransSourceType_RU::AdvanceAdj
        {
            select firstonly PostingType from generalJournalAccountEntry
                where generalJournalAccountEntry.PostingType == LedgerPostingType::AdvanceAdjustmentGain_RU  ||
                      generalJournalAccountEntry.PostingType == LedgerPostingType::AdvanceAdjustmentLoss_RU
                exists join generalJournalEntry
                    where generalJournalEntry.RecId          == generalJournalAccountEntry.GeneralJournalEntry
                       && generalJournalEntry.Ledger         == Ledger::current()
                exists join subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                       && subledgerVoucherGeneralJournalEntry.Voucher             == emplTrans.Voucher
                       && subledgerVoucherGeneralJournalEntry.AccountingDate      == emplTrans.TransDate
                       && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId   == emplTrans.DataAreaId;

            sign = emplTrans.Correct ? -1 : 1;
            advAdj = emplTrans.AmountMST;

            this.calculateExchAdj(advAdj, "@GLS114573", emplTrans.TransDate, (generalJournalAccountEntry.PostingType != LedgerPostingType::AdvanceAdjustmentLoss_RU));
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>