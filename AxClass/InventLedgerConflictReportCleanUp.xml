<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictReportCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventLedgerConflictReportCleanUp extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventLedgerConflictCleanUpLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addText("@SCM:InventLedgerConflictCleanUpWarning");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventLedgerConflictReportCleanUp reportCleanUp = new InventLedgerConflictReportCleanUp();

        if (reportCleanUp.prompt())
        {
            reportCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (!InventLedgerConflictReportCleanUpFeature::isEnabled())
        {
            return;
        }

        if (!InventLedgerConflictController::reportIsRunning())
        {
            ttsbegin;

            this.truncateInventLedgerConflictTmpBalance();
            this.truncateInventLedgerConflictTmpConflict();
            this.truncateInventLedgerConflictTmpPrintAsteriskNote();

            ttscommit;
        }
        else
        {
            warning("@SCM:InventLedgerConflictCleanUpReportRunning");
        }

        info("@SYS9265");
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpJobIsRunning</Name>
				<Source><![CDATA[
    public static boolean cleanUpJobIsRunning()
    {
        Batch    batch;
        BatchJob batchJob;

        select firstOnly crosscompany RecId from batchJob
            exists join batch
            where batch.BatchJobId == batchJob.RecId
                && (batch.status == BatchStatus::Waiting
                    || batch.status == BatchStatus::Executing)
                && batch.ClassNumber == classNum(InventLedgerConflictReportCleanUp);

        return batchJob.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateInventLedgerConflictTmpBalance</Name>
				<Source><![CDATA[
    private void truncateInventLedgerConflictTmpBalance()
    {
        DictTable dictTable = new DictTable(tablenum(InventLedgerConflictTmpBalance));

        if (dictTable && dictTable.enabled())
        {
            str sqlTableName = dictTable.name(DbBackend::Sql);
            SqlDataDictionary sqlTable = new SqlDataDictionary();

            if (sqlTable.tableExist(sqlTableName))
            {
                new SqlDataDictionaryPermission(methodstr(SqlDataDictionary, tableTruncate)).assert();
                sqlTable.tableTruncate(tablenum(InventLedgerConflictTmpBalance), false);
                CodeAccessPermission::revertAssert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateInventLedgerConflictTmpConflict</Name>
				<Source><![CDATA[
    private void truncateInventLedgerConflictTmpConflict()
    {
        DictTable dictTable = new DictTable(tablenum(InventLedgerConflictTmpConflict));

        if (dictTable && dictTable.enabled())
        {
            str sqlTableName = dictTable.name(DbBackend::Sql);
            SqlDataDictionary sqlTable = new SqlDataDictionary();

            if (sqlTable.tableExist(sqlTableName))
            {
                new SqlDataDictionaryPermission(methodstr(SqlDataDictionary, tableTruncate)).assert();
                sqlTable.tableTruncate(tablenum(InventLedgerConflictTmpConflict), false);
                CodeAccessPermission::revertAssert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateInventLedgerConflictTmpPrintAsteriskNote</Name>
				<Source><![CDATA[
    private void truncateInventLedgerConflictTmpPrintAsteriskNote()
    {
        DictTable dictTable = new DictTable(tablenum(InventLedgerConflictTmpPrintAsteriskNote));

        if (dictTable && dictTable.enabled())
        {
            str sqlTableName = dictTable.name(DbBackend::Sql);
            SqlDataDictionary sqlTable = new SqlDataDictionary();

            if (sqlTable.tableExist(sqlTableName))
            {
                new SqlDataDictionaryPermission(methodstr(SqlDataDictionary, tableTruncate)).assert();
                sqlTable.tableTruncate(tablenum(InventLedgerConflictTmpPrintAsteriskNote), false);
                CodeAccessPermission::revertAssert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>