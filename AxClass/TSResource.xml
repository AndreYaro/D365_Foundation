<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSResource</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TSResource
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>worker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the worker record for a given resource.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    A resource record ID.
    /// </param>
    /// <returns>
    ///    The worker record.
    /// </returns>
    public static HcmWorker worker(TSResourceRecId _resourceRecId)
    {
        return HcmWorker::find(ResourceFacade::getWorker(_resourceRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the worker record ID for a given resource.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    A resource record ID.
    /// </param>
    /// <returns>
    ///    The timesheet worker record ID.
    /// </returns>
    public static HcmWorkerRecId workerRecId(TSResourceRecId _resourceRecId)
    {
        return ResourceFacade::getWorker(_resourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceIsWorkerInCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given resource is a worker in the current company.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    A resource record ID.
    /// </param>
    /// <returns>
    ///    true if the resource is a worker in the current company; otherwise, false.
    /// </returns>
    public static boolean resourceIsWorkerInCurrentCompany(TSResourceRecId _resourceRecId)
    {
        return ProjWorkerValidation::isWorkerInCurrentCompany(TSResource::workerRecId(_resourceRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default dimension for a given resource.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    A resource record ID.
    /// </param>
    /// <returns>
    ///    The default dimension.
    /// </returns>
    public static DimensionDefault defaultDimension(
        TSResourceRecId  _resourceRecId)
    {
        return ResourceFacade::getDefaultDimension(_resourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetRequiresStartStopTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if start and stop time are required for timesheets of a given resource.
    /// </summary>
    /// <param name = "_resourceRecId">
    ///    The resource to check if start and stop times are required for timesheets.
    /// </param>
    /// <param name = "_projParameters">
    ///    The project parameters for the current company; optional.
    /// </param>
    /// <returns>
    ///    true if start/stop time is required; otherwise, false.
    /// </returns>
    public static boolean timesheetRequiresStartStopTime(
        ResourceRecId   _resourceRecId,
        ProjParameters  _projParameters = null)
    {
        return ResourceFacade::getRequireStartStopTime(_resourceRecId,_projParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDelegateResources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a form lookup for resource delegates.
    /// </summary>
    /// <param name = "_formReferenceControl">
    ///    The reference control that the lookup is bound to.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public static Common lookupDelegateResources(FormReferenceControl _formReferenceControl)
    {
        return TSResource::performFormLookup(_formReferenceControl,TSResource::delegateResourceLookupQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupResources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a form lookup for resources.
    /// </summary>
    /// <param name = "_formReferenceControl">
    ///    The reference control that the lookup is bound to.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public static Common lookupResources(FormReferenceControl _formReferenceControl)
    {
        return TSResource::performFormLookup(_formReferenceControl,TSResource::resourceLookupQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a resource lookup based on a given query.
    /// </summary>
    /// <param name = "_formReferenceControl">
    ///    The reference control that the lookup is bound to.
    /// </param>
    /// <param name = "_query">
    ///    The query used for the lookup.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    protected static Common performFormLookup(
        FormReferenceControl _formReferenceControl,
        Query                _query)
    {
        ResourceView resourceView;
        SysReferenceTableLookup sysReferenceTableLookup;

        if (_formReferenceControl)
        {
            sysReferenceTableLookup = SysReferenceTableLookup::newParameters(
                                                                tablenum(ResourceView),
                                                                _formReferenceControl);

            sysReferenceTableLookup.addLookupfield(fieldnum(ResourceView,ResourceId));
            sysReferenceTableLookup.addLookupfield(fieldnum(ResourceView,Name));

            sysReferenceTableLookup.addSelectionField(fieldnum(ResourceView,RecId));

            sysReferenceTableLookup.parmQuery(_query);

            resourceView = sysReferenceTableLookup.performFormLookup();
        }

        return resourceView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds and returns a query to be used for resource lookups.
    /// </summary>
    /// <returns>
    ///    A query to be used for resource lookups.
    /// </returns>
    public static Query resourceLookupQuery()
    {
        var query = new Query();
        var resources = query.addDataSource(tablenum(ResourceView));
        resources.addRange(fieldNum(ResourceView, ResourceCompanyId)).value(curExt());
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delegateResourceLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds and returns a query to be used for resource delegate lookups.
    /// </summary>
    /// <returns>
    ///    A query to be used for resource delegate lookups.
    /// </returns>
    public static Query delegateResourceLookupQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsResourceView = query.addDataSource(tablenum(ResourceView));
        QueryBuildDataSource secondResourceView = qbdsResourceView.addDataSource(tableNum(TSTimesheetResourceLookupView));
        secondResourceView.addLink(fieldNum(ResourceView, RecId), fieldNum(TSTimesheetResourceLookupView, ResourceRecId));
        secondResourceView.joinMode(JoinMode::ExistsJoin);
        secondResourceView.addRange(fieldNum(TSTimesheetResourceLookupView, LookUpUser)).value(queryValue(curUserId()));
        secondResourceView.addRange(fieldNum(TSTimesheetResourceLookupView, ResourceCompanyId)).value(queryValue(curExt()));

        TSDate dateFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        str dsDelegateTable = secondResourceView.name();
        QueryBuildRange qbR = secondResourceView.addRange(fieldNum(TSTimesheetResourceLookupView, DateFrom));

        str filter = strFmt('((%1 <= %2) && ((%3 >= %4) || (%5 == %6)))',
                                dsDelegateTable + '.' + fieldStr(TSTimesheetResourceLookupView, DateFrom), date2StrXpp(dateFrom),
                                dsDelegateTable + '.' + fieldStr(TSTimesheetResourceLookupView, DateTo), date2StrXpp(dateFrom),
                                dsDelegateTable + '.' + fieldStr(TSTimesheetResourceLookupView, DateTo), date2StrXpp(dateNull()));

        qbR.value(filter);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start of the week for the resource
    /// </summary>
    /// <returns>
    /// Start date of the week for the period id related to the resource
    /// </returns>
    public static TSWeekStart weekStart(TSResourceRecId _resourceRecId)
    {
        TSWeekStart weekStart;

        ProjPeriodId periodId = ResourceFacade::getPeriodId(_resourceRecId);

        if (ProjPeriodTable::find(periodId).WeekStart)
        {
            weekStart = ProjPeriodTable::find(periodId).WeekStart;
        }
        // If that does not exist get the projparameters
        else
        {
            weekStart = ProjParameters::find().WeekStart;
        }

        return weekStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceEmploymentFromTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource employment record for the given timesheet line.
    /// </summary>
    /// <param name = "_timesheetLine">Timesheet line that will be used to retrieve the employment.</param>
    /// <returns>Employment record of the resource that is associated with the timesheet line.</returns>
    /// <remarks>
    /// This method will get the employment record related to the timesheet line period based on the project transaction date present in <c>TSTimesheetTrans</c>.
    /// If the resource is not found, this method will get the employment record based on period from and period to of  <c>TSTimesheetLine</c> record.
    /// </remarks>
    public static HcmEmployment getResourceEmploymentFromTimesheetLine(TsTimesheetLine _timesheetLine)
    {
        var hcmWorkerRecId = TSResource::workerRecId(_timesheetLine.Resource);

        TSTimesheetLineWeek tSTimesheetLineWeek;
        TSTimesheetTrans tSTimesheetTrans;

        select firstonly ProjTransDate from tSTimesheetTrans
            exists join tSTimesheetLineWeek
                where tSTimesheetTrans.TSTimesheetLineWeek == tSTimesheetLineWeek.RecId &&
                    tSTimesheetLineWeek.TSTimesheetLine == _timesheetLine.RecId;

        var hcmEmployment = HcmEmployment::findByWorkerLegalEntity(hcmWorkerRecId, CompanyInfo::current(), tSTimesheetTrans.ProjTransDate);
        
        // Fetch employment record based on from and to period of <c>TSTimesheetLine</c> incase employment is not fetched by using <c>ProjTransDate</c>.
        if (!hcmEmployment)
        {
            TSTimesheetTable tSTimesheetTable = TSTimesheetTable::find(_timesheetLine.TimesheetNbr);
            hcmEmployment = HcmEmployment::findByWorkerLegalEntity(hcmWorkerRecId, CompanyInfo::current(), tSTimesheetTable.PeriodFrom, tSTimesheetTable.PeriodTo);
        }
        return hcmEmployment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>