<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementBankAccountIdentify</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementBankAccountIdentify</c> class idenifies the bank account from the statement.
/// </summary>
public class BankStatementBankAccountIdentify extends Object
{
    private boolean inCurrentCompany;

    CompanyBankAccountId defaultBankAccountId;

    BankStmtISOAccountStatement statement;

    int matchedNumber;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        defaultBankAccountId,
        statement
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>identifiedMultipleBankAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identified multiple bank accounts.
    /// </summary>
    /// <returns>
    /// True when multiple bank accounts were identified.
    /// </returns>
    public boolean identifiedMultipleBankAccounts()
    {
        boolean identifiedMultipleBankAccounts;

        if (matchedNumber > 1)
        {
            identifiedMultipleBankAccounts = true;
        }

        return identifiedMultipleBankAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInCurrentCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setInCurrentCompany(boolean _inCurrentCompany)
    {
        inCurrentCompany = _inCurrentCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIdentify</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Identifies the bank account from searched result.
    /// </summary>
    /// <param name="_searchedBankAccountTable">
    ///     The table buffer of searched bank account table.
    /// </param>
    /// <returns>
    ///     The identified bank account.
    /// </returns>
    protected BankAccountTable doIdentify(BankAccountTable  _searchedBankAccountTable)
    {
        int searchedNumber;
        BankAccountTable identifiedBankAccount;

        matchedNumber = 0;

        while (_searchedBankAccountTable)
        {
            if (defaultBankAccountId == ''
                || (defaultBankAccountId == _searchedBankAccountTable.AccountID 
                    && (!inCurrentCompany || curExt() == _searchedBankAccountTable.DataAreaId)))
            {
                identifiedBankAccount = _searchedBankAccountTable.data();
                matchedNumber++;
            }

            searchedNumber++;
            next _searchedBankAccountTable;
        }

        if (matchedNumber > 1)
        {
            // multiple bank account found, which is incorrect
            identifiedBankAccount = null;
        }

        return identifiedBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Search bank account table.
    /// </summary>
    /// <param name = "_bankName">
    /// The bank name
    /// </param>
    /// <param name = "_statement">
    /// The statement information
    /// </param>
    /// <returns>The bank account table.</returns>
    protected BankAccountTable searchBankAccountTable(
        BankStatementNameText _bankName,
        BankStmtISOAccountStatement _statement)
    {
        BankAccountTable searchedBankAccountTable;

        if (_statement.AccountIdOtherId != '')
        {
            // 1. Bank name in Statement with bank account number;
            if (_bankName != '')
            {
                select crosscompany searchedBankAccountTable
                    where searchedBankAccountTable.BankStatementName == _bankName
                        && searchedBankAccountTable.AccountNum == _statement.AccountIdOtherId;
            }
            // 2. Routing code or SWIFT code or IBAN with bank account number;
            if (!searchedBankAccountTable
            	&& (_statement.RegistrationId != '' || _statement.iban != '' || _statement.SwiftNo != ''))
            {
                select crosscompany searchedBankAccountTable
                    where ((searchedBankAccountTable.RegistrationNum == _statement.RegistrationId
                        && searchedBankAccountTable.RegistrationNum != '')
                        || (searchedBankAccountTable.iban == _statement.iban
                            && searchedBankAccountTable.iban != '')
                        || (searchedBankAccountTable.swiftNo == _statement.SwiftNo
                            && searchedBankAccountTable.swiftNo != ''))
                        && searchedBankAccountTable.AccountNum == _statement.AccountIdOtherId;
            }

            // 3. Bank account number
            if (!searchedBankAccountTable)
            {
                select crosscompany searchedBankAccountTable
                    where searchedBankAccountTable.AccountNum == _statement.AccountIdOtherId;
            }
        }

        // 4. Bank name in statement, or Routing code or SWIFT code or IBAN
        if (!searchedBankAccountTable
            && (_statement.RegistrationId != '' || _statement.iban != '' || _statement.SwiftNo != ''))
        {
            select crosscompany searchedBankAccountTable
                where (searchedBankAccountTable.RegistrationNum == _statement.RegistrationId
                        && searchedBankAccountTable.RegistrationNum != '')
                    || (searchedBankAccountTable.iban == _statement.iban
                        && searchedBankAccountTable.iban != '')
                    || (searchedBankAccountTable.swiftNo == _statement.SwiftNo
                        && searchedBankAccountTable.swiftNo != '');
        }

        return searchedBankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifyBankAccountWithSenderStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the bank account by sender and statement.
    /// </summary>
    /// <param name = "_statement">
    /// The statement information.
    /// </param>
    /// <param name = "_sender">
    /// The <c>BankStmtISOPartyIdentification</c> to use name information.
    /// </param>
    /// <returns>The bank account.</returns>
    public BankAccountTable identifyBankAccountWithSenderStmt(
        BankStmtISOAccountStatement _statement,
        BankStmtISOPartyIdentification _sender)
    {
        BankAccountTable searchedBankAccountTable = this.searchBankAccountTable(_sender.Name, _statement);

        return this.doIdentify(searchedBankAccountTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs new instance of <c>BankStatementBankAccountIdentify</c>.
    /// </summary>
    /// <returns>
    ///     New instance of <c>BankStatementBankAccountIdentify</c>.
    /// </returns>
    public static BankStatementBankAccountIdentify construct()
    {
        return new BankStatementBankAccountIdentify();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPack</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs new instance of <c>BankStatementBankAccountIdentify</c> from pack.
    /// </summary>
    /// <param name="_packedClass">
    ///     The pack of instance.
    /// </param>
    /// <returns>
    ///     New instance of <c>BankStatementBankAccountIdentify</c>.
    /// </returns>
    /// <remarks>
    ///     This method is only used when create a instance on server from client instance.
    /// </remarks>
    private static BankStatementBankAccountIdentify constructFromPack(container _packedClass)
    {
        BankStatementBankAccountIdentify identify = new BankStatementBankAccountIdentify();
        identify.unpack(_packedClass);

        return identify;
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifyBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies company bank account base on statement's data.
    /// </summary>
    /// <param name = "_bankStatementName">Bank name in statement</param>
    /// <param name = "_accountNum">Bank account number</param>
    /// <param name = "_iban">IBAN</param>
    /// <param name = "_swiftNo">SWIFT code</param>
    /// <param name = "_registrationNum">Routing number, optional</param>
    /// <returns>Identified company bank account base on statement's data.</returns>
    public static BankAccountTable identifyBankAccount(
        BankStatementNameText _bankStatementName,
        BankStatementIdentificationText _accountNum,
        BankIBAN _iban,
        SWIFTNo _swiftNo,
        BankRegNum _registrationNum = '')
    {
        BankStatementBankAccountIdentify bankAccountIdentify = BankStatementBankAccountIdentify::construct();

        return bankAccountIdentify.doIdentifyBankAccount(
            _bankStatementName,
            _accountNum,
            _iban,
            _swiftNo,
            _registrationNum
         );
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIdentifyBankAccount</Name>
				<Source><![CDATA[
    public BankAccountTable doIdentifyBankAccount(
        BankStatementNameText _bankStatementName,
        BankStatementIdentificationText _accountNum,
        BankIBAN _iban,
        SWIFTNo _swiftNo,
        BankRegNum _registrationNum = '')
    {
        BankStmtISOPartyIdentification bankStmtISOPartyIdentification;
        bankStmtISOPartyIdentification.Name = _bankStatementName;

        BankStmtISOAccountStatement bankStmtISOAccountStatement;
        bankStmtISOAccountStatement.AccountIdOtherId = _accountNum;
        bankStmtISOAccountStatement.IBAN = _iban;
        bankStmtISOAccountStatement.SwiftNo = _swiftNo;
        bankStmtISOAccountStatement.RegistrationId = _registrationNum;

        return this.identifyBankAccountWithSenderStmt(bankStmtISOAccountStatement, bankStmtISOPartyIdentification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifyBankAccountWithAccountId</Name>
				<Source><![CDATA[
    public static BankAccountTable identifyBankAccountWithAccountId(
        BankStatementNameText _bankStatementName,
        BankStatementIdentificationText _accountNum,
        BankIBAN _iban,
        SWIFTNo _swiftNo,
        CompanyBankAccountId _accountId,
        BankRegNum _registrationNum = '')
    {
        BankStatementBankAccountIdentify bankAccountIdentify = BankStatementBankAccountIdentify::construct();

        return bankAccountIdentify.doIdentifyBankAccountWithAccountId(
            _bankStatementName,
            _accountNum,
            _iban,
            _swiftNo,
            _accountId,
            _registrationNum
         );
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIdentifyBankAccountWithAccountId</Name>
				<Source><![CDATA[
    public BankAccountTable doIdentifyBankAccountWithAccountId(
        BankStatementNameText _bankStatementName,
        BankStatementIdentificationText _accountNum,
        BankIBAN _iban,
        SWIFTNo _swiftNo,
        CompanyBankAccountId _accountId,
        BankRegNum _registrationNum = '')
    {
        this.defaultBankAccountId = _accountId;
        this.setInCurrentCompany(_accountId != '');

        return this.doIdentifyBankAccount(
            _bankStatementName,
            _accountNum,
            _iban,
            _swiftNo,
            _registrationNum
        );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>