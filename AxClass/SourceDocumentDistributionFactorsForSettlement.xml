<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentDistributionFactorsForSettlement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides methods for settlement process to get distribution factors when trying to settle a document
/// which is not fully journalized. 
/// </summary>
internal final class SourceDocumentDistributionFactorsForSettlement
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSourceDocumentDistributionData</Name>
				<Source><![CDATA[
    internal static Money getSourceDocumentDistributionData(
        List _postedDistributionData, 
        AccountingEvent _accountingEvent, 
        Ledger _ledger, 
        List _ledgerPostingTypes)
    {
        Money postedDistributionsTotal;

        SubledgerJournalAccountEntryTmpSummary localSubledgerJournalAccountEntryTmpSummary = SourceDocumentDistributionFactorsForSettlement::getAccountingForUnpostedSourceDocument(_accountingEvent);
        
        ListEnumerator postingTypeEnumerator = _ledgerPostingTypes.getEnumerator();
        container postingType;
            
        while (postingTypeEnumerator.moveNext())
        {
            postingType += postingTypeEnumerator.current();
        }

        while select sum(AccountingCurrencyAmount), LedgerDimension from localSubledgerJournalAccountEntryTmpSummary
            group by LedgerDimension
        where localSubledgerJournalAccountEntryTmpSummary.Ledger == _ledger.RecId &&
            localSubledgerJournalAccountEntryTmpSummary.PostingType in postingType
        {
            // only non-zero values are processed
            if (localSubledgerJournalAccountEntryTmpSummary.AccountingCurrencyAmount != 0)
            {
                CustVendTransDistribution postedDistribution = new CustVendTransDistribution(
                    localSubledgerJournalAccountEntryTmpSummary.LedgerDimension,
                    0,
                    localSubledgerJournalAccountEntryTmpSummary.AccountingCurrencyAmount);

                _postedDistributionData.addEnd(postedDistribution);
                postedDistributionsTotal += localSubledgerJournalAccountEntryTmpSummary.AccountingCurrencyAmount;
            }
        }

        return postedDistributionsTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentDistributionFactors</Name>
				<Source><![CDATA[
    internal static List getSourceDocumentDistributionFactors(
        LedgerDimensionAccount _defaultLedgerDimension,
        boolean _mergeDefaultWithOriginalDimension, 
        AccountingEvent _accountingEvent, 
        Ledger _ledger, 
        List _ledgerPostingTypes)
    {
        List postedDistributionData = new List(Types::Class);

        SubledgerJournalAccountEntryTmpSummary localSubledgerJournalAccountEntryTmpSummary = SourceDocumentDistributionFactorsForSettlement::getAccountingForUnpostedSourceDocument(_accountingEvent);

        ListEnumerator postingTypeEnumerator = _ledgerPostingTypes.getEnumerator();
        container postingType;
            
        while (postingTypeEnumerator.moveNext())
        {
            postingType += postingTypeEnumerator.current();
        }

        while select sum(AccountingCurrencyAmount), LedgerDimension from localSubledgerJournalAccountEntryTmpSummary
            group by LedgerDimension
        where localSubledgerJournalAccountEntryTmpSummary.Ledger == _ledger.RecId &&
            localSubledgerJournalAccountEntryTmpSummary.PostingType in postingType
        {
            // only non-zero values are processed
            if (localSubledgerJournalAccountEntryTmpSummary.AccountingCurrencyAmount != 0)
            {
                LedgerDimensionAccount ledgerDimensionAccount = localSubledgerJournalAccountEntryTmpSummary.LedgerDimension;
                if (_mergeDefaultWithOriginalDimension)
                {
                    DimensionDefault dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimensionAccount);
                    ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension, dimensionDefault);
                }

                CustVendTransDistribution postedDistribution = new CustVendTransDistribution(
                    ledgerDimensionAccount,
                    0,
                    localSubledgerJournalAccountEntryTmpSummary.AccountingCurrencyAmount);

                postedDistributionData.addEnd(postedDistribution);
            }
        }

        return postedDistributionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingForUnpostedSourceDocument</Name>
				<Source><![CDATA[
    private static SubledgerJournalAccountEntryTmpSummary getAccountingForUnpostedSourceDocument(AccountingEvent _accountingEvent)
    {
        SubledgerJournalAccountEntryTmpSummary localSubledgerJournalAccountEntryTmpSummary;
        SubledgerJournalizer subledgerJournalizer;

        SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(_accountingEvent.SourceDocumentHeader);
        SourceDocument activeSourceDocument = SourceDocument::newFromSourceDocumentHeader(sourceDocumentHeader);

        subledgerJournalizer = SubledgerJournalizer::newForSourceDocument(activeSourceDocument);
        subledgerJournalizer.getSubledgerJournalAcctEntryTmpSummary(activeSourceDocument, localSubledgerJournalAccountEntryTmpSummary);

        return localSubledgerJournalAccountEntryTmpSummary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>