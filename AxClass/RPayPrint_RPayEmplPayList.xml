<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPrint_RPayEmplPayList</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayPrint_RPayEmplPayList extends RunBaseBatch implements BatchRetryable
{
    ReportPeriod_RU payPeriod;
    DialogField     fieldPayPeriod;

    QueryRun        queryRun;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        payPeriod
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        fieldPayPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriod ? payPeriod : RPayParameters::payPeriod());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        payPeriod = fieldPayPeriod.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query initQuery()
    {
        Query query;

        query = new Query(queryStr(RPayEmplPayList));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private void initQueryRun()
    {
        queryRun = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    private void modifyQuery()
    {
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = this.queryRun().query().dataSourceTable(tablenum(RPayTrans));
        findOrCreateRange_W(queryBuildDataSource, fieldnum(RPayTrans, PayPeriod)).value(queryValue(this.payPeriod()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU payPeriod()
    {
        return endmth(payPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        OXMLExcelReport_RPayEmplPayList report = OXMLExcelReport_RPayEmplPayList::construct();

        this.modifyQuery();

        report.setQueryRun(queryRun);
        report.parmPayPeriod(this.payPeriod());
        report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container packedQR;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQR] = packedClass;
                if (SysQuery::isPackedOk(packedQR))
                {
                    queryRun = new QueryRun(packedQR);
                }
                else
                {
                    this.initQueryRun();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP6345";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayPrint_RPayEmplPayList   rPayPrint_RPayEmplPayList;

        rPayPrint_RPayEmplPayList = new RPayPrint_RPayEmplPayList();

        if (rPayPrint_RPayEmplPayList.prompt())
        {
            rPayPrint_RPayEmplPayList.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>