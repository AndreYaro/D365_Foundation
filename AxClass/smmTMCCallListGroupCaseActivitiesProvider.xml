<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmTMCCallListGroupCaseActivitiesProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plug in for case activities
/// </summary>
[ExportMetadataAttribute('CaseIActivities', tableStr(smmTMCallListGroup)), ExportAttribute('Dynamics.AX.Application.CaseIActivities')]
class smmTMCCallListGroupCaseActivitiesProvider implements CaseIActivities
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    public smmActivityParentType initFromCommon(smmActivities _activities, Common _table)
    {
        smmTMCallListGroup smmTMCallListGroup = _table;
        this.initFromCallListParameters(_activities, smmTMCallListGroup);
        return smmActivityParentType::CallList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentRecId</Name>
				<Source><![CDATA[
    public RefRecId parentRecId(Common _table)
    {
        return _table.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommonUsingTemplate</Name>
				<Source><![CDATA[
    public smmActivityParentType initFromCommonUsingTemplate(smmActivities _activities, Common _table, smmActivities _templateActivity)
    {
        return smmActivityParentType::CallList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExternalMemo</Name>
				<Source><![CDATA[
    public smmOutlookMemo updateExternalMemo(RefRecId _parentLink)
    {
        smmTMCallListGroup smmTMCallListGroup = smmTMCallListGroup::findRecId(_parentLink);
        str tail;

        const str colonspace = ': ';
        const str colon = ':';
        const str newline = '\n';

        tail += newline + newline + "@SYS79892" + colonspace + smmTMCallListGroup.CallListID + colon + smmTMCallListGroup.Description + newline;

        if (smmTMCallListGroup.FromDateTime && smmTMCallListGroup.ToDateTime)
        {
            tail += "@SYS4080" + colonspace + strFmt("@SYS53184", datetime2str(smmTMCallListGroup.FromDateTime, DateFlags::FormatAll), datetime2str(smmTMCallListGroup.ToDateTime, DateFlags::FormatAll));
        }

        if (smmTMCallListGroup.RespWorker)
        {
            tail += newline + "@SYS67464" + colonspace + int642str(smmTMCallListGroup.RespWorker);
        }

        return tail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldActivityBeCreated</Name>
				<Source><![CDATA[
    public CaseYesNoPrompt shouldActivityBeCreated(Common _table, boolean _isBatch)
    {
        if (_isBatch)
        {
            return (smmParametersTable::find().RunBaseBatchCreateActivity == smmRunBaseBatchCreateActivity::Yes) ? (CaseYesNoPrompt::Yes) : (CaseYesNoPrompt::No);
        }
        else
        {
            return smmActivities::shouldActivityBeCreatedGeneric(smmParametersTable::find().FollowupCreateActivity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentReferenceFieldNum</Name>
				<Source><![CDATA[
    public FieldId getParentReferenceFieldNum(TableId _tableId, smmActivityParentRefTableId _parentTableId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallListParameters</Name>
				<Source><![CDATA[
    private void initFromCallListParameters(smmActivities _activities, smmTMCallListGroup _callList)
    {
        smmParametersTable parameters = smmParametersTable::find();

        _activities.initValue(parameters.tmFollowUpActivityCategory);

        // Get default values from CRM parameters
        _activities.PhaseId                = parameters.tmFollowUpActivityPhase;
        _activities.TypeId                 = parameters.tmFollowUpActivityType;
        _activities.Purpose                = parameters.tmFollowUpActivityPurpose;

        // Copy values from call list to activity
        _activities.StartDateTime          = _callList.FromDateTime;
        _activities.EndDateTime            = _callList.ToDateTime;
        _activities.ReminderDateTime       = _callList.ToDateTime;
        _activities.ResponsibleWorker      = _callList.RespWorker;

        _activities.initFromWorkerTable(_activities.ResponsibleWorker);

        if (_activities.ReminderMinutes > 0)
        {
            _activities.ReminderActive     = NoYes::Yes;
        }
        else
        {
            _activities.ReminderActive     = NoYes::No;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>