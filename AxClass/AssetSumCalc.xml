<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetSumCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class AssetSumCalc
{
    #ISOCountryRegionCodes
    LogisticsAddressCountryRegionISOCode countryContext;

    boolean     calculated;

    Range       rangeAssetId;
    Range       rangeBookId;
    Range       rangebudgetModel;
    Range       rangeDepBookId;
    AssetYear   assetYear;
    boolean     specifiedYear;

    TransDate   dateFrom;
    TransDate   dateTo;

    AmountMST   netBookValue;

    AmountMST   acquisitionValue;
    AmountMST   acquisitionAdjValue;
    AmountMST   acquisitionPrice;
    AmountMST   interestValue;

    AmountMST   disposalScrapValue;
    AmountMST   disposalSaleValue;

    AmountMST   capitalReserveValue;
    AmountMST   capitalReserveTransferValue;

    AmountMST   depreciationAdjValue;
    AmountMST   depreciationValue;
    AmountMST   depreciationRevaluationValue;

    AmountMST   revaluationValue;
    AmountMST   writeUpAdjValue;
    AmountMST   writeDownAdjValue;

    AmountMST   profitLossValue;

    AmountMST   acquisitionValue_priorYears;
    AmountMST   acquisitionValue_thisYear;

    AmountMST   acquisitionAdjValue_priorYears;
    AmountMST   acquisitionAdjValue_thisYear;

    AmountMST   depreciationValue_priorYears;
    AmountMST   depreciationValue_thisYear;

    AmountMST   depreciationAdjValue_priorYears;
    AmountMST   depreciationAdjValue_thisYear;

    AmountMST   revaluationValue_priorYears;
    AmountMST   revaluationValue_thisYear;

    AmountMST   writeUpAdjValue_priorYears;
    AmountMST   writeUpAdjValue_thisYear;

    AmountMST   writeDownAdjValue_priorYears;
    AmountMST   writeDownAdjValue_thisYear;

    AmountMST   extraDepreciationValue;

    AmountMST   extraDepreciationValue_priorYears;
    AmountMST   extraDepreciationValue_thisYear;

    AmountMST   bonusDepreciationValue;
    AmountMST   bonusDepreciationValue_priorYears;
    AmountMST   bonusDepreciationValue_thisYear;

    AmountMST   derogatoryIncreaseValue;
    AmountMST   derogatoryDecreaseValue;
    AmountMST   derogatoryIncreaseValue_allYears;
    AmountMST   derogatoryDecreaseValue_allYears;

    AmountMST   acquisitionReclassificationAmount;
    AmountMST   writeUpAdjReclassificationAmount;
    AmountMST   depreciationReclassificationAmount;

    AmountMST   lowCostAssetAmount;
    AmountMST   lowValueAssetAmount;
    AmountMST   secondElementCostAmount;

    // <GIN>
    NoYes       groupDepreciation,
                allAssetsSold;
    Range       rangeAssetGroupId;
    // </GIN>

    // <GEEU>
    AmountMST   preAcquisitionValue;
    boolean     isScrapped;
    AmountMST   depreciationValueNotCost_priorYears;
    AmountMST   depreciationValueNotCost_thisYear;
    AmountMST   depreciationValueNotCost;
    AmountMST   openingAccumulatedDepreciation;
    AmountMST   openingAccDepreciation_priorYears;
    AmountMST   openingAccDepreciation_thisYear;
    AmountMST   postOffAccDepreciation;
    AmountMST   postOffAccDepreciation_PriorYears;
    AmountMST   postOffAccDepreciation_ThisYear;
    // </GEEU>

    // <GJP>
    boolean         isDocumentAmountSeparate_JP;
    container   docTypes;
    container   docTypeValues;
    AmountMST   reductionEntryReserveAmount_JP;
    AmountMST   reductionEntryAllocationAmount_JP;
    protected AmountMST   reductionEntryDirectOffAmount_JP;
    AssetTransDate  lastTransDate_JP;
    private boolean isReductionEntryDirectOff_JP;
    // </GJP>

    boolean     onThinClient;
    boolean     isPriorYear;
    boolean     isCurrentYear;
    boolean     isUsedCalendar;
    protected boolean maintainCurrentYearDateRange;

    boolean     sumDescendants_RU;
    AssetSumCalcType sumType;
    AmountMST   disposalWriteOffValue_RU;
    AssetAmount depreciationScheduledBonusValue_RU;
    AssetAmount depreciationPostedBonusValue_RU;
    AssetAmount majorRepairsValue_RU;
    AssetAmount currencyWriteUpAdjValue_RU;
    AssetAmount currencyWriteDownAdjValue_RU;
    AssetAmount takeDownAcqAdjValue_RU;
    AssetAmount takeDownDeprAdjValue_RU;
    
    #LOCALMACRO.Client2Server
        rangeAssetId,
        rangeBookId,
        rangebudgetModel,
        rangeDepBookId,
        assetYear,
        specifiedYear,
        dateFrom,
        dateTo
        // <GIN>
        ,rangeAssetGroupId
        // </GIN>
        // <GJP>
        , docTypes
        , isDocumentAmountSeparate_JP
        // </GJP>
        , sumType
        , sumDescendants_RU
    #ENDMACRO

    #LOCALMACRO.Server2Client
        netBookValue,
        acquisitionValue,
        acquisitionAdjValue,
        acquisitionPrice,
        disposalScrapValue,
        disposalSaleValue,
        capitalReserveValue,
        capitalReserveTransferValue,
        depreciationAdjValue,
        depreciationValue,
        // <GEEU>
        depreciationValueNotCost,
        // </GEEU>
        depreciationRevaluationValue,
        revaluationValue,
        writeUpAdjValue,
        writeDownAdjValue,
        profitLossValue,
        acquisitionValue_priorYears,
        acquisitionValue_thisYear,
        acquisitionAdjValue_priorYears,
        acquisitionAdjValue_thisYear,
        depreciationValue_priorYears,
        depreciationValue_thisYear,
        // <GEEU>
        depreciationValueNotCost_priorYears,
        depreciationValueNotCost_thisYear,
        // </GEEU>
        depreciationAdjValue_priorYears,
        depreciationAdjValue_thisYear,
        revaluationValue_priorYears,
        revaluationValue_thisYear,
        writeUpAdjValue_priorYears,
        writeUpAdjValue_thisYear,
        writeDownAdjValue_priorYears,
        writeDownAdjValue_thisYear,
        extraDepreciationValue,
        extraDepreciationValue_priorYears,
        extraDepreciationValue_thisYear,
        bonusDepreciationValue,
        bonusDepreciationValue_priorYears,
        bonusDepreciationValue_thisYear,
        derogatoryIncreaseValue,
        derogatoryDecreaseValue,
        derogatoryIncreaseValue_allYears,
        derogatoryDecreaseValue_allYears,
        acquisitionReclassificationAmount,
        lowCostAssetAmount,
        lowValueAssetAmount,
        secondElementCostAmount
        // <GEEU>
        , openingAccumulatedDepreciation,
        openingAccDepreciation_priorYears,
        openingAccDepreciation_thisYear,
        postOffAccDepreciation,
        postOffAccDepreciation_priorYears,
        postOffAccDepreciation_thisYear,
        preAcquisitionValue,
        isScrapped
        // </GEEU>
        // <GJP>
        , docTypeValues
        , reductionEntryReserveAmount_JP
        , reductionEntryAllocationAmount_JP
        , lastTransDate_JP
        // </GJP>
        , disposalWriteOffValue_RU
        , depreciationScheduledBonusValue_RU
        , depreciationPostedBonusValue_RU
        , majorRepairsValue_RU
        , currencyWriteUpAdjValue_RU
        , currencyWriteDownAdjValue_RU
        , takeDownAcqAdjValue_RU
        , takeDownDeprAdjValue_RU
        , depreciationReclassificationAmount
        , interestValue
        , reductionEntryDirectOffAmount_JP
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionAdjValue</Name>
				<Source><![CDATA[
    public AmountMST acquisitionAdjValue()
    {
        this.calc();

        return  acquisitionAdjValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionAdjValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST   acquisitionAdjValue_priorYears()
    {
        this.calc();

        return acquisitionAdjValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionAdjValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST   acquisitionAdjValue_thisYear()
    {
        this.calc();

        return acquisitionAdjValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationReclassificationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the depreciation reclassification totals for the specified fixed asset and period.
    /// </summary>
    /// <returns>
    ///    The total of all depreciation reclassifications for specified fixed asset and period.
    /// </returns>
    public AmountMST depreciationReclassificationAmount()
    {
        this.calc();
    
        return depreciationReclassificationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the interest totals for the specified fixed asset and period.
    /// </summary>
    /// <returns>
    /// The total of all interest for specified fixed asset and period.
    /// </returns>
    public AmountMST interestValue()
    {
        this.calc();
    
        return  interestValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionPrice</Name>
				<Source><![CDATA[
    public AmountMST acquisitionPrice()
    {
        this.calc();

        return  acquisitionPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionReclassificationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the acquisition reclassification totals for the specified fixed asset and period.
    /// </summary>
    /// <returns>
    ///    The total of all acquisition reclassifications for specified fixed asset and period.
    /// </returns>
    /// <remarks>
    ///    This includes acquisition adjustments.
    /// </remarks>
    public AmountMST acquisitionReclassificationAmount()
    {
        this.calc();

        return acquisitionReclassificationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionValue</Name>
				<Source><![CDATA[
    public AmountMST acquisitionValue()
    {
        this.calc();

        return  acquisitionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST acquisitionValue_priorYears()
    {
        this.calc();

        return acquisitionValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST   acquisitionValue_thisYear()
    {
        this.calc();

        return acquisitionValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionValueAll</Name>
				<Source><![CDATA[
    public AssetAcquisitionValue acquisitionValueAll()
    {
        return this.acquisitionValue() +
               this.acquisitionAdjValue() +
               this.capitalReserveTransferValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bonusDepreciationValue</Name>
				<Source><![CDATA[
    public AmountMST bonusDepreciationValue()
    {
        this.calc();

        return bonusDepreciationValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bonusDepreciationValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST bonusDepreciationValue_priorYears()
    {
        this.calc();

        return bonusDepreciationValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bonusDepreciationValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST bonusDepreciationValue_thisYear()
    {
        this.calc();

        return bonusDepreciationValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected abstract Query buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        netBookValue = acquisitionValue             +
                       acquisitionAdjValue          +
                       capitalReserveTransferValue  +   // negative amount of the acquisition adjustments created from reserves
                       disposalScrapValue           +
                       disposalSaleValue            +
                       depreciationValue            +
                       depreciationAdjValue         +
                       // <GEEPL>
                       (countryContext == #isoPL ? depreciationValueNotCost : 0) +
                       // </GEEPL>
                       extraDepreciationValue       +
                       bonusDepreciationValue       +
                       revaluationValue             +
                       writeUpAdjValue              +
                       writeDownAdjValue            +
                       capitalReserveValue          +
                       // <GEEPL>
                       profitLossValue              +
                       (countryContext == #isoPL ? openingAccumulatedDepreciation + postOffAccDepreciation : 0)
                       // </GEEPL>
        ;

        calculated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capitalReserveTransferValue</Name>
				<Source><![CDATA[
    public AssetReserveTransfer capitalReserveTransferValue()
    {
        this.calc();

        return capitalReserveTransferValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capitalReserveValue</Name>
				<Source><![CDATA[
    public AssetReserve capitalReserveValue()
    {
        this.calc();

        return capitalReserveValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the amount of depreciation on the asset.
    /// </summary>
    /// <returns>
    ///     The depreciation amount on the asset.
    /// </returns>
    public AssetDepreciation depreciation()
    {
        return this.depreciationValue() + this.depreciationAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAdjValue</Name>
				<Source><![CDATA[
    public AmountMST depreciationAdjValue()
    {
        this.calc();

        return depreciationAdjValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAdjValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST   depreciationAdjValue_priorYears()
    {
        this.calc();

        return depreciationAdjValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAdjValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST   depreciationAdjValue_thisYear()
    {
        this.calc();

        return depreciationAdjValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationRevaluationValue</Name>
				<Source><![CDATA[
    public AmountMST depreciationRevaluationValue()
    {
        this.calc();

        return depreciationRevaluationValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValue</Name>
				<Source><![CDATA[
    public AmountMST depreciationValue()
    {
        this.calc();

        // <GEEPL>
        return depreciationValue + (countryContext == #isoPL ? depreciationValueNotCost : 0);
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValue_CZ_LV</Name>
				<Source><![CDATA[
    public AssetDepreciation depreciationValue_CZ_LV()
    {
        return this.depreciationValue() + this.depreciationAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST depreciationValue_priorYears()

    {
        this.calc();

        // <GEEU>
        return depreciationValue_priorYears + (countryContext == #isoPL ? depreciationValueNotCost_priorYears : 0);
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST depreciationValue_thisYear()
    {
        this.calc();

        // <GEEU>
        return depreciationValue_thisYear + (countryContext == #isoPL ? depreciationValueNotCost_thisYear : 0);
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValueAll</Name>
				<Source><![CDATA[
    public AssetDepreciation depreciationValueAll()
    {
        return this.depreciationValue() +
               this.depreciationAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValueNotCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Polish non-taxable amount of the deprecation.
    /// </summary>
    /// <returns>
    /// The non-taxable amount of the deprecation.
    /// </returns>
    public AmountMST depreciationValueNotCost_PL()
    {
        this.calc();

        return depreciationValueNotCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValueNotCost_priorYears_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Polish non-taxable amount of the deprecation for previous fiscal years.
    /// </summary>
    /// <returns>
    /// The non-taxable amount of the deprecation.
    /// </returns>
    public AmountMST depreciationValueNotCost_priorYears_PL()
    {
        this.calc();

        return depreciationValueNotCost_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationValueNotCost_thisYear_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Polish non-taxable amount of the deprecation for the current fiscal years.
    /// </summary>
    /// <returns>
    /// The non-taxable amount of the deprecation.
    /// </returns>
    public AmountMST depreciationValueNotCost_thisYear_PL()
    {
        this.calc();

        return depreciationValueNotCost_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationPostedBonusValue_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates an amount of depreciation bonus which already posted.
    /// </summary>
    /// <returns>An amount of posted depreciation bonus.</returns>
    [SysObsolete('This method has been deprecated.', false, 29\5\2020)]
    public AssetAmount depreciationPostedBonusValue_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationScheduledBonusValue_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates an amount of depreciation bonus which schedules to post.
    /// </summary>
    /// <returns>An amount of scheduled depreciation bonus.</returns>
    [SysObsolete('This method has been deprecated.', false, 29\5\2020)]
    public AssetAmount depreciationScheduledBonusValue_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>derogatoryDecreaseValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates an amount for transactions of derogatory decrease.
    /// </summary>
    /// <returns>
    ///    An amount that represents the derogatory decrease.
    /// </returns>
    public AmountMST derogatoryDecreaseValue()
    {
        this.calc();

        return derogatoryDecreaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>derogatoryDecreaseValue_allYears</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amount for transactions of derogatory decrease all years.
    /// </summary>
    /// <returns>
    ///    The amount that represents the derogatory decrease.
    /// </returns>
    public AmountMST derogatoryDecreaseValue_allYears()
    {
        this.calc();

        return derogatoryDecreaseValue_allYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>derogatoryIncreaseValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates an amount for transactions of derogatory increase.
    /// </summary>
    /// <returns>
    ///    An amount that represents the derogatory increase.
    /// </returns>
    public AmountMST derogatoryIncreaseValue()
    {
        this.calc();

        return derogatoryIncreaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>derogatoryIncreaseValue_allYears</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates an amount for transactions of derogatory increase all years.
    /// </summary>
    /// <returns>
    ///    An amount that represents the derogatory increase.
    /// </returns>
    public AmountMST derogatoryIncreaseValue_allYears()
    {
        this.calc();

        return derogatoryIncreaseValue_allYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>derogatoryValue</Name>
				<Source><![CDATA[
    public AmountMST derogatoryValue()
    {
        this.calc();

        return derogatoryIncreaseValue + derogatoryDecreaseValue ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposalSaleValue</Name>
				<Source><![CDATA[
    public AmountMST disposalSaleValue()
    {
        this.calc();

        return disposalSaleValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposalScrapValue</Name>
				<Source><![CDATA[
    public AmountMST disposalScrapValue()
    {
        this.calc();

        return disposalScrapValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposalWriteOffValue_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates the disposal write-off amount.
    /// </summary>
    /// <returns>The disposal write-off amount.</returns>
    [SysObsolete('This method has been deprecated.', false, 29\5\2020)]
    public AmountMST disposalWriteOffValue_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposalValue</Name>
				<Source><![CDATA[
    public AssetDisposalSale disposalValue()
    {
        return this.disposalSaleValue() +
               this.disposalScrapValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraDepreciationValue</Name>
				<Source><![CDATA[
    public AmountMST extraDepreciationValue()
    {
        this.calc();

        return extraDepreciationValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraDepreciationValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST extraDepreciationValue_priorYears()
    {
        this.calc();

        return extraDepreciationValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraDepreciationValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST extraDepreciationValue_thisYear()
    {
        this.calc();

        return extraDepreciationValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the financial value of the asset.
    /// </summary>
    /// <returns>
    /// The financial value of the asset.
    /// </returns>
    /// <remarks>
    /// If the asset is scrapped, the financial value is considered to be zero.
    /// </remarks>
    public AssetFinancialValueEELV financialValue()
    {
        if (this.isScrapped())
        {
            return 0;
        }
        else
        {
            return this.netBookValue() - this.depreciation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialValueBeforeScrap_LV</Name>
				<Source><![CDATA[
    public AssetFinancialValueEELV financialValueBeforeScrap_LV()
    {
        AssetFinancialValueEELV ret;

        if (this.isScrapped())
        {
            ret = this.netBookValueBeforeScrap_LV() - this.depreciation();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initYear</Name>
				<Source><![CDATA[
    protected void initYear()

    {
        RecId calendarRecId;

        if (specifiedYear)
        {
            switch (assetYear)
            {
                case AssetYear::ThisYear:
                    if (isUsedCalendar)
                    {
                        str preferredLocal = new Session().preferredLocale();
                        dateFrom = DateTimeUtil::getStartOfYearDate(preferredLocal, dateTo);
                        dateTo = DateTimeUtil::getEndOfYearDate(preferredLocal, dateTo);
                    }
                    else
                    {
                        calendarRecId = AssetBookTable::find(rangeBookId).getFiscalCalendar();
                        dateFrom = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, dateTo);
                        dateTo = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, dateTo);
                    }
                    break;

                case AssetYear::PriorYears:
                    dateFrom = dateNull();
                    if (isUsedCalendar)
                    {
                        dateTo = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), dateTo) - 1;
                    }
                    else
                    {
                        calendarRecId = AssetBookTable::find(rangeBookId).getFiscalCalendar();
                        dateTo = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, dateTo) - 1;
                    }
                    break;

                case AssetYear::All:
                    dateFrom = dateNull();
                    dateTo = dateMax();
                    break;
                // <GCN>
                case AssetYear::CurrDate_CN:
                    if (countryContext == #isoCN)
                    {
                        calendarRecId = Ledger::fiscalCalendar();
                        dateFrom = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, dateTo);
                    }
                    break;
                // </GCN>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrapped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the asset is scrapped or not.
    /// </summary>
    /// <returns>
    /// true if the asset is scrapped; scrapped, false.
    /// </returns>
    public boolean isScrapped()
    {
        this.calc();
        return isScrapped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowCostAssetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the low cost asset amount for the current year.
    /// </summary>
    /// <returns>
    ///    The calculated low cost asset amount for the current year.
    /// </returns>
    public AmountMST lowCostAssetAmount()
    {
        this.calc();

        return  lowCostAssetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowValueAssetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the low value asset amount for the current year.
    /// </summary>
    /// <returns>
    ///    The calculated low value asset amount for the current year.
    /// </returns>

    public AmountMST lowValueAssetAmount()
    {
        this.calc();

        return  lowValueAssetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the net book value for the assets.
    /// </summary>
    /// <returns>
    /// The net book value for the assets.
    /// </returns>
    public AmountMST netBookValue()
    {
        this.calc();

        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            return this.netBookValue_IN();
        }
        // </GIN>
        return netBookValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the net book value for the assets.
    /// </summary>
    /// <returns>
    /// Return the net book value for the assets.
    /// </returns>
    public AmountMST netBookValue_IN()
    {
        AssetAmount balAmount;

        balAmount = 0;
        if (groupDepreciation && allAssetsSold)
        {
            return 0.00;
        }
        if (groupDepreciation)
        {
            if ((abs(disposalSaleValue) + abs(disposalScrapValue)) < abs(acquisitionValue))
            {
                if (allAssetsSold == true)
                {
                    balAmount = 0;
                }
                else
                {
                    if (profitLossValue > 0)
                    {
                        balAmount = 0;
                    }
                    else
                    {
                        balAmount = abs(profitLossValue);
                    }
                }
            }
        }
        if (balAmount)
        {
            return netBookValue + balAmount;
        }
        else
        {
            return netBookValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValueBeforeScrap_LV</Name>
				<Source><![CDATA[
    public AssetNetBookValue netBookValueBeforeScrap_LV()
    {
        AssetAmount ret;

        if (this.isScrapped())
        {
            ret = this.netBookValue() - this.profitLossValue() - this.disposalSaleValue() - this.disposalScrapValue();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValueDisposal</Name>
				<Source><![CDATA[
    public AssetNetBookValue netBookValueDisposal()

    {
        return -(this.disposalSaleValue() +
                 this.disposalScrapValue() +
                 this.profitLossValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        // The client server distinction doesn't exist anymore, there is only one tier
        // onThinClient = (xGlobal::clientKind() == ClientType::Client) && (aosClientMode() == AOSClientMode::Thin);
        onThinClient = false;

        countryContext = SysCountryRegionCode::countryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingAccDepreciation_priorYears_PL</Name>
				<Source><![CDATA[
    public AmountMST openingAccDepreciation_priorYears_PL()
    {
        this.calc();

        return openingAccDepreciation_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingAccDepreciation_thisYear_PL</Name>
				<Source><![CDATA[
    public AmountMST openingAccDepreciation_thisYear_PL()
    {
        this.calc();

        return openingAccDepreciation_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingAccumulatedDepreciation_PL</Name>
				<Source><![CDATA[
    public AmountMST openingAccumulatedDepreciation_PL()
    {
        this.calc();

        return openingAccumulatedDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack in client side.
    /// </summary>
    /// <returns>
    /// A container from different asset values set.
    /// </returns>
    protected container packClient()
    {
        return [#Client2Server];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack on server side.
    /// </summary>
    /// <returns>
    /// A container from the map which contains different asset values.
    /// </returns>
    public container packServer()
    {
        return [#Server2Client];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllAssetsSold_IN</Name>
				<Source><![CDATA[
    public NoYes parmAllAssetsSold_IN(NoYes _allAssetsSold = allAssetsSold)
    {
        allAssetsSold = _allAssetsSold;
        return allAssetsSold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetYear</Name>
				<Source><![CDATA[
    protected AssetYear parmAssetYear(AssetYear _assetYear = assetYear)

    {
        if (!prmisDefault(_assetYear))
        {
            specifiedYear = true;
        }

        assetYear = _assetYear;

        return assetYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    protected TransDate parmDateFrom(TransDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;

        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    protected TransDate parmDateTo(TransDate _dateTo = dateTo)
    {
        dateTo = _dateTo;

        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroup_IN</Name>
				<Source><![CDATA[
    public NoYes parmGroup_IN(NoYes _shift = groupDepreciation)
    {
        groupDepreciation = _shift;
        return groupDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCurrentYear</Name>
				<Source><![CDATA[
    public boolean parmIsCurrentYear(boolean _isCurrentYear = isCurrentYear)
    {
        isCurrentYear = _isCurrentYear;

        return isCurrentYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaintainCurrentYearDateRange</Name>
				<Source><![CDATA[
    internal boolean parmMaintainCurrentYearDateRange(boolean _maintainCurrentYearDateRange = maintainCurrentYearDateRange)
    {
        maintainCurrentYearDateRange = _maintainCurrentYearDateRange;

        return maintainCurrentYearDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentAmountSeparate_JP</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentAmountSeparate_JP(boolean _isDocumentAmountSeparate_JP = isDocumentAmountSeparate_JP)
    {
        isDocumentAmountSeparate_JP = _isDocumentAmountSeparate_JP;
        return isDocumentAmountSeparate_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReclassificationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Keeps the track of reclassifications, so that totals can be adjusted in later calculations.
    /// </summary>
    /// <param name="_transType">
    /// The transaction type of the asset.
    /// </param>
    /// <param name="_amount">
    /// The amount of the transaction.
    /// </param>
    protected void updateReclassificationAmount(AssetTransType _transType, AmountMST _amount)
    {
        switch (_transType)
        {
            case AssetTransType::Acquisition:
            case AssetTransType::AcquisitionAdj:
                acquisitionReclassificationAmount += _amount;
                break;
    
            case AssetTransType::Depreciation:
            case AssetTransType::DepreciationAdj:
            case AssetTransType::ExtraordinaryDepreciation:
            case AssetTransType::BonusDepreciation:
            case AssetTransType::Revaluation:
            case AssetTransType::WriteDownAdj:
                if (countryContext == #isoDE || countryContext == #isoAT)
                {
                    depreciationReclassificationAmount += _amount;
                }
                break;
    
            case AssetTransType::WriteUpAdj:
                if (countryContext == #isoDE || countryContext == #isoAT)
                {
                    writeUpAdjReclassificationAmount += _amount;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPriorYear</Name>
				<Source><![CDATA[
    public boolean parmIsPriorYear(boolean _isPriorYear = isPriorYear)
    {
        isPriorYear = _isPriorYear;

        return isPriorYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReductionEntryDirectOff_JP</Name>
				<Source><![CDATA[
    internal boolean parmIsReductionEntryDirectOff_JP(boolean _isReductionEntryDirectOff_JP = isReductionEntryDirectOff_JP)
    {
        isReductionEntryDirectOff_JP = _isReductionEntryDirectOff_JP;

        return isReductionEntryDirectOff_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUsedCalendar</Name>
				<Source><![CDATA[
    public boolean parmIsUsedCalendar(boolean _isUsedCalendar = isUsedCalendar)
    {
        isUsedCalendar = _isUsedCalendar;

        return isUsedCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRangeAssetGroupId_IN</Name>
				<Source><![CDATA[
    protected Range parmRangeAssetGroupId_IN(Range _rangeAssetGroupId = rangeAssetGroupId)
    {
        rangeAssetGroupId = _rangeAssetGroupId;

        return rangeAssetGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRangeAssetId</Name>
				<Source><![CDATA[
    protected Range parmRangeAssetId(Range _rangeAssetId = rangeAssetId)
    {
        rangeAssetId = _rangeAssetId;

        return rangeAssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRangeBookId</Name>
				<Source><![CDATA[
    protected Range parmRangeBookId(Range _rangeBookId = rangeBookId)
    {
        rangeBookId = _rangeBookId;

        return rangeBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRangeBudgetModel</Name>
				<Source><![CDATA[
    protected Range parmRangeBudgetModel(Range _rangeBudgetModel = rangeBudgetModel)
    {
        rangeBudgetModel = _rangeBudgetModel;

        return rangeBudgetModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRangeDepBookId</Name>
				<Source><![CDATA[
    protected Range parmRangeDepBookId(Range _rangeDepBookId = rangeDepBookId)
    {
        rangeDepBookId = _rangeDepBookId;

        return rangeDepBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSumType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Summarizes balance amounts using the given transaction field type.
    /// </summary>
    /// <param name="_sumType">
    ///   Defines what transaction field should use for summarizing balance amount: <c>AmountCur</c> or <c>AmountMST</c>.
    /// </param>
    /// <returns>A transaction field type.</returns>
    public AssetSumCalcType parmSumType(AssetSumCalcType _sumType = sumType)
    {
        sumType = _sumType;
        return sumType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOffAccDepreciation_PL</Name>
				<Source><![CDATA[
    public AmountMST postOffAccDepreciation_PL()
    {
        this.calc();

        return  postOffAccDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOffAccDepreciation_PriorYears_PL</Name>
				<Source><![CDATA[
    public AmountMST postOffAccDepreciation_PriorYears_PL()
    {
        this.calc();

        return  postOffAccDepreciation_PriorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOffAccDepreciation_ThisYear_PL</Name>
				<Source><![CDATA[
    public AmountMST postOffAccDepreciation_ThisYear_PL()
    {
        this.calc();

        return  postOffAccDepreciation_ThisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preAcquisitionValue_CZ</Name>
				<Source><![CDATA[
    public AmountMST preAcquisitionValue_CZ()
    {
        this.calc();
        return preAcquisitionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>profitLossValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the profit or loss value for the assets sold.
    /// </summary>
    /// <returns>
    /// The profit or loss value for the assets sold.
    /// </returns>
    public AmountMST profitLossValue()
    {
        this.calc();

        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            return this.profitLossValue_IN();
        }
        // </GIN>

        return profitLossValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>profitLossValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the profit/loss value for the assets sold.
    /// </summary>
    /// <returns>
    /// Returns the profit/loss value for the assets sold.
    /// </returns>
    public AmountMST profitLossValue_IN()
    {
        if (groupDepreciation && allAssetsSold)
        {
            return - (acquisitionValue      +
                acquisitionAdjValue         +
                capitalReserveTransferValue +
                disposalScrapValue          +
                disposalSaleValue           +
                depreciationValue           +
                depreciationAdjValue        +
                extraDepreciationValue      +
                bonusDepreciationValue      +
                revaluationValue            +
                writeUpAdjValue             +
                writeDownAdjValue           +
                capitalReserveValue);
        }

        if (groupDepreciation)
        {
            if (allAssetsSold == true)
            {
                return profitLossValue;
            }
            else
            {
                if (profitLossValue > 0)
                {
                    return profitLossValue;
                }
                else
                {
                    return 0;
                }
            }
        }
        return profitLossValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryAllocationAmount_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reduction entry allocation amount.
    /// </summary>
    /// <returns>
    /// The reduction entry allocation amount.
    /// </returns>
    public AmountMST reductionEntryAllocationAmount_JP()
    {
        this.calc();

        return reductionEntryAllocationAmount_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryReserveAmount_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reduction entry reserve amount.
    /// </summary>
    /// <returns>
    /// The reduction entry reserve amount.
    /// </returns>
    public AmountMST reductionEntryReserveAmount_JP()
    {
        this.calc();

        return reductionEntryReserveAmount_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryDirectOffAmount_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reduction entry reserve amount.
    /// </summary>
    /// <returns>
    /// The reduction entry reserve amount.
    /// </returns>
    public AmountMST reductionEntryDirectOffAmount_JP()
    {
        this.calc();

        return reductionEntryDirectOffAmount_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryReserveNBV_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reduction entry reserve net book value.
    /// </summary>
    /// <returns>
    /// The reduction entry reserve net book value.
    /// </returns>
    public AmountMST reductionEntryReserveNBV_JP()
    {
        return this.reductionEntryReserveAmount_JP() + this.reductionEntryAllocationAmount_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationValue</Name>
				<Source><![CDATA[
    public AmountMST revaluationValue()

    {
        this.calc();

        return revaluationValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST   revaluationValue_priorYears()
    {
        this.calc();

        return revaluationValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST   revaluationValue_thisYear()
    {
        this.calc();

        return revaluationValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>majorRepairsValue_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates an amount of major repairs.
    /// </summary>
    /// <returns>An amount of major repairs.</returns>
    [SysObsolete('This method has been deprecated.', false, 29\5\2020)]
    public AssetAmount majorRepairsValue_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeDownAcqAdjValue_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates an acquisition adjustment amount of partial take-down.
    /// </summary>
    /// <returns>An acquisition adjustment amount of partial take-down.</returns>
    [SysObsolete('This method has been deprecated.', false, 29\5\2020)]
    public AssetAmount takeDownAcqAdjValue_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeDownDeprAdjValue_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates a depreciation adjustment amount of partial take-down.
    /// </summary>
    /// <returns>A depreciation adjustment amount of partial take-down.</returns>
    [SysObsolete('This method has been deprecated.', false, 29\5\2020)]
    public AssetAmount takeDownDeprAdjValue_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>secondElementCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the second element cost amount for the current year.
    /// </summary>
    /// <returns>
    ///    The calculated second element cost amount for the current year.
    /// </returns>
    public AmountMST secondElementCostAmount()
    {
        this.calc();

        return  secondElementCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack package from client on server.
    /// </summary>
    /// <param name="packedClient">
    /// The packed container.
    /// </param>
    public void unpackClient(container packedClient)
    {
        [#Client2Server] = packedClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the tracked sums for the specified values.
    /// </summary>
    /// <param name="_transType">
    ///    The transaction type of the asset.
    /// </param>
    /// <param name="_amount">
    ///    The amount of the transaction.
    /// </param>
    /// <param name="_isReclassification">
    ///    A <c>NoYes</c> enumeration value that indicates whether this transaction is a reclassification;
    ///    optional.
    /// </param>
    /// <param name="_revaluationAmount">
    ///    The amount of the revaluation; optional.
    /// </param>
    /// <param name="_lvpType">
    ///    The low value pool type.  The default is none.
    /// </param>
    /// <param name="_interestAmount">
    ///    The interest amount; optional.
    /// </param>
    /// <param name="_postingType">The posting type; obsolete.</param>
    protected void updateSum(AssetTransType _transType,
        AmountMST _amount,
        NoYes _isReclassification = NoYes::No,
        AssetRevaluationAmount _revaluationAmount = 0,
        AssetLowValuePoolType_AU _lvpType = 0,
        AmountMST _interestAmount = 0,
        RAssetPostingType _postingType = RAssetPostingType::None)
    {
        switch (_transType)
        {
            case AssetTransType::Acquisition:
                acquisitionValue       += _amount;
                acquisitionPrice       += _amount;

                if (countryContext == #isoDE || countryContext == #isoAT)
                {
                    interestValue += _interestAmount;
                }

                if (isReductionEntryDirectOff_JP)
                {
                    reductionEntryDirectOffAmount_JP += _amount;
                }
                break;

            case AssetTransType::AcquisitionAdj:
                acquisitionPrice       += _amount;
                acquisitionAdjValue    += _amount;
                
                if (countryContext == #isoDE || countryContext == #isoAT)
                {
                    interestValue += _interestAmount;
                }
                break;

            case AssetTransType::Depreciation:
                depreciationValue      += _amount;
                depreciationRevaluationValue += _revaluationAmount;
                break;

            case AssetTransType::DepreciationAdj:
                depreciationAdjValue   += _amount;
                break;

            case AssetTransType::DisposalSale:
                disposalSaleValue      += _amount;
                // <GEEU>
                if (countryContext == #isoLV || countryContext == #isoEE || countryContext == #isoCZ)
                {
                    isScrapped = true;
                }
                // </GEEU>
                break;

            case AssetTransType::DisposalScrap:
                disposalScrapValue     += _amount;
                // <GEEU>
                if (countryContext == #isoLV || countryContext == #isoEE || countryContext == #isoCZ)
                {
                    isScrapped = true;
                }
                // </GEEU>
                break;

            case AssetTransType::WriteUpAdj:
                writeUpAdjValue        += _amount;
                break;

            case AssetTransType::WriteDownAdj:
                writeDownAdjValue      += _amount;
                break;

            case AssetTransType::Revaluation :
                revaluationValue       += _amount;
                break;

            case AssetTransType::ProfitLoss :
                profitLossValue        += _amount;
                break;
            case AssetTransType::AcqPriorYears :
                acquisitionValue_priorYears += _amount;
                break;

            case AssetTransType::AcqThisYear :
                acquisitionValue_thisYear += _amount;
                break;

            case AssetTransType::AcqAdjPriorYears :
                acquisitionAdjValue_priorYears += _amount;
                break;

            case AssetTransType::AcqAdjThisYear :
                acquisitionAdjValue_thisYear += _amount;
                break;

            case AssetTransType::DepAdjPriorYears :
                depreciationAdjValue_priorYears += _amount;
                break;

            case AssetTransType::DepAdjThisYear :
                depreciationAdjValue_thisYear += _amount;
                break;

            case AssetTransType::DepPriorYears :
                depreciationValue_priorYears += _amount;
                break;

            case AssetTransType::DepThisYear :
                depreciationValue_thisYear += _amount;
                break;

            case AssetTransType::RevaluePriorYears :
                revaluationValue_priorYears += _amount;
                break;

            case AssetTransType::RevalueThisYear :
                revaluationValue_thisYear += _amount;
                break;

            case AssetTransType::WriteDownAdjPriorYears :
                writeDownAdjValue_priorYears += _amount;
                break;

            case AssetTransType::WriteDownAdjThisYear :
                writeDownAdjValue_thisYear += _amount;
                break;

            case AssetTransType::WriteUpAdjPriorYears :
                writeUpAdjValue_priorYears += _amount;
                break;

            case AssetTransType::WriteUpAdjThisYear :
                writeUpAdjValue_thisYear += _amount;
                break;

            case AssetTransType::CapitalReserve :
                capitalReserveValue += _amount;
                break;

            case AssetTransType::CapitalReserveTransfer :
                capitalReserveTransferValue += _amount;
                acquisitionPrice            += _amount;  // transfer of reserve is a kind of acquisition adjustment
                break;

            case AssetTransType::ExtraordinaryDepreciation:
                extraDepreciationValue  += _amount;
                break;

            case AssetTransType::ExtraDepPriorYears :
                extraDepreciationValue_priorYears += _amount;
                break;

            case AssetTransType::ExtraDepThisYear :
                extraDepreciationValue_thisYear += _amount;
                break;

            case AssetTransType::BonusDepreciation :
                bonusDepreciationValue += _amount;
                break;

            case AssetTransType::BonusDepPriorYears :
                bonusDepreciationValue_priorYears += _amount;
                break;

            case AssetTransType::BonusDepThisYear :
                bonusDepreciationValue_thisYear += _amount;
                break;

            case AssetTransType::DerogatoryDecrease :
                derogatoryDecreaseValue += _amount;
                break;

            case AssetTransType::DerogatoryIncrease :
                derogatoryIncreaseValue += _amount;
                break;

            case AssetTransType::DerogatoryDecreaseAllYears :
                derogatoryDecreaseValue_allYears += _amount;
                break;

            case AssetTransType::DerogatoryIncreaseAllYears :
                derogatoryIncreaseValue_allYears += _amount;
                break;
            
            // <GEEU>
            case AssetTransType::DepreciationNotCost_PL :
                depreciationValueNotCost += _amount;
                break;

            case AssetTransType::DepNotCostPriorYears_PL :
                depreciationValueNotCost_priorYears += _amount;
                break;

            case AssetTransType::DeprNotCostThisYear_PL :
                depreciationValueNotCost_thisYear += _amount;
                break;

            case AssetTransType::AccumulatedDepreciation_PL :
                openingAccumulatedDepreciation += _amount;
                break;

            case AssetTransType::AccDepreciationPriorYears_PL :
                openingAccDepreciation_priorYears += _amount;
                break;

            case AssetTransType::AccDepreciationThisYear_PL :
                openingAccDepreciation_thisYear += _amount;
                break;

            case AssetTransType::PostOffAccDepreciation_PL :
                postOffAccDepreciation += _amount;
                break;

            case AssetTransType::PostOffAccDeprPriorYears_PL :
                postOffAccDepreciation_PriorYears += _amount;
                break;

            case AssetTransType::PostOffAccDeprThisYear_PL :
                postOffAccDepreciation_ThisYear += _amount;
                break;

            case AssetTransType::PreAcquisition_CZ :
                preAcquisitionValue += _amount;
                break;
            // </GEEU>
            // <GJP>
            case AssetTransType::ReductionEntryReserve_JP:
                reductionEntryReserveAmount_JP -= _amount;
                break;
            case AssetTransType::ReductionEntryReserveAllocation_JP:
                reductionEntryAllocationAmount_JP -= _amount;
                break;
            // </GJP>
        }

        if (_isReclassification)
        {
            this.updateReclassificationAmount(_transType, _amount);
        }
        
        // Calculate low value pool amounts
        if (countryContext == #isoAU)
        {
            switch (_lvpType)
            {
                case AssetLowValuePoolType_AU::LowCostAsset :
                    lowCostAssetAmount += _amount;
                    break;
                case AssetLowValuePoolType_AU::LowValueAsset :
                    lowValueAssetAmount += _amount;
                    break;
                case AssetLowValuePoolType_AU::SecondElementCost :
                    secondElementCostAmount += _amount;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDownAdjValue</Name>
				<Source><![CDATA[
    public AmountMST writeDownAdjValue()
    {
        this.calc();

        return writeDownAdjValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDownAdjValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST   writeDownAdjValue_priorYears()
    {
        this.calc();

        return writeDownAdjValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDownAdjValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST   writeDownAdjValue_thisYear()
    {
        this.calc();

        return writeDownAdjValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUpAdjValue</Name>
				<Source><![CDATA[
    public AmountMST writeUpAdjValue()
    {
        this.calc();

        return writeUpAdjValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUpAdjValue_priorYears</Name>
				<Source><![CDATA[
    public AmountMST   writeUpAdjValue_priorYears()
    {
        this.calc();

        return writeUpAdjValue_priorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUpAdjValue_thisYear</Name>
				<Source><![CDATA[
    public AmountMST   writeUpAdjValue_thisYear()
    {
        this.calc();

        return writeUpAdjValue_thisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUpDownAdjValue</Name>
				<Source><![CDATA[
    public AssetWriteUpAdj writeUpDownAdjValue()
    {
        return this.writeUpAdjValue() +
               this.writeDownAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUpAdjReclassificationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the write up adjustment reclassification totals for the specified fixed asset and period.
    /// </summary>
    /// <returns>
    ///    The total of all write up adjustment reclassifications for specified fixed asset and period.
    /// </returns>
    public AmountMST writeUpAdjReclassificationAmount()
    {
        this.calc();
    
        return writeUpAdjReclassificationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUpDownAdjValueCZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Czech write up or write down value for a given asset.
    /// </summary>
    /// <returns>
    /// The Czech write up or write down value of the given asset.
    /// </returns>
    public AssetWriteUpAdj writeUpDownAdjValueCZ()
    {
        return this.writeUpAdjValue()     +
               this.writeDownAdjValue()   +
               this.acquisitionAdjValue() +
               this.capitalReserveTransferValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescendantRange_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves a range of the asset descendants for the main fixed asset.
    /// </summary>
    /// <param name="_mainAssetId">The asset number of the main fixed asset.</param>
    /// <param name="_bookId">The value model id to which the main asset belongs.</param>
    /// <returns>The range of the asset descendants.</returns>
    [SysObsolete('This method has been deprecated', false, 25\5\2020)]
    protected str getDescendantRange_RU(AssetId _mainAssetId, AssetBookId _bookId)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExtraSumWithDescendants_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the extra tracked sums handling descendants for the specified values.
    /// </summary>
    /// <param name="_assetId">The asset number of the fixed asset.</param>
    /// <param name="_bookId">The value model id to which the asset belongs.</param>
    [SysObsolete('This method has been deprecated.', false, 29\5\2020)]
    protected void updateExtraSumWithDescendants_RU(AssetId _assetId, AssetBookId _bookId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativeNetBookValue</Name>
				<Source><![CDATA[
    internal boolean isNegativeNetBookValue(Amount _amount)
    {
        return this.netBookValue() + _amount < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNetBookValueHigherThanAcquisition</Name>
				<Source><![CDATA[
    internal boolean isNetBookValueHigherThanAcquisition(Amount _amount)
    {
        return this.netBookValue() + _amount > this.acquisitionValueAll();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>