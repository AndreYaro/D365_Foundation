<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportDP_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportDP_BE</c> class is the report data provider class for the associated SSRS
///    <c>TaxReport_BE</c> reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(SrsTmpTblMarshallerContract))
]
class TaxReportDP_BE extends SRSReportDataProviderBase
{
    TaxReportTmp_BE taxReportTmp_BE;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportTmp_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxReportTmp_BE</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxReportTmp_BE</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('TaxReportDS_BE')]
    public TaxReportTmp_BE getTaxReportTmp_BE()
    {
        select * from taxReportTmp_BE;
        return taxReportTmp_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        SRSReportRunPermission r;
        SrsTmpTblMarshallerContract contract;

        contract = this.parmDataContract() as SrsTmpTblMarshallerContract;
        r = new SRSReportRunPermission();
        r.assert();

        taxReportTmp_BE = SRSTmpTblMarshaller::getTmpTbl(contract.parmTmpTableDataRecId());
        //SRSTmpTblMarshaller::deleteTmpTblData(contract.parmTmpTableDataRecId());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
