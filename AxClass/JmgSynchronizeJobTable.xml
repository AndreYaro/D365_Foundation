<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgSynchronizeJobTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgSynchronizeJobTable</c> class synchronizes the contents of the <c>JmgJobTable</c> table
/// with jobs from other modules of .
/// </summary>
/// <remarks>
///  Jobs originate from the production module, the project module, the HRM module, and the shop floor
///  control module.If these jobs should be available for employees to register on, they must also be
///  created in the
///  <c>
///  JmgJobTable
///  </c>
///   table. When this class is run, it creates, updates, or deletes records in the
///  <c>
///  JmgJobTable
///  </c>
///   table, each corresponding to a job. When this batch run is run, jobs from all four modules are
///  synchronized in the
///  <c>
///  JmgJobTable
///  </c>
///   table. If jobs from individual modules should be synchronized, use the appropriate method from the
///  following list:
///  <list type="bullet">
///   <item>
///   <description>The <see cref="M:JmgSynchronizeJobTable::synchronizeHRM" /> synchronizes absence jobs
///   from the HRM module.</description>
///   </item>
///   <item>
///   <description>The <see cref="M:JmgSynchronizeJobTable::synchronizeProduction" /> synchronizes jobs
///   from the production module.</description>
///   </item>
///   <item>
///   <description>The <see cref="M:JmgSynchronizeJobTable::synchronizeProject" /> synchronizes jobs from
///   the project module.</description>
///   </item>
///   <item>
///   <description>The <see cref="M:JmgSynchronizeJobTable::synchronizeSFC" /> synchronizes jobs from the
///   shop floor control module.</description>
///   </item>
///  </list>
/// </remarks>
class JmgSynchronizeJobTable extends RunBaseBatch implements BatchRetryable
{
    DialogField dfSynchronizeProduction;
    DialogField dfSynchronizeProject;
    DialogField dfSynchronizeSFC;
    DialogField dfSynchronizeHRM;

    NoYes       synchronizeProduction;
    NoYes       synchronizeProject;
    NoYes       synchronizeSFC;
    NoYes       synchronizeHRM;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        synchronizeProduction,
        synchronizeProject,
        synchronizeSFC,
        synchronizeHRM
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods described by the RunBaseDialogable interface.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized dialog can be passed.
    /// </param>
    /// <param name="forceOnClient">
    ///    Specifies if the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    A class that contains the methods described by the RunBaseDialogable interface.
    /// </returns>
    /// <remarks>
    ///    The dialog for <c>JmgSynchronizeJobTable</c> displays four check boxes, allowing the user to select
    ///    for which modules the JmgJobTable table should be synchronized.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret;

        ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS39788");

        if (isConfigurationkeyEnabled(configurationkeynum(JmgJob)))
        {
            dfSynchronizeProduction = ret.addField(enumstr(NoYes), "@SYS39789", "@SYS39790");
            dfSynchronizeProject    = ret.addField(enumstr(NoYes), "@SYS39791", "@SYS39792");

            dfSynchronizeProduction.value(synchronizeProduction);
            dfSynchronizeProject.value(synchronizeProject);
        }

        if (isConfigurationkeyEnabled(configurationkeynum(Jmg)))
        {
            dfSynchronizeSFC        = ret.addField(enumstr(NoYes), "@SYS137438", "@SYS39794");
            dfSynchronizeHRM        = ret.addField(enumstr(NoYes), "@SYS39956", "@SYS39957");

            dfSynchronizeSFC.value(synchronizeSFC);
            dfSynchronizeHRM.value(synchronizeHRM);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is called after the dialog is closed. It must assign the dialog values to the internal
    ///    variables. It saves the check box choices made by the user.
    /// </summary>
    /// <returns>
    ///    boolean: Returns the value of super().
    /// </returns>
    /// <remarks>
    ///    Should not be called directly. Called automatically when user closes dialog.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (isConfigurationkeyEnabled(configurationkeynum(JmgJob)))
        {
            synchronizeProduction   = dfSynchronizeProduction.value();
            synchronizeProject      = dfSynchronizeProject.value();
        }

        if (isConfigurationkeyEnabled(configurationkeynum(Jmg)))
        {
            synchronizeSFC          = dfSynchronizeSFC.value();
            synchronizeHRM          = dfSynchronizeHRM.value();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container ret = [#CurrentVersion, #CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39788";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the actual synchronization of jobs.
    /// </summary>
    /// <remarks>
    /// This method calls the following static methods:<see cref="M:JmgSynchronizeJobTable::synchronizeHRM"
    /// /><see cref="M:JmgSynchronizeJobTable::synchronizeProduction" /><see
    /// cref="M:JmgSynchronizeJobTable::synchronizeProject" /><see
    /// cref="M:JmgSynchronizeJobTable::synchronizeSFC" />
    /// </remarks>
    public void run()
    {
        JmgParameters                   jmgParameters;
        JmgJobTableSynchronizationMode  previousMode;
        JmgJobTable                     jmgJobTable;

        super();

        ttsbegin;
        jmgParameters = JmgParameters::find(true);
        previousMode = jmgParameters.JobTableSynchronizationMode;
        jmgParameters.JobTableSynchronizationMode = JmgJobTableSynchronizationMode::Online;
        jmgParameters.update();

        if (synchronizeProduction   == NoYes::Yes)
        {
            delete_from jmgJobTable
                where jmgJobTable.Type == JmgJobTableType::ProdQueueBefore ||
                      jmgJobTable.Type == JmgJobTableType::ProdProcess ||
                      jmgJobTable.Type == JmgJobTableType::ProdOverlap ||
                      jmgJobTable.Type == JmgJobTableType::ProdTransport ||
                      jmgJobTable.Type == JmgJobTableType::ProdQueueAfter;
            JmgSynchronizeJobTable::synchronizeProduction();
        }

        if (synchronizeProject      == NoYes::Yes)
        {
            delete_from jmgJobTable
                where jmgJobTable.Type == JmgJobTableType::ProjActivity ||
                      jmgJobTable.Type == JmgJobTableType::ProjProject ||
                      jmgJobTable.Type == JmgJobTableType::ProjBudget;
            JmgSynchronizeJobTable::synchronizeProject();
        }

        if (synchronizeSFC          == NoYes::Yes)
        {
            delete_from jmgJobTable
                where jmgJobTable.Type == JmgJobTableType::SFCActivity;
            JmgSynchronizeJobTable::synchronizeSFC();
        }

        if (synchronizeHRM          == NoYes::Yes)
        {
            delete_from jmgJobTable
                where jmgJobTable.Type == JmgJobTableType::HRMAbsenceCodeGroup ||
                      jmgJobTable.Type == JmgJobTableType::HRMAbsenceCode;
            JmgSynchronizeJobTable::synchronizeHRM();
        }
        jmgParameters.JobTableSynchronizationMode = previousMode;
        jmgParameters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        int version;
        version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgSynchronizeJobTable</c> class when it is called from a menu
    ///    item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgSynchronizeJobTable</c> class.
    /// </param>
    /// <remarks>
    ///    Use the
    ///    <c>
    ///       main
    ///    </c>
    ///     class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///     method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Initialize the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        JmgSynchronizeJobTable synchronizeJobTable = new JmgSynchronizeJobTable();
        if (synchronizeJobTable.prompt())
        {
            synchronizeJobTable.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeHRM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes jobs that are found in the <c>HRM</c> module with records in the <c>JmgJobTable</c>
    /// table.
    /// </summary>
    /// <remarks>
    /// For a description of how jobs from the <c>HRMAbsenceCode</c> and <c>HRMAbsenceCodeGroup</c> tables
    /// are mapped to <c>JmgJobTable</c> records, see the <c>synchronizeHRMAbsenceCode</c> and
    /// <c>synchronizeHRMAbsenceCodeGroup</c> methods.
    /// </remarks>
    public static void synchronizeHRM()
    {
        HRMAbsenceCodeGroup hrmAbsenceCodeGroup;
        HRMAbsenceCode      hrmAbsenceCode;

        JmgJobTable         jmgJobTable;
        ttsbegin;

        delete_from jmgJobTable
            where jmgJobTable.Type  == JmgJobTableType::HRMAbsenceCode      ||
                  jmgJobTable.Type  == JmgJobTableType::HRMAbsenceCodeGroup;

        while select hrmAbsenceCodeGroup
        {
            JmgJobTable::synchronizeHRMAbsenceCodeGroup(hrmAbsenceCodeGroup, false);
        }

        while select hrmAbsenceCode
        {
            JmgJobTable::synchronizeHRMAbsenceCode(hrmAbsenceCode, false);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes jobs that are found in the <c>Production</c> module with records in the
    /// <c>JmgJobTable</c> table.
    /// </summary>
    /// <remarks>
    /// For a description of how jobs from the <c>ProdRoute</c> and <c>ProdRouteJob</c> tables are mapped
    /// to <c>JmgJobTable</c> records, see the <c>synchronizeProdRoute</c> and
    /// <c>synchronizeProdRouteJob</c> methods.
    /// </remarks>
    public static void synchronizeProduction()
    {
        ProdTable               prodTable;
        JmgJobTable             jmgJobTable;
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;
        ttsbegin;

        delete_from jmgJobTable
            where jmgJobTable.Type  == JmgJobTableType::ProdOverlap     ||
                  jmgJobTable.Type  == JmgJobTableType::ProdProcess     ||
                  jmgJobTable.Type  == JmgJobTableType::ProdQueueAfter  ||
                  jmgJobTable.Type  == JmgJobTableType::ProdQueueBefore ||
                  jmgJobTable.Type  == JmgJobTableType::ProdSetup       ||
                  jmgJobTable.Type  == JmgJobTableType::ProdTransport;

        while select prodTable
            where prodTable.ProdStatus  == ProdStatus::Released     ||
                  prodTable.ProdStatus  == ProdStatus::StartedUp    ||
                  prodTable.ProdStatus  == ProdStatus::ReportedFinished
        {
            JmgJobTable::synchronizeProdTable(prodTable, false);

            // Update report as finished:
            while select JobId, JobFinished
                from  jmgStampJournalTrans
                where jmgStampJournalTrans.JobRef       == prodTable.ProdId &&
                      jmgStampJournalTrans.JobFinished  == NoYes::Yes
            {
                JmgJobTable::updateReportedFinished(jmgStampJournalTrans.JobId, jmgStampJournalTrans.JobFinished);
            }

            while select JobId, JobFinished
                from  jmgStampTrans
                where jmgStampTrans.JobRef      == prodTable.ProdId &&
                      jmgStampTrans.JobFinished == NoYes::Yes
            {
                JmgJobTable::updateReportedFinished(jmgStampTrans.JobId, jmgStampTrans.JobFinished);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes jobs that are found in the project module with records in the <c>JmgJobTable</c>
    /// table.
    /// </summary>
    /// <remarks>
    /// For a description of how jobs from the <c>ProjTable</c>, <c>ProjActivity</c>, and
    /// <c>ProjForecastEmpl</c> tables are mapped to records in the <c>JmgJobTable</c> table, see the
    /// <c>synchronizeProjTable</c>, <c>synchronizeProjActivity</c>, and
    /// <c>synchronizeProjBudgetEmplMethod</c> methods.
    /// </remarks>
    public static void synchronizeProject()
    {
        ProjTable   projTable;
        JmgJobTable jmgJobTable;
        ttsbegin;

        delete_from jmgJobTable
            where jmgJobTable.Type  == JmgJobTableType::ProjActivity    ||
                  jmgJobTable.Type  == JmgJobTableType::ProjBudget      ||
                  jmgJobTable.Type  == JmgJobTableType::ProjProject;

        while select projTable
        {
            JmgJobTable::synchronizeProjTable(projTable, false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeSFC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes jobs that are found in the shop floor control module with records in the
    /// <c>JmgJobTable</c> table.
    /// </summary>
    /// <remarks>
    /// For a description of how jobs from the <c>JmgIpcActivity</c> tables are mapped to records in the
    /// <c>JmgJobTable</c> table, see the <c>synchronizeJmgIpcActivity</c> method.
    /// </remarks>
    public static void synchronizeSFC()
    {
        JmgIpcActivity  jmgIpcActivity;
        JmgJobTable     jmgJobTable;
        ttsbegin;

        delete_from jmgJobTable
            where jmgJobTable.Type  == JmgJobTableType::SFCActivity     ||
                  jmgJobTable.Type  == JmgJobTableType::SFCBreak        ||
                  jmgJobTable.Type  == JmgJobTableType::SFCClockIn      ||
                  jmgJobTable.Type  == JmgJobTableType::SFCClockOut     ||
                  jmgJobTable.Type  == JmgJobTableType::SFCEventCode    ||
                  jmgJobTable.Type  == JmgJobTableType::SFCOnCall       ||
                  jmgJobTable.Type  == JmgJobTableType::SFCStartTeam    ||
                  jmgJobTable.Type  == JmgJobTableType::SFCStopTeam;

        while select jmgIpcActivity
        {
            JmgJobTable::synchronizeJmgIpcActivity(jmgIpcActivity, false);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>