<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_InventCostTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetPanel_InventCostTrans</c> class uses <c>InventCostTrans</c> record data to fetch
///    cost rollup and cost variance records that will be used in cost rollup representation.
/// </summary>
/// <remarks>
///    This class should be used by the <c>InventCostTrans</c> form.
/// </remarks>
class CostSheetPanel_InventCostTrans extends CostSheetPanel
{
    InventCostTrans inventCostTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costRollupFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which field group should be used to represent cost rollup data.
    /// </summary>
    /// <returns>
    /// A field group name.
    /// </returns>
    protected str costRollupFieldGroup()
    {
        return tableFieldgroupStr(CostTmpCostRollup, CostVariances);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTmpCostRollup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates data for a cost rollup data source.
    /// </summary>
    /// <returns>
    /// A <c>CostTmpCostRollup</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The cost amount is divided by the quantity value selected in the header controls group.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// An unexpected <c>CostSheetPanelPer</c> value is used.
    /// </exception>
    protected CostTmpCostRollup costTmpCostRollup()
    {
        CostTmpCostRollup   costTmpCostRollup;

        if (per != CostSheetPanelPer::LotSize)
            throw error("@SCM:UnexpectedCostSheetPanelPer");

        while select CostGroupId, VarianceType, VarianceLedgerDimension, VarianceOffsetLedgerDimension, VariancePosting, VariancePostingOffset,
                     sum(CostAmount), sum(VarianceAmount) from sourceCostTmpCostRollup
            group by CostGroupId, VarianceType, VarianceLedgerDimension, VarianceOffsetLedgerDimension, VariancePosting, VariancePostingOffset
                where #Level_Corresponds_To_RollupLevel
        {
            costTmpCostRollup.data(sourceCostTmpCostRollup);
            costTmpCostRollup.insert();
        }

        return costTmpCostRollup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dynamically built controls.
    /// </summary>
    /// <remarks>
    /// This method should be executed before the <c>super</c> method call in the <c>init</c> method of the
    /// caller form.
    /// </remarks>
    public void init()
    {
        super();

        view = CostSheetPanelView::CostRollup;
        viewComboBox.selection(enum2int(view));
        viewComboBox.visible(false);

        per = CostSheetPanelPer::LotSize;
        perComboBox.selection(enum2int(per));
        perComboBox.visible(false);

        qty = 1;
        qtyReal.realValue(qty);
        qtyReal.allowEdit(this.allowEditQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the unit ID and the lot size values.
    /// </summary>
    /// <remarks>
    /// This method should be overridden in subclasses.
    /// </remarks>
    protected void initUnitIdAndLotSize()
    {
        if (inventCostTrans.VarianceQty == 0.00)
        {
            lotSize = 1.00; // Prevent divizion by zero in costTmpCostRollup() and updateGrids()
                            // methods of the parent class
        }
        else
        {
            lotSize = inventCostTrans.VarianceQty;
        }

        qty = inventCostTrans.VarianceQty;

        qtyReal.realValue(qty);

        unitIdString.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a packed list with cost rollup records that will later be used as a source for cost
    /// rollup or costing sheet grids.
    /// </summary>
    /// <returns>
    /// A container.
    /// </returns>
    /// <remarks>
    /// This method should be overridden in subclasses.
    /// </remarks>
    protected container packedRecordsList()
    {
        return CostSheetPanel_InventCostTrans::packedServerInventCostTrans(inventCostTrans, lotSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostTrans</Name>
				<Source><![CDATA[
    public InventCostTrans parmInventCostTrans(InventCostTrans _inventCostTrans = inventCostTrans)
    {
        inventCostTrans = _inventCostTrans;

        return inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalContributorFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which fields of the cost rollup table should be used to calculate the total amount.
    /// </summary>
    /// <returns>
    /// A set that contains the field IDs.
    /// </returns>
    protected Set totalContributorFieldList()
    {
        Set fieldIdSet = new Set(typeName2Type(extendedTypeStr(FieldId)));
        fieldIdSet.add(fieldNum(CostTmpCostRollup, VarianceAmount));

        return fieldIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines what label should be used in front of the total value.
    /// </summary>
    /// <returns>
    /// The label for the total amount.
    /// </returns>
    protected str totalLabel()
    {
        return "@SYS111258";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class and adds controls to the caller form at runtime.
    /// </summary>
    /// <param name="_formRun">
    ///    The caller form.
    /// </param>
    /// <param name="_parentId">
    ///    The ID of the caller form tab page or group to which to add the complex control.
    /// </param>
    /// <returns>
    ///    The instance of the class.
    /// </returns>
    /// <remarks>
    ///    This method should be called before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public static CostSheetPanel_InventCostTrans newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_InventCostTrans costSheetPanel = new CostSheetPanel_InventCostTrans();

        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches <c>InventCostTransVariance</c> and <c>InventItemCostGroupRollup</c> records and fills in
    ///    the cost rollup table buffer.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    An <c>InventCostTrans</c> record.
    /// </param>
    /// <param name="_qty">
    ///    The quantity by which to multiply the cost and variance amounts.
    /// </param>
    /// <returns>
    ///    Packed <c>List</c> object that has cost rollup records.
    /// </returns>
    protected static container packedServerInventCostTrans(
        InventCostTrans _inventCostTrans,
        Qty             _qty)
    {
        CostTmpCostRollup           costTmpCostRollup;
        InventItemCostGroupRollup   inventItemCostGroupRollup;
        InventCostTransVariance     inventCostTransVariance;

        List list = new List(Types::Record);

        if (!_inventCostTrans.RecId)
            return list.pack();

        inventCostTransVariance.recordLevelSecurity(true);
        inventItemCostGroupRollup.recordLevelSecurity(true);

        while select CostGroupId, Level, Split, CostAmount, VarianceType, DefaultDimension, LedgerDimension, OffsetLedgerDimension, Posting, PostingOffset
            from inventCostTransVariance
            where inventCostTransVariance.InventCostTransRefRecId == _inventCostTrans.RecId
        outer join CostAmountStd, Qty from inventItemCostGroupRollup
            where inventItemCostGroupRollup.InventItemPriceRefRecId == _inventCostTrans.ItemPriceRefRecId
               && inventItemCostGroupRollup.CostGroupId             == inventCostTransVariance.CostGroupId
               && inventItemCostGroupRollup.CostLevel               == inventCostTransVariance.Level
               && inventItemCostGroupRollup.Split                   == inventCostTransVariance.Split
        {
            costTmpCostRollup.clear();
            costTmpCostRollup.CostGroupId           = inventCostTransVariance.CostGroupId;
            costTmpCostRollup.Level                 = inventCostTransVariance.Level;
            costTmpCostRollup.Split                 = inventCostTransVariance.Split;

            costTmpCostRollup.CostAmount            = inventItemCostGroupRollup.CostAmountStd
                                                    * _qty
                                                    / (inventItemCostGroupRollup.Qty ? inventItemCostGroupRollup.Qty : 1);

            costTmpCostRollup.VarianceAmount                = inventCostTransVariance.CostAmount;
            costTmpCostRollup.VarianceType                  = inventCostTransVariance.VarianceType;
            costTmpCostRollup.VarianceLedgerDimension       = inventCostTransVariance.LedgerDimension;
            costTmpCostRollup.VarianceOffsetLedgerDimension = inventCostTransVariance.OffsetLedgerDimension;
            costTmpCostRollup.VariancePosting               = inventCostTransVariance.Posting;
            costTmpCostRollup.VariancePostingOffset         = inventCostTransVariance.PostingOffset;
            costTmpCostRollup.insert();
        }

        while select CostGroupId, Level, Split, VarianceType, VarianceLedgerDimension, VarianceOffsetLedgerDimension, VariancePosting, VariancePostingOffset,
                     sum(CostAmount), sum(VarianceAmount) from costTmpCostRollup
            group by CostGroupId, Level, Split, VarianceType, VarianceLedgerDimension, VarianceOffsetLedgerDimension, VariancePosting, VariancePostingOffset
        {
            list.addEnd(costTmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>