<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerPaymentRegisterDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used as the data provider for the <c>PayrollWorkerPaymentRegister</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(PayrollWorkerPaymentRegisterContract)),
    SRSReportQueryAttribute('PayrollWorkerPaymentRegister')
]
class PayrollWorkerPaymentRegisterDP extends SRSReportDataProviderBase
{
    PayrollWorkerPaymentRegisterTmp payrollWorkerPaymentRegisterTmp;
    PayrollPayCycleRecId            payCycleRecId;
    PayrollPayPeriodRecId           fromPayPeriodRecId;
    PayrollPayPeriodRecId           toPayPeriodRecId;
    boolean                         printSSN;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPayrollWorkerPaymentRegisterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns temporary table PayrollWorkerPaymentRegisterTmp data.
    /// </summary>
    /// <returns>
    /// Temporary table PayrollWorkerPaymentRegisterTmp table.
    /// </returns>
    [
        SRSReportDataSetAttribute('PayrollWorkerPaymentRegisterTmp')
    ]
    public PayrollWorkerPaymentRegisterTmp getPayrollWorkerPaymentRegisterTmp()
    {
        select payrollWorkerPaymentRegisterTmp;
        return payrollWorkerPaymentRegisterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare the data for the report.
    /// </summary>
    private void prepareReportData()
    {
        Query                                   query;
        QueryRun                                queryRun;
        PayrollPayStatement                     payStatement;
        HcmWorker                               hcmWorker;
        HcmPersonIdentificationNumber           hcmPersonIdentificationNumber;
        PayrollPayStatementTaxLine              payrollPayStatementTaxLine;
        PayrollPayStatementBenefitLine          payrollPayStatementBenefitLine;
        DirPartyName                            personName;
        LedgerJournalTrans                      ledgerJournalTrans;
        LedgerJournalTransPayrollDisbursement   payrollDisbursement;
        HcmIdentificationTypeRecId              identificationTypeRecId;

        identificationTypeRecId = HcmSharedParameters::find().SSNIdentificationType;

        query = this.parmQuery();

        FromDate periodStartDate = PayrollPayPeriod::find(fromPayPeriodRecId).PeriodStartDate;
        ToDate   periodEndDate   = PayrollPayPeriod::find(toPayPeriodRecId).PeriodEndDate;

        QueryBuildDataSource payrollPayPeriodDS = query.dataSourceTable(tablenum(PayrollPayStatement), 1).addDataSource(tableNum(PayrollPayPeriod));
        payrollPayPeriodDS.joinMode(JoinMode::ExistsJoin);
        payrollPayPeriodDS.addLink(fieldnum(PayrollPayStatement, PayPeriod), fieldnum(PayrollPayPeriod, RecId));
        payrollPayPeriodDS.addRange(fieldNum(PayrollPayPeriod, PeriodStartDate)).value(SysQueryRangeUtil::dateRange(periodStartDate, periodEndDate));
        payrollPayPeriodDS.addRange(fieldNum(PayrollPayPeriod, PayCycle)).value(SysQuery::value(payCycleRecId));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            payStatement = queryRun.get(tablenum(PayrollPayStatement));

            hcmWorker = hcmWorker::find(payStatement.Worker);
            personName = DirPartyTable::getName(hcmWorker.Person);

            if (printSSN)
            {
                hcmPersonIdentificationNumber = HcmPersonIdentificationNumber::findByPersonAndType(hcmWorker.Person, identificationTypeRecId);
            }

            // tax deduction amount
            select sum(AccountingCurrencyAmount) from payrollPayStatementTaxLine
                where payrollPayStatementTaxLine.PayStatement == payStatement.RecId
                    && payrollPayStatementTaxLine.IsEmployer == NoYes::No
                    && payrollPayStatementTaxLine.IsMarkedForRemoval == NoYes::No;

            // benefit deduction amount
            select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLine
                where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId
                    && payrollPayStatementBenefitLine.IsEmployer == NoYes::No
                    && payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

            if (payStatement.PaymentMethodType == PayrollPaymentMethodType::Check)
            {
                // Check number
                select firstonly BankChequeNum from ledgerJournalTrans
                join PayStatement from payrollDisbursement
                    where ledgerJournalTrans.RecId == payrollDisbursement.RefRecId
                        && payrollDisbursement.PayStatement == payStatement.RecId;
            }
            else
            {
                ledgerJournalTrans.clear();
            }
            payrollWorkerPaymentRegisterTmp.PersonnelNumber = hcmWorker.PersonnelNumber;
            payrollWorkerPaymentRegisterTmp.Worker = personName;
            payrollWorkerPaymentRegisterTmp.IdentificationNumber = hcmPersonIdentificationNumber.IdentificationNumber;
            payrollWorkerPaymentRegisterTmp.DocumentNumber = payStatement.DocumentNumber;
            payrollWorkerPaymentRegisterTmp.PaymentType = payStatement.PaymentType;
            payrollWorkerPaymentRegisterTmp.BankChequeNum = ledgerJournalTrans.BankChequeNum;
            payrollWorkerPaymentRegisterTmp.GrossAccountingCurrencyAmount = payStatement.GrossAccountingCurrencyAmount;
            payrollWorkerPaymentRegisterTmp.TaxDeductionAmount = payrollPayStatementTaxLine.AccountingCurrencyAmount;
            payrollWorkerPaymentRegisterTmp.BenefitDeductionAmount = payrollPayStatementBenefitLine.AccountingCurrencyAmount;
            payrollWorkerPaymentRegisterTmp.NetAccountingCurrencyAmount = payStatement.NetAccountingCurrencyAmount;

            // tax contribution amount
            select sum(AccountingCurrencyAmount) from payrollPayStatementTaxLine
                where payrollPayStatementTaxLine.PayStatement == payStatement.RecId
                    && payrollPayStatementTaxLine.IsEmployer == NoYes::Yes
                    && payrollPayStatementTaxLine.IsMarkedForRemoval == NoYes::No;

            // benefit contribution amount
            select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLine
                where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId
                    && payrollPayStatementBenefitLine.IsEmployer == NoYes::Yes
                    && payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

            payrollWorkerPaymentRegisterTmp.TaxContributionAmount = payrollPayStatementTaxLine.AccountingCurrencyAmount;
            payrollWorkerPaymentRegisterTmp.BenefitContributionAmount = payrollPayStatementBenefitLine.AccountingCurrencyAmount;

            payrollWorkerPaymentRegisterTmp.insert();
            payrollWorkerPaymentRegisterTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  process PayrollWorkerPaymentRegisterReport data.
    /// </summary>
    public void processReport()
    {
        PayrollWorkerPaymentRegisterContract    contract;

        contract = this.parmDataContract();

        if (contract)
        {
            payCycleRecId = contract.parmPayCycleRecId();
            fromPayPeriodRecId = contract.parmFromPayPeriodRecId();
            toPayPeriodRecId = contract.parmToPayPeriodRecId();
            printSSN = contract.parmPrintSSN();
        }

        this.prepareReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PayrollWorkerPaymentRegisterDP construct()
    {
        return new PayrollWorkerPaymentRegisterDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
