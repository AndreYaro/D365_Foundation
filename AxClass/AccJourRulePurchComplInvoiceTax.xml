<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRulePurchComplInvoiceTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccJourRulePurchComplInvoiceTax</c> class derives ledger dimensions and allocations from a
///    business event, an accounting policy, and a monetary amount.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_PurchComplementaryInv), BusinessEvent_SalesComplementaryInv::SalesComplementaryInvoice, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_PurchComplementaryInv), BusinessEvent_SalesComplementaryInv::SalesComplementaryInvoice, MonetaryAmount::TaxNonRecoverable)
]
class AccJourRulePurchComplInvoiceTax extends AccountingJournalizingRule
{
    TaxDirection taxDirection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseInventMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    public boolean canUseInventMainAccDimensionListProvider()
    {
        if (BrazilParameters::isEnabled() && this.isTaxIncluded_BR())
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTaxMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    public boolean canUseTaxMainAccDimensionListProvider()
    {
        if (BrazilParameters::isEnabled() && this.isTaxIncluded_BR())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        SourceDocumentLineItemITax      iTax;

        super();

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxDirection = iTax.parmTaxDirection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the current tax source document line is included in the price or not
    /// </summary>
    /// <returns>
    ///     True if the current source document line tax is included, otherwise false
    /// </returns>
    private boolean isTaxIncluded_BR()
    {
        TaxSourceDocSublineItem taxSourceDocSublineItem;
        if (sourceDocumentLineItem is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = sourceDocumentLineItem;

            if (taxSourceDocSublineItem.isIncludedInPrice_BR())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        AccountingDistributionRule accountingDistributionRule;

        if (this.isTaxIncluded_BR())
        {
            accountingDistributionRule = AccountingDistributionRule::newRule(
                this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem(),
                MonetaryAmount::ExtendedPrice);

            return accountingDistributionRule.parmLedgerPostingType();
        }
        if (taxDirection == TaxDirection::UseTax)
        {
            return LedgerPostingType::Tax;
        }
        else
        {
            return LedgerPostingType::VendBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit     side = DebitCredit::Credit;

        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            side = DebitCredit::Debit;
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>