<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalDistribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalDistribute</c> class splits the lines of a journal into several new journals.
/// </summary>
public class LedgerJournalDistribute implements SysPackable
{
    LedgerJournalId ledgerJournalId;
    boolean suppressClientMessages = false;
    boolean transferErrors = false;

    private int maxLineLimit = LedgerJournalMaxLineLimit::getMaxLineLimit();
    private boolean isLedgerJournalForcedJournalSplitFeatureEnabled = LedgerJournalForcedJournalSplitFeature::isEnabled();

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        ledgerJournalId,
        suppressClientMessages,
        transferErrors
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNewJournal</Name>
				<Source><![CDATA[
    protected LedgerJournalTable createNewJournal(
        LedgerJournalTableData  _ledgerJournalTableData)
    {
        LedgerJournalTable  ledgerJournalTable = this.populateNewJournal(_ledgerJournalTableData);
        ledgerJournalTable = this.insertNewJournal(ledgerJournalTable);

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LedgerJournalTable</c> table buffer based on <c>LedgerJournalTableData</c> class object.
    /// </summary>
    /// <param name = "_ledgerJournalTableData">
    /// The initialized <c>LedgerJournalTableData</c> class object.
    /// </param>
    /// <returns>
    /// The populated <c>LedgerJournalTable</c> table buffer.
    /// </returns>
    [Wrappable(true)]
    final protected LedgerJournalTable populateNewJournal(LedgerJournalTableData _ledgerJournalTableData)
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable.JournalNum = _ledgerJournalTableData.nextJournalId();
        ledgerJournalTable.initFromLedgerJournalTable(_ledgerJournalTableData.journalTable());

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>LedgerJournalTable</c> record based on populated <c>LedgerJournalTable</c> table buffer.
    /// </summary>
    /// <param name = "_ledgerJournalTable">
    /// The initialized <c>LedgerJournalTable</c> table buffer.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTable</c> table buffer.
    /// </returns>
    [Wrappable(true)]
    final protected LedgerJournalTable insertNewJournal(LedgerJournalTable _ledgerJournalTable)
    {
        _ledgerJournalTable.insert();

        return _ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits a journal if the journal is large.
    /// </summary>
    /// <param name="_suppressClientMessages">
    ///    A Boolean value that indicates whether items, such as dialogs, should be suppressed; optional.
    ///    Infolog messages are okay. The default value is false.
    /// </param>
    /// <returns>
    ///    A <c>RecordSortedList</c> object that contains the newly created journals.
    /// </returns>
    /// <remarks>
    ///    The original journal is not contained in the list returned by this method.
    ///    A journal is split
    ///    across voucher boundaries when the size of the journal is greater than the amount set by the user.
    ///    For example, if the maximum size of a journal is 1000, but the first voucher boundary occurs at
    ///    1278, the original journal will have 1277 records in it. The newly created journal will have the
    ///    next 1000+ records starting at 1278.
    /// </remarks>
    public RecordSortedList distributeJournalLines(boolean _suppressClientMessages = false)
    {
        #OCCRetryCount

        LedgerJournalTable      ledgerJournalTable      = LedgerJournalTable::find(ledgerJournalId);
        LedgerJournalTableData  ledgerJournalTableData  = JournalTableData::newTable(ledgerJournalTable);
        LedgerJournalTrans      ledgerJournalTrans;
        Counter                 linesInBatch;
        Voucher                 firstVoucher;
        Voucher                 lastVoucher;
        Voucher                 lastVoucherInOrig;
        RecordSortedList        journalList;

        if (!this.validate())
        {
            throw error("@SYS65081");
        }

        journalList = new RecordSortedList(tablenum(LedgerJournalTable));

        journalList.sortOrder(fieldnum(LedgerJournalTable, JournalNum));

        // Move past the lines that'll fit in the original journal
        while select Voucher from ledgerJournalTrans
            order by Voucher
            where ledgerJournalTrans.JournalNum == ledgerJournalId
        {
            if (lastVoucher != ledgerJournalTrans.Voucher)
            {
                if (isLedgerJournalForcedJournalSplitFeatureEnabled)
                {
                    if (linesInBatch >= maxLineLimit)
                    {
                        break;
                    }
                    lastVoucher = ledgerJournalTrans.Voucher;
                }
                else
                {
                    if (linesInBatch >= ledgerJournalTable.LinesLimitBeforeDistribution)
                    {
                        break;
                    }
                    lastVoucher = ledgerJournalTrans.Voucher;
                }
            }

            linesInBatch++;
        }

        lastVoucherInOrig = lastVoucher;

        if (linesInBatch)
        {
            this.doSysInfoAction(ledgerJournalTable, linesInBatch, _suppressClientMessages);
        }

        linesInBatch = 0;

        try
        {
            ttsbegin;

            while select Voucher from ledgerJournalTrans
                order by Voucher
                where ledgerJournalTrans.JournalNum == ledgerJournalId
                   && ledgerJournalTrans.Voucher    >  lastVoucherInOrig
            {
                if (!firstVoucher)
                {
                    firstVoucher = ledgerJournalTrans.Voucher;
                }

                if (lastVoucher != ledgerJournalTrans.Voucher)
                {
                    if (isLedgerJournalForcedJournalSplitFeatureEnabled)
                    {
                        if (linesInBatch >= maxLineLimit)
                        {
                            journalList.ins(this.moveBatchToNewJournal(ledgerJournalTableData, firstVoucher, lastVoucher, linesInBatch, _suppressClientMessages));
                            firstVoucher = ledgerJournalTrans.Voucher;
                            linesInBatch = 0;
                        }
                    }
                    else
                    {
                        if (linesInBatch >= ledgerJournalTable.LinesLimitBeforeDistribution)
                        {
                            journalList.ins(this.moveBatchToNewJournal(ledgerJournalTableData, firstVoucher, lastVoucher, linesInBatch, _suppressClientMessages));
                            firstVoucher = ledgerJournalTrans.Voucher;
                            linesInBatch = 0;
                        }
                    }
                }
                linesInBatch++;
                lastVoucher = ledgerJournalTrans.Voucher;
            }

            if (linesInBatch)
            {
                journalList.ins(this.moveBatchToNewJournal(ledgerJournalTableData, firstVoucher, lastVoucher, linesInBatch, _suppressClientMessages));
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSysInfoAction</Name>
				<Source><![CDATA[
    private void doSysInfoAction(
        LedgerJournalTable _ledgerJournalTable,
        Counter            _numOfTransactions,
        boolean            _suppressClientMessages)
    {
        SysInfoAction_Formrun   sysInfoAction_Formrun;

        if (_suppressClientMessages == false)
        {
            // This section makes entries on the infolog "clickable"; the Journal form
            // is popped on a double click event, but that is not needed for batch
            // processes, etc., that aren't run on the client.
            sysInfoAction_Formrun = SysInfoAction_Formrun::newFormname(formstr(LedgerJournalTable));

            sysInfoAction_Formrun.parmCallerBuffer(_ledgerJournalTable);
            sysInfoAction_Formrun.parmDescription("@SYS58724");
        }

        info(strfmt("@SYS86501", _numOfTransactions, _ledgerJournalTable.JournalNum), '', sysInfoAction_Formrun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveBatchToNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the vouchers that are in the specified range into a new Journal.
    /// </summary>
    /// <param name="_ledgerJournalTableData">
    ///    Provides information about the current journal record.
    /// </param>
    /// <param name="_firstVoucher">
    ///    The first voucher in the range of vouchers to move to the new journal.
    /// </param>
    /// <param name="_lastVoucher">
    ///    The last voucher in the range of vouchers to move to the new journal.
    /// </param>
    /// <param name="_linesInBatch">
    ///    The number of lines in the batch.
    /// </param>
    /// <param name="_suppressClientMessages">
    ///    A Boolean value that indicates whether client messages, such as modal dialogs, are suppressed. true
    ///    indicates client messages are suppressed.
    /// </param>
    /// <returns>
    ///    The newly created <c>LedgerJournalTable</c> record that contains the vouchers that were moved.
    /// </returns>
    protected LedgerJournalTable moveBatchToNewJournal(
        LedgerJournalTableData  _ledgerJournalTableData,
        Voucher                 _firstVoucher,
        Voucher                 _lastVoucher,
        Counter                 _linesInBatch,
        boolean                 _suppressClientMessages)
    {
        LedgerJournalTable  newLedgerJournalTable;

        newLedgerJournalTable = this.createNewJournal(_ledgerJournalTableData);
        _ledgerJournalTableData.moveVoucherToJournal(newLedgerJournalTable.JournalNum, _firstVoucher, _lastVoucher);

        this.doSysInfoAction(newLedgerJournalTable, _linesInBatch, _suppressClientMessages);

        return newLedgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// A flag that indicates whether errors should be transferred to another journal.
    /// </summary>
    /// <param name = "_transferErrors">
    /// A flag that indicates whether errors should be transferred to another journal.
    //  </param>
    /// <returns>True to transfer journals with errors to another journal; otherwise, false.</returns>
    public boolean parmTransferErrors(boolean _transferErrors = transferErrors)
    {
        transferErrors = _transferErrors;

        return transferErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuppressClientMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// A Boolean value that indicates whether items, such as dialogs, should be suppressed.
    /// </summary>
    /// <param name = "_suppressClientMessages">
    /// A flag that indicates whether client messages (dialog boxes, etc.) should be suppressed; optional.
    //  </param>
    /// <returns>True to suppress client messages; otherwise, false.</returns>
    public boolean parmSuppressClientMessages(boolean _suppressClientMessages = suppressClientMessages)
    {
        suppressClientMessages = _suppressClientMessages;

        return suppressClientMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a journal for splitting.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    /// true if the journal is valid for splitting; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean                 isValid = true;
        LedgerJournalTable      ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);
        LedgerJournalTableData  ledgerJournalTableData;

        if (!ledgerJournalId)
        {
            isValid = checkFailed("@SYS19282");
        }

        if (isValid)
        {
            if (!isLedgerJournalForcedJournalSplitFeatureEnabled)
            {
                if (ledgerJournalTable.LinesLimitBeforeDistribution == 0 ||
                    ledgerJournalTable.LinesLimitBeforeDistribution  > ledgerJournalTable.numOfLines())
                {
                    isValid = checkFailed("@SYS86500");
                }
            }
        }

        if (isValid)
        {
            ledgerJournalTableData  = JournalTableData::newTable(ledgerJournalTable);
            isValid = isValid && ledgerJournalTableData.hasUserAccess();
            isValid = isValid && ledgerJournalTableData.checkOpen();

            if (ledgerJournalTableData.blockLevel() != JournalBlockLevel::None)
            {
                if (ledgerJournalTableData.blockLevel() == JournalBlockLevel::System ||
                    (ledgerJournalTableData.blockLevel() == JournalBlockLevel::InUse &&
                     ledgerJournalTable.inUseUserId()    != curuserid()))
                {
                    isValid = checkFailed(strfmt("@SYS69035", ledgerJournalId));
                }
            }
        }

        if (isValid)
        {
            if (ledgerJournalTable.isInWFApprovalProcess() && !ledgerJournalTable.isWFApprovalApproved())
            {
                // The journal is in workflow approvals and not approved so it can't be split.
                isValid = checkFailed(strfmt("@SYS110593", ledgerJournalTable.JournalNum));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerJournalDistribute construct()
    {
        LedgerJournalDistribute ledgerJournalDistribute = new LedgerJournalDistribute();

        return ledgerJournalDistribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS31693";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTable</Name>
				<Source><![CDATA[
    public static LedgerJournalDistribute newLedgerJournalTable(
        LedgerJournalTable _ledgerJournalTable,
        boolean _transferErrors = false,
        boolean _suppressClientMessages = false)
    {
        LedgerJournalDistribute ledgerJournalDistribute;

        ledgerJournalDistribute = LedgerJournalDistribute::construct();
        ledgerJournalDistribute.parmLedgerJournalId(_ledgerJournalTable.JournalNum);
        ledgerJournalDistribute.parmSuppressClientMessages(_suppressClientMessages);
        ledgerJournalDistribute.parmTransferErrors(_transferErrors);

        return ledgerJournalDistribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeAndPostLargeJournalAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Distributes (splits) the journal and then posts the split journal.
    /// </summary>
    /// <param name="_parameters">
    /// The packed class.
    /// </param>
    /// <returns>
    /// true if the journal was distributed and posted; otherwise, false.
    /// </returns>
    public static container distributeAndPostLargeJournalAsync(container _parameters)
    {
        ClassId ledgerJournalDistributeClassId;
        container distributeAndPostLargeJournalPack;
        [ledgerJournalDistributeClassId, distributeAndPostLargeJournalPack] = _parameters;

        LedgerJournalDistribute ledgerJournalDistribute = new SysDictClass(ledgerJournalDistributeClassId).makeObject();
        ledgerJournalDistribute.unpack(distributeAndPostLargeJournalPack);
        boolean postedAsLargeJournal = ledgerJournalDistribute.distributeAndPostLargeJournal();

        return [postedAsLargeJournal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeAndPostLargeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Distributes (splits) the journal and then posts the split journal.
    /// </summary>
    /// <returns>
    /// true if the journal was distributed and posted; otherwise, false.
    /// </returns>
    public boolean distributeAndPostLargeJournal()
    {
        boolean postedAsLargeJournal;
        RecordSortedList journalsToPost;
        LedgerJournalParmPost parmBuffer;

        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);

        if (ledgerJournalTable.isEligableForDistributionBeforePost())
        {
            journalsToPost = ledgerJournalTable.distributeJournalLines(suppressClientMessages); // Split the journal.

            if (journalsToPost.len() > 0)
            {
                // The journal was split.
                // Add the main table because journalsToPost only includes the newly created journals.
                journalsToPost.ins(ledgerJournalTable);

                parmBuffer.TransferErrors = transferErrors;

                // Post the journals.
                LedgerJournalTable::insertJournalsInLedgerJournalMultiPost(journalsToPost, parmBuffer).runOperation();

                postedAsLargeJournal = true;
            }
        }

        return postedAsLargeJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>