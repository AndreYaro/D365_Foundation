<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowWorkItemActionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvWorkflowWorkItemActionManager</c> class is a menu item class for expense management
/// specific workflow actions.
/// </summary>
public class TrvWorkflowWorkItemActionManager implements IValidateWorkflowWorkItemAction
{
    WorkflowComment             workflowComment;
    WorkflowUser                workflowUser;
    WorkflowWorkItemQueueName   workflowQueue;
    boolean                     deleteCanceledLineItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelLineItemAndDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user to delete the expense line that has been canceled if it is a mapped credit card
    /// transaction.
    /// </summary>
    /// <param name="trvExpTrans">
    /// The expense line record buffer that the user is trying to cancel.
    /// </param>
    public void cancelLineItemAndDelete(TrvExpTrans trvExpTrans)
    {
        this.parmDeleteCanceledLineItem(false);

        if (trvExpTrans.pbsRecId)
        {
            if (Box::yesNo("@SYS328165",1) == 1)
            {
                this.parmDeleteCanceledLineItem(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the workflow document prior to approval.
    /// </summary>
    /// <param name = "_context">
    ///	    An instance of WorkflowWorkItemActionValidationContext containing data used for validation of workflow item.
    /// </param>
    /// <returns>
    ///     True if validation passes successfully. False if validation fails.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///	    When context is not provided or the work item reference table id is invalid.
    /// </exception>
    public boolean validate(WorkflowWorkItemActionValidationContext _context)
    {
        WorkflowWorkItemActionType workItemActionType;
        WorkflowWorkItemTable workItem;
        Common document;

        if(!_context)
        {
            throw error("@ApplicationSuite_Localization:ValidationContextNotProvided");
        }

        workItemActionType = _context.parmWorkItemActionType();
        workItem = _context.parmWorkItem();

        // Based on the referenced table id, query for the correct record.
        switch (workItem.RefTableId)
        {
            case tableNum(TrvExpTable):
                document = TrvExpTable::findRecId(workItem.RefRecId);
                break;
            case tableNum(TrvExpTrans):
                document = TrvExpTrans::find(workItem.RefRecId);
                break;
            default: 
                throw error(strFmt("@ApplicationSuite_Localization:InvalidTrvRefTableId", workItem.RefTableId, tableNum(TrvExpTable), tableNum(TrvExpTrans)));
        }

        return this.checkAndValidateWorkflowAction(workItemActionType, document, workItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndValidateWorkflowAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current workflow action and does the necessary business logic validation on the
    /// workflow enabled document.
    /// </summary>
    /// <param name="workItemActionType">
    /// The action type that was triggered by the user.
    /// </param>
    /// <param name="workflowEnabledRecord">
    /// The current workflow enabled buffer.
    /// </param>
    /// <param name="workItem">
    /// The current work item that is associated to the document.
    /// </param>
    /// <returns>
    /// true if all validation passed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This code is shared between the Microsoft Dynamics AX client and EP menu items for expense workflow
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Could not find workflow action type; the <c>ActionType</c> enumeration value is none.
    /// </exception>
    public boolean checkAndValidateWorkflowAction(WorkflowWorkItemActionType workItemActionType, Common workflowEnabledRecord, WorkflowWorkItemTable workItem)
    {
        TrvExpTable                 trvExpTable;
        TrvExpTrans                 trvExpTrans;
        TrvParameters               trvParameters;
        TrvExpTrans                 trvExpTransItemizedHeader;

        if (workItemActionType == WorkflowWorkItemActionType::None)
        {
            throw error("@SYS109040");
        }
        else if (workItemActionType == WorkflowWorkItemActionType::Resubmit)
        {
            if (workflowEnabledRecord.TableId == tablenum(TrvExpTable))
            {
                trvExpTable = workflowEnabledRecord as TrvExpTable;
                if (!trvExpTable.validateSubmit())
                {
                    return false;
                }
            }
            else if (workflowEnabledRecord.TableId == tablenum(TrvExpTrans))
            {
                trvExpTrans = workflowEnabledRecord as TrvExpTrans;
                if (!trvExpTrans.validateResubmit())
                {
                    return false;
                }
            }
        }
        else if (workItemActionType == WorkflowWorkItemActionType::Complete)
        {
            if (workflowEnabledRecord.TableId == tablenum(TrvExpTable))
            {
                trvExpTable = workflowEnabledRecord as TrvExpTable;
                if (!trvExpTable.validateApprove())
                {
                    return false;
                }
            }
            else if (workflowEnabledRecord.TableId == tablenum(TrvExpTrans))
            {
                trvExpTrans = workflowEnabledRecord as TrvExpTrans;
                if (!trvExpTrans.validateApprove())
                {
                    return false;
                }
            }
        }
        else if (workItemActionType == WorkflowWorkItemActionType::CancelLineItem)
        {
            // we dont allow canceling of itemized credit line card, if it's paid by company.
            if (workflowEnabledRecord.TableId == tablenum(TrvExpTrans))
            {
                trvExpTrans = workflowEnabledRecord as TrvExpTrans;

                if (trvExpTrans && trvExpTrans.LineType == TrvExpLineType::ItemizedLine)
                {
                    changeCompany(CompanyInfo::getDataArea(trvExpTrans.LegalEntity))
                    {
                        trvParameters = TrvParameters::find();

                        if (trvParameters.PersonalPaidBy == TrvPersonalPaidBy::Company)
                        {
                            select firstOnly PBSRecId from trvExpTransItemizedHeader where trvExpTransItemizedHeader.RecId == trvExpTrans.ParentRecId;
                            if (trvExpTransItemizedHeader.PBSRecId)
                            {
                                return checkFailed(strFmt("@SYS108515", "@SYS314521"+" "+"@SYS109614","@SYS105413"));
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResubmitAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the user selects the resubmit action.
    /// </summary>
    /// <param name="rootCorrelationId">
    /// The root <c>WorkflowCorrelationId</c> extended data type of the workflow context.
    /// </param>
    /// <param name="tableId">
    /// The <c>RefTableId</c> extended data type of the workflow document.
    /// </param>
    /// <param name="recId">
    /// The <c>RefRecId</c> extended data type of the workflow document.
    /// </param>
    public void doResubmitAction(WorkflowCorrelationId rootCorrelationId, RefTableId tableId, RefRecId recId)
    {
        WorkflowContext workflowContext;
        // we just need these 3 information for Expense state changes
        workflowContext = WorkflowContext::construct();

        workflowContext.parmRootCorrelationId(rootCorrelationId);
        workflowContext.parmTableId(tableId);
        workflowContext.parmRecId(recId);

        ttsbegin;
        if (tableId == tablenum(TrvExpTable))
        {
            TrvWorkflowUtilities::setExpenseDocumentStatus(workflowContext, TrvAppStatus::Pending);
        }
        else if (tableId == tablenum(TrvExpTrans))
        {
            TrvWorkflowUtilities::setExpenseLineItemStatus(workflowContext, TrvAppStatus::Pending);
        }
        else if (tableId == tablenum(TrvCashAdvance))
        {
            TrvCashAdvance trvCashAdvance;
            select firstonly forupdate RecId, CashAdvanceStatus from trvCashAdvance where trvCashAdvance.RecId == recId;
            trvCashAdvance.CashAdvanceStatus = TrvWorkflowCashAdvanceStatus::Pending;
            trvCashAdvance.doUpdate();
        }
        else if (tableId == tablenum(TrvRequisitionTable))
        {
            TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Pending);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowComment</Name>
				<Source><![CDATA[
    private boolean getWorkflowComment(WorkflowWorkItemTable       _workItem,
                                       WorkflowWorkItemActionType  _workItemActionType,
                                       MenuFunction                _workItemActionMenuFunc,
                                       Caption                     _formCaption = '')
    {
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;

        workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(_workItem,
                                                                               _workItemActionType,
                                                                               new MenuFunction(_workItemActionMenuFunc.name(),
                                                                               _workItemActionMenuFunc.type()));
        workflowWorkItemActionDialog.run();

        if (workflowWorkItemActionDialog.parmIsClosedOK())
        {
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            this.parmTargetUser(workflowWorkItemActionDialog.parmTargetUser());
            this.parmTargetQueue(workflowWorkItemActionDialog.parmTargetQueue());
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteCanceledLineItem</Name>
				<Source><![CDATA[
    public boolean parmDeleteCanceledLineItem(boolean _deleteCanceledLineItem = deleteCanceledLineItem)
    {
        ;
        deleteCanceledLineItem = _deleteCanceledLineItem;

        return deleteCanceledLineItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetQueue</Name>
				<Source><![CDATA[
    public WorkflowUser parmTargetQueue(WorkflowWorkItemQueueName _workflowQueue = workflowQueue)
    {
        ;
        workflowQueue = _workflowQueue;

        return workflowQueue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetUser</Name>
				<Source><![CDATA[
    public WorkflowUser parmTargetUser(WorkflowUser _workflowUser = workflowUser)
    {
        ;
        workflowUser = _workflowUser;

        return workflowUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        ;
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TrvWorkflowWorkItemActionManager construct(WorkflowComment _workflowComment = '',
                                                             WorkflowUser    _workflowUser = '',
                                                             WorkflowWorkItemQueueName   _workflowQueue = '')
    {
        TrvWorkflowWorkItemActionManager trvWorkflowWorkItemActionManager = new TrvWorkflowWorkItemActionManager();

        trvWorkflowWorkItemActionManager.parmWorkflowComment(_workflowComment);
        trvWorkflowWorkItemActionManager.parmTargetUser(_workflowUser);
        trvWorkflowWorkItemActionManager.parmTargetQueue(_workflowQueue);

        return trvWorkflowWorkItemActionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActionTypeForMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the action type based on the menu item given.
    /// </summary>
    /// <param name = "_menuItemName">The menu item used to determine action type.</param>
    /// <returns>The action type of workflow item.</returns>
    public static WorkflowWorkItemActionType findActionTypeForMenuItem(menuItemName _menuItemName)
    {
        WorkflowWorkItemActionType      actionType = WorkflowWorkItemActionType::None;

        if (strlen(_menuItemName) > 0)
        {
            if (_menuItemName == menuitemactionstr(TrvLineItemCancel))
            {
                actionType = WorkflowWorkItemActionType::CancelLineItem;
            }
            else if (_menuItemName == menuitemactionstr(TrvLineItemRecall))
            {
                actionType = WorkflowWorkItemActionType::RecallLineItem;
            }
        }

        return actionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WorkflowWorkItemActionType          workItemActionType;
        WorkflowWorkItemTable               workItem;
        boolean                             workflowDialogOk;
        boolean                             cancelLineLevelWorkflowCalled;

        TrvWorkflowWorkItemActionManager    trvWorkflowWorkItemActionManager = TrvWorkflowWorkItemActionManager::construct();
        Object                              caller = _args.caller();
        TrvIWorkflowEnabledForm             workflowEnabledForm = caller as TrvIWorkflowEnabledForm;

        // Logger for Instrumentation
        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger(classStr(TrvWorkflowWorkItemActionManager));
        ExpenseInstrumentationLoggerProperties properties = logger.properties();
        
        // If TrvWorkflowWorkItemActionManager is passed as an object, skip the Workflow Dialog box
        if (_args.parmObject() != null && _args.parmObject() is TrvWorkflowWorkItemActionManager)
        {
            trvWorkflowWorkItemActionManager = _args.parmObject();
            workflowDialogOk = true;
        }

        boolean isWorkItemFound = false;

        if(caller)
        {
            workItem = caller.getActiveWorkflowWorkItem();
        }
        else
        {
            select firstonly workItem
                where workItem.RefRecId == _args.record().RecId
                && workItem.RefTableId == _args.record().TableId
                && workItem.UserId == curUserId()
                && workItem.Status == 0;
        }

        // In case of delegate when the TrvExpenseWorkspaceResubmitButtonFlight flight is switched off (set to false)
        // The delegate user Delegate will be able to perform resubmit on behalf of employee using the workitem of the employee.
        // Thus giving both employee and the delegate the ability to resubmit the expense report without changing the userid in the workflow.

        if(!TrvExpenseHelper::isTrvExpenseAllowDelegatesResubmitButtonFlightEnabled())
        {
            WorkflowWorkItemTable workflowWorkItemTableReturned = workItem;
       
            if(!workflowWorkItemTableReturned)
            {
                TrvExpTable trvExpTableLoc;
             
                select firstonly CreatingWorker, ApprovalStatus from trvExpTableLoc where trvExpTableLoc.RecId == _args.record().RecId;
            
                if(trvExpTableLoc.ApprovalStatus == TrvAppStatus::Returned)
                {
                    workflowWorkItemTableReturned = TrvExpTable::findWorkItem(_args.record().RecId);
                
                    if(workflowWorkItemTableReturned.RecId && workflowWorkItemTableReturned.UserId != curUserId() && TrvAppEmplSub::isDelegatingWorkerValidForUser(trvExpTableLoc.CreatingWorker, curUserId()))
                    {
                        workItem = workflowWorkItemTableReturned;
                        isWorkItemFound=true;
                    }
                }
            }
        }


        if (workItem.RecId)
        {
            workItemActionType = TrvWorkflowWorkItemActionManager::findActionTypeForMenuItem(_args.menuItemName());

            if (workItemActionType == WorkflowWorkItemActionType::None)
            {
                workItemActionType = WorkflowWorkItemActionManager::findActionTypeForMenuItem(workItem, _args.menuItemName());
            }

            if (!trvWorkflowWorkItemActionManager.checkAndValidateWorkflowAction(workItemActionType, _args.record(), workItem))
            {
                if (workflowEnabledForm)
                {
                    switch (workItemActionType)
                    {
                        case WorkflowWorkItemActionType::Resubmit:
                            workflowEnabledForm.workflowActionFailed(TrvWorkflowAction::Resubmit);
                            break;

                        case WorkflowWorkItemActionType::Complete:
                            workflowEnabledForm.workflowActionFailed(TrvWorkflowAction::Approve);
                    }
                }

                throw Exception::Error;
            }

            if (workItemActionType == WorkflowWorkItemActionType::CancelLineItem && _args.dataset() == tablenum(TrvExpTrans))
            {
                cancelLineLevelWorkflowCalled = true;
                trvWorkflowWorkItemActionManager.cancelLineItemAndDelete(_args.record());
            }

            if (!workflowDialogOk)
            {
                workflowDialogOk = trvWorkflowWorkItemActionManager.getWorkflowComment(workItem,workItemActionType,new MenuFunction(_args.menuItemName(), _args.menuItemType()));
            }

            if (workflowDialogOk && workItemActionType == WorkflowWorkItemActionType::Resubmit)
            {
                ExpenseInstrumentationReSubmitActivities resubmitActivities = ExpenseInstrumentationReSubmitActivities::construct(logger);
                using (var expenseReportContext = resubmitActivities.expenseReportContext())
                {
                    TrvExpTable expTable;

                    if (_args.record().TableId == tableNum(TrvExpTrans))
                    {
                        TrvExpTrans expTrans = _args.record();
                        expTable = TrvExpTable::find(expTrans.ExpNumber);
                        resubmitActivities.addCustomProperty(expenseReportContext, properties.propertyByTableRecord(expTrans));
                        resubmitActivities.addCustomProperty(expenseReportContext, properties.submitLevel(ExpenseInstrumentationLoggerProperties::Line));
                    }
                    else if (_args.record().TableId == tableNum(TrvExpTable))
                    {
                        expTable = _args.record();
                        resubmitActivities.addCustomProperty(expenseReportContext, properties.propertyByTableRecord(expTable));
                        resubmitActivities.addCustomProperty(expenseReportContext, properties.submitLevel(ExpenseInstrumentationLoggerProperties::Header));
                    }

                    if (expTable)
                    {
                        TrvSubmitExpenseReportToWorkflow::handleDistributionsForCashAdvance(expTable);
                    }

                    trvWorkflowWorkItemActionManager.doResubmitAction(workItem.RootCorrelationId, workItem.RefTableId, workItem.RefRecId);
                }
            }

            if (workflowDialogOk)
            {               
                ExpenseInstrumentationWorkflowActivities workflowActivities = ExpenseInstrumentationWorkflowActivities::construct(logger);
                using (var activity = workflowActivities.dispatchWorkItemContext())
                {                    
                    if(isWorkItemFound && workItemActionType == WorkflowWorkItemActionType::Resubmit)
                    {
                        ttsbegin;
                        WorkflowUser userIdFromWorkItem = workItem.UserId;
                        WorkflowWorkItemTable workItemLoc,workItemUpdate;
                        workItemLoc = WorkflowWorkItemTable::findRecId(workItem.RecId,true);
                        workItemLoc.UserId = curUserId();
                        workItemLoc.doUpdate();

                        WorkflowWorkItemActionManager::dispatchWorkItemAction(workItemLoc,
                                                                        trvWorkflowWorkItemActionManager.parmWorkflowComment(),
                                                                        trvWorkflowWorkItemActionManager.parmTargetUser(),
                                                                        workItemActionType,
                                                                        _args.menuItemName(),
                                                                        trvWorkflowWorkItemActionManager.parmTargetQueue());

                        workItemUpdate = WorkflowWorkItemTable::findRecId(workItem.RecId,true);
                        workItemUpdate.UserId = userIdFromWorkItem;
                        workItemUpdate.doUpdate();
                        ttscommit;
                    }
                    else
                    {
                        WorkflowWorkItemActionManager::dispatchWorkItemAction(workItem,
                                                                        trvWorkflowWorkItemActionManager.parmWorkflowComment(),
                                                                        trvWorkflowWorkItemActionManager.parmTargetUser(),
                                                                        workItemActionType,
                                                                        _args.menuItemName(),
                                                                        trvWorkflowWorkItemActionManager.parmTargetQueue());
                    }

                    // check for errors related to work item dispatches
                    if (workItemActionType == WorkflowWorkItemActionType::Complete 
                        || workItemActionType == WorkflowWorkItemActionType::Return
                        || workItemActionType == WorkflowWorkItemActionType::Delegate)
                    {
                        WorkflowWorkItemStatus expectedStatus;
                        switch (workItemActionType)
                        {
                            case WorkflowWorkItemActionType::Complete:
                            case WorkflowWorkItemActionType::Return:
                                expectedStatus = WorkflowWorkItemStatus::Completed;
                                break;
                            case WorkflowWorkItemActionType::Delegate:
                                expectedStatus = WorkflowWorkItemStatus::Pending;
                                break;
                        }

                        // see if the status has changed to expected value
                        WorkflowWorkItemTable workflowWorkItemAfterDispatch;
                        select RecId, Status from workflowWorkItemAfterDispatch
                            where workflowWorkItemAfterDispatch.ActivityId == workItem.ActivityId;

                        if (workflowWorkItemAfterDispatch.RecId != 0)
                        {
                            if (workflowWorkItemAfterDispatch.Status != expectedStatus)
                            {
                                logger.LogError(strFmt('Status of WorkItem in WorkflowWorkItemTable did not change to expected value ' + 
                                    'after dispatch to workflow. WorkItem ActivityID: %1; action: %2; old status: %3; new status: %4; ' + 
                                    'expected status: %5', workItem.ActivityId, enum2Str(workItemActionType), enum2Str(workItem.Status), 
                                    enum2Str(workflowWorkItemAfterDispatch.Status), enum2Str(expectedStatus)));
                            }
                        }
                    }
                }

                if (workflowEnabledForm)
                {
                    switch (workItemActionType)
                    {
                        case WorkflowWorkItemActionType::Resubmit:
                            workflowEnabledForm.workflowActionDone(TrvWorkflowAction::Resubmit);
                            break;

                        case WorkflowWorkItemActionType::Return:
                            workflowEnabledForm.workflowActionDone(TrvWorkflowAction::Return);
                            break;

                        case WorkflowWorkItemActionType::Complete:
                            workflowEnabledForm.workflowActionDone(TrvWorkflowAction::Approve);
                    }
                }

                if (trvWorkflowWorkItemActionManager.parmDeleteCanceledLineItem() && _args.dataset() == tablenum(TrvExpTrans))
                {
                    ttsbegin;
                    _args.record().selectForUpdate(true);
                    _args.record().delete();
                    ttscommit;
                }

                if ((_args.record().TableId == tableNum(TrvExpTable)) && ((workItemActionType == WorkflowWorkItemActionType::RecallLineItem) || (workItemActionType == WorkflowWorkItemActionType::Return)))
                {
                    TrvWorkflowUtilities::removeTrvAccountingDistributions(_args.record());
                }

                //insert into workflow log only if the work item is an expense header or an expense line
                if (_args.record().TableId == tableNum(TrvExpTable) || _args.record().TableId == tableNum(TrvExpTrans))
                {
                    TrvWorkflowUtilities::insertWorkflowLog(workItemActionType, _args.record());
                }

                if(workItemActionType == WorkflowWorkItemActionType::Return)
                {
                    TrvWorkflowUtilities::generateExpMobileWorkflowNotification(TrvExpMobileNotificationEventType::WorkItemRejected, workItem.RefTableId, workItem.RefRecId);
                }

                if(caller)
                    caller.updateWorkflowControls();

                // Cancel the header workflow when there is no approval step configured
                if (cancelLineLevelWorkflowCalled && !TrvWorkflowUtilities::isHeaderWorkflowContainingApprovalStep(workItem))
                {
                    TrvWorkflowUtilities::cancelTrvDocumentTemplateHeaderWorkflow(_args.record());
                }
            }
        }
        else
        {
            WorkflowWorkItemActionManager::main(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkItemForDeletedExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Cancel any workflow work item associated with the expense line that
    ///   was deleted after recall.
    /// </summary>
    /// <param name = "_trvExpTrans">
    /// <c>TrvExpTrans</c> Deleted expense line object.
    /// </param>
    public static void cancelWorkItemForDeletedExpenseLine(TrvExpTrans _trvExpTrans)
    {
        // Get the work item associated with the expense line.
        WorkflowWorkItemTable workItem = TrvExpTrans::findPendingWorkItem(_trvExpTrans.RecId);

        // If the work item exists, invoke workflow method to dispatch 'cancel' action for the work item.
        if (workItem.RecId != 0)
        {
            TrvWorkflowWorkItemActionManager trvWorkflowWorkItemActionManager = TrvWorkflowWorkItemActionManager::construct();
            WorkflowWorkItemActionManager::dispatchWorkItemAction( workItem,
                                                                   trvWorkflowWorkItemActionManager.parmWorkflowComment("@Expense:AutoCancelLineLevelWorkflowOnDeleteMessage"),
                                                                   trvWorkflowWorkItemActionManager.parmTargetUser(),
                                                                   WorkflowWorkItemActionType::CancelLineItem,
                                                                   menuItemDisplayStr(TrvExpenses),
                                                                   trvWorkflowWorkItemActionManager.parmTargetQueue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenseDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Called to update the state of an expense document.
    /// </summary>
    /// <param name = "_trvExpTable">
    /// <c>TrvExpTable</c> record buffer to update the approval status.
    /// </param>
    public static void updateExpenseDocumentStatus(TrvExpTable _trvExpTable)
    {
        //Updating expense report status to draft state if remaining expense lines of the expense report are in draft state.
        if (TrvWorkflowWorkItemActionManager::areAllExpenseLineInStatus(_trvExpTable, TrvAppStatus::Create))
        {
            TrvWorkflowWorkItemActionManager::updateDocumentStatus(_trvExpTable, TrvAppStatus::Create);
        }
        //Updating expense report status to approved state if remaining expense lines of the expense report are in approved state.
        else if (TrvWorkflowWorkItemActionManager::areAllExpenseLineInStatus(_trvExpTable, TrvAppStatus::Approved))
        {
            TrvWorkflowWorkItemActionManager::updateDocumentStatus(_trvExpTable, TrvAppStatus::Approved);
        }
        //Updating expense report status to processed for payment state if remaining expense lines of the expense report are in processed for payment state.
        else if (TrvWorkflowWorkItemActionManager::areAllExpenseLineInStatus(_trvExpTable, TrvAppStatus::Ledger))
        {
            TrvWorkflowWorkItemActionManager::updateDocumentStatus(_trvExpTable, TrvAppStatus::Ledger);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllExpenseLineInStatus</Name>
				<Source><![CDATA[
    private static boolean areAllExpenseLineInStatus(TrvExpTable _trvExpTable, TrvAppStatus _trvAppStatus)
    {
        TrvExpTrans trvExpTrans;

        select firstonly RecId from trvExpTrans
            where trvExpTrans.ExpNumber == _trvExpTable.ExpNumber
                && trvExpTrans.ApprovalStatus != _trvAppStatus
                && trvExpTrans.ReferenceDataAreaId == _trvExpTable.ReferenceDataAreaId;

        return trvExpTrans.RecId == 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentStatus</Name>
				<Source><![CDATA[
    private static void updateDocumentStatus(TrvExpTable _trvExpTable, TrvAppStatus _trvAppStatus)
    {
        WorkflowContext workflowContext = WorkflowContext::construct();
        SysWorkflowTable sysWorkflowTableHeader;

        workflowContext.parmRecId(_trvExpTable.RecId);
        workflowContext.parmTableId(tableNum(TrvExpTable));

        select firstonly WorkflowCorrelationId from sysWorkflowTableHeader
            where sysWorkflowTableHeader.ContextTableId == tableNum(TrvExpTable)
                && sysWorkflowTableHeader.ContextRecId == _trvExpTable.RecId;

        workflowContext.parmRootCorrelationId(sysWorkflowTableHeader.WorkflowCorrelationId);

        WorkflowEventArgs workflowEventArgs = WorkflowEventArgs::newWorkflowEventArgs(workflowContext);

        //Setting expense document approval status
        TrvWorkflowUtilities::setExpenseDocumentStatus(workflowEventArgs.parmWorkflowContext(), _trvAppStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>