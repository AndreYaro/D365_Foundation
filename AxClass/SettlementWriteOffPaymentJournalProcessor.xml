<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffPaymentJournalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>SettlementWriteOffPaymentJournalProcessor</c> class generates payment journal data for addition to existing
/// customer or vendor payment journals.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.SettlementWriteOffJournalProcessor)),
    ExportMetadata(enumStr(SettlementWriteOffOrigin), enumLiteralStr(SettlementWriteOffOrigin, PaymentJournal))]
internal final class SettlementWriteOffPaymentJournalProcessor extends SettlementWriteOffJournalProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSpecTransBalances</Name>
				<Source><![CDATA[
    internal protected void updateSpecTransBalances()
    {
        this.applyPotentialTransactionAmountsToSpecTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateJournalHeader</Name>
				<Source><![CDATA[
    internal protected LedgerJournalId findOrCreateJournalHeader()
    {
        return LedgerJournalTrans::findRecId(journalContract.parmOriginLedgerJournalTrans(), false).JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeJournal</Name>
				<Source><![CDATA[
    internal protected void finalizeJournal(LedgerJournalId _journalNum)
    {
        if (journalContract.shouldTransferTotalAdjustmentBalancetoTransferAccount())
        {
            journalLineProcessor.createTransferLineForPaymentJournal(journalContract, _journalNum, settlementWriteOffAdjustment.getTotalAdjustmentAmount(), curExt());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPotentialTransactionAmountsToSpecTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>SpecTrans</c> records with the balances calculated during potential adjustments.
    /// </summary>
    private void applyPotentialTransactionAmountsToSpecTrans()
    {
        SpecTransWriteOffTmp specTransWriteOffTmp = settlementWriteOffCalculatedTransactions.getSpecTransUpdatedBalances();
        SpecTransManager specTransManager = this.createSpecTransManagerFromWriteOffTransactions(specTransWriteOffTmp);
        SpecTrans specTrans;

        while select specTrans
            join specTransWriteOffTmp
                where specTrans.RecId == specTransWriteOffTmp.SpecTransRecId
        {
            if (!specTransWriteOffTmp.Balance01)
            {
                specTransManager.deleteAllLine(specTrans.RefCompany, specTrans.RefTableId, specTrans.RefRecId);
                specTransManager.delete(specTrans.RefCompany, specTrans.RefTableId, specTrans.RefRecId);
            }
            else
            {
                specTransManager.updateSettleBalanceAndDisc(
                    specTrans.RefCompany,
                    specTrans.RefTableId,
                    specTrans.RefRecId,
                    specTransWriteOffTmp.Balance01,
                    specTransWriteOffTmp.CashDiscToTake,
                    specTrans.SelectedDateUsedToCalcCashDisc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecTransManagerFromWriteOffTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>SpecTransManager</c> class for the given write off transactions.
    /// For payment journals, all write off transactions will share the same origin payment journal line.
    /// </summary>
    /// <returns>The new <c>SpecTransManager</c> class</returns>
    private SpecTransManager createSpecTransManagerFromWriteOffTransactions(SpecTransWriteOffTmp _specTransWriteOffTmp)
    {
        SpecTrans specTrans;

        select firstonly specTrans
            exists join _specTransWriteOffTmp
                where specTrans.RecId == _specTransWriteOffTmp.SpecTransRecId;

        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(specTrans.SpecRecId, false);

        return SpecTransManager::newFromSpec(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new ()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>