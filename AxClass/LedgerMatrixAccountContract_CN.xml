<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMatrixAccountContract_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>LedgerMatrixAccount_CN</c>  SSRS report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>LedgerMatrixAccount_CN</c> SSRS Report.
/// </remarks>
[
    DataContractAttribute
]
class LedgerMatrixAccountContract_CN implements SysOperationValidatable, SrsReportRowCountable_CN
{
    FromDate                    fromDate;
    ToDate                      toDate;
    LedgerMatrixId_CN           accountMatrix;
    CurrentOperationsTax        postingLayer;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRowsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rows count of the report primary query's result by data contract parameters.
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <returns>
    /// A <c>Container</c> with first element being rows count and second element being a message that may be shown.
    /// </returns>
    public container getRowsCount(Query _query)
    {
        Query           query;
        int             rowsCount;
        SRSMaxRow_CN    maxRows = SystemParameters::find().SRSMaxRow_CN;

        if (_query && _query.name() == queryStr(LedgerMatrixAccountByVoucher_CN))
        {
            query = _query;
        }
        else
        {
            query = new Query(queryStr(LedgerMatrixAccountByVoucher_CN));
        }

        query = LedgerMatrixAccountDP_CN::initQueryByMatrixAccount(query, this);
        rowsCount = QueryRun::getQueryRowCount(query, maxRows + 1);

        //The output rows is over the allowed maximum rows of SSRS reports, please increase the value in the System parameters and run the report again.
        return [rowsCount, "@GLS220075"];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountMatrix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter LedgerMatrixId.
    /// </summary>
    /// <param name="_accountMatrix">
    /// The new value of the datacontract parameter accountMatrix;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter accountMatrix;
    /// </returns>
    [
        DataMemberAttribute('AccountMatrix'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public LedgerMatrixId_CN parmAccountMatrix(LedgerMatrixId_CN   _accountMatrix = accountMatrix)
    {
        accountMatrix = _accountMatrix;
        return accountMatrix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the dataContract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter Period.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate  _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Posting layer.
    /// </summary>
    /// <param name="_postingLayer">
    /// The new value of the datacontract parameter Posting layer;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Posting layer.
    /// </returns>
    [
        DataMemberAttribute('PostingLayer'),
        SysOperationDisplayOrderAttribute('4'),
        SysOperationLabelAttribute(literalstr("@SYS334157"))
    ]
    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the dataContract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter Period.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public ToDate parmToDate(ToDate  _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!this.parmAccountMatrix())
        {
            //Account matrix must be entered
            isValid = checkFailed(strFmt("@SYS39376", "@GLS64323"));
        }

        if (isValid && !this.parmFromDate())
        {
            //From date must be entered.
            isValid = checkFailed(strFmt("@SYS39376", "@SYS24050"));
        }

        if (isValid && !this.parmToDate())
        {
            //To date must be entered.
            isValid = checkFailed(strFmt("@SYS39376", "@SYS35904"));
        }

        if (isValid && this.parmFromDate() > this.parmToDate())
        {
            //From date must be before To date
            isValid = checkFailed("@SYS91020");
        }

        if (isValid)
        {
            isValid = LedgerMatrixTable_CN::checkExist(this.parmAccountMatrix());
        }
        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>