<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgDeleteOpenStart</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgDeleteOpenStart</c> class deletes an open start job registration from the <c>JmgTermReg</c> table.
/// </summary>
class JmgDeleteOpenStart extends RunBaseBatch implements BatchRetryable
{
    DialogField         dfWorker;
    DialogField         dftoProfileDate;
    JmgWorkerRecId      worker;
    JmgProfileDate      toProfiledate;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        worker,
        toProfiledate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_p1">
    ///    An already initialized instance of the <c>DialogRunBase</c> class; optional.
    /// </param>
    /// <param name="_p2">
    ///    A Boolean value that specifies whether the dialog must be instantiated on the client; optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog(DialogRunbase _p1 = null, boolean _p2 = false)
    {
        Object ret = this.dialogInternal(_p1, _p2);

        dfWorker        = ret.addField(extendedtypestr(HcmWorkerRecId));
        dftoProfileDate = ret.addField(extendedtypestr(JmgProfileDate),"@SYS14656");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4160";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates values entered by the user.
    /// </summary>
    /// <returns>
    ///    true if the entered values are validated correctly; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The worker is not specified.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The profile date is not specified correctly.
    /// </exception>
    public boolean getFromDialog()
    {
        boolean ret = super();

        worker          = dfWorker.value();
        toProfiledate   = dftoProfileDate.value();

        if (!worker)
        {
            throw error("@SYS24420");
        }
        if (! toProfiledate)
        {
            throw error("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        JmgTermReg  jmgTermReg;
        boolean     cleanedup;

        void cleanstamps()
        {
            setprefix("@SYS4195");

            ttsbegin;

            while select forupdate jmgTermReg
                index hint ActFinishIdx
                where jmgTermReg.Worker     == worker       &&
                      jmgTermReg.JobActive  == NoYes::Yes   &&
                      jmgTermReg.RegDateTime<= DateTimeUtil::newDateTime(toProfiledate,24*60*60,DateTimeUtil::getUserPreferredTimeZone())
            {
                info(strfmt("@SYS39883",  date2StrUsr(DateTimeUtil::date(jmgTermReg.RegDateTime), DateFlags::FormatAll),time2str(DateTimeUtil::time(jmgTermReg.RegDateTime),1,1),jmgTermReg.RegType,jmgTermReg.JobId));
                cleanedup = true;
                jmgTermReg.doDelete();
            }
            ttscommit;
        }

        setprefix("@SYS4160");
        info(strfmt("@SYS76766","@SYS4705",worker));
        info(strfmt("@SYS76766","@SYS14656",toProfiledate));

        cleanstamps();

        info((cleanedup? "@SYS50370":"@SYS52714"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args a)
    {
        JmgDeleteOpenStart  jmgDeleteOpenStart = new JmgDeleteOpenStart();

        if (jmgDeleteOpenStart.prompt())
        {
            jmgDeleteOpenStart.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>