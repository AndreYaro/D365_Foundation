<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC1a_MoveHist</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC1a_MoveHist extends RAssetReport_OC1_Base
{
    protected RAssetMoveHist rAssetMoveHist;
    protected RAssetMoveHist moveHistPrev;
    protected DialogField assetStandardField;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionPrice</Name>
				<Source><![CDATA[
    protected Amount acquisitionPrice()
    {
        return this.acquisition(acquisitionFirstTrans.RecId ? acquisitionFirstTrans.TransDate : this.transDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldNum(RAssetDocument, StandardId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns main account and analysis dimension value for asset
    /// </summary>
    /// <returns>
    /// Main account num and analysis dimension for asset
    /// </returns>
    protected MainAccountNum controlMainAccountNum()
    {
        LedgerDimensionAccount ledgerDimensionAccount;

        if (acquisitionFirstTrans.RecId)
        {
            ledgerDimensionAccount = acquisitionFirstTrans.LedgerDimension;
        }
        else
        {
            ledgerDimensionAccount = rAssetStandards.assetLedgerDimension(rAssetStandards.AssetStandardId,
                rAssetStandards.postingProfile(this.transDate()),
                RAssetTransType::Acquisition);
        }

        DimensionDisplayValue ret = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionAccount);

        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            ret = strFmt("@SYS26868", ret, this.getAnalysisCodeFromLedgerDimension(ledgerDimensionAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFromBusinessAccounting</Name>
				<Source><![CDATA[
    protected TransDate dateFromBusinessAccounting()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToBusinessAccounting</Name>
				<Source><![CDATA[
    public TransDate dateToBusinessAccounting()
    {
        return acquisitionFirstTrans.RecId ? acquisitionFirstTrans.TransDate : this.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = super();
        
        this.documentDate(rAssetMoveHist.AttachDocumentDate ? rAssetMoveHist.AttachDocumentDate : this.transDate());
        this.documentNumber(rAssetMoveHist.AttachDocumentNumber);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employee</Name>
				<Source><![CDATA[
    protected void employee(TransDate _tekdate)
    {
        newEmployee = EmployeeTable_RU::findByEmployeeId(rAssetMoveHist.NewEmployee);
        oldEmployee = EmployeeTable_RU::findByEmployeeId(moveHistPrev.NewEmployee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        super();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoAcquire</Name>
				<Source><![CDATA[
    protected Struct initCompanyInfoAcquire()
    {
        Struct struct;

        if (rAssetMoveHist.NewLocation)
        {
            struct = super();
        }
        else
        {
            struct = RAssetReport_OC1_Base::companyInfo_Null();
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoDeliver</Name>
				<Source><![CDATA[
    protected Struct initCompanyInfoDeliver()
    {
        Struct struct;

        if (moveHistPrev.NewLocation)
        {
            struct = super();
        }
        else
        {
            struct = RAssetReport_OC1_Base::companyInfo_Null();
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        super(_document);

        rAssetStandards = _document.findStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAcquisition</Name>
				<Source><![CDATA[
    protected boolean isAcquisition()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciation</Name>
				<Source><![CDATA[
    protected boolean isDepreciation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args  _args)
    {
        if (! _args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        if ((_args.dataset() != tableNum(RAssetMoveHist)))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        rAssetMoveHist = _args.record();
        moveHistPrev = RAssetMoveHist::findLastOperation(rAssetMoveHist.AccountNum,
            rAssetMoveHist.MoveType,
            NoYes::No,
            rAssetMoveHist.ChangeDate - 1);
        rAssetTable = RAssetTable::find(rAssetMoveHist.AccountNum);

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLocationName</Name>
				<Source><![CDATA[
    protected RAssetLocationName newLocationName()
    {
        return  RAssetLocation::find(rAssetMoveHist.NewLocation).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>oldLocationName</Name>
				<Source><![CDATA[
    protected RAssetLocationName oldLocationName()
    {
        return  RAssetLocation::find(moveHistPrev.NewLocation).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    public Common relatedRecord()
    {
        return rAssetMoveHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return rAssetMoveHist.ChangeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuments</Name>
				<Source><![CDATA[
    protected void updateDocuments()
    {
        super();

        rAssetMoveHist = RAssetMoveHist::findRecID(rAssetMoveHist.RecId, true);
        rAssetMoveHist.AttachDocumentDate = documentDate;
        rAssetMoveHist.AttachDocumentNumber = documentNumber;
        rAssetMoveHist.doUpdate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>