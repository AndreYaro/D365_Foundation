<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournTransEntityFrmDatEventManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournTransEntityFrmDatEventManager</c> class manages data events for the
/// <c>LedgerJournalTrans</c> entity.
/// </summary>
/// <remarks>
/// This class is used across the transaction forms to help manage write and delete events.
/// </remarks>
class LedgerJournTransEntityFrmDatEventManager
{
    // -------------------------------------
    // Form Datasources
    // -------------------------------------
    FormDataSource ledgerJournalTrans_DS; // Stores a reference to the LedgerJournalTrans_DS on the form
    FormDataSource ledgerJournalTrans_Asset_DS; // Stores a reference to the LedgerJournalTrans_Asset_DS on the form
    FormDataSource ledgerJournalTrans_Project_DS; // Stores a reference to the LedgerJournalTrans_Project_DS on the form
    FormDataSource tax1099Detail_DS; // Stores a reference to the tax1099Detail_DS on the form

    // <GEERU>
    FormDataSource ledgerJournalTrans_RAsset_DS;
    FormDataSource ledgerJournalTrans_RDeferrals_DS;
    FormDataSource ledgerJournalTrans_RCash_DS;
    // </GEERU>
    // -------------------------------------
    // Data Event State Flags
    // -------------------------------------
    boolean isInEntityDeleteEvent; // The kernel currently calls leaveRecord during a delete which may cause datasource write to be called. This causes issues and must be special-cased until the client team changes this.
    boolean isInEntityWriteEvent; // A flag that indicates whether or not the code is currently in the LedgerJournalTrans datasource's write event.
    boolean isInEntityCreateEvent; // A flag that indicates whether or not the code is currently in the LedgerJournalTrans datasource's create event.
    boolean isSiblingWriteRequested; // A flag that indicates whether or not a write was requested for any of the entity's siblings.

    // -------------------------------------
    // Form Event State Flags
    // -------------------------------------
    boolean isInFormCloseEvent; // A flag that indicates whether or not the form that the entity exists on is currently in a close event.
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginEntityCreateEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Signals the beginning of the create event of the entity.
    /// </summary>
    public void beginEntityCreateEvent()
    {
        ;

        isInEntityCreateEvent = true; // Update state to indicate that we are creating the entity.

        // Reset the sibling write state flag as we are beinning a new event.
        this.cancelSiblingWriteRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginEntityDeleteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Signals the start of the delete event of the entity.
    /// </summary>
    /// <remarks>
    ///    This should be called immediately after ttsbegin.
    /// </remarks>
    public void beginEntityDeleteEvent()
    {
        ;

        isInEntityDeleteEvent = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginEntityWriteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Signals the start of the write event of the entity.
    /// </summary>
    /// <remarks>
    ///    This should be called immediately after ttsbegin.
    /// </remarks>
    public void beginEntityWriteEvent()
    {
        ;

        isInEntityWriteEvent = true; // Update state to indicate that we are writing the entity.

        isSiblingWriteRequested = false; // The write for the siblings is being handled, so reset the flag.
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginFormCloseEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Signals the beginning of the close even of a form.
    /// </summary>
    public void beginFormCloseEvent()
    {
        ;

        isInFormCloseEvent = true; // Update state to indicate that the form is closing.

        // Reset the sibling write state flag as we are beinning a new event.
        this.cancelSiblingWriteRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelSiblingWriteRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the sibling buffer write request.
    /// </summary>
    public void cancelSiblingWriteRequest()
    {
        ;

        isSiblingWriteRequested = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endEntityCreateEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Signals the end of the create event of an entity.
    /// </summary>
    public void endEntityCreateEvent()
    {
        ;

        isInEntityCreateEvent = false; // Update state to indicate that we are finished creating the entity.
    }

]]></Source>
			</Method>
			<Method>
				<Name>endEntityDeleteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signals the end of the entity's delete event.
    /// </summary>
    /// <param name="_isFailedDelete">
    /// Flag that indicates whether or not the delete failed. The default value is <c>false</c>.
    /// </param>
    /// <remarks>
    /// This should be called immediately before ttscommit and at the end of all exception handling blocks outside of the
    /// transaction.
    /// </remarks>
    public void endEntityDeleteEvent(boolean _isFailedDelete = false)
    {
        isInEntityDeleteEvent = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endEntityWriteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signals the end of the entity's write event.
    /// </summary>
    /// <param name="_isFailedWrite">
    /// Flag that indicates whether or not the write failed. The default value is <c>false</c>.
    /// </param>
    /// <remarks>
    /// This should be called immediately before ttscommit and at the end of all exception handling blocks outside of the
    /// transaction.
    /// </remarks>
    public void endEntityWriteEvent(boolean _isFailedWrite = false)
    {
        isInEntityWriteEvent = false; // Update state to indicate that we are done writing the entity.

        isSiblingWriteRequested = false; // The write for the siblings has been handled, so reset the flag.
    }

]]></Source>
			</Method>
			<Method>
				<Name>endFormCloseEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Signals the end of the close event of the form.
    /// </summary>
    public void endFormCloseEvent()
    {
        ;

        isInFormCloseEvent = false; // Update state to indicate that the form is finished closing.
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInEntityCreateEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the entity is inside its create event.
    /// </summary>
    /// <returns>
    ///    true if the entity is inside its create event; otherwise, false.
    /// </returns>
    public boolean isInEntityCreateEvent()
    {
        ;

        return isInEntityCreateEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInEntityDeleteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the entity is inside its delete event.
    /// </summary>
    /// <returns>
    ///    true if the entity is inside its delete event; otherwise, false.
    /// </returns>
    public boolean isInEntityDeleteEvent()
    {
        ;

        return isInEntityDeleteEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInEntityWriteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the entity is inside its write event.
    /// </summary>
    /// <returns>
    ///    true if the entity is inside its write event; otherwise, false.
    /// </returns>
    public boolean isInEntityWriteEvent()
    {
        ;

        return isInEntityWriteEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInFormCloseEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the form on which the entity exists is in its close event.
    /// </summary>
    /// <returns>
    ///    true if the form on which the entity exists is in its close event; otherwise, false.
    /// </returns>
    public boolean isInFormCloseEvent()
    {
        ;

        return isInFormCloseEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSiblingWriteRequested</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a write of a sibling buffer was requested and has been handled.
    /// </summary>
    /// <returns>
    ///    true if a write was requested but not handled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A write is considered handled if the entire <c>LedgerJournalTrans</c> entity has been written.
    /// </remarks>
    public boolean isSiblingWriteRequested()
    {
        ;

        return isSiblingWriteRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>LedgerJournTransEntityFrmDatEventManager</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans_DS">
    ///    A non-null <c>LedgerJournalTrans</c> data source of the form.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset_DS">
    ///    A non-null <c>LedgerJournalTrans_Asset</c> data source of the form.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project_DS">
    ///    A non-null <c>LedgerJournalTrans_Project</c> data source of the form.
    /// </param>
    /// <param name="_tax1099Detail_DS">
    /// A form's <c>Tax1099Detail</c> datasource. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RAsset_DS">
    /// A form's <c>LedgerJournalTrans_RAsset</c> datasource. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RDeferrals_DS">
    /// A form's <c>LedgerJournalTrans_RDeferrals</c> datasource. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash_DS">
    /// A form's <c>LedgerJournalTrans_RCash</c> datasource. This may be null.
    /// </param>
    /// <remarks>
    ///    Only the <c>LedgerJournalTrans</c> data source is required.
    /// </remarks>
    public static LedgerJournTransEntityFrmDatEventManager construct(
                    FormDataSource _ledgerJournalTrans_DS,
                    FormDataSource _ledgerJournalTrans_Asset_DS,
                    FormDataSource _ledgerJournalTrans_Project_DS
                    , FormDataSource _tax1099Detail_DS
                    , FormDataSource _ledgerJournalTrans_RAsset_DS = null,
                    FormDataSource _ledgerJournalTrans_RDeferrals_DS = null,
                    FormDataSource _ledgerJournalTrans_RCash_DS = null
                    )
    {
        return new LedgerJournTransEntityFrmDatEventManager(
                    _ledgerJournalTrans_DS,
                    _ledgerJournalTrans_Asset_DS,
                    _ledgerJournalTrans_Project_DS,
                    _tax1099Detail_DS
                    // <GEERU>
                    , _ledgerJournalTrans_RAsset_DS
                    , _ledgerJournalTrans_RDeferrals_DS
                    , _ledgerJournalTrans_RCash_DS
                    // </GEERU>
                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>LedgerJournTransEntityFrmDatEventManager</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans_DS">
    ///    A non-null <c>LedgerJournalTrans</c> data source of the form.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset_DS">
    ///    A non-null <c>LedgerJournalTrans_Asset</c> data source of the form.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project_DS">
    ///    A non-null <c>LedgerJournalTrans_Project</c> data source of the form.
    /// </param>
    /// <param name="_tax1099Detail_DS">
    /// A form's <c>Tax1099Detail</c> datasource. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RAsset_DS">
    /// A form's <c>LedgerJournalTrans_RAsset</c> datasource. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RDeferrals_DS">
    /// A form's <c>LedgerJournalTrans_RDeferrals</c> datasource. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash_DS">
    /// A form's <c>LedgerJournalTrans_RCash</c> datasource. This may be null.
    /// </param>
    /// <remarks>
    ///    Only the <c>LedgerJournalTrans</c> data source is required.
    /// </remarks>
    protected void new(FormDataSource _ledgerJournalTrans_DS,
                    FormDataSource _ledgerJournalTrans_Asset_DS,
                    FormDataSource _ledgerJournalTrans_Project_DS
                    , FormDataSource _tax1099Detail_DS
                    , FormDataSource _ledgerJournalTrans_RAsset_DS = null,
                    FormDataSource _ledgerJournalTrans_RDeferrals_DS = null,
                    FormDataSource _ledgerJournalTrans_RCash_DS = null
                    )
    {
        ;

        Debug::assert(_ledgerJournalTrans_DS != null);  // A LedgerJournalTrans datasource is required.

        // Store references to the form datasources.
        ledgerJournalTrans_DS = _ledgerJournalTrans_DS;
        ledgerJournalTrans_Asset_DS = _ledgerJournalTrans_Asset_DS;
        ledgerJournalTrans_Project_DS = _ledgerJournalTrans_Project_DS;
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            tax1099Detail_DS = _tax1099Detail_DS;
        }
        // <GEERU>
        ledgerJournalTrans_RAsset_DS     = _ledgerJournalTrans_RAsset_DS;
        ledgerJournalTrans_RDeferrals_DS = _ledgerJournalTrans_RDeferrals_DS;
        ledgerJournalTrans_RCash_DS      = _ledgerJournalTrans_RCash_DS;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestWriteForSibling</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Requests that the writing of a sibling buffer be performed.
    /// </summary>
    /// <remarks>
    ///    This should be called from the beginning of the <c>write</c> method on the data source of the
    ///    sibling buffer.
    /// </remarks>
    public void requestWriteForSibling()
    {
        ;

        isSiblingWriteRequested = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndDelete1099Sibling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and deletes the <c>Tax109Detail</c> sibling buffer.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Thrown if the buffer is invalid.
    /// </exception>
    public void validateAndDelete1099Sibling()
    {
        Debug::assert(tax1099Detail_DS != null);     // Must have a reference to a valid Tax1099Detail datasource to validate and delete.

        if (!tax1099Detail_DS.validateDelete())
        {
            // The record is invalid, so throw an exception to halt the write process.
            throw Exception::Error;
        }

        tax1099Detail_DS.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndDeleteAssetsSibling_RU</Name>
				<Source><![CDATA[
    public void validateAndDeleteAssetsSibling_RU()
    {
        Debug::assert(ledgerJournalTrans_RAsset_DS != null);
        if (!ledgerJournalTrans_RAsset_DS.validateDelete())
        {
            throw Exception::Error;
        }
        ledgerJournalTrans_RAsset_DS.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndDeleteCashSibling_RU</Name>
				<Source><![CDATA[
    public void validateAndDeleteCashSibling_RU()
    {
        ;

        Debug::assert(ledgerJournalTrans_RCash_DS != null);

        if (!ledgerJournalTrans_RCash_DS.validateDelete())
        {
            throw Exception::Error;
        }

        ledgerJournalTrans_RCash_DS.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndDeleteDeferralsSibling_RU</Name>
				<Source><![CDATA[
    public void validateAndDeleteDeferralsSibling_RU()
    {
        ;

        Debug::assert(ledgerJournalTrans_RDeferrals_DS != null);

        if (!ledgerJournalTrans_RDeferrals_DS.validateDelete())
        {
            throw Exception::Error;
        }

        ledgerJournalTrans_RDeferrals_DS.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndDeleteFixedAssetsSibling</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and deletes the <c>LedgerJournalTrans_Asset</c> sibling buffer.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The buffer is invalid.
    /// </exception>
    public void validateAndDeleteFixedAssetsSibling()
    {
        ;

        Debug::assert(ledgerJournalTrans_Asset_DS != null);     // Must have a reference to a valid LedgerJournalTrans_Asset datasource to validate and delete.

        if (!ledgerJournalTrans_Asset_DS.validateDelete())
        {
            // The record is invalid, so throw an exception to halt the write process.
            throw Exception::Error;
        }

        ledgerJournalTrans_Asset_DS.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndDeleteProjectSibling</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and deletes the <c>LedgerJournalTrans_Project</c> sibling buffer.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The buffer is invalid.
    /// </exception>
    public void validateAndDeleteProjectSibling()
    {
        ;

        Debug::assert(ledgerJournalTrans_Project_DS != null);   // Must have a reference to a valid LedgerJournalTrans_Project datasource to validate and delete.

        if (!ledgerJournalTrans_Project_DS.validateDelete())
        {
            // The sibling table is invalid, so throw an exception to fail the write and prevent
            // actions like "form closing" from finishing.
            throw Exception::Error;
        }

        ledgerJournalTrans_Project_DS.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWrite1099Sibling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Thrown if the buffer is invalid.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Thrown if the buffer is invalid.
    /// </exception>
    public void validateAndWrite1099Sibling()
    {
        LedgerJournalTrans ledgerJournalTrans;
        Tax1099BoxDetail tax1099Detail;

        Debug::assert(tax1099Detail_DS != null);   // Must have a reference to a valid LedgerJournalTrans_Project datasource to validate and delete.

        // Get the cursors.
        ledgerJournalTrans = ledgerJournalTrans_DS.cursor();
        tax1099Detail = tax1099Detail_DS.cursor();

        if (!tax1099Detail_DS.validateWrite())
        {
            // The sibling table is invalid, so throw an exception to fail the write and prevent
            // actions like "form closing" from finishing.
            throw Exception::Error;
        }

        tax1099Detail_DS.write();

        // This is a 1099 transaction, so synchronize 1099 related fields between siblings
        // and write the project sibling to the database.
        // MUST be done after tax1099Detail_DS.write()
        ledgerJournalTrans.Tax1099RecId = tax1099Detail.RecId;
        ledgerJournalTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteCashSibling_RU</Name>
				<Source><![CDATA[
    public void validateAndWriteCashSibling_RU()
    {
        LedgerJournalTrans       ledgerJournalTrans;
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash;
        ;

        Debug::assert(ledgerJournalTrans_RCash_DS != null);

        ledgerJournalTrans       = ledgerJournalTrans_DS.cursor();
        ledgerJournalTrans_RCash = ledgerJournalTrans_RCash_DS.cursor();

        ledgerJournalTrans_RCash.RefRecId   = ledgerJournalTrans.RecId;

        if (!ledgerJournalTrans_RCash_DS.validateWrite())
        {
            throw Exception::Error;
        }

        ledgerJournalTrans_RCash_DS.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteDeferralsSibling_RU</Name>
				<Source><![CDATA[
    public void validateAndWriteDeferralsSibling_RU()
    {
        LedgerJournalTrans            ledgerJournalTrans;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals;
        ;

        Debug::assert(ledgerJournalTrans_RDeferrals_DS != null);

        ledgerJournalTrans            = ledgerJournalTrans_DS.cursor();
        ledgerJournalTrans_RDeferrals = ledgerJournalTrans_RDeferrals_DS.cursor();

        ledgerJournalTrans_RDeferrals.RefRecId     = ledgerJournalTrans.RecId;
        ledgerJournalTrans_RDeferrals.DeferralsId  = ledgerJournalTrans.getDeferralsId_RU();

        if (!ledgerJournalTrans_RDeferrals_DS.validateWrite())
        {
            throw Exception::Error;
        }

        ledgerJournalTrans_RDeferrals_DS.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteFixedAssetsSibling</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and writes the <c>LedgerJournalTrans_Asset</c> sibling buffer after it synchronizes
    ///    related fields between buffers.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The buffer is invalid.
    /// </exception>
    public void validateAndWriteFixedAssetsSibling()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        ;

        Debug::assert(ledgerJournalTrans_Asset_DS != null); // Must have a reference to a valid LedgerJournalTrans_Asset datasource to validate and delete.

        // Get the cursors.
        ledgerJournalTrans = ledgerJournalTrans_DS.cursor();
        ledgerJournalTrans_Asset = ledgerJournalTrans_Asset_DS.cursor();

        // This is a fixed assets transaction, so synchronize fixed assets related fields between siblings
        // and perform validation the asset sibling to the database.
        ledgerJournalTrans_Asset.RefRecId = ledgerJournalTrans.RecId;
        ledgerJournalTrans_Asset.AssetId  = ledgerJournalTrans.getAssetId();
        ledgerJournalTrans_Asset.Company  = ledgerJournalTrans.getAssetCompany();

        if (!ledgerJournalTrans_Asset_DS.validateWrite())
        {
            // The record is invalid, so throw an exception to halt the write process.
            throw Exception::Error;
        }

        ledgerJournalTrans_Asset_DS.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteProjectSibling</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and writes the <c>LedgerJournalTrans_Project</c> sibling buffer after it synchronizes
    ///    related fields between buffers.
    /// </summary>
    /// <param name="_keepSalesPriceOnWrite">
    ///    Optional. True if the Sale Price is overridden by the user. If false, recalculate sales price.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The buffer is invalid.
    /// </exception>
    public void validateAndWriteProjectSibling(boolean _keepSalesPriceOnWrite = false)
    {
        Debug::assert(ledgerJournalTrans_Project_DS != null);   // Must have a reference to a valid LedgerJournalTrans_Project datasource to validate and delete.

        // Get the cursors.
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_DS.cursor();
        LedgerJournalTrans_Project ledgerJournalTrans_Project = ledgerJournalTrans_Project_DS.cursor();

        // This is a project transaction, so synchronize project related fields between siblings
        // and write the project sibling to the database.
        ledgerJournalTrans_Project.RefRecId = ledgerJournalTrans.RecId;
        ledgerJournalTrans_Project.ProjId   = ledgerJournalTrans.getProjectId();

        LedgerJournalTrans_Project ledgerJournalTrans_ProjectOrigin = ledgerJournalTrans_Project.orig();

        if (!ledgerJournalTrans_Project_DS.validateWrite())
        {
            // The sibling table is invalid, so throw an exception to fail the write and prevent
            // actions like "form closing" from finishing.
            throw Exception::Error;
        }

        ledgerJournalTrans_Project.write();   
    
        if (ProjAllowDiffProjDateAccountingDateFlightVendInvoice::instance().isEnabled() && ProjParameters::find().AllowDifferentProjDateAccountingDateForInvoiceJour)
        {
            if (!this.checkIfVendInvoiceJour(ledgerJournalTrans) && ledgerJournalTrans_Project.ProjTransDate != ledgerJournalTrans_ProjectOrigin.ProjTransDate && !ledgerJournalTrans_Project.ledgerJournalTable().Posted)
            {
                ledgerJournalTrans_Project.updateProjTransDate(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans_Project.ProjTransDate);   
            }
        }
        else
        {
            if (ledgerJournalTrans_Project.ProjTransDate != ledgerJournalTrans_ProjectOrigin.ProjTransDate && !ledgerJournalTrans_Project.ledgerJournalTable().Posted)
            {
                ledgerJournalTrans_Project.updateProjTransDate(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans_Project.ProjTransDate);
            }
        }
        
        LedgerJournalEngine::setProjCostSalesPrice(ledgerJournalTrans, ledgerJournalTrans_Project, 0, false, !_keepSalesPriceOnWrite);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteRAssetsSibling_RU</Name>
				<Source><![CDATA[
    public void validateAndWriteRAssetsSibling_RU()
    {
        LedgerJournalTrans        ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;
        Debug::assert(ledgerJournalTrans_RAsset_DS != null);
        ledgerJournalTrans        = ledgerJournalTrans_DS.cursor();
        ledgerJournalTrans_RAsset = ledgerJournalTrans_RAsset_DS.cursor();
        ledgerJournalTrans_RAsset.RefRecId = ledgerJournalTrans.RecId;
        ledgerJournalTrans_RAsset.AssetId  = ledgerJournalTrans.getAssetId_RU();
        if (!ledgerJournalTrans_RAsset_DS.validateWrite())
        {
            throw Exception::Error;
        }
        ledgerJournalTrans_RAsset_DS.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfVendInvoiceJour</Name>
				<Source><![CDATA[
    private boolean checkIfVendInvoiceJour(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTable ledgerJournalTable;
        
        select firstonly JournalType from ledgerJournalTable
            where ledgerJournalTable.JournalNum == _ledgerJournalTrans.JournalNum;

        if (LedgerJournalType::VendInvoiceRegister == ledgerJournalTable.JournalType)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>