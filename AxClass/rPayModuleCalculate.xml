<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayModuleCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayModuleCalculate
{
    ReportPeriod_RU   payPeriod;
    RHRMEmplId        emplId;
    FormRun           formRun;
    FormDataSource    payModuleTableDs;
    RPayEmplCalculate payEmplCalculate;
    container         con_emplId,con_emplNotCalculated;
    boolean           calcOnQuery;
    #define.GridControlName("Grid")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAllModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean calculateAllModule(boolean _calcOnQuery = false)
    {
        RPayModuleTable   payModuleTable;
        boolean           ret = true;
        FormGridControl   formGridControl;
        RpayTaxSumCalc    rpayTaxSumCalc = new RpayTaxSumCalc();
        int               i;

        calcOnQuery = _calcOnQuery;
        setPrefix("@RUP162");

        if (! calcOnQuery)
        {
            this.initEmplValue();
        }

        while select * from payModuleTable index PayModuleGroupIdx
            where payModuleTable.PayModuleSost != RPayModuleSost::UnUse &&
                  ! payModuleTable.ParentModuleCode
        {
            try
            {
                if (payModuleTableDs)
                {
                    payModuleTableDs.research();
                    payModuleTableDs.findRecord(payModuleTable);
                    formGridControl = formRun.design().controlName(#GridControlName);
                    formGridControl.updateWindow();
                }
                this.calculateChildModule(payModuleTable.PayModuleCode);
            }
            catch (Exception::Info)
            {
                ret = false;
                break;
            }
            catch (Exception::Error)
            {
                ret = false;
                break;
            }
        }

        if  (ret && conLen(con_emplid))
        {
            if (RPayParameters::find().PayStatus == RPayStatus::Arhiv)
            {
                for (i = 1; i <= conLen(con_emplid) ; i++ )
                {
                    if (! conFind(con_EmplNotCalculated, conPeek(con_emplid, i)))
                    {
                        if (!RPayTaxParameters::find().CalcByBranch)
                        {
                            rpayTaxSumCalc.runTax(payPeriod, conPeek(con_emplid,i));
                        }

                        rpayTaxSumCalc.updateFundPeriod(
                            endmth(dateStartYr(payPeriod)),
                            conPeek(con_emplid, i),
                            endmth(payPeriod));
                    }
                }
            }
        }

        ttsbegin;
        while select forupdate payEmplCalculate
        {
            if (conFind(con_emplid, payEmplCalculate.EmplId) && ! conFind(con_EmplNotCalculated, payEmplCalculate.EmplId))
            {
                payEmplCalculate.delete();
            }
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateChildModule</Name>
				<Source><![CDATA[
    #AviFiles
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculateChildModule(RPayModuleCode _moduleCode)
    {
        RPayModuleTable      payModuleTable;
        RPayCalculate        payCalculate;
        int                  i,errorsCounted;
        SysOperationProgress operationProgress;
        RHRMEmplId           emplIdLoc;

        int                  errCounter, errorsCountedAfter;
        boolean              calculatedOK;

        payPeriod = RPayParameters::payPeriod(emplId);

        while select PayModuleCode from payModuleTable
            where payModuleTable.ParentModuleCode == _moduleCode &&
                  payModuleTable.PayModuleSost    != RPayModuleSost::UnUse
        {
            this.calculateChildModule(payModuleTable.PayModuleCode);
        }

        payModuleTable = RPayModuleTable::find(_moduleCode);

        if (calcOnQuery)
        {
            payCalculate = payModuleTable.payCalculate();
            payCalculate.payPeriod(payPeriod);
            payCalculate.calcQuery();
            return;
        }

        if (conLen(con_emplId) > 1)
        {
            operationProgress = new SysOperationProgress();
            operationProgress.setTotal(conLen(con_emplId));
            operationProgress.setCaption("@RUP371" + payModuleTable.PayModuleName);
            operationProgress.setAnimation(#AviUpdate);
        }

        for (i = 1 ; i <= conLen(con_emplId) ; i++ )
        {
            if (conLen(con_emplId) > 1)
            {
                operationProgress.setText("@RUP372" + conPeek(con_emplid,i));
                operationProgress.setCount(i);
            }

            errorsCounted = infolog.num();

            payCalculate = payModuleTable.payCalculate();
            payCalculate.payPeriod(RPayParameters::payPeriod(conPeek(con_emplid, i)));
            payCalculate.calcEmpl(conPeek(con_emplid,i));

            errorsCountedAfter = infolog.num();

            calculatedOK = true;
            if (errorsCounted < errorsCountedAfter && ! conFind(con_emplNotCalculated, conPeek(con_emplid,i)))
            {
                for (errCounter = errorsCounted + 1; errCounter <= errorsCountedAfter; errCounter++)
                {
                    if (infolog.level(errCounter) != Exception::Info)
                    {
                        calculatedOK = false;
                        break;
                    }
                }
            }
            if (calculatedOK)
            {
                emplIdLoc = conPeek(con_emplid, i);
                delete_from payEmplCalculate
                    where payEmplCalculate.EmplId        == emplIdLoc &&
                          payEmplCalculate.PayModuleCode == _moduleCode;
            }
            else
            {
                con_emplNotCalculated += conPeek(con_emplid,i);
            }
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplValue</Name>
				<Source><![CDATA[
    private void initEmplValue()
    {
        int i;

        if (emplId)
        {
            con_emplId = conPoke(con_emplId,1,emplId);
            return;
        }

        i = 1;
        while select EmplId from payEmplCalculate
        {
            if (! conFind(con_emplId, payEmplCalculate.EmplId))
            {
                i++ ;
                con_emplId = conPoke(con_emplId, i, payEmplCalculate.EmplId);
            }
        }
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RHRMEmplId _emplId = '')
    {
        payPeriod = RPayParameters::payPeriod(_emplId);
        emplId = _emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setFormRun(FormRun _formRun)
    {
        formRun = _formRun;
        payModuleTableDs = formRun.dataSource(tableStr(RPayModuleTable));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>