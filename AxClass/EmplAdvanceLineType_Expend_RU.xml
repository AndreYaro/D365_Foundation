<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplAdvanceLineType_Expend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplAdvanceLineType_Expend_RU extends EmplAdvanceLineType_RU
{
    TmpEmplAdvLineVirtual_RU     tmpExpendTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editableFields</Name>
				<Source><![CDATA[
    protected container editableFields()
    {
        return [ fieldnum(EmplAdvLine_RU, TaxGroup)     ,
                 fieldnum(EmplAdvLine_RU, TaxItemGroup) ,
                 fieldnum(EmplAdvLine_RU, Taxed)        ,
                 fieldnum(EmplAdvLine_RU, DocumentName) ,
                 fieldnum(EmplAdvLine_RU, Description)  ,
                 fieldnum(EmplAdvLine_RU, TaxIncluded)  ,
                 fieldnum(EmplAdvLine_RU, PurchBookVatProcessParameters_RU),
                 fieldnum(EmplAdvLine_RU, DefaultDimension) ,
                 fieldnum(EmplAdvLine_RU, LedgerDimension) ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExpendSource</Name>
				<Source><![CDATA[
    public void initFromExpendSource(NoYes      _switch = NoYes::Yes,
                                     AmountCur  _amount = 0)
    {
        EmplAdvExpendTable_RU       expendRateTable  = EmplAdvExpendTable_RU::findByExpendId(tmpExpendTable.Expend);
        CurrencyCode                standardCurrency = CompanyInfoHelper::standardCurrency();

        advLine.initValue();
        advLine.DocumentDate          = tmpExpendTable.ExpendDate;
        advLine.EmplAdvExpendTable_RU = expendRateTable.RecId;
        advLine.Qty                   = tmpExpendTable.DayCount;
        advLine.DocumentNum           = tmpExpendTable.DocumentNum;
        advLine.DocumentName          = tmpExpendTable.DocumentName;
        advLine.LineType              = EmplAdvLineType_RU::Expend;
        advLine.AdvanceId             = this.parmAdvanceId();
        advLine.CurrencyCode          = expendRateTable.CurrencyCode ? expendRateTable.CurrencyCode : standardCurrency;

        EmplAdvTable_RU emplAdvTable = advLine.advTable();

        if (_switch == NoYes::Yes)
        {
            advLine.LedgerDimension                  = expendRateTable.RateLedgerDimension;
            advLine.TaxGroup                         = expendRateTable.TaxGroupRate;
            advLine.TaxItemGroup                     = expendRateTable.TaxItemGroupRate;
            advLine.DefaultDimension                 = DimensionDefaultFacade::serviceMergeDefaultDimensions(emplAdvTable.DefaultDimension, expendRateTable.RateDefaultDimension);
            advLine.Taxed                            = NoYes::No;
            advLine.TaxIncluded                      = expendRateTable.TaxIncluded;
            advLine.PurchBookVATProcessParameters_RU = PurchBookVATProcessParameters_RU::defaultParms().RecId;
        }
        else
        {
            advLine.LedgerDimension                  = expendRateTable.OverRateLedgerDimension;
            advLine.TaxGroup                         = expendRateTable.TaxGroupOverRate;
            advLine.TaxItemGroup                     = expendRateTable.TaxItemGroupOverRate;
            advLine.DefaultDimension                 = DimensionDefaultFacade::serviceMergeDefaultDimensions(emplAdvTable.DefaultDimension, expendRateTable.OverRateDefaultDimension);
            advLine.Taxed                            = expendRateTable.Taxed;
            advLine.TaxIncluded                      = expendRateTable.OverTaxIncluded;
            advLine.OverNorm                         = NoYes::Yes;
            advLine.PurchBookVATProcessParameters_RU = expendRateTable.PurchBookVATProcessParameters_RU;
            advLine.Qty                              = 0;
        }

        if (! advLine.DefaultDimension)
        {
            advLine.DefaultDimension = advLine.advTable().DefaultDimension;
        }

        advLine.AmountCur            = _amount;
        advLine.AmountCurApproved    = advLine.AmountCur;
        advLine.AmountMst            = advLine.CurrencyCode ?
                                       CurrencyExchangeHelper::amountCur2MST(advLine.AmountCurApproved, advLine.CurrencyCode, advLine.ExchRate, emplAdvTable.TransDate, advLine.ExchRateSecond, advLine.Triangulation) :
                                       advLine.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpendSource</Name>
				<Source><![CDATA[
    private TmpEmplAdvLineVirtual_RU parmExpendSource(TmpEmplAdvLineVirtual_RU _expendTable = null)
    {
        tmpExpendTable = _expendTable ? _expendTable : tmpExpendTable;

        return tmpExpendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromEmplTransSource</Name>
				<Source><![CDATA[
    public static void createFromEmplTransSource(TmpEmplAdvLineVirtual_RU      _tmpEmplAdvLineVirtual,
                                                 EmplAdvanceId_RU              _advanceId,
                                                 AmountCur                     _amount,
                                                 NoYes                         _switch = NoYes::Yes)
    {
        EmplAdvanceLineType_Expend_RU   advLineType;
        ;

        advLineType = new EmplAdvanceLineType_Expend_RU(null);
        advLineType.parmAdvanceId(_advanceId);
        advLineType.parmExpendSource(_tmpEmplAdvLineVirtual);
        advLineType.initFromExpendSource(_switch, _amount);
        advLineType.create();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>