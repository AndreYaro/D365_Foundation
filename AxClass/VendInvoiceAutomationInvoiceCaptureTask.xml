<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationInvoiceCaptureTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class VendInvoiceAutomationInvoiceCaptureTask extends SysOperationServiceController
{
    private const int MaximumAllowedCollectionRetries = 3;
    VendInvoiceAutomationInstrumentationTransferCapturedInvoiceActivities instrumentationTransferActivities =
            VendInvoiceAutomationInstrumentationTransferCapturedInvoiceActivities::createFromLoggerName(
            classStr(VendInvoiceAutomationInvoiceCaptureTask));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@AccountsPayable:VendInvoiceAutomationInvoiceCaptureTaskCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationInvoiceCaptureTask construct()
    {
        return new VendInvoiceAutomationInvoiceCaptureTask(
            classStr(VendInvoiceAutomationInvoiceCaptureTask),
            methodStr(VendInvoiceAutomationInvoiceCaptureTask, runGeneration),
            SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runGeneration</Name>
				<Source><![CDATA[
    internal void runGeneration(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        
        VendInvoiceAutomationCapturedInvoicesInTransfer capturedInvoicesReadyForTransfer = this.collectCapturedInvoicesReadyForTransfer();

        try
        {
            this.transferCapturedInvoices(capturedInvoicesReadyForTransfer, _processScheduleWorkItem);
        }
        finally
        {
            delete_from capturedInvoicesReadyForTransfer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectCapturedInvoicesReadyForTransfer</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationCapturedInvoicesInTransfer collectCapturedInvoicesReadyForTransfer()
    {
        int waitBetweenRetries = RandomGenerate::construct().randomInt(50, 1000);
        VendInvoiceCapturedInvoiceInfo capturedInvoice;
        VendInvoiceAutomationCapturedInvoicesInTransfer capturedInvoicesReadyForTransfer;
        VendInvoiceAutomationCapturedInvoicesInTransfer capturedInvoicesAlreadyInTransfer;

        using (var activityContext = instrumentationTransferActivities.collectCapturedInvoicesReadyForTransferContext())
        {
            try
            {
                ttsbegin;

                capturedInvoicesReadyForTransfer.skipDataMethods(true);
                capturedInvoicesReadyForTransfer.skipDatabaseLog(true);
                capturedInvoicesReadyForTransfer.skipEvents(true);

                // collect
                insert_recordset capturedInvoicesReadyForTransfer(
                    CapturedInvoiceRecId,
                    CapturedInvoiceDataAreaId)
                    select crosscompany RecId, DataAreaId
                        from capturedInvoice
                            where capturedInvoice.IsSync == NoYes::No
                                && capturedInvoice.TransferState == CapturedInvoiceTransferState::Waiting
                        notexists join capturedInvoicesAlreadyInTransfer
                            where capturedInvoicesAlreadyInTransfer.CapturedInvoiceRecId == capturedInvoice.RecId;

                ttscommit;
            }
            catch (Exception::DuplicateKeyException)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount < MaximumAllowedCollectionRetries)
                {
                    sleep(currentRetryCount * waitBetweenRetries);
                    retry;
                }
                else
                {
                    VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties = VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(activityContext);
                    errorProperties.duplicateKeyProperty(capturedInvoicesReadyForTransfer.RecId);
                }
            }
            catch (Exception::Error)
            {
                throw;
            }
        }

        return capturedInvoicesReadyForTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCapturedInvoices</Name>
				<Source><![CDATA[
    private void transferCapturedInvoices(
        VendInvoiceAutomationCapturedInvoicesInTransfer _capturedInvoicesReadyForTransfer,
        ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceCapturedInvoiceInfoEntity capturedInvoice;
        VendInvoiceAutomationInvoiceTmp capturedInvoicesByCompany;
        
        insert_recordset capturedInvoicesByCompany(VendInvoiceDataAreaId)
            select CapturedInvoiceDataAreaId from _capturedInvoicesReadyForTransfer
                group by _capturedInvoicesReadyForTransfer.CapturedInvoiceDataAreaId;

        while select VendInvoiceDataAreaId from capturedInvoicesByCompany
        {
            changecompany(capturedInvoicesByCompany.VendInvoiceDataAreaId)
            {
                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                capturedInvoice = null;

                while select forupdate capturedInvoice 
                    exists join _capturedInvoicesReadyForTransfer
                        where _capturedInvoicesReadyForTransfer.CapturedInvoiceRecId == capturedInvoice.RecId
                            && _capturedInvoicesReadyForTransfer.CapturedInvoiceDataAreaId == capturedInvoicesByCompany.VendInvoiceDataAreaId
                {
                    System.Exception exception;
                    int startNum = infolog.num() + 1;
                    VendInvoiceAutomationInvoiceCaptureHandler handler =  VendInvoiceAutomationInvoiceCaptureHandler::initializeInvoiceCaptureHandler(capturedInvoice, _processScheduleWorkItem);
                    try
                    {
                        ttsbegin;
                        this.transferCapturedInvoice(capturedInvoice, _processScheduleWorkItem, handler);
                        ttscommit;
                    }
                    catch (exception)
                    {
                        str errorMessage = DMFStagingValidationLog::logText(infolog.cut(startNum, infolog.num()));
                        using (var failedContext = instrumentationTransferActivities.failureTransferContext(exception))
                        {
                            handler.handleFailedTransfer(errorMessage);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCapturedInvoice</Name>
				<Source><![CDATA[
    private void transferCapturedInvoice(VendInvoiceCapturedInvoiceInfoEntity _capturedInvoice, ProcessScheduleWorkItem _processScheduleWorkItem, VendInvoiceAutomationInvoiceCaptureHandler _handler)
    {      
        using (var performTransferContext = instrumentationTransferActivities.performTransferContext(_capturedInvoice.RecId, _processScheduleWorkItem.parmExecutionId()))
        {
            VendInvoiceCapturedInvoiceHandler::transferInvoice(_capturedInvoice);
        }
        using (var successContext = instrumentationTransferActivities.successTransferContext())
        {
            _handler.handleSuccessfulTransfer();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>