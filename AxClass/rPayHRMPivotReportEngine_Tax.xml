<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotReportEngine_Tax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The pivot payroll report engine (tax).
/// </summary>
class rPayHRMPivotReportEngine_Tax extends RPayHRMPivotReportEngine implements BatchRetryable
{
    ReportPeriod_RU           startPeriod;
    ReportPeriod_RU           endPeriod;
    RPayCorrectedPeriod       corStartPeriod;
    RPayCorrectedPeriod       corEndPeriod;
    DialogField               dfStartPeriod, dfCorStartPeriod;
    DialogField               dfEndPeriod, dfCorEndPeriod;

    #DEFINE.AddTaxAmount("AddTaxAmount")
    #DEFINE.DeductTaxAmount("DeductTaxAmount")
    #DEFINE.TaxDebt("TaxDebt")
    #DEFINE.IncomeAmount("IncomeAmount")
    #DEFINE.DeductionAmount("DeductionAmount")

    #DEFINE.RpayTaxIncomeGroupCode("RpayTaxIncomeGroupCode")
    #DEFINE.CodeKBK("CodeKBK")
    #DEFINE.Manual("Manual")
    #DEFINE.BranchId("Branch")
    #DEFINE.TaxStatus("TaxStatus")

    #DEFINE.EmplId("EmplId")
    #DEFINE.EmplName("EmplName")
    #DEFINE.PayPeriod("PayPeriod")
    #DEFINE.CorrectedPeriod("CorrectedPeriod")
    #DEFINE.DeductionCode("DeductionCode")
    #DEFINE.IncomeCode("IncomeCode")

    #DEFINE.EnumStrLen(100)

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        startPeriod,
        endPeriod,
        corStartPeriod,
        corEndPeriod,
        conNameCodeFieldsSettings
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    protected void buildData()
    {
        RPayTaxEmplSum      taxEmplSum;
        RPayTaxEmplTrans    taxTrans;

        this.updateQuery(queryRun.query());

        this.progressInit("@SYS60116",0,#AviTransfer);
        progress.setTotal(SysQuery::countTotal(queryRun));

        pivotTableData.rsOpen();

        while (queryRun.next())
        {
            taxEmplSum = queryRun.get(tableNum(RPayTaxEmplSum));
            taxTrans   = queryRun.get(tableNum(RPayTaxEmplTrans));

            progress.setText(strFmt("@RUP742", taxEmplSum.EmplId, taxEmplSum.RpayTaxIncomeGroupCode));
            progress.incCount();

            if (queryRun.changed(tableNum(RPayTaxEmplSum)))
            {
                this.createTaxRecord(taxEmplSum);
            }

            if (queryRun.changed(tableNum(RPayTaxEmplTrans)))
            {
                this.createIncomeRecord(taxEmplSum, taxTrans);
                this.createDeductionsRecord(taxEmplSum, taxTrans);
            }
        }

        pivotTableData.rsUpdateBatch();

        this.progressHide();
        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@RUP2856";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeductionsRecord</Name>
				<Source><![CDATA[
    private void createDeductionsRecord(RPayTaxEmplSum _taxEmplSum, RPayTaxEmplTrans _taxTrans)
    {
        Map dataMap;

        if (_taxTrans.RpayTaxType == RpayTaxType::Income && _taxTrans.RpayTaxDeductionCode ||
            _taxTrans.RpayTaxType == RpayTaxType::Deduction)
        {
            dataMap =  new Map(Types::String, Types::Container);
            dataMap.insert(#EmplId,                     [_taxEmplSum.EmplId]);
            dataMap.insert(#EmplName,                   [RHRMEmplTable::emplId2Name(_taxEmplSum.EmplId)]);
            dataMap.insert(#RpayTaxIncomeGroupCode,     [_taxEmplSum.RpayTaxIncomeGroupCode]);
            dataMap.insert(#BranchId,                   [_taxEmplSum.BranchId]);
            dataMap.insert(#PayPeriod,                  [_taxEmplSum.PayPeriod]);
            dataMap.insert(#CorrectedPeriod,            [_taxEmplSum.CorrectedPeriod]);
            dataMap.insert(#TaxStatus,                  [enum2str(_taxEmplSum.taxStatus())]);
            dataMap.insert(#CodeKBK,                    [_taxEmplSum.budgetClassCode()]);
            dataMap.insert(#Manual,                     [enum2str(_taxEmplSum.Source)]);
            dataMap.insert(#DeductionCode,              [int2str(_taxTrans.RpayTaxType == RpayTaxType::Deduction ? _taxTrans.RpayTaxIncDedCode : _taxTrans.RpayTaxDeductionCode)]);
            dataMap.insert(#IncomeCode,                 [_taxTrans.RpayTaxType == RpayTaxType::Deduction ? '' : int2str(_taxTrans.RpayTaxIncDedCode)]);

            dataMap.insert(#AddTaxAmount,               [0.0]);
            dataMap.insert(#DeductTaxAmount,            [0.0]);
            dataMap.insert(#TaxDebt,                    [0.0]);
            dataMap.insert(#DeductionAmount,            [_taxTrans.RpayTaxType == RpayTaxType::Deduction ? _taxTrans.Amount : _taxTrans.Deduction]);
            dataMap.insert(#IncomeAmount,               [0.0]);

            pivotTableData.insertRecord(dataMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIncomeRecord</Name>
				<Source><![CDATA[
    private void createIncomeRecord(RPayTaxEmplSum _taxEmplSum, RPayTaxEmplTrans _taxTrans)
    {
        Map dataMap;

        if (_taxTrans.RpayTaxType == RpayTaxType::Income)
        {
            dataMap =  new Map(Types::String, Types::Container);
            dataMap.insert(#EmplId,                     [_taxEmplSum.EmplId]);
            dataMap.insert(#EmplName,                   [RHRMEmplTable::emplId2Name(_taxEmplSum.EmplId)]);
            dataMap.insert(#RpayTaxIncomeGroupCode,     [_taxEmplSum.RpayTaxIncomeGroupCode]);
            dataMap.insert(#BranchId,                   [_taxEmplSum.BranchId]);
            dataMap.insert(#PayPeriod,                  [_taxEmplSum.PayPeriod]);
            dataMap.insert(#CorrectedPeriod,            [_taxEmplSum.CorrectedPeriod]);
            dataMap.insert(#TaxStatus,                  [enum2str(_taxEmplSum.taxStatus())]);
            dataMap.insert(#CodeKBK,                    [_taxEmplSum.budgetClassCode()]);
            dataMap.insert(#Manual,                     [enum2str(_taxEmplSum.Source)]);
            dataMap.insert(#DeductionCode,              ['']);
            dataMap.insert(#IncomeCode,                 [int2str(_taxTrans.RpayTaxIncDedCode)]);

            dataMap.insert(#AddTaxAmount,               [0.0]);
            dataMap.insert(#DeductTaxAmount,            [0.0]);
            dataMap.insert(#TaxDebt,                    [0.0]);
            dataMap.insert(#DeductionAmount,            [0.0]);
            dataMap.insert(#IncomeAmount,               [_taxTrans.Amount]);

            pivotTableData.insertRecord(dataMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxRecord</Name>
				<Source><![CDATA[
    private void createTaxRecord(RPayTaxEmplSum _taxEmplSum)
    {
        Map dataMap =  new Map(Types::String, Types::Container);

        dataMap.insert(#EmplId,                     [_taxEmplSum.EmplId]);
        dataMap.insert(#EmplName,                   [RHRMEmplTable::emplId2Name(_taxEmplSum.EmplId)]);
        dataMap.insert(#RpayTaxIncomeGroupCode,     [_taxEmplSum.RpayTaxIncomeGroupCode]);
        dataMap.insert(#BranchId,                   [_taxEmplSum.BranchId]);
        dataMap.insert(#PayPeriod,                  [_taxEmplSum.PayPeriod]);
        dataMap.insert(#CorrectedPeriod,            [_taxEmplSum.CorrectedPeriod]);
        dataMap.insert(#TaxStatus,                  [enum2str(_taxEmplSum.taxStatus())]);
        dataMap.insert(#CodeKBK,                    [_taxEmplSum.budgetClassCode()]);
        dataMap.insert(#Manual,                     [enum2str(_taxEmplSum.Source)]);
        dataMap.insert(#DeductionCode,              ['']);
        dataMap.insert(#IncomeCode,                 ['']);

        dataMap.insert(#AddTaxAmount,               [_taxEmplSum.AddTaxAmount]);
        dataMap.insert(#DeductTaxAmount,            [_taxEmplSum.DeductTaxAmount - _taxEmplSum.PayrollRedemptionAmount]);
        dataMap.insert(#TaxDebt,                    [this.taxDebt(_taxEmplSum)]);
        dataMap.insert(#DeductionAmount,            [0.0]);
        dataMap.insert(#IncomeAmount,               [0.0]);

        pivotTableData.insertRecord(dataMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super() as DialogRunbase;
        dialog.caption(this.caption());

        dialog.addGroup("@GLS105772");
        dfStartPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), startPeriod, "@GLS106049");
        dfEndPeriod   = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), endPeriod, "@GLS106050");

        dialog.addGroup("@GLS111794");
        dfCorStartPeriod = dialog.addFieldValue(extendedTypeStr(RPayCorrectedPeriod), corStartPeriod, "@GLS106049");
        dfCorEndPeriod   = dialog.addFieldValue(extendedTypeStr(RPayCorrectedPeriod), corEndPeriod, "@GLS106050");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            pivotTableMetaData.updateCodeNameSettingsFromTable();
            startPeriod = dfStartPeriod.value();
            endPeriod   = dfEndPeriod.value();
            corStartPeriod = dfCorStartPeriod.value();
            corEndPeriod   = dfCorEndPeriod.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotCodeNameFields</Name>
				<Source><![CDATA[
    protected void initPivotCodeNameFields()
    {
        DictType    dictTypeCode;

        void addCodeNameField(FieldName  _codeField,
                              FieldName  _nameField,
                              FieldLabel _fieldLabel = dictTypeCode.label())
        {
            pivotTableMetaData.addCodeNameField(_codeField,_nameField,_fieldLabel);
        }

        dictTypeCode = new DictType(extendedTypeNum(RHRMPayMainEmplId));
        addCodeNameField(#EmplId, #EmplName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes pivot table report metadata.
    /// </summary>
    protected void initPivotMetadata()
    {
        Map      metaDataMap;
        DictType dictType;
        DictEnum dictEnum;

        void addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictType.label(),
                                    Types                        _baseType   = dictType.baseType(),
                                    int                          _stringLen  = dictType.stringLen())
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        void addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictEnum.label(),
                                    Types                        _baseType   = Types::String,
                                    int                          _stringLen  = #EnumStrLen)
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        metaDataMap = new Map(Types::String, Types::Container);

        dictType = new DictType(extendedTypeNum(RPayAmount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#IncomeAmount, "@SYS55266");

        dictType = new DictType(extendedTypeNum(RPayAmount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#DeductionAmount, "@RUP876");

        dictType = new DictType(extendedTypeNum(RPayAmount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#AddTaxAmount, "@RUP577");

        dictType = new DictType(extendedTypeNum(RPayAmount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#DeductTaxAmount, "@RUP579");

        dictType = new DictType(extendedTypeNum(RPayAmount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#TaxDebt, "@RUP598");

        dictType = new DictType(extendedTypeNum(RHRMPayMainEmplId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #EmplId);

        dictType = new DictType(extendedTypeNum(DirPartyName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #EmplName);

        dictType = new DictType(extendedTypeNum(RpayTaxIncomeGroupCode));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields,#RpayTaxIncomeGroupCode);

        dictType = new DictType(extendedTypeNum(ReportPeriod_RU));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayPeriod);

        dictType = new DictType(extendedTypeNum(RPayCorrectedPeriod));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #CorrectedPeriod);

        dictType = new DictType(extendedTypeNum(BranchId_RU));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #BranchId);

        dictEnum = new DictEnum(enumNum(RPayEmplTaxStatus));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #TaxStatus);

        dictEnum = new DictEnum(enumNum(NoYes));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #Manual, "@SYS27472");

        dictType = new DictType(extendedTypeNum(RpayTaxIncomeCode));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #IncomeCode, dictType.label(), Types::String, 4);

        dictType = new DictType(extendedTypeNum(RpayTaxDeductionCode));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #DeductionCode, dictType.label(), Types::String, 4);

        dictType = new DictType(extendedTypeNum(PaymentOrderBudgetReceiptClassCode_RU));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #CodeKBK);

        pivotTableMetaData.addFields(metaDataMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container conQuery = this.queryRun().pack();
        ;

        conNameCodeFieldsSettings = pivotTableMetaData.codeNameFields().pack();
        return [#CurrentVersion, #CurrentList, conQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        return new Query(queryStr(RPayHRMPivotTaxTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDebt</Name>
				<Source><![CDATA[
    private RPayAmount taxDebt(RPayTaxEmplSum _taxSum)
    {
        return _taxSum.AddTaxAmount - _taxSum.DeductTaxAmount + _taxSum.PayrollRedemptionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean   ret;
        Version   version = RunBase::getVersion(_packedClass);
        container packedQuery = conPeek(_packedClass, conLen(_packedClass));
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                pivotTableMetaData.unpackCodeNameSettings(conNameCodeFieldsSettings);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(Query _query)
    {
        QueryBuildDataSource qbdsTaxEmplSum;

        qbdsTaxEmplSum = _query.dataSourceTable(tableNum(RPayTaxEmplSum));

        if (endPeriod)
        {
            findOrCreateRange_W(qbdsTaxEmplSum, fieldNum(RPayTaxEmplSum, PayPeriod), queryRange(dateStartMth(startPeriod), dateEndMth(endPeriod)));
        }
        else
        {
            findOrCreateRange_W(qbdsTaxEmplSum, fieldNum(RPayTaxEmplSum, PayPeriod), queryRange(dateStartMth(startPeriod), dateMax()));
        }

        if (corEndPeriod)
        {
            findOrCreateRange_W(qbdsTaxEmplSum, fieldNum(RPayTaxEmplSum, CorrectedPeriod), queryRange(dateStartMth(corStartPeriod), dateEndMth(corEndPeriod)));
        }
        else
        {
            findOrCreateRange_W(qbdsTaxEmplSum, fieldNum(RPayTaxEmplSum, CorrectedPeriod), queryRange(dateStartMth(corStartPeriod), dateMax()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the parameters of the report.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// True if no errors.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && !startPeriod && !corStartPeriod)
        {
            ret = checkFailed("@RUP881");
        }

        if (ret && !endPeriod && !corEndPeriod)
        {
            ret = checkFailed("@RUP882");
        }

        if (ret && (startPeriod > endPeriod) && (corStartPeriod > corEndPeriod))
        {
            ret = checkFailed("@RUP883");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>