<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConsistencyCheckLocationStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Checks whether the contents of the <c>WMSLocationAggregateStatus</c> table is consistent with the physical on hand information.
/// </summary>
class WHSConsistencyCheckLocationStatus extends SysConsistencyCheck implements BatchRetryable
{
    private QueryRun queryRun;
    private CheckFix customCheckFix;  

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        customCheckFix
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>showInTree</Name>
				<Source><![CDATA[
    boolean showInTree()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(WHSandTMS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = null)
    {
        if (prmisDefault(_query))
        {
            return queryRun.query();
        }

        queryRun = new QueryRun(_query);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomCheckFix</Name>
				<Source><![CDATA[
    public CheckFix parmCustomCheckFix(CheckFix _customCheckFix = customCheckFix)
    {
        if (prmisDefault(_customCheckFix))
        {
            return consistencyCheckJob ? consistencyCheckJob.parmCheckFix() : customCheckFix;
        }

        if (consistencyCheckJob)
        {
            consistencyCheckJob.parmCheckFix(_customCheckFix);
        }
        else
        {
            customCheckFix = _customCheckFix;
        }

        return _customCheckFix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(WHSConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixLocationStatusForLocationProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs location status consistency job for specific location profile ID.
    /// </summary>
    /// <param name = "_locationProfileId">The location profile that has been updated.</param>
    [Hookable(false)]
    internal static void fixLocationStatusForLocationProfileId(WHSLocProfileId _locationProfileId)
    {
        if (WHSLocationProfile::find(_locationProfileId).areLocationStatusFieldsEnabled())
        {
            Query locationsQuery = new Query();

            QueryBuildDataSource locationDataSource = locationsQuery.addDataSource(tableNum(WMSLocation));
            SysQuery::findOrCreateRange(locationDataSource, fieldNum(WMSLocation, LocProfileId)).value(queryValue(_locationProfileId));

            WHSConsistencyCheckLocationStatus::scheduleFixAsBatchJob(locationsQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleFixAsBatchJob</Name>
				<Source><![CDATA[
    private static void scheduleFixAsBatchJob(Query _locationsQuery)
    {
        WHSConsistencyCheckLocationStatus consistencyCheck = new WHSConsistencyCheckLocationStatus();
        consistencyCheck.parmQuery(_locationsQuery);
        consistencyCheck.parmCustomCheckFix(CheckFix::Fix);

        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.addTask(consistencyCheck);
        batchHeader.parmStartDateTime(DateTimeUtil::utcNow());
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.updateLocationStatusQuery(queryRun.query(), this.parmCustomCheckFix());
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:LocationStatusConsistencyCheckDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@WAX:LocationStatusConsistencyCheckHelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        Query query = new Query();
        query.addDataSource(tableNum(WMSLocation));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationStatusInfo</Name>
				<Source><![CDATA[
    private void updateLocationStatusInfo(WMSLocation _location, CheckFix _checkFix)
    {
        boolean warn;

        #OCCRetryCount

        try
        {
            ttsbegin;

            WHSLocationProfile          locationProfile = _location.whsLocationProfile();
            WMSLocationAggregateStatus  aggregateStatus = WMSLocationAggregateStatus::find(
                                                            _location.wMSLocationId,
                                                            _location.inventLocationId,
                                                            (_checkFix == CheckFix::Fix));
        
            // Location may not have an aggregate status record yet.
            if (aggregateStatus.RecId == 0)
            {
                aggregateStatus.initFromWMSLocation(_location);
                warn = true;
            }

            // Determine the appropriate location status for location.
            if (locationProfile.EnableLocationStatusUpdate)
            {
                WHSLocationStatus tmpLocationStatus = aggregateStatus.LocationStatus;

                aggregateStatus.LocationStatus = this.getCorrectLocationStatus(_location);

                // If status is not empty also set aging date.
                if (aggregateStatus.LocationStatus != WHSLocationStatus::Empty)
                {
                    aggregateStatus.AgingDate = this.getCorrectAgingDate(_location);
                }

                aggregateStatus.MaintainLocationStatus = NoYes::Yes;

                if (aggregateStatus.LocationStatus != tmpLocationStatus)
                {
                    warn = true;
                }
            }
            else
            {
                // Clear fields if location status is not maintained.
                aggregateStatus.LocationStatus = WHSLocationStatus::Undetermined;
                aggregateStatus.AgingDate = dateNull();
                aggregateStatus.MaintainLocationStatus = NoYes::No;
            }

            // Determine the correct item in location.
            if (locationProfile.EnableItemInLocationUpdate)
            {
                WHSItemIdInLocation tmpItemIdInLocation = aggregateStatus.ItemIdInLocation;

                aggregateStatus.ItemIdInLocation = this.getCorrectItemIdInLocation(_location);
                aggregateStatus.MaintainItemInLocation = NoYes::Yes;

                if (aggregateStatus.ItemIdInLocation != tmpItemIdInLocation)
                {
                    warn = true;
                }
            }
            else
            {
                // Clear fields if item in location is not maintained.
                aggregateStatus.ItemIdInLocation = '';
                aggregateStatus.MaintainItemInLocation = NoYes::No;
            }

            // Determine the correct activity date and time for the location.
            if (locationProfile.EnableLocationActivityDateTimeUpdate)
            {
                WHSLastActivityDateTime tmpLastActivityDateTime = aggregateStatus.LastActivityDateTime;

                aggregateStatus.LastActivityDateTime = this.getCorrectLastActivityDateTime(_location);
                aggregateStatus.MaintainLocationActivityDateTime = NoYes::Yes;

                if (aggregateStatus.LastActivityDateTime != tmpLastActivityDateTime)
                {
                    warn = true;
                }
            }
            else
            {
                // Clear fields if activity date and time is not maintained.
                aggregateStatus.LastActivityDateTime = utcDateTimeNull();
                aggregateStatus.MaintainLocationActivityDateTime = NoYes::No;
            }

            if (_checkFix == CheckFix::Fix)
            {
                aggregateStatus.write();
            }

            ttscommit;

            if (warn)
            {
                if (_checkFix == CheckFix::Check)
                {
                    warning(strFmt("@WAX:LocationStatusConsistencyCheckFoundWarning", _location.wMSLocationId, _location.inventLocationId));
                }
                else if (_checkFix == CheckFix::Fix)
                {
                    warning(strFmt("@WAX:LocationStatusConsistencyCheckFixWarning", _location.wMSLocationId, _location.inventLocationId));
                }
            }
        }
        catch (Exception::Error)
        {
            error("@SYS18447");
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw;
            }
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            // Using the optimistic pattern - recovery without rollback of transaction
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            // Using the optimistic pattern - recovery without rollback of transaction
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }

            retry;
        }
        catch
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationStatusQuery</Name>
				<Source><![CDATA[
    private void updateLocationStatusQuery(Query _locationQuery, CheckFix _checkFix)
    {
        QueryRun locationQueryRun = new QueryRun(_locationQuery);

        while (locationQueryRun.next())
        {
            WMSLocation location = locationQueryRun.get(tableNum(WMSLocation));

            this.updateLocationStatusInfo(location, _checkFix);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectLocationStatus</Name>
				<Source><![CDATA[
    private WHSLocationStatus getCorrectLocationStatus(WMSLocation _location)
    {
        WHSLocationStatus   locationStatus;
        InventSum           inventSum;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.PhysicalInvent > 0
                && inventSum.InventLocationId   == _location.inventLocationId
                && inventSum.wMSLocationId      == _location.wMSLocationId
                && inventSum.ClosedQty          == NoYes::No;
        }
        else
        {
            InventDim           inventDim;

            select firstonly RecId from inventSum
            where inventSum.PhysicalInvent  > 0
                && inventSum.ClosedQty      == NoYes::No
            exists join inventDim
                where inventDim.inventDimId         == inventSum.InventDimId
                &&    inventDim.InventLocationId    == _location.inventLocationId
                &&    inventDim.wMSLocationId       == _location.wMSLocationId;
        }
    
        if (inventSum.RecId == 0)
        {
            locationStatus = WHSLocationStatus::Empty;
        }
        else
        {
            // Determine if status should be storage or picking based on last executed activity on location.
            WHSWorkTable    workTable;
            WHSWorkLine     workLine;

            select firstonly WorkType from workLine
                order by WorkClosedUTCDateTime desc
                where workLine.WorkStatus       == WHSWorkStatus::Closed
                &&    workLine.WMSLocationId    == _location.wMSLocationId
                join WorkTransType from workTable
                    where workTable.WorkId              == workLine.WorkId
                    &&    workTable.InventLocationId    == _location.inventLocationId;

            if (workLine.workType == WHSWorkType::Pick && this.isPickingTransType(workTable.WorkTransType))
            {
                // Location status should be set to picking if last action was a pick for certain transaction types.
                locationStatus = WHSLocationStatus::Picking;
            }
            else
            {
                locationStatus = WHSLocationStatus::Storage;
            }
        }

        return locationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectAgingDate</Name>
				<Source><![CDATA[
    private WHSAgingDate getCorrectAgingDate(WMSLocation _location)
    {
        if (_location.whsLocationIsLPControlled())
        {
            return WHSLicensePlate::agingDateByLocation(_location);
        }
        
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectItemIdInLocation</Name>
				<Source><![CDATA[
    private WHSItemIdInLocation getCorrectItemIdInLocation(WMSLocation _location)
    {
        InventSum   inventSum;
        WHSItemIdInLocation itemIdInLocation;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly ItemId from inventSum
            where inventSum.PhysicalInvent      > 0
                && inventSum.ClosedQty          == NoYes::No
                && inventSum.InventLocationId   == _location.inventLocationId
                && inventSum.wMSLocationId      == _location.wMSLocationId;

            if (inventSum.ItemId)
            {
                itemIdInLocation = inventSum.ItemId;

                select firstonly RecId from inventSum
                where inventSum.PhysicalInvent      > 0
                    && inventSum.ClosedQty          == NoYes::No
                    && inventSum.ItemId             != itemIdInLocation
                    && inventSum.InventLocationId   == _location.inventLocationId
                    && inventSum.wMSLocationId      == _location.wMSLocationId;

                itemIdInLocation = inventSum.RecId == 0 ? itemIdInLocation : '';
            }
        }
        else
        {
            InventDim   inventDim;

            select firstonly ItemId from inventSum
            where inventSum.PhysicalInvent  > 0
                && inventSum.ClosedQty      == NoYes::No
            exists join inventDim
                where inventDim.inventDimId         == inventSum.InventDimId
                    && inventDim.InventLocationId   == _location.inventLocationId
                    && inventDim.wMSLocationId      == _location.wMSLocationId;

            if (inventSum.ItemId)
            {
                itemIdInLocation = inventSum.ItemId;

                select firstonly RecId from inventSum
                where inventSum.PhysicalInvent  > 0
                    && inventSum.ItemId         != itemIdInLocation
                    && inventSum.ClosedQty      == NoYes::No
                exists join inventDim
                    where inventDim.inventDimId         == inventSum.InventDimId
                        && inventDim.InventLocationId   == _location.inventLocationId
                        && inventDim.wMSLocationId      == _location.wMSLocationId;

                itemIdInLocation = inventSum.RecId == 0 ? itemIdInLocation : '';
            }
        }
        return itemIdInLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectLastActivityDateTime</Name>
				<Source><![CDATA[
    private WHSLastActivityDateTime getCorrectLastActivityDateTime(WMSLocation _location)
    {
        WHSWorkTable    workTable;
        WHSWorkLine     workLine;

        select firstonly WorkClosedUTCDateTime from workLine
            order by WorkClosedUTCDateTime desc
            where workLine.WorkStatus       == WHSWorkStatus::Closed
            &&    workLine.WMSLocationId    == _location.wMSLocationId
            exists join workTable
                where workTable.WorkId              == workLine.WorkId
                &&    workTable.InventLocationId    == _location.inventLocationId;

        return workLine.WorkClosedUTCDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPickingTransType</Name>
				<Source><![CDATA[
    private boolean isPickingTransType(WHSWorkTransType _workTransType)
    {
        boolean ret;

        switch (_workTransType)
        {
            case WHSWorkTransType::Sales:
            case WHSWorkTransType::ProdPick:
            case WHSWorkTransType::TransferIssue:
            case WHSWorkTransType::KanbanPick:
            case WHSWorkTransType::PackedContainerPicking:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

        default :
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>