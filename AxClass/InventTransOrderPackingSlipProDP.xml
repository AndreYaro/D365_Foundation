<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOrderPackingSlipProDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransOrderPackingSlipProDP</c> class is the data provider class for the
/// <c>InventTransferOrderPackingSlipPro</c> report.
/// </summary>
[SRSReportQueryAttribute(querystr(InventTransferOrderPackingSlipPro))]
public class InventTransOrderPackingSlipProDP extends SRSReportDataProviderBase
{
    InventTransferOrderPackingSlipProTmp inventTransferOrderPackingSlipProTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransferOrderPackingSlipProTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a data table from the <c>PlInventPackageDepositReportTmp</c> table.
    /// </summary>
    /// <returns>
    /// The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(InventTransferOrderPackingSlipProTmp))
    ]
    public InventTransferOrderPackingSlipProTmp getInventTransferOrderPackingSlipProTmp()
    {
        select inventTransferOrderPackingSlipProTmp;
        return inventTransferOrderPackingSlipProTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTransferOrderPackingSlipPro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>PlInventPackageDepositReportTmp</c> temporary table.
    /// </summary>
    /// <param name="_inventTransferTable">
    /// A <c>InventTransferTable</c> object.
    /// </param>
    /// <param name="_inventTransferLine">
    /// A <c>InventTransferLine</c> object.
    /// </param>
    private void insertInventTransferOrderPackingSlipPro(InventTransferTable _inventTransferTable, InventTransferLine _inventTransferLine)
    {
        TransportationDocument  transportationDocument  = TransportationDocument::find(_inventTransferTable.TransportationDocument);
        InventLocation          inventLocationFrom      = InventLocation::find(_inventTransferTable.InventLocationIdFrom);
        inventLocation          inventLocationTo        = InventLocation::find(_inventTransferTable.InventLocationIdTo);
        str logisticsPostalAddress(InventLocation _inventLocation, LogisticsLocationRoleType _type)
        {
            LogisticsLocation logisticsLocation = LogisticsLocationDefault::findSimpleDefault(_inventLocation,
                                                                                             LogisticsLocationRole::findBytype(_type));

            if (!logisticsLocation.RecId)
            {
                logisticsLocation = LogisticsLocationDefault::findSimpleDefault(_inventLocation,
                                                                               LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
            }

            if (logisticsLocation.RecId)
            {
                return LogisticsPostalAddress::findRecId(LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocation.RecId)).Address;
            }

            return "";
        }

        inventTransferOrderPackingSlipProTmp.PackingSlipTxt     = "@GLS104819";

        DocumentDateTime_LT documentDateTime = transportationDocument.DocumentDateTime ? transportationDocument.DocumentDateTime : _inventTransferTable.createdDateTime;
        documentDateTime = DateTimeUtil::applyTimeZoneOffset(documentDateTime, DateTimeUtil::getUserPreferredTimeZone());
        inventTransferOrderPackingSlipProTmp.DocumentDate       = strFmt("@SYS82282", DateTimeUtil::date(documentDateTime));
        inventTransferOrderPackingSlipProTmp.DocumentTime       = time2StrHMS(DateTimeUtil::time(documentDateTime));

        inventTransferOrderPackingSlipProTmp.SenderName         = inventLocationFrom.Name;
        inventTransferOrderPackingSlipProTmp.SenderAddress      = strRemoveCr(inventLocationFrom.address());
        inventTransferOrderPackingSlipProTmp.PayeeName          = inventLocationTo.Name;
        inventTransferOrderPackingSlipProTmp.PayeeAddress       = strRemoveCr(inventLocationTo.address());

        inventTransferOrderPackingSlipProTmp.ItemId         = _inventTransferLine.ItemId;
        inventTransferOrderPackingSlipProTmp.Description    = _inventTransferLine.itemName();
        inventTransferOrderPackingSlipProTmp.UnitId         = _inventTransferLine.UnitId;
        inventTransferOrderPackingSlipProTmp.QtyTransfer    = _inventTransferLine.QtyTransfer;
        inventTransferOrderPackingSlipProTmp.QtyShipped     = _inventTransferLine.QtyShipped;
        inventTransferOrderPackingSlipProTmp.RemainQuantity = _inventTransferLine.QtyTransfer - _inventTransferLine.QtyShipped;
        inventTransferOrderPackingSlipProTmp.GrossWeight    = InventTable::find(_inventTransferLine.ItemId).grossWeight() * _inventTransferLine.QtyShipped;

        inventTransferOrderPackingSlipProTmp.PrintTransportationDocument = transportationDocument.DoPrintTransportationDocument;
        if (inventTransferOrderPackingSlipProTmp.PrintTransportationDocument)
        {
            inventTransferOrderPackingSlipProTmp.LoadedAddress      = strRemoveCr(logisticsPostalAddress(inventLocationFrom, LogisticsLocationRoleType::Lading_W));
            inventTransferOrderPackingSlipProTmp.UnLoadedAddress    = strRemoveCr(logisticsPostalAddress(inventLocationTo, LogisticsLocationRoleType::Unlading_W));

            inventTransferOrderPackingSlipProTmp.Carrier                = transportationDocument.carrierName();
            TransportationVehicle transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);
            inventTransferOrderPackingSlipProTmp.VehicleModel           = VehicleModelTable_W::find(transportationVehicle.Model).VehicleModel;
            inventTransferOrderPackingSlipProTmp.VehiclePlateNum        = transportationVehicle.PlateNumber;
            inventTransferOrderPackingSlipProTmp.VehicleTrailerNumber   = transportationVehicle.TrailerNumber;
            inventTransferOrderPackingSlipProTmp.Driver                 = transportationVehicle.DriverName;

            inventTransferOrderPackingSlipProTmp.PackageDescription     = transportationDocument.PackageDescription;
            inventTransferOrderPackingSlipProTmp.PackageDangerDegree    = transportationDocument.PackageDangerDegree;

            inventTransferOrderPackingSlipProTmp.IssuedBy               = transportationDocument.issuedByName();
        }
        inventTransferOrderPackingSlipProTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic for a <c>InventTransferOrderPackingSlipPro</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            InventTransferTable inventTransferTable = queryRun.get(tablenum(InventTransferTable));
            InventTransferLine inventTransferLine = queryRun.get(tablenum(InventTransferLine));

            this.insertInventTransferOrderPackingSlipPro(inventTransferTable, inventTransferLine);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
