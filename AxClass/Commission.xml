<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Commission</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class Commission
{
    LedgerVoucher           ledgerVoucher;

    LedgerDimensionDefaultAccount   debitAC;
    LedgerDimensionDefaultAccount   creditAccount;
    CommissItemGroup        itemGroup;
    CommissSalesGroup       salesGroup;
    CommissCustomerGroup    custGroup;

    CommissionTrans         commissionTrans;
    TransactionTxt          transactionTxt;
    Factor                  endFactor;
    NoYes                   endDisc;
    CustAccount             orderAccount;
    CustLanguageId          languageId;
    SalesQty                qty;
    SalesPrice              salesPrice;
    PriceUnit               priceUnit;
    MarkupAmount            markup;
    AmountCur               lineAmount;
    AmountMST               costValue;
    EUROTriangulation       triangulation;
    ExchRate                exchRate;
    ExchrateSecondary       exchrateSecondary;
    LedgerDimensionDefaultAccount commissionLedgerDimension;
    LedgerDimensionDefaultAccount commissionOffsetLedgerDimension;
    ItemId previousCommissionTransItemId;
    CustAccount previousOrderAccount;
    CommissCustomerGroup previousCustGroup;
    CommissSalesGroup previousSalesGroup;
    InvoiceDate previousTranscommissionTransInvoiceDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCommissionAmount</Name>
				<Source><![CDATA[
    abstract protected void addCommissionAmount(AmountCur   _commissionAmountCur)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the agreement header for commission rates.
    /// </summary>
    /// <param name="_commissionCalc">
    ///     The record of the <c>CommissionCalc</c> table.
    /// </param>
    /// <returns>
    /// true if the agreement header is valid; otherwise, false.
    /// </returns>
    protected boolean checkAgreement_RU(CommissionCalc _commissionCalc)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionLedgerDimension</Name>
				<Source><![CDATA[
    abstract protected LedgerDimensionDefaultAccount commissionLedgerDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionOffsetLedgerDimension</Name>
				<Source><![CDATA[
    abstract protected LedgerDimensionDefaultAccount commissionOffsetLedgerDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    abstract public boolean init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommissionCalculated</Name>
				<Source><![CDATA[
    abstract protected CommissCalc isCommissionCalculated()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherTrans</Name>
				<Source><![CDATA[
    protected void ledgerVoucherTrans()
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        TransTxt                    transTxt;
        CurrencyExchangeHelper      exchangeRateHelper;

        transTxt = ledgerVoucher.findLedgerVoucherObject().lastTransTxt();

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setLanguage  (languageId);
        transactionTxt.setType      (LedgerTransTxt::SalesCommission);
        transactionTxt.setVoucher   (ledgerVoucher.lastVoucher());
        transactionTxt.setKey1      (DirPerson::find(commissionTrans.Person).NameAlias);

        exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
        exchangeRateHelper.parmExchangeRate1(exchRate);
        exchangeRateHelper.parmExchangeRate2(exchrateSecondary);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                       ledgerVoucher.findLedgerVoucherObject(),
                                       LedgerPostingType::SalesCommission,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(debitAC, commissionTrans.DefaultDimension),
                                       commissionTrans.CurrencyCode,
                                       commissionTrans.AmountCur,
                                        exchangeRateHelper);
        ledgerVoucherTransObject.parmSourceTableId(commissionTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(commissionTrans.RecId);

        ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                       ledgerVoucher.findLedgerVoucherObject(),
                                       LedgerPostingType::SalesOffsetAccountCommission,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(creditAccount, commissionTrans.DefaultDimension),
                                       commissionTrans.CurrencyCode,
                                      -commissionTrans.AmountCur,
                                        exchangeRateHelper);

        ledgerVoucherTransObject.parmSourceTableId(commissionTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(commissionTrans.RecId);

        ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        // <GEERU>
        ledgerVoucher.bondLast2_RU();
        // </GEERU>

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJour</Name>
				<Source><![CDATA[
    abstract public CustVendInvoiceJour parmInvoiceJour()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTrans</Name>
				<Source><![CDATA[
    abstract public CustVendInvoiceTrans parmInvoiceTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;
        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query query = new Query();
        QueryBuildDataSource commissionTableSource = query.addDataSource(tableNum(CommissionCalc));

        commissionTableSource.addSelectionField(fieldNum(CommissionCalc, CommissionBasis));
        commissionTableSource.addSelectionField(fieldNum(CommissionCalc, DiscLevel));
        commissionTableSource.addSelectionField(fieldNum(CommissionCalc, CommissionBase));
        commissionTableSource.addSelectionField(fieldNum(CommissionCalc, SearchAgain));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrUpdateCommissionTableQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds or updates the query ranges.
    /// </summary>
    /// <param name = "_commissionTableDataSource">A <c>QueryBuildDataSource</c> object.</param>
    protected void addOrUpdateCommissionTableQueryRanges(QueryBuildDataSource _commissionTableDataSource)
    {
        if (this.mustAddItemRelationRange())
        {
            previousCommissionTransItemId = commissionTrans.ItemId;
            SysQuery::findOrCreateRange(_commissionTableDataSource, fieldNum(CommissionCalc, ItemCode)).value(
                strFmt('((%1 == %2) && (%3 == %4)) || ((%1 == %5) && (%3 == %6)) || ((%1 == %7) && (%3 == %8))',
                fieldStr(CommissionCalc, ItemCode),
                int2Str(enum2int(TableGroupAll::Table)),
                fieldStr(CommissionCalc, ItemRelation),
                commissionTrans.ItemId? '"' + queryValue(commissionTrans.ItemId) + '"': SysQuery::valueEmptyString(),
                int2Str(enum2int(TableGroupAll::GroupId)),
                itemGroup? '"' + queryValue(itemGroup) + '"': SysQuery::valueEmptyString(),
                int2Str(enum2int(TableGroupAll::All)),
                SysQuery::valueEmptyString()));
        }
    
        if ((previousOrderAccount != orderAccount)
            ||( previousCustGroup != custGroup))
        {
            previousOrderAccount = orderAccount;
            previousCustGroup = custGroup;
            SysQuery::findOrCreateRange(_commissionTableDataSource, fieldNum(CommissionCalc, CustomerCode)).value(
                strFmt('((%1 == %2) && (%3 == %4)) || ((%1 == %5) && (%3 == %6)) || ((%1 == %7) && (%3 == %8))',
                fieldStr(CommissionCalc, CustomerCode),
                int2Str(enum2int(TableGroupAll::Table)),
                fieldStr(CommissionCalc, CustomerRelation),
                orderAccount? '"' + queryValue(orderAccount) + '"': SysQuery::valueEmptyString(),
                int2Str(enum2int(TableGroupAll::GroupId)),
                custGroup? '"' + queryValue(custGroup) + '"': SysQuery::valueEmptyString(),
                int2Str(enum2int(TableGroupAll::All)),
                SysQuery::valueEmptyString()));
        }
        
        if (previousSalesGroup != salesGroup)
        {
            previousSalesGroup = salesGroup;
            SysQuery::findOrCreateRange(_commissionTableDataSource, fieldNum(CommissionCalc, SalesRepCode)).value(
                strFmt('((%1 == %2) && (%3 == %4))  || ((%1 == %5) && (%3 == %6))',
                fieldStr(CommissionCalc, SalesRepCode),
                int2Str(enum2int(CommissionSalesRepCode::GroupId)),
                fieldStr(CommissionCalc, SalesRepRelation),
                salesGroup? '"' + queryValue(salesGroup) +'"': SysQuery::valueEmptyString(),
                int2Str(enum2int(CommissionSalesRepCode::All)),
                sysQuery::valueEmptyString()));
        }
        
        if (previousTranscommissionTransInvoiceDate != commissionTrans.InvoiceDate)
        {
            previousTranscommissionTransInvoiceDate = commissionTrans.InvoiceDate;
            SysQuery::findOrCreateRange(_commissionTableDataSource, fieldNum(CommissionCalc, FromDate)).value(queryRange(null, commissionTrans.InvoiceDate));
            SysQuery::findOrCreateRange(_commissionTableDataSource, fieldNum(CommissionCalc, ToDate)).value(queryRangeConcat(queryRange(commissionTrans.InvoiceDate, null), SysQuery::valueUnlimited()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddItemRelationRange</Name>
				<Source><![CDATA[
    private boolean mustAddItemRelationRange()
    {
        return previousCommissionTransItemId != commissionTrans.ItemId 
            || !commissionTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        if (!this.mustInsertCommissionTrans())
        {
            return;
        }

        Query query = this.buildQuery();
        QueryBuildDataSource commissionTableSource = query.dataSourceTable(tableNum(CommissionCalc));

        RecordInsertList commissionTransInsertList = new RecordInsertList(tableNum(CommissionTrans));
        
        ttsbegin;

        CommissionSalesRep commissionSalesRep;

        while select commissionSalesRep
            index hint GroupEmplIdx
            where commissionSalesRep.GroupId    == salesGroup
        {
            CommissionCalc  commissionCalc;

            debitAC           = this.commissionLedgerDimension();
            creditAccount     = this.commissionOffsetLedgerDimension();

            commissionTrans.Person      = commissionSalesRep.Person;
            commissionTrans.AmountCur   = 0;

            this.addOrUpdateCommissionTableQueryRanges(commissionTableSource);
            QueryRun queryRun = new QueryRun(query);
            
            while (queryRun.next())
            {
                commissionCalc = queryRun.get(tableNum(CommissionCalc));

                if (commissionCalc)
                {
                    if (!this.includeCommissionRate(commissionCalc))
                    {
                        continue;
                    }

                    this.initializeCommissionTransFromCommissionRate(commissionSalesRep, commissionCalc);

                    if (!commissionCalc.SearchAgain)
                    {
                        break;
                    }
                }
            }

            commissionTrans.AmountMST = CurrencyExchangeHelper::mstAmount(commissionTrans.AmountCur, commissionTrans.CurrencyCode, commissionTrans.InvoiceDate, Currency::noYes2UnknownNoYes(triangulation), exchRate, exchrateSecondary);

            if (commissionTrans.AmountMST)
            {
                // <GEEU>
                if (countryRegion_RU)
                {
                    commissionTrans.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(commissionCalc.AgreementHeaderExt_RU, commissionTrans.DefaultDimension);
                }
                // </GEEU>

                commissionTransInsertList.add(commissionTrans);

                if (ledgerVoucher)
                {
                    this.ledgerVoucherTrans();
                }
            }
            this.addCommissionAmount(commissionTrans.AmountCur);
        }

        commissionTransInsertList.insertDatabase();
        this.updateCommissionCalc();
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertCommissionTrans</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Determines whether the commission transaction records must be inserted.
    /// </summary>
    /// <returns>
    ///		true, if the commission transaction records must be inserted; otherwise, false.
	/// </returns>
    protected boolean mustInsertCommissionTrans()
    {
        if (this.isCommissionCalculated() || ! salesGroup)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCommissionTransFromCommissionRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the commission transaction. 
    /// </summary>
    /// <param name = "_commissionSalesRep">    
    /// A <c>CommissionSalesRep</c> record specifying the sales representative.
    ///</param>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record specifying the commission rate.
    /// </param>
    protected void initializeCommissionTransFromCommissionRate(CommissionSalesRep _commissionSalesRep, CommissionCalc _commissionCalc)
    {
        commissionTrans.AmountCur += this.calculateCommissionRateCommission(_commissionSalesRep, _commissionCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeCommissionRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the commission rate must be included in the calculation.
    /// </summary>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>CommissionCalc</c> record must be included; otherwise, false. 
    /// </returns>
    protected boolean includeCommissionRate(CommissionCalc _commissionCalc)
    {
        // <GEERU>
        if (!this.checkAgreement_RU(_commissionCalc))
        {
            return false;
        }
        // </GEERU>

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateCommission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the commission for a sales representative based on a commission rate.
    /// </summary>
    /// <param name = "_commissionSalesRep">
    /// A <c>CommissionSalesRep</c> record specifying the sales representative.
    /// </param>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record specifying the commission rate.
    /// </param>
    /// <returns>
    /// The calculated commission.
    /// </returns>
    protected AmountCur calculateCommissionRateCommission(
        CommissionSalesRep  _commissionSalesRep,
        CommissionCalc      _commissionCalc)
    {
        AmountCur base = this.calculateCommissionRateBasis(_commissionCalc);

        base = this.adjustCommissionRateBasis(base, _commissionCalc);

        base = this.calculateCommissionRateShare(base, _commissionSalesRep);

        return this.calculateCommissionRatePercentage(base, _commissionCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the basis amount for a commission.
    /// </summary>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record specifying the commission rate.
    /// </param>
    /// <returns>
    /// The calculated commission basis.
    /// </returns>
    protected AmountCur calculateCommissionRateBasis(CommissionCalc _commissionCalc)
    {
        AmountCur base;

        switch (_commissionCalc.CommissionBasis)
        {
            case RevenueContributionMargin::Revenue:
                base = this.calculateCommissionRateRevenue(_commissionCalc);
                break;

            case RevenueContributionMargin::ContributionMargin:
                base = this.calculateCommissionRateContributionMargin(_commissionCalc);
                break;
        }

        return base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the revenue used as basis amount for a commission.
    /// </summary>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record specifying the commission rate.
    /// </param>
    /// <returns>
    /// The calculated revenue;
    /// </returns>
    protected AmountCur calculateCommissionRateRevenue(CommissionCalc _commissionCalc)
    {
        AmountCur revenue;

        switch (_commissionCalc.DiscLevel)
        {
            case DiscLevel::BeforeLineDisc:
                revenue = this.calculateCommissionRateRevenueBeforeLineDiscount();
                break;

            case DiscLevel::AfterLineDisc:
                revenue = this.calculateCommissionRateRevenueAfterLineDiscount();
                break;

            case DiscLevel::AfterEndDisc:
                revenue = this.calculateCommissionRateRevenueAfterAllDiscounts();
                break;
        }

        return revenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateRevenueBeforeLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the commission rate revenue as the amount before line discounts.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    [Replaceable]
    protected AmountCur calculateCommissionRateRevenueBeforeLineDiscount()
    {
        return PriceDisc::calcGrossAmount(salesPrice, priceUnit, qty, qty, markup, commissionTrans.CurrencyCode, lineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateRevenueAfterLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the commission rate revenue as the amount after line discounts.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    [Replaceable]
    protected AmountCur calculateCommissionRateRevenueAfterLineDiscount()
    {
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateRevenueAfterAllDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the commission rate revenue as the amount after line and totals discounts.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    [Replaceable]
    protected AmountCur calculateCommissionRateRevenueAfterAllDiscounts()
    {
        AmountCur amount = this.calculateCommissionRateRevenueAfterLineDiscount();

        if (endDisc)
        {
            amount = CurrencyExchangeHelper::amount(amount * endFactor, commissionTrans.CurrencyCode);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateContributionMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the contribution margin used as basis amount for a commission.
    /// </summary>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record specifying the commission rate.
    /// </param>
    /// <returns>
    /// The calculated contribution margin;
    /// </returns>
    protected AmountCur calculateCommissionRateContributionMargin(CommissionCalc _commissionCalc)
    {
        return this.calculateCommissionRateRevenue(_commissionCalc) - 
               CurrencyExchangeHelper::curAmount(costValue, commissionTrans.CurrencyCode, commissionTrans.InvoiceDate, Currency::noYes2UnknownNoYes(triangulation), exchRate, exchrateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCommissionRateBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the basis amount for a commission.
    /// </summary>
    /// <param name = "_base">
    /// A basis amount to adjust.
    /// </param>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record specifying the commission rate.
    /// </param>
    /// <returns>
    /// The adjusted basis amount.
    /// </returns>
    protected AmountCur adjustCommissionRateBasis(AmountCur _base, CommissionCalc _commissionCalc)
    {
        AmountCur adjustedBase;

        if (qty < 0)
        {
            adjustedBase = min(_base, 0); // allow negative commission if credit note, returned item
        }
        else
        {
            adjustedBase = max(_base, 0); // do not allow negative commission transactions caused by discount
        }

        return adjustedBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRateShare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the share of a commission basis amount for a sales representative.
    /// </summary>
    /// <param name = "_base">
    /// A commission basis amount.
    /// </param>
    /// <param name = "_commissionSalesRep">
    /// A <c>CommissionSalesRep</c> record specifying the sales representative.
    /// </param>
    /// <returns>
    /// The calculated share of the commission basis amount.
    /// </returns>
    protected AmountCur calculateCommissionRateShare(AmountCur _base, CommissionSalesRep _commissionSalesRep)
    {
        return CurrencyExchangeHelper::amount(_base * _commissionSalesRep.Proportion / 100, commissionTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCommissionRatePercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the percentage of the commission share.
    /// </summary>
    /// <param name = "_share">
    /// A commission share.
    /// </param>
    /// <param name = "_commissionCalc">
    /// A <c>CommissionCalc</c> record specifying the commission rate.
    /// </param>
    /// <returns>
    /// The calculated percentage of the share.
    /// </returns>
    protected AmountCur calculateCommissionRatePercentage(AmountCur _share, CommissionCalc _commissionCalc)
    {
        return CurrencyExchangeHelper::amount(_share * _commissionCalc.CommissionBase / 100, commissionTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommissionCalc</Name>
				<Source><![CDATA[
    abstract protected void updateCommissionCalc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCommission</Name>
				<Source><![CDATA[
    static Commission   newCommission(LedgerVoucher        _ledgerVoucher,
                                      CustVendInvoiceJour  _custVendInvoiceJour,
                                      CustVendInvoiceTrans _custVendInvoiceTrans)
    {
        switch (_custVendInvoiceJour.TableId)
        {
            case  tablenum(CustInvoiceJour) :
                return Commission_Sales::newCommission(_ledgerVoucher, _custVendInvoiceJour, _custVendInvoiceTrans);
            case  tablenum(ProjProposalJour):
                return Commission_Project::newCommision(_ledgerVoucher, _custVendInvoiceJour, _custVendInvoiceTrans);
        }
        throw error("@SYS18626");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>