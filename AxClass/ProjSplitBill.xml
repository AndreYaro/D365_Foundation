<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSplitBill</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjSplitBill</c> class finds funding rules and limits that best apply to a given
///    transaction.
/// </summary>
public class ProjSplitBill
{
    ProjTrans   projTrans;
    QueryRun    limits;
    QueryRun    rules;

    ProjFundingRuleAllocation   projFundingRuleAllocation;
    ProjFundingRule             projFundingRule;

    boolean                     ignoreLimits;
    boolean                     singleFundingSourceRequired;
    boolean                     negativeSplit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildRuleQR</Name>
				<Source><![CDATA[
    public QueryRun buildRuleQR()
    {
        Query q = new Query();
        QueryBuildDataSource  rulesDS;
        QueryBuildDataSource  splitDS;

        splitDS = q.addDataSource(tableNum(ProjFundingRuleAllocation));
        rulesDS = splitDS.addDataSource(tableNum(ProjFundingRule));
        rulesDS.addLink(fieldNum(ProjFundingRuleAllocation, FundingRule), fieldNum(ProjFundingRule, RecId));

        //filter on contract - mandatory
        rulesDS.addRange(fieldNum(ProjFundingRule, ContractId)).value(queryValue(this.getProjInvoiceProjId()));

        //filter on dates - mandatory
        rulesDS.addRange(fieldNum(ProjFundingRule, StartDate)).value(SysQuery::range(dateNull(), projTrans.transDate()));
        rulesDS.addRange(fieldNum(ProjFundingRule, EndDate)).value(SysQuery::range(projTrans.transDate(), dateNull()));
        rulesDS.addRange(fieldNum(ProjFundingRule, EndDate)).value(SysQuery::value(dateNull()));

        //filter on transaction values/limit conditions - match or blank

        rulesDS.addRange(fieldNum(ProjFundingRule, ValidFor)).value(queryValue(ProjAllTrxType::All));
        rulesDS.addRange(fieldNum(ProjFundingRule, ValidFor)).value(queryValue(this.transType()));

        rulesDS.addRange(fieldNum(ProjFundingRule, ActivityNumber)).value(queryValue(""));
        rulesDS.addRange(fieldNum(ProjFundingRule, ActivityNumber)).value(queryValue(projTrans.activityNumber()));

        rulesDS.addRange(fieldNum(ProjFundingRule, ProjId)).value(queryValue(""));
        rulesDS.addRange(fieldNum(ProjFundingRule, ProjId)).value(queryValue(projTrans.projId()));

        rulesDS.addRange(fieldNum(ProjFundingRule, CategoryGroupId)).value(queryValue(""));
        rulesDS.addRange(fieldNum(ProjFundingRule, CategoryGroupId)).value(queryValue(ProjCategory::find(projTrans.categoryId()).CategoryGroupId));

        rulesDS.addRange(fieldNum(ProjFundingRule, CategoryId)).value(queryValue(""));
        rulesDS.addRange(fieldNum(ProjFundingRule, CategoryId)).value(queryValue(projTrans.categoryId()));

        rulesDS.addRange(fieldNum(ProjFundingRule, Resource)).value(queryValue(0));
        rulesDS.addRange(fieldNum(ProjFundingRule, Resource)).value(queryValue(projTrans.resource()));

        rulesDS.addRange(fieldNum(ProjFundingRule, ItemId)).value(queryValue(""));
        rulesDS.addRange(fieldNum(ProjFundingRule, ItemId)).value(queryValue(projTrans.itemId()));

        rulesDS.addSortField(fieldNum(ProjFundingRule, PriorityKey), SortOrder::Descending);

        rules = new QueryRun(q);

        return rules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjInvoiceProjId</c> value.
    /// </summary>
    protected ProjInvoiceProjId getProjInvoiceProjId()
    {
        return ProjTable::find(projTrans.projId()).ProjInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransLimits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query to select all of the limits applicable to the specified transaction.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c> object with all of the limits applicable to the specified transaction.
    /// </returns>
    public QueryRun getTransLimits()
    {
        Query q = new Query();
        QueryBuildDataSource  fundLimitDS;

        fundLimitDS = q.addDataSource(tableNum(ProjFundingLimit));

        //filter on contract - mandatory
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ContractId)).value(queryValue(ProjTable::find(projTrans.projId()).ProjInvoiceProjId));

        //filter on transaction values/limit conditions - match or blank

        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ValidFor)).value(queryValue(ProjAllTrxType::All));
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ValidFor)).value(queryValue(this.transType()));

        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ActivityNumber)).value(queryValue(""));
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ActivityNumber)).value(queryValue(projTrans.activityNumber()));

        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ProjId)).value(queryValue(""));
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ProjId)).value(queryValue(projTrans.projId()));

        fundLimitDS.addRange(fieldNum(ProjFundingLimit, CategoryGroupId)).value(queryValue(""));
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, CategoryGroupId)).value(queryValue(ProjCategory::find(projTrans.categoryId()).CategoryGroupId));

        fundLimitDS.addRange(fieldNum(ProjFundingLimit, CategoryId)).value(queryValue(""));
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, CategoryId)).value(queryValue(projTrans.categoryId()));

        fundLimitDS.addRange(fieldNum(ProjFundingLimit, Resource)).value(queryValue(0));
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, Resource)).value(queryValue(projTrans.resource()));

        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ItemId)).value(queryValue(""));
        fundLimitDS.addRange(fieldNum(ProjFundingLimit, ItemId)).value(queryValue(projTrans.itemId()));

        limits = new QueryRun(q);

        return limits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxAllowedByLimits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the maximum amount which is allowed based on the funding limits.
    /// </summary>
    /// <param name = "_amountWanted">The transaction amount to be allocated.</param>
    /// <returns>
    /// Returns an AmountCur instance of the maximum amount which is allowed based on the funding limits.
    /// </returns>
    protected AmountCur maxAllowedByLimits(AmountCur  _amountWanted)
    {
        AmountCur           result = _amountWanted;
        AmountCur           limitRemaining;
        ProjFundingLimit    projFundingLimit;
        boolean             fundingAllocationDiscovered = false;

        // This constant is used to measure the remaining tracking amount if it should be zero. If the remaining tracking
        // amount is equal or less then this constant, then it will consider this funding limit max allow value as zero.
        const real fundingLimitTrackingRoundingPrecision = 0.001;

        if (ignoreLimits || !projTrans.invoiceable())
        {
            return result;
        }

        if (negativeSplit)
        {
            result = 0;
        }

        limits.reset();

        while (limits.next())
        {
            projFundingLimit = limits.get(tableNum(ProjFundingLimit));
            if (projFundingLimit.FundingSource == 0 || projFundingLimit.FundingSource == projFundingRuleAllocation.FundingSource)
            {
                fundingAllocationDiscovered = true;
                if (negativeSplit)
                {
                    limitRemaining = projFundingLimit.LimitSpent + ProjFundingLimitTrackingManager::getTrackedAmount(projFundingLimit.RecId, ProjSDLineTrackingType::Credit);
                    result = max(result, limitRemaining);
                }
                else
                {
                    limitRemaining = projFundingLimit.AmountMst - (projFundingLimit.LimitSpent + ProjFundingLimitTrackingManager::getTrackedAmount(projFundingLimit.RecId, ProjSDLineTrackingType::Standard ));
                    if (limitRemaining <= fundingLimitTrackingRoundingPrecision)
                    {
                        limitRemaining = 0;
                    }

                    result = min(result, limitRemaining);
                }
            }
        }

        if (negativeSplit && !fundingAllocationDiscovered)
        {
            result = _amountWanted;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreLimits</Name>
				<Source><![CDATA[
    public boolean parmIgnoreLimits(boolean _ignoreLimits = ignoreLimits)
    {
        ignoreLimits = _ignoreLimits;

        return ignoreLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNegativeSplit</Name>
				<Source><![CDATA[
    public boolean parmNegativeSplit(boolean _negativeSplit = negativeSplit)
    {
        negativeSplit = _negativeSplit;

        return negativeSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTrans</Name>
				<Source><![CDATA[
    public ProjTrans parmProjTrans(ProjTrans _projTrans = projTrans)
    {
        projTrans = _projTrans;

        return projTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSingleFundingSourceRequired</Name>
				<Source><![CDATA[
    public boolean parmSingleFundingSourceRequired(boolean _singleFundingSourceRequired = singleFundingSourceRequired)
    {
        singleFundingSourceRequired = _singleFundingSourceRequired;

        return singleFundingSourceRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches rules and limits to find a way to split the transaction.
    /// </summary>
    /// <param name="_amountToAllocate">
    ///    The amount to allocate for a specific transaction.
    /// </param>
    /// <returns>
    ///    A list of instances of the <c>ProjSplitAllocation</c> class that specify the recommended allocation.
    /// </returns>
    /// <remarks>
    ///    In case only part of the amount can be allocated to the best matching rule, the returned list
    ///    contains only allocations for the best matching rule. In this case, the method will have to be
    ///    called again for the remaining unallocated amount once limits are updated with the first allocation.
    /// </remarks>
    public List split(AmountCur _amountToAllocate)
    {
        List                result = new List(Types::Class);
        RefRecId            lastRuleRecId;
        boolean             curRuleFailed = true;
        ProjSplitAllocation allocation;
        AmountCur           limitAmount;

        //
        // Validate setting of ignoreLimits
        // If there are no limits on the contract, the "ignorelimits" variable should be true.
        //
        if (!ProjInvoiceTable::hasFundingLimits(this.getProjInvoiceProjId()))
        {
            ignoreLimits = true;
        }

        rules = this.buildRuleQR();

        while (rules.next())
        {
            projFundingRuleAllocation   = rules.get(tableNum(ProjFundingRuleAllocation));
            projFundingRule             = rules.get(tableNum(ProjFundingRule));

            if (projFundingRule.RecId != lastRuleRecId)
            {
                if (curRuleFailed) //the last rule was no good, reset return buffer and consider current rule
                {
                    result = new List(Types::Class);
                    curRuleFailed = false;
                    lastRuleRecId = projFundingRule.RecId;
                }
                else //we've found an applicable rule and considered all its splits
                {
                    return result;
                }
            }

            // Test for single funding source requirment
            if (singleFundingSourceRequired)
            {
                if (ProjFundingRule::numberOfFundingSources(projFundingRule.RecId) != 1)
                {
                   curRuleFailed = true;
                }
            }

            // Test date constraint on rules
            if (!curRuleFailed)
            {
                if ((projTrans.transDate() < projFundingRule.StartDate) || (projTrans.transDate() > (projFundingRule.EndDate == dateNull() ? dateMax() : projFundingRule.EndDate)))
                {
                    curRuleFailed = true;
                }
            }

            if (!curRuleFailed)
            {
                // Trap special case of where amount to split is zero (return first valid rule)
                if (_amountToAllocate != 0.00)
                {
                    limitAmount = this.maxAllowedByLimits(_amountToAllocate);

                    if (limitAmount <= 0)
                    {
                        curRuleFailed = true;
                    }

                    if (singleFundingSourceRequired && (limitAmount < _amountToAllocate))
                    {
                          curRuleFailed = true;
                    }
                }
            }

            if (!curRuleFailed)
            {
                allocation = ProjSplitAllocation::construct(projFundingRuleAllocation.FundingSource, projFundingRuleAllocation.AllocationPercentage, limitAmount, projFundingRuleAllocation.AllocateRounding);
                result.addEnd(allocation);
            }
        }

        if (curRuleFailed) //clear the result before returning if last rule failed
        {
            result = new List(Types::Class);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Delegate for getting the transaction type.
    /// </summary>
    /// <param name = "_projTrans">
    ///     A <c>ProjTrans</c> object.
    /// </param>
    /// <param name = "_eventHandlerResult">
    ///     An <c>EventHandlerResult</c> instance, where subscribers can provide default transaction type.
    /// </param>
    static delegate void transTypeDelegate(ProjTrans _projTrans, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the transaction type.
    /// </summary>
    /// <returns>
    ///     The transaction type.
    /// </returns>
    protected ProjAllTrxType transType()
    {
        ProjAllTrxType  result;

        switch (projTrans.transType())
        {
            case ProjTransType::Cost:
                result = ProjAllTrxType::Expenses;
                break;

            case ProjTransType::Hour:
                result = ProjAllTrxType::Hours;
                break;

            case ProjTransType::Item:
                result = ProjAllTrxType::Items;
                break;

            case ProjTransType::Revenue:
                result = ProjAllTrxType::Fees;
                break;

            case ProjTransType::OnAccount:
                result = ProjAllTrxType::Revenues;
                break;

            default :
                EventHandlerResult eventHandlerResult = new EventHandlerResult();
                ProjSplitBill::transTypeDelegate(projTrans, eventHandlerResult);
                if(eventHandlerResult.hasResult())
                {
                    result = eventHandlerResult.result();
                }
                else
                {
                    error("@SYS134604");
                }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ProjSplitBill</c> class.
    /// </summary>
    /// <param name="projTrans">
    ///    An instance of <c>ProjTrans</c> class that represents the transaction to split.
    /// </param>
    /// <param name="_singleFundingSourceRequired">
    ///    Is a single funding source required for processing this transaction.
    /// </param>
    /// <param name="negativeSplit">
    ///    For negative transaction.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ProjSplitBill</c> class.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="parmIgnoreLimits" /> parameter is set to false during initialization.
    /// </remarks>
    public static ProjSplitBill construct(
        ProjTrans   projTrans,
        boolean     _singleFundingSourceRequired = false,
        boolean     negativeSplit = false)
    {
        ProjSplitBill   projSplitBill = new ProjSplitBill();

        projSplitBill.parmProjTrans(projTrans);
        projSplitBill.getTransLimits();
        projSplitBill.parmIgnoreLimits(false);
        projSplitBill.parmSingleFundingSourceRequired(_singleFundingSourceRequired);
        projSplitBill.parmNegativeSplit(negativeSplit);

        return projSplitBill;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>