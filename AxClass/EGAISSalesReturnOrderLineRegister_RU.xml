<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISSalesReturnOrderLineRegister_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISSalesReturnOrderLineRegister_RU</c> class is used to register return order lines
///    in case of return order is created for the outgoing EGAIS waybill.
/// </summary>
public class EGAISSalesReturnOrderLineRegister_RU extends SalesReturnOrderLineRegister
{
    EGAISWaybillLine_RU waybillLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmReturnDispositionCodeId</Name>
				<Source><![CDATA[
    public ReturnDispositionCodeId parmReturnDispositionCodeId(ReturnDispositionCodeId _returnDispositionCodeId = returnDispositionCodeId)
    {
        returnDispositionCodeId = _returnDispositionCodeId;

        return returnDispositionCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaybillLine</Name>
				<Source><![CDATA[
    public EGAISWaybillLine_RU parmWaybillLine(EGAISWaybillLine_RU _waybillLine = waybillLine)
    {
        waybillLine = _waybillLine;

        return waybillLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSalesLines</Name>
				<Source><![CDATA[
    private void registerSalesLines() 
    {
        InventTransOrigin           inventTransOrigin;
        InventTrans                 inventTrans;
        InventTransWMS_Register     inventTransWMS_Register;
        tmpInventTransWMS           tmpInventTransWMS;
        EGAISWaybillSettlement_RU   settlement;

        select firstOnly InventDimId from settlement
            where settlement.WaybillLine == waybillLine.RecId;

        select firstOnly inventTrans
            where inventTrans.StatusReceipt == StatusReceipt::Ordered
        exists join inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
               && inventTransOrigin.InventTransId == salesLine.InventTransId;

        delete_from tmpInventTransWMS;

        inventTrans.inventDimId = settlement.inventDimId;
        inventTrans.Qty = waybillLine.Qty - waybillLine.RealQty;

        inventTransWMS_Register = InventTransWMS_Register::newStandard(tmpInventTransWMS);
        inventTransWMS_Register.createFromInventTrans(inventTrans, inventTrans.inventDim());
        inventTransWMS_Register.updateInvent(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runPreSuper();
        this.registerSalesLines();
        this.runPostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EGAISSalesReturnOrderLineRegister_RU construct()
    {
        return new EGAISSalesReturnOrderLineRegister_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>