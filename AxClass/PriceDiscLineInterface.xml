<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscLineInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>PriceDiscLine</c> table map.
/// </summary>
public abstract class PriceDiscLineInterface
{
    private PriceDiscLine priceDiscLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePriceDiscLine</Name>
				<Source><![CDATA[
    private void initializePriceDiscLine(PriceDiscLine _priceDiscLine)
    {
        priceDiscLine = _priceDiscLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PriceDiscLine parmPriceDiscLine()
    {
        return priceDiscLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PriceDiscLineInterface</c> object based on the provided <c>PriceDiscLine</c> record.
    /// </summary>
    /// <param name = "_priceDiscLine">
    /// A <c>PriceDiscLine</c> record to create a <c>PriceDiscLineInterface</c> object for.
    /// </param>
    /// <returns>
    /// The instantiated <c>PriceDiscLineInterface</c> object.
    /// </returns>
    [Hookable(false)]
    public static PriceDiscLineInterface createInstance(PriceDiscLine _priceDiscLine)
    {
        PriceDiscLineInterfaceFactoryAttribute attr = new PriceDiscLineInterfaceFactoryAttribute(tableId2Name(_priceDiscLine.tableId));
        
        PriceDiscLineInterface instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PriceDiscLineInterface), attr) as PriceDiscLineInterface;

        if (!instance)
        {
            instance = new PriceDiscLineDefault();
        }

        instance.initializePriceDiscLine(_priceDiscLine);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPromptFixedLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether the net amount should be recalculated.
    /// </summary>
    /// <returns>true if the net amount should be recalculated; otherwise, false.</returns>
    [Hookable(false)]
    public final boolean checkAndPromptFixedLineAmount()
    {
        if (priceDiscLine.hasOnlyLineAmount())
        {
            return PriceDiscLine::promptChangeFixedLineAmount();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line amount is the only set pricing field.
    /// </summary>
    /// <returns>true if the line amount is the only set pricing field; otherwise, false.</returns>
    public boolean hasOnlyLineAmount()
    {
        return !(priceDiscLine.Price             ||
                 priceDiscLine.LineDisc          ||
                 priceDiscLine.LinePercent       ||
                 priceDiscLine.MultiLnDisc       ||
                 priceDiscLine.MultiLnPercent    ||
                 priceDiscLine.Markup)           &&
                 priceDiscLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record related to the <c>PriceDiscLine</c> record.
    /// </summary>
    /// <returns>The <c>InventDim</c> record related to the <c>PriceDiscLine</c> record.</returns>
    [Hookable(false)]
    public final InventDim inventDim()
    {
        return InventDim::find(priceDiscLine.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets all the pricing field when the line amount is set.
    /// </summary>
    public void lineAmountModified()
    {
        priceDiscLine.Price          = 0;
        priceDiscLine.LineDisc       = 0;
        priceDiscLine.LinePercent    = 0;
        priceDiscLine.MultiLnDisc    = 0;
        priceDiscLine.MultiLnPercent = 0;
        priceDiscLine.Markup         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public AccountNum parmAccountNum()
    {
        return priceDiscLine.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrency</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public CurrencyCode parmCurrency()
    {
        return priceDiscLine.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncluded</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public NoYesId parmIncluded()
    {
        return priceDiscLine.Included;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventDimId parmInventDimId()
    {
        return priceDiscLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public ItemId parmItemId()
    {
        return priceDiscLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public AmountCur parmLineAmount()
    {
        return priceDiscLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDeliveryType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public LineDeliveryType parmLineDeliveryType()
    {
        return priceDiscLine.LineDeliveryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public DiscAmount parmLineDisc()
    {
        return priceDiscLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public LineNum parmLineNum()
    {
        return priceDiscLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePercent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public DiscPct parmLinePercent()
    {
        return priceDiscLine.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public PriceMarkup parmMarkup()
    {
        return priceDiscLine.Markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnDisc</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public DiscAmount parmMultiLnDisc()
    {
        return priceDiscLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnPercent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public DiscPct parmMultiLnPercent()
    {
        return priceDiscLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public PriceCur parmPrice()
    {
        return priceDiscLine.Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public PriceUnit parmPriceUnit()
    {
        return priceDiscLine.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public Qty parmQty()
    {
        return priceDiscLine.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public SalesId parmSalesPurchId()
    {
        return priceDiscLine.SalesPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmUnit()
    {
        return priceDiscLine.Unit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>