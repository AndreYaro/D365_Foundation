<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjAndContractInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PSAProjAndContractInvoiceController</c> class is the controller class for the
/// <c>PSAProjInvoice</c> and <c>PSAContractLineInvoice</c> reports.
/// </summary>
public class PsaProjAndContractInvoiceController extends GiroPrintMgmtFormLetterController implements
    BatchRetryable,
    ERIDocumentAttachmentController
{
    ProjFormLetter        projFormLetter;
    PrintCopyOriginal     printCopyOriginal;
    PrintMgmtDocumentType documentType;
    RecordSortedList      journalList;
    ProjInvoiceJour       invoiceJournal;
    // <GBR>
    FiscalDocument_BR   fiscalDocument;
    // </GBR>

    PSAProjPrintInvoice         psaProjPrintInvoice;
    SRSPrintDestinationSettings printSettings;
    // <GTH>
    boolean                     hasRealizedTax;
    // </GTH>
    // <GTE><GIN>
    boolean isGSTInvoice;
    GSTInvoiceContract_IN gstInvoiceContract;
    SRSCatalogItemName preReportName;
    #ISOCountryRegionCodes
    // </GTE></GIN>

    ERDocumentAttachmentContract erDocumentAttachmentContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmERDocumentAttachmentContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ERDocumentAttachmentContract parmERDocumentAttachmentContract(ERDocumentAttachmentContract _erDocumentAttachmentContract = erDocumentAttachmentContract)
    {
        erDocumentAttachmentContract = _erDocumentAttachmentContract;
        return erDocumentAttachmentContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes

        super();
        str featureReference = GlobalizationInstrumentationHelper::getFeatureRefByLegalEntityCountryRegion([ [#isoTH, GlobalizationConstants::FeatureReferenceTH00004] ]);
        if (featureReference)
        {
            GlobalizationInstrumentationHelper::featureRun(featureReference, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiroType</Name>
				<Source><![CDATA[
    public PaymentStub getGiroType()
    {
        return invoiceJournal.GiroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the title of the report.
    /// </summary>
    /// <param name = "_menuItemName">
    ///     Name of the menu item from where it is called.
    /// </param>
    /// <param name = "_isProforma">
    ///     Boolean flag for pro forma invoice.
    /// </param>
    /// <param name = "_printCopyOriginal">
    ///     Type of print; optional.
    /// </param>
    /// <returns>
    ///     Title of the report.
    /// </returns>
    protected ReportTitle getReportTitle(
        MenuItemName _menuItemName,
        boolean _isProforma,
        PrintCopyOriginal _printCopyOriginal = PrintCopyOriginal::OriginalPrint)
    {
        LabelId reportTitle;

        boolean isCopy = _menuItemName == menuitemOutputStr(ProjInvoiceCopy) ||
                         _menuItemName == menuitemOutputStr(PSAProjInvoiceCopy) ||
                         _printCopyOriginal == PrintCopyOriginal::Copy;

        // <GTH>
        TaxUnrealizedSalesNoteFormat    noteFormat;
        boolean                         isPrintDuringPostInvoice = (!_isProforma && (_menuItemName == menuItemOutputStr(PSAProjInvoice) || _menuItemName == menuItemOutputStr(PSAContractLineInvoice)));
        boolean                         isPrintAfterPosting = (_menuItemName == menuItemOutputStr(ProjInvoiceOriginalPrint));
        boolean                         isViewSubstitutionOrAdjustmentAfterPosting = (_menuItemName == menuItemOutputStr(ProjInvoiceAdjustment_TH) || menuItemOutputStr(ProjInvoiceSubstitution_TH));
        boolean                         isViewCopyAfterPosting = (_menuItemName == menuItemOutputStr(PSAProjInvoiceCopy));
        boolean                         isViewOriginalAfterPosting = (_menuItemName == menuItemOutputStr(PSAProjInvoiceOriginal));
        // </GTH>

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH()
            && (documentType == PrintMgmtDocumentType::SIProjInvoice 
            || documentType == PrintMgmtDocumentType::SIProjInvoiceWithBR))
        {
            noteFormat = invoiceJournal.projInvoiceJourExtension_TH().NoteFormat;

            if (noteFormat == TaxUnrealizedSalesNoteFormat::None)
            {
                if (hasRealizedTax)
                {
                    if (_isProforma)
                    {
                        // @SYS121362: Pro forma tax invoice
                        reportTitle = literalStr("@SYS121362");
                    }
                    else if (isPrintDuringPostInvoice
                        || isPrintAfterPosting
                        || isViewSubstitutionOrAdjustmentAfterPosting
                        || (isViewCopyAfterPosting && !isViewSubstitutionOrAdjustmentAfterPosting)
                        || isViewOriginalAfterPosting)
                    {
                        // @SYS115505: Tax invoice
                        reportTitle = literalStr("@SYS115505");
                    }
                }
                else
                {
                    if (_isProforma)
                    {
                        // @SYS4701: Pro forma invoice
                        reportTitle = literalStr("@SYS4701");
                    }
                    else if (isPrintDuringPostInvoice
                        || isPrintAfterPosting
                        || isViewSubstitutionOrAdjustmentAfterPosting
                        || (isViewCopyAfterPosting && !isViewSubstitutionOrAdjustmentAfterPosting)
                        || isViewOriginalAfterPosting)
                    {
                        // @SYS12128: Invoice
                        reportTitle = literalStr("@SYS12128");
                    }
                }
            }
            else
            {
                if (noteFormat       == TaxUnrealizedSalesNoteFormat::DebitNoteValue
                    || noteFormat   == TaxUnrealizedSalesNoteFormat::DebitNoteQuantity)
                {
                    if (_isProforma
                        ||isViewOriginalAfterPosting)
                    {
                        // @Tax:ReportTitle_DebitNoteOriginal: Debit note original
                        reportTitle = literalStr("@Tax:ReportTitle_DebitNoteOriginal");
                    }
                    else if (isPrintDuringPostInvoice
                        || isPrintAfterPosting
                        || isViewSubstitutionOrAdjustmentAfterPosting)
                    {
                        // @SYP4860805: Debit note
                        reportTitle = literalStr("@SYP4860805");
                    }
                    else if (isViewCopyAfterPosting)
                    {
                        // @SYP4860807: Debit note copy
                        reportTitle = literalStr("@SYP4860807");
                    }
                }
                else
                {
                    // @SYS8125: Credit note
                    reportTitle = literalStr("@SYS8125");
                }
            }
        }
        else
        {
            boolean isContryRegionAE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]);
            // </GTH>
            if (!this.isCreditNote())
            {
                if (_isProforma)
                {
                    // <GMY>
                    if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
                        && invoiceJournal.InvoiceType_MY == InvoiceType_MY::GST
                        && (documentType    == PrintMgmtDocumentType::SIProjInvoice
                            || documentType == PrintMgmtDocumentType::SIProjInvoiceWithBR))
                    {
                        if (invoiceJournal.NoteType_MY == NoteType_MY::DebitNote)
                        {
                            reportTitle = literalStr("@SYP4860811");
                        }
                        else
                        {
                            reportTitle = literalStr("@SYS121362");
                        }
                    }
                    else if (this.isUsingGSTInvoice_INReport())
                    {
                        // Pro forma tax invoice
                        reportTitle = literalStr("@SYS121362");
                    }
                    else
                    {
                        // </GMY>
                        // Pro forma invoice
                        reportTitle = literalStr("@SYS4701");
                        // <GMY>
                    }
                    // </GMY>
                }
                else if (isCopy)
                {
                    // <GBR>
                    if (BrazilParameters::isEnabled() && invoiceJournal.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
                    {
                        reportTitle = literalStr("@GLS510103");
                        this.parmDialogCaption("@GLS510103");
                    }
                    // <GMY>
                    else if (TaxGSTFeatureChecker_MY::isCountryRegionMY() && invoiceJournal.InvoiceType_MY == InvoiceType_MY::GST)
                    {
                        if (invoiceJournal.NoteType_MY == NoteType_MY::DebitNote)
                        {
                            reportTitle = literalStr("@SYP4860807");
                        }
                        else
                        {
                            reportTitle = literalStr("@SYS121364");
                        }
                    }
                    // </GMY>
                    else if (isContryRegionAE)
                    {
                        reportTitle = literalStr("@UAE_VAT:UAE_VAT_CopyTaxInvoice");
                    }
                    else if (this.isUsingGSTInvoice_INReport())
                    {
                        // Tax invoice copy
                        reportTitle = literalStr("@SYS121364");
                    }
                    else
                    {
                        // </GBR>
                        // Invoice copy
                        reportTitle = literalStr("@SYS24428");
                        // <GBR>
                    }
                    // </GBR>
                }
                else if (_menuItemName == menuitemOutputStr(ProjInvoice) || _menuItemName == menuitemOutputStr(PSAProjInvoice))
                {
                    // <GMY>
                    if (TaxGSTFeatureChecker_MY::isCountryRegionMY() && invoiceJournal.InvoiceType_MY == InvoiceType_MY::GST)
                    {
                        if (invoiceJournal.NoteType_MY == NoteType_MY::DebitNote)
                        {
                            reportTitle = literalStr("@SYP4860805");
                        }
                        else
                        {
                            reportTitle = literalStr("@SYS115505");
                        }
                    }
                    else if (isContryRegionAE && _menuItemName == menuitemOutputStr(PSAProjInvoice))
                    {
                        reportTitle = literalStr("@SYS115505");
                    }                    
                    else if (this.isUsingGSTInvoice_INReport())
                    {
                        // Tax invoice
                        reportTitle = literalStr("@TaxGST:TaxInvoice");
                    }
                    else
                    {
                        // </GMY>
                        // Invoice
                        reportTitle = literalStr("@SYS12128");
                        // <GMY>
                    }
                    // </GMY>
                }
                else
                {
                    // <GBR>
                    if (BrazilParameters::isEnabled() && invoiceJournal.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
                    {
                        reportTitle = literalStr("@GLS510025");
                        this.parmDialogCaption("@GLS510104");
                    }
                    // <GMY>
                    else if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
                        && invoiceJournal.InvoiceType_MY == InvoiceType_MY::GST
                        && (documentType == PrintMgmtDocumentType::SIProjInvoice
                            || documentType == PrintMgmtDocumentType::SIProjInvoiceWithBR))
                    {
                        if (invoiceJournal.NoteType_MY == NoteType_MY::DebitNote)
                        {
                            reportTitle = literalStr("@SYP4860805");
                        }
                        else
                        {
                            reportTitle = literalStr("@SYS115505");
                        }
                    }
                    // </GMY>
                    else if (isContryRegionAE)
                    {
                        reportTitle = literalStr("@SYS115505");
                    }
                    else if (this.isUsingGSTInvoice_INReport())
                    {
                        // Tax invoice
                        reportTitle = literalStr("@TaxGST:TaxInvoice");
                    }
                    else
                    {
                        // </GBR>
                        reportTitle = literalStr("@SYS12128");
                        // <GBR>
                    }
                    // </GBR>
                }
            }
            else
            {
                if (_isProforma)
                {
                    reportTitle = literalStr("@SYS99735");
                }
                else if (isCopy)
                {
                    // <GBR>
                    if (BrazilParameters::isEnabled() && invoiceJournal.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
                    {
                        reportTitle = literalStr("@GLS510103");
                        this.parmDialogCaption("@GLS510103");
                    }
                    else  if (isContryRegionAE)
                    {
                        reportTitle = literalStr("@UAE_VAT:UAE_VAT_CopyTaxCreditNote");
                    }
                    else
                    {
                        // </GBR>
                        reportTitle = literalStr("@SYS24607");
                        // <GBR>
                    }
                    // </GBR>
                }
                else if (isContryRegionAE && _menuItemName == menuitemOutputStr(PSAProjInvoice))
                {
                    reportTitle = literalStr("@UAE_VAT:UAE_VAT_TaxCreditNote");
                }
                else if (_menuItemName == menuitemOutputStr(ProjInvoice) || _menuItemName == menuitemOutputStr(PSAProjInvoice))
                {
                    reportTitle = literalStr("@SYS8125");
                }
                else
                {
                    // <GBR>
                    if (BrazilParameters::isEnabled() && invoiceJournal.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
                    {
                        reportTitle = literalStr("@GLS510025");
                        this.parmDialogCaption("@GLS510104");
                    }
                    else if (isContryRegionAE)
                    {
                        reportTitle = literalStr("@UAE_VAT:UAE_VAT_TaxCreditNote");
                    }
                    else
                    {
                        // </GBR>
                        reportTitle = literalStr("@SYS8125");
                        // <GBR>
                    }
                    // </GBR>
                }
            }
            // <GTH>
        }
        // </GTH>

        this.parmReportContract().parmRdlContract().parmLabelLanguageId(invoiceJournal.LanguageId);
        this.parmReportContract().parmRdlContract().parmLanguageId(invoiceJournal.LanguageId);
        // <GEELT>
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            if (strLRTrim(CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, invoiceJournal.InvoiceDate)))
            {
                // Add "VAT" to the beginning of the invoice text.
                return SysLabel::labelId2String(literalStr("@GLS107406"),invoicejournal.LanguageId) + ' ' +
                        SysLabel::labelId2String(reportTitle,invoiceJournal.LanguageId);
            }
        }
        // </GEELT>

        return SysLabel::labelId2String(reportTitle, invoiceJournal.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    protected boolean isCreditNote()
    {
        boolean isCredit = false;

        if (ProjCreditNoteReportTitleFixFlight_PL::instance().isEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ProjProposalTotals projProposalTotals;
            projProposalTotals = new ProjProposalTotals(ProjProposalJour::find(invoiceJournal.ProposalId), invoiceJournal.ParmId);
            projProposalTotals.calc();

            isCredit = projProposalTotals.isCreditNote();
        }
        else
        {
            isCredit = invoiceJournal.InvoiceAmount < 0;
        }

        return isCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsingGSTInvoice_INReport</Name>
				<Source><![CDATA[
    private boolean isUsingGSTInvoice_INReport()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && this.parmIsGSTInvoice_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the class.
    /// </summary>
    /// <param name="_args">
    /// Arguments to be used for initializing the class.
    /// </param>
    protected void initArgs(Args _args)
    {
        if (_args.caller() &&
            _args.caller() is ProjFormLetter)
        {
            projFormLetter = _args.caller();
        }

        if (_args.caller() && _args.caller() is PSAProjPrintInvoice)
        {
            psaProjPrintInvoice = _args.caller();
            printSettings = new SRSPrintDestinationSettings();
            printSettings.unpack(psaProjPrintInvoice.printerSettingsPrintInvoice());
        }

        if (_args.object() &&
            _args.object() is RecordSortedList)
        {
            journalList = _args.object();
        }
        else if (_args.record())
        {
            journalList = new RecordSortedList(tableNum(ProjInvoiceJour));
            // Get journal list from the selected single record or multiple records
            journalList = FormLetter::createJournalListCopy(_args.record());
        }
        else
        {
            throw error(Error::missingRecord(tableStr(ProjInvoiceJour)));
        }

        if (_args.parmEnumType() == enumNum(PrintCopyOriginal))
        {
            printCopyOriginal = _args.parmEnum();
        }

        journalList.first(invoiceJournal);

        documentType = PSAProjAndContractInvoiceController::getDocumentType(_args.menuItemName(), invoiceJournal);
        // <GTE><GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.initParameter_IN(projProposalJour::find(invoiceJournal.ProposalId));

            if (this.parmIsGSTInvoice_IN())
            {
                this.parmReportName(ssrsReportStr(GSTInvoiceReport_IN, Report));
            }
            else
            {
                this.parmReportName(PrintMgmtDocType::construct(documentType).getDefaultReportFormat());
            }
        }
        else
        {
        // </GTE></GIN>
        this.parmReportName(PrintMgmtDocType::construct(documentType).getDefaultReportFormat());
        // <GTE><GIN>
        }
        // </GTE></GIN>
        this.parmShowDialog(false);

        if (_args.parmObject()
            && _args.parmObject() is CustInvoiceControllerFileURLsCollectionIdProvider)
        {
            CustInvoiceControllerFileURLsCollectionIdProvider fileURLsCollectionIdProvider = _args.parmObject() as CustInvoiceControllerFileURLsCollectionIdProvider;
            this.parmFileURLsCollectionId(fileURLsCollectionIdProvider.getFileURLsCollectionId());
        }

        this.parmArgs(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    protected void initFormLetterReport()
    {
        formLetterReport = FormLetterReport::construct(documentType);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (projFormLetter)
        {
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(projFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(projFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            formLetterReport.parmUsePrintMgmtDestinations(projFormLetter.usePrintManagement());
            formLetterReport.parmUseUserDefinedDestinations(projFormLetter.parmUseUserDefinedDestinations());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
        else
        {
            formLetterReport.parmUsePrintMgmtDestinations(false);
            formLetterReport.parmUseUserDefinedDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    protected void outputReport()
    {
        PSAProjInvoiceContract contract;
        SRSPrintDestinationSettings srsPrintDestinationSettings;
        int copyNumber;
        ProjInvoiceJourPrint projInvoiceJourPrint;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            contract = this.parmReportContract().parmRdpContract() as PSAProjInvoiceContract;
            srsPrintDestinationSettings = formLetterReport.getCurrentPrintSetting().parmPrintJobSettings();

            if (srsPrintDestinationSettings.printMediumType() == SRSPrintMediumType::Printer)
            {
                projInvoiceJourPrint = ProjInvoiceJourPrint::findFromProjInvoiceJour(invoiceJournal.ProjInvoiceId, invoiceJournal.InvoiceDate);
                copyNumber = ProjInvoiceJourPrint::createInvoiceCopySequence(invoiceJournal.ProjInvoiceId, invoiceJournal.InvoiceDate, printCopyOriginal);

                if (!invoiceJournal.isProforma() || (projFormLetter && !projFormLetter.proforma()))
                {
                    if (printCopyOriginal == PrintCopyOriginal::Copy)
                    {
                        contract.parmInvoiceInstanceText(strFmt("%1 %2", int2str(copyNumber), "@GLS107722"));
                    }
                    else
                    {
                        if (projInvoiceJourPrint.HasOriginalBeenPrinted)
                        {
                            // Don't allow the original document to be printed more than once.
                            error(strFmt("@GLS223085", invoiceJournal.ProjInvoiceId, invoiceJournal.InvoiceDate));
                            return;
                        }

                        contract.parmInvoiceInstanceText(strFmt("%1 %2", int2str(copyNumber), "@GLS107723"));
                    }
                }
            }
            else
            {
                contract.parmInvoiceInstanceText(strFmt("%1%2%3", "@GLS107724", "\n", "@GLS107725"));
            }
        }

        if (this.parmReportContract().parmRdpContract())
        {
            switch (formLetterReport.getCurrentPrintSetting().parmType())
            {
                case PrintMgmtDocInstanceType::Copy:
                    printCopyOriginal = PrintCopyOriginal::Copy;
                    break;

                case PrintMgmtDocInstanceType::Original:
                    printCopyOriginal = PrintCopyOriginal::OriginalPrint;
                    break;
            }
            // <GTE><GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.initReportName_IN();
            }

            if (this.parmReportContract().parmRdpContract() is PSAProjInvoiceContract)
            {
                str reportTitle = this.getReportTitle(this.parmArgs().menuItemName(), invoiceJournal.isProforma(), printCopyOriginal);

                contract = this.parmReportContract().parmRdpContract() as PSAProjInvoiceContract;
                contract.parmReportTitle(reportTitle);

                // <GTH>
                ProjInvoiceJourAdjustment_TH projInvoiceJourAdjustment = ProjInvoiceJourAdjustment_TH::findLatestByProjInvoiceJour(invoiceJournal.RecId, ProjInvoiceJourAdjustment_TH::getAdjustmentTypeFromArgs(this.parmArgs()));
                str invoiceTxtNote = ProjInvoiceDPBase::invoiceTxtNote_TH(invoiceJournal, projInvoiceJourAdjustment, PrintCopyOriginal);
                        
                if (TaxThaiGovCertificationFeatureChecker::isProjInvoicesSubstitutionAdjustmentEnabled() 
                    && printCopyOriginal != PrintCopyOriginal::Copy)
                {
                    ProjInvoiceJourAdjustment_TH::markInvoiceAsPrinted(invoiceJournal.RecId, contract.parmAdjustmentRecId_TH());
                }

                contract.parmInvoiceTxtNote_TH(invoiceTxtNote);
                // </GTH>
            }
            else if (this.parmReportContract().parmRdpContract() is GSTInvoiceContract_IN)
            {
                // <GTE><GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.parmIsGSTInvoice_IN())
                {
                    gstInvoiceContract = this.parmReportContract().parmRdpContract() as GSTInvoiceContract_IN;
                    
                    str reportTitle = this.getReportTitle(this.parmArgs().menuItemName(), invoiceJournal.isProforma(), gstInvoiceContract.parmPrintCopyOriginal());
                    gstInvoiceContract.parmDocumentTitle(reportTitle);
                }
                // </GTE></GIN>
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        PSAProjInvoiceContract contract;
        SRSTmpDataStore  srsTmpDataStore;

        // <GBR>
        #NFPrinting_BR
        FiscalEstablishment_BR          fiscalEstablishment;
        FiscalDocumentContract_BR       fiscalDocumentContract;

        // <GTE><GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && this.parmIsGSTInvoice_IN())
        {
            this.preRunModifyContract_IN();
            return;
        }
        // </GTE></GIN>

        if (BrazilParameters::isEnabled()   &&
            invoiceJournal.ProjInvoiceType != ProjInvoiceType::DebitNote_BR &&
            formLetterReport.checkNextPrintSetting())
        {
            fiscalDocumentContract = this.parmReportContract().parmRdpContract();

            select firstonly fiscalDocument
                where fiscalDocument.RefRecId == invoiceJournal.RecId
                   && fiscalDocument.RefTableId == invoiceJournal.TableId
                join EFDocPrePrintedSecurityForm, EFDocEnvironment from fiscalEstablishment
                where fiscalEstablishment.FiscalEstablishmentId == fiscalDocument.FiscalEstablishment;

            fiscalDocumentContract.parmRecordId(fiscalDocument.RecId);
            fiscalDocumentContract.parmPrePrintedSecurityForm(fiscalEstablishment.EFDocPrePrintedSecurityForm);
            fiscalDocumentContract.parmMaxDescSizeAdditionaInfFirstPage(#MaxDescSizeAdditionaInfFirstPage);
            fiscalDocumentContract.parmProForma(invoiceJournal.isProforma());

            if (fiscalDocument.isElectronic())
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxDescSizeAdditionalInformation);
            }
            else
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxNFMemoLines * #MaxNFMemoDescriptionSize);
            }

            fiscalDocumentContract.parmEFDocEnvironment(fiscalEstablishment.EFDocEnvironment == EFDocEnvironment_BR::Testing);

            if (projFormLetter && projFormLetter.proforma())
            {
                fiscalDocumentContract.parmProforma(true);

                // pack container and put into srstmptable.
                // Pack the class and insert into the temporary store.
                srsTmpDataStore.Value = projFormLetter.parmFormletterProformaPrintPacked();
                srsTmpDataStore.insert();

                // Set the rec id to contract parameter
                fiscalDocumentContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
            }
        }
        else
        {
            // </GBR>
            contract = this.parmReportContract().parmRdpContract() as PSAProjInvoiceContract;

            this.setContractParms(contract);

            if (projFormLetter &&
                projFormLetter is ProjFormLetter_Invoice &&
                projFormLetter.proforma())
            {
                // pack container and put into srstmptable.
                // Pack the class and insert into the temporary store.
                srsTmpDataStore.Value = projFormLetter.parmFormletterProformaPrintPacked();
                srsTmpDataStore.insert();

                // Set the rec id to contract parameter
                contract.parmFormLetterRecordId(srsTmpDataStore.RecId);
            }
            // <GBR>
        }
        // </GBR>

        // <GTH>
        boolean isUnrealizedVATEnabled = TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled();
        if (isUnrealizedVATEnabled)
        {
            if (invoiceJournal.ProjInvoiceId)
            {
                hasRealizedTax = TaxTable::isRealizedVAT(TaxTrans::find(invoiceJournal.LedgerVoucher , invoiceJournal.InvoiceDate).TaxCode);
            }
            else
            {
                // for print preview
                ProjProposalTotals projProposalTotals = new ProjProposalTotals(ProjProposalJour::find(invoiceJournal.ProposalId));
                projProposalTotals.calc();

                TmpTaxWorkTrans tmpTaxWorkTrans = projProposalTotals.tax().tmpTaxWorkTrans();
                TaxTable        taxTableRealized;

                select firstonly TaxCode from tmpTaxWorkTrans
                    join taxTableRealized
                    where ((taxTableRealized.TaxType_TH  == TaxType_TH::Normal && taxTableRealized.PaymentTaxCode  == '')
                            || taxTableRealized.TaxType_TH  == TaxType_TH::AverageRealized)
                        && taxTableRealized.TaxCode     ==tmpTaxWorkTrans.TaxCode;

                if (taxTableRealized)
                {
                    hasRealizedTax = true;

                    TaxTable taxTableUnrealized;

                    select firstonly TaxCode from tmpTaxWorkTrans
                        join taxTableUnrealized
                        where ((taxTableUnrealized.TaxType_TH == TaxType_TH::Normal && taxTableUnrealized.PaymentTaxCode != '')
                                || taxTableUnrealized.TaxType_TH == TaxType_TH::AverageUnrealized)
                            && taxTableUnrealized.TaxCode ==tmpTaxWorkTrans.TaxCode;

                    if (taxTableUnrealized)
                    {
                        // Both realized VAT and unrealized VAT exist in current posting invoice.
                        throw error("@SYS4082809");
                    }
                }
            }

            ProjInvoiceJour_TH projInvoiceJourExtension_TH = invoiceJournal.projInvoiceJourExtension_TH();
            TaxAgent taxAgent = TaxAgent::find(projInvoiceJourExtension_TH.TaxAgent);

            contract.parmAgentName_TH(taxAgent.name());
            contract.parmAgentAddress_TH(taxAgent.address());
            contract.parmTaxBranchCode_TH(TaxBranchType::getTBDisplayValueByDefaultDimension(invoiceJournal.DefaultDimension));
            contract.parmTaxBranchName_TH(TaxBranch::getReportTaxBranchStr(contract.parmTaxBranchCode_TH()));
            contract.parmOriginalAmount_TH(projInvoiceJourExtension_TH.RefInvoiceAmountCur);
            contract.parmAdjustmentRecId_TH(ProjInvoiceJourAdjustment_TH::findLatestByProjInvoiceJour(
                                                            invoiceJournal.RecId,
                                                            ProjInvoiceJourAdjustment_TH::getAdjustmentTypeFromArgs(this.parmArgs())).RecId);
            contract.parmIsUnrealizedVATEnabled_TH(isUnrealizedVATEnabled);
            contract.parmIsTaxInvoice_TH(hasRealizedTax);

            if (projInvoiceJourExtension_TH.NoteFormat == TaxUnrealizedSalesNoteFormat::None)
            {
                contract.parmNoteType_TH(DebCredProposal::None);
            }
            else if (projInvoiceJourExtension_TH.NoteFormat == TaxUnrealizedSalesNoteFormat::DebitNoteQuantity
                || projInvoiceJourExtension_TH.NoteFormat   == TaxUnrealizedSalesNoteFormat::DebitNoteValue)
            {
                contract.parmNoteType_TH(DebCredProposal::Debit);
            }
            else if (projInvoiceJourExtension_TH.NoteFormat == TaxUnrealizedSalesNoteFormat::CreditNoteQuantity
                || projInvoiceJourExtension_TH.NoteFormat   == TaxUnrealizedSalesNoteFormat::CreditNoteValue)
            {
                contract.parmNoteType_TH(DebCredProposal::Credit);
            }

            if (documentType == PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice)
            {
                if (hasRealizedTax)
                {
                    //Tax Invoice
                    contract.parmReportTitleForCustRetn_TH(SysLabel::labelId2String(literalStr("@SYS115505"),invoiceJournal.LanguageId));
                }
                else
                {
                    // Invoice
                    contract.parmReportTitleForCustRetn_TH(SysLabel::labelId2String(literalStr("@SYS14204"),invoiceJournal.LanguageId));
                }
            }
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parm methods on the specified <c>PSAProjInvoiceContract</c> class instance.
    /// </summary>
    /// <param name = "_contract">
    /// A <c>PSAProjInvoiceContract</c> class instance.
    /// </param>
    protected void setContractParms(PSAProjInvoiceContract _contract)
    {
        _contract.parmProjInvoiceJourRecId(invoiceJournal.RecId);
        _contract.parmdesignId(invoiceJournal.psaInvoiceFormats);
        _contract.parmCountryRegionISOCode(SysCountryRegionCode::countryInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReportDataContract</Name>
				<Source><![CDATA[
    private void resetReportDataContract()
    {
        contractsInitialized = false;
        this.parmReportRun(null);
        this.parmReportContract(null);

        // <GTE><GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            gstInvoiceContract = null;
        }
        // </GTE></GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements print management functionality.
    /// </summary>
    /// <remarks>
    /// Override this method to provide print management-related logic. This method loads the print
    /// settings for the business object. It then invokes any necessary business logic and then calls the
    /// <c>outputReports</c> method.
    /// </remarks>
    protected void runPrintMgmt()
    {
        // <GBR>
        PrintMgmtPrintSettingDetail     printSettingDetail;
        // </GBR>

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(invoiceJournal);

        LanguageId originalLanguageId_AE;
        BiLingualReportController_W biLingualReportController = BiLingualReportController_W::construct();

        do
        {
            if (!invoiceJournal)
            {
                throw error("@SYS26348");
            }

            //India GST Reort is localization report, it does not need to cover this function.
            if (!(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                && this.parmIsGSTInvoice_IN()))
            {
                documentType = PSAProjAndContractInvoiceController::getDocumentType(this.args.menuItemName(), invoiceJournal);

                SRSCatalogItemName newReportName = this.parmReportName(PrintMgmtDocType::construct(documentType).getDefaultReportFormat());
                if (newReportName != reportContract.parmReportName())
                {
                    this.resetReportDataContract();
                    isInitialized = false;
                    this.init();
                }
            }

            // <GMY>
            if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
                && invoiceJournal.InvoiceType_MY == InvoiceType_MY::GST
                && !TaxGSTHelper_MY::getGSTRegistrationNumber(invoiceJournal.InvoiceDate))
            {
                throw error("@SYP4860820");
            }
            // </GMY>

            formLetterReport.loadPrintSettings(invoiceJournal, invoiceJournal.selectRefRecord(fieldNum(ProjInvoiceJour, ProposalId)), invoiceJournal.LanguageId);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(invoiceJournal.LanguageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(invoiceJournal.LanguageId);

            if ((BrazilParameters::isEnabled() || printSettings) && formLetterReport.moveNextPrintSetting())
            {
                // Printing Settings
                printSettingDetail = formLetterReport.getCurrentPrintSetting();

                //----GBR: update report name
                if (BrazilParameters::isEnabled() && invoiceJournal.ProjInvoiceType != ProjInvoiceType::DebitNote_BR)
                {
                    // New Report Name
                    fiscalDocument = FiscalDocument_BR::findByRef(invoiceJournal.TableId, invoiceJournal.RecId);

                    if (formLetterReport.parmUsePrintMgmtDestinations())
                    {
                        this.parmReportName(fiscalDocument.getReportName());
                    }
                    else
                    {
                        this.parmReportName(printSettingDetail.parmReportFormatName());
                    }

                    // Reset Data Contract
                    this.resetReportDataContract();

                    printSettingDetail.parmReportFormatName(this.parmReportName());
                }

                //----if there are user defined print settings, load it
                if (printSettings)
                {
                    printSettingDetail.parmPrintJobSettings(printSettings);
                }

                // Load Setting Details
                this.loadPrintSetting(printSettingDetail);
            }
            else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                if (formLetterReport.moveNextPrintSetting())
                {
                    printSettingDetail = formLetterReport.getCurrentPrintSetting();

                    this.initParameter_IN(projProposalJour::find(invoiceJournal.ProposalId));

                    if (this.parmIsGSTInvoice_IN())
                    {
                        this.parmReportName(ssrsReportStr(GSTInvoiceReport_IN, Report));
                    }
                    else
                    {
                        this.parmReportName(PrintMgmtDocType::construct(documentType).getDefaultReportFormat());
                    }
                }
                if (preReportName && preReportName != this.parmReportName())
                {
                    this.resetReportDataContract();
                }
                preReportName = this.parmReportName();

                printSettingDetail.parmReportFormatName(this.parmReportName());
                this.loadPrintSetting(printSettingDetail);
            }
            // </GTE></GIN>

            this.outputReports();

            if (CustVendInvoiceJour::needToPrintInCompanyLanguage_AE(invoiceJournal))
            {
                originalLanguageId_AE = invoiceJournal.LanguageId;
                CustVendInvoiceJour::setLanguage_AE(invoiceJournal, CompanyInfo::languageId());
            }
            else if(originalLanguageId_AE)
            {
                CustVendInvoiceJour::setLanguage_AE(invoiceJournal, originalLanguageId_AE);
                originalLanguageId_AE = '';
            }
            // </ARE>

            DocumentAttachment documentAttachment = DocumentAttachment::construct(PrintMgmtDocumentType::ProjectInvoice);
            documentAttachment.parmJournal(invoiceJournal);
            documentAttachment.parmInnerReportDataContract(this.parmReportContract());
            documentAttachment.parmPrintCopyOriginal(formLetterReport.parmPrintType());
            documentAttachment.parmERContract(erDocumentAttachmentContract);
            documentAttachment.run();

            biLingualReportController.processInvoice(invoiceJournal);
        }
        while ((biLingualReportController.needToPrintInCompanyLanguage()
            || journalList.next(invoiceJournal)
            || originalLanguageId_AE)
            && !this.parmCancelRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads print setting details.
    /// </summary>
    /// <param name = "_printSettingDetail">
    /// Instance of <c>PrintMgmtPrintSettingDetail</c> class.
    /// </param>
    protected void loadPrintSetting(PrintMgmtPrintSettingDetail _printSettingDetail)
    {
        formLetterReport.parmReportRun().loadSettingDetail(_printSettingDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the document type associated with the record in <c>ProjInvoiceJour</c>.
    /// </summary>
    /// <param name="_menuItemName">
    /// Name of the menu item used to invoke the functionality.
    /// </param>
    /// <param name="_jour">
    /// A buffer of type <c>ProjInvoiceJour</c>.
    /// </param>
    /// <returns>
    /// Document type associated with the record in <c>ProjInvoiceJour</c>.
    /// </returns>
    public static PrintMgmtDocumentType getDocumentType(MenuItemName _menuItemName, ProjInvoiceJour _jour)
    {
        ProjProposalRevenue   projProposalRevenue;
        PrintMgmtDocumentType documentType;
        boolean isReleased = false;
        boolean hasBillingRule = PSAProjProposalProj::hasBillingRules(_jour.ProposalId);
        boolean isPreBill = PSAProjAndContractInvoiceController::isPreBill(_jour);

        isReleased = (select count(RecId) from projProposalRevenue where projProposalRevenue.ProposalId == _jour.ProposalId && projProposalRevenue.IsReleased == NoYes::Yes).RecId ? true : false;

        if (hasBillingRule && isPreBill)
        {
            documentType = PrintMgmtDocumentType::SIProjInvoice;
        }
        else
        {
            switch (_menuItemName)
            {
                case menuitemOutputStr(PSAProjInvoice) :
                    documentType = PrintMgmtDocumentType::SIProjInvoice;
                    break;

                case menuitemOutputStr(PSAContractLineInvoice) :
                    documentType = PrintMgmtDocumentType::SIProjInvoiceWithBR;
                    break;

                case menuitemOutputStr(PSACustRetentionReleaseInvoice) :
                    documentType = PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice;
                    break;

                case menuitemOutputStr(PSAManageInvoice) :
                    documentType = PrintMgmtDocumentType::SIManagedProjInvoice;
                    break;

                default:
                    if (isReleased)
                    {
                        documentType = PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice;
                    }
                    else
                    {
                        switch (_jour.psaInvoiceFormats)
                        {
                            case PSAInvoiceFormats::ManageInvoice :
                                documentType = PrintMgmtDocumentType::SIManagedProjInvoice;
                                break;

                            case PSAInvoiceFormats::DetailInvoice :
                            case PSAInvoiceFormats::SummaryByCategory :
                            case PSAInvoiceFormats::SummaryInvoice :
                                // <GBR>
                                if (BrazilParameters::isEnabled() && _jour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
                                {
                                    documentType = PrintMgmtDocumentType::ProjDebitNote_BR;
                                    break;
                                }
                                // </GBR>
                                if (hasBillingRule)
                                {
                                    documentType = PrintMgmtDocumentType::SIProjInvoiceWithBR;
                                }
                                else
                                {
                                    documentType = PrintMgmtDocumentType::SIProjInvoice;
                                }
                                break;

                            default :
                                break;
                        }
                    }
                    break;
            }
        }

        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report parameters based on the specified caller.
    /// </summary>
    /// <param name="_menuItemName">
    /// The <c>PSAInvoiceFormat</c> object.
    /// </param>
    /// <param name="_jour">
    /// A <c>ProjInvoiceJour</c> record.
    /// </param>
    /// <returns>
    /// The report name.
    /// </returns>
    private static str getReportName(MenuItemName _menuItemName, ProjInvoiceJour _jour)
    {
        return PrintMgmtDocType::construct(PSAProjAndContractInvoiceController::getDocumentType(_menuItemName, _jour)).getDefaultReportFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreBill</Name>
				<Source><![CDATA[
    private static boolean isPreBill(ProjInvoiceJour _projInvoiceJour)
    {
        ProjInvoiceOnAcc projInvoiceOnAcc;
        ProjOnAccTrans projOnAccTrans;
        boolean ret  = false;

        while select ProjInvoiceId,InvoiceDate,TransId from projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId    == _projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceOnAcc.InvoiceDate      == _projInvoiceJour.InvoiceDate
        {
            ret = (select count(RecId) from projOnAccTrans
                    where projOnAccTrans.TransId == projInvoiceOnAcc.TransId &&
                          (projOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment ||
                          projOnAccTrans.TransactionOrigin  == ProjOrigin::Deduction)).RecId ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PSAProjAndContractInvoiceController controller;

        //<GMX>
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled()
            && EInvoiceProjController_MX::hasEInvoice(_args))
        {
            EInvoiceProjController_MX::main(_args);
            return;
        }
        //</GMX>

        // <GTH>
        if (!ProjInvoiceJour_TH::canInvoiceBePrinted(_args))
        {
            return;
        }
        // </GTH>
        
        controller = new PSAProjAndContractInvoiceController();
        controller.initArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameter_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the parameter.
    /// </summary>
    /// <param name="_projProposalJour">
    /// The record of <c>projProposalJour</c>.
    /// </param>
    public void initParameter_IN(projProposalJour _projProposalJour)
    {
        TaxEngineProjOnAcctTransHeader     onAccHeader;
        TaxEngineProjRevenueTransHeader    revenueHeader;
        TaxEngineProjCostTransHeader       costHeader;
        TaxEngineProjItemTransHeader       itemHeader;
        TaxEngineProjEmplTransHeader       emplHeader;
        TaxEngineProjItemSOTransHeader     itemSOHeader;
        TaxEngineProjRevenueSubTransHeader revenueSubHeader;
        TaxDocument                        taxDocument;
        TaxDocumentExtension_IN            taxDocumentExtension;

        onAccHeader         = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        revenueHeader       = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        costHeader          = TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        itemHeader          = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        itemSOHeader        = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        emplHeader          = TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        revenueSubHeader    = TaxEngineProjRevenueSubTransHeader::findOrCreateByProjProposalJour(_projProposalJour);

        select firstOnly TaxInvReferenceType from taxDocumentExtension
            where taxDocumentExtension.TaxInvReferenceType != GSTReference_IN::None
            exists join taxDocument
                where taxDocument.TaxDocumentGuid             == taxDocumentExtension.TaxDocumentGUID
                    && ((taxDocument.OriginSourceTableId      == onAccHeader.TableId
                            && taxDocument.OriginSourceRecId  == onAccHeader.RecId)
                        || (taxDocument.OriginSourceTableId   == revenueHeader.TableId
                            && taxDocument.OriginSourceRecId  == revenueHeader.RecId)
                        || (taxDocument.OriginSourceTableId   == costHeader.TableId
                            && taxDocument.OriginSourceRecId  == costHeader.RecId)
                        || (taxDocument.OriginSourceTableId   == itemHeader.TableId
                            && taxDocument.OriginSourceRecId  == itemHeader.RecId)
                        || (taxDocument.OriginSourceTableId   == itemSOHeader.TableId
                            && taxDocument.OriginSourceRecId  == itemSOHeader.RecId)
                        || (taxDocument.OriginSourceTableId   == emplHeader.TableId
                            && taxDocument.OriginSourceRecId  == emplHeader.RecId)
                        || (taxDocument.OriginSourceTableId   == revenueSubHeader.TableId
                            && taxDocument.OriginSourceRecId  == revenueSubHeader.RecId));

        this.parmIsGSTInvoice_IN(taxDocumentExtension.TaxInvReferenceType != GSTReference_IN::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsGSTInvoice_IN</Name>
				<Source><![CDATA[
    private boolean parmIsGSTInvoice_IN(boolean _isGSTInvoice = isGSTInvoice)
    {
        // <GTE><GIN>
        isGSTInvoice = _isGSTInvoice;
        return isGSTInvoice;
        // </GTE></GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract_IN</Name>
				<Source><![CDATA[
    protected void preRunModifyContract_IN()
    {
        SRSTmpDataStore  srsTmpDataStore;

        gstInvoiceContract = this.parmReportContract().parmRdpContract() as GSTInvoiceContract_IN;
        gstInvoiceContract.parmRecordId(invoiceJournal.RecId);
        gstInvoiceContract.parmTableId(tableNum(ProjInvoiceJour));
        gstInvoiceContract.parmGSTInvoiceControllerName(classId2Name(classIdGet(this)));
        gstInvoiceContract.parmPrintCopyOriginal(printCopyOriginal);

        if (projFormLetter &&
        projFormLetter is ProjFormLetter_Invoice &&
        projFormLetter.proforma())
        {
            // pack container and put into srstmptable.
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = projFormLetter.parmFormletterProformaPrintPacked();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter
            gstInvoiceContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportName_IN</Name>
				<Source><![CDATA[
    protected void initReportName_IN()
    {
        PrintMgmtPrintSettingDetail printSettingDetail = formLetterReport.getCurrentPrintSetting();
    
        this.initParameter_IN(projProposalJour::find(invoiceJournal.ProposalId));
    
        if (this.parmIsGSTInvoice_IN())
        {
            this.parmReportName(ssrsReportStr(GSTInvoiceReport_IN, Report));
            printSettingDetail.parmReportFormatName(this.parmReportName());
        }
        else
        {
            this.parmReportName(PrintMgmtDocType::construct(documentType).getDefaultReportFormat());
        }
    
        if (preReportName && preReportName != this.parmReportName())
        {
            this.resetReportDataContract();
        }
    
        preReportName = this.parmReportName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>