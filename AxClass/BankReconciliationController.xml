<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationController</c> class is the controller class for the
/// <c>BankReconciliation</c> report.
/// </summary>
public class BankReconciliationController extends SrsReportRunController implements BatchRetryable
{
    private BankReconciliationPrintoutTmp bankReconciliationPrintoutTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and populates the <c>BankReconciliationPrintoutTmp</c> table.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws an exception of the caller is not <c>BankAccountStatement</c> or <c>BankReconciliation</c> or <c>BankCodaAccountStatement</c> forms.
    /// </exception>
    public void init()
    {
        BankAccountStatement bankAccountStatementVar;
        BankCodaAccountStatement bankCodaAccountStatementVar;

        if (this.parmArgs() && this.parmArgs().caller())
        {
            switch (this.parmArgs().caller().name())
            {
                case formStr(BankAccountStatement), formStr(BankReconciliation):
                    bankAccountStatementVar = this.parmArgs().caller().bankAccountStatement();
                    bankReconciliationPrintoutTmp.AccountId = bankAccountStatementVar.AccountId;
                    bankReconciliationPrintoutTmp.AccountStatementDate = bankAccountStatementVar.AccountStatementDate;
                    bankReconciliationPrintoutTmp.ReconcileDate = bankAccountStatementVar.ReconcileDate;
                    bankReconciliationPrintoutTmp.bankAccountStatementNum = bankAccountStatementVar.AccountStatementNum;
                    bankReconciliationPrintoutTmp.EndingBalance = bankAccountStatementVar.EndingBalance;
                    bankReconciliationPrintoutTmp.CurrencyCode = bankAccountStatementVar.CurrencyCode;
                    bankReconciliationPrintoutTmp.BankAccountBalance = bankAccountStatementVar.openingBalance();

                    bankReconciliationPrintoutTmp.PrevAccountStatementDate = bankAccountStatementVar.findPreviousStatement().AccountStatementDate;
                    
                    bankReconciliationPrintoutTmp.insert();
                    break;

                case formStr(BankCodaAccountStatement):
                    bankCodaAccountStatementVar = this.parmArgs().caller().bankCodaAccountStatement();
                    bankReconciliationPrintoutTmp.AccountId = bankCodaAccountStatementVar.AccountId;
                    bankReconciliationPrintoutTmp.AccountStatementDate = bankCodaAccountStatementVar.AccountStatementDate;
                    bankReconciliationPrintoutTmp.ReconcileDate = bankCodaAccountStatementVar.ReconcileDate;
                    bankReconciliationPrintoutTmp.bankAccountStatementNum = bankCodaAccountStatementVar.AccountStatementNum;
                    bankReconciliationPrintoutTmp.EndingBalance = bankCodaAccountStatementVar.EndingBalance;
                    bankReconciliationPrintoutTmp.CurrencyCode = bankCodaAccountStatementVar.CurrencyCode;
                    bankReconciliationPrintoutTmp.BankAccountBalance = bankCodaAccountStatementVar.openingBalance();
                    bankReconciliationPrintoutTmp.insert();
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to change report contract before running report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract contract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;

        // get the Temp table, and marshall it across to SSRS
        new SRSReportRunPermission().assert();
        contract.parmTmpTableDataRecId(SRSTmpTblMarshaller::SendTmpTblToDataProvider(bankReconciliationPrintoutTmp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankReconciliationController controller = new BankReconciliationController();

        controller.parmArgs(_args);
        controller.init();
        controller.parmReportName(ssrsReportStr(BankReconciliation, Report));
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>