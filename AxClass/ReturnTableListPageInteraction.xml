<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReturnTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The interaction class for the model driven <c>ReturnTableListPage</c> form.
/// </summary>
class ReturnTableListPageInteraction
extends SysListPageInteractionBase
{
    ReturnTableButtonStateProvider  returnTableButtonStateProvider;
    SalesTable                      salesTable;

    boolean recordExist;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active <c>SalesTable</c> record.
    /// </summary>
    /// <returns>
    ///    An active <c>SalesTable</c> record.
    /// </returns>
    private SalesTable currentSalesTable()
    {
        return this.listPage().activeRecord(querydatasourcestr(ReturnTableListPage, SalesTable)) as SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetControls</Name>
				<Source><![CDATA[
    private void mcrSetControls()
    {
        boolean returnExists = SalesTable.RecId ? true: false;
        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, MCRButtonOrderNotes), returnExists);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the current <c>SalesTable</c> record and initializes record specific global variables.
    /// </summary>
    /// <remarks>
    ///    This method is called by the framework every time that a record is selected in the grid on the list
    ///    page.
    /// </remarks>
    public void selectionChanged()
    {
        salesTable = this.currentSalesTable();
        returnTableButtonStateProvider = new ReturnTableButtonStateProvider();
        returnTableButtonStateProvider.setDatasources(salesTable);
        returnTableButtonStateProvider.initHeaderActions();
        if (RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
        {
            this.mcrSetControls();
        }

        recordExist = salesTable.RecId != 0;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables action pane buttons according to active record data.
    /// </summary>
    protected void setButtonEnabled()
    {
        this.setButtonGeneral();
        this.setButtonReturnOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables general action pane tab buttons according to active record data.
    /// </summary>
    private void setButtonGeneral()
    {
        // Group controls
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReturnTableListPage, buttonPurchTableThisCompany),
            returnTableButtonStateProvider.parmPurchTableThisCompanyEnabled());
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReturnTableListPage, buttonInterCompanySalesTable),
            returnTableButtonStateProvider.parmInterCompanySalesOrderEnabled());
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReturnTableListPage, buttonInterCompanyPurchTable),
            returnTableButtonStateProvider.parmInterCompanyPurchOrderEnabled());
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReturnTableListPage, buttonInterCompanyOriginalSalesTable),
            returnTableButtonStateProvider.parmInterCompanyOriginalSalesOrdEnabled());

        this.listPage().actionPaneControlEnabled(formcontrolstr(ReturnTableListPage, buttonPurchTable),
            returnTableButtonStateProvider.checkRulePurchTable());

        this.listPage().actionPaneControlEnabled(formcontrolstr(ReturnTableListPage, IntercompanyReferences),
            returnTableButtonStateProvider.parmReferencesEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the receive action pane tab buttons according to active record data.
    /// </summary>
    private void setButtonReturnOrder()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, groupAttachments), recordExist);

        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, returnCreateReplacement), returnTableButtonStateProvider.checkRuleReturnCreateReplacement());

        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, PurchCreateFromSalesReturn), returnTableButtonStateProvider.checkRulePurchCreateFromSalesReturn());

        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, returnFindSalesOrder), returnTableButtonStateProvider.checkRuleReturnFindSalesOrder());

        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, markupTrans_HeadingSales), returnTableButtonStateProvider.checkRuleMarkupTrans_HeadingSales());

        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, returnDocumentReceive), recordExist);

        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, returnAcknowledgmentReceive), returnTableButtonStateProvider.checkRuleReturnAcknowledgment());

        // Groups groupModify elements, all group had rule checkRuleExistRecord (recordExist)
        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, returnCancel), returnTableButtonStateProvider.checkRuleReturnCancel());

        // Generate group
        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, buttonUpdatePackingSlip),
            returnTableButtonStateProvider.parmPackingSlipButtonEnabled());

        // Journal group
        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, journalInvoice),
            returnTableButtonStateProvider.checkRuleJournalInvoice());
        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, packingSlipJournal),
            returnTableButtonStateProvider.checkRuleJournalPackingSlip());

        this.listPage().actionPaneControlEnabled(formControlStr(ReturnTableListPage, replacementOrder), returnTableButtonStateProvider.checkRuleReplacementOrder());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>