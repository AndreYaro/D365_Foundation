<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSASNPackingStructureCleanUpService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSASNPackingStructureCleanUpService</c> class is used to clean up <c>WHSUOMStructure</c> records.
/// </summary>
internal class WHSASNPackingStructureCleanUpService extends SysOperationServiceBase
{
    private WHSInstrumentationLogger logger;

    private int64           cleanupCounter;
    private WHSLoadId       currentLoadId;
    private NumberOfRecords maxDeleteRecordsCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute(WHSASNPackingStructureCleanUpContract _contract)
    {
        if (!WHSASNPackingStructureCleanUpFlight::instance().isEnabled())
        {
            info(strFmt("@SYS113135", cleanupCounter));
            return;
        }

        utcDateTime beforeDateTime = DateTimeUtil::utcNow();
        beforeDateTime = DateTimeUtil::addDays(beforeDateTime, -_contract.parmDaysToKeep());
        maxDeleteRecordsCount = _contract.parmMaxDeleteRecords();

        using (var cleanUpInstrumentationActivitiesContext = this.activities().registerCleanUp(_contract.parmModule(),
                                                                                               _contract.parmDaysToKeep()))
        {
            using (var committer = WHSASNPackingStructureLoadCommitter::construct())
            {
                WHSUOMStructure whsUOMStructure;
                WHSLoadTable    whsLoadTable;

                switch(_contract.parmModule())
                {
                    case WHSSalesPurchModule::Purch :
                        while select forupdate whsUOMStructure
                            order by whsUOMStructure.LoadId
                            where whsUOMStructure.Module == WHSModule::Purch
                               && !whsUOMStructure.LicensePlateParent
                        exists join whsLoadTable
                            where whsLoadTable.LoadId == whsUOMStructure.LoadId
                               && whsLoadTable.LoadDirection == WHSLoadDirection::Inbound
                               && whsLoadTable.LoadStatus    == WHSLoadStatus::Received
                               && WHSLoadTable.LoadReceivingCompletedUTCDateTime < beforeDateTime
                            {
                                if (!this.deleteUOMStructure(committer, cleanUpInstrumentationActivitiesContext, whsUOMStructure))
                                {
                                    break;
                                }
                            }
                        break;

                    case WHSSalesPurchModule::Sales :
                        while select forupdate whsUOMStructure
                            order by whsUOMStructure.LoadId
                            where whsUOMStructure.Module == WHSModule::Sales
                               && !whsUOMStructure.LicensePlateParent
                        exists join whsLoadTable
                            where whsLoadTable.LoadId == whsUOMStructure.LoadId
                               && whsLoadTable.LoadDirection == WHSLoadDirection::Outbound
                               && whsLoadTable.LoadStatus    == WHSLoadStatus::Shipped
                               && WHSLoadTable.LoadShipConfirmUTCDateTime < beforeDateTime
                            {
                                if (!this.deleteUOMStructure(committer, cleanUpInstrumentationActivitiesContext, whsUOMStructure))
                                {
                                    break;
                                }
                            }
                        break;
                }
            }

            this.activities().parmASNPackingStructureCleanUpDeletedCount(cleanUpInstrumentationActivitiesContext, cleanupCounter);
        }

        info(strFmt("@SYS113135", cleanupCounter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>activities</Name>
				<Source><![CDATA[
    private WHSASNPackingStructureCleanUpInstrumentationActivities activities()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSASNPackingStructureCleanUpService));
        }

        return logger.asnPackingStructureCleanUpRegistration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLoadRecId</Name>
				<Source><![CDATA[
    private void registerLoadRecId(SysInstrumentationActivityContext _activityContext, WHSLoadId _loadId)
    {
        this.activities().parmLoadRecId(_activityContext, WHSLoadTable::find(_loadId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUOMStructure</Name>
				<Source><![CDATA[
    private boolean deleteUOMStructure(WHSASNPackingStructureLoadCommitter _committer, SysInstrumentationActivityContext _activityContext, WHSUOMStructure _uomStructure)
    {
        if (currentLoadId != _uomStructure.LoadId)
        {
            if (cleanupCounter >= maxDeleteRecordsCount)
            {
                return false;   
            }

            currentLoadId = _uomStructure.LoadId;
            this.registerLoadRecId(_activityContext, _uomStructure.LoadId); 
        }
        cleanupCounter++;
        _committer.deleteRecord(_uomStructure);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>