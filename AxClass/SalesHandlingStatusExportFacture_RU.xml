<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesHandlingStatusExportFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesHandlingStatusExportFacture_RU extends RunBaseBatch implements BatchRetryable
{
    SalesTmpExportFactureProcessing_RU tmpFactureProcessing;

    SalesBookFactureProcessingType_RU  processingType;

    DialogField                        dlgProcessingType;
    StartDate                          factureDateFrom;
    DialogField                        dlgFactureDateFrom;
    EndDate                            factureDateTo;
    DialogField                        dlgFactureDateTo;
    NoYesId                            showUndefined;
    DialogField                        dlgShowUndefined;

    QueryRun    queryRun;
    Set         selectedSet;

    #define.CurrentVersion(1)
    #localmacro.currentList
         processingType,
         showUndefined
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery(SalesBookFactureProcessingType_RU    _processingType)
    {
        Query q = new Query(this.queryRun().query());
        QueryBuildDataSource qbds = q.dataSourceTable(tablenum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, ConfirmationDate),
                            SysQuery::range(dateNull(),factureDateTo));

        switch (_processingType)
        {
            case SalesBookFactureProcessingType_RU::VATZero                 :
                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ProcessingType),
                                    SysQuery::value(queryValue(SalesBookFactureProcessingType_RU::None)));
                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ConfirmationDate),
                                    SysQuery::range(factureDateFrom, factureDateTo));
                break;

            case SalesBookFactureProcessingType_RU::VATStandard             :
                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ProcessingType),
                                    SysQuery::value(queryValue(SalesBookFactureProcessingType_RU::None)));

                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ConfirmationDate)).value(
                                    SysQuery::valueEmptyString());
                break;

            case SalesBookFactureProcessingType_RU::VATStandardCorrection   :
                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ProcessingType),
                                    SysQuery::value(queryValue(SalesBookFactureProcessingType_RU::VATZero)));
                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ConfirmationDate)).value(
                                    SysQuery::valueEmptyString());
                break;

            case SalesBookFactureProcessingType_RU::VATZeroCorrection       :
                findOrCreateRange_W(qbds,
                                   fieldnum(FactureJour_RU, ProcessingType),
                                   queryValue(queryValue(SalesBookFactureProcessingType_RU::VATStandard)));
                findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ConfirmationDate),
                                    SysQuery::valueNot(dateNull()));
                break;

            case SalesBookFactureProcessingType_RU::OverdueConfirmation     :
                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ProcessingType),
                                    queryValue(queryValue(SalesBookFactureProcessingType_RU::None)));
                 qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).
                               value(queryValue(SalesBookFactureProcessingType_RU::VATStandard));
                 qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).
                               value(queryValue(SalesBookFactureProcessingType_RU::VATStandardCorrection));
                 findOrCreateRange_W(qbds,
                                    fieldnum(FactureJour_RU, ConfirmationDate),
                                    SysQuery::valueNot(dateNull()));
                break;
        }
        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgFactureDateFrom  = dialog.addFieldValue(extendedtypestr(StartDate), factureDateFrom);
        dlgFactureDateTo    = dialog.addFieldValue(extendedtypestr(EndDate), factureDateTo);
        dlgProcessingType   = dialog.addFieldValue(enumstr(SalesBookFactureProcessingType_RU), processingType);
        dlgShowUndefined    = dialog.addFieldValue(extendedtypestr(NoYesId), showUndefined, "@GLS112984", "@GLS112985");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        factureDateFrom = dlgFactureDateFrom.value();
        factureDateTo   = dlgFactureDateTo.value();
        processingType  = dlgProcessingType.value();
        showUndefined   = dlgShowUndefined.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        factureDateFrom = dateNull();
        factureDateTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        TransDate closingDate = SalesBookTable_RU::getLastClosedBook().ClosingDate;
        if (closingDate)
        {
            [factureDateFrom, factureDateTo] = BookDataCalc_RU::datePeriodBook(closingDate + 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tablenum(FactureJour_RU));
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, Module), queryValue(FactureModule_RU::Cust)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Invoice)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, ExportProcessing), queryValue(NoYes::Yes)).status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        selectedSet = new Set(typeName2Type(extendedTypeStr(recId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.query().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPeriod</Name>
				<Source><![CDATA[
    container parmCurrentPeriod(container _con =  [factureDateFrom, factureDateTo])
    {
        [factureDateFrom, factureDateTo] = _con;

        return [factureDateFrom, factureDateTo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    EndDate parmEndDate(EndDate _endDate = factureDateTo)
    {
        factureDateTo = _endDate;

        return factureDateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessingType</Name>
				<Source><![CDATA[
    public SalesBookFactureProcessingType_RU parmProcessingType(SalesBookFactureProcessingType_RU _processingType = processingType)
    {
        processingType = _processingType;

        return processingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowUndefined</Name>
				<Source><![CDATA[
    public NoYesId parmShowUndefined(NoYesId _showUndefined = showUndefined)
    {
        showUndefined = _showUndefined;

        return showUndefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingType</Name>
				<Source><![CDATA[
    SalesBookFactureProcessingType_RU processingType(FactureJour_RU   _factureJour,
                                                     SalesBookFactureProcessingType_RU _newType)
    {
         SalesBookTrans_RU  salesBookTrans;
         SalesBookTable_RU  salesBookTable;
         FactureJour_RU     factureJourCorrective;
         FactureId_RU       factureIdBook;

        FactureId_RU lastCorrectiveFacture(SalesBookFactureProcessingType_RU    _correctiveProcessingType)
        {
            select firstonly FactureId from factureJourCorrective
            order by FactureId desc
            where factureJourCorrective.SourceExportFactureId                       &&
                  factureJourCorrective.FactureType     == FactureType_RU::Facture  &&
                  factureJourCorrective.ProcessingType  == _correctiveProcessingType;

            return factureJourCorrective.FactureId;
        }

        SalesBookTable_RU closedSalesBook(SalesPurchBookTransType_RU _transType)
        {
            select firstonly salesBookTable
            where salesBookTable.ClosingDate < factureDateFrom
            join RecId from salesBookTrans
                where salesBookTrans.SalesBookTable_RU == salesBookTable.RecId    &&
                      salesBookTrans.FactureId         == factureIdBook           &&
                      salesBookTrans.TransType         == _transType;

            return salesBookTable;
        }

        switch (_newType)
        {
        //case SalesBookFactureProcessingType_RU::None        :
        case SalesBookFactureProcessingType_RU::VATZero     :
            if ( (_factureJour.ConfirmationDate  != dateNull())                              &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::None) &&
                (_factureJour.ConfirmationDate  >= factureDateFrom)                         &&
                (_factureJour.ConfirmationDate  <= factureDateTo)                           &&
                (_factureJour.expirationDate()  >  _factureJour.ConfirmationDate))
            {
                return SalesBookFactureProcessingType_RU::VATZero;
            }

            if ( (_factureJour.ConfirmationDate  != dateNull())                              &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::None) &&
                (_factureJour.ConfirmationDate  >= factureDateFrom)                         &&
                (_factureJour.ConfirmationDate  <= factureDateTo)                           &&
                (_factureJour.expirationDate()  >  _factureJour.ConfirmationDate)           &&
                (_factureJour.expirationDate()  <= factureDateFrom)                         &&
                (_factureJour.expirationDate()  >= factureDateTo))
            {
                return SalesBookFactureProcessingType_RU::VATZero;
            }

        case SalesBookFactureProcessingType_RU::VATStandard:
            if ( (_factureJour.ConfirmationDate  == dateNull())                              &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::None) &&
                (_factureJour.expirationDate()  >= factureDateFrom)                         &&
                (_factureJour.expirationDate()  <= factureDateTo))
            {
                return SalesBookFactureProcessingType_RU::VATStandard;
            }

        case SalesBookFactureProcessingType_RU::VATZeroCorrection:
            factureIdBook = lastCorrectiveFacture(SalesBookFactureProcessingType_RU::VATStandard);
            closedSalesBook(SalesPurchBookTransType_RU::Facture);
            if ( (_factureJour.ConfirmationDate  != dateNull())                                      &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::VATStandard)  &&
                (_factureJour.expirationDate()  >  _factureJour.ConfirmationDate)                   &&
                (_factureJour.ConfirmationDate  <= factureDateTo)                                   &&
                salesBookTable)
            {
                return SalesBookFactureProcessingType_RU::VATZeroCorrection;
            }

            if ( (_factureJour.ConfirmationDate  != dateNull())                                      &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::VATStandard)  &&
                (_factureJour.expirationDate()  >= factureDateFrom)                                 &&
                (_factureJour.expirationDate()  <= factureDateTo)                                   &&
                (_factureJour.expirationDate()  <= _factureJour.ConfirmationDate)                   &&
                (_factureJour.ConfirmationDate  <= factureDateTo)                                   &&
                (_factureJour.ConfirmationDate  >= factureDateFrom)                                 &&
                salesBookTable)
            {
                return SalesBookFactureProcessingType_RU::VATZeroCorrection;
            }

        case SalesBookFactureProcessingType_RU::VATStandardCorrection:
            factureIdBook = _factureJour.FactureId;
            closedSalesBook(SalesPurchBookTransType_RU::Invoice);
                if ( (_factureJour.ConfirmationDate  == dateNull())                                  &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::VATZero)  &&
                (_factureJour.expirationDate()  >= factureDateFrom)                             &&
                (_factureJour.expirationDate()  <= factureDateTo)                               &&
                salesBookTable)
            {
                return SalesBookFactureProcessingType_RU::VATStandardCorrection;
            }

        case SalesBookFactureProcessingType_RU::OverdueConfirmation:
            if ( (_factureJour.ConfirmationDate  != dateNull())                              &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::None) &&
                (_factureJour.expirationDate()  <  factureDateFrom)                         &&
                (_factureJour.ConfirmationDate  > _factureJour.expirationDate()))
            {
                return SalesBookFactureProcessingType_RU::OverdueConfirmation;
            }

            if ( (_factureJour.ConfirmationDate  != dateNull())                                     &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::VATStandard) &&
                (_factureJour.expirationDate()  <  factureDateFrom)                                &&
                (_factureJour.ConfirmationDate  > _factureJour.expirationDate()))
            {
                return SalesBookFactureProcessingType_RU::OverdueConfirmation;
            }

            if ( (_factureJour.ConfirmationDate  != dateNull())                                               &&
                (_factureJour.ProcessingType    == SalesBookFactureProcessingType_RU::VATStandardCorrection) &&
                (_factureJour.expirationDate()  <  factureDateFrom)                                          &&
                (_factureJour.ConfirmationDate  > _factureJour.expirationDate()))
            {
                return SalesBookFactureProcessingType_RU::OverdueConfirmation;
            }
        }

        return CustParameters::find().SalesBookFactureProcessingType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (processingType != SalesBookFactureProcessingType_RU::None)
        {
            this.selectFactures(processingType);
        }
        else
        {
            SysDictEnum sysDictEnum = new SysDictEnum(enumnum(SalesBookFactureProcessingType_RU));
            processingType = sysDictEnum.firstValue();

            do
            {
                processingType = sysDictEnum.nextValue(processingType);
                this.selectFactures(processingType);
            } while (processingType != sysDictEnum.lastValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFactures</Name>
				<Source><![CDATA[
    protected void selectFactures(SalesBookFactureProcessingType_RU    _processingType)
    {
        QueryRun qr = new QueryRun(this.buildQuery(_processingType));

        while (qr.next())
        {
            FactureJour_RU factureJour = qr.get(tablenum(FactureJour_RU));

            if (factureJour.ProcessingType == _processingType &&
               _processingType            != SalesBookFactureProcessingType_RU::None)
            {
                continue;
            }

            if (selectedSet.in(factureJour.RecId))
            {
                continue;
            }
            SalesBookFactureProcessingType_RU processingTypeNew = this.processingType(factureJour, _processingType);

            if (processingTypeNew            == SalesBookFactureProcessingType_RU::None &&
               factureJour.ProcessingType   != SalesBookFactureProcessingType_RU::None)
            {
                continue;
            }

            if (processingTypeNew == SalesBookFactureProcessingType_RU::None && !showUndefined)
            {
                continue;
            }

            tmpFactureProcessing.clear();
            tmpFactureProcessing.initFromFactuerJour(factureJour);
            tmpFactureProcessing.ProcessingType = processingTypeNew;
            tmpFactureProcessing.insert();
            selectedSet.add(factureJour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpFactureProcessing</Name>
				<Source><![CDATA[
    SalesTmpExportFactureProcessing_RU tmpFactureProcessing()
    {
        return tmpFactureProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   conQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, conQuery] = packedClass;
                Query query = new Query(conQuery);
                queryRun = new QueryRun(query);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesHandlingStatusExportFacture_RU construct()
    {
        SalesHandlingStatusExportFacture_RU handlingFacture = new SalesHandlingStatusExportFacture_RU();
        handlingFacture.init();

        return handlingFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return  "@GLS112986";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
