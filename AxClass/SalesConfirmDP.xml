<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesConfirmDP</c> class is the report Data Provider class for the <c>SalesConfirm</c> SRS
/// report.
/// </summary>
[SRSReportParameterAttribute(classStr(SalesConfirmContract))]
public class SalesConfirmDP extends SrsReportDataProviderPreProcess
{
    private boolean                     cashDiscOnInvoice;
    private str                         lineHeaderPrinted[];
    private int                         lineHeaderPrintedCount;
    private FormletterJournalPrint      formletterJournalPrint;
    private CustFormletterDocument      custFormletterDocument;
    private CustFormletterParameters    custFormletterParameters;
    private container                   inventDimProductSetup;
    private container                   inventDimSetup;
    private InventDimCtrl_Rep_Sales     inventDimReport;
    private boolean                     insertInventDim;

    private CustConfirmJour custConfirmJour;

    LogisticsAddressCountryRegionISOCode isoCountryCode;

    private KittingSrsReportDataProviderPreProcess kittingReportHandler;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>kittingSetReportHandler</Name>
				<Source><![CDATA[
    public void kittingSetReportHandler(KittingSrsReportDataProviderPreProcess _kittingReportHandler)
    {
        kittingReportHandler = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()) ? _kittingReportHandler : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingReportHandler</Name>
				<Source><![CDATA[
    public KittingSrsReportDataProviderPreProcess kittingReportHandler()
    {
        return kittingReportHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>CashDisc</c> amount.
    /// </summary>
    /// <returns>
    /// The cash discount amount.
    /// </returns>
    private DiscAmount cashDiscAmount()
    {
        DiscAmount cashDisc;
        CashDiscVAT cashDiscVAT = CustParameters::find().CashDiscVAT;
        TaxIntegrationTaxJurisdictionParameters taxIntegrationTaxJurisdictionParameters = TaxIntegrationFacade::getTaxJurisdictionParametersByTable(this.parmCustConfirmJour());

        if (taxIntegrationTaxJurisdictionParameters && !taxIntegrationTaxJurisdictionParameters.empty())
        {
            cashDiscVAT = taxIntegrationTaxJurisdictionParameters.isCashDiscCalculatedOnAmountInclTaxForCust();
        }

        if (cashDiscVAT)
        {
            cashDisc   = CurrencyExchangeHelper::amount(this.parmCustConfirmJour().ConfirmAmount * this.parmCustConfirmJour().CashDiscPercent / 100, this.parmCustConfirmJour().CurrencyCode);
        }
        else
        {
            cashDisc   = CurrencyExchangeHelper::amount((this.parmCustConfirmJour().SalesBalance - this.parmCustConfirmJour().EndDisc + this.parmCustConfirmJour().SumMarkup) * this.parmCustConfirmJour().CashDiscPercent / 100, this.parmCustConfirmJour().CurrencyCode);
        }
        return cashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLineHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to print the line header.
    /// </summary>
    /// <param name = "_custConfirmTrans">
    /// A <c>CustConfirmTrans</c> record which the sales order confirmation line should be initialized from.
    /// </param>
    /// <returns>
    /// true if the line header is to be printed; false, otherwise.
    /// </returns>
    boolean checkPrintLineHeader(CustConfirmTrans _custConfirmTrans)
    {
        int         counter;
        boolean     lineHeaderPrint = true;
        boolean     printLineHeader = false;

        if (this.parmCustConfirmJour().isSummaryUpdated())
        {
            str lineHeaderOrig = _custConfirmTrans.LineHeader;

            for (counter=1;counter<=lineHeaderPrintedCount;counter++)
            {
                if (lineHeaderPrinted[counter] == _custConfirmTrans.LineHeader)
                {
                    printLineHeader = false;
                    lineHeaderPrint = false;
                    break;
                }
                else if (lineHeaderPrinted[counter] == subStr(lineHeaderOrig,1,strLen(lineHeaderPrinted[counter])))
                {
                    _custConfirmTrans.LineHeader = strLTrim(subStr(_custConfirmTrans.LineHeader,strLen(lineHeaderPrinted[counter])+1,255));
                }
            }

            if (_custConfirmTrans.LineHeader && lineHeaderPrint)
            {
                printLineHeader = true;
                lineHeaderPrintedCount++;
                lineHeaderPrinted[lineHeaderPrintedCount] = lineHeaderOrig;
            }
        }

        return printLineHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesConfirmContract</Name>
				<Source><![CDATA[
    public SalesConfirmContract parmSalesConfirmContract()
    {
        return this.parmDataContract() as SalesConfirmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustFormletterParameters</Name>
				<Source><![CDATA[
    public CustFormletterParameters parmCustFormletterParameters()
    {
        if (!custFormletterParameters.RecId)
        {
            custFormletterParameters = CustFormletterParameters::find();
        }

        return custFormletterParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustFormletterDocument</Name>
				<Source><![CDATA[
    public CustFormletterDocument parmCustFormletterDocument()
    {
        if (!custFormletterDocument.RecId)
        {
            custFormletterDocument = CustFormletterDocument::find();
        }

        return custFormletterDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data for the sales order confirmation.
    /// </summary>
    /// <returns>
    /// The <c>SalesConfirmHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected SalesConfirmHeaderTmp createReportData()
    {
        this.initializeReportData();

        custConfirmJour = CustConfirmJour::findRecId(this.parmSalesConfirmContract().parmRecordId());

        return this.createSalesOrderConfirmation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustConfirmJour</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public CustConfirmJour parmCustConfirmJour()
    {
        return custConfirmJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    protected void initializeReportData()
    {
        isoCountryCode              = SysCountryRegionCode::countryInfo();

        RecId formLetterRecId = this.parmSalesConfirmContract().parmFormLetterRecordId();
        this.unpackSalesFormLetter(formLetterRecId);

        this.initializeInventDimReportSetup();

        if (isoCountryCode == #isoES)
        {
            cashDiscOnInvoice = TaxParameters::find().CashDiscOnInvoice;
        }

        lineHeaderPrintedCount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReportSetup</Name>
				<Source><![CDATA[
    private void initializeInventDimReportSetup()
    {
        inventDimReport             = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Confirmation);
        inventDimReport.initDimParmVisible();
        inventdimSetup              = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup       = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        
        insertInventDim = inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrderConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales order confirmation document.
    /// </summary>
    /// <returns>
    /// The <c>SalesConfirmHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected SalesConfirmHeaderTmp createSalesOrderConfirmation()
    {
        SalesConfirmHeaderTmp salesConfirmHeaderTmp = this.createSalesOrderConfirmationHeader();

        this.createSalesOrderConfirmationLines(salesConfirmHeaderTmp);

        if (this.parmCustFormletterParameters().TaxSpecPrintLevel != TaxSpecPrintLevel::None && isoCountryCode == #isoHU)
        {
            TaxSpec taxSpec = this.initializeTaxSpec();
            // Set the SumTaxMST amount after processing the taxSpec records which build the total amount.
            this.updateSalesConfirmHeaderTmpSumTaxMST(salesConfirmHeaderTmp, taxSpec);
        }

        return salesConfirmHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrderConfirmationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales order confirmation header.
    /// </summary>
    /// <returns>
    /// The created <c>SalesConfirmHeaderTmp</c> sales order confirmation header record.
    /// </returns>
    protected SalesConfirmHeaderTmp createSalesOrderConfirmationHeader()
    {
        SalesConfirmHeaderTmp salesConfirmHeaderTmp = this.initializeSalesOrderConfirmationHeader();

        this.insertSalesOrderConfirmationHeader(salesConfirmHeaderTmp);

        return salesConfirmHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrderConfirmationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales order confirmation lines.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    protected void createSalesOrderConfirmationLines(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        Enumerator enumerator = SalesConfirmDPConfirmationLineQuery::newQuery(this).getEnumerator();

        while (enumerator.moveNext())
        {
            SalesConfirmDPConfirmationLineQuerySelection confirmationLineSelection = enumerator.current() as SalesConfirmDPConfirmationLineQuerySelection;

            if (this.mustCreateSalesOrderConfirmationLine(_salesConfirmHeaderTmp, confirmationLineSelection))
            {
                this.createSalesOrderConfirmationLine(_salesConfirmHeaderTmp, confirmationLineSelection);
            }
        }

        if (this.parmCustFormletterParameters().TaxSpecPrintLevel != TaxSpecPrintLevel::None)
        {
            this.createTaxSpecSalesOrderConfirmationLines(_salesConfirmHeaderTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxSpecSalesOrderConfirmationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales order confirmation tax lines.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    protected void createTaxSpecSalesOrderConfirmationLines(SalesConfirmHeaderTmp   _salesConfirmHeaderTmp)
    {
        TaxSpec taxSpec = this.initializeTaxSpec();

        while (taxSpec.parmTaxSpec())
        {
            if (this.mustCreateTaxSpecSalesOrderConfirmationLine(_salesConfirmHeaderTmp, taxSpec))
            {
                this.createTaxSpecSalesOrderConfirmationLine(_salesConfirmHeaderTmp, taxSpec);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxSpec</c> object that is used to create the sales order confirmation lines.
    /// </summary>
    /// <returns>
    /// The <c>TaxSpec</c> object that is used to create the sales order confirmation lines.
    /// </returns>
    protected TaxSpec initializeTaxSpec()
    {
        TaxSpec taxSpec;

        if (this.parmCustConfirmJour().isProforma())
        {
            taxSpec = TaxSpec::construct('',naDate(),this.parmCustConfirmJour().RecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans());
        }
        else
        {
            taxSpec = new TaxJournalSpec(this.parmCustConfirmJour().TableId, this.parmCustConfirmJour().RecId);
        }

        taxSpec.parmLanguageId(this.parmCustConfirmJour().LanguageId);

        return taxSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales order confirmation line.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_confirmationLineSelection">
    /// A <c>SalesConfirmDPConfirmationLineQuerySelection</c> object which the sales order confirmation line should be created for.
    /// </param>
    /// <returns>
    /// The created <c>SalesConfirmDetailsTmp</c> sales order confirmation line record.
    /// </returns>
    protected SalesConfirmDetailsTmp createSalesOrderConfirmationLine(
        SalesConfirmHeaderTmp                           _salesConfirmHeaderTmp,
        SalesConfirmDPConfirmationLineQuerySelection    _confirmationLineSelection)
    {
        SalesConfirmDetailsTmp salesConfirmDetailsTmp = this.initializeSalesOrderConfirmationLine(_salesConfirmHeaderTmp, 
                                                                                                  _confirmationLineSelection);
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler.setkitFields(salesConfirmDetailsTmp, _confirmationLineSelection.parmCustConfirmTrans());
        }

        this.insertSalesOrderConfirmationLine(salesConfirmDetailsTmp);

        return salesConfirmDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxSpecSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales order confirmation tax line.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_taxSpec">
    /// The <c>TaxSpec</c> object that is used to create the sales order confirmation tax line.
    /// </param>
    /// <returns>
    /// The created <c>SalesConfirmDetailsTmp</c> sales order confirmation tax line record.
    /// </returns>
    protected SalesConfirmDetailsTmp createTaxSpecSalesOrderConfirmationLine(SalesConfirmHeaderTmp _salesConfirmHeaderTmp,
                                                                             TaxSpec               _taxSpec)
    {
        SalesConfirmDetailsTmp salesConfirmDetailsTmp = this.initializeTaxSpecSalesOrderConfirmationLine(_salesConfirmHeaderTmp,
                                                                                                         _taxSpec);

        this.insertSalesOrderConfirmationLine(salesConfirmDetailsTmp);

        return salesConfirmDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxSpecSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order confirmation tax line.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_taxSpec">
    /// The <c>TaxSpec</c> object that is used to create the sales order confirmation tax line.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesConfirmDetailsTmp</c> sales order confirmation tax line record.
    /// </returns>
    protected SalesConfirmDetailsTmp initializeTaxSpecSalesOrderConfirmationLine(SalesConfirmHeaderTmp _salesConfirmHeaderTmp,
                                                                                 TaxSpec               _taxSpec)
    {
        SalesConfirmDetailsTmp  salesConfirmTmp;
        CashDiscAmount          cashDiscAmountTax;
        Amount                  amount;

        this.setTransactionConnection(salesConfirmTmp);

        if (cashDiscOnInvoice)
        {
            amount                  = CurrencyExchangeHelper::amount(_taxSpec.taxBaseAmount() / (100 - this.parmCustConfirmJour().CashDiscPercent) / 100, this.parmCustConfirmJour().CurrencyCode);
            cashDiscAmountTax       = CurrencyExchangeHelper::amount(amount * this.parmCustConfirmJour().CashDiscPercent / 100, this.parmCustConfirmJour().CurrencyCode);
        }

        // Body
        salesConfirmTmp.JournalRecId            = this.parmCustConfirmJour().RecId;

        salesConfirmTmp.PrintCode               = _taxSpec.taxWriteCode();
        salesConfirmTmp.TaxCode                 = _taxSpec.taxCode();
        salesConfirmTmp.Amount                  = -amount;
        salesConfirmTmp.CashDiscAmount          = -cashDiscAmountTax;
        salesConfirmTmp.TaxBaseAmount           = -_taxSpec.taxBaseAmount();
        salesConfirmTmp.TaxBaseQty              = -_taxSpec.taxBaseQty();
        salesConfirmTmp.TaxAmount               = -_taxSpec.taxAmount();
        salesConfirmTmp.TaxAmountMST            = -_taxSpec.taxAmountMST();
        salesConfirmTmp.TaxExemptDescription    = _taxSpec.taxExemptDescription();

        // <GEEHU>
        if (isoCountryCode == #isoHU
                && _salesConfirmHeaderTmp.PrintTaxAmountSalesExchangeRate)
        {
            salesConfirmTmp.TaxBaseAmountMST    = -_taxSpec.taxBaseAmountMST();
        }
        // </GEEHU>

        salesConfirmTmp.ConfirmTransOrTax       = false;

        return salesConfirmTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order confirmation line.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_confirmationLineSelection">
    /// A <c>SalesConfirmDPConfirmationLineQuerySelection</c> object which the sales order confirmation line should be initialized from.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesConfirmDetailsTmp</c> sales order confirmation line record.
    /// </returns>
    protected SalesConfirmDetailsTmp initializeSalesOrderConfirmationLine(
        SalesConfirmHeaderTmp                           _salesConfirmHeaderTmp,
        SalesConfirmDPConfirmationLineQuerySelection    _confirmationLineSelection)
    {
        boolean printLineHeader = this.checkPrintLineHeader(_confirmationLineSelection.parmCustConfirmTrans());

        SalesConfirmDetailsTmp  salesConfirmTmp;

        this.setTransactionConnection(salesConfirmTmp);

        // Body
        salesConfirmTmp.JournalRecId            = this.parmCustConfirmJour().RecId;
        salesConfirmTmp.CustConfirmTrans        = _confirmationLineSelection.parmCustConfirmTrans().RecId;

        if (printLineHeader)
        {
            salesConfirmTmp.LineHeader          = _confirmationLineSelection.parmCustConfirmTrans().LineHeader;
        }
        else
        {
            salesConfirmTmp.LineHeader          = '';
        }
        salesConfirmTmp.ItemId                  = this.itemId(_confirmationLineSelection);
        salesConfirmTmp.Name                    = _confirmationLineSelection.parmCustConfirmTrans().Name;
        salesConfirmTmp.Qty                     = _confirmationLineSelection.parmCustConfirmTrans().Qty;
        salesConfirmTmp.SalesUnitTxt            = _confirmationLineSelection.parmCustConfirmTrans().salesUnitTxt();
        salesConfirmTmp.SalesPrice              = _confirmationLineSelection.parmCustConfirmTrans().SalesPrice;
        salesConfirmTmp.DlvDate                 = _confirmationLineSelection.parmCustConfirmTrans().DlvDate;
        salesConfirmTmp.DiscPercent             = _confirmationLineSelection.parmCustConfirmTrans().DiscPercent;
        salesConfirmTmp.DiscAmount              = _confirmationLineSelection.parmCustConfirmTrans().DiscAmount;
        salesConfirmTmp.LineAmount              = _confirmationLineSelection.parmCustConfirmTrans().LineAmount;
        salesConfirmTmp.CurrencyCode            = this.parmCustConfirmJour().CurrencyCode;
        salesConfirmTmp.PrintCode               = _confirmationLineSelection.parmCustConfirmTrans().TaxWriteCode;

        salesConfirmTmp.PdsCWUnitId         = _confirmationLineSelection.parmCustConfirmTrans().pdsCWUnitId();
        salesConfirmTmp.PdsCWQty            = _confirmationLineSelection.parmCustConfirmTrans().PdsCWQty;

        salesConfirmTmp.ExternalItemId          = FormLetter::journalExternalItemId(ModuleInventPurchSales::Sales, _confirmationLineSelection.parmCustConfirmTrans().ExternalItemId);

        if ((this.parmCustFormletterDocument().DocuOnConfirm == DocuOnFormular::Line)
            || (this.parmCustFormletterDocument().DocuOnConfirm == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_confirmationLineSelection.parmCustConfirmTrans(),
                                                                                  this.parmCustFormletterDocument().DocuTypeConfirm,
                                                                                  DocuRestriction::External);
            salesConfirmTmp.Notes               = Docu::concatDocuRefNotes(docuRefSearch);
        }

        salesConfirmTmp.InventDimPrint          = this.printDimHistory(_confirmationLineSelection);

        if (insertInventDim)
        {
            salesConfirmTmp.InventDimProduct    = FormLetter::inventDimReport(_confirmationLineSelection.parmCustConfirmTransInventDim(), inventDimProductSetup, this.parmCustConfirmJour().LanguageId);
        }

        salesConfirmTmp.ConfirmTransOrTax       = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
        {
            SalesLine salesLine = _confirmationLineSelection.parmCustConfirmTrans().salesLine();
            salesConfirmTmp.DualUseCertificate = COODualUseCertificate::certificateReportStr(salesLine.ItemId, salesLine.ShippingDateConfirmed, salesLine.DeliveryAddress().CountryRegionId, COOPrintOnDocumentType::SalesOrder);
        }

        return salesConfirmTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales order confirmation line.
    /// </summary>
    /// <param name = "_salesConfirmDetailsTmp">
    /// A <c>SalesConfirmDetailsTmp</c> sales order confirmation line record to insert.
    /// </param>
    protected void insertSalesOrderConfirmationLine(SalesConfirmDetailsTmp _salesConfirmDetailsTmp)
    {
        _salesConfirmDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name="_contract">
    /// An instance of <c>SalesConfirmContract</c> report contract class.
    /// </param>
    public void createData(SalesConfirmContract _contract)
    {
        this.parmDataContract(_contract);

        this.createReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesConfirmDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SalesConfirmDetailsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesConfirmDetailsTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesConfirmDetailsTmp))]
    public SalesConfirmDetailsTmp getSalesConfirmDetailsTmp()
    {
        SalesConfirmDetailsTmp salesConfirmDetailsTmp;

        this.setTransactionConnection(salesConfirmDetailsTmp);
        
        select salesConfirmDetailsTmp;
        
        return salesConfirmDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesConfirmHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>SalesConfirmHeaderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesConfirmHeaderTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesConfirmHeaderTmp))]
    public SalesConfirmHeaderTmp getSalesConfirmHeaderTmp()
    {
        SalesConfirmHeaderTmp salesConfirmHeaderTmp;

        this.setTransactionConnection(salesConfirmHeaderTmp);

        select salesConfirmHeaderTmp;

        return salesConfirmHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        SysDocuBrandDetailsRegular docuBrandDetails;

        this.setTransactionConnection(docuBrandDetails);

        select docuBrandDetails;

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Item ID.
    /// </summary>
    /// <param name = "_confirmationLineSelection">
    /// A <c>SalesConfirmDPConfirmationLineQuerySelection</c> object to retrieve the item ID from.
    /// </param>
    /// <returns>
    /// The Item ID.
    /// </returns>
    private ItemId itemId(SalesConfirmDPConfirmationLineQuerySelection _confirmationLineSelection)
    {
        ItemId  itemIdLocal = FormLetter::journalItemId(ModuleInventPurchSales::Sales, 
                                                        _confirmationLineSelection.parmCustConfirmTrans().ItemId, 
                                                        _confirmationLineSelection.parmCustConfirmTrans().ExternalItemId);

        if (inventDimReport.isInventDimItemId())
        {
            itemIdLocal += inventDimReport.reportStrItemId(_confirmationLineSelection.parmCustConfirmTransInventDim());
        }

        return itemIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Invent Quantity and Invent Storage Dimensions.
    /// </summary>
    /// <param name = "_confirmationLineSelection">
    /// A <c>SalesConfirmDPConfirmationLineQuerySelection</c> object which the quantity is calculated for.
    /// </param>
    /// <returns>
    /// The string with the inventory dimensions.
    /// </returns>
    /// <remarks>
    /// This method is called for each of the transactions.
    /// </remarks>
    private str printDimHistory(SalesConfirmDPConfirmationLineQuerySelection _confirmationLineSelection)
    {
        SalesConfirmDPDimHistoryBuilder builder = SalesConfirmDPDimHistoryBuilder::construct();

        builder.parmIsProforma(formletterJournalPrint && formletterJournalPrint.parmProforma());
        builder.parmCustConfirmJour(this.parmCustConfirmJour());
        builder.parmCustConfirmTrans(_confirmationLineSelection.parmCustConfirmTrans());
        builder.parmInventDimSetup(inventDimSetup);
        builder.parmDefaultInventDim(_confirmationLineSelection.parmCustConfirmTransInventDim());

        return builder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic, calls helper methods, and inserts data into a temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. The method should compute data and populate the data
    /// tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        SalesConfirmContract    salesConfirmContract = this.parmSalesConfirmContract();
        SalesConfirmHeaderTmp   salesConfirmHeaderTmp = SalesConfirmHeaderTmp::findJourRecId(salesConfirmContract.parmRecordId(), 
                                                                                             salesConfirmContract.parmCreatedTransactionId());
        if(salesConfirmHeaderTmp.RecId && salesConfirmHeaderTmp.IsProForma)
        {
            //the report data is already created so use it. this is the proforma scenario.
            this.copyReportData(salesConfirmHeaderTmp);
        }
        else
        {
            salesConfirmHeaderTmp = this.createReportData();
        }

        // set Document Branding Header;
        this.createSysDocuBrandDetails(salesConfirmHeaderTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report data for a sales order confirmation.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation to be copied.
    /// </param>
    protected void copyReportData(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        this.copyHeader(_salesConfirmHeaderTmp);
        this.copyLines(_salesConfirmHeaderTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the sales order confirmation header.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record to copy.
    /// </param>
    protected void copyHeader(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(SalesConfirmHeaderTmp));
        recordList.sortOrder(fieldNum(SalesConfirmHeaderTmp, RecId));
        recordList.ins(_salesConfirmHeaderTmp);

        this.deleteCopiedHeader(_salesConfirmHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied sales order confirmation header.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the copied sales order confirmation.
    /// </param>
    protected void deleteCopiedHeader(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        SalesConfirmHeaderTmp salesConfirmHeaderTmp;

        delete_from salesConfirmHeaderTmp
            where salesConfirmHeaderTmp.RecId == _salesConfirmHeaderTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies sales order confirmation lines.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header for the lines to copy.
    /// </param>
    protected void copyLines(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(SalesConfirmDetailsTmp));
        recordList.sortOrder(fieldNum(SalesConfirmDetailsTmp, RecId));

        SalesConfirmDetailsTmp salesConfirmDetailsTmp;
        while select salesConfirmDetailsTmp
            where salesConfirmDetailsTmp.CreatedTransactionId == _salesConfirmHeaderTmp.CreatedTransactionId
        {
            recordList.ins(salesConfirmDetailsTmp);
        }

        this.deleteCopiedLines(_salesConfirmHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied sales order confirmation lines.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the copied sales order confirmation.
    /// </param>
    protected void deleteCopiedLines(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        SalesConfirmDetailsTmp  salesConfirmDetailsTmp;

        delete_from salesConfirmDetailsTmp        //the created data is copied so it should be deleted.
            where salesConfirmDetailsTmp.CreatedTransactionId == _salesConfirmHeaderTmp.CreatedTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesOrderConfirmationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order confirmation header.
    /// </summary>
    /// <returns>
    /// The initialized <c>SalesConfirmHeaderTmp</c> sales order confirmation header record.
    /// </returns>
    protected SalesConfirmHeaderTmp initializeSalesOrderConfirmationHeader()
    {
        SalesConfirmHeaderTmp       salesConfirmHeaderTmp;
        CashDiscAmount              cashDiscAmount;
        CompanyInfo                 companyInfo                 = CompanyInfo::find();
        
        this.setTransactionConnection(salesConfirmHeaderTmp);

        if (cashDiscOnInvoice)
        {
            cashDiscAmount = this.cashDiscAmount();
        }

        salesConfirmHeaderTmp.JournalRecId              = this.parmCustConfirmJour().RecId;

        salesConfirmHeaderTmp.ConfirmId                 = this.parmCustConfirmJour().ConfirmId;

        salesConfirmHeaderTmp.PrintLogo                 = NoYes::No;
        
        if (this.parmCustFormletterParameters().PrePrintLevelConfirm == PrePrintLevel::BlankPaper)
        {
            salesConfirmHeaderTmp.CompanyName               = companyInfo.name();
            salesConfirmHeaderTmp.CompanyAddress            = DirUtility::replaceAddressTokenLanguage(companyInfo.postalAddress(), this.parmCustConfirmJour().LanguageId);
            salesConfirmHeaderTmp.CompanyPhone              = companyInfo.phone();
            salesConfirmHeaderTmp.CompanyTeleFax            = companyInfo.teleFax();
            salesConfirmHeaderTmp.CompanyGiro               = companyInfo.Giro;
            salesConfirmHeaderTmp.CompanyCoRegNum           = companyInfo.CoRegNum;
            salesConfirmHeaderTmp.CompanyEnterpriseNumber   = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmCustConfirmJour().ConfirmDate);
            salesConfirmHeaderTmp.CompanyLogo               = FormLetter::companyLogo();
            salesConfirmHeaderTmp.ShowCompanyVATNum         = this.parmCustFormletterParameters().PrintConfirmationVATNum;
            salesConfirmHeaderTmp.CompanyVATNum             = TaxRegistration::getTaxRegNumFromJournal(
                this.parmCustConfirmJour().TableId,
                this.parmCustConfirmJour().RecId,
                this.parmCustConfirmJour().ConfirmDate);
            if (conLen(FormLetter::companyLogo()) > 0)
            {
                salesConfirmHeaderTmp.PrintLogo             = NoYes::Yes;
            }

            if (companyInfo.PrintEnterpriseregister_NO)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
                salesConfirmHeaderTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                       this.parmCustConfirmJour().LanguageId);
            }
        }

        salesConfirmHeaderTmp.DeliveryName              = this.parmCustConfirmJour().DeliveryName;
        salesConfirmHeaderTmp.DeliveryAddress           = this.parmCustConfirmJour().deliveryAddress();
        salesConfirmHeaderTmp.ConfirmDocNum             = this.parmCustConfirmJour().ConfirmDocNum;
        salesConfirmHeaderTmp.ConfirmDate               = this.parmCustConfirmJour().ConfirmDate;
        salesConfirmHeaderTmp.SalesId                   = this.parmCustConfirmJour().SalesId;
        salesConfirmHeaderTmp.PurchaseOrder             = this.parmCustConfirmJour().PurchaseOrder;
        salesConfirmHeaderTmp.CustomerRef               = this.parmCustConfirmJour().CustomerRef;
        salesConfirmHeaderTmp.SalesAdministrator        = HcmWorker::find(this.parmCustConfirmJour().WorkerSalesTaker).name();
        salesConfirmHeaderTmp.PaymentCondition          = this.parmCustConfirmJour().paymentCondition();

        if ((this.parmCustFormletterDocument().DocuOnConfirm == DocuOnFormular::Head)
         || (this.parmCustFormletterDocument().DocuOnConfirm == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(this.parmCustConfirmJour(),this.parmCustFormletterDocument().DocuTypeConfirm,DocuRestriction::External);
            salesConfirmHeaderTmp.MainNotes             = Docu::concatDocuRefNotes(docuRefSearch);
        }
        FormLetterRemarks formLetterRemarks = FormLetterRemarks::find(this.parmCustConfirmJour().LanguageId, FormTextType::SalesConfirmation);
        salesConfirmHeaderTmp.FormLetterRemarks         = formLetterRemarks.Txt;

        salesConfirmHeaderTmp.SalesBalance              = this.parmCustConfirmJour().SalesBalance;
        salesConfirmHeaderTmp.EndDisc                   = this.parmCustConfirmJour().EndDisc;
        salesConfirmHeaderTmp.SumMarkup                 = this.parmCustConfirmJour().SumMarkup;
        salesConfirmHeaderTmp.CashDisc                  = cashDiscAmount;
        salesConfirmHeaderTmp.TotalTaxBaseAmount        = this.parmCustConfirmJour().SalesBalance - this.parmCustConfirmJour().EndDisc + this.parmCustConfirmJour().SumMarkup - cashDiscAmount;
        salesConfirmHeaderTmp.SumTax                    = this.parmCustConfirmJour().SumTax;
        salesConfirmHeaderTmp.RoundOff                  = this.parmCustConfirmJour().RoundOff;
        salesConfirmHeaderTmp.ConfirmAmount             = this.parmCustConfirmJour().ConfirmAmount;
        salesConfirmHeaderTmp.CurrencyCode              = this.parmCustConfirmJour().CurrencyCode;

        salesConfirmHeaderTmp.TaxPrintTaxFreeBalance    = this.parmCustFormletterParameters().TaxPrintTaxFreeBalance;
        if (salesConfirmHeaderTmp.TaxPrintTaxFreeBalance == NoYes::Yes)
        {
            salesConfirmHeaderTmp.NetAmount                 = this.parmCustConfirmJour().netAmount();

            TmpTaxWorkTrans tmpTaxWorkTrans                 = this.tmpTaxWorkTrans();
            salesConfirmHeaderTmp.TaxFreeBalance            = this.parmCustConfirmJour().taxFreeBalance(tmpTaxWorkTrans);
            salesConfirmHeaderTmp.TaxableBalance            = this.parmCustConfirmJour().taxableBalance(tmpTaxWorkTrans);
        }
        if (this.parmCustFormletterParameters().PrintEuroAmount)
        {
            salesConfirmHeaderTmp.EuroCurrencyCode          = Currency::findEuroCurrencyCode();
            if (salesConfirmHeaderTmp.EuroCurrencyCode && salesConfirmHeaderTmp.EuroCurrencyCode != salesConfirmHeaderTmp.CurrencyCode)
            {
                salesConfirmHeaderTmp.SalesBalanceEuro      = this.parmCustConfirmJour().salesBalanceEuro();
                salesConfirmHeaderTmp.EndDiscEuro           = this.parmCustConfirmJour().endDiscEuro();
                salesConfirmHeaderTmp.SumMarkupEuro         = this.parmCustConfirmJour().sumMarkupEuro();
                salesConfirmHeaderTmp.CashDiscEuro          = this.parmCustConfirmJour().amountCur2Euro(cashDiscAmount);
                salesConfirmHeaderTmp.TotalTaxBaseAmountEuro = this.parmCustConfirmJour().amountCur2Euro(salesConfirmHeaderTmp.TotalTaxBaseAmount);
                salesConfirmHeaderTmp.SumTaxEuro            = this.parmCustConfirmJour().sumTaxEuro();
                salesConfirmHeaderTmp.RoundOffEuro          = this.parmCustConfirmJour().roundOffEuro();
                salesConfirmHeaderTmp.ConfirmAmountEuro     = this.parmCustConfirmJour().confirmAmountEuro();
                salesConfirmHeaderTmp.CurrencyCodeEuro      = Currency::findEuroCurrencyCode();

                if (salesConfirmHeaderTmp.TaxPrintTaxFreeBalance == NoYes::Yes)
                {
                    salesConfirmHeaderTmp.NetAmountEuro         = this.parmCustConfirmJour().netAmountEuro();
                    salesConfirmHeaderTmp.TaxFreeBalanceEuro    = this.parmCustConfirmJour().amountCur2Euro(salesConfirmHeaderTmp.TaxFreeBalance);
                    salesConfirmHeaderTmp.TaxableBalanceEuro    = this.parmCustConfirmJour().amountCur2Euro(salesConfirmHeaderTmp.TaxableBalance);
                }
            }
            else
            {
                salesConfirmHeaderTmp.EuroCurrencyCode          = ""; //empty Euro currency means that euro line will not be printed
            }
        }
        salesConfirmHeaderTmp.PrePrintLevel             = this.parmCustFormletterParameters().PrePrintLevelConfirm;
        salesConfirmHeaderTmp.TaxSpecPrintLevel         = this.parmCustFormletterParameters().TaxSpecPrintLevel;

        salesConfirmHeaderTmp.CompanyCurrencyCode       = Ledger::accountingCurrency(companyInfo.RecId);
        salesConfirmHeaderTmp.CashDiscOnInvoice         = cashDiscOnInvoice;
        salesConfirmHeaderTmp.CashDiscPercent           = this.parmCustConfirmJour().CashDiscPercent;
        salesConfirmHeaderTmp.CashDiscTxt               = this.parmCustConfirmJour().cashDiscTxt_LanguageId();
        salesConfirmHeaderTmp.IsProForma                = this.parmCustConfirmJour().isProforma();

        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            salesConfirmHeaderTmp.CompanyRegNum                         = companyInfo.RegNum;
            salesConfirmHeaderTmp.CompanyEmail                          = companyInfo.email();
            salesConfirmHeaderTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, this.parmCustConfirmJour().ConfirmDate);

            BankAccountTable bankAccountTable = BankAccountTable::find(companyInfo.Bank);

            if (bankAccountTable)
            {
                salesConfirmHeaderTmp.CompanyBankAccountName    = bankAccountTable.Name;
                salesConfirmHeaderTmp.CompanyBankAccountNum     = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
																	bankAccountTable.AccountNum : "@AccountsReceivable:FiveAsterisk";
                salesConfirmHeaderTmp.CompanyBankAccountRegNum  = bankAccountTable.RegistrationNum;
            }

            CustTable custTable = CustTable::find(this.parmCustConfirmJour().OrderAccount);

            if (custTable)
            {
                salesConfirmHeaderTmp.OrderAccountRegNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmCustConfirmJour().ConfirmDate);
                salesConfirmHeaderTmp.OrderAccountVATNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.parmCustConfirmJour().ConfirmDate);
            }
        }
        // </GEECZ>

        // <GEEHU>
        if (isoCountryCode == #isoHU &&
            salesConfirmHeaderTmp.CurrencyCode != salesConfirmHeaderTmp.CompanyCurrencyCode &&
            (salesConfirmHeaderTmp.TaxSpecPrintLevel == TaxSpecPrintLevel::CurrencyMST ||
            (salesConfirmHeaderTmp.TaxSpecPrintLevel == TaxSpecPrintLevel::Currency && TaxParameters::find().BankExchRate_W)))
        {
            salesConfirmHeaderTmp.PrintTaxAmountSalesExchangeRate   = NoYes::Yes;
            salesConfirmHeaderTmp.SalesTaxExchangeRate              = SalesTaxExchangeRateHelper::getSalesTaxTransactionExchangeRate(this.parmCustConfirmJour().TableId, this.parmCustConfirmJour().RecId);
        }
        // </GEEHU>

        return salesConfirmHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesOrderConfirmationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales order confirmation header.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> sales order confirmation header record to insert.
    /// </param>
    protected void insertSalesOrderConfirmationHeader(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        _salesConfirmHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// The <c>SalesConfirmHeaderTmp</c> record which is the header for the report data.
    /// </param>
    /// <returns>
    /// The created <c>SysDocuBrandDetailsRegular</c> record which contains the header details.
    /// </returns>
    protected SysDocuBrandDetailsRegular createSysDocuBrandDetails(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        SysDocuBrandDetailsRegular docuBrandDetails = this.initializeSysDocuBrandDetails(_salesConfirmHeaderTmp);

        this.insertSysDocuBrandDetails(docuBrandDetails);

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SysDocuBrandDetailsRegular</c> record with header details.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// The <c>SalesConfirmHeaderTmp</c> record which is the header for the report data.
    /// </param>
    /// <returns>
    /// The initialized <c>SysDocuBrandDetailsRegular</c> record which contains the header details.
    /// </returns>
    protected SysDocuBrandDetailsRegular initializeSysDocuBrandDetails(SalesConfirmHeaderTmp _salesConfirmHeaderTmp)
    {
        SysDocuBrandDetailsRegular  bufferTable     = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        
        SysDocuBrandDetailsRegular  docuBrandDetails;

        this.setTransactionConnection(docuBrandDetails);

        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.CurrencySymbol    = Currency::find(_salesConfirmHeaderTmp.CurrencyCode).Symbol;

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>SysDocuBrandDetailsRegular</c> record.
    /// </summary>
    /// <param name = "_sysDocuBrandDetailsRegular">The initialized <c>SysDocuBrandDetailsRegular</c> record which contains the header details.</param>
    protected void insertSysDocuBrandDetails(SysDocuBrandDetailsRegular _sysDocuBrandDetailsRegular)
    {
        _sysDocuBrandDetailsRegular.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales order confirmation line must be created.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_confirmationLineSelection">
    /// A <c>SalesConfirmDPConfirmationLineQuerySelection</c> object which the sales order confirmation line should be created for.
    /// </param>
    /// <returns>
    /// true, if the sales order confirmation line must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether a sales order confirmation line must be created.
    /// </remarks>
    protected boolean mustCreateSalesOrderConfirmationLine(
        SalesConfirmHeaderTmp                           _salesConfirmHeaderTmp,
        SalesConfirmDPConfirmationLineQuerySelection    _confirmationLineSelection)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTaxSpecSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales order confirmation tax line must be created.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_taxSpec">
    /// The <c>TaxSpec</c> object that is used to create the sales order confirmation tax line.
    /// </param>
    /// <returns>
    /// true, if the sales order confirmation line must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether a sales order confirmation tax line must be created.
    /// </remarks>
    protected boolean mustCreateTaxSpecSalesOrderConfirmationLine(SalesConfirmHeaderTmp _salesConfirmHeaderTmp,
                                                                  TaxSpec               _taxSpec)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesConfirmHeaderTmpSumTaxMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the <c>SalesConfirmHeaderTmp</c> record with the total accounting currency tax amount.
    /// </summary>
    private void updateSalesConfirmHeaderTmpSumTaxMST(SalesConfirmHeaderTmp _salesConfirmHeaderTmp, TaxSpec _taxSpec)
    {
        if (_salesConfirmHeaderTmp.PrintTaxAmountSalesExchangeRate)
        {
            _salesConfirmHeaderTmp.SumTaxMST = -_taxSpec.totalTaxAmountMST();
            _salesConfirmHeaderTmp.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxWorkTrans</c> object.
    /// </summary>
    /// <returns>
    /// The <c>TmpTaxWorkTrans</c> object.
    /// </returns>
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (this.parmCustConfirmJour().isProforma())
        {
            FormletterProformaPrint formletterProformaPrint;

            if (formletterJournalPrint && formletterJournalPrint.parmProforma())
            {
                formletterProformaPrint = FormletterProformaPrint::newUnpack(formletterJournalPrint.parmFormletterProformaPrintPacked());
            }

            if (formletterProformaPrint)
            {
                return formletterProformaPrint.tmpTaxWorkTrans(this.parmCustConfirmJour().RecId);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSalesFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks an instance of the <c>SalesConfirmJournalPrint</c> class from a record in the
    /// <c>srsTmpDataStore</c> table.
    /// </summary>
    /// <param name="_formLetterRecId">
    /// The ID of a record to be read.
    /// </param>
    private void unpackSalesFormLetter(RecId _formLetterRecId)
    {
        SRSTmpDataStore         srsTmpDataStore;

        if (_formLetterRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
            where srsTmpDataStore.RecId == _formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                formletterJournalPrint = SalesConfirmJournalPrint::construct();
                formletterJournalPrint.unpack(srsTmpDataStore.Value);
                srsTmpDataStore.delete();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the database transaction connection for a record from the connection associated with the report.
    /// </summary>
    /// <param name = "_reportRecord">
    /// A record to set database transaction for.
    /// </param>
    final protected void setTransactionConnection(Common _reportRecord)
    {
        var connection = this.parmUserConnection();

        if (connection)
        {
            _reportRecord.setConnection(connection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public SalesConfirmDP construct()
    {
        return new SalesConfirmDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>