<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvAccessHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expense module that provides utility methods to validate that a current user can perform
/// certain actions for expense documents.
/// </summary>
static class TrvAccessHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isUserSubmitterOrDelegate</Name>
				<Source><![CDATA[
        /// <summary>
    /// Checks if the current user is the submitter or a delegate of the submitter
    /// </summary>
    /// <param name = "_record">The expense report/travel requisition checking access for</param>
    /// <returns>True if the user is the submitter or a delegate of the submitter, otherwise false</returns>
    public static boolean isUserSubmitterOrDelegate(Common _record)
    {
        TrvHcmWorkerRecId  workerRecId;
        boolean            ret = true;

        switch (_record.TableId)
        {
            case tablenum(TrvExpTable):
                workerRecId = _record.(fieldNum(TrvExpTable, CreatingWorker));
                break;

            case tablenum(TrvRequisitionTable):
                workerRecId = _record.(fieldNum(TrvRequisitionTable, CreatingWorker));
                break;
            
            default:
                ret = false;
                break;
        }

        ret = ret && (workerRecId == HcmWorkerLookup::currentWorker());

        ret = ret || TrvAccessHelper::userHasCurrentDelegateAccessFor(workerRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current user is the approver for the expense report/travel requisition 
    /// and it is currently pending approval
    /// </summary>
    /// <param name = "_record">The expense report/travel requisition checking access for</param>
    /// <returns>True if the user is the approver, otherwise false</returns>
    public static boolean isUserApprover(Common _record)
    {
        boolean ret = false;

        switch (_record.TableId)
        {
            case tablenum(TrvExpTable):
                ret = (_record.(fieldNum(TrvExpTable, ApprovalStatus)) == TrvAppStatus::Pending 
                    && WorkflowWorkItem::isUserApprovalOwner(_record));
                break;

            case tablenum(TrvRequisitionTable):
                ret = (_record.(fieldNum(TrvRequisitionTable, ApprovalStatus)) == TrvRequisitionApprovalStatus::Pending 
                    && WorkflowWorkItem::isUserApprovalOwner(_record));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasAccessToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current user has access to the specified document.
    /// </summary>
    /// <param name="_documentRecord">
    /// The document record.
    /// </param>
    /// <returns>
    /// true if the user has access to the document; otherwise, false.
    /// </returns>
    public static boolean userHasAccessToDocument(Common _documentRecord)
    {
        TrvHcmWorkerRecId      workerRecId;
        TrvExpTable            trvExpTable;
        TrvExpTrans            trvExpTrans;
        TrvRequisitionTable    trvRequisitionTable;
        TrvRequisitionLine     trvRequisitionLine;
        utcdatetime            createdDateTime;
        boolean                isPendingApproval;

        if (!_documentRecord)
        {
            return false;
        }

        if (!HcmWorkerLookup::currentWorker())
        {
            return false;
        }

        if (_documentRecord is TrvExpTable)
        {
            trvExpTable = _documentRecord;
            workerRecId = trvExpTable.CreatingWorker;
            createdDateTime = trvExpTable.CreatedDateTime;
            isPendingApproval = (trvExpTable.ApprovalStatus == TrvAppStatus::Pending);
        }
        else if (_documentRecord is TrvExpTrans)
        {
            trvExpTrans = _documentRecord;
            workerRecId = trvExpTrans.CreatingWorker;
            createdDateTime = trvExpTrans.CreatedDateTime;
            isPendingApproval = (trvExpTrans.ApprovalStatus == TrvAppStatus::Pending);
        }
        else if (_documentRecord is TrvRequisitionTable)
        {
            trvRequisitionTable = _documentRecord;
            workerRecId = trvRequisitionTable.CreatingWorker;
            createdDateTime = trvRequisitionTable.CreatedDateTime;
            isPendingApproval = (trvRequisitionTable.ApprovalStatus == TrvRequisitionApprovalStatus::Pending);
        }
        else if (_documentRecord is TrvRequisitionLine)
        {
            trvRequisitionLine = _documentRecord;
            trvRequisitionTable = TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable);
            workerRecId = trvRequisitionTable.CreatingWorker;
            createdDateTime = trvRequisitionTable.CreatedDateTime;
            isPendingApproval = (trvRequisitionTable.ApprovalStatus == TrvRequisitionApprovalStatus::Pending);
        }
        else
        {
            return false;
        }

        // Users can always see their own reports
        if (workerRecId == HcmWorkerLookup::currentWorker())
        {
            return true;
        }

        // Check if document is Pending Approval then check if the current user is a valid Workflow Approver of the said document
        if (isPendingApproval)
        {
            if (WorkflowWorkItem::isUserApprovalOwner(_documentRecord))
            {
                return true;
            }
            // if not approver, keep going to check if user is valid delegate
        }

        return TrvAccessHelper::userHasDelegateAccessToDocument(workerRecId, createdDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasDelegateAccessToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a user has delegate access to a document.
    /// </summary>
    /// <param name="_documentWorker">
    /// The record ID of the worker that the document is for.
    /// </param>
    /// <param name="_documentCreateDateTime">
    /// The created date and time of the document.
    /// </param>
    /// <returns>
    /// true if the user has delegate access; otherwise, false.
    /// </returns>
    public static boolean userHasDelegateAccessToDocument(HcmWorkerRecId _documentWorker, utcdatetime _documentCreateDateTime)
    {
        int                 i;
        TrvAppEmplSub       trvAppEmplSub;
        Array               startDates, endDates;

        // Determine all delegate ranges for this user
        i = 1;
        startDates = new Array(Types::UtcDateTime);
        endDates = new Array(Types::UtcDateTime);

        while select DelegatingWorker, DelegatedUser, FromDateUTC, ToDateUTC from trvAppEmplSub where
            trvAppEmplSub.DelegatingWorker == _documentWorker &&
            trvAppEmplSub.DelegatedUser == curUserId()
        {
            startDates.value(i, trvAppEmplSub.FromDateUTC);
            endDates.value(i, trvAppEmplSub.ToDateUTC);
            i++;
        }

        return TrvAccessHelper::createdDateTimeWithinDelegationPeriods(
            _documentCreateDateTime,
            startDates,
            endDates,
            startDates.lastIndex()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdDateTimeWithinDelegationPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the created datetime of the document is within the delegation periods of the
    /// user.
    /// </summary>
    /// <param name="_dateTime">
    /// The created datetime value of the document.
    /// </param>
    /// <param name="_startDates">
    /// An array of start datetime values for the delegation periods.
    /// </param>
    /// <param name="_endDates">
    /// Array of end datetime values for the delegation periods.
    /// </param>
    /// <param name="_numDates">
    /// The number of delegation periods.
    /// </param>
    /// <returns>
    /// true if the created datetime of the document is within the delegation periods; otherwise, false.
    /// </returns>
    public static boolean createdDateTimeWithinDelegationPeriods(utcdatetime _dateTime, Array _startDates, Array _endDates, int _numDates)
    {
        if (!_startDates || !_endDates || !_numDates)
        {
            return false;
        }

        if (_startDates.lastIndex() < _numDates || _endDates.lastIndex() != _startDates.lastIndex())
        {
            return false;
        }

        // Determine whether a specific report fits within the supplied date ranges.
        // To do this, examine each date range.  The first matching one means success.
        // If none match, this means failure.

        for (int i=1; i<=_numDates; i++)
        {
            if (TrvAccessHelper::dateFallsInRange(_dateTime, _startDates.value(i), _endDates.value(i)))
            {
                return true;
            }
        }

        // If none of these conditions match for any of the date ranges, then
        // this report does not match and must not be included.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFallsInRange</Name>
				<Source><![CDATA[
    private static boolean dateFallsInRange(utcdatetime _date, utcdatetime rangeStart, utcdatetime rangeEnd)
    {
        // Return true under any of these circumstances:

        // 1: The range is unbounded
        if (!rangeStart && !rangeEnd)
        {
            return true;
        }

        // 2: The start is unbounded, and the date is before the end
        if (!rangeStart && (_date <= rangeEnd))
        {
            return true;
        }

        // 3: The end is unbounded, and the date is after the start
        if (!rangeEnd && (rangeStart <= _date))
        {
            return true;
        }

        // 4: The date falls within the range
        if ((rangeStart <= _date) && (_date <= rangeEnd))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasCurrentDelegateAccessFor</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns whether the user has current delegate access for the specified worker.
    /// </summary>
    /// <param name="_worker">
    ///     The <c>RecId</c> of the worker.
    /// </param>
    /// <returns>
    ///     true if the user has delegate access, false otherwise.
    /// </returns>
    /// <remarks>
    ///     The value is used to determine if the the user can create new documents for the specified worker.
    /// </remarks>
    public static boolean userHasCurrentDelegateAccessFor(TrvHcmWorkerRecId _worker)
    {
        TrvAppEmplSub       trvAppEmplSub;
        UserId              currentUser = curUserId();
        utcdatetime         nowDateTime;
        UserId              user;

        if (_worker == 0)
        {
            return false;
        }
        // find the user associated with the worker
        user = DirPersonUserEx::worker2UserId(_worker);

        if (currentUser == user)
        {
            return true;
        }

        nowDateTime = DateTimeUtil::utcNow();
        select firstonly RecId from trvAppEmplSub where
            trvAppEmplSub.DelegatingWorker == _worker &&
            trvAppEmplSub.DelegatedUser == currentUser &&
            trvAppEmplSub.FromDateUTC <= nowDateTime &&
            (!trvAppEmplSub.ToDateUTC || trvAppEmplSub.ToDateUTC >= nowDateTime);

        return (trvAppEmplSub.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEmploymentInCurrentLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified worker has current employment in the current legal entity.
    /// </summary>
    /// <param name="_worker">
    /// The record ID of the specified worker.
    /// </param>
    /// <returns>
    /// true if worker has current employment in the current legal entity; otherwise, false.
    /// </returns>
    public static boolean hasEmploymentInCurrentLegalEntity(HcmWorkerRecId _worker)
    {
        HcmEmployment   hcmEmployment = HcmEmployment::findByWorkerLegalEntity(_worker, CompanyInfo::current());

        return (hcmEmployment.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateNewTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether new transactions can be created for the specified worker.
    /// </summary>
    /// <param name="_worker">
    /// The record ID of the specified worker.
    /// </param>
    /// <returns>
    /// true if new transactions can be created for the specified worker; otherwise, false.
    /// </returns>
    public static boolean canCreateNewTransactions(HCMWorkerRecId _worker = HcmWorkerLookup::currentWorker())
    {
        HCMWorkerRecId  currentWorker = HcmWorkerLookup::currentWorker();
        boolean         ret = true;

        // User for whom the expenses are being logged much have employment in current legal entity.
        ret = TrvAccessHelper::hasEmploymentInCurrentLegalEntity(_worker);
        if (!ret)
        {
            warning("@SYS342314");
        }
        else if (_worker && _worker != currentWorker)
        {
            // The delegate does not need to have employment in the legal entity, but it needs to have delegate access.
            ret = TrvAccessHelper::userHasCurrentDelegateAccessFor(_worker);
            if (!ret)
            {
                warning(strfmt("@SYS342315", HcmWorker::worker2Name(_worker)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>