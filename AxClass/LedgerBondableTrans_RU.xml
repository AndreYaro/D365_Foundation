<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondableTrans_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Abstract bondable transaction
/// </summary>
/// <remarks>
/// The transaction is used as abstract representation of all kinds of transactions which
/// can be bonded. It stores properties which are needed by bonding process. It is an
/// implementation of ExpressionBuilder pattern http://www.martinfowler.com/dslwip/ExpressionBuilder.html
/// for itself - there are parm* methods for accessing properties, and methods without parm
/// for setting proerties in ExpressionBuilder style
/// if property accessor is not commented, it has the same meaning as a field in GeneralJournalLine
/// </remarks>
class LedgerBondableTrans_RU
{
    TransDate               accountingDate;
    LedgerAllocateLevel     allocationLevel;
    AmountCur               transactionCurrencyAmount;
    AmountMST               accountingCurrencyAmount;
    AmountCur               reportingCurrencyAmount;
    RecID                   bondBatchTrans_RU;
    NoYes                   isCorrection;
    CurrentOperationsTax    postingLayer;
    LedgerDimensionAccount  ledgerDimensionId;
    PaymReference           paymentReference;
    LedgerPostingType       postingType;
    recId                   sourceRecId;
    tableId                 sourceTableId;
    CurrencyCode            transactionCurrencyCode;
    LedgerBondId_RU         id;
    int64                   groupCommonPropertiesID;
    int64                   mergeablePropertiesID;
    boolean                 isCredit;
    DetailSummary           detailSummary;
    Qty                     quantity;
    #localMacro.currentList
        [
            accountingDate,
            allocationLevel,
            transactionCurrencyAmount,
            accountingCurrencyAmount,
            reportingCurrencyAmount,
            bondBatchTrans_RU,
            isCorrection,
            postingLayer,
            ledgerDimensionId,
            paymentReference,
            postingType,
            sourceRecId,
            sourceTableId,
            transactionCurrencyCode,
            detailSummary,
            id,
            groupCommonPropertiesID,
            mergeablePropertiesID,
            isCredit,
            quantity
        ]
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   fluent interface for setting corresponding property
    /// </summary>
    /// <param name="_value">
    ///   new value
    /// </param>
    /// <returns>
    ///   object
    /// </returns>
    LedgerBondableTrans_RU accountingDate(TransDate _value)
    {
        this.parmAccountingDate(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///   fluent interface for setting corresponding property
    /// </summary>
    /// <param name="_value">
    ///  new value
    /// </param>
    /// <returns>
    /// this
    /// </returns>
    LedgerBondableTrans_RU allocationLevel(LedgerAllocateLevel _value)
    {
        this.parmAllocationLevel(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fluent interface to set amounts
    /// </summary>
    /// <param name="_cur">
    ///   AmountCur
    /// </param>
    /// <param name="_mst">
    ///  AmoiuntMst
    /// </param>
    /// <param name="_mstSecond">
    ///  AmountMstSec
    /// </param>
    /// <returns>
    ///   this
    /// </returns>
    LedgerBondableTrans_RU amounts(AmountCur _cur, AmountMST _mst=_cur, AmountMSTSecondary _mstSecond=_cur)
    {
        this.parmTransactionCurrencyAmount(_cur);
        this.parmAccountingCurrencyAmount(_mst);
        this.parmReportingCurrencyAmount(_mstSecond);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>asContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns or sets all peroperties as single container
    /// </summary>
    /// <param name="_value">
    ///  container with all properties to set
    /// </param>
    /// <returns>
    ///   container with all properties
    /// </returns>
    protected container asContainer(container _value = connull())
    {
        if (prmisdefault(_value))
        {
            return #currentList;
        }
        else
        {
            #currentList = _value;
            return _value;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInternalValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy of the method with the same name from <c>GeneralJournalLine</c>
    /// </summary>
    public void calculateInternalValues()
    {
        Amount nonZeroAmount =
            (transactionCurrencyAmount ?
                transactionCurrencyAmount :
                (accountingCurrencyAmount ? accountingCurrencyAmount : reportingCurrencyAmount));
        isCredit =
            (nonZeroAmount < 0 && !isCorrection) ||
            (nonZeroAmount > 0 && isCorrection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates shallow copy of current object
    /// </summary>
    /// <returns>
    ///  new <c>LedgerBondableTrans_RU</c>
    /// </returns>
    LedgerBondableTrans_RU clone()
    {
        LedgerBondableTrans_RU ret = new LedgerBondableTrans_RU();
        ret.asContainer(this.asContainer());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///   fluent interface for setting corresponding property
    /// </summary>
    /// <param name="_value">
    ///  new value
    /// </param>
    /// <returns>
    ///   this
    /// </returns>
    LedgerBondableTrans_RU detailSummary(DetailSummary _value)
    {
        this.parmDetailSummary(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///   display value of ledgerDimensionID
    /// </summary>
    /// <returns>
    ///    string value
    /// </returns>
    public DimensionDisplayValue dimensionDisplayValue()
    {
        return LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.parmLedgerDimensionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupPropertiesID</Name>
				<Source><![CDATA[
    /// <summary>
    ///   fluent interface for setting corresponding property
    /// </summary>
    /// <param name="_value">
    ///   new value
    /// </param>
    /// <returns>
    ///  this
    /// </returns>
    LedgerBondableTrans_RU groupPropertiesID(int64 _value)
    {
        this.parmGroupCommonPropertiesID(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Unique identifier
    /// </summary>
    /// <param name="_value">
    /// new value
    /// </param>
    /// <returns>
    /// current value
    /// </returns>
    LedgerBondableTrans_RU id(LedgerBondId_RU _value)
    {
        this.parmID(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    ///   fluent interface for setting corresponding property
    /// </summary>
    /// <param name="_value">
    ///  new value
    /// </param>
    /// <returns>
    ///  this
    /// </returns>
    LedgerBondableTrans_RU isCorrection(NoYes _value)
    {
        this.parmIsCorrection(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCredit</Name>
				<Source><![CDATA[
    /// <summary>
    ///   fluent interface for setting corresponding property
    /// </summary>
    /// <param name="_value">
    ///  new value
    /// </param>
    /// <returns>
    ///  this
    /// </returns>
    LedgerBondableTrans_RU isCredit(boolean _value = true)
    {
        this.parmIsCredit(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionID</Name>
				<Source><![CDATA[
    /// <summary>
    ///   fluent interface for setting corresponding property
    /// </summary>
    /// <param name="_value">
    ///  new value
    /// </param>
    /// <returns>
    /// this
    /// </returns>
    LedgerBondableTrans_RU ledgerDimensionID(LedgerDimensionAccount _value)
    {
        this.parmLedgerDimensionId(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeablePropertiesID</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets unique identifier of mergeable properties set
    /// </summary>
    /// <param name="_value">
    ///  new value
    /// </param>
    /// <returns>
    /// current value
    /// </returns>
    LedgerBondableTrans_RU mergeablePropertiesID(int64 _value)
    {
        this.parmMergeablePropertiesID(_value);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    AmountMST parmAccountingCurrencyAmount(AmountMST _value = accountingCurrencyAmount)
    {
        accountingCurrencyAmount = _value;
        return accountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    TransDate parmAccountingDate(TransDate _value = accountingDate)
    {
        accountingDate = _value;
        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationLevel</Name>
				<Source><![CDATA[
    public LedgerAllocateLevel parmAllocationLevel(LedgerAllocateLevel _value = allocationLevel)
    {
        allocationLevel = _value;
        return allocationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBondBatchTrans_RU</Name>
				<Source><![CDATA[
    RecID parmBondBatchTrans_RU(RecID _value = bondBatchTrans_RU)
    {
        bondBatchTrans_RU = _value;
        return bondBatchTrans_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailSummary</Name>
				<Source><![CDATA[
    DetailSummary parmDetailSummary(DetailSummary _value = detailSummary)
    {
        detailSummary = _value;
        return detailSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupCommonPropertiesID</Name>
				<Source><![CDATA[
    int64 parmGroupCommonPropertiesID(int64 _value = groupCommonPropertiesID)
    {
        groupCommonPropertiesID = _value;
        return groupCommonPropertiesID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmID</Name>
				<Source><![CDATA[
    LedgerBondId_RU parmID(LedgerBondId_RU _value = id)
    {
        id = _value;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCorrection</Name>
				<Source><![CDATA[
    public NoYes parmIsCorrection(NoYes _isCorrection = isCorrection)
    {
        isCorrection = _isCorrection;
        return isCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCredit</Name>
				<Source><![CDATA[
    boolean parmIsCredit(boolean _value = isCredit)
    {
        isCredit = _value;
        return isCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionId</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount parmLedgerDimensionId(LedgerDimensionAccount _ledgerDimensionId = ledgerDimensionId)
    {
        ledgerDimensionId = _ledgerDimensionId;
        return ledgerDimensionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMergeablePropertiesID</Name>
				<Source><![CDATA[
    int64 parmMergeablePropertiesID(int64 _value = mergeablePropertiesID)
    {
        mergeablePropertiesID = _value;
        return mergeablePropertiesID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the payment reference of the transaction.
    /// </summary>
    /// <param name="_paymReference">
    ///    The payment reference to set for the transaction; optional.
    /// </param>
    /// <returns>
    ///    The payment reference of the transaction.
    /// </returns>
    PaymReference parmPaymentReference(PaymReference _paymReference = paymentReference)
    {
        paymentReference = _paymReference;
        return paymentReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the posting layer.
    /// </summary>
    /// <param name="_postingLayer">
    /// The new posting layer value; optional.
    /// </param>
    /// <returns>
    /// The posting layer of the transaction.
    /// </returns>
    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmPostingType(LedgerPostingType _postingType = postingType)
    {
        postingType = _postingType;
        return postingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    Qty parmQuantity(Qty _value = quantity)
    {
        quantity = _value;
        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyAmount</Name>
				<Source><![CDATA[
    AmountCur parmReportingCurrencyAmount(AmountCur _value = reportingCurrencyAmount)
    {
        reportingCurrencyAmount = _value;
        return reportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the <c>sourceRecId</c> variable.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to set <c>sourceRecId</c> to; optional.
    /// </param>
    /// <returns>
    ///    The <c>sourceRecId</c> value.
    /// </returns>
    /// <remarks>
    ///    The <c>souceRecId</c> variable is used by the <c>TaxReference</c> object to identify the source of tax calculation.
    /// </remarks>
    recId parmSourceRecId(recId _recId = sourceRecId)
    {
    ;
        sourceRecId = _recID;
        return sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>SourceTableId</c> parameter.
    /// </summary>
    /// <param name="_sourceTableId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>SourceTableId</c> parameter.
    /// </returns>
    public tableId parmSourceTableId(tableId _sourceTableId = sourceTableId)
    {
        ;
        sourceTableId = _sourceTableId;
        return sourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    AmountCur parmTransactionCurrencyAmount(AmountCur _value=transactionCurrencyAmount)
    {
        transactionCurrencyAmount = _value;
        return transactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode(CurrencyCode _currencyCode = transactionCurrencyCode)
    {
        transactionCurrencyCode = _currencyCode;
        return transactionCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    ///  for debugging purposes
    /// </summary>
    /// <returns>
    ///   string representation of the object
    /// </returns>
    str toString()
    {
        return strfmt('%1;%2 %3:(%4,%5,%6) "%7" -> %8', this.parmID(),
                                             this.parmIsCredit() ? 'C':'D',
                                             this.parmLedgerDimensionId(),
                                             this.parmTransactionCurrencyAmount(),
                                             this.parmAccountingCurrencyAmount(),
                                             this.parmReportingCurrencyAmount(),
                                             this.parmTransactionCurrencyCode(),
                                             this.parmBondBatchTrans_RU());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>