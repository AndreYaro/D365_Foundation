<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyUnallocationLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyUnallocationLocation</c> class implements the Empty location with no incoming work strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::UnallocatedLocation)]
class WhsLocationDirectiveStrategyUnallocationLocation extends WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSupportedWorkTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isSupportedWorkTransType(WHSWorkTransType _workTransType)
    {
        return _workTransType == WHSWorkTransType::Purch ||
            _workTransType == WHSWorkTransType::TransferReceipt||
            _workTransType == WHSWorkTransType::ProdPut ||
            _workTransType == WHSWorkTransType::ProdProcessPut ||
            _workTransType == WHSWorkTransType::ReturnOrder ||
            _workTransType == WHSWorkTransType::KanbanPut ||
            _workTransType == WHSWorkTransType::Invent ||
            _workTransType == WHSWorkTransType::Replenishment ||
            _workTransType == WHSWorkTransType::QualityOrder ||
            _workTransType == WHSWorkTransType::QualityItemSampling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        boolean ret = true;

        if (!this.isSupportedWorkTransType(_locDirTable.WorkTransType))

        {
            ret = checkFailed(strFmt("@WAX5583", _locDirAction.LocDirStrategy, _locDirTable.WorkTransType));
        }

        if (_locDirTable.WorkType != WHSWorkType::Put)
        {
            ret = checkFailed(strFmt("@WAX4602", _locDirAction.LocDirStrategy, _locDirTable.WorkType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    public boolean performStrategy(
        WhsLocationDirective _locationDirective, 
        WhsLocationDirectiveStrategyParameters _parameters)
    {
        boolean strategyResult = false;

        if (_parameters.WorkType == WHSWorkType::Put &&
            _parameters.InWorkQty == 0)
        {
            strategyResult = true;
        }

        WHSVerifySingleLPLoadReceivingContext context = WHSVerifySingleLPLoadReceivingContext::current();

        if (context && context.parmisSingleLP())
        {
           strategyResult = context.parmisSingleLP();
        }

        if (strategyResult && _parameters.location.hasOpenPutWork())
        {
            strategyResult = false;
        }

        return strategyResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLockName</Name>
				<Source><![CDATA[
    [Hookable(false)]
	static internal str getLockName(WMSLocation _wmsLocation)
    {
        return strFmt("%1_%2_%3_%4",
						enum2Symbol(enumNum(WhsLocDirStrategy), WhsLocDirStrategy::UnallocatedLocation),
                        _wmsLocation.DataAreaId,
                        _wmsLocation.inventLocationId,
                        _wmsLocation.wMSLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useVolumetricsOptimization</Name>
				<Source><![CDATA[
    public boolean useVolumetricsOptimization()
    {
        // the assumption is it will take more time
        // to exclude full locations from the query than to check them one by one
        // because only few locations will qualify for these strategies
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useMixedLocationOptimization</Name>
				<Source><![CDATA[
    public boolean useMixedLocationOptimization()
    {
        // the assumption is it will take more time
        // to exclude mixed locations from the query than to check them one by one
        // because only few locations will qualify for these strategies
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryForStrategyUnallocationLocation</Name>
				<Source><![CDATA[
    private void modifyQueryForStrategyUnallocationLocation(Query _query, WHSAllowSplit _allowSplit)
    {
        QueryBuildDatasource qbdsInventSum;
        QueryBuildDatasource qbdsWMSLocation = _query.dataSourceTable(tableNum(WMSLocation));

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            qbdsInventSum = qbdsWMSLocation.addDataSource(tableNum(InventSum));
            qbdsInventSum.relations(false);
            qbdsInventSum.joinMode(JoinMode::NoExistsJoin);

            qbdsInventSum.addLink(fieldNum(WMSLocation, InventLocationId), fieldNum(InventSum, InventLocationId));
            qbdsInventSum.addLink(fieldNum(WMSLocation, wMSLocationId), fieldNum(InventSum, wMSLocationId));
        }
        else
        {
            QueryBuildDatasource qbdsInventDim = qbdsWMSLocation.addDataSource(tableNum(InventDim));
            qbdsInventDim.relations(true);
            qbdsInventDim.joinMode(JoinMode::NoExistsJoin);

            qbdsInventSum = qbdsInventDim.addDataSource(tableNum(InventSum));
            qbdsInventSum.relations(true);
            qbdsInventSum.joinMode(JoinMode::ExistsJoin);
        }

        qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        qbdsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');

        // Verify that there is no incoming work for a chosen location
        QueryBuildDatasource qbdsWorkLine = qbdsWMSLocation.addDataSource(tableNum(WHSWorkLine));
        qbdsWorkLine.relations(true);
        qbdsWorkLine.joinMode(JoinMode::NoExistsJoin);
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, WorkType)).value(queryValue(WHSWorkType::Put));
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, WorkStatus)).value(queryValue(WHSWorkStatus::Open));
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, WorkStatus)).value(queryValue(WHSWorkStatus::InProcess));

        QueryBuildDataSource qbdsWorkTable = qbdsWorkLine.addDataSource(tableNum(WHSWorkTable));
        qbdsWorkTable.relations(true);
            
        QueryBuildRange qbr = qbdsWorkTable.addRange(fieldNum(WHSWorkTable, InventLocationId));
        str joinClause = strFmt("(%1.%2 == %3.%4)",
            qbdsWorkTable.name(),
            fieldstr(WHSWorkTable, InventLocationId),
            qbdsWMSLocation.name(),
            fieldstr(WMSLocation, InventLocationId));
        qbr.value(joinClause);

        // When splitting avoid revisiting locations that just got assigned work. 
        if (_allowSplit)
        {
            // Verify that there is no temporary incoming work for a chosen location
            QueryBuildDatasource qbdsTmpWorkLine = qbdsWMSLocation.addDataSource(tableNum(WHSTmpWorkLine));
            qbdsTmpWorkLine.relations(true);
            qbdsTmpWorkLine.joinMode(JoinMode::NoExistsJoin);
            qbdsTmpWorkLine.addRange(fieldNum(WHSTmpWorkLine, WorkType)).value(queryValue(WHSWorkType::Put));
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPutLocDirActionQuery</Name>
				<Source><![CDATA[
    public boolean modifyPutLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        this.modifyQueryForStrategyUnallocationLocation(_query, _actionQuery.parmAllowSplit());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPutLocDirMultiSkuActionQuery</Name>
				<Source><![CDATA[
    public boolean modifyPutLocDirMultiSkuActionQuery(WhsLocationDirectiveMultiSkuActionQuery _actionQuery, Query _query)
    {
        this.modifyQueryForStrategyUnallocationLocation(_query, _actionQuery.parmAllowSplit());

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>