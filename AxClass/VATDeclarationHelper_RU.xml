<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclarationHelper_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VATDeclarationHelper_RU</c> class provides a facade for getting Russian VAT declaration data.
/// </summary>
public class VATDeclarationHelper_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSection2data</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 2 data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection2data(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        return VATDeclarationHelper_RU::getSectionData(
            LedgerRRGEDatasourceVATDecl501S2_W::construct(),
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection3data</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection3data(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        return VATDeclarationHelper_RU::getSectionData(
            LedgerRRGEDatasourceVATDecl501S3_W::construct(),
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection3dataDomesticVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 data for Russian VAT declaration, domestic VAT part.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection3dataDomesticVAT(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        LedgerRRGEDatasourceVATDecl501S3_W datasource = LedgerRRGEDatasourceVATDecl501S3_W::construct();
        datasource.canCollectValuesDomesticVAT(true);

        return VATDeclarationHelper_RU::getSectionData(
            datasource,
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection3dataCustoms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 data for Russian VAT declaration, customs part.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection3dataCustoms(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        LedgerRRGEDatasourceVATDecl501S3_W datasource = LedgerRRGEDatasourceVATDecl501S3_W::construct();
        datasource.canCollectValuesCustoms(true);

        return VATDeclarationHelper_RU::getSectionData(
            datasource,
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection3dataCustomsPrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 data for Russian VAT declaration, prepayments part.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection3dataCustomsPrepayments(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        LedgerRRGEDatasourceVATDecl501S3_W datasource = LedgerRRGEDatasourceVATDecl501S3_W::construct();
        datasource.canCollectValuesPrepayments(true);

        return VATDeclarationHelper_RU::getSectionData(
            datasource,
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection3dataCustomsPurchVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 data for Russian VAT declaration, purchase VAT part.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection3dataCustomsPurchVAT(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        LedgerRRGEDatasourceVATDecl501S3_W datasource = LedgerRRGEDatasourceVATDecl501S3_W::construct();
        datasource.canCollectValuesPurchVAT(true);

        return VATDeclarationHelper_RU::getSectionData(
            datasource,
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection3dataCustomsRestoredVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 data for Russian VAT declaration, restored VAT part.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection3dataCustomsRestoredVAT(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        LedgerRRGEDatasourceVATDecl501S3_W datasource = LedgerRRGEDatasourceVATDecl501S3_W::construct();
        datasource.canCollectValuesRestoredVAT(true);

        return VATDeclarationHelper_RU::getSectionData(
            datasource,
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection3dataCustomsTaxAgentDeductible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 data for Russian VAT declaration, tax agent deductible part.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection3dataCustomsTaxAgentDeductible(
        TransDate   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        LedgerRRGEDatasourceVATDecl501S3_W datasource = LedgerRRGEDatasourceVATDecl501S3_W::construct();
        datasource.canCollectValuesTaxAgentDeductible(true);

        return VATDeclarationHelper_RU::getSectionData(
            datasource,
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection31data</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 3 appendix 1 data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection31data(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        return VATDeclarationHelper_RU::getSectiondata31Multiline(
            LedgerRRGEDatasourceVATDecl501S31_W::construct(),
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection4data</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 4 data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection4data(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        return VATDeclarationHelper_RU::getSectionData(
            LedgerRRGEDatasourceVATDecl501S4_W::construct(),
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection5data</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 5 data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection5data(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        return VATDeclarationHelper_RU::getSectionData(
            LedgerRRGEDatasourceVATDecl501S5_W::construct(),
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection6data</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section 6 data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    [SysClassNameAttribute(classStr(VATDeclarationData_RU))]
    public static List getSection6data(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        return VATDeclarationHelper_RU::getSectionData(
            LedgerRRGEDatasourceVATDecl501S6_W::construct(),
            _dateFrom,
            _dateTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectiondata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data of the Russian VAT declaration from the given data source.
    /// </summary>
    /// <param name = "_dataSource">
    /// The data source.
    /// </param>
    /// <param name = "_dateFrom">
    /// The period start date.
    /// </param>
    /// <param name = "_dateTo">
    /// The period end date.
    /// </param>
    /// <returns>
    /// The list of <see cref="VATDeclarationData_RU"/> objects.
    /// </returns>
    private static List getSectiondata(
        LedgerRRGEDatasourceVATDeclarationBase_W    _dataSource,
        TransDate                                   _dateFrom,
        TransDate                                   _dateTo)
    {
        LedgerRRGEDatasourceVATDeclaration_W vatDeclaration = LedgerRRGEDatasourceVATDeclaration_W::construct();

        vatDeclaration.parmPeriodStart(_dateFrom);
        vatDeclaration.parmPeriodEnd(_dateTo);
        vatDeclaration.initTablesMap();
        vatDeclaration.initTableSections();

        _dataSource.parmVATDeclaration(vatDeclaration);
        vatDeclaration.addTableSection(_dataSource);

        _dataSource.reset(0);

        List sectionData = new List(Types::Class);

        int sequenceId = 0;

        MapEnumerator tablesEnumerator = _dataSource.tablesMap().getEnumerator();
        boolean recordFound;
        do
        {
            recordFound = false;
            tablesEnumerator.reset();
            while (tablesEnumerator.moveNext())
            {
                if (_dataSource.next(tablesEnumerator.currentKey()))
                {
                    recordFound = true;

                    sequenceId ++;

                    int subsequenceId = 0;

                    MapEnumerator valuesEnumerator = vatDeclaration.getValues().getEnumerator();
                    while (valuesEnumerator.moveNext())
                    {
                        Map fieldValues = valuesEnumerator.currentValue() as Map;
                        MapEnumerator fieldValuesEnumerator = fieldValues ? fieldValues.getEnumerator() : null;

                        subsequenceId ++;

                        while (fieldValuesEnumerator && fieldValuesEnumerator.moveNext())
                        {
                            LedgerRRGEDatasourceField_W field = _dataSource.findField(
                                valuesEnumerator.currentKey(),
                                fieldValuesEnumerator.currentKey());

                            sectionData.addEnd(VATDeclarationData_RU::newData(
                                sequenceId,
                                subsequenceId,
                                field ? field.fieldName() : fieldValuesEnumerator.currentKey(),
                                fieldValuesEnumerator.currentValue()));
                        }
                    }
                    vatDeclaration.resetValues();
                }
            }
        }
        while (recordFound);

        return sectionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectiondata31Multiline</Name>
				<Source><![CDATA[
    private static List getSectiondata31Multiline(
        LedgerRRGEDatasourceVATDecl501S31_W     _dataSource,
        TransDate                               _dateFrom,
        TransDate                               _dateTo)
    {
        LedgerRRGEDatasourceVATDeclaration_W vatDeclaration = LedgerRRGEDatasourceVATDeclaration_W::construct();

        vatDeclaration.parmPeriodStart(_dateFrom);
        vatDeclaration.parmPeriodEnd(_dateTo);
        vatDeclaration.initTablesMap();
        vatDeclaration.initTableSections();

        _dataSource.parmVATDeclaration(vatDeclaration);
        vatDeclaration.addTableSection(_dataSource);

        _dataSource.reset(0);

        List sectionData = new List(Types::Class);

        int sequenceId = 0;
        int subsequenceId = 0;
        while (_dataSource.moveNext())
        {
            if (_dataSource.getLevel() == 1)
            {
                sequenceId ++;
                subsequenceId = 1;
            }
            else
            {
                subsequenceId ++;
            }

            MapEnumerator valuesEnumerator = vatDeclaration.getValues().getEnumerator();
            while (valuesEnumerator.moveNext())
            {
                Map fieldValues = valuesEnumerator.currentValue() as Map;
                MapEnumerator fieldValuesEnumerator = fieldValues ? fieldValues.getEnumerator() : null;

                while (fieldValuesEnumerator && fieldValuesEnumerator.moveNext())
                {
                    LedgerRRGEDatasourceField_W field = _dataSource.findField(
                    valuesEnumerator.currentKey(),
                    fieldValuesEnumerator.currentKey());

                    sectionData.addEnd(VATDeclarationData_RU::newData(
                    sequenceId,
                    subsequenceId,
                    field ? field.fieldName() : fieldValuesEnumerator.currentKey(),
                    fieldValuesEnumerator.currentValue()));
                }
            }
        }

        return sectionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGuid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new new GUID.
    /// </summary>
    /// <returns>
    /// A new GUID.
    /// </returns>
    public static guid newGuid()
    {
        return newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purches book data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <param name = "_groupByFactures">true, if data should be grouped by factures; otherwise, false.</param>
    /// <param name = "_groupCorrect">Exclude original and storno transactions in specified period.</param>
    /// <returns>Table <c>TmpLedgerVATDeclaratoinLine_RU</c> with calculated data.</returns>
    [ERTableName(tableStr(TmpLedgerVATDeclaratoinLine_RU))]
    public static RecordLinkList getPurchBook(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        NoYes        _groupByFactures = NoYes::No,
        NoYes        _groupCorrect = NoYes::No)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmFromDate(_dateFrom);
        contract.parmToDate(_dateTo);
        contract.parmGroupByFactures(_groupByFactures);
        contract.parmGroupCorrect(_groupCorrect);

        LedgerVATDeclReportPurchBook_RU journalReport = LedgerVATDeclReportPurchBook_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        TmpLedgerVATDeclaratoinLine_RU tmpTableLine = journalReport.getLine();

        RecordLinkList result = new RecordLinkList();
        while select tmpTableLine
        {
            result.ins(tmpTableLine);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchBookAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purches book additional sheets data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <param name = "_groupByFactures">true, if data should be grouped by factures; otherwise, false.</param>
    /// <returns>Table <c>TmpLedgerVATDeclaratoinLine_RU</c> with calculated data.</returns>
    [ERTableName(tableStr(TmpLedgerVATDeclaratoinLine_RU))]
    public static RecordLinkList getPurchBookAdd(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        NoYes        _groupByFactures = NoYes::No)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmFromDate(_dateFrom);
        contract.parmToDate(_dateTo);
        contract.parmGroupByFactures(_groupByFactures);

        LedgerVATDeclReportPurchBookAdd_RU journalReport = LedgerVATDeclReportPurchBookAdd_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        TmpLedgerVATDeclaratoinLine_RU tmpTableLine = journalReport.getLine();

        RecordLinkList result = new RecordLinkList();
        while select tmpTableLine
        {
            result.ins(tmpTableLine);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales book data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <param name = "_groupByFactures">true, if data should be grouped by factures; otherwise, false.</param>
    /// <param name = "_groupCorrect">Exclude original and storno transactions in specified period.</param>
    /// <returns>Table <c>TmpLedgerVATDeclaratoinLine_RU</c> with calculated data.</returns>
    [ERTableName(tableStr(TmpLedgerVATDeclaratoinLine_RU))]
    public static RecordLinkList getSalesBook(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        NoYes        _groupByFactures = NoYes::No,
        NoYes        _groupCorrect = NoYes::No)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmFromDate(_dateFrom);
        contract.parmToDate(_dateTo);
        contract.parmGroupByFactures(_groupByFactures);
        contract.parmGroupCorrect(_groupCorrect);

        LedgerVATDeclReportSalesBook_RU journalReport = LedgerVATDeclReportSalesBook_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        TmpLedgerVATDeclaratoinLine_RU tmpTableLine = journalReport.getLine();

        RecordLinkList result = new RecordLinkList();
        while select tmpTableLine
        {
            result.ins(tmpTableLine);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesBookAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales book additional sheets data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <returns>Table <c>TmpLedgerVATDeclaratoinLine_RU</c> with calculated data.</returns>
    [ERTableName(tableStr(TmpLedgerVATDeclaratoinLine_RU))]
    public static RecordLinkList getSalesBookAdd(
        TransDate    _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate    _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmFromDate(_dateFrom);
        contract.parmToDate(_dateTo);

        LedgerVATDeclReportSalesBookAdd_RU journalReport = LedgerVATDeclReportSalesBookAdd_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        TmpLedgerVATDeclaratoinLine_RU tmpTableLine = journalReport.getLine();

        RecordLinkList result = new RecordLinkList();
        while select tmpTableLine
        {
            result.ins(tmpTableLine);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssuedFactures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the issued factures data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <param name = "_outReportMethod">Type of outgoing date.</param>
    /// <param name = "_useReportingDate">true, if use reporting date; otherwise, false.</param>
    /// <returns>Table <c>TmpLedgerVATDeclaratoinLine_RU</c> with calculated data.</returns>
    [ERTableName(tableStr(TmpLedgerVATDeclaratoinLine_RU))]
    public static RecordLinkList getIssuedFactures(
        TransDate                   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate                   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        FactureOutReportMethod_RU   _outReportMethod = FactureOutReportMethod_RU::ByRegDate,
        NoYes                       _useReportingDate = NoYes::No)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmFromDate(_dateFrom);
        contract.parmToDate(_dateTo);
        contract.parmOutReportMethod(_outReportMethod);
        contract.parmUseReportingDate(_useReportingDate);
        contract.parmFactureJourQueryRun(VATDeclarationHelper_RU::initQuery().pack());

        LedgerVATDeclReportIssuedFactures_RU journalReport = LedgerVATDeclReportIssuedFactures_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        TmpLedgerVATDeclaratoinLine_RU tmpTableLine = journalReport.getLine();

        RecordLinkList result = new RecordLinkList();
        while select tmpTableLine
        {
            result.ins(tmpTableLine);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivedFactures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the received factures data for Russian VAT declaration.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <param name = "_outReportMethod">Type of outgoing date.</param>
    /// <param name = "_useReportingDate">true, if use reporting date; otherwise, false.</param>
    /// <returns>Table <c>TmpLedgerVATDeclaratoinLine_RU</c> with calculated data.</returns>
    [ERTableName(tableStr(TmpLedgerVATDeclaratoinLine_RU))]
    public static RecordLinkList getReceivedFactures(
        TransDate                   _dateFrom = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        TransDate                   _dateTo = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
        FactureOutReportMethod_RU   _outReportMethod = FactureOutReportMethod_RU::ByRegDate,
        NoYes                       _useReportingDate = NoYes::No)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmFromDate(_dateFrom);
        contract.parmToDate(_dateTo);
        contract.parmOutReportMethod(_outReportMethod);
        contract.parmUseReportingDate(_useReportingDate);
        contract.parmFactureJourQueryRun(VATDeclarationHelper_RU::initQuery().pack());

        LedgerVATDeclReportReceivedFactures_RU journalReport = LedgerVATDeclReportReceivedFactures_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        TmpLedgerVATDeclaratoinLine_RU tmpTableLine = journalReport.getLine();

        RecordLinkList result = new RecordLinkList();
        while select tmpTableLine
        {
            result.ins(tmpTableLine);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public static SysQueryRun initQuery()
    {
        Query query = new Query();

        query.addDataSource(tableNum(FactureJour_RU));

        query.dataSourceTable(tableNum(FactureJour_RU), fieldNum(FactureJour_RU, Module));
        query.dataSourceTable(tableNum(FactureJour_RU), fieldNum(FactureJour_RU, FactureType));

        findOrCreateRange_W(query.dataSourceNo(1),
                        fieldNum(FactureJour_RU, InventProfileType),
                        con2Str([enum2Value(InventProfileType_RU::CommissionAgent),
                                 enum2Value(InventProfileType_RU::CommissionPrincipalAgent)]));

        SysQueryRun queryRun = new SysQueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>