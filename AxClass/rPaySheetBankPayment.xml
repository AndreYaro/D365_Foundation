<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPaySheetBankPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPaySheetBankPayment extends RunBaseBatch implements BatchRetryable
{
    DialogField     fieldStartPeriod, fieldEndPeriod;
    ReportPeriod_RU startPeriod,      endPeriod;
    RPaySheetTable  paySheetTable;

    QueryRun        queryRun;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        startPeriod,
        endPeriod
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addGroup("@GLS105772");
        fieldStartPeriod = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS4083");
        fieldEndPeriod   = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS5418");
        fieldStartPeriod.value(startPeriod ? startPeriod : RPayParameters::payPeriod());
        fieldEndPeriod.value(endPeriod     ? endPeriod   : RPayParameters::payPeriod());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU endPeriod()
    {
        return endPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            if (! fieldStartPeriod.value())
            {
                return checkFailed("@RUP881");
            }

            if (! fieldEndPeriod.value())
            {
                return checkFailed("@RUP882");
            }

            if (fieldStartPeriod.value() > fieldEndPeriod.value())
            {
                return checkFailed("@RUP883");
            }
            startPeriod  = endmth(fieldStartPeriod.value());
            endPeriod    = endmth(fieldEndPeriod.value());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private Query initQuery()
    {
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        Query                   query;

        query = new Query(queryStr(RPaySheetBankPayment));

        qbd   = query.dataSourceTable(tableNum(RPaySheetTrans));
        qbr   = qbd.rangeField(fieldNum(RPaySheetTrans, SendToBank));
        qbr.value(queryValue(NoYes::Yes));

        qbd   = query.dataSourceTable(tableNum(RPaySheetTable));
        qbr   = qbd.rangeField(fieldNum(RPaySheetTable,PaySheetSost));
        qbr.value(queryValue(RPaySheetSost::ForPaid) + ',' + queryValue(RPaySheetSost::Paid));

        if (paySheetTable)
        {
            startPeriod = paySheetTable.PayPeriod;
            endPeriod   = paySheetTable.PayPeriod;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private void initQueryRun()
    {
        queryRun = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    private void modifyQuery()
    {
        if (paySheetTable)
        {
            startPeriod = paySheetTable.PayPeriod;
            endPeriod   = paySheetTable.PayPeriod;
            findOrCreateRange_W(this.queryRun().query().dataSourceTable(tableNum(RPaySheetTable)), fieldNum(RPaySheetTable, RecId), queryValue(paySheetTable.RecId));
        }

        findOrCreateRange_W(this.queryRun().query().dataSourceTable(tableNum(RPaySheetTable)), fieldNum(RPaySheetTable, PayPeriod), SysQuery::range(startPeriod,endPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun ? queryRun.pack() : conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetTable</Name>
				<Source><![CDATA[
    private RPaySheetTable paySheetTable(RPaySheetTable _paySheetTable = paySheetTable)
    {
        paySheetTable = _paySheetTable;
        return paySheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        OXMLExcelReport_RPaySheetBankPayment report = new OXMLExcelReport_RPaySheetBankPayment();

        if (paySheetTable)
        {
            this.initQueryRun();
        }

        this.modifyQuery();

        report.setQueryRun(queryRun);
        report.parmStartPeriod(startPeriod);
        report.parmEndPeriod(endPeriod);
        report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU startPeriod()
    {
        return startPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container packedQR;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQR] = packedClass;
                if (SysQuery::isPackedOk(packedQR))
                {
                    queryRun = new QueryRun(packedQR);
                }
                else
                {
                    this.initQueryRun();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP1128";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPaySheetBankPayment    rPaySheetBankPayment = new RPaySheetBankPayment();

        if (_args.record() && _args.record().TableId == tableNum(RPaySheetTable))
        {
            rPaySheetBankPayment.paySheetTable(_args.record());
        }

        if (rPaySheetBankPayment.paySheetTable() ? true : rPaySheetBankPayment.prompt())
        {
            rPaySheetBankPayment.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>