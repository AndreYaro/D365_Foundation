<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>oxmlExcelReport_RPaySheetCalcTotalReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The paysheet report.
/// </summary>
class oxmlExcelReport_RPaySheetCalcTotalReport extends OXMLExcelReport_RPay implements BatchRetryable
{
    QueryRun reportQR;
    RPaySheetTable  sheetTable;
    ReportPeriod_RU payPeriod;
    RPaySheetType   sheetType;

    date        reportDate;
    utcdatetime reportTime;
    int         stateCurrent;
    Counter     pageNumber, numOfLines, lineNo;
    RPayAmount  sheetTotalAmount, sheetBankTotalAmount, sheetCashTotalAmount, sheetDepositTotalAmount;

    #define.FileName('Total payroll')
    #define.PageHeader('PageHeader')
    #define.ReportHeader('ReportHeader')
    #define.TableHeader('TableHeader')
    #define.Body('Body')
    #define.Footer('Footer')
    #define.NewPage('NewPage') //pseudo section used to define new page action

    #define.CompanyName('CompanyName')
    #define.PageNo('PageNo')
    #define.ReportDate('ReportDate')
    #define.ReportTime('ReportTime')
    #define.ReportNameText('ReportNameText')

    #define.PaySheetPeriodText('PaySheetPeriodText')
    #define.PaySheetTypeText('PaySheetTypeText')
    #define.PaySheetPeriod('PaySheetPeriod')
    #define.PaySheetType('PaySheetType')

    #define.DeptCodeText('DeptCodeText')
    #define.SheetNoText('SheetNoText')
    #define.SheetNameText('SheetNameText')
    #define.SheetStateText('SheetStateText')
    #define.SheetAmountText('SheetAmountText')
    #define.SheetAmountCashText('SheetAmountCashText')
    #define.SheetAmountBankText('SheetAmountBankText')
    #define.SheetAmountDepositTxt('SheetAmountDepositTxt')

    #define.DeptCode('DeptCode')
    #define.SheetNo('SheetNo')
    #define.SheetName('SheetName')
    #define.SheetState('SheetState')
    #define.SheetAmount('SheetAmount')
    #define.AmountCash('AmountCash')
    #define.AmountBank('AmountBank')
    #define.AmountDeposit('AmountDeposit')

    #define.TotalTxt('TotalTxt')
    #define.SheetTotalAmount('SheetTotalAmount')
    #define.AmountCashTotal('AmountCashTotal')
    #define.AmountBankTotal('AmountBankTotal')
    #define.AmountDepositTotal('AmountDepositTotal')

    #define.StateStart  (0)
    #define.StatePrint  (1)
    #define.StateEnd    (2)

    #define.WidthPage(167)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
        protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(14.4)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
        protected void createReport()
    {
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #WidthPage);

        reportDate   = DateTimeUtil::date(DateTimeUtil::utcNow());
        reportTime   = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getClientMachineTimeZone());

        stateCurrent = #StateStart;

        while (reportQR.next())
        {
            sheetTable = reportQR.get(tableNum(RPaySheetTable));

            this.handleAction(this.defineActionSeq());
        }

        if (this.isSectionPrinted())
        {
            this.handleAction(this.defineActionSeq());
            this.setPrintArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
        private container defineActionSeq()
    {
        container con;

        if (stateCurrent == #StateStart && sheetTable != null)
        {
            pageNumber = 1;
            con = [#PageHeader, #ReportHeader, #TableHeader, #Body];

            stateCurrent = #StatePrint;
        }
        else if (stateCurrent == #StatePrint)
        {
            if (this.isNewPage())
            {
                con = [#NewPage, #PageHeader];
            }

            if ((payPeriod != sheetTable.PayPeriod || sheetType != sheetTable.PaySheetType) && sheetTable != null)
            {
                con += #ReportHeader;
                con += #TableHeader;
            }

            if (sheetTable == null)
            {
                con = [#Footer];
                stateCurrent = #StateEnd;
            }
            else
            {
                con += [#Body];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
        protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
        protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report body.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        RPayAmount  sheetBankAmount, sheetCashAmount, sheetDepositAmount;

        sheetCashAmount = sheetTable.payCachSum();
        sheetBankAmount = sheetTable.payBankSum();
        sheetDepositAmount = sheetTable.depositSum();

        this.insertValueToSection(#DeptCode, sheetTable.HrmOrganisationId);
        this.insertValueToSection(#SheetNo, sheetTable.PaySheetNum);
        this.insertValueToSection(#SheetName, sheetTable.Name);
        this.insertValueToSection(#SheetState, strFmt("@GLS106745", sheetTable.PaySheetSost));
        this.insertValueToSection(#SheetAmount, sheetTable.SumSheet);
        this.insertValueToSection(#AmountCash, sheetCashAmount);
        this.insertValueToSection(#AmountBank, sheetBankAmount);
        this.insertValueToSection(#AmountDeposit, sheetDepositAmount);

        sheetTotalAmount        += sheetTable.SumSheet;
        sheetCashTotalAmount    += sheetCashAmount;
        sheetBankTotalAmount    += sheetBankAmount;
        sheetDepositTotalAmount += sheetDepositAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
        protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #PageHeader:
                this.fillPageHeader();
                break;
            case #ReportHeader:
                this.fillReportHeader();
                break;
            case #TableHeader:
                this.fillTableHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillTotal();
                break;
            case #NewPage:
                this.newPage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the page header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        this.insertValueToSection(#CompanyName, CompanyInfo::find().Name);
        this.insertValueToSection(#PageNo, strFmt("@SYS24160", pageNumber));
        this.insertValueToSection(#ReportDate, reportDate);
        this.insertValueToSection(#ReportTime, reportTime);
        this.insertValueToSection(#ReportNameText, "@RUP755");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        this.insertValueToSection(#PaySheetPeriodText, fieldId2pname(tableNum(RPaySheetTable), fieldNum(RPaySheetTable, PayPeriod)));
        this.insertValueToSection(#PaySheetPeriod, sheetTable.PayPeriod);
        this.insertValueToSection(#PaySheetTypeText, fieldId2pname(tableNum(RPaySheetTable), fieldNum(RPaySheetTable, PaySheetType)));
        this.insertValueToSection(#PaySheetType, sheetTable.PaySheetType);

        payPeriod = sheetTable.PayPeriod;
        sheetType = sheetTable.PaySheetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the table header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTableHeader()
    {
        this.insertValueToSection(#DeptCodeText, fieldId2pname(tableNum(RPaySheetTable), fieldNum(RPaySheetTable, HrmOrganisationId)));
        this.insertValueToSection(#SheetNoText, fieldId2pname(tableNum(RPaySheetTable), fieldNum(RPaySheetTable, PaySheetNum)));
        this.insertValueToSection(#SheetNameText, fieldId2pname(tableNum(RPaySheetTable), fieldNum(RPaySheetTable, Name)));
        this.insertValueToSection(#SheetStateText, fieldId2pname(tableNum(RPaySheetTable), fieldNum(RPaySheetTable, PaySheetSost)));
        this.insertValueToSection(#SheetAmountText, "@RUP509");
        this.insertValueToSection(#SheetAmountCashText, "@RUP717");
        this.insertValueToSection(#SheetAmountBankText, "@RUP718");
        this.insertValueToSection(#SheetAmountDepositTxt, "@GLS105966");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the totals.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTotal()
    {
        this.insertValueToSection(#TotalTxt, "@GLS110742");
        this.insertValueToSection(#SheetTotalAmount, sheetTotalAmount);
        this.insertValueToSection(#AmountCashTotal, sheetCashTotalAmount);
        this.insertValueToSection(#AmountBankTotal, sheetBankTotalAmount);
        this.insertValueToSection(#AmountDepositTotal, sheetDepositTotalAmount);

        sheetTotalAmount = 0;
        sheetCashTotalAmount = 0;
        sheetBankTotalAmount = 0;
        sheetDepositTotalAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
        private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
        protected void initSectionMap()
    {
        this.addSection(#PageHeader);
        this.addSection(#ReportHeader);
        this.addSection(#TableHeader);
        this.addSection(#Body);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPage</Name>
				<Source><![CDATA[
        private boolean isNewPage()
    {
        real    requiredHeight;

        if (payPeriod == sheetTable.PayPeriod)
        {
            requiredHeight = this.getRangeHeight(#Body);
        }
        else
        {
            requiredHeight = conPeek(mapSections.lookup(#Footer), #posSectionHeight);
        }

        return (pageHeight - currentHeight < requiredHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
        private void newPage()
    {
        pageNumber++;

        document.insertPageBreak(currentRow);
        currentHeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the <c>QueryRun</c> object to be used.
    /// </summary>
    /// <param name="_qr">
    /// The <c>QueryRun</c> object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setQueryRun(QueryRun _qr)
    {
        reportQR = _qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
        protected Filename templateName()
    {
        return resourceStr(RPaySheetCalcTotalReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
        protected Counter totalCells()
    {
        return SysQuery::countTotal(reportQR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>