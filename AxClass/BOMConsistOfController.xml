<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>bomConsistOfController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMConsistOfController</c> class is the controller class for the related SSRS report.
/// </summary>
public class bomConsistOfController extends SrsReportRunController implements BatchRetryable
{
    BOMConsistOfContract    contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCalledFromBomDesigner</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the objects based on the caller.
    /// </summary>
    /// <returns>
    ///    Returns the args object status.
    /// </returns>
    protected boolean isCalledFromBomDesigner()
    {
        boolean ret;

        if (this.parmArgs()                 &&
            this.parmArgs().parmObject()    &&
            this.parmArgs().parmObject().name() == classStr(BOMDesignerCtrl))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the query based on the caller.
    /// </summary>
    /// <remarks>
    ///    The execution of this method happens before the dialog is prompted.
    /// </remarks>
    public void prePromptModifyContract()
    {
        Query                   query;
        BOMDesignerCtrl         bomDesignerCtrl;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRangeItemId;
        int                     nodeIdx;
        ItemId                  itemId;

        contract = this.parmReportContract().parmRdpContract() as BOMConsistOfContract;
        query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        queryBuildDataSource = query.dataSourceTable(tableNum(InventTable));

        if (!this.isCalledFromBomDesigner())
        {
            queryBuildDataSource.findRange(fieldNum(InventTable,ItemType)).value(InventItemType::valueCanHaveBOM());
            return;
        }
        else
        {
            bomDesignerCtrl = this.parmArgs().parmObject();
            nodeIdx = str2int(this.parmArgs().parm());
        }

        itemId = bomDesignerCtrl.itemId(nodeIdx);

        queryBuildRangeItemId = queryBuildDataSource.findRange(fieldNum(InventTable,ItemId));

        if (! queryBuildRangeItemId)
        {
            queryBuildRangeItemId = queryBuildDataSource.addRange(fieldNum(InventTable,ItemId));
        }
        queryBuildRangeItemId.value(itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity for validation prior to running the report.
    /// </summary>
    /// <returns>
    /// A container containing two items. The first item is the <c>SrsReportPreRunState</c>
    /// enumeration. The second item is the message to show to the user.
    /// </returns>
    protected container preRunValidate()
    {
        // More than 1,000 items with 5 * BOM lines and 2 * versions will take approx 10 minutes on a warm box and not under load
        // while 100 items will take about 10 seconds, so these are used as the warning and error limits.
        #Define.ErrorLimit(1000)
        #Define.WarningLimit(100)

        // Using the query from the contract, count up to the error limit + 1 since anything
        // over the error limit will return the same error
        Query       query = this.getFirstQuery();

        // InventDim is only used for special filtering and not joined to InventTable therefore we skip it in the count
        query.dataSourceTable(tableNum(InventDim)).enabled(false);
        int rowCount = QueryRun::getQueryRowCount(query, #ErrorLimit + 1);
        query.dataSourceTable(tableNum(InventDim)).enabled(true);

        container   validateResult;
        if (rowCount > #ErrorLimit)
        {
            validateResult = [SrsReportPreRunState::Error];
        }
        else if (rowCount > #WarningLimit)
        {
            validateResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validateResult = super();
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the <c>SRSReportRunController</c>, assign parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        SrsReportRunController    controller = new BOMConsistOfController();
        controller.parmReportName(ssrsReportStr(BOMConsistOf, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>