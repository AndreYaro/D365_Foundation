<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobTmpPickListLoaderProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobTmpPickListLoader</c> class loads picking list records for the process kanban board.
/// </summary>
public class KanbanJobTmpPickListLoaderProcess extends KanbanJobTmpPickListLoader
{
    QueryRun                    queryRun;
    KanbanJobPickingList        kanbanJobPickingList;
    InventTableModule           inventTableModule;

    InventTransOriginId         issueInventTransOriginId;
    boolean                     cachedInventTransOriginId;
    boolean                     loadAllLinesForKanban;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFlushPrincipleAndKanbanJobStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Kanban job status and its picking list flushin principle should be checked before setting supply status.
    /// </summary>
    /// <returns>
    ///    true if kanban job status is consistent with its picking list flushing principle; otherwise, false.
    /// </returns>
    protected boolean checkFlushPrincipleAndKanbanJobStatus()
    {
        if ((kanbanJob.Status >= LeanKanbanJobStatus::Prepared
            && kanbanJob.Status <= LeanKanbanJobStatus::InProgress)
            && kanbanJobPickingList.FlushingPrinciple > FlushingPrincipKanban::Prepare)
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next record.
    /// </summary>
    /// <returns>
    /// true if a next record exists; otherwise, false.
    /// </returns>
    protected boolean getNext()
    {
        boolean result;

        if (queryRun)
        {
            result = queryRun.next();

            if (result)
            {
                cachedInventTransOriginId = false;
                kanbanJobPickingList      = queryRun.get(tableNum(KanbanJobPickingList));
                kanbanJob                 = KanbanJob::find(kanbanJobPickingList.Job);
                kanbanEventQuantityMap    = KanbanEventQuantityMap::newStandard(kanbanJobPickingList);
                inventTableModule         = queryRun.get(tableNum(InventTableModule));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWHSWave</Name>
				<Source><![CDATA[
    protected boolean hasWHSWave()
    {
        boolean ret = false;

        ret = WHSKanbanWaveLine::existsForInventTransIdNotPicked(kanbanJobPickingList.InventTransId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWHSWork</Name>
				<Source><![CDATA[
    protected boolean hasWHSWork()
    {
        boolean ret = false;

        ret = WHSWorkLine::existForInventTransIdNotClosed(kanbanJobPickingList.InventTransId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record has an output order.
    /// </summary>
    /// <returns>
    /// true if the current record has an output order; otherwise, false.
    /// </returns>
    protected boolean hasWMSOrder()
    {
        return kanbanJobPickingList.hasWMSOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables.
    /// </summary>
    protected void init()
    {
        QueryBuildRange         queryBuildRange;
        int                     i;

        super();

        if (numberOfJobs > 0)
        {
            queryRun = new QueryRun(queryStr(KanbanJobPickList));
            QueryBuildDataSource qbdsKanbanJobPickingList = queryRun.query().dataSourceTable(tableNum(KanbanJobPickingList));

            for (i=1; i<= numberOfJobs; i++)
            {
                container         containerFieldFilters = conPeek(containerKanbanJobs,i);
                KanbanJobRefRecId kanbanJobRecId        = conPeek(containerFieldFilters,1);
                KanbanRefRecId    kanbanRecId           = conPeek(containerFieldFilters,2);

                if (loadAllLinesForKanban)
                {
                    queryBuildRange = qbdsKanbanJobPickingList.addRange(fieldNum(KanbanJobPickingList,Kanban));
                    queryBuildRange.value(queryValue(kanbanRecId));
                }
                else
                {
                    queryBuildRange = qbdsKanbanJobPickingList.addRange(fieldNum(KanbanJobPickingList,Job));
                    queryBuildRange.value(queryValue(
                                                     kanbanJobRecId
                                                     ));
                }
            }

            qbdsKanbanJobPickingList.addSortField(fieldNum(KanbanJobPickingList,ItemId),SortOrder::Ascending);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current inventory dimension ID.
    /// </summary>
    /// <returns>
    ///    The current inventory dimension ID.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return kanbanJobPickingList.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current inventory transaction origin.
    /// </summary>
    /// <returns>
    ///    The current inventory transaction origin.
    /// </returns>
    protected InventTransOriginId issueInventTransOriginId()
    {
        if (!cachedInventTransOriginId)
        {
            issueInventTransOriginId  = kanbanJobPickingList.inventTransOriginId();
            cachedInventTransOriginId = true;
        }

        return issueInventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current item ID.
    /// </summary>
    /// <returns>
    ///    The current item ID.
    /// </returns>
    protected ItemId itemId()
    {
        return kanbanJobPickingList.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current line type.
    /// </summary>
    /// <returns>
    ///    The current line type.
    /// </returns>
    protected KanbanJobPickingListLineType lineType()
    {
        return kanbanJobPickingList.LineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadAllLinesForKanban</Name>
				<Source><![CDATA[
    public boolean parmLoadAllLinesForKanban(boolean _loadAllLinesForKanban = loadAllLinesForKanban)
    {
        loadAllLinesForKanban = _loadAllLinesForKanban;
        return loadAllLinesForKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current quantity.
    /// </summary>
    /// <returns>
    ///    The current quantity.
    /// </returns>
    protected InventQty quantity()
    {
        return kanbanJobPickingList.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current unit ID.
    /// </summary>
    /// <returns>
    ///    The current unit ID.
    /// </returns>
    protected UnitIDBase unitId()
    {
        return inventTableModule.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrderQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the inventory quantity of open output orders that are related to the current record.
    /// </summary>
    /// <returns>
    /// The inventory quantity of output orders that are related to the current record.
    /// </returns>
    protected InventQty wmsOrderQuantity()
    {
        return kanbanJobPickingList.wmsOrderQuantity(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanJobTmpPickListLoaderProcess construct()
    {
        return new KanbanJobTmpPickListLoaderProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>KanbanJobTmpPickListLoaderProcess</c> class.
    /// </summary>
    /// <param name="_containerKanbanJobs">
    /// A container that contains the kanban job and kanban record IDs for which the picking list is needed.
    /// </param>
    /// <param name="_loadAllLinesForKanban">
    /// A Boolean value that defines, if the picking list should be created for the entire kanban of the given jobs.
    /// </param>
    /// <returns>
    /// A new instance of the <c>KanbanJobTmpPickListLoaderProcess</c> class.
    /// </returns>
    /// <remarks>
    /// The Boolean value has been added to the signature and must be specified.
    /// </remarks>
    public static KanbanJobTmpPickListLoaderProcess newStandard(
        container _containerKanbanJobs
        ,
        boolean   _loadAllLinesForKanban
        )
    {
        KanbanJobTmpPickListLoaderProcess  kanbanJobTmpPickListLoaderProcess = KanbanJobTmpPickListLoaderProcess::construct();

        kanbanJobTmpPickListLoaderProcess.parmContainerKanbanJobs(_containerKanbanJobs);
        kanbanJobTmpPickListLoaderProcess.parmLoadAllLinesForKanban(_loadAllLinesForKanban);

        return kanbanJobTmpPickListLoaderProcess;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
