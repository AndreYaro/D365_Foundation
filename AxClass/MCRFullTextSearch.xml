<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRFullTextSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRFullTextSearch</c> class contains methods helpful for searching.
/// </summary>
class MCRFullTextSearch
{
    const str space = ' ';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSearchTextFromSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the search text from the set of fields.
    /// </summary>
    /// <param name="_table">
    /// The record that holds the full text index fields to be used in the search.
    /// </param>
    /// <param name="_fieldSet">
    /// The set of fields to use for building the text.
    /// </param>
    /// <returns>
    /// The search text.
    /// </returns>
    public static MCRSearchText buildSearchTextFromSet(Common _table, Set _fieldSet)
    {
        DictTable               dictTable;
        MCRSearchText           mcrSearchtextReturn;
        MCRSearchText           fieldText;

        dictTable = new DictTable(_table.TableId);
        var enumerator = _fieldSet.getEnumerator();
        FieldName field;
        // loop through all of the table index fields.
        while (enumerator.moveNext())
        {
            field = enumerator.current();
            if (dictTable.fieldName2Id(field) == 0)
            {
                throw error(strFmt("@MCR39968", field, tableId2Name(_table.TableId)));
            }

            fieldText = MCRFullTextSearch::getFieldText(dictTable, field, _table);

            if (fieldText != space)
            {
                mcrSearchtextReturn += fieldText;
            }
        }
        return mcrSearchtextReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the user specified fields to do search on and returns them as a set.
    /// </summary>
    /// <param name = "_sourceTableId">The id of the source table.</param>
    /// <returns>The set containing the fields to do search on.</returns>
    public static Set getFieldsSet(TableId _sourceTableId)
    {
        DictTable               dictTable;
        DictField               dictField;
        MCRFullTextIndexField   mcrFullTextIndexField;
        TableName               searchTableName = tableId2Name(_sourceTableId);

        Set fieldsSet = new Set(Types::String);
        dictTable = new DictTable(_sourceTableId);

        // loop through all of the table index fields.
        while select Field, Source from mcrFullTextIndexField
                where mcrFullTextIndexField.Source == searchTableName
        {
            fieldsSet.add(mcrFullTextIndexField.Field);
        }

        return fieldsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the search text.
    /// </summary>
    /// <param name="_table">
    /// The record that holds the full text index fields to be used in the search.
    /// </param>
    /// <returns>
    /// The search text.
    /// </returns>
    public static MCRSearchText buildSearchText(Common _table)
    {
        DictTable               dictTable;

        MCRFullTextIndexField   mcrFullTextIndexField;
        MCRSearchText           mcrSearchtextReturn;
        MCRSearchText           fieldText;
        Common                  view = MCRFullTextIndexField::viewFromTable(_table);
        
        if (MCRFullTextSearch::mustBuildSearchTextForTable(_table))
        {
            dictTable = new DictTable(view.TableId);
            // loop through all of the table index fields.
            while select Field, Source from mcrFullTextIndexField
                where mcrFullTextIndexField.Source == tableid2name(view.TableId)
            {
                if (dictTable.fieldName2Id(mcrFullTextIndexField.Field) == 0)
                {
                    throw error(strFmt("@MCR39968", mcrFullTextIndexField.Field, mcrFullTextIndexField.Source));
                }

                fieldText = MCRFullTextSearch::getFieldText(dictTable, mcrFullTextIndexField.Field, view);

                if (fieldText != space)
                {
                    mcrSearchtextReturn += fieldText;
                }
            }
        }
        return mcrSearchtextReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBuildSearchTextForTable</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Determines whether the search text must be built.
    /// </summary>
    /// <param name = "_table">
    ///		The record that holds the full text index fields to be used in the search.
	/// </param>
    /// <returns>
    ///		true if the search text must be built; otherwise, false.
	/// </returns>
    protected static boolean mustBuildSearchTextForTable(Common _table)
    {
        if (_table.TableId == tableNum(InventDistinctProduct)
            || _table.TableId == tableNum(CustTable)
            || _table.TableId == tableNum(smmBusRelTable))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldText</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method gets the table to be worked as a <c>DictTable</c> and returns the necessary textual representation based on the field.
    /// </summary>
    /// <param name = "_dictTable">The source table as a <c>DictTable</c> object.</param>
    /// <param name = "_field">The name of the field to be parsed.</param>
    /// <param name = "_common">The actual source table record.</param>
    /// <returns>The textual representation of a field.</returns>
    private static str getFieldText(DictTable _dictTable, FieldName _field, Common _common)
    {
        DictField dictField;
        str       fieldText;

        dictField = new DictField(_common.TableId, _dictTable.fieldName2Id(_field));

        switch (dictField.baseType())
        {
            case Types::Enum:
                fieldText = enum2str(_common.(_dictTable.fieldName2Id(_field))) + space;
                break;
            case Types::Int64:
                fieldText = int642str(_common.(_dictTable.fieldName2Id(_field))) + space;
                break;
            case Types::Date:
                fieldText = date2str(_common.(_dictTable.fieldName2Id(_field)), 123, 2, 2, 2, 2, 4, DateFlags::None) + space;
                break;
            case Types::Integer:
                fieldText = int2str(_common.(_dictTable.fieldName2Id(_field))) + space;
                break;
            case Types::Time:
                fieldText = time2str(_common.(_dictTable.fieldName2Id(_field)), 1, 1) + space;
                break;
            case Types::UtcDateTime:
                fieldText = datetime2str(_common.(_dictTable.fieldName2Id(_field)), 1) + space ;
                break;
            case Types::Real:
                fieldText = int2str(real2int(_common.(_dictTable.fieldName2Id(_field)))) + space;
                break;

            default:
                fieldText = _common.(_dictTable.fieldName2Id(_field)) + space;
        }

        return fieldText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>mcrCustTableIndex</c> record that relates to the passed in record.
    /// </summary>
    /// <param name="_common">
    /// The record that is going to have the related <c>MCRCustTableIndex</c> record deleted.
    /// </param>
    public static void delete(Common _common)
    {
        MCRCustTableIndex mcrCustTableIndex;

        if (_common
            && (_common.TableId == tableNum(CustTable)
            ||  _common.TableId == tableNum(smmBusRelTable)))
        {
            ttsBegin;

            mcrCustTableIndex = MCRCustTableIndex::find(_common.RecId, _common.TableId, true);
            if (mcrCustTableIndex)
            {
                if (mcrCustTableIndex.validateDelete())
                {
                    mcrCustTableIndex.delete();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>MCRCustTableIndex</c> or <c>MCRInventTableIndex</c> record
    ///     that will relate to the passed in record.
    /// </summary>
    /// <param name="_common">
    /// Record the resulting <c>MCRInventTableIndex</c> or <c>MCRCustTableIndex</c> will relate to
    /// Must be <c>CustTable</c> or <c>InventDistinctProduct</c> or <c>smmBusRelTable</c>.
    /// </param>
    public static void insert(Common _common)
    {
        MCRCustTableIndex       mcrCustTableIndex;
        MCRInventTableIndex     mcrInventTableIndex;
        TableId                 refTableId = _common.TableId;

        if (_common)
        {
            ttsBegin;

            switch (refTableId)
            {
                case tableNum(CustTable):
                case tableNum(smmBusRelTable):
                    if (isConfigurationkeyEnabled(configurationKeyNum(TradeCustomerSearch)))
                    {
                        mcrCustTableIndex.RefTableId = refTableId;
                        mcrCustTableIndex.RefRecId = _common.RecId;
                        mcrCustTableIndex.SearchText = MCRFullTextSearch::BuildSearchText(_common);
                        // If the current record does not generate any search text, do not
                        //  create a record.  Do not want to generate an error either, as this
                        //  behavior is acceptable.
                        if (mcrCustTableIndex.SearchText)
                        {
                            if (mcrCustTableIndex.validateWrite())
                            {
                                mcrCustTableIndex.insert();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                        }
                    }
                    break;
                case tableNum(InventDistinctProduct):
                    if (isConfigurationkeyEnabled(configurationKeyNum(TradeItemSearch)))
                    {
                        InventDistinctProduct inventDistinctProduct = _common as InventDistinctProduct;
                        mcrInventTableIndex.RefRecId = inventDistinctProduct.Product;
                        mcrInventTableIndex.SearchText = MCRFullTextSearch::BuildSearchText(_common);

                        // If the current record does not generate any search text, do not
                        //  create a record.  Do not want to generate an error either, as this
                        //  behavior is acceptable.
                        if (mcrInventTableIndex.SearchText)
                        {
                            if (mcrInventTableIndex.validateWrite())
                            {
                                mcrInventTableIndex.insert();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                        }
                    }
                    break;
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchRecordFromView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record for the search table based on the input view type and returns it.
    /// </summary>
    /// <param name = "_searchView">The table/view used as an input for search record generation.</param>
    /// <param name = "_fieldSet">The set of fields to be used.</param>
    /// <returns>The record to be inserted to the index table.</returns>
    public static Common getSearchRecordFromView(Common _searchView, Set _fieldSet)
    {
        MCRCustTableIndex       mcrCustTableIndex;
        MCRInventTableIndex     mcrInventTableIndex;

        if (_searchView && _fieldSet)
        {
            switch (_searchView.TableId)
            {
                case tableNum(MCRCustomerSearchView):
                case tableNum(MCRSmmBusRelSearchView):
                    if (isConfigurationkeyEnabled(configurationKeyNum(TradeCustomerSearch)))
                    {
                        var sourceTableRecord = MCRFullTextSearch::findSourceTableRecord(_searchView);
                        mcrCustTableIndex.RefTableId = sourceTableRecord.TableId;
                        mcrCustTableIndex.RefRecId = sourceTableRecord.RecId;
                        mcrCustTableIndex.SearchText = MCRFullTextSearch::buildSearchTextFromSet(_searchView, _fieldSet);
                        if (!mcrCustTableIndex.SearchText)
                        {
                            return null;
                        }
                        return mcrCustTableIndex;
                    }

                    break;
                case tableNum(MCRProductSearchView):
                    if (isConfigurationkeyEnabled(configurationKeyNum(TradeItemSearch)))
                    {
                        MCRProductSearchView productSearchView = _searchView as MCRProductSearchView;
                        mcrInventTableIndex.RefRecId = productSearchView.Product;
                        mcrInventTableIndex.SearchText = MCRFullTextSearch::buildSearchTextFromSet(_searchView, _fieldSet);
                        if (!mcrInventTableIndex.SearchText)
                        {
                            return null;
                        }
                        return mcrInventTableIndex;
                    }
                    break;
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the source table and returns the record which has the corresponding unique id.
    /// </summary>
    /// <param name = "_searchView">The view to be used for finding the record.</param>
    /// <returns>The record found.</returns>
    /// <remarks>Not needed for the product search as it directly uptakes the product reference recid.</remarks>
    private static Common findSourceTableRecord(Common _searchView)
    {
        switch (_searchView.TableId)
        {
            case tableNum(MCRCustomerSearchView):
                MCRCustomerSearchView customerSearchView = _searchView as MCRCustomerSearchView;
                CustTable custTable;
                select firstonly custTable where custTable.AccountNum == customerSearchView.AccountNum;
                return custTable;
            case tableNum(MCRSmmBusRelSearchView):
                MCRSmmBusRelSearchView busRelSearchView = _searchView as MCRSmmBusRelSearchView;
                smmBusRelTable busRelTable;
                select firstonly busRelTable where busRelTable.BusRelAccount == busRelSearchView.BusRelAccount;
                return busRelTable;
            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all records in corresponding search index table based on passed type.
    /// </summary>
    /// <param name="_type">
    /// The type of search.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Error thrown when value passed is not supported.
    /// </exception>
    [Replaceable]
    public static void truncate(MCRFullTextSearchType _type)
    {
        MCRCustTableIndex   mcrCustTableIndex;
        MCRInventTableIndex mcrInventTableIndex;

        ttsBegin;

        switch (_type)
        {
            case MCRFullTextSearchType::Item:
                delete_from mcrInventTableIndex;
                break;
            case MCRFullTextSearchType::BusRel:
                delete_from mcrCustTableIndex
                    where mcrCustTableIndex.RefTableId == tableNum(smmBusRelTable);
                break;
            case MCRFullTextSearchType::Customer:
                delete_from mcrCustTableIndex
                    where mcrCustTableIndex.RefTableId == tableNum(CustTable);
                break;
            default:
                throw error("@MCR35737");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>InventDistinctProduct</c> table if it was empty and if the search type is for products.
    /// </summary>
    /// <param name = "_type">The type of search.</param>
    public static void populateInventDistinctProduct(MCRFullTextSearchType _type)
    {
        if (_type == MCRFullTextSearchType::Item
                && !InventDistinctProduct::isTablePopulated())
        {
            InventDistinctProduct::populateTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>MCRCustTableIndex</c> or <c>MCRInventTableIndex</c> record
    /// that will relate to the passed in record.
    /// </summary>
    /// <param name="_common">
    /// Related record the resulting <c>MCRInventTableIndex</c> or <c>MCRCustTableIndex</c> will relate to
    /// Must be <c>CustTable</c> or <c>InventDistinctProduct</c> or <c>smmBusRelTable</c>.
    /// </param>
    public static void update(Common _common)
    {
        MCRCustTableIndex       mcrCustTableIndex;
        MCRInventTableIndex     mcrInventTableIndex;

        if (_common)
        {
            ttsBegin;

            switch (_common.TableId)
            {
                case tableNum(CustTable):
                case tableNum(smmBusRelTable):
                    mcrCustTableIndex = MCRCustTableIndex::find(_common.RecId, _common.TableId, true);
                    if (mcrCustTableIndex)
                    {
                        mcrCustTableIndex.SearchText = MCRFullTextSearch::BuildSearchText(_common);
                        if (mcrCustTableIndex.SearchText)
                        {
                            if (mcrCustTableIndex.validateWrite())
                            {
                                mcrCustTableIndex.update();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                        }
                        // To stay consistent with insert, delete the index record
                        //      if the search text is now blank.
                        else
                        {
                            if (mcrCustTableIndex.validateDelete())
                            {
                                mcrCustTableIndex.delete();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                        }
                    }
                    else
                    {
                        MCRFullTextSearch::insert(_common);
                    }
                    break;
                case tableNum(InventDistinctProduct):
                    var inventDistinctProduct = _common as InventDistinctProduct;
                    mcrInventTableIndex = MCRInventTableIndex::find(inventDistinctProduct.Product, true);
                    if (mcrInventTableIndex)
                    {
                        mcrInventTableIndex.SearchText = MCRFullTextSearch::BuildSearchText(_common);
                        if (mcrInventTableIndex.SearchText)
                        {
                            if (mcrInventTableIndex.validateWrite())
                            {
                                mcrInventTableIndex.update();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                        }
                        // To stay consistent with insert, delete the index record
                        //      if the search text is now blank.
                        else
                        {
                            if (mcrInventTableIndex.validateDelete())
                            {
                                mcrInventTableIndex.delete();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                        }
                    }
                    else
                    {
                        MCRFullTextSearch::insert(_common);
                    }
                    break;
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSearchFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the search text.
    /// </summary>
    /// <param name="_source">
    /// The <c>MCRFullTextSearchType</c> enumeration value used to update the search.
    /// </param>
    public static void updateSearchFields(MCRFullTextSearchType _source)
    {
        #avifiles
        Common common;
        DictTable dt;
        SysOperationProgress simpleProgress;
        int counter;

        // Allow the view to be looped over
        dt = new DictTable(MCRFullTextIndexField::tableIdFromEnum(_source));
        common = dt.makeRecord();

        if (common.TableId == tableNum(InventDistinctProduct)
            || common.TableId == tableNum(CustTable)
            || common.TableId == tableNum(smmBusRelTable))
        {
            // Count the records first.
            select count(recId) from common;

            // Create a progress bar.
            simpleProgress = SysOperationProgress::newGeneral(#AviFileCopy, "@MCR26399", common.RecId);

            // Delete all search records.
            MCRFullTextSearch::truncate(_source);

            counter = 0;
            while select common
            {
                // Builds search text
                MCRFullTextSearch::insert(common);
                // Updating progress bar
                simpleProgress.incCount();
                simpleProgress.setText(int2str(counter));
                counter++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSufficientToCoverMCRProductSearchView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the chosen fields is enough to populate all the data from MCRProductSearchView to MCRINVENTTABLEINDEX table.
    /// </summary>
    /// <param name = "_productSearchView"> MCRProductSearchView used in validation</param>
    /// <param name = "_fieldSet">set of MCRProductSearchView fields names used in the validation c</param>
    /// <returns>True if the given fields are enough to populate all the data from MCRProductSearchView to MCRINVENTTABLEINDEX table</returns>
    public static boolean isSufficientToCoverMCRProductSearchView(Common _productSearchView , Set _fieldSet)
    {
        DictTable dictTable = new DictTable(_productSearchView.TableId);
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(_productSearchView.TableId);
        qbds.firstOnly(true);

        SetEnumerator enumerator = _fieldSet.getEnumerator();

        while (enumerator.moveNext())
        {
            FieldName fieldName = enumerator.current();

            if (dictTable.fieldName2Id(fieldName) == 0)
            {
                throw error(strFmt("@MCR39968", fieldName, tableId2Name(_productSearchView.TableId)));
            }

            DictField dictField = new DictField(_productSearchView.TableId, dictTable.fieldName2Id(fieldName));
            
            //If any field type is not a string then return true
            if (dictField.baseType() != Types::String)
            {
                return true;
            }
            else
            {
                qbds.addRange(dictField.id()).value(SysQuery::valueEmptyString());
            }
        }

        QueryRun queryRun = new QueryRun(query);
        return !queryRun.next();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>