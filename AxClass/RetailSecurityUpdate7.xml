<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSecurityUpdate7</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Retail=Microsoft.Dynamics.Retail;
/// <summary>
/// Retail security updates.
/// </summary>
class RetailSecurityUpdate7
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    
    private const str NEW_MERCHANT_XML = '<![CDATA[<?xml version="1.0" encoding="utf-16"?> <ArrayOfPaymentProperty xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>AssemblyName</Name> <ValueType>String</ValueType> <StoredStringValue>Microsoft.Dynamics.Retail.TestConnector.Portable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>true</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>0</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>ServiceAccountId</Name> <ValueType>String</ValueType> <StoredStringValue>540b192d-f8dc-4eef-af63-5f9acc8741e0</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>true</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>1</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>MerchantId</Name> <ValueType>String</ValueType> <StoredStringValue>136e9c86-31a1-4177-b2b7-a027c63edbe0</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>2</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>ProviderId</Name> <ValueType>String</ValueType> <StoredStringValue>467079b4-1601-4f79-83c9-f569872eb94e</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>3</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>Environment</Name> <ValueType>String</ValueType> <StoredStringValue>PROD</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>4</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>SupportedCurrencies</Name> <ValueType>String</ValueType> <StoredStringValue>USD;CAD</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>5</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>SupportedTenderTypes</Name> <ValueType>String</ValueType> <StoredStringValue>Visa;MasterCard;Amex;Discover;Debit</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>6</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>TestString</Name> <ValueType>String</ValueType> <StoredStringValue>Test string 1234567890 1234567890 End.</StoredStringValue> <DecimalValue>0</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>7</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>TestDecimal</Name> <ValueType>Decimal</ValueType> <DecimalValue>12345.67</DecimalValue> <DateValue>0001-01-01T00:00:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>8</SequenceNumber> </PaymentProperty> <PaymentProperty> <Namespace>MerchantAccount</Namespace> <Name>TestDate</Name> <ValueType>DateTime</ValueType> <DecimalValue>0</DecimalValue> <DateValue>2011-09-22T11:03:00</DateValue> <SecurityLevel>None</SecurityLevel> <IsEncrypted>false</IsEncrypted> <IsPassword>false</IsPassword> <IsReadOnly>false</IsReadOnly> <IsHidden>false</IsHidden> <DisplayHeight>1</DisplayHeight> <SequenceNumber>9</SequenceNumber> </PaymentProperty> </ArrayOfPaymentProperty>]]]]><![CDATA[>';
    private const str STR_TEST_CONNECTOR = 'TestConnector';
    private const str ADYEN_MERCHANT_XML = "<![CDATA[<?xml version='1.0' encoding='utf-16'?><ArrayOfPaymentProperty xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'><PaymentProperty><Namespace>MerchantAccount</Namespace><Name>AssemblyName</Name><ValueType>String</ValueType><StoredStringValue>Microsoft.Dynamics.Commerce.Payments.Connector.Adyen.Processor.Portable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>true</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>10</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>ServiceAccountId</Name><ValueType>String</ValueType><StoredStringValue>fab2d4d2-37ef-47e7-a895-ed552c191dac</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>20</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>ConnectorVersion</Name><ValueType>String</ValueType><StoredStringValue>V001</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>30</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>Environment</Name><ValueType>String</ValueType><StoredStringValue>Test</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>40</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>OptionalDomain</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>50</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>MerchantAccountId</Name><ValueType>String</ValueType><StoredStringValue>DynamicsCommerceDemo</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>60</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>TerminalArchitecture</Name><ValueType>String</ValueType><StoredStringValue>Cloud</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>70</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>PasswordPhrase</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>true</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>80</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>KeyIdentifier</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>90</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>KeyVersion</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>100</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>CryptoVersion</Name><ValueType>String</ValueType><StoredStringValue>1</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>110</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>CloudAPIKey</Name><ValueType>String</ValueType><StoredStringValue>AQErhmfxLozMahxGw0m/n3Q5qf3VZYJOH5xZV2NCGkLbgvUTMqYgtNDRiE0wdBDBXVsNvuR83LVYjEgiTGAH-xWSpGqRh+wr/ROze9bt0RqZaKbdcSl7YRm9icu05FPc=-9Xsbf4z2hjhhpYB2</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>true</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>120</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>SupportedCurrencies</Name><ValueType>String</ValueType><StoredStringValue>USD</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>130</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>SupportedTenderTypes</Name><ValueType>String</ValueType><StoredStringValue>Visa;MasterCard;Amex;Discover;Debit;GiftCard</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>140</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>GiftCardProvider</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>150</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>TerminalGiftCardEntry</Name><ValueType>String</ValueType><StoredStringValue>False</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>160</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>ListPaymentInstruments</Name><ValueType>String</ValueType><StoredStringValue>False</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>170</SequenceNumber></PaymentProperty></ArrayOfPaymentProperty>]]]]><![CDATA[>";
    private const str ADYEN_MERCHANT_XML_ECOMM = "<![CDATA[<?xml version='1.0' encoding='utf-16'?><ArrayOfPaymentProperty xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'><PaymentProperty><Namespace>MerchantAccount</Namespace><Name>AssemblyName</Name><ValueType>String</ValueType><StoredStringValue>Microsoft.Dynamics.Commerce.Payments.Connector.Adyen.Processor.Portable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>true</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>10</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>ServiceAccountId</Name><ValueType>String</ValueType><StoredStringValue>fab2d4d2-37ef-47e7-a895-ed552c191dac</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>20</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>ConnectorVersion</Name><ValueType>String</ValueType><StoredStringValue>V001</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>30</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>Environment</Name><ValueType>String</ValueType><StoredStringValue>Test</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>40</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>OptionalDomain</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>50</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>MerchantAccountId</Name><ValueType>String</ValueType><StoredStringValue>DynamicsCommerceDemo</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>60</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>TerminalArchitecture</Name><ValueType>String</ValueType><StoredStringValue>Cloud</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>70</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>PasswordPhrase</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>true</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>80</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>KeyIdentifier</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>90</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>KeyVersion</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>100</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>CryptoVersion</Name><ValueType>String</ValueType><StoredStringValue>1</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>110</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>CloudAPIKey</Name><ValueType>String</ValueType><StoredStringValue>AQErhmfxLozMahxGw0m/n3Q5qf3VZYJOH5xZV2NCGkLbgvUTMqYgtNDRiE0wdBDBXVsNvuR83LVYjEgiTGAH-xWSpGqRh+wr/ROze9bt0RqZaKbdcSl7YRm9icu05FPc=-9Xsbf4z2hjhhpYB2</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>true</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>120</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>SupportedCurrencies</Name><ValueType>String</ValueType><StoredStringValue>USD</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>130</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>SupportedTenderTypes</Name><ValueType>String</ValueType><StoredStringValue>Visa;MasterCard;Amex;Discover;Debit;GiftCard</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>140</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>GiftCardProvider</Name><ValueType>String</ValueType><StoredStringValue /><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>150</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>TerminalGiftCardEntry</Name><ValueType>String</ValueType><StoredStringValue>False</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>160</SequenceNumber></PaymentProperty>  <PaymentProperty><Namespace>MerchantAccount</Namespace><Name>ListPaymentInstruments</Name><ValueType>String</ValueType><StoredStringValue>True</StoredStringValue><DecimalValue>0</DecimalValue><DateValue>0001-01-01T00:00:00</DateValue><SecurityLevel>None</SecurityLevel><IsEncrypted>false</IsEncrypted><IsPassword>false</IsPassword><IsReadOnly>false</IsReadOnly><IsHidden>false</IsHidden><DisplayHeight>1</DisplayHeight><SequenceNumber>170</SequenceNumber></PaymentProperty></ArrayOfPaymentProperty>]]]]><![CDATA[>";
    private const str STR_ADYEN_CONNECTOR = 'Dynamics 365 Payment Connector for Adyen';
    private const str COMMERCE_PRODUCT_SKU = 'Dynamics365Commerce';

    private const boolean Encrypt = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args = null)
    {
        boolean isCommerce = false;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;
        int fromLine = Global::infologLine();

        try
        {
            eventSource.EventWriteRetailSecurityUpdate7_Main_Start();
            if (_args)
            {
                if (_args.parm() != '' &&  _args.parm() == COMMERCE_PRODUCT_SKU)
                {
                    isCommerce = true;
                    eventSource.EventWriteRetailSecurityUpdate7_Main_IsCommerceDeployment();
                    RetailSecurityUpdate7::AddAdyenAsDefaultConnectorInPaymentService();
                }
            }
            else
            {
                eventSource.EventWriteRetailSecurityUpdate7_Main_IsNotCommerceDeployment();
            }

            RetailSecurityUpdate7::UpdateCreditCardAccountSetupForTestConnector();
            RetailSecurityUpdate7::UpdateRetailHardwareProfileForTestConnector();
            RetailSecurityUpdate7::UpdateRETAILCHANNELPAYMENTConnectorLineForTestConnector(isCommerce);
            eventSource.EventWriteRetailSecurityUpdate7_Main_Completed();
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = RetailUtilities::getLatestClrException();
            str message = "";
            str stackTrace = "";

            if (clrException != null)
            {
                message = clrException.Message;
                stackTrace = clrException.StackTrace;
            }

            eventSource.EventWriteRetailSecurityUpdate7_Main_Exception("CLRError", "", message, stackTrace, con2Str(xSession::xppCallStack()));
        }
        catch (errorException)
        {
            eventSource.EventWriteRetailSecurityUpdate7_Main_Exception(
                "ErrorException",
                errorException.ToString(),
                RetailTransactionServiceUtilities::getInfologMessages(fromLine),
                "",
                con2Str(xSession::xppCallStack()));
        }
        catch
        {
            eventSource.EventWriteRetailSecurityUpdate7_Main_Exception("Exception", "", "", "", con2Str(xSession::xppCallStack()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddAdyenAsDefaultConnectorInPaymentService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Ayen connector to Payment Service and make it the default credit card processor.
    /// </summary>
    private static void AddAdyenAsDefaultConnectorInPaymentService()
    {
        CreditCardAccountSetup creditCardAccountSetup;
        CreditCardProcessors creditCardProcessors;

        while
            select crossCompany DataAreaId, ConnectorName, CreditCardProcessors, RecId 
            from creditCardAccountSetup
            group by creditCardAccountSetup.DataAreaId, creditCardAccountSetup.ConnectorName, creditCardAccountSetup.CreditCardProcessors
            join RecId, Active from creditCardProcessors
            where creditCardProcessors.RecId == creditCardAccountSetup.CreditCardProcessors
            && creditCardProcessors.Active == true
            && creditCardAccountSetup.ConnectorName == STR_TEST_CONNECTOR

        {
            changecompany(creditCardAccountSetup.DataAreaId)
            {
                // Find current active connector and copy default to Adyen
                CreditCardProcessors testCreditCardProcessors = CreditCardProcessors::find(creditCardAccountSetup.CreditCardProcessors);

                if (testCreditCardProcessors)
                {
                    CreditCardAccountSetup testCreditCardAccountSetup = CreditCardAccountSetup::find(creditCardAccountSetup.RecId);
                    CreditCardTypeSetup testCreditCardTypeSetupVisa = CreditCardTypeSetup::find(testCreditCardProcessors, 'Visa');

                    CreditCardTypeCurrency defaultCreditCardTypeCurrency;
                    select firstonly defaultCreditCardTypeCurrency
                    where defaultCreditCardTypeCurrency.CreditCardTypeSetup == testCreditCardTypeSetupVisa.RecId;

                    CreditCardProcessors adyenCreditCardProcessors;
                    adyenCreditCardProcessors.Name = 'Adyen';

                    ttsbegin;
                    adyenCreditCardProcessors.insert();
                    ttscommit;

                    CreditCardAccountSetup adyenCreditCardAccountSetup;
                    adyenCreditCardAccountSetup.AddressVerification             = testCreditCardAccountSetup.AddressVerification;
                    adyenCreditCardAccountSetup.AddressVerificationLevel        = testCreditCardAccountSetup.AddressVerificationLevel;
                    adyenCreditCardAccountSetup.AddressVerificationVoidUnknown  = testCreditCardAccountSetup.AddressVerificationVoidUnknown;
                    adyenCreditCardAccountSetup.CardVerificationCheck           = testCreditCardAccountSetup.CardVerificationCheck;
                    adyenCreditCardAccountSetup.CardVerificationCheckAllowBlank = testCreditCardAccountSetup.CardVerificationCheckAllowBlank;
                    adyenCreditCardAccountSetup.ConnectorName                   = STR_ADYEN_CONNECTOR;
                    adyenCreditCardAccountSetup.CreditCardProcessors            = adyenCreditCardProcessors.RecId;
                    adyenCreditCardAccountSetup.IsTest                          = false;
                    adyenCreditCardAccountSetup.DisallowZeroAmount              = testCreditCardAccountSetup.DisallowZeroAmount;
                    adyenCreditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Encrypt, ADYEN_MERCHANT_XML);

                    ttsbegin;
                    adyenCreditCardAccountSetup.insert();
                    ttscommit;

                    CreditCardTypeSetup adyenCreditCardTypeSetupAmex;
                    adyenCreditCardTypeSetupAmex.CreditCardProcessors = adyenCreditCardProcessors.RecId;
                    adyenCreditCardTypeSetupAmex.CreditCardTypeName = 'Amex';
                    adyenCreditCardTypeSetupAmex.DataSupport = testCreditCardTypeSetupVisa.DataSupport;
                    adyenCreditCardTypeSetupAmex.PaymentJournal = testCreditCardTypeSetupVisa.PaymentJournal;

                    ttsbegin;
                    adyenCreditCardTypeSetupAmex.insert();
                    ttscommit;

                    CreditCardTypeCurrency adyenCreditCardTypeCurrencyAmex;
                    adyenCreditCardTypeCurrencyAmex.CreditCardTypeSetup = adyenCreditCardTypeSetupAmex.RecId;
                    adyenCreditCardTypeCurrencyAmex.DataSupport = CreditCardCurrencyDataSupport::Level1;
                    adyenCreditCardTypeCurrencyAmex.CurrencyCode = defaultCreditCardTypeCurrency.CurrencyCode;

                    ttsbegin;
                    adyenCreditCardTypeCurrencyAmex.insert();
                    ttscommit;

                    CreditCardTypeSetup adyenCreditCardTypeSetupDebit;
                    adyenCreditCardTypeSetupDebit.CreditCardProcessors = adyenCreditCardProcessors.RecId;
                    adyenCreditCardTypeSetupDebit.CreditCardTypeName = 'Debit';
                    adyenCreditCardTypeSetupDebit.DataSupport = testCreditCardTypeSetupVisa.DataSupport;
                    adyenCreditCardTypeSetupDebit.PaymentJournal = testCreditCardTypeSetupVisa.PaymentJournal;

                    ttsbegin;
                    adyenCreditCardTypeSetupDebit.insert();
                    ttscommit;

                    CreditCardTypeCurrency adyenCreditCardTypeCurrencyDebit;
                    adyenCreditCardTypeCurrencyDebit.CreditCardTypeSetup = adyenCreditCardTypeSetupDebit.RecId;
                    adyenCreditCardTypeCurrencyDebit.DataSupport = CreditCardCurrencyDataSupport::Level1;
                    adyenCreditCardTypeCurrencyDebit.CurrencyCode = defaultCreditCardTypeCurrency.CurrencyCode;

                    ttsbegin;
                    adyenCreditCardTypeCurrencyDebit.insert();
                    ttscommit;

                    CreditCardTypeSetup adyenCreditCardTypeSetupDiscover;
                    adyenCreditCardTypeSetupDiscover.CreditCardProcessors = adyenCreditCardProcessors.RecId;
                    adyenCreditCardTypeSetupDiscover.CreditCardTypeName = 'Discover';
                    adyenCreditCardTypeSetupDiscover.DataSupport = testCreditCardTypeSetupVisa.DataSupport;
                    adyenCreditCardTypeSetupDiscover.PaymentJournal = testCreditCardTypeSetupVisa.PaymentJournal;

                    ttsbegin;
                    adyenCreditCardTypeSetupDiscover.insert();
                    ttscommit;

                    CreditCardTypeCurrency adyenCreditCardTypeCurrencyDiscover;
                    adyenCreditCardTypeCurrencyDiscover.CreditCardTypeSetup = adyenCreditCardTypeSetupDiscover.RecId;
                    adyenCreditCardTypeCurrencyDiscover.DataSupport = CreditCardCurrencyDataSupport::Level1;
                    adyenCreditCardTypeCurrencyDiscover.CurrencyCode = defaultCreditCardTypeCurrency.CurrencyCode;

                    ttsbegin;
                    adyenCreditCardTypeCurrencyDiscover.insert();
                    ttscommit;

                    CreditCardTypeSetup adyenCreditCardTypeSetupMasterCard;
                    adyenCreditCardTypeSetupMasterCard.CreditCardProcessors = adyenCreditCardProcessors.RecId;
                    adyenCreditCardTypeSetupMasterCard.CreditCardTypeName = 'MasterCard';
                    adyenCreditCardTypeSetupMasterCard.DataSupport = testCreditCardTypeSetupVisa.DataSupport;
                    adyenCreditCardTypeSetupMasterCard.PaymentJournal = testCreditCardTypeSetupVisa.PaymentJournal;

                    ttsbegin;
                    adyenCreditCardTypeSetupMasterCard.insert();
                    ttscommit;

                    CreditCardTypeCurrency adyenCreditCardTypeCurrencyMasterCard;
                    adyenCreditCardTypeCurrencyMasterCard.CreditCardTypeSetup = adyenCreditCardTypeSetupMasterCard.RecId;
                    adyenCreditCardTypeCurrencyMasterCard.DataSupport = CreditCardCurrencyDataSupport::Level1;
                    adyenCreditCardTypeCurrencyMasterCard.CurrencyCode = defaultCreditCardTypeCurrency.CurrencyCode;

                    ttsbegin;
                    adyenCreditCardTypeCurrencyMasterCard.insert();
                    ttscommit;

                    CreditCardTypeSetup adyenCreditCardTypeSetupVisa;
                    adyenCreditCardTypeSetupVisa.CreditCardProcessors = adyenCreditCardProcessors.RecId;
                    adyenCreditCardTypeSetupVisa.CreditCardTypeName = 'Visa';
                    adyenCreditCardTypeSetupVisa.DataSupport = testCreditCardTypeSetupVisa.DataSupport;
                    adyenCreditCardTypeSetupVisa.PaymentJournal = testCreditCardTypeSetupVisa.PaymentJournal;

                    ttsbegin;
                    adyenCreditCardTypeSetupVisa.insert();
                    ttscommit;

                    CreditCardTypeCurrency adyenCreditCardTypeCurrencyVisa;
                    adyenCreditCardTypeCurrencyVisa.CreditCardTypeSetup = adyenCreditCardTypeSetupVisa.RecId;
                    adyenCreditCardTypeCurrencyVisa.DataSupport = CreditCardCurrencyDataSupport::Level1;
                    adyenCreditCardTypeCurrencyVisa.CurrencyCode = defaultCreditCardTypeCurrency.CurrencyCode;

                    ttsbegin;
                    adyenCreditCardTypeCurrencyVisa.insert();
                    ttscommit;

                    adyenCreditCardProcessors = CreditCardProcessors::find(adyenCreditCardProcessors.RecId, true);
                    adyenCreditCardProcessors.Active = true;

                    ttsbegin;
                    adyenCreditCardProcessors.update();
                    ttscommit;
                }
            }
        }

     }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCreditCardAccountSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update A/R merchant payment provider details security.
    /// </summary>
    private static void UpdateCreditCardAccountSetup()
    {
        CreditCardAccountSetup creditCardAccountSetup;
        RecId recId;
        SystemSequence systemSequence;
        TableId tableId;

        ttsbegin;

        while select forupdate crossCompany creditCardAccountSetup
        {
            changeCompany( creditCardAccountSetup.dataAreaId )
            {
                if (creditCardAccountSetup.MerchantProperties == '' && creditCardAccountSetup.ConnectorProperties != '')
                {
                    var processorProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(creditCardAccountSetup.ConnectorProperties);
                    creditCardAccountSetup.ConnectorProperties = '';
                    var newMerchantXML = CreditCardPaymentProperties::convertPropertyArrayToXML(processorProperties);
                    creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Encrypt, newMerchantXML);
                    creditCardAccountSetup.update();
                    eventSource.EventWritePaymentsCreditCardAccountSetupUpdated(creditCardAccountSetup.RecId);
                }
                else if (creditCardAccountSetup.MerchantProperties != '' && creditCardAccountSetup.ConnectorProperties == '')
                {
                    var merchant = RetailSecurityUpdate7::DecryptString(creditCardAccountSetup.MerchantProperties);
                    var processorProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(merchant);
                    creditCardAccountSetup.MerchantProperties = '';
                    var newMerchantXML = CreditCardPaymentProperties::convertPropertyArrayToXML(processorProperties);
                    creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Encrypt, newMerchantXML);
                    creditCardAccountSetup.update();
                    eventSource.EventWritePaymentsCreditCardAccountSetupRestored(creditCardAccountSetup.RecId);
                }
                else
                {
                    eventSource.EventWritePaymentsCreditCardAccountSetupIsNotUpdated(creditCardAccountSetup.RecId);
                }
            }
        }

        ttscommit;

        // Fix system sequenece
        tableId = TableNum(CreditCardAccountSetup);
        systemSequence = new SystemSequence();

        if (systemSequence)
        {
            systemSequence.suspendRecIds(tableId);
            recId = systemSequence.reserveValues(0,tableId);
            systemSequence.removeRecIdSuspension(tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCreditCardAccountSetupForTestConnector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>CreditCardAccountSetup</c> merchant payment provider details security.
    /// </summary>
    private static void UpdateCreditCardAccountSetupForTestConnector()
    {
        CreditCardAccountSetup creditCardAccountSetup;
        RecId recId;
        SystemSequence systemSequence;
        TableId tableId;

        ttsbegin;

        while select forupdate crossCompany creditCardAccountSetup
        {
            changeCompany( creditCardAccountSetup.dataAreaId )
            {
                if (creditCardAccountSetup.ConnectorName == STR_TEST_CONNECTOR)
                {
                    creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Encrypt, NEW_MERCHANT_XML);
                    creditCardAccountSetup.update();

                    eventSource.EventWritePaymentsCreditCardAccountSetupUpdated(creditCardAccountSetup.RecId);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRetailHardwareProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update RetailHardwareProfile merchant payment provider details security.
    /// </summary>
    private static void UpdateRetailHardwareProfile()
    {
        RetailHardwareProfile retailHardwareProfile;
        RecId recId;
        SystemSequence systemSequence;
        TableId tableId;

        ttsbegin;

        while select forupdate crossCompany retailHardwareProfile
        {
            changeCompany( retailHardwareProfile.dataAreaId )
            {
                if (retailHardwareProfile.EFTMerchantProperties == '' && retailHardwareProfile.EFTConnectorProperties != '')
                {
                    var processorProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(retailHardwareProfile.EFTConnectorProperties);
                    retailHardwareProfile.EFTConnectorProperties = '';
                    var newMerchantXML = CreditCardPaymentProperties::convertPropertyArrayToXML(processorProperties);
                    retailHardwareProfile.secureMerchantPropertiesEdit(true, newMerchantXML);
                    retailHardwareProfile.update();
                    eventSource.EventWritePaymentsRetailHardwareProfileLineUpdated(retailHardwareProfile.RecId);
                }
                else if (retailHardwareProfile.EFTMerchantProperties != '' && retailHardwareProfile.EFTConnectorProperties == '')
                {
                    var merchant = RetailSecurityUpdate7::DecryptString(retailHardwareProfile.EFTMerchantProperties);
                    var processorProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(merchant);
                    retailHardwareProfile.EFTMerchantProperties = '';
                    var newMerchantXML = CreditCardPaymentProperties::convertPropertyArrayToXML(processorProperties);
                    retailHardwareProfile.secureMerchantPropertiesEdit(true, newMerchantXML);
                    retailHardwareProfile.update();
                    eventSource.EventWritePaymentsRetailHardwareProfileRestored(retailHardwareProfile.RecId);
                }
                else
                {
                    eventSource.EventWritePaymentsRetailHardwareProfileIsNotUpdated(retailHardwareProfile.RecId);
                }
            }
        }

        ttscommit;

        // Fix system sequenece
        tableId = TableNum(RetailHardwareProfile);
        systemSequence = new SystemSequence();

        if (systemSequence)
        {
            systemSequence.suspendRecIds(tableId);
            recId = systemSequence.reserveValues(4,tableId);
            systemSequence.removeRecIdSuspension(tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRetailHardwareProfileForTestConnector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>RetailHardwareProfile</c> merchant payment provider details security.
    /// </summary>
    private static void UpdateRetailHardwareProfileForTestConnector()
    {
        RetailHardwareProfile retailHardwareProfile;
        RecId recId;
        SystemSequence systemSequence;
        TableId tableId;

        ttsbegin;

        while select forupdate crossCompany retailHardwareProfile
        {
            changeCompany( retailHardwareProfile.dataAreaId )
            {
                if (retailHardwareProfile.EFTConnectorName == STR_TEST_CONNECTOR && retailHardwareProfile.EFT == RetailExternalNone::PaymentSDK)
                {
                    retailHardwareProfile.secureMerchantPropertiesEdit(true, NEW_MERCHANT_XML);
                    retailHardwareProfile.update();
                    eventSource.EventWritePaymentsRetailHardwareProfileLineUpdated(retailHardwareProfile.RecId);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRETAILCHANNELPAYMENTConnectorLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update RETAILCHANNELPAYMENTConnectorLine merchant payment provider details security.
    /// </summary>
    private static void UpdateRETAILCHANNELPAYMENTConnectorLine()
    {
        RETAILCHANNELPAYMENTConnectorLine retailChannelPaymentConnectorLine;
        RecId recId;
        SystemSequence systemSequence;
        TableId tableId;

        ttsbegin;

        while select forupdate crossCompany retailChannelPaymentConnectorLine
        {
            changeCompany( retailChannelPaymentConnectorLine.dataAreaId )
            {
                if (retailChannelPaymentConnectorLine.PaymentMerchantProperties == '' && retailChannelPaymentConnectorLine.PaymentConnectorProperties != '')
                {
                    var processorProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(retailChannelPaymentConnectorLine.PaymentConnectorProperties);
                    retailChannelPaymentConnectorLine.PaymentConnectorProperties = '';
                    var newMerchantXML = CreditCardPaymentProperties::convertPropertyArrayToXML(processorProperties);
                    retailChannelPaymentConnectorLine.secureMerchantPropertiesEdit(true, newMerchantXML);
                    retailChannelPaymentConnectorLine.update();
                    eventSource.EventWritePaymentsRetailChannelPaymentConnectorLineUpdated(retailChannelPaymentConnectorLine.RecId);
                }
                else if (retailChannelPaymentConnectorLine.PaymentMerchantProperties != '' && retailChannelPaymentConnectorLine.PaymentConnectorProperties == '')
                {
                    var merchant = RetailSecurityUpdate7::DecryptString(retailChannelPaymentConnectorLine.PaymentMerchantProperties);
                    var processorProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(merchant);
                    retailChannelPaymentConnectorLine.PaymentMerchantProperties = '';
                    var newMerchantXML = CreditCardPaymentProperties::convertPropertyArrayToXML(processorProperties);
                    retailChannelPaymentConnectorLine.secureMerchantPropertiesEdit(true, newMerchantXML);
                    retailChannelPaymentConnectorLine.update();
                    eventSource.EventWritePaymentsRetailChannelPaymentConnectorLineRestored(retailChannelPaymentConnectorLine.RecId);
                }
                else
                {
                    eventSource.EventWritePaymentsRetailChannelPaymentConnectorLineIsNotUpdated(retailChannelPaymentConnectorLine.RecId);
                }
            }
        }

        ttscommit;

        // Fix system sequenece
        tableId = TableNum(RETAILCHANNELPAYMENTConnectorLine);
        systemSequence = new SystemSequence();

        if (systemSequence)
        {
            systemSequence.suspendRecIds(tableId);
            recId = systemSequence.reserveValues(0,tableId);
            systemSequence.removeRecIdSuspension(tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRETAILCHANNELPAYMENTConnectorLineForTestConnector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>RETAILCHANNELPAYMENTConnectorLine</c> merchant payment provider details security.
    /// </summary>
    /// <param name = "_isCommerce">Is commerce deployment.</param>
    private static void UpdateRETAILCHANNELPAYMENTConnectorLineForTestConnector(boolean _isCommerce)
    {
        RETAILCHANNELPAYMENTConnectorLine retailChannelPaymentConnectorLine;
        RecId recId;
        SystemSequence systemSequence;
        TableId tableId;

        ttsbegin;

        while select forupdate crossCompany retailChannelPaymentConnectorLine
        {
            changeCompany( retailChannelPaymentConnectorLine.dataAreaId )
            {
                if (retailChannelPaymentConnectorLine.PaymentConnectorName == STR_TEST_CONNECTOR)
                {
                    if (_isCommerce)
                    {
                        retailChannelPaymentConnectorLine.PaymentConnectorName = STR_ADYEN_CONNECTOR;
                        retailChannelPaymentConnectorLine.secureMerchantPropertiesEdit(true, ADYEN_MERCHANT_XML_ECOMM);
                        retailChannelPaymentConnectorLine.IsTestMode = false;
                        retailChannelPaymentConnectorLine.update();
                    }
                    else
                    {
                        retailChannelPaymentConnectorLine.secureMerchantPropertiesEdit(true, NEW_MERCHANT_XML);
                        retailChannelPaymentConnectorLine.update();
                    }

                    eventSource.EventWritePaymentsRetailChannelPaymentConnectorLineUpdated(retailChannelPaymentConnectorLine.RecId);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DecryptString</Name>
				<Source><![CDATA[
    private static str DecryptString(str _encryptedText)
    {
        System.Byte[]           byteArray;
        System.Text.Encoding    encodingUTF8;
        str                     clearText;

        clearText = '';

        if (_encryptedText != '')
        {
            // Waiting for correct decryption from framework team!
            encodingUTF8 = System.Text.Encoding::get_UTF8();
            byteArray = System.Convert::FromBase64String(_encryptedText);
            clearText = encodingUTF8.GetString(byteArray);
        }

        return clearText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>