<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSProcessXML_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Serializes the transportation management information related to the sales order to XML file.
/// </summary>
class TmsProcessXML_Sales extends TMSProcessXML_Base
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates XML file and writes it to the disk.
    /// </summary>
    /// <returns>
    /// The XML string.
    /// </returns>
    public XML createXML()
    {
        commonRec = SalesTable::find(id);

        if (id)
        {
            ttsbegin;

            this.deletePreviousInformation(commonRec);

            ttscommit;
        }

        this.writeXML();

        return requestDoc.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSegmentTable</Name>
				<Source><![CDATA[
    private TMSRouteSegmentTable insertSegmentTable(XmlNode _xmlNode)
    {
        TMSCarrierCode              shipmentCarrier;
        TMSCarrierServiceCode       shipmentService;
        TMSCarrierGroupCode         shipmentGroup;
        TMSModeCode                 shipmentMode;
        TMSFreightTermCode          shipmentFreight;
        TMSResponsibleForPayment    shipmentResponsible;
        TMSVendorCode               shipmentVendorCode;
        TMSVendorInvoiceCode        shipmentVendorInvoiceCode;
        TMSRouteSegmentTable        segmentTable;

        shipmentCarrier = this.returnNamedNode(_xmlNode, #carrier);
        shipmentService = this.returnNamedNode(_xmlNode, #carrierService);
        shipmentGroup   = this.returnNamedNode(_xmlNode, #carrierGroup);
        shipmentMode    = this.returnNamedNode(_xmlNode, #modeCode);
        shipmentFreight = this.returnNamedNode(_xmlNode, #freightTerm);

        segmentTable.RefTableId             = commonRec.TableId;
        segmentTable.RefRecId               = commonRec.RecId;
        segmentTable.CarrierCode         = shipmentCarrier   ? shipmentCarrier   : segmentCarrier;
        segmentTable.CarrierServiceCode  = shipmentService   ? shipmentService   : segmentService;
        segmentTable.CarrierGroupCode    = shipmentGroup     ? shipmentGroup     : segmentGroup;
        segmentTable.ModeCode            = shipmentMode      ? shipmentMode      : segmentMode;
        segmentTable.FreightTermCode     = shipmentFreight   ? shipmentFreight   : segmentFreight;

        if (communicationType == TMSCommunicationType::Rate)
        {
            this.readRateRoute(segmentTable.CarrierCode, segmentTable.CarrierServiceCode, segmentTable.ModeCode);
        }

        segmentTable.RouteId             = routeId;
        segmentTable.RouteRecId          = routeRecId;

        [shipmentResponsible,
        shipmentVendorCode,
        shipmentVendorInvoiceCode]          = this.readShipPayment(_xmlNode);

        segmentTable.ResponsibleForPayment   = shipmentResponsible       ? shipmentResponsible       : segmentResponsible;
        segmentTable.VendorCode              = shipmentVendorCode        ? shipmentVendorCode        : segmentVendorCode;
        segmentTable.VendorInvoiceCode       = shipmentVendorInvoiceCode ? shipmentVendorInvoiceCode : segmentVendorInvoiceCode;

        segmentTable.insert();

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads information for an XML file into the internal structures.
    /// </summary>
    /// <param name="_xmlNode">
    /// An instance of the <c>XmlNode</c> class.
    /// </param>
    /// <param name="_segmentNode">
    /// An instance of the <c>XmlNode</c> class.
    /// </param>
    public void readShipShipment(XmlNode _xmlNode, XmlNode _segmentNode = null)
    {
        TMSRouteSegmentTable        segmentTable;
        XmlNodeList                 addressList;
        XmlNode                     addressNode;
        TMSAddressPhone             pickupAdd;
        TMSAddressPhone             dropOffAdd;
        TMSResponsibleForPayment    shipOriginResponsible;
        TMSVendorCode               shipOriginVendorCode;
        TMSVendorInvoiceCode        shipOriginVendorInvoiceCode;
        TMSResponsibleForPayment    shipDestResponsible;
        TMSVendorCode               shipDestVendorCode;
        TMSVendorInvoiceCode        shipDestVendorInvoiceCode;
        TMSSequence                 sequence;
        TMSRouteAccessorialLevel    level = TMSRouteAccessorialLevel::Segment;

        recordType      = any2enum(symbol2Enum(enumNum(TMSRecordType), this.returnNamedNode(_xmlNode, #recordType)));
        id              = this.returnNamedNode(_xmlNode, #salesId);
        commonRec       = SalesTable::find(id);
        loadDirection   = symbol2Enum(enumNum(TMSDirection), this.returnNamedNode(_xmlNode, #direction));

        if (communicationType == TMSCommunicationType::Confirmation && !segmentLoadLine.Sequence)
        {
                sequence                                 = str2int(this.returnNamedNode(_xmlNode, #sequence));
                segmentLoadLine.Sequence                 = sequence;
                segmentLoadLine.DestinationPostalCode    = segmentFromAddress.parmPostalCode();
                segmentLoadLine.OriginPostalCode         = segmentToAddress.parmPostalCode();
                this.deleteSegmentLoadLines(segmentLoadLine.RouteCode, sequence);
        }
        else
        {
            segmentTable = this.insertSegmentTable(_xmlNode);

            addressList         = _xmlNode.selectNodes(#pickUp);
            addressNode         = addressList.nextNode();

            // If there is a segment address use this, if not use shipment address
            if (segmentFromAddress && segmentFromAddress.parmPostalCode() != '')
            {
                pickupAdd =  segmentFromAddress;
            }
            else
            {
                pickupAdd = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);
            }

            [shipOriginResponsible,
            shipOriginVendorCode,
            shipOriginVendorInvoiceCode] = this.readShipPayment(addressNode);

            addressList         = _xmlNode.selectNodes(#dropOff);
            addressNode         = addressList.nextNode();

            // If there is a segment address use this, if not use shipment address
            if (segmentToAddress && segmentToAddress.parmPostalCode() != '')
            {
                dropOffAdd = segmentToAddress;
            }
            else
            {
                dropOffAdd = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);
            }

            [shipDestResponsible,
            shipDestVendorCode,
            shipDestVendorInvoiceCode] = this.readShipPayment(addressNode);

            segmentTable = this.writeSegmentTable(pickupAdd, dropOffAdd, shipOriginResponsible, shipOriginVendorCode, shipOriginVendorInvoiceCode,
                                   shipDestResponsible, shipDestVendorCode, shipDestVendorInvoiceCode, segmentTable);

            if (communicationType != TMSCommunicationType::Route)
            {
                this.readOverrideEntities(_xmlNode, TMSRateType::Rate, segmentTable.RefTableId, segmentTable.RefRecId);
                this.readRatingEntities(_xmlNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
            }
        }

        if (communicationType == TMSCommunicationType::RateRoute || communicationType == TMSCommunicationType::Route)
        {
            this.readShippingEntity(_xmlNode, segmentTable.TableId, segmentTable.RecId);
        }
        if (communicationType == TMSCommunicationType::Rate)
        {
            this.readShippingEntity(_xmlNode, rateTableId, rateRecId);
        }
        if (_segmentNode && communicationType != TMSCommunicationType::Route)
        {
            this.readRatingEntities(_segmentNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
            addressList = _segmentNode.selectNodes(#pickUp);
            addressNode = addressList.nextNode();
            this.readAddress(addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);

            addressList = _segmentNode.selectNodes(#dropOff);
            addressNode = addressList.nextNode();
            this.readAddress(addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSegmentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes record to the segment table.
    /// </summary>
    /// <param name="_pickupAdd">
    /// Pickup address information.
    /// </param>
    /// <param name="_dropOffAdd">
    /// Drop-off address information
    /// </param>
    /// <param name="_shipOriginResponsible">
    /// Ship origin person responsible.
    /// </param>
    /// <param name="_shipOriginVendorCode">
    /// Ship origin vendor code
    /// </param>
    /// <param name="_shipOriginVendorInvoiceCode">
    /// Ship origin vendor invoice number.
    /// </param>
    /// <param name="_shipDestResponsible">
    /// Ship destination responsible.
    /// </param>
    /// <param name="_shipDestVendorCode">
    /// Ship destination vendor code.
    /// </param>
    /// <param name="_shipDestVendorInvoiceCode">
    /// Ship destination vendor invoice number.
    /// </param>
    /// <param name="_segmentTable">
    /// Segment table record.
    /// </param>
    /// <returns>
    /// <c>TMSRouteSegmentTable</c> record.
    /// </returns>
    private TMSRouteSegmentTable writeSegmentTable(
        TMSAddressPhone             _pickupAdd,
        TMSAddressPhone             _dropOffAdd,
        TMSResponsibleForPayment    _shipOriginResponsible,
        TMSVendorCode               _shipOriginVendorCode,
        TMSVendorInvoiceCode        _shipOriginVendorInvoiceCode,
        TMSResponsibleForPayment    _shipDestResponsible,
        TMSVendorCode               _shipDestVendorCode,
        TMSVendorInvoiceCode        _shipDestVendorInvoiceCode,
        TMSRouteSegmentTable        _segmentTable)
    {
        TMSAddressPhone             pickupAdd                   = _pickupAdd;
        TMSAddressPhone             dropOffAdd                  = _dropOffAdd;
        TMSResponsibleForPayment    shipOriginResponsible       = _shipOriginResponsible;
        TMSVendorCode               shipOriginVendorCode        = _shipOriginVendorCode;
        TMSVendorInvoiceCode        shipOriginVendorInvoiceCode = _shipOriginVendorInvoiceCode;
        TMSResponsibleForPayment    shipDestResponsible         = _shipDestResponsible;
        TMSVendorCode               shipDestVendorCode          = _shipDestVendorCode;
        TMSVendorInvoiceCode        shipDestVendorInvoiceCode   = _shipDestVendorInvoiceCode;
        TMSRouteSegmentTable        segmentTable                = _segmentTable;

        ttsbegin;

        segmentTable.OriginName                         = pickupAdd.parmName();
        segmentTable.OriginAddress                      = pickupAdd.parmStreet();
        segmentTable.OriginCity                         = pickupAdd.parmCity();
        segmentTable.OriginState                        = pickupAdd.parmState();
        segmentTable.OriginCounty                       = pickupAdd.parmCounty();
        segmentTable.OriginCountryRegion                = pickupAdd.parmCountryRegion();
        segmentTable.OriginCountryRegionISOCode         = LogisticsAddressCountryRegion::find(segmentTable.OriginCountryRegion).isOcode;
        segmentTable.OriginPostalCode                   = pickupAdd.parmPostalCode();
        segmentTable.OriginResidential                  = pickupAdd.parmResidential();
        segmentTable.OriginResponsibleForPayment        = shipOriginResponsible ? shipOriginResponsible : originResponsible;
        segmentTable.OriginVendorCode                   = shipOriginVendorCode ? shipOriginVendorCode : originVendorCode;
        segmentTable.OriginVendorInvoiceCode            = shipOriginVendorInvoiceCode ? shipOriginVendorInvoiceCode : originVendorInvoiceCode;
        segmentTable.DestinationName                    = dropOffAdd.parmName();
        segmentTable.DestinationAddress                 = dropOffAdd.parmStreet();
        segmentTable.DestinationCity                    = dropOffAdd.parmCity();
        segmentTable.DestinationState                   = dropOffAdd.parmState();
        segmentTable.DestinationCounty                  = dropOffAdd.parmCounty();
        segmentTable.DestinationCountryRegion           = dropOffAdd.parmCountryRegion();
        segmentTable.DestinationCountryRegionISOCode    = LogisticsAddressCountryRegion::find(segmentTable.DestinationCountryRegion).isOcode;
        segmentTable.DestinationPostalCode              = dropOffAdd.parmPostalCode();
        segmentTable.DestinationResidential             = dropOffAdd.parmResidential();
        segmentTable.DestinationResponsibleForPayment   = shipDestResponsible ? shipDestResponsible : destResponsible;
        segmentTable.DestinationVendorCode              = shipDestVendorCode ? shipDestVendorCode : destVendorCode;
        segmentTable.DestinationVendorInvoiceCode       = shipDestVendorInvoiceCode ? shipDestVendorInvoiceCode : destVendorInvoiceCode;
        segmentTable.DestinationHubCode                 = segmentDestHub;
        segmentTable.OriginHubCode                      = segmentOriginHub;
        segmentTable.Miles                              = miles;
        segmentTable.write();

        ttscommit;

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the associated sales order information on the xml node.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_weight">
    ///     The weight of the order.
    /// </param>
    /// <param name="_class">
    ///     The class of the order.
    /// </param>
    /// <param name="_volume">
    ///     The volume of the order.
    /// </param>
    /// <param name="_parentNode">
    ///     The parent node of the xml node.
    /// </param>
    void writeShipShipment(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume, XmlNode _parentNode)
    {
        XmlNode             fromNode;
        XmlNode             toNode;
        SalesTable          salesTable;
        SalesLine           salesLine;
        WHSClass            itemClass;

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeShipment);
        this.writeXMLElement(_xmlNode, #routeGuideName, routeGuideName);
        this.writeXMLElement(_xmlNode, #routePlanName, routePlanName);
        this.writeXMLElement(_xmlNode, #routeConfigCode, routeConfigCode);
        this.writeXMLElement(_xmlNode, #sequence, int2str(routeSequence));

        salesTable = SalesTable::find(id);
        this.writeXMLElement(_xmlNode, #recordType, enum2Symbol(enumNum(TMSRecordType), enum2int(TMSRecordType::Sales)));
        this.writeXMLElement(_xmlNode, #salesId, id);
        this.writeXMLElement(_xmlNode, #direction, enum2Symbol(enumNum(TMSDirection), TMSDirection::Outbound));
        this.writeXMLElement(_xmlNode, #transportationTemplate, transportationTemplateId);

        this.writeShipCustomer(_xmlNode);
        this.writeXMLElement(_xmlNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segmentResponsible)));
        this.writeXMLElement(_xmlNode, #vendorCode, segmentVendorCode);
        this.writeXMLElement(_xmlNode, #vendorInvoiceCode, segmentVendorInvoiceCode);

        fromNode = this.writeXMLNode(_xmlNode, #pickup);
        this.writeAddress(fromNode, this.getFromAddressNotNull());
        this.writeXMLElement(fromNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(originResponsible)));
        this.writeXMLElement(fromNode, #vendorCode, originVendorCode);
        this.writeXMLElement(fromNode, #vendorInvoiceCode, originVendorInvoiceCode);

        toNode = this.writeXMLNode(_xmlNode, #dropoff);
        this.writeAddress(toNode, this.getToAddressNotNull());
        this.writeXMLElement(toNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(destResponsible)));
        this.writeXMLElement(toNode, #vendorCode, destVendorCode);
        this.writeXMLElement(toNode, #vendorInvoiceCode, destVendorInvoiceCode);

        this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(_weight));
        this.writeXMLElement(_xmlNode, #volume, TMSProcessXML_Base::real2str(_volume));
        this.writeXMLElement(_xmlNode, #class, TMSProcessXML_Base::real2str(_class));
        this.writeXMLElement(_xmlNode, #stcc, strFmt('%1', stcc));
        this.writeXMLElement(_xmlNode, #dlvDate, this.convertUTCDateTime2Str(dlvDateTime));
        this.writeXMLElement(_xmlNode, #shipDate, this.convertUTCDateTime2Str(shipDateTime));
        this.writeXMLElement(_xmlNode, #freightTerm, strFmt('%1', freightTerm));
        this.writeXMLElement(_xmlNode, #equipment, strFmt('%1', equipment));
        this.writeXMLElement(_xmlNode, #value, TMSProcessXML_Base::real2str(value));

        while select salesLine
            where salesLine.SalesId == salesTable.SalesId
        {
            itemClass = TMSProcessXML_Base::getClassFromItem(salesLine.ItemId);
            this.writeShippingEntity(_xmlNode, #typeLine, salesLine.ItemId, salesLine.tmsWeight(), itemClass, salesLine.tmsVolume(), salesLine.LineAmount, salesLine.RecId, salesLine.SalesQty);
        }

        if (communicationType == TMSCommunicationType::Confirmation || manualApportionment)
        {
            this.writeShipManualAccessorials(_xmlNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>TMSProcessXML_Sales</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>TMSProcessXML_Sales</c> class.
    /// </returns>
    public static TMSProcessXML_Sales construct()
    {
        TMSProcessXML_Sales  processXML;

        processXML = new TMSProcessXML_Sales();

        return processXML;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>