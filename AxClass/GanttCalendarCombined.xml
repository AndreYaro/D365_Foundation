<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttCalendarCombined</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GanttCalendarCombined</c> class provides calendar types that combine data from two or more
///    different calendars by computing the overlap time of the calendar time slots.
/// </summary>
class GanttCalendarCombined extends GanttCalendar
{
    Set setCombinedCalendars;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads data into the <see cref="T:GanttCalendar" /> temporary table.
    /// </summary>
    /// <param name="_fromDate">
    ///    A from date indicating the start time for loading calendar data.
    /// </param>
    /// <param name="_toDate">
    ///    A to date indicating the end time for loading calendar data.
    /// </param>
    /// <remarks>
    ///    Rather than actually loading any data from the database, the load method of the <see
    ///    cref="T:GanttCalendarCombined" /> is combining the loaded data for the calendars in the <see
    ///    cref="M:GanttCalendarCombined.parmsetCombinedCalendars" />.In order to make sure that all the
    ///    calendar times to be combined are available, a check is made to verify that the calendars to be
    ///    combined are already loaded.
    /// </remarks>
    public void load(FromDate _fromDate, ToDate _toDate)
    {
        SetEnumerator           setEnumerator;
        GanttCalendar           ganttCalendar;
        WorkCalendarDateLine    wrkCalDataResult;     // this contains the resulting combined calendar data after each combine iteration
        WorkCalendarDateLine    wrkCalData1;
        WorkCalendarDateLine    wrkCalData2;

        if (isDataLoaded)
        {
            return;
        }

        // combine the data that was loaded for all calendars in the setCombinedCalendars
        setEnumerator = setCombinedCalendars.getEnumerator();
        while (setEnumerator && setEnumerator.moveNext())
        {
            ganttCalendar = setEnumerator.current();

            // if calendar not already loaded, load it
            if (!ganttCalendar.parmIsDataLoaded())
            {
                ganttCalendar.load(_fromDate, _toDate);
            }
        }

        // copy the data from the first found calendar to the temporary table and use as base for combine
        setEnumerator = setCombinedCalendars.getEnumerator();
        if (setEnumerator && setEnumerator.moveNext())
        {
            ganttCalendar = setEnumerator.current();
            ganttCalendar.copyDataToCalendar(this);
        }

        while (setEnumerator && setEnumerator.moveNext())
        {
            ganttCalendar = setEnumerator.current();

            // create a brand new result temporary table
            wrkCalDataResult = null;
            wrkCalDataResult.setTmp();

            wrkCalData1 = tmpWorkCalendarDateLine;
            wrkCalData2 = ganttCalendar.parmWorkCalendarDateLine();

            // combine the current calendar data with the data in ganttCalendar
            while select wrkCalData1
                join wrkCalData2
                    where   wrkCalData2.TransDate   ==  wrkCalData1.TransDate   &&
                            wrkCalData2.FromTime    <   wrkCalData1.ToTime      &&
                            wrkCalData2.ToTime      >   wrkCalData1.FromTime
            {
                wrkCalDataResult.clear();

                wrkCalDataResult.data(wrkCalData1);
                wrkCalDataResult.FromTime       = max(wrkCalData1.FromTime, wrkCalData2.FromTime);
                wrkCalDataResult.ToTime         = min(wrkCalData1.ToTime, wrkCalData2.ToTime);
                wrkCalDataResult.Effectivity    = min(wrkCalData1.Effectivity, wrkCalData2.Effectivity);
                wrkCalDataResult.CalendarId     = this.parmCalendarName();

                if (wrkCalDataResult.FromTime < wrkCalDataResult.ToTime)
                {
                    wrkCalDataResult.doInsert();
                }
            }

            //Set the result of the combine to be the base of the next iteration
            tmpWorkCalendarDateLine.setTmpData(wrkCalDataResult);
        }

        isDataLoaded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        setCombinedCalendars = new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetCombinedCalendars</Name>
				<Source><![CDATA[
    public Set parmSetCombinedCalendars(Set _setCombinedCalendars = setCombinedCalendars)
    {
        if (!prmisdefault (_setCombinedCalendars))
        {
            setCombinedCalendars = _setCombinedCalendars;
        }
        return setCombinedCalendars;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a calendar class combining times from two or more different calendars.
    /// </summary>
    /// <returns>
    ///    A new <see cref="T:GanttCalendarCombined" /> instance.
    /// </returns>
    public static GanttCalendarCombined construct()
    {
        return new GanttCalendarCombined();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>