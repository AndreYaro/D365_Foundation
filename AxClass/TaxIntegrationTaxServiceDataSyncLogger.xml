<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxServiceDataSyncLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;

/// <summary>
/// The <c>TaxIntegrationTaxServiceDataSyncLogger</c> class is used for logging the changes during synchronizing tax feature setup.
/// </summary>
internal class TaxIntegrationTaxServiceDataSyncLogger
{
    #ISOCountryRegionCodes

    protected static const str NumberFormatString = '#,##0.00';
    protected static const str DateFormatString = 'mm-dd-yyyy';
    protected static const str GenericFormatString = '@';

    // The 'original' temp table to store the original data that to be updated.
    private TaxTable taxTableOriginalTempDB;
    private TaxData taxDataOriginalTempDB;
    private TaxCollectLimit taxCollectLimitOriginalTempDB;
    private TaxGroupData taxGroupDataOriginalTempDB;

    // The 'new' temp table to store the new data that to be created.
    private TaxTable taxTableNewTempDB;
    private TaxData taxDataNewTempDB;
    private TaxCollectLimit taxCollectLimitNewTempDB;
    private TaxGroupHeading taxGroupNewTempDB;
    private TaxGroupData taxGroupDataNewTempDB;
    private TaxItemGroupHeading taxItemGroupNewTempDB;
    private TaxOnItem taxOnItemNewTempDB;
    private TaxExemptCodeTable taxExemptCodeNewTempDB;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxServiceDataSyncLogger</c> object.
    /// </summary>
    protected void new()
    {
        taxTableOriginalTempDB.setTempDB();
        taxDataOriginalTempDB.setTempDB();
        taxCollectLimitOriginalTempDB.setTempDB();
        taxGroupDataOriginalTempDB.setTempDB();

        taxTableNewTempDB.setTempDB();
        taxDataNewTempDB.setTempDB();
        taxCollectLimitNewTempDB.setTempDB();
        taxGroupNewTempDB.setTempDB();
        taxGroupDataNewTempDB.setTempDB();
        taxItemGroupNewTempDB.setTempDB();
        taxOnItemNewTempDB.setTempDB();
        taxExemptCodeNewTempDB.setTempDB();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxServiceDataSyncLogger</c> object.
    /// </summary>
    /// <returns>An instance of <c>TaxIntegrationTaxServiceDataSyncLogger</c>.</returns>
    public static TaxIntegrationTaxServiceDataSyncLogger construct()
    {
        TaxIntegrationTaxServiceDataSyncLogger logger = new TaxIntegrationTaxServiceDataSyncLogger();

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLogTableForTaxTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tax table temp table that will be used to log the changes during synchronizing.
    /// </summary>
    /// <param name = "_taxTableSyncingTempDB">The data of <c>TaxTable</c> from RCS.</param>
    /// <param name = "_taxDataTempDB">The data of <c>TaxData</c> that will be using to determine the field NegativeTax.</param>
    internal void populateLogTableForTaxTable(TaxTable _taxTableSyncingTempDB, TaxData _taxDataTempDB)
    {
        TaxTable taxTableExisting;

        // new inserted tax codes from RCS
        insert_recordset taxTableNewTempDB (TaxCode)
            select TaxCode from _taxTableSyncingTempDB
                notexists join taxTableExisting
                where taxTableExisting.TaxCode == _taxTableSyncingTempDB.TaxCode;

        // updated tax codes from F&O
        insert_recordset taxTableOriginalTempDB (TaxCode, TaxBase, NegativeTax, TaxOnTax)
            select TaxCode, TaxBase, NegativeTax, TaxOnTax from taxTableExisting
                exists join _taxTableSyncingTempDB
                where _taxTableSyncingTempDB.TaxCode == taxTableExisting.TaxCode
                    && (_taxTableSyncingTempDB.TaxOnTax != taxTableExisting.TaxOnTax
                        || _taxTableSyncingTempDB.TaxBase != taxTableExisting.TaxBase
                        || (_taxTableSyncingTempDB.NegativeTax != taxTableExisting.NegativeTax
                            && _taxTableSyncingTempDB.NegativeTax == true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLogTableForTaxData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tax data temp table that will be used to log the changes during synchronizing.
    /// </summary>
    /// <param name = "_taxDataSyncingTempDB">The data of <c>TaxData</c> from RCS.</param>
    /// <param name = "_taxDataChangingTempDB">The records that includes all tax codes for which the <c>TaxData</c> are changed.</param>
    internal void populateLogTableForTaxData(TaxData _taxDataSyncingTempDB, TaxData _taxDataChangingTempDB)
    {
        TaxData taxDataExisting;

        insert_recordset taxDataOriginalTempDB (TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, TaxValue, VATExemptPct)
            select TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, TaxValue, VATExemptPct from taxDataExisting
                exists join _taxDataChangingTempDB
                where _taxDataChangingTempDB.TaxCode == taxDataExisting.TaxCode;

        insert_recordset taxDataNewTempDB (TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, TaxValue, VATExemptPct)
            select TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, TaxValue, VATExemptPct from _taxDataSyncingTempDB
                exists join _taxDataChangingTempDB
                where _taxDataChangingTempDB.TaxCode == _taxDataSyncingTempDB.TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLogTableForTaxCollectLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tax limit temp table that will be used to log the changes during synchronizing.
    /// </summary>
    /// <param name = "_taxCollectLimitSyncingTempDB">The data of <c>TaxCollectLimit</c> from RCS.</param>
    /// <param name = "_taxCollectLimitChangingTempDB">The records that includes all tax codes for which the <c>TaxCollectLimit</c> are changed.</param>
    internal void populateLogTableForTaxCollectLimit(TaxCollectLimit _taxCollectLimitSyncingTempDB, TaxCollectLimit _taxCollectLimitChangingTempDB)
    {
        TaxCollectLimit taxCollectLimitExisting;

        insert_recordset taxCollectLimitOriginalTempDB (TaxCode, TaxFromDate, TaxToDate, TaxMin, TaxMax)
            select TaxCode, TaxFromDate, TaxToDate, TaxMin, TaxMax from taxCollectLimitExisting
                exists join _taxCollectLimitChangingTempDB
                where _taxCollectLimitChangingTempDB.TaxCode == taxCollectLimitExisting.TaxCode;

        insert_recordset taxCollectLimitNewTempDB (TaxCode, TaxFromDate, TaxToDate, TaxMin, TaxMax)
            select TaxCode, TaxFromDate, TaxToDate, TaxMin, TaxMax from _taxCollectLimitSyncingTempDB
                exists join _taxCollectLimitChangingTempDB
                where _taxCollectLimitChangingTempDB.TaxCode == _taxCollectLimitSyncingTempDB.TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLogTableForTaxGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tax group data temp table that will be used to log the changes during synchronizing.
    /// </summary>
    /// <param name = "_taxGroupDataSyncingTempDB">The data of <c>TaxGroupData</c> from RCS.</param>
    internal void populateLogTableForTaxGroupData(TaxGroupData _taxGroupDataSyncingTempDB)
    {
        TaxGroupHeading taxGroupExisting;

        insert_recordset taxGroupNewTempDB (TaxGroup)
            select TaxGroup from _taxGroupDataSyncingTempDB
                group by _taxGroupDataSyncingTempDB.TaxGroup
                notexists join taxGroupExisting
                where taxGroupExisting.TaxGroup == _taxGroupDataSyncingTempDB.TaxGroup;

        TaxExemptCodeTable exemptCodeTableExisting;

        // Insert exempt code if not exist.
        insert_recordset taxExemptCodeNewTempDB (ExemptCode)
            select TaxExemptCode from _taxGroupDataSyncingTempDB
                group by _taxGroupDataSyncingTempDB.TaxExemptCode
                where _taxGroupDataSyncingTempDB.TaxExemptCode != ''
                notexists join exemptCodeTableExisting
                    where exemptCodeTableExisting.ExemptCode == _taxGroupDataSyncingTempDB.TaxExemptCode;

        TaxGroupData taxGroupDataExisting;

        insert_recordset taxGroupDataOriginalTempDB (TaxGroup, TaxCode, ExemptTax, TaxExemptCode, UseTax, ReverseCharge_W)
            select TaxGroup, TaxCode, ExemptTax, TaxExemptCode, UseTax, ReverseCharge_W from taxGroupDataExisting
                exists join _taxGroupDataSyncingTempDB
                where _taxGroupDataSyncingTempDB.TaxCode == taxGroupDataExisting.TaxCode
                    && _taxGroupDataSyncingTempDB.TaxGroup == taxGroupDataExisting.TaxGroup
                    && (_taxGroupDataSyncingTempDB.ExemptTax != taxGroupDataExisting.ExemptTax
                        || _taxGroupDataSyncingTempDB.TaxExemptCode != taxGroupDataExisting.TaxExemptCode
                        || _taxGroupDataSyncingTempDB.UseTax != taxGroupDataExisting.UseTax
                        || _taxGroupDataSyncingTempDB.ReverseCharge_W != taxGroupDataExisting.ReverseCharge_W);

        insert_recordset taxGroupDataNewTempDB (TaxGroup, TaxCode, ExemptTax, TaxExemptCode, UseTax, ReverseCharge_W)
            select TaxGroup, TaxCode, ExemptTax, TaxExemptCode, UseTax, ReverseCharge_W from _taxGroupDataSyncingTempDB
                where _taxGroupDataSyncingTempDB.TaxGroup != ''
                    && _taxGroupDataSyncingTempDB.TaxCode != ''
                notexists join taxGroupDataExisting
                    where taxGroupDataExisting.TaxCode == _taxGroupDataSyncingTempDB.TaxCode
                        && taxGroupDataExisting.TaxGroup == _taxGroupDataSyncingTempDB.TaxGroup;

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLogTableForTaxOnItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tax item group data temp table that will be used to log the changes during synchronizing.
    /// </summary>
    /// <param name = "_taxOnItemSyncingTempDB">The data of <c>TaxOnItem</c> from RCS.</param>
    internal void populateLogTableForTaxOnItem(TaxOnItem _taxOnItemSyncingTempDB)
    {
        TaxItemGroupHeading taxItemGroupExisting;

        insert_recordset taxItemGroupNewTempDB (TaxItemGroup)
            select TaxItemGroup from _taxOnItemSyncingTempDB
                group by _taxOnItemSyncingTempDB.TaxItemGroup
                notexists join taxItemGroupExisting
                where taxItemGroupExisting.TaxItemGroup == _taxOnItemSyncingTempDB.TaxItemGroup;

        TaxOnItem taxOnItemExisting;

        insert_recordset taxOnItemNewTempDB (TaxCode, TaxItemGroup)
            select TaxCode, TaxItemGroup from _taxOnItemSyncingTempDB
                where _taxOnItemSyncingTempDB.TaxItemGroup != ''
                    && _taxOnItemSyncingTempDB.TaxCode != ''
                notexists join taxOnItemExisting
                    where taxOnItemExisting.TaxCode == _taxOnItemSyncingTempDB.TaxCode
                        && taxOnItemExisting.TaxItemGroup == _taxOnItemSyncingTempDB.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>log</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs all changes during synchronizing into an excel file.
    /// </summary>
    /// <returns>The log file name if any data are synchronized; otherwise, an empty string.</returns>
    internal Filename log()
    {
        boolean noDataSynchronized;
        Filename logFileName = '';

        using (MemoryStream memoryStream = new MemoryStream())
        {
            using (OfficeOpenXml.ExcelPackage package = new ExcelPackage(memoryStream))
            {
                this.logTaxTableChanges(package);
                this.logTaxDataChanges(package);
                this.logTaxLimitChanges(package);
                this.logTaxGroupChanges(package);
                this.logTaxItemGroupChanges(package);

                if (package.Workbook.Worksheets.Count > 0)
                {
                    package.Save();
                }
                else
                {
                    noDataSynchronized = true;
                }
            }

            if (!noDataSynchronized)
            {
                System.DateTime exportTime = System.DateTime::UtcNow;
                var tickString = exportTime.get_Ticks().ToString();
                logFileName = strFmt('%1_%2.%3', 'TaxFeatureSynchronizeLog', tickString, '.xlsx');

                memoryStream.Seek(0, SeekOrigin::Begin);
                Dynamics.AX.Application.File::SendFileToUser(memoryStream, logFileName);
            }
        }

        return logFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaxTableChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the changes of <c>TaxTable</c>.
    /// </summary>
    /// <param name = "_package">An instace of the <c>ExcelPackage</c> in EPPlus library.</param>
    internal void logTaxTableChanges(OfficeOpenXml.ExcelPackage _package)
    {
        var currentRow = 1;
        OfficeOpenXml.ExcelWorksheet taxTableWorksheet;

        if (taxTableNewTempDB.RowCount() > 0
            || taxTableOriginalTempDB.RowCount() > 0)
        {
            if (currentRow == 1)
            {
                taxTableWorksheet = _package.Workbook.Worksheets.Add(tableId2PName(taxTableNewTempDB.TableId));

                container worksheetHeaderCon = [
                    fieldNum(TaxTable, TaxCode),
                    fieldNum(TaxTable, TaxName),
                    fieldNum(TaxTable, TaxPeriod),
                    fieldNum(TaxTable, TaxAccountGroup),
                    fieldNum(TaxTable, TaxCurrencyCode),
                    fieldNum(TaxTable, TaxBase),
                    fieldNum(TaxTable, NegativeTax),
                    fieldNum(TaxTable, TaxOnTax)];

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                {
                    worksheetHeaderCon += fieldNum(TaxTable, TaxType_JP);
                }
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    worksheetHeaderCon += fieldNum(TaxTable, TaxType_MX);
                }
                else if (TaxThaiGovCertificationFeatureChecker::isAverageVATEnabled())
                {
                    worksheetHeaderCon += fieldNum(TaxTable, TaxType_TH);
                }

                this.setWorksheetHeaderFromTableFields(
                    taxTableWorksheet,
                    tableNum(TaxTable),
                    worksheetHeaderCon);

                currentRow++;
            }

            TaxTable taxTable;
            while select TaxCode, TaxName, TaxPeriod, TaxAccountGroup, TaxCurrencyCode, TaxBase, NegativeTax, TaxOnTax, TaxType_JP, TaxType_MX, TaxType_TH from taxTable
                exists join taxTableNewTempDB
                where taxTableNewTempDB.TaxCode == taxTable.TaxCode
            {
                container valueContainer = [taxTable.TaxCode, taxTable.TaxName, taxTable.TaxPeriod, taxTable.TaxAccountGroup, taxTable.TaxCurrencyCode, taxTable.TaxBase, taxTable.NegativeTax, taxTable.TaxOnTax];

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                {
                    valueContainer += enum2Value(taxTable.TaxType_JP);
                }
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    valueContainer += enum2Value(taxTable.TaxType_MX);
                }
                else if (TaxThaiGovCertificationFeatureChecker::isAverageVATEnabled())
                {
                    valueContainer += enum2Value(taxTable.TaxType_TH);
                }

                this.setWorksheetRowValue(
                    taxTableWorksheet,
                    currentRow,
                    valueContainer);

                currentRow++;
            }

            while select TaxCode, TaxBase, NegativeTax, TaxOnTax from taxTableOriginalTempDB
                join TaxCode, TaxBase, NegativeTax, TaxOnTax from taxTable
                    where taxTable.TaxCode == taxTableOriginalTempDB.TaxCode
            {
                str taxBase = '-';
                str negativeTax = '-';
                str taxOnTax = '-';

                if (taxTableOriginalTempDB.TaxBase != taxTable.TaxBase)
                {
                    taxBase = strFmt('%1 -> %2', taxTableOriginalTempDB.TaxBase, taxTable.TaxBase);
                }
                if (taxTableOriginalTempDB.NegativeTax != taxTable.NegativeTax)
                {
                    negativeTax = strFmt('%1 -> %2', taxTableOriginalTempDB.NegativeTax, taxTable.NegativeTax);
                }
                if (taxTableOriginalTempDB.TaxOnTax != taxTable.TaxOnTax)
                {
                    taxOnTax = strFmt('%1 -> %2', taxTableOriginalTempDB.TaxOnTax, taxTable.TaxOnTax);
                }

                this.setWorksheetRowValue(
                    taxTableWorksheet,
                    currentRow,
                    [taxTableOriginalTempDB.TaxCode, '-', '-', '-', '-', taxBase, negativeTax, taxOnTax]);

                currentRow++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaxDataChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the changes of <c>TaxData</c>.
    /// </summary>
    /// <param name = "_package">An instace of the <c>ExcelPackage</c> in EPPlus library.</param>
    internal void logTaxDataChanges(OfficeOpenXml.ExcelPackage _package)
    {
        var currentRow = 1;
        OfficeOpenXml.ExcelWorksheet taxDataWorksheet;

        Map taxDataByCode = new Map(Types::String, Types::Class);
        Map taxDataOriginalByCode = new Map(Types::String, Types::Class);
        Set allTaxCodeChanged = new Set(Types::String);

        while select * from taxDataNewTempDB
            order by taxDataNewTempDB.TaxCode
        {
            if (taxDataByCode.exists(taxDataNewTempDB.TaxCode))
            {
                List recordsList = taxDataByCode.lookup(taxDataNewTempDB.TaxCode);

                recordsList.addEnd(taxDataNewTempDB);
            }
            else
            {
                List recordsList = new List(Types::Record);

                recordsList.addEnd(taxDataNewTempDB);
                taxDataByCode.add(taxDataNewTempDB.TaxCode, recordsList);

                allTaxCodeChanged.add(taxDataNewTempDB.TaxCode);
            }
        }

        while select * from taxDataOriginalTempDB
            order by taxDataOriginalTempDB.TaxCode
        {
            if (taxDataOriginalByCode.exists(taxDataOriginalTempDB.TaxCode))
            {
                List recordsList = taxDataOriginalByCode.lookup(taxDataOriginalTempDB.TaxCode);

                recordsList.addEnd(taxDataOriginalTempDB);
            }
            else
            {
                List recordsList = new List(Types::Record);

                recordsList.addEnd(taxDataOriginalTempDB);
                taxDataOriginalByCode.add(taxDataOriginalTempDB.TaxCode, recordsList);

                allTaxCodeChanged.add(taxDataOriginalTempDB.TaxCode);
            }
        }

        SetEnumerator enumerator = allTaxCodeChanged.getEnumerator();

        while (enumerator.moveNext())
        {
            if (currentRow == 1)
            {
                taxDataWorksheet = _package.Workbook.Worksheets.Add("@SYS22727");

                container fieldContainer =
                    [fieldNum(TaxData, TaxCode),
                    fieldNum(TaxData, TaxFromDate),
                    fieldNum(TaxData, TaxToDate),
                    fieldNum(TaxData, TaxLimitMin),
                    fieldNum(TaxData, TaxLimitMax),
                    fieldNum(TaxData, TaxValue),
                    fieldNum(TaxData, VATExemptPct)];

                this.setWorksheetHeaderFromTableFields(taxDataWorksheet, tableNum(TaxData), fieldContainer);
                currentRow++;
            }

            TaxCode taxCode = enumerator.current();

            var rowCells = taxDataWorksheet.get_Cells();

            // Set a sub-header for tax code
            this.setHeaderCell(rowCells.get_Item(currentRow, 1), strFmt('%1:', taxCode));
            currentRow++;

            if (taxDataOriginalByCode.exists(taxCode))
            {
                List originalRecordList = taxDataOriginalByCode.lookup(taxCode);

                this.setHeaderCell(rowCells.get_Item(currentRow, 1), strFmt('%1:', "@SYS5301"));
                currentRow++;

                ListEnumerator originalRecordListEnumerator = originalRecordList.getEnumerator();
                while (originalRecordListEnumerator.moveNext())
                {
                    TaxData taxData = originalRecordListEnumerator.current();

                    this.setWorksheetRowValue(
                        taxDataWorksheet,
                        currentRow,
                        [taxData.TaxCode, taxData.TaxFromDate, taxData.TaxToDate, taxData.TaxLimitMin, taxData.TaxLimitMax, taxData.TaxValue, taxData.VATExemptPct]);

                    currentRow++;
                }
            }

            if (taxDataByCode.exists(taxCode))
            {
                List newRecordList = taxDataByCode.lookup(taxCode);

                this.setHeaderCell(rowCells.get_Item(currentRow, 1), strFmt('%1:', "@SYS77405"));
                currentRow++;

                ListEnumerator newRecordListEnumerator = newRecordList.getEnumerator();
                while (newRecordListEnumerator.moveNext())
                {
                    TaxData taxData = newRecordListEnumerator.current();

                    this.setWorksheetRowValue(
                        taxDataWorksheet,
                        currentRow,
                        [taxData.TaxCode, taxData.TaxFromDate, taxData.TaxToDate, taxData.TaxLimitMin, taxData.TaxLimitMax, taxData.TaxValue, taxData.VATExemptPct]);
                    currentRow++;
                }
            }

            currentRow++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaxLimitChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the changes of <c>TaxCollectLimit</c>.
    /// </summary>
    /// <param name = "_package">An instace of the <c>ExcelPackage</c> in EPPlus library.</param>
    internal void logTaxLimitChanges(OfficeOpenXml.ExcelPackage _package)
    {
        Map taxLimitByCode = new Map(Types::String, Types::Class);
        Map taxLimitOriginalByCode = new Map(Types::String, Types::Class);
        Set allTaxCodeChanged = new Set(Types::String);

        while select * from taxCollectLimitNewTempDB
            order by taxCollectLimitNewTempDB.TaxCode
        {
            if (taxLimitByCode.exists(taxCollectLimitNewTempDB.TaxCode))
            {
                List recordsList = taxLimitByCode.lookup(taxCollectLimitNewTempDB.TaxCode);

                recordsList.addEnd(taxCollectLimitNewTempDB);
            }
            else
            {
                List recordsList = new List(Types::Record);

                recordsList.addEnd(taxCollectLimitNewTempDB);
                taxLimitByCode.add(taxCollectLimitNewTempDB.TaxCode, recordsList);

                allTaxCodeChanged.add(taxCollectLimitNewTempDB.TaxCode);
            }
        }

        while select * from taxCollectLimitOriginalTempDB
            order by taxCollectLimitOriginalTempDB.TaxCode
        {
            if (taxLimitOriginalByCode.exists(taxCollectLimitOriginalTempDB.TaxCode))
            {
                List recordsList = taxLimitOriginalByCode.lookup(taxCollectLimitOriginalTempDB.TaxCode);

                recordsList.addEnd(taxCollectLimitOriginalTempDB);
            }
            else
            {
                List recordsList = new List(Types::Record);

                recordsList.addEnd(taxCollectLimitOriginalTempDB);
                taxLimitOriginalByCode.add(taxCollectLimitOriginalTempDB.TaxCode, recordsList);

                allTaxCodeChanged.add(taxCollectLimitOriginalTempDB.TaxCode);
            }
        }

        OfficeOpenXml.ExcelWorksheet taxLimitWorksheet;
        var currentRow = 1;
        SetEnumerator enumerator = allTaxCodeChanged.getEnumerator();

        while (enumerator.moveNext())
        {
            if (currentRow == 1)
            {
                taxLimitWorksheet = _package.Workbook.Worksheets.Add(tableId2PName(tableNum(TaxCollectLimit)));

                this.setWorksheetHeaderFromTableFields(
                    taxLimitWorksheet,
                    tableNum(TaxCollectLimit),
                    [fieldNum(TaxCollectLimit, TaxCode), fieldNum(TaxCollectLimit, TaxFromDate), fieldNum(TaxCollectLimit, TaxToDate), fieldNum(TaxCollectLimit, TaxMin), fieldNum(TaxCollectLimit, TaxMax)]);

                currentRow++;
            }

            TaxCode taxCode = enumerator.current();

            var rowCells = taxLimitWorksheet.get_Cells();

            // Set a sub-header for tax code
            this.setHeaderCell(rowCells.get_Item(currentRow, 1), strFmt('%1:', taxCode));
            currentRow++;

            if (taxLimitOriginalByCode.exists(taxCode))
            {
                List originalRecordList = taxLimitOriginalByCode.lookup(taxCode);

                this.setHeaderCell(rowCells.get_Item(currentRow, 1), strFmt('%1:', "@SYS5301"));
                currentRow++;

                ListEnumerator originalRecordListEnumerator = originalRecordList.getEnumerator();
                while (originalRecordListEnumerator.moveNext())
                {
                    TaxCollectLimit taxLimit = originalRecordListEnumerator.current();

                    this.setWorksheetRowValue(
                        taxLimitWorksheet,
                        currentRow,
                        [taxLimit.TaxCode, taxLimit.TaxFromDate, taxLimit.TaxToDate, taxLimit.TaxMin, taxLimit.TaxMax]);

                    currentRow++;
                }
            }

            if (taxLimitByCode.exists(taxCode))
            {
                List newRecordList = taxLimitByCode.lookup(taxCode);

                this.setHeaderCell(rowCells.get_Item(currentRow, 1), strFmt('%1:', "@SYS77405"));
                currentRow++;

                ListEnumerator newRecordListEnumerator = newRecordList.getEnumerator();
                while (newRecordListEnumerator.moveNext())
                {
                    TaxCollectLimit taxLimit = newRecordListEnumerator.current();

                    this.setWorksheetRowValue(
                        taxLimitWorksheet,
                        currentRow,
                        [taxLimit.TaxCode, taxLimit.TaxFromDate, taxLimit.TaxToDate, taxLimit.TaxMin, taxLimit.TaxMax]);

                    currentRow++;
                }
            }

            currentRow++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaxGroupChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the changes of <c>TaxGroupData</c>.
    /// </summary>
    /// <param name = "_package">An instace of the <c>ExcelPackage</c> in EPPlus library.</param>
    internal void logTaxGroupChanges(OfficeOpenXml.ExcelPackage _package)
    {
        Map taxGroupDataByGroup = new Map(Types::String, Types::Class);

        while select * from taxGroupDataNewTempDB
            order by taxGroupDataNewTempDB.TaxGroup
        {
            if (taxGroupDataByGroup.exists(taxGroupDataNewTempDB.TaxGroup))
            {
                List recordsList = taxGroupDataByGroup.lookup(taxGroupDataNewTempDB.TaxGroup);

                recordsList.addEnd(taxGroupDataNewTempDB);
            }
            else
            {
                List recordsList = new List(Types::Record);

                recordsList.addEnd(taxGroupDataNewTempDB);
                taxGroupDataByGroup.add(taxGroupDataNewTempDB.TaxGroup, recordsList);
            }
        }

        while select * from taxGroupDataOriginalTempDB
            order by taxGroupDataOriginalTempDB.TaxGroup
        {
            if (taxGroupDataByGroup.exists(taxGroupDataOriginalTempDB.TaxGroup))
            {
                List recordsList = taxGroupDataByGroup.lookup(taxGroupDataOriginalTempDB.TaxGroup);

                recordsList.addEnd(taxGroupDataOriginalTempDB);
            }
            else
            {
                List recordsList = new List(Types::Record);

                recordsList.addEnd(taxGroupDataOriginalTempDB);
                taxGroupDataByGroup.add(taxGroupDataOriginalTempDB.TaxGroup, recordsList);
            }
        }

        boolean isReverseChargeEnabled = ReverseChargeTaxSetupToggle::isReverseChargeUIEnabled();
        OfficeOpenXml.ExcelWorksheet taxGroupWorksheet;
        var currentRow = 1;
        MapEnumerator enumerator = taxGroupDataByGroup.getEnumerator();

        while (enumerator.moveNext())
        {
            if (currentRow == 1)
            {
                taxGroupWorksheet = _package.Workbook.Worksheets.Add("@SYS68899");

                container worksheetHeaderCon = [
                    fieldNum(TaxGroupData, TaxGroup), 
                    fieldNum(TaxGroupData, TaxCode), 
                    fieldNum(TaxGroupData, ExemptTax), 
                    fieldNum(TaxGroupData, TaxExemptCode), 
                    fieldNum(TaxGroupData, UseTax)];

                if (isReverseChargeEnabled)
                {
                    worksheetHeaderCon += [fieldNum(TaxGroupData, ReverseCharge_W)];

                }

                this.setWorksheetHeaderFromTableFields(
                    taxGroupWorksheet,
                    tableNum(TaxGroupData),
                    worksheetHeaderCon);

                currentRow++;
            }

            TaxGroup taxGroup = enumerator.currentKey();

            var rowCells = taxGroupWorksheet.get_Cells();

            // Set a sub-header for tax group
            taxGroupNewTempDB.disableCache(true);
            select firstonly RecId from taxGroupNewTempDB
                where taxGroupNewTempDB.TaxGroup == taxGroup;

            str taxGroupSubHeader = taxGroupNewTempDB
                ? strFmt('%1(%2)', taxGroup, "@SYS77405")
                : strFmt('%1', taxGroup);
            this.setHeaderCell(rowCells.get_Item(currentRow, 1), taxGroupSubHeader);
            currentRow++;

            List recordList = enumerator.currentValue();
            ListEnumerator recordListEnumerator = recordList.getEnumerator();
            while (recordListEnumerator.moveNext())
            {
                TaxGroupData taxGroupData = recordListEnumerator.current();
                TaxGroupData taxGroupDataCurrent = TaxGroupData::find(taxGroupData.TaxGroup, taxGroupData.TaxCode);

                str exemptCodeSyncing;
                if (taxGroupDataCurrent.TaxExemptCode)
                {
                    taxExemptCodeNewTempDB.disableCache(true);
                    select firstonly RecId from taxExemptCodeNewTempDB
                        where taxExemptCodeNewTempDB.ExemptCode == taxGroupDataCurrent.TaxExemptCode;

                    exemptCodeSyncing = taxExemptCodeNewTempDB
                        ? strFmt('%1(%2)', taxGroupDataCurrent.TaxExemptCode, "@SYS77405")
                        : strFmt('%1', taxGroupDataCurrent.TaxExemptCode);
                }

                taxGroupDataOriginalTempDB.disableCache(true);
                select firstonly RecId from taxGroupDataOriginalTempDB
                    where taxGroupDataOriginalTempDB.TaxGroup == taxGroupData.TaxGroup
                        && taxGroupDataOriginalTempDB.TaxCode == taxGroupData.TaxCode;

                container valueContainer = [taxGroupData.TaxGroup, taxGroupData.TaxCode];

                if (taxGroupDataOriginalTempDB)
                {
                    valueContainer += taxGroupData.ExemptTax != taxGroupDataCurrent.ExemptTax
                        ? strFmt('%1 -> %2', taxGroupData.ExemptTax, taxGroupDataCurrent.ExemptTax)
                        : '-';

                    valueContainer += taxGroupData.TaxExemptCode != taxGroupDataCurrent.TaxExemptCode
                        ? strFmt('%1 -> %2', taxGroupData.TaxExemptCode, exemptCodeSyncing)
                        : '-';

                    valueContainer += taxGroupData.UseTax != taxGroupDataCurrent.UseTax
                        ? strFmt('%1 -> %2', taxGroupData.UseTax, taxGroupDataCurrent.UseTax)
                        : '-';

                    if (isReverseChargeEnabled)
                    {
                        valueContainer += taxGroupData.ReverseCharge_W != taxGroupDataCurrent.ReverseCharge_W
                            ? strFmt('%1 -> %2', taxGroupData.ReverseCharge_W, taxGroupDataCurrent.ReverseCharge_W)
                            : '-';
                    }
                }
                else
                {
                    valueContainer += [
                        taxGroupData.ExemptTax, 
                        exemptCodeSyncing, 
                        taxGroupData.UseTax];

                    if (isReverseChargeEnabled)
                    {
                        valueContainer += [taxGroupData.ReverseCharge_W];
                    }
                }

                this.setWorksheetRowValue(taxGroupWorksheet, currentRow, valueContainer);
                currentRow++;
            }

            currentRow++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaxItemGroupChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the changes of <c>TaxOnItem</c>.
    /// </summary>
    /// <param name = "_package">An instace of the <c>ExcelPackage</c> in EPPlus library.</param>
    internal void logTaxItemGroupChanges(OfficeOpenXml.ExcelPackage _package)
    {
        Map taxItemGroupDataByGroup = new Map(Types::String, Types::Class);

        while select * from taxOnItemNewTempDB
            order by taxOnItemNewTempDB.TaxItemGroup
        {
            if (taxItemGroupDataByGroup.exists(taxOnItemNewTempDB.TaxItemGroup))
            {
                List recordsList = taxItemGroupDataByGroup.lookup(taxOnItemNewTempDB.TaxItemGroup);

                recordsList.addEnd(taxOnItemNewTempDB);
            }
            else
            {
                List recordsList = new List(Types::Record);

                recordsList.addEnd(taxOnItemNewTempDB);
                taxItemGroupDataByGroup.add(taxOnItemNewTempDB.TaxItemGroup, recordsList);
            }
        }

        OfficeOpenXml.ExcelWorksheet taxItemGroupWorksheet;
        var currentRow = 1;
        MapEnumerator enumerator = taxItemGroupDataByGroup.getEnumerator();

        while (enumerator.moveNext())
        {
            if (currentRow == 1)
            {
                taxItemGroupWorksheet = _package.Workbook.Worksheets.Add("@SYS21989");

                this.setWorksheetHeaderFromTableFields(taxItemGroupWorksheet, tableNum(TaxOnItem), [fieldNum(TaxOnItem, TaxItemGroup), fieldNum(TaxOnItem, TaxCode)]);

                currentRow++;
            }

            TaxItemGroup taxItemGroup = enumerator.currentKey();

            var rowCells = taxItemGroupWorksheet.get_Cells();

            // Set a sub-header for tax item group
            taxItemGroupNewTempDB.disableCache(true);
            select firstonly RecId from taxItemGroupNewTempDB
                where taxItemGroupNewTempDB.TaxItemGroup == taxItemGroup;

            str taxGroupSubHeader = taxItemGroupNewTempDB
                ? strFmt('%1(%2):', taxItemGroup, "@SYS77405")
                : strFmt('%1:', taxItemGroup);
            this.setHeaderCell(rowCells.get_Item(currentRow, 1), taxGroupSubHeader);
            currentRow++;

            List recordList = enumerator.currentValue();
            ListEnumerator recordListEnumerator = recordList.getEnumerator();
            while (recordListEnumerator.moveNext())
            {
                TaxOnItem taxOnItem = recordListEnumerator.current();

                this.setWorksheetRowValue(taxItemGroupWorksheet, currentRow, [taxOnItem.TaxItemGroup, taxOnItem.TaxCode]);
                currentRow++;
            }

            currentRow++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorksheetHeaderFromTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the header of the worksheet based on table id and field Ids specified.
    /// </summary>
    /// <param name = "_worksheek">The worksheet to be set the header.</param>
    /// <param name = "_tableId">The table Id used to get the field name.</param>
    /// <param name = "_fieldIdContainer">The container that contains field Ids.</param>
    /// <param name = "_headerRowNum">The row number of header row.</param>
    internal void setWorksheetHeaderFromTableFields(
        OfficeOpenXml.ExcelWorksheet _worksheek,
        TableId _tableId,
        container _fieldIdContainer,
        int _headerRowNum = 1)
    {
        var cells = _worksheek.get_Cells();

        for (int i = 1; i <= conLen(_fieldIdContainer); i++)
        {
            DictField field = new DictField(_tableId, conPeek(_fieldIdContainer, i));

            var headerCell = cells.get_Item(_headerRowNum, i);

            var column = headerCell.get_Worksheet().Column(headerCell.get_Start().get_Column());
            var columnStyle = column.get_Style();
            var columnNumberFormat = columnStyle.get_Numberformat();

            switch (field.baseType())
            {
                case Types::Real:
                    columnNumberFormat.set_Format(NumberFormatString);
                    columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Right);
                    break;

                case Types::Integer:
                case Types::Int64:
                    columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Right);
                    break;

                case Types::Date:
                    columnNumberFormat.set_Format(DateFormatString);
                    columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Right);
                    break;

                default:
                    columnNumberFormat.set_Format(GenericFormatString);
                    columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Left);
                    break;
            }

            this.setHeaderCell(headerCell, field.label());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorksheetRowValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for row in worksheet.
    /// </summary>
    /// <param name = "_worksheek">The worksheet to be set the row value.</param>
    /// <param name = "_rowNum">The row number.</param>
    /// <param name = "_valueContainer">The container that contains the values of the row.</param>
    internal void setWorksheetRowValue(
        OfficeOpenXml.ExcelWorksheet _worksheek,
        int _rowNum,
        container _valueContainer)
    {
        var cells = _worksheek.get_Cells();

        for (int i = 1; i <= conLen(_valueContainer); i++)
        {
            anytype value = conPeek(_valueContainer, i);
            var cell = cells.get_Item(_rowNum, i);

            switch (typeOf(value))
            {
                case Types::Real:
                case Types::Int64:
                case Types::Integer:
                    if (value != 0)
                    {
                        cell.set_Value(value);
                    }
                    break;

                case Types::Date:
                    if (value != dateNull())
                    {
                        System.DateTime dateTime = value;
                        cell.set_Value(dateTime);
                    }
                    break;

                case Types::Enum:
                    cell.set_Value(enum2Str(value));
                    break;

                default:
                    cell.set_Value(any2Str(value));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the header cell.
    /// </summary>
    /// <param name = "_headerCell">The header cell.</param>
    /// <param name = "_headerString">The header title string.</param>
    protected void setHeaderCell(OfficeOpenXml.ExcelRange _headerCell, str _headerString)
    {
        var cellStyle = _headerCell.get_Style();
        cellStyle.set_HorizontalAlignment(OfficeOpenXml.Style.ExcelHorizontalAlignment::Left);
        cellStyle.get_Font().set_Bold(true);

        _headerCell.Value = _headerString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>