<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPostDeploymentConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
using AppLogging = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// Retail post deployment configuration class.
/// </summary>
class RetailPostDeploymentConfiguration
{
    public boolean isMajorMigrationMode = false;

    private XmlDocument configuration;

    private const str channelProfileNamePath = '/Configuration/ConfigureChannelProfile/RetailChannelProfileName';
    private const str retailServerUrlPath = '/Configuration/ConfigureChannelProfile/RetailServerUrl';
    private const str mediaServerUrlPath = '/Configuration/ConfigureChannelProfile/MediaServerUrl';
    private const str cloudPOSUrlPath = '/Configuration/ConfigureChannelProfile/CloudPOSUrl';
    
    private const str enableRetailOnlyModeConfigKeyPath = '/Configuration/ConfigureRetailEnvironment/EnableRetailOnlyModeConfigKey';
    private const str disableOverlayeringPath = '/Configuration/ConfigureRetailEnvironment/DisableOverlayering';
    private const str productSkuPath = '/Configuration/ConfigureRetailEnvironment/ProductSku';
    private const str retailProductSku = 'Dynamics365ForRetail';
    private const str commerceProductSku = 'Dynamics365Commerce';

    private const str AosAdminIdPath = '/Configuration/ConfigureRealTimeService/AosAdminUserId';
    private const str dataGroupDescriptionPath = '/Configuration/ConfigureAsyncService/DataGroupDescription';
    private const str dataGroupNamePath = '/Configuration/ConfigureAsyncService/DataGroupName';
    private const str databaseProfileNamePath = '/Configuration/ConfigureAsyncService/DatabaseProfileName';
    private const str channelDatabaseServerPath = '/Configuration/ConfigureAsyncService/ChannelDatabaseServer';
    private const str channelDatabaseNamePath = '/Configuration/ConfigureAsyncService/ChannelDatabaseName';
    private const str channelDatabaseUserPath = '/Configuration/ConfigureAsyncService/ChannelDatabaseUser';
    private const str channelDatabasePassPath = '/Configuration/ConfigureAsyncService/ChannelDatabasePass';
    private const str channelDbTrustServerCertificate = '/Configuration/ConfigureAsyncService/TrustServerCertificate';

    private const str rtsProfileIdPath = '/Configuration/ConfigureRealTimeService/RtsProfileId';
    private const str aosUrlPath = '/Configuration/ConfigureRealTimeService/AosUrl';
    private const str aosSoapUrlPath = '/Configuration/ConfigureRealTimeService/AosSoapUrl';
    private const str identityProviderPath = '/Configuration/ConfigureRealTimeService/IdentityProvider';
    private const str userIdPath = '/Configuration/ConfigureRealTimeService/UserId';
    private const str audienceUrnPath = '/Configuration/ConfigureRealTimeService/AudienceUrn';
    private const str languagePath = '/Configuration/ConfigureRealTimeService/Language';
    private const str tenantIdPath = '/Configuration/ConfigureRealTimeService/TenantId';
    private const str azureAuthorityPath = '/Configuration/ConfigureRealTimeService/AzureAuthority';

    private const str sideloadingKeyPath = '/Configuration/ConfigureRetailSelfService/RetailSideloadingKey';
    private const str environmentIdPath = '/Configuration/ConfigureRetailSelfService/EnvironmentId';
    private const str clientAppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/ClientAppInsightsInstrumentationKey';
    private const str hardwareStationAppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/HardwareStationAppInsightsInstrumentationKey';
    private const str cloudPosAppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/CloudPosAppInsightsInstrumentationKey';
    private const str retailServerAppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/RetailServerAppInsightsInstrumentationKey';
    private const str asyncClientAppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/AsyncClientAppInsightsInstrumentationKey';
    private const str windowsPhoneAppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/WindowsPhoneAppInsightsInstrumentationKey';
    private const str asyncServerConnectorServiceAppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/AsyncServerConnectorServiceAppInsightsInstrumentationKey';
    private const str realtimeServiceAX63AppInsightsInstrumentationKeyPath = '/Configuration/ConfigureRetailSelfService/RealtimeServiceAX63AppInsightsInstrumentationKey';

    // steps that needs to be executed for Global Azure
    private const str ConfigureWellKnownTenant = 'ConfigureWellKnownTenant';
    private const str ConfigureRDSRegistration = 'ConfigureRDSRegistration';
    private const str ApplySecurityUpdateForTestConnector = 'ApplySecurityUpdateForTestConnector';
    private const str RunSeedDataGenerator = 'RunSeedDataGenerator';
    private const str ConfigureRetailChannelProfile = 'ConfigureRetailChannelProfile';
    private const str ConfigureRetailEnvironment = 'ConfigureRetailEnvironment';
    private const str ConfigureAsyncService = 'ConfigureAsyncService';
    private const str ConfigureRealTimeService = 'ConfigureRealTimeService';
    private const str ConfigureSelfService = 'ConfigureSelfService';
    private const str AdditionalPostDeploymentConfiguration = 'AdditionalPostDeploymentConfiguration';
    private const str RunCdxJobs = 'RunCdxJobs';

    // steps that needs to be skipped for China Azure (aka Mooncake)
    private const container ChinaAzureDeploymentStepsToSkip = [ConfigureRetailChannelProfile, ConfigureAsyncService, RunCdxJobs];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies configuration to the systems. Configuration includes:
    /// * Running Seed Data Generator
    /// * Configuring Async Service
    /// * Configuring Real-time Service
    /// * Running CDX jobs
    /// * Configuration of Self Service including package upload
    /// </summary>
    /// <param name = "configuration">Configuration that has to be applied in XML format.
    /// Sample XML document looks like this:
    /// <![CDATA[
    /// <?xml version="1.0" encoding="UTF-8"?>
    ///<Configuration skipRunSeedDataGenerator="False" skipConfigureAsyncService="False" skipConfigureRealTimeService="False" skipRunCdxJobs="False" skipConfigureSelfService="False">
    ///    <ConfigureAsyncService>
    ///     <ChannelDatabaseServer>.</ChannelDatabaseServer>
    ///     <ChannelDatabaseName>RetailTestStoreDB</ChannelDatabaseName>
    ///     <ChannelDatabaseUser>axdbadmin</ChannelDatabaseUser>
    ///     <ChannelDatabasePass>*******</ChannelDatabasePass>
    ///     <DataGroupName>Default</DataGroupName>
    ///     <DataGroupDescription>Default data group</DataGroupDescription>
    ///     <DatabaseProfileName>Default</DatabaseProfileName>
    ///     <TrustServerCertificate>True</TrustServerCertificate>
    ///    </ConfigureAsyncService>
    ///    <ConfigureChannelProfile>
    ///     <RetailChannelProfileName>Retail server channel profile</RetailChannelProfileName>
    ///     <RetailServerUrl>https://usnconeboxax1ret.cloud.onebox.dynamics.com/Commerce</RetailServerUrl>
    ///     <MediaServerUrl>https://usnconeboxax1ret.cloud.onebox.dynamics.com/MediaServer</MediaServerUrl>
    ///     <CloudPOSUrl>https://usnconeboxax1pos.cloud.onebox.dynamics.com/</CloudPOSUrl>
    ///     <EnableRetailOnlyModeConfigKey>true</EnableRetailOnlyModeConfigKey>
    ///     <DisableOverlayering>true</DisableOverlayering>
    ///     <ProductSku>Dynamics365ForRetail</ProductSku>
    ///    </ConfigureChannelProfile>
    ///    <ConfigureRealTimeService>
    ///     <AosUrl>https://clxtestax119aos.cloud.test.dynamics.com</AosUrl>
    ///     <AosSoapUrl>https://clxtestax119aossoap.cloud.test.dynamics.com</AosSoapUrl>
    ///     <IdentityProvider>https://sts.windows-ppe.net/</IdentityProvider>
    ///     <UserId>RetailServerSystemAccount@dynamics.com</UserId>
    ///     <AosAdminUserId>Tusr1@TAEOfficial.ccsctp.net</AosAdminUserId>
    ///     <AudienceUrn>spn:00000015-0000-0000-c000-000000000000</AudienceUrn>
    ///     <RtsProfileId>Default</RtsProfileId>
    ///     <AzureAuthority>https://login.windows.net/contosoax7.onmicrosoft.com</AzureAuthority>
    ///    </ConfigureRealTimeService>
    ///    <ConfigureRetailSelfService>
    ///     <RetailSideloadingKey>6CK9N-MWJBW-3YPPY-X9MTW-29T77</RetailSideloadingKey>
    ///    </ConfigureRetailSelfService>
    ///    </Configuration>
    ///     ]]]]><![CDATA[>
    /// </param>
    [HookableAttribute(false)]
    public static void apply(str configString)
    {
        System.Exception exception;

        try
        {
            if (RetailDeploymentUtility::isRetailEnabled()) // If Retail is enabled, run post deployment service, otherwise, skip it..
            {
                AppLogging::EventWriteRetailPostDeplConfigApplyExecStart();
                RetailPostDeploymentConfiguration postDeploymentConfiguration = new RetailPostDeploymentConfiguration();
                postDeploymentConfiguration.SetConfiguration(configString);
                postDeploymentConfiguration.isMajorMigrationMode = false;
                postDeploymentConfiguration.process();
                AppLogging::EventWriteRetailPostDeplConfigApplyExecStop('Success');
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('Retail post deployment is skipped because Retail or RetailScheduler is not enabled.');
            }
        }
        catch (exception)
        {
            AppLogging::EventWriteRetailPostDeplConfigApplyExecFailure(exception.Message, exception.GetType().ToString(), exception.StackTrace);
            AppLogging::EventWriteRetailPostDeplConfigApplyExecStop('Failure');
            throw error(exception.Message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// process the post configuration.
    /// </summary>
    [HookableAttribute(false)]
    public void process()
    {
        {
            // Configure well known tenant for demo data set
            const str section = ConfigureWellKnownTenant;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.configureWellKnownTenant();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }
        {
            const str section = ConfigureRDSRegistration;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.configureRDSRegistration();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }
        {
            // Apply the security update for test connnector
            const str section = ApplySecurityUpdateForTestConnector;
            if (this.shouldExecuteAction(section))
            {
                Args args = new Args();
                XmlNode productSkuNode = configuration.SelectSingleNode(productSkuPath);
                str productSku = '';

                if (productSkuNode)
                {
                    productSku = productSkuNode.innerText();
                }

                args.parm(productSku);

                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                RetailSecurityUpdate7::main(args);
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }
        {
            const str section = RunSeedDataGenerator;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.runSeedDataGenerator();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }
        {
            // Update retail channel with the right information
            const str section = ConfigureRetailChannelProfile;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.configureRetailChannelProfile();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }
        {
            const str section = ConfigureRetailEnvironment;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.configureEnvironmentForRetail();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }
        {
            const str section = ConfigureAsyncService;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.configureAsyncService();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }

        {
            const str section = ConfigureRealTimeService;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.configureRealTimeService();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }

        {
            const str section = ConfigureSelfService;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.configureSelfService();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }

        {
            // Hook to allow adding additional post deployment configuration steps
            // to be executed before the CDX jobs.
            const str section = AdditionalPostDeploymentConfiguration;

            AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
            this.postDeploymentConfigurationDelegate(this.configuration);
            AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);

        }

        // Execution of the CDX jobs is required to be the last step to ensure no post-configuration activity
        // gets skipped if CDX job execution fails.
        {
            const str section = RunCdxJobs;
            if (this.shouldExecuteAction(section))
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(section);
                this.runCdxJobs();
                AppLogging::EventWriteRetailPostDeplConfigSectionExecStop(section);
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(section);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDeploymentConfigurationDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to allow adding additional post deployment configuration steps.
    /// </summary>
    /// <param name = "configurationXml">The configuration xml used to customize the system.</param>
    delegate void postDeploymentConfigurationDelegate(XmlDocument configurationXml)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfiguration</Name>
				<Source><![CDATA[
    [HookableAttribute(false)]
    public void setConfiguration(str config)
    {
        this.configuration = new XmlDocument();
        configuration.loadXml(config);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureRetailChannelProfile</Name>
				<Source><![CDATA[
    private void configureRetailChannelProfile()
    {
        System.String retailChannelProfileName = configuration.SelectSingleNode(channelProfileNamePath).InnerText();
        System.String retailServerUrl = configuration.SelectSingleNode(retailServerUrlPath).InnerText();
        System.String mediaServerUrl = configuration.SelectSingleNode(mediaServerUrlPath).InnerText();
        System.String cloudPOSUrl = configuration.SelectSingleNode(cloudPOSUrlPath).InnerText();

        System.String identityProvider = configuration.SelectSingleNode(identityProviderPath).InnerText();
        System.String tenantId = configuration.SelectSingleNode(tenantIdPath).InnerText();

        RetailChannelProfile channelProfile;
        RetailChannelProfileProperty retailServerProperty, mediaServerProperty, cloudPosProperty;

        ttsbegin;

        RetailProvisioningEndPoint::updateRetailAuthTables(str2Guid(tenantId), identityProvider, retailServerUrl);

        // Work-around code to ensure Demo Data is in the expected form,
        // a bug (3742253) has been filed to remove this fallback once Demo Data is updated
        if (RetailDeploymentUtility::isDemoDataLoaded())
        {
            #Retail
            // Attempt to select the default profile from demo data.
            select firstonly1 forupdate channelProfile where channelProfile.Name == #OldDefaultRetailChannelProfileName &&
                                                            channelProfile.ChannelProfileType == RetailChannelProfileType::RetailServer;
            // If the demo data channel profile was found, update its name to the one configured to be used before proceeding.
            if (channelProfile)
            {
                channelProfile.Name = retailChannelProfileName;
                channelProfile.update();
            }
        }

        // Attempt to find the configured channel profile.
        select firstonly1 forupdate channelProfile where channelProfile.Name == retailChannelProfileName &&
                                                        channelProfile.ChannelProfileType == RetailChannelProfileType::RetailServer;
        // If the configured channel profile cannot be found, then insert a record for it.
        if (!channelProfile)
        {
            channelProfile.initValue();
            channelProfile.Name = retailChannelProfileName;
            channelProfile.ChannelProfileType = RetailChannelProfileType::RetailServer;
            channelProfile.IsSystemRecord = NoYes::Yes;
            channelProfile.insert();
        }
        else
        {
            channelProfile.IsSystemRecord = NoYes::Yes;
            channelProfile.update();
        }

        select firstonly1 forupdate retailServerProperty where retailServerProperty.Key == RetailServerProfilePropertyKey::InternalUrl && retailServerProperty.ChannelProfile == channelProfile.RecId;
        select firstonly1 forupdate mediaServerProperty where mediaServerProperty.Key == RetailServerProfilePropertyKey::MediaBaseUrl && mediaServerProperty.ChannelProfile == channelProfile.RecId;
        select firstonly1 forupdate cloudPosProperty where cloudPosProperty.Key == RetailServerProfilePropertyKey::CloudPOSUrl && cloudPosProperty.ChannelProfile == channelProfile.RecId;

        if (retailServerUrl)
        {
            if (retailServerProperty.RecId == 0)
            {
                retailServerProperty.initValue();
                retailServerProperty.Key = RetailServerProfilePropertyKey::InternalUrl;
                retailServerProperty.Value = retailServerUrl;
                retailServerProperty.ChannelProfile = channelProfile.RecId;
                retailServerProperty.IsSystemRecord = NoYes::Yes;
                retailServerProperty.insert();
            }
            else
            {
                retailServerProperty.Value = retailServerUrl;
                retailServerProperty.IsSystemRecord = NoYes::Yes;
                retailServerProperty.update();
            }
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('Retail Server URL not populated in Channel Profiles because retail server url parameter value is not provided.');
        }

        if (mediaServerUrl)
        {
            if (RetailDeploymentUtility::isDemoDataLoaded())
            {
                if (mediaServerProperty.RecId == 0)
                {
                    mediaServerProperty.initValue();
                    mediaServerProperty.Key = RetailServerProfilePropertyKey::MediaBaseUrl;
                    mediaServerProperty.Value = mediaServerUrl;
                    mediaServerProperty.ChannelProfile = channelProfile.RecId;
                    mediaServerProperty.insert();
                }
                else
                {
                    mediaServerProperty.Value = mediaServerUrl;
                    mediaServerProperty.update();
                }
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('Media base URL not populated in Channel Profiles because demo data is not loaded.');
            }
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('Media base URL not populated in Channel Profiles because media server url parameter value is not provided.');
        }

        if (cloudPosUrl)
        {
            if (cloudPosProperty.RecId == 0)
            {
                cloudPosProperty.initValue();
                cloudPosProperty.Key = RetailServerProfilePropertyKey::CloudPOSUrl;
                cloudPosProperty.Value = cloudPosUrl;
                cloudPosProperty.ChannelProfile = channelProfile.RecId;
                cloudPosProperty.IsSystemRecord = NoYes::Yes;
                cloudPosProperty.insert();
            }
            else
            {
                cloudPosProperty.Value = cloudPosUrl;
                cloudPosProperty.IsSystemRecord = NoYes::Yes;
                cloudPosProperty.update();
            }
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('Cloud POS URL not populated in Channel Profiles because cloudPos url parameter value is not provided.');
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureEnvironmentForRetail</Name>
				<Source><![CDATA[
    private void configureEnvironmentForRetail()
    {
        XmlNode enableRetailOnlyModeConfigKeyNode = configuration.SelectSingleNode(enableRetailOnlyModeConfigKeyPath);
        XmlNode disableOverlayeringNode = configuration.SelectSingleNode(disableOverlayeringPath);
        XmlNode productSkuNode = configuration.SelectSingleNode(productSkuPath);

        ttsbegin;

        // If it is a retail/commerce only environment with demodata, set the default company to USRT for the admin user.
        if (productSkuNode && 
            (productSkuNode.innerText() == retailProductSku || productSkuNode.innerText() == commerceProductSku))
        {
            if(RetailDeploymentUtility::isDemoDataLoaded())
            {
                XmlNode node = configuration.SelectSingleNode(AosAdminIdPath);

                if (node)
                {
                    UserInfo userInfo;
                    System.String aosAdminUserId = node.InnerText();

                    select firstonly forupdate userInfo where userInfo.networkAlias == aosAdminUserId;
                    userInfo.company = 'USRT';
                    userInfo.update();
                }
            }
        }
        
        if (enableRetailOnlyModeConfigKeyNode)
        {
            System.Boolean enableRetailOnlyModeConfigKey;

            // Only switch to "retail only" mode if the configuration entry has been specified, and the value is "true"
            if (System.Boolean::TryParse(enableRetailOnlyModeConfigKeyNode.innerText(), byref enableRetailOnlyModeConfigKey) &&
                enableRetailOnlyModeConfigKey)
            {
                OfferingManagement::switchToDynamics365ForRetail();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureWellKnownTenant</Name>
				<Source><![CDATA[
    private void configureWellKnownTenant()
    {
        XmlNode node = configuration.SelectSingleNode(AosAdminIdPath);

        if (RetailDeploymentUtility::isDemoDataLoaded() && node)
        {
            System.String aosAdminUserId = node.InnerText();
            System.String tenantGuid;
            System.String aadUserGuid;
            System.String tenantName;

            aosAdminUserId = aosAdminUserId.ToLower();
            tenantName = aosAdminUserId.Substring(aosAdminUserId.IndexOf('@') + 1);

            switch (tenantName)
            {
                case 'contosoax7.onmicrosoft.com' :
                    tenantGuid = 'c83429a6-782b-4275-85cf-60ebe81250ee';
                    aadUserGuid = 'a036b5d8-bc8c-4abe-8eec-17516ea913ec';
                    break;
                case 'contoso2ax7.onmicrosoft.com' :
                    tenantGuid = '37b1d3b4-54d4-4965-a7b4-188988c0a3c7';
                    aadUserGuid = '765c7454-8528-458f-b216-fd0120ac7efb';
                    break;
                case 'intcontoso2ax7.onmicrosoft.com' :
                    tenantGuid = '467e02d9-6316-4e66-9839-eb7f53dc1990';
                    aadUserGuid = '9e1dcfaf-e2e7-4734-a6dd-38d659d24e0c';
                    break;
                case 'contoso2ax7.ccsctp.net' :
                    tenantGuid = 'b868ff20-e74e-44fa-a138-f68209937b26';
                    aadUserGuid = 'abcead8f-5e32-43ba-be3c-0225d2321faa';
                    break;
                case 'ax7partner.ccsctp.net' :
                    tenantGuid = '419172c7-856e-4b44-b3d0-6b79c09ab59f';
                    aadUserGuid = '27821146-f133-4dcb-aef6-8a42586b6ce1';
                    break;
                case 'taeofficial.ccsctp.net' :
                    tenantGuid = '4dbfcf74-c5a6-4727-b638-d56e51d1f381';
                    aadUserGuid = 'b45cc6d9-e4b7-42bf-b75d-3482ada55655';

                    RetailProvisioningEndPoint::updateTestOpenIdConnectAuthValues();

                    break;
            }

            if (tenantGuid && aadUserGuid)
            {
                ttsbegin;
                RetailDeploymentUtility::MapAADStaff("000160", tenantGuid, aadUserGuid);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureRDSRegistration</Name>
				<Source><![CDATA[
    private void configureRDSRegistration()
    {
        #define.RDSAppName('RetailDeploymentSystemApplication')
        #define.RetailServiceAccountName('RetailServiceAccount')
        #define.RDSAppId('4740b4e5-037a-47c2-a554-fbb9049eb92b')

        // this configured the RDS app id in AOS as a trusted application
        // this only configured it when the AOS is deployed in internal test environments
        // this is required for automated end to end testing with AMI support
        if (RetailDeploymentUtility::isDemoDataLoaded() && !RetailDeploymentUtility::isEnvironmentConfiguredForProduction())
        {
            SysAADClientTable sysAADClientTable;

            select firstonly RecId from sysAADClientTable where sysAADClientTable.Name == #RDSAppName;
            if (sysAADClientTable.RecId > 0)
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('configureRDSRegistration skipped because record already exists in the DB');
                return;
            }

            ttsbegin;

            sysAADClientTable.AADClientId = #RDSAppId;
            sysAADClientTable.Name = #RDSAppName;
            sysAADClientTable.UserId = #RetailServiceAccountName;
            sysAADClientTable.insert();

            ttscommit;
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('configureRDSRegistration skipped because this is not a demo data + internal test environment');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSeedDataGenerator</Name>
				<Source><![CDATA[
    private void runSeedDataGenerator()
    {
        if (RetailDeploymentUtility::isRetailSchedulerEnabled())  // If Retail and RetailScheduler are enabled, run seed data, otherwise, skip it.
        {
            RetailServicingOrchestrator::generateRequiredSeedDataNumberSequences();
            RetailConnSeedDataGenerator::main(null);

            // Remove any existing mapping between CDX data groups and specific jobs.
            // The appropriate mapping will be added at a later stage.
            RetailCDXScheduleDataGroup retailCDXScheduleDataGroup;

            delete_from retailCDXScheduleDataGroup;

            RetailCDXSeedDataAX7 seed = new RetailCDXSeedDataAX7(true);
            seed.run();
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('Seed data is skipped because Retail or RetailScheduler is not enabled.');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailCDXDataGroup</Name>
				<Source><![CDATA[
    private RecId createRetailCDXDataGroup()
    {
        System.String dataGroupDescription = configuration.SelectSingleNode(dataGroupDescriptionPath).InnerText();
        System.String dataGroupName = configuration.SelectSingleNode(dataGroupNamePath).InnerText();

        RetailCDXDataGroup datagroup;

        ttsbegin;

        select firstonly forupdate datagroup
            where datagroup.Name == dataGroupName;

        if (!datagroup)
        {
            AppLogging::EventWriteRetailPostDeplConfigDataGroupSearchCompleted(dataGroupName, false);

            datagroup.initValue();
            datagroup.Name = dataGroupName;
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigDataGroupSearchCompleted(dataGroupName, true);
        }

        #RetailCDX
        RetailConnChannelSchema channelSchema;
        select firstonly channelSchema
                where channelSchema.SchemaName == #AX7SchemaName;

        if (!channelSchema)
        {
            error(strFmt("Channel schema %1 was not found", #AX7SchemaName));
        }

        datagroup.Description = dataGroupDescription;
        datagroup.ChannelSchema = channelSchema.RecId;
        datagroup.write();

        ttscommit;

        AppLogging::EventWriteRetailPostDeplConfigDataGroupUpsertCompleted(dataGroupName, datagroup.RecId);

        return datagroup.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpAsyncServiceConfiguration</Name>
				<Source><![CDATA[
    private void cleanUpAsyncServiceConfiguration()
    {
        if(!isMajorMigrationMode)
        {
            System.String databaseProfileName = configuration.SelectSingleNode(databaseProfileNamePath).InnerText();
            System.String dataGroupName = configuration.SelectSingleNode(dataGroupNamePath).InnerText();
            ttsbegin;

            // Delete all database profiles except the one we've configured
            RetailConnDatabaseProfile databaseProfile;
            delete_from databaseProfile
                where databaseProfile.Name != databaseProfileName;

            // Delete all data groups except the one we've configured
            RetailCDXDataGroup dataGroup;
            delete_from dataGroup
                where dataGroup.Name != dataGroupName;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataGroupToAllSchedules</Name>
				<Source><![CDATA[
    private void addDataGroupToAllSchedules(RecId dataGroupRecId)
    {
        RetailConnSchedule schedule;
        RetailCDXScheduleDataGroup scheduleDataGroup;

        AppLogging::EventWriteRetailPostDeplConfigAddDataGroupToAllSchedulesStart(dataGroupRecId);

        ttsbegin;

        // Remove any existing mappings between jobs and the specified data group (to avoid conflicts)
        delete_from scheduleDataGroup
            where scheduleDataGroup.DataGroup == dataGroupRecId;

        // Map every job to the specified data group
        insert_recordset scheduleDataGroup (Schedule, DataGroup)
            select RecId, dataGroupRecId
            from schedule;

        ttscommit;

        AppLogging::EventWriteRetailPostDeplConfigAddDataGroupToAllSchedulesStop(dataGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChannelDatabaseProfile</Name>
				<Source><![CDATA[
    private void createChannelDatabaseProfile(RecId dataGroupRecId)
    {
        System.String databaseProfileName = configuration.SelectSingleNode(databaseProfileNamePath).InnerText();
        System.String channelDatabaseServer = configuration.SelectSingleNode(channelDatabaseServerPath).InnerText();
        System.String channelDatabaseName = configuration.SelectSingleNode(channelDatabaseNamePath).InnerText();

        System.String channelDatabaseUser = configuration.SelectSingleNode(channelDatabaseUserPath).InnerText();
        System.String channelDatabasePass = configuration.SelectSingleNode(channelDatabasePassPath).InnerText();
        System.String trustServerCertificate = configuration.selectSingleNode(channelDbTrustServerCertificate).innerText();
        RetailConnDatabaseProfile databaseProfile;

        AppLogging::EventWriteRetailPostDeplConfigCreateChannelDatabaseProfileExecStart();

        ttsbegin;
        select firstonly1 forupdate databaseProfile  where databaseProfile.Name == databaseProfileName;

        if (databaseProfile.RecId == 0)
        {
            AppLogging::EventWriteRetailPostDeplConfigChannelDatabaseProfileSearchCompleted(databaseProfileName, false);
            databaseProfile.Name = databaseProfileName;
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigChannelDatabaseProfileSearchCompleted(databaseProfileName, true);
        }

        AppLogging::EventWriteRetailPostDeplConfigChannelDatabaseProfileCreationInfo(dataGroupRecId, channelDatabaseServer, channelDatabaseName, channelDatabaseUser);
        databaseProfile.DataGroup = dataGroupRecId;

        // Generate channel database connectionString. Encrypt and save it.
        str channelDatabaseConnectionString = RetailConnDatabaseProfile::buildCustomConnectionString(
                                                    channelDatabaseServer, channelDatabaseName, channelDatabaseUser,
                                                    channelDatabasePass, trustServerCertificate);
        databaseProfile.connectionStringEdit(true, channelDatabaseConnectionString);

        if (databaseProfile.RecId == 0)
        {
            databaseProfile.insert();

            RetailDeploymentUtility::UpdateAllValidChannelDatabaseProfileReferences(databaseProfile.RecId);
        }
        else
        {
            databaseProfile.update();
        }

        ttscommit;

        AppLogging::EventWriteRetailPostDeplConfigCreateChannelDatabaseProfileExecStop();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureAsyncService</Name>
				<Source><![CDATA[
    private void configureAsyncService()
    {
        RecId dataGroupRecId = this.createRetailCDXDataGroup();

        this.addDataGroupToAllSchedules(dataGroupRecId);

        this.createChannelDatabaseProfile(dataGroupRecId);

        this.cleanUpAsyncServiceConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureRealTimeService</Name>
				<Source><![CDATA[
    private void configureRealTimeService()
    {
        RetailTransactionServiceProfile profile;

        System.String profileId = configuration.SelectSingleNode(rtsProfileIdPath).InnerText();
        System.String aosUrl = configuration.SelectSingleNode(aosUrlPath).InnerText();
        System.String aosSoapUrl = configuration.SelectSingleNode(aosSoapUrlPath).innerText();

        System.String identityProvider = configuration.SelectSingleNode(identityProviderPath).InnerText();
        System.String userId = configuration.SelectSingleNode(userIdPath).InnerText();
        System.String audienceUrn = configuration.SelectSingleNode(audienceUrnPath).InnerText();
        System.String azureAuthority = configuration.selectSingleNode(azureAuthorityPath).innerText();

        // As per the MSDN documentation available at https://msdn.microsoft.com/en-us/library/dn451147(v=vs.114).aspx
        // The Azure Resource field is case-sensitive and hence is being set to lower case.
        System.String azureResourceString = aosUrl.toLower();

        AppLogging::EventWriteRetailPostDeplConfigRealTimeServiceProfileCreationInfo(aosUrl, identityProvider, userId, audienceUrn);

        ttsbegin;

        // Select and update the expected RTS profile, or create one should it not exist.
        select firstonly forupdate profile
            where profile.name == profileId
            && profile.IsCustomerRecord == NoYes::No;

        if (!profile)
        {
            AppLogging::EventWriteRetailPostDeplConfigRealTimeServiceProfileSearchCompleted(profileId, false);

            profile.initValue();
            profile.name = profileId;
            profile.profileId = profileId;
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigRealTimeServiceProfileSearchCompleted(profileId, true);
        }

        System.String language;

        if (configuration.SelectSingleNode(languagePath) != null)
        {
            // Get RTS profile locale code from configuration xml.
            language = configuration.SelectSingleNode(languagePath).InnerText();
        }
        else
        {
            // If locale is not passed, set company's langugage identifier.
            language = CompanyInfo::languageId();
        }

        str rtsServiceHostUrl = this.GetRTSServiceHostUrl(aosUrl, aosSoapUrl);
        AppLogging::EventWriteRetailPostDeplConfigRealTimeServiceProfileCreationInfo(aosUrl, identityProvider, userId, audienceUrn);
        AppLogging::EventWriteRetailServicingInformation(strFmt("Real-time service service host url set to: %1", rtsServiceHostUrl));

        profile.ServiceHostUrl = rtsServiceHostUrl;
        profile.IdentityProvider = identityProvider;
        profile.UserId = userId;
        profile.AudienceUrn = audienceUrn;
        profile.language = language;
        profile.AzureAuthority = azureAuthority;
        profile.AzureResource = azureResourceString;
        profile.write();

        RetailDeploymentUtility::CreateRetailServiceUser(userId, identityProvider);
        RetailDeploymentUtility::UpdateAllRtsProfileReferences(profileId);

        if(!isMajorMigrationMode)
        {
            // Remove any RTS profiles that were not configured which are not customer records.
            delete_from profile
                where profile.profileId != profileId
                && profile.IsCustomerRecord == NoYes::No;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCdxJobs</Name>
				<Source><![CDATA[
    private void runCdxJobs()
    {
        if (RetailDeploymentUtility::isDemoDataLoaded() && !RetailDeploymentUtility::isPerfDataLoaded()) // Only run CDX job when Demodata is loaded.
        {
            if (RetailDeploymentUtility::isRetailSchedulerEnabled()) // If Retail and RetailScheduler are enabled, run cdx jobs, otherwise, skip it..
            {
                // Do not run CDX job for major migration since the user will need to cleanup data and then run a full sync manually.
                if (this.isMajorMigrationMode)
                {
                    AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('CDX job running is skipped because isMajorMigrationMode is enabled.');
                }
                else
                {
                    System.String dataGroupName = configuration.SelectSingleNode(dataGroupNamePath).InnerText();
                    AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(strFmt('Try to run full sync for data group %1.',dataGroupName));

                    RetailCDXDataGroup datagroup;
                    select firstonly RecId from datagroup where datagroup.Name == dataGroupName;

                    if (datagroup)
                    {
                        AppLogging::EventWriteRetailPostDeplConfigSectionExecStart(strFmt('Runing full sync for data group %1.',dataGroupName));
                        RetailDeploymentUtility::TaskerRunCDXDownloadJobsE2E(datagroup.RecId);
                    }
                    else
                    {
                        AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped(strFmt('CDX job running is skipped because datagroup %1 is not found.',dataGroupName));
                    }
                }
            }
            else
            {
                AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('CDX job running is skipped because Retail or RetailScheduler is not enabled.');
            }
        }
        else
        {
            AppLogging::EventWriteRetailPostDeplConfigSectionExecSkipped('CDX job running is skipped because Demo data is not loaded.');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureSelfService</Name>
				<Source><![CDATA[
    private void configureSelfService()
    {
        System.Exception exception;

        /// Operation 1: Upload Self-Service packages to the tenant storage.
        RetailSelfServicePackageManager::RunPostDeploymentSelfServicePackageUpload();

        /// Operation 2: Add Sideloading key to RetailSharedParameters table
        try
        {
            RetailSharedParameters retailSharedParameters;
            System.String SideloadingKey = configuration.SelectSingleNode(sideloadingKeyPath).InnerText();
            System.String EnvironmentId = configuration.SelectSingleNode(environmentIdPath).InnerText();
            System.String TenantId = configuration.SelectSingleNode(tenantIdPath).InnerText();
            System.String ClientAppInsightsInstrumentationKey = configuration.SelectSingleNode(clientAppInsightsInstrumentationKeyPath).InnerText();
            System.String HardwareStationAppInsightsInstrumentationKey = configuration.SelectSingleNode(hardwareStationAppInsightsInstrumentationKeyPath).InnerText();
            System.String CloudPosAppInsightsInstrumentationKey = configuration.SelectSingleNode(cloudPosAppInsightsInstrumentationKeyPath).InnerText();
            System.String RetailServerAppInsightsInstrumentationKey = configuration.SelectSingleNode(retailServerAppInsightsInstrumentationKeyPath).InnerText();
            System.String AsyncClientAppInsightsInstrumentationKey = configuration.SelectSingleNode(asyncClientAppInsightsInstrumentationKeyPath).InnerText();
            System.String WindowsPhoneAppInsightsInstrumentationKey = configuration.SelectSingleNode(windowsPhoneAppInsightsInstrumentationKeyPath).InnerText();
            System.String AsyncServerConnectorServiceAppInsightsInstrumentationKey = configuration.SelectSingleNode(asyncServerConnectorServiceAppInsightsInstrumentationKeyPath).InnerText();
            System.String RealtimeServiceAX63AppInsightsInstrumentationKey = configuration.SelectSingleNode(realtimeServiceAX63AppInsightsInstrumentationKeyPath).InnerText();

            // Look for the primary record in RetailSharedParameters table.
            // If the record does not exist, it automagically creates a new record and returns it to us.
            retailSharedParameters = RetailSharedParameters::find(true);
            ttsbegin;

            if (!System.String::IsNullOrWhiteSpace(SideloadingKey))
            {
                retailSharedParameters.SideloadingKey = SideloadingKey;
                AppLogging::EventWriteSelfServiceInformation('Added sideloading key to RetailSharedParameters table from Post Configuration service.');
            }
            else
            {
                AppLogging::EventWriteSelfServiceWarning('Sideloading key value is missing. Sideloading key was not added from Post Configuration service.');
            }

            AppLogging::EventWriteSelfServiceInformation('Adding additional infomation to retailSharedParameters.');
            retailSharedParameters.EnvironmentId = EnvironmentId;
            retailSharedParameters.TenantId = TenantId;
            retailSharedParameters.ClientAppInsightsInstrumentationKey = ClientAppInsightsInstrumentationKey;
            retailSharedParameters.HardwareStationAppInsightsInstrumentationKey = HardwareStationAppInsightsInstrumentationKey;
            retailSharedParameters.CloudPosAppInsightsInstrumentationKey = CloudPosAppInsightsInstrumentationKey;
            retailSharedParameters.RetailServerAppInsightsInstrumentationKey = RetailServerAppInsightsInstrumentationKey;
            retailSharedParameters.AsyncClientAppInsightsInstrumentationKey = AsyncClientAppInsightsInstrumentationKey;
            retailSharedParameters.WindowsPhoneAppInsightsInstrumentationKey = WindowsPhoneAppInsightsInstrumentationKey;
            retailSharedParameters.AsyncServerConnectorServiceAppInsightsInstrumentationKey = AsyncServerConnectorServiceAppInsightsInstrumentationKey;
            retailSharedParameters.RealtimeServiceAX63AppInsightsInstrumentationKey = RealtimeServiceAX63AppInsightsInstrumentationKey;
            retailSharedParameters.update();
            ttscommit;
        }
        catch(exception)
        {
            AppLogging::EventWriteSelfServiceError('Adding sideloading key to RetailSharedParameters table from Post Configuration service failed.', exception.Message, exception.StackTrace);
            throw Global::error(exception.Message);
        }

        /// Operation 3: Set the default modern pos for every legal entity.
        try
        {
            AppLogging::EventWriteSelfServiceInformation('Setting default self-service packages from Post Configuration service.');
            RetailPostDeploymentConfiguration::SetCompanyDefaultSelfServicePackages();

            RetailPostDeploymentConfiguration::SetCrossCompanyDefaultSelfServicePackages();
            AppLogging::EventWriteSelfServiceInformation('Setting default self-service packages from Post Configuration service succeeded.');
        }
        catch(exception)
        {
            AppLogging::EventWriteSelfServiceError('Setting default self-service packages from Post Configuration service failed.', exception.Message, exception.StackTrace);
            throw Global::error(exception.Message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExecuteAction</Name>
				<Source><![CDATA[
    private boolean shouldExecuteAction(System.String action)
    {
        // Should this step be executed for this cloud. Note: All steps are executed for Global Azure.
        if (RetailDeploymentUtility::getCurrentCloud() == RetailDeploymentUtility::AzureChina
             && conFind(ChinaAzureDeploymentStepsToSkip, action) > 0)
        {
            return false;
        }

        System.String executeAttributeXPath = System.String::Format('/Configuration/@skip{0}', action);
        XmlNode node = configuration.SelectSingleNode(executeAttributeXPath);
        if (node == null)
        {
            return true;
        }
        return !System.Boolean::Parse(node.Value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetCompanyDefaultSelfServicePackages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default modern pos and modern pos offline packages for every legal entity.
    /// </summary>
    /// <remarks>This method is public to enable testability.</remarks>
    [HookableAttribute(false)]
    public static void SetCompanyDefaultSelfServicePackages()
    {
        int64 modernPosPkgRecId = 0;
        int64 modernPosWithOfflinePkgRecId = 0;
        str packageVersion = SelfServicePackageManager::GetApplicationVersion();

        CompanyInfo companyTable;
        RetailDefaultCompanyPackages companyPkgTable;
        RetailSelfServicePackageInfo pkgTable;

        // Find the recId for package with type modern pos without offline.
        select RecId from pkgTable where pkgTable.PackageType == PackageType::ModernPosWithoutOffline && pkgTable.PackageVersion == packageVersion;
        modernPosPkgRecId = pkgTable.RecId;

        // Find the recId for package with type modern pos with offline.
        select RecId from pkgTable where pkgTable.PackageType == PackageType::ModernPosWithOffline && pkgTable.PackageVersion == packageVersion;
        modernPosWithOfflinePkgRecId = pkgTable.RecId;

        ttsbegin;
        while select * from companyTable
        {
            select forupdate * from companyPkgTable where companyPkgTable.CompanyInfo == companyTable.RecId;

            companyPkgTable.DefaultModernPOSPackage = modernPosPkgRecId;
            companyPkgTable.DefaultModernPOSOfflinePackage = modernPosWithOfflinePkgRecId;
            companyPkgTable.CompanyInfo = companyTable.RecId;

            if (companyPkgTable.RecId == 0)
            {
                companyPkgTable.insert();
            }
            else
            {
                companyPkgTable.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetCrossCompanyDefaultSelfServicePackages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default non modern pos self-service packages for the environment.
    /// </summary>
    /// <remarks>This method is public to enable testability.</remarks>
    [HookableAttribute(false)]
    public static void SetCrossCompanyDefaultSelfServicePackages()
    {
        RetailSharedParameters retailSharedParameters = RetailSharedParameters::find(true);
        RetailSelfServicePackageInfo defaultHWSSelfServicePackage, defaultHardwarePeripheralSimulatorPackage, defaultRetailStoreScaleUnitPackage, defaultMPOSWindowsPhonePackage;

        select RecId from defaultHWSSelfServicePackage where defaultHWSSelfServicePackage.PackageType == PackageType::HardwareStation && defaultHWSSelfServicePackage.PackageVersion == SelfServicePackageManager::GetApplicationVersion();
        select RecId from defaultHardwarePeripheralSimulatorPackage where defaultHardwarePeripheralSimulatorPackage.PackageType == PackageType::HardwarePeripheralSimulator && defaultHardwarePeripheralSimulatorPackage.PackageVersion == SelfServicePackageManager::GetApplicationVersion();
        select RecId from defaultRetailStoreScaleUnitPackage where defaultRetailStoreScaleUnitPackage.PackageType == PackageType::RetailStoreScaleUnit && defaultRetailStoreScaleUnitPackage.PackageVersion == SelfServicePackageManager::GetApplicationVersion();
        select RecId from defaultMPOSWindowsPhonePackage where defaultMPOSWindowsPhonePackage.PackageType == PackageType::ModernPosWindowsPhone && defaultMPOSWindowsPhonePackage.PackageVersion == SelfServicePackageManager::GetApplicationVersion();

        ttsbegin;
        if (defaultHWSSelfServicePackage.RecId != 0)
        {
            retailSharedParameters.DefaultHWSSelfServicePkg = defaultHWSSelfServicePackage.RecId;
        }
        if (defaultHardwarePeripheralSimulatorPackage.RecId != 0)
        {
            retailSharedParameters.DefaultHardwarePeripheralSimulatorPkg = defaultHardwarePeripheralSimulatorPackage.RecId;
        }
        if (defaultRetailStoreScaleUnitPackage.RecId != 0)
        {
            retailSharedParameters.DefaultRetailStoreUnitSelfServicePkg = defaultRetailStoreScaleUnitPackage.RecId;
        }
        if (defaultMPOSWindowsPhonePackage.RecId != 0)
        {
            retailSharedParameters.DefaultMPOSWindowsPhonePkg = defaultMPOSWindowsPhonePackage.RecId;
        }

        retailSharedParameters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetRTSServiceHostUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the real-time Service host url.
    /// </summary>
    /// <param name = "aosServiceEndPoint">Aos service end point.</param>
    /// <param name = "aosSoapServiceEndPoint">Aos soap service end point.</param>
    /// <returns>Real-time service host url.</returns>
    private str GetRTSServiceHostUrl(str aosServiceEndPoint, str aosSoapServiceEndPoint)
    {
        str result = aosServiceEndPoint;

        if (!System.String::IsNullOrWhiteSpace(aosSoapServiceEndPoint))
        {
            result = aosSoapServiceEndPoint;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetDefaultHardwareStationPackages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default hardware station package for every hardware station profile.
    /// </summary>
    [SysObsolete('Use method SetCrossCompanyDefaultSelfServicePackages instead.', true, 31\01\2016)]
    public static void SetDefaultHardwareStationPackages()
    {
        // Obsolete method.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>