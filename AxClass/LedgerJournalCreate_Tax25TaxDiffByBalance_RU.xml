<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_Tax25TaxDiffByBalance_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalCreate_Tax25TaxDiffByBalance_RU</c> class creates a ledger journal for tax differences posting by balance method.
/// </summary>
internal class LedgerJournalCreate_Tax25TaxDiffByBalance_RU extends LedgerJournalCreate_Tax25_RU
{
    private const int TempAccountingObject = 2;
    private const int ConstAccountingObject = 3;
    private const int FormingCTA = 7;
    private const int FormingDTA = 8;
    private const int FormingCTLOrPayOffDTA = 9;
    private const int FormingDTL = 10;
    private const int PayOffDTL = 11;

    private RTax25PostingRoll postingRoll;
    private RTax25RegisterId temporaryDifferencesByBalance;
    private RTax25RegisterId differences;
    private RTax25Query query;
    private TaxCode taxCode;
    private str key;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans(JournalId _journalNum)
    {
        const int RegisterCode3 = 3;
        const int RegisterCode5 = 5;

        this.createVoucher(_journalNum);

        ttsbegin;

        RTax25RegisterJournalTable journalTable;
        select firstonly JournalNum, FiscalYear, PeriodType, PeriodNum, EnableCorrective, RecId from journalTable
            order by Version desc
            where journalTable.EndDate == registerJournalTable.EndDate
                && journalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax;

        Map mapTA = new Map(Types::String, Types::Container);
        Map mapTL = new Map(Types::String, Types::Container);
        Map mapPayOffDTA = new Map(Types::String, Types::Container);
        Map mapPayOffDTL = new Map(Types::String, Types::Container);

        postingRoll = RTax25Parameters::find().PostingRoll;
        temporaryDifferencesByBalance = RTax25RegisterTable::find(RTax25RegisterType::TemporaryDifferencesByBalance).RegisterId;
        differences = RTax25RegisterTable::find(RTax25RegisterType::ConstantDifferencesByBalance).RegisterId;

        RTax25RegisterJournalTrans journalTrans;
        RTax25RegisterJournalLink journalLink;

        for (int loop = 1; loop <= 2; loop++)
        {
            if (journalTable.EnableCorrective)
            {
                select journalTrans
                    where !journalTrans.Cancelled
                        && journalTrans.RegisterId == differences
                    exists join journalLink
                        where journalLink.TransRecId == journalTrans.RecId
                            && journalLink.TableRecId == journalTable.RecId;
            }
            else
            {
                select journalTrans
                    where journalTrans.JournalNum == journalTable.JournalNum
                        && journalTrans.FiscalYear == journalTable.FiscalYear
                        && journalTrans.PeriodType == journalTable.PeriodType
                        && journalTrans.PeriodNum == journalTable.PeriodNum
                        && !journalTrans.Cancelled
                        && journalTrans.RegisterId == differences;
            }

            while (journalTrans)
            {
                query = RTax25Query::newParameters(
                    RTax25RegisterTable::registerId2Type(differences),
                    journalTrans,
                    !RTax25RegisterTrans::existAny(
                        journalTrans.JournalNum,
                        differences,
                        journalTrans.PeriodType,
                        journalTrans.PeriodNum,
                        journalTrans.FiscalYear));

                if (query.first())
                {
                    do
                    {
                        taxCode = RTax25ProfitTable::find(query.getRecord().RTax25ProfitTable).taxCode();

                        if (!taxCode && differences == temporaryDifferencesByBalance)
                        {
                            if (query.getRecord().RefTableId == tableNum(RAssetTable))
                            {
                                taxCode = RTax25RegisterParameters::find(differences, RegisterCode3).Parameter;
                            }
                            else
                            {
                                taxCode = RTax25RegisterParameters::find(differences, RegisterCode5).Parameter;
                            }
                        }

                        switch (postingRoll)
                        {
                            case RTax25PostingRoll::Source:
                                key = int2str(query.getRecord().RefTableId) + int642str(query.getRecord().RefRecId);
                                break;

                            case RTax25PostingRoll::ExpenseAndIncome:
                                key = RTax25ProfitTable::find(query.getRecord().rTax25ProfitTable).ProfitId;
                                break;

                            case RTax25PostingRoll::Tax:
                                key = taxCode;
                                break;

                            case RTax25PostingRoll::Total:
                                key = TaxTable::find(taxCode).TaxAccountGroup;
                                break;
                        }

                        if (differences == temporaryDifferencesByBalance)
                        {
                            this.putToMap(mapTA, FormingDTA);
                            this.putToMap(mapTL, FormingDTL);
                            this.putToMap(mapPayOffDTA, FormingCTLOrPayOffDTA);
                            this.putToMap(mapPayOffDTL, PayOffDTL);
                        }
                        else
                        {
                            this.putToMap(mapTA, FormingCTA);
                            this.putToMap(mapTL, FormingCTLOrPayOffDTA);
                        }
                    }
                    while (query.next());
                }

                next journalTrans;
            }

            if (differences == temporaryDifferencesByBalance)
            {
                this.createLines(mapTA, FormingDTA, _journalNum);
                this.createLines(mapTL, FormingDTL, _journalNum);
                this.createLines(mapPayOffDTA, FormingCTLOrPayOffDTA, _journalNum);
                this.createLines(mapPayOffDTL, PayOffDTL, _journalNum);
            }
            else
            {
                this.createLines(mapTA, FormingCTA, _journalNum);
                this.createLines(mapTL, FormingCTLOrPayOffDTA, _journalNum);
            }

            differences = temporaryDifferencesByBalance;
            mapTA = new Map(Types::String, Types::Container);
            mapTL = new Map(Types::String, Types::Container);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putToMap</Name>
				<Source><![CDATA[
    private void putToMap(Map _map, int _index)
    {
        container con;

        if (_map.exists(key))
        {
            con = conPoke(con, 1, conPeek(_map.lookup(key), 1) + query.getField(_index));
        }
        else
        {
            con = [query.getField(_index), taxCode];

            if (postingRoll == RTax25PostingRoll::Source)
            {
                con += query.getRecord().rTax25ProfitTable;

                if (differences == temporaryDifferencesByBalance)
                {
                    con += query.getField(TempAccountingObject);
                }
                else
                {
                    con += query.getField(ConstAccountingObject);
                }
            }
        }

        _map.insert(key, con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    private void createLines(Map _map, int _operation, JournalId _journalNum)
    {
        LedgerDimensionDefaultAccount defaultAccount;
        LedgerDimensionDefaultAccount offsetDefaultAccount;
        DimensionDefault defaultDimension;
        LineNum lineNum;

        LedgerJournalTrans ledgerJournalTrans;
        ledgerJournalTrans.JournalNum = _journalNum;
        ledgerJournalTrans.Voucher = voucher;
        ledgerJournalTrans.CurrencyCode = CompanyInfoHelper::standardCurrency();
        ledgerJournalTrans.TransDate = LedgerFiscalCalendar::findFirstOpenStartDateInYear(CompanyInfoHelper::fiscalCalendarRecId(), registerJournalTable.EndDate);
        ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;

        MapEnumerator mLoop = _map.getEnumerator();
        while (mLoop.moveNext())
        {
            if (conPeek(mLoop.currentValue(), 1) != 0)
            {
                ledgerJournalTrans.AmountCurDebit = 0;
                ledgerJournalTrans.AmountCurCredit = 0;
                ledgerJournalTrans.LineNum = lineNum;
                ledgerJournalTrans.TaxCode = conPeek(mLoop.CurrentValue(), 2);

                RTax25LedgerAccountGroup ledgerAccountGroup = RTax25LedgerAccountGroup::find(TaxTable::find(ledgerJournalTrans.TaxCode).TaxAccountGroup);
                LedgerDimensionDefaultAccount taxOutgoingLedgerDimension = TaxLedgerAccountGroup::find(ledgerAccountGroup.TaxAccountGroup).TaxOutgoingLedgerDimension;

                switch (_operation)
                {
                    case FormingCTA:
                        defaultAccount = taxOutgoingLedgerDimension;
                        offsetDefaultAccount = ledgerAccountGroup.ctaLedgerDimension;
                        ledgerJournalTrans.AmountCurDebit = conPeek(mLoop.currentValue(), 1);
                        ledgerJournalTrans.Txt = "@RTax25Registers:CreatingCti" + #Blank;
                        break;

                    case FormingCTLOrPayOffDTA:
                        defaultAccount = taxOutgoingLedgerDimension;

                        if (differences == temporaryDifferencesByBalance)
                        {
                            offsetDefaultAccount = ledgerAccountGroup.dtaLedgerDimension;
                            ledgerJournalTrans.AmountCurDebit = conPeek(mLoop.currentValue(), 1);
                            ledgerJournalTrans.Txt = "@GLS107125" + #Blank;
                        }
                        else
                        {
                            offsetDefaultAccount = ledgerAccountGroup.ctlLedgerDimension;
                            ledgerJournalTrans.AmountCurCredit = conPeek(mLoop.currentValue(), 1);
                            ledgerJournalTrans.Txt = "@RTax25Registers:CreatingCte" + #Blank;
                        }
                        break;

                    case FormingDTA:
                        defaultAccount = taxOutgoingLedgerDimension;
                        offsetDefaultAccount = ledgerAccountGroup.dtaLedgerDimension;
                        ledgerJournalTrans.AmountCurCredit = conPeek(mLoop.currentValue(), 1);
                        ledgerJournalTrans.Txt = "@GLS107124" + #Blank;
                        break;

                    case FormingDTL:
                        defaultAccount = taxOutgoingLedgerDimension;
                        offsetDefaultAccount = ledgerAccountGroup.dtlLedgerDimension;
                        ledgerJournalTrans.AmountCurDebit = conPeek(mLoop.currentValue(), 1);
                        ledgerJournalTrans.Txt = "@GLS107127" + #Blank;
                        break;

                    case PayOffDTL:
                        defaultAccount = taxOutgoingLedgerDimension;
                        offsetDefaultAccount = ledgerAccountGroup.dtlLedgerDimension;
                        ledgerJournalTrans.AmountCurCredit = conPeek(mLoop.currentValue(), 1);
                        ledgerJournalTrans.Txt = "@GLS107128" + #Blank;
                        break;
                }

                switch (postingRoll)
                {
                    case RTax25PostingRoll::Source:
                        defaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(conPeek(mLoop.currentValue(), 3));
                        ledgerJournalTrans.Txt += "@GLS107807" + #Blank + conPeek(mLoop.currentValue(), 4);
                        break;

                    case RTax25PostingRoll::ExpenseAndIncome:
                        defaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(RTax25ProfitTable::findByProfitId(mLoop.currentKey()).RecId);
                        ledgerJournalTrans.Txt += "@GLS107808" + #Blank + mLoop.currentKey();
                        break;

                    case RTax25PostingRoll::Tax:
                        ledgerJournalTrans.Txt += "@GLS107809" + #Blank + ledgerJournalTrans.TaxCode;
                        break;

                    case RTax25PostingRoll::Total:
                        ledgerJournalTrans.Txt += "@GLS107819";
                        break;
                }

                ledgerJournalTrans.parmLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(defaultAccount, defaultDimension));
                ledgerJournalTrans.parmOffsetLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount, defaultDimension));

                ledgerJournalTrans.insert();

                lineNum++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt</Name>
				<Source><![CDATA[
    protected str stornoTxt()
    {
        return "@RTax25Registers:TaxDiffTransReversByBalance";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>