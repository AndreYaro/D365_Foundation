<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPriceDiscAdmCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRPriceDiscAdmCreate</c> class is used to create price discounts.
/// </summary>
public class    MCRPriceDiscAdmCreate
extends         RunBase
{
    #DEFINE.CurrentVersion(4)

    #LOCALMACRO.CurrentList
        agreementType,
        accountCode,
        priceBase,
        site,
        warehouse,
        location,
        JournalName,
        fromDate,
        toDate,
        pctChange,
        amountChange,
        caller
    #ENDMACRO

    PriceDiscJournalNum         journalNum;

    boolean                     firstTime;

    QueryRun                    queryRun;
    QueryRun                    inventQueryRun, vendQueryRun, custQueryRun, priceDiscQueryRun;

    PriceType                   agreementType;
    PriceType                   oldType;

    PriceDiscPartyCode          accountCode;
    PriceDiscPartyCode          prevAccountCode;

    FromDate                    fromDate;
    ToDate                      toDate;

    PriceBase                   priceBase;
    Percent                     pctChange;
    MCRAmountDec5               amountChange;

    InventSiteId                site;
    InventLocationId            warehouse;
    WMSLocationId               location;

    DialogField                 fieldAgreementType;
    DialogField                 fieldAccountCode;
    DialogField                 fieldFromDate;
    DialogField                 fieldToDate;
    DialogField                 fieldPriceBase;
    DialogField                 fieldPctChange;
    DialogField                 fieldAmountChange;
    DialogField                 fieldSite;
    DialogField                 fieldWarehouse;
    DialogField                 fieldLocation;
    DialogField                 fieldJournalName;
    PriceDiscJournalName        journalName;
    str                         caller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPrice</Name>
				<Source><![CDATA[
    private MCRAmountDec5 calcPrice(ItemId _itemId)
    {
        MCRAmountDec5       retVal;
        InventTableModule   inventTableModule;

        switch (priceBase)
        {
            case PriceBase::StdCost:
                InventTable inventTable = InventTable::find(_itemId);
                inventTableModule = inventTable.inventTableModuleInvent();
                retVal = inventTableModule.Price;
                if (pctChange > 0)
                {
                    retVal = (retVal * (pctChange/100));
                }

                retVal += (amountChange * inventTableModule.PriceUnit);
                retVal =  retVal/inventTableModule.PriceUnit;
                UnitOfMeasureSymbol salesUnitId = inventTable.inventTableModuleSales().UnitId;

                if (inventTableModule.UnitId != salesUnitId)
                {
                    retVal = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                   this.getDefaultInventDimId(inventTable),
                                                                                                   retVal,
                                                                                                   salesUnitId,
                                                                                                   inventTableModule.UnitId,
                                                                                                   NoYes::Yes);
                }
                break;
            case PriceBase::StdSales:
                inventTableModule = InventTable::find(_itemId).inventTableModuleSales();
                retVal = inventTableModule.Price;
                if (pctChange > 0)
                {
                    retVal = (retVal * (pctChange/100));
                }

                retVal += (amountChange * inventTableModule.PriceUnit);
                retVal =  retVal/inventTableModule.PriceUnit;
                break;
            case PriceBase::Blank:
            case PriceBase::Current:
            case PriceBase::Zero:
                retVal = amountChange;
                break;
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.calcPriceDelegate(this, _itemId, result);

                if (result.hasResult())
                {
                    retVal = result.result();
                }
                else
                {
                    retVal = amountChange;
                }
                break;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPriceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating price.
    /// </summary>
    /// <param name = "_mcrPriceDiscAdmCreate">The <c>MCRPriceDiscAdmCreate</c> instance.</param>
    /// <param name = "_itemId">The <c>ItemId</c> value.</param>
    /// <param name = "_eventHandlerResult">Subscribers can use this class to provide the result.</param>
    delegate void calcPriceDelegate(MCRPriceDiscAdmCreate _mcrPriceDiscAdmCreate, ItemId _itemId, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceBase</Name>
				<Source><![CDATA[
    public PriceBase parmPriceBase()
    {
        return priceBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPctChange</Name>
				<Source><![CDATA[
    public Percent parmPctChange()
    {
        return pctChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountChange</Name>
				<Source><![CDATA[
    public MCRAmountDec5 parmAmountChange()
    {
        return amountChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase           dialog = super();

        DialogGroup             fieldTypeGroup;
        DialogGroup             fieldAcctGroup;
        DialogGroup             fieldDateGroup;
        DialogGroup             fieldPriceGroup;
        DialogGroup             fieldItemGroup;
        dialog.caption("@MCR31351");

        fieldTypeGroup = dialog.addGroup("@SYS93993");
        fieldAgreementType  = dialog.addFieldValue(enumStr(PriceType), agreementType, "@MCR31352");

        fieldAcctGroup = dialog.addGroup("@SYS24500");
        fieldAcctGroup.columns(2);
        fieldAccountCode    = dialog.addFieldValue(extendedTypeStr(PriceDiscPartyCode), accountCode);
        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RunBaseQueryDialog), DialogMenuItemGroup::CurrentGrp);

        fieldDateGroup = dialog.addGroup("@SYS41297");
        fieldDateGroup.columns(2);
        fieldFromDate       = dialog.addField(extendedTypeStr(FromDate));
        fieldToDate         = dialog.addField(extendedTypeStr(ToDate));

        fieldItemGroup = dialog.addGroup("@SYS15649");
        fieldItemGroup.columns(4);
        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(MCRRunBaseQueryDialog), DialogMenuItemGroup::CurrentGrp);
        fieldSite           = dialog.addFieldValue(extendedTypeStr(InventSiteId), site);
        fieldWarehouse      = dialog.addFieldValue(extendedTypeStr(InventLocationId), warehouse);
        fieldLocation       = dialog.addFieldValue(extendedTypeStr(WMSLocationId), location);

        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(MCRRunBaseQueryDialog), DialogMenuItemGroup::CurrentGrp);

        fieldPriceGroup = dialog.addGroup("@SYS23842");
        fieldPriceGroup.columns(3);
        fieldPriceBase      = dialog.addFieldValue(enumStr(PriceBase), priceBase);
        fieldPctChange      = dialog.addFieldValue(extendedTypeStr(Percent), pctChange);
        fieldAmountChange   = dialog.addField(extendedTypeStr(MCRAmountDec5));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountAndPriceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount and price unit for the passed item.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> record that will
    /// be used to determine the amount and price unitl
    /// </param>
    /// <returns>
    /// The amount and price unit for the passed item ID.
    /// </returns>
    public container getAmountAndPriceUnit(ItemId _itemId)
    {
        MCRAmountDec5    nonRoundedPrice;
        Amount          retAmount;
        PriceUnit       retPriceUnit = 1;
        int             cnt = 0;

        nonRoundedPrice = this.calcPrice(_itemId);
        retAmount = round(nonRoundedPrice, 0.01);

        while (retAmount != (nonRoundedPrice * retPriceUnit))
        {
            cnt++;
            retPriceUnit = retPriceUnit * 10;

            retAmount = nonRoundedPrice * retPriceUnit;
            retAmount = round(retAmount, 0.01);

            if (cnt > 3)
            {
                break;
            }
        }

        return [retAmount, retPriceUnit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default inventory dimension ID for the passed <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The record for which the returned inventory dimension is created.
    /// </param>
    /// <returns>
    /// The default inventory dimension ID for the passed item.
    /// </returns>
    public InventDimId getDefaultInventDimId(InventTable _inventTable)
    {
        InventDim       inventDim;
        inventDim.clear();

        inventDim.wmsLocationId = location;
        inventDim.InventLocationId = warehouse;
        inventDim.InventSiteId = site;

        _inventTable.initStandardProductDimensions(inventDim);

        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        agreementType   = fieldAgreementType.value();

        accountCode     = fieldAccountCode.value();

        fromDate        = fieldFromDate.value();
        toDate          = fieldToDate.value();

        priceBase       = fieldPriceBase.value();
        pctChange       = fieldPctChange.value();
        amountChange    = fieldAmountChange.value();

        site            = fieldSite.value();
        warehouse       = fieldWarehouse.value();
        location        = fieldLocation.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean init()
    {
        firstTime = true;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal number for the<c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number to set.
    /// </param>
    protected void  initJournalNum(PriceDiscJournalNum  _journalNum)
    {
        journalNum = _journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        custQueryRun        = new QueryRun(this.queryCust());
        vendQueryRun        = new QueryRun(this.queryVend());
        inventQueryRun      = new QueryRun(this.queryInvent());
        priceDiscQueryRun   = new QueryRun(this.queryPriceDiscGroup());

        agreementType   = PriceType::PriceSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>QueryRun</c> object.
    /// </summary>
    /// <returns>
    /// The <c>QueryRun</c> object.
    /// </returns>
    protected QueryRun inventQueryRun()
    {
        return inventQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, custQueryRun.pack(), vendQueryRun.pack(), inventQueryRun.pack(), priceDiscQueryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the customer for the <c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    protected void processCust()
    {
        CustTable           custTable;
        PriceDiscGroup      priceDiscGroup;
        if (accountCode == PriceDiscPartyCodeType::All)
        {
            this.processInvent("");
        }
        else if (accountCode == PriceDiscPartyCodeType::GroupId)
        {
            while (queryRun.next())
            {
                priceDiscGroup = queryRun.get(tableNum(PriceDiscGroup));

                if (this.validatePriceDiscGroup(priceDiscGroup))
                {
                    this.processInvent(priceDiscGroup.GroupId);
                }
            }
        }
        else if (accountCode == PriceDiscPartyCodeType::Table)
        {
            while (queryRun.next())
            {
                custTable = queryRun.get(tableNum(CustTable));

                this.processInvent(custTable.AccountNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the <c>InventTable</c> and <c>InventDimId</c> objects for the <c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    /// <param name="_accountRelation">
    /// The <c>PriceDiscAccountRelation</c> object with which to write the record.
    /// </param>
    protected void  processInvent(PriceDiscAccountRelation _accountRelation)
    {
        InventTable     inventTable;
        InventDimId     inventDimId;

        PriceDiscModule module;
        UnitOfMeasureSymbol          unitId;

        Amount          amount;
        PriceUnit       priceUnit;
        container       amountAndPriceUnitContainer;

        inventQueryRun.reset();

        while (inventQueryRun.next())
        {
            inventTable = inventQueryRun.get(tableNum(InventTable));
            inventDimId = this.getDefaultInventDimId(inventTable);
            amountAndPriceUnitContainer = this.getAmountAndPriceUnit(inventTable.ItemId);

            amount      = conPeek(amountAndPriceUnitContainer, 1);
            priceUnit   = conPeek(amountAndPriceUnitContainer, 2);

            if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(agreementType).partyRoleModule() == ModuleInventCustVend::Vend)
            {
                unitId = inventTable.inventTableModulePurch().UnitId;
                module = ModuleInventCustVend::Vend;
            }
            else
            {
                unitId = inventTable.inventTableModuleSales().UnitId;
                module = ModuleInventCustVend::Cust;
            }
            this.write(_accountRelation, inventTable.ItemId, inventDimId, amount, priceUnit, module, unitId, agreementType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the vendor for the <c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    protected void processVend()
    {
        VendTable           vendTable;
        PriceDiscGroup      priceDiscGroup;
        if (accountCode == PriceDiscPartyCodeType::All)
        {
            this.processInvent("");
        }
        else if (accountCode == PriceDiscPartyCodeType::GroupId)
        {
            while (queryRun.next())
            {
                priceDiscGroup = queryRun.get(tableNum(PriceDiscGroup));

                if (this.validatePriceDiscGroup(priceDiscGroup))
                {
                    this.processInvent(priceDiscGroup.GroupId);
                }
            }
        }
        else if (accountCode == PriceDiscPartyCodeType::Table)
        {
            while (queryRun.next())
            {
                vendTable = queryRun.get(tableNum(VendTable));

                this.processInvent(vendTable.AccountNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>Query</c> to retrieve the customer associated with the <c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    /// <returns>
    /// The newly built <c>Query</c> object.
    /// </returns>
    protected Query queryCust()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(CustTable));
        queryBuildDataSource.addRange(fieldNum(CustTable, AccountNum));
        queryBuildDataSource.addRange(fieldNum(CustTable, CustGroup));
        queryBuildDataSource.addRange(fieldNum(CustTable, PriceGroup));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>Query</c> to retrieve the <c>InventTable</c> record associated with the <c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    /// <returns>
    /// The newly built <c>Query</c> object.
    /// </returns>
    protected Query queryInvent()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSourceInventTable, queryBuildDataSourceInventItemGroupItem;

        queryBuildDataSourceInventTable = query.addDataSource(tableNum(InventTable));
        queryBuildDataSourceInventTable.addRange(fieldNum(InventTable, ItemId));
        queryBuildDataSourceInventItemGroupItem = queryBuildDataSourceInventTable.addDataSource(tableNum(InventItemGroupItem));
        queryBuildDataSourceInventItemGroupItem.addLink(fieldNum(InventTable, ItemId), fieldNum(InventItemGroupItem, ItemId));
        queryBuildDataSourceInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPriceDiscGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>Query</c> to retrieve the <c>PriceDiscGroup</c> record associated with the <c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    /// <returns>
    /// The newly built <c>Query</c> object.
    /// </returns>
    protected Query queryPriceDiscGroup()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(PriceDiscGroup));

        queryBuildDataSource.addRange(fieldNum(PriceDiscGroup, GroupId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        if (agreementType != oldType || accountCode != prevAccountCode || firstTime)
        {
            if (accountCode == PriceDiscPartyCodeType::GroupId)
            {
                queryRun = priceDiscQueryRun;
            }
            else
            {
                if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(agreementType).partyRoleModule() == ModuleInventCustVend::Vend)
                {
                    queryRun = vendQueryRun;
                }
                else
                {
                    queryRun = custQueryRun;
                }
            }

            queryRun.title("@SYS58997");

            firstTime       = false;
            oldType         = agreementType;
            prevAccountCode = accountCode;
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>Query</c> to retrieve the vendor associated with the <c>MCRPriceDiscAdmCreate</c> class.
    /// </summary>
    /// <returns>
    /// The newly built <c>Query</c> object.
    /// </returns>
    protected Query queryVend()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(VendTable));
        queryBuildDataSource.addRange(fieldNum(VendTable, AccountNum));
        queryBuildDataSource.addRange(fieldNum(VendTable, VendGroup));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.queryRun();

        ttsBegin;

        if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(agreementType).partyRoleModule() == ModuleInventCustVend::Vend)
        {
            this.processVend();
        }
        else
        {
            this.processCust();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = RunBase::getVersion(packedClass);
        container   packedCustQueryRun, packedVendQueryRun, packedInventQueryRun, packedPriceDiscQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedCustQueryRun, packedVendQueryRun, packedInventQueryRun, packedPriceDiscQueryRun] = packedClass;

                if (SysQuery::isPackedOk(packedCustQueryRun) && SysQuery::isPackedOk(packedVendQueryRun) && SysQuery::isPackedOk(packedInventQueryRun) && SysQuery::isPackedOk(packedPriceDiscQueryRun))
                {
                    custQueryRun   = new QueryRun(packedCustQueryRun);
                    vendQueryRun   = new QueryRun(packedVendQueryRun);
                    inventQueryRun = new QueryRun(packedInventQueryRun);
                    priceDiscQueryRun = new QueryRun(packedPriceDiscQueryRun);
                }
                else
                    return false;

                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceDiscGroupDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for validating the given <c>PriceDiscGroup</c> record.
    /// </summary>
    /// <param name = "_priceDiscGroup">The <c>PriceDiscGroup</c> record.</param>
    /// <param name = "_priceType">The <c>PriceType</c> value.</param>
    /// <param name = "_eventHandlerResult">Subscribers can use this class to provide the result.</param>
    static delegate void validatePriceDiscGroupDelegate(PriceDiscGroup _priceDiscGroup, PriceType _priceType, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceDiscGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the passed <c>PriceDiscGroup</c> record.
    /// </summary>
    /// <param name="_priceDiscGroup">
    /// The passed <c>PriceDiscGroup</c> record to be validated.
    /// </param>
    /// <returns>
    /// true if the passed <c>PriceDiscGroup</c> record is falid; otherwise, false.
    /// </returns>
    protected boolean validatePriceDiscGroup(PriceDiscGroup _priceDiscGroup)
    {
        switch (agreementType)
        {
            case PriceType::EndDiscPurch:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Vend 
                    && _priceDiscGroup.Type == PriceGroupType::EndDiscGroup)
                {
                    return true;
                }
                break;
            case PriceType::LineDiscPurch:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Vend 
                    && _priceDiscGroup.Type == PriceGroupType::LineDiscGroup)
                {
                    return true;
                }
                break;
            case PriceType::MultiLineDiscPurch:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Vend 
                    && _priceDiscGroup.Type == PriceGroupType::MultiLineDiscGroup)
                {
                    return true;
                }
                break;
            case PriceType::PricePurch:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Vend 
                    && _priceDiscGroup.Type == PriceGroupType::PriceGroup)
                {
                    return true;
                }
                break;
            case PriceType::EndDiscSales:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Cust &&
                   _priceDiscGroup.Type == PriceGroupType::EndDiscGroup)
                {
                    return true;
                }
                break;
            case PriceType::LineDiscSales:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Cust 
                    && _priceDiscGroup.Type == PriceGroupType::LineDiscGroup)
                {
                    return true;
                }
                break;
            case PriceType::MultiLineDiscSales:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Cust 
                    && _priceDiscGroup.Type == PriceGroupType::MultiLineDiscGroup)
                {
                    return true;
                }
                break;
            case PriceType::PriceSales:
                if (_priceDiscGroup.Module == ModuleInventCustVend::Cust 
                    && _priceDiscGroup.Type == PriceGroupType::PriceGroup)
                {
                    return true;
                }
                break;
            default:
                EventHandlerResult result = EventHandlerResult::newDefault();
                MCRPriceDiscAdmCreate::validatePriceDiscGroupDelegate(_priceDiscGroup, agreementType, result);
                if (result.hasResult())
                {
                    return result.result();
                }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>PriceDiscAdmTrans</c> table.
    /// </summary>
    /// <param name="_accountRelation">
    /// Indicates the type of value stored in the AccountCode field.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID.
    /// </param>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <param name="_priceUnit">
    /// The price unit.
    /// </param>
    /// <param name="_module">
    /// The module to which this discount applies.
    /// </param>
    /// <param name="_unitId">
    /// The unit of measure.
    /// </param>
    /// <param name="_priceType">
    /// The discount type.
    /// </param>
    public void  write(PriceDiscAccountRelation    _accountRelation,
                ItemId                      _itemId,
                InventDimId                 _inventDimId,
                Amount                      _amount,
                PriceUnit                   _priceUnit,
                PriceDiscModule             _module,
                UnitOfMeasureSymbol                      _unitId,
                PriceType                   _priceType)
    {
        PriceDiscAdmTrans  priceDiscAdmTrans;
        priceDiscAdmTrans.clear();

        priceDiscAdmTrans.AccountCode       = accountCode;

        priceDiscAdmTrans.AccountRelation   = _accountRelation;
        priceDiscAdmTrans.Relation = _priceType;
        priceDiscAdmTrans.initFromAccountCode();
        priceDiscAdmTrans.Amount            = _amount;
        if (priceDiscAdmTrans.Currency == "")
        {
            priceDiscAdmTrans.Currency          = Ledger::accountingCurrency(CompanyInfo::current());
        }
        priceDiscAdmTrans.FromDate          = fromDate;
        priceDiscAdmTrans.ItemCode          = PriceDiscProductCodeType::Table;
        priceDiscAdmTrans.ItemRelation      = _itemId;
        priceDiscAdmTrans.JournalNum        = journalNum;

        priceDiscAdmTrans.Module            = _module;
        priceDiscAdmTrans.PriceUnit         = _priceUnit;
        priceDiscAdmTrans.Relation          = agreementType;
        priceDiscAdmTrans.SearchAgain       = NoYes::Yes;
        priceDiscAdmTrans.ToDate            = toDate;
        priceDiscAdmTrans.UnitId            = _unitId;

        priceDiscAdmTrans.InventDimId       = _inventDimId;

        priceDiscAdmTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of the <c>MCRPriceAdmCreate</c> class.
    /// </summary>
    /// <returns>
    ///     A new instance of the <c>MCRPriceDiscAdmCreate</c> class.
    /// </returns>
    public static MCRPriceDiscAdmCreate construct()
    {
        return new MCRPriceDiscAdmCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PriceDiscAdmTrans               priceDiscAdmTrans;
        PriceDiscAdmTable               priceDiscAdmTable;
        MCRPriceDiscAdmCreate            create = new MCRPriceDiscAdmCreate();

        FormRun                 priceDiscTransForm;
        FormRun                 priceDiscTableForm;
        FormDataSource          tableDataSource;
        if (!(args.dataset() == tableNum(PriceDiscAdmTrans)))
        {
            throw error("@SYS18626");
        }

        priceDiscAdmTrans = args.record();

        if (!priceDiscAdmTrans.JournalNum)
        {
            priceDiscTransForm = args.caller();
            priceDiscTableForm = priceDiscTransForm.args().caller();
            tableDataSource    = priceDiscTableForm.dataSource();

            if (tableDataSource.table() != tableNum(PriceDiscAdmTable))
            {
                throw error("@SYS18626");
            }
            else
            {
                priceDiscAdmTable = tableDataSource.cursor();
                create.initJournalNum(priceDiscAdmTable.JournalNum);
            }
        }
        else
        {
            create.initJournalNum(priceDiscAdmTrans.JournalNum);
        }

        if (create.prompt())
            create.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>