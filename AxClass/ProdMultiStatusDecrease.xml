<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiStatusDecrease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdMultiStatusDecrease</c> class shows the user dialog box to decrease the status of
///    production order.
/// </summary>
/// <remarks>
///    Several production orders can be selected in the user dialog box. The production status will be
///    decreased by using different classes depending on current production order status, which can be one
///    of the following:
///    <list type="bullet">
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_CostEstimate" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_Schedule" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_Release" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_StartUp" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_Finished" /></description>
///       </item>
///    </list>
/// </remarks>
public class ProdMultiStatusDecrease extends ProdMulti implements BatchRetryable
{
    ProdParmStatusDecrease  standardParmStatusDecrease;

    #define.currentVersion(3)
    #LOCALMACRO.CurrentList
        standardParmStatusDecrease
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDecreaseStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the status of a production order can be decreased to another state.
    /// </summary>
    /// <param name="_fromStatus">
    /// The original status.
    /// </param>
    /// <param name="_toStatus">
    /// The wanted status.
    /// </param>
    /// <param name="_prodTable">
    /// The production order that will have the status changed.
    /// </param>
    /// <returns>
    /// true if the status can be changed; false otherwise.
    /// </returns>
    /// <remarks>
    /// The status can not be changed if there are transactions already posted in a former month.
    /// </remarks>
    private boolean canDecreaseStatus_BR(ProdStatus _fromStatus, ProdStatus _toStatus, ProdTable _prodTable)
    {
        boolean ret = true;

        if (BrazilParameters::find().ProdEnableResetStatus == NoYes::No
            && ProdStatusOrderedList::newFromOrder().isAfter(_fromStatus, ProdStatus::Released)
            && ProdStatusOrderedList::newFromOrder().isBeforeOrEqualTo(_toStatus, ProdStatus::Released))
        {
            date monthEnd = endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getCompanyTimeZone()));
            date monthStart = mkDate(1, mthOfYr(monthEnd), year(monthEnd));

            ProdTableJour prodTableJour;

            select firstOnly RecId from prodTableJour
                where prodTableJour.ProdId == _prodTable.ProdId
                    && prodTableJour.TransDate < monthStart;

            if (prodTableJour.RecId)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        return !ProdParmStatusDecrease::exist(parmId, prodTable.ProdId) && prodTable.status().runStatusDecrease(null,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any clean up that you want after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any clean-up is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        super();

        ProdParmStatusDecrease::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmStatusDecrease  prodParmStatusDecrease;

        return prodParmStatusDecrease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the form that is provided with a user interface for specifying parameters for
    ///    update of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return formstr(ProdParmStatusDecrease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _prodParmStatusDecrease)
    {
        ProdParmStatusDecrease prodParmStatusDecrease = _prodParmStatusDecrease;
        ProdParmStatusDecrease saveProdParmStatusDecrease;

        saveProdParmStatusDecrease.data(prodParmStatusDecrease);
        prodParmStatusDecrease.data(standardParmStatusDecrease);

        prodParmStatusDecrease.ParmId           = saveProdParmStatusDecrease.ParmId;
        prodParmStatusDecrease.RecId            = saveProdParmStatusDecrease.RecId;
        prodParmStatusDecrease.LineNum          = saveProdParmStatusDecrease.LineNum;
        prodParmStatusDecrease.ProdId           = saveProdParmStatusDecrease.ProdId;
        prodParmStatusDecrease.JobStatus        = saveProdParmStatusDecrease.JobStatus;
        prodParmStatusDecrease.ExecutedDateTime = saveProdParmStatusDecrease.ExecutedDateTime;

        prodParmStatusDecrease.Reservations     = saveProdParmStatusDecrease.Reservations;

        prodParmStatusDecrease.AutoUpdate       = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdTable</Name>
				<Source><![CDATA[
    ProdTable initProdTable(ProdId  _prodId,
                            boolean _forUpdate = false
                           )
    {
        ttsbegin;

        ProdTable prodTable = ProdTable::find(_prodId,true);

        ttscommit;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common               _prodTable,
        ParmBuffer  _prodParmStatusDecrease
        )
    {
        ProdTable prodTable = _prodTable as ProdTable;
        ProdParmStatusDecrease prodParmStatusDecrease = _prodParmStatusDecrease;
        super(prodTable,prodParmStatusDecrease);

        prodParmStatusDecrease.initFromProdTable(prodTable);
        prodParmStatusDecrease.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmStatusDecrease::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiStatusDecrease</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiStatusDecrease</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after construction must be packed.
    ///    Typically, a macro in the class declaration lists the variables to pack. Another macro holds a
    ///    version number that refers to the version of the variable list. When a new variable is introduced,
    ///    follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, you may have to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standard  = standardParmStatusDecrease)
    {
        standardParmStatusDecrease = _standard;

        return standardParmStatusDecrease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(querystr(ProdMultiSelectStatusDecrease)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decreases the status.
    /// </summary>
    /// <param name = "_prodParmStatusDecrease">A record describing the status to decrease.</param>
    protected void decreaseStatus(ProdParmStatusDecrease _prodParmStatusDecrease)
    {
        ProdTable prodTable = this.initProdTable(_prodParmStatusDecrease.ProdId);

        if (!prodTable.RecId || 
            prodTable.ProdStatus == _prodParmStatusDecrease.WantedStatus ||
            prodTable.status().isBefore(_prodParmStatusDecrease.WantedStatus))
        {
            return;
        }

        setPrefix(ProdMultiStatusDecrease::description());
        setPrefix(#PreFixField(_prodParmStatusDecrease, ProdId));

        // Don't do anything if the order is stopped.
        if (WHSProdTable::find(prodTable.ProdId).Stopped)
        {
            error(strFmt("@WAX1701", prodTable.ProdId));
            return;
        }

        if (this.cannotDecreaseStatusIfFinanciallyUpdatedTransExist_RU(prodTable, _prodParmStatusDecrease.WantedStatus))
        {
            warning(strFmt("@Inventory_Localization:ProdOrderHasFinanciallyUpdatedInventTransValidation", enum2Str(_prodParmStatusDecrease.WantedStatus)));
            return;
        }

        // When the status of an order is changed to something prior than Released
        // we need to Cancel the Work associated to the order. 
        if (prodTable.status().isAfterOrEqualTo(ProdStatus::Released)
            && ProdStatusOrderedList::newFromOrder().isBefore(_prodParmStatusDecrease.WantedStatus, ProdStatus::Released))
        {
            WHSProdTable::resetProdStatusCleanUp(prodTable.ProdId);
        }

        prodTable.status().runStatusDecrease(_prodParmStatusDecrease, false, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiStatusDecrease))
        {
            #OCCRetryCount

            super();

            ProdParmStatusDecrease prodParmStatusDecrease = this.setProduction();

            while (prodParmStatusDecrease)
            {
                try
                {
                    this.decreaseStatus(prodParmStatusDecrease);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }

                next prodParmStatusDecrease;
            }

            if (#PmfEnabled)
            {
                this.pmfUpdateConsOrders();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProduction</Name>
				<Source><![CDATA[
    ParmBuffer setProduction()
    {
        ProdParmStatusDecrease prodParmStatusDecrease;
        ProdTable              prodTable;

        if (this.parmId())
        {
            select forceplaceholders forceselectorder forupdate prodParmStatusDecrease
                index hint NumLineNumIdx
                where prodParmStatusDecrease.ParmId == this.parmId()
                join prodTable
                    index hint ProdIdx
                    order by CollectRefLevel desc
                    where prodParmStatusDecrease.ProdId == prodTable.ProdId;
        }
        return prodParmStatusDecrease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusConvert</Name>
				<Source><![CDATA[
    public ProdStatusAll statusConvert(ProdStatus _prodStatus, ProdSchedStatus _schedStatus,ProdTable _prodTable)
    {
        ProdStatusAll   prodStatusAll;

        switch (_prodStatus)
        {
            case ProdStatus::Created:
                prodStatusAll = ProdStatusAll::Created;
                break;

            case ProdStatus::CostEstimated:
                prodStatusAll = ProdStatusAll::CostEstimated;
                break;

            case ProdStatus::Scheduled:
                switch (_schedStatus)
                {
                    case ProdSchedStatus::JobScheduled:
                        prodStatusAll = ProdStatusAll::JobScheduled;
                        break;

                    case ProdSchedStatus::OperationScheduled:
                        prodStatusAll = ProdStatusAll::OperationScheduled;
                        break;

                    case ProdSchedStatus::None:
                        switch (_prodTable.prodParametersDim().SchedMethod)
                        {
                            case ProdSchedMethod::OperationScheduling:
                                prodStatusAll = ProdStatusAll::OperationScheduled;
                                break;

                            case ProdSchedMethod::JobScheduling:
                                prodStatusAll = ProdStatusAll::JobScheduled;
                                break;
                        }
                        break;
                }
                break;

            case ProdStatus::Released:
                prodStatusAll = ProdStatusAll::Released;
                break;

            case ProdStatus::StartedUp:
                prodStatusAll = ProdStatusAll::StartUp;
                break;

            case ProdStatus::ReportedFinished:
                prodStatusAll = ProdStatusAll::ReportedFinished;
                break;

            case ProdStatus::Completed:
                prodStatusAll = ProdStatusAll::Completed;
                break;
        }
        return prodStatusAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiStatusDecrease</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, you may have to unpack some
    ///    prompt-related variables.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #currentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            case 2:
                [version,
                 standardParmStatusDecrease.ReportedFinishedItems,
                 standardParmStatusDecrease.MaterialConsump,
                 standardParmStatusDecrease.Reservations,
                 standardParmStatusDecrease.DerivedProd,
                 standardParmStatusDecrease.CancelDerivedProd,
                 standardParmStatusDecrease.CancelDerivedPurch
                ] = _packedClass;
                ret = true;
                break;
            default:
                this.initParmDefault();
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    ///     An object which this method has been called from; optional.
    /// </param>
    /// <returns>
    ///    true, or adds warning messages to the Infolog, depending on the state of the internal variables.
    /// </returns>
    /// <remarks>
    ///    This method must validate the state of the internal variables. It is called before closing the
    ///    dialog, and should be called in the <c>run</c> method. It must only contain code that adds warnings
    ///    to the Infolog.
    ///    A value of throw is not permitted in this method.
    ///    The method should generally
    ///    return errors by using the global <c>CheckFailed</c> method.
    /// </remarks>
    boolean validate(Object _calledFrom = null)
    {
        ProdParmStatusDecrease  prodParmStatusDecrease;

        if (!inPrompt)
        {
            prodParmStatusDecrease.clear();

            prodParmStatusDecrease = this.setProduction();

            while (prodParmStatusDecrease)
            {
                ProdTable prodTable = this.initProdTable(prodParmStatusDecrease.ProdId);

                if (!this.validateWantedStatus(prodTable.ProdStatus, prodParmStatusDecrease.WantedStatus, prodTable.SchedStatus, prodTable ))
                {
                    return false;
                }
                next prodParmStatusDecrease;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWantedStatus</Name>
				<Source><![CDATA[
    boolean validateWantedStatus(ProdStatus _fromStatus, ProdStatus _toStatus, ProdSchedStatus _schedStatus, ProdTable _prodTable)
    {
        if (BrazilParameters::isEnabled())
        {
            if (!this.canDecreaseStatus_BR(_fromStatus, _toStatus, _prodTable))
            {
                return checkFailed("@SCM:ProdStatusDecreaseValidation");
            }
        }

        if (!_prodTable.prodStatusParameters(this.statusConvert(_fromStatus, _schedStatus, _prodTable), this.statusConvert(_toStatus, _schedStatus, _prodTable)).RecId)
        {
            return checkFailed(strfmt("@SYS96350", _fromStatus, _toStatus, _prodTable.ProdId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiStatusDecrease construct()
    {
        ProdMultiStatusDecrease prodMultiStatusDecrease = new ProdMultiStatusDecrease();

        return prodMultiStatusDecrease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS9708";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionOrdersWithMesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Collect production orders with registrations of a particular status.
    /// </summary>
    /// <returns>
    ///  The production order IDs which have registrations of either Calculated, Approved or Transferred status.
    /// </returns>
    private Set getProductionOrdersWithMesTrans()
    {
        JmgStampTrans           jmgStampTrans;
        Set                     productionOrdersWithMesTrans = new Set(Types::String);
        ProdParmStatusDecrease  localParmStatusDecrease;

        // Search transferred.
        while select ProdId from localParmStatusDecrease
                where localParmStatusDecrease.ParmId == this.ParmId()
                exists join jmgStampTrans
                    where jmgStampTrans.JobRef == localParmStatusDecrease.ProdId
        {
            productionOrdersWithMesTrans.add(localParmStatusDecrease.prodId);
        }

        JmgStampJournalTable    jmgStampJournalTable;
        JmgStampJournalTrans    jmgStampJournalTrans;

        // Search calculated and approved.
        while select ProdId from localParmStatusDecrease
                where localParmStatusDecrease.ParmId == this.ParmId()
                exists join jmgStampJournalTable
                     where jmgStampJournalTable.Calculated   == NoYes::Yes
                        || jmgStampJournalTable.Approved     == NoYes::Yes
                    exists join jmgStampJournalTrans
                        where jmgStampJournalTrans.Worker       == jmgStampJournalTable.Worker
                           && jmgStampJournalTrans.ProfileDate  == jmgStampJournalTable.ProfileDate
                           && jmgStampJournalTrans.JobRef       == localParmStatusDecrease.ProdId
        {
            productionOrdersWithMesTrans.add(localParmStatusDecrease.prodId);
        }

        return productionOrdersWithMesTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductionOrderWithMesTransNeedsToBeExcluded</Name>
				<Source><![CDATA[
    private boolean isProductionOrderWithMesTransNeedsToBeExcluded(Set _productionOrdersWithMesTrans)
    {
        SetEnumerator productionOrderWithMesTransEnumerator = _productionOrdersWithMesTrans.getEnumerator();
        str productionOrderIds;
        const str seperator = ", ";

        while (productionOrderWithMesTransEnumerator.moveNext())
        {
            if (productionOrderIds)
            {
                productionOrderIds += seperator + productionOrderWithMesTransEnumerator.current();
            }
            else
            {
                productionOrderIds += productionOrderWithMesTransEnumerator.current();
            }
        }

        if (productionOrderIds
            && Box::yesNo(strFmt("@SCM:SkipProductionOrderWithMESTransMessage" , productionOrderIds), DialogButton::Yes, "@SYS85827") == DialogButton::Yes)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProductionOrderHavingMesTrans</Name>
				<Source><![CDATA[
    private void removeProductionOrderHavingMesTrans(Set _productionOrdersWithMesTrans)
    {
        SetEnumerator _productionOrderWithMesTransEnumerator = _productionOrdersWithMesTrans.getEnumerator();

        ttsBegin;
        while (_productionOrderWithMesTransEnumerator.moveNext())
        {
            ProdParmStatusDecrease::find(this.parmId(), _productionOrderWithMesTransEnumerator.current(), true).delete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleProductionOrderWithMesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// If there are production orders which have MES registrations of either Calculated, Approved or Transferred status, a confirmation
    /// message is shown. If the user selects Yes than the production orders are excluded from the status decrease operation.
    /// </summary>
    public void handleProductionOrderWithMesTrans()
    {
        Set productionOrdersWithMesTrans = this.getProductionOrdersWithMesTrans();
        if (!productionOrdersWithMesTrans.empty())
        {
            if (this.isProductionOrderWithMesTransNeedsToBeExcluded(productionOrdersWithMesTrans))
            {
                this.removeProductionOrderHavingMesTrans(productionOrdersWithMesTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdMultiStatusDecrease prodMultiStatusDecrease = ProdMultiStatusDecrease::construct();
            RunBaseMultiParm::initFromForm(prodMultiStatusDecrease,_args);

            if (! prodMultiStatusDecrease.prompt())
            {
                return;
            }

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(prodMultiStatusDecrease.formName(), _args.menuItemName()))
            {
                prodMultiStatusDecrease.handleProductionOrderWithMesTrans();
                prodMultiStatusDecrease.runOnServer();
            }

            prodMultiStatusDecrease.refreshCaller(_args);
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotDecreaseStatusIfFinanciallyUpdatedTransExist_RU</Name>
				<Source><![CDATA[
    internal boolean cannotDecreaseStatusIfFinanciallyUpdatedTransExist_RU(ProdTable _prodTable, ProdStatus _wantedStatus)
    {
        boolean ok = _prodTable.calculatingWIP_RU()
            && _prodTable.status().isAfterOrEqualTo(ProdStatus::StartedUp)
            && ProdStatusOrderedList::newFromOrder().isBefore(_wantedStatus, ProdStatus::StartedUp)
            && _prodTable.hasFinanciallyUpdatedInventTrans_RU();

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>