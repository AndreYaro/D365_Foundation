<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecutionDetourBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecutionDetourBuilder</c> class is used to add detour buttons to warehouse mobile device flows based on menu item step configuration.
/// </summary>
final internal class WHSWorkExecutionDetourBuilder
{
    #WHSRF

    private container formContainer;
    private WHSExecuteProcessParameters parameters;

    private boolean isErrorState;

    private boolean isRemoveDetourButtonsFlightEnabled = WHSRemoveDetourButtonsFlight::instance().isEnabled();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuilder</Name>
				<Source><![CDATA[
    internal static WHSWorkExecutionDetourBuilder newBuilder(container _formContainer, WHSExecuteProcessParameters _parameters)
    {
        var builder = new WHSWorkExecutionDetourBuilder();
        builder.formContainer = _formContainer;
        builder.parameters = _parameters;
        return builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeOldDetourButtons</Name>
				<Source><![CDATA[
    private void removeOldDetourButtons()
    {
        #WHSWorkExecuteControlElements

        int controlCount = conLen(formContainer);
        for (int i = controlCount; i >= #FieldControlStartLoc; i--)
        {
            container conElement = conPeek(formContainer, i);
            str controlType = conPeek(conElement, #controlType);

            if (controlType == #RFDetourButton)
            {
                formContainer = conDel(formContainer, i, 1);
            }
            else
            {
                // Detour buttons should be the last, so there is no point in looping till the beginning of the container
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetourButtons</Name>
				<Source><![CDATA[
    internal container buildDetourButtons()
    {
        #WHSWorkExecuteControlElements

        if (this.canAddDetourButtons())
        {
            if (isRemoveDetourButtonsFlightEnabled)
            {
                this.removeOldDetourButtons();
            }

            var stepInfoBuilder = this.getStepBuilder(parameters.pass, formContainer);
            if (stepInfoBuilder)
            {
                var stepId = stepInfoBuilder.buildStepId();
                if (stepId)
                {
                    WHSMobileAppFlowStep flowStep = WHSMobileAppFlowStep::find(parameters.pass.parmMenuItem(), stepId);

                    if (flowStep)
                    {
                        WHSWorkUserMobileDisplayMenuItemValidator menuItemValidator = WHSWorkUserMobileDisplayMenuItemValidator::construct();

                        int insertLocation = conLen(formContainer) + 1;
                        if (conPeek(conPeek(formContainer, insertLocation - 1), #name) == WHSMobileAppControlNames::RFRefresh)
                        {
                            insertLocation--; // Refresh button should be last
                        }

                        WHSMobileAppFlowStepDetour stepDetour;
                        WHSRFMenuItemTable detourMenuItem;
                        while select stepDetour
                            where stepDetour.MobileAppFlowStep == flowStep.RecId
                            join MenuItemName, RFTitle from detourMenuItem
                                where detourMenuItem.MenuItemName == stepDetour.MenuItemName
                        {
                            if (menuItemValidator.hasAccessToMenuItem(parameters.pass.parmUserId(), detourMenuItem.MenuItemName))
                            {
                                formContainer = conIns(formContainer, insertLocation, [#RFDetourButton, detourMenuItem.MenuItemName, detourMenuItem.RFTitle, 1, '', #WHSRFUndefinedDataType, 0, '0', 0, '1', '', 0, 0, 0]);
                                insertLocation++;
                            }
                        }
                    }
                }
            }
        }

        return formContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddDetourButtons</Name>
				<Source><![CDATA[
    internal boolean canAddDetourButtons()
    {
        return parameters.mode != WHSWorkExecuteMode::Menu
            && parameters.pass.parmMenuItem()
            && parameters.pass.parmUserId()
            && WHSWorkUserSession::find(parameters.pass.parmUserId()).sessionState().canHaveDetours()
            && (isRemoveDetourButtonsFlightEnabled || !this.hasDetourButtons());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDetourButtons</Name>
				<Source><![CDATA[
    private boolean hasDetourButtons()
    {
        #WHSRF
        #WHSWorkExecuteControlElements

        int controlCount = conLen(formContainer);
        for (int i = #FieldControlStartLoc; i <= controlCount; i++)
        {
            container conElement = conPeek(formContainer, i);
            str controlType = conPeek(conElement, #controlType);

            if (controlType == #RFDetourButton)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStepBuilder</Name>
				<Source><![CDATA[
    internal WHSMobileAppStepInfoBuilder getStepBuilder(WhsrfPassthrough _pass, container _formContainer)
    {
        List controlsList = this.getControlMapList(_formContainer);
        var pageInfo = this.buildPageInfo(controlsList, _pass);

        var decorator = this.initializeDecorator(_formContainer);
        decorator.decorate(pageInfo);

        WHSMobileAppStepInfoBuilder result = WHSMobileAppStepInfoBuilderFactory::getBuilder(_pass, controlsList, decorator.requestedPattern());

        if (result && WHSWorkExecuteStepDetourUseFormContainerPassToDetermineLocOrLPStepFlight::instance().isEnabled())
        {
            result.parmFormContainerPass(WHSRFPassthrough::create(conPeek(_formContainer, #PassthroughInfo)));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlMapList</Name>
				<Source><![CDATA[
    private List getControlMapList(container _formContainer)
    {
        List ctrlList = new List(Types::AnyType);

        for (int i = #ControlsStart; i <= conLen(_formContainer); ++i)
        {
            container subCon = conPeek(_formContainer, i);
            ctrlList.addEnd(this.buildControlMap(subCon, i));
        }

        return ctrlList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPageInfo</Name>
				<Source><![CDATA[
    private WHSMobileAppPageInfo buildPageInfo(List _controlsList, WhsrfPassthrough _pass)
    {
        WHSUserId               userId = '';
        WHSWorkUserSessionId    userSessionId = emptyGuid();
        WHSMenuItemName         menuItemName = '';

        if (_pass.exists(#UserId))
        {
            userId = _pass.lookup(#UserId);
        }
        if (_pass.exists(#UserSessionId))
        {
            userSessionId = str2Guid(_pass.lookup(#UserSessionId));
        }
        if (_pass.exists(#MenuItem))
        {
            menuItemName = _pass.lookup(#MenuItem);
        }

        var receivedCon = conNull();
        
        var mobileAppXmlTranslator = parameters.xmlTranslator as WHSMobileAppServiceXMLTranslator;
        if (mobileAppXmlTranslator)
        {
            receivedCon = mobileAppXmlTranslator.parmReceivedCon();
        }

        return WHSMobileAppPageInfo::newFromParameters(_controlsList, userId, userSessionId, receivedCon, isErrorState, menuItemName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildControlMap</Name>
				<Source><![CDATA[
    private Map buildControlMap(container _con, int _sequence)
    {
        #WHSWorkExecuteControlElements
        #WHSWorkExecuteDisplayCases

        const real NumDecimalsDefault = -1;

        WHSMobileAppControlName controlName = conPeek(_con, #name);
        WHSMobileAppControlType controlType = conPeek(_con, #controlType);
        str                     controlData = WHSWorkExecuteDisplay::prepareControlData(conPeek(_con, #data));
        if ((controlName == #RFError) && (controlType == #RFlabel))
        {
            isErrorState = true;
        }
        Map controlMap = new Map(Types::String, Types::AnyType);
        controlMap.insert(#XMLControlCtrlType, controlType);
        controlMap.insert(#XMLControlName, controlName);
        controlMap.insert(#XMLControlLabel, conPeek(_con, #label));
        controlMap.insert(#XMLControlNewLine, int2str(conPeek(_con, #newLine)));
        controlMap.insert(#XMLControlData, controlData);
        controlMap.insert(#XMLControlType, conPeek(_con, #type));
        controlMap.insert(#XMLControlLength, int2str(conPeek(_con, #length)));
        controlMap.insert(#XMLControlError, conPeek(_con, #error));
        controlMap.insert(#XMLControlDefaultButton, int2str(conPeek(_con, #defaultButton)));
        controlMap.insert(#XMLControlEnabled, int2str(conPeek(_con, #enabled)));
        controlMap.insert(#XMLControlSelected, conPeek(_con, #selected));
        controlMap.insert(#XMLControlColor, conPeek(_con, #color));
        controlMap.insert(#XMLControlStatus, conPeek(_con, #status));
        controlMap.insert(#XMLControlInputType, conPeek(_con, #inputType));
        controlMap.insert(#XMLControlNumDecimals, NumDecimalsDefault);
        controlMap.insert(#XMLControlDisplayArea, '');

        WHSMobileAppField mobileAppField = WHSMobileAppField::findByExtendedType(conPeek(_con, #inputType));
        str priority    = "0";
        str subPriority = "0";
        str inputMode = '';
        str inputType = '';
        if (mobileAppField)
        {
            inputMode = WHSFieldInputModeConversionHelper::getInputModeName(mobileAppField);
            inputType = enum2Symbol(enumNum(WHSFieldInputType), mobileAppField.InputType);
            WHSMobileAppFieldPriority mobileAppFieldPriority = WHSMobileAppFieldPriority::findByMobileAppField(mobileAppField);
            if (mobileAppFieldPriority)
            {
                priority = int2Str(mobileAppFieldPriority.Priority);
                subPriority = int2Str(mobileAppFieldPriority.SubPriority);
            }
        }

        controlMap.insert(#XMLControlPreferredInputMode, inputMode);
        controlMap.insert(#XMLControlPreferredInputType, inputType);
        controlMap.insert(#XMLControlDisplayPriority, priority);
        controlMap.insert(#XMLControlDisplaySubPriority, subPriority);
        controlMap.insert(#XMLControlDataSequence, int2Str(_sequence));

        controlMap.insert(#XMLControlAttachedTo, '');
        controlMap.insert(#XMLControlInstructionControl, '');
        controlMap.insert(#XMLControlFooter1, '');
        controlMap.insert(#XMLControlFooter2, '');
        controlMap.insert(#MobileAppField, mobileAppField);

        return controlMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDecorator</Name>
				<Source><![CDATA[
    private WHSMobileAppServiceXMLDecorator initializeDecorator(container _con)
    {
        container stateSubCon = conPeek(_con, #StateInfo);
        var modeAttribute = new WhsWorkExecuteModeAttribute(conPeek(stateSubCon, #StateInfoMode));
        var decoratorFactory = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSIMobileAppServiceXMLDecoratorFactory), modeAttribute) as WHSIMobileAppServiceXMLDecoratorFactory;

        if (!decoratorFactory)
        {
            decoratorFactory = new WHSMobileAppServiceXMLDecoratorFactoryDefault();
        }

        WHSMobileAppServiceXMLDecorator decorator;
        if (decoratorFactory)
        {
            decorator = decoratorFactory.getDecorator(_con);
        }
        else
        {
            decorator = new WHSMobileAppServiceXMLDecoratorDefault();
        }
        
        return decorator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>