<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesEditLinesForm_PackingSlipCorrection</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesEditLinesFormFactoryAttribute(DocumentStatus::PackingSlip, true, VersioningUpdateType::Correction)]
[SalesEditLinesFormFactoryAttribute(DocumentStatus::PackingSlip, false, VersioningUpdateType::Correction)]
class       SalesEditLinesForm_PackingSlipCorrection
extends     SalesEditLinesForm_PackingSlip
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billOfLading</Name>
				<Source><![CDATA[
    public boolean billOfLading()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>choose</Name>
				<Source><![CDATA[
    boolean choose()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    boolean close()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionStatusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>StatusIssue</c> enumeration value to use for querying inventory transactions on
    /// corrections.
    /// </summary>
    /// <param name="_purchQty">
    /// The packing slip line quantity.
    /// </param>
    /// <returns>
    /// The <c>StatusIssue</c> enumeration value for which to query on corrections.
    /// </returns>
    public StatusIssue correctionStatusIssue(PurchQty _purchQty)
    {
        return _purchQty > 0 ? StatusIssue::Deducted : StatusIssue::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionStatusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>StatusReceipt</c> enumeration value to use for querying inventory transactions on
    /// corrections.
    /// </summary>
    /// <param name="_purchQty">
    /// The packing slip line quantity.
    /// </param>
    /// <returns>
    /// The <c>StatusReceipt</c> enumeration value for which to query on corrections.
    /// </returns>
    public StatusReceipt correctionStatusReceipt(PurchQty _purchQty)
    {
        return _purchQty < 0 ? StatusReceipt::Received : StatusReceipt::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesEditLines</c> form should allow changes in the <c>groupDate</c>
    /// field group.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean editDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingCaption</Name>
				<Source><![CDATA[
    str editingCaption(Common _callerTable = null)
    {
        CustPackingSlipJour custPackingSlipJour = _callerTable as CustPackingSlipJour;
        return strfmt("@SYS332943", custPackingSlipJour.PackingSlipId, custPackingSlipJour.InvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select batch numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_salesParmLine">
    /// The selected <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The selected <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// true if a custom lookup was shown; otherwise, false.
    /// </returns>
    public boolean lookupInventBatchId(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        InventLookupReturn::lookupInventBatchIdReturn(_salesParmLine.InventTransId, _salesParmLine.ItemId, _formControl, _inventDim.InventSerialId, _filterStr,
            this.correctionStatusIssue(_salesParmLine.PreviousDeliverNow),
            this.correctionStatusReceipt(_salesParmLine.PreviousDeliverNow),
            false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays a custom lookup to select invent GTD.
    /// </summary>
    /// <param name="_formControl">
    ///     The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    ///     The current value.
    /// </param>
    /// <param name="_salesParmLine">
    ///     The selected <c>SalesParmLine</c> record.
    /// </param>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean lookupInventGTDId_RU(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine)
    {
        InventLookupReturn::lookupInventGTDReturn(_salesParmLine.InventTransId,
                                                  _salesParmLine.ItemId,
                                                  _formControl,
                                                  _filterStr,
                                                  this.correctionStatusIssue(_salesParmLine.PreviousDeliverNow),
                                                  this.correctionStatusReceipt(_salesParmLine.PreviousDeliverNow),
                                                  false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays a custom lookup to select invent owners.
    /// </summary>
    /// <param name="_formControl">
    ///     The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    ///     The current value.
    /// </param>
    /// <param name="_salesParmLine">
    ///     The selected <c>SalesParmLine</c> record.
    /// </param>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean lookupInventOwnerId_RU(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine)
    {
        InventLookupReturn::lookupInventOwnerReturn(_salesParmLine.InventTransId,
                                                    _salesParmLine.ItemId,
                                                    _formControl,
                                                    _filterStr,
                                                    this.correctionStatusIssue(_salesParmLine.PreviousDeliverNow),
                                                    this.correctionStatusReceipt(_salesParmLine.PreviousDeliverNow),
                                                    false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select serial numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_salesParmLine">
    /// The selected <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The selected <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// true if a custom lookup was shown; otherwise, false.
    /// </returns>
    public boolean lookupInventSerialId(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        InventLookupReturn::lookupInventSerialReturn(_salesParmLine.InventTransId, _salesParmLine.ItemId, _formControl, _filterStr, _inventDim.InventBatchId,
            this.correctionStatusIssue(_salesParmLine.PreviousDeliverNow),
            this.correctionStatusReceipt(_salesParmLine.PreviousDeliverNow),
            false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesEditLines</c> form should display the <c>tabPageOther</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean otherTab()
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return true;
        }
        // </GEERU>
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overviewTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesEditLines</c> form should display the <c>tabOverview</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean overviewTab()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parametersGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesEditLines</c> form should display the <c>groupUpdate</c> control
    /// group.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean parametersGroup()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subSalesTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesEditLines</c> form should display the <c>TabSalesParmSubTable</c>
    /// tab page.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean subSalesTab()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the inventory dimensions that will be used for a parameter line.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions to validate.
    /// </param>
    /// <returns>
    /// true if the inventory dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventDimId(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        InventMovement      movement            = InventMovement::construct(_salesParmLine);
        InventDimGroupSetup inventDimGroupSetup = movement.inventDimGroupSetup();
        boolean             ret                 = true;

        if (_salesParmLine.PreviousDeliverNow != _salesParmLine.DeliverNow
            && (   (!_inventDim.inventSerialId && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim, InventSerialId)))
                || (!_inventDim.inventBatchId  && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim, InventBatchId)))))
        {
            if (_salesParmLine.salesLine().salesTable().InterCompanyDirectDeliveryOrig)
            {
                ret = checkFailed("@SYS333615");
            }
            else if (Box::yesNo("@SYS333613", DialogButton::Yes) == DialogButton::No)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a validation of the GTD inventory dimensions.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    ///     The <c>InventDim</c> record that contains values of the invent GTD dimension to be validated.
    /// </param>
    /// <returns>
    ///     true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventGTDId_RU(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        boolean ret = true;
        Qty qtyFound;

        if (_inventDim.InventGtdId_RU && _salesParmLine.PreviousDeliverNow != _salesParmLine.DeliverNow)
        {
            Query query = InventLookupReturn::queryLookupInventGTDIdReturn(_salesParmLine.InventTransId,
                                                                             _salesParmLine.ItemId,
                                                                             _inventDim.InventGtdId_RU,
                                                                             this.correctionStatusIssue(_salesParmLine.PreviousDeliverNow),
                                                                             this.correctionStatusReceipt(_salesParmLine.PreviousDeliverNow));

            QueryRun queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                InventTrans inventTrans = queryRun.get(tableNum(InventTrans));
                qtyFound += inventTrans.Qty;
            }

            if (!qtyFound)
            {
                ret = checkFailed("@GLS221817");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a validation of the owner inventory dimensions.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    ///     The <c>InventDim</c> record that contains values of the invent owner dimension to be validated.
    /// </param>
    /// <returns>
    ///     true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventOwnerId_RU(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        boolean ret = true;
        Qty qtyFound;

        if (_inventDim.InventOwnerId_RU && _salesParmLine.PreviousDeliverNow != _salesParmLine.DeliverNow)
        {
            Query query = InventLookupReturn::queryLookupInventOwnerIdReturn(_salesParmLine.InventTransId,
                                                                             _salesParmLine.ItemId,
                                                                             _inventDim.InventOwnerId_RU,
                                                                             this.correctionStatusIssue(_salesParmLine.PreviousDeliverNow),
                                                                             this.correctionStatusReceipt(_salesParmLine.PreviousDeliverNow));

            QueryRun queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                InventTrans inventTrans = queryRun.get(tableNum(InventTrans));
                qtyFound += inventTrans.Qty;
            }

            if (!qtyFound)
            {
                ret = checkFailed("@GLS221817");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a validation of the serial and batch number inventory dimensions.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains values of the serial and batch number dimension to be
    /// validated.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventSerialBatchId(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        boolean ret = true;
        Qty qtyFound;

        if (_inventDim.inventSerialId && _salesParmLine.PreviousDeliverNow != _salesParmLine.DeliverNow)
        {
            Query query = InventLookupReturn::queryLookupInventSerialReturn(_salesParmLine.InventTransId, _salesParmLine.ItemId,
                        _inventDim.inventSerialId, _inventDim.InventBatchId,
                        this.correctionStatusIssue(_salesParmLine.PreviousDeliverNow),
                        this.correctionStatusReceipt(_salesParmLine.PreviousDeliverNow));

            QueryRun queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                InventTrans inventTrans = queryRun.get(tablenum(InventTrans));
                qtyFound += inventTrans.Qty;
            }

            if (!qtyFound)
            {
                ret = checkFailed("@SYS333614");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>