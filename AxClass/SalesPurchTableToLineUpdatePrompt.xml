<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableToLineUpdatePrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesPurchTableToLineUpdatePrompt extends RunBase
{
    DialogRunbase               dialog;
    Common                      sourceTable;
    List                        updateFields;
    Map                         fieldList;
    container                   packedFieldList;
    container                   packedPreviousAnswers;
    boolean                     extendedPromptReturnValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewFieldsToDialog</Name>
				<Source><![CDATA[
    protected void addNewFieldsToDialog(
                                    DialogGroup              _dialogGroup,
                                    Dialog                   _dialog,
                                    boolean                  _refreshable = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNonPromptFieldToDialog</Name>
				<Source><![CDATA[
    protected boolean addNonPromptFieldToDialog(TradeTable2LineUpdate _tradeTable2LineUpdate, FieldId _fieldId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    public void closeCancel()
    {
        FormRun formRun = dialog.formRun();
        formRun.closeCancel();
        formRun.notify();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        #resource
        SalesPurchTableToLineField  salesPurchTableToLineField;
        boolean                     refreshable;

        if (this.fieldsToPromptFor())
        {
            dialog = super();

            dialog.formBuildDesign().windowType(FormWindowType::PopUp);

            fieldList   = new Map(Types::Integer, Types::Class);

            DialogGroup mainDialogGroup = dialog.addGroup('1');
            mainDialogGroup.columns(1);
            mainDialogGroup.frameType(FormFrameType::None);

            DialogGroup dialogGroup = dialog.addGroup('1.1', mainDialogGroup);
            dialogGroup.columns(2);
            dialogGroup.frameType(FormFrameType::None);
            dialogGroup.formBuildGroup().widthMode(FormWidth::ColumnWidth);

            dialog.addText("@SYS62845");

            dialogGroup = dialog.addGroup('1.2', mainDialogGroup);
            dialogGroup.columns(this.dialogColumns());
            dialogGroup.frameType(FormFrameType::None);

            ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();
            while (updateFieldsEnumerator.moveNext())
            {
                salesPurchTableToLineField = updateFieldsEnumerator.current();

                if (salesPurchTableToLineField.parmTableToLineUpdate() == TradeTable2LineUpdate::Prompt)
                {
                    refreshable = true;
                    dialog.addGroup(salesPurchTableToLineField.fieldGroupLabel(), dialogGroup);

                    DialogField dialogField = dialog.addField(enumStr(NoYes),
                                                              salesPurchTableToLineField.questionLabel(),
                                                              salesPurchTableToLineField.questionHelp());
                    dialogField.value(salesPurchTableToLineField.parmUpdateLines());
                    fieldList.insert(salesPurchTableToLineField.parmFieldId(), dialogField);
                }
            }

            //The "always-update-fields" is kept separate from the "promt-update-fields" only for UI reasons.
            if (this.existNonPromptDialogFields())
            {
                updateFieldsEnumerator = updateFields.getEnumerator();
                while (updateFieldsEnumerator.moveNext())
                {
                    salesPurchTableToLineField = updateFieldsEnumerator.current();

                    if (this.addNonPromptFieldToDialog(salesPurchTableToLineField.parmTableToLineUpdate(),
                                                       salesPurchTableToLineField.parmFieldId()))
                    {
                        dialog.addGroup(salesPurchTableToLineField.fieldGroupLabel(), dialogGroup);
                        dialog.addText(salesPurchTableToLineField.lineUpdateDescription());
                    }
                }

                if (this.existNonPromptDialogFields())
                {
                    this.addNewFieldsToDialog(dialogGroup,
                                              dialog,
                                              refreshable);
                }
            }

            dialog.form().design().alwaysOnTop(true);

            if (refreshable)
            {
                dialog.allowUpdateOnSelectCtrl(true);
                this.dialogSelectCtrl();
            }

            return dialog;
        }
        else
        {
            return dialog;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogColumns</Name>
				<Source><![CDATA[
    private int dialogColumns()
    {
        return real2int(trunc(power(this.fieldsToPromptFor(), 0.5)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonPromptDialogFields</Name>
				<Source><![CDATA[
    protected boolean existNonPromptDialogFields()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified field is to be enabled on the parameters prompt.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field to check for enabling.
    /// </param>
    /// <returns>
    /// true if the field should be enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// In general, this will be determined by checking the document table-to-line field parameters table.
    /// </remarks>
    public boolean fieldEnabled(FieldId _fieldId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdToInternalFieldId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a normal field ID to an internal field ID.
    /// </summary>
    /// <param name="_fieldId">
    /// Normal field ID.
    /// </param>
    /// <param name="_tableId">
    /// Table ID of the talbe for the specified field ID.
    /// </param>
    /// <returns>
    /// Internal field ID.
    /// </returns>
    protected FieldId fieldIdToInternalFieldId_W(FieldId _fieldId, TableId _tableId = 0)
    {
        return _fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToPromptFor</Name>
				<Source><![CDATA[
    protected Counter fieldsToPromptFor()
    {
        Counter                     fieldsToPromptFor = 0;

        ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();

        while (updateFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = updateFieldsEnumerator.current();

            if (salesPurchTableToLineField.parmTableToLineUpdate() == TradeTable2LineUpdate::Prompt)
            {
                fieldsToPromptFor++;
            }
        }

        return fieldsToPromptFor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToUpdate</Name>
				<Source><![CDATA[
    protected boolean fieldsToUpdate()
    {
        boolean                     fieldsToUpdate = false;

        ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();

        while (updateFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = updateFieldsEnumerator.current();

            if (salesPurchTableToLineField.parmUpdateLines())
            {
                fieldsToUpdate = true;
                break;
            }
        }

        return fieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();

        while (updateFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = updateFieldsEnumerator.current();

            if (fieldList.exists(salesPurchTableToLineField.parmFieldId()))
            {
                DialogField dialogField = fieldList.lookup(salesPurchTableToLineField.parmFieldId());

                salesPurchTableToLineField.parmUpdateLines(dialogField.value());
            }
        }

        this.getNewFieldsFromDialog();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewFieldsFromDialog</Name>
				<Source><![CDATA[
    protected void getNewFieldsFromDialog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerFieldId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID based on current instance and specified internal field ID.
    /// </summary>
    /// <param name="_internalFieldId">
    /// Internal field ID.
    /// </param>
    /// <returns>
    /// Table ID.
    /// </returns>
    protected FieldId headerFieldId_W(FieldId _internalFieldId)
    {
        return _internalFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTableId</Name>
				<Source><![CDATA[
    abstract protected TableId headerTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTableId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the normal field ID based on current instance and specified internal field ID.
    /// </summary>
    /// <param name="_internalFieldId">
    /// Internal field ID.
    /// </param>
    /// <returns>
    /// Normal field ID.
    /// </returns>
    protected tableId headerTableId_W(FieldId _internalFieldId)
    {
        return this.headerTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerToLineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields that are supported by the table-to-line functionality of the module.
    /// </summary>
    /// <returns>
    /// A container of fields that are supported by the table-to-line functionality module.
    /// </returns>
    /// <remarks>
    /// Typically, this will be determined by checking the document table-to-line field parameters table.
    /// </remarks>
    abstract public container headerToLineFieldIdList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdateFields</Name>
				<Source><![CDATA[
    public void initUpdateFields()
    {
        int                         pos = 1;
        int                         array;

        updateFields = new List(Types::Class);

        if (!this.lines2Update())
            return;

        container header2LineFieldIds = this.headerToLineFieldIdList();

        while (pos <= conLen(header2LineFieldIds))
        {
            FieldId fieldId = conPeek(header2LineFieldIds, pos);

            if (this.fieldEnabled(fieldId))
            {
                SalesPurchTableToLineField salesPurchTableToLineField = this.newFieldObject(fieldId);

                if (salesPurchTableToLineField.parmTableToLineUpdate() != TradeTable2LineUpdate::Never)
                {
                    boolean fieldChanged = false;

                    // After adding extension table, "fieldId" has been updated to "internalFieldId" which contains
                    // the information of the field related extension table.
                    // Note: for fields in base table, "fieldId" and "internalFieldId" are the same.
                    SysDictField sysDictField = new SysDictField(this.headerTableId_W(fieldId), this.headerFieldId_W(fieldId));

                    for (array = 1; array <= sysDictField.arraySize(); array++)
                    {
                        SysDictField sysDictFieldArray = new SysDictField(sysDictField.tableid(), sysDictField.id(), array);

                        if (this.isFieldChanged(this.fieldIdToInternalFieldId_W(sysDictFieldArray.id(), this.headerTableId_W(fieldId))))
                        {
                            fieldChanged = true;
                        }
                    }

                    if (fieldChanged || this.isDependentFieldChanged(fieldId))
                    {
                        if (salesPurchTableToLineField.parmTableToLineUpdate() == TradeTable2LineUpdate::Always)
                        {
                            salesPurchTableToLineField.parmUpdateLines(NoYes::Yes);
                        }

                        updateFields.addEnd(salesPurchTableToLineField);
                    }
                }
            }

            pos++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDependentFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a field is changed.
    /// </summary>
    /// <param name="_fieldId">
    /// The field to check.
    /// </param>
    /// <returns>
    /// true if the field should be considered changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method allows for each module to check for changes to dependent fields.
    /// </remarks>
    protected boolean isDependentFieldChanged(FieldId _fieldId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the individual part of a field array has changed.
    /// </summary>
    /// <param name="_arrayFieldId">
    /// The field to check.
    /// </param>
    /// <returns>
    /// true if the field value changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This must be done by each module on the concrete table. The field comparison will not work directly
    /// on sourceTable, as xRecord.orig().(fieldId) does not compile.
    /// </remarks>
    abstract protected boolean isFieldChanged(FieldId _arrayFieldId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lines2Update</Name>
				<Source><![CDATA[
    abstract protected boolean lines2Update()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldObject</Name>
				<Source><![CDATA[
    abstract protected SalesPurchTableToLineField newFieldObject(FieldId _fieldId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedSalesPurchTableToLineUpdateFields</Name>
				<Source><![CDATA[
    public container packedSalesPurchTableToLineUpdateFields()
    {
        return updateFields.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPreviousAnswers</Name>
				<Source><![CDATA[
    protected void packPreviousAnswers()
    {
        Map previousAnswers = new Map(Types::Integer, Types::Enum);

        if (!updateFields)
        {
            return;
        }

        ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();

        while (updateFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = updateFieldsEnumerator.current();

            if (previousAnswers.exists(salesPurchTableToLineField.parmFieldId()))
            {
                previousAnswers.remove(salesPurchTableToLineField.parmFieldId());
            }
            previousAnswers.insert(salesPurchTableToLineField.parmFieldId(), salesPurchTableToLineField.parmUpdateLines());
        }

        packedPreviousAnswers = previousAnswers.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtendedPromptReturnValue</Name>
				<Source><![CDATA[
    public boolean parmExtendedPromptReturnValue(boolean _extendedPromptReturnValue = extendedPromptReturnValue)
    {
        extendedPromptReturnValue = _extendedPromptReturnValue;
        return extendedPromptReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = null)
    {
        if (_sourceTable)
        {
            sourceTable = _sourceTable;
            this.initUpdateFields();
        }

        return sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackPreviousAnswers</Name>
				<Source><![CDATA[
    protected void unpackPreviousAnswers()
    {
        ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();

        if (!packedPreviousAnswers)
        {
            return;
        }

        Map previousAnswers = Map::create(packedPreviousAnswers);

        while (updateFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = updateFieldsEnumerator.current();

            if (salesPurchTableToLineField.parmTableToLineUpdate() == TradeTable2LineUpdate::Prompt)
            {
                if (previousAnswers && previousAnswers.exists(salesPurchTableToLineField.parmFieldId()))
                {
                    salesPurchTableToLineField.parmUpdateLines(previousAnswers.lookup(salesPurchTableToLineField.parmFieldId()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS62838";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>