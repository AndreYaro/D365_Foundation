<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_RCash</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalEngine_RCash extends LedgerJournalEngine
{
    OfficialsServ_RU  officialServ;
    AmountMST         journalTotalDisb, journalTotalReimb;
    FormDataSource    ledgerJournalTrans_RCash_ds;
    boolean           isCashCollEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRoundOffAmount_HU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the round off amount for the cash transaction based on the rounding value specified on the cash account.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     The <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    ///     The <c>LedgerJournalTrans_RCash</c> table buffer.
    /// </param>
    public void calcRoundOffAmount_HU(
        LedgerJournalTrans          _ledgerJournalTrans,
        LedgerJournalTrans_RCash    _ledgerJournalTrans_RCash)
    {
        RCashTable  cashTable;

        if (!_ledgerJournalTrans_RCash.ManualRounding_HU)
        {
            cashTable = RCashTable::find(_ledgerJournalTrans.parmAccount());

            if (cashTable.RoundOffCash_HU && RCashLedgerAccount::roundOffLedgerDimension(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.PostingProfile))
            {
                if (_ledgerJournalTrans.AmountCurCredit)
                {
                    _ledgerJournalTrans_RCash.RoundOffCashAmount_HU = cashTable.roundedOffCashAmount_HU(_ledgerJournalTrans.AmountCurCredit) - _ledgerJournalTrans.AmountCurCredit;
                }

                if (_ledgerJournalTrans.AmountCurDebit)
                {
                    _ledgerJournalTrans_RCash.RoundOffCashAmount_HU = cashTable.roundedOffCashAmount_HU(_ledgerJournalTrans.AmountCurDebit) - _ledgerJournalTrans.AmountCurDebit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(LedgerJournalTrans         _ledgerJournalTrans,
                       boolean                    _refresh = true,
                       boolean                    _removeBudgetForAllVoucherLines = false,
                       LedgerJournalTrans_RCash   _ledgerJournalTrans_RCash = null)
    {
        ;
        RCashDestinationTrans::deleteFromLedgerJournalTrans(_ledgerJournalTrans, _ledgerJournalTrans_RCash);

        super(_ledgerJournalTrans, _refresh, _removeBudgetForAllVoucherLines, _ledgerJournalTrans_RCash);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCashRegister_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if cash register terminal need to be updated.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    protected boolean enableCashRegister_W()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSettledAmount</Name>
				<Source><![CDATA[
    public void findSettledAmount(LedgerJournalTrans _ledgerJournalTrans)
    {
        NoYes               amountOverwrite = NoYes::Yes;
        Amount              specAmount;
        RCashTransStatus    transStatus;
        ;

        if (ledgerJournalTable.Posted)
        {
            return;
        }

        if (SpecTrans::getSpecTransCount(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId))
        {
            specAmount = this.getSpecAmount(_ledgerJournalTrans);

            if (specAmount != _ledgerJournalTrans.amount())
            {
                if (_ledgerJournalTrans.BankChequeNum)
                {
                   Box::info("@SYS66114");
                   amountOverwrite = NoYes::No;
                }
                else
                {
                    transStatus = LedgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId).TransStatus;
                    if (transStatus == RCashTransStatus::Confirmed
                     || transStatus == RCashTransStatus::Approved)
                    {
                        amountOverwrite = NoYes::No;
                    }
                    else
                    if (_ledgerJournalTrans.amount())
                    {
                        amountOverwrite = (Box::yesNo("@SYS58110",
                                                      DialogButton::Yes,
                                                      "@SYS8801",
                                                      "@SYS29050") == DialogButton::Yes);
                    }
                }
                if (amountOverwrite)
                {
                    specAmount = this.getSpecAmount(_ledgerJournalTrans);

                    if (specAmount > 0)
                    {
                        _ledgerJournalTrans.AmountCurDebit  = abs(specAmount);
                        _ledgerJournalTrans.AmountCurCredit = 0;
                    }
                    else
                    {
                        _ledgerJournalTrans.AmountCurCredit = abs(specAmount);
                        _ledgerJournalTrans.AmountCurDebit  = 0;
                    }

                    if (ledgerJournalTrans_ds)
                    {
                        ledgerJournalTrans_ds.refresh();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowEditTrans</Name>
				<Source><![CDATA[
    public boolean getAllowEditTrans()
    {
        return this.allowEditTrans(ledgerJournalTransOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocTotals</Name>
				<Source><![CDATA[
    private container initDocTotals(LedgerJournalTable _ledgerJournalTable)
    {
        AmountMST   totalDisb, totalReimb;

        LedgerJournalTrans        localJournalTrans;
        LedgerJournalTrans_RCash  localJournalTrans_RCash;

        while select AmountCurCredit,
                     AmountCurDebit,
                     CurrencyCode,
                     TransDate,
                     Triangulation,
                     ExchRate,
                     ExchRateSecond,
                     JournalNum
                     from localJournalTrans
            where localJournalTrans.JournalNum        == _ledgerJournalTable.JournalNum
        join DocType from localJournalTrans_RCash
            where localJournalTrans_RCash.RefRecId    == localJournalTrans.RecId &&
                  localJournalTrans_RCash.TransStatus != RCashTransStatus::Canceled
        {
            if (localJournalTrans_RCash.DocType == RCashDocType::DisbursementSlip  ||
               (localJournalTrans_RCash.DocType == RCashDocType::Correction        &&
                localJournalTrans.AmountCurCredit < 0))
            {
                totalDisb += -localJournalTrans.calcAmountMST();
            }
            if (localJournalTrans_RCash.DocType == RCashDocType::ReimbursementSlip  ||
               (localJournalTrans_RCash.DocType == RCashDocType::Correction         &&
                localJournalTrans.AmountCurDebit < 0))
            {
                totalReimb += localJournalTrans.calcAmountMST();
            }
        }

        return [totalDisb, totalReimb];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOffsetAccount</Name>
				<Source><![CDATA[
    public void initFromOffsetAccount(LedgerJournalTrans            _ledgerJournalTrans,
                                      LedgerJournalTrans_Project    _ledgerJournalTrans_Project    = null,
                                      LedgerJournalTrans_Asset      _ledgerJournalTrans_Asset      = null,
                                      LedgerJournalTrans_RAsset     _ledgerJournalTrans_RAsset     = null,
                                      LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null)
    {
        VendTable           vendTableLocal;
        CustTable           custTableLocal;
        EmployeeTable_RU    employeeTable;
        HcmEmployment       employment;
        HCMWorker           worker;
        DirPartyTable       dirPartyTable;

        void oneTimeCustAccount()
        {
            CustTable defCustTable = CustTable::find(CustParameters::find().DefaultCust);
            if (defCustTable && _ledgerJournalTrans.parmOffsetAccount() == defCustTable.AccountNum)
            {
                _ledgerJournalTrans.parmOffsetAccount(this.createOneTimeAccount(defCustTable));
            }
        }
        void oneTimeVendAccount()
        {
            VendTable defVendTable = VendTable::find(VendParameters::find().DefaultVend);
            if (defVendTable && _ledgerJournalTrans.parmOffsetAccount() == defVendTable.AccountNum)
            {
                _ledgerJournalTrans.parmOffsetAccount(VendTable::createOneTimeAccount(null));
            }
        }

        super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RAsset, _ledgerJournalTrans_RDeferrals);

        _ledgerJournalTrans.rCashDocRepresPersonId = "";
        _ledgerJournalTrans.SettleVoucher = SettlementType::None;
        switch (_ledgerJournalTrans.OffsetAccountType)
        {
            case LedgerJournalACType::Employee_RU :
                _ledgerJournalTrans.rCashDocRepresType     = RCashDocRepresType::Employee;
                _ledgerJournalTrans.rCashDocRepresPersonId = _ledgerJournalTrans.parmOffsetAccount();
                break;

            case LedgerJournalACType::Vend :
                oneTimeVendAccount();
                vendTableLocal = VendTable::find(_ledgerJournalTrans.parmOffsetAccount());

                if (vendTableLocal.ContactPersonId)
                {
                    _ledgerJournalTrans.rCashDocRepresType     = RCashDocRepresType::Employee;
                    _ledgerJournalTrans.rCashDocRepresPersonId = vendTableLocal.ContactPersonId;
                }
                else
                {
                    _ledgerJournalTrans.rCashDocRepresType     = RCashDocRepresType::Vendor;
                    _ledgerJournalTrans.rCashDocRepresPersonId = _ledgerJournalTrans.parmOffsetAccount();
                }

                _ledgerJournalTrans.SettleVoucher = VendParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
                this.initVatRegData_PL(_ledgerJournalTrans, vendTableLocal);
                break;

            case LedgerJournalACType::Cust :
                oneTimeCustAccount();
                custTableLocal = CustTable::find(_ledgerJournalTrans.parmOffsetAccount());

                if (custTableLocal.ContactPersonId)
                {
                    _ledgerJournalTrans.rCashDocRepresType     = RCashDocRepresType::Employee;
                    _ledgerJournalTrans.rCashDocRepresPersonId = custTableLocal.ContactPersonId;
                }
                else
                {
                    _ledgerJournalTrans.rCashDocRepresType     = RCashDocRepresType::Customer;
                    _ledgerJournalTrans.rCashDocRepresPersonId = _ledgerJournalTrans.parmOffsetAccount();
                }

                _ledgerJournalTrans.SettleVoucher = CustParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
                this.initVatRegData_PL(_ledgerJournalTrans, custTableLocal);
                break;

            case LedgerJournalACType::Bank :
                _ledgerJournalTrans.rCashDocRepresType     = RCashDocRepresType::Employee;

                select firstonly EmployeeId from employeeTable
                    exists join employment
                        where employment.RecId == employeeTable.HcmEmployment
                    exists join worker
                        where worker.RecId == employment.Worker &&
                              worker.Person == (select firstonly RecId from dirPartyTable
                                                    where dirPartyTable.Name like
                    OfficialsTable_RU::name(OffReportType_RU::CashSlip, OffPosition_RU::Cashier)).RecId;

                _ledgerJournalTrans.rCashDocRepresPersonId = employeeTable.EmployeeId;
                break;
        }

        _ledgerJournalTrans.setRepresPersonValues_W();

        if (SpecTrans::getSpecTransCount(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId))
        {
            SpecTransManager::newFromSpec(_ledgerJournalTrans).deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    private void initOfficials(LedgerJournalTrans       _ledgerJournalTrans)
    {
        if (! _ledgerJournalTrans.OffSessionId_RU)
        {
            officialServ = new OfficialsServ_RU();
            officialServ.initTableRCash(_ledgerJournalTrans.parmAccount());
            _ledgerJournalTrans.OffSessionId_RU = officialServ.newId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        RCashAccount cashAccount_W;

        super(_ledgerJournalTrans, _ledgerJournalTrans_Asset);

        _ledgerJournalTrans.AccountType     = LedgerJournalACType::RCash;
        _ledgerJournalTrans.TransactionType = LedgerTransType::Payment;

        cashAccount_W = ledgerJournalTable.ledgerJournalTable_W().CashAccount_W;
        if (cashAccount_W)
        {
            _ledgerJournalTrans.parmAccount(cashAccount_W);
        }
        else
        {
            _ledgerJournalTrans.parmAccount(RCashParameters::find().DefaultAccountNum);
        }

        _ledgerJournalTrans.Approved    = NoYes::Yes;
        this.initOfficials(_ledgerJournalTrans);

        this.accountModified(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalDisb</Name>
				<Source><![CDATA[
    public AmountMST journalDisb()
    {
        return journalTotalDisb;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalReimb</Name>
				<Source><![CDATA[
    public AmountMST journalReimb()
    {
        return journalTotalReimb;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTableUpdateTotals</Name>
				<Source><![CDATA[
    public void ledgerJournalTableUpdateTotals(LedgerJournalTable _ledgerJournalTable,
                                        boolean            _recalc = true)
    {
        if (_recalc)
        {
            [journalTotalDisb, journalTotalReimb] = this.initDocTotals(_ledgerJournalTable);
        }
        super(_ledgerJournalTable, _recalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>minMarkedCashStatus</Name>
				<Source><![CDATA[
    public RCashTransStatus minMarkedCashStatus()
    {
        RCashTransStatus          ret = RCashTransStatus::Canceled;
        LedgerJournalTrans_RCash  markedTrans;

        if (! ledgerJournalTrans_RCash_ds ||
            ledgerJournalTrans_RCash_ds.table() != tablenum(LedgerJournalTrans_RCash))
        {
            return RCashTransStatus::None;
        }

        for (markedTrans = ledgerJournalTrans_RCash_ds.getFirst(true) ?
                ledgerJournalTrans_RCash_ds.getFirst(true) :
                ledgerJournalTrans_RCash_ds.cursor();
             markedTrans;
             markedTrans = ledgerJournalTrans_RCash_ds.getNext())
        {
            ret = this.minTransStatus(ret, markedTrans.TransStatus);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds <c>RCashTransStatus</c> with minimal enum value.
    /// </summary>
    /// <param name = "_first">
    ///    First enum to be compared.
    /// </param>
    /// <param name = "_second">
    ///    Second enum to be compared.
    /// </param>
    /// <returns>
    ///    Enum with minimal enum value.
    /// </returns>
    protected RCashTransStatus minTransStatus(RCashTransStatus _first, RCashTransStatus _second)
    {
        RCashTransStatus ret = _first;
        container conCancel = [RCashTransStatus::Confirmed, RCashTransStatus::None];

        switch (ret)
        {
            case RCashTransStatus::Canceled:
                if (_second != RCashTransStatus::Canceled)
                {
                    ret = _second;
                }
                break;

            case RCashTransStatus::Approved:
                if (conFind(conCancel, _second))
                {
                    ret = _second;
                }
                break;

            case RCashTransStatus::Confirmed:
                if (_second == RCashTransStatus::None)
                {
                    ret = _second;
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(FormRun _formRun = null)
    {
        super(_formRun);

        // <GEERU>
        isCashCollEnabled = LedgerJournalTrans_RCash::isCashCollEnabled_RU();
        // </GEERU>

        if (_formRun)
        {
            ledgerJournalTrans_RCash_ds = _formRun.dataSource(5);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalActive</Name>
				<Source><![CDATA[
    public void newJournalActive(LedgerJournalTable _ledgerJournalTable, boolean _recalc = false)
    {
        [journalTotalDisb, journalTotalReimb] = this.initDocTotals(_ledgerJournalTable);

        super(_ledgerJournalTable, _recalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceInternalContainers</Name>
				<Source><![CDATA[
    public void reduceInternalContainers(LedgerJournalTrans       _ledgerJournalTrans,
                                         LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        TmpVoucherSum   tmpVoucherSum;
        ;
        if (!_ledgerJournalTrans.RecId)
            return;

        super(_ledgerJournalTrans);

            tmpVoucherSum.Voucher = _ledgerJournalTrans.orig().Voucher;
        if (voucherBalance.find(tmpVoucherSum))
        {
            if (_ledgerJournalTrans_RCash.orig().DocType == RCashDocType::DisbursementSlip  ||
               (_ledgerJournalTrans_RCash.orig().DocType == RCashDocType::Correction        &&
                _ledgerJournalTrans.orig().AmountCurCredit < 0))
            {
                journalTotalDisb  += _ledgerJournalTrans.orig().calcAmountMST();
            }
            if (_ledgerJournalTrans_RCash.orig().DocType == RCashDocType::ReimbursementSlip  ||
               (_ledgerJournalTrans_RCash.orig().DocType == RCashDocType::Correction         &&
                _ledgerJournalTrans.orig().AmountCurDebit < 0))
            {
                journalTotalReimb -= _ledgerJournalTrans.orig().calcAmountMST();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementButton</Name>
				<Source><![CDATA[
    private boolean settlementButton(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (ledgerJournalTable.Posted)
            return false;

        if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Cust    &&
            _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Vend)
        {
            return false;
        }

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust    ||
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates settlement data for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <remarks>
    /// This method is used by the split payment feature.
    /// </remarks>
    void settleTransUpdate(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans       specTrans;
        CustVendTrans   custVendTrans;
        CompanyId       specCompany = _ledgerJournalTrans.company();
        str             reference;
        ;

        super(_ledgerJournalTrans);

        // Loop through all SpecTrans in the current spec set, convert amount to given currency & add to total
        while select crossCompany specTrans
            where specTrans.SpecCompany == specCompany &&
            specTrans.SpecTableId == _ledgerJournalTrans.TableId &&
            specTrans.SpecRecId == _ledgerJournalTrans.RecId
        {
            // Get the invoice for the marked transaction
            switch (specTrans.RefTableId)
            {
                case tablenum(CustTransOpen), tablenum(CustSettlement):
                    custVendTrans = specTrans.custTrans();
                    break;

                case tablenum(VendTransOpen), tablenum(VendSettlement):
                    custVendTrans = specTrans.vendTrans();
                    break;

                default:
                    Debug::assert(false);
                    break;
            }

            reference += custVendTrans.Invoice + ', ';
        }

        reference = substr(reference, 1, strlen(reference)-2); // Remove the last ', '
        _ledgerJournalTrans.PaymReference = reference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInternalContainers</Name>
				<Source><![CDATA[
    public void updateInternalContainers(LedgerJournalTrans       _ledgerJournalTrans,
                                         boolean                  _deleteTrans              = false,
                                         LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        super(_ledgerJournalTrans, _deleteTrans);

        if (! _deleteTrans)
        {
            if (_ledgerJournalTrans_RCash.DocType == RCashDocType::DisbursementSlip  ||
               (_ledgerJournalTrans_RCash.DocType == RCashDocType::Correction        &&
                _ledgerJournalTrans.AmountCurCredit < 0))
            {
                journalTotalDisb  -= _ledgerJournalTrans.calcAmountMST();
            }
            if (_ledgerJournalTrans_RCash.DocType == RCashDocType::ReimbursementSlip  ||
               (_ledgerJournalTrans_RCash.DocType == RCashDocType::Correction         &&
                _ledgerJournalTrans.AmountCurDebit < 0))
            {
                journalTotalReimb += _ledgerJournalTrans.calcAmountMST();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the internal caches for journal and voucher tables and refreshes the data source of the
    /// supplied <c>LedgerJournalTrans</c> record buffer.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> record buffer
    /// </param>
    /// <param name="_updateCashDisc">
    /// A Boolean flag that determines whether the cash discount of the journal line was manually entered;
    /// optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">A <c>LedgerJournalTrans_Asset</c> record buffer.</param>
    /// <param name="_ledgerJournalTrans_RDeferrals">
    /// A <c>LedgerJournalTrans_RDeferrals</c> record buffer.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// A <c>LedgerJournalTrans_RCash</c> record buffer.
    /// </param>
    /// <remarks>
    /// This method must be called from the <c>LedgerJournalTrans</c> data source of the journal form the
    /// <c>write</c> method after <c>super</c>.
    /// </remarks>
    public void write(
        LedgerJournalTrans            _ledgerJournalTrans,
        boolean                       _updateCashDisc                 = false,
        LedgerJournalTrans_Asset      _ledgerJournalTrans_Asset       = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals  = null,
        LedgerJournalTrans_RCash      _ledgerJournalTrans_RCash       = null)
    {
        #ISOCountryRegionCodes
        super(_ledgerJournalTrans, _updateCashDisc, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RDeferrals, _ledgerJournalTrans_RCash);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]) && _ledgerJournalTrans_RCash)
        {
            this.calcRoundOffAmount_HU(_ledgerJournalTrans, _ledgerJournalTrans_RCash);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyModifiedCashColl_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts retail cash collection in accordance with currency value.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <param name="_cashCollDeclarationJourTrans">
    /// The <c>RetailCashCollDeclarationJourTrans_RU</c> table record.
    /// </param>
    public void currencyModifiedCashColl_RU(LedgerJournalTrans _ledgerJournalTrans,
        RetailCashCollDeclarationJourTrans_RU _cashCollDeclarationJourTrans)
    {
        FormDataSource fds;

        if (LedgerJournalTrans_RCash::isCashCollAllowEdit_RU(_ledgerJournalTrans))
        {
            this.initCashCollTransferCurrency_RU(_ledgerJournalTrans);

            this.initCashCollPayeeBankAccount_RU(_ledgerJournalTrans);

            if (_cashCollDeclarationJourTrans)
            {
                RetailCashCollDeclarationCreate_RU::clearDeclaration(_ledgerJournalTrans.RecId);

                fds = FormDataUtil::getFormDataSource(_cashCollDeclarationJourTrans);

                if (fds)
                {
                    fds.executeQuery();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashColl_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes cash collection values.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The <c>LedgerJournalTrans_RCash</c> table record.
    /// </param>
    /// <param name="_cashCollDeclarationJourTrans">
    /// The <c>RetailCashCollDeclarationJourTrans_RU</c> table record.
    /// </param>
    public void initCashColl_RU(LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash,
        RetailCashCollDeclarationJourTrans_RU _cashCollDeclarationJourTrans)
    {
        FormDataSource fds;

        if (LedgerJournalTrans_RCash::isCashCollAllowEdit_RU(_ledgerJournalTrans))
        {
            this.initCashCollStore_RU(_ledgerJournalTrans, _ledgerJournalTrans_RCash);

            this.initCashCollTransferCurrency_RU(_ledgerJournalTrans);

            this.initCashCollBankContributor_RU(_ledgerJournalTrans, _ledgerJournalTrans_RCash);

            this.initCashCollPayeeBankAccount_RU(_ledgerJournalTrans);

            this.initCashCollOffsetPostingProfile_RU(_ledgerJournalTrans);

            this.initCashCollDeclarant_RU(_ledgerJournalTrans);
        }
        else
        {
            this.setCashCollDefaultValues_RU(_ledgerJournalTrans, _ledgerJournalTrans_RCash);

            if (_cashCollDeclarationJourTrans)
            {
                RetailCashCollDeclarationCreate_RU::clearDeclaration(_ledgerJournalTrans_RCash.RefRecId);

                fds = FormDataUtil::getFormDataSource(_cashCollDeclarationJourTrans);

                if (fds)
                {
                    fds.executeQuery();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashCollBankContributor_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes bank contributor.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The <c>LedgerJournalTrans_RCash</c> table record.
    /// </param>
    private void initCashCollBankContributor_RU(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_RCash _ledgerJournalTrans_RCash)
    {
        BankGroup bankGroup;

        if (_ledgerJournalTrans.parmOffsetAccount())
        {
            select firstonly BankGroupId from bankGroup
                where bankGroup.VendAccountNum_RU == _ledgerJournalTrans.parmOffsetAccount();

            _ledgerJournalTrans_RCash.CashCollBankContributor_RU = bankGroup.BankGroupId;
        }
        else
        {
            _ledgerJournalTrans_RCash.CashCollBankContributor_RU = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashCollDeclarant_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes declarant of cash collection.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    private void initCashCollDeclarant_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.BankRespWorkerId_RU = HcmWorker::userId2Worker(curUserId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashCollOffsetPostingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes offset posting profile.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    private void initCashCollOffsetPostingProfile_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankTransType bankTransType = BankTransType::find(_ledgerJournalTrans.BankTransType);

        if (bankTransType.PostingProfile_RU)
        {
            _ledgerJournalTrans.OffsetPostingProfile_RU = bankTransType.PostingProfile_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashCollPayeeBankAccount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes payee bank account.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    private void initCashCollPayeeBankAccount_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.BankSpecAccountId_RU = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashCollStore_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes store for cash collection.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The <c>LedgerJournalTrans_RCash</c> table record.
    /// </param>
    private void initCashCollStore_RU(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_RCash _ledgerJournalTrans_RCash)
    {
        RetailStoreId       storeId;
        AccountNum          cashAccount;

        if (_ledgerJournalTrans.LedgerDimension != 0)
        {
            cashAccount = _ledgerJournalTrans.parmAccount();

            if ((select count(RecId) from RetailStoreTable
                    where RetailStoreTable.CashOffice_RU == cashAccount).RecId == 1)
            {
                storeId = (select firstonly StoreNumber from RetailStoreTable
                            where RetailStoreTable.CashOffice_RU == cashAccount).StoreNumber;
            }
        }

        _ledgerJournalTrans_RCash.CashCollStoreId_RU = storeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashCollTransferCurrency_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes transfer currency.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    private void initCashCollTransferCurrency_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.TransferCurrency_RU = _ledgerJournalTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountModifiedCashColl_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts retail cash collection in accordance with offset account value.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The <c>LedgerJournalTrans_RCash</c> table record.
    /// </param>
    public void offsetAccountModifiedCashColl_RU(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_RCash _ledgerJournalTrans_RCash)
    {
        if (LedgerJournalTrans_RCash::isCashCollAllowEdit_RU(_ledgerJournalTrans))
        {
            this.initCashCollPayeeBankAccount_RU(_ledgerJournalTrans);

            this.initCashCollBankContributor_RU(_ledgerJournalTrans, _ledgerJournalTrans_RCash);

            this.initCashCollOffsetPostingProfile_RU(_ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountNumLookUp</Name>
				<Source><![CDATA[
    public boolean offsetAccountNumLookUp(
        FormControl           _formControl,
        LedgerJournalTrans    _ledgerJournalTrans,
        LedgerJournalACType   _accountType = _ledgerJournalTrans.AccountType,
        LedgerJournalAC       _accountNum  = _ledgerJournalTrans.parmAccount())
    {
        boolean accountNumLookedUp;

        if (isCashCollEnabled && LedgerJournalTrans_RCash::isCashCollAllowEdit_RU(_ledgerJournalTrans))
        {
            VendTable::lookupAccountNumCurrencyDeal_RU(_formControl,
                                                       _ledgerJournalTrans.amount(),
                                                       _accountType,
                                                       _accountNum,
                                                       BankAdvancedTransType_RU::CashCollection);

            accountNumLookedUp = true;
        }
        else
        {
            accountNumLookedUp = super(_formControl,
                                       _ledgerJournalTrans,
                                       _accountType);
        }

        return accountNumLookedUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneTimeAccount</Name>
				<Source><![CDATA[
    private CustAccount createOneTimeAccount(Common _common)
    {
        // Can one time customer be created?
        if (!CustTable::createOneTimeAccountValidate())
        {
            return '';
        }

        ttsbegin;

        // Create one time account num
        NumberSeq numberSeq = NumberSeq::newGetNum(CustParameters::numRefOneTimeCustomerAccount());

        NumberSequenceTable numberSequenceTable = CustParameters::numRefOneTimeCustomerAccount().numberSequenceTable();

        if (numberSequenceTable.Manual == NoYes::Yes)
        {
            throw Error("@AccountsReceivable:ValidateNumberSequenceOfOneTimeCustomer");
        }

        // Load default customer, set new party, accountnum
        CustTable custTableLocal = CustTable::find(CustParameters::find().DefaultCust);
        custTableLocal.AccountNum = numberSeq.num();
        custTableLocal.Party = 0;
 
        CustomerEntity customerEntity = DirParty::constructFromCommon(
            custTableLocal,
            DateTimeUtil::getSystemDateTime(),
            DirAppParameters::defaultPartyType(tableNum(CustTable)) == DirPartyBaseType::Person ? DirPartyType::Person : DirPartyType::Organization,
            true,
            false);

        if (_common.TableId == tableNum(CustTable))
        {
            customerEntity.parmName(DirPartyTable::getName(_common.(fieldNum(CustTable, Party))));
            custTableLocal.OneTimeCustomer = true;
        }
        else
        {
            throw error(strFmt("@SYS18917", tableId2name(_common.TableId)));
        }

        customerEntity.insert();

        ttscommit;

        return custTableLocal.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashCollDefaultValues_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values for all fields related to cash collection.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The <c>LedgerJournalTrans_RCash</c> table record.
    /// </param>
    private void setCashCollDefaultValues_RU(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_RCash _ledgerJournalTrans_RCash)
    {
        _ledgerJournalTrans.BankSpecAccountId_RU                 = "";
        _ledgerJournalTrans.TransferCurrency_RU                  = "";
        _ledgerJournalTrans.BankRespWorkerId_RU                  = 0;

        _ledgerJournalTrans_RCash.CashCollBagNum_RU              = "";
        _ledgerJournalTrans_RCash.CashCollStoreId_RU             = "";
        _ledgerJournalTrans_RCash.CashCollDebitAccountNum_RU     = "";
        _ledgerJournalTrans_RCash.CashCollCreditAccountNum_RU    = "";
        _ledgerJournalTrans_RCash.CashCollBankContributor_RU     = "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>