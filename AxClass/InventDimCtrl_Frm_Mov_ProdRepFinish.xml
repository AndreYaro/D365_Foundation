<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Mov_ProdRepFinish</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm_Mov_ProdRepFinish extends InventDimCtrl_Frm_Mov
{
    boolean allowEditConsistentDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the correct dimension fields are enabled after the active record in the form has
    /// changed.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    /// An <c>InventDimGroupSetup</c> object that provides information about the dimension setup.
    /// </param>
    /// <param name="_movement">
    /// The movement associated with the dimension.
    /// </param>
    public void formActiveSetup(
        InventDimGroupSetup     _inventDimGroupSetup    = null,
        InventMovement          _movement               = null)
    {
        ProdJournalProd         prodJournalProd = _movement.buffer() as ProdJournalProd;

        allowEditConsistentDim = prodJournalProd.RecId == 0;
        super(_inventDimGroupSetup, _movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
        protected NoYes mustEnableField(fieldId  _dimFieldId)
    {
        boolean                     enable  = super(_dimFieldId);

        if (enable)
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = this.getFieldSetup(_dimFieldId);

            if (!inventDimGroupFieldSetup && movement.buffer().RecId)
            {
                enable = NoYes::No;
            }
            else
            if (inventDimGroupFieldSetup.isConsistent()
                && (!allowEditConsistentDim || movement.buffer().RecId)
            )
            {
                enable = NoYes::No;
            }
        }

        return enable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_Mov_ProdRepFinish construct()
    {
        return new InventDimCtrl_Frm_Mov_ProdRepFinish();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class to be used in Forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The Form where controls are maintained.
    /// </param>
    /// <param name="_movement">
    ///    An instance of the movement for which the class is used.
    /// </param>
    /// <param name="_validDataSources">
    ///    The set containing names of the data sources controlled by the created instance; optional.
    /// </param>
    /// <returns>
    ///    An instance of this class to be used in a Form
    /// </returns>
    public static InventDimCtrl_Frm_Mov_ProdRepFinish newFromFormMovement(
        FormRun         _formRun,
        InventMovement  _movement,
        Set             _validDataSources = null)
    {
        InventDimCtrl_Frm_Mov_ProdRepFinish inventDimCtrl = InventDimCtrl_Frm_Mov_ProdRepFinish::construct();
        InventDimAxFormAdapter              adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMovement(_movement);
        inventDimCtrl.parmValidDataSources(_validDataSources);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
