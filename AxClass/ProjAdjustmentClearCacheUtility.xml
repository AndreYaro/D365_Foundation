<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustmentClearCacheUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Utility class for clearing project adjustments cache records.
/// </summary>
public class ProjAdjustmentClearCacheUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProjAdjustmentInProcess projAdjustment;
        ProjAdjustmentCostInProcess projAdjustmentCost;
        ProjAdjustmentSaleInProcess projAdjustmentSale;
        ProjAdjustmentCreateInProcess projAdjustmentCreate;
        ProjAdjustmentCreateCostInProcess projAdjustmentCreateCost;
        ProjAdjustmentCreateSaleInProcess projAdjustmentCreateSale;

        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(formStr(ProjAdjustment));
        logger.logInformation(ProjOpsFinancialsInstrumentationActivites::ActionClearingAdjustmentCache);
      
        using (var activityContext = logger.projOpsFinActivity().projDeleteFundingLimitTrackingContext())
        {
            ttsbegin;
            
            delete_from projAdjustment;
            delete_from projAdjustmentCost;
            delete_from projAdjustmentSale;

            if (ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
            {
                ProjFundingLimitTracking projFundingLimitTracking;
                delete_from projFundingLimitTracking
                    exists join projAdjustmentCreate
                        where projFundingLimitTracking.TransId == projAdjustmentCreate.TmpTransId
                            && projAdjustmentCreate.TmpTransId != '';
            
                select firstOnly projAdjustmentCreate
                    where projAdjustmentCreate.TmpTransId == '';
                if (projAdjustmentCreate)
                {
                    str callStack = ProjOpsInstrumentationLogger::getCallStack(xSession::xppCallStack());

                    logger.logInformation(strFmt("Callstack: %1, ProjId: %2, AdjRefTransId: %3", callStack, projAdjustmentCreate.ProjId, projAdjustmentCreate.ProjAdjustRefId));
                }
		    }
            delete_from projAdjustmentCreate;
            delete_from projAdjustmentCreateCost;
            delete_from projAdjustmentCreateSale;

            ttscommit;
        }

        info("@ProjAdjustment:ProjAdjCacheCleared");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>