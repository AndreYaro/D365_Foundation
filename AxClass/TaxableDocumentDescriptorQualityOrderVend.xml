<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorQualityOrderVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the tax document bundler for normal Quality order - vendor invoice.
/// </summary>
[TaxableDocumentDescriptorAttribute('Quality order - vendor invoice', 'QualityOrderVend')]
public class TaxableDocumentDescriptorQualityOrderVend extends TaxableDocumentDescriptorBase
    implements TaxableDocumentTypeDefinitionQualityOrderVend
{
    InventQualityOrderTable inventQualityOrderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocQualityOrderDPVend(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default distribution side for the transaction.
    /// </summary>
    /// <returns>The default distribution side for the transaction.</returns>
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        return TaxAccountingPostingProfileDistributionSide::Debit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    public ClassName getSourceTaxableDocumentType()
    {
        return classStr(TaxableDocumentTypeDefinitionQualityOrderVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxableDocumentRootRecord</Name>
				<Source><![CDATA[
    protected void setTaxableDocumentRootRecord(Common _rootRecord)
    {
        if (_rootRecord is TaxEngineQualityOrderTableHeader)
        {
            rootTable = _rootRecord as TaxEngineQualityOrderTableHeader;
            TaxEngineQualityOrderTableHeader taxEngineQualityOrderTableHeader = rootTable;
            inventQualityOrderTable = inventQualityOrderTable::find(taxEngineQualityOrderTableHeader.QualityOrderId);
        }
        else
        {
            inventQualityOrderTable = _rootRecord;
            rootTable = taxEngineQualityOrderTableHeader::findOrCreateByQualityOrderId(inventQualityOrderTable.QualityOrderId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init skipTaxDocument attribute
    /// </summary>
    protected void initSkipTaxDocument()
    {
        super();

        if (inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch)
        {
            PurchParmLine purchParmLine;
            
            if (PurchMultithreadedPurchConfirmationFlight::instance().isEnabled())
            {
                purchParmLine = PurchParmLine::findPurchParmLineForQualityOrder(inventQualityOrderTable);
            }
            else
            {
                select firstOnly purchParmLine
                    where purchParmLine.InventTransId == inventQualityOrderTable.InventRefTransId
                        && purchParmLine.OrigPurchId  == inventQualityOrderTable.InventRefId;
            }

            TaxableDocumentDescriptor referenceDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchParmLine.purchParmTable());
            skipTaxDocument = referenceDescriptor.skipTaxDocument();
        }
        else
        {
            skipTaxDocument = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>True if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>