<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppStepInfoBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppStepInfoBuilder</c> class builds step information (icon, title and extra information) for each warehouse mobile app flow step.
/// </summary>
public class WHSMobileAppStepInfoBuilder
{
    #WHSRF

    protected WhsrfPassthrough pass;
    protected WHSMenuItemName menuItemName;
    protected WHSMobileAppPagePattern pagePattern;
    protected WHSMobileAppStepId stepId;
    protected List controlsList;
    protected List primaryInputControlsList;
    private WHSInstrumentationLogger instrumentationLogger;

    protected WHSRFPassthrough formContainerPass;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void init(WhsrfPassthrough _pass, List _controlsList, WHSMobileAppPagePattern _pagePattern)
    {
        pass = _pass;
        controlsList = _controlsList;
        pagePattern = _pagePattern;
        primaryInputControlsList = this.allPrimaryInputControls(controlsList);
        menuItemName = WHSRFMenuItemTable::find(_pass.lookupStr(#MenuItem)).MenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppStepInfo build()
    {
        this.buildStepId();
        if (!stepId)
        {
            return null;
        }

        WHSMobileAppStepInfo stepInfo = this.stepInfo();
        
        if (stepInfo)
        {
            stepInfo.parmExtraInfo(this.extraInfo());
        }
        else
        {
            // step info is missing, write log
            this.instrumentationLogger().mobileAppStepInfoBuilderActivities().foundStepIdWithoutStepInfo(stepId, WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(menuItemName)));
        }

        return stepInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStepId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppStepId buildStepId()
    {
        stepId = this.stepId();
        return stepId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormContainerPass</Name>
				<Source><![CDATA[
    internal WhsrfPassthrough parmFormContainerPass(WhsrfPassthrough _formContainerPass = formContainerPass)
    {
        formContainerPass = _formContainerPass;
        return formContainerPass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stepId</Name>
				<Source><![CDATA[
    protected WHSMobileAppStepId stepId()
    {
        WHSMobileAppStepId mobileAppStepId;

        if (primaryInputControlsList.elements() == 1)
        {
            ListEnumerator le = primaryInputControlsList.getEnumerator();
            le.moveNext();
            Map controlMap = le.current();

            mobileAppStepId = controlMap.lookup(#XMLControlName);
        }
        else
        {
            mobileAppStepId = this.primaryInputControlName();
        }

        if (!mobileAppStepId && (primaryInputControlsList.elements() == 0 || primaryInputControlsList.elements() > 1))
        {
            mobileAppStepId = WHSMobileAppStepIds::Confirmation;
        }

        return mobileAppStepId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stepInfo</Name>
				<Source><![CDATA[
    protected WHSMobileAppStepInfo stepInfo()
    {
        WHSMobileAppStepInputPolicy stepInputPolicy = this.stepInputPolicy();
        return this.buildStepInfoFromDB(stepInputPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStepInfoFromDB</Name>
				<Source><![CDATA[
    private WHSMobileAppStepInfo buildStepInfoFromDB(WHSMobileAppStepInputPolicy _stepInputPolicy)
    {
        WHSMobileAppStepInfo stepInfo;
        boolean iconFound;
        boolean titleFound;
        boolean instructionFound = this.shouldHideStepInstruction(menuItemName, pass.lookupStr(#UserId));
        str text;
        WHSMobileAppFlowStep flowStep = WHSMobileAppFlowStep::find(menuItemName, stepId);
        if (flowStep)
        {
            stepInfo = WHSMobileAppStepInfo::construct();
            stepInfo.parmStepId(stepId);
            stepInfo.parmStepIcon(flowStep.StepIcon);
            iconFound = true;

            [titleFound, text] = this.getStepTitle(flowStep.RecId, _stepInputPolicy);
            if (titleFound)
            {
                stepInfo.parmStepTitle(text);
            }

            if (!instructionFound)
            {
                [instructionFound, text] = this.getStepInstruction(flowStep.RecId, _stepInputPolicy);
                if (instructionFound)
                {
                    stepInfo.parmStepInstruction(text);
                }
            }
            boolean promotedFieldFound;
            str highlightedFields;
            [promotedFieldFound, text, highlightedFields] = this.getStepPromotedFields(flowStep);
            if (promotedFieldFound)
            {
                stepInfo.parmPromotedFields(text);
                stepInfo.parmHighlightedFields(highlightedFields);
            }
        }

        if (!iconFound || !titleFound || !instructionFound)
        {
            flowStep = WHSMobileAppFlowStep::find('', stepId);
            if (!iconFound)
            {
                stepInfo = WHSMobileAppStepInfo::construct();
                stepInfo.parmStepId(stepId);
                stepInfo.parmStepIcon(flowStep.StepIcon);
                iconFound = true;
            }

            if (!titleFound)
            {
                [titleFound, text] = this.getStepTitle(flowStep.RecId, _stepInputPolicy);
                if (titleFound)
                {
                    stepInfo.parmStepTitle(text);
                }
            }

            if (!instructionFound)
            {
                [instructionFound, text] = this.getStepInstruction(flowStep.RecId, _stepInputPolicy);
                if (instructionFound)
                {
                    stepInfo.parmStepInstruction(text);
                }
            }
        }

        if (!titleFound || !instructionFound)
        {
            WHSMobileAppStepIdAttribute attribute = new WHSMobileAppStepIdAttribute(stepId);
            SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(_stepInputPolicy);
            WHSMobileAppStep step = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(WHSMobileAppStep), attribute, instantiation);

            if (step)
            {
                if (!titleFound)
                {
                    stepInfo.parmStepTitle(step.parmDefaultStepTitle());
                }
            }
        }

        if (stepId == WHSMobileAppStepIds::Field)
        {
            if (pass.exists(#AuditTemplateId) && pass.exists(#AuditSeqNum))
            {
                stepInfo.parmStepTitle(this.controlLabel(#Field));
            }
        }

        return stepInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStepPromotedFields</Name>
				<Source><![CDATA[
    private container getStepPromotedFields(WHSMobileAppFlowStep _flowStep)
    {
        str promotedFields;
        str highlightedFields;

        WHSMobileAppFlowStepPromotedFieldSetup promotedFieldSetup;
        while select promotedFieldSetup
            order by promotedFieldSetup.SeqNum asc
            where promotedFieldSetup.MobileAppFlowStep == _flowStep.RecId
        {
            if (promotedFields)
            {
                promotedFields += #ListSeparator;
            }
            
            var field = int2Str(promotedFieldSetup.Field);
            promotedFields += field;

            if (promotedFieldSetup.Highlighted)
            {
                if (highlightedFields)
                {
                    highlightedFields += #ListSeparator;
                }

                highlightedFields += field;
            }
        }

        return [promotedFields != '', promotedFields, highlightedFields];
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStepTitle</Name>
				<Source><![CDATA[
    internal container getStepTitle(RecId _flowStepRecId, WHSMobileAppStepInputPolicy _inputPolicy)
    {
        WHSMobileAppTextType textType = this.isConfirmationStep(_inputPolicy) ? WHSMobileAppTextType::StepConfirmTitle : WHSMobileAppTextType::StepEnterValueTitle;
        return this.getMobileAppText(_flowStepRecId, textType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStepInstruction</Name>
				<Source><![CDATA[
    private container getStepInstruction(RecId _flowStepRecId, WHSMobileAppStepInputPolicy _inputPolicy)
    {
        WHSMobileAppTextType textType = this.isConfirmationStep(_inputPolicy) ? WHSMobileAppTextType::StepConfirmInstruction : WHSMobileAppTextType::StepEnterValueInstruction;
        return this.getMobileAppText(_flowStepRecId, textType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMobileAppText</Name>
				<Source><![CDATA[
    private container getMobileAppText(RecId _flowStepRecId, WHSMobileAppTextType _textType)
    {
        WHSMobileAppText mobileAppText = WHSMobileAppText::find(_flowStepRecId, _textType);
        if (mobileAppText)
        {
            return [true, mobileAppText.Text];
        }

        return [false, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfirmationStep</Name>
				<Source><![CDATA[
    private boolean isConfirmationStep(WHSMobileAppStepInputPolicy _stepInputPolicy)
    {
        return _stepInputPolicy == WHSMobileAppStepInputPolicy::InputFilled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldHideStepInstruction</Name>
				<Source><![CDATA[
    private boolean shouldHideStepInstruction(WHSMenuItemName _menuItemName, WHSUserId _userId)
    {
        return WHSMobileAppDontShowAgainTable::exist(_userId, WHSMobileAppDontShowAgainCategory::StepInstruction, _menuItemName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraInfo</Name>
				<Source><![CDATA[
    protected Map extraInfo()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stepInputPolicy</Name>
				<Source><![CDATA[
    private WHSMobileAppStepInputPolicy stepInputPolicy()
    {
        WHSMobileAppStepInputPolicy stepInputPolicy;

        if (primaryInputControlsList.elements() == 0)
        {
            return stepInputPolicy;
        }
        else if (primaryInputControlsList.elements() == 1)
        {
            ListEnumerator le = primaryInputControlsList.getEnumerator();
            le.moveNext();
            Map controlMap = le.current();

            if (this.isControlDataFilled(controlMap))
            {
                stepInputPolicy = WHSMobileAppStepInputPolicy::InputFilled;
            }
            else
            {
                stepInputPolicy = WHSMobileAppStepInputPolicy::InputNotFilled;
            }
        }
        else
        {
            if (this.hasOtherControlsNotFilled(primaryInputControlsList))
            {
                stepInputPolicy = WHSMobileAppStepInputPolicy::InputWithNotFilledAssociated;
            }
            else
            {
                stepInputPolicy = WHSMobileAppStepInputPolicy::InputWithFilledAssociated;
            }
        }

        return stepInputPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOtherControlsNotFilled</Name>
				<Source><![CDATA[
    private boolean hasOtherControlsNotFilled(List _inputControlsList)
    {
        int ret;

        ListEnumerator le = _inputControlsList.getEnumerator();

        while (le.moveNext())
        {
            Map controlMap = le.current();

            if (!this.isControlDataFilled(controlMap))
            {
                ret += 1;
            }

            if (ret > 1)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlLabel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str controlLabel(str _controlName)
    {
        str label;
        ListEnumerator le = controlsList.getEnumerator();
        
        while (le.moveNext())
        {
            Map controlMap = le.current();

            if (controlMap.lookup(#XMLControlName) == _controlName)
            {
                return controlMap.lookup(#XMLControlLabel);
            }
        }

        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryInputControlName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSMobileAppControlName primaryInputControlName()
    {
        ListEnumerator le = primaryInputControlsList.getEnumerator();
        
        while (le.moveNext())
        {
            Map controlMap = le.current();

            if (this.isNotFilledPrimaryInputControl(controlMap))
            {
                return controlMap.lookup(#XMLControlName);
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotFilledPrimaryInputControl</Name>
				<Source><![CDATA[
    private boolean isNotFilledPrimaryInputControl(Map _controlMap)
    {
        return !this.isControlDataFilled(_controlMap) && this.isPrimaryInputControl(_controlMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isControlDataFilled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isControlDataFilled(Map _controlMap)
    {
        str controlType = _controlMap.lookup(#XMLControlCtrlType);
        str controlData = _controlMap.lookup(#XMLControlData);

        if (WHSMobileAppStepProductConfirmationV3Flight::instance().isEnabled())
        {
            return ((controlType == #RFText || controlType == #RFPassword) && (controlData || _controlMap.lookup(#XMLControlInstructionControl)))
                || (controlType == #RFCombobox && _controlMap.lookup(#XMLControlSelected));
        }
        else
        {
            return ((controlType == #RFText || controlType == #RFPassword) && controlData)
                || (controlType == #RFCombobox && _controlMap.lookup(#XMLControlSelected));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allPrimaryInputControls</Name>
				<Source><![CDATA[
    private List allPrimaryInputControls(List _controlsList)
    {
        List primaryControls = new List(Types::AnyType);
        ListEnumerator le = _controlsList.getEnumerator();
        
        while (le.moveNext())
        {
            Map controlMap = le.current();

            if (this.isPrimaryInputControl(controlMap))
            {
                primaryControls.addEnd(controlMap);
            }
        }

        return primaryControls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimaryInputControl</Name>
				<Source><![CDATA[
    private boolean isPrimaryInputControl(Map _controlMap)
    {
        return _controlMap.lookup(#XMLControlDisplayArea) == WHSMobileAppXMLDisplayArea::PrimaryInputArea
            && _controlMap.lookup(#XMLControlEnabled) == '1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasControl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean hasControl(List _controlsList, WHSMobileAppControlName _controlName)
    {
        boolean ret;

        ListEnumerator le = _controlsList.getEnumerator();

        while (le.moveNext())
        {
            Map controlMap = le.current();

            if (controlMap.lookup(#XMLControlName) == _controlName)
            {
                return true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEditableControl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean hasEditableControl(List _controlsList, WHSMobileAppControlName _controlName)
    {
        boolean ret;

        ListEnumerator le = _controlsList.getEnumerator();

        while (le.moveNext())
        {
            Map controlMap = le.current();

            if (controlMap.lookup(#XMLControlName) == _controlName
                && controlMap.lookup(#XMLControlEnabled) == '1')
            {
                return true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>