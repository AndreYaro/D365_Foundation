<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLicensePlateLabelBuildConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLicensePlateLabelBuildConfiguration</c> class contains functions that are used to configure
/// work template to build license plate label
/// </summary>
internal class WhsLicensePlateLabelBuildConfiguration
{    
    internal static const str FieldGroupToAddress             = tableFieldgroupStr(WHSLicensePlateLabel, ToGroup);
    internal static const str FieldGroupShipmentToAddress     = tableFieldgroupStr(WHSLicensePlateLabel, ShipmentToGroup);
    internal static const str FieldGroupFromAddress           = tableFieldgroupStr(WHSLicensePlateLabel, FromGroup);
    internal static const str FieldGroupProductDimensions     = tableFieldgroupStr(InventDim, ProductDimensions);
    internal static const str FieldGroupTrackingDimensions    = tableFieldgroupStr(InventDim, TrackingDimensions);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getListOfFieldsToHideFromUI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get list of all fields to hide for form.
    /// </summary>
    /// <returns>List of all fields.</returns>
    [Hookable(false)]
    internal static container getListOfFieldsToHideFromUI()
    {
        List result = new List(Types::String);
        container ret ;
        DictFieldGroup dictFieldGroup = new DictFieldGroup(tableNum(WHSLicensePlateLabel), tableFieldgroupStr(WHSLicensePlateLabel, SkipFieldsForLabel));
        if (dictFieldGroup)
        {
            int fieldCnt = dictFieldGroup.numberOfFields();
            for (int i = 1; i <= fieldCnt; i++)
            {
                DictField dictField = new DictField(tableNum(WHSLicensePlateLabel), dictFieldGroup.field(i));
                ret += [dictField.name()];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSkipListFull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get list of skip fields.
    /// </summary>
    /// <returns>List of skip fields.</returns>
    [Hookable(false)]
    internal static Map getSkipListFull()
    {
        Map skipListFull = new Map(Types::String, Types::Container);

        container listOfFieldsToHideFromUI = WhsLicensePlateLabelBuildConfiguration::getListOfFieldsToHideFromUI();
        SysDictTable dictTableLicensePlateLabel = SysDictTable::newName(tableStr(WHSLicensePlateLabel));
        Set setLicensePlateLabelFields = dictTableLicensePlateLabel.fields();

        SetEnumerator se = setLicensePlateLabelFields.getEnumerator();
        while (se.moveNext())
        {
            SysDictField df = se.current();

            if (!df.isSystem()
                && !df.mandatory()
                && !(conFind(listOfFieldsToHideFromUI, df.name()) > 0))
            {
                skipListFull.insert(df.name(), [df.name()]);
            }
        }

        // Add field groups
        skipListFull.insert(WhsLicensePlateLabelBuildConfiguration::FieldGroupToAddress,
            [fieldStr(WHSLicensePlateLabel, AddressCityTo),
             fieldStr(WHSLicensePlateLabel, AddressStateIdTo),
             fieldStr(WHSLicensePlateLabel, AddressStreetTo),
             fieldStr(WHSLicensePlateLabel, AddressZipCodeIdTo)]);

        skipListFull.insert(WhsLicensePlateLabelBuildConfiguration::FieldGroupShipmentToAddress,
            [fieldStr(WHSLicensePlateLabel, ShipmentAddressCityTo),
             fieldStr(WHSLicensePlateLabel, ShipmentAddressStateIdTo),
             fieldStr(WHSLicensePlateLabel, ShipmentAddressStreetTo),
             fieldStr(WHSLicensePlateLabel, ShipmentAddressZipCodeIdTo)]);

        skipListFull.insert(WhsLicensePlateLabelBuildConfiguration::FieldGroupFromAddress, 
            [fieldStr(WHSLicensePlateLabel, AddressCityFrom), 
             fieldStr(WHSLicensePlateLabel, AddressStateIdFrom),
             fieldStr(WHSLicensePlateLabel, AddressStreetFrom), 
             fieldStr(WHSLicensePlateLabel, AddressZipCodeIdFrom)]);

        skipListFull.insert(WhsLicensePlateLabelBuildConfiguration::FieldGroupTrackingDimensions,
            [fieldStr(WHSLicensePlateLabel, InventBatchId),
             fieldStr(WHSLicensePlateLabel, InventSerialId),
             fieldStr(WHSLicensePlateLabel, InventProfileId_RU),
             fieldStr(WHSLicensePlateLabel, InventOwnerId_RU),
             fieldStr(WHSLicensePlateLabel, InventGtdId_RU)]);
     
        skipListFull.insert(WhsLicensePlateLabelBuildConfiguration::FieldGroupProductDimensions, 
            [fieldStr(WHSLicensePlateLabel, ConfigId), 
             fieldStr(WHSLicensePlateLabel, InventSizeId),
             fieldStr(WHSLicensePlateLabel, InventColorId), 
             fieldStr(WHSLicensePlateLabel, InventStyleId),
             fieldStr(WHSLicensePlateLabel, InventVersionId)]);
          
        return skipListFull;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>