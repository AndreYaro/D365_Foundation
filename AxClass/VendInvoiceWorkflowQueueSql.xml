<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflowQueueSql</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>VendInvoiceWorkflowQueueSql</c> class implements a SQL based queuing strategy for batch posting of invoices.
/// </summary>
[ExportMetadata(classStr(VendInvoiceIQueue), VendInvoiceQueueType::SQL)]
[Export("Dynamics.AX.Application.VendInvoiceIQueue")]
internal final class VendInvoiceWorkflowQueueSql implements VendInvoiceIQueue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enqueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts the workflow details from the given <c>VendInvoiceWorkflowAutomatedTaskDataContract</c> and inserts the data into the SQL-based queue.
    /// </summary>
    /// <param name = "_invoiceContract">The <c>VendInvoiceWorkflowAutomatedTaskDataContract</c> object that contains the workflow details.</param>
    /// <returns>true if the insert was successful; otherwise, false.</returns>
    public boolean enqueue(Object _invoiceContract)
    {
        boolean isEnqueueSuccessful;

        try
        {
            VendInvoiceWorkflowAutomatedTaskDataContract vendInvoiceWorkflowAutomatedTaskDataContract = _invoiceContract as VendInvoiceWorkflowAutomatedTaskDataContract;
            VendInvoiceWorkflowBatchJob vendInvoiceWorkflowBatchJob = VendInvoiceWorkflowBatchJob::insertFromDataContract(vendInvoiceWorkflowAutomatedTaskDataContract);

            if (vendInvoiceWorkflowBatchJob)
            {
                VendInvoiceWorkflowBatchJobStatus vendInvoiceWorkflowBatchJobStatus;
                vendInvoiceWorkflowBatchJobStatus.InvoiceRecId = vendInvoiceWorkflowBatchJob.InvoiceRecId;
                vendInvoiceWorkflowBatchJobStatus.Company = vendInvoiceWorkflowBatchJob.Company;
                vendInvoiceWorkflowBatchJobStatus.InvoiceWorkflowStatus = VendInvoicePostWorkflowStatus::NotRun;
                vendInvoiceWorkflowBatchJobStatus.insert();
                isEnqueueSuccessful = true;
            }
        }
        catch
        {
        }

        return isEnqueueSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dequeue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the records in the queue corresponding to the given <c>VendInvoiceWorkflowAutomatedTaskDataContract</c>.
    /// </summary>
    /// <param name = "_invoiceContract">The <c>VendInvoiceWorkflowAutomatedTaskDataContract</c> containing the workflow details.</param>
    /// <returns>true if the delete was successful; otherwise, false.</returns>
    public boolean dequeue(Object _invoiceContract)
    {
        boolean isDequeueSuccessful;

        try
        {
            VendInvoiceWorkflowAutomatedTaskDataContract vendInvoiceWorkflowAutomatedTaskDataContract = _invoiceContract as VendInvoiceWorkflowAutomatedTaskDataContract;
            VendInvoiceWorkflowBatchJob vendInvoiceWorkflowBatchJob;
            VendInvoiceWorkflowBatchJobStatus vendInvoiceWorkflowBatchJobStatus;

            ttsbegin;

            delete_from vendInvoiceWorkflowBatchJob
                where vendInvoiceWorkflowBatchJob.InvoiceRecId == vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowContextRecId();

            delete_from vendInvoiceWorkflowBatchJobStatus
                where vendInvoiceWorkflowBatchJobStatus.InvoiceRecId == vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowContextRecId();

            isDequeueSuccessful = true;

            ttscommit;
        }
        catch
        {
            if (xSession::currentRetryCount() <= VendInvoicePostTaskConstants::MaxRetryAttemptsOnException)
            {
                retry;
            }
        }

        return isDequeueSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>peek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of elements from the queue.
    /// </summary>
    /// <returns>A list of elements.</returns>
    /// <remarks>
    ///     1. Resets the status of the invoices that have remained in the <c>VendInvoicePostWorkflowStatus::Scheduled</c>
    ///         state for longer than <c>MaxWaitTimeForInvoiceScheduledStatus_Hours</c>
    ///     2. Prepares a list of invoices as follows:
    ///         a. Retrieves invoices that have only the <c>VendInvoicePostWorkflowStatus::NotRun</c> status in the <c>VendInvoiceWorkflowBatchJobStatus</c>
    ///         b. Sorts the selected invoices in the ascending order of the company, vendor and invoice identifier
    ///         c. Selects the top <c>VendParameters::maxInvoicesPerBatch()</c>
    ///         d. Sets the status of all the selected invoices to <c>VendInvoicePostWorkflowStatus::Scheduled</c>
    /// </remarks>
    public List peek()
    {
        this.resetScheduledInvoice();

        VendInvoiceWorkflowAutomatedTaskDataContractCollection vendInvoiceWorkflowAutomatedTaskDataContractCollection = new VendInvoiceWorkflowAutomatedTaskDataContractCollection();
        VendInvoiceWorkflowBatchJobStatus vendInvoiceWorkflowBatchJobStatus;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(VendInvoiceWorkflowBatchJobStatus));
        int numberOfInvoicesToPeek = VendParameters::maxInvoicesPerBatch();

        try
        {
            ttsbegin;

            QueryRun queryRun = new QueryRun(this.getInvoiceScheduleQuery());

            // Run the query cross-company since the Process Automation process runs only in DAT.
            queryRun.allowCrossCompany(true);

            while(queryRun.next())
            {
                VendInvoiceWorkflowBatchJob vendInvoiceWorkflowBatchJob = queryRun.get(tableNum(VendInvoiceWorkflowBatchJob));
                VendInvoiceWorkflowAutomatedTaskDataContract vendInvoiceWorkflowAutomatedTaskDataContract = vendInvoiceWorkflowBatchJob.getContract();
                vendInvoiceWorkflowAutomatedTaskDataContractCollection.add(vendInvoiceWorkflowAutomatedTaskDataContract);

                vendInvoiceWorkflowBatchJobStatus.InvoiceRecId = vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowContextRecId();
                vendInvoiceWorkflowBatchJobStatus.InvoiceWorkflowStatus = VendInvoicePostWorkflowStatus::Scheduled;
                vendInvoiceWorkflowBatchJobStatus.Company = vendInvoiceWorkflowAutomatedTaskDataContract.parmCompanyId();

                recordInsertList.add(vendInvoiceWorkflowBatchJobStatus);

                if (vendInvoiceWorkflowAutomatedTaskDataContractCollection.getCount() >= numberOfInvoicesToPeek)
                {
                    break;
                }
            }

            recordInsertList.insertDatabase();

            ttscommit;
        }
        catch
        {
            // Return an empty list.
            return new VendInvoiceWorkflowAutomatedTaskDataContractCollection().parmWorkflowDataContractList();
        }

        return vendInvoiceWorkflowAutomatedTaskDataContractCollection.parmWorkflowDataContractList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    /// <summary>
    /// The count of invoices that have not been submitted to the <c>ProcessAutomationTask</c>.
    /// </summary>
    /// <returns>The count of yet to be processed invoices.</returns>
    public int64 count()
    {
        VendInvoiceWorkflowBatchJob vendInvoiceWorkflowBatchJob;
        VendInvoiceWorkflowBatchJobStatus vendInvoiceWorkflowBatchJobStatus, vendInvoiceWorkflowBatchJobStatusTableSelf;

        select crosscompany count(RecId) from vendInvoiceWorkflowBatchJob
            join vendInvoiceWorkflowBatchJobStatus
            where vendInvoiceWorkflowBatchJobStatus.InvoiceWorkflowStatus == VendInvoicePostWorkflowStatus::NotRun
                && vendInvoiceWorkflowBatchJobStatus.InvoiceRecId == vendInvoiceWorkflowBatchJob.InvoiceRecId
                && vendInvoiceWorkflowBatchJobStatus.Company == vendInvoiceWorkflowBatchJob.Company
            notexists join vendInvoiceWorkflowBatchJobStatusTableSelf
            where vendInvoiceWorkflowBatchJobStatusTableSelf.InvoiceWorkflowStatus != VendInvoicePostWorkflowStatus::NotRun
                && vendInvoiceWorkflowBatchJobStatusTableSelf.InvoiceRecId == vendInvoiceWorkflowBatchJobStatus.InvoiceRecId
                && vendInvoiceWorkflowBatchJobStatusTableSelf.Company == vendInvoiceWorkflowBatchJobStatus.Company;

        return vendInvoiceWorkflowBatchJob.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceScheduleQuery</Name>
				<Source><![CDATA[
    private Query getInvoiceScheduleQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(VendInvoiceWorkflowBatchJob));

        // Select from VendInvoiceWorkflowBatchJobStatus where InvoiceWorkflowStatus equals 'NotRun'.
        QueryBuildDataSource qbdsStatus = qbds.addDataSource(tableNum(VendInvoiceWorkflowBatchJobStatus));
        qbdsStatus.addLink(fieldNum(VendInvoiceWorkflowBatchJob, InvoiceRecId),
            fieldNum(VendInvoiceWorkflowBatchJobStatus, InvoiceRecId));
        qbdsStatus.addLink(fieldNum(VendInvoiceWorkflowBatchJob, Company),
            fieldNum(VendInvoiceWorkflowBatchJobStatus, Company));
        qbdsStatus.joinMode(JoinMode::InnerJoin);
        qbdsStatus.addRange(fieldNum(VendInvoiceWorkflowBatchJobStatus, InvoiceWorkflowStatus))
            .value(queryValue(VendInvoicePostWorkflowStatus::NotRun));

        // Since VendInvoiceWorkflowBatchJobStatus is an insert-only table, an invoice that was processed earlier will have multiple rows(s) with different status.
        // Exclude an invoice if it has a row whose InvoiceWorkflowStatus is anything other than 'NotRun'.
        QueryBuildDataSource qbdsStatusSelf = qbdsStatus.addDataSource(tableNum(VendInvoiceWorkflowBatchJobStatus));
        qbdsStatusSelf.addLink(fieldNum(VendInvoiceWorkflowBatchJobStatus, InvoiceRecId),
            fieldNum(VendInvoiceWorkflowBatchJobStatus, InvoiceRecId));
        qbdsStatusSelf.addLink(fieldNum(VendInvoiceWorkflowBatchJobStatus, Company),
            fieldNum(VendInvoiceWorkflowBatchJobStatus, Company));
        qbdsStatusSelf.joinMode(JoinMode::NoExistsJoin);
        qbdsStatusSelf.addRange(fieldNum(VendInvoiceWorkflowBatchJobStatus, InvoiceWorkflowStatus))
            .value(SysQuery::valueNot(VendInvoicePostWorkflowStatus::NotRun));

        qbds.addSelectionField(fieldNum(VendInvoiceWorkflowBatchJob, InvoiceRecId));
        qbds.addSelectionField(fieldNum(VendInvoiceWorkflowBatchJob, WorkflowCorrelationId));
        qbds.addSelectionField(fieldNum(VendInvoiceWorkflowBatchJob, WorkflowElementId));
        qbds.addSelectionField(fieldNum(VendInvoiceWorkflowBatchJob, Company));

        qbdsStatus.addSelectionField(fieldNum(VendInvoiceWorkflowBatchJobStatus, InvoiceRecId));
        qbdsStatusSelf.addSelectionField(fieldNum(VendInvoiceWorkflowBatchJobStatus, InvoiceRecId));

        qbds.orderMode(OrderMode::OrderBy);
        qbds.addSortField(fieldNum(VendInvoiceWorkflowBatchJob, Company), SortOrder::Ascending);
        qbds.addSortField(fieldNum(VendInvoiceWorkflowBatchJob, InvoiceAccount), SortOrder::Ascending);
        qbds.addSortField(fieldNum(VendInvoiceWorkflowBatchJob, InvoiceRecId), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetScheduledInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the scheduled status on the invoice if the invoice has remained in that state
    /// for longer than <c>MaxWaitTimeForInvoiceScheduledStatus_Hours</c>.
    /// </summary>
    private void resetScheduledInvoice()
    {
        VendInvoiceWorkflowBatchJobStatus vendInvoiceWorkflowBatchJobStatus;

        try
        {
            utcdatetime scheduledStatusTimeout = DateTimeUtil::addHours(
                DateTimeUtil::utcNow(),
                VendParameters::maxWaitTimeForInvoiceScheduledStatus() * -1);

            ttsbegin;

            // If an invoice has remained in the 'Scheduled' state for more than 'MaxWaitTimeForInvoiceScheduledStatus_Hours',
            //  then reset the status. This allows the invoice to be rescheduled for posting.
            delete_from vendInvoiceWorkflowBatchJobStatus
                where vendInvoiceWorkflowBatchJobStatus.InvoiceWorkflowStatus == VendInvoicePostWorkflowStatus::Scheduled
                    && vendInvoiceWorkflowBatchJobStatus.CreatedDateTime < scheduledStatusTimeout;

            ttscommit;
        }
        catch
        {
            if (xSession::currentRetryCount() <= VendInvoicePostTaskConstants::MaxRetryAttemptsOnException)
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>