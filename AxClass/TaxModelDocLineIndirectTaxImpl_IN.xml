<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineIndirectTaxImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxModelDocLineIndirectTaxImpl_IN</c> class is the domain object class implementation for
/// transaction documents required for indian tax operations.
/// </summary>
public class TaxModelDocLineIndirectTaxImpl_IN extends TaxModelDocLineBaseImpl_IN
    implements  TaxModelVATable_IN,
             TaxModelExciseTaxable_IN,
             TaxModelSalesTaxable_IN,
             TaxModelCustomsTaxable_IN,
             TaxModelServiceTaxable_IN,
             TaxModelGSTTaxable_IN
{
    TaxModelDocLineVATHelper_IN     VAThelper;
    TaxModelDocLineExciseHelper_IN  exciseHelper;
    TaxModelDocLineSalesHelper_IN   salesHelper;
    TaxModelDocLineServiceHelper_IN serviceHelper;
    TaxModelDocLineCustomsHelper_IN customsHelper;
    TaxModelDocLineGSTHelper_IN     gstHelper;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    public Direction_IN getCustomsDirection()
    {
        return customsHelper.getCustomsDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTariffCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the <c>CustomsTariffCodeTable_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c>
    /// </returns>
    public RefRecId getCustomsTariffCodeRefRecId()
    {
        return customsHelper.getCustomsTariffCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTariffCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustomsTariffCodeTable_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>CustomsTariffCodeTable_IN</c>
    /// </returns>
    public CustomsTariffCodeTable_IN getCustomsTariffCodeTable()
    {
        return customsHelper.getCustomsTariffCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getCustomsTaxAccountType(TaxOnItem _taxOnItem)
    {
        return customsHelper.getCustomsTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getCustomsTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return customsHelper.getCustomsTaxOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getCustomsTaxRegistrationNumber()
    {
        return customsHelper.getCustomsTaxRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the <c>RecId</c> of Customs Registration.
    /// </summary>
    /// <returns>
    /// The the <c>RefRecId</c>
    /// </returns>
    public RefRecId getCustomsTaxRegistrationRefRecId()
    {
        return customsHelper.getCustomsTaxRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return exciseHelper.getExciseDirectSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise tax number sequence.
    /// </summary>
    /// <returns>
    /// The number sequence generated.
    /// </returns>
    public container getExciseNumberSeq()
    {
        return exciseHelper.getExciseNumberSeq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseRecordType_IN</c> of the document line map.
    /// </summary>
    /// <returns>
    /// The <c>ExciseRecordType_IN</c>
    /// </returns>
    public ExciseRecordType_IN getExciseRecordType()
    {
        return exciseHelper.getExciseRecordType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c>
    /// </returns>
    public RefRecId getExciseTariffCodeRefRecId()
    {
        return exciseHelper.getExciseTariffCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseTariffCodes_IN</c>
    /// </returns>
    public ExciseTariffCodes_IN getExciseTariffCodesTable()
    {
        return exciseHelper.getExciseTariffCodesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxAccountType(TaxOnItem _taxOnItem)
    {
        return exciseHelper.getExciseTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return exciseHelper.getExciseTaxOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Excise Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getExciseTaxRegistrationNumber()
    {
        return exciseHelper.getExciseTaxRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of Excise Registration
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getExciseTaxRegistrationRefRecId()
    {
        return exciseHelper.getExciseTaxRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseType_IN</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseType_IN</c>
    /// </returns>
    public ExciseType_IN getExciseType()
    {
        return exciseHelper.getExciseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTHSNCodeRefRecId()
    {
        return gstHelper.getGSTHSNCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>HSNCodeTable_IN</c>
    /// </returns>
    public HSNCodeTable_IN getGSTHSNCodeTable()
    {
        return gstHelper.getGSTHSNCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTITCCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ITC category of the transaction line.
    /// </summary>
    /// <returns>
    /// The ITC category.
    /// </returns>
    public ITCCategory_IN getGSTITCCategory()
    {
        return gstHelper.getGSTITCCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTNonBusinessUsagePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Non-business usage perecent.
    /// </summary>
    /// <returns>
    /// The <c>Percent</c> of the GST Non-business usage part.
    /// </returns>
    public Percent getGSTNonBusinessUsagePercent()
    {
        return gstHelper.getGSTNonBusinessUsagePercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getGSTRegistrationNumber()
    {
        return gstHelper.getGSTRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTRegistrationRefRecId()
    {
        return gstHelper.getGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Scrap of the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is Scrap for the transaction line; otherwise, false.
    /// </returns>
    public NoYesId getGSTScrap()
    {
        return gstHelper.getGSTScrap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Service accounting code.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTServiceAccountingCodeRefRecId()
    {
        return gstHelper.getGSTServiceAccountingCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Service accounting code table.
    /// </summary>
    /// <returns>
    /// The <c>ServiceAccountingCodeTable_IN</c>
    /// </returns>
    public ServiceAccountingCodeTable_IN getGSTServiceAccountingCodeTable()
    {
        return gstHelper.getGSTServiceAccountingCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the service category of the transaction line.
    /// </summary>
    /// <returns>
    /// The service category.
    /// </returns>
    public ServiceCategory_IN getGSTServiceCategory()
    {
        return gstHelper.getGSTServiceCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party GST Registration Number.
    /// </summary>
    /// <returns>
    /// The party <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getPartyGSTRegistrationNumber()
    {
        return gstHelper.getPartyGSTRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The party <c>RefRecId</c>
    /// </returns>
    public RefRecId getPartyGSTRegistrationRefRecId()
    {
        return gstHelper.getPartyGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    public NoYes getIsDeemedExport()
    {
        return gstHelper.getIsDeemedExport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    public NoYes getIsSEZParty()
    {
        return gstHelper.getIsSEZParty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getSalesTaxAccountType(TaxOnItem _taxOnItem)
    {
        return salesHelper.getSalesTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxFormTypesRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of <c>SalesTaxFormTypes_IN</c> related to this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of <c>SalesTaxFormTypes_IN</c>
    /// </returns>
    public SalesTaxFormTypesRecId_IN getSalesTaxFormTypesRecId()
    {
        return salesHelper.getSalesTaxFormTypesRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxFormTypeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesTaxFormTypes_IN</c> related to this document line.
    /// </summary>
    /// <returns>
    /// The <c>SalesTaxFormTypes_IN</c>
    /// </returns>
    public SalesTaxFormTypes_IN getSalesTaxFormTypeTable()
    {
        return salesHelper.getSalesTaxFormTypeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getSalesTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return salesHelper.getSalesTaxOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales Tax Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getSalesTaxRegistrationNumber()
    {
        return salesHelper.getSalesTaxRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of Sales Tax Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getSalesTaxRegistrationRefRecId()
    {
        return salesHelper.getSalesTaxRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of <c>ServiceCodeTable_IN</c> of the transaction line.
    /// </summary>
    /// <returns>
    /// The service code.
    /// </returns>
    public RecId getServiceCodeRefRecId()
    {
        return serviceHelper.getServiceCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ServiceCodeTable_IN</c> of the transaction line.
    /// </summary>
    /// <returns>
    /// The service code.
    /// </returns>
    public ServiceCodeTable_IN getServiceCodeTable()
    {
        return serviceHelper.getServiceCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceGTACategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the service GTA category of the transaction line.
    /// </summary>
    /// <returns>
    /// The category.
    /// </returns>
    public GTAServiceCategory_IN getServiceGTACategory()
    {
        return serviceHelper.getServiceGTACategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getServiceTaxAccountType(TaxOnItem _taxOnItem)
    {
        return serviceHelper.getServiceTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getServiceTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return serviceHelper.getServiceTaxOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Service Tax Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getServiceTaxRegistrationNumber()
    {
        return serviceHelper.getServiceTaxRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> Service Tax Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getServiceTaxRegistrationRefRecId()
    {
        return serviceHelper.getServiceTaxRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getVATAccountType(TaxOnItem _taxOnItem)
    {
        return VATHelper.getVATAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATGoodsType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT goods type of the document line.
    /// </summary>
    /// <returns>
    /// The <c>VATGoodsType_IN</c> of the document line.
    /// </returns>
    public VATGoodsType_IN getVATGoodsType()
    {
        return VAThelper.getVATGoodsType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATNonRecoverablePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT Non-recoverable perecent.
    /// </summary>
    /// <returns>
    /// The <c>Percent</c> of the VAT Non-recoverable part.
    /// </returns>
    public Percent getVATNonRecoverablePercent()
    {
        return VAThelper.getVATNonRecoverablePercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getVATOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return VAThelper.getVATOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getVATRegistrationNumber()
    {
        return VAThelper.getVATRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> VAT Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getVATRegistrationRefRecId()
    {
        return VAThelper.getVATRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasApplyExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the transaction document has the applyExcise
    /// </summary>
    /// <returns>
    /// True, if it has.
    /// </returns>
    public boolean hasApplyExcise()
    {
        return customsHelper.hasApplyExcise();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        super(_documentLineMap);

        VAThelper = new TaxModelDocLineVATHelper_IN();
        VAThelper.setDocumentLine(_documentLineMap);
        VAThelper.setTaxModelTaxable(this);
        VAThelper.setTaxModelVATable(this);
        VAThelper.setTransTaxInformation(transTaxInformation);

        exciseHelper = new TaxModelDocLineExciseHelper_IN();
        exciseHelper.setDocumentLine(_documentLineMap);
        exciseHelper.setTaxModelTaxable(this);
        exciseHelper.setTaxModelExciseTaxable(this);
        exciseHelper.setTransTaxInformation(transTaxInformation);

        salesHelper = new TaxModelDocLineSalesHelper_IN();
        salesHelper.setDocumentLine(_documentLineMap);
        salesHelper.setTaxModelTaxable(this);
        salesHelper.setTaxModelSalesTaxable(this);
        salesHelper.setTransTaxInformation(transTaxInformation);

        serviceHelper = new TaxModelDocLineServiceHelper_IN();
        serviceHelper.setDocumentLine(_documentLineMap);
        serviceHelper.setTaxModelTaxable(this);
        serviceHelper.setTaxModelServiceTaxable(this);
        serviceHelper.setTransTaxInformation(transTaxInformation);

        customsHelper = new TaxModelDocLineCustomsHelper_IN();
        customsHelper.setDocumentLine(_documentLineMap);
        customsHelper.setTaxModelTaxable(this);
        customsHelper.setTaxModelCustomsTaxable(this);
        customsHelper.setTransTaxInformation(transTaxInformation);

        gstHelper = new TaxModelDocLineGSTHelper_IN();
        gstHelper.setDocumentLine(_documentLineMap);
        gstHelper.setTaxModelTaxable(this);
        gstHelper.setTaxModelGSTTaxable(this);
        gstHelper.setTransTaxInformation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsPreferential</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for Preferential.
    /// </summary>
    /// <returns>
    /// True if the document line is Preferential applied; otherwise, false.
    /// </returns>
    public NoYes isCustomsPreferential()
    {
        return customsHelper.isCustomsPreferential();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    public NoYes isExciseCENVATCreditAvailed()
    {
        return exciseHelper.isExciseCENVATCreditAvailed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        return exciseHelper.isExciseConsignment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction should register DSA.
    /// </summary>
    /// <returns>
    /// True if the document line should register DSA; otherwise, false.
    /// </returns>
    public NoYes isExicseDSA()
    {
        return exciseHelper.isExicseDSA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseSSI</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for SSI.
    /// </summary>
    /// <returns>
    /// True if the document line is SSI applied; otherwise, false.
    /// </returns>
    public NoYes isExicseSSI()
    {
        return exciseHelper.isExicseSSI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceGTA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is GTA transaction?
    /// </summary>
    /// <returns>
    /// True, if the transaction is GTA;Otherwise, false;
    /// </returns>
    public boolean isServiceGTA()
    {
        return serviceHelper.isServiceGTA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServicePOT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is POT transaction?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// True, if the transaction is POT;Otherwise, false;
    /// </returns>
    public boolean isServicePOT(TaxOnItem _taxOnItem)
    {
        return serviceHelper.isServicePOT(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceTaxGTARealizedAtInvSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the tax of the GTA vendor is realizable at Invoice settlement time or not.
    /// </summary>
    /// <returns>
    /// True, if it is realizeable; Otherwise, false.
    /// </returns>
    public boolean isServiceTaxGTARealizedAtInvSettlement()
    {
        return serviceHelper.isServiceTaxGTARealizedAtInvSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsVATCompositionScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for CompositionScheme.
    /// </summary>
    /// <returns>
    /// True if the document line is CompositionScheme applied; otherwise, false.
    /// </returns>
    public NoYes IsVATCompositionScheme()
    {
        return VAThelper.IsVATCompositionScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the excise tax number sequence.
    /// </summary>
    /// <param name="_nums">
    /// The sequence number
    /// </param>
    public void setExciseNumberSeq(container _nums)
    {
        exciseHelper.setExciseNumberSeq(_nums);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise amount register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise amount register; otherwise, false.
    /// </returns>
    public NoYes shouldPostAmountRegister()
    {
        return exciseHelper.shouldPostAmountRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    public NoYes shouldPostQuantityRegister()
    {
        return exciseHelper.shouldPostQuantityRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipCustomsTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Customs Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipCustomsTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = customsHelper.shouldSkipCustomsTax(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipExciseTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Excise Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipExciseTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = exciseHelper.shouldSkipExciseTax(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Sales Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipSalesTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = salesHelper.shouldSkipSalesTax(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipServiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Service Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipServiceTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = serviceHelper.shouldSkipServiceTax(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the VAT be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipVAT(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = VATHelper.shouldSkipVAT(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is related to production.
    /// </summary>
    /// <returns>
    /// True if the document line is related to production; otherwise, false.
    /// </returns>
    public boolean isExciseProduction()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    public NoYes isScrap()
    {
        return exciseHelper.isScrap();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>