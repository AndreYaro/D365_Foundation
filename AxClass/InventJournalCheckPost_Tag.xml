<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalCheckPost_Tag</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventJournalTypeFactoryAttribute(InventJournalType::TagCounting)]
class InventJournalCheckPost_Tag extends JournalCheckPost implements BatchRetryable
{
    InventJournalTable      inventJournalTableCount;
    InventJournalTableData  inventJournalTableDataCount;
    InventJournalTrans      inventJournalTransCount;
    JournalTransData        inventJournalTransDataCount;

    LineNum                 lineNumCount;
    Voucher                 voucher_lastCount;
    InventDimParm           inventDimParmCount;

    NoYes                   createZeroLines;
    NoYes                   simulationPosting;
    Counter                 zeroLinesCount;

    DialogField             createZeroLinesField;
    DialogField             simulationPostingField;

    QueryRun                zeroLinesQueryRun;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        createZeroLines,
        simulationPosting,
        inventDimParmCount
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDimPhysical</Name>
				<Source><![CDATA[
    protected boolean checkDimPhysical(InventJournalTrans_Tag _inventJournalTrans_Tag)
    {
        InventDim                               inventDim       = _inventJournalTrans_Tag.inventDim();
        boolean                                 ok = true;
        InventTable                             inventTable = _inventJournalTrans_Tag.inventTable();

        InventDimGroupFieldSetupEnumerator enumerator = InventDimGroupSetup::newItemId(_inventJournalTrans_Tag.ItemId).getFieldSetupEnumerator();

        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
            fieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive())
            {
                boolean okTmp = true;
                if (inventDimGroupFieldSetup.isProductDimension())
                {
                    if (! inventDim.(inventDimFieldId))
                    {
                        ok = checkFailed(strfmt("@SYS54774",fieldid2pname(inventDim.TableId, inventDimFieldId)));
                        okTmp = false;
                    }
                }

                if (okTmp && !inventDim.(inventDimFieldId) && inventDimParmCount.(InventDim::dim2dimParm(inventDimFieldId)))
                {
                    if (inventDimGroupFieldSetup.isPrimaryStockingEnabled())
                    {
                        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                        {
                            ok = checkFailed(strfmt(inventdim.inventDimId+ " "+"@SYS54776",fieldid2pname(inventDim.TableId, inventDimFieldId)));
                        }
                        else
                        {
                            ok = checkFailed(strfmt("@SYS54776",fieldid2pname(inventDim.TableId, inventDimFieldId)));
                        }
                    }
                    else if (!inventDimGroupFieldSetup.isAllowBlankReceiptEnabled() && !inventDimGroupFieldSetup.isAllowBlankIssueEnabled())
                    {
                        ok = checkFailed(strfmt("@SYS53724",fieldid2pname(inventDim.TableId, inventDimFieldId)));
                    }
                }
            }
            else
            {
                if (inventDim.(inventDimFieldId))
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        ok = checkFailed(strfmt(inventtable.ItemId+ " "+"@SYS54773",fieldid2pname(inventDim.TableId, inventDimFieldId)));
                    }
                    else
                    {
                        ok = checkFailed(strfmt("@SYS54773",fieldid2pname(inventDim.TableId, inventDimFieldId)));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret = super(_journalTransList);

        InventJournalNameId inventJournalNameId = InventJournalName::standardJournalName(InventJournalType::Count);

        if (!inventJournalNameId)
        {
            return checkFailed("@SYS62961");
        }

        if (!InventJournalName::checkExist(inventJournalNameId))
        {
            return false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTagStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the status of the tag counting record.
    /// </summary>
    /// <param name = "_inventJournalTrans_Tag">The tag counting record.</param>
    /// <returns>true if status if valid; otherwise, false.</returns>
    protected boolean validateTagStatus(InventJournalTrans_Tag _inventJournalTrans_Tag)
    {
        switch (_inventJournalTrans_Tag.TagStatus)
        {
            case InventJournalTagStatus::Unknown:
                return checkFailed("@SYS50154");
            case InventJournalTagStatus::Used:
                if (!_inventJournalTrans_Tag.ItemId)
                {
                    return checkFailed(strFmt("@SYS65159", _inventJournalTrans_Tag.TagStatus));
                }
                break;
            case InventJournalTagStatus::Voided:
                if (_inventJournalTrans_Tag.ItemId)
                {
                    return checkFailed(strFmt("@SYS65160", _inventJournalTrans_Tag.TagStatus));
                }
                break;
            case InventJournalTagStatus::Missing:
                if (_inventJournalTrans_Tag.ItemId)
                {
                    return checkFailed(strFmt("@SYS65160", _inventJournalTrans_Tag.TagStatus));
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the journal transaction data.
    /// </summary>
    /// <param name = "_journalTransData">An instance of <c>JournalTransData</c> object.</param>
    /// <returns>true if status if valid; otherwise, false.</returns>
    protected boolean checkTrans(JournalTransData  _journalTransData)
    {
        InventJournalTrans_Tag      inventJournalTrans_Tag = _journalTransData.journalTrans();
        boolean                     ret = super(_journalTransData);

        ret = this.validateTagStatus(inventJournalTrans_Tag) && ret;

        ret = this.checkDimPhysical(inventJournalTrans_Tag) && ret;

        if (inventJournalTrans_Tag.UnitID)
        {
            UnitOfMeasureSymbol unitIdInvent = inventJournalTrans_Tag.inventTableModuleInvent().UnitId;
            if (inventJournalTrans_Tag.UnitID != unitIdInvent)
            {
                if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(inventJournalTrans_Tag.itemId,
                                                                                                  inventJournalTrans_Tag.inventDimId,
                                                                                                  inventJournalTrans_Tag.unitID,
                                                                                                  unitIdInvent))                                                                             
                {
                    ret = checkFailed(strFmt("@SYS28690", inventJournalTrans_Tag.UnitID, unitIdInvent));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZeroLines</Name>
				<Source><![CDATA[
    protected void createZeroLines()
    {
        inventDim               inventDimJoin;
        InventJournalTrans      inventJournalTrans;
        boolean                 improveFlightEnabled = InventJournalCheckPost_TagImproveCreateZeroLinesFlight::instance().isEnabled();

        if (!createZeroLines)
        {
            return;
        }

        if (!inventJournalTableDataCount)
        {
            this.initInventJournalTableDataCount();
        }

        while (zeroLinesQueryRun.next())
        {
            InventSum inventSum = zeroLinesQueryRun.get(tablenum(InventSum)) as InventSum;
            InventDim inventDim = zeroLinesQueryRun.get(tablenum(InventDim)) as InventDim;
            if (inventSum.physicalInventCalculated() != 0)
            {
                InventDim inventDim1 = InventDim::findOrCreate(inventDim);

                if (improveFlightEnabled)
                {
                    select firstonly RecId from inventJournalTrans
                        where inventJournalTrans.JournalId == inventJournalTableCount.JournalId
                            && inventJournalTrans.ItemId == inventSum.ItemId
                        #InventDimExistsJoin(inventJournalTrans.inventDimId, inventDimJoin, inventDim1, InventDimParmCount);
                }
                else
                {
                    select firstonly inventJournalTrans
                        where inventJournalTrans.JournalId == inventJournalTableCount.JournalId
                            && inventJournalTrans.ItemId == inventSum.ItemId
                        #InventDimExistsJoin(inventJournalTrans.inventDimId, inventDimJoin, inventDim1, InventDimParmCount);
                }

                if (!inventJournalTrans.RecId)
                {
                    lineNumCount++;
                    zeroLinesCount++;
                    this.initInventJournalTransCount(
                        inventJournalTransCount,
                        inventSum.ItemId,
                        inventDim1.InventDimId,
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        0,
                        0,
                        0,
                        lineNumCount);

                    if (inventJournalTableCount.VoucherDraw == JournalVoucherDraw::Entering)
                    {
                        inventJournalTransDataCount.initVoucher(voucher_lastCount,false);
                    }

                    inventJournalTransDataCount.insert();
                    voucher_lastCount = inventJournalTransCount.Voucher;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        createZeroLinesField = dialog.addField(enumStr(NoYes), "@SYS57332", "@SYS65051");
        createZeroLinesField.value(createZeroLines);

        this.updateZeroLinesQuery();

        simulationPostingField = dialog.addField(enumStr(NoYes), "@SYS3308", "@SYS65152");
        simulationPostingField.value(simulationPosting);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean     ret = super();

        createZeroLines         = createZeroLinesField.value();
        simulationPosting       = simulationPostingField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmCount</Name>
				<Source><![CDATA[
    protected void initInventDimParmCount(InventJournalTable _inventJournalTable)
    {
        InventDimParm inventDimParm;

        inventDimParm.initProductDimensionsAllGroups();
        inventDimParmCount.initFromInventDimFixed(_inventJournalTable.InventDimFixed);
        inventDimParmCount = InventDimParm::orParms(inventDimParmCount,inventDimParm);

        inventDimParmCount.ItemIdFlag   = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventJournalTableDataCount</Name>
				<Source><![CDATA[
    protected void initInventJournalTableDataCount()
    {
        InventJournalTable      inventJournalTable = journalTableData.journalTable();

        inventJournalTableDataCount                 = JournalTableData::newTable(inventJournalTableCount);
        inventJournalTableCount.JournalId           = inventJournalTableDataCount.nextJournalId();
        inventJournalTableCount.JournalType         = InventJournalType::Count;
        inventJournalTableCount.JournalIdOrignal    = journalId;
        inventJournalTableCount.JournalNameId       = inventJournalTableDataCount.journalStatic().standardJournalNameId(enum2int(inventJournalTableCount.JournalType));

        inventJournalTableDataCount.initFromJournalName(journalTableData.journalStatic().findJournalName(inventJournalTableCount.JournalNameId));
        inventJournalTableCount.InventDimFixed      = inventJournalTable.InventDimFixed;
        inventJournalTableCount.Worker              = inventJournalTable.Worker;

        inventJournalTransDataCount  = inventJournalTableDataCount.journalStatic().newJournalTransData(inventJournalTransCount,inventJournalTableDataCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventJournalTransCount</Name>
				<Source><![CDATA[
    protected void initInventJournalTransCount(
        InventJournalTrans  _inventJournalTrans,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        TransDate           _transDate,
        InventQty           _qtyCounted,
        PdsCWInventQty      _cwQtyCounted,
        HCMWorkerRecId      _worker,
        LineNum             _lineNum)
    {
        InventTable inventTable = InventTable::find(_itemId);

        _inventJournalTrans.clear();
        _inventJournalTrans.initFromInventJournalTable(inventJournalTableDataCount.journalTable());
        _inventJournalTrans.initFromInventTable(inventTable, false, false, false);
        _inventJournalTrans.setInventDimId(_inventDimId);
        _inventJournalTrans.TransDate       = _transDate;

        [_inventJournalTrans.InventOnHand, _inventJournalTrans.PdsCWInventOnHand] =
                    InventSumDatePhysicalDim::pdsCWOnHandQty(_inventJournalTrans.TransDate, _inventJournalTrans.ItemId, _inventJournalTrans.inventDim(), inventDimParmCount);

        _inventJournalTrans.PdsCWInventQtyCounted   = _cwQtyCounted;
        _inventJournalTrans.PdsCWQty                = _inventJournalTrans.PdsCWInventQtyCounted - _inventJournalTrans.PdsCWInventOnHand;
        _inventJournalTrans.Counted                 = _qtyCounted;
        _inventJournalTrans.Qty                     = _inventJournalTrans.Counted - _inventJournalTrans.InventOnHand;

        _inventJournalTrans.LineNum         = _lineNum;
        _inventJournalTrans.setCostPrice(_inventDimId,null,_inventJournalTrans.inventTableModuleInvent());
        if (_worker)
        {
            _inventJournalTrans.Worker = _worker;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    public void initBatch(Batch batch)
    {
        super(batch);

        if (skipBatchRetryable)
        {
            batch.retriesOnFailure = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        InventDim               inventDimCriteria;
        InventDimParm           inventDimParmCriteria;

        super();

        inventDimParmCount.initProductDimensionsAllGroups();
        inventDimParmCount.ItemIdFlag   = NoYes::Yes;

        Query query = InventSum::newQuery(null, '',inventDimCriteria, inventDimParmCriteria, inventDimParmCount);
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(InventSum));
        SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventSum, ItemId));

        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventSum, Closed));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildDataSource = query.dataSourceTable(tableNum(InventDim));

        inventDimParmCount.queryAddRangeNoValue(queryBuildDataSource);

        SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventDim, InventLocationId));

        zeroLinesQueryRun = new QueryRun(query);

        createZeroLines     = NoYes::No;
        simulationPosting   = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, zeroLinesQueryRun.pack()] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    protected void postJournal(JournalTransList _journalTransList)
    {
        InventJournalTable  inventJournalTable = journalTableData.journalTable();

        this.initInventDimParmCount(inventJournalTable);
        inventJournalTableDataCount     = null;
        lineNumCount                    = 0;
        voucher_lastCount               = '';
        zeroLinesCount                  = 0;

        if (simulationPosting)
        {
            this.parmShowInfoResult(false);
            this.simulatePosting(_journalTransList);
            return;
        }

        this.initInventJournalTableDataCount();
        inventJournalTableCount.insert();

        super(_journalTransList);

        this.createZeroLines();

        if (!lineNumCount && !zeroLinesCount)
        {
            inventJournalTableCount = InventJournalTable::find(inventJournalTableCount.JournalId,true);
            inventJournalTableCount.delete();
        }
        else
        {
            inventJournalTableCount.update();

            info(strFmt("@SYS62960", inventJournalTableCount.JournalId, InventJournalType::Count));
            if (zeroLinesCount > 0)
            {
                info(strFmt("@SYS65053", zeroLinesCount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        InventJournalTrans_Tag  inventJournalTrans_Tag = _journalTransData.journalTrans();
        InventDim               inventDim;
        InventJournalTrans      inventJournalTrans;
        InventQty               qty = inventJournalTrans_Tag.qtyInventUnit();
        PdsCWInventQty          cwQty = 0;

        super(_journalTransData);

        if (inventJournalTrans_Tag.TagStatus != InventJournalTagStatus::Used)
        {
            return;
        }

        InventDim inventDimCriteria = inventJournalTrans_Tag.inventDim();
        select firstonly forupdate inventJournalTrans
            where inventJournalTrans.JournalId      == inventJournalTableCount.JournalId    &&
                  inventJournalTrans.ItemId         == inventJournalTrans_Tag.ItemId
            #InventDimExistsJoin(inventJournalTrans.inventDimId, inventDim, inventDimCriteria, inventDimParmCount);

        if (inventJournalTrans)
        {
            inventJournalTrans.PdsCWInventQtyCounted    += inventJournalTrans_Tag.PdsCWQty;
            inventJournalTrans.PdsCWQty                 += inventJournalTrans_Tag.PdsCWQty;
            inventJournalTrans.Counted                  += qty;
            inventJournalTrans.Qty                      += qty;

            inventJournalTrans.CostAmount   =  inventJournalTrans.calcCostAmount();

            if (!inventJournalTrans.pdsCWCheckCWQty())
            {
                throw Exception::Error;
            }

            if (inventJournalTrans.Worker && inventJournalTrans_Tag.Worker != inventJournalTrans.Worker)
            {
                inventJournalTrans.Worker = 0;
            }
            inventJournalTrans.update();
        }
        else
        {
            lineNumCount++;

            cwQty = inventJournalTrans_Tag.PdsCWQty;

            this.initInventJournalTransCount(
                        inventJournalTransCount,
                        inventJournalTrans_Tag.ItemId,
                        inventJournalTrans_Tag.InventDimId,
                        inventJournalTrans_Tag.TransDate,
                        qty,
                        cwQty,
                        inventJournalTrans_Tag.Worker,
                        lineNumCount);

            if (inventJournalTableCount.VoucherDraw == JournalVoucherDraw::Entering)
            {
                inventJournalTransDataCount.initVoucher(voucher_lastCount,false);               // Voucher is assigned
            }

            inventJournalTransDataCount.insert();
            voucher_lastCount = inventJournalTransCount.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return zeroLinesQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>simulatePosting</Name>
				<Source><![CDATA[
    protected void simulatePosting(JournalTransList _journalTransList)
    {
        TmpWMSOnlineCounting    tmpWMSOnlineCounting;
        TmpWMSOnlineCounting    tmpWMSOnlineCountingWork;
        boolean                 anyPostings = false;

        #COSNumbers

        setprefix("@SYS3308");
        tmpWMSOnlineCountingWork.setTmpData(tmpWMSOnlineCounting);

        while (_journalTransList.next())
        {
            if (! journalTableData.journalErrorTransList().find(_journalTransList.item().LineNum))
            {
                JournalTransData journalTransData = _journalTransList.journalTransData();
                setprefix(this.prefixJournalTransLine(journalTransData));
                this.progressUpdate(journalTransData);
                InventJournalTrans_Tag inventJournalTrans_Tag = journalTransData.journalTrans();
                if (inventJournalTrans_Tag.Qty != 0 && inventJournalTrans_Tag.TagStatus == InventJournalTagStatus::Used)
                {
                    select firstonly forupdate tmpWMSOnlineCountingWork
                        where tmpWMSOnlineCountingWork.ItemId       == inventJournalTrans_Tag.ItemId        &&
                              tmpWMSOnlineCountingWork.InventDimId  == inventJournalTrans_Tag.InventDimId;
                    if (tmpWMSOnlineCountingWork)
                    {
                        tmpWMSOnlineCountingWork.QtyCounted     += inventJournalTrans_Tag.qtyInventUnit();
                        tmpWMSOnlineCountingWork.update();
                    }
                    else
                    {
                        tmpWMSOnlineCounting.ItemId         = inventJournalTrans_Tag.ItemId;
                        tmpWMSOnlineCounting.InventDimId    = inventJournalTrans_Tag.InventDimId;

                        [tmpWMSOnlineCounting.QtyOnHand, tmpWMSOnlineCounting.PdsCWQtyOnHand]   = 
                                    InventSumDatePhysicalDim::pdsCWOnHandQty(inventJournalTrans_Tag.TransDate,inventJournalTrans_Tag.ItemId,
                                                                inventJournalTrans_Tag.inventDim(), inventDimParmCount);

                        tmpWMSOnlineCounting.QtyCounted         = inventJournalTrans_Tag.qtyInventUnit();
                        tmpWMSOnlineCounting.PdsCWQtyCounted    = inventJournalTrans_Tag.PdsCWQty;

                        tmpWMSOnlineCounting.insert();
                    }
                }
            }
        }
        if (createZeroLines)
        {
            while (zeroLinesQueryRun.next())
            {
                InventSum inventSum = zeroLinesQueryRun.get(tablenum(InventSum)) as InventSum;
                InventDim inventDim = zeroLinesQueryRun.get(tablenum(InventDim)) as InventDim;
                if (inventSum.physicalInventCalculated() != 0)
                {
                    InventDim inventDim1 = InventDim::findOrCreate(inventDim);
                    select firstonly forupdate tmpWMSOnlineCountingWork
                        where tmpWMSOnlineCountingWork.ItemId       == inventSum.ItemId      &&
                              tmpWMSOnlineCountingWork.InventDimId  == inventDim1.InventDimId;
                    if (!tmpWMSOnlineCountingWork)
                    {
                        tmpWMSOnlineCounting.ItemId         = inventSum.ItemId;
                        tmpWMSOnlineCounting.InventDimId    = inventDim1.InventDimId;

                        if (PdsGlobal::pdsIsCWItem(inventSum.ItemId))
                        {
                            tmpWMSOnlineCounting.QtyOnHand      = inventSum.pdsCWPhysicalInventCalculated();
                        }
                        else
                        {
                            tmpWMSOnlineCounting.QtyOnHand      = inventSum.physicalInventCalculated();
                        }

                        tmpWMSOnlineCounting.QtyCounted     = 0;

                        tmpWMSOnlineCounting.insert();
                    }
                }
            }
        }

        while select forupdate tmpWMSOnlineCountingWork
            where tmpWMSOnlineCountingWork.QtyCounted == tmpWMSOnlineCountingWork.QtyOnHand
        {
            tmpWMSOnlineCountingWork.delete();
        }

        select firstonly tmpWMSOnlineCountingWork;
        if (tmpWMSOnlineCountingWork)
        {
            Args args = new Args();
            args.name(formstr(InventJournalCountTagSimulation));
            args.record(tmpWMSOnlineCounting);
            args.parmObject(InventDimFixedClass::newInventDimParm(inventDimParmCount));

            FormRun resultForm = classfactory.formRunClass(args);
            resultForm.init();
            resultForm.run();
            resultForm.detach();
        }
        else
        {
            info("@SYS65146");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        container   baseClass;
        container   zeroLinesQueryRunPacked;
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion   :
                [version,#CurrentList, zeroLinesQueryRunPacked, baseClass] = _packedClass;
                if (SysQuery::isPackedOk(zeroLinesQueryRunPacked))
                {
                    Query query = new Query(zeroLinesQueryRunPacked);
                    zeroLinesQueryRun = new QueryRun(query);
                }
                ret = super(baseClass);
                break;
            case 1   :
                [version,#CurrentList, baseClass] = _packedClass;
                ret = super(baseClass);
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferRelations</Name>
				<Source><![CDATA[
    protected void updateTransferRelations(JournalTableData _toJournalTableData)
    {
        InventJournalTable  inventJournalTable = _toJournalTableData.journalTable();
        InventJournalId     inventJournalId = inventJournalTable.JournalId;

        if (inventJournalTable.JournalType  == InventJournalType::Count)
        {
            // Transfer counting locks on InventItemLocation
            if (journalTableData.journalTransList().first())
            {
                do
                {
                    InventJournalTrans inventJournalTrans = journalTableData.journalTransList().item();
                    if (this.hasTransError(inventJournalTrans))
                    {
                        InventDim inventDim = inventJournalTrans.inventDim();
                        ttsbegin;
                        if (inventJournalTrans.isCountingStatusRegistrationEnabled(inventJournalTable))
                        {
							InventItemLocation::updateStopCounting( inventJournalTrans.ItemId, inventDim);                        
							InventItemLocation::updateStartCounting(inventJournalTrans.ItemId, inventDim, inventJournalId);
                        }
                        ttscommit;
                    }
                }
                while (journalTableData.journalTransList().next());
            }
        }

        super(_toJournalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateZeroLinesQuery</Name>
				<Source><![CDATA[
    protected void updateZeroLinesQuery()
    {
        this.initInventDimParmCount(InventJournalTable::find(this.parmJournalId()));
        QueryBuildDataSource queryBuildDataSource = zeroLinesQueryRun.query().dataSourceTable(tableNum(InventDim));
        queryBuildDataSource.sortClear();
        inventDimParmCount.queryAddSortField(queryBuildDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalCheckPost</Name>
				<Source><![CDATA[
    public void initializeJournalCheckPost(boolean _autoBlock, boolean _showInfoResult, JournalCheckPostType _journalCheckPostType, TableId _tableId, JournalId _journalId, JournalTransData _journalTransData = null)
    {
        super(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId, _journalTransData);

        this.getLast();

        this.parmAutoBlock(_autoBlock);
        this.parmShowInfoResult(_showInfoResult);
        this.parmJournalCheckPostType(_journalCheckPostType);
        this.parmJournalTableId(_tableId);
        this.parmJournalId(_journalId);
        this.parmThrowCheckFailed(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Please use factory InventJournalCheckPost::construct() instead', false, 31\05\2017)]
    public static InventJournalCheckPost_Tag construct()
    {
        return new InventJournalCheckPost_Tag();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    [SysObsolete('Please use factory InventJournalCheckPost::newJournalCheckPost() instead', false, 31\05\2017)]
    public static InventJournalCheckPost_Tag newJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId)
    {
        InventJournalCheckPost_Tag inventJournalCheckPost_Tag = InventJournalCheckPost_Tag::construct();

        InventJournalCheckPost_Tag.initializeJournalCheckPost(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId);

        return inventJournalCheckPost_Tag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the posting tag counting journal process can be ran in a new session.
    /// </summary>
    /// <returns>
    /// True if the posting tag counting journal process can be ran in a new session; otherwise, false
    /// </returns>
    protected boolean canRunInNewSession()
    {
        boolean ret;

        ret = super();

        ret = ret && !this.simulationPosting;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>