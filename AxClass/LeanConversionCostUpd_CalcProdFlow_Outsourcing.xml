<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanConversionCostUpd_CalcProdFlow_Outsourcing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanConversionCostUpd_CalcProdFlow_Outsourcing</c> class reverses the indirect and direct manufacturing
///    cost during a backflush costing when clearing outsourcing WIP.
/// </summary>
public class LeanConversionCostUpd_CalcProdFlow_Outsourcing extends LeanConversionCostUpd_CalcProdFlow
{
    LeanProductionFlowCostingRefRecId leanProductionFlowCostingRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdRouteTransConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists route transaction consumption in the database.
    /// </summary>
    /// <param name="_inventSiteId">
    ///    The invent site ID.
    /// </param>
    /// <param name="_prodRouteTrans">
    ///    A <c>ProdRouteTrans</c> record.
    /// </param>
    public void addProdRouteTransConsumption(InventSiteId _inventSiteId, ProdRouteTrans _prodRouteTrans)
    {
        LeanCostTmpOutsourcingRouteTransConsumption tmpOutsourcingRouteTransConsumption;

        tmpOutsourcingRouteTransConsumption.InventSiteId = _inventSiteId;
        tmpOutsourcingRouteTransConsumption.ProdRouteTrans = _prodRouteTrans.RecId;
        tmpOutsourcingRouteTransConsumption.LeanProductionFlowCosting = leanProductionFlowCostingRecId;
        tmpOutsourcingRouteTransConsumption.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static LeanConversionCostUpd_CalcProdFlow_Outsourcing construct()
    {
        return new LeanConversionCostUpd_CalcProdFlow_Outsourcing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProductionFlowCostingRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlowCostingRefRecId parmLeanProductionFlowCostingRecId(LeanProductionFlowCostingRefRecId _leanProductionFlowCostingRecId = leanProductionFlowCostingRecId)
    {
        leanProductionFlowCostingRecId = _leanProductionFlowCostingRecId;
        return leanProductionFlowCostingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>LeanConversionCostUpd_CalcProdFlow_Outsourcing</c> object.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> object that is used for posting ledger transactions.
    /// </param>
    /// <param name="_leanProductionFlowReference">
    ///    The production flow reference for which the conversion cost is posted.
    /// </param>
    /// <param name="_leanCostingFacade">
    ///    The lean costing facade object to use for retrieving resource consumptions.
    /// </param>
    /// <param name="_leanProductionFlowCostingRecId">
    ///    The record ID of the backflush costing run in progress.
    /// </param>
    /// <returns>
    ///    A new <c>LeanConversionCostUpd_CalcProdFlow_Outsourcing</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanConversionCostUpd_CalcProdFlow_Outsourcing newFromParameters(
        LedgerVoucher                       _ledgerVoucher,
        LeanProductionFlowReference         _leanProductionFlowReference,
        LeanCostingFacadeBase               _leanCostingFacade,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId
        )
    {
        LeanConversionCostUpd_CalcProdFlow_Outsourcing costUpd = LeanConversionCostUpd_CalcProdFlow_Outsourcing::construct();

        costUpd.parmLedgerVoucher(_ledgerVoucher);
        costUpd.parmProductionFlowReference(_leanProductionFlowReference);
        costUpd.parmLeanCostingFacade(_leanCostingFacade);
        costUpd.parmLeanProductionFlowCostingRecId(_leanProductionFlowCostingRecId);

        return costUpd;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>