<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConceptMainAccount_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ConceptMainAccount_MX</c> class supports the <c>ISRConceptMainAccount_MX</c> table, which is
///    used to link or unlink main accounts to ISR report setup
/// </summary>
/// <remarks>
///    This class provides methods to link or unlink all the main accounts to a particular concept
///    category and selected accounts to insert into the <c>ISRConceptMainAccount_MX</c> table.
/// </remarks>
class ConceptMainAccount_MX extends RunBase
{
    ISRConceptMainAccount_MX    isrConceptMainAccount;
    ISRConcept_MX               isrConcept;
    TmpFrmVirtual               tmpFrmVirtual;
    MainAccount                 mainAccount;
    boolean                     alreadyMarked;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMarked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the main account is marked for another concept category.
    /// </summary>
    /// <param name="_mainAccountRecID">
    ///    The <c>RecID</c> value of the <c>MainAccount</c> table.
    /// </param>
    /// <param name="_isrConceptRecId">
    ///    The <c>RecID</c> value of the <c>ISRConcept_MX</c> table.
    /// </param>
    /// <param name="_noYes">
    ///    A <c>NoYes</c> enumeration value that indicates whether the account is marked.
    /// </param>
    /// <returns>
    ///    true if any account is not marked for concept category; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the main account is already marked for another concept category it will throw a warning message.
    /// </remarks>
    public boolean checkMarked(
        RefRecID    _mainAccountRecID,
        RecId       _isrConceptRecId,
        NoYes       _noYes)
    {
        ISRConceptMainAccount_MX isrConceptMainAccountCheckMarked;
        alreadyMarked = true;

        if (_noYes == NoYes::Yes)
        {
            alreadyMarked = isrConceptMainAccountCheckMarked.checkMainAccountAlreadyMarked(_mainAccountRecID, _isrConceptRecId);
        }

        return alreadyMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkAllOrUnLinkAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks or unchecks all of the main accounts.
    /// </summary>
    /// <param name="_tmpFrmVirtual">
    ///    A <c>TmpFrmVirtual</c> table buffer that contains marked accounts.
    /// </param>
    /// <param name="_check">
    ///    A <c>NoYes</c> enumeration value that indicates whether to check or to uncheck all the main
    ///    accounts.
    /// </param>
    /// <param name="_recid">
    ///    A <c>RecID</c> value of the caller data source.
    /// </param>
    /// <returns>
    ///    true if any net changes were made; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the <paramref name="_check" /> parameter is set to the <c>NoYes::No</c> enumeration value, all
    ///    accounts will be unchecked. If the <paramref name="_check" /> parameter is set to the
    ///    <c>NoYes::Yes</c> enumeration value all accounts will be checked.This method only reports a change
    ///    if any of the accounts have had their checked status changed. For example, if all the accounts are
    ///    already checked and the <paramref name="_check" /> parameter is set to the <c>NoYes::Yes</c>
    ///    enumeration value, it will report false.
    /// </remarks>
    boolean linkAllOrUnLinkAll(
        TmpFrmVirtual   _tmpFrmVirtual,
        NoYes           _check,
        RecId           _recid = 0)
    {
        boolean onceMarked = true;
        NoYes inverseCheck = (_check == NoYes::No ? NoYes::Yes : NoYes::No);

        alreadyMarked = true;
        // Only process if there are actually records that need to be changed

        if (_recid)
        {
            while select _tmpFrmVirtual
            {
                alreadyMarked = this.checkMarked(_tmpFrmVirtual.RefRecId, _recid, NoYes::Yes);

                if (!alreadyMarked && _check == NoYes::Yes)
                {
                    onceMarked = false;
                }
            }
        }

        select count(RecId) from _tmpFrmVirtual
            where _tmpFrmVirtual.NoYes == inverseCheck;

        if (onceMarked && _tmpFrmVirtual)
        {
            // Update only the rows that need to be changed (Ignores any filters set)
            update_recordset _tmpFrmVirtual
                setting NoYes = _check
                where _tmpFrmVirtual.NoYes == inverseCheck;

            select _tmpFrmVirtual;
            return true;
        }

        select _tmpFrmVirtual;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkOrUnlinkMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks or unchecks one or more accounts
    /// </summary>
    /// <param name="_tmpFrmVirtual">
    ///    A <c>TmpFrmVirtual</c> table buffer that contains marked accounts.
    /// </param>
    /// <param name="_isrConceptRecId">
    ///    The <c>RecID</c> value of the <c>ISRConcept_MX</c> record.
    /// </param>
    /// <remarks>
    ///    If the <paramref name="_tmpFrmVirtual" /> parameter does not have a particular main account marked
    ///    it will delete records in the <c>ISRConceptMainAccount_MX</c> table. If the <paramref
    ///    name="_tmpFrmVirtual" /> parameter has a particular main account marked it will create records in
    ///    the <c>ISRConceptMainAccount_MX</c>.
    /// </remarks>
    public void linkOrUnlinkMainAccount(
        TmpFrmVirtual   _tmpFrmVirtual,
        RecId           _isrConceptRecId)
    {
        delete_from isrConceptMainAccount
            where isrConceptMainAccount.Concept == _isrConceptRecId;

        while select _tmpFrmVirtual
            where _tmpFrmVirtual.NoYes == NoYes::Yes
        {
            isrConceptMainAccount = ISRConceptMainAccount_MX::findByMainAccountAndConcept(_tmpFrmVirtual.RefRecId, _isrConceptRecId);

            if (!isrConceptMainAccount)
            {
                isrConceptMainAccount.Concept     = _isrConceptRecId;
                isrConceptMainAccount.MainAccount = _tmpFrmVirtual.RefRecId;
                isrConceptMainAccount.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>