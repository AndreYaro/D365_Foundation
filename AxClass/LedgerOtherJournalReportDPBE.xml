<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerOtherJournalReportDPBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report data provider class for <c>LedgerOtherJournalReportBE</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>LedgerOtherJournalReportBE</c> SSRS report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(LedgerPurchaseJournalReportBE)),
    SRSReportParameterAttribute(classStr(LedgerOtherJournalReportCntrctBE))
]
class LedgerOtherJournalReportDPBE extends SRSReportDataProviderPreprocessTempDB
{
    private const str FeatureReference = 'BE-00024';

    LegFinJourRepTmpLegTransBE      legFinJourRepTmpLegTransBE;
    GeneralJournalEntry             generalJournalEntry;
    GeneralJournalAccountEntry      generalJournalAccountEntry;
    MainAccountLedgerDimensionView  mainAccountLedgerDimensionView;

    TmpAccountTotalsBE              tmpAccountTotalsBE;
    TmpTaxJournalReport_BE          tmpTaxJournalReport_BE;
    TmpTaxTransTotalsBE             tmpTaxTransTotals_BE;
    TmpTaxTransTotalsBE             tmpTaxTransTotals_BE2;
    TmpTaxPurchLedger               tmpTaxPurchLedger;
    TmpTaxSalesLedger               tmpTaxSalesLedger;
    TmpTaxSalesLedger               tmpTaxSumSalesLedger;
    TmpTaxPurchLedger               tmpTaxSumPurchLedger;
    PageNo                          pageNumStart;
    boolean                         firstVoucherLine;
    boolean                         newPageNum;
    NoYes                           finalReporting;
    NoYes                           compression;
    LedgerPostingJournalId          ledgerPostingJournalId;
    FromDate                        fromDate;
    FromDate                        periodFromDate;
    FromDate                        periodOpeningDate;
    ToDate                          toDate;
    ToDate                          periodToDate;
    ToDate                          periodClosingDate;
    real                            totDeb;
    real                            totCred;
    real                            totInvBase;
    real                            totInvGds;
    real                            totInvCharge;
    real                            totCnBase;
    real                            totCnGds;
    real                            totCnCharge;
    str                             stramountcur;
    int64                           voucherlines;
    boolean                         isCreditNote;
    Voucher                         prevVoucher;
    TransDate                       prevTransdate;
    VendTrans                       vendTrans;
    CustTrans                       custTrans;

    protected boolean isTaxSpecificExchangeRateEnabled;

    #taxReportingCodesBE
    #Define.maxLinesOnPage(52)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        isTaxSpecificExchangeRateEnabled = TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxBoxAmountPurch</Name>
				<Source><![CDATA[
    protected TmpTaxPurchLedger addTaxBoxAmountPurch(TmpTaxPurchLedger  _tmpTaxPurchLedger,
                                                     TaxReportField     _taxReportField,
                                                     AmountMST          _amountMST,
                                                     TaxAmount          _taxInCostPriceMST = 0)
    {
        TmpTaxPurchLedger taxPurchLedger = _tmpTaxPurchLedger;

        switch (_taxReportField)
        {
            case #field_81 : taxPurchLedger.TaxBaseAmountMSTBox81         += (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_82 : taxPurchLedger.TaxBaseAmountMSTBox82         += (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_83 : taxPurchLedger.TaxBaseAmountMSTBox83         += (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_86 : taxPurchLedger.TaxExemptAmountMSTBox86       += (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_87 : taxPurchLedger.TaxExemptAmountMSTBox87       += (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_84 : taxPurchLedger.CreditNoteAmountMSTBox84      -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_85 : taxPurchLedger.CreditNoteAmountMSTBox85      -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_55 : taxPurchLedger.TaxAmountMSTBox55             += _amountMST;
                             break;
            case #field_56 : taxPurchLedger.TaxAmountMSTBox56             += _amountMST;
                             break;
            case #field_57 : taxPurchLedger.TaxAmountMSTBox57             += _amountMST;
                             break;
            case #field_63 : taxPurchLedger.TaxAmountMSTBox63             -= (_amountMST - _taxInCostPriceMST);
                             break;
            case #field_59 : taxPurchLedger.DeductibleAmountMSTBox59      += (_amountMST - _taxInCostPriceMST);
                             break;
            case #field_8184 : taxPurchLedger.TaxBaseAmountMSTBox81       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox84    -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_8185 : taxPurchLedger.TaxBaseAmountMSTBox81       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox85    -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_8285 : taxPurchLedger.TaxBaseAmountMSTBox82       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox85    -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_8384 : taxPurchLedger.TaxBaseAmountMSTBox83       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox84    -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_8385 : taxPurchLedger.TaxBaseAmountMSTBox83       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox85    -= (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_8287 : taxPurchLedger.TaxBaseAmountMSTBox82       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.TaxExemptAmountMSTBox87     += (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_828785 : taxPurchLedger.TaxBaseAmountMSTBox82     += (_amountMST + _taxInCostPriceMST);
                                 taxPurchLedger.TaxExemptAmountMSTBox87   -= (_amountMST + _taxInCostPriceMST);
                                 taxPurchLedger.CreditNoteAmountMSTBox85  -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_8284 : taxPurchLedger.TaxBaseAmountMSTBox82       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox84    -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_8187 : taxPurchLedger.TaxBaseAmountMSTBox81       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.TaxExemptAmountMSTBox87     -= (_amountMST + _taxInCostPriceMST);
                             break;
            case #field_8387 : taxPurchLedger.TaxBaseAmountMSTBox83       += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.TaxExemptAmountMSTBox87     -= (_amountMST + _taxInCostPriceMST);
                             break;
        }
        return taxPurchLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxBoxAmountSales</Name>
				<Source><![CDATA[
    protected TmpTaxSalesLedger addTaxBoxAmountSales(TmpTaxSalesLedger  _tmpTaxSalesLedger,
                                                     TaxReportField     _taxReportField,
                                                     AmountMST          _amountMST)
    {
        TmpTaxSalesLedger taxSalesLedger  = _tmpTaxSalesLedger;

        switch (_taxReportField)
        {
            case #field_00 : taxSalesLedger.TaxBaseAmountMSTBox00     -= _amountMST;
                             break;
            case #field_01 : taxSalesLedger.TaxBaseAmountMSTBox01     -= _amountMST;
                             break;
            case #field_02 : taxSalesLedger.TaxBaseAmountMSTBox02     -= _amountMST;
                             break;
            case #field_03 : taxSalesLedger.TaxBaseAmountMSTBox03     -= _amountMST;
                             break;
            case #field_45 : taxSalesLedger.TaxBaseAmountMSTBox45     -= _amountMST;
                             break;
            case #field_46 : taxSalesLedger.TaxExemptAmountMSTBox46   -= _amountMST;
                             break;
            case #field_47 : taxSalesLedger.TaxExemptAmountMSTBox47   -= _amountMST;
                             break;
            case #field_48 : taxSalesLedger.CreditNoteAmountMSTBox48  += _amountMST;
                             break;
            case #field_49 : taxSalesLedger.CreditNoteAmountMSTBox49  += _amountMST;
                             break;
            case #field_54 : taxSalesLedger.TaxAmountMSTBox54         -= _amountMST;
                             break;
            case #field_64 : taxSalesLedger.TaxAmountMSTBox64         += _amountMST;
                             break;
        }
        return taxSalesLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDebCredTotals</Name>
				<Source><![CDATA[
    void calcDebCredTotals()
    {
        select tmpAccountTotalsBE
            where tmpAccountTotalsBE.AccountNum  == mainAccountLedgerDimensionView.MainAccount;

        if (generalJournalAccountEntry.AccountingCurrencyAmount  > 0)
        {
            totDeb   += generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            totCred  += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
        }
        if (tmpAccountTotalsBE)
        {
            if (generalJournalAccountEntry.AccountingCurrencyAmount >= 0)
            {
                tmpAccountTotalsBE.AmountMSTDebit   += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                tmpAccountTotalsBE.AmountMSTCredit  += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            tmpAccountTotalsBE.update();
        }
        else
        {
            tmpAccountTotalsBE.AccountNum   = mainAccountLedgerDimensionView.MainAccount;
            tmpAccountTotalsBE.AccountName  = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);

            if (generalJournalAccountEntry.AccountingCurrencyAmount >= 0)
            {
                tmpAccountTotalsBE.AmountMSTDebit   += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                tmpAccountTotalsBE.AmountMSTCredit  += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            tmpAccountTotalsBE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total tax amounts and inserts into the <c>TmpTaxTransTotals_BE</c> table.
    /// </summary>
    void calcTaxTotals()
    {
        select tmpTaxTransTotals_BE
            where tmpTaxTransTotals_BE.TaxCode == tmpTaxJournalReport_BE.TaxCode;

        if (isCreditNote)
        {
            if (tmpTaxTransTotals_BE)
            {
                tmpTaxTransTotals_BE.TaxCnAmount     += -(tmpTaxJournalReport_BE.TaxAmountGoods+ tmpTaxJournalReport_BE.TaxAmountInvest+tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxCnBase       += -(tmpTaxJournalReport_BE.TaxBaseAMount);
                tmpTaxTransTotals_BE.TaxCnAmCharge   += -(tmpTaxJournalReport_BE.TaxAmountCharge);
                tmpTaxTransTotals_BE.update();
            }
            else
            {
                tmpTaxTransTotals_BE.TaxCode         = tmpTaxJournalReport_BE.TaxCode;
                tmpTaxTransTotals_BE.TaxName         = TaxTable::find(tmpTaxJournalReport_BE.TaxCode).TaxName;
                tmpTaxTransTotals_BE.TaxCnAmount     += -(tmpTaxJournalReport_BE.TaxAmountGoods+ tmpTaxJournalReport_BE.TaxAmountInvest+tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxCnBase       += -(tmpTaxJournalReport_BE.TaxBaseAMount);
                tmpTaxTransTotals_BE.TaxCnAmCharge   += -(tmpTaxJournalReport_BE.TaxAmountCharge);
                tmpTaxTransTotals_BE.insert();
            }
        }
        else
        {
            if (tmpTaxTransTotals_BE)
            {
                tmpTaxTransTotals_BE.TaxInvAmount    += (tmpTaxJournalReport_BE.TaxAmountGoods + tmpTaxJournalReport_BE.TaxAmountInvest + tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxInvBase      += tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxTransTotals_BE.TaxInvAmCharge  += tmpTaxJournalReport_BE.TaxAmountCharge;
                tmpTaxTransTotals_BE.update();
            }
            else
            {
                tmpTaxTransTotals_BE.TaxCode         = tmpTaxJournalReport_BE.TaxCode;
                tmpTaxTransTotals_BE.TaxName         = TaxTable::find(tmpTaxJournalReport_BE.TaxCode).TaxName;
                tmpTaxTransTotals_BE.TaxInvAmount    += (tmpTaxJournalReport_BE.TaxAmountGoods + tmpTaxJournalReport_BE.TaxAmountInvest + tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxInvBase      += tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxTransTotals_BE.TaxInvAmCharge  += tmpTaxJournalReport_BE.TaxAmountCharge;
                tmpTaxTransTotals_BE.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeJournalReport</Name>
				<Source><![CDATA[
    void closeJournalReport()
    {
        this.findTaxTransactions();
        this.printTaxInfoPerVoucher(); //print splitted tax info

        this.taxBoxCalcSales();
        this.taxBoxCalcPurch();
        this.printTaxBoxInfo(); //print taxbox info

        if (this.finalReporting())
        {
            this.updateJournalPeriodFinalPrint();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compression</Name>
				<Source><![CDATA[
    private Description compression()
    {
        return compression ? "@SYS79685" : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalReporting</Name>
				<Source><![CDATA[
    private Description finalReporting()
    {
        return finalReporting ? "@SYS79662" : "@SYS79663";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerPostingJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records in the <c>GeneralJournalEntry</c> table that are based on the
    ///    <c>AccountingDate</c> and <c>ReferenceNumber</c> values.
    /// </summary>
    /// <param name="_accountingDate">
    ///    The <c>AccountingDate</c> field value of the record to find.
    /// </param>
    /// <param name="_voucher">
    ///    The <c>Voucher</c> value of the record to find.
    /// </param>
    /// <returns>
    ///    A record in the <c>GeneralJournalEntry</c> table; otherwise, an empty record.
    /// </returns>
    public LedgerPostingJournalId findLedgerPostingJournalId(TransDate  _accountingDate,
                                                             Voucher    _voucher)
    {
        SubledgerVoucherGeneralJournalEntry voucherLink;

        select RecId from voucherLink
            where voucherLink.Voucher == _voucher &&
                voucherLink.AccountingDate == _accountingDate &&
                voucherLink.VoucherDataAreaId == curext()
            join generalJournalEntry
                where generalJournalEntry.RecId == voucherLink.GeneralJournalEntry;

        return generalJournalEntry.LedgerPostingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records of <c>TaxTrans</c> and inserts into Temp table that is based on
    ///    <c>LedgerPostingJournal</c> and <c>AccountingDate</c> values.
    /// </summary>
    void findTaxTransactions()
    {
        TaxTrans                            taxTrans                   = null;
        GeneralJournalEntry                 generalJournalEntryBuffer  = null;
        SubledgerVoucherGeneralJournalEntry voucherLink;

        while select Voucher, AccountingDate from voucherLink
            group by Voucher, AccountingDate
            where voucherLink.AccountingDate >= periodFromDate &&
                voucherLink.AccountingDate <= periodToDate &&
                voucherLink.VoucherDataAreaId == curext()
            join generalJournalEntryBuffer
                where generalJournalEntryBuffer.RecId == voucherLink.GeneralJournalEntry &&
                    generalJournalEntryBuffer.LedgerPostingJournal  == ledgerPostingJournalId
        {
            if (! compression)
            {
                while select taxTrans
                    where taxTrans.Voucher    == voucherLink.Voucher
                       && taxTrans.TransDate  == voucherLink.AccountingDate
                {
                    this.insertTmpTaxJournalReport_BE(taxTrans);
                }
            }
            else
            {
                while select Voucher, TransDate, TaxCode, sum (TaxBaseAmount), sum(TaxAmount)
                    from taxTrans
                    index hint VoucherDateIdx
                    group by Voucher, TransDate, TaxCode
                    where taxTrans.Voucher    == voucherLink.Voucher
                       && taxTrans.TransDate  == voucherLink.AccountingDate
                {
                    this.insertTmpTaxJournalReport_BE(taxTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves records of the <c>GeneralJournalEntry</c> table that is based on the specified
    ///    <c>AccountingDate</c> and <c>ReferenceNumber</c> values.
    /// </summary>
    /// <param name="_voucher">
    ///    A <c>ReferenceNumber</c> field value.
    /// </param>
    /// <param name="_transDate">
    ///    A <c>AccountingDate</c> field value.
    /// </param>
    /// <returns>
    ///    A <c>GeneralJournalEntry</c> table record.
    /// </returns>
    public GeneralJournalEntry findVoucherDate(Voucher    _voucher,
                                               TransDate  _transDate)
    {
        SubledgerVoucherGeneralJournalEntry voucherLink;

        generalJournalEntry.selectLocked(false);

        select RecId from voucherLink
            where voucherLink.Voucher  == _voucher &&
                voucherLink.AccountingDate   == _transDate &&
                voucherLink.VoucherDataAreaId == curext()
            join generalJournalEntry
                where generalJournalEntry.RecId == voucherLink.GeneralJournalEntry;

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegFinJourRepTmpLegTransBE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>LegFinJourRepTmpLegTransBE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>LegFinJourRepTmpLegTransBE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LegFinJourRepTmpLegTransBE))
    ]
    public LegFinJourRepTmpLegTransBE getLegFinJourRepTmpLegTransBE()
    {
        select legFinJourRepTmpLegTransBE;
        return legFinJourRepTmpLegTransBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAccountTotalsBE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpAccountTotalsBE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpAccountTotalsBE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpAccountTotalsBE))
    ]
    public TmpAccountTotalsBE getTmpAccountTotalsBE()
    {
        select tmpAccountTotalsBE;
        return tmpAccountTotalsBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxJournalReport_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpTaxJournalReport_BE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxJournalReport_BE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpTaxJournalReport_BE))
    ]
    public TmpTaxJournalReport_BE getTmpTaxJournalReport_BE()
    {
        select tmpTaxJournalReport_BE;
        return tmpTaxJournalReport_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxPurchLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpTaxPurchLedger</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxPurchLedger</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpTaxPurchLedger))
    ]
    public TmpTaxPurchLedger getTmpTaxPurchLedger()
    {
        select tmpTaxPurchLedger;
        return tmpTaxPurchLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxSalesLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpTaxSalesLedger</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxSalesLedger</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpTaxSalesLedger))
    ]
    public TmpTaxSalesLedger getTmpTaxSalesLedger()
    {
        select tmpTaxSalesLedger;
        return tmpTaxSalesLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxTransTotalsBE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpTaxTransTotalsBE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxTransTotalsBE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpTaxTransTotalsBE))
    ]
    public TmpTaxTransTotalsBE getTmpTaxTransTotalsBE()
    {
        select tmpTaxTransTotals_BE where ((tmpTaxTransTotals_BE.TaxCode!='') || (tmpTaxTransTotals_BE.TaxInvAmount!=0) ||(tmpTaxTransTotals_BE.TaxCnAmount!=0));
        return tmpTaxTransTotals_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxPurchLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>TmpTaxPurchLedger</c> table if no record exists; otherwise, updates the
    ///    table.
    /// </summary>
    /// <param name="_tmpTaxPurchLedger">
    ///    A <c>TmpTaxPurchLedger</c> table buffer.
    /// </param>
    protected void insertInTmpTaxPurchLedger(TmpTaxPurchLedger _tmpTaxPurchLedger)
    {
        select tmpTaxPurchLedger
        where tmpTaxPurchLedger.LedgerPostingJournalId  == _tmpTaxPurchLedger.LedgerPostingJournalId &&
              tmpTaxPurchLedger.Voucher                 == _tmpTaxPurchLedger.Voucher                &&
              tmpTaxPurchLedger.TransDate               == _tmpTaxPurchLedger.TransDate;
        if (tmpTaxPurchLedger)
        {
            tmpTaxPurchLedger.TaxBaseAmountMSTBox81     += _tmpTaxPurchLedger.TaxBaseAmountMSTBox81;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox82     += _tmpTaxPurchLedger.TaxBaseAmountMSTBox82;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox83     += _tmpTaxPurchLedger.TaxBaseAmountMSTBox83;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox86   += _tmpTaxPurchLedger.TaxExemptAmountMSTBox86;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox87   += _tmpTaxPurchLedger.TaxExemptAmountMSTBox87;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox84  += _tmpTaxPurchLedger.CreditNoteAmountMSTBox84;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox85  += _tmpTaxPurchLedger.CreditNoteAmountMSTBox85;
            tmpTaxPurchLedger.TaxAmountMSTBox55         += _tmpTaxPurchLedger.TaxAmountMSTBox55;
            tmpTaxPurchLedger.TaxAmountMSTBox56         += _tmpTaxPurchLedger.TaxAmountMSTBox56;
            tmpTaxPurchLedger.TaxAmountMSTBox57         += _tmpTaxPurchLedger.TaxAmountMSTBox57;
            tmpTaxPurchLedger.TaxAmountMSTBox63         += _tmpTaxPurchLedger.TaxAmountMSTBox63;
            tmpTaxPurchLedger.DeductibleAmountMSTBox59  += _tmpTaxPurchLedger.DeductibleAmountMSTBox59;
            tmpTaxPurchLedger.AmountMSTInclTax          += _tmpTaxPurchLedger.AmountMSTInclTax;

            tmpTaxPurchLedger.update();
        }
        else
        {
            tmpTaxPurchLedger.LedgerPostingJournalId    = _tmpTaxPurchLedger.LedgerPostingJournalId;
            tmpTaxPurchLedger.Voucher                   = _tmpTaxPurchLedger.Voucher;
            tmpTaxPurchLedger.TransDate                 = _tmpTaxPurchLedger.TransDate;
            tmpTaxPurchLedger.VendAccount               = _tmpTaxPurchLedger.VendAccount;
            tmpTaxPurchLedger.InvoiceId                 = _tmpTaxPurchLedger.InvoiceId;
            tmpTaxPurchLedger.AmountMSTInclTax          = _tmpTaxPurchLedger.AmountMSTInclTax;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox81     = _tmpTaxPurchLedger.TaxBaseAmountMSTBox81;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox82     = _tmpTaxPurchLedger.TaxBaseAmountMSTBox82;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox83     = _tmpTaxPurchLedger.TaxBaseAmountMSTBox83;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox86   = _tmpTaxPurchLedger.TaxExemptAmountMSTBox86;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox87   = _tmpTaxPurchLedger.TaxExemptAmountMSTBox87;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox84  = _tmpTaxPurchLedger.CreditNoteAmountMSTBox84;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox85  = _tmpTaxPurchLedger.CreditNoteAmountMSTBox85;
            tmpTaxPurchLedger.TaxAmountMSTBox55         = _tmpTaxPurchLedger.TaxAmountMSTBox55;
            tmpTaxPurchLedger.TaxAmountMSTBox56         = _tmpTaxPurchLedger.TaxAmountMSTBox56;
            tmpTaxPurchLedger.TaxAmountMSTBox57         = _tmpTaxPurchLedger.TaxAmountMSTBox57;
            tmpTaxPurchLedger.TaxAmountMSTBox63         = _tmpTaxPurchLedger.TaxAmountMSTBox63;
            tmpTaxPurchLedger.DeductibleAmountMSTBox59  = _tmpTaxPurchLedger.DeductibleAmountMSTBox59;
            tmpTaxPurchLedger.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxSalesLedger</Name>
				<Source><![CDATA[
    protected void insertInTmpTaxSalesLedger(TmpTaxSalesLedger _tmpTaxSalesLedger)
    {
        select tmpTaxSalesLedger
        where tmpTaxSalesLedger.LedgerPostingJournalId  == _tmpTaxSalesLedger.LedgerPostingJournalId &&
              tmpTaxSalesLedger.Voucher                 == _tmpTaxSalesLedger.Voucher                &&
              tmpTaxSalesLedger.TransDate               == _tmpTaxSalesLedger.TransDate;
        if (tmpTaxSalesLedger)
        {
            tmpTaxSalesLedger.TaxBaseAmountMSTBox00     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox00;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox01     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox01;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox02     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox02;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox03     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox03;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox45     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox45;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox46   += _tmpTaxSalesLedger.TaxExemptAmountMSTBox46;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox47   += _tmpTaxSalesLedger.TaxExemptAmountMSTBox47;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox48  += _tmpTaxSalesLedger.CreditNoteAmountMSTBox48;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox49  += _tmpTaxSalesLedger.CreditNoteAmountMSTBox49;
            tmpTaxSalesLedger.TaxAmountMSTBox54         += _tmpTaxSalesLedger.TaxAmountMSTBox54;
            tmpTaxSalesLedger.TaxAmountMSTBox64         += _tmpTaxSalesLedger.TaxAmountMSTBox64;
            tmpTaxSalesLedger.AmountMSTInclTax          += _tmpTaxSalesLedger.AmountMSTInclTax;

            tmpTaxSalesLedger.update();
        }
        else
        {
            tmpTaxSalesLedger.LedgerPostingJournalId    = _tmpTaxSalesLedger.LedgerPostingJournalId;
            tmpTaxSalesLedger.Voucher                   = _tmpTaxSalesLedger.Voucher;
            tmpTaxSalesLedger.TransDate                 = _tmpTaxSalesLedger.TransDate;
            tmpTaxSalesLedger.CustAccount               = _tmpTaxSalesLedger.CustAccount;
            tmpTaxSalesLedger.AmountMSTInclTax          = _tmpTaxSalesLedger.AmountMSTInclTax;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox00     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox00;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox01     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox01;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox02     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox02;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox03     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox03;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox45     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox45;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox46   = _tmpTaxSalesLedger.TaxExemptAmountMSTBox46;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox47   = _tmpTaxSalesLedger.TaxExemptAmountMSTBox47;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox48  = _tmpTaxSalesLedger.CreditNoteAmountMSTBox48;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox49  = _tmpTaxSalesLedger.CreditNoteAmountMSTBox49;
            tmpTaxSalesLedger.TaxAmountMSTBox54         = _tmpTaxSalesLedger.TaxAmountMSTBox54;
            tmpTaxSalesLedger.TaxAmountMSTBox64         = _tmpTaxSalesLedger.TaxAmountMSTBox64;
            tmpTaxSalesLedger.InvoiceId                 = _tmpTaxSalesLedger.InvoiceId;

            tmpTaxSalesLedger.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxJournalReport_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>TmpTaxJournalReport_BE</c> table if a <c>Voucher</c> object exists in
    ///    <c>TaxTrans</c> table.
    /// </summary>
    /// <param name="_taxTrans">
    ///    A <c>TaxTrans</c> table buffer.
    /// </param>
    void insertTmpTaxJournalReport_BE(TaxTrans _taxTrans)
    {
        boolean   isInvoice      = true;
        TaxAmount taxAmount      = 0;
        TaxBase   taxBaseAmount  = 0;

        if (_taxTrans.Voucher)
        {
            isInvoice                               = !this.isCreditNote(_taxTrans);
            tmpTaxJournalReport_BE.Voucher          = _taxTrans.Voucher;
            tmpTaxJournalReport_BE.Transdate        = _taxTrans.TransDate;
            tmpTaxJournalReport_BE.TaxBaseAMount    = isInvoice? abs(_taxTrans.TaxBaseAmount) : - abs(_taxTrans.TaxBaseAmount);
            tmpTaxJournalReport_BE.TaxCode          = _taxTrans.TaxCode;
            tmpTaxJournalReport_BE.TaxAmountCharge  = _taxTrans.TaxInCostPriceMST;
            taxAmount                               = isInvoice? abs(_taxTrans.TaxAmount) : - abs(_taxTrans.TaxAmount);
            taxBaseAmount                           = isInvoice? abs(_taxTrans.TaxBaseAmount) : - abs(_taxTrans.TaxBaseAmount);
            switch (TaxItemGroupHeading::find(_taxTrans.TaxItemGroup).euSalesListType)
            {
                case EUSalesListType::Item:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = taxAmount;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = 0;
                    tmpTaxJournalReport_BE.TaxAmountServices      = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = taxBaseAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = 0;
                    break;
                case EUSalesListType::Service:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = 0;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = 0;
                    tmpTaxJournalReport_BE.TaxAmountServices      = taxAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = taxBaseAmount;
                    break;
                case EUSalesListType::Investment:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = 0;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = taxAmount;
                    tmpTaxJournalReport_BE.TaxAmountServices      = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = taxBaseAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = 0;
                    break;
                default:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = 0;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = 0;
                    tmpTaxJournalReport_BE.TaxAmountServices      = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = 0;
                break;
            }
            tmpTaxJournalReport_BE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNo</Name>
				<Source><![CDATA[
    private  InvoiceId invoiceNo()
    {
        InvoiceId ret;

        if (vendTrans)
        {
            ret  = vendTrans.Invoice;
        }
        if (custTrans)
        {
            ret  = custTrans.Invoice;
        }
        if (! ret)
        {
            ret  = generalJournalEntry.DocumentNumber;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    boolean isCreditNote(TaxTrans _taxTrans)
    {
        return (_taxTrans.TaxBaseAmount > 0 && (_taxTrans.TaxDirection == TaxDirection::OutgoingTax || (isTaxSpecificExchangeRateEnabled && _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W))) ||
               (_taxTrans.TaxBaseAmount < 0 && (_taxTrans.TaxDirection == TaxDirection::IncomingTax || (isTaxSpecificExchangeRateEnabled && _taxTrans.TaxDirection == TaxDirection::IncomingTax_W)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPeriodFinalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>LedgerJournalPeriodFinalPrintBE</c> table.
    /// </summary>
    void journalPeriodFinalPrint()
    {
        LedgerJournalPeriodFinalPrintBE jpFinalPrintBE      = null;
        LedgerJournalPeriodFinalPrintBE jpFinalPrintBEPrev  = null;
        LedgerJournalTableTypeBE        lpJournal           = null;

        if (ledgerPostingJournalId)
        {
            jpFinalPrintBEPrev                      = LedgerJournalPeriodFinalPrintBE::findPrev(ledgerPostingJournalId,periodFromDate-1,false);

            if ((jpFinalPrintBEPrev) && (!newPageNum))
            {
                jpFinalPrintBE.NumberLastPage      = jpFinalPrintBEPrev.NumberLastPage;
            }
            jpFinalPrintBE.LedgerPostingJournalId  = ledgerPostingJournalId;
            jpFinalPrintBE.Name                    = LedgerPostingJournal::find(ledgerPostingJournalId).Name;
            jpFinalPrintBE.PeriodStart             = periodFromDate;
            jpFinalPrintBE.PeriodEnd               = periodToDate;
            jpFinalPrintBE.Compressed              = compression;
            jpFinalPrintBE.insert();
        }
        else
        {
            while select LedgerPostingJournalId from lpJournal
                where lpJournal.JournalTypeBE  == LedgerJournalTypeBE::Purchase
            {
                jpFinalPrintBEPrev  = LedgerJournalPeriodFinalPrintBE::findPrev(lpJournal.LedgerPostingJournalId,periodFromDate-1,false);

                if ((jpFinalPrintBEPrev) && (!newPageNum))
                {
                    jpFinalPrintBE.NumberLastPage  = jpFinalPrintBEPrev.NumberLastPage;
                }
                jpFinalPrintBE.LedgerPostingJournalId  = lpJournal.LedgerPostingJournalId;
                jpFinalPrintBE.Name                    = LedgerPostingJournal::find(lpJournal.LedgerPostingJournalId).Name;
                jpFinalPrintBE.PeriodStart             = periodFromDate;
                jpFinalPrintBE.PeriodEnd               = periodToDate;
                jpFinalPrintBE.Compressed              = compression;
                jpFinalPrintBE.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxBoxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records of the <c>TmpTaxPurchLedger</c> table.
    /// </summary>
    void printTaxBoxInfo()
    {
        tmpTaxSumPurchLedger  = tmpTaxPurchLedger;
        select sum(TaxAmountMSTBox55),          sum(TaxAmountMSTBox56),
               sum(TaxAmountMSTBox57),          sum(DeductibleAmountMSTBox59),
               sum(TaxBaseAmountMSTBox81),      sum(TaxBaseAmountMSTBox82),
               sum(TaxBaseAmountMSTBox83),      sum(CreditNoteAmountMSTBox84),
               sum(CreditNoteAmountMSTBox85),   sum(TaxAmountMSTBox63),
               sum(TaxExemptAmountMSTBox86),    sum(TaxExemptAmountMSTBox87)
            from tmpTaxPurchLedger;

        tmpTaxSumSalesLedger = tmpTaxSalesLedger;
        select sum(TaxBaseAmountMSTBox00),      sum(TaxBaseAmountMSTBox01),
               sum(TaxBaseAmountMSTBox02),      sum(TaxBaseAmountMSTBox03),
               sum(TaxBaseAmountMSTBox45),      sum(TaxExemptAmountMSTBox46),
               sum(TaxExemptAmountMSTBox47),    sum(CreditNoteAmountMSTBox48),
               sum(CreditNoteAmountMSTBox49),   sum(TaxAmountMSTBox54),
               sum(TaxAmountMSTBox64)
            from tmpTaxSalesLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxInfoPerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>Amount</c> totals.
    /// </summary>
    void printTaxInfoPerVoucher()
    {
        Counter   ctr             = 0;
        TaxTrans  taxTrans        = null;
        boolean   firstLine       = true;
        int       taxTotJourPage  = 1;

        prevVoucher  ='';
        while select tmpTaxJournalReport_BE
            order by  Voucher, Transdate, TaxCode
        {
            if (firstLine)
            {
                firstLine    = false;
                prevVoucher  = tmpTaxJournalReport_BE.Voucher;
            }
            else
            {
                if (tmpTaxJournalReport_BE.Voucher  != prevVoucher && ctr  != 0)
                {
                    prevVoucher  = tmpTaxJournalReport_BE.Voucher;
                }
            }
            select sum(TaxBaseAmount) from taxTrans
                index hint VoucherDateIdx
                group by Voucher, TransDate,TaxDirection
                where taxTrans.Voucher    == tmpTaxJournalReport_BE.Voucher
                   && taxTrans.TransDate  == tmpTaxJournalReport_BE.Transdate;

            isCreditNote  = this.isCreditNote(taxTrans);
            if (isCreditNote)
            {
                tmpTaxJournalReport_BE.IsCN                     = NoYes::Yes;
                tmpTaxJournalReport_BE.TaxBaseAmountCN          = tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxJournalReport_BE.TaxAmountGoodsCN         = tmpTaxJournalReport_BE.TaxAmountGoods;
                tmpTaxJournalReport_BE.TaxAmountInvestCN        = tmpTaxJournalReport_BE.TaxAmountInvest;
                tmpTaxJournalReport_BE.TaxAmountServicesCN      = tmpTaxJournalReport_BE.TaxAmountServices;
                tmpTaxJournalReport_BE.TaxBaseAmountServicesCN  = tmpTaxJournalReport_BE.TaxBaseAmountServices;
                tmpTaxJournalReport_BE.TaxBaseAmountInvestCN    = tmpTaxJournalReport_BE.TaxBaseAmountInvest;
                tmpTaxJournalReport_BE.TaxBaseAmountGoodsCN     = tmpTaxJournalReport_BE.TaxBaseAmountGoods;
            }
            else
            {
                tmpTaxJournalReport_BE.IsCN  = NoYes::No;
            }

            this.calcTaxTotals();

            if (#maxLinesOnPage - ctr  <= 0)
            {
                taxTotJourPage++;
                ctr=0;
            }

           tmpTaxJournalReport_BE.PageNum  = taxTotJourPage;
           tmpTaxJournalReport_BE.update();
           ctr++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        SubledgerVoucherGeneralJournalEntry voucherLink;
        SubledgerVoucherGeneralJournalEntry voucherLinkCount;
        Counter                             ctr            = 0;
        Counter                             lineCnt        = 0;
        boolean                             printInvoice   = false;
        Query                               query;
        QueryRun                            queryRun;
        recId                               calendarRecId  = CompanyInfoHelper::fiscalCalendarRecId();
        int                                 pageNum        = 1;
        LedgerOtherJournalReportCntrctBE    contract  = this.parmDataContract() as LedgerOtherJournalReportCntrctBE;
        GeneralJournalEntry                 localGeneralJournalEntry;
        GeneralJournalAccountEntry          localGeneralJournalAccountEntry;

        query                   = this.parmQuery();
        compression             = contract.parmCompression();
        finalReporting          = contract.parmFinalReporting();
        fromDate                = contract.parmFromDate();
        toDate                  = contract.parmToDate();
        ledgerPostingJournalId  = contract.parmOtherLedgerPostingJournalId();

        periodFromDate     = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId, fromDate);
        periodToDate       = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,toDate);
        periodClosingDate  = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(calendarRecId,periodFromDate);
        periodOpeningDate  = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,periodFromDate);
        pageNum            = this.setPageNumStart();

        tmpAccountTotalsBE.skipTTSCheck(true);
        tmpTaxJournalReport_BE.skipTTSCheck(true);
        tmpTaxTransTotals_BE.skipTTSCheck(true);
        tmpTaxPurchLedger.skipTTSCheck(true);
        tmpTaxSalesLedger.skipTTSCheck(true);

        if (ledgerPostingJournalId)
        {
            query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, LedgerPostingJournal)).value(ledgerPostingJournalId);
        }

        query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(periodFromDate, periodToDate));
        query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        queryRun  = new QueryRun(query);

        if (finalReporting)
        {
            this.journalPeriodFinalPrint();
        }
        while (queryRun.next())
        {
            generalJournalEntry             = queryRun.get(tableNum(GeneralJournalEntry));
            generalJournalAccountEntry      = queryRun.get(tableNum(GeneralJournalAccountEntry));
            mainAccountLedgerDimensionView  = queryRun.get(tableNum(MainAccountLedgerDimensionView));
            voucherLink                     = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));

            if (voucherLink.Voucher != prevVoucher)
            {
                lineCnt  = 0;
                if (ctr  != 0)
                {
                    // print date/invoice line
                    select count (RecId) from voucherLinkCount
                        where voucherLinkCount.Voucher == prevVoucher &&
                            voucherLinkCount.VoucherDataAreaId == curext()
                        exists join localGeneralJournalEntry
                            where localGeneralJournalEntry.RecId == voucherLinkCount.GeneralJournalEntry
                        exists join localGeneralJournalAccountEntry
                            where localGeneralJournalEntry.RecId == localGeneralJournalAccountEntry.GeneralJournalEntry &&
                                  (localGeneralJournalAccountEntry.PostingType  == LedgerPostingType::VendBalance ||
                                   localGeneralJournalAccountEntry.PostingType  == LedgerPostingType::CustBalance);

                    voucherLines  = voucherLink.RecId;
                    ctr++;
                }

                printInvoice                       = true;
                prevVoucher                        = voucherLink.Voucher;
                prevTransdate                      = voucherLink.AccountingDate;
                legFinJourRepTmpLegTransBE.ShowCN  = "";
            }

            // Start new page if no more empty lines left (end of page)
            if (#maxLinesOnPage - ctr  <= 0)
            {
                pageNum++;
                ctr  = 0;
            }

            vendTrans.clear();
            custTrans.clear();

            switch (generalJournalAccountEntry.PostingType)
            {
                case LedgerPostingType::VendBalance:
                    strAmountCur  = strLTrim(num2str(-generalJournalAccountEntry.TransactionCurrencyAmount,10,2,2,1) + ' ' + generalJournalAccountEntry.TransactionCurrencyCode);
                    vendTrans = VendTrans::findVoucherDate(voucherLink.Voucher, voucherLink.AccountingDate);
                    if (vendTrans.Invoice)
                    {
                        if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
                        {
                            legFinJourRepTmpLegTransBE.ShowCN  = "@SYS79668";
                        }
                        else
                        {
                            legFinJourRepTmpLegTransBE.ShowCN  = "@SYS79667";
                        }
                    }
                    break;

                case LedgerPostingType::CustBalance:
                    strAmountCur  = strLTrim(num2str(generalJournalAccountEntry.TransactionCurrencyAmount,10,2,2,1) + ' ' + generalJournalAccountEntry.TransactionCurrencyCode);
                    custTrans = CustTrans::findVoucherDate(voucherLink.Voucher, voucherLink.AccountingDate);
                    if (custTrans.Invoice)
                    {
                        if (generalJournalAccountEntry.AccountingCurrencyAmount < 0)
                        {
                           legFinJourRepTmpLegTransBE.ShowCN   = "@SYS79668";
                        }
                        else
                        {
                           legFinJourRepTmpLegTransBE.ShowCN   = "@SYS79667";
                        }
                    }
                    break;

                default:
                    strAmountCur = '';
                    vendTrans = VendTrans::findVoucherDate(voucherLink.Voucher, voucherLink.AccountingDate);
                    if (!vendTrans)
                    {
                        custTrans = CustTrans::findVoucherDate(voucherLink.Voucher, voucherLink.AccountingDate);
                    }
                    break;
            }

            ctr++;
            lineCnt++;

            //print invoice number on second line of each voucher block
            if ((printInvoice) && (lineCnt  == 1))
            {
                printInvoice  = false;
            }
            legFinJourRepTmpLegTransBE.AccountNum         = mainAccountLedgerDimensionView.MainAccount;
            legFinJourRepTmpLegTransBE.AccountName        = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);
            if ( generalJournalAccountEntry.AccountingCurrencyAmount >= 0 )
            {
               legFinJourRepTmpLegTransBE.AmountMSTDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                legFinJourRepTmpLegTransBE.AmountMSTCredit  = -generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            legFinJourRepTmpLegTransBE.VendName           = this.vendName();
            legFinJourRepTmpLegTransBE.InvoiceNo          = this.invoiceNo();
            legFinJourRepTmpLegTransBE.Voucher            = voucherLink.Voucher;
            legFinJourRepTmpLegTransBE.TransDate          = voucherLink.AccountingDate;
            legFinJourRepTmpLegTransBE.PageNum            = pageNum;
            legFinJourRepTmpLegTransBE.insert();
            legFinJourRepTmpLegTransBE.clear();

            //update debet and credit totals
            this.calcDebCredTotals();
        }
        //close journal report
        this.closeJournalReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPageNumStart</Name>
				<Source><![CDATA[
    private int setPageNumStart()
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe  = null;

        if ((newPageNum) ||(!finalReporting))
        {
            pageNumStart  = 1;
        }
        else
        {
            journalPeriodFinalPrintBe  = LedgerJournalPeriodFinalPrintBE::findPrev(ledgerPostingJournalId,periodFromDate-1,false);

            if (journalPeriodFinalPrintBe)
            {
                pageNumStart  = journalPeriodFinalPrintBe.NumberLastPage+1;
            }
            else
            {
                pageNumStart  = 1;
            }
        }

        return pageNumStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBoxCalcPurch</Name>
				<Source><![CDATA[
    //Belgian calculation method:.
    //There has to be made a difference between an invoice and a creditnote.
    //An invoice must be handled in complete and not line per line as an invoice.
    //can have lines with negative amounts.
    //Partially deducted Vat has to be taken into account.

    private void taxBoxCalcPurch()
    {
        TaxTrans           taxTrans;
        TaxTable           taxTable;
        Voucher            oldVoucher     = '';
        TransDate          oldTransDate   = dateNull();
        TmpTaxPurchLedger  tmpTaxPurchLedgerLocal;
        boolean            isInvoice;
        TaxTrans           taxTransTotal;
        AmountMST          amountInclTax  = 0;

        vendTrans  = null;
        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
            group by Voucher, TransDate, TaxDirection, TaxRepCounter
            where taxTransTotal.TransDate       >= fromDate                     &&
                  taxTransTotal.TransDate       <= toDate                       &&
                  taxTransTotal.TaxOrigin       != TaxOrigin::TaxReporting      &&
                  (taxTransTotal.TaxRepCounter  == TaxRepVersion::Original      ||
                   taxTransTotal.TaxRepCounter  == TaxRepVersion::Correct)      &&
                  (taxTransTotal.TaxDirection   == TaxDirection::IncomingTax    ||
                  (isTaxSpecificExchangeRateEnabled &&
                   taxTransTotal.TaxDirection   == TaxDirection::IncomingTax_W) ||
                   taxTransTotal.TaxDirection   == TaxDirection::UseTax         ||
                   taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
        {
            if (ledgerPostingJournalId          == this.findLedgerPostingJournalId(taxTransTotal.TransDate, taxTransTotal.Voucher))
            {
                if (taxTransTotal.TaxBaseAmount > 0)
                {
                    isInvoice   = true;
                }
                else
                {
                     isInvoice  = (taxTransTotal.TaxBaseAmount == 0 && taxTransTotal.TaxAmount > 0) ? true : false;
                }
                while select sum(TaxBaseAmount), sum(TaxAmount), sum(TaxInCostPriceMST)
                    from taxTrans
                    group by Voucher, TransDate, TaxCode, TaxDirection
                    where taxTrans.Voucher        == taxTransTotal.Voucher        &&
                          taxTrans.TransDate      == taxTransTotal.TransDate      &&
                          taxTrans.TaxDirection   == taxTransTotal.TaxDirection   &&
                          taxTrans.TaxRepCounter  == taxTransTotal.TaxRepCounter
                {
                    amountInclTax  = 0;
                    tmpTaxPurchLedgerLocal.clear();
                    taxTable       = TaxTable::find(taxTrans.TaxCode);
                    if (taxTrans.Voucher  != oldVoucher || taxTrans.TransDate != oldTransDate)
                    {
                        generalJournalEntry  = this.findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);
                        vendTrans            = VendTrans::findVoucherDate(taxTrans.Voucher,   taxTrans.TransDate);
                        if (vendTrans)
                        {
                            tmpTaxPurchLedgerLocal.VendAccount       = vendTrans.AccountNum;
                            tmpTaxPurchLedgerLocal.AmountMSTInclTax  = vendTrans.AmountMST;
                        }
                        oldVoucher    = taxTrans.Voucher;
                        oldTransDate  = taxTrans.TransDate;
                    }
                    tmpTaxPurchLedgerLocal.LedgerPostingJournalId  = generalJournalEntry.LedgerPostingJournal;
                    tmpTaxPurchLedgerLocal.Voucher                 = taxTrans.Voucher;
                    tmpTaxPurchLedgerLocal.TransDate               = taxTrans.TransDate;
                    if (taxTrans.TaxDirection == TaxDirection::IncomingTax || taxTrans.TaxDirection == TaxDirection::IncomingTax_W) // Domestic purchase
                    {
                        if (isInvoice)
                        {
                        //  In case The taxamount is partialy non-deductable then a different amount has to be passed
                            if (taxTrans.TaxInCostPriceMST)
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldTaxIncoming,  taxTrans.TaxAmount-taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseIncoming, taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST);
                            }
                            else
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldTaxIncoming,  taxTrans.TaxAmount) ;
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseIncoming, taxTrans.TaxBaseAmount);
                            }
                        }
                        else // creditNote
                        {
                            //  In case the taxamount is partialy non-deductable then a different amount has to be passed
                            if (taxTrans.TaxInCostPriceMST)
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseIncomingCreditNote, taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldTaxIncomingCreditNote,  taxTrans.TaxAmount-taxTrans.TaxInCostPriceMST);
                            }
                            else
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseIncomingCreditNote, taxTrans.TaxBaseAmount);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldTaxIncomingCreditNote,  taxTrans.TaxAmount);
                            }
                        }
                        amountInclTax  += (taxTrans.TaxBaseAmount + taxTrans.TaxAmount);
                    }
                    if (taxTrans.TaxDirection  == TaxDirection::UseTax)  // Import from EU country/region or when an import license exist
                    {
                        if (isInvoice)
                        {
                            //  In case The taxamount is partialy non-deductable then a different amount has to be passed
                            if (taxTrans.TaxInCostPriceMST)
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTax,       taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTaxOffset, taxTrans.TaxBaseAmount);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTax,           taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTaxOffset,     taxTrans.TaxAmount );
                            }
                            else
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTax,       taxTrans.TaxBaseAmount);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTaxOffset, taxTrans.TaxBaseAmount );
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTax,           taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTaxOffset,     taxTrans.TaxAmount);
                            }
                        }
                        else // creditNote
                        {
                            //  In case The taxamount is partialy non-deductable then a different amount has to be passed
                            if (taxTrans.TaxInCostPriceMST)
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTaxCreditNote,       taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTaxOffsetCreditNote, taxTrans.TaxBaseAmount);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTaxCreditNote,           taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTaxOffsetCreditNote,     taxTrans.TaxAmount);
                            }
                            else
                            {
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTaxCreditNote,       taxTrans.TaxBaseAmount);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldBaseUseTaxOffsetCreditNote, taxTrans.TaxBaseAmount);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTaxCreditNote,           taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                                tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldUseTaxOffsetCreditNote,     taxTrans.TaxAmount);
                            }
                        }
                        amountInclTax  += taxTrans.TaxBaseAmount;
                    }
                    if (taxTrans.TaxDirection  == TaxDirection::TaxExemptPurchase)  // Import
                    {
                        if (isInvoice)
                        {
                            tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldTaxFreeBuy, taxTrans.TaxBaseAmount);
                        }
                        else // creditNote
                        {
                            tmpTaxPurchLedgerLocal  = this.addTaxBoxAmountPurch(tmpTaxPurchLedgerLocal, taxTable.RepFieldTaxFreeBuyCreditNote, taxTrans.TaxBaseAmount);
                        }
                        amountInclTax               += taxTrans.TaxBaseAmount;
                    }

                    tmpTaxPurchLedgerLocal.InvoiceId         =  vendTrans.Invoice;
                    tmpTaxPurchLedgerLocal.AmountMSTInclTax  = amountInclTax;
                    this.insertInTmpTaxPurchLedger(tmpTaxPurchLedgerLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBoxCalcSales</Name>
				<Source><![CDATA[
    //Belgian calculation method:.
    //There has to be made a difference between an invoice and a creditnote.
    //An invoice must be handled in complete and not line per line as an invoice.
    //can have lines with negative amounts.

    private void taxBoxCalcSales()
    {
        TaxTrans                            taxTrans;
        TaxTable                            taxTable;
        SubledgerVoucherGeneralJournalEntry voucherLink;
        Voucher                             oldVoucher     = '';
        TransDate                           oldTransDate   = dateNull();
        TmpTaxSalesLedger                   tmpTaxSalesLedgerLocal;
        boolean                             isInvoice      = false;
        TaxTrans                            taxTransTotal;
        AmountMST                           amountInclTax  = 0;

        custTrans                         = null;
        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
        group by Voucher, TransDate, TaxDirection
            where taxTransTotal.TransDate       >= fromDate                     &&
                  taxTransTotal.TransDate       <= toDate                       &&
                  taxTransTotal.TaxOrigin       != TaxOrigin::TaxReporting      &&
                  (taxTransTotal.TaxRepCounter  == TaxRepVersion::Original      ||
                  taxTransTotal.TaxRepCounter   == TaxRepVersion::Correct)      &&
                  (taxTransTotal.TaxDirection   == TaxDirection::OutgoingTax    ||
                  (isTaxSpecificExchangeRateEnabled &&
                  taxTransTotal.TaxDirection    == TaxDirection::OutgoingTax_W) ||
                  taxTransTotal.TaxDirection    == TaxDirection::TaxExemptSales)
        {
            select firstonly RecId from voucherLink
                where voucherLink.Voucher == taxTransTotal.Voucher &&
                    voucherLink.AccountingDate == taxTransTotal.TransDate &&
                    voucherLink.VoucherDataAreaId == curext()
                join LedgerPostingJournal from generalJournalEntry
                    where generalJournalEntry.RecId == voucherLink.GeneralJournalEntry;

            if (ledgerPostingJournalId  == this.findLedgerPostingJournalId(taxTransTotal.TransDate, taxTransTotal.Voucher))
            {
                if (taxTransTotal.TaxBaseAmount < 0)
                {
                    isInvoice  = true;
                }
                else
                {
                    isInvoice  = (taxTransTotal.TaxBaseAmount == 0 && taxTransTotal.TaxAmount < 0) ? true : false;
                }

                while select sum(TaxBaseAmount), sum(TaxAmount)
                    from taxTrans
                    group by Voucher, TransDate, TaxCode, TaxDirection
                    where taxTrans.Voucher       == taxTransTotal.Voucher   &&
                          taxTrans.TransDate     == taxTransTotal.TransDate &&
                          taxTrans.TaxDirection  == taxTransTotal.TaxDirection
                {
                    amountInclTax  = 0;
                    tmpTaxSalesLedgerLocal.clear();
                    taxTable       = TaxTable::find(taxTrans.TaxCode);
                    if (taxTrans.Voucher     != oldVoucher || taxTrans.TransDate != oldTransDate)
                    {
                        generalJournalEntry  = this.findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);
                        custTrans            = CustTrans::findVoucherDate(taxTrans.Voucher,   taxTrans.TransDate);
                        if (custTrans)
                        {
                            tmpTaxSalesLedgerLocal.CustAccount       = custTrans.AccountNum;
                            tmpTaxSalesLedgerLocal.AmountMSTInclTax  = custTrans.AmountMST;
                        }
                        oldVoucher    = taxTrans.Voucher;
                        oldTransDate  = taxTrans.TransDate;
                    }
                    tmpTaxSalesLedgerLocal.LedgerPostingJournalId  = generalJournalEntry.LedgerPostingJournal;
                    tmpTaxSalesLedgerLocal.Voucher                 = taxTrans.Voucher;
                    tmpTaxSalesLedgerLocal.TransDate               = taxTrans.TransDate;

                    if (taxTrans.TaxDirection == TaxDirection::OutgoingTax || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W) // Domestic sale
                    {
                        if (isInvoice) // ordinary sale
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldBaseOutgoing, taxTrans.TaxBaseAmount);
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldTaxOutgoing,  taxTrans.TaxAmount);
                        }
                        else // creditNote
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldBaseOutgoingCreditNote, taxTrans.TaxBaseAmount);
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldTaxOutgoingCreditNote,  taxTrans.TaxAmount);
                        }
                        amountInclTax  +=taxTrans.TaxBaseAmount+taxTrans.TaxAmount;
                    }
                    else  // Export
                    {
                        if (isInvoice) // ordinary sale
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal,taxTable.RepFieldTaxFreeSales, taxTrans.TaxBaseAmount);
                        }
                        else // creditNote
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal,taxTable.RepFieldTaxFreeSalesCreditNote, taxTrans.TaxBaseAmount);
                        }
                        amountInclTax  +=taxTrans.TaxBaseAmount;
                    }
                    tmpTaxSalesLedgerLocal.AmountMSTInclTax  = amountInclTax;
                    tmpTaxSalesLedgerLocal.InvoiceId         = custTrans.Invoice;
                    this.insertInTmpTaxSalesLedger(tmpTaxSalesLedgerLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalPeriodFinalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>LedgerJournalPeriodFinalPrintBE</c> record based on UI parameter values.
    /// </summary>
    private void updateJournalPeriodFinalPrint()
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe;

        ttsbegin;
        journalPeriodFinalPrintBe  = LedgerJournalPeriodFinalPrintBE::findByJournalIdPeriod(ledgerPostingJournalId, periodFromDate, periodToDate,true);
        if (journalPeriodFinalPrintBe)
        {
            journalPeriodFinalPrintBe.DebitTotal   = totDeb;
            journalPeriodFinalPrintBe.CreditTotal  = totCred;
            journalPeriodFinalPrintBe.Compressed   = compression;
            journalPeriodFinalPrintBe.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    private Name vendName()
    {
        Name ret;

        if (vendTrans)
        {
            ret  = vendTrans.vendTableName();
        }
        if (custTrans)
        {
            ret  = custTrans.custTableName();
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>