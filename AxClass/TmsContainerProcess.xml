<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSContainerProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmsContainerProcess</c> class is used to execute rate and void operations on containers.
/// </summary>
class TmsContainerProcess
{
    WHSContainerTable   shipContainer;
    WHSShipmentTable    shipment;
    WHSContainerId      containerId;
    container           errors;
    WHSAccountNum       accountNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
	/// <summary>
	/// Executes rate container operation.
	/// </summary>
    void execute()
    {
        shipContainer   = WHSContainerTable::findByContainerId(containerId);
        shipment        = WHSShipmentTable::find(shipContainer.ShipmentId);

        this.rateContainer(containerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTMSProcessXML_Container</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates new <c>TMSProcessXML_Container</c> instance.
	/// </summary>
	/// <returns>
	/// The <c>TMSProcessXML_Container</c> instance.
	/// </returns>
    protected TMSProcessXML_Container getTMSProcessXML_Container()
    {
        return new TMSProcessXML_Container();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerId</Name>
				<Source><![CDATA[
    WHSContainerId parmContainerId(WHSContainerId _containerId)
    {
        if (_containerId)
        {
            containerId = _containerId;
        }

        return containerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrors</Name>
				<Source><![CDATA[
    container parmErrors(container _errors = errors)
    {
        if (conLen(_errors) > 0)
        {
            errors = _errors;
        }

        return errors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateContainer</Name>
				<Source><![CDATA[
    private void rateContainer(WHSContainerId _containerId)
    {
        TMSProcessXML_Container     processXML = this.getTMSProcessXML_Container();
        WHSLoadLine                 loadLine;

        if (TMSCarrier::find(shipment.CarrierCode).RatingEnabled == NoYes::Yes)
        {
            processXML.parmRecordType(TMSRecordType::Container);
            processXML.parmId(_containerId);
            processXML.parmCommunicationType(TMSCommunicationType::Ship);

            select firstonly loadLine
                where loadLine.ShipmentId == shipment.ShipmentId;

            accountNum  = loadLine.whsLoadTable().AccountNum;

            processXML.initFromShipment(shipment);
            processXML.parmWeight(shipContainer.Weight);

            if (TMSParameters::isShippingLabelRequestTypeEnabled())
            {
                TMSCarrierService carrierService = TMSCarrierService::find(shipment.CarrierServiceCode, shipment.CarrierCode);
                processXML.parmShippingLabelRequestType(carrierService.ShippingLabelRequestType);
            }

            processXML.execute();

            errors = processXML.parmErrors();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidContainer</Name>
				<Source><![CDATA[
	/// <summary>
	/// Executes void operation if container has carrier tracking number.
	/// </summary>
    void voidContainer()
    {
        TMSProcessXML_Container     processXML = this.getTMSProcessXML_Container();
        TMSAddressPhone             fromAddress;
        TMSAddressPhone             toAddress;

        shipContainer   = WHSContainerTable::findByContainerId(containerId);
        shipment        = WHSShipmentTable::find(shipContainer.ShipmentId);

        if (shipContainer.ShipCarrierTrackingNum)
        {
            fromAddress = shipment.getPickUpAddress();
            toAddress   = shipment.getDropOffAddress();

            processXML.parmCommunicationType(TMSCommunicationType::Void);

            processXML.parmWeight(shipContainer.Weight);
            processXML.parmFromAddress(fromAddress);
            processXML.parmToAddress(toAddress);
            processXML.parmId(containerId);
            processXML.parmRecordType(TMSRecordType::Container);
            processXML.initCarrierFields(shipment.CarrierCode, shipment.CarrierServiceCode, shipment.CarrierGroupCode, shipment.ModeCode, '');
            processXML.parmFreightTerm(shipment.DlvTermId);
            processXML.parmTrackingNumber(shipContainer.ShipCarrierTrackingNum);

            processXML.execute();
        }

        errors = processXML.parmErrors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the container process from the server.
    /// </summary>
    /// <param name="_containerId">
    /// The Id to be used in the container process.
    /// </param>
    /// <returns>
    /// A container that specifies the errors that occurred during the process.
    /// </returns>
    public static container executeOnServer(WHSContainerId _containerId)
    {
        TMSContainerProcess containerProcess = new TMSContainerProcess();
        container           errorContainer;

        containerProcess.parmContainerId(_containerId);
        containerProcess.execute();
        errorContainer = containerProcess.parmErrors();

        return errorContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>