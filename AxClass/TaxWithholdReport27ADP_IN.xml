<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdReport27ADP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdReport27ADP_IN</c> class is
/// the report data provider class for the associated SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxWithholdReport27AContract))
]
public class TaxWithholdReport27ADP_IN extends SrsReportDataProviderPreProcessTempDB
{
    TaxWithholdReport27ATmp_IN      taxWithholdReport27ATmp_IN;
    TaxWithholdReport27AContract    report27AContract;

    TaxWithholdReport27ATmpConstantString   constantStringTmp;
    LogisticsPostalAddress          logisticsPostalAddressResponsible;
    Name                            responsibleName;
    str                             responsibleAddress;
    Email                           responsibleEmail;
    Phone                           responsibleTelePhone;
    int                             responsibleStateCode;
    #TaxWithhold_IN
    #define.2(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getResponsibleInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the details of the responsible person.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void getResponsibleInfo()
    {
        HcmWorker                           hcmWorker = HcmWorker::findByPersonnelNumber(report27AContract.parmFullName());
        DirPartyTable                       dirPartyTable = DirPartyTable::findRec(hcmWorker.Person);
        LogisticsLocation                   logisticsLocationPostalAddr;
        DirPartyLocation                    dirPartyLocation;

        //To get the Fields related to postal address of the responsible person
        select firstonly Location, Street, State, ZipCode, City from logisticsPostalAddressResponsible
            join RecId from logisticsLocationPostalAddr
                where logisticsPostalAddressResponsible.Location == logisticsLocationPostalAddr.RecId
            exists join Party from dirPartyLocation
                where dirPartyLocation.Location ==logisticsLocationPostalAddr.RecId
                    && dirPartyLocation.Party == dirPartyTable.RecId
                    && dirPartyLocation.IsPrimary == NoYes::Yes;

        //To get the fields related to Electronic address of the responsible person
        responsibleName             = hcmWorker.name();
        responsibleAddress          = conPeek(TaxWithholdEFilling_IN::wordWrap(logisticsPostalAddressResponsible.Street, #25), 1);
        responsibleStateCode        = TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State);
        responsibleEmail            = hcmWorker.email();
        responsibleTelePhone        = TaxWithholdEFilling_IN::getPhone(hcmWorker.Person);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adress street.
    /// </summary>
    /// <param name="_street">
    /// The Logistics address street.
    /// </param>
    /// <returns>
    /// The company address street.
    /// </returns>
    private AddressStreet getStreet(LogisticsAddressStreet _street)
    {
        str     string;
        str     tempString;
        str     tempString1;
        str     strCompInfo ;
        int     counterI,counterJ;
        boolean singleLine = true;

        #TaxWithhold_IN
        counterI =0;
        if (_street == "")
        {
            return "";
        }
        while (counterI <= strlen(_street))
        {
            counterJ = strfind(_street,#NewLine,counterI+1,strlen(_street));
            if (counterJ == 0)
            {
                if (singleLine)
                {
                    return _street;
                }
                else
                {
                    strCompInfo += tempString1;
                    break;
                }
            }
            singleLine  = false;
            tempString  = substr(
                string,
                counterI+1,
                counterJ-counterI);
            tempString1 = strdel(string,1,counterJ);
            tempString  = strpoke(
                tempString,
                #Comma,
                counterJ-counterI);
            counterI    = counterJ;
            strCompInfo  = strCompInfo + tempString;
        }
        return strCompInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdReport27ATmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>TaxWithholdReport27ATmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdReport27ATmp_IN</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdReport27ATmp_IN))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdReport27ATmp_IN getTaxWithholdReport27ATmp_IN()
    {
        select taxWithholdReport27ATmp_IN;
        return taxWithholdReport27ATmp_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdReport27ATmpConstantString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>TaxWithholdReport27ATmpConstantString</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdReport27ATmpConstantString</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdReport27ATmpConstantString))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdReport27ATmpConstantString getTaxWithholdReport27ATmpConstantString()
    {
        return constantStringTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConstantStringTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the constant string for 27A report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initConstantStringTmp()
    {
        #TaxWithholdStatement_IN
        constantStringTmp.Title = #Form27A;
        constantStringTmp.TitleDescription = #Statement_1_27A + "@SYS34952" + #Statement_2_27A + "@SYS34953" + #Statement_3_27A;
        constantStringTmp.TitleDateFormat = "@SYS34953" + " " + "@SYS34952" + #DateFormat27A + "@SYS34953" + #Hash;
        constantStringTmp.Point1TAN = #1 + "@SYS35672" + " " + "@SYS34952" + " " + #a + " " + "@SYS34953" + " " +#TANNumber;
        constantStringTmp.Point1PAN = "@SYS34952" + " " + #b + " " + "@SYS34953" + " "+ #PANNumber;
        constantStringTmp.Point1FromNo = "@SYS34952" + " " + #c + " " + "@SYS34953" + " " + #FormNo;
        constantStringTmp.Point1FinancialYear = "@SYS34952" + " " + #d + " " + "@SYS34953" + " " + #Financialyear;
        constantStringTmp.Point1AssessmentYear = "@SYS34952" +  " " + #e + " " + "@SYS34953" + " " + #AssessmentYear;
        constantStringTmp.Point1PRN = "@SYS34952" + " " + #f + " " + "@SYS34953" + " " + #Previousreceiptnumber;
        constantStringTmp.Point1PRN2 = "@SYS34952" + #Incase_27A + "@SYS34953";
        constantStringTmp.Point2Title = #Particulars_2_27A;
        constantStringTmp.Name = "@SYS34952" + #a + "@SYS34953" + " " + #Name;
        constantStringTmp.Point2Type = "@SYS34952" + #b + "@SYS34953" + " " + #Typeofdeductor27A;
        constantStringTmp.Point2Branch = "@SYS34952" + #c + "@SYS34953" + " " + #Branch + " " + "@SYS34952" + #ifAny + "@SYS34953";
        constantStringTmp.Point2Address = "@SYS34952" + #d + "@SYS34953" + " " + #Address;
        constantStringTmp.FlatNo = #FlatNo_2;
        constantStringTmp.PremiseName = #NameOfPermises_2;
        constantStringTmp.Street = #RoadStreetLane_2;
        constantStringTmp.Location = #AreaLocation_2;
        constantStringTmp.City = #TownCity_2;
        constantStringTmp.State = #State_2;
        constantStringTmp.PinCode = #PinCode_2;
        constantStringTmp.TelephoneNo = #TelephoneNo_2;
        constantStringTmp.Email = #Email_2;
        constantStringTmp.Point3Title = #Particulars_3_27A;
        constantStringTmp.Point3Address = "@SYS34952" + #b + "@SYS34953" + " " + #Address;
        constantStringTmp.Point4Title = #ControlTotals_4;
        constantStringTmp.Point4SrNo = #SNo;
        constantStringTmp.Point4PartyRecords = #NoOfDeductee_4_2;
        constantStringTmp.Point4AmountPaid = #Amount_4_3;
        constantStringTmp.Point4TaxDeducted = #TaxDeducted_4_4_27A;
        constantStringTmp.Point4TaxDeposited = #TaxDeposited_4_5_1_27A + "   " + "@SYS34952" + #TaxDeposited_4_5_2_27A + "@SYS34953" + " " + #Rs;
        constantStringTmp.Point4Total = #Total;
        constantStringTmp.Point5Title = #TotalAnnexures_5;
        constantStringTmp.Point6Title = #OtherInfo_6;
        constantStringTmp.Point6Verification = #Verification_Heading;
        constantStringTmp.Point6Part1Info = #VerificationText1;
        constantStringTmp.Point6Part2Info = #certify_27A;
        constantStringTmp.Point6Place = #Verification_Signature_27A;
        constantStringTmp.Point6Date = #Verification_NameDesig_27A;
        constantStringTmp.Point6Note1 = #Star_26A;
        constantStringTmp.Point6Note2 = #Hash + " " + #DateFormat27A + #DateCommentFor27A + #DMY;

        constantStringTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic.
    /// This method will be called by SSRS at runtime.
    /// The method should compute data and populate the data tables
    /// that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        CompanyInfo                 companyInfo;
        DirPartyLocation            dirPartyLocation;
        TaxInformation_IN           taxInformation;
        TaxWithholdRegNumbers_IN    taxWithholdRegNumbers;
        LogisticsPostalAddress      logisticsPostalAddress;

        report27AContract       = this.parmDataContract() as TaxWithholdReport27AContract;
        companyInfo             = CompanyInfo::find();
        logisticsPostalAddress  = companyInfo.postalAddress();

        this.initConstantStringTmp();
        this.getResponsibleInfo();

        select firstOnly Location, Party, IsPrimary from dirPartyLocation
            where dirPartyLocation.Party == companyinfo.RecId
                && dirPartyLocation.IsPrimary == NoYes::Yes;

        taxInformation = TaxInformation_IN::findDefaultByLocation(dirPartyLocation.Location);

        taxWithholdRegNumbers = TaxWithholdRegNumbers_IN::find(taxInformation.TAN);

        taxWithholdReport27ATmp_IN.Designation  = responsibleName
            + ','
            + report27AContract.parmDesignation();
        taxWithholdReport27ATmp_IN.Name                         = responsibleName;
        taxWithholdReport27ATmp_IN.CompanyName                  = companyInfo.Name;
        taxWithholdReport27ATmp_IN.PanNumber                    = CompanyInfoHelper::getTaxInformationLegalEntity_IN(companyInfo).PANNumber;
        taxWithholdReport27ATmp_IN.CompanyTAN                   = taxWithholdRegNumbers.RegistrationNumber;
        taxWithholdReport27ATmp_IN.CompanyStreet                = this.getStreet(logisticsPostalAddress.Street);
        taxWithholdReport27ATmp_IN.CompanyState                 = logisticsPostalAddress.State;
        taxWithholdReport27ATmp_IN.CompanyCity                  = logisticsPostalAddress.City;
        taxWithholdReport27ATmp_IN.CompanyZipCode               = logisticsPostalAddress.ZipCode;
        taxWithholdReport27ATmp_IN.ResponsibleAddress           = responsibleAddress;
        taxWithholdReport27ATmp_IN.ResponsibleRoadStreetLane    = logisticsPostalAddressResponsible.Street;
        taxWithholdReport27ATmp_IN.ResponsiblePinCode           = logisticsPostalAddressResponsible.ZipCode;
        taxWithholdReport27ATmp_IN.ResponsibleState             = logisticsPostalAddressResponsible.State;
        taxWithholdReport27ATmp_IN.ResponsibleTownCity          = logisticsPostalAddressResponsible.City;
        taxWithholdReport27ATmp_IN.ResponsibleTelePhone         = responsibleTelePhone;
        taxWithholdReport27ATmp_IN.ResponsibleEmail             = responsibleEmail;
        taxWithholdReport27ATmp_IN.AssesYear                    = report27AContract.parmAssessmentYear();
        taxWithholdReport27ATmp_IN.FinancialYear                = report27AContract.parmFinancialYear();
        taxWithholdReport27ATmp_IN.CompanyStatus                = CompanyInfoHelper::getTaxInformationLegalEntity_IN(companyInfo).TypeOfDeductor;
        taxWithholdReport27ATmp_IN.CompanyPhone                 = TaxWithholdEFilling_IN::getPhone(companyInfo.RecId);
        taxWithholdReport27ATmp_IN.CompanyEmail                 = companyInfo.email();
        taxWithholdReport27ATmp_IN.CompanyBranchId              = companyInfo.BranchId;
        taxWithholdReport27ATmp_IN.NumOrigin                    = report27AContract.parmNumOrigin();
        taxWithholdReport27ATmp_IN.NumberOfPartyRecords         = report27AContract.parmNumberOfPartyRecords();
        taxWithholdReport27ATmp_IN.AmountPaid                   = report27AContract.parmAmountPaid();
        taxWithholdReport27ATmp_IN.TaxDeducted                  = report27AContract.parmTaxDeducted();
        taxWithholdReport27ATmp_IN.TaxDeposited                 = report27AContract.parmTaxDeposited();
        taxWithholdReport27ATmp_IN.NumberOfAnnexures            = report27AContract.parmNumberOfAnnexures();
        taxWithholdReport27ATmp_IN.ToDate                       = date2str(
            report27AContract.parmToDate(),
            123,
            DateDay::Digits2,
            DateSeparator::Slash,
            DateMonth::Digits2,
            DateSeparator::Slash,
            DateYear::Digits4,
            DateFlags::None);
        taxWithholdReport27ATmp_IN.PrintingDate         = report27AContract.parmPrintingDate();
        taxWithholdReport27ATmp_IN.FromDate             = date2str(
            report27AContract.parmFromDate(),
            123,
            DateDay::Digits2,
            DateSeparator::Slash,
            DateMonth::Digits2,
            DateSeparator::Slash,
            DateYear::Digits4,
            DateFlags::None);
        taxWithholdReport27ATmp_IN.FormNumber           = report27AContract.parmFormNumber();
        taxWithholdReport27ATmp_IN.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>