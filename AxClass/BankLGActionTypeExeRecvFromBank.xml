<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGActionTypeExeRecvFromBank</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGActionTypeExeRecyFromBank</c> class is used to execute the receive from bank action
///    for the letter of guarantee.
/// </summary>
class BankLGActionTypeExeRecvFromBank extends BankLGActionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAction</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Does the execution action "Receive from bank" based on the parameters.
    /// </summary>
    protected void doAction()
    {
        BankLGLedgerJournalPost bankLGLedgerJournalPost;

        ttsbegin;

        // Update LG
        bankLGGuarantee.BankNum                             = actionParms.parmBankNum();
        bankLGGuarantee.BankAccountCurrencyMarginAmount     = actionParms.parmMarginCur();
        bankLGGuarantee.BankAccountCurrencyExpenseAmount    = actionParms.parmExpenseCur();
        bankLGGuarantee.updateStatus(actionParms.getActionType());
        bankLGGuarantee.update();

        // Post
        if (actionParms.parmExpenseCur()    != 0.0
            || actionParms.parmMarginCur()  != 0.0)
        {
            bankLGLedgerJournalPost = BankLGLedgerJournalPost::constructFromLG(bankLGGuarantee);

            // insert financial tag value
            if (FinTagConfiguration::isFinTagConfigurationSet(bankLGGuarantee.DataAreaId))
            {
                bankLGLedgerJournalPost.parmFinTag(bankLGGuarantee.FinTag);
            }

            // Issuance commission
            bankLGLedgerJournalPost.addExpenseTrans(
                actionParms.parmExpenseCur(),
                "@SYS314678");

            // Margin
            bankLGLedgerJournalPost.addMarginTrans(
                actionParms.parmMarginCur(),
                "@SYS5446");

            bankLGLedgerJournalPost.run();
        }

        // Update LG action
        bankLGAction.ExecutionAction                    = BankLGExecutionActionType::ReceiveFromBank;
        bankLGAction.ExecutionDateTime                  = DateTimeUtil::getSystemDateTime();
        bankLGAction.BankAccountCurrencyMarginAmount    = actionParms.parmMarginCur();
        bankLGAction.BankAccountCurrencyExpenseAmount   = actionParms.parmExpenseCur();
        if (bankLGLedgerJournalPost)
        {
            bankLGAction.LedgerJournalTable = bankLGLedgerJournalPost.getLedgerJournalTable().JournalNum;
        }
        bankLGAction.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the action parameters.
    /// </summary>
    /// <returns>
    ///     True if all parameters are valid; otherwise, false.
    /// </returns>
    protected boolean validateActionParms()
    {
        boolean ret = super();

        if (ret)
        {
            if (actionParms.parmBankNum()       == ''
                || actionParms.parmMarginCur()  <  0.0
                || actionParms.parmExpenseCur() <  0.0)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>