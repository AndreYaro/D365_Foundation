<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSettlementTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSettlementTree
{
    #MACROLIB.resAppl

    ImageListAppl_InventSettlement  imageList;

    Map                             mapInventSettlementTreeNode;          // nodeId, InventSettlementTreeNode(object)

    FormTreeControl                 tree;
    formName                        formName;

    int                             saveWidth;
    int                             saveHeight;
    NoOfDecimals                    noOfDecimals;
    // <GEERU>
    InventTransCurrency_RU          inventTransCurrency;

    #ISOCountryRegionCodes
    // </GEERU>

    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
         saveWidth,
         saveHeight,
         noOfDecimals
    #ENDMACRO

    private const str issueClosed = "@SCM:ICPrefix";
    private const str issueOpen = "@SCM:IOPrefix";
    private const str receipt = "@SCM:RTPrefix";
    private const str receiptOrigin = "@SCM:ROPrefix";
    private const str adjustment = "@SCM:AdjPrefix";
    private const str routeConsumption = "@SCM:RCPrefix";
    private const str circularity = "@SCM:CirPrefix";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTreeNode</Name>
				<Source><![CDATA[
    protected void addTreeNode(
        InventSettlementTreeNode    _inventSettlementTreeNode,
        TreeItemIdx                 _nodeIdParent)
    {
        this.setCircularity(_inventSettlementTreeNode,_nodeIdParent);

        Integer childNode = tree.add(   _nodeIdParent,
                                        0,
                                        strfmt('%1   %2', this.setIndicator(_inventSettlementTreeNode), this.nodeTxt(_inventSettlementTreeNode)),
                                        0,
                                        _inventSettlementTreeNode.parmCircularity() ? false : _inventSettlementTreeNode.parmHasChildren());

        _inventSettlementTreeNode.parmNodeIdx(childNode);
        _inventSettlementTreeNode.parmParentNodeIdx(_nodeIdParent);

        if (! mapInventSettlementTreeNode)
        {
            mapInventSettlementTreeNode = new Map(Types::Integer,Types::Class);
        }

        if (! mapInventSettlementTreeNode.exists(childNode))
        {
            mapInventSettlementTreeNode.insert(childNode,_inventSettlementTreeNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTopNode</Name>
				<Source><![CDATA[
    void buildTopNode(InventTrans   _inventTrans)
    {
        InventSettlementTreeNode    inventSettlementTreeNode;

        if (mapInventSettlementTreeNode)
        {
            mapInventSettlementTreeNode = null;
        }

        // <GEERU>
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
        // </GEERU>
            if (_inventTrans.Qty > 0)
            {
                inventSettlementTreeNode = InventSettlementTreeNode::newInventTrans(_inventTrans,_inventTrans.Qty,_inventTrans.costValue(),UnknownNoYes::Unknown);
                this.addTreeNode(inventSettlementTreeNode,0);
            }
            else
            {
                if (_inventTrans.openQty())
                {
                    inventSettlementTreeNode = InventSettlementTreeNode::newInventTrans(_inventTrans,_inventTrans.financialOpenQty(),_inventTrans.financialOpenValue(),UnknownNoYes::No);
                    this.addTreeNode(inventSettlementTreeNode,0);
                }

                if (_inventTrans.QtySettled)
                {
                    inventSettlementTreeNode = InventSettlementTreeNode::newInventTrans(_inventTrans,_inventTrans.QtySettled, _inventTrans.CostAmountSettled,UnknownNoYes::Yes);
                    this.addTreeNode(inventSettlementTreeNode,0);
                }
            }
        // <GEERU>
        }
        else
        {
            if (_inventTrans.Qty > 0)
            {
                inventSettlementTreeNode = InventSettlementTreeNode::newInventTrans(_inventTrans, _inventTrans.Qty, _inventTrans.costValueSecCur_RU(), UnknownNoYes::Unknown);
                this.addTreeNode(inventSettlementTreeNode, 0);
            }
            else
            {
                if (_inventTrans.openQtySecCur_RU())
                {
                    inventSettlementTreeNode = InventSettlementTreeNode::newInventTrans(_inventTrans, _inventTrans.financialOpenQtySecCur_RU(), _inventTrans.financialOpenValueSecCur_RU(), UnknownNoYes::No);
                    this.addTreeNode(inventSettlementTreeNode, 0);
                }

                if (_inventTrans.QtySettledSecCur_RU)
                {
                    inventSettlementTreeNode = InventSettlementTreeNode::newInventTrans(_inventTrans, _inventTrans.QtySettledSecCur_RU, _inventTrans.CostAmountSettledSecCur_RU, UnknownNoYes::Yes);
                    this.addTreeNode(inventSettlementTreeNode, 0);
                }
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccessRights</Name>
				<Source><![CDATA[
    protected boolean   checkAccessRights()
    {
        boolean     ok = true;
        DictField   dictField;

        boolean checkDictField(DictField _dictField)
        {
            if (_dictField && _dictField.rights() == AccessType::NoAccess)
            {
                return checkFailed(strFmt("@SYS74839",_dictField.name()));
            }
            return true;
        }

        if (!hasMenuItemAccess(menuitemDisplayStr(InventSettlementTree),MenuItemType::Display))
        {
            ok = checkFailed(strFmt("@SYS96690",SysDictMenu::newMenuItem(menuitemDisplayStr(InventSettlementTree),MenuItemType::Display).label()));
        }

        if (! hasTableAccess(tableNum(InventTrans)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventTrans))));
        }
        else
        {
            setPrefix(strFmt("@SYS26373",tableId2name(tableNum(InventTrans))));

            dictField = new DictField(tableNum(InventTrans),fieldNum(InventTrans,ItemId));
            ok = checkDictField(dictField) && ok;

            dictField = new DictField(tableNum(InventTrans),fieldNum(InventTrans,CostAmountPosted));
            ok = checkDictField(dictField) && ok;

            dictField = new DictField(tableNum(InventTrans),fieldNum(InventTrans,Qty));
            ok = checkDictField(dictField) && ok;

            dictField = new DictField(tableNum(InventTrans),fieldNum(InventTrans,CostAmountAdjustment));
            ok = checkDictField(dictField) && ok;

            dictField = new DictField(tableNum(InventTrans),fieldNum(InventTrans,CostAmountSettled));
            ok = checkDictField(dictField) && ok;
        }

        if (! hasTableAccess(tableNum(InventTransOrigin)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventTransOrigin))));
        }
        else
        {
            setPrefix(strFmt("@SYS26373",tableId2name(tableNum(InventTransOrigin))));

            dictField = new DictField(tableNum(InventTransOrigin),fieldNum(InventTransOrigin,ItemId));
            ok = checkDictField(dictField) && ok;

            dictField = new DictField(tableNum(InventTransOrigin),fieldNum(InventTransOrigin,ReferenceCategory));
            ok = checkDictField(dictField) && ok;

            dictField = new DictField(tableNum(InventTransOrigin),fieldNum(InventTransOrigin,ReferenceId));
            ok = checkDictField(dictField) && ok;
        }

        if (! hasTableAccess(tableNum(InventSettlement)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventSettlement))));
        }
        else
        {
            setPrefix(strFmt("@SYS26373",tableId2name(tableNum(InventSettlement))));
            dictField = new DictField(tableNum(InventSettlement),fieldNum(InventSettlement,CostAmountAdjustment));
            ok = checkDictField(dictField) && ok;

            dictField = new DictField(tableNum(InventSettlement),fieldNum(InventSettlement,CostAmountSettled));
            ok = checkDictField(dictField) && ok;
        }

        if (! hasTableAccess(tableNum(InventDim)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventDim))));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNode</Name>
				<Source><![CDATA[
    public void expandNode(TreeItemIdx _nodeId)
    {
        List                            listTreeNodes = new List(Types::Class);

        InventSettlementTreeNode        inventSettlementTreeNodeParent = this.inventSettlementTreeNode(_nodeId);

        Amount                      valueChildren;

        if (! inventSettlementTreeNodeParent)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        if (inventSettlementTreeNodeParent.parmExpanded() || inventSettlementTreeNodeParent.parmNodeRecord().TableId != tableNum(InventTrans))
        {
            return;
        }

        container packedTreeNodes = InventSettlementTreeNodeCalc::calcNodesServer(inventSettlementTreeNodeParent.parmNodeRecord().RecId,
            inventSettlementTreeNodeParent.parmQtySettled(),
            inventSettlementTreeNodeParent.parmValueSettled()
            // <GEERU>
            , inventTransCurrency
            // </GEERU>
            );

        if (packedTreeNodes)
        {
            listTreeNodes = List::create(packedTreeNodes);
        }

        if (! listTreeNodes || ! listTreeNodes.elements())
        {
            inventSettlementTreeNodeParent.parmHasChildren(false);
            inventSettlementTreeNodeParent.parmExpanded(true);
            this.updateTreeNode(inventSettlementTreeNodeParent);
            return;
        }

        ListEnumerator le = listTreeNodes.getEnumerator();
        while (le.moveNext())
        {
            InventSettlementTreeNode inventSettlementTreeNodeChild = le.current();
            if (inventSettlementTreeNodeChild)
                this.addTreeNode(inventSettlementTreeNodeChild,_nodeId);
            valueChildren += inventSettlementTreeNodeChild.parmValueSettled();
        }

        inventSettlementTreeNodeParent.parmExpanded(true);

        //  testing - value of children must give value of parent node
        if ( (CurrencyExchangeHelper::amount(abs(inventSettlementTreeNodeParent.parmValueSettled()) - abs(valueChildren))))
        {
            FormTreeItem treeItem = tree.getItem(_nodeId);
            #if.never
                treeItem.text(treeItem.text()+"          " +num2str(abs(valueChildren),0,6,1,2) + "     " + num2str((CurrencyExchangeHelper::amount(abs(inventSettlementTreeNodeParent.parmValueSettled()) - abs(valueChildren))),0,6,1,2));
                tree.setItem(treeItem);
            #endif
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>legendContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string used as a legend for the settlement tree.
    /// </summary>
    /// <returns>A string representing the settlement tree legend.</returns>
    public str legendContext()
    {
        return strfmt('%1 - %2', issueClosed, "@SYS101180") +
               strfmt('      %1 - %2', issueOpen, "@SYS101179") +
               strfmt('      %1 - %2', receipt, "@SYS77799") +
               strfmt('      %1 - %2', receiptOrigin, "@SYS101178") +
               strfmt('      %1 - %2', adjustment, "@SYS596") +
               strfmt('      %1 - %2', routeConsumption, "@SYS5304") +
               strfmt('      %1 - %2', circularity, "@SYS58731");
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTxt</Name>
				<Source><![CDATA[
    public str formatTxt()
    {
        return "@SYS12836" + ' / '+
               "@SYS101181"+ ' / '+
               "@SYS7399"  + ' / '+
               "@SYS15217" + ' / '+
               "@SYS13864" + ' / '+
               "@SYS14578" + ' / '+
               "@SYS3987"  + ' / '+
               // <GEERU>
               (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) ? "@SYS23727" + ' / ' + "@SYS3179" + ' / '+ "@SYS8079" + ' / ' : '') +
               // </GEERU>
               "@SYS3058";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIndicator</Name>
				<Source><![CDATA[
    protected str setIndicator(InventSettlementTreeNode _inventSettlementTreeNode)
    {
        if (_inventSettlementTreeNode.parmCircularity() && _inventSettlementTreeNode.parmHasChildren())
        {
            return circularity;
        }

        switch (_inventSettlementTreeNode.parmNodeRecord().TableId)
        {
            case tableNum(InventTrans):

                if (_inventSettlementTreeNode.parmQtySettled() > 0 )
                {
                    InventTrans inventTrans = _inventSettlementTreeNode.parmNodeRecord();
                    if (! _inventSettlementTreeNode.parmHasChildren())
                    {
                        return receiptOrigin;
                    }
                    else
                    {
                        if (inventTrans.CostAmountAdjustment)
                        {
                            return receipt;
                        }
                        return receiptOrigin;
                    }
                }
                else
                {
                    if (_inventSettlementTreeNode.parmHasChildren())
                    {
                        return issueClosed;
                    }
                    return issueOpen;
                }

            case tableNum(InventSettlement):
                return adjustment;

            case tableNum(ProdTableJour):
                return routeConsumption;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /*MAN
    This method is called when no SysLastValue record can be found in xSysLastValue.GetLast()
    */
    public void initParmDefault()
    {
        noOfDecimals = numOfDec(Currency::roundingPrecisionAdjusted(Ledger::accountingCurrency()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSettlementTreeNode</Name>
				<Source><![CDATA[
    protected InventSettlementTreeNode inventSettlementTreeNode(int  _nodeIdx)
    {
        if (_nodeIdx && mapInventSettlementTreeNode && mapInventSettlementTreeNode.exists(_nodeIdx))
        {
            return  mapInventSettlementTreeNode.lookup(_nodeIdx);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    private DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueElementName()
    {
        return formName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(FormTreeControl _tree, FormName _formName)
    {
        if (! this.checkAccessRights())
        {
            throw error("@SYS79625");
        }

        imageList = new ImageListAppl_InventSettlement();

        tree = _tree;
        tree.setImagelist(imageList.imageList());

        formName = _formName;

        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeIdx2Record</Name>
				<Source><![CDATA[
    public Common  nodeIdx2Record(int  _nodeIdx)
    {
        Common                      common;
        InventSettlementTreeNode    inventSettlementTreeNode = this.inventSettlementTreeNode(_nodeIdx);

        if ( inventSettlementTreeNode)
        {
            return  inventSettlementTreeNode.parmNodeRecord();
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeTxt</Name>
				<Source><![CDATA[
    protected str nodeTxt(InventSettlementTreeNode _inventSettlementTreeNode)
    {
        str                 lineTxt;

        switch (_inventSettlementTreeNode.parmNodeRecord().TableId)
        {
            case tableNum(InventTrans):
                InventTrans inventTrans = _inventSettlementTreeNode.parmNodeRecord();
                InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();

                lineTxt =  inventTransOrigin.ItemId                      + ' / ' ;
                lineTxt += _inventSettlementTreeNode.parmFinancialDim()  + ' / ' ;
                lineTxt += _inventSettlementTreeNode.parmItemName()      + ' / ' ;
                lineTxt += enum2str(inventTransOrigin.ReferenceCategory) + ' / ' ;
                lineTxt += inventTransOrigin.ReferenceId                 + ' / ' ;

                break;

            default:

                lineTxt =  '-- / ' ;
                lineTxt += '-- / ' ;
                lineTxt += '-- / ' ;
                lineTxt += _inventSettlementTreeNode.parmNodeDescription() + ' / ';
                lineTxt += '-- / ' ;
                break;
        }

        lineTxt += num2str(_inventSettlementTreeNode.parmQtySettled(),0,noOfDecimals,0,2)  + ' / ';
        lineTxt += num2str(_inventSettlementTreeNode.parmQtySettled() ? CurrencyExchangeHelper::amount(_inventSettlementTreeNode.parmValueSettled() / _inventSettlementTreeNode.parmQtySettled()) : 0,0,noOfDecimals,0,2) + ' / ';
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            switch (_inventSettlementTreeNode.parmNodeRecord().TableId)
            {
                case tablenum(InventSettlement) :
                    lineTxt += (_inventSettlementTreeNode.parmNodeRecord().(fieldnum(InventSettlement, MarkupCode_RU)) + ' / ');
                    lineTxt += (_inventSettlementTreeNode.parmNodeRecord().(fieldnum(InventSettlement, VendInvoiceIdMarkup_RU)) + ' / ');
                    lineTxt += (_inventSettlementTreeNode.parmNodeRecord().(fieldnum(InventSettlement, VendAccountMarkup_RU)) + ' / ');
                    break;
                default :
                    lineTxt += "@GLS102406" + ' / ';
                    break;
            }
        }
        // </GEERU>
        lineTxt += num2str(_inventSettlementTreeNode.parmValueSettled(),0,noOfDecimals,0,2);

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openJumpRefForm</Name>
				<Source><![CDATA[
    public void openJumpRefForm(int    _nodeIdx)
    {
        Args            args = new Args();

        if (! _nodeIdx)
        {
            return;
        }

        Common common = this.nodeIdx2Record(_nodeIdx);

        DictTable dictTable = new DictTable(common.TableId);
        if (! dictTable.formRef() || ! common.RecId)
        {
            return;
        }

        args.record(common);
        MenuFunction menuFunction = new MenuFunction(dictTable.formRef(), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageList</Name>
				<Source><![CDATA[
    public ImageListAppl_InventSettlement parmImageList(ImageListAppl_InventSettlement _imageList = imageList)
    {
        imageList = _imageList;

        return imageList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoOfDecimals</Name>
				<Source><![CDATA[
    public NoOfDecimals parmNoOfDecimals(NoOfDecimals _noOfDecimals = noOfDecimals)
    {
        noOfDecimals = _noOfDecimals;

        return noOfDecimals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveHeight</Name>
				<Source><![CDATA[
    public int parmSaveHeight(int _saveHeight = saveHeight)
    {
        saveHeight = _saveHeight;

        return saveHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveWidth</Name>
				<Source><![CDATA[
    public int parmSaveWidth(int _saveWidth = saveWidth)
    {
        saveWidth = _saveWidth;

        return saveWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    void saveLast()
    {
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCircularity</Name>
				<Source><![CDATA[
    protected void  setCircularity(
        InventSettlementTreeNode   _treeNode,
        TreeItemIdx                _nodeIdParent)
    {
        InventSettlementTreeNode    treeNodePrevious;

        if (_treeNode.parmNodeRecord().TableId != tableNum(InventTrans) || ! _nodeIdParent)
        {
            return;
        }

        Set setInventTrans = new Set(typeName2Type(extendedTypeStr(RecId)));
        setInventTrans.add(_treeNode.parmNodeRecord().RecId);

        int nodeIdx = _nodeIdParent;

        while (nodeIdx)
        {
            if (mapInventSettlementTreeNode.exists(nodeIdx))
            {
                treeNodePrevious = mapInventSettlementTreeNode.lookup(nodeIdx);
            }
            else
            {
                return;
            }

            if (setInventTrans.in(treeNodePrevious.parmNodeRecord().RecId))
            {
                _treeNode.parmCircularity(true);
                return;
            }

            setInventTrans.add(treeNodePrevious.parmNodeRecord().RecId);

            nodeIdx = treeNodePrevious.parmParentNodeIdx();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tree</Name>
				<Source><![CDATA[
    public FormTreeControl tree()
    {
        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     tmpVersion     = conPeek(packedClass,1);

        switch (tmpVersion)
        {
            case #CurrentVersion :
                [tmpVersion,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTreeNode</Name>
				<Source><![CDATA[
    protected void updateTreeNode(InventSettlementTreeNode    _inventSettlementTreeNode)
    {
        FormTreeItem treeItem = tree.getItem(_inventSettlementTreeNode.parmNodeIdx());
        treeItem.children(_inventSettlementTreeNode.parmCircularity() ? false : _inventSettlementTreeNode.parmHasChildren());

        tree.setItem(treeItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
