<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesUpdateConfirmDatesAsync</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesUpdateConfirmDatesAsync</c> class implements the logic to set confirmed dates for a
/// <c>SalesDeliveryDateControlMap</c> map in an asynchronous call.
/// </summary>
class SalesUpdateConfirmDatesAsync
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the confirmed dates of the specified record according to an asynchronous strategy.
    /// </summary>
    /// <param name="_tableName">
    /// A string value that holds a table name.
    /// </param>
    /// <param name="_recId">
    /// An integer value that holds a <c>RecId</c> value.
    /// </param>
    /// <remarks>
    /// The logic in this method is executed in an asynchronous call.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// If a not recovered update conflict occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    /// If an update conflict occurred.
    /// </exception>
    public void updateConfirmedDates(
        tableName   _tableName,
        RecId       _recId)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            switch (_tableName)
            {
                case tablestr(SalesLine):
                    this.updateSalesLine(_recId);
                    break;
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets confirmed dates for a sales order line record.
    /// </summary>
    /// <param name="_salesLineRecId">
    /// An integer value that holds a sales order line ID.
    /// </param>
    protected void updateSalesLine(RefRecId    _salesLineRecId)
    {
        SalesLine   salesLine = SalesLine::findRecId(_salesLineRecId,true);

        if (   salesLine.RecId
            && salesLine.type().setConfirmedDates(SalesConfirmDatesAsyncStrategy::construct()))
        {
            salesLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesUpdateConfirmDatesAsync</c> class.
    /// </summary>
    /// <returns>
    /// A <c>SalesUpdateConfirmDatesAsync</c> object.
    /// </returns>
    public static SalesUpdateConfirmDatesAsync construct()
    {
        return new SalesUpdateConfirmDatesAsync();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateConfirmedDatesAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the calculation and update of the confirmed dates for the specified parameters.
    /// </summary>
    /// <param name="_parameters">
    /// The parameters for the calculation of updated delivery dates.
    /// </param>
    /// <returns>
    /// An empty container.
    /// </returns>
    public static container doUpdateConfirmedDatesAsync(container _parameters)
    {
        tableName   tableNameParameter;
        RecId       recIdParameter;

        [tableNameParameter, recIdParameter] = _parameters;
        SalesUpdateConfirmDatesAsync::construct().updateConfirmedDates(tableNameParameter, recIdParameter);

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConfirmedDatesAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and updates the confirmed dates for the specified <c>SalesDeliveryDateControlMap</c> map in an asynchronous call.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMap">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record having confirmed date fields.
    /// </param>
    public static void updateConfirmedDatesAsync(SalesDeliveryDateControlMap  _salesDeliveryDateControlMap)
    {
        xGlobal::runAsync(classNum(SalesUpdateConfirmDatesAsync), staticmethodStr(SalesUpdateConfirmDatesAsync, doUpdateConfirmedDatesAsync), [tableid2name(_salesDeliveryDateControlMap.TableId),_salesDeliveryDateControlMap.RecId]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>