<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalProforma_Print_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class InventJournalProforma_Print_RU extends RunBaseBatch
                                           implements InventJournalReportPackable_RU, BatchRetryable
{
    InventJournalTable          inventJournalTable;

    List                        inventReportsList;
    InventJournalReportType_RU  reportType;
    InventJournalProforma_RU    report;

    #DEFINE.CurrentVersion(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return report ? enum2str(report.reportType()) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    #define.columns(2)
    #define.Width(200)
    public Object dialog()
    {
        DialogRunbase dialog = super();

        if (report && inventReportsList && ! inventReportsList.empty())
        {
            DialogGroup dialogGroup = dialog.addGroup();

            dialogGroup.frameType(FormFrameType::Auto);
            dialogGroup.widthMode(1);
            dialogGroup.heightMode(1);
            dialogGroup.columns(#columns);

            dialog.addText("@SYS4080946", #Width);

            dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(InventJournalPrint_RU), DialogMenuItemGroup::BottomGrp);
        }
        else
            throw error("@GLS101555");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    private void initReportData(InventJournalTable _inventJournalTable, InventJournalReportType_RU _reportType)
    {
        inventJournalTable = _inventJournalTable;
        reportType         = _reportType;
        inventReportsList  = new List(Types::Class);
        report             = InventJournalProforma_RU::construct(reportType);
        report.initOfficialsDefault(_inventJournalTable.OffSessionId_RU);
        inventReportsList.addEnd(report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, this.packReportList(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReportList</Name>
				<Source><![CDATA[
    public container packReportList()
    {
        if (inventReportsList)
            return inventReportsList.pack();

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReportsData</Name>
				<Source><![CDATA[
    private container packReportsData()
    {
        if (inventReportsList)
            return inventReportsList.pack();

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method outputs current report to excel or something else
    /// </summary>
    public void run()
    {
        Args                args = new Args();
        List lst = report.createXML(inventJournalTable);
        ListIterator it = new ListIterator(lst);

        if (lst.elements() == 0)
        {
            error("@GLS101555");
            return;
        }

        while (it.more())
        {
            XmlDocument xmlDocument = it.value();

            if (report.isExcelReport())
            {
                XMLExcelReport_RU excelReport = report.createExcelReport();
                args.parm(xmlDocument.xml());
                excelReport.parmArgs(args);

                if (excelReport.init())
                {
                    excelReport.runOperation();
                }
            }

            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method determines whether default button should be shown
    /// </summary>
    /// <returns>
    /// whether current report is an excel report
    /// </returns>
    public boolean showDefaultButton()
    {
        return !report.isExcelReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer   version = conPeek(_packedClass,1);
        boolean   ret = true;
        container packedList, base;

        switch (version)
        {
            case #CurrentVersion :

                [version, packedList, base] = _packedClass;

                if ( ! this.inGetSaveLast() || this.isInBatch())
                {
                    inventReportsList = List::create(packedList);
                }
                super(base);
            break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if ( ! _args || ! _args.record() || ! (_args.dataset() == tableNum(InventJournalTable)))
            throw error(Error::wrongUseOfFunction(funcName()));

        if (_args.parmEnumType() != enumNum(InventJournalReportType_RU))
            throw error(Error::wrongUseOfFunction(funcName()));

        InventJournalTable inventJournalTable = _args.record();
        InventJournalProforma_Print_RU runBaseReport = new InventJournalProforma_Print_RU();

        runBaseReport.initReportData(inventJournalTable, _args.parmEnum());

        if (runBaseReport.prompt())
        {
            runBaseReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>