<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookTransCalc_Sales_OnPayment_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookTransCalc_Sales_OnPayment_RU extends BookTransCalc_Sales_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
    protected void processInvoice()
    {
        FactureCalcBalances_OnPayment_RU    factureCalcBalances;
        SalesBookTable_RU                   salesBookTable;
        SalesBookTrans_RU                   salesBookTrans;
        MapEnumerator                       mapEnumerator;
        TransDate                           settlementDate,reverseDate;
        recId                               transRecId, settlementRecId,reverseTransRecId,paymentTransRecId;
        CustTrans                           paymentTrans;
        BookStructVATAmounts_RU             settledAmounts;
        NoYes                               reverseTrans;
        CompanyId                           transCompany;
        CompanyId                           paymentTransCompany;

        setPrefix("@GLS101510");

        select firstonly RecId from salesBookTrans
        exists join salesBookTable
            where salesBookTable.Policy      == CustTaxation_RU::OnDelivery         &&
                  salesBookTable.RecId       == salesBookTrans.SalesBookTable_RU    &&
                  salesBookTable.ClosingDate < #TransitionStartDate                 &&
                  salesBookTrans.FactureId   == factureJour.FactureId               &&
                  (salesBookTrans.TransType  == SalesPurchBookTransType_RU::Invoice ||
                   salesBookTrans.TransType  == SalesPurchBookTransType_RU::CreditNote);

        if (salesBookTrans.RecId)
            return;

        factureCalcBalances = new FactureCalcBalances_OnPayment_RU(factureJour);
        factureCalcBalances.calc();

        mapEnumerator = this.reduceSettlementMap(factureCalcBalances.mapSettledAmounts()).getEnumerator();

        while (mapEnumerator.moveNext())
        {
            settledAmounts = BookStructVATAmounts_RU::create(mapEnumerator.currentValue());

            [settlementDate,
             settlementRecId,
             transRecId,
             paymentTransRecId,
             reverseTransRecId,
             reverseTrans,
             reverseDate,
             transCompany,
             paymentTransCompany] = mapEnumerator.currentKey();

            paymentTrans = CustTrans::findByCompany(paymentTransCompany, paymentTransRecId);

            if (fullCheck && ! TaxReportPeriod::checkVATPeriod_RU(factureJour.FactureDate, settlementDate))
            {
                setPrefix(strFmt("@GLS111359", factureJour.CustVendInvoiceAccount, factureJour.FactureExternalId));

                warning(strFmt("@GLS104864", paymentTrans.Voucher, factureJour.FactureExternalId),
                        '',
                        new SysInfoAction_FormName_RU(factureJour, formStr(FactureJournal_RU)));
            }

            if (settledAmounts.amountInclVAT())
            {
                salesPurchBookDataMap.clear();

                salesPurchBookDataMap.FactureID             = factureJour.FactureId;
                salesPurchBookDataMap.FactureDate           = factureJour.FactureDate;
                salesPurchBookDataMap.FactureJour_RU        = factureJour.RecId;
                salesPurchBookDataMap.FactureDate_External  = factureJour.FactureDate_External ? factureJour.FactureDate_External : factureJour.FactureDate;
                salesPurchBookDataMap.PaymentDate           = paymentTrans.TransDate;
                salesPurchBookDataMap.SettlementDate        = settlementDate;
                salesPurchBookDataMap.FactureExternalId     = factureJour.FactureExternalId;
                salesPurchBookDataMap.AccountNum            = factureJour.CustVendInvoiceAccount;
                salesPurchBookDataMap.AccountName           = this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount);

                salesPurchBookDataMap.AmountInclVAT         = settledAmounts.amountInclVAT();
                salesPurchBookDataMap.AmountLiableToVAT20   = settledAmounts.amountLiableToVAT20();
                salesPurchBookDataMap.AmountLiableToVAT10   = settledAmounts.amountLiableToVAT10();
                salesPurchBookDataMap.AmountLiableToVAT0    = settledAmounts.amountLiableToVAT0();
                salesPurchBookDataMap.AmountNotLiableToVAT  = settledAmounts.amountNotLiableToVAT();
                salesPurchBookDataMap.TaxAmountVAT20        = settledAmounts.taxAmountVAT20();
                salesPurchBookDataMap.TaxAmountVAT10        = settledAmounts.taxAmountVAT10();
                if (reverseTransRecId)
                {
                    salesPurchBookDataMap.Reversed          = reverseTrans;
                    salesPurchBookDataMap.ReverseDate       = reverseTrans ? reverseDate : dateNull();
                }
                if (reverseTrans)
                {
                    salesPurchBookDataMap.TransType             = salesPurchBookDataMap.AmountInclVAT < 0 ?
                                                                            SalesPurchBookTransType_RU::Invoice :
                                                                            SalesPurchBookTransType_RU::CreditNote;
                }
                else
                {
                    salesPurchBookDataMap.TransType             = salesPurchBookDataMap.AmountInclVAT > 0 ?
                                                                            SalesPurchBookTransType_RU::Invoice :
                                                                            SalesPurchBookTransType_RU::CreditNote;
                }

                salesPurchBookDataMap.PaymentRecIdRef       = paymentTrans.RecId;
                salesPurchBookDataMap.RefTableId            = paymentTrans.TableId;
                salesPurchBookDataMap.PaymentCompany        = paymentTransCompany;
                salesPurchBookDataMap.LineNum               = lineNum;

                if (toDate >= #BookCorrectionDate)
                {
                    if (salesPurchBookDataMap.Reversed)
                    {
                        salesPurchBookDataMap.CorrectedFactureExternalId = salesPurchBookDataMap.FactureExternalId;
                        salesPurchBookDataMap.CorrectedFactureDate       = salesPurchBookDataMap.FactureDate_External;
                        if (salesPurchBookDataMap.ReverseDate)
                        {
                            salesPurchBookDataMap.CorrectedSalesPurchBookTable_RU =
                                SalesBookTable_RU::findFirstByClosingDate(salesPurchBookDataMap.ReverseDate).RecId;
                        }
                    }
                    else if (factureJour.CorrectedFactureExternalId)
                    {
                        salesPurchBookDataMap.CorrectedFactureExternalId = factureJour.CorrectedFactureExternalId;
                        salesPurchBookDataMap.CorrectedFactureDate       = factureJour.CorrectedFactureDate;
                        if (factureJour.CorrectedPeriod)
                        {
                            salesPurchBookDataMap.CorrectedSalesPurchBookTable_RU =
                                SalesBookTable_RU::findFirstByClosingDate(factureJour.CorrectedPeriod).RecId;
                        }
                    }
                }

                salesPurchBookDataMap.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>