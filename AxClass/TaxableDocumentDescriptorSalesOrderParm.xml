<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorSalesOrderParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the tax document bundler for normal sales order packing slip and export order shipping bill.
/// </summary>
[TaxableDocumentDescriptorAttribute("Sales order packing slip, picking list and export order shipping bill", "SalesOrderParm")]
public class TaxableDocumentDescriptorSalesOrderParm extends TaxableDocumentDescriptorBase
    implements TaxableDocumentTypeDefinitionSalesOrderPackingSlip, TaxableDocumentTypeDefinitionSalesOrderPickingList,
        TaxableDocumentTypeDefinitionSalesInvoice, TaxableDocumentTypeDefinitionSalesConfirmation,
        TaxableDocumentTypeDefinitionExportOrderShippingBill_IN, TaxableDocumentTypeDefinitionProjectPackingSlip
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocSalesOrderParmDataProvider(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        return TaxAccountingPostingProfileDistributionSide::Credit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    public ClassName getSourceTaxableDocumentType()
    {
        ClassName       ret;
        CustInvoiceJour custInvoiceJour;
        SalesParmTable  salesParmTable;
        
        if (rootTable.TableId == tablenum(SalesParmTable))
        {
            salesParmTable = rootTable as SalesParmTable;
        }
        else if (rootTable.TableId == tablenum(CustInvoiceJour))
        {
            custInvoiceJour = rootTable as CustInvoiceJour;
            salesParmTable = SalesParmTable::findSalesId(custInvoiceJour.SalesId, custInvoiceJour.ParmId);
        }

        Debug::assert(salesParmTable.RecId != 0);

        switch (salesParmTable.Ordering)
        {
            case DocumentStatus::Confirmation:
                ret = classStr(TaxableDocumentTypeDefinitionSalesConfirmation);
                break;
            case DocumentStatus::PackingSlip:
                ret = classStr(TaxableDocumentTypeDefinitionSalesOrderPackingSlip);
                break;
            case DocumentStatus::PickingList:
                ret = classStr(TaxableDocumentTypeDefinitionSalesOrderPickingList);
                break;
            case DocumentStatus::Invoice:
                ret = classStr(TaxableDocumentTypeDefinitionSalesInvoice);
                break;
            // <GIN>
            case DocumentStatus::ShippingBill_IN:
                ret = classStr(TaxableDocumentTypeDefinitionExportOrderShippingBill_IN);
                break;
            // </GIN>
            case DocumentStatus::ProjectPackingSlip:
                ret = classStr(TaxableDocumentTypeDefinitionProjectPackingSlip);
                break;
            default:
                ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocumentRootTableId</Name>
				<Source><![CDATA[
    public TableId getTaxableDocumentRootTableId()
    {
        return tableNum(SalesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAdjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax adjustable for this transaction
    /// </summary>
    /// <returns>
    /// True if tax is adjustable; otherwise, false.
    /// </returns>
    public boolean isTaxAdjustable()
    {
        if (rootTable.TableId == tablenum(SalesParmTable))
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxableDocumentRootRecord</Name>
				<Source><![CDATA[
    protected void setTaxableDocumentRootRecord(Common _rootRecord)
    {
        SalesParmTable  salesParmTableLoc;
        SalesParmUpdate salesParmUpdate;

        super(_rootRecord);

        if (_rootRecord.TableId == tableNum(SalesParmUpdate))
        {
            salesParmUpdate = _rootRecord as SalesParmUpdate;

            select firstOnly salesParmTableLoc
                where salesParmTableLoc.ParmId == salesParmUpdate.ParmId;

            rootTable = salesParmTableLoc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>True if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        if (rootTable is SalesParmTable)
        {
            SalesParmTable salesParmTable = rootTable as SalesParmTable;
            if (salesParmTable.Ordering == DocumentStatus::ShippingBill_IN || salesParmTable.Ordering == DocumentStatus::Invoice)
            {
                return true;
            }
        }
        // WMSPickingRoute is the journal table for sales packing list journal.
        else if (rootTable is custInvoiceJour 
                || rootTable is CustomsShippingBillJour_IN
                || (rootTable is CustPackingSlipJour || rootTable is WMSPickingRoute))
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>