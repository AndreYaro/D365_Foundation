<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailServicingOrchestrator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventLogger = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// The <c>RetailServicingOrchestrator</c> class processes any incoming Retail servicing requests.
/// </summary>
class RetailServicingOrchestrator
{
    private const str authServicingDetailsPath = '/Configuration/AuthServicingDetails';
    private const str retargetRetailPath = '/Configuration/RetargetRetail';

    private const str tenantIdPath = '/Configuration/RetargetRetail/TenantId';
    private const str identityProviderPath = '/Configuration/RetargetRetail/IdentityProvider';
    private const str channelProfileNamePath = '/Configuration/RetargetRetail/RetailChannelProfileName';
    private const str retailServerUrlPath = '/Configuration/RetargetRetail/RetailServerUrl';
    private const str mediaServerUrlPath = '/Configuration/RetargetRetail/MediaServerUrl';
    private const str cloudPOSUrlPath = '/Configuration/RetargetRetail/CloudPOSUrl';

    private const str channelDatabaseProfileNamePath = '/Configuration/RetargetRetail/DatabaseProfileName';
    private const str channelDatabaseServerPath = '/Configuration/RetargetRetail/ChannelDatabaseServer';
    private const str channelDatabaseNamePath = '/Configuration/RetargetRetail/ChannelDatabaseName';
    private const str channelDatabaseUserPath = '/Configuration/RetargetRetail/ChannelDatabaseUser';
    private const str channelDatabasePassPath = '/Configuration/RetargetRetail/ChannelDatabasePass';
    private const str channelDatabaseTrustServerCertificate = '/Configuration/RetargetRetail/TrustServerCertificate';

    private const str rtsProfileIdPath = '/Configuration/RetargetRetail/RtsProfileId';
    private const str aosUrlPath = '/Configuration/RetargetRetail/AosUrl';
    private const str aosSoapUrlPath = '/Configuration/RetargetRetail/AosSoapUrl';

    private const str selfServiceEnvironmentIdPath = '/Configuration/RetargetRetail/EnvironmentId';
    private const str selfServiceClientAppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/ClientAppInsightsInstrumentationKey';
    private const str selfServiceHardwareStationAppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/HardwareStationAppInsightsInstrumentationKey';
    private const str selfServiceCloudPosAppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/CloudPosAppInsightsInstrumentationKey';
    private const str selfServiceRetailServerAppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/RetailServerAppInsightsInstrumentationKey';
    private const str selfServiceAsyncClientAppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/AsyncClientAppInsightsInstrumentationKey';
    private const str selfServiceWindowsPhoneAppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/WindowsPhoneAppInsightsInstrumentationKey';
    private const str selfServiceAsyncServerConnectorServiceAppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/AsyncServerConnectorServiceAppInsightsInstrumentationKey';
    private const str selfServiceRealtimeServiceAX63AppInsightsInstrumentationKeyPath = '/Configuration/RetargetRetail/RealtimeServiceAX63AppInsightsInstrumentationKey';

    private const str retargetingInternalReleaseDate = '2017-08-14';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retail servicing end-point to update system configurations. Eg.
    /// * Auth data update requests generated by RotateAuthData package.
    /// </summary>
    /// <param name = "serviceRequestAsXmlString">Xml string containing the service request.
    /// Sample input xml will look similar to:
    /// <![CDATA[
    /// <?xml version="1.0" encoding="UTF-8"?>
    /// <Configuration>
    /// <AuthServicingDetails>
    ///     <NewSqlServerName>DynamicsInt.cloudapp.net</NewSqlServerName>
    ///     <NewDatabaseName>DynamicsIntDatabase</NewDatabaseName>
    ///     <NewUsername>newAxRetailDataSyncUser</NewUsername>
    ///     <NewUserPassword>newEncodedPassWord</NewUserPassword>
    /// </AuthServicingDetails>
    /// <RetargetRetail>
    /// <ChannelDatabaseServer>localhost</ChannelDatabaseServer>
    /// <ChannelDatabaseName>AxDbRain</ChannelDatabaseName>
    /// <ChannelDatabaseUser>axretaildatasyncuser</ChannelDatabaseUser>
    /// <ChannelDatabasePass>RetailWebSite@123</ChannelDatabasePass>
    /// <DataGroupName>Default</DataGroupName>
    /// <DataGroupDescription>Default data group</DataGroupDescription>
    /// <DatabaseProfileName>Default</DatabaseProfileName>
    /// <TrustServerCertificate>True</TrustServerCertificate>
    /// <AosUrl>https://usnconeboxax1aos.cloud.onebox.dynamics.com</AosUrl>
    /// <IdentityProvider>https://sts.windows-ppe.net/</IdentityProvider>
    /// <UserId>RetailServerSystemAccount@dynamics.com</UserId>
    /// <AudienceUrn>
    /// </AudienceUrn>
    /// <AosAdminUserId>tusr1@TAEOfficial.ccsctp.net</AosAdminUserId>
    /// <RtsProfileId>Default</RtsProfileId>
    /// <TenantId>4dbfcf74-c5a6-4727-b638-d56e51d1f381</TenantId>
    /// <RetailChannelProfileName>Default</RetailChannelProfileName>
    /// <RetailServerUrl>https://usnconeboxax1ret.cloud.onebox.dynamics.com/Commerce</RetailServerUrl>
    /// <MediaServerUrl>https://usnconeboxax1ret.cloud.onebox.dynamics.com/MediaServer</MediaServerUrl>
    /// <CloudPOSUrl>https://usnconeboxax1pos.cloud.onebox.dynamics.com</CloudPOSUrl>
    /// </RetargetRetail>
    /// </Configuration>
    /// ]]]]><![CDATA[>
    /// </param>
    public static void execute(str serviceRequestAsXmlString)
    {
        XmlDocument serviceRequestAsXmlDocument;
        System.Exception exception;

        try
        {
            serviceRequestAsXmlDocument = new XmlDocument();
            serviceRequestAsXmlDocument.loadXml(serviceRequestAsXmlString);

            XmlNode authServicingDetailsNode = serviceRequestAsXmlDocument.selectSingleNode(authServicingDetailsPath);
            boolean isRequestForAuthServicing = authServicingDetailsNode != null;

            XmlNode retargetRetailNode = serviceRequestAsXmlDocument.selectSingleNode(retargetRetailPath);
            boolean isretargetRetail = retargetRetailNode != null;

            if (isRequestForAuthServicing)
            {
                str taskName = 'Retail Channel database auth data update.';
                EventLogger::EventWriteRetailServicingTaskStart(taskName);

                // Extract required information from incoming xml.
                str newDataSyncUser = authServicingDetailsNode.getNamedElement('NewUsername').text();
                str newSqlServerName = authServicingDetailsNode.getNamedElement('NewSqlServerName').text();
                str newDatabaseName = authServicingDetailsNode.getNamedElement('NewDatabaseName').text();

                str newEncodedDataSyncUserPassword = authServicingDetailsNode.getNamedElement('NewUserPassword').text();
                str newDecodedDataSyncUserPassword = System.Text.Encoding::UTF8.GetString(System.Convert::FromBase64String(newEncodedDataSyncUserPassword));

                // Call the channel database connection string update method.
                RetailServicingOrchestrator::updateChannelDatabaseProfileConnectionString(newDataSyncUser, newDecodedDataSyncUserPassword, newSqlServerName, newDatabaseName);
                EventLogger::EventWriteRetailServicingTaskStop(taskName);
            }

            if (isretargetRetail)
            {
                str taskName = 'Retarget Retail task - tracking version: ' + retargetingInternalReleaseDate;

                EventLogger::EventWriteRetailServicingTaskStart(taskName);

                // Update RTS profile with the new aossoap url
                RetailServicingOrchestrator::retargetRTSProfile(serviceRequestAsXmlDocument);

                // Update channel database connetion string
                RetailServicingOrchestrator::retargetChannelDatabaseProfileConnectionString(serviceRequestAsXmlDocument);

                // Update other encrypted records
                RetailServicingOrchestrator::resetPaymentRelatedEncryptionSettings(serviceRequestAsXmlDocument);

                // Cleanup dirty records.
                RetailServicingOrchestrator::retargetDirtyRecords(serviceRequestAsXmlDocument);

                // Update retail server profiles with the right urls
                RetailServicingOrchestrator::retargetRetailChannelProfile(serviceRequestAsXmlDocument);

                // Update retail self-service configurations
                RetailServicingOrchestrator::retargetSelfServiceConfig(serviceRequestAsXmlDocument);

                // Run full sync
                if (RetailDeploymentUtility::isRetailSchedulerEnabled())  // If Retail and RetailScheduler are enabled, run it, otherwise, skip it.
                {
                    EventLogger::EventWriteRetailServicingInformation('Retail Scheduler is enabled, continue to run seed data and run full sync.');
                    try
                    {                        
                        RetailServicingOrchestrator::generateRequiredSeedDataNumberSequences();
                        
                        EventLogger::EventWriteRetailServicingInformation('Reinitializing Retail seed data.');
                        RetailConnSeedDataGenerator::main(null);
                        EventLogger::EventWriteRetailServicingInformation('Reinitializing Retail seed data is completed.');
                    }
                    catch (exception)
                    {
                        EventLogger::EventWriteRetailServicingError('Error occurred when trying to generate seed data.', exception.Message, exception.StackTrace);
                    }

                    try
                    {
                        EventLogger::EventWriteRetailServicingInformation('Reinitializing Retail CDX jobs.');
                        RetailCDXSeedDataAX7 seed = new RetailCDXSeedDataAX7(true);
                        seed.run();
                        EventLogger::EventWriteRetailServicingInformation('Reinitializing Retail CDX jobs is completed.');

                        // Retargeting tool will schedule the full sync but won't wait for it to finish, in order to be compatiable with legacy code, 20 mins waiting time is still passed.
                        EventLogger::EventWriteRetailServicingInformation('Scheduling Retail CDX full sync.');
                        RetailDeploymentUtility::RunCDXDownloadJobsForAllDataGroup(20, false);
                        EventLogger::EventWriteRetailServicingInformation('CDX full sync has been scheduled, please check job status from AX UI or from table RETAILCDXDOWNLOADSESSIONDATASTORE.');
                    }
                    catch (exception)
                    {
                        EventLogger::EventWriteRetailServicingError('Error occurred when trying to run a full sync. Please check table RETAILCDXDOWNLOADSESSIONDATASTORE and RETAILCDXDOWNLOADSESSION for detailed error.', exception.Message, exception.StackTrace);
                    }
                }
                else
                {
                    EventLogger::EventWriteRetailServicingInformation('Retail Scheduler is not enabled, skip full sync.');
                }             

                EventLogger::EventWriteRetailServicingTaskStop(taskName);
            }

            // Run Retail Minor/Major Version Upgrade
            if(!isRequestForAuthServicing && !isretargetRetail)
            {
                EventLogger::EventWriteRetailServicingInformation('Trying to run Retail minor/major version upgrade.');
                try
                {
                    // If Retail and RetailScheduler are enabled, run post deployment service, otherwise, skip it.
                    // Side effect is that retail database objects will be populated in AxDB even if the customer is not using Retail, this is acceptable for now since we don't have a easy way to check the configuration key without X++ call.
                    if (RetailDeploymentUtility::isRetailEnabled() && RetailDeploymentUtility::isRetailSchedulerEnabled()) 
                    {
                        EventLogger::EventWriteRetailPostDeplConfigApplyExecStart();
                        RetailPostDeploymentConfiguration postDeploymentConfiguration = new RetailPostDeploymentConfiguration();
                        postDeploymentConfiguration.SetConfiguration(serviceRequestAsXmlString);
                        postDeploymentConfiguration.isMajorMigrationMode = true;
                        postDeploymentConfiguration.process();
                        EventLogger::EventWriteRetailServicingInformation('Retail minor/major version upgrade is completed successfully.');
                    }
                    else
                    {
                        EventLogger::EventWriteRetailServicingInformation('Retail minor/major version upgrade is skipped because Retail or RetailScheduler is not enabled.');
                    }
                }
                catch (exception)
                {
                    EventLogger::EventWriteRetailServicingError(exception.Message, exception.GetType().ToString(), exception.StackTrace);
                    throw error(exception.Message);
                }
            }
        }
        catch (exception)
        {
            EventLogger::EventWriteRetailServicingError('Error while processing servicing update request.', exception.Message, exception.StackTrace);
            throw Global::error(exception.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCustomizedSelfServicePackages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allow uploading of customized self-service packages as part of the deployment process.
    /// </summary>
    public static void uploadCustomizedSelfServicePackages()
    {
        System.Exception exception;

        try
        {
            str manifestContent = RetailSelfServicePackageManager::GetSelfServiceManifestFileContent();
            str pkgVersion = RetailSelfServicePackageManager::GetCustomizedPackageVersion(manifestContent);
            pkgVersion = (System.String::IsNullOrWhiteSpace(pkgVersion))? SelfServicePackageManager::GetApplicationVersion(): pkgVersion;

            Map customizedPkgsFilePathMap = RetailSelfServicePackageManager::GetCustomizedSelfServicePkgPathMap(manifestContent);
            Map customizedPkgsDescMap = RetailSelfServicePackageManager::GetCustomizedSelfServicePkgDescriptionMap(manifestContent);
            MapEnumerator customizedPkgsFilePathMapIterator = customizedPkgsFilePathMap.getEnumerator();

            while (customizedPkgsFilePathMapIterator.moveNext())
            {
                str pkgFilePath = customizedPkgsFilePathMapIterator.currentValue();
                PackageType typeOfPackage = customizedPkgsFilePathMapIterator.currentKey();
                str pkgDescription = customizedPkgsDescMap.lookup(typeOfPackage);

                // Ensure that the pkgFile path is not null/ empty and points to a valid file.
                if (!System.String::IsNullOrWhiteSpace(pkgFilePath) && System.IO.File::Exists(pkgFilePath))
                {
                    boolean uploadStatus = SelfServicePackageManager::UploadPackage(pkgFilePath, '', pkgDescription, typeOfPackage, pkgVersion);

                    if (!uploadStatus)
                    {
                        str errorMsg = strFmt("@RETAIL:PackageUploadFailed", pkgFilePath);
                        EventLogger::EventWriteSelfServiceError(errorMsg, errorMsg, System.Environment::StackTrace);
                        throw Global::error(errorMsg);
                    }
                }
                else
                {
                    // If the pkgFilePath variable is an empty string then that file does not exist in the manifest.
                    EventLogger::EventWriteRetailServicingInformation(strFmt('No customized %1 self-service package was available for upload. Skipping upload.', enum2Str(typeOfPackage)));
                }
            }
        }
        catch(exception)
        {
            EventLogger::EventWriteSelfServiceError('Exception raised while attemping to upload customized self-service packages.', exception.Message, exception.StackTrace);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRequiredSeedDataNumberSequences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates number sequences required for seed data.
    /// </summary>
    public static void generateRequiredSeedDataNumberSequences()
    {
        EventLogger::EventWriteRetailServicingInformation('Generating required seed data for number sequences.');
        DataArea dataArea;
        NumberSeqModuleRetailParameters numberSeqModule = new NumberSeqModuleRetailParameters();
        numberSeqModule.load();

        // Generate number sequences for all non-virtual companies.
        while select dataArea
            where dataArea.isVirtual == false
        {
            changecompany(dataArea.id)
            {
                NumberSequenceTable::autoCreate(extendedTypeNum(RetailVariantId), NumberSeqScopeFactory::createDataAreaScope(curExt()));
            }
        }

        EventLogger::EventWriteRetailServicingInformation('Generating required seed data for number sequences is completed.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChannelDatabaseProfileConnectionString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the channelDatabase Profile connection strings.
    /// </summary>
    /// <param name = "newUsername">New user replacing the target Username.</param>
    /// <param name = "newEncodedPassword">Password of the new username.</param>
    /// <param name = "newServerName">New sql server name for channel database. This is an optional parameter. If empty the existing value will be re-used.</param>
    /// <param name = "newDatabaseName">New database name for channel db. This is an optional parameter. If empty the existing value will be re-used.</param>
    private static void updateChannelDatabaseProfileConnectionString(str newUsername, str newPassword, str newServerName, str newDatabaseName)
    {
        RetailUtilities::ThrowIfStringIsNullOrWhiteSpace(newUsername, 'Parameter newUsername is invalid');
        RetailUtilities::ThrowIfStringIsNullOrWhiteSpace(newPassword, 'Parameter newPassword is invalid');

        RetailConnDatabaseProfile databaseProfile;
        System.Data.SqlClient.SqlConnectionStringBuilder connectionStringBuilderAsReference;
        System.Exception exception;
        int connectionStringsUpdatedCounter = 1;

        ttsbegin;
        while select forupdate databaseProfile
        {
            str currentConnectionString = databaseProfile.connectionStringEdit(false, '');
            connectionStringBuilderAsReference = new System.Data.SqlClient.SqlConnectionStringBuilder(currentConnectionString);

            str channelDatabaseServer = System.String::IsNullOrWhiteSpace(newServerName)? connectionStringBuilderAsReference.DataSource: newServerName;
            str channelDatabaseName = System.String::IsNullOrWhiteSpace(newDatabaseName)? connectionStringBuilderAsReference.InitialCatalog: newDatabaseName;

            str connString = RetailConnDatabaseProfile::buildCustomConnectionString(
                                    channelDatabaseServer, channelDatabaseName, newUsername, newPassword, connectionStringBuilderAsReference.TrustServerCertificate.ToString());

            databaseProfile.connectionStringEdit(true, connString);
            databaseProfile.update();
            connectionStringsUpdatedCounter++;
        }

        ttscommit;

        str infoMessage = strFmt('Successfully updated %1 channel database connection string(s).', connectionStringsUpdatedCounter);
        EventLogger::EventWriteRetailServicingInformation(infoMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retargetChannelDatabaseProfileConnectionString</Name>
				<Source><![CDATA[
    private static void retargetChannelDatabaseProfileConnectionString(XmlDocument configuration)
    {
        EventLogger::EventWriteRetailServicingInformation('Retargeting channel database profile profile.');

        System.String databaseProfileName = configuration.SelectSingleNode(channelDatabaseProfileNamePath).InnerText();
        System.String channelDatabaseServer = configuration.SelectSingleNode(channelDatabaseServerPath).InnerText();
        System.String channelDatabaseName = configuration.SelectSingleNode(channelDatabaseNamePath).InnerText();

        System.String channelDatabaseUser = configuration.SelectSingleNode(channelDatabaseUserPath).InnerText();
        System.String channelDatabasePass = configuration.SelectSingleNode(channelDatabasePassPath).InnerText();
        System.String trustServerCertificate = configuration.selectSingleNode(channelDatabaseTrustServerCertificate).innerText();
        RetailConnDatabaseProfile databaseProfile;

        ttsbegin;
        select firstonly1 forupdate databaseProfile  where databaseProfile.Name == databaseProfileName;

        if (databaseProfile.RecId != 0)
        {
            str channelDatabaseConnectionString = RetailConnDatabaseProfile::buildCustomConnectionString(
                                                    channelDatabaseServer, channelDatabaseName, channelDatabaseUser,
                                                    channelDatabasePass, trustServerCertificate);
            databaseProfile.connectionStringEdit(true, channelDatabaseConnectionString);

            databaseProfile.update();

            EventLogger::EventWriteRetailServicingInformation('Retargeting channel database profile profile completed.');
        }
        else
        {
            EventLogger::EventWriteRetailServicingWarning('Channel database profile was not found.');
        }

        ttscommit;
        EventLogger::EventWriteRetailServicingInformation('Retargeting channel database profile profile is completed.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>retargetRTSProfile</Name>
				<Source><![CDATA[
    private static void retargetRTSProfile(XmlDocument configuration)
    {
        EventLogger::EventWriteRetailServicingInformation('Retargeting rts profile.');

        System.String rtsProfileId = configuration.SelectSingleNode(rtsProfileIdPath).InnerText();
        System.String aosUrl = configuration.SelectSingleNode(aosUrlPath).InnerText();
        System.String aosSoapUrl = configuration.SelectSingleNode(aosSoapUrlPath).InnerText();

        RetailTransactionServiceProfile rtsProfile;
        UserInfo retailServiceUser;
        ttsbegin;
        select firstonly1 forupdate rtsProfile  
            where rtsProfile.name == rtsProfileId 
            && rtsProfile.IsCustomerRecord == NoYes::No;

        if (rtsProfile.RecId != 0)
        {
            rtsProfile.ServiceHostUrl = aosSoapUrl;
            rtsProfile.AzureResource = aosUrl;

            rtsProfile.update();

            EventLogger::EventWriteRetailServicingInformation('Retargeting rts completed.');

            select firstonly1 retailServiceUser where retailServiceUser.networkAlias == rtsProfile.UserId;

            if (retailServiceUser.RecId == 0)
            {
                EventLogger::EventWriteRetailServicingInformation('RetailServiceAccount is missing, recreate it.');
                RetailDeploymentUtility::CreateRetailServiceUser(rtsProfile.UserId, rtsProfile.IdentityProvider);
            }
        }
        else
        {
            EventLogger::EventWriteRetailServicingWarning('Retail transaction service profile was not found.');
        }

        ttscommit;

        EventLogger::EventWriteRetailServicingInformation('Retargeting rts profile is completed.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>retargetRetailChannelProfile</Name>
				<Source><![CDATA[
    private static void retargetRetailChannelProfile(XmlDocument configuration)
    {
        EventLogger::EventWriteRetailServicingInformation('Retargeting retail server profile.');

        System.String retailChannelProfileName = configuration.SelectSingleNode(channelProfileNamePath).InnerText();
        System.String retailServerUrl = configuration.SelectSingleNode(retailServerUrlPath).InnerText();
        System.String mediaServerUrl = configuration.SelectSingleNode(mediaServerUrlPath).InnerText();
        System.String cloudPOSUrl = configuration.SelectSingleNode(cloudPOSUrlPath).InnerText();

        System.String identityProvider = configuration.SelectSingleNode(identityProviderPath).InnerText();
        System.String tenantId = configuration.SelectSingleNode(tenantIdPath).InnerText();

        RetailChannelProfile channelProfile;
        RetailChannelProfileProperty retailServerProperty, mediaServerProperty, cloudPosProperty;

        ttsbegin;

        RetailProvisioningEndPoint::updateRetailAuthTables(str2Guid(tenantId), identityProvider, retailServerUrl);

        RetailSharedParameters sharedParameters;
        update_recordset sharedParameters setting TenantId = tenantId;

        // Attempt to find the configured channel profile.
        select firstonly1 forupdate channelProfile where channelProfile.Name == retailChannelProfileName &&
                                                        channelProfile.ChannelProfileType == RetailChannelProfileType::RetailServer;
        if (channelProfile)
        {
            EventLogger::EventWriteRetailServicingInformation('Target retail channel database profile was found, continue with retargeting process.');

            select firstonly1 forupdate retailServerProperty where retailServerProperty.Key == RetailServerProfilePropertyKey::InternalUrl && retailServerProperty.ChannelProfile == channelProfile.RecId;
            select firstonly1 forupdate mediaServerProperty where mediaServerProperty.Key == RetailServerProfilePropertyKey::MediaBaseUrl && mediaServerProperty.ChannelProfile == channelProfile.RecId;
            select firstonly1 forupdate cloudPosProperty where cloudPosProperty.Key == RetailServerProfilePropertyKey::CloudPOSUrl && cloudPosProperty.ChannelProfile == channelProfile.RecId;

            if (retailServerUrl && retailServerProperty.RecId != 0)
            {
                retailServerProperty.Value = retailServerUrl;
                retailServerProperty.update();
            }

            if (mediaServerUrl && mediaServerProperty.RecId != 0)
            {
                mediaServerProperty.Value = mediaServerUrl;
                mediaServerProperty.update();
            }

            if (cloudPosUrl && cloudPosProperty.RecId != 0)
            {
                cloudPosProperty.Value = cloudPosUrl;
                cloudPosProperty.update();
            }
        }
        else
        {
            EventLogger::EventWriteRetailServicingWarning('Target retail channel database profile was not found.');
        }

        EventLogger::EventWriteRetailServicingInformation('Retargeting retail server profile completed.');

        ttscommit;
        EventLogger::EventWriteRetailServicingInformation('Retargeting retail server profile is completed.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>retargetSelfServiceConfig</Name>
				<Source><![CDATA[
    private static void retargetSelfServiceConfig(XmlDocument configuration)
    {
        EventLogger::EventWriteRetailServicingInformation('Retargeting self-service configurations.');

        System.String tenantId = configuration.SelectSingleNode(tenantIdPath).InnerText();
        System.String environmentId = configuration.SelectSingleNode(selfServiceEnvironmentIdPath).InnerText();
        System.String clientAppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceClientAppInsightsInstrumentationKeyPath).InnerText();
        System.String hardwareStationAppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceHardwareStationAppInsightsInstrumentationKeyPath).InnerText();
        System.String cloudPosAppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceCloudPosAppInsightsInstrumentationKeyPath).InnerText();
        System.String retailServerAppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceRetailServerAppInsightsInstrumentationKeyPath).InnerText();
        System.String asyncClientAppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceAsyncClientAppInsightsInstrumentationKeyPath).InnerText();
        System.String windowsPhoneAppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceWindowsPhoneAppInsightsInstrumentationKeyPath).InnerText();
        System.String asyncServerConnectorServiceAppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceAsyncServerConnectorServiceAppInsightsInstrumentationKeyPath).InnerText();
        System.String realtimeServiceAX63AppInsightsInstrumentationKey = configuration.SelectSingleNode(selfServiceRealtimeServiceAX63AppInsightsInstrumentationKeyPath).InnerText();

        ttsbegin;
        RetailSharedParameters sharedParameters;
        update_recordset sharedParameters setting TenantId = tenantId,
            EnvironmentId = environmentId,
            ClientAppInsightsInstrumentationKey = clientAppInsightsInstrumentationKey,
            HardwareStationAppInsightsInstrumentationKey = hardwareStationAppInsightsInstrumentationKey,
            CloudPosAppInsightsInstrumentationKey = cloudPosAppInsightsInstrumentationKey,
            RetailServerAppInsightsInstrumentationKey = retailServerAppInsightsInstrumentationKey,
            AsyncClientAppInsightsInstrumentationKey = asyncClientAppInsightsInstrumentationKey,
            WindowsPhoneAppInsightsInstrumentationKey = windowsPhoneAppInsightsInstrumentationKey,
            AsyncServerConnectorServiceAppInsightsInstrumentationKey = asyncServerConnectorServiceAppInsightsInstrumentationKey,
            RealtimeServiceAX63AppInsightsInstrumentationKey = realtimeServiceAX63AppInsightsInstrumentationKey;

        // Reupload self service packages
        System.Exception exception;
        try
        {
            RetailSelfServicePackageInfo packages;
            delete_from packages;

            RetailSelfServicePackageManager::RunPostDeploymentSelfServicePackageUpload();

            EventLogger::EventWriteRetailServicingInformation('Setting default self-service packages from RetailServicingOrchestrator.');
            RetailPostDeploymentConfiguration::SetCompanyDefaultSelfServicePackages();

            RetailPostDeploymentConfiguration::SetCrossCompanyDefaultSelfServicePackages();
            EventLogger::EventWriteRetailServicingInformation('Setting default self-service packages from RetailServicingOrchestrator succeeded.');
        }
        catch(exception)
        {
            EventLogger::EventWriteSelfServiceError('Setting default self-service packages from RetailServicingOrchestrator failed.', exception.Message, exception.StackTrace);
            throw Global::error(exception.Message);
        }

        ttscommit;
        EventLogger::EventWriteRetailServicingInformation('Retargeting self-service configurations is completed.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPaymentRelatedEncryptionSettings</Name>
				<Source><![CDATA[
    private static void resetPaymentRelatedEncryptionSettings(XmlDocument configuration)
    {
        System.Exception exception;
        EventLogger::EventWriteRetailServicingInformation('Retargeting Tool: updating encrypted items.');
        try
        {
            // This method will reset the SecureMerchantProperties for payment connector related records.
            // This will need to be reset when moving the database since the columns are encrypted with local certificate.
            RetailSecurityUpdate7::main();
            EventLogger::EventWriteRetailServicingInformation('Retargeting Tool: updating encrypted items is completed.');
        }
        catch (exception)
        {            
            EventLogger::EventWriteRetailServicingError('Error when trying to update encrypted items, please go to Accounts receivable > Payments setup > Payment services, select edit button and then save it.', exception.Message, exception.StackTrace);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>retargetDirtyRecords</Name>
				<Source><![CDATA[
    private static void retargetDirtyRecords(XmlDocument configuration)
    {
        System.Exception exception;
        BatchJob job;
        DataArea dataArea;

        EventLogger::EventWriteRetailServicingInformation('Retargeting Tool: updating pending/waiting batch-jobs carried over from source environment.');
        try
        {
            // Has to iterate through each non-virtual data area since there are dirty records whose data area is missing in the system.
            // Update the batch job to finish since these status doesn't make sense in the new env, and may result in some other issues.
            while select dataArea
                where dataArea.isVirtual == false
            {
                changecompany(dataArea.id)
                {
                    update_recordset job setting Status = BatchStatus::Finished where (job.Status == BatchStatus::Waiting
                        || job.Status == BatchStatus::Hold) && job.company == dataArea.id;
                }
            }

            EventLogger::EventWriteRetailServicingInformation('Retargeting Tool: updating pending/waiting batch-jobs is completed.');
        }
        catch (exception)
        {
            EventLogger::EventWriteRetailServicingWarning('Error when trying to update batch jobs, please update the jobs with status as Waiting or Withhold manually from the client.' + exception.Message + exception.StackTrace);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>