<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBICMSAdjustmentCreateFromFiscalDoc_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBICMSAdjustmentCreateFromFiscalDoc_BR</c> class is used to add fiscal document relation to a adjustment journal
/// </summary>
public class FBICMSAdjustmentCreateFromFiscalDoc_BR extends RunBase
{
    Object                              callerForm;
    tableId                             sourceTableId;
    recId                               sourceRecId;
    FBLedgerJournalTrans_FiscalBooks_BR ledgerJournalTransFiscalBooks;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFromInvoiceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>FBLedgerJournalTrans_FiscalBooks_BR</c> record with fiscal document information.
    /// </summary>
    /// <param name="_invoicesReferencedMap">
    /// The map to be used for initialization of the record.
    /// </param>
    /// <param name="_fiscalDocumentLine">
    /// Fiscal document line used for initialization of the record.
    /// </param>
    public void addFromInvoiceMap(FiscalDocument_BR _invoicesReferencedMap, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;

        select RecId from fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.FiscalDocumentLine == _fiscalDocumentLine.RecId
                && fiscalDocumentTaxTrans.FiscalDocumentMiscCharge == 0
                && fiscalDocumentTaxTrans.Type == ledgerJournalTransFiscalBooks.TaxType;

        ledgerJournalTransFiscalBooks.FiscalDocument_BR         = _invoicesReferencedMap.RecId;
        ledgerJournalTransFiscalBooks.FiscalDocumentLine_BR     = _fiscalDocumentLine.RecId;
        ledgerJournalTransFiscalBooks.FiscalDocumentTaxTrans_BR = fiscalDocumentTaxTrans.RecId;
        ledgerJournalTransFiscalBooks.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the interface
    /// </summary>
    /// <returns>
    /// Returns the interface
    /// </returns>
    public Object  dialog()
    {
        Args            parameters = new Args();
        FormRun         fiscalReferenceCreateFromInvoices_BR;

        parameters.name(formStr(FBCIAPAssetTransCreateFromFiscalDoc_BR));
        parameters.caller(this);
        fiscalReferenceCreateFromInvoices_BR = classfactory.formRunClass(parameters);

        return fiscalReferenceCreateFromInvoices_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal establishment from the caller form.
    /// </summary>
    /// <returns>
    /// The <c>FiscalEstablishment_BR</c> table record; otherwise, null.
    /// </returns>
    public FiscalEstablishment_BR getFiscalEstablishment()
    {
        return callerForm.getFiscalEstablishment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecIdsAlreadySelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RecIds of the fiscal documents already referenced.
    /// </summary>
    /// <returns>String with the recIds to be passed to QueryBuildRange.value method.</returns>
    public str getRecIdsAlreadySelected()
    {
        return int642str(ledgerJournalTransFiscalBooks.FiscalDocument_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    public Object parmCallerForm(Object _callerForm = callerForm)
    {
        callerForm = _callerForm;

        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTransFiscalBooks</Name>
				<Source><![CDATA[
    public FBLedgerJournalTrans_FiscalBooks_BR parmLedgerJournalTransFiscalBooks(FBLedgerJournalTrans_FiscalBooks_BR _ledgerJournalTransFiscalBooks = ledgerJournalTransFiscalBooks)
    {
        ledgerJournalTransFiscalBooks = _ledgerJournalTransFiscalBooks;

        return ledgerJournalTransFiscalBooks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/define the original Record ID
    /// </summary>
    /// <param name= "_sourceRecId">
    /// Record identifier
    /// </param>
    /// <returns>
    /// Returns the rec ID
    /// </returns>
    public recId parmSourceRecId(recId _sourceRecId = sourceRecId)
    {
        sourceRecId = _sourceRecId;
        return  sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/define the original Table ID
    /// </summary>
    /// <param name = "_sourcetableId">
    /// Table identifier
    /// </param>
    /// <returns>
    /// Returns the table ID
    /// </returns>
    public tableId parmSourceTableId(tableId _sourcetableId = sourcetableId)
    {
        sourcetableId = _sourcetableId;
        return  sourcetableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define the unpacking
    /// </summary>
    /// <param name = "packedClass">
    /// Collection that contains the packed objects
    /// </param>
    /// <returns>
    /// Returns true/false for unpacking
    /// </returns>
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets basic information in order to start the class.
    /// </summary>
    /// <param name= "args">
    /// Args
    /// </param>
    static void main(Args args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10007, funcName());

        FBLedgerJournalTrans_FiscalBooks_BR         ledgerJournalTrans_FiscalBooks;
        LedgerJournalTrans                          ledgerJournalTrans;
        FormDataSource                              callerFormDataSource;
        FBICMSAdjustmentCreateFromFiscalDoc_BR      newTaxAssessmentAdjCreateFromFiscalDoc;

        Object                                      callerForm;

        FiscalEstablishment_BR                      fiscalEstablishment;

        callerForm    = args.caller();

        ledgerJournalTrans = args.record();
        callerFormDataSource = FormDataUtil::getFormDataSource(ledgerJournalTrans);

        ledgerJournalTrans_FiscalBooks = ledgerJournalTrans.SysExtensionSerializerMap::getExtensionTable(tableNum(FBLedgerJournalTrans_FiscalBooks_BR));

        newTaxAssessmentAdjCreateFromFiscalDoc = new FBICMSAdjustmentCreateFromFiscalDoc_BR();
        newTaxAssessmentAdjCreateFromFiscalDoc.parmCallerForm(callerForm);
        newTaxAssessmentAdjCreateFromFiscalDoc.parmLedgerJournalTransFiscalBooks(ledgerJournalTrans_FiscalBooks);

        fiscalEstablishment = callerForm.getFiscalEstablishment();

        changeCompany(fiscalEstablishment.dataAreaId)
        {
            if (newTaxAssessmentAdjCreateFromFiscalDoc.prompt())
            {
                newTaxAssessmentAdjCreateFromFiscalDoc.runOperation();
            }
        }

        callerFormDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>