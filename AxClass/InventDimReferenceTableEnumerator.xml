<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimReferenceTableEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimReferenceTableEnumerator implements Enumerator
{
    SqlDictionary sqlDictionary;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    public anytype current()
    {
        return new SysDictTable(sqlDictionary.tabId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    public boolean moveNext()
    {
        next sqlDictionary;
        return sqlDictionary.tabId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        SysDictType inventDimIdDictType = new SysDictType(extendedTypeNum(InventDimId));

        // DONOT disable this flight, otherwise, data corruption will occur.
        if (InventDimReferenceTableEffectiveStrLenFlight::instance().isEnabled())
        {
            select firstonly strSize from sqlDictionary
                where sqlDictionary.tabId == tableNum(InventTrans)
                 && sqlDictionary.fieldId == fieldNum(InventTrans, inventDimId);

            int inventDimIdDBStrLen = inventDimIdDictType.effectivestringLen();
            if (sqlDictionary.strSize != inventDimIdDBStrLen)
            {
                throw error("@SCM:InventDimIdEDTSizeNotMatchInventTransDimSizeError");
            }

            // Additional check to validate some tables won't be missed
            select firstonly RecId from sqlDictionary
                where sqlDictionary.fieldType == Types::String
                    && sqlDictionary.strSize == inventDimIdDBStrLen
                    && sqlDictionary.tabId == tableNum(WHSOrderCommittedReservationTransferred);

            if (!sqlDictionary.RecId)
            {
                throw error('@SCM:InventDimReferenceTableEnumeratorNotListRefTableError');
            }

            select nofetch tabId from sqlDictionary
                group by sqlDictionary.tabId
                where sqlDictionary.fieldType == Types::String
                    && sqlDictionary.strSize == inventDimIdDBStrLen
                    && sqlDictionary.tabId != 0;
        }
        else
        {
            select nofetch tabId from sqlDictionary
                group by sqlDictionary.tabId
                where sqlDictionary.fieldType == Types::String
                    && sqlDictionary.strSize == inventDimIdDictType.stringLen()
                    && sqlDictionary.tabId != 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>definitionString</Name>
				<Source><![CDATA[
    public str definitionString()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.reset();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>