<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_LedgerSheetAccount_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for general ledger reports.
/// </summary>
abstract class OXMLExcelReport_LedgerSheetAccount_RU extends OXMLExcelReport_LedgerSheet_RU
{
    int                     pageNo;
    Map                     mapBodyData;

    protected const str reportHeader = 'REPORTHEADER';
    protected const str pageHeader = 'PAGEHEADER';
    protected const str reportBody = 'REPORTBODY';
    protected const str prefixHeader = 'HEAD';
    protected const str prefixBody = 'BODY';
    protected const int localSheetIdUndefined = -1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section.
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section.
    /// </param>
    /// <returns>
    /// Height of the section.
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 15.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current company name.
    /// </summary>
    /// <returns>
    /// Company name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Name companyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report columns.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createColumns()
    {
        str                 worksheetName;
        int                 rowHeader, rowBody;
        int                 fieldsCount, i;
        OXMLWorksheet_RU    worksheet   = document.workbook().getWorksheet(1);
        int                 cx;
        real                width;

        fieldsCount = mapHeaderBuff.elements();
        [worksheetName, rowHeader]  = worksheet.workbook().definedNames().lookup([pageHeader, localSheetIdUndefined]);
        [worksheetName, rowBody]    = worksheet.workbook().definedNames().lookup([reportBody, localSheetIdUndefined]);

        worksheet.rowTemplate(rowHeader).multiplyCell(1, fieldsCount - 1);
        worksheet.rowTemplate(rowBody).multiplyCell(this.firstNumCol(), fieldsCount - this.firstNumCol());

        for (i = 1; i <= fieldsCount; i++)
        {
            document.workbook().addDefinedName(prefixHeader + int2str(i), worksheet.name(), rowHeader, i, rowHeader, i);
            document.workbook().addDefinedName(prefixBody + int2str(i), worksheet.name(), rowBody, i, rowBody, i);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report.
    /// </summary>
    protected void createReport()
    {
        this.initSectionMap();

        this.createColumns();

        this.execute(reportHeader);
        this.execute(pageHeader);
        this.printBody();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file.
    /// </summary>
    /// <returns>
    /// Name of the new file.
    /// </returns>
    protected Filename fileName()
    {
        return strRem(this.getReportTitle(), '/');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file.
    /// </summary>
    /// <returns>
    /// Postfix for a new file.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return '.extension';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section of excel report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        MapEnumerator   me = mapBodyData.getEnumerator();
        Counter         cellCounter;

        anytype getValue(str _valueStr)
        {
            anytype         value;

            if (_valueStr != '' && me.currentKey() >= this.firstNumCol() - 1)
            {
                value = this.str2Num(_valueStr);
            }
            else
            {
                value = _valueStr;
            }
            return value;
        }

        while (me.moveNext())
        {
            cellCounter ++;
            document.insertValue(prefixBody +  int2str(cellCounter), getValue(me.currentValue()));
            this.parmProgress().incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills specified report section with data.
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section.
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeader:
                this.fillReportHeader();
                break;
            case pageHeader:
                this.fillHeader();
                break;
            case reportBody:
                this.fillBody();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills header section of excel report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillHeader()
    {
        MapEnumerator   me;
        Counter         cellCounter;

        me = mapHeaderBuff.getEnumerator();

        while (me.moveNext())
        {
            cellCounter++;
            document.insertValue(prefixHeader +  int2str(cellCounter), me.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section of excel report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        this.insertValueToSection('CompanyName', this.companyName());
        this.insertValueToSection('StartDate', DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.insertValueToSection('StartTime', DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
        this.insertValueToSection('ReportTitle', this.getReportTitle());
        this.insertValueToSection('TitleCurrency', this.getTitleCurencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstNumCol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the number of the first numerical column.
    /// </summary>
    /// <returns>
    /// The number of the first numerical column.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected int firstNumCol()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTitleCurencyCode</Name>
				<Source><![CDATA[
    private TempStr getTitleCurencyCode()
    {
        TempStr     sz;

        switch (rLedgerSheetEngine.getCurrencyType())
        {
            case CurrencyType_RU::Currency :
                sz = strfmt("@GLS105044", rLedgerSheetEngine.getCurrencyCode());
                break;

            case CurrencyType_RU::Standard :
                sz = strfmt("@GLS110621", CompanyInfoHelper::standardCurrency());
                break;

            case CurrencyType_RU::Secondary :
                sz = strfmt("@SYS4081920", CompanyInfoHelper::secondaryCurrency_RU());
                break;

            default :
                throw error(error::wrongUseOfFunction(funcname()));
        }

        return sz;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sections map by report sections.
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(reportHeader);
        this.addSection(pageHeader);
        this.addSection(reportBody, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBody</Name>
				<Source><![CDATA[
    private void printBody()
    {
        int         row;

        pageNo = 1;

        if (formListControl.getCount() == 0)
        {
            info("@SYS70894");
            return;
        }

        this.fetchRowIntoBuff_Start();

        mapBodyData = this.getBuffer(row);

        while (!this.isLastRow(row))
        {
            this.execute(reportBody);
            row++;

            mapBodyData = this.getBuffer(row);
        }

        if (this.isLastRow(row))
        {
            this.execute(reportBody);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2Num</Name>
				<Source><![CDATA[
    private real str2Num(str _strNum)
    {
        str     strSeparators;
        str     strThousend;
        str     strPoint;
        real    realNum;

        strSeparators   = strRem(strFmt("%1",1111.11),"1");
        strPoint        = subStr(strSeparators, strLen(strSeparators),1);
        strThousend     = strRem(strSeparators, strPoint);

        _strNum = strRem(_strNum, strThousend);
        _strNum = strPoke(_strNum, ".", strFind(_strNum, strPoint, 1, strLen(_strNum)));

        realNum = str2num(_strNum);

        return realNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns aproximated number of report cells for progress bar calculation.
    /// </summary>
    /// <returns>
    /// Aproximated number of report cells.
    /// </returns>
    protected Counter totalCells()
    {
        return formListControl.getCount() * formListControl.getColumnCount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>