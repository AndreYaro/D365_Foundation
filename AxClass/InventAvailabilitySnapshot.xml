<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAvailabilitySnapshot</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAvailabilitySnapshot</c> class allows to store a copy of
/// the information about on hand availability.
/// </summary>
/// <remarks>
/// The class is optimized to minimize memory consuption and can be used for caching purposes.
/// </remarks>
class InventAvailabilitySnapshot implements InventIAvailability, SysPackable
{
    InventQty                   availReservation;
    InventQtyAvailPhysical      availPhysical;
    InventQtyAvailOrdered       availTotal;
    InventQtyReservPhysical     reservPhysical;
    InventQtyReservOrdered      reservOrdered;
    InventQtyOrdered            ordered;
    inventQtyOrderedSum         orderedSum;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        availReservation,
        availPhysical,
        availTotal,
        reservPhysical,
        reservOrdered,
        ordered,
        orderedSum
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyAvailPhysical availPhysical()
    {
        return availPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for reservation.
    /// </summary>
    /// <param name="_allowReserveOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation.
    /// </param>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQty availReservation(NoYes _allowReserveOrdered = NoYes::Yes)
    {
        return _allowReserveOrdered ? availReservation : this.availPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>availTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    public InventQtyAvailOrdered availTotal()
    {
        return availTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAvailability</Name>
				<Source><![CDATA[
    private void initFromAvailability(InventIAvailability _availability)
    {
        availReservation    = _availability.availReservation(true);
        availPhysical       = _availability.availPhysical();
        availTotal          = _availability.availTotal();
        reservPhysical      = _availability.reservPhysical();
        reservOrdered       = _availability.reservOrdered();
        ordered             = _availability.ordered();
        orderedSum          = _availability.orderedSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyOrdered ordered()
    {
        return ordered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    public InventQtyOrderedSum orderedSum()
    {
        return orderedSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservOrdered reservOrdered()
    {
        return reservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservPhysical reservPhysical()
    {
        return reservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList] = _packedClass;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventAvailabilitySnapshot construct()
    {
        return new InventAvailabilitySnapshot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToSnapshot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the specified availability object to a snapshot.
    /// </summary>
    /// <param name="_availability">
    /// The availability object that needs to be converted to a snapshot.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAvailabilitySnapshot</c> class.
    /// </returns>
    /// <remarks>
    /// Throws an error if the <c>_availability</c> parameter was not specified.
    /// </remarks>
    public static InventAvailabilitySnapshot convertToSnapshot(InventIAvailability _availability)
    {
        InventAvailabilitySnapshot result = _availability as InventAvailabilitySnapshot;

        if (!result)
        {
            result = InventAvailabilitySnapshot::newFromAvailability(_availability);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAvailabilitySnapshot</c> class.
    /// </summary>
    /// <param name="_packedSnapshot">
    /// A container which holds a serialized <c>InventAvailabilitySnapshot</c> class object.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAvailabilitySnapshot</c> class.
    /// </returns>
    public static InventAvailabilitySnapshot create(container _packedSnapshot)
    {
        InventAvailabilitySnapshot snapshot = InventAvailabilitySnapshot::construct();

        if (!snapshot.unpack(_packedSnapshot))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return snapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new availability snapshot of the specified availability object.
    /// </summary>
    /// <param name="_availability">
    /// The original availability object.
    /// </param>
    /// <returns>
    /// A new availability snapshot.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>_availability</c> parameter was not specified.
    /// </exception>
    public static InventAvailabilitySnapshot newFromAvailability(InventIAvailability _availability)
    {
        if (!_availability)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventAvailabilitySnapshot snapshot = InventAvailabilitySnapshot::construct();

        snapshot.initFromAvailability(_availability);

        return snapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>InventAvailabilitySnapshot</c> object where all quantities are zero.
    /// </summary>
    /// <returns>
    /// An <c>InventAvailabilitySnapshot</c> object.
    /// </returns>
    public static InventAvailabilitySnapshot zero()
    {
        return InventAvailabilitySnapshot::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
