<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnhandStorageService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventOnhandStorageService
{
    Query                               query;
    createdTransactionId                transactionId;
    InventDimParm                       inventDimParmData;
    InventDimParm                       inventDimParmCriteria;
    InventDim                           inventDim;
    InventOnhandReportLines             reportLinesDetails;

    private boolean isInventOnhandStorageServiceReduceReadInventTableEnabled = InventOnhandStorageServiceReduceReadInventTableFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCreatedTransactionId</Name>
				<Source><![CDATA[
    public createdTransactionId parmCreatedTransactionId(createdTransactionId _transactionId = transactionId)
    {
        transactionId = _transactionId;
        return transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    private Query parmQuery(Query _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate Inventory onhand report data.
    /// </summary>
    /// <param name="_dataContract">
    /// A <c>InventOnhandStorageContract</c> object specifying the parameter for generating Invent onhand report data.
    /// </param>
    public void process(InventOnhandStorageContract _dataContract)
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            this.parmCreatedTransactionId(appl.curTransactionId(true));
            this.parmQuery(new Query(SysOperationHelper::base64Decode(_dataContract.parmQueryString())));

            reportLinesDetails = InventOnhandReportLines::construct();
            inventDimParmData = this.selectedInventDimParm(_dataContract);
            inventDimParmData.ItemIdFlag = NoYes::Yes;

            inventDimParmCriteria.ClosedFlag    = NoYes::No;

            ItemId lastItemId = '';
            InventItemType inventItemType;

            Query querytoRun = InventSum::newQuery(query, '', null, inventDimParmCriteria, inventDimParmData);
            QueryRun queryRun = new QueryRun(querytoRun);
            while (queryRun.next())
            {
                InventSum inventSum = queryRun.get(tableNum(InventSum));

                if (isInventOnhandStorageServiceReduceReadInventTableEnabled)
                {
                    if (lastItemId == '' || lastItemId != inventSum.ItemId)
                    {
                        lastItemId = inventSum.ItemId;
                        inventItemType = InventTable::find(lastItemId).inventItemType();
                    }
                }
                else
                {
                    inventItemType = InventTable::find(inventSum.ItemId).inventItemType();
                }

                if (inventItemType.mustInventBeControlled())
                {
                    inventDim = queryRun.get(tableNum(InventDim));
                }

                if (!inventItemType.isServiceItem())
                {
                    InventOnhandStorageReportLine inventOnhandStorageReportLine = reportLinesDetails.create(inventSum.ItemId, inventDim);

                    if (!PdsGlobal::pdsIsCWItem(inventSum.ItemId))
                    {
                        reportLinesDetails.insertProductOnhand(inventOnhandStorageReportLine, inventSum, inventDim);
                    }
                    else
                    {
                        reportLinesDetails.insertCWProductOnhand(inventOnhandStorageReportLine, inventSum, inventDim);
                    }
                    inventDim.clear();
                }
            }
            reportLinesDetails.insertDatabase();
            this.insertInventOnhandStorage(_dataContract);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventOnhandStorage</Name>
				<Source><![CDATA[
    private void insertInventOnhandStorage(InventOnhandStorageContract _dataContract)
    {
        InventOnhandStorage inventOnhandStorage;

        inventOnhandStorage.TransactionId = this.parmCreatedTransactionId();
        inventOnhandStorage.ExecutionName = _dataContract.parmExecutionName();
        inventOnhandStorage.ExecutionTime = DateTimeUtil::toStr(DateTimeUtil::getSystemDateTime());
        inventOnhandStorage.Filters = SysOperationHelper::base64Decode(_dataContract.parmQueryString());

        inventOnhandStorage.ViewConfigId            = _dataContract.parmViewConfigId();
        inventOnhandStorage.ViewInventSizeId        = _dataContract.parmViewInventSizeId();
        inventOnhandStorage.ViewInventColorId       = _dataContract.parmViewInventColorId();
        inventOnhandStorage.ViewInventStyleId       = _dataContract.parmViewInventStyleId();
        inventOnhandStorage.ViewInventSiteId        = _dataContract.parmViewInventSiteId();
        inventOnhandStorage.ViewInventLocationId    = _dataContract.parmViewInventLocationId();
        inventOnhandStorage.ViewWMSLocationId       = _dataContract.parmViewWMSLocationId();
        inventOnhandStorage.ViewInventStatusId      = _dataContract.parmViewInventStatusId();
        inventOnhandStorage.ViewLicensePlateId      = _dataContract.parmViewLicensePlateId();
        inventOnhandStorage.ViewInventVersionId     = _dataContract.parmViewInventVersionId();
        inventOnhandStorage.ViewInventBatchId       = _dataContract.parmViewInventBatchId();
        inventOnhandStorage.ViewInventSerialId      = _dataContract.parmViewInventSerialId();
        inventOnhandStorage.ViewInventGTDId_RU      = _dataContract.parmViewInventGTDId_RU();
        inventOnhandStorage.ViewInventOwnerId_RU    = _dataContract.parmViewInventOwnerId_RU();
        inventOnhandStorage.ViewInventProfileId_RU  = _dataContract.parmViewInventProfileId_RU();
        inventOnhandStorage.ViewInventDimension1    = _dataContract.parmViewDimension1();
        inventOnhandStorage.ViewInventDimension2    = _dataContract.parmViewDimension2();
        inventOnhandStorage.ViewInventDimension3    = _dataContract.parmViewDimension3();
        inventOnhandStorage.ViewInventDimension4    = _dataContract.parmViewDimension4();
        inventOnhandStorage.ViewInventDimension5    = _dataContract.parmViewDimension5();
        inventOnhandStorage.ViewInventDimension6    = _dataContract.parmViewDimension6();
        inventOnhandStorage.ViewInventDimension7    = _dataContract.parmViewDimension7();
        inventOnhandStorage.ViewInventDimension8    = _dataContract.parmViewDimension8();
        inventOnhandStorage.ViewInventDimension9    = _dataContract.parmViewDimension9();
        inventOnhandStorage.ViewInventDimension10   = _dataContract.parmViewDimension10();

        inventOnhandStorage.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventDimParm</c> record with the flags set to Yes if the field is set to Yes in the contact.
    /// </summary>
    /// <param name="_contract">
    /// The contract of onhand report.
    /// </param>
    /// <returns>
    /// An <c>InventDimParm</c> with the flags set to Yes if the field is set to Yes in the contact.
    /// </returns>
    private InventDimParm selectedInventDimParm(InventOnhandStorageContract _contract)
    {
        InventDimParm   inventDimParm;
        #InventDimDevelop

        if (_contract.parmViewConfigId())
        {
            inventDimParm.ConfigIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventColorId())
        {
            inventDimParm.InventColorIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventSizeId())
        {
            inventDimParm.InventSizeIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventStyleId())
        {
            inventDimParm.InventStyleIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventSiteId())
        {
            inventDimParm.InventSiteIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventLocationId())
        {
            inventDimParm.InventLocationIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewWMSLocationId())
        {
            inventDimParm.wmsLocationIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventStatusId())
        {
            inventDimParm.InventStatusFlag = NoYes::Yes;
        }
        if (_contract.parmViewLicensePlateId())
        {
            inventDimParm.LicensePlateFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventVersionId())
        {
            inventDimParm.InventVersionIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventBatchId())
        {
            inventDimParm.InventBatchIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventSerialId())
        {
            inventDimParm.InventSerialIdFlag = NoYes::Yes;
        }
        if (_contract.parmViewInventGTDId_RU())
        {
            inventDimParm.InventGTDIdFlag_RU = NoYes::Yes;
        }
        if (_contract.parmViewInventOwnerId_RU())
        {
            inventDimParm.InventOwnerIdFlag_RU = NoYes::Yes;
        }
        if (_contract.parmViewInventProfileId_RU())
        {
            inventDimParm.InventProfileIdFlag_RU = NoYes::Yes;
        }
        if (_contract.parmViewDimension1())
        {
            inventDimParm.InventDimension1Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension2())
        {
            inventDimParm.InventDimension2Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension3())
        {
            inventDimParm.InventDimension3Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension4())
        {
            inventDimParm.InventDimension4Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension5())
        {
            inventDimParm.InventDimension5Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension6())
        {
            inventDimParm.InventDimension6Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension7())
        {
            inventDimParm.InventDimension7Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension8())
        {
            inventDimParm.InventDimension8Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension9())
        {
            inventDimParm.InventDimension9Flag = NoYes::Yes;
        }
        if (_contract.parmViewDimension10())
        {
            inventDimParm.InventDimension10Flag = NoYes::Yes;
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>