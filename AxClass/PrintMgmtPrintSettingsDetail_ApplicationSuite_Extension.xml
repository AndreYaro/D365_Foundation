<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtPrintSettingsDetail_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PrintMgmtPrintSettingsDetail_ApplicationSuite_Extension</c> class extends the logic of the <c>PrintMgmtPrintSettingDetail</c> class.
/// </summary>
[ExtensionOf(classStr(PrintMgmtPrintSettingDetail))]
public final class PrintMgmtPrintSettingsDetail_ApplicationSuite_Extension
{
    private RefRecId namedDestination;
    private ERFormatsDestinations formatDestinations;

    private container __formatDestinations;

    private const int CurrentVersion = 2;

    #localmacro.CurrentList
        namedDestination,
        __formatDestinations
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmNamedDestination</Name>
				<Source><![CDATA[
    public RefRecId parmNamedDestination(RefRecId _recId = namedDestination)
    {
        this.namedDestination = _recId;
        return this.namedDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedClass = next pack();

        __formatDestinations = formatDestinations ? formatDestinations.pack() : conNull();

        return SysPackExtensions::appendExtension(packedClass,
            classStr(PrintMgmtPrintSettingsDetail_ApplicationSuite_Extension),
            [CurrentVersion, #CurrentList]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean result = next unpack(packedClass);

        if (result)
        {
            container packedExtension = SysPackExtensions::findExtension(packedClass, classStr(PrintMgmtPrintSettingsDetail_ApplicationSuite_Extension));

            if (packedExtension)
            {
                result = this.extensionUnpack(packedExtension);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extensionUnpack</Name>
				<Source><![CDATA[
    private boolean extensionUnpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret = true;

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = _packedClass;

                boolean unpacked = true;

                if (!formatDestinations && __formatDestinations != conNull())
                {
                    formatDestinations = new SysDictClass(className2Id(classStr(ERFormatsDestinations))).makeObject();
                }

                if (__formatDestinations != conNull())
                {
                    unpacked = unpacked && formatDestinations.unpack(__formatDestinations);
                }

                ret = unpacked;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatDestinations</Name>
				<Source><![CDATA[
    public ERFormatsDestinations parmFormatDestinations(ERFormatsDestinations _formatDestinations = formatDestinations)
    {
        formatDestinations = _formatDestinations;
        return formatDestinations;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>