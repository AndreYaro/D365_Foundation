<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSummarizedGLController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>LedgerSummarizedGLController_CN</c> is a controller class
/// for <c>LedgerSummarizedGL</c> SSRS report.
/// </summary>
class LedgerSummarizedGLController_CN extends SrsReportRunController implements BatchRetryable
{
    SrsReportRdlDataContract    rdlContract;
    PeriodName                  fiscalPeriodName;
    FiscalYearName              fiscalYearName;
    MainAccountNum              fromMainAccountNum;
    MainAccountNum              toMainAccountNum;
    Level                       fromLevel;
    Level                       toLevel;
    boolean                     isShow;
    Query                       query;

    #define.YearStr('YearStr')
    #define.MonthStr('MonthStr')
    #define.StartDate('StartDate')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initParmValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters values
    /// </summary>
    /// <param name="_fromMainAccountNum">
    /// From main account number
    /// </param>
    /// <param name="_toMainAccountNum">
    /// To main account number
    /// </param>
    /// <param name="_fiscalYearName">
    /// fiscal year name
    /// </param>
    /// <param name="_periodName">
    /// fiscal period name
    /// </param>
    /// <param name="_fromLevel">
    /// From level value
    /// </param>
    /// <param name="_toLevel">
    /// To level value
    /// </param>
    /// <param name="_isShowDefaultCurrency">
    /// Verifies whether DefaultCurrency is shown now
    /// </param>
    public void initParmValues(
        MainAccountNum      _fromMainAccountNum,
        MainAccountNum      _toMainAccountNum,
        FiscalYearName      _fiscalYearName,
        PeriodName          _periodName,
        Level               _fromLevel,
        Level               _toLevel,
        boolean             _isShowDefaultCurrency)
    {
        fromMainAccountNum  = _fromMainAccountNum;
        toMainAccountNum    = _toMainAccountNum;
        fiscalYearName      = _fiscalYearName;
        fiscalPeriodName    = _periodName;
        fromLevel           = _fromLevel;
        toLevel             = _toLevel;
        isShow              = _isShowDefaultCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default parameter values and query ranges before the user is prompted for input.
    /// </summary>
    protected void prePromptModifyContract()
    {
        #define.DefaultMaxLines(22)

        LedgerSummarizedGLContract_CN           contract;

        contract = this.parmReportContract().parmRdpContract();

        if (isShow)
        {
            contract.parmLegerPreprintSummarized(LedgerPreprintSummerized_CN::TR202);
            contract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::DefaultCurrency);
        }
        else
        {
            contract.parmLegerPreprintSummarized(LedgerPreprintSummerized_CN::TW501);
            contract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::ForeignCurrency);
        }

        contract.parmFromMainAccountNum(fromMainAccountNum);
        contract.parmToMainAccountNum(toMainAccountNum);
        contract.parmFiscalYearPeriodContract().parmPeriodYearName(fiscalYearName);
        contract.parmFiscalYearPeriodContract().parmPeriodName(fiscalPeriodName);
        contract.parmFromLevel(fromLevel);
        contract.parmToLevel(toLevel);
        contract.parmMaxLines(#DefaultMaxLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method to set report name and parameter values before running report.
    /// </summary>
    protected void preRunModifyContract()
    {
        LedgerSummarizedGLContract_CN  contract;

        super();

        contract = this.parmReportContract().parmRdpContract();

        if (contract.parmPreprintPaperGroupOptionValue())
        {
            if (contract.parmLegerPreprintSummarized() == LedgerPreprintSummerized_CN::TW501)
            {
                this.parmReportContract().parmReportName(ssrsReportStr(LedgerSummarizedGL_CN, TW501));
                // Summarized general ledger - TW501
                this.parmDialogCaption(strFmt("@SYS76785", "@GLS54648", "@GLS54569"));
            }
            else
            {
                this.parmReportContract().parmReportName(ssrsReportStr(LedgerSummarizedGL_CN, TR202));
                // Summarized general ledger - TR202
                this.parmDialogCaption(strFmt("@SYS76785", "@GLS54648", "@GLS54562"));
            }
        }
        else
        {
            if (contract.parmLedgerPrintLayoutCurrency() == LedgerPrintLayoutCurrency_CN::ForeignCurrency)
            {
                this.parmReportContract().parmReportName(ssrsReportStr(LedgerSummarizedGL_CN, TW501Blank));
                // Summarized general ledger - Foreign currency
                this.parmDialogCaption(strFmt("@SYS76785", "@GLS54648", "@SYS79744"));
            }
            else
            {
                this.parmReportContract().parmReportName(ssrsReportStr(LedgerSummarizedGL_CN, TR202Blank));
                // Summarized general ledger - Default currecy
                this.parmDialogCaption(strFmt("@SYS76785", "@GLS54648", "@SYS23938"));
            }
        }

        this.setTransDateStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDateStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers year, month, day to ssrs report.
    /// </summary>
    protected void setTransDateStr()
    {
        #Define.YearMonthDaySequence(321)

        FiscalCalendarPeriod                    fiscalCalendarPeriod;
        FiscalCalendarYear                      fiscalCalendarYear;
        PeriodStart                             periodStart;
        TempStr                                 monthStr;
        TempStr                                 yearStr;
        LedgerSummarizedGLContract_CN           contract;
        LedgerFiscalYearAndPeriodContract_CN    fiscalYearPerionContract;

        contract = this.parmReportContract().parmRdpContract();
        fiscalYearPerionContract = contract.parmFiscalYearPeriodContract();

        fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(CompanyInfoHelper::fiscalCalendarRecId(), fiscalYearPerionContract.parmPeriodYearName());

        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYear.RecId, fiscalYearPerionContract.parmPeriodName());

        if (fiscalCalendarPeriod.RecId)
        {
            periodStart = fiscalCalendarPeriod.StartDate;
        }

        if (periodStart)
        {
            monthStr    = date2str(
                periodStart,
                #YearMonthDaySequence,
                DateDay::None,
                DateSeparator::None,
                DateMonth::Digits2,
                DateSeparator::None,
                DateYear::None,
                DateFlags::None);

            yearStr = int2str(year(periodStart));
        }

        rdlContract = this.parmReportContract().parmRdlContract();

        rdlContract.setValue(#MonthStr, monthStr);
        rdlContract.setValue(#YearStr, yearStr);
        rdlContract.setValue(#StartDate, periodStart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00012, funcName());

        LedgerSummarizedGLController_CN controller = _args.parmObject();

        if (controller)
        {
            // use a default name, it may be changed before running the report
            controller.parmReportName(ssrsReportStr(LedgerSummarizedGL_CN, TW501));

            controller.parmArgs(_args);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>