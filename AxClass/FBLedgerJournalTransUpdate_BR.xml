<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBLedgerJournalTransUpdate_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBLedgerJournalTransUpdate_BR</c> class controls posted actions after the ledger journal posting.
/// </summary>
public class FBLedgerJournalTransUpdate_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFbNonFiscalOperationTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a non fiscal operation tax trans based on the original tax trans.
    /// </summary>
    /// <param name="_taxTrans">
    /// The original tax trans.
    /// </param>
    /// <param name="_fbNonFiscalOpRecId">
    /// The associated non fiscal operation.
    /// </param>
    private static void addFbNonFiscalOperationTaxTrans(TaxTrans _taxTrans, RecId _fbNonFiscalOpRecId)
    {
        FBNonFiscalOperationTaxTrans_BR fbNonFiscalOpTaxTrans;
        TaxTrans_BR                     taxTransBr;

        taxTransBr = TaxTrans_BR::findByTaxTrans(_taxTrans.RecId);

        fbNonFiscalOpTaxTrans.TaxAmount                  = abs(_taxTrans.TaxAmount);
        fbNonFiscalOpTaxTrans.TaxationCode               = taxTransBr.TaxationCode_BR;
        fbNonFiscalOpTaxTrans.TaxBaseAmount              = abs(_taxTrans.TaxBaseAmount);
        fbNonFiscalOpTaxTrans.TaxValue                   = _taxTrans.TaxValue;
        fbNonFiscalOpTaxTrans.Type                       = taxTransBr.TaxType_BR;
        fbNonFiscalOpTaxTrans.FBNonFiscalOperation_BR    = _fbNonFiscalOpRecId;

        fbNonFiscalOpTaxTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFbNonFiscalOperationWithholdingTaxTrans</Name>
				<Source><![CDATA[
    private static void addFbNonFiscalOperationWithholdingTaxTrans(
        LedgerJournalTrans _ledgerJournalTrans,
        RecId _fbNonFiscalOpRecId,
        container _supportedTaxWithholdTypes)
    {
        for (int i=1; i <= conlen(_supportedTaxWithholdTypes); i++)
        {
            TaxWithholdType_BR taxWithholdType = conpeek(_supportedTaxWithholdTypes, i);

            boolean hasWithholdTransOfType = false;

            TaxWithholdValue taxWithholdValue;
            TaxWithholdAmountCur taxWithholdAmount;
            TaxWithholdBaseCur withholdBaseAmount;

            TaxWithholdTrans taxWithholdTrans;
            TaxWithholdTable taxWithholdTable;

            while select taxWithholdTrans
                where taxWithholdTrans.LedgerJourTransRecId_BR == _ledgerJournalTrans.RecId
                exists join taxWithholdTable
                    where taxWithholdTable.TaxWithholdCode == taxWithholdTrans.TaxWithholdCode
                        && taxWithholdTable.TaxWithholdType_BR == taxWithholdType
            {
                if (!hasWithholdTransOfType)
                {
                    TaxWithholdData taxWithholdData = TaxWithholdData::find(
                        taxWithholdTrans.TaxWithholdCode,
                        taxWithholdTrans.TransDate,
                        taxWithholdTrans.TaxWithholdBaseAmount);

                    taxWithholdValue = taxWithholdData.TaxWithholdValue;
                }

                TaxWithhold taxWithhold = TaxWithhold::construct(_ledgerJournalTrans);
                TmpTaxWithhold tmpTaxWithhold = taxWithhold.findTmpTaxWithhold(taxWithholdTrans);
                taxWithholdAmount += abs(taxWithholdTrans.TaxWithholdAmount);
                withholdBaseAmount += abs(tmpTaxWithhold.TaxWithholdBase);

                hasWithholdTransOfType = true;
            }

            if (hasWithholdTransOfType)
            {
                FBNonFiscalOperationWithholdingTaxTrans_BR fbNonFiscalOpWithholdingTaxTrans;
                fbNonFiscalOpWithholdingTaxTrans.TaxWithholdAmount = taxWithholdAmount;
                fbNonFiscalOpWithholdingTaxTrans.WithholdBaseAmount = withholdBaseAmount;
                fbNonFiscalOpWithholdingTaxTrans.TaxWithholdValue = taxWithholdValue;
                fbNonFiscalOpWithholdingTaxTrans.TaxWithholdType = taxWithholdType;
                fbNonFiscalOpWithholdingTaxTrans.FBNonFiscalOperation_BR = _fbNonFiscalOpRecId;
                fbNonFiscalOpWithholdingTaxTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransByLedgerJournalTransAndTaxType</Name>
				<Source><![CDATA[
    private static TaxTrans getTaxTransByLedgerJournalTransAndTaxType(LedgerJournalTrans _ledgerJournalTrans, TaxType_BR _taxType)
    {
        TaxTrans taxTrans;
        TaxTrans_BR taxTransBr;

        select firstonly taxTrans
            where taxTrans.SourceRecId == _ledgerJournalTrans.RecId
                && taxTrans.SourceTableId == _ledgerJournalTrans.TableId
            exists join taxTransBr
                where taxTransBr.TaxTrans == taxTrans.RecId
                    && taxTransBr.TaxType_BR == _taxType;

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdTransByLedgerJournalTransAndTaxWithholdType</Name>
				<Source><![CDATA[
    private static TaxWithholdTrans getTaxWithholdTransByLedgerJournalTransAndTaxWithholdType(LedgerJournalTrans _ledgerJournalTrans, TaxWithholdType_BR _taxWithholdType)
    {
        TaxWithholdTrans taxWithholdTrans;
        TaxWithholdTable taxWithholdTable;

        select firstonly taxWithholdTrans
            where taxWithholdTrans.LedgerJourTransRecId_BR == _ledgerJournalTrans.RecId
            exists join taxWithholdTable
                where taxWithholdTable.TaxWithholdCode == taxWithholdTrans.TaxWithholdCode
                    && taxWithholdTable.TaxWithholdType_BR == _taxWithholdType;

        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxWithholdTransByLedgerJournalTransAndTaxWithholdType</Name>
				<Source><![CDATA[
    private static boolean hasTaxWithholdTransByLedgerJournalTransAndTaxWithholdType(LedgerJournalTrans _ledgerJournalTrans, container _supportedTaxWithholdTypes)
    {
        TaxWithholdTrans taxWithholdTrans;
        TaxWithholdTable taxWithholdTable;

        select firstonly RecId from taxWithholdTrans
            where taxWithholdTrans.LedgerJourTransRecId_BR == _ledgerJournalTrans.RecId
            exists join taxWithholdTable
                where taxWithholdTable.TaxWithholdCode == taxWithholdTrans.TaxWithholdCode
                    && taxWithholdTable.TaxWithholdType_BR in _supportedTaxWithholdTypes;

        return taxWithholdTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cost center that is associated with a ledger dimension.
    /// </summary>
    /// <param name="_dimensionAttributeValueCombinationRecId">
    /// The ledger dimension.
    /// </param>
    /// <returns>
    /// The associated cost center.
    /// </returns>
    private static RecId getCostCenter(RecId _dimensionAttributeValueCombinationRecId)
    {
        DimensionAttributeRecId             dimensionAttributeRecId;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        DimensionStorageSegment             dimensionStorageSegment;
        DimensionStorage                    dimensionStorage;
        int                                 i = 1;
        RecId                               costCenterRecId;

        if (_dimensionAttributeValueCombinationRecId == 0)
            return 0;

        dimensionAttributeValueCombination  = DimensionAttributeValueCombination::find(_dimensionAttributeValueCombinationRecId);
        dimensionStorage                    = DimensionStorage::findById(dimensionAttributeValueCombination.RecId);

        for (i = 1; i <= dimensionStorage.segmentCount(); i++)
        {
            dimensionStorageSegment = dimensionStorage.getSegment(i);

            dimensionAttributeRecId = DimensionAttributeValue::find(dimensionStorageSegment.parmDimensionAttributeValueId()).DimensionAttribute;

            if (dimensionAttributeRecId == BrazilParameters::find().CostCenterDimensionAttribute)
            {
                costCenterRecId     = dimensionStorageSegment.parmDimensionAttributeValueId();
            }
        }

        return costCenterRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishmentRecId</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns the rec id of the fiscal establishment that is associated with a ledger dimension.
    /// </summary>
    /// <param name="_dimensionAttributeValueCombinationRecId">
    /// The ledger dimension.
    /// </param>
    /// <returns>
    /// The fiscal establishment rec id.
    /// </returns>
    private static RecId getFiscalEstablishmentRecId(RecId _dimensionAttributeValueCombinationRecId)
    {
        DimensionAttributeRecId             dimensionAttributeRecId;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        DimensionStorageSegment             dimensionStorageSegment;
        DimensionStorage                    dimensionStorage;
        int                                 i = 1;
        FiscalEstablishment_BR              fiscalEstablishment;

        if (_dimensionAttributeValueCombinationRecId == 0)
            return 0;

        dimensionAttributeValueCombination  = DimensionAttributeValueCombination::find(_dimensionAttributeValueCombinationRecId);
        dimensionStorage                    = DimensionStorage::findById(dimensionAttributeValueCombination.RecId);

        for (i = 1; i <= dimensionStorage.segmentCount(); i++)
        {
            dimensionStorageSegment = dimensionStorage.getSegment(i);

            dimensionAttributeRecId = DimensionAttributeValue::find(dimensionStorageSegment.parmDimensionAttributeValueId()).DimensionAttribute;

            if (dimensionAttributeRecId == BrazilParameters::find().FiscalEstablishmentDimensionAttribute)
            {
                select RecId from fiscalEstablishment
                    where fiscalEstablishment.FiscalEstablishmentId == dimensionStorageSegment.parmDisplayValue();
            }
        }

        return fiscalEstablishment.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlerPostUpdateNowBank_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs after the <c>LedgerJournalTransUpdateBank</c> method is called.
    /// </summary>
    /// <param name="_args">
    /// The passed params for <c>LedgerJournalTransUpdateBank</c>.
    /// </param>
    [PostHandlerFor(classStr(LedgerJournalTransUpdateBank), methodStr(LedgerJournalTransUpdateBank, updateNow))]
    public static void handlerPostUpdateNowBank_BR(XppPrePostArgs _args)
    {
        FBLedgerJournalTransUpdate_BR::postUpdateNowBank_BR(
            _args.getArg(identifierstr(_ledgerVoucher)),
            _args.getArg(identifierstr(_posting)),
            _args.getArg(identifierstr(_ledgerJournalTrans)),
            _args.getArg(identifierstr(_originalLedgerJournalTrans)),
            _args.getArg(identifierstr(_interCompany)),
            _args.getArg(identifierstr(_reversalsMayExist)),
            _args.getArg(identifierstr(_isDueToDueFromAccount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateNowBank_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates a non fiscal operation to the ledger journal trans whose account type is bank.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher.
    /// </param>
    /// <param name="_posting">
    /// The posting type.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans whose account type is bank.
    /// </param>
    /// <param name="_originalLedgerJournalTrans">
    /// The original ledger journal trans.
    /// </param>
    /// <param name="_interCompany">
    /// The inter company parameter.
    /// </param>
    /// <param name="_reversalsMayExist">
    /// The reversal parameter.
    /// </param>
    /// <param name="_isDueToDueFromAccount">
    /// The due to due from account parameter.
    /// </param>
    public static void postUpdateNowBank_BR(LedgerVoucher        _ledgerVoucher,
                                            LedgerPostingType    _posting,
                                            LedgerJournalTrans   _ledgerJournalTrans,
                                            LedgerJournalTrans   _originalLedgerJournalTrans,
                                            boolean              _interCompany = false,
                                            boolean             _reversalsMayExist = true,
                                            boolean             _isDueToDueFromAccount = false)
    {
        if (BrazilParameters::isEnabled())
        {
            FBLedgerJournalTransUpdate_BR::postUpdateNowThirdParty( _ledgerJournalTrans,
                                                                    _originalLedgerJournalTrans,
                                                                    _ledgerJournalTrans.AccountType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlerPostUpdateNowCust_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs after the <c>LedgerJournalTransUpdateCust</c> method is called.
    /// </summary>
    /// <param name="_args">
    /// The passed params for <c>LedgerJournalTransUpdateCust</c>.
    /// </param>
    [PostHandlerFor(classStr(LedgerJournalTransUpdateCust), methodStr(LedgerJournalTransUpdateCust, updateNow))]
    public static void handlerPostUpdateNowCust_BR(XppPrePostArgs _args)
    {
        FBLedgerJournalTransUpdate_BR::postUpdateNowCust_BR(
            _args.getArg(identifierstr(_ledgerVoucher)),
            _args.getArg(identifierstr(_posting)),
            _args.getArg(identifierstr(_ledgerJournalTrans)),
            _args.getArg(identifierstr(_originalLedgerJournalTrans)),
            _args.getArg(identifierstr(_interCompany)),
            _args.getArg(identifierstr(_reversalsMayExist)),
            _args.getArg(identifierstr(_isDueToDueFromAccount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateNowCust_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates a non fiscal operation to the ledger journal trans whose account type is customer.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher.
    /// </param>
    /// <param name="_posting">
    /// The posting type.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans whose account type is customer.
    /// </param>
    /// <param name="_originalLedgerJournalTrans">
    /// The original ledger journal trans.
    /// </param>
    /// <param name="_interCompany">
    /// The inter company parameter.
    /// </param>
    /// <param name="_reversalsMayExist">
    /// The reversal parameter.
    /// </param>
    /// <param name="_isDueToDueFromAccount">
    /// The due to due from account parameter.
    /// </param>
    public static void postUpdateNowCust_BR(LedgerVoucher        _ledgerVoucher,
                                            LedgerPostingType    _posting,
                                            LedgerJournalTrans   _ledgerJournalTrans,
                                            LedgerJournalTrans   _originalLedgerJournalTrans,
                                            boolean              _interCompany = false,
                                            boolean             _reversalsMayExist = true,
                                            boolean             _isDueToDueFromAccount = false)
    {
        if (BrazilParameters::isEnabled())
        {
            FBLedgerJournalTransUpdate_BR::postUpdateNowThirdParty( _ledgerJournalTrans,
                                                                    _originalLedgerJournalTrans,
                                                                    _ledgerJournalTrans.AccountType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlerPostUpdateNowLedger_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs after the <c>LedgerJournalTransUpdateLedger</c> method is called.
    /// </summary>
    /// <param name="_args">
    /// The passed params for <c>LedgerJournalTransUpdateLedger</c>.
    /// </param>
    [PostHandlerFor(classStr(LedgerJournalTransUpdateLedger), methodStr(LedgerJournalTransUpdateLedger, updateNow))]
    public static void handlerPostUpdateNowLedger_BR(XppPrePostArgs _args)
    {
        FBLedgerJournalTransUpdate_BR::postUpdateNowLedger_BR(
            _args.getArg(identifierstr(_ledgerVoucher)),
            _args.getArg(identifierstr(_posting)),
            _args.getArg(identifierstr(_ledgerJournalTrans)),
            _args.getArg(identifierstr(_originalLedgerJournalTrans)),
            _args.getArg(identifierstr(_interCompany)),
            _args.getArg(identifierstr(_reversalsMayExist)),
            _args.getArg(identifierstr(_isDueToDueFromAccount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateNowLedger_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates a non fiscal operation to the ledger journal trans whose account type is ledger.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher.
    /// </param>
    /// <param name="_posting">
    /// The posting type.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans whose account type is ledger.
    /// </param>
    /// <param name="_originalLedgerJournalTrans">
    /// The original ledger journal trans.
    /// </param>
    /// <param name="_interCompany">
    /// The inter company parameter.
    /// </param>
    /// <param name="_reversalsMayExist">
    /// The reversal parameter.
    /// </param>
    /// <param name="_isDueToDueFromAccount">
    /// The due to due from account parameter.
    /// </param>
    public static void postUpdateNowLedger_BR(LedgerVoucher        _ledgerVoucher,
                                             LedgerPostingType    _posting,
                                             LedgerJournalTrans   _ledgerJournalTrans,
                                             LedgerJournalTrans   _originalLedgerJournalTrans,
                                             boolean              _interCompany = false,
                                             boolean             _reversalsMayExist = true,
                                             boolean             _isDueToDueFromAccount = false)
    {
        TaxTrans                            pisTaxTrans, cofinsTaxTrans, irrfTaxTrans;
        TaxTrans_BR                         pisTaxTransBr, cofinsTaxTransBr;
        FBNonFiscalOperation_BR             fbNonFiscalOperation;
        boolean                             isNonFiscalOperationCreated;
        LedgerJournalACType                 thirdPartyType;
        LedgerDimensionDefaultAccount       thirdPartyAccount;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        LedgerJournalTrans   ledgerJournalTransLoc;

        select firstonly ledgerJournalTransLoc 
            where ledgerJournalTransLoc.RevRecId == _ledgerJournalTrans.RecId;

        if (_ledgerJournalTrans.RecId != _originalLedgerJournalTrans.RecId
            || ledgerJournalTransLoc.RecId != 0)
        {
            return;
        }

        select RecId, TaxAmount, TaxBaseAmount, TaxValue from pisTaxTrans
            where   pisTaxTrans.SourceRecId         == _ledgerJournalTrans.RecId
                && pisTaxTrans.SourceTableId        == _ledgerJournalTrans.TableId
            join TaxTrans, TaxType_BR from pisTaxTransBr
                where   pisTaxTransBr.TaxTrans      == pisTaxTrans.RecId
                    &&  pisTaxTransBr.TaxType_BR    == TaxType_BR::PIS;

        select RecId, TaxAmount, TaxBaseAmount, TaxValue from cofinsTaxTrans
            where   cofinsTaxTrans.SourceRecId      == _ledgerJournalTrans.RecId
                && cofinsTaxTrans.SourceTableId        == _ledgerJournalTrans.TableId
            join TaxTrans, TaxType_BR from cofinsTaxTransBr
                where   cofinsTaxTransBr.TaxTrans   == cofinsTaxTrans.RecId
                    &&  cofinsTaxTransBr.TaxType_BR == TaxType_BR::COFINS;

        irrfTaxTrans = FBLedgerJournalTransUpdate_BR::getTaxTransByLedgerJournalTransAndTaxType(_ledgerJournalTrans, TaxType_BR::IRRF);

        isNonFiscalOperationCreated = false;

        if ((pisTaxTrans && cofinsTaxTrans) || irrfTaxTrans)
        {
            // Update existing non fiscal operations related to the same voucher anda date.
            while select forUpdate fbNonFiscalOperation
                where   fbNonFiscalOperation.Voucher    == _ledgerJournalTrans.Voucher
                    &&  fbNonFiscalOperation.TransDate  == _ledgerJournalTrans.TransDate
            {
                if (!fbNonFiscalOperation.OffsetLedgerDimension || !fbNonFiscalOperation.LedgerDimension)
                {
                    fbNonFiscalOperation.FiscalEstablishment_BR         = FBLedgerJournalTransUpdate_BR::getFiscalEstablishmentRecId(_ledgerJournalTrans.LedgerDimension);
                    fbNonFiscalOperation.FiscalEstablishmentDataArea    = curext();
                    fbNonFiscalOperation.OffsetDefaultDimension         = FBLedgerJournalTransUpdate_BR::getCostCenter(_ledgerJournalTrans.LedgerDimension);
                    fbNonFiscalOperation.OffsetLedgerDimension          = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerJournalTrans.LedgerDimension);
                    fbNonFiscalOperation.TotalAmount                    = abs(_ledgerJournalTrans.amount());
                    fbNonFiscalOperation.IncomeClassificationId_BR      = _ledgerJournalTrans.IncomeClassificationId_BR;

                    fbNonFiscalOperation.update();

                    isNonFiscalOperationCreated = true;
                }
                else
                {
                    // There are more ledger transactions than third party ones.
                    thirdPartyType      = fbNonFiscalOperation.AccountType;
                    thirdPartyAccount   = fbNonFiscalOperation.LedgerDimension;
                }
            }

            // If there is no created non fiscal operation, we should create one.
            if (!isNonFiscalOperationCreated)
            {
                fbNonFiscalOperation.clear();

                if (thirdPartyAccount)
                {
                    fbNonFiscalOperation.AccountType                = thirdPartyType;
                    fbNonFiscalOperation.LedgerDimension            = thirdPartyAccount;
                }

                fbNonFiscalOperation.FiscalEstablishment_BR         = FBLedgerJournalTransUpdate_BR::getFiscalEstablishmentRecId(_ledgerJournalTrans.LedgerDimension);
                fbNonFiscalOperation.FiscalEstablishmentDataArea    = curext();
                fbNonFiscalOperation.Description                    = _ledgerJournalTrans.Txt;
                fbNonFiscalOperation.OffsetDefaultDimension         = FBLedgerJournalTransUpdate_BR::getCostCenter(_ledgerJournalTrans.LedgerDimension);
                fbNonFiscalOperation.OffsetLedgerDimension          = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerJournalTrans.LedgerDimension);
                fbNonFiscalOperation.TotalAmount                    = abs(_ledgerJournalTrans.amount());
                fbNonFiscalOperation.TransDate                      = _ledgerJournalTrans.TransDate;
                fbNonFiscalOperation.Voucher                        = _ledgerJournalTrans.Voucher;
                fbNonFiscalOperation.IncomeClassificationId_BR      = _ledgerJournalTrans.IncomeClassificationId_BR;

                fbNonFiscalOperation.insert();

                if (pisTaxTrans && cofinsTaxTrans)
                {
                    // Insert PIS tax trans
                    FBLedgerJournalTransUpdate_BR::addFbNonFiscalOperationTaxTrans(pisTaxTrans, fbNonFiscalOperation.RecId);

                    // Insert COFINS tax trans
                    FBLedgerJournalTransUpdate_BR::addFbNonFiscalOperationTaxTrans(cofinsTaxTrans, fbNonFiscalOperation.RecId);
                }

                if (irrfTaxTrans)
                {
                    FBLedgerJournalTransUpdate_BR::addFbNonFiscalOperationTaxTrans(irrfTaxTrans, fbNonFiscalOperation.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateNowThirdParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generic method for posting of third party (cust, vend or bank) ledger journal trans.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans.
    /// </param>
    /// <param name="_originalLedgerJournalTrans">
    /// The original ledger journal trans.
    /// </param>
    /// <param name="_thirdPartyType">
    /// The third party type (cust, vend or bank).
    /// </param>
    private static void postUpdateNowThirdParty(LedgerJournalTrans          _ledgerJournalTrans,
                                                LedgerJournalTrans          _originalLedgerJournalTrans,
                                                LedgerJournalACType         _thirdPartyType)
    {
        TaxTrans                            pisTaxTrans, cofinsTaxTrans, irrfTaxTrans;
        TaxTrans_BR                         pisTaxTransBr, cofinsTaxTransBr;
        FBNonFiscalOperation_BR             fbNonFiscalOperation;
        boolean                             isNonFiscalOperationCreated;

        // The offset type must be ledger or bank or the offset account must be empty.
        if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank
            && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Ledger
            && _ledgerJournalTrans.OffsetLedgerDimension != 0)
        {
            return;
        }

        // Check if there are PIS and COFINS transactions
        select RecId, TaxAmount, TaxBaseAmount, TaxValue from pisTaxTrans
            where   pisTaxTrans.Voucher    == _ledgerJournalTrans.Voucher
                &&  pisTaxTrans.TransDate  == _ledgerJournalTrans.TransDate
            join TaxTrans, TaxType_BR from pisTaxTransBr
                where   pisTaxTransBr.TaxTrans    == pisTaxTrans.RecId
                    &&  pisTaxTransBr.TaxType_BR  == TaxType_BR::PIS;

        select RecId, TaxAmount, TaxBaseAmount, TaxValue from cofinsTaxTrans
            where   cofinsTaxTrans.Voucher    == _ledgerJournalTrans.Voucher
                &&  cofinsTaxTrans.TransDate  == _ledgerJournalTrans.TransDate
            join TaxTrans, TaxType_BR from cofinsTaxTransBr
                where   cofinsTaxTransBr.TaxTrans    == cofinsTaxTrans.RecId
                    &&  cofinsTaxTransBr.TaxType_BR  == TaxType_BR::COFINS;

        irrfTaxTrans = FBLedgerJournalTransUpdate_BR::getTaxTransByLedgerJournalTransAndTaxType(_ledgerJournalTrans, TaxType_BR::IRRF);

        isNonFiscalOperationCreated = false;

        if ((pisTaxTrans && cofinsTaxTrans) || irrfTaxTrans)
        {
            // Update existing non fiscal operations related to the same voucher anda date.
            while select forUpdate fbNonFiscalOperation
                where   fbNonFiscalOperation.Voucher    == _ledgerJournalTrans.Voucher
                    &&  fbNonFiscalOperation.TransDate  == _ledgerJournalTrans.TransDate
            {
                if (!fbNonFiscalOperation.LedgerDimension)
                {
                    fbNonFiscalOperation.AccountType            = _thirdPartyType;
                    fbNonFiscalOperation.LedgerDimension        = _ledgerJournalTrans.LedgerDimension;

                    fbNonFiscalOperation.update();
                }

                isNonFiscalOperationCreated = true;
            }

            // If there is no created non fiscal operation, we should create one.
            if (!isNonFiscalOperationCreated)
            {
                fbNonFiscalOperation.clear();

                fbNonFiscalOperation.AccountType            = _thirdPartyType;
                fbNonFiscalOperation.Description            = _ledgerJournalTrans.Txt;
                fbNonFiscalOperation.LedgerDimension        = _ledgerJournalTrans.LedgerDimension;
                fbNonFiscalOperation.TotalAmount            = abs(_ledgerJournalTrans.amount());
                fbNonFiscalOperation.TransDate              = _ledgerJournalTrans.TransDate;
                fbNonFiscalOperation.Voucher                = _ledgerJournalTrans.Voucher;

                fbNonFiscalOperation.insert();

                if (pisTaxTrans && cofinsTaxTrans)
                {
                    // Insert PIS tax trans
                    FBLedgerJournalTransUpdate_BR::addFbNonFiscalOperationTaxTrans(pisTaxTrans, fbNonFiscalOperation.RecId);

                    // Insert COFINS tax trans
                    FBLedgerJournalTransUpdate_BR::addFbNonFiscalOperationTaxTrans(cofinsTaxTrans, fbNonFiscalOperation.RecId);
                }

                if (irrfTaxTrans)
                {
                    FBLedgerJournalTransUpdate_BR::addFbNonFiscalOperationTaxTrans(irrfTaxTrans, fbNonFiscalOperation.RecId);
                }
            }
        }

        container supportedTaxWithholdTypes = [TaxWithholdType_BR::CSLL, TaxWithholdType_BR::PIS, TaxWithholdType_BR::COFINS, TaxWithholdType_BR::PCC];

        if (FBLedgerJournalTransUpdate_BR::hasTaxWithholdTransByLedgerJournalTransAndTaxWithholdType(_ledgerJournalTrans, supportedTaxWithholdTypes))
        {
            FiscalEstablishmentRecId_BR feRecId = FBLedgerJournalTransUpdate_BR::getFiscalEstablishmentByDefaultDimension(_ledgerJournalTrans.DefaultDimension);

            // Update existing non fiscal operations related to the same voucher anda date.
            update_recordset fbNonFiscalOperation
                setting FiscalEstablishment_BR = feRecId,
                    FiscalEstablishmentDataArea = curext()
                where fbNonFiscalOperation.Voucher == _ledgerJournalTrans.Voucher
                    && fbNonFiscalOperation.TransDate == _ledgerJournalTrans.TransDate
                    && !fbNonFiscalOperation.FiscalEstablishment_BR;

            select firstonly RecId from fbNonFiscalOperation
                where fbNonFiscalOperation.Voucher == _ledgerJournalTrans.Voucher
                    && fbNonFiscalOperation.TransDate == _ledgerJournalTrans.TransDate;

            isNonFiscalOperationCreated = fbNonFiscalOperation.RecId != 0;

            // If there is no created non fiscal operation, we should create one.
            if (!isNonFiscalOperationCreated)
            {
                fbNonFiscalOperation.clear();

                fbNonFiscalOperation.AccountType = _thirdPartyType;
                fbNonFiscalOperation.Description = _ledgerJournalTrans.Txt;
                fbNonFiscalOperation.LedgerDimension = _ledgerJournalTrans.LedgerDimension;
                fbNonFiscalOperation.OffsetDefaultDimension = FBLedgerJournalTransUpdate_BR::getCostCenter(_ledgerJournalTrans.LedgerDimension);
                fbNonFiscalOperation.OffsetLedgerDimension = _ledgerJournalTrans.OffsetLedgerDimension;
                fbNonFiscalOperation.TotalAmount = abs(_ledgerJournalTrans.amount());
                fbNonFiscalOperation.TransDate = _ledgerJournalTrans.TransDate;
                fbNonFiscalOperation.Voucher = _ledgerJournalTrans.Voucher;
                fbNonFiscalOperation.FiscalEstablishment_BR = feRecId;
                fbNonFiscalOperation.FiscalEstablishmentDataArea = curext();
                fbNonFiscalOperation.IncomeClassificationId_BR = _ledgerJournalTrans.IncomeClassificationId_BR;
                fbNonFiscalOperation.insert();

                FBLedgerJournalTransUpdate_BR::addFbNonFiscalOperationWithholdingTaxTrans(
                    _ledgerJournalTrans,
                    fbNonFiscalOperation.RecId,
                    supportedTaxWithholdTypes);

                FBNonFiscalOperationWithholdingTaxTrans_BR fbNonFiscalOpWithholdingTaxTrans;

                select firstonly WithholdBaseAmount from fbNonFiscalOpWithholdingTaxTrans
                    where fbNonFiscalOpWithholdingTaxTrans.FBNonFiscalOperation_BR == fbNonFiscalOperation.RecId
                        && fbNonFiscalOpWithholdingTaxTrans.TaxWithholdType in supportedTaxWithholdTypes;

                FBNonFiscalOperation_BR fbNonFiscalOperationUpd;
                update_recordset fbNonFiscalOperationUpd
                    setting TotalAmount = fbNonFiscalOpWithholdingTaxTrans.WithholdBaseAmount
                    where fbNonFiscalOperationUpd.RecId == fbNonFiscalOperation.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishmentByDefaultDimension</Name>
				<Source><![CDATA[
    private static RecId getFiscalEstablishmentByDefaultDimension(LedgerDimensionValueSet _defaultDimension)
    {
        DimensionAttribute dimensionAttribute = DimensionAttribute::find(BrazilParameters::find().FiscalEstablishmentDimensionAttribute);
        DefaultDimensionView defaultDimensionView;
        FiscalEstablishment_BR fiscalEstablishment;

        select firstonly RecId from fiscalEstablishment
            exists join defaultDimensionView
                where defaultDimensionView.DefaultDimension == _defaultDimension
                    && defaultDimensionView.DimensionAttributeId == dimensionAttribute.RecId
                    && defaultDimensionView.DisplayValue == fiscalEstablishment.FiscalEstablishmentId;

        return fiscalEstablishment.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlerPostUpdateNowVend_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs after the <c>LedgerJournalTransUpdateVend</c> method is called.
    /// </summary>
    /// <param name="_args">
    /// The passed params for <c>LedgerJournalTransUpdateVend</c>.
    /// </param>
    [PostHandlerFor(classStr(LedgerJournalTransUpdateVend), methodStr(LedgerJournalTransUpdateVend, updateNow))]
    public static void handlerPostUpdateNowVend_BR(XppPrePostArgs _args)
    {
        FBLedgerJournalTransUpdate_BR::postUpdateNowVend_BR(
            _args.getArg(identifierstr(_ledgerVoucher)),
            _args.getArg(identifierstr(_posting)),
            _args.getArg(identifierstr(_ledgerJournalTrans)),
            _args.getArg(identifierstr(_originalLedgerJournalTrans)),
            _args.getArg(identifierstr(_interCompany)),
            _args.getArg(identifierstr(_reversalsMayExist)),
            _args.getArg(identifierstr(_isDueToDueFromAccount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateNowVend_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates a non fiscal operation to the ledger journal trans whose account type is vendor.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher.
    /// </param>
    /// <param name="_posting">
    /// The posting type.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans whose account type is vendor.
    /// </param>
    /// <param name="_originalLedgerJournalTrans">
    /// The original ledger journal trans.
    /// </param>
    /// <param name="_interCompany">
    /// The inter company parameter.
    /// </param>
    /// <param name="_reversalsMayExist">
    /// The reversal parameter.
    /// </param>
    /// <param name="_isDueToDueFromAccount">
    /// The due to due from account parameter.
    /// </param>
    public static void postUpdateNowVend_BR(LedgerVoucher        _ledgerVoucher,
                                            LedgerPostingType    _posting,
                                            LedgerJournalTrans   _ledgerJournalTrans,
                                            LedgerJournalTrans   _originalLedgerJournalTrans,
                                            boolean              _interCompany = false,
                                            boolean             _reversalsMayExist = true,
                                            boolean             _isDueToDueFromAccount = false)
    {
        if (BrazilParameters::isEnabled())
        {
            FBLedgerJournalTransUpdate_BR::postUpdateNowThirdParty( _ledgerJournalTrans,
                                                                    _originalLedgerJournalTrans,
                                                                    _ledgerJournalTrans.AccountType);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>