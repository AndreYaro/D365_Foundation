<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalArchiveDocuRefUpdateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static final class LedgerJournalArchiveDocuRefUpdateHelper
{
    // Max records to be updated in one SQL update
    private const int MaxRecordToUpdate = 5000;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>docuRefUpdateStatement</Name>
				<Source><![CDATA[
    private static str docuRefUpdateStatement(int _toTableNum, int _fromTableNum, int _maxRecords = MaxRecordToUpdate)
    {
        DictTable toTable = new DictTable(_toTableNum);
        str toTableName = toTable.name(DbBackend::Sql);

        return strFmt(@"
            UPDATE TOP (%1) DOCUREF
                SET REFTABLEID = %2
            FROM DOCUREF
            JOIN %3
                ON DOCUREF.REFRECID = %3.RECID
                    AND DOCUREF.REFTABLEID = %4",
            _maxRecords,
            _toTableNum,
            toTableName,
            _fromTableNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuHistoryUpdateStatement</Name>
				<Source><![CDATA[
    private static str docuHistoryUpdateStatement(int _toTableNum, int _fromTableNum, int _maxRecords = MaxRecordToUpdate)
    {
        return strFmt(@"
            UPDATE TOP (%1) DOCUHISTORY
                SET REFTABLEID = %2
            FROM DOCUHISTORY
            JOIN DOCUREF
                ON DOCUREF.RECID = DOCUHISTORY.DOCUREFRECID
                    AND DOCUREF.REFTABLEID = %2
                    AND DOCUHISTORY.REFTABLEID = %3",
            _maxRecords,
            _toTableNum,
            _fromTableNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeUpdateInBulk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update records in bulk and continue updating until no more records needs to be updated
    /// </summary>
    /// <param name = "_sqlStatement">Sql statement to execute</param>
    /// <param name = "_maxRecords">Maximum records update in one execution</param>
    /// <returns>number of records updated</returns>
    internal static int64 executeUpdateInBulk(str _sqlStatement, int _maxRecords = MaxRecordToUpdate)
    {
        #OCCRetryCount
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadLockEx;
        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictEx;
        Microsoft.Dynamics.Ax.Xpp.TransientSqlConnectionError transientSqlError;

        int64 totalRowsUpdated = 0;
        int updatedRow;

        try
        {
            do
            {
                updatedRow = 0;
                ttsbegin;
                updatedRow = LedgerJournalArchiveDocuRefUpdateHelper::executeSQLUpdate(_sqlStatement);
                ttscommit;

                totalRowsUpdated += updatedRow;
            }
            while (updatedRow == _maxRecords);
        }
        catch (deadLockEx)
        {
            if (LedgerExceptionHandler::shouldExceptionBeRetried(deadLockEx))
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (updateConflictEx)
        {
            int currentRetryCount = xSession::currentRetryCount();
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(currentRetryCount * backOffWait);
                retry;
            }
        }
        catch (transientSqlError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        return totalRowsUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDocuRefUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update docuRef referenced record
    /// Update records in bulk and continue updating until no more records needs to be updated
    /// </summary>
    /// <param name = "_toTableNum">Table number that records moved to</param>
    /// <param name = "_fromTableNum">Table number that records moved from</param>
    /// <param name = "_maxRecords">Maximum records update in one execution</param>
    /// <returns>number of records updated</returns>
    internal static int64 runDocuRefUpdate(int _toTableNum, int _fromTableNum, int _maxRecords = MaxRecordToUpdate)
    {
        str sqlStatement = LedgerJournalArchiveDocuRefUpdateHelper::docuRefUpdateStatement(
            _toTableNum,
            _fromTableNum,
            _maxRecords);

        int64 totalRowsUpdated = LedgerJournalArchiveDocuRefUpdateHelper::executeUpdateInBulk(sqlStatement, _maxRecords);

        // Update docuRef count cache to display number of document references correctly. 
        if (totalRowsUpdated > 0 && 
            !DocuRef::shouldCalculateAttachmentCountByRefRecId(_toTableNum))
        {
            // Ensure that the DocuRefCountEnabledSummaryCache cache is initialized
            DocuRefCountEnabledCacheConsumer::prepareDataSet();
            DocuRefCountEnabledCacheConsumer::forcePrepareDataSet();
        }

        return totalRowsUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDocuHistoryUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update document history reference after DocuRef table reference is updated
    /// Update records in bulk and continue updating until no more records needs to be updated
    /// </summary>
    /// <param name = "_toTableNum">Table number that records moved to</param>
    /// <param name = "_fromTableNum">Table number that records moved from</param>
    /// <param name = "_maxRecords">Maximum records update in one execution</param>
    /// <returns>number of records updated</returns>
    internal static int64 runDocuHistoryUpdate(int _toTableNum, int _fromTableNum, int _maxRecords = MaxRecordToUpdate)
    {
        str historySqlStatement = LedgerJournalArchiveDocuRefUpdateHelper::docuHistoryUpdateStatement(
            _toTableNum,
            _fromTableNum,
            _maxRecords);

        // update document history
        int64 totalHistoryRowsUpdated = LedgerJournalArchiveDocuRefUpdateHelper::executeUpdateInBulk(historySqlStatement, _maxRecords);
        return totalHistoryRowsUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute SQL Update statement
    /// </summary>
    /// <param name = "_sqlStatement">SQL Update statement</param>
    /// <returns>number of records updated</returns>
    internal static int executeSQLUpdate(str _sqlStatement)
    {
        Connection sessionConn = new Connection();
        int impactedRows;

        try
        {
            impactedRows = 0;
            Statement statement = sessionConn.createStatement();
            new SqlStatementExecutePermission(_sqlStatement).assert();

            impactedRows = statement.executeUpdateWithParameters(_sqlStatement, SqlParams::create());

            statement.close();
            CodeAccessPermission::revertAssert();
        }
        finally
        {
            sessionConn.finalize();
        }
        
        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuRefRelatedDataMovedToHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// If there is any LedgerJournalTrans record moved to history table
    /// and DocuRef still reference to LedgerJournalTrans table
    /// </summary>
    /// <returns>true if there is such record, otherwise false</returns>
    internal static boolean hasDocuRefRelatedDataMovedToHistory()
    {
        DocuRef docuRef;
        DocuHistory docuHistory;
        LedgerJournalTransHistory ledgerJournalTransHistory;
        LedgerJournalTableHistory ledgerJournalTableHistory;

        select firstonly crosscompany docuRef
        join ledgerJournalTableHistory
            where docuRef.RefTableId == tableNum(LedgerJournalTable)
                && docuRef.RefRecId == ledgerJournalTableHistory.RecId;

        if (docuRef.RecId != 0)
            return true;

        select firstonly crosscompany docuRef
        join ledgerJournalTransHistory
            where docuRef.RefTableId == tableNum(LedgerJournalTrans)
                && docuRef.RefRecId == ledgerJournalTransHistory.RecId;

        if (docuRef.RecId != 0)
            return true;

        // Check if needs to update docuHistory when RefTableId is not matched
        select firstonly docuHistory
        join docuRef
            where docuRef.RecId == docuHistory.DocuRefRecId
                && docuRef.RefTableId == tableNum(LedgerJournalTableHistory)
                && docuHistory.RefTableId == tableNum(LedgerJournalTable);

        if (docuHistory.RecId != 0)
            return true;

        select firstonly docuHistory
        join docuRef
            where docuRef.RecId == docuHistory.DocuRefRecId
                && docuRef.RefTableId == tableNum(LedgerJournalTransHistory)
                && docuHistory.RefTableId == tableNum(LedgerJournalTrans);

        return (docuHistory.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuRefRelatedDataMovedBackFromHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// If there is any LedgerJournalTransHistory record moved back to LedgerJournalTrans table
    /// and DocuRef still reference to history table
    /// </summary>
    /// <returns>true if there is such record, otherwise false</returns>
    internal static boolean hasDocuRefRelatedDataMovedBackFromHistory()
    {
        DocuRef docuRef;
        DocuHistory docuHistory;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        select firstonly crosscompany docuRef
        join ledgerJournalTable
            where docuRef.RefTableId == tableNum(LedgerJournalTableHistory)
                && docuRef.RefRecId == ledgerJournalTable.RecId;

        if (docuRef.RecId != 0)
            return true;

        select firstonly crosscompany docuRef
        join ledgerJournalTrans
            where docuRef.RefTableId == tableNum(LedgerJournalTransHistory)
                && docuRef.RefRecId == ledgerJournalTrans.RecId;

        if (docuRef.RecId != 0)
            return true;

        // Check if needs to update docuHistory when RefTableId is not matched
        select firstonly docuHistory
        join docuRef
            where docuRef.RecId == docuHistory.DocuRefRecId
                && docuRef.RefTableId == tableNum(LedgerJournalTable)
                && docuHistory.RefTableId == tableNum(LedgerJournalTableHistory);

        if (docuHistory.RecId != 0)
            return true;

        select firstonly docuHistory
        join docuRef
            where docuRef.RecId == docuHistory.DocuRefRecId
                && docuRef.RefTableId == tableNum(LedgerJournalTrans)
                && docuHistory.RefTableId == tableNum(LedgerJournalTransHistory);

        return (docuHistory.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleDataMaintenanceJob</Name>
				<Source><![CDATA[
    internal static void scheduleDataMaintenanceJob(str _reason)
    {
        DataMaintenanceActionScheduling scheduler = DataMaintenanceActionScheduling::construct();
        DataMaintenanceActionSchedulingContract schedulerContract = DataMaintenanceActionSchedulingContract::construct();

        schedulerContract.parmActionClassName(classStr(LedgerJournalArchiveDocuRefUpdateAction));
        schedulerContract.parmReason(_reason);
        schedulerContract.parmSource(DataMaintenanceActionSchedulerHistorySource::System);

        scheduler.trySchedule(schedulerContract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>