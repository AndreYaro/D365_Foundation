<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExchangeRateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exchange rate help class.
/// </summary>
class TaxExchangeRateHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomsExchangeRate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves customs exchange rate.
    /// </summary>
    /// <param name="_currencyCode">
    ///    Currency code for which exchangeRate is queried.
    /// </param>
    /// <param name="_direction">
    ///    Direction for which exchangeRate is queried.  This Direction_IN enum should be passed for this value.
    /// </param>
    /// <param name="_exchRateDate">
    ///    Exchange rate date for which exchangeRate is queried.
    /// </param>
    /// <returns>
    ///    An customs exchange rate based on the specified information
    /// </returns>
    public static CurrencyExchangeRate getCustomsExchangeRate_IN(
        CurrencyCode   _currencyCode,
        Direction_IN   _direction = Direction_IN::Import,
        TransDate      _exchRateDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ExchangeRateHelper          exchangeRateHelper;
        LedgerRecId                 ledger;
        TransDate                   exchangeDate;
        CustomsExchangeRate_IN      exchRate;

        SysGlobalObjectCache        sysGlobalObjectCache;
        container                   key;
        container                   value;
        LedgerExtensionIN           ledgerExtensionIN;

        if (_currencyCode)
        {
            sysGlobalObjectCache    = classfactory.globalObjectCache();
            key                     = [_currencyCode, _direction, _exchRateDate];
            value                   = CurrencyExchangeRateCache::getValue(CurrencyExchangeRateCacheScope::CustExchRate_IN, key);

            if (value != conNull())
            {
                [exchRate] = value;
            }
            else
            {
                exchangeDate = _exchRateDate;
                ledger = Ledger::current();
                ledgerExtensionIN = ledgerExtensionIN::findByLedger(ledger);
                exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                                                        ledger,
                                                        _currencyCode,
                                                        exchangeDate);
                exchangeRateHelper.parmExchangeRateTypeRecId((_direction == Direction_IN::Import) ? ledgerExtensionIN.CustomsImportExchangeRateType
                                                                                                        : ledgerExtensionIN.CustomsExportExchangeRateType);
                exchRate = exchangeRateHelper.getExchangeRate1();
                CurrencyExchangeRateCache::insertValue(CurrencyExchangeRateCacheScope::CustExchRate_IN, key,[exchRate]);
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tdsCurAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the amount in transaction currency by considering the TDS exchange rate.
    /// </summary>
    /// <param name="_amountMST">
    /// The amount in accounting currency.
    /// </param>
    /// <param name="_currencyCode">
    /// The to currency code.
    /// </param>
    /// <param name="_exchRateDate">
    /// The exchange rate date.
    /// </param>
    /// <param name="_rounding">
    /// The rounding rule.
    /// </param>
    /// <returns>
    /// The amount in specified currency.
    /// </returns>
    public static AmountCur tdsCurAmount_IN(
        AmountMST           _amountMST,
        CurrencyCode        _currencyCode,
        TransDate           _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean             _rounding     = true)
    {
        AmountCur               amountCur;
        TDSExchangeRate_IN      exchRate;
        CurrencyExchangeHelper  currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), _exchRateDate);

        if (_amountMST == 0)
        {
            return 0;
        }

        if (_currencyCode)
        {
            exchRate = TaxExchangeRateHelper::getTDSExchangeRate_IN(_currencyCode, _exchRateDate);
            
            if (!exchRate)
            {
                throw error(strFmt("@GLS62271", _currencyCode, _exchRateDate));
            }

            currencyExchangeHelper.parmExchangeRate1(exchRate);
            amountCur = currencyExchangeHelper.calculateAccountingToTransaction(_currencyCode, _amountMST, _rounding);
        }
        else
        {
            throw error("@SYS23229");
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tdsMSTAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the amount in base currency by considering the TDS exchange rate.
    /// </summary>
    /// <param name="_amountCur">
    /// The amount in currency code.
    /// </param>
    /// <param name="_currencyCode">
    /// The from currency code.
    /// </param>
    /// <param name="_exchRateDate">
    /// The exchange rate date.
    /// </param>
    /// <param name="_rounding">
    /// The rounding rule.
    /// </param>
    /// <returns>
    /// The amount in base currency by considering the TDS exchange rate.
    /// </returns>
    public static AmountMST tdsMSTAmount_IN(
        AmountCur           _amountCur,
        CurrencyCode        _currencyCode,
        TransDate           _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean             _rounding     = true)
    {
        AmountMST               amountMST;
        TDSExchangeRate_IN      exchRate;
        CurrencyExchangeHelper  currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), _exchRateDate);

        if (_amountCur == 0)
        {
            return 0;
        }

        if (_currencyCode)
        {
            exchRate = TaxExchangeRateHelper::getTDSExchangeRate_IN(_currencyCode, _exchRateDate);

            if (!exchRate)
            {
                throw error(strFmt("@GLS62271", _currencyCode, _exchRateDate));
            }

            currencyExchangeHelper.parmExchangeRate1(exchRate);
            amountMST = currencyExchangeHelper.calculateTransactionToAccounting(_currencyCode, _amountCur, _rounding);
        }
        else
        {
            throw error("@SYS23229");
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTDSExchangeRate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves TDS exchange rate.
    /// </summary>
    /// <param name="_currencyCode">
    ///    Currency code for which exchangeRate is queried.
    /// </param>
    /// <param name="_exchRateDate">
    ///    Exchange rate date for which exchangeRate is queried.
    /// </param>
    /// <returns>
    ///    An TT buying exchange rate based on the specified information.
    /// </returns>
    public static server CurrencyExchangeRate getTDSExchangeRate_IN(CurrencyCode _currencyCode, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ExchangeRateHelper          exchangeRateHelper;
        LedgerRecId                 ledger;
        TransDate                   exchangeDate;
        TDSExchangeRate_IN          exchRate;

        SysGlobalObjectCache        sysGlobalObjectCache;
        container                   key;
        container                   value;
        LedgerExtensionIN           ledgerExtensionIN;

        if (_currencyCode)
        {
            sysGlobalObjectCache    = classfactory.globalObjectCache();
            key                     = [_currencyCode, _exchRateDate];
            value                   = CurrencyExchangeRateCache::getValue(CurrencyExchangeRateCacheScope::TDSExchRate_IN, key);

            if (value != conNull())
            {
                [exchRate] = value;
            }
            else
            {
                exchangeDate = _exchRateDate;
                ledger = Ledger::current();
                ledgerExtensionIN = ledgerExtensionIN::findByLedger(ledger);
                exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                                                    ledger,
                                                    _currencyCode,
                                                    exchangeDate);
                if (ledgerExtensionIN.TDSImportExchangeRateType)
                {
                    exchangeRateHelper.parmExchangeRateTypeRecId(ledgerExtensionIN.TDSImportExchangeRateType);
                }
                else
                {
                    exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::defaultExchangeRateType());
                }

                exchRate = exchangeRateHelper.getExchangeRate1();
                CurrencyExchangeRateCache::insertValue(CurrencyExchangeRateCacheScope::TDSExchRate_IN, key,[exchRate]);
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTDSExchangeRateSecond_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves TDS exchange rate second.
    /// </summary>
    /// <param name="_currencyCode">
    ///    Currency code for which exchangeRate is queried.
    /// </param>
    /// <param name="_exchRateDate">
    ///    Exchange rate date for which exchangeRate is queried.
    /// </param>
    /// <returns>
    ///    An TT buying exchange rate based on the specified information.
    /// </returns>
    public static server CurrencyExchangeRate getTDSExchangeRateSecond_IN(CurrencyCode _currencyCode, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ExchangeRateHelper          exchangeRateHelper;
        LedgerRecId                 ledger;
        TransDate                   exchangeDate;
        TDSExchangeRate_IN          exchRate;

        SysGlobalObjectCache        sysGlobalObjectCache;
        container                   key;
        container                   value;
        LedgerExtensionIN           ledgerExtensionIN;

        if (_currencyCode)
        {
            sysGlobalObjectCache    = classfactory.globalObjectCache();
            key                     = [_currencyCode, _exchRateDate];
            value                   = CurrencyExchangeRateCache::getValue(CurrencyExchangeRateCacheScope::TDSExchRateSecondCache_IN, key);

            if (value != conNull())
            {
                [exchRate] = value;
            }
            else
            {
                exchangeDate = _exchRateDate;
                ledger = Ledger::current();
                ledgerExtensionIN = ledgerExtensionIN::findByLedger(ledger);
                exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                                                    ledger,
                                                    _currencyCode,
                                                    exchangeDate);
                if (ledgerExtensionIN.TDSImportExchangeRateType)
                {
                    exchangeRateHelper.parmExchangeRateTypeRecId(ledgerExtensionIN.TDSImportExchangeRateType);
                }
                else
                {
                    exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::defaultExchangeRateType());
                }

                exchRate = exchangeRateHelper.getExchangeRate2();
                CurrencyExchangeRateCache::insertValue(CurrencyExchangeRateCacheScope::TDSExchRateSecondCache_IN, key,[exchRate]);
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTDSExchangeRateRep_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TDS reporting currency exchange rate.
    /// </summary>
    /// <param name = "_fromCurrencyCode">The from currency code.</param>
    /// <param name = "_toCurrencyCode">The to currency code.</param>
    /// <param name = "_exchRateDate">The exchange rate date.</param>
    /// <returns>The TDS reporting currency exchange rate.</returns>
    public static CurrencyExchangeRate getTDSExchangeRateRep_IN(
        CurrencyCode _fromCurrencyCode,
        CurrencyCode _toCurrencyCode,
        TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxExchangeRateHelper::getTDSExchangeRateRepFirstOrSecond_IN(
            _fromCurrencyCode,
            _toCurrencyCode,
            _exchRateDate,
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTDSExchangeRateRepSecond_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TDS reporting currency exchange rate second.
    /// </summary>
    /// <param name = "_fromCurrencyCode">The from currency code.</param>
    /// <param name = "_toCurrencyCode">The to currency code.</param>
    /// <param name = "_exchRateDate">The exchange rate date.</param>
    /// <returns>The TDS reporting currency exchange rate.</returns>
    public static CurrencyExchangeRate getTDSExchangeRateRepSecond_IN(
        CurrencyCode _fromCurrencyCode,
        CurrencyCode _toCurrencyCode,
        TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        
        return TaxExchangeRateHelper::getTDSExchangeRateRepFirstOrSecond_IN(
            _fromCurrencyCode,
            _toCurrencyCode,
            _exchRateDate,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTDSExchangeRateRepFirstOrSecond_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TDS reporting currency exchange rate first or rate second.
    /// </summary>
    /// <param name = "_fromCurrencyCode">The from currency code.</param>
    /// <param name = "_toCurrencyCode">The to currency code.</param>
    /// <param name = "_exchRateDate">The exchange rate date.</param>
    /// <param name = "_isRateSecond">Whether to get second exchange rate.</param>
    /// <returns>The TDS reporting currency exchange rate(rate 1 or rate 2).</returns>
    internal static CurrencyExchangeRate getTDSExchangeRateRepFirstOrSecond_IN(
        CurrencyCode _fromCurrencyCode,
        CurrencyCode _toCurrencyCode,
        TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean _isRateSecond = false)
    {
        const str TDSExchRateRepCache = 'TDSExchRateRepCache_IN';
        const str TDSExchRateRepSecondCache = 'TDSExchRateRepSecondCache_IN';

        TDSExchangeRate_IN          exchRate;

        if (_fromCurrencyCode && _toCurrencyCode)
        {
            str cacheScope = _isRateSecond ? TDSExchRateRepSecondCache : TDSExchRateRepCache;

            SysGlobalObjectCache sysGlobalObjectCache    = classfactory.globalObjectCache();
            container key                                = [_fromCurrencyCode, _toCurrencyCode, _exchRateDate];
            container value                              = sysGlobalObjectCache.find(cacheScope, key);

            if (value != conNull())
            {
                [exchRate] = value;
            }
            else
            {
                ExchangeRateTypeRecId exchangeRateTypeRecId;

                ledgerExtensionIN ledgerExtensionIN = ledgerExtensionIN::findByLedger(Ledger::current());

                if (ledgerExtensionIN.TDSImportExchangeRateType)
                {
                    exchangeRateTypeRecId = ledgerExtensionIN.TDSImportExchangeRateType;
                }
                else
                {
                    exchangeRateTypeRecId = TaxINTDSRepExchRateTypeFlight::instance().isEnabled() ? Ledger::reportingCurrencyExchangeRateType() : Ledger::defaultExchangeRateType();
                }

                if (_isRateSecond) 
                {
                    exchRate = ExchangeRateCalculation::getExchangeRate2_Static(
                        exchangeRateTypeRecId,
                        _fromCurrencyCode,
                        _toCurrencyCode,
                        _exchRateDate);
                }
                else
                {
                    exchRate = ExchangeRateCalculation::getExchangeRate1_Static(
                        exchangeRateTypeRecId,
                        _fromCurrencyCode,
                        _toCurrencyCode,
                        _exchRateDate);
                }
                sysGlobalObjectCache.insert(cacheScope, key, [exchRate]);
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>