<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRollupCalendarWriter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Roll-up calendar table writer which <c>ResRollupCalendarShared</c> table is used
/// for storing the calendar capacity in the format like <c>ResRollup</c> table.
/// </summary>
class ResRollupCalendarWriter
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCalendarRollUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates calendar roll-up records for all timescale.
    /// </summary>
    /// <param name = "_arguments">Roll-up update arguments.</param>
    /// <param name = "cancellationToken">Cancellation token.</param>
    public static void updateCalendarRollUp(container _arguments, System.Threading.CancellationToken cancellationToken)
    {
        utcdatetime     startDateTime = conPeek(_arguments, 1);
        utcdatetime     endDateTime = conPeek(_arguments, 2);
        CalendarRecId   calendar = conPeek(_arguments, 3);
        ResRollupCalendarWriter rollUpWriter = ResRollupCalendarWriter::construct();

        ttsbegin;
        rollUpWriter.updateCalendarRollUpOperation(calendar, startDateTime, endDateTime);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalendarRollUpOperation</Name>
				<Source><![CDATA[
    private void updateCalendarRollUpOperation(CalendarRecId _calendar,
        utcdatetime _rangeStartDateTime, utcdatetime _rangeEndDateTime)
    {
        // add records to the the rollup calendar table for  each calendar hat left in the calendar set by each time scale
        DictEnum        timescales = new DictEnum(enumNum(AVTimeframeType));
        int             values = timescales.values();

        for (int counter = 1; counter <= values; counter++)
        {
            AVTimeframeType timescale = timescales.index2Value(counter);
            utcdatetime startDateTime = AVTimeframe::getTimeframe(_rangeStartDateTime, timescale).start();
            utcdatetime endDateTime = AVTimeframe::getTimeframe(_rangeEndDateTime, timescale).end();

            // add calendar records from calendar set for all time scale
            this.insertRollupCalendar(_calendar, timescale, startDateTime, endDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRollUpCalendar</Name>
				<Source><![CDATA[
    private void insertRollUpCalendar(CalendarRecId _calendar, AVTimeframeType _timeScale,
        utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        ResCalendarCapacity     calendarCapacity;
        ResRollupCalendarShared rollUpCalendarTable;
        this.skipDatabaseLogAndEvent(rollUpCalendarTable);
        ProjScheduleStatus unAvailableStaus = ProjScheduleStatus::Unavailable;
        ProjScheduleStatus availableStaus = ProjScheduleStatus::Available;

        delete_from rollUpCalendarTable
            where rollUpCalendarTable.Calendar == _calendar
                && rollUpCalendarTable.Timescale == _timeScale
                && rollUpCalendarTable.Timeframe >= _startDateTime
                && rollUpCalendarTable.Timeframe <= _endDateTime;

        switch (_timeScale)
        {
            case AVTimeframeType::Hour:
                insert_recordset rollUpCalendarTable (Calendar, Timescale, Timeframe, Capacity, Status)
                    select _calendar, _timeScale, Hour, End, unAvailableStaus from calendarCapacity
                    where calendarCapacity.Calendar == _calendar
                        && calendarCapacity.Hour >= _startDateTime
                        && calendarCapacity.Hour <= _endDateTime;
                // update roll up calendar table capacity and status
                ResCalendarCapacityHourView calendarHourView;
                update_recordset rollUpCalendarTable
                    setting Status = availableStaus,
                            Capacity = calendarHourView.Capacity
                    join calendarHourView
                    where rollUpCalendarTable.Calendar == _calendar
                        && rollUpCalendarTable.Timescale == AVTimeframeType::Hour
                        && rollUpCalendarTable.Timeframe >= _startDateTime
                        && rollUpCalendarTable.Timeframe <= _endDateTime
                        && calendarHourView.Calendar == rollUpCalendarTable.Calendar
                        && calendarHourView.Hour == rollUpCalendarTable.Timeframe
                        && calendarHourView.Capacity != 0;
                break;

            case AVTimeframeType::Day:
                insert_recordset rollUpCalendarTable (Calendar, Timescale, Timeframe, Capacity, Status)
                    select _calendar, _timeScale, Day, sum(End), unAvailableStaus from calendarCapacity
                    group by calendarCapacity.Calendar, calendarCapacity.Day
                    where calendarCapacity.Calendar == _calendar
                        && calendarCapacity.Day >= _startDateTime
                        && calendarCapacity.Day <= _endDateTime;
                // update roll up calendar table capacity and status
                ResCalendarCapacityDayView calendarDayView;
                update_recordset rollUpCalendarTable
                    setting Status = availableStaus,
                            Capacity = calendarDayView.Capacity
                    join calendarDayView
                    where rollUpCalendarTable.Calendar == _calendar
                        && rollUpCalendarTable.Timescale == AVTimeframeType::Day
                        && rollUpCalendarTable.Timeframe >= _startDateTime
                        && rollUpCalendarTable.Timeframe <= _endDateTime
                        && calendarDayView.Calendar == rollUpCalendarTable.Calendar
                        && calendarDayView.Day == rollUpCalendarTable.Timeframe
                        && calendarDayView.Capacity != 0;
                break;

            case AVTimeframeType::Week:
                insert_recordset rollUpCalendarTable (Calendar, Timescale, Timeframe, Capacity, Status)
                    select _calendar, _timeScale, Week, sum(End), unAvailableStaus from calendarCapacity
                    group by calendarCapacity.Calendar, calendarCapacity.Week
                    where calendarCapacity.Calendar == _calendar
                        && calendarCapacity.Week >= _startDateTime
                        && calendarCapacity.Week <= _endDateTime;
                // update roll up calendar table capacity and status
                ResCalendarCapacityWeekView calendarWeekView;
                update_recordset rollUpCalendarTable
                    setting Status = availableStaus,
                            Capacity = calendarWeekView.Capacity
                    join calendarWeekView
                    where rollUpCalendarTable.Calendar == _calendar
                        && rollUpCalendarTable.Timescale == AVTimeframeType::Week
                        && rollUpCalendarTable.Timeframe >= _startDateTime
                        && rollUpCalendarTable.Timeframe <= _endDateTime
                        && calendarWeekView.Calendar == rollUpCalendarTable.Calendar
                        && calendarWeekView.Week == rollUpCalendarTable.Timeframe
                        && calendarWeekView.Capacity != 0;
                break;

            case AVTimeframeType::Month:
                 insert_recordset rollUpCalendarTable (Calendar, Timescale, Timeframe, Capacity, Status)
                    select _calendar, _timeScale, Month, sum(End), unAvailableStaus from calendarCapacity
                    group by calendarCapacity.Calendar, calendarCapacity.Month
                    where calendarCapacity.Calendar == _calendar
                        && calendarCapacity.Month >= _startDateTime
                        && calendarCapacity.Month <= _endDateTime;
                // update roll up calendar table capacity and status
                ResCalendarCapacityMonthView calendarMonthView;
                update_recordset rollUpCalendarTable
                    setting Status = availableStaus,
                            Capacity = calendarMonthView.Capacity
                    join calendarMonthView
                    where rollUpCalendarTable.Calendar == _calendar
                        && rollUpCalendarTable.Timescale == AVTimeframeType::Month
                        && rollUpCalendarTable.Timeframe >= _startDateTime
                        && rollUpCalendarTable.Timeframe <= _endDateTime
                        && calendarMonthView.Calendar == rollUpCalendarTable.Calendar
                        && calendarMonthView.Month == rollUpCalendarTable.Timeframe
                        && calendarMonthView.Capacity != 0;
                break;

            case AVTimeframeType::Quarter:
                insert_recordset rollUpCalendarTable (Calendar, Timescale, Timeframe, Capacity, Status)
                    select _calendar, _timeScale, Quarter, sum(End), unAvailableStaus from calendarCapacity
                    group by calendarCapacity.Calendar, calendarCapacity.Quarter
                    where calendarCapacity.Calendar == _calendar
                        && calendarCapacity.Quarter >= _startDateTime
                        && calendarCapacity.Quarter <= _endDateTime;
                // update roll up calendar table capacity and status
                ResCalendarCapacityQuarterView calendarQuarterView;
                update_recordset rollUpCalendarTable
                    setting Status = availableStaus,
                            Capacity = calendarQuarterView.Capacity
                    join calendarQuarterView
                    where rollUpCalendarTable.Calendar == _calendar
                        && rollUpCalendarTable.Timescale == AVTimeframeType::Quarter
                        && rollUpCalendarTable.Timeframe >= _startDateTime
                        && rollUpCalendarTable.Timeframe <= _endDateTime
                        && calendarQuarterView.Calendar == rollUpCalendarTable.Calendar
                        && calendarQuarterView.Quarter == rollUpCalendarTable.Timeframe
                        && calendarQuarterView.Capacity != 0;
                break;

            case AVTimeframeType::HalfYear:
                insert_recordset rollUpCalendarTable (Calendar, Timescale, Timeframe, Capacity, Status)
                    select _calendar, _timeScale, HalfYear, sum(End), unAvailableStaus from calendarCapacity
                    group by calendarCapacity.Calendar, calendarCapacity.HalfYear
                    where calendarCapacity.Calendar == _calendar
                        && calendarCapacity.HalfYear >= _startDateTime
                        && calendarCapacity.HalfYear <= _endDateTime;
                // update roll up calendar table capacity and status
                ResCalendarCapacityHalfYearView calendarHalfYearView;
                update_recordset rollUpCalendarTable
                    setting Status = availableStaus,
                            Capacity = calendarHalfYearView.Capacity
                    join calendarHalfYearView
                    where rollUpCalendarTable.Calendar == _calendar
                        && rollUpCalendarTable.Timescale == AVTimeframeType::HalfYear
                        && rollUpCalendarTable.Timeframe >= _startDateTime
                        && rollUpCalendarTable.Timeframe <= _endDateTime
                        && calendarHalfYearView.Calendar == rollUpCalendarTable.Calendar
                        && calendarHalfYearView.HalfYear == rollUpCalendarTable.Timeframe
                        && calendarHalfYearView.Capacity != 0;
                break;
        }

        // Add unavailable records for dates which outside of the calendar set dates.
        this.validateAndInsertUnavailableRollupCalendarTableRecords(_calendar, _timeScale, _startDateTime, _endDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndInsertUnavailableRollupCalendarTableRecords</Name>
				<Source><![CDATA[
    private void validateAndInsertUnavailableRollupCalendarTableRecords(CalendarRecId _calendar, AVTimeframeType _timeScale,
        utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        ResRollupCalendarShared rollUpCalendarTable;
        this.skipDatabaseLogAndEvent(rollUpCalendarTable);
        ProjScheduleStatus unAvailableStaus = ProjScheduleStatus::Unavailable;

        select minof(Timeframe) from rollUpCalendarTable
            where rollUpCalendarTable.Calendar == _calendar
                && rollUpCalendarTable.Timescale == _timeScale;

        if (rollUpCalendarTable.Timeframe > _startDateTime)
        {
            this.insertUnavailabileRollupCalendarTableRecords(_calendar, _timeScale, _startDateTime,
                ResUtil::getPreviousDateTimeByTimeScale(rollUpCalendarTable.Timeframe, _timeScale));
        }

        select maxof(Timeframe) from rollUpCalendarTable
            where rollUpCalendarTable.Calendar == _calendar
                && rollUpCalendarTable.Timescale == _timeScale;

        if (rollUpCalendarTable.Timeframe < _endDateTime)
        {
            this.insertUnavailabileRollupCalendarTableRecords(_calendar, _timeScale,
                ResUtil::getNextDateTimeByTimeScale(rollUpCalendarTable.Timeframe, _timeScale), _endDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUnavailabileRollupCalendarTableRecords</Name>
				<Source><![CDATA[
    private void insertUnavailabileRollupCalendarTableRecords(CalendarRecId _calendar, AVTimeframeType _timeScale,
        utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        ResRollupCalendarShared   rollUpCalendarTable;
        this.skipDatabaseLogAndEvent(rollUpCalendarTable);
        ProjScheduleStatus unAvailableStaus = ProjScheduleStatus::Unavailable;

        RecordInsertList resourceRecordsToBeInserted = new RecordInsertList(tableNum(ResRollupCalendarShared));

        utcdatetime tempDateTime = _startDateTime;

        while (tempDateTime <= _endDateTime)
        {
            rollUpCalendarTable.Calendar = _calendar;
            rollUpCalendarTable.Timescale = _timeScale;
            rollUpCalendarTable.Timeframe = tempDateTime;
            rollUpCalendarTable.Capacity = 0;
            rollUpCalendarTable.Status = unAvailableStaus;
            resourceRecordsToBeInserted.add(rollUpCalendarTable);
            tempDateTime = ResUtil::getNextDateTimeByTimeScale(tempDateTime, _timeScale);
        }

        resourceRecordsToBeInserted.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip data base log and event to improve performance.
    /// </summary>
    /// <param name = "_table">The specify table buffer.</param>
    protected void skipDatabaseLogAndEvent(Common _table)
    {
        // Skip database log is set to true in code. These are performance cache data which
        // are neither master or transaction data. There is no value for our user to log it.
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipDataMethods(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of roll-up calendar writer.
    /// </summary>
    /// <returns>Roll-up calendar writer object.</returns>
    public static ResRollupCalendarWriter construct()
    {
        ResRollupCalendarWriter writer = new ResRollupCalendarWriter();
        return writer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>