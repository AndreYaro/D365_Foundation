<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDockDemandSelector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCrossDockDemandSelector</c> is responisble for selecting demand transactions that are available to cross dock.
/// </summary>
abstract class WHSCrossDockDemandSelector
{
    public WHSCrossDockId crossDockId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>selectDemandSourcesToCrossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks for matching demand sources that are available to cross dock.
    /// </summary>
    /// <param name = "_supplyQty">
    /// The quantity being supplied.
    /// </param>
    /// <param name = "_supplyInventDim">
    /// The inventDim of the inventory being supplied.
    /// </param>
    /// <param name = "_supplyTransId">
    /// The <C>InventTransId</C> of the supply transaction for cross docking.
    /// </param>
    /// <param name = "_crossDockId">
    /// The current <c>WHSCrossDockId</c> being used.
    /// </param>
    /// <param name = "_markedTransOriginId">
    /// The transaction origin Id that is marked against current supply
    /// </param>
    /// <returns>
    /// Returns the quantity amount that was cross docked.
    /// </returns>
    abstract public InventQty selectDemandSourcesToCrossDock(
        InventQty                   _supplyQty,
        InventDim                   _supplyInventDim,
        InventTransId               _supplyTransId,
        boolean                     _requiresLocation,
        WHSCrossDockId              _crossDockId = '',
        InventTransOriginIdMarked   _markedTransOriginId = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkTypeFulfillmentStrategy</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates and returns a new instance of the correct sub class of <c>WHSCrossDockDemandSelector</c>.
    /// </summary>
    /// <param name = "_workType">
	/// The type of work to look for, to create cross docking work.
	/// </param>
    /// <param name = "_crossDockStrategy">
	/// The cross docking strategy that is currently being used.
	/// </param>
    /// <returns>
	/// A new instance of the class <c>WHSCrossDockDemandSelector</c>.
	/// </returns>
    public static WHSCrossDockDemandSelector newFromWorkTypeFulfillmentStrategy(
        WHSWorkTransType                _workType,
        WHSCrossDockFulfillmentStrategy _crossDockStrategy)
    {
        WHSCrossDockDemandSelectorAttribute crossDockDemandSelectorAttr = new WHSCrossDockDemandSelectorAttribute(_workType, _crossDockStrategy);

        WHSCrossDockDemandSelector crossDockDemandSelector = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSCrossDockDemandSelector), crossDockDemandSelectorAttr);

        if (!crossDockDemandSelector)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return crossDockDemandSelector;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
