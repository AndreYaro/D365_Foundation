<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportCtrlSubComponentHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportCtrlSubComponentHandler extends PCImportNodeHandlerWithCfgControl implements PCImportNodeHandlerWithControl
{
    PCComponentControlSubComponent componentControlSubComponent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignControl</Name>
				<Source><![CDATA[
    public void assignControl(RefRecId _componentControlId)
    {
        componentControlSubComponent.ComponentControl = _componentControlId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    protected void importData()
    {
        PCImportXmlDocumentHandler    root                = this.root();

        PCName                  componentName       = this.getFieldByName(#component);
        PCName                  subComponentName    = this.getFieldByName(fieldStr(PCComponentControlSubComponent, SubComponent));

        componentControlSubComponent.SubComponent           = PCSubComponent::findByNameAndParent(subComponentName,
                                                                                                  root.importedComponents().lookup(componentName)).RecId;
        componentControlSubComponent.ParentComponentControl = this.parent().recordRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// The handlers tree needs to build itself because of the indirect recursive definition of
    /// <c>PCComponentControl</c> and <c>PCComponentControlSubComponent</c> referencing each other.
    /// <c>PCImportComponentControlHandler</c> then gets instantiated multiple times and has no children initialized,
    /// so new child handlers need to be created before searching for them.
    /// </summary>
    /// <param name="_nodeType">
    /// The type of the node to create a new handler for.
    /// </param>
    /// <returns>
    /// The return value of the call to the superclass implementation, that should return the newly created handler.
    /// </returns>
    protected PCImportModelNodeHandler lookupChild(str _nodeType)
    {
        if (_nodeType == tableStr(PCComponentControl))
        {
            this.addChild(_nodeType, PCImportComponentControlHandler::construct());
        }

        return super(_nodeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record after it got its component control assigned by the child handler.
    /// </summary>
    protected void postProcess()
    {
        componentControlSubComponent.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return componentControlSubComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public PCImportCtrlSubComponentHandler construct()
    {
        return new PCImportCtrlSubComponentHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>