<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportRunController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller for Tax GSTR reports.
/// </summary>
public class TaxGSTRReportRunController_IN extends ERFormatMappingRunBaseController implements BatchRetryable
{
    DialogField isInBatchField, dayNumPerBatch;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@TaxEngineGSTR:GERExportCSV";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxGSTRReportRunContract_IN dataContract;

        TaxGSTRReportRunController_IN serviceController =
            new TaxGSTRReportRunController_IN(
                classStr(TaxGSTRReportRunService_IN),
                methodStr(TaxGSTRReportRunService_IN, run));

        dataContract = serviceController.getDataContractObject() as TaxGSTRReportRunContract_IN;

        if (dataContract == null)
        {
            throw error(Error::missingParameter(null));
        }

        serviceController.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        serviceController.initContract();
        serviceController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContract</Name>
				<Source><![CDATA[
    private void initContract()
    {
        if( !xSysLastValue::getLast(this))
        {
            TaxGSTRReportRunContract_IN contract = this.getDataContractObject() as TaxGSTRReportRunContract_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysOperationController construct(Args _args)
    {
        IdentifierName className, methodName;
        SysOperationExecutionMode mode;

        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(_args);
        var controller = new TaxGSTRReportRunController_IN(className, methodName, mode);
        controller.parmArgs(_args);
        
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        const str Batch = '_Batch';
        const str Merged = '_Merged';
        const str Underline = '_';
        Object object = this.getDataContractObject();

        if (object == null)
        {
            throw error(Error::missingParameter(null));
        }

        TaxGSTRReportRunContract_IN contract = object;

        BatchCaption jobCaption = this.getCaption();

        if (this.isRunInMutipleBatchJob(contract) && this.isInBatch())
        {
            TaxBatchJobGroup taxBatchJobGroup;

            ttsbegin;
            ERFormatMappingRunJobTable jobLoc;
            jobLoc = ERFormatMappingRunJobTable::find(contract.parmFormatMappingRunJobId(), true);
            jobLoc.delete();
            ttscommit;

            TaxGSTRReportRunController_IN   controller;
            TaxGSTRReportRunContract_IN     dataContract;
        
            taxBatchJobGroup.clear();
            taxBatchJobGroup.StartDateTime = this.parmCurrentBatch().StartDateTime;
            taxBatchJobGroup.Caption = this.getCaption();
            taxBatchJobGroup.Status = ERFormatMappingRunJobStatus::Waiting;
            taxBatchJobGroup.Parameters = [contract.parmDayNumPerBatch(), contract.parmErConfiguration(),
                                           contract.parmFromDate(), contract.parmToDate(),
                                           contract.parmRegNum(), contract.parmReportName()];
            taxBatchJobGroup.insert();

            TransDate   batchJobFromDate = contract.parmFromDate();
            str batchJobName;
            int batchJobIndex = 1;

            while (batchJobFromDate <= contract.parmToDate())
            {
                controller = new TaxGSTRReportRunController_IN(classStr(TaxGSTRReportRunService_IN), methodStr(TaxGSTRReportRunService_IN, run));
                controller.parmInBatch(true);
                // get the data contract
                object = controller.getDataContractObject();
                if (object == null)
                {
                    throw error(Error::missingParameter(null));
                }
                dataContract = object;
                // initialize variables for the data contract
                dataContract.parmFromDate(batchJobFromDate);
            
                if (batchJobFromDate + contract.parmDayNumPerBatch() - 1 >= contract.parmToDate())
                {
                    dataContract.parmToDate(contract.parmToDate());
                }
                else
                {
                    dataContract.parmToDate(batchJobFromDate + contract.parmDayNumPerBatch() - 1);
                }
                dataContract.parmErConfiguration(contract.parmErConfiguration());
                dataContract.parmRegNum(contract.parmRegNum());
                dataContract.parmReportName(contract.parmReportName());
                
                batchJobName = jobCaption + Underline + this.getUtcDateTimeStr() + Batch + int2Str(batchJobIndex);
                this.createReportRunBatch(batchJobName, taxBatchJobGroup, controller, dataContract);

                batchJobFromDate = batchJobFromDate + contract.parmDayNumPerBatch();
                batchJobIndex++;
            }

            batchJobName = jobCaption + Underline + this.getUtcDateTimeStr() + Merged;

            this.createMergeBatch(batchJobName, taxBatchJobGroup);
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMergeBatch</Name>
				<Source><![CDATA[
    private void createMergeBatch(str _batchJobName, TaxBatchJobGroup _taxBatchJobGroup)
    {
        TaxGSTRReportMergeFile mergeFile = new TaxGSTRReportMergeFile();

        mergeFile.parmTaxBatchJobGroup(_taxBatchJobGroup.RecId);
        mergeFile.parmName(_batchJobName);
        
        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmCaption(_batchJobName);
        batchHeader.addTask(mergeFile);
        batchHeader.save();

        TaxBatchJobRelation jobRelation;
        jobRelation.clear();
        jobRelation.BatchJob = mergeFile.parmCurrentBatch().BatchJobId;
        jobRelation.TaxBatchJobGroup = _taxBatchJobGroup.RecId;
        jobRelation.IsMergeBatch = true;
        jobRelation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUtcDateTimeStr</Name>
				<Source><![CDATA[
    private str getUtcDateTimeStr()
    {
        utcdatetime dateTime = DateTimeUtil::getSystemDateTime();

        str dateTimestr = num2Str0(DateTimeUtil::year(dateTime), 4) +
                          num2Str0(DateTimeUtil::month(dateTime), 2) +
                          num2Str0(DateTimeUtil::day(dateTime), 2) +
                          num2Str0(DateTimeUtil::hour(dateTime), 2) +
                          num2Str0(DateTimeUtil::minute(dateTime), 2) +
                          num2Str0(DateTimeUtil::second(dateTime), 2);

        return dateTimestr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostBuild</Name>
				<Source><![CDATA[
    protected void dialogPostBuild()
    {
        super();
        Dialog dialogLoc = this.dialog();
        dayNumPerBatch = SrsReportHelper::getDialogFieldByLabel(dialogLoc, "@ApplicationSuite_Localization:NumberOfDaysPerBatch");

        isInBatchField = SrsReportHelper::getDialogFieldByLabel(dialogLoc, "@SYS2312");
        isInBatchField.registerOverrideMethod(methodStr(FormCheckBoxControl, Modified),
                methodStr(TaxGSTRReportRunController_IN, inBatchChange), this);

        dayNumPerBatch.enabled(isInBatchField.value());
        dayNumPerBatch.visible(true);

        this.transferBatchExecuteParmToContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inBatchChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private boolean inBatchChange(FormCheckBoxControl _control)
    {
        if (isInBatchField.value())
        {
            dayNumPerBatch.enabled(true);
        }
        else
        {
            dayNumPerBatch.enabled(false);
        }

        this.transferBatchExecuteParmToContract();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRunInMutipleBatchJob</Name>
				<Source><![CDATA[
    private boolean isRunInMutipleBatchJob(TaxGSTRReportRunContract_IN _contract)
    {
        return _contract.parmDayNumPerBatch() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    private BatchCaption getCaption()
    {
        return this.batchInfo().parmCaption() ? this.batchInfo().parmCaption() : this.caption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportRunBatch</Name>
				<Source><![CDATA[
    private void createReportRunBatch(
        str _batchJobName, 
        TaxBatchJobGroup _taxBatchJobGroup, 
        TaxGSTRReportRunController_IN _controller,
        TaxGSTRReportRunContract_IN _dataContract)
    {
        ERFormatMappingRunJobTable job;
        job.Caption = _batchJobName;
        job.Status = ERFormatMappingRunJobStatus::Waiting;
        job.insert();

        _dataContract.parmFormatMappingRunJobId(job.RecId);

        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmCaption(_batchJobName);
        batchHeader.addTask(_controller);
        batchHeader.save();

        TaxBatchJobRelation::addRelation(_taxBatchJobGroup, job, _controller.parmCurrentBatch().BatchJobId);

        ttsbegin;
        job.selectForUpdate(true);
        job.BatchJob = _controller.parmCurrentBatch().BatchJobId;
        job.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferBatchExecuteParmToContract</Name>
				<Source><![CDATA[
    private void transferBatchExecuteParmToContract()
    {
        TaxGSTRReportRunContract_IN contract = this.getDataContractObject();
        if (contract)
        {
            if (isInBatchField && isInBatchField.value())
            {
                contract.parmBatchExecute(NoYes::Yes);
            }
            else
            {
                contract.parmBatchExecute(NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>