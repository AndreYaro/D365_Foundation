<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_RPayEmplPayList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Payment slip report.
/// </summary>
public class OXMLExcelReport_RPayEmplPayList extends XMLExcelReport_RU implements BatchRetryable
{
    ReportPeriod_RU payPeriod;
    RHRMEmplTable   emplTable;
    RPayTrans       rPayTrans;
    RPayParameters  rPayParameters;

    RHRMEmplId      emplId;
    RPayDayHour     daysTotal, hoursTotal;
    Counter         emplPageNum;
    RPayAmount      addSumTotal, deductionTotal,
                    dueTaxRedemption, sumOnHand, companyDebt, emplDebt;
    KeySum          paidTaxRedemptionKeySum;
    int             currentIndex, transNum;
    Map             countTransPerEmplMap;
    boolean         taxRedemptionTrans;

    QueryRun queryRun;

    #define.FileName('RPayEmplPayList')
    #define.WidthPage(116)

    #define.StateStart  (0)
    #define.StatePrint  (1)
    #define.StateEnd    (2)

    #define.NewPage("NewPage") //pseudo section used to define new page action
    #define.EmplHeader('EmplHeader')
    #define.EmplPageHeader('EmplPageHeader')
    #define.Header('Header')
    #define.Body('Body')
    #define.Total('Total')
    #define.DueTaxRedemptionSection('DueTaxRedemptionSection')
    #define.PaidTaxRedemptionSection('PaidTaxRedemptionSection')
    #define.CompanyDebtSection('CompanyDebtSection')
    #define.EmplDebtSection('EmplDebtSection')
    #define.Separator('Separator')

    #define.ReportName('ReportName')
    #define.EmplLabel('EmplLabel')
    #define.OrganizationLabel('OrganizationLabel')
    #define.PayPeriod('PayPeriod')
    #define.EmplId('EmplId')
    #define.EmplName('EmplName')
    #define.OrganizationId('OrganizationId')
    #define.OrganizationName('OrganizationName')

    #define.EmplPageNum('EmplPageNum')

    #define.PayCTypeColName('PayCTypeColName')
    #define.PayNameColName('PayNameColName')
    #define.SourceDateColName('SourceDateColName')
    #define.DaysColName('DaysColName')
    #define.HoursColName('HoursColName')
    #define.AddSumColName('AddSumColName')
    #define.DeductionColName('DeductionColName')

    #define.PayCType('PayCType')
    #define.PayName('PayName')
    #define.SourceDate('SourceDate')
    #define.Days('Days')
    #define.Hours('Hours')
    #define.AddSum('AddSum')
    #define.Deduction('Deduction')

    #define.TotalName('TotalName')
    #define.DaysTotal('DaysTotal')
    #define.HoursTotal('HoursTotal')
    #define.AddSumTotal('AddSumTotal')
    #define.DeductionTotal('DeductionTotal')

    #define.SumOnHandName('SumOnHandName')
    #define.SumOnHand('SumOnHand')

    #define.DueTaxRedemptionTxt('DueTaxRedemptionTxt')
    #define.PaidTaxRedemptionTxt('PaidTaxRedemptionTxt')

    #define.CompanyDebtName('CompanyDebtName')
    #define.CompanyDebt('CompanyDebt')

    #define.EmplDebtName('EmplDebtName')
    #define.EmplDebt('EmplDebt')

    int stateCurrent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allFooterSections</Name>
				<Source><![CDATA[
    private container allFooterSections()
    {
        return [#Total,
                #DueTaxRedemptionSection,
                #PaidTaxRedemptionSection,
                #CompanyDebtSection,
                #EmplDebtSection,
                #Separator];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(14.4)
        real height = #minHeight;

        switch (_bookmark)
        {
            case #Body:
                height = max(document.getNamedRangeHeightWrapped(#PayName, RPayTable::find(rPayTrans.PayCtype).Name),
                             #minHeight);
                break;
        }

        return height;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRedemptionAmounts</Name>
				<Source><![CDATA[
    private void calcRedemptionAmounts()
    {
        RPayTrans       payTrans;
        RPaySheetTrans  paySheetTrans;
        RPaySheetTable  paySheetTable;

        paidTaxRedemptionKeySum.reset();
        dueTaxRedemption = 0;

        select sum(Amount) from payTrans
            where payTrans.Emplid       == emplId &&
                  payTrans.PayPeriod    == payPeriod        &&
                  payTrans.TaxRedemption;

        dueTaxRedemption = payTrans.Amount;

        while select sum(Amount) from payTrans
            group by payPeriod
            where payTrans.Emplid == emplId &&
                  payTrans.TaxRedemption
        join TableId from paySheetTrans
            where paySheetTrans.RecID == payTrans.RefSheetTransRecid
        join TableId from paySheetTable
            where paySheetTable.RecId                   == paySheetTrans.sheetTableRecId &&
                    paySheetTable.PaySheetSost            == RPaySheetSost::Paid           &&
                    paySheetTable.BankPaymentTransDate    >= dateStartMth(payPeriod)       &&
                    paySheetTable.BankPaymentTransDate    <= dateEndMth(payPeriod)
        {
            paidTaxRedemptionKeySum.updateNow([payTrans.PayPeriod], payTrans.Amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    private void calcTotals()
    {
        this.calcRedemptionAmounts();

        sumOnHand   = addSumTotal - deductionTotal > 0 ? roundDown(addSumTotal - deductionTotal, rPayParameters.PaySheetRound) : 0 ;
        emplDebt    = addSumTotal - deductionTotal < 0 ? deductionTotal - addSumTotal : 0;
        companyDebt = addSumTotal - deductionTotal - sumOnHand > 0 ? addSumTotal - deductionTotal - sumOnHand : 0 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        boolean dataExists;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #WidthPage);

        this.setCountTransPerEmpl();

        while (queryRun.next())
        {
            if (!dataExists)
            {
                stateCurrent = #StateStart;
                dataExists = true;
            }

            emplTable = queryRun.get(tableNum(RHRMEmplTable));
            rPayTrans = queryRun.get(tableNum(RPayTrans));

            taxRedemptionTrans = rPayTrans.TaxRedemption == NoYes::Yes ? true : false;

            this.handleAction(this.defineActionSeq());
        }

        if (dataExists)
        {
            stateCurrent = #StateEnd;
            this.handleAction(this.defineActionSeq());
        }
        else
        {
            document.closeDocument(false);
            throw info("@GLS101555");
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
    private container defineActionSeq()
    {
        container   con;

        if (stateCurrent == #StateStart)
        {
            emplPageNum = 1;
            transNum = 1;
            con = this.defineEmplHeaderAction();

            if (!taxRedemptionTrans)
            {
                con += [#Body];
            }

            stateCurrent = #StatePrint;
            emplId = emplTable.EmployeeId;
        }
        else if (stateCurrent == #StatePrint)
        {
            if (emplId != emplTable.EmployeeId)
            {
                transNum = 1;
                this.calcTotals();
                emplPageNum = 1;
                con = this.defineEmplFooterAction();

                if (this.mustCreateNewPage(con))
                {
                    con = [#NewPage] + con;
                }

                this.handleAction(con);

                con=conNull();

                if (this.printEmployeeFromNewPage(rPayTrans.Emplid))
                {
                    con += [#NewPage];
                }

                con += this.defineEmplHeaderAction();

                if (!taxRedemptionTrans)
                {
                    con += [#Body];
                }

                emplId = emplTable.EmployeeId;
            }
            else
            {
                transNum ++;
                if (transNum == countTransPerEmplMap.lookup(rPayTrans.Emplid) &&
                    this.mustCreateNewPage([#Body] + this.allFooterSections()) ||
                    this.mustCreateNewPage([#Body]))
                {
                    emplPageNum++;
                    con = [#NewPage, #EmplPageHeader, #Header];
                }

                if (!taxRedemptionTrans)
                {
                    con += [#Body];
                }
            }
        }
        else if (stateCurrent == #StateEnd)
        {
            this.calcTotals();
            con = this.defineEmplFooterAction();
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineEmplFooterAction</Name>
				<Source><![CDATA[
    private container defineEmplFooterAction()
    {
        container   con;
        int         i;

        con = [#Total];

        if (dueTaxRedemption != 0)
        {
            con += [#DueTaxRedemptionSection];
        }

        currentIndex = 1;
        for (i = 1; i <= paidTaxRedemptionKeySum.numOfTrans(); i++)
        {
            con += [#PaidTaxRedemptionSection];
        }

        if (companyDebt > 0)
        {
            con += [#CompanyDebtSection];
        }

        if (emplDebt > 0)
        {
            con += [#EmplDebtSection];
        }

        con += [#Separator];

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineEmplHeaderAction</Name>
				<Source><![CDATA[
    private container defineEmplHeaderAction()
    {
        container con;

        con = [#EmplHeader, #Header];

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report body
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        RPayAmount addSum, deduction;

        if (RPayTable::find(rPayTrans.PayCtype).PayChargeType == RPayChargeType::AddSum)
        {
            addSum = rPayTrans.Amount;
        }
        else
        {
            deduction = rPayTrans.Amount * -1;
        }

        this.insertValueToSection(#PayCType, rPayTrans.PayCtype);
        this.insertValueToSection(#PayName, RPayTable::find(rPayTrans.PayCtype).Name);
        this.insertValueToSection(#SourceDate, rPayTrans.SourceDate);
        this.insertValueToSection(#Days, rPayTrans.QtyDay);
        this.insertValueToSection(#Hours, rPayTrans.QtyHour);
        this.insertValueToSection(#AddSum, addSum);
        this.insertValueToSection(#Deduction, deduction);

        daysTotal += rPayTrans.QtyDay;
        hoursTotal += rPayTrans.QtyHour;
        addSumTotal += addSum;
        deductionTotal += deduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCompanyDebt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Debt of the employer.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCompanyDebt()
    {
        this.insertValueToSection(#CompanyDebtName, "@RUP643");
        this.insertValueToSection(#CompanyDebt, companyDebt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #EmplHeader:
                this.fillEmplHeader();
                break;
            case #EmplPageHeader:
                this.fillEmplPageHeader();
                break;
            case #Header:
                this.fillHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Total:
                this.fillTotal();
                break;
            case #DueTaxRedemptionSection:
                this.fillDueTaxRedemption();
                break;
            case #PaidTaxRedemptionSection:
                this.fillPaidTaxRedemption();
                break;
            case #CompanyDebtSection:
                this.fillCompanyDebt();
                break;
            case #EmplDebtSection:
                this.fillEmplDebt();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDueTaxRedemption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills overly withheld income tax amount due to be paid.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDueTaxRedemption()
    {
        this.insertValueToSection(#DueTaxRedemptionTxt, strFmt("@RUP3146", payPeriod, dueTaxRedemption));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmplDebt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills debt of the employee.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillEmplDebt()
    {
        this.insertValueToSection(#EmplDebtName, "@RUP644");
        this.insertValueToSection(#EmplDebt, emplDebt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmplHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills header of the report with employee data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillEmplHeader()
    {
        RpayHRMOrganizationId   organizationId;
        organizationId = RPayHistory::getHistoryLineByDate(emplTable.EmployeeId, payPeriod).HrmOrganizationId;

        this.insertValueToSection(#ReportName, "@RUP207");
        this.insertValueToSection(#EmplLabel, "@SYS35880");
        this.insertValueToSection(#OrganizationLabel, "@GLS100681");
        this.insertValueToSection(#PayPeriod, payPeriod);
        this.insertValueToSection(#EmplId, emplTable.EmployeeId);
        this.insertValueToSection(#EmplName, emplTable.name());
        this.insertValueToSection(#OrganizationId, organizationId);
        this.insertValueToSection(#OrganizationName, RPayHRMOrganization::find(organizationId).Description);

        daysTotal = 0;
        hoursTotal = 0;
        addSumTotal = 0;
        deductionTotal = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmplPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header of the report with employee data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillEmplPageHeader()
    {
        this.insertValueToSection(#EmplPageNum, strFmt("@SYS24160", emplPageNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header with report column names.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillHeader()
    {
        this.insertValueToSection(#PayCTypeColName, "@RUP309");
        this.insertValueToSection(#PayNameColName, "@SYS7399");
        this.insertValueToSection(#SourceDateColName, "@RUP393");
        this.insertValueToSection(#DaysColName, "@RUP355");
        this.insertValueToSection(#HoursColName, "@GLS105378");
        this.insertValueToSection(#AddSumColName, "@RUP395");
        this.insertValueToSection(#DeductionColName, "@RUP396");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaidTaxRedemption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills overly withheld income tax amount has been paid.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPaidTaxRedemption()
    {
        RPayAmount amount;

        amount = paidTaxRedemptionKeySum.index2Data(currentIndex);
        this.insertValueToSection(
            #PaidTaxRedemptionTxt,
            strFmt("@RUP3147", conpeek(paidTaxRedemptionKeySum.index2Key(currentIndex), 1), amount));
        currentIndex ++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report totals.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTotal()
    {
        this.insertValueToSection(#TotalName, "@GLS100890");
        this.insertValueToSection(#DaysTotal, daysTotal);
        this.insertValueToSection(#HoursTotal, hoursTotal);
        this.insertValueToSection(#AddSumTotal, addSumTotal);
        this.insertValueToSection(#DeductionTotal, deductionTotal);

        this.insertValueToSection(#SumOnHandName, "@RUP642");
        this.insertValueToSection(#SumOnHand, sumOnHand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
    private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#EmplHeader);
        this.addSection(#EmplPageHeader);
        this.addSection(#Header);
        this.addSection(#Body, true);
        this.addSection(#Total);
        this.addSection(#DueTaxRedemptionSection);
        this.addSection(#PaidTaxRedemptionSection);
        this.addSection(#CompanyDebtSection);
        this.addSection(#EmplDebtSection);
        this.addSection(#Separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if new page must be started.
    /// </summary>
    /// <param name="_sections">
    /// The section name.
    /// </param>
    /// <returns>
    /// True if new page should be started. otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage(container _sections)
    {
        real        requiredHeight;
        int         i;

        for (i = 1; i <= conLen(_sections); i++)
        {
            if (conPeek(_sections, i) == #Body)
            {
                requiredHeight += this.getRangeHeight(conPeek(_sections, i));
            }
            else
            {
                requiredHeight += conPeek(mapSections.lookup(conPeek(_sections, i)), #posSectionHeight);
            }
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        paidTaxRedemptionKeySum = KeySum::construct(1, 1);
        rPayParameters     = RPayParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    private void newPage()
    {
        document.insertPageBreak(currentRow);
        currentHeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU parmPayPeriod(ReportPeriod_RU _payPeriod = payPeriod)
    {
        payPeriod = _payPeriod;

        return payPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEmployeeFromNewPage</Name>
				<Source><![CDATA[
    private boolean printEmployeeFromNewPage(RHRMEmplId _emplId)
    {
        boolean     ret;
        container   con;
        int         i;

        con += this.defineEmplHeaderAction();

        for (i = 1; i <= countTransPerEmplMap.lookup(_emplId); i++)
        {
            con += [#Body];
        }

        con += this.allFooterSections();

        if (this.mustCreateNewPage(con))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCountTransPerEmpl</Name>
				<Source><![CDATA[
    private void setCountTransPerEmpl()
    {
        QueryRun                queryRunLoc = new QueryRun(queryRun.pack());
        Query                   query = queryRunLoc.query();
        QueryBuildDataSource    qbds;
        RPayTrans               rPayTransLoc;

        countTransPerEmplMap = new Map(Types::String, Types::Integer);

        qbds = query.dataSourceTable(tableNum(RHRMEmplTable));
        qbds.clearSortIndex();
        qbds.sortClear();
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldNum(RHRMEmplTable, EmployeeId));

        qbds = query.dataSourceTable(tableNum(RPayTrans));
        qbds.clearSortIndex();
        qbds.sortClear();
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSelectionField(fieldNum(rPayTrans, RecId), SelectionField::Count);
        qbds.addSortField(fieldNum(RPayTrans, EmplId));

        while (queryRunLoc.next())
        {
            rPayTransLoc = queryRunLoc.get(tableNum(RPayTrans));
            countTransPerEmplMap.insert(rPayTransLoc.Emplid, rPayTransLoc.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>QueryRun</c> objects to use.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c>
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setQueryRun(QueryRun _queryRun)
    {
        queryRun = _queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayEmplPayList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.ColsInTable(7)
    #define.Other(28)
    protected Counter totalCells()
    {
        return SysQuery::countLoops(queryRun) * #ColsInTable + #Other;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_RPayEmplPayList construct()
    {
        return new OXMLExcelReport_RPayEmplPayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>