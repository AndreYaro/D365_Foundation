<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCalculate_Tbl</Name>
	<SourceCode>
		<Declaration><![CDATA[
#RpayTblConstants
final class RPayCalculate_Tbl extends RPayCalculate
{
    RPayTblTrans payTblTrans;
    RPayQty      qtyDay,qtyHour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_RealDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayQty calc_RealDays()
    {
        payTblTrans = sourceTable;

        qtyDay = payTblTrans.transDayHour(RPayDayHourCalc::Day,
                                          payCounterCalcTable.NumFrom,
                                          true);

        return qtyDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RealDaysGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayQty calc_RealDaysGroup()
    {
        payTblTrans = sourceTable;

        qtyDay =  payTblTrans.transDayHourGroup(RpayDayHourCalc::Day,
                                                payCounterCalcTable.NumFrom,
                                                true);
        return qtyDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RealHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayQty calc_RealHours()
    {
        payTblTrans = sourceTable;

        qtyHour = payTblTrans.transDayHour(RPayDayHourCalc::Hour,
                                           payCounterCalcTable.NumFrom,
                                           true);
        return qtyHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RealHoursGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayQty calc_RealHoursGroup()
    {
        payTblTrans = sourceTable;

        qtyHour =  payTblTrans.transDayHourGroup(RpayDayHourCalc::Hour,
                                                 payCounterCalcTable.NumFrom,
                                                 true);
        return qtyHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RealRate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayRateValue calc_RealRate()
    {
        payTblTrans = sourceTable;
        return payTblTrans.Stavka[str2int(payCounterCalcTable.NumFrom)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RegDays</Name>
				<Source><![CDATA[
    protected real calc_RegDays()
    {
        payTblTrans = sourceTable;
        return RPayCalendarTable::mthWorkDays(payTblTrans.PayCalendarId,
                                              payTblTrans.SourceDate,
                                              payCounterCalcTable.NumFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RegDaysGroup</Name>
				<Source><![CDATA[
    protected real calc_RegDaysGroup()
    {
        payTblTrans = sourceTable;
        return RPayCalendarTable::mthWorkDaysTimeGroup(payTblTrans.PayCalendarId,
                                                       payTblTrans.SourceDate,
                                                       payCounterCalcTable.NumFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RegHours</Name>
				<Source><![CDATA[
    protected real calc_RegHours()
    {
        payTblTrans = sourceTable;
        return RPayCalendarTable::mthWorkHours(payTblTrans.PayCalendarId,
                                               payTblTrans.SourceDate,
                                               payCounterCalcTable.NumFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RegHoursGroup</Name>
				<Source><![CDATA[
    protected real calc_RegHoursGroup()
    {
        payTblTrans = sourceTable;
        return RPayCalendarTable::mthWorkHoursTimeGroup(payTblTrans.PayCalendarId,
                                                        payTblTrans.SourceDate,
                                                        payCounterCalcTable.NumFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    public void calcCommon(RPaySequence _paySequence  = 0,
                           NoYes        _errorMessage = NoYes::No)
    {
        RPayTblTimeTable    payTblTimeTable;
        RPayModuleTable     payModuleTableLocal;
        RPayCalculate       payCalculate;

        payTblTrans = sourceTable;

        if (needCheckModuleCalculate)
        {
            if (! this.canModuleCalculate())
            {
                throw info("@RUP387");
            }
        }

        this.checkPostingProfiles(true);

        if (emplTable.checkEmplBeforeCalc(payTblTrans.SourceDate, _errorMessage))
        {
            this.initTransDate(emplTable.EmployeeId);

            while select paySeqTable
                where paySeqTable.PayModuleCode == payModuleTable.PayModuleCode &&
                      (paySeqTable.Scanning == _paySequence                     ||
                       (_paySequence ? false : true))
            exists join payTblTimeTable
                where payTblTimeTable.PayFormType == RPayTblJournal::find(payTblTrans.PayTblNum).PayFormType &&
                      payTblTimeTable.PaySequence == paySeqTable.Scanning
            {
                this.calcSequence();
            }
        }

        if (payTblTrans.CorrectedPeriod != payPeriod)
        {
            while select payModuleTableLocal
                where payModuleTableLocal.configurationKeyId == 0 &&
                      payModuleTableLocal.PayModuleSost      != RPayModuleSost::UnUse
            {
                payCalculate = payModuleTableLocal.payCalculate();
                payCalculate.payPeriod(payPeriod);
                payCalculate.correctedPeriod(payTblTrans.CorrectedPeriod);
                payCalculate.calcEmpl(emplTable.EmployeeId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    public void calcEmpl(RHRMEmplId _emplId,RPaySequence _paySequence=0)
    {
        QueryBuildDataSource qbd;
        QueryBuildRange      qbr;
        RPayTblTrans         payTblTransLocal;
        RPayCalculate        payCalculate;
        RPayModuleTable      payModuleTableLocal;
        int                  i;
        int                  dsCount = queryRun.query().dataSourceCount();

        setprefix(payModuleTable.PayModuleName);
        needCheckModuleCalculate = false;

        this.payPeriod(RPayParameters::payPeriod(_emplId));

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            this.deletePayTrans(_emplId);

            ttscommit;
        }

        for (i = 1; i <= dsCount ; i ++)
        {
            queryRun.query().dataSourceNo(i).clearRanges();
        }

        qbd = queryRun.query().dataSourceTable(tablenum(RPayTblJournal));
        qbr = qbd.addRange(fieldnum(RPayTblJournal,TblDate));
        qbr.value(queryValue(payPeriod));

        qbd = queryRun.query().dataSourceTable(tablenum(RPayTblTrans));
        qbr = qbd.addRange(fieldnum(RPayTblTrans,EmplId));
        qbr.value(queryValue(_emplId));

        while (queryRun.next())
        {
            payTblTransLocal = queryRun.get(tablenum(RPayTblTrans));
            if (payTblTransLocal.EmplId)
            {
                this.setSourceTable(payTblTransLocal);
                this.calcCommon(_paySequence,NoYes::Yes);

                if (payTblTransLocal.CorrectedPeriod != payPeriod)
                {
                    while select payModuleTableLocal
                        where payModuleTableLocal.configurationKeyId == 0 &&
                              payModuleTableLocal.PayModuleSost      != RPayModuleSost::UnUse
                    {
                        payCalculate = payModuleTableLocal.payCalculate();
                        payCalculate.payPeriod(payPeriod);
                        payCalculate.correctedPeriod(payTblTransLocal.CorrectedPeriod);
                        payCalculate.calcEmpl(_emplId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriod</Name>
				<Source><![CDATA[
    protected ReportPeriod_RU calcPeriod()
    {
        return payTblTrans.CorrectedPeriod ? payTblTrans.CorrectedPeriod : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuery</Name>
				<Source><![CDATA[
    public void calcQuery(RPaySequence _paySequence=0)
    {
        QueryBuildDataSource qbd;
        QueryBuildRange      qbr;
        int                  current;
        int                  dsCount = queryRun.query().dataSourceCount();

        qbd = queryRun.query().dataSourceTable(tablenum(RPayTblJournal));
        if (queryRun.interactive())
        {
             qbr = qbd.rangeField(fieldnum(RPayTblJournal,TblDate));
             qbr.status(RangeStatus::Locked);
        }
        else
        {
            for (current = 1; current <= dsCount ; current ++)
            {
                queryRun.query().dataSourceNo(current).clearRanges();
            }
            current = 0;
            qbr = qbd.addRange(fieldnum(RPayTblJournal,TblDate));
        }

        qbr.value(queryValue(payPeriod));
        super(_paySequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePayTrans</Name>
				<Source><![CDATA[
    protected void deletePayTrans(RHRMEmplId _emplId = '')
    {
        RPayEmplParameters      emplParameters;

        if (_emplId)
        {
            delete_from payTrans
                where payTrans.PayPeriod     == payPeriod                    &&
                      payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                      payTrans.SourceTableId                                 &&
                      payTrans.SourceRecId                                   &&
                      payTrans.EmplId        == _emplId                      &&
                      payTrans.PayPeriod     >= payTrans.CorrectedPeriod;
        }
        else
        {
            delete_from payTrans
                    where payTrans.PayPeriod     == payPeriod                    &&
                          payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                          payTrans.SourceTableId                                 &&
                          payTrans.SourceRecId                                   &&
                          payTrans.PayPeriod     >= payTrans.CorrectedPeriod
                notexists join emplParameters
                    where emplParameters.EmplId  == payTrans.EmplId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    protected void initPayTransValue()
    {
        RPayTitlePosting        rPayTitlePosting;
        RPayCostType            rPayCostType          = payModuleControl.payCounterCalcTable().payCounterTable().Output;
        RPayHRMOrganizationId   rPayHRMOrganizationId = RPayTblJournal::find(payTblTrans.PayTblNum).HrmOrganizationId;

        rPayTitlePosting = RPayTitlePosting::findAccount(RPayParameters::find().AccountPostingProfile,
                                                         rPayCostType,
                                                         emplTable.EmployeeId,
                                                         rPayHRMOrganizationId,
                                                         payTblTrans.HcmTitle);

        payTrans.setLedgerDimension(rPayTitlePosting.AccountType,
                                    rPayTitlePosting.LedgerDimension,
                                    rPaytitleposting.DefaultDimension,
                                    emplTable.EmployeeId);

        rPayTitlePosting = RPayTitlePosting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                         rPayCostType,
                                                         emplTable.EmployeeId,
                                                         rPayHRMOrganizationId,
                                                         payTblTrans.HcmTitle);

        payTrans.setOffsetLedgerDimension(rPayTitlePosting.AccountType,
                                         rPayTitlePosting.LedgerDimension,
                                         rPaytitleposting.DefaultDimension,
                                         emplTable.EmployeeId);

        super();
        payTrans.HrmOrganisationId = rPayHRMOrganizationId;
        payTrans.SourceDate        = payTblTrans.SourceDate;
        payTrans.QtyHour           = qtyHour;
        payTrans.QtyDay            = qtyDay;
        payTrans.CorrectedPeriod   = payTblTrans.CorrectedPeriod;
        payTrans.PayPeriod         = payPeriod;
        qtyHour                    = 0;
        qtyDay                     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplTable</Name>
				<Source><![CDATA[
    protected void setEmplTable(Common _common)
    {
        RPayTblTrans payTblTransLocal;

        payTblTransLocal = _common.data();
        emplTable = RHRMEmplTable::find(payTblTransLocal.EmplId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>