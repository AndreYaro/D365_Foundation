<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportERDestination_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

internal final class TaxReportERDestination_IT implements ERIFileDestination
{
    private ERIFileDestination originDestination;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFileStream</Name>
				<Source><![CDATA[
    public System.IO.Stream newFileStream(System.String _fileName)
    {
        return originDestination.newFileStream(_fileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFile</Name>
				<Source><![CDATA[
    public System.IO.Stream saveFile(System.IO.Stream _stream, System.String _fileName)
    {
        TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::current();
        TaxReportERContract_IT taxReportERContract = taxReportERContext ? taxReportERContext.parmTaxReportERContract_IT() : null;

        if (taxReportERContext && taxReportERContract && taxReportERContract.parmUpdateNumberOfPages())
        {
            Set updatedTaxBookIds = new Set(Types::String);
            TaxReportPeriod taxReportPeriod = TaxReportPeriod::find(taxReportERContract.parmTaxPeriod(), taxReportERContract.parmFromDate());
            NoYes printBlankPage = TaxAuthorityAddress::find(TaxPeriodHead::find(taxReportPeriod.TaxPeriod).TaxAuthority).PrintBlankPage;

            if (!taxReportPeriod)
            {
                throw error(strFmt("@VatDueDate:PeriodIntervalForTheDateDoesNotExist",
                    date2StrUsr(taxReportERContract.parmFromDate(), DateFlags::FormatAll), taxReportERContract.parmTaxPeriod()));
            }

            using (System.IO.Compression.ZipArchive zipArchive = new System.IO.Compression.ZipArchive(_stream, System.IO.Compression.ZipArchiveMode::Read, true))
            {
                var entriesEnumerator = zipArchive.get_Entries().GetEnumerator();

                while (entriesEnumerator.MoveNext())
                {
                    System.String pdfFileName = entriesEnumerator.get_Current().Name;
                    container pdfFileNameSplit = fileNameSplit(pdfFileName);

                    if (!pdfFileName.EndsWith('.pdf', System.StringComparison::OrdinalIgnoreCase))
                    {
                        throw error(strFmt("@ExtendedItallianLocalization:UnexpectedFileExtension",
                            'pdf',
                            conpeek(pdfFileNameSplit, 3)));
                    }

                    TaxBookId taxBookId = conpeek(pdfFileNameSplit, 2);
                    boolean updateNumberOfPagesForTaxBook = (taxBookId != taxReportERContract.parmTaxBookIdSkipUpdateNumberOfPages());

                    using (System.IO.MemoryStream pdfFileStream = new System.IO.MemoryStream())
                    {
                        entriesEnumerator.get_Current().Open().CopyTo(pdfFileStream);
                        Integer pageQty;

                        if (updateNumberOfPagesForTaxBook)
                        {
                            pdfFileStream.Position = 0;
                            System.IO.StreamReader streamReader = new System.IO.StreamReader(pdfFileStream);
                            System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@'/Type\s*/Page[^s]');
                            System.Text.RegularExpressions.MatchCollection matchCollection = regex.Matches(streamReader.ReadToEnd());
                            pageQty = matchCollection.Count;
                        }

                        ttsbegin;

                        if (updateNumberOfPagesForTaxBook)
                        {
                            TaxBookStatus::calcAndSetLastPageNo(
                                taxReportPeriod,
                                taxBookId,
                                pageQty);
                        }

                        TaxBookStatus taxBookStatus = TaxBookStatus::findByPeriodDateBookId(
                            taxReportPeriod.TaxPeriod,
                            taxReportPeriod.FromDate,
                            taxReportPeriod.ToDate,
                            TaxBook::findByTaxBookId(taxBookId).RecId,
                            true);

                        if (taxBookStatus)
                        {
                            if (updateNumberOfPagesForTaxBook)
                            {
                                TaxBook taxBook = TaxBook::find(taxBookStatus.TaxBook);
                                taxBookStatus.PrintBlankPage = printBlankPage;
                                taxBookStatus.IncludeZeroLines_IT = taxBook.IncludeZeroLines_IT;
                                taxBookStatus.IncludeReverseTrans_IT = taxBook.IncludeReverseTrans_IT;
                                taxBookStatus.PrintoutStatus = TaxBookPrintoutStatus::Generated;
                                taxBookStatus.update();
                                updatedTaxBookIds.add(taxBook ? taxBook.TaxBookId : TaxReportERHelper_IT::separateTaxSummaryTaxBookId());
                            }

                            if (TaxPeriodHead::find(taxReportPeriod.TaxPeriod).AttachReportToSalesTaxBookStatus_IT)
                            {
                                ERObjectsFactory::createDocuManagement().insertFileWithOtherDocuType(
                                    taxBookStatus, pdfFileStream, pdfFileName, pdfFileName);
                            }
                        }

                        ttscommit;
                    }
                }
            }

            ttsbegin;

            Set emptyTaxBookIds = Set::difference(taxReportERContract.parmIncludedTaxBookIds(), updatedTaxBookIds);
            SetEnumerator se = emptyTaxBookIds.getEnumerator();
            while (se.moveNext())
            {
                TaxBook taxBook = TaxBook::findByTaxBookId(se.current());

                TaxBookStatus taxBookStatus = TaxBookStatus::findByPeriodDateBookId(
                    taxReportPeriod.TaxPeriod,
                    taxReportPeriod.FromDate,
                    taxReportPeriod.ToDate,
                    taxBook.RecId,
                    true);

                if (taxBookStatus)
                {
                    taxBookStatus.PrintBlankPage = printBlankPage;
                    taxBookStatus.IncludeZeroLines_IT = taxBook.IncludeZeroLines_IT;
                    taxBookStatus.IncludeReverseTrans_IT = taxBook.IncludeReverseTrans_IT;
                    taxBookStatus.PrintoutStatus = TaxBookPrintoutStatus::Empty;
                    taxBookStatus.update();
                }
            }

            ttscommit;

            TaxBookStatus::updatePageNumbers(taxReportPeriod);
        }

        originDestination.saveFile(_stream, _fileName);

        return _stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxReportERDestination_IT construct(ERIFileDestination _originDestination)
    {
        if (!_originDestination)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return new TaxReportERDestination_IT(_originDestination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ERIFileDestination _originDestination)
    {
        originDestination = _originDestination;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>