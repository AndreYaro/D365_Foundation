<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAccountDetailHistoryUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAccountDetailHistoryUIBuilder</c> builds the layout for the report dialog, that was not achievable from the contract class.
/// </summary>
class BudgetAccountDetailHistoryUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField budgetCycleField;
    DialogField periodStartDateField;
    DialogField periodEndDateField;
    DialogField budgetCycleTimeSpanField;
    DialogGroup budgetCycleGroup;
    DialogGroup viewByGroup;
    DialogGroup fiscalPeriodGroup;
    RefRecId    budgetCycleTimeSpanRecId;
    Args        budgetCycleTimeSpanLookupArgs;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetCycleTimeSpanModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event of the budget cycle time span control.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanControl">
    /// The budget cycle time span control for which the modified event needs to be handled.
    /// </param>
    /// <returns>
    /// true when the time span is modified. Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean budgetCycleTimeSpanModified(FormStringControl _budgetCycleTimeSpanControl)
    {
        return this.modifyBudgetCycleTimeSpan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetCycleTimeSpanValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the budget cycle time span field.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanControl">
    /// The budget cycle time span control which need to be validated.
    /// </param>
    /// <returns>
    /// true when the budget cycle time name is valid. Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean budgetCycleTimeSpanValidate(FormStringControl _budgetCycleTimeSpanControl)
    {
        return this.validateBudgetCycleTimeSpan(_budgetCycleTimeSpanControl.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the layout for the report dialog.
    /// </summary>
    public void build()
    {
        FormBuildGroupControl               viewByGroupControl;
        Dialog                              dialogLocal = this.dialog();
        DialogField                         budgetDimensionFocusField;
        DialogField                         includeCarryforwardField;
        DialogField                         startMainAccountFocusField;
        DialogField                         endMainAccountFocusField;
        DialogGroup                         mainAccountGroup;
        BudgetAccountDetailHistoryContract  rdpContract = this.dataContractObject();

        // Add the dimension focus field.
        budgetDimensionFocusField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmBudgetDimensionFocus), rdpContract);
        budgetDimensionFocusField.lookupButton(2);

        // Add the budget model ID field.
        budgetCycleTimeSpanField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmBudgetModel), rdpContract);
        budgetCycleTimeSpanField.lookupButton(2);

        // Add the budget cycle time span field.
        budgetCycleTimeSpanField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmBudgetCycleTimeSpanName), rdpContract);
        budgetCycleTimeSpanField.lookupButton(2);

        // Add the include carryforward field.
        includeCarryforwardField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmIncludeCarryForward), rdpContract);

        // Add the Dates to include form group.
        viewByGroup = dialogLocal.addGroup("@SPS1087");
        viewByGroupControl = viewByGroup.control();
        viewByGroupControl.enabled(false);

        // Add the budget cycle group to the dates to include form group and set the frameoption type to be Radio.
        budgetCycleGroup = dialogLocal.addGroup("@SPS1088", viewByGroup);
        budgetCycleGroup.frameOptionButton(FormFrameOptionButton::Radio);

        // Add the budget cycle field to the budget cycle group.
        budgetCycleField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmBudgetCycleName), rdpContract);
        budgetCycleField.lookupButton(2);
        budgetCycleField.showLabel(false);

        // Add the date range group to the dates to include form group and set the frameoption type to be Radio.
        fiscalPeriodGroup = dialogLocal.addGroup("@SPS1089", viewByGroup);
        fiscalPeriodGroup.frameOptionButton(FormFrameOptionButton::Radio);

        // Add the start date and end date fields to the date range group.
        periodStartDateField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmBudgetFiscalPeriodStart), rdpContract);
        periodEndDateField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmBudgetFiscalPeriodEnd), rdpContract);

        mainAccountGroup = dialogLocal.addGroup("@SPS1090");
        startMainAccountFocusField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmFromAccount), rdpContract);
        endMainAccountFocusField = this.addDialogField(methodStr(BudgetAccountDetailHistoryContract, parmToAccount), rdpContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to set values to the <c>BudgetAccountDetailHistoryContract</c> class
    /// parameters before running the report.
    /// </summary>
    public void getFromDialog()
    {
        BudgetAccountDetailHistoryContract  rdpContract = this.dataContractObject();
        FormGroupControl                    budgetCyclegroupControl;
        BudgetControlStatisticsPeriodOption budgetPeriodType;

        super();

        // Since the time span record id is a hidden parameter we have to set it explicitly.
        rdpContract.parmBudgetCycleTimeSpanRecId(budgetCycleTimeSpanRecId);

        budgetCyclegroupControl = budgetCycleGroup.control();

        if (budgetCyclegroupControl.optionValue() == true)
        {
            budgetPeriodType = BudgetControlStatisticsPeriodOption::BudgetCycle;
        }
        else
        {
            budgetPeriodType = BudgetControlStatisticsPeriodOption::FiscalPeriod;
        }

        // Since the period type is a hidden parameter we have to set it explicitly.
        rdpContract.parmBudgetPeriodType(budgetPeriodType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form with the values from the previous report run.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initializeFields()
    {
        BudgetAccountDetailHistoryContract rdpContract = this.dataContractObject();

        budgetCycleTimeSpanRecId = rdpContract.parmBudgetCycleTimeSpanRecId();

        this.initViewByGroupEnabled();

        if (rdpContract.parmBudgetPeriodType() == BudgetControlStatisticsPeriodOption::FiscalPeriod)
        {
            // When the previous report run has date values.
            fiscalPeriodGroup.optionValue(1);
            budgetCycleGroup.optionValue(0);
        }
        else
        {
            // When the previous report run has a cycle value.
            budgetCycleGroup.optionValue(1);
            fiscalPeriodGroup.optionValue(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the budget cycle field.
    /// </summary>
    /// <param name="_budgetCycleControl">
    /// The <c>FormStringControl</c> for which the lookup fields need to be associated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupBudgetCycle(FormStringControl _budgetCycleControl)
    {
        FormRun budgetCycleFormLookup;
        Args    budgetCycleLookupArgs;

        budgetCycleLookupArgs = new Args(formStr(BudgetCycleLookup));
        budgetCycleLookupArgs.caller(_budgetCycleControl);
        budgetCycleLookupArgs.parmEnum(NoYes::Yes);
        budgetCycleLookupArgs.record(BudgetCycleTimeSpan::find(budgetCycleTimeSpanRecId));

        budgetCycleFormLookup = ClassFactory::formRunClassOnClient(budgetCycleLookupArgs);

        budgetCycleFormLookup.init();

        _budgetCycleControl.performFormLookup(budgetCycleFormLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the budget cycle time span field.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanControl">
    /// The <c>FormStringControl</c> for which the lookup fields need to be associated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupBudgetCycleTimeSpan(FormStringControl _budgetCycleTimeSpanControl)
    {
        FormRun budgetCycleTimeSpanFormLookup;

        budgetCycleTimeSpanLookupArgs = new Args(formStr(BudgetCycleTimeSpanLookup));
        budgetCycleTimeSpanLookupArgs.caller(_budgetCycleTimeSpanControl);
        budgetCycleTimeSpanLookupArgs.parmEnum(NoYes::Yes);
        budgetCycleTimeSpanLookupArgs.record(BudgetCycleTimeSpan::find(budgetCycleTimeSpanRecId));

        budgetCycleTimeSpanFormLookup = ClassFactory::formRunClassOnClient(budgetCycleTimeSpanLookupArgs);
        budgetCycleTimeSpanFormLookup.init();

        _budgetCycleTimeSpanControl.performFormLookup(budgetCycleTimeSpanFormLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the budget model field.
    /// </summary>
    /// <param name="_budgetModelControl">
    /// The <c>FormStringControl</c> for which the lookup fields need to be associated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupBudgetModel(FormStringControl _budgetModelControl)
    {
        BudgetModel::lookupBudgetModel(_budgetModelControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionFocus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a dimension set lookup.
    /// </summary>
    /// <param name="_dimensionFocusControl">
    ///    The dimension set control.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupDimensionFocus(FormStringControl _dimensionFocusControl)
    {
        DimensionHierarchyHelper::lookupDimensionSet(_dimensionFocusControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the budget model ID focus field.
    /// </summary>
    /// <param name="_mainAccountControl">
    /// The <c>FormStringControl</c> for which the lookup fields need to be associated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupMainAccount(FormStringControl _mainAccountControl)
    {
        MainAccount::lookupBudgetMainAccounts(_mainAccountControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the budget cycle time span value based on the value selected from the lookup.
    /// since the call to super cannot be made, the value gets modified only after executing this method.
    /// </summary>
    /// <returns>
    /// true when the time span is modified. Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifyBudgetCycleTimeSpan()
    {
        BudgetCycleTimeSpan budgetCycleTimeSpan;
        boolean ret = true;

        budgetCycleTimeSpan = null;

        if (budgetCycleTimeSpanLookupArgs != null &&
                budgetCycleTimeSpanLookupArgs.dataset() == tableNum(BudgetCycleTimeSpan) &&
                budgetCycleTimeSpanLookupArgs.record() != null)
        {
           budgetCycleTimeSpan = budgetCycleTimeSpanLookupArgs.record() as BudgetCycleTimeSpan;
           budgetCycleTimeSpanRecId = budgetCycleTimeSpan.RecId;
           budgetCycleTimeSpanField.value(BudgetCycleTimeSpan::find(budgetCycleTimeSpanRecId).Name);
           budgetCycleTimeSpanLookupArgs.record(null);
        }

        this.setViewByGroupEnabled();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to initialize the dialog fields after the fields are build.
    /// </summary>
    public void postBuild()
    {
        super();

        this.initializeFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method registers the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog      dialogLocal = this.dialog();
        DialogField dialogField;

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // Override the methods of dimension focus field.
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(BudgetAccountDetailHistoryContract, parmBudgetDimensionFocus));
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(BudgetAccountDetailHistoryUIBuilder,  lookupDimensionFocus), this);

        // Override the methods of budget cycle time span field.
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(BudgetAccountDetailHistoryContract, parmBudgetCycleTimeSpanName));
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(BudgetAccountDetailHistoryUIBuilder, lookupBudgetCycleTimeSpan), this);
        dialogField.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(BudgetAccountDetailHistoryUIBuilder, budgetCycleTimeSpanValidate), this);
        dialogField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(BudgetAccountDetailHistoryUIBuilder, budgetCycleTimeSpanModified), this);

        // Override the methods of budget cycle field.
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(BudgetAccountDetailHistoryContract, parmBudgetCycleName));
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(BudgetAccountDetailHistoryUIBuilder, lookupBudgetCycle), this);

        // Override the methods of budget model field.
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(BudgetAccountDetailHistoryContract, parmBudgetModel));
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(BudgetAccountDetailHistoryUIBuilder, lookupBudgetModel), this);

        // Override the methods of budget start main account fields.
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(BudgetAccountDetailHistoryContract, parmFromAccount));
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(BudgetAccountDetailHistoryUIBuilder, lookupMainAccount), this);

        // Override the methods of budget end main account fields.
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(BudgetAccountDetailHistoryContract, parmToAccount));
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(BudgetAccountDetailHistoryUIBuilder, lookupMainAccount), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewByGroupEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the view by group field and its child fields.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initViewByGroupEnabled()
    {
        FormBuildGroupControl   viewByGroupControl;
        FormBuildStringControl  budgetCycleControl;
        FormBuildDateControl    dateControl;

        viewByGroupControl = viewByGroup.control();

        if (budgetCycleTimeSpanRecId == 0)
        {
            viewByGroupControl.enabled(false);

            budgetCycleControl = budgetCycleField.control();
            budgetCycleControl.text('');

            dateControl = periodStartDateField.control();
            dateControl.dateValue(dateNull());

            dateControl = periodEndDateField.control();
            dateControl.dateValue(dateNull());
        }
        else
        {
            viewByGroupControl.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setViewByGroupEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the state of the view by group field and its child fields.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setViewByGroupEnabled()
    {
        FormGroupControl    viewByGroupControl;
        FormStringControl   budgetCycleControl;
        FormDateControl     dateControl;

        viewByGroupControl = viewByGroup.control();

        if (budgetCycleTimeSpanRecId == 0)
        {
            viewByGroupControl.enabled(false);

            budgetCycleControl = budgetCycleField.control();
            budgetCycleControl.text('');

            dateControl = periodStartDateField.control();
            dateControl.dateValue(dateNull());

            dateControl = periodEndDateField.control();
            dateControl.dateValue(dateNull());
        }
        else
        {
            viewByGroupControl.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the budget cycle time span name.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanName">
    /// The budget cycle time name which need to be validated.
    /// </param>
    /// <returns>
    /// true when the budget cycle time name is valid. Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateBudgetCycleTimeSpan(BudgetCycleTimeSpanName _budgetCycleTimeSpanName)
    {
        BudgetCycleTimeSpan budgetCycleTimeSpan;
        boolean ret = true;
        boolean isValid = true;
        budgetCycleTimeSpan = null;
        budgetCycleTimeSpanRecId = 0;

        while select RecId
            from budgetCycleTimeSpan
            where budgetCycleTimeSpan.Name == _budgetCycleTimeSpanName
        {
            if (isValid)
            {
                budgetCycleTimeSpanRecId = budgetCycleTimeSpan.RecId;
                isValid = false;
            }
            else
            {
                ret = checkFailed(strFmt("@SYS316757", tablePName(BudgetCycleTimeSpan)));
                budgetCycleTimeSpanRecId = 0;
                break;
            }
        }

        if (ret && _budgetCycleTimeSpanName != '' && budgetCycleTimeSpanRecId == 0)
        {
            // BudgetCycle with the name the user entered was not found.
            ret = checkFailed(strFmt("@SYS304909", _budgetCycleTimeSpanName, fieldPName(BudgetCycleTimeSpan, Name), tablePName(BudgetCycleTimeSpan)));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>