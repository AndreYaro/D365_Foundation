<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendEUVatInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendEUVatInvoiceController</c> class handles the business logic for the
/// <c>VendEUVatInvoice</c> report.
/// </summary>
class VendEUVatInvoiceController extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'ES-00019';

    VendInvoiceJour vendInvoiceJour;
    FormletterProformaPrint formletterProformaPrint;
    SRSPrintDestinationSettings printDestinationSetting;
    boolean copy;
    PurchInvoiceJournalPrint purchInvoiceJournalPrint;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the dialog when the report viewer form is not shown for print management.
    /// </summary>
    /// <remarks>
    /// This method is overridden to let the user view multiple copies of the same report under print
    /// management settings.
    /// </remarks>
    protected void dialogClose()
    {
        if (!useReportViewerForm)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detaches the form after the report viewer is shown.
    /// </summary>
    /// <remarks>
    /// This method lets the user show multiple report viewers.
    /// </remarks>
    protected void dialogShow()
    {
        SysOperationDialog sysOperationDialog;
        FormRun formRun;

        if (useReportViewerForm)
        {
            sysOperationDialog = dialog as SysOperationDialog;
            sysOperationDialog.run();

            formRun = sysOperationDialog.formRun();
            formRun.detach();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected boolean init()
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        boolean ret = true;
        TaxSpec taxSpec;
        container printerSetting;

        copy = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchInvoiceJournalPrint)) // purchInvoiceJournalPrint is used for approvals as well.
        {
            purchInvoiceJournalPrint = this.parmArgs().caller();
        }

        if (purchInvoiceJournalPrint && purchInvoiceJournalPrint.parmProforma())
        {
            formletterProformaPrint = FormletterProformaPrint::newUnpack(purchInvoiceJournalPrint.parmFormletterProformaPrintPacked());
        }

        if (!copy)
        {
            printerSetting = purchInvoiceJournalPrint.parmPrinterSettingsEuVatInvoice();
            if (conLen(printerSetting) > 0)
            {
                printDestinationSetting = new SRSPrintDestinationSettings();
                printDestinationSetting.unpack(printerSetting);
            }
        }

        vendInvoiceJour = this.parmArgs().record();

        if (!vendInvoiceJour)
        {
            ret = checkFailed("@SYS26348");
        }

        setPrefix(strFmt("@SYS27357", vendInvoiceJour.PurchId));

        if (!IntrastatCountryRegionParameters::isCountryRegionStateInEU(vendInvoiceJour.vendTable_InvoiceAccount().postalAddress()))
        {
            ret = checkFailed(strFmt("@SYS21353", vendInvoiceJour.vendTable_InvoiceAccount().postalAddress().CountryRegionId));
        }

        if (vendInvoiceJour.isProforma())
        {
            taxSpec = TaxSpec::construct('', naDate(), vendInvoiceJour.RecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans());
        }
        else
        {
            taxSpec = TaxSpec::construct(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate, vendInvoiceJour.RecId);
        }

        if (VendParameters::find().IntracomVAT)
        {
            taxSpec.setIntracomVATInvoice(NoYes::Yes);
        }

        if (!taxSpec.parmTaxSpec())
        {
            ret = checkFailed("@SYS55252");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SRSTmpDataStore srsTmpDataStore;
        VendEUVatInvoiceContract vendEUVatInvoiceContract = this.parmReportContract().parmRdpContract();

        // If some print settings came from the purchase invoice print management dialog
        if (printDestinationSetting)
        {
            this.parmReportContract().parmPrintSettings(printDestinationSetting);
        }

        vendEUVatInvoiceContract.parmCopy(copy);
        vendEUVatInvoiceContract.parmRecordId(vendInvoiceJour.RecId);

        if (formletterProformaPrint)
        {
            srsTmpDataStore.Value = formletterProformaPrint.pack();
            srsTmpDataStore.insert();
            vendEUVatInvoiceContract.parmFormletterProformaPrintRecId(srsTmpDataStore.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>tmpTaxWorkTrans</c> table.
    /// </summary>
    /// <returns>
    /// The <c>tmpTaxWorkTrans</c> table.
    /// </returns>
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (vendInvoiceJour.isProforma() && formletterProformaPrint)
        {
            return formletterProformaPrint.tmpTaxWorkTrans(vendInvoiceJour.RecId);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendEUVatInvoiceController formLetterController = new VendEUVatInvoiceController();

        setPrefix("@SYS55146");

        formLetterController.parmArgs(_args);
        formLetterController.parmReportName(ssrsReportStr(VendEUVatInvoice, Report));
        formLetterController.parmShowDialog(false);

        if (formLetterController.init())
        {
            formLetterController.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>