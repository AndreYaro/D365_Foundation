<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjUtilReportUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjUtilReportUIBuilder extends SrsReportDataContractUIBuilder
{
    ProjUtilCalcFilterType      filterType;
    ProjUtilEmplContract        contract;
    ProjUtilReportController    reportController;

    DialogField                 forecastModelIdField;
    DialogField                 actualBudgetField;
    DialogField                 fromDateField;
    DialogField                 toDateField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualBudgetModified</Name>
				<Source><![CDATA[
    /// <summary>
/// Handles the UI modified event for the detail dialog box field..
/// </summary>
/// <param name="_control">
/// The control behind the changed dialog box field.
/// </param>
/// <returns>
/// true if the control value has been modified; otherwise false.
/// </returns>
/// <remarks>
/// The level must enabled according to the value in detail field
/// </remarks>
public boolean actualBudgetModified(FormComboBoxControl _control)
{
    boolean ret = true;

    if (_control.modified())
    {
        if (_control.selection() == enum2int(ProjActualBudgetOnly::Budget))
        {
            forecastModelIdField.visible(true);
        }
        else
        {
            forecastModelIdField.visible(false);
        }
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
/// Builds a dialog box that has basic parameters.
/// </summary>
public void build()
{
    contract            = this.dataContractInfo().dataContractObject() as ProjUtilEmplContract;
    reportController    = this.controller() as ProjUtilReportController;
    super();

    this.setCaptions(reportController.parmArgs());

    forecastModelIdField    = this.bindInfo().getDialogField(contract,methodStr(ProjUtilEmplContract, parmProjForecastModelId));
    actualBudgetField       = this.bindInfo().getDialogField(contract,methodStr(ProjUtilEmplContract, parmProjActualVsBudget));

    if (actualBudgetField.value() == ProjActualBudgetOnly::Actual)
    {
        forecastModelIdField.visible(false);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>periodFromLookup</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates the lookup for the budget cycle field.
/// </summary>
/// <param name="_periodFromControl">
    /// The <c>FormDateControl</c> for which the lookup fields must be associated.
/// </param>
public void periodFromLookup(FormDateControl _periodFromControl)
{
    DialogField tempPeriodIdField;

    if (contract)
    {
        tempPeriodIdField = this.bindInfo().getDialogField(this.dataContractObject(),methodStr(ProjUtilEmplContract,parmEditPeriodID));

        if (tempPeriodIdField)
        {
            ProjPeriodLine::lookupPeriod(fromDateField.control(),tempPeriodIdField.value(),fromDateField.value());
        }
        else
        {
            ProjPeriodLine::lookupPeriod(fromDateField.control(),"",fromDateField.value());
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>periodToLookup</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates the lookup for the budget cycle field.
/// </summary>
/// <param name="_periodFromControl">
/// The <c>FormDateControl</c> for which the lookup fields must be associated.
/// </param>
public void periodToLookup(FormDateControl _periodFromControl)
{
    DialogField tempPeriodIdField;

    if (contract)
    {
        tempPeriodIdField = this.bindInfo().getDialogField(this.dataContractObject(),methodStr(ProjUtilEmplContract,parmEditPeriodID));

        if (tempPeriodIdField)
        {
            ProjPeriodLine::lookupPeriodTo(toDateField.control(),tempPeriodIdField.value(),toDateField.value());
        }
        else
        {
            ProjPeriodLine::lookupPeriodTo(toDateField.control(),"",toDateField.value());
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
{
    super();

    // This method should be called in order to handle events on dialogs.
    this.dialog().dialogForm().formRun().controlMethodOverload(false);

    // Override the Lookup method of fromDate field.
    fromDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjUtilEmplContract, parmProjFromDate));
    fromDateField.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(ProjUtilReportUIBuilder, periodFromLookup), this);

     actualBudgetField.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(ProjUtilReportUIBuilder, actualBudgetModified), this);

    // Override the Lookup method of toDate field.
    toDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjUtilEmplContract, parmProjToDate));
    toDateField.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(ProjUtilReportUIBuilder, periodToLookup), this);

}

]]></Source>
			</Method>
			<Method>
				<Name>setCaptions</Name>
				<Source><![CDATA[
    private void setCaptions(Args _args)
{
    switch (_args.menuItemName())
    {
        case menuitemoutputstr(ProjBillUtilCategory):
            this.dialog().caption("@SYS104071");
            filterType = ProjUtilCalcFilterType::Category;
            break;
        case menuitemoutputstr(ProjEfficiencyUtilCategory):
            this.dialog().caption("@SYS104070");
            filterType = ProjUtilCalcFilterType::Category;
            break;
        case menuitemoutputstr(ProjBillUtilEmpl):
            this.dialog().caption("@Res:ResHourUtilizationBillable");
            filterType = ProjUtilCalcFilterType::Employee;
            break;
        case menuitemoutputstr(ProjEfficiencyUtilEmpl):
            this.dialog().caption("@Res:ResourceHourUtilizationEfficiency");
            filterType = ProjUtilCalcFilterType::Employee;
            break;
        case menuitemoutputstr(ProjBillUtilProject):
            this.dialog().caption("@SYS104069");
            filterType = ProjUtilCalcFilterType::Project;
            break;
        case menuitemoutputstr(ProjEfficiencyUtilProject):
            this.dialog().caption("@SYS104068");
            filterType = ProjUtilCalcFilterType::Project;
            break;
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>