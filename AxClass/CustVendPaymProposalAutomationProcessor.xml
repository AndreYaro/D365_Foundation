<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalAutomationProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendPaymProposalAutomationProcessor</c> class handles the orchestration of the execution of the payment proposal automation
/// processing. From translation of saved criteria to runtime criteria, creating a journal, and execution of payment proposal.
/// </summary>
internal final class CustVendPaymProposalAutomationProcessor
{
    private BatchHeader batchHeader;
    private ProcessExecutionSourceLink sourceLink;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;

        try
        {
            CustVendCreatePaymJournalDialogValues dialogValues =
                CustVendPaymProposalAutomationRuntimeCriteriaConverter::transformSavedCriteriaToRuntimeValues(_processScheduleWorkItem);

            ttsbegin;

            // Hydrate batch header - This must happen before all other actions to ensure tasks are added to the correct batch.
            this.getBatchHeader();

            LedgerJournalTable ledgerJournalTable = CustVendPaymProposalAutomationJournalCreator::createJournal(_processScheduleWorkItem);

            sourceLink = this.createProcessExecutionSourceLink(_processScheduleWorkItem, ledgerJournalTable);

            CustVendPaymProposalAutomationExecutionContract automationExecutionContract =
                this.initExecutionContract(_processScheduleWorkItem, dialogValues, ledgerJournalTable.JournalNum, sourceLink.RecId);

            CustVendCreatePaymJournal proposalAnchor =
                CustVendCreatePaymJournal::constructFromAutomationExecutionContract(automationExecutionContract);

            CustVendCreatePaymJournal firstProposal = this.createFirstProposalTask(proposalAnchor);

            CustVendPaymProposalAutomationRuntimeMonitor firstProposalRuntimeMonitor =
                this.createFirstProposalRuntimeMonitorTask(ledgerJournalTable.JournalNum, firstProposal);

            CustVendCreatePaymJournal finalProposal =
                this.createFinalProposalTask(proposalAnchor, firstProposalRuntimeMonitor);

            CustVendPaymProposalTransferToJournal transferAnchor =
                CustVendPaymProposalTransferToJournal::constructForPaymProposalAutomation(
                    proposalAnchor.getCustVendPaymProposalForAutomation(),
                    sourceLink.RecId);

            CustVendPaymProposalTransferToJournal firstTransfer = this.createFirstTransferTask(transferAnchor, finalProposal);
            
            CustVendPaymProposalAutomationRuntimeMonitor firstTransferRuntimeMonitor =
                this.createFirstTransferRuntimeMonitorTask(ledgerJournalTable.JournalNum, firstTransfer);
            
            CustVendPaymProposalTransferToJournal finalTransfer = this.createFinalTransferTask(transferAnchor, firstTransferRuntimeMonitor);

            CustVendPaymProposalAutomationRuntimeMonitor finalTransferRuntimeMonitor =
                this.createFinalTransferAutomationRuntimeMonitorTask(ledgerJournalTable.JournalNum, finalTransfer);

            if (FeatureStateProvider::isFeatureEnabled(CustVendPaymProposalAvoidEmptyJournalFeature::instance()))
            {
                CustVendPaymProposalRemoveEmptyJournal removeEmptyJournal = this.createRemoveEmptyJournalTask(ledgerJournalTable.JournalNum, finalTransferRuntimeMonitor);
                this.createFinalRemoveEmptyJournalRuntimeMonitorTask(ledgerJournalTable.JournalNum, removeEmptyJournal);
            }

            this.getBatchHeader().save();
            
            ttscommit;
        }
        catch (errorEx)
        {
            this.logFailure(_processScheduleWorkItem, errorEx.Message);

            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchHeader</Name>
				<Source><![CDATA[
    private BatchHeader getBatchHeader()
    {
        if (batchHeader == null)
        {
            batchHeader = BatchHeader::getCurrentBatchHeader();
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExecutionContract</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationExecutionContract initExecutionContract(
        ProcessScheduleWorkItem _processScheduleWorkItem,
        CustVendCreatePaymJournalDialogValues _dialogValues,
        LedgerJournalId _journalNum,
        RefRecId _sourceLinkRecId)
    {
        CustVendPaymProposalAutomationExecutionContract automationExecutionContract = CustVendPaymProposalAutomationExecutionContract::construct();

        automationExecutionContract.processScheduleTypeName = _processScheduleWorkItem.parmProcessScheduleTypeName();
        automationExecutionContract.dialogValues = _dialogValues;
        automationExecutionContract.journalNum = _journalNum;
        automationExecutionContract.processScheduleOccurrenceRecId = _processScheduleWorkItem.parmProcessScheduleOccurrenceRecId();
        automationExecutionContract.processExecutionSourceLinkRecId = _sourceLinkRecId;

        return automationExecutionContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFirstProposalTask</Name>
				<Source><![CDATA[
    private CustVendCreatePaymJournal createFirstProposalTask(CustVendCreatePaymJournal _custVendCreatePaymJournalAnchor)
    {
        CustVendCreatePaymJournal custVendCreatePaymJournalFirst = _custVendCreatePaymJournalAnchor.getFirstAutomationBatchTask();
        
        this.getBatchHeader().addTask(custVendCreatePaymJournalFirst);

        return custVendCreatePaymJournalFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinalProposalTask</Name>
				<Source><![CDATA[
    private CustVendCreatePaymJournal createFinalProposalTask(
        CustVendCreatePaymJournal _proposalAnchor,
        CustVendPaymProposalAutomationRuntimeMonitor _firstProposalRuntimeMonitor)
    {
        CustVendCreatePaymJournal finalProposal = _proposalAnchor.getFinalAutomationBatchTask();
        
        this.getBatchHeader().addTask(finalProposal);
        this.getBatchHeader().addDependency(finalProposal, _firstProposalRuntimeMonitor);

        return finalProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFirstTransferTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalTransferToJournal createFirstTransferTask(
        CustVendPaymProposalTransferToJournal _transferAnchor,
        CustVendCreatePaymJournal _finalProposal)
    {
        CustVendPaymProposalTransferToJournal firstTransfer = _transferAnchor.getFirstAutomationBatchTask();
        
        this.getBatchHeader().addTask(firstTransfer);
        this.getBatchHeader().addDependency(firstTransfer, _finalProposal);

        return firstTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinalTransferTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalTransferToJournal createFinalTransferTask(
        CustVendPaymProposalTransferToJournal _transferAnchor,
        CustVendPaymProposalAutomationRuntimeMonitor _firstTransferRuntimeMonitor)
    {
        CustVendPaymProposalTransferToJournal finalTransfer = _transferAnchor.getFinalAutomationBatchTask();
        
        this.getBatchHeader().addTask(finalTransfer);
        this.getBatchHeader().addDependency(finalTransfer, _firstTransferRuntimeMonitor);

        return finalTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRemoveEmptyJournalTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalRemoveEmptyJournal createRemoveEmptyJournalTask(
        LedgerJournalId _journalNum,
        CustVendPaymProposalAutomationRuntimeMonitor _finalTransferRuntimeMonitor)
    {
        CustVendPaymProposalRemoveEmptyJournal removeEmptyJournal = CustVendPaymProposalRemoveEmptyJournal::createRemoveEmptyJournalTask(_journalNum);

        this.getBatchHeader().addTask(removeEmptyJournal);
        this.getBatchHeader().addDependency(removeEmptyJournal, _finalTransferRuntimeMonitor);

        return removeEmptyJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFirstProposalRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitor createFirstProposalRuntimeMonitorTask(
        LedgerJournalId _journalNum,
        CustVendCreatePaymJournal _proposalDependentUpon)
    {
        CustVendPaymProposalAutomationRuntimeMonitor runtimeMonitorFirst = this.createStandardRuntimeMonitorTask(_journalNum, sourceLink.RecId);

        this.getBatchHeader().addDependency(runtimeMonitorFirst, _proposalDependentUpon, BatchDependencyStatus::FinishedOrError);

        return runtimeMonitorFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFirstTransferRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitor createFirstTransferRuntimeMonitorTask(
        LedgerJournalId _journalNum,
        CustVendPaymProposalTransferToJournal _transferDependentUpon)
    {
        CustVendPaymProposalAutomationRuntimeMonitor runtimeMonitorFirst = this.createStandardRuntimeMonitorTask(_journalNum, sourceLink.RecId);

        this.getBatchHeader().addDependency(runtimeMonitorFirst, _transferDependentUpon, BatchDependencyStatus::FinishedOrError);

        return runtimeMonitorFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinalTransferAutomationRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitor createFinalTransferAutomationRuntimeMonitorTask(
        LedgerJournalId _journalNum,
        CustVendPaymProposalTransferToJournal _finalTransfer)
    {
        CustVendPaymProposalAutomationRuntimeMonitor finalAutomationRuntimeMonitor;
        if (FeatureStateProvider::isFeatureEnabled(CustVendPaymProposalAvoidEmptyJournalFeature::instance()))
        {
            finalAutomationRuntimeMonitor = this.createStandardRuntimeMonitorTask(_journalNum, sourceLink.RecId);
        }
        else
        {
            finalAutomationRuntimeMonitor = this.createFinalRuntimeMonitorTask(_journalNum, sourceLink.RecId);
        }
        
        this.getBatchHeader().addDependency(finalAutomationRuntimeMonitor, _finalTransfer, BatchDependencyStatus::FinishedOrError);

        return finalAutomationRuntimeMonitor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinalRemoveEmptyJournalRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitor createFinalRemoveEmptyJournalRuntimeMonitorTask(
        LedgerJournalId _journalNum,
        CustVendPaymProposalRemoveEmptyJournal _removeEmptyJournal)
    {
        CustVendPaymProposalAutomationRuntimeMonitor finalRemoveEmptyJournalRuntimeMonitor = this.createFinalRuntimeMonitorTask(_journalNum, sourceLink.RecId);

        this.getBatchHeader().addDependency(finalRemoveEmptyJournalRuntimeMonitor, _removeEmptyJournal, BatchDependencyStatus::FinishedOrError);

        return finalRemoveEmptyJournalRuntimeMonitor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStandardRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitor createStandardRuntimeMonitorTask(LedgerJournalId _journalNum, RefRecId _executionSourceLinkRecId)
    {
        return this.createRuntimeMonitorTask(_journalNum, _executionSourceLinkRecId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinalRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitor createFinalRuntimeMonitorTask(LedgerJournalId _journalNum, RefRecId _executionSourceLinkRecId)
    {
        return this.createRuntimeMonitorTask(_journalNum, _executionSourceLinkRecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitor createRuntimeMonitorTask(
        LedgerJournalId _journalNum,
        RefRecId _executionSourceLinkRecId,
        boolean _isFinalRuntimeMonitor)
    {
        CustVendPaymProposalAutomationRuntimeMonitor runtimeMonitor = new CustVendPaymProposalAutomationRuntimeMonitor(
            classStr(CustVendPaymProposalAutomationRuntimeMonitor),
            methodStr(CustVendPaymProposalAutomationRuntimeMonitor, runMonitor),
            SysOperationExecutionMode::Synchronous);

        CustVendPaymProposalAutomationRuntimeMonitorContract contract = runtimeMonitor.getDataContractInfoObject().dataContractObject() as CustVendPaymProposalAutomationRuntimeMonitorContract;
        contract.parmJournalNum(_journalNum);
        contract.parmProcessExecutionSourceLinkRecId(_executionSourceLinkRecId);
        contract.parmBatchJobId(this.getBatchHeader().parmBatchHeaderId());
        contract.parmIsFinalRuntimeMonitor(_isFinalRuntimeMonitor);
        contract.parmSuccessMessage("@CashManagement:CustVendPaymProposalAutomationSucceeded");
        contract.parmFailureMessage("@CashManagement:CustVendPaymProposalAutomationFailed");

        this.getBatchHeader().addTask(runtimeMonitor);

        return runtimeMonitor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessExecutionSourceLink</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink createProcessExecutionSourceLink(ProcessScheduleWorkItem _processScheduleWorkItem, LedgerJournalTable _ledgerJournalTable)
    {
        ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
        sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
        sourceLinkItem.parmProcessScheduleOccurrenceRecId(_processScheduleWorkItem.parmProcessScheduleOccurrenceRecId());
        sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
        sourceLinkItem.parmHeader(_ledgerJournalTable.JournalNum);
        sourceLinkItem.parmMessage("@CashManagement:CustVendPaymProposalAutomationExecuting");
        sourceLinkItem.parmSourceTableId(_ledgerJournalTable.TableId);
        sourceLinkItem.parmSourceRecId(_ledgerJournalTable.RecId);
        sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Warning);
        
        return ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFailure</Name>
				<Source><![CDATA[
    private void logFailure(ProcessScheduleWorkItem _processScheduleWorkItem, ProcessExecutionSourceLinkMessage _messageText)
    {
        ttsbegin;
        
        if (sourceLink.RecId != 0)
        {
            sourceLink.RefRecId = 0;
            sourceLink.RefTableId = 0;
            sourceLink.Header = '';
            sourceLink.Message = "@CashManagement:CustVendPaymProposalAutomationFailed";
            sourceLink.Status = ProcessExecutionSourceStatus::Error;
            sourceLink.update();
        }
        else
        {
            ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
            sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
            sourceLinkItem.parmProcessScheduleOccurrenceRecId(_processScheduleWorkItem.parmProcessScheduleOccurrenceRecId());
            sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
            sourceLinkItem.parmMessage("@CashManagement:CustVendPaymProposalAutomationFailed");
            sourceLinkItem.parmSourceTableId(0);
            sourceLinkItem.parmSourceRecId(0);
            sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Error);

            sourceLink = ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);
        }
        
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(sourceLink.RecId);
        messageLogItem.parmException(Exception::Error);
        messageLogItem.parmMessage("@CashManagement:CustVendPaymProposalAutomationFailed");
        
        ProcessExecutionMessageLog::insertMessage(messageLogItem);

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>