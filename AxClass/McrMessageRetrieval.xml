<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrMessageRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRMessageRetrieval</c> handles the message retrieval functionality for
/// the different message types.
/// </summary>
class McrMessageRetrieval
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getItemMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns any scripts and notes associated with the item.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the catalog product.
    /// </param>
    /// <param name="_sourceCode">
    /// The <c>SourceCodeId</c> of the source code that the catalog product is related to.
    /// </param>
    /// <returns>
    /// Any scripts and notes associated with the item.
    /// </returns>
    public static str getItemMessage(ItemId _itemId, MCRSourceID _sourceCode = "")
    {
        MCRSourceCodeSetup      mcrSourceCodeSetup;
        InventTable             inventTable;
        CatalogProduct          catalogProduct;
        str                     fullMessageString;

        mcrSourceCodeSetup = MCRSourceCodeSetup::find(_sourceCode);
        if (mcrSourceCodeSetup)
        {
            inventTable = InventTable::find(_itemId);
            if (inventTable)
            {
                catalogProduct = CatalogProduct::findByProduct(mcrSourceCodeSetup.Catalog, inventTable.Product);
                if (catalogProduct)
                {
                    fullMessageString = MCRMessageAssociation::getFullMessage(catalogProduct.TableId,
                                                                              catalogProduct.RecId);
                }

                if (!fullMessageString)
                {
                    fullMessageString = MCRMessageAssociation::getFullMessage(inventTable.TableId,
                                                                              inventTable.RecId);
                }
            }
        }

        return fullMessageString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns any scripts and notes associated with the payment method.
    /// </summary>
    /// <param name="_paymMode">
    /// The method of payment to check for messages.
    /// </param>
    /// <returns>
    /// Any scripts and notes associated with the payment method.
    /// </returns>
    public static str getPaymentMessage(PaymMode _paymMode)
    {
        CustPaymModeTable   custPaymModeTable;

        custPaymModeTable = CustPaymModeTable::find(_paymMode);

        return MCRMessageAssociation::getFullMessage(custPaymModeTable.TableId,
                                                     custPaymModeTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartCatalogMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves any scripts and notes associated with this catalog.
    /// </summary>
    /// <param name="_sourceCode">
    /// The <c>SourceCodeId</c> related to the catalog.
    /// </param>
    /// <returns>
    /// Any scripts and notes associated with this catalog.
    /// </returns>
    public static str getStartCatalogMessage(MCRSourceID _sourceCode)
    {
        MCRSourceCodeSetup      mcrSourceCodeSetup;
        Catalog                 catalog;

        mcrSourceCodeSetup = MCRSourceCodeSetup::find(_sourceCode);
        catalog = Catalog::find(mcrSourceCodeSetup.Catalog);

        return MCRMessageAssociation::getFullMessage(catalog.TableId,
                                                     catalog.RecId,
                                                     MCRMessageTiming::Begin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartOrderMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns any scripts and notes associated with the start of the order.
    /// </summary>
    /// <returns>
    /// Any scripts and notes associated with the start of the order.
    /// </returns>
    public static str getStartOrderMessage()
    {
        return MCRMessageAssociation::getFullMessage(tableNum(SalesTable),
                                                     0,
                                                     MCRMessageTiming::Begin);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>