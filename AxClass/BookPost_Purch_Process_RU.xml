<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookPost_Purch_Process_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookPost_Purch_Process_RU extends BookPost_Purch_RU implements BatchRetryable
{
    #localmacro.vatProcessKey
          [tmpProcessLogTransOper.TaxCode,
           tmpProcessLogTransOper.DefaultDimension,
           tmpProcessLogTransOper.InventTransId,
           tmpProcessLogTransOper.DocumentType,
           tmpProcessLogTransOper.RDeferralsTransRecId]
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean                                 ret = true, isGroupBy;
        TaxPeriodDate                           localFromDate, localToDate;
        BookStructSmallVATAmounts_RU            usedAmounts, factureSettledAmounts, currentAmounts;
        Map                                     mapFactureSettledAmounts;
        TmpPurchBookVATProcessLogTransOper_RU   prevTmpProcessLogTransOper, tmpLogTransOper;
        FactureJour_RU                          factureJour;
        boolean                                 amountsReversed;
        ;

        setPrefix("@SYS13894");

        while select forupdate tmpProcessLogTrans
            where tmpProcessLogTrans.Marked == NoYes::Yes
        {
            if (transDate < tmpProcessLogTrans.PurchBookTransDate)
            {
                ret = false;
                tmpProcessLogTrans.Error = NoYes::Yes;
                tmpProcessLogTrans.update();
            }
        }

        if ( ! ret)
        {
            error("@GLS104924");
        }

        tmpLogTransOper.setTmpData(tmpProcessLogTransOper);

        while select forupdate tmpProcessLogTrans
            where tmpProcessLogTrans.Marked == NoYes::Yes
        {
            setPrefix(strFmt("@GLS111360", tmpProcessLogTrans.AccountNum, tmpProcessLogTrans.FactureExternalId));

            mapFactureSettledAmounts = new Map(Types::Container, Types::Class);
            isGroupBy = BookStructVATAmounts_RU::create(tmpProcessLogTrans.FactureAmounts).isGroupBy();
            while select tmpProcessLogTransOper
                where tmpProcessLogTransOper.RefRecId         == tmpProcessLogTrans.RecId &&
                      tmpProcessLogTransOper.LogTableRefRecId == tmpProcessLogTrans.LogTableRefRecId
            {
                [ localFromDate, localToDate ]  = BookDataCalc_RU::datePeriodBook(tmpProcessLogTransOper.TransDate);

                if (localToDate == dateNull())
                {
                    error(strFmt("@GLS104905", TaxType_W::VAT, tmpProcessLogTransOper.TransDate));
                    ret = false;
                }
                else
                {
                    if ((transDate < localFromDate) || (transDate > localToDate))
                    {
                        ret = false;
                        tmpProcessLogTrans.Error = NoYes::Yes;
                        tmpProcessLogTrans.update();

                        error(strFmt("@GLS104891", localFromDate, localToDate));
                    }
                }
                if (transDate > #TransitionEndDate)
                {
                    tmpProcessLogTransOper.DocumentType = PurchBookVATDocumentType_RU::Unknown;
                }
                mapFactureSettledAmounts.insert(#vatProcessKey, BookStructSmallVATAmounts_RU::create(tmpProcessLogTransOper.SettledAmounts));
            }

            prevTmpProcessLogTransOper.clear();

            if (transDate > #TransitionEndDate)
            {
                select sum(AmountLiableToVAT), sum(TaxAmount) from tmpProcessLogTransOper
                    group by TaxCode, DefaultDimension, InventTransId, rDeferralsTransRecId
                    where tmpProcessLogTransOper.RefRecId         == tmpProcessLogTrans.RecId &&
                          tmpProcessLogTransOper.LogTableRefRecId == tmpProcessLogTrans.LogTableRefRecId;

                factureJour = FactureJour_RU::find(tmpProcessLogTrans.FactureId, tmpProcessLogTrans.factureModule());
            }
            else
            {
                select sum(AmountLiableToVAT), sum(TaxAmount) from tmpProcessLogTransOper
                    group by TaxCode, DefaultDimension, InventTransId, DocumentType, rDeferralsTransRecId
                    where tmpProcessLogTransOper.RefRecId         == tmpProcessLogTrans.RecId &&
                          tmpProcessLogTransOper.LogTableRefRecId == tmpProcessLogTrans.LogTableRefRecId;
            }

            while (tmpProcessLogTransOper.TaxCode)
            {
                if (transDate > #TransitionEndDate && ! factureJour.vatOnPayment)
                {
                    usedAmounts = PurchBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(tmpProcessLogTrans.FactureId,
                                                                                             tmpProcessLogTransOper.TaxCode,
                                                                                             tmpProcessLogTransOper.DefaultDimension,
                                                                                             tmpProcessLogTransOper.InventTransId,
                                                                                             tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                             tmpProcessLogTrans.InvoiceCompany,
                                                                                             false,
                                                                                             PurchBookVATDocumentType_RU::Unknown,
                                                                                             NoYes::No,
                                                                                             isGroupBy,
                                                                                             dateNull(),
                                                                                             false,
                                                                                             dateNull(),
                                                                                             tmpProcessLogTrans.ProcessingType,
                                                                                             tmpProcessLogTrans.CorrectedFactureId,
                                                                                             tmpProcessLogTransOper.rDeferralsTransRecId);
                }
                else
                {
                    if (! tmpProcessLogTrans.PaymentRecIdRef && ! tmpProcessLogTrans.SettlementRecId)
                    {
                        usedAmounts = PurchBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(tmpProcessLogTrans.FactureId,
                                                                                                 tmpProcessLogTransOper.TaxCode,
                                                                                                 tmpProcessLogTransOper.DefaultDimension,
                                                                                                 tmpProcessLogTransOper.InventTransId,
                                                                                                 tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                                 tmpProcessLogTrans.InvoiceCompany,
                                                                                                 false,
                                                                                                 PurchBookVATDocumentType_RU::Unknown,
                                                                                                 NoYes::No,
                                                                                                 isGroupBy,
                                                                                                 dateNull(),
                                                                                                 true,
                                                                                                 dateNull(),
                                                                                                 tmpProcessLogTrans.ProcessingType,
                                                                                                 tmpProcessLogTrans.CorrectedFactureId,
                                                                                                 tmpProcessLogTransOper.rDeferralsTransRecId);
                    }
                    else
                    {
                        usedAmounts = PurchBookVATProcessLogTransOper_RU::usedAmounts(tmpProcessLogTrans.FactureId,
                                                                                      tmpProcessLogTransOper.TaxCode,
                                                                                      tmpProcessLogTransOper.DefaultDimension,
                                                                                      tmpProcessLogTransOper.InventTransId,
                                                                                      tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                      tmpProcessLogTrans.PaymentRecIdRef,
                                                                                      tmpProcessLogTrans.InvoiceCompany,
                                                                                      tmpProcessLogTrans.PaymentCompany,
                                                                                      tmpProcessLogTrans.SettlementRecId,
                                                                                      tmpProcessLogTrans.SettlementDate,
                                                                                      false,
                                                                                      0,
                                                                                      NoYes::No,
                                                                                      isGroupBy,
                                                                                      PurchBookVATDocumentType_RU::Unknown,
                                                                                      tmpProcessLogTrans.ProcessingType,
                                                                                      tmpProcessLogTrans.CorrectedPeriod,
                                                                                      tmpProcessLogTrans.CorrectedFactureId,
                                                                                      tmpProcessLogTransOper.rDeferralsTransRecId);
                    }
                }

                factureSettledAmounts = mapFactureSettledAmounts.lookup(#vatProcessKey);
                factureSettledAmounts.subAmounts2(usedAmounts);
                currentAmounts = new BookStructSmallVATAmounts_RU();

                if (transDate > #TransitionEndDate)
                {
                    select sum(AmountLiableToVAT), sum(TaxAmount) from tmpLogTransOper
                        where tmpLogTransOper.TaxCode              == tmpProcessLogTransOper.TaxCode            &&
                              tmpLogTransOper.DefaultDimension     == tmpProcessLogTransOper.DefaultDimension   &&
                              tmpLogTransOper.InventTransId        == tmpProcessLogTransOper.InventTransId      &&
                              tmpLogTransOper.RefRecId             == tmpProcessLogTrans.RecId                  &&
                              tmpLogTransOper.LogTableRefRecId     == tmpProcessLogTrans.LogTableRefRecId       &&
                             (! tmpProcessLogTrans.CorrectedPeriod                                              ||
                              tmpLogTransOper.rDeferralsTransRecId == tmpProcessLogTransOper.rDeferralsTransRecId);
                }
                else
                {
                    select sum(AmountLiableToVAT), sum(TaxAmount) from tmpLogTransOper
                        where tmpLogTransOper.TaxCode              == tmpProcessLogTransOper.TaxCode            &&
                              tmpLogTransOper.DefaultDimension     == tmpProcessLogTransOper.DefaultDimension   &&
                              tmpLogTransOper.InventTransId        == tmpProcessLogTransOper.InventTransId      &&
                              tmpLogTransOper.DocumentType         == tmpProcessLogTransOper.DocumentType       &&
                              tmpLogTransOper.RefRecId             == tmpProcessLogTrans.RecId                  &&
                              tmpLogTransOper.LogTableRefRecId     == tmpProcessLogTrans.LogTableRefRecId       &&
                             (! tmpProcessLogTrans.CorrectedPeriod                                              ||
                              tmpLogTransOper.rDeferralsTransRecId == tmpProcessLogTransOper.rDeferralsTransRecId);
                }

                currentAmounts.addAmounts(tmpLogTransOper.AmountLiableToVAT + tmpLogTransOper.TaxAmount,
                                          tmpLogTransOper.AmountLiableToVAT,
                                          tmpLogTransOper.TaxAmount);

                amountsReversed = false;
                if (tmpProcessLogTransOper.rDeferralsTransRecId &&
                    sign(factureSettledAmounts.amountLiableToVAT()) != sign(currentAmounts.amountLiableToVAT()))
                {
                    currentAmounts.reverseAmounts();
                    amountsReversed = true;
                }

                prevTmpProcessLogTransOper.data(tmpProcessLogTransOper);

                if (! factureSettledAmounts.equal(currentAmounts))
                {
                    ret = false;

                    tmpProcessLogTrans.Error = NoYes::Yes;
                    tmpProcessLogTrans.update();
                    error("@GLS102588");
                    next tmpProcessLogTransOper;
                    continue;
                }

                if (amountsReversed)
                {
                    currentAmounts.reverseAmounts();
                }

                if (tmpProcessLogTrans.PaymentRecIdRef &&
                    tmpProcessLogTrans.SettlementRecId &&
                    tmpProcessLogTrans.SettlementDate  &&
                    tmpProcessLogTransOper.DocumentType == PurchBookVATDocumentType_RU::ContractorsWork_2005)
                {
                    usedAmounts = PurchBookVATProcessLogTransOper_RU::usedAmounts(tmpProcessLogTrans.FactureId,
                                                                                  tmpProcessLogTransOper.TaxCode,
                                                                                  tmpProcessLogTransOper.DefaultDimension,
                                                                                  tmpProcessLogTransOper.InventTransId,
                                                                                  tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                  0,
                                                                                  tmpProcessLogTrans.InvoiceCompany,
                                                                                  curext(),
                                                                                  0,
                                                                                  dateNull(),
                                                                                  false,
                                                                                  0,
                                                                                  NoYes::No,
                                                                                  isGroupBy,
                                                                                  tmpProcessLogTransOper.DocumentType,
                                                                                  tmpProcessLogTrans.ProcessingType,
                                                                                  tmpProcessLogTrans.CorrectedPeriod,
                                                                                  tmpProcessLogTrans.CorrectedFactureId,
                                                                                  tmpProcessLogTransOper.rDeferralsTransRecId);
                    if (usedAmounts.amountInclVAT())
                    {
                        ret = false;

                        tmpProcessLogTrans.Error = NoYes::Yes;
                        tmpProcessLogTrans.update();
                        error("@GLS112042");
                        next tmpProcessLogTransOper;
                        continue;
                    }
                }

                if (tmpProcessLogTrans.Reversed)
                {
                    usedAmounts    = PurchBookVATProcessLogTransOper_RU::usedAmounts(tmpProcessLogTrans.FactureId,
                                                                                     tmpProcessLogTransOper.TaxCode,
                                                                                     tmpProcessLogTransOper.DefaultDimension,
                                                                                     tmpProcessLogTransOper.InventTransId,
                                                                                     tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                     tmpProcessLogTrans.PaymentRecIdRef,
                                                                                     tmpProcessLogTrans.InvoiceCompany,
                                                                                     tmpProcessLogTrans.PaymentCompany,
                                                                                     tmpProcessLogTrans.ReverseSettlementRecId,
                                                                                     tmpProcessLogTrans.ReverseDate,
                                                                                     false,
                                                                                     0,
                                                                                     NoYes::Yes,
                                                                                     true,
                                                                                     tmpProcessLogTransOper.DocumentType,
                                                                                     tmpProcessLogTrans.ProcessingType,
                                                                                     tmpProcessLogTransOper.rDeferralsTransRecId ?
                                                                                     dateNull()                                  :
                                                                                     tmpProcessLogTrans.CorrectedPeriod,
                                                                                     tmpProcessLogTrans.CorrectedFactureId,
                                                                                     tmpProcessLogTransOper.rDeferralsTransRecId);
                    usedAmounts.reverseAmounts();

                    if ( ! usedAmounts.equal(currentAmounts))
                    {
                        ret = false;
                        tmpProcessLogTrans.Error = NoYes::Yes;
                        tmpProcessLogTrans.update();
                        error("@GLS102588");
                    }
                }

               next tmpProcessLogTransOper;
            }
        }

        return ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperation</Name>
				<Source><![CDATA[
    protected PurchBookVATProcessLogTransOper_RU logOperation(AmountMST _taxAmount,
                                                              AmountMST _amountLiableToVAT)
    {
        PurchBookVATProcessLogTransOper_RU      processLogTransOper = super(_taxAmount, _amountLiableToVAT);
        PurchBookVATProcessLogTransOper_RU      prevProcessLogTransOper;
        ;

        if (processLogTransOper.rDeferralsStornoRecId)
        {
            select forupdate firstonly prevProcessLogTransOper
                where prevProcessLogTransOper.RecId == tmpProcessLogTransOper.OrigRecId;

            prevProcessLogTransOper.rDeferralsStornoRecId   = processLogTransOper.RecId;
            prevProcessLogTransOper.update();
        }

        return processLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean       ret = super(calledFrom);
        TaxPeriodDate localFromDate, localToDate;
        ;
        if (ret)
        {
            [ localFromDate, localToDate ] = BookDataCalc_RU::datePeriodBook(transDate);

            if ((localFromDate == dateNull()) || (localToDate == dateNull()))
            {
                ret = checkFailed(strFmt("@GLS104896", transDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS101145" + "@GLS101637" + strLwr("@SYS3881");
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>