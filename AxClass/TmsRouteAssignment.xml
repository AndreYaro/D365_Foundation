<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRouteAssignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmsRouteAssignment</c> contains the base methods for assigning route to a source document.
/// </summary>
abstract class TmsRouteAssignment
{
    TMSRouteTable       routeTable;
    TMSRoute            route;
    TMSRouteCode        routeCode;
    TMSSequence         sequence;
    Common              common;
    Object              ctrl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignRoute</Name>
				<Source><![CDATA[
	/// <summary>
	/// Assigns route to an entity.
	/// </summary>
    public abstract void assignRoute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initializes the instance from common record.
	/// </summary>
	/// <param name="_common">
	/// The common record.
	/// </param>
	/// <returns>
	/// True if it is initialized successfully, false otherwise.
	/// </returns>
    boolean initFromCommon(Common _common)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChargeOverride</Name>
				<Source><![CDATA[
	/// <summary>
	/// Inserts overrided charges for route.
	/// </summary>
    void insertChargeOverride()
    {
        TMSChargeOverrideTable      overrideTable;
        TMSRouteOverride            routeOverride;

        while select overrideTable
            where overrideTable.RouteRecId == routeTable.RecId
        {
            routeOverride.RouteCode          = route.RouteCode;
            routeOverride.CarrierCode        = overrideTable.CarrierCode;
            routeOverride.CarrierServiceCode = overrideTable.CarrierServiceCode;
            routeOverride.TotalRate          = overrideTable.TotalRate;
            routeOverride.CurrencyCode          = overrideTable.CurrencyCode;
            routeOverride.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    Common parmCommon(Common _common = common)
    {
        common = _common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCTRL</Name>
				<Source><![CDATA[
    Object parmCTRL(Object _ctrl = ctrl)
    {
        ctrl = _ctrl;

        return ctrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteCode</Name>
				<Source><![CDATA[
    TMSRouteCode parmRouteCode(TMSRouteCode _routeCode = routeCode)
    {
        routeCode = _routeCode;

        return routeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteTable</Name>
				<Source><![CDATA[
    TMSRouteTable parmRouteTable(TMSRouteTable _routeTable = routeTable)
    {
        routeTable = _routeTable;

        return routeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructs a <c>TMSRouteAssignment</c> instance based on the record type.
	/// </summary>
	/// <param name="_recordType">
	/// The record type.
	/// </param>
	/// <returns>
	/// The class instance.
	/// </returns>
    static TMSRouteAssignment construct(TMSRecordType _recordType)
    {
        switch (_recordType)
        {
            case TMSRecordType::Load            : return TMSRouteAssignment_Load::construct();
            case TMSRecordType::Sales           : return TMSRouteAssignment_Sales::construct();
            case TMSRecordType::Purch           : return TMSRouteAssignment_Purch::construct();
            default                             : return  null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manualAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manually assigns route and segment to load
    /// </summary>
    /// <param name="_loadId">
    /// Load id
    /// </param>
    /// <returns>
    /// Route code
    /// </returns>
    public static TMSRouteCode manualAssignment(WHSLoadId _loadId)
    {
        WHSLoadTable            loadTable = WHSLoadTable::find(_loadId);
        TMSRoute                route;
        TMSRouteSegment         segment;
        TMSAddressPhone         fromAdd = new TMSAddressPhone();
        TMSAddressPhone         toAdd   = new TMSAddressPhone();
        VendTable               vendTable;
        SalesTable              salesTable;
        WHSLoadLine             loadLine;
        InventLocation          warehouse;

        ttsbegin;

        select firstonly loadLine
            where loadLine.LoadId == loadTable.LoadId;

        warehouse = InventLocation::find(loadLine.warehouse());

        route.setRouteCode();
        route.InventSiteId                      = warehouse.InventSiteId;
        route.InventLocationId                  = warehouse.InventLocationId;
        route.Manual                         = NoYes::Yes;
        route.ShipUTCDateTime                = loadTable.LoadSchedShipUTCDateTime;
        route.insert();

        segment.RouteCode                    = route.RouteCode;
        segment.Sequence                     = 1;
        segment.CarrierCode                  = loadTable.CarrierCode;
        segment.CarrierServiceCode           = loadTable.CarrierServiceCode;
        segment.ModeCode                     = loadTable.ModeCode;
        segment.ScheduledShipUTCDateTime     = route.ShipUTCDateTime;

        salesTable = SalesTable::find(loadTable.OrderNum);

        if (loadLine.InventTransType == InventTransType::Sales 
            && !salesTable)
        {
            salesTable = SalesTable::find(loadLine.OrderNum);

            WHSLoadLine existsLoadLine;
            SalesTable anotherSalesOrder;

            select firstonly RecId from anotherSalesOrder 
                where  anotherSalesOrder.SalesId != salesTable.SalesId
                    && (  anotherSalesOrder.DlvTerm                 != salesTable.DlvTerm
                       || anotherSalesOrder.DeliveryName            != salesTable.DeliveryName
                       || anotherSalesOrder.ShipCarrierResidential  != salesTable.ShipCarrierResidential
                       || anotherSalesOrder.DeliveryPostalAddress   != salesTable.DeliveryPostalAddress)
                exists join existsLoadLine
                where existsLoadLine.OrderNum           == anotherSalesOrder.SalesId
                   && existsLoadLine.InventTransType    == InventTransType::Sales
                   && existsLoadLine.LoadId             == loadLine.LoadId;

            if (anotherSalesOrder.RecId)
            {
                salesTable = null;
            }
        }

        vendTable = VendTable::find(loadTable.AccountNum);

        if (loadLine.InventTransType == InventTransType::Sales && salesTable.RecId != 0)
        {
            fromAdd = TMSAddressPhone::initFromInventLocation(warehouse);
            toAdd   = TMSAddressPhone::initFromSalesTable(salesTable);

            segment.DlvTermId                       = salesTable.DlvTerm;
        }
        else if (loadLine.InventTransType == InventTransType::Purch && vendTable.RecId != 0)
        {
            fromAdd = TMSAddressPhone::initFromVendAccount(vendTable.AccountNum);
            toAdd  = TMSAddressPhone::initFromInventLocation(warehouse);
        }

        segment.OriginName          = fromAdd.parmName();
        segment.OriginLocation      = fromAdd.parmLocation();

        segment.DestinationName     = toAdd.parmName();
        segment.DestinationLocation = toAdd.parmLocation();

        segment.insert();

        route.addLoadToEntireRoute(_loadId, 1);

        ttscommit;

        return route.RouteCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>