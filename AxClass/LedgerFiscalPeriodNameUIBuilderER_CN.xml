<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalPeriodNameUIBuilderER_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerFiscalPeriodNameUIBuilderER_CN</c> UIBuilder class is for <c>LedgerFiscalPeriodNameContractER_CN</c> contract class.
/// </summary>
class LedgerFiscalPeriodNameUIBuilderER_CN extends SysOperationAutomaticUIBuilder
{
    DialogField             dialogFieldFromPeriod;
    DialogField             dialogFieldToPeriod;
    DialogField             dialogFieldFromDate;
    DialogField             dialogFieldToDate;

    FiscalCalendarPeriod    fromFiscalCalendarPeriod;
    FiscalCalendarPeriod    toFiscalCalendarPeriod;

    FormRun         dialogFormRun;
    Boolean         hasSetFormRunControlMethodOverload;

    const str EnabledPropertyName = 'Enabled';
    const str PeriodGroupName = 'PeriodGroup';
    const int ColumnNumber = 2;
    const str MainGroup = 'MainGrp';
    const str LookupMethodName = 'Lookup';
    const str LookupButton = 'LookupButton';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds ledger fiscal period name UI.
    /// </summary>
    public void build()
    {
        FormBuildGroupControl   formBuildGroupControl;

        super();

        formBuildGroupControl = this.dialog().formBuildDesign().control(PeriodGroupName);
        formBuildGroupControl.columns(ColumnNumber);
        formBuildGroupControl.frameType(FormFrameType::None);

        // Sets MainGrp back to main dialog form group.
        formBuildGroupControl = this.dialog().formBuildDesign().control(MainGroup);
        this.dialog().mainFormGroup(formBuildGroupControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerFiscalPeriodNameLookup_CN_OnClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles OnClosing event of <c>LedgerFiscalPeriodNameLookup_CN</c> form
    /// </summary>
    /// <param name="sender">xFormRun</param>
    /// <param name="e">FormEventArgs</param>
    private void LedgerFiscalPeriodNameLookup_CN_OnClosing(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        FormDataSource ds = formRun.dataSource(identifierStr(FiscalCalendarPeriod));
        var fiscalPeriod = ds.cursor() as FiscalCalendarPeriod;
        boolean isFromPeriod = formRun.args().parmEnum();

        this.setPeriodFromToDate(fiscalPeriod, isFromPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLookupFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a formrun for period name lookup.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form control of period name dialog field.
    /// </param>
    /// <param name="_isFromPeriod">
    /// A boolean value indicates this method shall set the from period or the end period.
    /// </param>
    /// <returns>
    /// Formrun of lookup form LedgerFiscalPeriodNameLookup_CN.
    /// </returns>
    protected FormRun buildLookupFormRun(
        FormStringControl   _formStringControl,
        boolean             _isFromPeriod)
    {
        Args                    args;
        FormRun                 formRun;
        Ledger                  ledger;

        args = new Args(formStr(LedgerFiscalPeriodNameLookup_CN));

        if (_isFromPeriod)
        {
            if (!fromFiscalCalendarPeriod)
            {
                select firstOnly StartDate from fromFiscalCalendarPeriod
                    exists join ledger
                    where ledger.PrimaryForLegalEntity          == CompanyInfo::current()
                        && ledger.FiscalCalendar                == fromFiscalCalendarPeriod.FiscalCalendar
                        && fromFiscalCalendarPeriod.Name        == _formStringControl.valueStr()
                        && fromFiscalCalendarPeriod.StartDate   == dialogFieldFromDate.value();
            }

            args.record(fromFiscalCalendarPeriod);
        }
        else
        {
            if (!toFiscalCalendarPeriod)
            {
                select firstOnly StartDate from toFiscalCalendarPeriod
                    exists join ledger
                    where ledger.PrimaryForLegalEntity          == CompanyInfo::current()
                        && ledger.FiscalCalendar                == toFiscalCalendarPeriod.FiscalCalendar
                        && toFiscalCalendarPeriod.Name          == _formStringControl.valueStr()
                        && toFiscalCalendarPeriod.EndDate       == dialogFieldToDate.value();
            }

            args.record(toFiscalCalendarPeriod);
        }
        args.caller(_formStringControl);
        args.parmObject(this);
        args.parmEnum(_isFromPeriod);
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.onClosing += eventhandler(this.LedgerFiscalPeriodNameLookup_CN_OnClosing);

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLookupFromPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for from period name dialog field.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form control of from period name dialog field.
    /// </param>
    protected void performLookupFromPeriod(FormStringControl _formStringControl)
    {
        _formStringControl.performFormLookup(this.buildLookupFormRun(_formStringControl, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromPeriodNameModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used for overriding form string control modified method.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form control of from period name dialog field.
    /// </param>
    /// <returns>
    /// True.
    /// </returns>
    protected boolean fromPeriodNameModified(FormStringControl _formStringControl)
    {
        FiscalCalendarPeriod                            fiscalCalendarPeriod;
        Ledger                                          ledger;
        ledgerFiscalPeriodNameContractER_CN             contract;

        contract = this.dataContractObject() as ledgerFiscalPeriodNameContractER_CN;
        if (_formStringControl.valueStr() != contract.parmFromPeriod())
        {
            // Manual modified the from period name, then find the from date
            if (_formStringControl.valueStr())
            {
                select firstOnly StartDate, Name from fiscalCalendarPeriod
                    exists join ledger
                    where ledger.PrimaryForLegalEntity  == CompanyInfo::current()
                        && ledger.FiscalCalendar        == fiscalCalendarPeriod.FiscalCalendar
                        && fiscalCalendarPeriod.Name    == _formStringControl.valueStr();
            }

            fromFiscalCalendarPeriod = fiscalCalendarPeriod;
            dialogFieldFromDate.value(fiscalCalendarPeriod.StartDate);

            if (contract)
            {
                contract.parmFromDate(fiscalCalendarPeriod.StartDate);
                contract.parmFromPeriod(fiscalCalendarPeriod.Name);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOverrideMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls method to override/register field control method.
    /// </summary>
    protected void modifyOverrideMethod()
    {
        this.overrideDialogFieldMethod(dialogFieldFromPeriod, LookupMethodName, methodStr(LedgerFiscalPeriodNameUIBuilderER_CN, performLookupFromPeriod), this);
        this.overrideDialogFieldMethod(dialogFieldFromPeriod, methodStr(FormStringControl, Modified), methodStr(LedgerFiscalPeriodNameUIBuilderER_CN, fromPeriodNameModified), this);
        this.overrideDialogFieldMethod(dialogFieldToPeriod, LookupMethodName, methodStr(LedgerFiscalPeriodNameUIBuilderER_CN, performLookupToPeriod), this);
        this.overrideDialogFieldMethod(dialogFieldToPeriod, methodStr(FormStringControl, Modified), methodStr(LedgerFiscalPeriodNameUIBuilderER_CN, toPeriodNameModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method to modify the property of field control
    /// </summary>
    protected void modifyProperty()
    {
        this.overrideDialogFieldProperty(dialogFieldToDate, EnabledPropertyName, NoYes::No);
        this.overrideDialogFieldProperty(dialogFieldFromDate, EnabledPropertyName, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method in order to initialize the dialog fields after the fields have been built.
    /// </summary>
    public void postBuild()
    {
        ledgerFiscalPeriodNameContractER_CN     contract;
        FiscalCalendarPeriod                    fiscalCalendarPeriod;
        Form                                    form;

        contract = this.dataContractObject();
        form = this.dialog().dialogForm().form();

        // From binding info, get the dialog fields
        dialogFieldFromPeriod   = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ledgerFiscalPeriodNameContractER_CN, parmFromPeriod));
        dialogFieldToPeriod     = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ledgerFiscalPeriodNameContractER_CN, parmToPeriod));
        dialogFieldFromDate     = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ledgerFiscalPeriodNameContractER_CN, parmFromDate));
        dialogFieldToDate       = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(ledgerFiscalPeriodNameContractER_CN, parmToDate));

        if (form.name() != FormStr(SrsReportViewerForm))
        {
            fiscalCalendarPeriod = LedgerFiscalCalendar::currentLedgePeriod_CN();
            if (!contract.parmFromPeriod())
            {
                dialogFieldFromPeriod.value(fiscalCalendarPeriod.Name);
                dialogFieldFromDate.value(fiscalCalendarPeriod.StartDate);
            }
            if (!contract.parmToPeriod())
            {
                dialogFieldToPeriod.value(fiscalCalendarPeriod.Name);
                dialogFieldToDate.value(fiscalCalendarPeriod.EndDate);
            }
        }

        super();
        this.modifyProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to register the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();

        super();

        dialogFormRun = dialogLocal.dialogForm().formRun();

        this.modifyOverrideMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodFromToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets back a date value to UI builder by parameter _isFromPeriod. this method shall be called in the period name lookup form.
    /// </summary>
    /// <param name="_fiscalCalendarPeriod">
    /// A record of FiscalCalendarPeriod.
    /// </param>
    /// <param name="_isFromPeriod">
    /// A boolean value indicates this method shall set the from period or the end period.
    /// </param>
    private void setPeriodFromToDate(
        FiscalCalendarPeriod    _fiscalCalendarPeriod,
        boolean                 _isFromPeriod)
    {
        ledgerFiscalPeriodNameContractER_CN      contract;

        contract = this.dataContractObject() as ledgerFiscalPeriodNameContractER_CN;

        if (_isFromPeriod)
        {
            fromFiscalCalendarPeriod        = _fiscalCalendarPeriod;
            dialogFieldFromDate.value(_fiscalCalendarPeriod.StartDate);
            if (contract)
            {
                contract.parmFromDate(_fiscalCalendarPeriod.StartDate);
                contract.parmFromPeriod(_fiscalCalendarPeriod.Name);
            }
        }
        else
        {
            toFiscalCalendarPeriod      = _fiscalCalendarPeriod;
            dialogFieldToDate.value(_fiscalCalendarPeriod.EndDate);
            if (contract)
            {
                contract.parmToDate(_fiscalCalendarPeriod.EndDate);
                contract.parmToPeriod(_fiscalCalendarPeriod.Name);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideDialogFieldAlwaysShowLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the dialog field control property to let it show lookup button always.
    /// </summary>
    /// <param name="_dialogField">
    /// Dialog field, shall be initialized before PostBuild super() call.
    /// </param>
    protected void overrideDialogFieldAlwaysShowLookup(DialogField  _dialogField)
    {
        this.overrideDialogFieldProperty(_dialogField, LookupButton, FormLookupButton::Always);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLookupToPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for to period name dialog field.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form control of to period name dialog field.
    /// </param>
    protected void performLookupToPeriod(FormStringControl _formStringControl)
    {
        _formStringControl.performFormLookup(this.buildLookupFormRun(_formStringControl, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toPeriodNameModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used for overriding form string control modified method.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form control of to period name dialog field.
    /// </param>
    /// <returns>
    /// True.
    /// </returns>
    protected boolean toPeriodNameModified(FormStringControl _formStringControl)
    {
        FiscalCalendarPeriod                        fiscalCalendarPeriod;
        Ledger                                      ledger;
        ledgerFiscalPeriodNameContractER_CN         contract;

        contract = this.dataContractObject() as ledgerFiscalPeriodNameContractER_CN;
        if (_formStringControl.valueStr() != contract.parmToPeriod())
        {
            // Manual modified the to period name, then find the to date
            if (_formStringControl.valueStr())
            {
                select firstOnly EndDate, Name from fiscalCalendarPeriod
                    exists join ledger
                    where ledger.PrimaryForLegalEntity  == CompanyInfo::current()
                        && ledger.FiscalCalendar        == fiscalCalendarPeriod.FiscalCalendar
                        && fiscalCalendarPeriod.Name    == _formStringControl.valueStr();
            }

            toFiscalCalendarPeriod = fiscalCalendarPeriod;
            dialogFieldToDate.value(fiscalCalendarPeriod.EndDate);
            if (contract)
            {
                contract.parmToDate(fiscalCalendarPeriod.EndDate);
                contract.parmToPeriod(fiscalCalendarPeriod.Name);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideDialogFieldMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the dialog field method.
    /// </summary>
    /// <param name="_dialogField">
    /// Dialog field, shall be initialized before PostBuild super() call.
    /// </param>
    /// <param name="_controlMethodName">
    /// The control method name which method was overrided.
    /// </param>
    /// <param name="_objMethodName">
    /// The object method name on which the override method resides.
    /// </param>
    /// <param name="_object">
    /// The object on which the override method resides.
    /// </param>
    protected void overrideDialogFieldMethod(
        DialogField     _dialogField,
        MethodName      _controlMethodName,
        MethodName      _objMethodName,
        Object          _object = this)
    {
        if (_dialogField)
        {
            // Check whether need to set the controlMethodOverload property.
            if (!hasSetFormRunControlMethodOverload && dialogFormRun)
            {
                dialogFormRun.controlMethodOverload(false);
                hasSetFormRunControlMethodOverload = true;
            }

            _dialogField.registerOverrideMethod(_controlMethodName, _objMethodName, _object);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideDialogFieldProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the dialog field property.
    /// </summary>
    /// <param name="_dialogField">
    /// Dialog field, shall be initialized before PostBuild super() call.
    /// </param>
    /// <param name="_controlPropertyName">
    /// Field control name.
    /// </param>
    /// <param name="_propertyValue">
    /// Property value.
    /// </param>
    protected void overrideDialogFieldProperty(
        DialogField     _dialogField,
        Name            _controlPropertyName,
        Anytype         _propertyValue)
    {
        #Define.PropertyMethodParameterCnt(1)

        DictClass           dictClass;
        DictMethod          dictMethod;
        Counter             i;
        boolean             found;
        ExecutePermission   executePermission;

        if (_dialogField)
        {
            dictClass = new DictClass(classIdGet(_dialogField));
            // Check whether has the right property method
            for (i = 1; i <= dictClass.objectMethodCnt(); i++)
            {
                dictMethod = dictClass.objectMethodObject(i);
                if (dictMethod.name()               == _controlPropertyName
                    && dictMethod.parameterCnt()    == #PropertyMethodParameterCnt)
                {
                    found = true;
                    break;
                }
            }

            if (found)
            {
                executePermission = new ExecutePermission();
                executePermission.assert();

                dictClass.callObject(_controlPropertyName, _dialogField, _propertyValue);
                CodeAccessPermission::revertAssert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>