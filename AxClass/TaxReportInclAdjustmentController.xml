<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportInclAdjustmentController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportInclAdjustmentController</c> class handles the business logic for the
///    <c>TaxReportInclAdjustment</c> report.
/// </summary>
class TaxReportInclAdjustmentController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        TaxReportInclAdjustmentContract taxReportInclAdjustmentContract = this.parmReportContract().parmRdpContract();
        this.setParameters(taxReportInclAdjustmentContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the values for the parameters.
    /// </summary>
    /// <param name="_taxReportInclAdjustmentContract">
    /// The <c>TaxReportInclAdjustmentContract</c> contract class.
    /// </param>
    public void setParameters(TaxReportInclAdjustmentContract _taxReportInclAdjustmentContract)
    {
        TaxReportVoucher taxReportVoucher;
        TaxReportAdjustTrans taxReportAdjustTrans;
        TransDate fromDate;
        TransDate toDate;
        TransDate transDate;
        TaxPeriod taxPeriod;
        Voucher voucher;
        NoYes taxReported;

        if (this.parmArgs() && this.parmArgs().dataset() == tableNum(TaxReportVoucher))
        {
            taxReportVoucher = this.parmArgs().record();
            taxPeriod = taxReportVoucher.TaxPeriod;
            fromDate = taxReportVoucher.FromDate;
            toDate = taxReportVoucher.ToDate;
            transDate = taxReportVoucher.TransDate;
            voucher = taxReportVoucher.Voucher;
            taxReported = true;
        }
        else if (this.parmArgs() && classIdGet(this.parmArgs().parmObject()) == classNum(TaxReportAdjustTrans))
        {
            taxReportAdjustTrans = this.parmArgs().parmObject();
            taxPeriod = taxReportAdjustTrans.taxPeriod();
            fromDate = taxReportAdjustTrans.fromDate();
            toDate = taxReportAdjustTrans.toDate();
            taxReported = taxReportAdjustTrans.taxReported();
            voucher = taxReportAdjustTrans.voucher();
            transDate = taxReportAdjustTrans.transDate();
        }

        _taxReportInclAdjustmentContract.parmTaxPeriod(taxPeriod);
        _taxReportInclAdjustmentContract.parmFromDate(fromDate);
        _taxReportInclAdjustmentContract.parmToDate(toDate);
        _taxReportInclAdjustmentContract.parmTransDate(transDate);
        _taxReportInclAdjustmentContract.parmVoucher(voucher);
        _taxReportInclAdjustmentContract.parmTaxReported(taxReported);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxReportInclAdjustmentController controller = new TaxReportInclAdjustmentController();
        controller.parmReportName(ssrsReportStr(TaxReportInclAdjustment, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>