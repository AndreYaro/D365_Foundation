<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesOrderTaxTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static final class MCRSalesOrderTaxTotals
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEstimatedTaxAmountForReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get estimated tax amount (including estimated tax adjustment) based on invoice for return order.
    /// </summary>
    /// <param name="_salesTable">Buffer of the return order.</param>
    /// <returns>Estimated tax amount (including estimated tax adjustment)</returns>
    internal static TaxAmountCur getEstimatedTaxAmountForReturnOrder(SalesTable _salesTable)
    {
        TaxAmountCur taxAdjustmentAmountCur = 0;

        CurrencyCode currencyCode = _salesTable.CurrencyCode;
        SalesLine salesLine;

        while select RefReturnInvoiceTrans_W, ExpectedRetQty from salesLine
            where salesLine.SalesId == _salesTable.SalesId
        {
            CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(salesLine.RefReturnInvoiceTrans_W);
            if (!custInvoiceTrans)
            {
                continue;
            }

            CustInvoiceJour custInvoiceJour = CustInvoiceJour::findFromCustInvoiceTrans(
                custInvoiceTrans.SalesId,
                custInvoiceTrans.InvoiceId,
                custInvoiceTrans.InvoiceDate,
                custInvoiceTrans.NumberSequenceGroup);
                InventQty totalQty = -custInvoiceTrans.Qty;// Mark negative as for return.

            TaxTrans taxTrans;
            while select SourceRegulateAmountCur from taxTrans
            where taxTrans.Voucher == custInvoiceJour.LedgerVoucher
                && taxTrans.TransDate == custInvoiceTrans.InvoiceDate
                && taxTrans.InventTransId == custInvoiceTrans.InventTransId
                && taxTrans.TaxDirection != TaxDirection::UseTax
                && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                && taxTrans.TaxOrigin != TaxOrigin::Transfer
                && taxTrans.SourceRegulateAmountCur != 0
            {
                taxAdjustmentAmountCur += TaxRegulation::getTaxRegulationAmountCur(
                    taxTrans,
                    currencyCode,
                    totalQty,
                    salesLine.ExpectedRetQty);
            }
        }

        return taxAdjustmentAmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>