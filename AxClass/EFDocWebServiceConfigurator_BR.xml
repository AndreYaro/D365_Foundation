<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocWebServiceConfigurator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is reponsible for retrieving web service information
/// from an intersection of AX XML format capabilites (<c>EFDocFormatClassInfo_BR</c>)
/// and NF-e parameters (<c>EFDocWebServiceParameters_BR</c>).
/// </summary>
class EFDocWebServiceConfigurator_BR
{
    EFDocEnvironment_BR             environment;
    EFDocAuthorityId_BR             authorityId;
    EFiscalDocVersion_BR            wsVersion;
    EFDocWebService_BR              webService;

    EFDocFormatClassInfo_BR         formatClassInfo;
    EFDocWebServiceParameters_BR    wsParameters;
    EFDocAuthority_BR               authority;

    boolean                         loaded;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a valid configuration was found for the given parameters.
    /// </summary>
    /// <returns>
    /// true if a valid configuration was found; false otherwise.
    /// </returns>
    public boolean configurationFound()
    {
        if (!loaded)
        {
            this.load();
        }
        return formatClassInfo.RecId && wsParameters.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncoderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the encoder type of the webservice from the given parameters
    /// which is used to send the XML message.
    /// </summary>
    /// <returns>
    /// The encoder type to use to send the XML message.
    /// </returns>
    public EFDocEncoderType getEncoderType()
    {
        if (!loaded)
        {
            this.load();
        }
        return wsParameters.EncoderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the class ID of the class that implements <c>IEFDocMsgFormat</c>
    /// to format XML messages.
    /// </summary>
    /// <returns>
    /// Class ID of a class that implements <c>IEFDocMsgFormat</c> for the current parameters.
    /// </returns>
    public ClassId getFormatClassId()
    {
        if (!loaded)
        {
            this.load();
        }
        return formatClassInfo.classId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the XML version that AX is able to format for the given parameters.
    /// </summary>
    /// <returns>
    /// The XML version that AX is able to format for the given parameters.
    /// </returns>
    public EFDocFormatVersion_BR getFormatVersion()
    {
        if (!loaded)
        {
            this.load();
        }
        return formatClassInfo.Version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSoapVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the SOAP version of the webservice to send the XML message from
    /// the given parameters.
    /// </summary>
    /// <returns>
    /// The SOAP version to send the XML message.
    /// </returns>
    public EFDocSoapVersion getSoapVersion()
    {
        if (!loaded)
        {
            this.load();
        }
        return wsParameters.SoapVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the URL of the webservice to send the XML message from
    /// the given parameters.
    /// </summary>
    /// <returns>
    /// The URL to send the XML message.
    /// </returns>
    public URL getURL()
    {
        if (!loaded)
        {
            this.load();
        }
        return wsParameters.URL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
        private void load()
    {
        select firstonly classid, version from formatClassInfo
            order by version desc
            where formatClassInfo.WebServiceVersion == wsVersion
               && formatClassInfo.WebService        == webService
            join URL, EncoderType, SoapVersion from wsParameters
            where wsParameters.Authority    == authorityId
               && wsParameters.Version      == formatClassInfo.Version
               && wsParameters.Environment  == environment
               && wsParameters.WebService   == webService;

        select authority
            where authority.AuthorityId == authorityId;

        loaded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_environment">
    /// <c>EFDocEnvironment_BR</c> where the connection will be established.
    /// </param>
    /// <param name="_version">
    /// <c>EFiscalDocVersion_BR</c> to be used.
    /// </param>
    /// <param name="_authority">
    /// <c>EFDocAuthorityId_BR</c> that will be used.
    /// </param>
    /// <param name="_webService">
    /// <c>EFDocWebService_BR</c> that will be used.
    /// </param>
    public void new (EFDocEnvironment_BR _environment, EFiscalDocVersion_BR _version, EFDocAuthorityId_BR _authority, EFDocWebService_BR _webService)
    {
        environment = _environment;
        wsVersion   = _version;
        authorityId = _authority;
        webService = _webService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthorityId</Name>
				<Source><![CDATA[
    public EFDocAuthorityId_BR parmAuthorityId (EFDocAuthorityId_BR _authority = authorityId)
    {
        authorityId = _authority;
        return authorityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWSVersion</Name>
				<Source><![CDATA[
    public EFiscalDocVersion_BR parmWSVersion(EFiscalDocVersion_BR _version = wsVersion)
    {
        wsVersion = _version;
        return wsVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldConvertAccentedChars</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if accented characters should be converted for this web
    /// service configuration.
    /// </summary>
    /// <returns>
    /// true if accented characters should be converted; false otherwise.
    /// </returns>
    public boolean shouldConvertAccentedChars()
    {
        if (!loaded)
        {
            this.load();
        }
        return authority.convertAccentedCharacters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>