<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAverageHeadcountFundByBranch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for preparing  average number or fund amount
/// separated by branch.
/// </summary>
class RPayAverageHeadcountFundByBranch
{
    RPayGroup       payGroup;
    ReportPeriod_RU payPeriod;
    boolean         calcAvgHeadcount;
    Map             emplDataByBranchMap;
    RPayCounterUnit fund;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs data calculation.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calc()
    {
        RPayAverageQuantityCountGroupByBranch   averageQuantityCountGroup;

        averageQuantityCountGroup = RPayAverageQuantityCountGroupByBranch::newAverageQuantityCountGroupByBranch(
            payPeriod,
            payGroup,
            maxdate(),
            fund,
            false,
            calcAvgHeadcount ? UnknownNoYes::Yes : UnknownNoYes::No);

        averageQuantityCountGroup.countQuantity();

        emplDataByBranchMap = Map::create(averageQuantityCountGroup.getEmplDataByBranchMap());
    }
]]></Source>
			</Method>
			<Method>
				<Name>getEmplDataByBranchMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns calculated data.
    /// </summary>
    /// <returns>
    /// The packed map with data.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getEmplDataByBranchMap()
    {
        this.calc();

        return emplDataByBranchMap.pack();
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        emplDataByBranchMap = new Map(Types::String, Types::Real);
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAverageHeadcount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Boolean parmAverageHeadcount(Boolean _calcAvgHeadcount = calcAvgHeadcount)
    {
        calcAvgHeadcount = _calcAvgHeadcount;

        return calcAvgHeadcount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFund</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayCounterUnit parmFund(RPayCounterUnit _fund = fund)
    {
        fund = _fund;

        return fund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayGroup parmPayGroup(RPayGroup _payGroup = payGroup)
    {
        payGroup = _payGroup;

        return payGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU parmPayPeriod(ReportPeriod_RU _payPeriod = payPeriod)
    {
        payPeriod = _payPeriod;

        return payPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs calculation of average headcount or fund amount.
    /// </summary>
    /// <param name="_transDate">
    /// The calculation period.
    /// </param>
    /// <param name="_calcAvgHeadcount">
    /// Determines whether average headcount or fund amount should be calculated.
    /// </param>
    /// <returns>
    /// The packed map with calculated data.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getEmplData(TransDate _transDate, boolean _calcAvgHeadcount)
    {
        RPayTaxParameters rPayTaxParameters = RPayTaxParameters::find();

        RPayAverageHeadcountFundByBranch avgHeadcountFundByBranch = RPayAverageHeadcountFundByBranch::newAverageHeadcountFundByBranch(
            endmth(_transDate),
            _calcAvgHeadcount,
            rPayTaxParameters.HeadcountGroup,
            rPayTaxParameters.HeadcountFund);

        return avgHeadcountFundByBranch.getEmplDataByBranchMap();
    }
]]></Source>
			</Method>
			<Method>
				<Name>newAverageHeadcountFundByBranch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the class <c>RPayAverageHeadcountFundByBranch</c>.
    /// </summary>
    /// <param name="_payPeriod">
    /// Calculation period.
    /// </param>
    /// <param name="_calcAvgHeadcount">
    /// Determines whether average headcount or fund amount should be calculated.
    /// </param>
    /// <param name="_payGroup">
    /// Payroll group.
    /// </param>
    /// <param name="_baseFund">
    /// The code of the fund base.
    /// </param>
    /// <returns>
    /// the instance of the class <c>RPayAverageHeadcountFundByBranch</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageHeadcountFundByBranch newAverageHeadcountFundByBranch(
        ReportPeriod_RU _payPeriod,
        boolean         _calcAvgHeadcount,
        RPayGroup       _payGroup,
        RPayCounterUnit _baseFund)
    {
        RPayAverageHeadcountFundByBranch averageHeadcountFundByBranch = new RPayAverageHeadcountFundByBranch();

        averageHeadcountFundByBranch.parmPayPeriod(_payPeriod);
        averageHeadcountFundByBranch.parmAverageHeadcount(_calcAvgHeadcount);
        averageHeadcountFundByBranch.parmPayGroup(_payGroup);
        averageHeadcountFundByBranch.parmFund(_baseFund);

        averageHeadcountFundByBranch.init();

        return averageHeadcountFundByBranch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>