<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildWorkbenchForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSLoadBuildWorkbenchForm</c> class contains form logic for <c>TMSLoadBuildWorkbench</c> form.
/// </summary>
class TMSLoadBuildWorkbenchForm
{
    FormRun                         formRun;
    TMSLoadBuildLoadTemplateList    loadBuildLoadTemplateList;
    TMSLoadBuildQueryCriteria       loadBuildQueryCriteria;
    container                       deliveryZipCodes;
    TMSRoute                        scheduledRoute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearInvalidInventLocationIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the warehouse if the site is changed.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The current location id.
    /// </param>
    /// <param name="_inventSiteId">
    /// The new site id.
    /// </param>
    /// <returns>
    /// The updated warehouse value.
    /// </returns>
    public InventLocationId clearInvalidInventLocationIdFilter(InventLocationId _inventLocationId, InventSiteId _inventSiteId)
    {
        if (_inventSiteId
        &&  _inventLocationId
        &&  InventLocation::find(_inventLocationId).InventSiteId != _inventSiteId)
        {
            _inventLocationId = '';
        }

        return _inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadBuildProposeServiceMenuItem</Name>
				<Source><![CDATA[
    private MenuFunction getLoadBuildProposeServiceMenuItem()
    {
        return new MenuFunction(menuitemActionStr(TMSLoadBuildProposeService), MenuItemType::Action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadBuildStrategyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Load build strategy ID.
    /// </summary>
    /// <returns>
    /// Load build strategy ID.
    /// </returns>
    protected TMSLoadBuildStrategyId getLoadBuildStrategyId()
    {
        FormReferenceGroupControl formControl = formRun.design().controlName(formControlStr(TMSLoadBuildWorkbench, Strategy)) as FormReferenceGroupControl;
        return  formControl.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadBuildSupplyDemandType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves load build supply demand type.
    /// </summary>
    /// <returns>
    /// Load build supply demand type.
    /// </returns>
    protected TMSLoadBuildSupplyDemandType getLoadBuildSupplyDemandType()
    {
        if (WHSLoadBuildWorkbenchSupplyDemandTypeFlight::instance().isEnabled())
        {
            TMSILoadBuildWorkbench loadBuildWorkBench = formRun as TMSILoadBuildWorkbench;
            return loadBuildWorkBench.getLoadBuildSupplyDemandType();
        }
        else
        {
            FormComboBoxControl formControl = formRun.design().controlName(formControlStr(TMSLoadBuildWorkbench, TMSSupplyDemandType)) as FormComboBoxControl;
            return  formControl.selection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedSupplyDemandQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the packed query run object for the supply demand records.
    /// </summary>
    /// <returns>
    /// A container with the packed query run object for the supply demand records.
    /// </returns>
    protected container getPackedSupplyDemandQueryRun()
    {
        TMSLoadBuildQueryCriteria           localLoadBuildQueryCriteria = this.parmLoadBuildQueryCriteria();
        TMSLoadBuildQueryBuilderFactory     queryBuilderFactory = TMSLoadBuildQueryBuilderFactory::construct();
        TMSLoadBuildQueryBuilder            queryBuilder = queryBuilderFactory.getQueryBuilder(localLoadBuildQueryCriteria.loadBuildSupplyDemandType());
        Query                               supplyDemandQuery = queryBuilder.buildQuery(localLoadBuildQueryCriteria, deliveryZipCodes);
        SysQueryRun                         queryRun;

        queryRun = new SysQueryRun(supplyDemandQuery);
        return queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryZipCodes</Name>
				<Source><![CDATA[
    public container parmDeliveryZipCodes(container _deliveryZipCodes = deliveryZipCodes)
    {
        deliveryZipCodes = _deliveryZipCodes;
        return deliveryZipCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBuildLoadTemplateList</Name>
				<Source><![CDATA[
    public TMSLoadBuildLoadTemplateList parmLoadBuildLoadTemplateList(TMSLoadBuildLoadTemplateList _loadBuildLoadTemplateList = loadBuildLoadTemplateList)
    {
        loadBuildLoadTemplateList = _loadBuildLoadTemplateList;
        return loadBuildLoadTemplateList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBuildQueryCriteria</Name>
				<Source><![CDATA[
    public TMSLoadBuildQueryCriteria parmLoadBuildQueryCriteria(TMSLoadBuildQueryCriteria _loadBuildQueryCriteria = loadBuildQueryCriteria)
    {
        loadBuildQueryCriteria = _loadBuildQueryCriteria;
        return loadBuildQueryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduledRoute</Name>
				<Source><![CDATA[
    public TMSRoute parmScheduledRoute(TMSRoute _scheduledRoute = scheduledRoute)
    {
        scheduledRoute = _scheduledRoute;
        return scheduledRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposeLoadsClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles click of the "ProposeLoads" button.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Input data not set correctly.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The proposal of the loads fail.
    /// </exception>
    public void proposeLoadsClicked()
    {
        TMSLoadBuildProposeService      loadBuildProposeService = TMSLoadBuildProposeService::construct();
        TMSLoadBuildProposeDataContract loadBuildProposeDataContract = TMSLoadBuildProposeDataContract::construct();
        Args                            args = new Args();
        MenuFunction                    menuFunction = this.getLoadBuildProposeServiceMenuItem();

        loadBuildProposeDataContract.parmLoadBuildStrategyId(this.getLoadBuildStrategyId());
        loadBuildProposeDataContract.parmLoadBuildSupplyDemandType(this.getLoadBuildSupplyDemandType());
        loadBuildProposeDataContract.parmLoadTemplateList(this.parmLoadBuildLoadTemplateList());
        loadBuildProposeDataContract.parmPackedSupplyDemandQueryRun(this.getPackedSupplyDemandQueryRun());
        loadBuildProposeDataContract.parmScheduledRouteCode(scheduledRoute.RouteCode);

        args.parmObject(loadBuildProposeDataContract);
        args.parmEnumType(enumNum(NoYes));
        args.parmEnum(this.showProposedLoadsForm());
        args.caller(this);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProposedLoadsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to show the Proposed loads form.
    /// </summary>
    /// <returns>
    /// A "yes" value to open the Proposed loads form; A "no" value for not opening the Proposed loads form.
    /// </returns>
    protected NoYes showProposedLoadsForm()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasProposeServiceAccessRights</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether current user has access to the propose loads operation,
    /// accessed by the <c>TMSLoadBuildProposeService</c> action menu item.
    /// </summary>
    /// <returns>
    /// True if the user has access to the operation; otherwise false.
    /// </returns>
    public boolean userHasProposeServiceAccessRights()
    {
        MenuFunction   menuFunction = this.getLoadBuildProposeServiceMenuItem();

        return menuFunction != null && menuFunction.checkAccessRights();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildWorkbenchForm construct()
    {
        return new TMSLoadBuildWorkbenchForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLoadBuildTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the TMS load building template record based on the record ID.
    /// </summary>
    /// <param name="_loadBuildTemplateId">
    /// The record ID of the load build template record.
    /// </param>
    public static void deleteLoadBuildTemplate(TMSLoadBuildTemplateId _loadBuildTemplateId)
    {
        TMSLoadBuildTemplate template;

        ttsbegin;
        //don't skip delete actions since we want all related data to be cleaned up
        delete_from template
            where template.RecId == _loadBuildTemplateId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>TMSLoadBuildWorkbenchForm</c> class.
    /// </summary>
    /// <param name="_formRun">
    /// The form run object of the owning form instance.
    /// </param>
    /// <returns>
    /// A new instance of <c>TMSLoadBuildWorkbenchForm</c> class.
    /// </returns>
    public static TMSLoadBuildWorkbenchForm newParameters(FormRun _formRun)
    {
        TMSLoadBuildWorkbenchForm   tmsLoadBuildWorkbenchForm = TMSLoadBuildWorkbenchForm::construct();

        tmsLoadBuildWorkbenchForm.parmFormRun(_formRun);
        return tmsLoadBuildWorkbenchForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostalCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified postal codes.
    /// </summary>
    /// <returns>
    /// true if the specified postal codes are valid; otherwise, false.
    /// </returns>
    public static boolean validatePostalCodes(
        TMSPostalCodeFromRegExpression  _originFromPostalCode,
        TMSPostalCodeToRegExpression    _originToPostalCode,
        TMSPostalCodeFromRegExpression  _destinationFromPostalCode,
        TMSPostalCodeToRegExpression    _destinationToPostalCode)
    {
        boolean ret = true;

        if (!(_originFromPostalCode && _originToPostalCode) &&
            (_originFromPostalCode || _originToPostalCode))
        {
            error("@SYP4861103");
            ret = false;
        }

        if (!(_destinationFromPostalCode && _destinationToPostalCode) &&
            (_destinationFromPostalCode || _destinationToPostalCode))
        {
            error("@SYP4861103");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyWHSItemFilter</Name>
				<Source><![CDATA[
    private static void applyWHSItemFilter(Query _query)
    {
        QueryBuildDataSource qtyOnLoadView = _query.dataSourceTable(tableNum(WHSQtyOnLoadView));
        QueryBuildDataSource inventTransOrigin = qtyOnLoadView.addDataSource(tableNum(InventTransOrigin));
        inventTransOrigin.joinMode(JoinMode::ExistsJoin);
        inventTransOrigin.addLink(fieldNum(WHSQtyOnLoadView, InventTransId), fieldNum(InventTransOrigin, InventTransId), qtyOnLoadView.name());

        QueryBuildDataSource inventEnabled = inventTransOrigin.addDataSource(tableNum(WHSInventEnabled));
        inventEnabled.joinMode(JoinMode::ExistsJoin);
        inventEnabled.addLink(fieldNum(InventTransOrigin, ItemId), fieldNum(WHSInventEnabled, ItemId), inventTransOrigin.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new query run object with a table corresponding to the <c>TMSLoadBuildSupplyDemandType</c> type.
    /// </summary>
    /// <returns>
    /// A new query.
    /// </returns>
    [Replaceable]
    public static SysQueryRun createNewQueryRun(TMSLoadBuildSupplyDemandType _supplyDemandType)
    {
        SysQueryRun     queryCriteria;

        switch (_supplyDemandType)
        {
            case TMSLoadBuildSupplyDemandType::Sales:
                queryCriteria = new SysQueryRun(queryStr(WHSLPWFilterSales));
                TMSLoadBuildWorkbenchForm::applyWHSItemFilter(queryCriteria.query());
                break;
            case TMSLoadBuildSupplyDemandType::Purchase:
                if (WHSPurchLine::useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad())
                {
                    queryCriteria = new SysQueryRun(queryStr(WHSLPWFilterPurchQtyLeftToLoad));
                }
                else
                {
                    queryCriteria = new SysQueryRun(queryStr(WHSLPWFilterPurch));
                }
                break;
            case TMSLoadBuildSupplyDemandType::Shipment:
                queryCriteria = new SysQueryRun(queryStr(WHSLPWFilterShipment));
                break;
            case TMSLoadBuildSupplyDemandType::TransferIssue:
                queryCriteria = new SysQueryRun(queryStr(WHSLPWFilterTransfer));
                TMSLoadBuildWorkbenchForm::applyWHSItemFilter(queryCriteria.query());
                break;
            default:
                throw error(strFmt("@SYS112535", staticMethodStr(TMSLoadBuildWorkbenchForm, createNewQueryRun), varStr(_supplyDemandType)));
        }
        return queryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMoveButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enable/disable move buttons for the active datasource depending on the row selected.
    /// </summary>
    /// <param name="_formDataSource">
    ///     Form datasource to enable/disable buttons for.
    /// </param>
    /// <param name="_moveUp">
    ///     Form control for moving rows up.
    /// </param>
    /// <param name="_moveDown">
    ///     Form control for moving rows down.
    /// </param>
    public static void validateMoveButtons(
        FormDataSource    _formDataSource,
        FormButtonControl _moveUp,
        FormButtonControl _moveDown)
    {
        int currentlySelectedRow = _formDataSource.getPosition();

        _moveUp.enabled(currentlySelectedRow > 1);
        _moveDown.enabled(currentlySelectedRow != _formDataSource.numberOfRowsLoaded());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>