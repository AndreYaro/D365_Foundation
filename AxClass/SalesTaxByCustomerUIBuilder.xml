<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTaxByCustomerUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTaxByCustomerUIBuilder</c> class is the <c>UIBuilder</c> class for the
/// <c>SalesTaxByCustomer</c> Microsoft SQL Server Reporting Services report.
/// </summary>
/// <remarks>
/// The <c>SalesTaxByCustomer</c> Reporting Services report is a combined Reporting Services report of
/// the <c>CustTransTaxTrans</c> and <c>TaxAmountByCustomer</c> Reporting Services reports.
/// </remarks>
public class SalesTaxByCustomerUIBuilder extends SrsReportDataContractUIBuilder
{
    #define.DynamicParam("SalesTaxByCustomerDS_DynamicParameter")

    SalesTaxByCustomerContract contract;
    SysOperationQueryDataContractInfo queryContract;
    Query reportQuery;

    DialogField billingClassificationField;

    #define.BillingClassification('BillingClassification')
    #define.InclTransWithNoBillingClass('InclTransWithNoBillingClass')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billingClassificationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a multi-select billing classification lookup dialog box field.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void billingClassificationLookup()
    {
        Query       query               = new Query(queryStr(CustBillingClassificationLookup));
        TableId     multiSelectTableNum = tableNum(CustBillingClassification);
        container   selectedFields      = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(CustBillingClassification, BillingClassification))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), billingClassificationField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the report query.
    /// </summary>
    public void build()
    {
        Map   queryMap = new Map(Types::String, Types::Class);

        boolean     isPublicSectorScenario = false;

        contract = this.dataContractObject() as SalesTaxByCustomerContract;

        queryMap = this.controller().getDataContractInfoObjects();
        queryContract = queryMap.lookup(#DynamicParam);
        reportQuery = queryContract.parmQuery();

        super();

        billingClassificationField = this.bindInfo().getDialogField(contract, #BillingClassification);
        DialogField inclTransWithNoBillingClassField = this.bindInfo().getDialogField(contract, #InclTransWithNoBillingClass);

        isPublicSectorScenario  = CustParameters::isBillingClassificationEnabled();
        billingClassificationField.helpText(literalStr("@SPS677"));
        inclTransWithNoBillingClassField.helpText(literalStr("@SPS1009"));

        billingClassificationField.visible(isPublicSectorScenario);
        inclTransWithNoBillingClassField.visible(isPublicSectorScenario);
        billingClassificationField.lookupButton(FormLookupButton::Always);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers data from the dialog into the data contract object.
    /// </summary>
    public void getFromDialog()
    {
        if (CustParameters::isBillingClassificationEnabled())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCollectionDialogField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the dialog field for a collection to use the multi-select control.
    /// </summary>
    /// <remarks>
    /// Called during postRun to change the dialog field for collection type to use multi-select control
    /// </remarks>
    protected void modifyCollectionDialogField()
    {
        SysLookupMultiSelectCtrl multiSelectControl;

        FormRun             formRun = this.dialog().formRun();
        int                 multiSelectTableNum = tableNum(SysOperationMultiSelectTmp);

        container selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(SysOperationMultiSelectTmp, Values))];

        // if there are any collection types, then we should show the multi-value control if possible.
        if (multiSelectQueryMap)
        {
            if (!multiSelectControlMap)
            {
                // The multi-select controls are created only once.  Valid values are updated via QueryRun updates
                multiSelectControlMap = new Map(Types::Class, Types::Class);
            }

            MapEnumerator mapEnum = multiSelectQueryMap.getEnumerator();
            while (mapEnum.moveNext())
            {
                DialogField dialogField = mapEnum.currentKey();
                QueryRun multiSelectQueryRun = mapEnum.currentValue();

                if (dialogField.name() == billingClassificationField.name())
                {
                    continue;
                }

                // get the underlying control from formRun.
                if (multiSelectQueryRun)
                {
                    FormStringControl strControl = dialogField.control();

                    if (!multiSelectControlMap.exists(dialogField))
                    {
                        // initialization: create the controls
                        multiSelectControl = SysLookupMultiSelectCtrl::constructWithQueryRun(this.dialog().dialogForm().formRun(), strControl, multiSelectQueryRun, false, selectedFields);
                        multiSelectControlMap.insert(dialogField, multiSelectControl);
                    }
                    else
                    {
                        // parameter refresh: update the QueryRun
                        multiSelectControl = multiSelectControlMap.lookup(dialogField);
                        multiSelectControl.refreshQueryRun(multiSelectQueryRun);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report dialog based on the parameter selection.
    /// </summary>
    /// <remarks>
    /// Gets required dynamic parameters.
    /// </remarks>
    public void postRun()
    {
        if (CustParameters::isBillingClassificationEnabled())
        {
            this.billingClassificationLookup();
        }

        super();

        this.dialog().dialogForm().formRun().controlMethodOverload(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
