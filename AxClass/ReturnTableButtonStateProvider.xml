<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReturnTableButtonStateProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReturnTableButtonStateProvider</c> class provides the set of rules to manage behavior of the
///    buttons on return order list page and task form.
/// </summary>
/// <remarks>
///    This class implements the <c>ButtonStateProvider</c> interface.
/// </remarks>
class ReturnTableButtonStateProvider implements ButtonStateProvider
{
    SalesTable  salesTable;
    SalesLine   salesLine;

    // Header actions
    boolean     packingSlipButtonEnabled;
    boolean     purchTableThisCompanyEnabled;
    boolean     interCompanySalesOrderEnabled;
    boolean     interCompanyOriginalSalesOrderEnabled;
    boolean     interCompanyPurchOrderEnabled;

    // Line actions
    boolean     markupTransLineEnabled;
    boolean     returnReplacementEnabled;
    boolean     interCompanyEnabled;
    boolean     inventTransRegisterEnabled;
    boolean     returnReturnAllowReservationEnabled;
    boolean     returnReturnDispositionCodeIdEnabled;

    boolean     referencesEnabled;

    boolean         purchCreateFromSalesReturn;
    SalesTableType  salesTableType;

    // Agreement related line actions
    boolean     createLinkEnabled;
    boolean     removeLinkEnabled;
    boolean     salesAgreementLineEnabled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleCreateLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>CreateLink</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleCreateLink()
    {
        CustInvoiceTrans            origInvoicedLine;
        AgreementLineReleasedLine   origInvoicedLineLink;
        AgreementHeader             agreementHeaderForOrigLine;
        AgreementLine               agreementLineForOrigLine;

        // It is possible to create link between Return Line and  Agreement Line when:
        //      Original SO line has been linked to the agreement line
        // AND  (the Agreement Line that has been linked with original SO line belongs to the same Agreement
        //       that is currently linked to the Return Order Header
        //          OR Return Order Header is not yet linked to any agreement)
        if (!salesLine.MatchingAgreementLine)
        {
            select firstonly RecId, InventTransId
            from origInvoicedLine
            where origInvoicedLine.InventTransId == salesLine.InventTransIdReturn
                join CustInvoiceTrans, AgreementLine
                from origInvoicedLineLink
                where origInvoicedLine.RecId == origInvoicedLineLink.CustInvoiceTrans
                    join RecId, Agreement
                    from agreementLineForOrigLine
                    where origInvoicedLineLink.AgreementLine == agreementLineForOrigLine.RecId
                        join RecId
                        from agreementHeaderForOrigLine
                        where agreementLineForOrigLine.Agreement == agreementHeaderForOrigLine.RecId;

            if (salesTable.MatchingAgreement)
                return agreementHeaderForOrigLine.RecId == salesTable.MatchingAgreement && !salesLine.MatchingAgreementLine;
            else
                return agreementHeaderForOrigLine.RecId;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleDeleteButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the delete button.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleDeleteButton()
    {
        return salesTable && salesTable.type().checkDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleExistRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the buffer is not empty.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleExistRecord()
    {
        return salesTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleJournalInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>JournalInvoice</c> menu item.
    /// </summary>
    /// <returns>
    ///    <c>true</c> if validation had passed; otherwise, <c>false</c>.
    /// </returns>
    public boolean checkRuleJournalInvoice()
    {
        CustInvoiceSalesLink custInvoiceSalesLink;

        return  salesTable && (select firstonly custInvoiceSalesLink
                               where  custInvoiceSalesLink.OrigSalesId == salesTable.SalesId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleJournalPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the journal packing slip menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleJournalPackingSlip()
    {
        CustPackingSlipSalesLink custPackingSlipSalesLink;

        return  salesTable && (select firstonly custPackingSlipSalesLink
                               where  custPackingSlipSalesLink.OrigSalesId == salesTable.SalesId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleMarkupTrans_HeadingSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>MarkupTransHeadingSales</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleMarkupTrans_HeadingSales()
    {
        return  salesTable
            &&  salesTable.markupAllowed()
            &&  salesTable.ReturnStatus != ReturnStatusHeader::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRulePurchCreateFromSalesReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>PurchCreateFromSalesReturn</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRulePurchCreateFromSalesReturn()
    {
        return salesTable
            && salesTableType.canCreatePurchOrder()
            && ((salesTable.SalesStatus == SalesStatus::Backorder
                    && salesTable.ReturnStatus == ReturnStatusHeader::Open)
                || (salesTable.SalesStatus == SalesStatus::Delivered
                    && salesTable.ReturnStatus == ReturnStatusHeader::Open)
                || (salesTable.SalesStatus == SalesStatus::Invoiced
                    && salesTable.ReturnStatus == ReturnStatusHeader::Closed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRulePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>PurchTable</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRulePurchTable()
    {
        return  salesTable
            &&  salesTable.InterCompanyPurchId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleRemoveLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>RemoveLink</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleRemoveLink()
    {
        return salesLine.isLinkedToAgreement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleReplacementOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>ReplacementOrder</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleReplacementOrder()
    {
        return  salesTable
            &&  salesTable.ReturnReplacementId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleReturnAcknowledgment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>ReturnAcknowledgment</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleReturnAcknowledgment()
    {
        return  salesTable
            && (salesTable.ReturnStatus == ReturnStatusHeader::Open || salesTable.ReturnStatus == ReturnStatusHeader::Closed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleReturnCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>ReturnCancel</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleReturnCancel()
    {
        return  salesTable
            &&  salesTable.ReturnStatus == ReturnStatusHeader::Created
            && !salesTable.type().interCompanyIsDerivedOrder()
            && !salesTable.returnReservationAllowedIsSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleReturnCreateReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>ReturnCreateReplacement</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleReturnCreateReplacement()
    {
        return salesTable.createReplacementOrderAllowed(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleReturnDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>ReturnDocument</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleReturnDocument()
    {
        return  salesTable
                && (salesTable.ReturnStatus == ReturnStatusHeader::Created
                ||  salesTable.ReturnStatus == ReturnStatusHeader::Open);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleReturnFindSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>ReturnFindSalesOrder</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleReturnFindSalesOrder()
    {
        return  salesTable
            &&  salesTable.ReturnStatus == ReturnStatusHeader::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSalesAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for <c>SalesAgreementLine</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleSalesAgreementLine()
    {
        return salesLine.isLinkedToAgreement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the advanced caching.
    /// </summary>
    void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    String identifying the rule for which advanced caching is to be performed.
    /// </param>
    /// <remarks>
    ///    The method is called by <c>FormButtonManager</c> on the rule class implementing the
    ///    <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the common header and line level controls visibility state.
    /// </summary>
    protected void initCommon()
    {
        container   canBeUpdated;
        SalesTableCheckIfUpdateContract checkIfUpdateContract = SalesTableCheckIfUpdateContract::construct();
        SalesTableCanBeUpdatedContract  canBeUpdatedContract;

        checkIfUpdateContract.parmCheckPackingSlip(true);
        canBeUpdated  = salesTable.checkIfUpdate(checkIfUpdateContract.pack());
        canBeUpdatedContract = SalesTableCanBeUpdatedContract::create(canBeUpdated);

        packingSlipButtonEnabled = canBeUpdatedContract.parmCanPackingSlipBeUpdated();

        salesTableType = salesTable.type();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the return order header controls visibility states.
    /// </summary>
    public void initHeaderActions()
    {
        PurchTable  refPurchTable;
        this.initCommon();

        refPurchTable                           = salesTable.referencePurchTable();
        purchTableThisCompanyEnabled            = refPurchTable.RecId ? true : false;
        interCompanySalesOrderEnabled           = refPurchTable.InterCompanySalesId ? true : false;
        interCompanyOriginalSalesOrderEnabled   = salesTable.InterCompanyOriginalSalesId ? true : false;
        interCompanyPurchOrderEnabled           = salesTable.InterCompanyPurchId ? true : false;
        referencesEnabled                       = salesTable.InterCompanyPurchId || refPurchTable.RecId;
        purchCreateFromSalesReturn              = this.checkRulePurchCreateFromSalesReturn();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the return order line controls visibility states.
    /// </summary>
    public void initLineActions()
    {
        boolean inventTransExist     = InventTrans::findTransId(salesLine.InventTransId).RecId;
        boolean wmsJournalTransExist = WMSJournalTrans::existInventTransId(salesLine.InventTransId);

        this.initCommon();

        returnReturnAllowReservationEnabled = salesLine.ReturnStatus == ReturnStatusLine::Awaiting
            && !salesLine.ReturnDispositionCodeId && !wmsJournalTransExist && salesLine.isStocked();

        returnReturnDispositionCodeIdEnabled = !salesLine.ReturnAllowReservation && !inventTransExist;

        markupTransLineEnabled          = salesLine.markupAllowed() && salesTable.ReturnStatus != ReturnStatusHeader::Canceled;
        returnReplacementEnabled        = salesLine.returnCreateReplacement() && !salesLine.isReturnReservationLine()
                                        && salesLine.ReturnStatus != ReturnStatusLine::Invoiced && salesLine.ReturnStatus != ReturnStatusLine::Received;

        interCompanyEnabled             = salesLine.DeliveryType == TradeLineDlvType::None
                                        && salesLine.InventRefTransId
                                        && salesLine.interCompanySalesLineExist();

        inventTransRegisterEnabled      = salesLine.isTangible()
                                          && (salesLine.ReturnStatus == ReturnStatusLine::Awaiting
                                          || salesLine.ReturnStatus == ReturnStatusLine::Registered);
        createLinkEnabled           = this.checkRuleCreateLink();
        removeLinkEnabled           = this.checkRuleRemoveLink();
        salesAgreementLineEnabled   = this.checkRuleSalesAgreementLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateLinkEnabled</Name>
				<Source><![CDATA[
        public boolean parmCreateLinkEnabled ()
    {
        return createLinkEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyEnabled</Name>
				<Source><![CDATA[
        public boolean parmInterCompanyEnabled()
    {
        return interCompanyEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyOriginalSalesOrdEnabled</Name>
				<Source><![CDATA[
        public boolean parmInterCompanyOriginalSalesOrdEnabled()
    {
        return interCompanyOriginalSalesOrderEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyPurchOrderEnabled</Name>
				<Source><![CDATA[
        public boolean parmInterCompanyPurchOrderEnabled()
    {
        return interCompanyPurchOrderEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanySalesOrderEnabled</Name>
				<Source><![CDATA[
        public boolean parmInterCompanySalesOrderEnabled()
    {
        return interCompanySalesOrderEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransRegisterEnabled</Name>
				<Source><![CDATA[
        public boolean parmInventTransRegisterEnabled()
    {
        return inventTransRegisterEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupTransLineEnabled</Name>
				<Source><![CDATA[
        public boolean parmMarkupTransLineEnabled()
    {
        return markupTransLineEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipButtonEnabled</Name>
				<Source><![CDATA[
        public boolean parmPackingSlipButtonEnabled()
    {
        return packingSlipButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchCreateFromSalesReturnEnabled</Name>
				<Source><![CDATA[
        public boolean parmPurchCreateFromSalesReturnEnabled()
    {
        return purchCreateFromSalesReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableThisCompanyEnabled</Name>
				<Source><![CDATA[
        public boolean parmPurchTableThisCompanyEnabled()
    {
        return purchTableThisCompanyEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferencesEnabled</Name>
				<Source><![CDATA[
        public boolean parmReferencesEnabled()
    {
        return referencesEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemoveLinkEnabled</Name>
				<Source><![CDATA[
        public boolean parmRemoveLinkEnabled()
    {
        return removeLinkEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnReplacementEnabled</Name>
				<Source><![CDATA[
        public boolean parmReturnReplacementEnabled()
    {
        return returnReplacementEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAgreementLineEnabled</Name>
				<Source><![CDATA[
        public boolean parmSalesAgreementLineEnabled()
    {
        return salesAgreementLineEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets forms data sources.
    /// </summary>
    /// <param name="datasources1">
    ///    First form data source.
    /// </param>
    /// <param name="datasources2">
    ///    Second form data source; optional.
    /// </param>
    /// <param name="datasources3">
    ///    Third form data source; optional.
    /// </param>
    /// <param name="datasources4">
    ///    Fourth form data source; optional.
    /// </param>
    /// <param name="datasources5">
    ///    Fifth form data source; optional.
    /// </param>
    void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        salesTable  = datasources1;
        salesLine   = datasources2;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>