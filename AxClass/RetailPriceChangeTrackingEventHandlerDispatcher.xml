<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingEventHandlerDispatcher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to register the data event handlers to the price change tracking related tables.
/// And then a batch job will be scheduled to handle the detailed business logic in a asynchronous way.
/// </summary>
internal class RetailPriceChangeTrackingEventHandlerDispatcher
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>scheduleBatchForOnUpdatedDataEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule a batch to handler OnUpdated data event. This will be used by the <c>RetailPriceChangeTrackingEventHandlerRegister</c> to register the data event handler.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    public static void scheduleBatchForOnUpdatedDataEvent(Common sender, DataEventArgs e)
    {
        DataEventType dataEventType = DataEventType::Updated;
        container priceChangeTrackingEnablement = RetailPriceChangeTrackingEventHandlerDispatcher::getPriceChangeTrackingEnablement(sender, dataEventType);
        boolean isPriceChangeTrackingEnabled = conPeek(priceChangeTrackingEnablement, 1);
        boolean isTrackingCrossCompanyTable = conPeek(priceChangeTrackingEnablement, 2);
        if (!isPriceChangeTrackingEnabled)
        {
            return;
        }

        RetailPriceChangeTrackingEventHandlerBatch dataEventHandlerBatchJob = RetailPriceChangeTrackingEventHandlerBatch::construct();
        dataEventHandlerBatchJob.batchInfo().parmCaption(strFmt(
            isTrackingCrossCompanyTable ? "@RetailPricing:RetailPriceChangeTrackingEventHandlerBatchCrossCompanyLabel" : "@RetailPricing:RetailPriceChangeTrackingEventHandlerBatchLabel",
            tableId2PName(sender.TableId),
            tableId2Name(sender.TableId)));
        dataEventHandlerBatchJob.parmDataEventType(dataEventType);
        dataEventHandlerBatchJob.parmSender(buf2Con(sender));
        dataEventHandlerBatchJob.parmOriginal(buf2Con(sender.orig()));

        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmRuntimeJob(true); // Set runtime then it can be deleted automatically when complete.
        batchHeader.addRuntimeTask(dataEventHandlerBatchJob, 0); // Add rumtime task, then it will be moved to the history tables and then be deleted by the cleanup job.
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatchForOnInsertedDataEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule a batch to handler OnInserted data event. This will be used by the <c>RetailPriceChangeTrackingEventHandlerRegister</c> to register the data event handler.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    public static void scheduleBatchForOnInsertedDataEvent(Common sender, DataEventArgs e)
    {
        DataEventType dataEventType = DataEventType::Inserted;
        container priceChangeTrackingEnablement = RetailPriceChangeTrackingEventHandlerDispatcher::getPriceChangeTrackingEnablement(sender, dataEventType);
        boolean isPriceChangeTrackingEnabled = conPeek(priceChangeTrackingEnablement, 1);
        boolean isTrackingCrossCompanyTable = conPeek(priceChangeTrackingEnablement, 2);
        if (!isPriceChangeTrackingEnabled)
        {
            return;
        }

        RetailPriceChangeTrackingEventHandlerBatch dataEventHandlerBatchJob = RetailPriceChangeTrackingEventHandlerBatch::construct();
        dataEventHandlerBatchJob.batchInfo().parmCaption(strFmt(
            isTrackingCrossCompanyTable ? "@RetailPricing:RetailPriceChangeTrackingEventHandlerBatchCrossCompanyLabel" : "@RetailPricing:RetailPriceChangeTrackingEventHandlerBatchLabel",
            tableId2PName(sender.TableId),
            tableId2Name(sender.TableId)));
        dataEventHandlerBatchJob.parmDataEventType(dataEventType);
        dataEventHandlerBatchJob.parmSender(buf2Con(sender));
        dataEventHandlerBatchJob.parmOriginal(buf2Con(sender.orig()));

        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmRuntimeJob(true); // Set runtime then it can be deleted automatically when complete.
        batchHeader.addRuntimeTask(dataEventHandlerBatchJob, 0); // Add rumtime task, then it will be moved to the history tables and then be deleted by the cleanup job.
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatchForOnDeletedDataEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule a batch to handler OnDeleted data event. This will be used by the <c>RetailPriceChangeTrackingEventHandlerRegister</c> to register the data event handler.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    public static void scheduleBatchForOnDeletedDataEvent(Common sender, DataEventArgs e)
    {
        DataEventType dataEventType = DataEventType::Deleted;
        container priceChangeTrackingEnablement = RetailPriceChangeTrackingEventHandlerDispatcher::getPriceChangeTrackingEnablement(sender, dataEventType);
        boolean isPriceChangeTrackingEnabled = conPeek(priceChangeTrackingEnablement, 1);
        boolean isTrackingCrossCompanyTable = conPeek(priceChangeTrackingEnablement, 2);
        if (!isPriceChangeTrackingEnabled)
        {
            return;
        }

        RetailPriceChangeTrackingEventHandlerBatch dataEventHandlerBatchJob = RetailPriceChangeTrackingEventHandlerBatch::construct();
        dataEventHandlerBatchJob.batchInfo().parmCaption(strFmt(
            isTrackingCrossCompanyTable ? "@RetailPricing:RetailPriceChangeTrackingEventHandlerBatchCrossCompanyLabel" : "@RetailPricing:RetailPriceChangeTrackingEventHandlerBatchLabel",
            tableId2PName(sender.TableId),
            tableId2Name(sender.TableId)));
        dataEventHandlerBatchJob.parmDataEventType(dataEventType);
        dataEventHandlerBatchJob.parmSender(buf2Con(sender));
        dataEventHandlerBatchJob.parmOriginal(buf2Con(sender.orig()));

        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmRuntimeJob(true); // Set runtime then it can be deleted automatically when complete.
        batchHeader.addRuntimeTask(dataEventHandlerBatchJob, 0); // Add rumtime task, then it will be moved to the history tables and then be deleted by the cleanup job.
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceChangeTrackingEnablement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether to proceed price change tracking.
    /// </summary>
    /// <param name = "_sender">The changed table instance.</param>
    /// <param name = "_dataEventType">The data event type.</param>
    /// <returns>A container with boolean values indicating 1. whether to proceed change tracking, 2. whether it is tracking cross-company table.</returns>
    internal static container getPriceChangeTrackingEnablement(Common _sender, DataEventType _dataEventType)
    {
        str currentCompany = curExt();
        RetailPriceChangeTrackingDataArea priceChangeTrackingDataArea = RetailPriceChangeTrackingDataArea::findByDataAreaId(currentCompany);
        boolean isTrackedPerDataArea = priceChangeTrackingDataArea.RecId > 0;

        boolean isTrackingCrossCompanyTable = false; // Check whether the current table is cross company.
        boolean shouldTrackDiscount = true;
        Common orig = _sender.orig();
        
        int64 tableId = _sender.TableId;
        switch(tableId)
        {
            case tableNum(RetailGroupMemberLine):
            case tableNum(RetailChannelTable):
            case tableNum(RetailCatalogPriceGroup):
            case tableNum(RetailChannelPriceGroup):
            case tableNum(EcoResProductCategory):
                isTrackingCrossCompanyTable = true;
                break;
            case tableNum(RetailDiscountPriceGroup):
                if (RetailPricingSkipChangeTrackingForDisabledDiscountsFlight::instance().isEnabled())
                {
                    RetailDiscountPriceGroup discountPriceGroup = _sender as RetailDiscountPriceGroup;
                    RetailDiscountPriceGroup discountPriceGroupOrig = orig as RetailDiscountPriceGroup;
                    RetailPeriodicDiscount discount = RetailPeriodicDiscount::findByOfferId(discountPriceGroup.OfferId);
                    RetailPeriodicDiscount discountOrig = RetailPeriodicDiscount::findByOfferId(discountPriceGroupOrig.OfferId);
                    shouldTrackDiscount = RetailPriceChangeTrackingEventHandlerDispatcher::shouldTrackDiscountByStatus(discount, discountOrig, _dataEventType);
                }
                break;
            case tableNum(RetailDiscountOffer):
            case tableNum(RetailPeriodicDiscount):
                if (RetailPricingSkipChangeTrackingForDisabledDiscountsFlight::instance().isEnabled())
                {
                    RetailPeriodicDiscount discount = _sender as RetailPeriodicDiscount;
                    RetailPeriodicDiscount discountOrig = orig as RetailPeriodicDiscount;
                    shouldTrackDiscount = RetailPriceChangeTrackingEventHandlerDispatcher::shouldTrackDiscountByStatus(discount, discountOrig, _dataEventType);
                }
                break;
            case tableNum(RetailDiscountLineOffer):
            case tableNum(RetailPeriodicDiscountLine):
                if (RetailPricingSkipChangeTrackingForDisabledDiscountsFlight::instance().isEnabled())
                {
                    RetailPeriodicDiscountLine discountLine = _sender as RetailPeriodicDiscountLine;
                    RetailPeriodicDiscountLine discountLineOrig = orig as RetailPeriodicDiscountLine;
                    RetailPeriodicDiscount discount = RetailPeriodicDiscount::findByOfferId(discountLine.OfferId);
                    RetailPeriodicDiscount discountOrig = RetailPeriodicDiscount::findByOfferId(discountLineOrig.OfferId);
                    shouldTrackDiscount = RetailPriceChangeTrackingEventHandlerDispatcher::shouldTrackDiscountByStatus(discount, discountOrig, _dataEventType);
                }
                break;
            default:
                break;
        }

        boolean isPriceChangeTrackingEnabled = !RetailPriceChangeTrackingHelper::shouldSkipChangeTracking() // Check whether the feature is enabled.
            && (isTrackedPerDataArea || isTrackingCrossCompanyTable) // Check whether the DataArea is enabled, or whether the table is cross company.
            && shouldTrackDiscount; // Check whether to track the discounts.

        return [isPriceChangeTrackingEnabled, isTrackingCrossCompanyTable];
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTrackDiscountByStatus</Name>
				<Source><![CDATA[
    private static boolean shouldTrackDiscountByStatus(RetailPeriodicDiscount _discount, RetailPeriodicDiscount _discountOrig, DataEventType _dataEventType)
    {
        switch(_dataEventType)
        {
            case DataEventType::Inserted:
                return _discount.Status == RetailDisabledEnabled::Enabled;
            case DataEventType::Updated:
                return _discount.Status == RetailDisabledEnabled::Enabled || _discountOrig.Status == RetailDisabledEnabled::Enabled;
            case DataEventType::Deleted:
                return _discountOrig.Status == RetailDisabledEnabled::Enabled;
            default:
                return true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>