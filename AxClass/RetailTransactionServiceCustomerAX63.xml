<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceCustomerAX63</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionServiceCustomerAX63</c> implements the customer related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
/// <remarks>
///    This class is used for CDX realtime service APIs in AX63.
/// </remarks>
public class RetailTransactionServiceCustomerAX63
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendGenericPartyXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends an XmlElement to 'root' with all the related party info for partyNumber.
    /// </summary>
    /// <param name="doc">
    /// The parent xmldocument for root.
    /// </param>
    /// <param name="root">
    /// The return val.
    /// </param>
    /// <param name="partyNumber">
    /// The partyNumber of the party to be returned.
    /// </param>
    private static void appendGenericPartyXML(XmlDocument doc, XmlElement root, PartyNumber partyNumber)
    {
        DirPartyTable               dirPartyTable;
        DirPartyLocation            dirPartyLocation;
        LogisticsLocation           logisticsLocation;
        LogisticsPostalAddress      logisticsPostalAddress;
        logisticsLocation           logisticsLocationNested;
        LogisticsElectronicAddress  logisticsElectronicAddress;
        LogisticsElectronicAddress  logisticsElectronicAddressNested;
        LogisticsLocationExt        logisticsLocationExt;
        DirPartyLocationRole        dirPartyLocationRole;
        LogisticsLocationRole       logisticsLocationRole;
        DirAddressBookParty         dirAddressBookParty;
    
        select firstonly * from dirPartyTable
        where dirPartyTable.PartyNumber == PartyNumber;
    
        if (!dirPartyTable)
        {
            return;
        }
    
        root.appendChild(RetailTransactionServiceCustomerAX63::getDirPartyTableGenericXml(doc, dirPartyTable));
    
        while select * from dirPartyLocation
            where dirPartyLocation.Party == dirPartyTable.RecId
        {
            root.appendChild(RetailTransactionServiceCustomerAX63::getDirPartyLocationGenericXml(doc, dirPartyLocation));
    
            while select * from logisticsLocation
                where logisticsLocation.RecId == dirPartyLocation.Location
            {
                root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsLocationGenericXml(doc, logisticsLocation));
    
                while select * from logisticsPostalAddress
                    where logisticsPostalAddress.Location == logisticsLocation.RecId
                {
                    root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsPostalAddressGenericXml(doc, logisticsPostalAddress));
                }
    
                while select * from logisticsLocationNested
                    where logisticsLocationNested.ParentLocation == logisticsLocation.RecId
                {
                    root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsLocationGenericXml(doc, logisticsLocationNested));
    
                    while select * from logisticsElectronicAddressNested
                        where logisticsElectronicAddressNested.Location == logisticsLocationNested.RecId
                    {
                        root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsElectronicAddressGenericXml(doc, logisticsElectronicAddressNested));
                    }
    
                    while select * from logisticsElectronicAddress
                        where logisticsElectronicAddress.Location == logisticsLocationNested.RecId
                    {
                        root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsElectronicAddressGenericXml(doc, logisticsElectronicAddress));
                    }
    
                    while select * from logisticsLocationExt
                        where logisticsLocationExt.Location == logisticsLocationNested.RecId
                    {
                        root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsLocationExtGenericXml(doc, logisticsLocationExt));
                    }
                }
    
                while select * from logisticsElectronicAddress
                    where logisticsElectronicAddress.Location == logisticsLocation.RecId
                {
                    root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsElectronicAddressGenericXml(doc, logisticsElectronicAddress));
                }
    
                while select * from logisticsLocationExt
                    where logisticsLocationExt.Location == logisticsLocation.RecId
                {
                    root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsLocationExtGenericXml(doc, logisticsLocationExt));
                }
            }
    
            while select * from dirPartyLocationRole
                where dirPartyLocationRole.PartyLocation == dirPartyLocation.RecId
            {
                root.appendChild(RetailTransactionServiceCustomerAX63::getDirPartyLocationRoleGenericXml(doc, dirPartyLocationRole));
    
                while select * from logisticsLocationRole
                    where logisticsLocationRole.recId == dirPartyLocationRole.LocationRole
                {
                    root.appendChild(RetailTransactionServiceCustomerAX63::getLogisticsLocationRoleGenericXml(doc, logisticsLocationRole));
                }
            }
        }
    
        while select * from dirAddressBookParty
        where dirAddressBookParty.Party == dirPartyTable.RecId
        {
            root.appendChild(RetailTransactionServiceCustomerAX63::getDirAddressBookPartyGenericXml(doc, dirAddressBookParty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTableGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getCustTableGenericXml(XmlDocument xmlDoc, CustTable custTable)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'CustTable');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (custTable)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(custTable.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ACCOUNTNUM');
            genericDatabaseColumnXml.setAttribute('Value', custTable.AccountNum);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CUSTGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.CustGroup);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'INVOICEACCOUNT');
            genericDatabaseColumnXml.setAttribute('Value', custTable.InvoiceAccount);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CURRENCY');
            genericDatabaseColumnXml.setAttribute('Value', custTable.Currency);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'MULTILINEDISC');
            genericDatabaseColumnXml.setAttribute('Value', custTable.MultiLineDisc);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ENDDISC');
            genericDatabaseColumnXml.setAttribute('Value', custTable.EndDisc);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LINEDISC');
            genericDatabaseColumnXml.setAttribute('Value', custTable.LineDisc);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PRICEGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.PriceGroup);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CREDITMAX');
            genericDatabaseColumnXml.setAttribute('Value', num2str(custTable.CreditMax, 5, 3, 1, 0));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'BLOCKED');
            genericDatabaseColumnXml.setAttribute('Value', int2str(enum2int(custTable.Blocked)));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'TAXGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.TaxGroup);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VATNUM');
            genericDatabaseColumnXml.setAttribute('Value', custTable.vatNum);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ORGID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.OrgId);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'USEPURCHREQUEST');
            genericDatabaseColumnXml.setAttribute('Value', int2str(enum2int(custTable.UsePurchRequest)));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'INCLTAX');
            genericDatabaseColumnXml.setAttribute('Value', int2str(enum2int(custTable.InclTax)));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'IDENTIFICATIONNUMBER');
            genericDatabaseColumnXml.setAttribute('Value', custTable.IdentificationNumber);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CNPJCPFNUM_BR');
            genericDatabaseColumnXml.setAttribute('Value', custTable.cnpjcpfNum_BR);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PARTY');
            genericDatabaseColumnXml.setAttribute('Value', int642str(custTable.Party));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DATAAREAID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.dataAreaId);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ACCOUNTSTATEMENT');
            genericDatabaseColumnXml.setAttribute('Value', int2str(custTable.AccountStatement));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'BANKACCOUNT');
            genericDatabaseColumnXml.setAttribute('Value', custTable.BANKACCOUNT);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'BANKCENTRALBANKPURPOSECODE');
            genericDatabaseColumnXml.setAttribute('Value', custTable.BANKCENTRALBANKPURPOSECODE);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'BANKCENTRALBANKPURPOSETEXT');
            genericDatabaseColumnXml.setAttribute('Value', custTable.BANKCENTRALBANKPURPOSETEXT);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CASHDISC');
            genericDatabaseColumnXml.setAttribute('Value', custTable.CASHDISC);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CLEARINGPERIOD');
            genericDatabaseColumnXml.setAttribute('Value', custTable.CLEARINGPERIOD);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'COMMISSIONGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.COMMISSIONGROUP);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CONTACTPERSONID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.CONTACTPERSONID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CREDITRATING');
            genericDatabaseColumnXml.setAttribute('Value', custTable.CREDITRATING);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CUSTITEMGROUPID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.CUSTITEMGROUPID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DESTINATIONCODEID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.DESTINATIONCODEID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DLVMODE');
            genericDatabaseColumnXml.setAttribute('Value', custTable.DLVMODE);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DLVTERM');
            genericDatabaseColumnXml.setAttribute('Value', custTable.DLVTERM);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'FORECASTDMPINCLUDE');
            genericDatabaseColumnXml.setAttribute('Value', int2str(custTable.FORECASTDMPINCLUDE));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'FREIGHTZONE');
            genericDatabaseColumnXml.setAttribute('Value', custTable.FREIGHTZONE);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'IENUM_BR');
            genericDatabaseColumnXml.setAttribute('Value', custTable.IENUM_BR);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'INVENTLOCATION');
            genericDatabaseColumnXml.setAttribute('Value', custTable.INVENTLOCATION);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'INVENTSITEID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.INVENTSITEID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'INVOICEADDRESS');
            genericDatabaseColumnXml.setAttribute('Value', int642str(custTable.INVOICEADDRESS));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LINEOFBUSINESSID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.LINEOFBUSINESSID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'MANDATORYCREDITLIMIT');
            genericDatabaseColumnXml.setAttribute('Value', int2str(custTable.MANDATORYCREDITLIMIT));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'MARKUPGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.MARKUPGROUP);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'NUMBERSEQUENCEGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.NUMBERSEQUENCEGROUP);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ONETIMECUSTOMER');
            genericDatabaseColumnXml.setAttribute('Value', int2str(custTable.ONETIMECUSTOMER));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'OURACCOUNTNUM');
            genericDatabaseColumnXml.setAttribute('Value', custTable.OURACCOUNTNUM);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PACKMATERIALFEELICENSENUM');
            genericDatabaseColumnXml.setAttribute('Value', custTable.PACKMATERIALFEELICENSENUM);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PAYMDAYID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.PAYMDAYID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PAYMMODE');
            genericDatabaseColumnXml.setAttribute('Value', custTable.PAYMMODE);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PAYMSPEC');
            genericDatabaseColumnXml.setAttribute('Value', custTable.PAYMSPEC);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PAYMTERMID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.PAYMTERMID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'SALESGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.SALESGROUP);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'SALESPOOLID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.SALESPOOLID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'STATISTICSGROUP');
            genericDatabaseColumnXml.setAttribute('Value', custTable.STATISTICSGROUP);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'SUFRAMA_BR');
            genericDatabaseColumnXml.setAttribute('Value', int2str(custTable.SUFRAMA_BR));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'SUFRAMANUMBER_BR');
            genericDatabaseColumnXml.setAttribute('Value', custTable.SUFRAMANUMBER_BR);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'SUPPITEMGROUPID');
            genericDatabaseColumnXml.setAttribute('Value', custTable.SUPPITEMGROUPID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'TAXLICENSENUM');
            genericDatabaseColumnXml.setAttribute('Value', custTable.TAXLICENSENUM);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VENDACCOUNT');
            genericDatabaseColumnXml.setAttribute('Value', custTable.VENDACCOUNT);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'WEBSALESORDERDISPLAY');
            genericDatabaseColumnXml.setAttribute('Value', int2str(custTable.WEBSALESORDERDISPLAY));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirAddressBookPartyGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getDirAddressBookPartyGenericXml(XmlDocument xmlDoc, DirAddressBookParty dirAddressBookParty)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'DirAddressBookParty');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (dirAddressBookParty)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RecId');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirAddressBookParty.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'AddressBook');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirAddressBookParty.AddressBook));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'Party');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirAddressBookParty.Party));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyLocationGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getDirPartyLocationGenericXml(XmlDocument xmlDoc, DirPartyLocation dirPartyLocation)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'DirPartyLocation');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (dirPartyLocation)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirPartyLocation.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LOCATION');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirPartyLocation.Location));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PARTY');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirPartyLocation.Party));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISPOSTALADDRESS');
            genericDatabaseColumnXml.setAttribute('Value', int2str(dirPartyLocation.IsPostalAddress));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISPRIMARY');
            genericDatabaseColumnXml.setAttribute('Value', int2str(dirPartyLocation.IsPrimary));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISLOCATIONOWNER');
            genericDatabaseColumnXml.setAttribute('Value', int2str(dirPartyLocation.IsLocationOwner));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VALIDFROM');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(DateTimeUtil::minValue()));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VALIDTO');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(DateTimeUtil::maxValue()));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ATTENTIONTOADDRESSLINE');
            genericDatabaseColumnXml.setAttribute('Value', dirPartyLocation.AttentionToAddressLine);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISROLEDELIVERY');
            genericDatabaseColumnXml.setAttribute('Value', int2str(dirPartyLocation.IsRoleDelivery));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyLocationRoleGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getDirPartyLocationRoleGenericXml(XmlDocument xmlDoc, DirPartyLocationRole dirPartyLocationRole)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'DirPartyLocationRole');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (dirPartyLocationRole)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirPartyLocationRole.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LOCATIONROLE');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirPartyLocationRole.LocationRole));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PARTYLOCATION');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirPartyLocationRole.PartyLocation));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyTableGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getDirPartyTableGenericXml(XmlDocument xmlDoc, DirPartyTable dirParty)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'DirPartyTable');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (dirParty)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirParty.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'Name');
            genericDatabaseColumnXml.setAttribute('Value', dirParty.Name);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PARTYNUMBER');
            genericDatabaseColumnXml.setAttribute('Value', dirParty.PartyNumber);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RELATIONTYPE');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirParty.RelationType));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DATAAREAID');
            genericDatabaseColumnXml.setAttribute('Value', dirParty.dataAreaId);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'NAMEALIAS');
            genericDatabaseColumnXml.setAttribute('Value', dirParty.NAMEALIAS);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'INSTANCERELATIONTYPE');
            genericDatabaseColumnXml.setAttribute('Value', int642str(dirParty.InstanceRelationType));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'KNOWNAS');
            genericDatabaseColumnXml.setAttribute('Value', dirParty.KNOWNAS);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LANGUAGEID');
            genericDatabaseColumnXml.setAttribute('Value', dirParty.LANGUAGEID);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CREATEDDATETIME');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(dirParty.CREATEDDATETIME));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'MODIFIEDDATETIME');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(dirParty.MODIFIEDDATETIME));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGenericCustomerData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer details for a given customer account.
    /// </summary>
    /// <param name="custAccount">
    /// The value of CustAccount for which customer details has to be fetched.
    /// </param>
    /// <returns>
    /// A container having the customer details in a XML string. The xml string conforms
    /// to the GenericDatabaseTables schema.
    /// </returns>
    public static container getGenericCustomerData(CustAccount custAccount)
    {
        str                         error = '';
        boolean                     success = false;
        int                         fromLine;
    
        CustTable                   custTableCurDataArea;
        RetailCustTable             retailCustTable;
        DirPartyTable               dirPartyTable;
    
        XmlDocument                 doc = new XmlDocument();
        XmlElement                  root = doc.createElement('GenericDatabaseTables');
        XmlElement                  tables = doc.createElement('Tables');
    
        if (strLTrim(strRTrim(custAccount)) == '')
        {
            return [false, 'No customer account number provided', root.xml()];
        }
    
        try
        {
            fromLine = Global::infologLine();
    
            select firstOnly * from custTableCurDataArea
            where custTableCurDataArea.AccountNum == custAccount && custTableCurDataArea.DataAreaId == curext();
    
            if (custTableCurDataArea)
            {
                tables.appendChild(RetailTransactionServiceCustomerAX63::getCustTableGenericXml(doc, custTableCurDataArea));
                retailCustTable = RetailCustTable::find(custTableCurDataArea.AccountNum);

                if (retailCustTable)
                {
                    tables.appendChild(RetailTransactionServiceCustomerAX63::getRetailCustTableGenericXml(doc, retailCustTable));
                }

                dirPartyTable = dirPartyTable::findRec(custTableCurDataArea.Party);
                
                if (dirPartyTable)
                {
                    RetailTransactionServiceCustomerAX63::appendGenericPartyXML(doc, tables, dirPartyTable.PartyNumber);
                }
            }
    
            success = true;
        }
        catch (Exception::Error)
        {
            success = false;
            error = strFmt(
                    'An exception was caught in RetailTransactionServiceCustomerAX63::getGenericCustomerData(). The messages are: %1',
                    RetailTransactionServiceAX63::getInfologMessages(fromLine));
        }
    
        root.appendChild(tables);
        return [success, error, root.xml()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsElectronicAddressGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getLogisticsElectronicAddressGenericXml(XmlDocument xmlDoc, LogisticsElectronicAddress electronicAddress)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'LogisticsElectronicAddress');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (electronicAddress)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(electronicAddress.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LOCATION');
            genericDatabaseColumnXml.setAttribute('Value', int642str(electronicAddress.Location));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LOCATOR');
            genericDatabaseColumnXml.setAttribute('Value', electronicAddress.Locator);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'TYPE');
            genericDatabaseColumnXml.setAttribute('Value', int2str(enum2int(electronicAddress.Type)));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'COUNTRYREGIONCODE');
            genericDatabaseColumnXml.setAttribute('Value', electronicAddress.CountryRegionCode);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VALIDFROM');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(DateTimeUtil::minValue()));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VALIDTO');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(DateTimeUtil::maxValue()));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DESCRIPTION');
            genericDatabaseColumnXml.setAttribute('Value', electronicAddress.Description);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISINSTANTMESSAGE');
            genericDatabaseColumnXml.setAttribute('Value', int2str(electronicAddress.IsInstantMessage));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISMOBILEPHONE');
            genericDatabaseColumnXml.setAttribute('Value', int2str(electronicAddress.IsMobilePhone));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISPRIMARY');
            genericDatabaseColumnXml.setAttribute('Value', int2str(electronicAddress.IsPrimary));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LOCATOREXTENSION');
            genericDatabaseColumnXml.setAttribute('Value', electronicAddress.LocatorExtension);
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsLocationExtGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getLogisticsLocationExtGenericXml(XmlDocument xmlDoc, LogisticsLocationExt logisticsLocationExt)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'LogisticsLocationExt');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (logisticsLocationExt)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LOCATION');
            genericDatabaseColumnXml.setAttribute('Value', int642str(logisticsLocationExt.Location));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'SALESCALENDARID');
            genericDatabaseColumnXml.setAttribute('Value', logisticsLocationExt.SalesCalendarId);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'TAXGROUP');
            genericDatabaseColumnXml.setAttribute('Value', logisticsLocationExt.TaxGroup);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CNPJCPFNUM_BR');
            genericDatabaseColumnXml.setAttribute('Value', logisticsLocationExt.CNPJCPFNum_BR);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'IENUM_BR');
            genericDatabaseColumnXml.setAttribute('Value', logisticsLocationExt.IENum_BR);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECVERSION');
            genericDatabaseColumnXml.setAttribute('Value', int2str(logisticsLocationExt.recVersion));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'PARTITION');
            genericDatabaseColumnXml.setAttribute('Value', int642str(logisticsLocationExt.Partition));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(logisticsLocationExt.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DATAAREAID');
            genericDatabaseColumnXml.setAttribute('Value', logisticsLocationExt.dataAreaId);
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsLocationGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getLogisticsLocationGenericXml(XmlDocument xmlDoc, LogisticsLocation logisticsLocation)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'LogisticsLocation');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (logisticsLocation)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RecId');
            genericDatabaseColumnXml.setAttribute('Value', int642str(logisticsLocation.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LocationId');
            genericDatabaseColumnXml.setAttribute('Value', logisticsLocation.LocationId);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'Description');
            genericDatabaseColumnXml.setAttribute('Value', logisticsLocation.Description);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'IsPostalAddress');
            genericDatabaseColumnXml.setAttribute('Value', int2str(logisticsLocation.IsPostalAddress));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ParentLocation');
            genericDatabaseColumnXml.setAttribute('Value', int642str(logisticsLocation.ParentLocation));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsLocationRoleGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getLogisticsLocationRoleGenericXml(XmlDocument xmlDoc, LogisticsLocationRole logisticsLocationRole)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericUpsertXmlColumn;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'LogisticsLocationRole');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (logisticsLocationRole)
        {
            genericUpsertXmlColumn = xmlDoc.createElement('GenericDatabaseColumn');
            genericUpsertXmlColumn.setAttribute('Name', 'RECID');
            genericUpsertXmlColumn.setAttribute('Value', int642str(logisticsLocationRole.RecId));
            columnsXml.appendChild(genericUpsertXmlColumn);
    
            genericUpsertXmlColumn = xmlDoc.createElement('GenericDatabaseColumn');
            genericUpsertXmlColumn.setAttribute('Name', 'Name');
            genericUpsertXmlColumn.setAttribute('Value', logisticsLocationRole.Name);
            columnsXml.appendChild(genericUpsertXmlColumn);
    
            genericUpsertXmlColumn = xmlDoc.createElement('GenericDatabaseColumn');
            genericUpsertXmlColumn.setAttribute('Name', 'TYPE');
            genericUpsertXmlColumn.setAttribute('Value', int2str(enum2int(logisticsLocationRole.Type)));
            columnsXml.appendChild(genericUpsertXmlColumn);
    
            genericUpsertXmlColumn = xmlDoc.createElement('GenericDatabaseColumn');
            genericUpsertXmlColumn.setAttribute('Name', 'ISPOSTALADDRESS');
            genericUpsertXmlColumn.setAttribute('Value', int2str(logisticsLocationRole.IsPostalAddress));
            columnsXml.appendChild(genericUpsertXmlColumn);
    
            genericUpsertXmlColumn = xmlDoc.createElement('GenericDatabaseColumn');
            genericUpsertXmlColumn.setAttribute('Name', 'ISCONTACTINFO');
            genericUpsertXmlColumn.setAttribute('Value', int2str(logisticsLocationRole.IsContactInfo));
            columnsXml.appendChild(genericUpsertXmlColumn);
    
            genericUpsertXmlColumn = xmlDoc.createElement('GenericDatabaseColumn');
            genericUpsertXmlColumn.setAttribute('Name', 'PARTITION');
            genericUpsertXmlColumn.setAttribute('Value', int642str(logisticsLocationRole.Partition));
            columnsXml.appendChild(genericUpsertXmlColumn);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsPostalAddressGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getLogisticsPostalAddressGenericXml(XmlDocument xmlDoc, LogisticsPostalAddress postalAddress)
    {
        XmlElement          columnsXml;
        XmlElement          genericDatabaseTableXml;
        XmlElement          genericDatabaseColumnXml;
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'LogisticsPostalAddress');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (postalAddress)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(postalAddress.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LOCATION');
            genericDatabaseColumnXml.setAttribute('Value', int642str(postalAddress.Location));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ADDRESS');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.Address);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ZIPCODE');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.ZipCode);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'STATE');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.State);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'COUNTRYREGIONID');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.CountryRegionId);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'COUNTY');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.County);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CITY');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.City);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'STREET');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.Street);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'TIMEZONE');
            genericDatabaseColumnXml.setAttribute('Value', int2str(postalAddress.TimeZone));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'STREETNUMBER');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.StreetNumber);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'BUILDINGCOMPLIMENT');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.BuildingCompliment);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DISTRICTNAME');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.DistrictName);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VALIDFROM');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(postalAddress.ValidFrom));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'VALIDTO');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(postalAddress.ValidTo));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'CITYRECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(postalAddress.CITYRECID));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DISTRICT');
            genericDatabaseColumnXml.setAttribute('Value', int642str(postalAddress.District));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ISprivate');
            genericDatabaseColumnXml.setAttribute('Value', int2str(postalAddress.ISprivate));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LATITUDE');
            genericDatabaseColumnXml.setAttribute('Value', num2str(postalAddress.LATITUDE, 32, 16, 1, 0));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'LONGITUDE');
            genericDatabaseColumnXml.setAttribute('Value', num2str(postalAddress.LONGITUDE, 32, 16, 1, 0));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'POSTBOX');
            genericDatabaseColumnXml.setAttribute('Value', postalAddress.POSTBOX);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ZIPCODERECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(postalAddress.ZIPCODERECID));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'MODIFIEDDATETIME');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(postalAddress.MODIFIEDDATETIME));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailCustTableGenericXml</Name>
				<Source><![CDATA[
    private static XmlElement getRetailCustTableGenericXml(XmlDocument xmlDoc, RetailCustTable retailCustTable)
    {
        XmlElement              columnsXml;
        XmlElement              genericDatabaseTableXml;
        XmlElement              genericDatabaseColumnXml;
        RetailSharedParameters  retailSharedParameters = RetailSharedParameters::find();
    
        genericDatabaseTableXml = xmlDoc.createElement('GenericDatabaseTable');
        genericDatabaseTableXml.setAttribute('Schema', 'ax');
        genericDatabaseTableXml.setAttribute('Name', 'RetailCustTable');
        columnsXml = xmlDoc.createElement('Columns');
    
        if (retailCustTable)
        {
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECID');
            genericDatabaseColumnXml.setAttribute('Value', int642str(retailCustTable.RecId));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'ACCOUNTNUM');
            genericDatabaseColumnXml.setAttribute('Value', retailCustTable.AccountNum);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'NONCHARGABLEACCOUNT');
            genericDatabaseColumnXml.setAttribute('Value', int2str(retailCustTable.NonChargableAccount));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'POSTASSHIPMENT');
            genericDatabaseColumnXml.setAttribute('Value', int2str(retailCustTable.PostAsShipment));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECEIPTEMAIL');
            genericDatabaseColumnXml.setAttribute('Value', retailCustTable.ReceiptEmail);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'RECEIPTOPTION');
            genericDatabaseColumnXml.setAttribute('Value', int2str(retailCustTable.ReceiptOption));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'REQUIRESAPPROVAL');
            genericDatabaseColumnXml.setAttribute('Value', int2str(retailCustTable.RequiresApproval));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'USEORDERNUMBERREFERENCE');
            genericDatabaseColumnXml.setAttribute('Value', int2str(retailCustTable.UseOrderNumberReference));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'IMAGE');
            genericDatabaseColumnXml.setAttribute('Value', retailCustTable.Image ? retailCustTable.Image : RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.CustomerDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType));
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'DATAAREAID');
            genericDatabaseColumnXml.setAttribute('Value', retailCustTable.dataAreaId);
            columnsXml.appendChild(genericDatabaseColumnXml);
    
            genericDatabaseColumnXml = xmlDoc.createElement('GenericDatabaseColumn');
            genericDatabaseColumnXml.setAttribute('Name', 'MODIFIEDDATETIME');
            genericDatabaseColumnXml.setAttribute('Value', DateTimeUtil::toStr(retailCustTable.modifiedDateTime));
            columnsXml.appendChild(genericDatabaseColumnXml);
        }
    
        genericDatabaseTableXml.appendChild(columnsXml);
        return genericDatabaseTableXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailCustTableXml</Name>
				<Source><![CDATA[
    private static XmlElement getRetailCustTableXml(XmlDocument xmlDoc, RetailCustTable retailCustTable)
    {
        XmlElement          xmlRetailCustTable;
        RetailSharedParameters  retailSharedParameters = RetailSharedParameters::find();
    
        xmlRetailCustTable = xmlDoc.createElement('RetailCustTable');
        if (retailCustTable)
        {
            xmlRetailCustTable.setAttribute('RecId', int642str(retailCustTable.RecId));
            xmlRetailCustTable.setAttribute('AccountNum', retailCustTable.AccountNum);
            xmlRetailCustTable.setAttribute('NonChargableAccount', int2str(retailCustTable.NonChargableAccount));
            xmlRetailCustTable.setAttribute('PostAsShipment', int2str(retailCustTable.PostAsShipment));
            xmlRetailCustTable.setAttribute('ReceiptEmail', retailCustTable.ReceiptEmail);
            xmlRetailCustTable.setAttribute('ReceiptOption', int2str(retailCustTable.ReceiptOption));
            xmlRetailCustTable.setAttribute('RequiresApproval', int2str(retailCustTable.RequiresApproval));
            xmlRetailCustTable.setAttribute('UseOrderNumberReference', int2str(retailCustTable.UseOrderNumberReference));
            xmlRetailCustTable.setAttribute('Image', retailCustTable.Image ? retailCustTable.Image : RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.CustomerDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType));
        }
    
        return xmlRetailCustTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>