<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorCustInvoice_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating a <c>FiscalDocumentParmData_BR</c> object and its
/// components for a customer invoice posting scenario.
/// </summary>
class FiscalDocParmDataCreatorCustInvoice_BR extends FiscalDocumentParmDataCreator_BR
{
    SalesParmTable  salesParmTable;
    CustInvoiceJour custInvoiceJour;
    SalesTotals     salesTotals;
    SalesTable      salesTable;
    SalesParmUpdate salesParmUpdate;
    SalesCarrier    salesCarrier;
    CustTrans       custTrans;
    CustTable       custTable;

    DiscAmount              lineSuframaDiscountICMS;
    DiscAmount              lineSuframaDiscountPIS;
    DiscAmount              lineSuframaDiscountCOFINS;

    DiscAmount              headerSuframaDiscountICMS;
    DiscAmount              headerSuframaDiscountPIS;
    DiscAmount              headerSuframaDiscountCOFINS;

    FiscalDocumentType_BR fiscalDocumentType;
    RecordSortedList custInvoiceTransList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxWithholdTexts</Name>
				<Source><![CDATA[
    private FiscalDocumentTextListParmData_BR addTaxWithholdTexts()
    {
        FiscalDocumenttextId_BR             textId = BrazilParameters::find().TaxWithholdFiscalDocumentTextID;
        FiscalDocumentTextTagReplacer_BR    taxReplacer = FiscalDocumentTextTagReplacer_BR::construct();
        FiscalDocumentTextListParmData_BR   textList;
        TmpTaxWithhold                      tmpTaxWithhold;

        textList  = FiscalDocumentTextListParmData_BR::construct();

        tmpTaxWithhold = TaxWithhold::calculateTmpTaxWithhold(custTrans, custTrans.TransDate);

        while select tmpTaxWithhold
        {
            taxReplacer.parmTaxWithhold_Code(tmpTaxWithhold.TaxWithholdCode);
            taxReplacer.parmTaxWithhold_Value(tmpTaxWithhold.TaxWithholdValue);
            taxReplacer.parmTaxWithhold_Amount(tmpTaxWithhold.TaxWithholdAmount);

            textList.addText(textId, FiscalDocumentTextType_BR::Blank, taxReplacer);
        }

        return textList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    protected boolean canHavePresumedTaxes()
    {
        return (custInvoiceJour.SalesType != SalesType::ReturnItem && custInvoiceJour.InvoiceAmount >= 0)
            || this.checkOrigSaleHavePresumedTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrigSaleHavePresumedTax</Name>
				<Source><![CDATA[
    private boolean checkOrigSaleHavePresumedTax()
    {
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedOrig;

        if (custInvoiceJour.SalesType == SalesType::ReturnItem)
        {
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransOrig;
            FiscalDocumentLine_BR fiscalDocumentLineOrig;
            CustInvoiceTrans custInvoiceTransOrig;
            SalesLine salesLine;

            select firstOnly RecId from fiscalDocumentTaxTransPresumedOrig
            exists join fiscalDocumentTaxTransOrig
                where fiscalDocumentTaxTransOrig.RecId == fiscalDocumentTaxTransPresumedOrig.FiscalDocumentTaxTrans_BR
            exists join fiscalDocumentLineOrig
                where fiscalDocumentLineOrig.RecId == fiscalDocumentTaxTransOrig.FiscalDocumentLine
                    && fiscalDocumentLineOrig.RefTableId == tableNum(CustInvoiceTrans)
            exists join custInvoiceTransOrig
                where custInvoiceTransOrig.RecId == fiscalDocumentLineOrig.RefRecId
            exists join salesLine
                where salesLine.InventTransIdReturn == custInvoiceTransOrig.InventTransId
                    && salesLine.SalesId == custInvoiceJour.SalesId;
        }
        
        return fiscalDocumentTaxTransPresumedOrig.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
    public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR fiscalDocumentParmData = super();

        if (fiscalDocumentParmData.parmThirdPartySalesDigitalPlatform() == NoYes::Yes
            && FiscalDocumentHelper::checkIfThirdPartySalesDigitalPlatformApplicable(
                fiscalDocumentParmData.parmDirection(),
                FiscalEstablishment_BR::findById(fiscalDocumentParmData.parmFiscalEstablishmentID()).checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v100),
                fiscalDocumentParmData.parmPresenceType()))
        {
            fiscalDocumentParmData.parmThirdPartySalesDigitalPlatformCardPayments(this.initListOfThirdPartySalesDigitalPlatformCardPaymentsParmData());
        }

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID that <c>CustPaymSched</c> buffer points to.
    /// </summary>
    /// <returns>
    /// The record ID that <c>CustPaymSched</c> buffer points to.
    /// </returns>
    protected RecId custPaymSchedRefRecId()
    {
        return custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID that <c>CustPaymSched</c> buffer points to.
    /// </summary>
    /// <returns>
    /// The table ID that <c>CustPaymSched</c> buffer points to.
    /// </returns>
    protected TableId custPaymSchedRefTableId()
    {
        return custInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR fiscalEstablishment()
    {
        FiscalEstablishment_BR fiscalEstablishment = InventSite::find(salesParmTable.InventSiteId).fiscalEstablishment();

        return fiscalEstablishment.IsClosedWarehouse ? FiscalEstablishment_BR::find(fiscalEstablishment.FiscalEstablishmentSalesIssuer) : fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return salesParmTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceExchRate</Name>
				<Source><![CDATA[
    protected ExchRate fiscalReferenceSourceExchRate()
    {
        return custInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected recId fiscalReferenceSourceRecId()
    {
        return salesParmTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected tableId fiscalReferenceSourceTableId()
    {
        return salesParmTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSuframaAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the Suframa discounts (exempt taxes) of the line.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// A <c>CustInvoiceTrans</c> buffer containing the line being processed.
    /// </param>
    /// <returns>
    /// A container of <c>TaxValue</c> corresponding to ICMS, PIS and COFINS values.
    /// </returns>
    protected container getSuframaAmount(CustInvoiceTrans   _custInvoiceTrans)
    {
        TaxValue    discICMS;
        TaxValue    discPIS;
        TaxValue    discCOFINS;

        DiscPct     discPercent = PriceDisc::discPercent(   SalesParameters::find().Disc,
                                                            _custInvoiceTrans.LinePercent,
                                                            _custInvoiceTrans.MultiLnPercent);

        LineAmount  lineAmount  = PriceDisc::price2Amount(  _custInvoiceTrans.SalesPrice,
                                                            _custInvoiceTrans.PriceUnit,
                                                            _custInvoiceTrans.DiscAmount,
                                                            _custInvoiceTrans.Qty,
                                                            _custInvoiceTrans.Qty,
                                                            _custInvoiceTrans.SalesMarkup,
                                                            discPercent,
                                                            _custInvoiceTrans.CurrencyCode,
                                                            _custInvoiceTrans.LineAmount);

        [discICMS, discPIS, discCOFINS] = Tax::getSuframaDiscount_BR(   _custInvoiceTrans.TaxGroup,
                                                                        _custInvoiceTrans.TaxItemGroup,
                                                                        custTable.Suframa_BR,
                                                                        custTable.SuframaPISCOFINS_BR);

        return [CurrencyExchangeHelper::amount(lineAmount * discICMS / 100.0),
                CurrencyExchangeHelper::amount(lineAmount * discPIS / 100.0),
                CurrencyExchangeHelper::amount(lineAmount * discCOFINS / 100.0)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    protected boolean hasCustVendTrans()
    {
        return custTrans != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;

        FiscalDocumentCustVendTransParmData_BR custVendTransParmData = new FiscalDocumentCustVendTransParmData_BR();
        FiscalDocumentInstallmentParmData_BR installmentParmData;

        custVendTransParmData.parmAmount(custTrans.AmountMST);
        custVendTransParmData.parmDocumentType(CustPaymModeTable::find(custInvoiceJour.paymMode()).PrimaryMethod_BR);
        custVendTransParmData.parmDueDate(custTrans.DueDate);

        while select DueDate, DueAmount from custPaymSchedLine
            join recId from custPaymSched
            where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                && custPaymSched.ExtRecId == custInvoiceJour.RecId
                && custPaymSched.ExtTableId == custInvoiceJour.TableId
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();

            installmentParmData.parmDueDate(custPaymSchedLine.DueDate);
            installmentParmData.parmAmount(CurrencyExchangeHelper::amountCur2MST(custPaymSchedLine.DueAmount, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate));

            custVendTransParmData.addInstallment(installmentParmData);
        }

        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        boolean isNotReturn = custInvoiceJour.SalesType != SalesType::ReturnItem && custInvoiceJour.InvoiceAmount >= 0;
        FiscalDocumentParmData_BR   fiscalDocument  = new FiscalDocumentParmData_BR();

        fiscalDocument.parmAccountingDate                   (custInvoiceJour.InvoiceDate);
        fiscalDocument.parmFiscalDocumentAccountNum         (custInvoiceJour.InvoiceAccount);
        fiscalDocument.parmFinalUser                        (custInvoiceJour.custInvoiceJour_BR().CustFinalUser_BR);
        if (fiscalDocument.parmFinalUser())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00087, funcName());
        }
        fiscalDocument.parmPresenceType                     (custInvoiceJour.custInvoiceJour_BR().PresenceType);
        fiscalDocument.parmFiscalDocumentAccountType        (CustVendType_BR::Customer);
        fiscalDocument.parmPaymentMethod                    (FiscalDocumentParmDataCreator_BR::nfePaymentMethod_BR(custInvoiceJour, this.getFiscalDocumentPurpose()));
        fiscalDocument.parmPaymentAmount                    (custInvoiceJour.InvoiceAmountMST);
        fiscalDocument.parmServiceCodeOnDlvAddress          (salesTable.salesTable_BR().ServiceCodeOnDlvAddress_BR);
        fiscalDocument.parmCFPSId                           (salesTable.salesTable_BR().CFPSId_BR);
        fiscalDocument.parmDeliveryCNPJCPF                  (salesTable.deliveryCNPJCPFNUM_BR());
        fiscalDocument.parmDeliveryIE                       (salesTable.deliveryIENum_BR());
        fiscalDocument.parmDeliveryLogisticsPostalAddress   (custInvoiceJour.DeliveryPostalAddress);
        fiscalDocument.parmDeliveryMode                     (custInvoiceJour.DlvMode);
        fiscalDocument.parmDeliveryTerm                     (custInvoiceJour.DlvTerm);

        fiscalDocument.parmFiscalEstablishmentName          (this.fiscalEstablishment().Name);
        fiscalDocument.parmFiscalEstablishmentID            (this.fiscalEstablishment().FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentPostalAddress (this.fiscalEstablishment().postalAddress().RecId);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF       (this.fiscalEstablishment().CNPJCPFNum_BR);
        fiscalDocument.parmFiscalEstablishmentIE            (this.fiscalEstablishment().IENum_BR);
        fiscalDocument.parmFiscalEstablishmentCCMNum        (this.fiscalEstablishment().CCMNum_BR);
        fiscalDocument.parmFiscalEstablishmentPhone         (this.fiscalEstablishment().phone());

        fiscalDocument.parmThirdPartyName                   (custTable.name());
        fiscalDocument.parmThirdPartyCNPJCPF                (custTable.CNPJCPFNum_BR);
        fiscalDocument.parmThirdPartyIE                     (custTable.IENum_BR);
        fiscalDocument.parmThirdPartyCCMNum                 (custTable.CCMNum_BR);
        fiscalDocument.parmThirdPartyPostalAddress          (custTable.postalAddress().RecId);
        fiscalDocument.parmThirdPartyPhone                  (custTable.phone());
        fiscalDocument.parmThirdPartyFax                    (custTable.telefax());
        fiscalDocument.parmThirdPartyIcmsContributor        (custTable.ICMSContributor_BR);
        fiscalDocument.parmThirdPartyForeignerId            (custTable.ForeignerId_BR);
        fiscalDocument.parmThirdPartyEmail                  (custTable.email());

        if (custTable.Suframa_BR)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00088, funcName());
        }

        if (isNotReturn)
        {
            fiscalDocument.parmDirection                (FiscalDocDirection_BR::Outgoing);
            fiscalDocument.parmFiscalDocumentDate       (custInvoiceJour.InvoiceDate);
            fiscalDocument.parmFiscalDocumentIssuer     (FiscalDocumentIssuer_BR::OwnEstablishment);
            fiscalDocument.parmFiscalDocumentType       (fiscalDocumentType);
            fiscalDocument.parmModel                    (fiscalDocumentType.FiscalDocumentModel);
            fiscalDocument.parmFiscalDocumentSeries     (FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId));
            fiscalDocument.parmSpecie                   (fiscalDocumentType.FiscalDocumentSpecie);
        }
        else
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00047, funcName());

            fiscalDocument.parmDirection                (FiscalDocDirection_BR::Incoming);

            if (salesTable.hasIssueFiscalDocument_BR())
            {
                fiscalDocument.parmFiscalDocumentDate   (custInvoiceJour.InvoiceDate);
                fiscalDocument.parmFiscalDocumentType   (fiscalDocumentType);
                fiscalDocument.parmFiscalDocumentIssuer (FiscalDocumentIssuer_BR::OwnEstablishment);
                fiscalDocument.parmModel                (fiscalDocumentType.FiscalDocumentModel);
                fiscalDocument.parmFiscalDocumentSeries (FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId));
                fiscalDocument.parmSpecie               (fiscalDocumentType.FiscalDocumentSpecie);
            }
            else
            {
                fiscalDocument.parmFiscalDocumentDate   (custInvoiceJour.DocumentDate);
                fiscalDocument.parmFiscalDocumentIssuer (FiscalDocumentIssuer_BR::ThirdParty);
                fiscalDocument.parmModel                (salesParmTable.FiscalDocumentModel_BR);
                fiscalDocument.parmFiscalDocumentSeries (salesParmTable.FiscalDocumentSeries_BR);
                fiscalDocument.parmSpecie               (salesParmTable.FiscalDocumentSpecie_BR);
            }
        }

        if (fiscalDocument.parmFiscalDocumentIssuer() == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            fiscalDocument.parmFiscalDocumentNumber(this.getInvoiceIdWithoutSeriesPrefix(custInvoiceJour.InvoiceId,
                                                                                         FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId)));
        }
        else
        {
            fiscalDocument.parmFiscalDocumentNumber(salesParmTable.FiscalDocumentNumber_BR);
            fiscalDocument.parmFiscalDocumentAccessKey(salesParmTable.FiscalDocumentAccessKey_BR);
        }

        var freightTerms = FiscalDocumentParmDataCreator_BR::convertToFiscalDocumentFreightTerms(salesParmUpdate.BOLFreightChargeTerms);
        fiscalDocument.parmFreightChargeTerms(freightTerms);
        fiscalDocument.parmInventoryVoucher(custInvoiceJour.LedgerVoucher);

        fiscalDocument.parmRefRecId                         (custInvoiceJour.RecId);
        fiscalDocument.parmRefTableId                       (custInvoiceJour.TableId);

        fiscalDocument.parmSalesCarrier                     (salesCarrier.RecId);
        fiscalDocument.parmSalesCarrierPostalAddress        (LogisticsPostalAddress::findByLocation(salesCarrier.Location).RecId);
        fiscalDocument.parmVehicleLicensePlateNumber        (salesParmUpdate.VehicleLicensePlate_BR);
        fiscalDocument.parmVehicleLicensePlateState         (salesParmUpdate.VehicleLicensePlateState_BR);

        fiscalDocument.parmVoucher                          (custInvoiceJour.LedgerVoucher);

        fiscalDocument.parmTotalAmount                  (custInvoiceJour.InvoiceAmountMST);
        fiscalDocument.parmTotalMarkupFreightAmount     (salestotals.markupFreightAmountMST_BR());
        fiscalDocument.parmTotalMarkupInsuranceAmount   (salestotals.markupInsuranceAmountMST_BR());
        fiscalDocument.parmTotalMarkupOtherAmount       (salestotals.markupOthersAmountMST_BR());

        boolean isNFeNT2020006v100Enabled = this.fiscalEstablishment().checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v100);

        if (isNFeNT2020006v100Enabled)
        {
            fiscalDocument.parmThirdPartySalesDigitalPlatform(salesTable.salesTable_BR().ThirdPartySalesDigitalPlatform);
        }

        if (FiscalDocumentHelper::checkIfThirdPartySalesDigitalPlatformApplicable(
            fiscalDocument.parmDirection(),
            isNFeNT2020006v100Enabled,
            fiscalDocument.parmPresenceType()))
        {
            fiscalDocument.parmThirdPartySalesDigitalPlatformCNPJ(salesTable.salesTable_BR().ThirdPartySalesDigitalPlatformCNPJ);
            fiscalDocument.parmThirdPartySalesDigitalPlatformSalesResponsible(HcmWorker::find(salesTable.WorkerSalesTaker).DirPerson().Name);
        }

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    protected List initLinesParmData()
    {
        CustInvoiceTrans                custInvoiceTrans;
        SalesLine                       salesLine;
        InventTable                     inventTable;
        FiscalDocumentLineParmData_BR   fiscalDocumentLineParmData;
        List                            ret = new List(Types::Class);

        LogisticsPostalAddress          logisticsPostalAddress;
    
        int                             linesCount;
        AmountMST                       journalDiscAmountMST;
        AmountMST                       lineGrossAmountMST;
        AmountMST                       salesBalanceMST;
        AmountMST                       endDiscMST;
        AmountMST                       endDiscAlreadyAllocatedMST;
        boolean ok;

        CFOPId_BR cfop(recId _cfopRecId)
        {
            return CFOPTable_BR::find(_cfopRecId).CFOPId;
        }

        salesBalanceMST = custInvoiceJour.SalesBalanceMST;
        endDiscMST      = custInvoiceJour.EndDiscMST;
    
        if (custInvoiceJour.SalesType != SalesType::ReturnItem
            && custInvoiceJour.InvoiceAmount >= 0
            || salesTable.hasIssueFiscalDocument_BR())
        {
            logisticsPostalAddress = this.fiscalEstablishment().postalAddress();
        }
        else
        {
            logisticsPostalAddress = custTable.postalAddress();
        }

        TaxBenefitCodeSetupHeading_BR taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);

        boolean isAnyService;
        for (ok = custInvoiceTransList.first(custInvoiceTrans);
             ok;
             ok = custInvoiceTransList.next(custInvoiceTrans))
        {
            linesCount++;

            salesLine = custInvoiceTrans.salesLine();
            inventTable = custInvoiceTrans.inventTable();

            fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();

            if (InventTable.ItemType == ItemType::Item)
            {
                fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Product);
                fiscalDocumentLineParmData.parmFiscalClassification (inventTable.TaxFiscalClassification_BR);
            }
            else
            {
                fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Service);
                fiscalDocumentLineParmData.parmServiceCode          (salesLine.salesLine_BR().TaxServiceCode_BR);
                isAnyService = true;
            }

            fiscalDocumentLineParmData.parmItemId                   (custInvoiceTrans.ItemId);
            fiscalDocumentLineParmData.parmCFOP                     (cfop(salesLine.salesLine_BR().CFOPTable_BR));
            fiscalDocumentLineParmData.parmQuantity                 (custInvoiceTrans.Qty);
            fiscalDocumentLineParmData.parmUnit                     (custInvoiceTrans.SalesUnit);

            fiscalDocumentLineParmData.parmDescription(this.getItemNameBR(custInvoiceTrans));

            lineGrossAmountMST = custInvoiceTrans.grossAmountMST();

            CurrencyCode currencyCode = Ledger::accountingCurrency();

            journalDiscAmountMST = salesBalanceMST > 0 ? CurrencyExchange::round(endDiscMST * (custInvoiceTrans.LineAmountMST / salesBalanceMST), currencyCode) : 0.00;
            endDiscAlreadyAllocatedMST += journalDiscAmountMST;

            fiscalDocumentLineParmData.parmLineAmount               (lineGrossAmountMST);
            fiscalDocumentLineParmData.parmLineDiscount             (custInvoiceTrans.SumLineDiscMST + journalDiscAmountMST);

            // rounding differences are added to the last line
            if (custInvoiceTransList.len() == linesCount)
            {
                fiscalDocumentLineParmData.parmLineDiscount         (fiscalDocumentLineParmData.parmLineDiscount() + endDiscMST - endDiscAlreadyAllocatedMST);
            }

            if (fiscalDocumentLineParmData.parmQuantity())
            {
                fiscalDocumentLineParmData.parmUnitPrice            (fiscalDocumentLineParmData.parmLineAmount() / fiscalDocumentLineParmData.parmQuantity());
            }

            fiscalDocumentLineParmData.parmFinancialLedgerDimension (FiscalDocParmDataCreatorCustInvoice_BR::getFinancialDimension(custInvoiceTrans, salesLine));
            fiscalDocumentLineParmData.parmOrigin                   (inventTable.TaxationOrigin_BR);
            fiscalDocumentLineParmData.parmExceptionCode            (inventTable.ExceptionCode_BR);
            fiscalDocumentLineParmData.parmScaleIndicator           (inventTable.ScaleIndicator_BR);
            fiscalDocumentLineParmData.parmCNPJ                     (inventTable.CNPJ_BR);
            
            fiscalDocumentLineParmData.parmBenefitCode              (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        custInvoiceTrans.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        custInvoiceJour.OrderAccount,
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmAdjustmentCode53         (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        custInvoiceTrans.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        custInvoiceJour.OrderAccount,
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmObservationCode          (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        custInvoiceTrans.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        custInvoiceJour.OrderAccount,
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Sales));

            if (custInvoiceJour.SalesType == SalesType::ReturnItem
                && ICMSSTAdditionalInfoFeature::isEnabled()
                && salesLine.hasICMSSTTax_BR())
            {
                CustInvoiceTrans_BR custInvoiceTrans_BR = custInvoiceTrans.custInvoiceTrans_BR();
                fiscalDocumentLineParmData.parmRespWithholdingICMSST(custInvoiceTrans_BR.RespWithholdoingICMSST);
                fiscalDocumentLineParmData.parmICMSSTCollectionPaymentMode(custInvoiceTrans_BR.ICMSSTCollectionPaymentMode);
                fiscalDocumentLineParmData.parmICMSSTCollectionPaymentNumber(custInvoiceTrans_BR.ICMSSTCollectionPaymentNumber);
                fiscalDocumentLineParmData.parmHasICMSSTAdditionalInfo(NoYes::Yes);
                fiscalDocumentLineParmData.parmNfeVbcstretVicmsstretTagsReported(custInvoiceTrans_BR.NfeVbcstretVicmsstretTagsReported);
            }
            
            fiscalDocumentLineParmData.parmInventTransId            (custInvoiceTrans.InventTransId);

            this.setTaxationOriginAndFciNumber(fiscalDocumentLineParmData);

            this.setLineParmDataRefRecord(fiscalDocumentLineParmData, custInvoiceTrans);

            this.sumUpSuframaDiscount(custInvoiceTrans, fiscalDocumentLineParmData);

            fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addTexts(salesLine));

            if (this.shouldHaveApproximateTaxDescription())
            {
                fiscalDocumentLineParmData.parmApproximateTaxAmount     (round(inventTable.approximateTaxValue_BR() * lineGrossAmountMST / 100, 0.01));
                totalApproxTaxAmount += fiscalDocumentLineParmData.parmApproximateTaxAmount();

                fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addApproximateTaxTextLine(inventTable, fiscalDocumentLineParmData));
            }

            if (fiscalDocumentLineParmData.parmFciNumber() != '')
            {
                fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addFciTextLine(fiscalDocumentLineParmData, fiscalDocumentLineParmData.parmTextTagReplacer()));
            }

            this.initTagsReplacer(fiscalDocumentLineParmData.parmTextTagReplacer(), custInvoiceTrans);
            ret.addEnd(fiscalDocumentLineParmData);
        }

        if (isAnyService)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00084, funcName());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    protected List initListOfInstallments()
    {
        int installmentNum;

        List list = new List(Types::Class);

        FiscalDocumentInstallmentParmData_BR installment;

        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;

        select firstonly recId from custPaymSched
            where custPaymSched.ExtTableId == this.custPaymSchedRefTableId()
                && custPaymSched.ExtRecId == this.custPaymSchedRefRecId();

        if (custPaymSched)
        {
            while select DueDate, DueAmount from custPaymSchedLine
                    where CustPaymSchedLine.ParentRecID == custPaymSched.RecId
            {
                installmentNum++;

                installment = new FiscalDocumentInstallmentParmData_BR();

                installment.parmDueDate(custPaymSchedLine.DueDate);
                installment.parmAmount(CurrencyExchangeHelper::amountCur2MST(custPaymSchedLine.DueAmount, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate));
                installment.parmInstallmentNumber(installmentNum);

                list.addEnd(installment);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List shipmentStatList = new List(Types::Class);
        SalesShippingStat salesShipmentStat;
        FiscalDocumentShipmentStatParmData_BR shipmentStatParmData;

        while select sum(GrossWeight), sum(NetWeight), sum(VolumeQty_BR) from salesShipmentStat
            group by VolumeType_BR
            where salesShipmentStat.InvoiceId       == custInvoiceJour.InvoiceId
                && salesShipmentStat.InvoiceDate    == custInvoiceJour.InvoiceDate
                && salesShipmentStat.TableRefId     == salesParmTable.TableRefId
        {
            shipmentStatParmData = new FiscalDocumentShipmentStatParmData_BR();
            shipmentStatParmData.parmVolumeType(salesShipmentStat.VolumeType_BR);
            shipmentStatParmData.parmVolumeQuantity(salesShipmentStat.VolumeQty_BR);
            shipmentStatParmData.parmGrossWeight(salesShipmentStat.GrossWeight);
            shipmentStatParmData.parmNetWeight(salesShipmentStat.NetWeight);

            shipmentStatList.addEnd(shipmentStatParmData);
        }

        if (!shipmentStatList.empty())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00038, funcName());
        }

        return shipmentStatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfThirdPartySalesDigitalPlatformCardPaymentsParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a list of objects representing the third party sales digital platform card payments.
    /// </summary>
    /// <returns>
    /// A List of classes with instances representing the third party sales digital platform card payments of the Fiscal Document.
    /// </returns>
    protected List initListOfThirdPartySalesDigitalPlatformCardPaymentsParmData()
    {
        //Extend this method in case of inegration with third party sales digital platform.
        return new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagsReplacer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FiscalDocumentTextTagReplacer_BR</c> object to replace fiscal document text's placeholders
    /// for customer invoices.
    /// </summary>
    /// <param name="_tagReplacer">
    /// <c>FiscalDocumentTextTagReplacer_BR</c> object to be initialized.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// <c>CustInvoiceTrans</c> buffer to retrieve data to populate the tags; optional.
    /// </param>
    /// <returns>
    /// A <c>FiscalDocumentTextTagReplacer_BR</c> object.
    /// </returns>
    protected FiscalDocumentTextTagReplacer_BR initTagsReplacer(FiscalDocumentTextTagReplacer_BR _tagReplacer, CustInvoiceTrans _custInvoiceTrans = null)
    {
        FiscalDocumentTextTagReplacer_BR fiscalDocumentTextTagReplacer = _tagReplacer;
        PurchLine                        directDeliveryPurchLine;
        VendTable                        directDeliveryVendTable;

        fiscalDocumentTextTagReplacer.parmCustomer_Address(DirParty::primaryPostalAddress(custInvoiceJour.custTable_InvoiceAccount().Party).Address);
        fiscalDocumentTextTagReplacer.parmCustomer_CnpjCpf(custTable.CNPJCPFNum_BR);
        fiscalDocumentTextTagReplacer.parmCustomer_IE(custTable.IENum_BR);
        fiscalDocumentTextTagReplacer.parmCustomer_Name(custTable.name());

        if (_custInvoiceTrans)
        {
            directDeliveryPurchLine = PurchLine::findInventTransId(_custInvoiceTrans.InventRefTransId);
            if (directDeliveryPurchLine)
            {
                directDeliveryVendTable = directDeliveryPurchLine.vendTable_OrderAccount();
                fiscalDocumentTextTagReplacer.parmVendor_Address(DirParty::primaryPostalAddress(directDeliveryVendTable.Party).Address);
                fiscalDocumentTextTagReplacer.parmVendor_CnpjCpf(directDeliveryVendTable.CNPJCPFNum_BR);
                fiscalDocumentTextTagReplacer.parmVendor_IE(directDeliveryVendTable.IENum_BR);
                fiscalDocumentTextTagReplacer.parmVendor_Name(directDeliveryVendTable.name());
            }
        }

        if (custTable.Suframa_BR)
        {
            fiscalDocumentTextTagReplacer.parmSuframa_CustNumber(custTable.SuframaNumber_BR);
            fiscalDocumentTextTagReplacer.parmICMS  (_custInvoiceTrans ? lineSuframaDiscountICMS     : headerSuframaDiscountICMS);
            fiscalDocumentTextTagReplacer.parmPIS   (_custInvoiceTrans ? lineSuframaDiscountPIS      : headerSuframaDiscountPIS);
            fiscalDocumentTextTagReplacer.parmCOFINS(_custInvoiceTrans ? lineSuframaDiscountCOFINS   : headerSuframaDiscountCOFINS);
        }

        return fiscalDocumentTextTagReplacer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareFiscalDocumentText</Name>
				<Source><![CDATA[
    protected void prepareFiscalDocumentText(FiscalDocumentParmData_BR  _fiscalDocumentParmData)
    {
        this.initTagsReplacer(_fiscalDocumentParmData.parmTextTagReplacer());

        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addTexts(salesTable));
        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addTexts(salesParmTable));
        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addTaxWithholdTexts());
        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addApproximateTaxTextHeader(custInvoiceJour.SalesBalanceMST));

        super(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>CustInvoiceJour</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///     The <c>CustInvoiceJour</c> table buffer from which values will be retrieved to be used in the fiscal document posting.
    /// </param>
    public void setCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;

        custTrans = custInvoiceJour.custTrans();
        custTable = custInvoiceJour.custTable_InvoiceAccount();

        fiscalDocumentType = FiscalDocumentType_BR::findRecID(custInvoiceJour.custInvoiceJour_BR().FiscalDocumentType_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustInvoiceTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the list of <c>CustInvoiceTrans</c> table buffers to be used during the fiscal document posting process.
    /// </summary>
    /// <param name="_custInvoiceTransList">
    ///     The <c>List</c> of <c>CustInvoiceTrans</c> table buffers to be used during the fiscal document posting.
    /// </param>
    public void setCustInvoiceTransList(RecordSortedList _custInvoiceTransList)
    {
        custInvoiceTransList = _custInvoiceTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineParmDataRefRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference to the original buffer in the <c>FiscalDocumentLineParmData_BR</c> parm data object.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// <c>FiscalDocumentLineParmData_BR</c> where the references will be set.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// <c>CustInvoiceTrans</c> to which the references will point to.
    /// </param>
    protected void setLineParmDataRefRecord(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, CustInvoiceTrans _custInvoiceTrans)
    {
        _fiscalDocumentLineParmData.parmRefTableId               (_custInvoiceTrans.TableId);
        _fiscalDocumentLineParmData.parmRefRecId                 (_custInvoiceTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesParmTable</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesParmTable">
    ///     The <c>SalesParmTable</c> table buffer that will provide values to be used during the fiscal document posting.
    /// </param>
    public void setSalesParmTable(SalesParmTable _salesParmTable)
    {
        salesParmTable = _salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesParmUpdate</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesParmUpdate">
    ///     The <c>SalesParmUpdate</c> table buffer that will provide values to be used during the fiscal document posting.
    /// </param>
    public void setSalesParmUpdate(SalesParmUpdate _salesParmUpdate)
    {
        salesParmUpdate = _salesParmUpdate;

        salesCarrier = SalesCarrier::find(salesParmUpdate.BOLCarrierName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesTable</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesTable">
    ///     The <c>SalesTable</c> table buffer that will provide values to be used during the fiscal document posting.
    /// </param>
    public void setSalesTable(SalesTable _salesTable)
    {
        salesTable = _salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesTotals</c> class that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesTotals">
    ///     The <c>SalesTotals</c> instance that will provide values to be used during the fiscal document posting.
    /// </param>
    public void setSalesTotals(SalesTotals _salesTotals)
    {
        salesTotals = _salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxationOriginAndFciNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches and set for FCI information if required
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Line that may be updated
    /// </param>
    protected void setTaxationOriginAndFciNumber(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        ImportedContentPerItem_BR       importedContent;

        if (custInvoiceJour.SalesType != SalesType::ReturnItem
            && custInvoiceJour.InvoiceAmount >= 0)
        {
            importedContent = FciIdentifier_BR::getFciAndTaxationOrigin(fiscalDocumentType.fiscalEstablishment().FiscalEstablishmentId,
                                                                        fiscalDocumentType.FiscalDocumentModel,
                                                                        FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                        FiscalDocDirection_BR::Outgoing,
                                                                        custInvoiceJour.InvoiceDate,
                                                                        _fiscalDocumentLineParmData.parmCFOP(),
                                                                        _fiscalDocumentLineParmData.parmItemId());
            if (importedContent)
            {
                _fiscalDocumentLineParmData.parmOrigin            (importedContent.TaxationOrigin);
                _fiscalDocumentLineParmData.parmFciNumber         (importedContent.FCINumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldHaveApproximateTaxDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the approximate tax description should be written.
    /// </summary>
    /// <returns>
    /// True if the text that describe the approximate taxes should be exported, false otherwise.
    /// </returns>
    public boolean shouldHaveApproximateTaxDescription()
    {
        RecId           SalesPurchOperationType;

        if (brazilParameters.ApproxTaxPrintOnlyFinalUser && !salesTable.salesTable_BR().CustFinalUser_BR)
        {
            return false;
        }

        SalesPurchOperationType = custInvoiceJour.custInvoiceJour_BR().SalesPurchOperationType_BR;

        if ((!SalesPurchOperationType || SalesPurchOperationType_BR::find(SalesPurchOperationType).CreateFinancialTrans == NoYes::Yes))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpSuframaDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums up the Suframa discounts of the line, updating the <c>FiscalDocumentLineParmData_BR</c> along the way.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// A <c>CustInvoiceTrans</c> buffer containing the line being processed.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> corresponding to the <c>_custInvoiceTrans</c> that should be updated.
    /// </param>
    /// <remarks>
    /// It calculates both the
    /// </remarks>
    protected void sumUpSuframaDiscount(CustInvoiceTrans _custInvoiceTrans, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData = null)
    {
        if (custTable.Suframa_BR)
        {
            [lineSuframaDiscountICMS, lineSuframaDiscountPIS, lineSuframaDiscountCOFINS] = this.getSuframaAmount(_custInvoiceTrans);

            headerSuframaDiscountICMS   += lineSuframaDiscountICMS;
            headerSuframaDiscountPIS    += lineSuframaDiscountPIS;
            headerSuframaDiscountCOFINS += lineSuframaDiscountCOFINS;

            if (_fiscalDocumentLineParmData)
            {
                _fiscalDocumentLineParmData.parmSuframaDiscountCOFINS(lineSuframaDiscountCOFINS);
                _fiscalDocumentLineParmData.parmSuframaDiscountICMS  (lineSuframaDiscountICMS);
                _fiscalDocumentLineParmData.parmSuframaDiscountPIS   (lineSuframaDiscountPIS);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFDPresumedSourceDocumentType</Name>
				<Source><![CDATA[
    protected FDPresumedSourceDocumentType_BR getFDPresumedSourceDocumentType()
    {
        return custInvoiceJour.SalesType == SalesType::ReturnItem ? FDPresumedSourceDocumentType_BR::SalesOrderReturn : FDPresumedSourceDocumentType_BR::Default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the purpose of the fiscal document generated from the customer invoice
    /// </summary>
    /// <returns>
    /// The purpose of the fiscal document being posted
    /// </returns>
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        FiscalDocumentPurpose_BR            fiscalDocumentPurpose;
        CustInvoiceTrans                    custInvoiceTrans;

        custInvoiceTransList.first(custInvoiceTrans);

        if (CFOPTable_BR::find(custInvoiceTrans.salesLine().salesLine_BR().CFOPTable_BR).Purpose == CFOPPurpose_BR::ReturnOrder)
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Return;
        }
        else
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Regular;
        }

        return fiscalDocumentPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given CustInventTrans.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The vendInvoiceTrans record.
    /// </param>
    /// <param name="_salesLine">
    /// The salesLine record.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static LedgerDimensionAccount getFinancialDimension(CustInvoiceTrans _custInvoiceTrans, SalesLine _salesLine = null)
    {
        RecId ledgerDimensionMerged;
        SalesLine salesLine =_salesLine;

        if (_salesLine == null)
        {
            salesLine = _custInvoiceTrans.salesLine();
        }

        ledgerDimensionMerged = _custInvoiceTrans.LedgerDimension ? 
            LedgerDimensionFacade::serviceCreateLedgerDimension(_custInvoiceTrans.LedgerDimension) : 
            LedgerDimensionFacade::serviceCreateLedgerDimension(salesLine.accountSalesLedgerDimension());

        return ledgerDimensionMerged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemNameBR</Name>
				<Source><![CDATA[
    internal ItemNameDisplay getItemNameBR(CustInvoiceTrans custInvoiceTrans)
    {
        InventDim inventDim = custInvoiceTrans.inventDim();
        InventTable inventTable = InventTable::find(custInvoiceTrans.ItemId);
        EcoResProduct product = EcoResProduct::find(inventTable.product);
        EcoResProductName productName = product.productName('pt-br');

        if (!inventDim.anyProductDimensionSpecified())
        {
            return productName;
        }

        InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(custInvoiceTrans.ItemId, inventDim);
        EcoResProductName productVariantName;

        if (inventDimCombination.RecId)
        {
            productVariantName = inventDimCombination.defaultProductName();
        }

        return productVariantName
                ? productName + ' / ' + productVariantName
                : productName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>