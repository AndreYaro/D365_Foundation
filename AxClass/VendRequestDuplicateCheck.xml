<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestDuplicateCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRequestDuplicateCheck
{
    #define.Tab('\t')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a validation check for the vendor.
    /// </summary>
    /// <param name="_vendRequest">
    /// The <c>VendRequest</c> table buffer that contains the prospective vendor data.
    /// </param>
    /// <param name="_vendFieldMetadataGroupType">
    /// The parameter is used for finding a <c>VendRequestProfile</c> record of specified <c>VendFieldMetadataGroupType</c> type.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkVendor(VendRequestCompany _vendRequest, VendFieldMetadataGroupType _vendFieldMetadataGroupType)
    {
        VendRequestProfile              vendRequestProfile;
        Map                             partyMap;
        MapEnumerator                   mapEnumerator;
        DirPartyTable                   party;
        DirPartyView                    partyRelated;
        LogisticsAddressCountryRegionId countryRegion = DirParty::primaryPostalAddress(_vendRequest.VendParty).CountryRegionId;

        // get configuration profile
        vendRequestProfile = VendRequestProfileHelper::findVendRequestProfile(_vendFieldMetadataGroupType, countryRegion);

        if (vendRequestProfile.CheckParties == NoYes::Yes)
        {
            partyMap = VendRequestDuplicateCheck::matchParty(_vendRequest);

            if (partyMap.elements() > 0)
            {
                mapEnumerator = partyMap.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    party = mapEnumerator.currentValue();
                    // Validations /t Relating global address book entries(s) /t [Relationship type]: [Account number/ID]
                    while select Party, Accountnum, RoleType, DataArea from partyRelated where
                        partyRelated.Party == party.RecId
                        && (partyRelated.RoleType != DirPartyRoleType::ProspectiveVendor || partyRelated.Party != _vendRequest.VendParty)
                    {
                        info(strFmt("@SYS135556" + #Tab + "@SYS301628" + #Tab + "@SYS335648", partyRelated.RoleType, partyRelated.Accountnum, partyRelated.DataArea));
                    }
                }
            }
        }

        if (vendRequestProfile.CheckEmbargoCountries == NoYes::Yes)
        {
            if (VendRequestDuplicateCheck::matchEmbargoCountryRegion(_vendRequest))
            {
                // Validations \t Vendor resides in an embargo country/region: \t Embargo Country/region: %1
                info(strFmt("@SYS135556" + #Tab + "@SYS308680" + #Tab + "@SYS308681", countryRegion));
            }
        }

        if (vendRequestProfile.CheckDisallowed == NoYes::Yes)
        {
            if (VendRequestDuplicateCheck::matchDisallowed(_vendRequest))
            {
                // Some of the information for this vendor appears in the list of disallowed vendors. To determine if this is a disallowed vendor, see the Disallowed vendors form.
                info("@SYS4000706");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorAddRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a validation check for the new vendor justification process.
    /// </summary>
    /// <param name="_vendRequest">
    /// The <c>VendRequest</c> table buffer that contains the prospective vendor data.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkVendorAddRequest(VendRequestCompany _vendRequest)
    {
        VendRequestDuplicateCheck::checkVendor(_vendRequest, VendFieldMetadataGroupType::VendRequestNewVendorJustification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a validation check for the vendor application process.
    /// </summary>
    /// <param name="_vendRequest">
    /// The <c>VendRequest</c> table buffer that contains the prospective vendor data.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkVendorApplication(VendRequestCompany _vendRequest)
    {
        VendRequestDuplicateCheck::checkVendor(_vendRequest, VendFieldMetadataGroupType::VendRequestProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchDisallowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches the prospective vendor information against the disallowed vendor table for duplicate data.
    /// </summary>
    /// <param name="_vendRequestCompany">
    /// The prospective vendor data to be matched against the disallowed vendor data.
    /// </param>
    /// <returns>
    /// True if the matching disalowed vendor exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// The method used to return a map of the <c>DirPartyTable</c> record IDs as the key and the matching table record. It is changed to boolean.
    /// Parameter _vendRequestCompanyType was removed since it was not used in the method.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean matchDisallowed(VendRequestCompany _vendRequestCompany)
    {
        VendRequestDisallowedVendor             vendRequestDisallowedVendor;
        VendRequestDisallowedVendorLegalEntity  disallowedVendorLegalEntity;
        DirPartyTable                           dirPartyTableDisallowed;
        DirPartyPostalAddressView               postalAddress;
        DirPartyTable                           vendParty = DirPartyTable::findRec(_vendRequestCompany.VendParty);
        VendRequestProspectiveProfile           prospectiveProfile;

        // match the vendor name, alias or address
        select firstonly RecId from vendRequestDisallowedVendor
            exists join disallowedVendorLegalEntity
                where disallowedVendorLegalEntity.DisallowedVendor == vendRequestDisallowedVendor.RecId
                   && disallowedVendorLegalEntity.DataArea == curext()
            exists join dirPartyTableDisallowed
                where dirPartyTableDisallowed.RecId == vendRequestDisallowedVendor.Party
            outer join RecId from postalAddress
                where postalAddress.Party == dirPartyTableDisallowed.RecId &&
                    (
                        dirPartyTableDisallowed.Name == vendParty.Name
                    ||  (  vendParty.NameAlias != ''
                        && dirPartyTableDisallowed.NameAlias == vendParty.NameAlias)
                    )
                    ||
                    (
                        postalAddress.Address == DirParty::primaryPostalAddress(_vendRequestCompany.VendParty).Address &&
                        postalAddress.ValidFrom <= DateTimeUtil::utcNow() &&
                        postalAddress.ValidTo >= DateTimeUtil::utcNow()
                    );

        if (!vendRequestDisallowedVendor.RecId)
        {
            prospectiveProfile = VendRequestProspectiveProfile::find(_vendRequestCompany.ProspectiveProfile);

            if (   prospectiveProfile.OrganizationNumber != ""
                || prospectiveProfile.FiscalCode != ""
                || prospectiveProfile.CompanyIdSiret != ""
                || prospectiveProfile.Federal1099Number != ""
                || prospectiveProfile.BankIBAN != ""
                || (   prospectiveProfile.BankAccountNumber != ""
                    && (   prospectiveProfile.RoutingNumber != ""
                        || prospectiveProfile.SWIFTNumber != ""
                        || prospectiveProfile.BankCIN != ""
                       )
                   )
               )
            {
                // match the vendor organization mumber, fiscal code, siret ID, federal 11099 number or bank account
                select firstonly RecId from vendRequestDisallowedVendor
                    where
                        (
                            prospectiveProfile.OrganizationNumber != ""
                            && vendRequestDisallowedVendor.OrganizationNumber == prospectiveProfile.OrganizationNumber
                        )
                        ||
                        (
                            prospectiveProfile.FiscalCode != ""
                            && vendRequestDisallowedVendor.FiscalCode == prospectiveProfile.FiscalCode
                        )
                        ||
                        (
                            prospectiveProfile.CompanyIdSiret != ""
                            && vendRequestDisallowedVendor.CompanyIdSiret == prospectiveProfile.CompanyIdSiret
                        )
                        ||
                        (
                            prospectiveProfile.Federal1099Number != ""
                            && vendRequestDisallowedVendor.Federal1099TaxId == prospectiveProfile.Federal1099Number
                        )
                        ||
                        (
                            prospectiveProfile.BankIBAN != ""
                            && vendRequestDisallowedVendor.BankIBAN == prospectiveProfile.BankIBAN
                        )
                        ||
                        (
                            prospectiveProfile.BankAccountNumber != ""
                            && vendRequestDisallowedVendor.BankAccount == prospectiveProfile.BankAccountNumber
                            &&
                            (
                                (
                                    prospectiveProfile.RoutingNumber != ""
                                && vendRequestDisallowedVendor.BankRoutingNumber == prospectiveProfile.RoutingNumber
                                )
                                ||
                                (
                                    prospectiveProfile.SWIFTNumber != ""
                                && vendRequestDisallowedVendor.SWIFTNo == prospectiveProfile.SWIFTNumber
                                )
                                ||
                                (
                                    prospectiveProfile.BankCIN != ""
                                && vendRequestDisallowedVendor.BankCIN == prospectiveProfile.BankCIN
                                )
                            )
                        )
                exists join disallowedVendorLegalEntity
                    where disallowedVendorLegalEntity.DisallowedVendor == vendRequestDisallowedVendor.RecId
                       && disallowedVendorLegalEntity.DataArea == curext();
            }
        }

        return (vendRequestDisallowedVendor.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchEmbargoCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches a county or region of a prospective vendor with an embargo of a country or region.
    /// </summary>
    /// <param name="_vendRequestCompany">
    /// The <c>VendRequestCompany</c> record to match against.
    /// </param>
    /// <returns>
    /// true if the country or region of a prospective vendor matches an embargo of a country or region;
    /// otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean matchEmbargoCountryRegion(VendRequestCompany _vendRequestCompany)
    {
        VendRequestEmbargoCountry embargoCountryRegion;
        boolean hasMatch = false;

        select firstonly RecId from embargoCountryRegion where
            embargoCountryRegion.CountryRegion == DirParty::primaryPostalAddress(_vendRequestCompany.VendParty).CountryRegionId;

        if (embargoCountryRegion.RecId != 0)
        {
            hasMatch = true;
        }

        return hasMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches the global address book party against a vendor add request.
    /// </summary>
    /// <param name="_vendRequestCompany">
    /// The <c>VendRequestCompany</c> table buffer that contains the prospective vendor data to be matched
    /// against the vendor data.
    /// </param>
    /// <returns>
    /// A map of the <c>DirPartyTable</c> record IDs as the key and the matching table record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Map matchParty(VendRequestCompany _vendRequestCompany)
    {
        DirPartyTable party;
        Map ret = new Map(Types::Int64, Types::Record);
        DirPartyTable vendParty = DirPartyTable::findRec(_vendRequestCompany.VendParty);
        VendRequestProspectiveProfile prospectiveProfile = VendRequestProspectiveProfile::find(_vendRequestCompany.ProspectiveProfile);
        DirPartyPostalAddressView postalAddress;
        Addressing primaryAddress = DirParty::primaryPostalAddress(_vendRequestCompany.VendParty).Address;

        // Match on one of the following: the party's name or search name or address.
        while select RecId, Name, NameAlias, PartyNumber from party where
            party.Name == vendParty.Name
            || (party.NameAlias != '' && party.NameAlias == vendParty.Name)
        {
            if  (!ret.exists(party.RecId))
            {
                ret.insert(party.RecId, party);
            }
        }

        if (primaryAddress != '')
        {
            while select RecId, Name, NameAlias, PartyNumber from party
                join Address from postalAddress where
                postalAddress.Party == party.RecId
                && postalAddress.Address == primaryAddress
                && postalAddress.ValidFrom <= DateTimeUtil::utcNow()
                && postalAddress.ValidTo >= DateTimeUtil::utcNow()
            {
                if  (!ret.exists(party.RecId))
                {
                    ret.insert(party.RecId, party);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>