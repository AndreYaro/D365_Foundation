<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdjustPostClosingCancelSecCur_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventTransCurrencyAdjPostClosingCancelFactoryAttribute(InventTransCurrency_RU::SecondaryCur)]
final class InventAdjustPostClosingCancelSecCur_RU extends InventAdjustPostClosingCancel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedger</Name>
				<Source><![CDATA[
    void addLedger(
        LedgerVoucher           _ledgerVoucher,
        LedgerPostingType       _ledgerPostingType,
        LedgerDimensionAccount  _ledgerAccount,
        DimensionDefault        _dimension,
        CostAmount              _costAmountAdjustmentCur,
        ProjLedger              _projLedger                 = null,
        RecId                   _recId                      = 0,
        CostAmount              _costAmountAdjustmentMST_RU = 0.0,
        NoYes                   _correct_RU                 = false)
    {
        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicSecondary_RU(
                                                                         _ledgerVoucher.findOrCreateReferenceSecCur_RU(),
                                                                         _ledgerPostingType,
                                                                         LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerAccount, _dimension),
                                                                         currencyCode,
                                                                         _costAmountAdjustmentCur,
                                                                         correct);

        ledgerVoucherTransObject.parmProjLedger(_projLedger);
        ledgerVoucherTransObject.parmRecId(_recId);

        if (!prmisDefault(_correct_RU))
        {
            ledgerVoucherTransObject.parmCorrect(_correct_RU);
        }

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);
        _ledgerVoucher.restoreReferenceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransCurrency_RU</Name>
				<Source><![CDATA[
    protected InventTransCurrency_RU inventTransCurrency_RU()
    {
        return InventTransCurrency_RU::SecondaryCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventCostTransVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the postings for a given <c>inventCostTransVariance</c> record in reporting currency.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>inventCostTransVariance</c> record that should be posted.
    /// </param>
    protected void processInventCostTransVariance(InventCostTransVariance  _inventCostTransVariance)
    {
        AmountCur   costAmountCur;

        AmountMST costAmount = CurrencyExchangeHelper::amount(_inventCostTransVariance.CostAmountPostedSecCur_RU);

        if (currencyCode == CompanyInfoHelper::secondaryCurrency_RU())
        {
            costAmountCur = costAmount;
        }
        else
        {
            costAmountCur = CurrencyExchangeHelper::amountCur2MSTSecond_RU(costAmount, currencyCode, 0, transDate);
        }

        if (_inventCostTransVariance.LedgerDimension &&
            _inventCostTransVariance.OffsetLedgerDimension)
        {
            // Add variance to the ledgerVoucher
            this.addLedger( ledgerVoucher,
                            _inventCostTransVariance.Posting,
                            _inventCostTransVariance.LedgerDimension,
                            _inventCostTransVariance.DefaultDimension,
                            costAmountCur);

            this.addLedger( ledgerVoucher,
                            _inventCostTransVariance.PostingOffset,
                            _inventCostTransVariance.OffsetLedgerDimension,
                            _inventCostTransVariance.DefaultDimension,
                            -costAmountCur);

            // <GEERU>
            if (this.ledgerBondClient_RU())
            {
                this.ledgerBondClient_RU().bondLast2();
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>