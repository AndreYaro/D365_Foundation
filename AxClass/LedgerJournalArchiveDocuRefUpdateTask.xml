<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalArchiveDocuRefUpdateTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class LedgerJournalArchiveDocuRefUpdateTask implements IDataMaintenanceTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        DataMaintenanceTaskResult taskResult = DataMaintenanceTaskResult::construct();

        int64 totalUpdatedRows = 0;
        int64 updatedRows = 0;
        if (LedgerJournalArchiveDocuRefUpdateHelper::hasDocuRefRelatedDataMovedToHistory())
        {
            updatedRows = this.runDocuRefUpdate(tableNum(LedgerJournalTrans), tableNum(LedgerJournalTransHistory), taskResult);
            totalUpdatedRows += updatedRows;

            updatedRows = this.runDocuRefUpdate(tableNum(LedgerJournalTable), tableNum(LedgerJournalTableHistory), taskResult);
            totalUpdatedRows += updatedRows;
        }

        if (LedgerJournalArchiveDocuRefUpdateHelper::hasDocuRefRelatedDataMovedBackFromHistory())
        {
            updatedRows = this.runDocuRefUpdate(tableNum(LedgerJournalTransHistory), tableNum(LedgerJournalTrans), taskResult);
            totalUpdatedRows += updatedRows;

            updatedRows = this.runDocuRefUpdate(tableNum(LedgerJournalTableHistory), tableNum(LedgerJournalTable), taskResult);
            totalUpdatedRows += updatedRows;
        }
        taskResult.parmCount(totalUpdatedRows);
        
        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the caption for the given action.
    /// </summary>
    /// <returns>The <c>DataMaintenanceActionCaption</c> of the action.</returns>
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@LedgerJournal:DocuRefUpdateCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDocuRefUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update docuRef records and related docuHistory records
    /// </summary>
    /// <param name = "_fromTableNum">reference table that updated from </param>
    /// <param name = "_toTableNum">reference table that updated to</param>
    /// <param name = "_taskResult">data maintenance task result</param>
    /// <returns>number of records updated</returns>
    private int64 runDocuRefUpdate(int _fromTableNum, int _toTableNum, DataMaintenanceTaskResult _taskResult)
    {
        int64 totalUpdatedRows = 0;
        int updatedRows = 0;
        DictTable fromTable = new DictTable(_fromTableNum);
        str fromTableName = fromTable.name(DbBackend::Sql);

        DictTable toTable = new DictTable(_toTableNum);
        str toTableName = toTable.name(DbBackend::Sql);

        updatedRows = LedgerJournalArchiveDocuRefUpdateHelper::runDocuRefUpdate(
                _toTableNum,
                _fromTableNum);
        _taskResult.addMessage(
                DataMaintenanceMessageContract::constructForMessage(
                    Exception::Info,
                    strFmt("@LedgerJournal:DocuRefUpdateTaskDocuRefUpdateInfoMsg", fromTableName, toTableName, updatedRows)));
        totalUpdatedRows += updatedRows;

        updatedRows = LedgerJournalArchiveDocuRefUpdateHelper::runDocuHistoryUpdate(
                _toTableNum,
                _fromTableNum);
        _taskResult.addMessage(
                DataMaintenanceMessageContract::constructForMessage(
                    Exception::Info,
                    strFmt("@LedgerJournal:DocuRefUpdateTaskDocuHistUpdateInfoMsg", fromTableName, toTableName, updatedRows)));
        totalUpdatedRows += updatedRows;

        return totalUpdatedRows;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>