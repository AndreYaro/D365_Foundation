<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FixedAssetMainAccDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FixedAssetMainAccDimensionListProvider</c> class is a main account dimension list provider
///    for documented monetary amounts that are allocated to a fixed asset.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::FixedAsset)
]
class FixedAssetMainAccDimensionListProvider extends MainAccountDimensionListProvider
{
    DataAreaId          assetDataAreaId;
    AssetId             assetId;
    AssetBookId         valueModel;
    DataAreaId          assetGroupDataAreaId;
    AssetGroupId        assetGroupId;
    AssetTransType      assetTransType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the main account dimension list provider dimensions.
    /// </summary>
    protected void initValues()
    {
        Object                                  sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        SourceDocumentLineItemIFixedAsset       iFixedAsset;

        if (SourceDocumentLineItem is SourceDocumentLineItemITaxMeasure)
        {
            SourceDocumentLineItem = sourceDocumentLineItem.parmParentSourceDocumentLineItem();

            boolean isFixdAsset = sourceDocumentLineItem is SourceDocumentLineItemIFixedAsset;

            if (!isFixdAsset && SourceDocumentLineItem is SourceDocumentLineItemITaxMeasure)
            {
                //To do this is because taxMeasure's parent is taxComponent, and component's parent is transaction line.
                SourceDocumentLineItem = sourceDocumentLineItem.parmParentSourceDocumentLineItem();
            }
        }

        if (sourceDocumentLineItem is SourceDocumentLineItemIFixedAsset)
        {
            iFixedAsset         = sourceDocumentLineItem as SourceDocumentLineItemIFixedAsset;
            assetDataAreaId     = iFixedAsset.parmAssetDataAreaId();
            assetId             = iFixedAsset.parmAssetId();
            assetGroupDataAreaId= iFixedAsset.parmAssetGroupDataAreaId();
            assetGroupId        = iFixedAsset.parmAssetGroupId();
            valueModel          = iFixedAsset.parmValueModel();
            assetTransType      = iFixedAsset.parmAssetTransactionType();

            if (!assetDataAreaId)
            {
                assetDataAreaId = assetGroupDataAreaId;
            }

            if (!valueModel && assetGroupId)
            {
                changecompany(assetGroupDataAreaId)
                {
                    valueModel = AssetGroup::getValueModel(assetGroupId, CurrentOperationsTax::Current);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        LedgerDimensionDefaultAccount       ledgerDimensionDefaultAccount;
        container                           cacheResult;

        if (valueModel && assetTransType)
        {
            cacheResult = LedgerCache::getValue(LedgerCacheScope::FixedAssetMainAccDimensionListProvider, [assetDataAreaId, assetId, valueModel, assetTransType, assetGroupId]);

            if (cacheResult == conNull())
            {
                changecompany(assetDataAreaId)
                {
                    ledgerDimensionDefaultAccount = AssetLedgerAccounts::findAssetLedgerDimension(assetId, valueModel, assetTransType, true, AssetParameters::find().PostingProfile, AssetDocumentType_JP::None, assetGroupId);
                }
                LedgerCache::insertValue(LedgerCacheScope::FixedAssetMainAccDimensionListProvider, [assetDataAreaId, assetId, valueModel, assetTransType, assetGroupId], [ledgerDimensionDefaultAccount]);
            }
            else
            {
                [ledgerDimensionDefaultAccount] = cacheResult;
            }

            if (ledgerDimensionDefaultAccount)
            {
                this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>