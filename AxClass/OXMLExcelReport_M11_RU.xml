<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_M11_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form M-11 to excel
/// </summary>
class OxmlExcelReport_M11_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    XmlNodeList         xmlNodeListProlog,
                        xmlNodeListBOM,
                        xmlNodeListInventTable,
                        xmlNodeListST,
                        xmlNodeListRM,
                        xmlNodeListInCharge;

    XMLNodeListIterator xmlNodeListPrologIterator,
                        xmlNodeListBOMIterator,
                        xmlNodeListInventTableIterator,
                        xmlNodeListSTIterator,
                        xmlNodeListRMIterator,
                        xmlNodeListInChargeIterator;

    XmlDocument         xmlDocument;

    protected const int Width = 83;
    protected const str ItemName = "ItemName";
    protected const str ItemId = "ItemId";
    protected const str PrologSection = "PrologSection";
    protected const str DocumentNum = "DocumentNum";
    protected const str BOMSection = "BOMSection";
    protected const str InventTableSection = "InventTableSection";
    protected const str STSection = "STSection";
    protected const str RMSection = "RMSection";
    protected const str InChargeSection = "InChargeSection";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals on page
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        XmlElement eltItem = xmlNodeListInventTableIterator.value();

        return max(document.getNamedRangeHeightWrapped(ItemName, eltItem.getAttribute(ItemName)),
                   document.getNamedRangeHeightWrapped(ItemId,   eltItem.getAttribute(ItemId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if report data correct
    /// </summary>
    /// <returns>
    /// true if report data correct
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        if (xmlNodeListBOM.length() != 1 || xmlNodeListInventTable.length() == 0)
        {
            return checkFailed("@GLS101555");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals on page
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00122, funcName());

        widthCols = Width;

        curWorkSheetNum = 1;
        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report header
    /// </summary>
    /// <returns>
    /// if data still exists, true, otherwise false
    /// </returns>
    protected boolean fetchHeader()
    {
        if (reportNum)
        {
            xmlNodeListPrologIterator.next();

            numOfLines = xmlNodeListInventTable.length();
        }

        return xmlNodeListPrologIterator.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report lines
    /// </summary>
    /// <returns>
    /// if data still exists, true, otherwise false
    /// </returns>
    protected boolean fetchLines()
    {
        if (lineNo)
        {
            xmlNodeListInventTableIterator.next();
        }

        return xmlNodeListInventTableIterator.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'M_11';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// number of document
    /// </returns>
    protected Filename fileNamePostfix()
    {
        XmlElement elt = xmlNodeListProlog.item(0);

        return elt.getAttribute(DocumentNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'M11';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;

        elt = xmlNodeListInventTableIterator.value();
        nodeMap = elt.attributes();

        for (idx = 0; idx < nodeMap.length(); idx++)
        {
            attr = nodeMap.item(idx);
            this.insertValueToSection(attr.name(), attr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;

        if ((xmlNodeListST.length() == 1))
        {
            elt = xmlNodeListSTIterator.value();
            nodeMap = elt.attributes();

            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;
        if ((xmlNodeListProlog.length() == 1))
        {
            elt = xmlNodeListPrologIterator.value();
            nodeMap = elt.attributes();

            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }

        if ((xmlNodeListBOM.length() == 1))
        {
            elt = xmlNodeListBOMIterator.value();
            nodeMap = elt.attributes();

            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }

        if (xmlNodeListInCharge.length() == 1)
        {
            elt = xmlNodeListInChargeIterator.value();
            nodeMap = elt.attributes();

            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }

        if ((xmlNodeListRM.length() == 1))
        {
            elt = xmlNodeListRMIterator.value();
            nodeMap = elt.attributes();

            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report
    /// </summary>
    /// <returns>
    /// true, if report has correct structure
    /// </returns>
    public boolean init()
    {
        xmlDocument = XmlDocument::newXml(args.parm(), false);

        xmlNodeListProlog       = xmlDocument.getElementsByTagName(PrologSection);
        xmlNodeListBOM          = xmlDocument.getElementsByTagName(BOMSection);
        xmlNodeListInventTable  = xmlDocument.getElementsByTagName(InventTableSection);
        xmlNodeListST           = xmlDocument.getElementsByTagName(STSection);
        xmlNodeListRM           = xmlDocument.getElementsByTagName(RMSection);
        xmlNodeListInCharge     = xmlDocument.getElementsByTagName(InChargeSection);

        return this.check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches lines for header, but in this report XMLNodeListIterator used instead
    /// </summary>
    protected void initQueryRunHeader()
    {
        xmlNodeListPrologIterator    = new XMLNodeListIterator(xmlNodeListProlog);
        xmlNodeListBOMIterator       = new XMLNodeListIterator(xmlNodeListBOM);
        xmlNodeListSTIterator        = new XMLNodeListIterator(xmlNodeListST);
        xmlNodeListRMIterator        = new XMLNodeListIterator(xmlNodeListRM);
        xmlNodeListInChargeIterator  = new XMLNodeListIterator(xmlNodeListInCharge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches data for lines, but in this report XMLNodeListIterator used instead
    /// </summary>
    protected void initQueryRunLines()
    {
        xmlNodeListInventTableIterator = new XMLNodeListIterator(xmlNodeListInventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(M11_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    #define.cellsBody(11)
    #define.cellsOther(22)
    protected Counter totalCells()
    {
        return xmlNodeListInventTable.length() * #cellsBody  + #cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static OXMLExcelReport_M11_RU construct()
    {
        return new OXMLExcelReport_M11_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>