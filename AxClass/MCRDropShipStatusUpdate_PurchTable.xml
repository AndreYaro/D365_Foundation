<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRDropShipStatusUpdate_PurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRDropShipStatusUpdate_PurchLine</c> class
/// calculates and updates the drop ship update for the <c>PurchTable</c> record.
/// </summary>
class MCRDropShipStatusUpdate_PurchTable extends MCRDropShipStatusUpdate
{
    PurchTable          purchTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>purchLineSetDropShipStatusUpdateObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the update object for setting drop ship status on a purchase line.
    /// </summary>
    /// <param name = "_purchLine">The purchase line to update.</param>
    /// <returns>The update object.</returns>
    protected SysDaUpdateObject purchLineSetDropShipStatusUpdateObject(PurchLine _purchLine)
    {
        SysDaUpdateObject updateObject = new SysDaUpdateObject(_purchLine);

        updateObject.settingClause(this.purchLineSetMCRDropShipStatus(expectedDropShipStatus));

        updateObject.whereClause(
            this.purchLineFieldEquals(_purchLine, fieldStr(PurchLine, PurchId), purchTable.PurchId).and(
            this.purchLineMCRDropShipmentIsYes(_purchLine).and(
            this.purchLineMCRDropShipStatusIsNot(_purchLine, expectedDropShipStatus))));

        return updateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpectedDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the class variable <c>expectedDropShipStatus</c> based on <c>DocumentState</c> and <c>PurchStatus</c>.
    /// </summary>
    /// <returns>
    /// The class variable <c>expectedDropShipStatus</c>.
    /// </returns>
    /// <remarks>
    /// Sets the class variable <c>expectedDropShipStatus</c> and writes an <c>MCROrderEventTable</c> record when the
    /// purchase order status is set to canceled.
    /// </remarks>
    protected MCRDropShipStatus calculateExpectedDropShipStatus()
    {
        McrOrderEventTable mcrOrderEventTable;

        if (purchTable.isCanceled())
        {
            expectedDropShipStatus = MCRDropShipStatus::None;
        }
        else
        {
            switch (purchTable.DocumentState)
            {
                case VersioningDocumentState::Approved :
                    expectedDropShipStatus = MCRDropShipStatus::POCreated;
                    break;

                case VersioningDocumentState::Confirmed :
                    switch (purchTable.PurchStatus)
                    {
                        case PurchStatus::Backorder :
                            expectedDropShipStatus = MCRDropShipStatus::POReleased;
                            mcrOrderEventTable.insertFromDropShipment(purchTable.referenceSalesTable().SalesId, purchTable.PurchId, MCROrderEventType::ReleaseDropShipPO);
                            break;

                        case PurchStatus::Invoiced, PurchStatus::Received :
                            expectedDropShipStatus = MCRDropShipStatus::POShipped;
                            break;
                    }
                    break;
            }
        }

        return expectedDropShipStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRDropShipStatusUpdate</c> class.
    /// </summary>
    /// <param name="_purchTable">
    /// The purchase order record.
    /// </param>
    /// <param name="_requestedStatus">
    /// The requested drop ship status.
    /// </param>
    public void new(PurchTable _purchTable, MCRDropShipStatus _requestedStatus)
    {
        expectedDropShipStatus = _requestedStatus;

        purchTable = _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchDropShipStatusOnRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table <c>PurchLine</c> field <c>DropShipStatus</c> based on class variable <c>expectedDropShipStatus</c>.
    /// </summary>
    protected void updatePurchDropShipStatusOnRecord()
    {
        ttsBegin;

        super();

        // Update purchase order
        PurchLine purchLine;
        purchLine.skipDataMethods(true);
        purchLine.skipEvents(true);
        new SysDaUpdateStatement().execute(this.purchLineSetDropShipStatusUpdateObject(purchLine));

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesDropShipStatusOnRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table <c>MCRSalesLineDropShipment</c> field <c>DropShipStatus</c> based on class variable <c>expectedDropShipStatus</c>.
    /// </summary>
    protected void updateSalesDropShipStatusOnRecord()
    {
        SalesLine                   salesLine;
        PurchLine                   purchLine;
        MCRSalesLineDropShipment    mcrSalesLineDropShipment;

        ttsBegin;

        super();
        
        // Update sales order
        mcrSalesLineDropShipment.skipDataMethods(true);

        if (MCRDropShipStatusUpdatPurchTableFlight::instance().isEnabled())
        {
            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().dropShipStatusActivities().updateSalesDropShipStatusOnRecord(purchTable))
            {
                while select forupdate mcrSalesLineDropShipment
                     exists join salesLine
                        where mcrSalesLineDropShipment.SalesLine == salesLine.RecId
                    exists join purchLine
                        where salesLine.InventRefTransId == purchLine.InventTransId
                            && salesLine.InventRefId      == purchLine.PurchId
                            && purchLine.PurchId          == purchTable.PurchId
                {
                    mcrSalesLineDropShipment.DropShipStatus = salesLineDropShipStatus;
                    mcrSalesLineDropShipment.update();
                }
            }
        }
        else
        {
            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().dropShipStatusActivities().updateRecordSetSalesDropShipStatusOnRecord(purchTable))
            {
                update_recordset mcrSalesLineDropShipment
                    setting DropShipStatus = salesLineDropShipStatus
                    exists join salesLine
                        where mcrSalesLineDropShipment.SalesLine == salesLine.RecId
                    exists join purchLine
                        where salesLine.InventRefTransId == purchLine.InventTransId
                            && salesLine.InventRefId      == purchLine.PurchId
                            && purchLine.PurchId          == purchTable.PurchId;
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>