<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsPostalAddressTransactionFormHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LogisticsPostalAddressTransactionFormHandler
{
    // Public constants for differentiating multiple instances on one host form.
    public const str HeaderAddress = 'Header';
    public const str LineAddress = 'Line';
    public const str HeaderInLineViewAddress = 'HeaderInLineView';

    // UI settings
    private str addressNameFieldLabel;
    private str addressFieldLabel;
    private boolean showAddressField;

    LogisticsIPostalAddressTransactionForm hostForm;

    private FormDataSource transactionDataSource;
    private FieldId addressNameFieldId;
    private FieldId postalAddressFieldId;
    private MenuItemName newAddressButtonMenuItemName;
    private MenuItemType newAddressButtonMenuItemType;

    // Lookup settings
    private container lookupRoleTypes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LogisticsIPostalAddressTransactionForm _hostForm)
    {
        hostForm = _hostForm;

        // Default values
        addressNameFieldLabel = "@GlobalAddressBook:AddressName";
        addressFieldLabel = "@GlobalAddressBook:Address";
        lookupRoleTypes = [LogisticsLocationRoleType::Delivery];
        showAddressField = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the current address name for the transaction.
    /// </summary>
    /// <returns>Address name for the transaction.</returns>
    public str getAddressName()
    {
        return this.parmTransactionFormDataSource().cursor().(this.parmAddressNameFieldId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the address name field on the transaction.
    /// </summary>
    /// <param name = "_value">Value to change address name field to on the transaction.</param>
    public void setAddressName(str _value)
    {
        this.parmTransactionFormDataSource().cursor().(this.parmAddressNameFieldId()) = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>LogsiticsPostalAddressRecId</c> value of the current transaction.
    /// </summary>
    /// <returns><c>LogsiticsPostalAddressRecId</c> value of the current transaction.</returns>
    public LogisticsPostalAddressRecId getPostalAddressRecId()
    {
        return this.parmTransactionFormDataSource().cursor().(this.parmPostalAddressFieldId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the <c>LogsiticsPostalAddressRecId</c> value of the current transaction.
    /// </summary>
    /// <param name = "_postalAddressRecId">Value to set on the current transaction.</param>
    public void setPostalAddressRecId(LogisticsPostalAddressRecId _postalAddressRecId)
    {
        this.parmTransactionFormDataSource().cursor().(this.parmPostalAddressFieldId()) = _postalAddressRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewAddressArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>Args</c> used to create a new address.
    /// </summary>
    /// <returns>The <c>Args</c> used to create a new address.</returns>
    public Args createNewAddressArgs(Object _callerFormRun)
    {
        Args args = new Args(_callerFormRun);

        args.record(this.parmTransactionFormDataSource().cursor());
        args.menuItemName(this.parmNewAddressButtonMenuItemName());
        args.openMode(OpenMode::New);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the instance has valid parameters.
    /// </summary>
    /// <returns>true is the parameters are valid; otherwise false.</returns>
    public boolean validateParameters()
    {
        boolean result = true;

        // Check that the required parameters are provided.
        result = result && this.parmTransactionFormDataSource() != null;
        result = result && this.parmAddressNameFieldId() != 0;
        result = result && this.parmPostalAddressFieldId() != 0;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the lookup for addresses.
    /// </summary>
    /// <param name = "_control">The control to open the lookup for.</param>
    /// <returns>Record selected in the lookup.</returns>
    public Common lookupReference(FormReferenceControl _control)
    {
        return LogisticsLocationSelectionLookup::lookupAddressForm(
            _control,
            hostForm.getEntity(),
            this.parmLookupRoleTypes(),
            false,
            this.getInUseAddresses(),
            this.parmTransactionFormDataSource().cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInUseAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the addresses that are associated with the current transaction record.
    /// </summary>
    /// <returns>A <c>container</c> of address <c>RecId</c>, which are associated with the header and lines.</returns>
    protected container getInUseAddresses()
    {
        return hostForm.getInUseAddresses();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInactiveAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a warning if either of the addresses are inactive.
    /// </summary>
    /// <param name = "_headerAddress">First address to check.</param>
    /// <param name = "_lineAddress">Second address to check.</param>
    public void checkInactiveAddress(LogisticsPostalAddress _headerAddress, LogisticsPostalAddress _lineAddress = null)
    {
        LogisticsLocationEntity::showHideEffectiveAddressMessage(_headerAddress, _lineAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNewAddressButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for valid settings and security to indicate if the add address button should be shown.
    /// </summary>
    /// <returns>true is the button should be shown; otherwise false.</returns>
    public boolean showNewAddressButton()
    {
        boolean ret = this.parmNewAddressButtonMenuItemName() != '';

        if (ret)
        {
            SecurityRights  securityRights = SecurityRights::construct();
            SecurableType   securableType;
            switch (this.parmNewAddressButtonMenuItemType())
            {
                case MenuItemType::Display:
                    securableType = SecurableType::MenuItemDisplay;
                    break;

                case MenuItemType::Action:
                    securableType = SecurableType::MenuItemAction;
                    break;
            }

            AccessRight accessRight = securityRights.menuItemAccessRight(securableType, this.parmNewAddressButtonMenuItemName());

            ret = accessRight != AccessRight::NoAccess;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLookupRoleTypes</Name>
				<Source><![CDATA[
    public container parmLookupRoleTypes(container _roleTypes = this.lookupRoleTypes)
    {
        this.lookupRoleTypes = _roleTypes;
        return this.lookupRoleTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmTransactionFormDataSource(FormDataSource _dataSource = transactionDataSource)
    {
        transactionDataSource = _dataSource;
        return transactionDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressNameFieldLabel</Name>
				<Source><![CDATA[
    public str parmAddressNameFieldLabel(str _addressNameFieldLabel = addressNameFieldLabel)
    {
        addressNameFieldLabel = _addressNameFieldLabel;
        return addressNameFieldLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressNameFieldId</Name>
				<Source><![CDATA[
    public FieldId parmAddressNameFieldId(FieldId _addressNameFieldId = addressNameFieldId)
    {
        addressNameFieldId = _addressNameFieldId;
        return addressNameFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressFieldLabel</Name>
				<Source><![CDATA[
    public str parmAddressFieldLabel(str _addressFieldLabel = addressFieldLabel)
    {
        addressFieldLabel = _addressFieldLabel;
        return addressFieldLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostalAddressFieldId</Name>
				<Source><![CDATA[
    public FieldId parmPostalAddressFieldId(FieldId _postalAddressFieldId = postalAddressFieldId)
    {
        postalAddressFieldId = _postalAddressFieldId;
        return postalAddressFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewAddressButtonMenuItemName</Name>
				<Source><![CDATA[
    public MenuItemName parmNewAddressButtonMenuItemName(MenuItemName _newAddressButtonMenuItemName = newAddressButtonMenuItemName)
    {
        newAddressButtonMenuItemName = _newAddressButtonMenuItemName;
        return newAddressButtonMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewAddressButtonMenuItemType</Name>
				<Source><![CDATA[
    public MenuItemType parmNewAddressButtonMenuItemType(MenuItemType _newAddressButtonMenuItemType = newAddressButtonMenuItemType)
    {
        newAddressButtonMenuItemType = _newAddressButtonMenuItemType;
        return newAddressButtonMenuItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAddressField</Name>
				<Source><![CDATA[
    public boolean parmShowAddressField(boolean _showAddressField = showAddressField)
    {
        showAddressField = _showAddressField;
        return showAddressField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>