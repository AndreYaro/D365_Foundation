<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMLumpSumPaymentPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMLumpSumVendPaymentPost</c> class creates and posts payments to a vendor for lump sum.
/// </summary>
class TamLumpSumPaymentPost
{
    TAMMerchEventPricing    tamMerchEventPricing;
    LedgerJournalTable      ledgerJournalTable;
    MCRLedgerJournal        mcrLedgerJournal;
    CustInvoiceTable        custInvoiceTable;
    CustInvoiceLine         custInvoiceLine;
    Amount                  totalAmount;
    CustTable               custTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lineon the free text for the lump sum.
    /// </summary>
    /// <returns>
    ///     The customer invoice line created for the free text.
    /// </returns>
    private CustInvoiceLine createCustInvoiceLine()
    {
        CustInvoiceLine custInvoiceLineLocal;
        TAMMerchandisingEvent tamMerchandisingEvent = TAMMerchandisingEvent::find(tamMerchEventPricing.MerchandisingEventID);
        TAMTradePromotion tamTradePromotion = tamMerchandisingEvent.tamTradePromotion();

        custInvoiceLineLocal.ParentRecId = custInvoiceTable.RecId;
        custInvoiceLineLocal.initFromCustInvoiceTable(custInvoiceTable);
        custInvoiceLineLocal.LineNum = 1.00;

        custInvoiceLineLocal.LedgerDimension = tamMerchEventPricing.lsOffsetLedgerDimension;
        custInvoiceLineLocal.modifiedField(fieldNum(CustInvoiceLine, LedgerDimension));

        custInvoiceLineLocal.Quantity = -1.0;
        custInvoiceLineLocal.AmountCur = CurrencyExchangeHelper::curAmount2CurAmount(-tamMerchEventPricing.LumpSumApprovedAmount, tamTradePromotion.Currency, custTable.Currency);
        custInvoiceLineLocal.Description = tamMerchEventPricing.MerchandisingEventID;
        custInvoiceLineLocal.InvoiceTxt = "@MCR27398";
        custInvoiceLineLocal.insert();

        return custInvoiceLineLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets up the parameters to create the customer invoice table record
    ///     to create a lump sum invoice header.
    /// </summary>
    /// <returns>
    ///     The customer invoice record from which to create a lump sum invoice header.
    /// </returns>
    private CustInvoiceTable createCustInvoiceTable()
    {
        CustInvoiceTable custInvoiceTableLocal = this.initializeCustInvoiceTable();

        custInvoiceTableLocal.insert();

        return custInvoiceTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows infolog message when the lump sum posting succeeds.
    /// </summary>
    protected void endInfoLog()
    {
        info("@MCR4410237");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvoiceNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSeq</c> object for the vendor invoice number sequence
    /// defined in the Trade allowance parameters.
    /// </summary>
    /// <returns>
    /// The <c>NumberSeq</c> object for the vendor invoice number sequence.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>NumberSeq</c> object could not be initialized.
    /// </exception>
    protected NumberSeq getVendorInvoiceNumberSeq()
    {
        NumberSeq               numberSeq;
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTable;

        numberSequenceReference = TAMPromotionParameters::numRefTAMLumpSumVendInvoiceId();

        numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceTable)
        {
            numberSeq = NumberSeq::newGetNum(numberSequenceReference);
        }

        if (numberSeq == null)
        {
            throw error(strFmt("@GLS111556", new DictType(extendedTypeNum(TAMLumpSumVendInvoiceNum)).label(), "@MCR25926"));
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMMerchEventPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TAMMerchEventPricing</c> table record on which the vendor lump sum payment process is performing.
    /// </summary>
    /// <param name="_tamMerchEventPricing">
    /// The <c>TAMMerchEventPricing</c> table record on which to perform vendor lump sum payment processing.
    /// </param>
    /// <returns>
    /// The merchandising event pricing record on which to perform vendor lump sum payment processing.
    /// </returns>
    protected TAMMerchEventPricing parmTAMMerchEventPricing(Common _tamMerchEventPricing = tamMerchEventPricing)
    {
        if (!prmisDefault(_tamMerchEventPricing))
        {
            tamMerchEventPricing = _tamMerchEventPricing;
        }

        return tamMerchEventPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType getSettlementType()
    {
        return SettlementType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCustomerInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a customer invoice for the lump sum.
    /// </summary>
    public void postCustomerInvoice()
    {
        if (appl.ttsLevel() != 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Args                    args;
        TAMMerchEventTrans      tamMerchEventTrans;
        TAMMerchandisingEvent   tamMerchandisingEvent;

        // Retrieve cust table record as it is required both at the time
        // of free text invoice header and line creation.
        custTable = CustTable::find(tamMerchEventPricing.tfPayTo);
        custInvoiceTable = this.createCustInvoiceTable();
        // Update the custInvoicetable with the invoiceID
        this.setCustomerInvoiceNumber();
        custInvoiceTable.reread();
        custInvoiceLine = this.createCustInvoiceLine();

        args = new Args();
        args.record(custInvoiceTable);
        // Since the payment type is customer deductions or invoice customer deductions skip settlement
        args.parmEnumType(enumNum(SettlementType));
        args.parmEnum(this.getSettlementType());
        CustPostInvoice::main(args);

        ttsbegin;
        tamMerchandisingEvent = TAMMerchandisingEvent::find(tamMerchEventPricing.MerchandisingEventID);
        tamMerchEventTrans.MerchandisingEventID = tamMerchEventPricing.MerchandisingEventID;
        tamMerchEventTrans.PromotionID = tamMerchandisingEvent.PromotionID;

        this.setTamMerchEventTransAccountNum(tamMerchEventTrans);

        custInvoiceTable.reread();

        TAMTradePromotion tamTradePromotion = tamMerchandisingEvent.tamTradePromotion();
        tamMerchEventTrans.CurrencyCode = custTable.Currency;
        tamMerchEventTrans.CustInvoiceNum = custInvoiceTable.InvoiceId;
        tamMerchEventTrans.ProcessDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tamMerchEventTrans.Amount = CurrencyExchangeHelper::curAmount2CurAmount(tamMerchEventPricing.LumpSumApprovedAmount, tamTradePromotion.Currency, custTable.Currency);

        TamLumpSumPaymentPost::saveTAMMerchEventTrans(tamMerchEventTrans);

        this.updatePricingEvent();
        ttscommit;
        
        this.endInfoLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTamMerchEventTransAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets AccountNum of <c>TAMMerchEventTrans</c>.
    /// </summary>
    protected void setTamMerchEventTransAccountNum(TAMMerchEventTrans _tamMerchEventTrans)
    {
        switch (tamMerchEventPricing.tfClaimPayType)
        {
            case TAMPaymentType::CustomerDeduction:
                _tamMerchEventTrans.AccountNum = custTable.AccountNum;
                break;
            case TAMPaymentType::InvoiceCustomerDeduction:
                if (custTable.InvoiceAccount)
                {
                    _tamMerchEventTrans.AccountNum = custTable.InvoiceAccount;
                }
                else
                {
                    _tamMerchEventTrans.AccountNum = custTable.AccountNum;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTAMMerchEventTrans</Name>
				<Source><![CDATA[
    private static void saveTAMMerchEventTrans(TAMMerchEventTrans _tamMerchEventTrans)
    {
        if  (_tamMerchEventTrans.validateWrite())
        {
            _tamMerchEventTrans.insert();
        }
        else
        {
            throw error("@SYS104318");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and posts a vendor invoice for the lump sum merchandising event.
    /// </summary>
    public void postVendorInvoice()
    {
        if (appl.ttsLevel() != 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        VendInvoiceInfoTable                vendInvoiceInfoTable;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        TAMMerchEventTrans                  tamMerchEventTrans;
        TAMMerchandisingEvent               tamMerchandisingEvent;
        TAMPromotionParameters              promotionParameters = TAMPromotionParameters::find();
        InvoiceId                           invoiceId;

        ttsbegin;

        invoiceId = this.getVendorInvoiceNumberSeq().num();
        vendInvoiceInfoTable = this.createVendorInvoice(invoiceId);

        select firstonly forupdate vendInvoiceInfoLine
            where vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
            &&    vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId;


        if (!vendInvoiceInfoLine)
        {
            throw error(Error::missingRecord(tablestr(VendInvoiceInfoLine)));;
        }

        // Fully distribute the source document line
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(vendInvoiceInfoLine,
                        false, SourceDocumentLineAccountingStatus::FullyDistributed);
        
        tamMerchandisingEvent = TAMMerchandisingEvent::find(tamMerchEventPricing.MerchandisingEventID);
        TAMTradePromotion tamTradePromotion = tamMerchandisingEvent.tamTradePromotion();
        VendCurrencyCode vendCurrency = VendTable::find(tamMerchEventPricing.tfPayTo).Currency;
        tamMerchEventTrans.MerchandisingEventID = tamMerchEventPricing.MerchandisingEventID;
        tamMerchEventTrans.PromotionID = tamMerchandisingEvent.PromotionID;
        tamMerchEventTrans.AccountNum = tamMerchEventPricing.tfPayTo;
        tamMerchEventTrans.CurrencyCode = vendCurrency;
        tamMerchEventTrans.VendInvoiceNum = invoiceId;
        tamMerchEventTrans.ProcessDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tamMerchEventTrans.Amount = CurrencyExchangeHelper::curAmount2CurAmount(tamMerchEventPricing.LumpSumApprovedAmount, tamTradePromotion.Currency, vendCurrency);

        TamLumpSumPaymentPost::saveTAMMerchEventTrans(tamMerchEventTrans);
        
        this.updatePricingEvent();
        ttscommit;

        try
        {
            ttsbegin;
            VendInvoicePaymentAuthorizationTask::postSavedInvoice(vendInvoiceInfoTable);
            ttscommit;
        }
        catch(Exception::Error)
        {
            info("@AccountsPayable:PendingCreateVendorInvoiceSuccessed");
            throw Exception::Error;
        }

        this.endInfoLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorInvoice</Name>
				<Source><![CDATA[
    private VendInvoiceInfoTable createVendorInvoice(InvoiceId _invoiceId)
    {
        SalesVendorInvoiceInfoCreator vendInvoiceInfoCreator;
        TAMPromotionParameters        promotionParameters = TAMPromotionParameters::find();
        vendInvoiceInfoTable          vendInvoiceInfoTable;

        TAMMerchandisingEvent tamMerchandisingEvent = TAMMerchandisingEvent::find(tamMerchEventPricing.MerchandisingEventID);
        TAMTradePromotion tamTradePromotion = tamMerchandisingEvent.tamTradePromotion();
        VendCurrencyCode vendCurrency = VendTable::find(tamMerchEventPricing.tfPayTo).Currency;
        vendInvoiceInfoCreator = SalesVendorInvoiceInfoCreator::construct();
        vendInvoiceInfoCreator.parmInvoiceAccount(tamMerchEventPricing.tfPayTo);
        vendInvoiceInfoCreator.parmOrderAccount(tamMerchEventPricing.tfPayTo);
        vendInvoiceInfoCreator.parmInvoiceId(_invoiceId);
        vendInvoiceInfoCreator.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        vendInvoiceInfoCreator.parmCurrencyCode(vendCurrency);
        vendInvoiceInfoCreator.parmDocumentStatus(DocumentStatus::Invoice);

        vendInvoiceInfoCreator.parmLineAmount(CurrencyExchangeHelper::curAmount2CurAmount(tamMerchEventPricing.LumpSumApprovedAmount, tamTradePromotion.Currency, vendCurrency));
        vendInvoiceInfoCreator.parmLineProcurementCategory(promotionParameters.LSProcurementCategory);
        vendInvoiceInfoCreator.parmInvoiceLineDescription(tamMerchEventPricing.MerchandisingEventID);

        vendInvoiceInfoTable = vendInvoiceInfoCreator.createVendorInvoiceInfoWithOneLine();

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePricingEvent</Name>
				<Source><![CDATA[
    private void updatePricingEvent()
    {
        tamMerchEventPricing.LumpSumStatus = MCRLumpSumStatus::Authorize;
        tamMerchEventPricing.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSeq</c> object for the customer invoice number sequence
    /// defined in the Trade allowance parameters.
    /// </summary>
    protected void setCustomerInvoiceNumber()
    {
        NumberSeq               numberSeq;
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTable;
        CustPostInvoice         custPostInvoice;
        InvoiceId               invoiceId;
        Voucher                 voucher;

        numberSequenceReference = TAMPromotionParameters::numRefTAMLumpSumCustInvoiceId();
        ttsbegin;

        custInvoiceTable.selectForUpdate(true);

        // allocate the invoice ID, and update the free-text invoice
        if (!custInvoiceTable.InvoiceId)
        {
            custPostInvoice = CustPostInvoice::construct(custInvoiceTable, TypeOfCreditmaxCheck::None);

            numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            if (numberSequenceTable)
            {
                numberSeq = NumberSeq::newGetNumAndVoucher(TAMPromotionParameters::numRefTAMLumpSumCustInvoiceId(),
                                                           TAMPromotionParameters::numRefLumpSumInvoiceVoucher());

                [invoiceId, voucher] = numberSeq.numAndVoucher();
            }

            if (numberSeq == null)
            {
                throw error(strFmt("@GLS111556", new DictType(extendedTypeNum(TAMLumpSumCustInvoiceNum)).label(), "@MCR25926"));
            }

            if (!voucher)
            {
                throw error("@SYS71652");
            }

            custInvoiceTable.InvoiceId = invoiceId;
            custInvoiceTable.mcrLedgerVoucher = voucher;
            custInvoiceTable.mcrNumberSequenceCode = numberSeq.parmVoucherSequenceCode();

            custInvoiceTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>TAMLumpSumPaymentPost</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TAMLumpSumPaymentPost</c> class.
    /// </returns>
    public static TAMLumpSumPaymentPost construct()
    {
        TAMLumpSumPaymentPost tamVendLumpSumPaymentPost;

        tamVendLumpSumPaymentPost = new TAMLumpSumPaymentPost();

        return tamVendLumpSumPaymentPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the <c>TAMLumpSumVendPaymentPost</c> class.
    /// </summary>
    /// <param name="_tamMerchEventPricing">
    /// The <c>_tamMerchEventPricing</c> record for which to post payment.
    /// </param>
    public static void main(TAMMerchEventPricing _tamMerchEventPricing)
    {
        TAMLumpSumPaymentPost   tamLumpSumPaymentPost = TAMLumpSumPaymentPost::construct();

        tamLumpSumPaymentPost.parmTAMMerchEventPricing(_tamMerchEventPricing);
        tamLumpSumPaymentPost.postInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the customer invoice from the customer
    /// </summary>
    /// <returns>An initialized record of <c>CustInvoiceTable</c></returns>
    protected CustInvoiceTable initializeCustInvoiceTable()
    {
        CustInvoiceTable custInvoiceTableLocal;

        custInvoiceTableLocal.OrderAccount = custTable.AccountNum;
        custInvoiceTableLocal.initFromCustTable(custTable);
        if (tamMerchEventPricing.tfClaimPayType == TAMPaymentType::InvoiceCustomerDeduction)
        {
            custInvoiceTableLocal.InvoiceAccount = custTable.InvoiceAccount;
        }
        else
        {
            custInvoiceTableLocal.InvoiceAccount = custTable.AccountNum;
        }

        custInvoiceTableLocal.CurrencyCode = custTable.Currency;
        custInvoiceTableLocal.LanguageId = CompanyInfo::find().LanguageId;
        custInvoiceTableLocal.DocumentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        custInvoiceTableLocal.TaxGroup = custTable.TaxGroup;
        custInvoiceTableLocal.TaxItemGroup = '';
        custInvoiceTableLocal.CashDiscCode = '';

        return custInvoiceTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the posting, creating a customer or vendor invoice depending on the type of event
    /// </summary>
    public void postInvoice()
    {
        if (tamMerchEventPricing.tfClaimPayType == TAMPaymentType::CustomerDeduction
            || tamMerchEventPricing.tfClaimPayType == TAMPaymentType::InvoiceCustomerDeduction)
        {
            this.postCustomerInvoice();
        }
        else if (tamMerchEventPricing.tfClaimPayType == TAMPaymentType::Cheque)
        {
            this.postVendorInvoice();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>