<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionActionValidatorExecutionCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionActionValidatorExecutionCache</c> class provides caching functionality for the
/// warehouse inventory transaction action execution.
/// The class makes some heavy assumptions about inner workings of the warehouse inventory stack and should be used with caution.
/// </summary>
internal final class WHSInventoryTransactionActionValidatorExecutionCache
{
    private ItemId  lastHierarchyDimListItemId;
    private List    lastHierarchyDimList;

    private boolean       isLastMandatoryOwnerIdRequested;
    private InventOwnerId lastMandatoryOwnerId;

    private InventModelGroup    lastItemModelGroup;
    private ItemId              lastModeGroupItemId;

    private WMSLocation         lastWmsLocation;
    private WHSLocationProfile  lastLocationProfile;
    private WHSLicensePlate     lastLicensePlate;

    private ItemId  lastAnyProductDimensionSpecifiedItemId;
    private boolean lastAnyProductDimensionSpecified;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReservationHierarchyDimList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal List getReservationHierarchyDimList(ItemId _itemId)
    {
        if (_itemId != lastHierarchyDimListItemId)
        {
            lastHierarchyDimList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(
                InventTable::find(_itemId),
                WHSReservationHierarchySortOrder::BottomUp);

            lastHierarchyDimListItemId = _itemId;
        }

        return lastHierarchyDimList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMandatoryOwnerId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventOwnerId getMandatoryOwnerId()
    {
        // adding extra boolean as returned OwnerId can be empty and so we can unnecesserily query multiple times
        // if we just check the lastMandatoryOwnerId.
        if (!isLastMandatoryOwnerIdRequested)
        {
            lastMandatoryOwnerId = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
            isLastMandatoryOwnerIdRequested = true;
        }

        return lastMandatoryOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemModelGroup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventModelGroup getItemModelGroup(ItemId _itemId)
    {
        if (_itemId != lastModeGroupItemId)
        {
            lastModeGroupItemId = _itemId;
            lastItemModelGroup = InventTable::find(lastModeGroupItemId).modelGroup();
        }

        return lastItemModelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWmsLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WMSLocation getWmsLocation(WHSInventoryStorageDimensions _storageDimensions)
    {
        // storage dimensions are always same for the single inventory action execution.
        // so do not need to store the parameters for which queried.
        if (!lastWmsLocation)
        {
            lastWmsLocation = WMSLocation::find(
                _storageDimensions.parmWMSLocationId(),
                _storageDimensions.parmInventLocationId());
        }

        return lastWmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationProfile</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLocationProfile getLocationProfile(WHSInventoryStorageDimensions _storageDimensions)
    {
        // storage dimensions are always same for the single inventory action execution.
        // so do not need to store the parameters for which queried.
        if (!lastLocationProfile)
        {
            lastLocationProfile = this.getWmsLocation(_storageDimensions).whsLocationProfile();
        }

        return lastLocationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicensePlate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLicensePlate getLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        // storage dimensions are always same for the single inventory action execution.
        // so do not need to store the parameters for which queried.
        if (!lastLicensePlate)
        {
            lastLicensePlate = WHSLicensePlate::find(_licensePlateId);
        }

        return lastLicensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProductDimensionSpecified</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean anyProductDimensionSpecified(ItemId _itemId, InventDim _inventDim)
    {
        if (lastAnyProductDimensionSpecifiedItemId != _itemId)
        {
            lastAnyProductDimensionSpecified = _inventDim.anyProductDimensionSpecified();
            lastAnyProductDimensionSpecifiedItemId = _itemId;
        }

        return lastAnyProductDimensionSpecified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSInventoryTransactionActionValidatorExecutionCache construct()
    {
        return new WHSInventoryTransactionActionValidatorExecutionCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>