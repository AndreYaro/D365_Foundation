<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticMeasureFieldListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CFMAnalyticMeasureFieldListPanel</c> class manages a list panel control to use to select the
///    dimension attributes.
/// </summary>
public class CFMAnalyticMeasureFieldListPanel extends SysListPanel
{
    CFMJournalTable source;
    container excludeFields;
    public const str Delimiter = '#';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMAnalyticMeasureFieldListPanel construct()
    {
        return new CFMAnalyticMeasureFieldListPanel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static CFMAnalyticMeasureFieldListPanel newForm(FormRun _formRun, int _parentId)
    {
        CFMAnalyticMeasureFieldListPanel listPanel = CFMAnalyticMeasureFieldListPanel::construct();
        listPanel.parmOnlyViewAccess(SecurityRights::construct().tableAccessRight(tableStr(CFMJournalAggregationField)) <= AccessRight::View);
        listPanel.parmFormRun(_formRun);
        listPanel.parmParentId(_parentId);
        listPanel.parmCaptionSelected("@Cashflowmanagement:SelectedDimensions");
        listPanel.parmCaptionAvailable("@Cashflowmanagement:AvailableDimensions");

        listPanel.parmHasAddAllButton(false);
        listPanel.parmHasRemoveAllButton(false);
        listPanel.parmHasUpDownButton(true);

        listPanel.build();

        return listPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    public void addData(container data)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items for the left and right lists of the list panel.
    /// </summary>
    /// <returns>
    ///    A container with the items to add to both the left and right lists of the list panel.
    /// </returns>
    public container getData()
    {
        container data;

        if (source)
        {
            List list = CFMJournalAggregationField::aggregationFieldsSelectedList(source);
            ListEnumerator listEnumerator = list.getEnumerator();

            while (listEnumerator.moveNext())
            {
                CFMJournalAggregationField aggregationField = listEnumerator.current();
                str key = aggregationField.FieldName;

                if (aggregationField.DimensionAttribute)
                {
                    key = key + CFMAnalyticMeasureFieldListPanel::Delimiter + DimensionAttribute::find(aggregationField.DimensionAttribute).Name;
                }

                if (!conFind(excludeFields, aggregationField.FieldName))
                {
                    data += [[key, aggregationField.description()]];
                }
            }
        }

        return [data, conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeFields</Name>
				<Source><![CDATA[
    public container parmExcludeFields(container _excludeFields = excludeFields)
    {
        excludeFields = _excludeFields;

        return excludeFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource</Name>
				<Source><![CDATA[
    public void parmSource(CFMJournalTable _source)
    {
        source = _source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    public void removeData(container data)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    protected FormListSort sortMethod()
    {
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>