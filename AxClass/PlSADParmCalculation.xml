<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlSADParmCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Wrappers for SAD Document - purchase calculation process.
/// </summary>
final class PlSADParmCalculation
{
    PlSADTable  sadTable;
    ParmId      parmId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates correctness of references between SAD and vendor invoice processing lines.
    /// </summary>
    /// <returns>
    /// true if all SAD lines and transactions are related to vendor invoice processing lines.
    /// </returns>
    public boolean checkVendInvoiceInfoLine()
    {
        PlSADTrans              sadTrans;
        PlSADInvoice            sadInvoice;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoLine_W   vendInvoiceInfoLine_W;

        select firstonly sadTrans
            where sadTrans.SADNumberCode == sadTable.SADNumberCode
            notexists join vendInvoiceInfoLine_W
                where vendInvoiceInfoLine_W.SADLineNo_PL == sadTrans.SADLineNo
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.RecId == vendInvoiceInfoLine_W.VendInvoiceInfoLine &&
                      vendInvoiceInfoLine.ParmId == parmId;

        if (sadTrans)
            return false;

        select firstonly sadInvoice
            where sadInvoice.SADNumberCode == sadTable.SADNumberCode
            notexists join vendInvoiceInfoLine_W
                where vendInvoiceInfoLine_W.SADInvoiceLineNo_PL == sadInvoice.SADInvoiceLineNo
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.RecId == vendInvoiceInfoLine_W.VendInvoiceInfoLine &&
                      vendInvoiceInfoLine.ParmId == parmId;

        if (sadInvoice)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PlSADTable _sadTable, ParmId _parmId)
    {
        sadTable = _sadTable;
        parmId   = _parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits vendor invoice lines based on SAD document lines and invoices.
    /// </summary>
    public void run()
    {
        this.splitSADTransCosts();

        if (PlSADParameters::find().InvoiceMiscCharges == PlSADPostingRule::Item)
        {
            this.splitSADInvoicesCosts();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitSADInvoicesCosts</Name>
				<Source><![CDATA[
    private void splitSADInvoicesCosts()
    {
        PlSADInvoice            sadInvoice;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoLine_W   vendInvoiceInfoLine_W,
                                vendInvoiceInfoLine_WUpd;
        AmountCur               total;
        AmountCur               toSplit;
        AmountCur               sumOfLines;
        int                     linesQty;
        boolean                 equaly;

        while select sadInvoice
            where sadInvoice.sadNumberCode == sadTable.SadNumberCode
        {
            sadInvoice.transferToMst();

            select count(LineNum), sum(LineAmount) from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId                == parmId
            exists join vendInvoiceInfoLine_W
                where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId &&
                      vendInvoiceInfoLine_W.sadInvoiceLineNo_PL == sadInvoice.sadInvoiceLineNo;
            linesQty = any2int(vendInvoiceInfoLine.LineNum);

            if (! vendInvoiceInfoLine.LineAmount)
            {
                select sum(LineAmount) from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId                == parmId                    &&
                          vendInvoiceInfoLine.LineAmount            >  0
                exists join vendInvoiceInfoLine_W
                    where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId &&
                          vendInvoiceInfoLine_W.sadInvoiceLineNo_PL == sadInvoice.sadInvoiceLineNo;
            }

            equaly = false;

            if (! vendInvoiceInfoLine.LineAmount)
            {
                vendInvoiceInfoLine.LineAmount = linesQty;
                equaly = true;
            }

            sumOfLines = vendInvoiceInfoLine.LineAmount;
            total      = sadInvoice.InvoiceMiscCharg + sadInvoice.InvoiceInsurance + sadInvoice.InvoiceTransport;
            toSplit    = total;

            ttsbegin;

            while select forupdate vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId                == parmId
            exists join vendInvoiceInfoLine_W
                where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId &&
                      vendInvoiceInfoLine_W.sadInvoiceLineNo_PL == sadInvoice.sadInvoiceLineNo
            {
                vendInvoiceInfoLine_WUpd = VendInvoiceInfoLine_W::findByVendInvoiceInfoLine(vendInvoiceInfoLine.RecId, true);
                if (linesQty == 1)
                {
                    vendInvoiceInfoLine_WUpd.ValueFromSADInvoice_PL = toSplit;
                }
                else
                {
                    vendInvoiceInfoLine_WUpd.ValueFromSADInvoice_PL =  CurrencyExchangeHelper::amount((!equaly ? vendInvoiceInfoLine.LineAmount : 1) / sumOfLines * total);
                    linesQty--;
                }

                toSplit -= vendInvoiceInfoLine_WUpd.ValueFromSADInvoice_PL;
                vendInvoiceInfoLine_WUpd.update();

                vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_WUpd);
                vendInvoiceInfoLine.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitSADTransCosts</Name>
				<Source><![CDATA[
    private void splitSADTransCosts()
    {
        PlSadTrans              sadTrans;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoLine_W   vendInvoiceInfoLine_W,
                                vendInvoiceInfoLine_WUpd;
        AmountMST               total;
        AmountMST               toSplit;
        AmountCur               sumOfLines;
        int                     linesQty;
        boolean                 equaly;

        while select sadLineNo, sadDutyAmount1, sadDutyAmount2, TransAndMiscCharg from sadTrans
            where sadTrans.sadNumberCode == sadTable.SadNumberCode
        {
            select count(LineNum), sum(LineAmount) from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId                == parmId
            exists join vendInvoiceInfoLine_W
                where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId &&
                      vendInvoiceInfoLine_W.sadLineNo_PL        == sadTrans.sadLineNo;
            linesQty = any2int(vendInvoiceInfoLine.LineNum);

            if (! vendInvoiceInfoLine.LineAmount)
            {
                select sum(LineAmount) from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId                == parmId                    &&
                          vendInvoiceInfoLine.LineAmount            >  0
                exists join vendInvoiceInfoLine_W
                    where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId &&
                          vendInvoiceInfoLine_W.sadLineNo_PL        == sadTrans.sadLineNo;
            }

            equaly = false;

            if (! vendInvoiceInfoLine.LineAmount)
            {
                vendInvoiceInfoLine.LineAmount = linesQty;
                equaly = true;
            }

            sumOfLines = vendInvoiceInfoLine.LineAmount;
            total      = sadTrans.sadDutyAmount1 + sadTrans.sadDutyAmount2 + sadTrans.TransAndMiscCharg;
            toSplit    = total;

            ttsbegin;

            while select forupdate vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId                == parmId
            exists join vendInvoiceInfoLine_W
                where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId &&
                      vendInvoiceInfoLine_W.sadLineNo_PL        == sadTrans.sadLineNo
            {
                vendInvoiceInfoLine_WUpd = VendInvoiceInfoLine_W::findByVendInvoiceInfoLine(vendInvoiceInfoLine.RecId, true);
                if (linesQty == 1)
                {
                    vendInvoiceInfoLine_WUpd.ValueFromSADTrans_PL = toSplit;
                }
                else
                {
                    vendInvoiceInfoLine_WUpd.ValueFromSADTrans_PL = CurrencyExchangeHelper::amount((!equaly ? vendInvoiceInfoLine.LineAmount : 1) / sumOfLines * total);
                    linesQty--;
                }

                toSplit -= vendInvoiceInfoLine_WUpd.ValueFromSADTrans_PL;
                vendInvoiceInfoLine_WUpd.update();

                vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_WUpd);
                vendInvoiceInfoLine.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>