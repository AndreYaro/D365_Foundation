<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsistencyCheck_Forecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventConsistencyCheck_Forecast extends SysConsistencyCheck implements BatchRetryable
{
    DialogField         dialogBudgetInvent;
    DialogField         dialogBudgetSales;
    DialogField         dialogBudgetPurch;

    NoYes               budgetInvent;
    NoYes               budgetSales;
    NoYes               budgetPurch;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        BudgetInvent,
        BudgetSales,
        BudgetPurch
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixForecastInvent</Name>
				<Source><![CDATA[
        void checkFixForecastInvent(QueryRun _queryRun)
    {
        #OCCRetryCount

        CheckFix            checkFix            = this.checkFix();
        boolean             hasCheckFixMethod   = this.hasTableCheckFixMethod(tableNum(ForecastInvent));

        DictTable dictTable = new DictTable(tableNum(ForecastInvent));
        QueryRun queryThis = new QueryRun(SysQuery::addTableRelation(_queryRun.query(),dictTable.id()));
        if (checkFix)
        {
            queryThis.query().dataSourceTable(dictTable.id()).update(true);
            queryThis.query().dataSourceTable(dictTable.id()).concurrencyModel(ConcurrencyModel::Optimistic);
        }

        setPrefix(strFmt("@SYS26373", dictTable.label()));

        try
        {
            ttsbegin;

            while (queryThis.next())
            {
                ForecastInvent forecastInvent = queryThis.get(dictTable.id()) as ForecastInvent;
                this.kernelCheckRecord(forecastInvent,dictTable, hasCheckFixMethod);

                BudgetMap budgetMap = forecastInvent.parentLine();
                if (! budgetMap)
                {
                    warning(strFmt("@SYS58148",dictTable.label()));
                    if (checkFix == CheckFix::Fix)
                    {
                        forecastInvent.delete();
                        this.updateCorrected();
                    }
                }
            }

            this.updateNotCorrected();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            queryThis.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryThis.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogBudgetPurch = dialog.addField(enumStr(NoYes), "@SYS9646");
        dialogBudgetPurch.value(budgetPurch);

        dialogBudgetSales = dialog.addField(enumStr(NoYes), "@SYS15056");
        dialogBudgetSales.value(budgetSales);

        dialogBudgetInvent = dialog.addField(enumStr(NoYes), "@SYS16157");
        dialogBudgetInvent.value(budgetInvent);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        budgetInvent    = dialogBudgetInvent.value();
        budgetSales     = dialogBudgetSales.value();
        budgetPurch     = dialogBudgetPurch.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
        boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        budgetInvent    = NoYes::Yes;
        budgetSales     = NoYes::Yes;
        budgetPurch     = NoYes::Yes;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        SysConsistencyCheck sysConsistencyCheck = consistencyCheckJob.parentClass(classIdGet(this));
        if (! sysConsistencyCheck)
        {
            return;
        }

        QueryRun queryRun = sysConsistencyCheck.queryRun();

        if (budgetInvent)
        {
            this.checkFixForecastInvent(queryRun);
        }

        if (budgetPurch)
        {
            this.kernelCheckRecords(
                new QueryRun(SysQuery::addTableRelation(queryRun.query(),tableNum(ForecastPurch))),2);
        }

        if (budgetSales)
        {
            this.kernelCheckRecords(
                new QueryRun(SysQuery::addTableRelation(queryRun.query(),tableNum(ForecastSales))),2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInTree</Name>
				<Source><![CDATA[
        boolean showInTree()
    {
        return isTableUserEnabled(tableNum(ForecastInvent)) &&
               isTableUserEnabled(tableNum(ForecastPurch)) &&
               isTableUserEnabled(tableNum(ForecastSales));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
        ClassId treeParentClassId()
    {
        return classNum(InventConsistencyCheck_Table);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Integer     version      = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static ClassDescription description()
    {
        return "@SYS13699";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
        static HelpTxt helpText()
    {
        return "@SYS58216";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
