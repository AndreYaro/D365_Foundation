<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceAdjustmentOffsetHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceAdjustmentOffsetHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldProcessTrigger</Name>
				<Source><![CDATA[
    public static boolean shouldProcessTrigger()
    {
        // Commerce team has its own customized trigger.
        boolean ret = InventInventoryDataServiceAdjustmentOffsetFeature::isEnabled() && !RetailInventoryServiceIntegrationHelper::isUsingInventoryServiceAsDataSource();
        
        if (ret)
        {
            InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
            if (parameter.isInventoryServiceStatusEnable())
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldOffsetForSales</Name>
				<Source><![CDATA[
    public static boolean shouldOffsetForSales(SalesLine _salesLine, InventoryServiceAdjustmentOffsetOrderEvent _offsetStatus)
    {
        var mapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::find(_salesLine.InventoryServiceAdjustmentOffsetDatasource, _salesLine.InventoryServiceAdjustmentOffsetPhysicalMeasure);

        return mapping && mapping.InventTransType == InventTransType::Sales && mapping.InventoryServiceAdjustmentOffsetOrderEvent == _offsetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldOffsetForInventJournal</Name>
				<Source><![CDATA[
    public static boolean shouldOffsetForInventJournal(InventJournalTrans _journalLine, InventoryServiceAdjustmentOffsetJournalEvent _offsetStatus)
    {
        var mapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::find(_journalLine.InventoryServiceAdjustmentOffsetDatasource, _journalLine.InventoryServiceAdjustmentOffsetPhysicalMeasure);

        return mapping && InventInventoryDataServiceAdjustmentOffsetHelper::isJournalTypeMatchedMapping(_journalLine.JournalType, mapping) && mapping.InventoryServiceAdjustmentOffsetJournalEvent == _offsetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBlockUpdateForSales</Name>
				<Source><![CDATA[
    public static boolean shouldBlockUpdateForSales(SalesLine _salesLine, SalesLine _salesLineOrig)
    {
        if (_salesLine.containsIVAdjustmentOffsetInfo() && _salesLineOrig)
        {
            var mapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::find(_salesLine.InventoryServiceAdjustmentOffsetDatasource, _salesLine.InventoryServiceAdjustmentOffsetPhysicalMeasure);

            if (mapping && mapping.InventTransType == InventTransType::Sales && mapping.InventoryServiceAdjustmentOffsetOrderEvent == InventoryServiceAdjustmentOffsetOrderEvent::Create
                && ((_salesLine.ItemId != _salesLineOrig.ItemId || _salesLine.QtyOrdered != _salesLineOrig.QtyOrdered) || (InventInventoryDataServiceAdjustmentOffsetMappingV2::shouldBlockWhenInventDimChange(mapping, _salesLine.InventDimId, _salesLineOrig.InventDimId))))
            {
                return true;
            }
        }

        return false; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBlockUpdateForJournal</Name>
				<Source><![CDATA[
    public static boolean shouldBlockUpdateForJournal(InventJournalTrans _journalLine, InventJournalTrans _journalLineOrig)
    {
        if (_journalLine.containsIVAdjustmentOffsetInfo() && _journalLineOrig)
        {
            var mapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::find(_journalLine.InventoryServiceAdjustmentOffsetDatasource, _journalLine.InventoryServiceAdjustmentOffsetPhysicalMeasure);

            if (mapping && InventInventoryDataServiceAdjustmentOffsetHelper::isJournalTypeMatchedMapping(_journalLine.JournalType, mapping) && mapping.InventoryServiceAdjustmentOffsetJournalEvent == InventoryServiceAdjustmentOffsetJournalEvent::Create
                && ((_journalLine.ItemId != _journalLineOrig.ItemId || _journalLine.Qty != _journalLineOrig.Qty) || (InventInventoryDataServiceAdjustmentOffsetMappingV2::shouldBlockWhenInventDimChange(mapping, _journalLine.InventDimId, _journalLineOrig.InventDimId))))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRevertOffsetForSalesDeletedTrans</Name>
				<Source><![CDATA[
    public static boolean shouldRevertOffsetForSalesDeletedTrans(SalesLine _salesLine, StatusIssue _deletedTransStatusIssue)
    {
        var mapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::find(_salesLine.InventoryServiceAdjustmentOffsetDatasource, _salesLine.InventoryServiceAdjustmentOffsetPhysicalMeasure);

        return mapping && mapping.InventTransType == InventTransType::Sales && mapping.InventoryServiceAdjustmentOffsetOrderEvent == InventoryServiceAdjustmentOffsetOrderEvent::Create && _deletedTransStatusIssue != StatusIssue::QuotationIssue && _deletedTransStatusIssue != StatusIssue::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRevertOffsetForJournalDeletedTrans</Name>
				<Source><![CDATA[
    public static boolean shouldRevertOffsetForJournalDeletedTrans(InventJournalTrans _journalLine, InventTrans _inventtrans)
    {
        var mapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::find(_journalLine.InventoryServiceAdjustmentOffsetDatasource, _journalLine.InventoryServiceAdjustmentOffsetPhysicalMeasure);

        return mapping && InventInventoryDataServiceAdjustmentOffsetHelper::isJournalTypeMatchedMapping(_journalLine.JournalType, mapping) && mapping.InventoryServiceAdjustmentOffsetJournalEvent == InventoryServiceAdjustmentOffsetJournalEvent::Create && ((_inventtrans.StatusIssue!= StatusIssue::QuotationIssue && _inventtrans.StatusIssue != StatusIssue::None) || (_inventtrans.StatusReceipt!= StatusReceipt::QuotationReceipt && _inventtrans.StatusReceipt != StatusReceipt::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalTypeMatchedMapping</Name>
				<Source><![CDATA[
    public static boolean isJournalTypeMatchedMapping(InventJournalType _journalType, InventInventoryDataServiceAdjustmentOffsetMappingV2 _mapping)
    {
        switch (_journalType)
        {
            case InventJournalType::LossProfit: return _mapping.InventTransType == InventTransType::InventLossProfit;
            default: return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>