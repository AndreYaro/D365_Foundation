<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAttachmentFilterCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAttachmentFilterCollection</c> class is used to retrieve a collection of filter criterion value
/// associated with a specific <c>BudgetPlanHeader</c> document.
/// </summary>
public class BudgetPlanAttachmentFilterCollection implements SysPackable
{
    BudgetPlanHeader    budgetPlanHeader;
    Set                 planHierarchyCollection;
    SetEnumerator       planHierarchyCollectionEnumerator;

    #DEFINE.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChildPlans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the child budget plans for the specified budget plan record to the plan hierarchy collection.
    /// </summary>
    /// <param name="_parentBudgetPlanHeaderRecId">
    /// The ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_numberOfLevelsToInclude">
    /// The number of budget plan levels to include.
    /// </param>
    protected void addChildPlans(BudgetPlanHeaderRecId _parentBudgetPlanHeaderRecId, int _numberOfLevelsToInclude = maxInt())
    {
        BudgetPlanHeader childBudgetPlanHeader;

        if (_numberOfLevelsToInclude > 0)
        {
            while select RecId from childBudgetPlanHeader
                where childBudgetPlanHeader.ParentBudgetPlanHeader == _parentBudgetPlanHeaderRecId
            {
                planHierarchyCollection.add(childBudgetPlanHeader.RecId);

                // Add all children budget plans
                this.addChildPlans(childBudgetPlanHeader.RecId, _numberOfLevelsToInclude - 1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBudgetPlanRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current budget plan hierarchy filter reference.
    /// </summary>
    /// <returns>
    /// The current budget plan hierarchy filter reference.
    /// </returns>
    public BudgetPlanHeaderRecId currentBudgetPlanRecId()
    {
        return planHierarchyCollectionEnumerator.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of <c>BudgetPlanHeader</c> record IDs in the collection.
    /// </summary>
    /// <returns>
    /// An integer that indicates the numbers of <c>BudgetPlanHeader</c> record IDs in the collection.
    /// </returns>
    public int elements()
    {
        return planHierarchyCollection.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BudgetPlanAttachmentFilterCollection</c> class for the specified
    /// budget plan document and budgeting organization.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    protected void initialize(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        this.loadBudgetPlanHierarchyFilters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the enumerator for the <c>BudgetPlanAttachmentFilterCollection</c> instance.
    /// </summary>
    protected void initializeEnumerator()
    {
        // Initialize the enumerator for the class
        planHierarchyCollectionEnumerator = planHierarchyCollection.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBudgetPlanHierarchyFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the budget plan hierarchy filters for the current budget plan document.
    /// </summary>
    protected void loadBudgetPlanHierarchyFilters()
    {
        BudgetPlanningConfiguration budgetPlanningConfiguration;

        // use the configuration from the legal entity associated with the BudgetPlanHeader, not necessarily the current company
        budgetPlanningConfiguration = BudgetPlanningConfiguration::findByLegalEntity(budgetPlanHeader.getLegalEntity());

        // Add the current budget plan to the list
        planHierarchyCollection.add(budgetPlanHeader.RecId);

        // Add all the children plan record ids to the list
        this.addChildPlans(budgetPlanHeader.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        planHierarchyCollection = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the enumerator to the next budget plan hierarchy in the collection.
    /// </summary>
    /// <returns>
    /// true if the enumerator finds a budget plan hierarchy filter reference; otherwise, false.
    /// </returns>
    public boolean next()
    {
        return planHierarchyCollectionEnumerator.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, [planHierarchyCollection ? planHierarchyCollection.pack() : conNull()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   packedPlanHierarchyContainer;
        container   packedPlanHierarchySet;
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                // Extract packed values
                [version, packedPlanHierarchyContainer] = _packedClass;
                [packedPlanHierarchySet] = packedPlanHierarchyContainer;
                break;

            default:
                return false;
        }

        // Unpack the plan hierarchy list from the container
        if (packedPlanHierarchySet != conNull())
        {
            planHierarchyCollection = Set::create(packedPlanHierarchySet);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BudgetPlanAttachmentFilters</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>BudgetPlanAttachmentFilters</c> class.
    /// </returns>
    public static BudgetPlanAttachmentFilterCollection construct()
    {
        return new BudgetPlanAttachmentFilterCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanAttachmentFilterCollection</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedAttachmentFilterCollection">
    /// A packed instance of the <c>BudgetPlanAttachmentFilterCollection</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanAttachmentFilterCollection</c> class.
    /// </returns>
    public static BudgetPlanAttachmentFilterCollection create(container _packedAttachmentFilterCollection)
    {
        BudgetPlanAttachmentFilterCollection attachmentFilterCollection = new BudgetPlanAttachmentFilterCollection();

        attachmentFilterCollection.unpack(_packedAttachmentFilterCollection);

        // Initialize the enumerator for the class - must happen after unpacking on tier of object
        attachmentFilterCollection.initializeEnumerator();

        return attachmentFilterCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize_Server</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the <c>BudgetPlanAttachmentFilterCollection</c> class for the specified
    /// budget plan document and budgeting organization.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// A container with an initialized instance of the <c>BudgetPlanAttachmentFilterCollection</c> class.
    /// </returns>
    private static container initialize_Server(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanAttachmentFilterCollection    attachmentFilterCollection;
        container                               packedAttachmentFilterCollection = connull();

        attachmentFilterCollection = BudgetPlanAttachmentFilterCollection::construct();

        attachmentFilterCollection.initialize(_budgetPlanHeaderRecId);

        packedAttachmentFilterCollection = attachmentFilterCollection.pack();

        return packedAttachmentFilterCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetPlanAttachmentFilterCollection</c> class.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanAttachmentFilterCollection</c> class when the specified budget plan
    /// reference is valid; otherwise, null.
    /// </returns>
    /// <remarks>
    /// Returns an instance of the class that has all the filters loaded.
    /// </remarks>
    public static BudgetPlanAttachmentFilterCollection newFromBudgetPlanHeader(
        BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanAttachmentFilterCollection attachmentFilterCollection;
        container                            packedAttachmentFilterCollection;

        if (_budgetPlanHeaderRecId)
        {
            packedAttachmentFilterCollection = BudgetPlanAttachmentFilterCollection::initialize_Server(_budgetPlanHeaderRecId);

            if (packedAttachmentFilterCollection != connull())
            {
                attachmentFilterCollection = BudgetPlanAttachmentFilterCollection::create(packedAttachmentFilterCollection);
            }
        }

        return attachmentFilterCollection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>