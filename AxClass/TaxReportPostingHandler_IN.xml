<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPostingHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and updates the tax payment doc.
/// </summary>
public class TaxReportPostingHandler_IN
{
    TaxSalesTaxPaymentDoc_IN    taxPaymentDoc;
    LedgerDimensionAccount      taxPostingLedgerDimension;
    TaxAmount                   balance;
    boolean                     reverseBalance;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxPayableAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get taxPayableAccountType based on the tax type
    /// </summary>
    /// <param name="_taxType">
    /// The taxType
    /// </param>
    /// <returns>
    /// The TaxAccountType of the specified tax type
    /// </returns>
    protected TaxAccountType_IN getTaxPayableAccountType(TaxType_IN _taxType)
    {
        TaxAccountType_IN taxAccountType;

        switch (_taxType)
        {
            case TaxType_IN::ServiceTax:
                taxAccountType = TaxAccountType_IN::ServiceTaxPayableAccount;
                break;
            case TaxType_IN::VAT:
                taxAccountType = TaxAccountType_IN::VATPayableAccount;
                break;
            case TaxType_IN::SalesTax:
                taxAccountType = TaxAccountType_IN::SalesTaxPayableAccount;
                break;
            case TaxType_IN::Excise:
                taxAccountType = TaxAccountType_IN::ExcisePayableAccount;
                break;
            default:
                taxAccountType = TaxAccountType_IN::None;
                break;
        }

        return taxAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPostingLedgerDimAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get ledger dimension account for posting for the specified history details node
    /// </summary>
    /// <param name="_historyDetails">
    /// The TaxSalesTaxPaymentHistoryDetails_IN object that will be associated with the TaxReportHierarchyNode_IN
    /// </param>
    /// <returns>
    /// The ledger dimension account
    /// </returns>
    protected LedgerDimensionAccount getTaxPostingLedgerDimAcct(TaxSalesTaxPaymentHistoryDetails_IN _historyDetails)
    {
        LedgerDimensionAccount          taxPostingLedgerDimAcct;
        TaxLedgerAccounts_IN            taxLedgerAccounts;
        TaxLedgerAccountSetup_IN        taxLedgerAccountSetup;
        TaxReportHierarchyNode_IN       tableNode, taxComponentNode;
        TaxAccountType_IN               taxAccountType;
        TaxType_IN                      taxType;
        TaxTrans_IN                                 taxTransIn;
        TaxSalesTaxPaymentHistoryDetailsTrans_IN    historyDetailsTrans;

        tableNode = TaxReportHierarchyNode_IN::find(_historyDetails.TaxReportHierarchyNode_IN);

        if (tableNode)
        {
            select firstOnly RefTableRecId from taxComponentNode
                where taxComponentNode.TaxReportHierarchyVersion_IN == tableNode.TaxReportHierarchyVersion_IN
                &&    taxComponentNode.LeftId <= tableNode.LeftId
                &&    taxComponentNode.RightId >= tableNode.RightId
                &&    (taxComponentNode.RefClassId == classnum(TaxReportHrchyTaxComponentNode_IN)
                    || taxComponentNode.RefClassId == classnum(TaxReportHrchyGTETaxComponentNode_IN));

            taxType = TaxRegistrationNumbers_IN::find(_historyDetails.TaxRegistrationNumbers_IN).TaxType;

            if (taxType == TaxType_IN::GST)
            {
                if(this.parmBalance() > 0)
                {
                    select firstOnly RecoverableLedgerDimension from taxTransIn
                            order by taxTransIn.TransDate desc
                                where taxTransIn.RecoverableLedgerDimension != 0
                            exists join historyDetailsTrans
                                where historyDetailsTrans.TaxTrans_IN == taxTransIn.RecId
                                    && historyDetailsTrans.TaxSalesTaxPaymentHistoryDetails_IN == _historyDetails.RecId;
                    
                    if (taxTransIn.RecoverableLedgerDimension == 0)
                    {
                        select firstOnly PayableLedgerDimension from taxTransIn
                            order by taxTransIn.TransDate desc
                                where taxTransIn.PayableLedgerDimension != 0
                            exists join historyDetailsTrans
                                where historyDetailsTrans.TaxTrans_IN == taxTransIn.RecId
                                    && historyDetailsTrans.TaxSalesTaxPaymentHistoryDetails_IN == _historyDetails.RecId;
                    }
                }
                else
                {
                    select firstOnly PayableLedgerDimension from taxTransIn
                            order by taxTransIn.TransDate desc
                                where taxTransIn.PayableLedgerDimension != 0
                            exists join historyDetailsTrans
                                where historyDetailsTrans.TaxTrans_IN == taxTransIn.RecId
                                    && historyDetailsTrans.TaxSalesTaxPaymentHistoryDetails_IN == _historyDetails.RecId;
                }
               
                if (taxTransIn.PayableLedgerDimension || taxTransIn.RecoverableLedgerDimension)
                {
                    taxPostingLedgerDimAcct = taxTransIn.PayableLedgerDimension ? taxTransIn.PayableLedgerDimension : taxTransIn.RecoverableLedgerDimension;
                }
            }
            else
            {
                if (this.parmBalance() < 0)
                {
                    taxAccountType = this.getTaxPayableAccountType(taxType);
                }
                else
                {
                    taxAccountType = this.getTaxRecoverableAccountType(taxType);
                }

                if (taxAccountType != taxAccountType_IN::None)
                {
                    select firstOnly taxLedgerAccounts
                        join RecId, TaxRegistrationNumberTable from taxLedgerAccountSetup
                            where taxledgeraccounts.TaxLedgerAccountSetup == taxLedgerAccountSetup.RecId
                            &&    (taxLedgerAccountSetup.TaxRegistrationNumberTable == _historyDetails.TaxRegistrationNumbers_IN
                                   || taxLedgerAccountSetup.TaxRegistrationNumberTable == 0 )
                            &&    taxLedgerAccounts.TaxComponentTable == taxComponentNode.RefTableRecId
                            &&    taxLedgerAccounts.AccountType == taxAccountType;

                    if (taxLedgerAccounts)
                    {
                        taxPostingLedgerDimAcct = taxLedgerAccounts.LedgerDimension;
                    }
                }
            }
        }
        return LedgerDimensionFacade::serviceCreateLedgerDimension(taxPostingLedgerDimAcct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRecoverableAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get taxRecoverableAccountType based on the tax type
    /// </summary>
    /// <param name="_taxType">
    /// The taxType
    /// </param>
    /// <returns>
    /// The TaxAccountType of the specified tax type
    /// </returns>
    protected TaxAccountType_IN getTaxRecoverableAccountType(TaxType_IN _taxType)
    {
        TaxAccountType_IN               taxAccountType;

        switch (_taxType)
        {
            case TaxType_IN::ServiceTax:
                taxAccountType = TaxAccountType_IN::ServiceTaxRecoverableAccount;
                break;
            case TaxType_IN::VAT:
                taxAccountType = TaxAccountType_IN::VATRecoverableAccount;
                break;
            case TaxType_IN::SalesTax:
                taxAccountType = TaxAccountType_IN::SalesTaxPayableAccount;
                break;
            case TaxType_IN::Excise:
                taxAccountType = TaxAccountType_IN::ExciseRecoverableAccount;
                break;
            default:
                taxAccountType = TaxAccountType_IN::None;
                break;
        }

        return taxAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBalance</Name>
				<Source><![CDATA[
    public TaxAmount parmBalance(TaxAmount _balance = balance)
    {
        balance = _balance;
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseBalance</Name>
				<Source><![CDATA[
    public boolean parmReverseBalance(boolean _reverseBalance = reverseBalance)
    {
        reverseBalance = _reverseBalance;
        return reverseBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPaymentDoc</Name>
				<Source><![CDATA[
    protected TaxSalesTaxPaymentDoc_IN parmTaxPaymentDoc(TaxSalesTaxPaymentDoc_IN _taxPaymentDoc = taxPaymentDoc)
    {
        taxPaymentDoc = _taxPaymentDoc;
        return taxPaymentDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPostingLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount parmTaxPostingLedgerDimension(LedgerDimensionAccount _taxPostingLedgerDimension = taxPostingLedgerDimension)
    {
        taxPostingLedgerDimension = _taxPostingLedgerDimension;
        return taxPostingLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process and update the tax payment doc
    /// </summary>
    /// <param name="_taxPaymentDoc">
    /// The taxPaymentDoc that needs to be updated
    /// </param>
    /// <param name="_historyDetail">
    /// The TaxSalesTaxPaymentHistoryDetails_IN object that needs to be processed
    /// </param>
    /// <returns>
    /// The updated TaxSalesTaxPaymentDoc_IN object
    /// </returns>
    public TaxSalesTaxPaymentDoc_IN process(TaxSalesTaxPaymentDoc_IN _taxPaymentDoc, TaxSalesTaxPaymentHistoryDetails_IN _historyDetail = null)
    {
        return this.parmTaxPaymentDoc(_taxPaymentDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>gstPostingAccForTaxReportHierarchyNode</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount gstPostingAccForTaxReportHierarchyNode(
        TaxReportHierarchyNode_IN _taxReportHierarchyNode,
        TaxAccountingProvider _accountingProvider,
        TaxAccountingPostingAccountType _accountType)
    {
        Common runtimeTable;
        LedgerDimensionAccount ledgerDimensionAccount;
        TaxRuntimeDocComponent taxRuntimeDocComponent;
        TaxRuntimeLookup taxRuntimeLookup;
        TaxRuntimeLookupVersion taxRuntimeLookupVersion;
        TaxRuntimeLookupCondition taxRuntimeLookupCondition;
        TaxRuntimeLookupAccountingResult taxRuntimeLookupAccountingResult;
        TaxRuntimePostingType taxRuntimePostingType;
        TaxRuntimePostingTypeVersion taxRuntimePostingTypeVersion;

        LedgerRecId ledgerRecId = Ledger::current();
        TaxSolutionScopeSetup taxSolutionScopeSetup = TaxSolutionScopeSetup::findByLedger(ledgerRecId);
        TaxSolutionScope taxSolutionScope = TaxSolutionScope::find(taxSolutionScopeSetup.TaxSolutionScope);
        TaxRuntimeDefContext taxRuntimeDefContext = TaxRuntimeDefContext::findByScopeAndSolution(taxSolutionScope.RecId, taxSolutionScope.Solution);
        TaxRuntimeDefContextVersion taxRuntimeDefContextVersion = TaxRuntimeDefContextVersion::findByDefContextAndSolutionVersion(taxRuntimeDefContext.RecId, taxSolutionScope.SolutionVersion);
        TaxRuntimeDocContext taxRuntimeDocContext = TaxRuntimeDocContext::findByScopeAndSolution(taxSolutionScope.RecId, taxSolutionScope.Solution);
        TaxRuntimeDocContextVersion taxRuntimeDocContextVersion = TaxRuntimeDocContextVersion::findByDocContextAndSolutionVersion(taxRuntimeDocContext.RecId, taxSolutionScope.SolutionVersion);

        if (_taxReportHierarchyNode.GTERuntimeTableId && _taxReportHierarchyNode.GTERuntimeRecId)
        {
            runtimeTable = new DictTable(_taxReportHierarchyNode.GTERuntimeTableId).makeRecord();
            select firstOnly runtimeTable
                where runtimeTable.RecId == _taxReportHierarchyNode.GTERuntimeRecId;

            taxRuntimeDocComponent = TaxRuntimeDocComponent::findByRuntimeComponent(runtimeTable.RecId, taxRuntimeDocContext.RecId);

            if (TaxRuntimeDocComponentVersion::findByTaxComponentAndContextVersion(taxRuntimeDocComponent.RecId, taxRuntimeDocContextVersion.RecId))
            {
                taxRuntimeLookup = TaxRuntimeLookup::findByOwner(taxRuntimeDocComponent.TableId, taxRuntimeDocComponent.RecId, TaxRuntimeLookupRefType::Accounting);

                taxRuntimeLookupVersion = TaxRuntimeLookupVersion::findByLookupAndContextVersion(taxRuntimeLookup.RecId, taxRuntimeDocContextVersion.RecId);

                select firstOnly RecId from taxRuntimeLookupCondition
                    where taxRuntimeLookupCondition.Ledger == ledgerRecId
                        && taxRuntimeLookupCondition.LookupVersion == taxRuntimeLookupVersion.RecId;

                taxRuntimeLookupAccountingResult = TaxRuntimeLookupAccountingResult::findByKey(taxRuntimeLookupCondition.RecId, taxRuntimeDocComponent.TableId, taxRuntimeDocComponent.RecId);

                select firstOnly RecId from taxRuntimePostingType
                    exists join taxRuntimePostingTypeVersion
                        where taxRuntimePostingTypeVersion.PostingType == taxRuntimePostingType.RecId
                            && taxRuntimePostingTypeVersion.DefContextVersion == taxRuntimeDefContextVersion.RecId
                            && taxRuntimePostingTypeVersion.AccountingProvider == _accountingProvider
                            && taxRuntimePostingTypeVersion.AccountType == _accountType;

                ledgerDimensionAccount = TaxRuntimeLookupAccountingResultDetail::findByKey(taxRuntimeLookupAccountingResult.RecId, taxRuntimePostingType.RecId).LedgerDimension;
            }

        }

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>