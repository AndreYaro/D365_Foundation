<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimensionQueryRangeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductDimensionQueryRangeHelper</c> class is a helper class for queries that make use of product dimension query ranges.
/// The helper exposes methods required for setting the data source range values in the query.
/// </summary>
public final class EcoResProductDimensionQueryRangeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productDimensionRangeColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query range for the color product dimension for the two specified data sources.
    /// </summary>
    /// <param name = "_dataSource1Name">The first data source of the range.</param>
    /// <param name = "_dataSource2Name">The second data source of the range.</param>
    /// <param name = "_allowEmptyDimension">If true, adds an or clause to the range that allows the dimension field to be empty.</param>
    /// <returns>The range string.</returns>
    [QueryRangeFunction]
    public static str productDimensionRangeColor(DataSourceName _dataSource1Name, DataSourceName _dataSource2Name, boolean _allowEmptyDimension = true)
    {
        return EcoResProductDimensionQueryRangeHelper::productDimensionRange(
            configurationKeyNum(EcoResProductColor),
            _dataSource1Name,
            _dataSource2Name,
            fieldStr(InventDim, InventColorId),
            _allowEmptyDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionRangeSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query range for the size product dimension for the two specified data sources.
    /// </summary>
    /// <param name = "_dataSource1Name">The first data source of the range.</param>
    /// <param name = "_dataSource2Name">The second data source of the range.</param>
    /// <param name = "_allowEmptyDimension">If true, adds an or clause to the range that allows the dimension field to be empty.</param>
    /// <returns>The range string.</returns>
    [QueryRangeFunction]
    public static str productDimensionRangeSize(DataSourceName _dataSource1Name, DataSourceName _dataSource2Name, boolean _allowEmptyDimension = true)
    {
        return EcoResProductDimensionQueryRangeHelper::productDimensionRange(
            configurationKeyNum(EcoResProductSize),
            _dataSource1Name,
            _dataSource2Name,
            fieldStr(InventDim, InventSizeId),
            _allowEmptyDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionRangeStyle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query range for the style product dimension for the two specified data sources.
    /// </summary>
    /// <param name = "_dataSource1Name">The first data source of the range.</param>
    /// <param name = "_dataSource2Name">The second data source of the range.</param>
    /// <param name = "_allowEmptyDimension">If true, adds an or clause to the range that allows the dimension field to be empty.</param>
    /// <returns>The range string.</returns>
    [QueryRangeFunction]
    public static str productDimensionRangeStyle(DataSourceName _dataSource1Name, DataSourceName _dataSource2Name, boolean _allowEmptyDimension = true)
    {
        return EcoResProductDimensionQueryRangeHelper::productDimensionRange(
            configurationKeyNum(EcoResProductStyle),
            _dataSource1Name,
            _dataSource2Name,
            fieldStr(InventDim, InventStyleId),
            _allowEmptyDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionRangeConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query range for the configuration product dimension for the two specified data sources.
    /// </summary>
    /// <param name = "_dataSource1Name">The first data source of the range.</param>
    /// <param name = "_dataSource2Name">The second data source of the range.</param>
    /// <param name = "_allowEmptyDimension">If true, adds an or clause to the range that allows the dimension field to be empty.</param>
    /// <returns>The range string.</returns>
    [QueryRangeFunction]
    public static str productDimensionRangeConfiguration(DataSourceName _dataSource1Name, DataSourceName _dataSource2Name, boolean _allowEmptyDimension = true)
    {
        return EcoResProductDimensionQueryRangeHelper::productDimensionRange(
            configurationKeyNum(Config),
            _dataSource1Name,
            _dataSource2Name,
            fieldStr(InventDim, ConfigId),
            _allowEmptyDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionRangeVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query range for the version product dimension for the two specified data sources.
    /// </summary>
    /// <param name = "_dataSource1Name">The first data source of the range.</param>
    /// <param name = "_dataSource2Name">The second data source of the range.</param>
    /// <param name = "_allowEmptyDimension">If true, adds an or clause to the range that allows the dimension field to be empty.</param>
    /// <returns>The range string.</returns>
    [QueryRangeFunction]
    public static str productDimensionRangeVersion(DataSourceName _dataSource1Name, DataSourceName _dataSource2Name, boolean _allowEmptyDimension = true)
    {
        return EcoResProductDimensionQueryRangeHelper::productDimensionRange(
            configurationKeyNum(EcoResProductVersion),
            _dataSource1Name,
            _dataSource2Name,
            fieldStr(InventDim, InventVersionId),
            _allowEmptyDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionRange</Name>
				<Source><![CDATA[
    private static str productDimensionRange(
        ConfigurationKeyId  _configurationKeyId,
        DataSourceName      _dataSource1Name,
        DataSourceName      _dataSource2Name,
        FieldName           _dimensionFieldName,
        boolean             _allowEmptyDimension)
    {
        str pattern = _allowEmptyDimension ? '(%1.%2 == %3.%2) || (%1.%2 == %4)' : '(%1.%2 == %3.%2)';

        return isConfigurationKeyEnabled(_configurationKeyId)
            ? strFmt(pattern,
                _dataSource1Name,
                _dimensionFieldName,
                _dataSource2Name,
                SysQuery::valueEmptyString())
            : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>