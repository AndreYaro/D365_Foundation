<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegTransEngine_TaxRemainGoods</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegTransEngine_TaxRemainGoods extends RTax25RegTransEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteTotals</Name>
				<Source><![CDATA[
        protected boolean deleteTotals(RTax25RegisterLineNumber _lineNumber)
    {
        boolean                  ret = false;
        RTax25RegisterTrans      rTax25RegisterTrans,
                                 rTax25RegisterTransHeader;
        RTax25RegisterLineNumber lineNumberHeader;

        select firstonly forupdate rTax25RegisterTrans order by LineNumber desc
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.RegisterJournalType == rTax25RegisterJournalTrans.RegisterJournalType &&
                  rTax25RegisterTrans.BlockType           == ReportBlockType::Header                        &&
                  rTax25RegisterTrans.LineNumber          <  _lineNumber;

        if (!rTax25RegisterTrans.RecId)
        {
            return ret;
        }

        rTax25RegisterTransHeader = rTax25RegisterTrans.data();

        select firstonly forupdate rTax25RegisterTrans order by LineNumber
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.RegisterJournalType == rTax25RegisterJournalTrans.RegisterJournalType &&
                  rTax25RegisterTrans.LineNumber          <  rTax25RegisterTransHeader.LineNumber;

        if (rTax25RegisterTrans.BlockType == ReportBlockType::Footer)
        {
            lineNumberHeader = rTax25RegisterTransHeader.LineNumber;
            rTax25RegisterTransHeader.doDelete();
            rTax25RegisterTrans.doDelete();
            ret = true;
            this.deleteTotals(lineNumberHeader);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRowIntoList</Name>
				<Source><![CDATA[
        protected int insertRowIntoList(RTax25RegisterTrans _rTax25RegisterTrans)
    {
        FormListItem    formListItem;
        int             ret = super(_rTax25RegisterTrans);

        if (_rTax25RegisterTrans.BlockType == ReportBlockType::Header && conLen(regFieldType) && !hidedFields.in(1))
        {
            formListItem = new FormListItem(_rTax25RegisterTrans.LineDescription);
            formListItem.subItem(1);
            formListItem.idx(ret);
            listControl.setItem(formListItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysQuery2con</Name>
				<Source><![CDATA[
        #define.RegisterValue2(2)
    #define.RegisterValue3(3)
    #define.RegisterValue4(4)
    #define.RegisterValue5(5)
    #define.RegisterValue6(6)
    #define.RegisterValue7(7)
    #define.RegisterValue8(8)
    #define.RegisterValue9(9)
    #define.RegisterValue10(10)
    protected container sysQuery2con(TmpSysQuery _tmpSysQuery)
    {
        container   registerValues;
        Types       valueType;
        int         i = 1;
        ;

        while select _tmpSysQuery order by Field_Id
        {
            valueType = conPeek(regFieldBaseType, _tmpSysQuery.Field_Id);

            if (valueType == Types::Real)
            {
                switch (i)
                {
                    case #RegisterValue8:
                        registerValues += conPeek(registerValues, #RegisterValue2) + conPeek(registerValues, #RegisterValue4) - conPeek(registerValues, #RegisterValue6);
                        break;

                    case #RegisterValue9:
                        registerValues += conPeek(registerValues, #RegisterValue3) + conPeek(registerValues, #RegisterValue5) - conPeek(registerValues, #RegisterValue7);
                        break;

                    case #RegisterValue10:
                        registerValues += conPeek(registerValues, #RegisterValue6) - conPeek(registerValues, #RegisterValue7);
                        break;

                    default:
                        registerValues += str2num(strRem(_tmpSysQuery.RangeValue, #SpaceConst));
                }
            }
            else
            {
                registerValues += _tmpSysQuery.RangeValue;
            }

            i ++;
        }

        return registerValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
        protected boolean updateTotals(RTax25RegisterTrans _mainTrans,
                                   RTax25RegisterTrans _origTrans = null)
    {
        RTax25RegisterTrans rTax25RegisterTrans;
        container           totalFields,
                            registerValues;
        int                 openHeader = 0;
        int                 lineNumberLast;
        int                 i;
        boolean             ret = false;
        anytype             anyZero = 0;

        if (!_mainTrans && !_origTrans)
        {
            return ret;
        }

        select firstonly rTax25RegisterTrans order by LineNumber desc
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.RegisterJournalType == rTax25RegisterJournalTrans.RegisterJournalType &&
                  rTax25RegisterTrans.BlockType           == ReportBlockType::Header                        &&
                  rTax25RegisterTrans.LineNumber          <  (_mainTrans ? _mainTrans.LineNumber : _origTrans.LineNumber);

        if (!rTax25RegisterTrans.RecId)
        {
            return ret;
        }

        totalFields = rTax25RegisterTrans.RegisterValues;

        while select forupdate rTax25RegisterTrans order by LineNumber desc
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.RegisterJournalType == rTax25RegisterJournalTrans.RegisterJournalType &&
                 (rTax25RegisterTrans.BlockType           == ReportBlockType::Header                        ||
                  rTax25RegisterTrans.BlockType           == ReportBlockType::Footer)                       &&
                  rTax25RegisterTrans.LineNumber          <  (_mainTrans ? _mainTrans.LineNumber : _origTrans.LineNumber)
        {
            if (rTax25RegisterTrans.BlockType == ReportBlockType::Footer)
            {
                if (lineNumberLast && (lineNumberLast - 1) != rTax25RegisterTrans.LineNumber)
                {
                    openHeader ++;
                }

                if (openHeader)
                {
                    openHeader --;
                }
                else
                {
                    for (i = 1; i <= conLen(totalFields); i ++)
                    {
                        if (conPeek(totalFields, i) &&
                           (!_origTrans || !_mainTrans ||
                            conPeek(_origTrans.RegisterValues, i) != conPeek(_mainTrans.RegisterValues, i)))
                        {
                            registerValues += conPeek(rTax25RegisterTrans.RegisterValues, i) -
                                                     (_origTrans ? conPeek(_origTrans.RegisterValues, i) : anyZero) +
                                                     (_mainTrans ? conPeek(_mainTrans.RegisterValues, i) : anyZero);
                            ret = true;
                        }
                        else
                        {
                            registerValues += conPeek(rTax25RegisterTrans.RegisterValues, i);
                        }
                    }

                    rTax25RegisterTrans.RegisterValues = registerValues;
                    rTax25RegisterTrans.doUpdate();
                }
            }
            else
            {
                 openHeader ++;
            }

            registerValues = conNull();
            lineNumberLast = rTax25RegisterTrans.LineNumber;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>