<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlBudgetTransNoCheckProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlBudgetTransNoCheckProvider</c> class is a budget control data
/// maintenance scenario that finds and processes budget register entries that have not
/// been checked for budget funds available.
/// </summary>
public class BudgetControlBudgetTransNoCheckProvider extends BudgetControlDataMaintenanceProvider implements BudgetControlIDataMaintenanceSandbox
{
    private const int CheckResultNotChecked = 0;
    private const int ZeroVarianceAmountSum = 0;
    ClassName providerClassName;
    private int undefinedIntegrator = -1;

    private BudgetControlDataMaintenanceRecId budgetControlDataMaintenanceRecId;
    private BudgetControlSourceIntegrator budgetControlSourceIntegrator;
    private BudgetSourceTrackingStatus budgetSourceTrackingStatus;
    private BudgetTransactionStatus budgetTransactionStatus;
    private Description255 dataMaintenanceProviderName;
    private Description255 dataMaintenanceDescription;
    private BudgetControlDataMaintenance budgetControlDataMaintenance;
    private utcdatetime dataMaintenanceDetectionDateTime;

    private BudgetTransactionHeader budgetTransactionHeader;
    private BudgetTransactionLine budgetTransactionLine;
    private BudgetSource budgetSource;
    private BudgetControlDataMaintenanceTracking dataMaintenanceTrackingExisting;
    private BudgetTransactionHeaderTmp budgetTransactionHeaderTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds budget register entries that have not been checked for budget funds available.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> process group record Id.
    /// </param>
    public void findDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        this.initializeFind(_budgetControlDataMaintenanceRecId);

        this.preFindDocuments(budgetControlDataMaintenanceRecId);

        ttsbegin;

        this.findDocumentsWithNoBudgetSources();
        this.findDocumentsWithEmptyOrFailedCheckResult();
        this.findDocumentsWithNoCheckCheckResult();
        this.findDocumentsWithPassedCheckNoTracking();
        this.findDocumentsWithPassedCheckIncorrectAmount();

        this.insertDataMaintenanceTracking();

        // Updates to a UTCDateTime field also change an extra field that stores the time zone Id.
        // This extra field changes the field count and order in the insert_recordSet statements,
        // so the dataMaintenanceProviderDetectionDateTime field needs to be set in a separate statement.
        BudgetControlDataMaintenanceTracking dataMaintenanceTracking;

        update_recordset dataMaintenanceTracking
            setting DataMaintenanceProviderDetectionDateTime = dataMaintenanceDetectionDateTime
            where dataMaintenanceTracking.BudgetControlDataMaintenance == budgetControlDataMaintenanceRecId
                && dataMaintenanceTracking.DataMaintenanceProvider == providerClassName;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFind</Name>
				<Source><![CDATA[
    private void initializeFind(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        this.dataMaintenanceDetectionDateTime = DateTimeUtil::utcNow();
        this.dataMaintenanceProviderName = this.getName();
        this.dataMaintenanceDescription = this.getDescription();
        this.budgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;
        this.budgetControlSourceIntegrator = BudgetControlSourceIntegrator::BudgetTransaction;

        this.budgetControlDataMaintenance = BudgetControlDataMaintenance::find(budgetControlDataMaintenanceRecId);

        this.budgetSourceTrackingStatus = budgetControlDataMaintenance.DocumentSourceTrackingStatus;

        if (budgetSourceTrackingStatus == BudgetSourceTrackingStatus::Draft)
        {
            this.budgetTransactionStatus = BudgetTransactionStatus::Draft;
        }
        else
        {
            this.budgetTransactionStatus = BudgetTransactionStatus::Completed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInsert</Name>
				<Source><![CDATA[
    private void runInsert(SysDaQueryObject _query, SysDaInsertObject _insertObject)
    {
        _insertObject.query(_query);

        var insertStmt = new SysDaInsertStatement();
        ttsbegin;
        insertStmt.insert(_insertObject);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataMaintenanceTracking</Name>
				<Source><![CDATA[
    private void insertDataMaintenanceTracking()
    {
        SysDaQueryObject insertDataMaintenanceTracking = SysDaQueryObjectBuilder::from(budgetTransactionHeaderTmp)
            .groupBy(fieldStr(BudgetTransactionHeaderTmp, TransactionNumber))
            .groupBy(fieldStr(BudgetTransactionHeaderTmp, BudgetTransactionHeader))
            .orderAscendingBy(fieldStr(BudgetTransactionHeaderTmp, TransactionNumber))
            .toSysDaQueryObject();

        insertDataMaintenanceTracking.projection()
            .AddValue(budgetControlDataMaintenanceRecId)
            .AddValue(providerClassName)
            .AddValue(dataMaintenanceProviderName)
            .AddValue(dataMaintenanceDescription)
            .add(fieldStr(BudgetTransactionHeaderTmp, BudgetTransactionHeader))
            .add(fieldStr(BudgetTransactionHeaderTmp, TransactionNumber))
            .AddValue(budgetSourceTrackingStatus)
            .AddValue(budgetControlSourceIntegrator)
            .AddValue(undefinedIntegrator)
            .AddValue(dataMaintenanceDetectionDateTime);

        SysDaInsertObject insertObject = this.getDataMaintenanceTrackingInsertObject();

        this.runInsert(insertDataMaintenanceTracking, insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetTransactionHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts into the class's budgetTransactionHeaderTmp temp table.
    /// </summary>
    /// <param name = "_query">A SysDaQueryObject containing the following projection: BudgetTransactionHeader, TransactionNumber</param>
    private void insertBudgetTransactionHeaderTmp(SysDaQueryObject _query)
    {
        var insertObject = new SysDaInsertObject(budgetTransactionHeaderTmp);
        insertObject.fields()
            .add(fieldStr(BudgetTransactionHeaderTmp, BudgetTransactionHeader))
            .add(fieldStr(BudgetTransactionHeaderTmp, TransactionNumber));

        this.runInsert(_query, insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetTransactionHeaderTmpProjection</Name>
				<Source><![CDATA[
    private void addBudgetTransactionHeaderTmpProjection(SysDaQueryObject _query)
    {
        _query.projection()
            .addMin(fieldStr(BudgetTransactionHeader, RecId))
            .add(fieldStr(BudgetTransactionHeader, TransactionNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataMaintenanceTrackingInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject getDataMaintenanceTrackingInsertObject()
    {
        BudgetControlDataMaintenanceTracking dataMaintenanceTracking;

        var insertObject = new SysDaInsertObject(dataMaintenanceTracking);
        insertObject.fields()
            .add(fieldStr(BudgetControlDataMaintenanceTracking, BudgetControlDataMaintenance))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, DataMaintenanceProvider))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, DataMaintenanceProviderName))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, DataMaintenanceProviderDescription))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, TrackingDocument))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, TrackingNumber))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, TrackingStatus))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, TrackingSourceIntegrator))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, OriginatingTrackingSourceIntegrator))
            .add(fieldStr(BudgetControlDataMaintenanceTracking, DataMaintenanceProviderDetectionDateTime));

        return insertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionHeaderQueryBuilder</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder getTransactionHeaderQueryBuilder()
    {
        SysDaQueryObjectBuilder builder =  this.getBaseTransactionHeaderQueryBuilder()
            .existsJoin(budgetTransactionLine);

        return this.addBaseBudgetTransactionLineWhereClause(builder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInnerJoinTransactionLineQueryBuilder</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder getInnerJoinTransactionLineQueryBuilder()
    {
        SysDaQueryObjectBuilder builder =  this.getBaseTransactionHeaderQueryBuilder()
            .innerJoin(budgetTransactionLine);
        
        return this.addBaseBudgetTransactionLineWhereClause(builder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBaseBudgetTransactionLineWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder addBaseBudgetTransactionLineWhereClause(SysDaQueryObjectBuilder _builder)
    {
        return _builder
            .where(budgetTransactionLine, fieldStr(BudgetTransactionLine, BudgetTransactionHeader)).IsEqualTo(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, RecId))
            .where(budgetTransactionLine, fieldStr(BudgetTransactionLine, BudgetType)).isEqualToLiteral(enum2int(BudgetType::Expense));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseTransactionHeaderQueryBuilder</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder getBaseTransactionHeaderQueryBuilder()
    {
        return SysDaQueryObjectBuilder::from(budgetTransactionHeader)
                .where(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, PrimaryLedger)).isEqualToLiteral(budgetControlDataMaintenance.PrimaryLedger)
                .where(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, TransactionStatus)).isEqualToLiteral(enum2int(budgetTransactionStatus))
                .where(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, Date)).isGreaterThanOrEqualToLiteral(budgetControlDataMaintenance.DocumentFromDate)
                .where(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, Date)).isLessThanOrEqualToLiteral(budgetControlDataMaintenance.DocumentToDate)
            .groupBy(fieldStr(BudgetTransactionHeader, TransactionNumber))
            .orderAscendingBy(fieldStr(BudgetTransactionHeader, TransactionNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>notExistsJoinBudgetSource</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder notExistsJoinBudgetSource(SysDaQueryObjectBuilder _builder)
    {
        return this.addBaseBudgetSourceWhereClause(_builder.notExistsJoin(budgetSource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsJoinBudgetSource</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder existsJoinBudgetSource(SysDaQueryObjectBuilder _builder)
    {
        return this.addBaseBudgetSourceWhereClause(_builder.existsJoin(budgetSource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>innerJoinBudgetSource</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder innerJoinBudgetSource(SysDaQueryObjectBuilder _builder)
    {
        return this.addBaseBudgetSourceWhereClause(_builder.innerJoin(budgetSource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBaseBudgetSourceWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder addBaseBudgetSourceWhereClause(SysDaQueryObjectBuilder _builder)
    {
        return _builder
            .where(budgetSource, fieldStr(BudgetSource, BudgetSourceType)).isEqualToLiteral(enum2int(BudgetSourceType::BudgetTransactionLine))
            .where(budgetSource, fieldStr(BudgetSource, BudgetTransactionLine)).isEqualTo(budgetTransactionLine, fieldStr(BudgetTransactionLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>notExistsInBudgetTransactionHeaderTmp</Name>
				<Source><![CDATA[
    private SysDaQueryObjectBuilder notExistsInBudgetTransactionHeaderTmp(SysDaQueryObjectBuilder _builder)
    {
        return _builder
            .notExistsJoin(budgetTransactionHeaderTmp)
                .where(budgetTransactionHeaderTmp, fieldStr(BudgetTransactionHeaderTmp, BudgetTransactionHeader)).isEqualTo(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetCheckResultEmptyOrFailedExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression createBudgetCheckResultEmptyOrFailedExpression()
    {
        return new SysDaEqualsExpression(
                    new SysDaFieldExpression(budgetSource, fieldStr(BudgetSource, CheckResult)),
                    new SysDaValueExpression(CheckResultNotChecked)
            )
            .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(budgetSource, fieldStr(BudgetSource, CheckResult)),
                    new SysDaValueExpression(enum2int(BudgetCheckResult::Failed))
            )
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetCheckResultPassedExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression createBudgetCheckResultPassedExpression()
    {
        return new SysDaEqualsExpression(
                    new SysDaFieldExpression(budgetSource, fieldStr(BudgetSource, CheckResult)),
                    new SysDaValueExpression(enum2int(BudgetCheckResult::Passed))
            )
            .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(budgetSource, fieldStr(BudgetSource, CheckResult)),
                    new SysDaValueExpression(enum2int(BudgetCheckResult::PassedWithWarnings))
            )
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsWithNoBudgetSources</Name>
				<Source><![CDATA[
    private void findDocumentsWithNoBudgetSources()
    {
        SysDaQueryObjectBuilder budgetTransactionHeaderQueryBuilder = this.getTransactionHeaderQueryBuilder();

        SysDaQueryObject budgetTransactionHeaderQuery = 
            this.notExistsJoinBudgetSource(budgetTransactionHeaderQueryBuilder)
            .toSysDaQueryObject();

        this.addBudgetTransactionHeaderTmpProjection(budgetTransactionHeaderQuery);
        this.insertBudgetTransactionHeaderTmp(budgetTransactionHeaderQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsWithEmptyOrFailedCheckResult</Name>
				<Source><![CDATA[
    private void findDocumentsWithEmptyOrFailedCheckResult()
    {
        SysDaQueryObjectBuilder budgetTransactionHeaderQueryBuilder = this.getTransactionHeaderQueryBuilder();

        budgetTransactionHeaderQueryBuilder = 
            this.existsJoinBudgetSource(budgetTransactionHeaderQueryBuilder)
            .wherever(this.createBudgetCheckResultEmptyOrFailedExpression());

        SysDaQueryObject budgetTransactionHeaderQuery = 
            this.notExistsInBudgetTransactionHeaderTmp(budgetTransactionHeaderQueryBuilder)
            .toSysDaQueryObject();

        this.addBudgetTransactionHeaderTmpProjection(budgetTransactionHeaderQuery);
        this.insertBudgetTransactionHeaderTmp(budgetTransactionHeaderQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsWithNoCheckCheckResult</Name>
				<Source><![CDATA[
    private void findDocumentsWithNoCheckCheckResult()
    {
        SysDaQueryObjectBuilder budgetTransactionHeaderQueryBuilder = this.getInnerJoinTransactionLineQueryBuilder();

        budgetTransactionHeaderQueryBuilder.groupBy(fieldStr(BudgetTransactionLine, LedgerDimension));

        SysDaQueryObjectBuilder budgetSourceQueryObjectBuilder = 
            this.existsJoinBudgetSource(budgetTransactionHeaderQueryBuilder)
            .where(budgetSource, fieldStr(BudgetSource, CheckResult)).isEqualToLiteral(enum2int(BudgetCheckResult::NoCheck));

        SysDaQueryObject budgetSourceQueryObject = 
            this.notExistsInBudgetTransactionHeaderTmp(budgetSourceQueryObjectBuilder)
            .toSysDaQueryObject();

        budgetSourceQueryObject.projection()
            .addMin(fieldStr(BudgetTransactionHeader, RecId))
            .add(fieldStr(BudgetTransactionHeader, TransactionNumber))
            .add(fieldStr(BudgetTransactionLine, LedgerDimension));

        SysDaSearchObject searchObject = new SysDaSearchObject(budgetSourceQueryObject);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        RecordInsertList insertList = new RecordInsertList(tableNum(BudgetTransactionHeaderTmp), false, false, false, false, true, budgetTransactionHeaderTmp);

        while (searchStatement.findNext(searchObject))
        {
            if (BudgetControlLedgerDimensionHelper::isLedgerDimensionEnabledForBudgetControl(budgetControlDataMaintenance.PrimaryLedger, budgetTransactionLine.LedgerDimension))
            {
                // Only add document if it has a NoCheck check result and the ledger dimension is budget controlled.
                budgetTransactionHeaderTmp.BudgetTransactionHeader = budgetTransactionHeader.RecId;
                budgetTransactionHeaderTmp.TransactionNumber = budgetTransactionHeader.TransactionNumber;
                insertList.add(budgetTransactionHeaderTmp);
            }
        }

        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsWithPassedCheckNoTracking</Name>
				<Source><![CDATA[
    private void findDocumentsWithPassedCheckNoTracking()
    {
        // Since BudgetSourceTracking records potentially don't exist, we don't have Category and IsDraft to join to BudgetControlConfigurationDraftCategoryView.
        // Determine Category and IsDraft for the budget sources using BudgetControlBudgetTransactionCategoryView.
        BudgetControlBudgetTransactionCategoryView transactionCategoryView;

        SysDaQueryObjectBuilder budgetSourceQueryBuilder = SysDaQueryObjectBuilder::from(transactionCategoryView)
            .select(fieldStr(BudgetControlBudgetTransactionCategoryView, BudgetTransactionHeader))
            .select(fieldStr(BudgetControlBudgetTransactionCategoryView, TransactionNumber))
                .where(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, DocumentDate)).isGreaterThanOrEqualToLiteral(budgetControlDataMaintenance.DocumentFromDate)
                .where(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, DocumentDate)).isLessThanOrEqualToLiteral(budgetControlDataMaintenance.DocumentToDate)
                .where(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, PrimaryLedger)).isEqualToLiteral(budgetControlDataMaintenance.PrimaryLedger)
                .where(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, TransactionStatus)).isEqualToLiteral(enum2int(budgetTransactionStatus))
            .groupBy(fieldStr(BudgetControlBudgetTransactionCategoryView, BudgetTransactionHeader))
            .groupBy(fieldStr(BudgetControlBudgetTransactionCategoryView, TransactionNumber))
            .innerJoin(budgetSource)
                .where(budgetSource, fieldStr(BudgetSource, BudgetTransactionLine)).isEqualTo(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, BudgetTransactionLine))
                .wherever(this.createBudgetCheckResultPassedExpression());
        
        if (BudgetControlTrackBFAOnlyFeature::isEnabled())
        {
            // When the BudgetControlTrackBFAOnlyFeature is enabled, it is a valid state to have a passed budget source and no tracking.
            // Find invalid states by joining to BudgetControlConfigurationDraftCategoryView to determine which amounts are actually tracked.
            BudgetControlConfigurationDraftCategoryView configurationCategoryView;

            budgetSourceQueryBuilder.innerJoin(configurationCategoryView)
                .where(configurationCategoryView, fieldStr(BudgetControlConfigurationDraftCategoryView, IsDraft)).isEqualTo(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, IsDraft))
                .where(configurationCategoryView, fieldStr(BudgetControlConfigurationDraftCategoryView, Category)).isEqualTo(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, BudgetControlCategory))
                .where(configurationCategoryView, fieldStr(BudgetControlConfigurationDraftCategoryView, PrimaryLedger)).isEqualTo(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, PrimaryLedger));
        }

        BudgetSourceTracking budgetSourceTracking;
        SysDaQueryObject budgetSourceQuery = budgetSourceQueryBuilder.notExistsJoin(budgetSourceTracking)
            .where(budgetSourceTracking, fieldStr(BudgetSourceTracking, BudgetSource)).isEqualTo(budgetSource, fieldStr(BudgetSource, RecId))
            .where(budgetSourceTracking, fieldStr(BudgetSourceTracking, Category)).isEqualTo(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, BudgetControlCategory))
            .where(budgetSourceTracking, fieldStr(BudgetSourceTracking, Status)).isEqualTo(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, BudgetSourceTrackingStatus))
            .where(budgetSourceTracking, fieldStr(BudgetSourceTracking, TrackingDate)).isEqualTo(transactionCategoryView, fieldStr(BudgetControlBudgetTransactionCategoryView, TransactionDate)) // BudgetSourceTracking uses TransactionDate, not DocumentDate
            .toSysDaQueryObject();

        this.insertBudgetTransactionHeaderTmp(budgetSourceQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsWithPassedCheckIncorrectAmount</Name>
				<Source><![CDATA[
    private void findDocumentsWithPassedCheckIncorrectAmount()
    {
        BudgetControlBudgetTransactionVarianceAmountView varianceAmountView;

        SysDaQueryObject varianceAmountViewQuery = SysDaQueryObjectBuilder::from(varianceAmountView)
            .select(fieldStr(BudgetControlBudgetTransactionCategoryView, BudgetTransactionHeader))
            .select(fieldStr(BudgetControlBudgetTransactionCategoryView, TransactionNumber))
                .where(varianceAmountView, fieldStr(BudgetControlBudgetTransactionVarianceAmountView, DocumentDate)).isGreaterThanOrEqualToLiteral(budgetControlDataMaintenance.DocumentFromDate)
                .where(varianceAmountView, fieldStr(BudgetControlBudgetTransactionVarianceAmountView, DocumentDate)).isLessThanOrEqualToLiteral(budgetControlDataMaintenance.DocumentToDate)
                .where(varianceAmountView, fieldStr(BudgetControlBudgetTransactionVarianceAmountView, PrimaryLedger)).isEqualToLiteral(budgetControlDataMaintenance.PrimaryLedger)
                .where(varianceAmountView, fieldStr(BudgetControlBudgetTransactionVarianceAmountView, TransactionStatus)).isEqualToLiteral(enum2int(budgetTransactionStatus))
                .where(varianceAmountView, fieldStr(BudgetControlBudgetTransactionVarianceAmountView, IsTracked)).isEqualToLiteral(enum2int(NoYes::Yes))
                .where(varianceAmountView, fieldStr(BudgetControlBudgetTransactionVarianceAmountView, VarianceAmountSum)).isNotEqualToLiteral(ZeroVarianceAmountSum)
            .notExistsJoin(budgetTransactionHeaderTmp)
                .where(budgetTransactionHeaderTmp, fieldStr(BudgetTransactionHeaderTmp, BudgetTransactionHeader)).isEqualTo(varianceAmountView, fieldStr(BudgetControlBudgetTransactionVarianceAmountView, BudgetTransactionHeader))
            .toSysDaQueryObject();

        this.insertBudgetTransactionHeaderTmp(varianceAmountViewQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    public Description255 getDescription()
    {
        return "@Budget:DataMaintenanceBudgetRegisterProviderDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public Description255 getName()
    {
        return "@Budget:DataMaintenanceBudgetRegisterEntriesNotChecked";
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFindDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove existing found documents prior to finding new documents.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The budget control data maintenance record Id.
    /// </param>
    public void preFindDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        super(_budgetControlDataMaintenanceRecId);

        BudgetControlDataMaintenanceProvider::removeExistingFoundDocuments(_budgetControlDataMaintenanceRecId, providerClassName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a single budget register entry with budget control.
    /// </summary>
    /// <param name="_dataMaintenanceTrackingRecId">
    /// A <c>BudgetControlDataMaintenanceTracking</c> record Id.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value for the processed budget register entry.
    /// </returns>
    public BudgetCheckResult processDocument(RecId _dataMaintenanceTrackingRecId)
    {
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;

        select firstonly TrackingDocument from budgetControlDataMaintenanceTracking
            where budgetControlDataMaintenanceTracking.RecId == _dataMaintenanceTrackingRecId;

        return BudgetControlBudgetTransactionDataMaintenance::reprocessBudgetTransactionHeader(budgetControlDataMaintenanceTracking.TrackingDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        providerClassName = classStr(BudgetControlBudgetTransNoCheckProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFindInSandbox</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean doFindInSandbox()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>