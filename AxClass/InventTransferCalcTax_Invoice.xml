<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferCalcTax_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferCalcTax_Invoice</c> class provides functions to calculate taxes for Invent transfer order journal.
/// </summary>
public class InventTransferCalcTax_Invoice extends InventTransferCalcTax
{
    #ISOCountryRegionCodes

    private InventTransferJour inventTransferJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>InventTransferCalcTax</c> object with transfer order journal.
    /// </summary>
    /// <param name="_record">
    /// The source record.
    /// </param>
    public void new(Common _record)
    {
        super (_record);

        inventTransferJour = _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transfer order update type.
    /// </summary>
    /// <returns>
    /// The transfer order update type.
    /// </returns>
    public InventTransferUpdateType getUpdateType()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date.
    /// </summary>
    /// <returns>
    /// The invoice date.
    /// </returns>
    /// <remarks>
    /// Uses trans date as invoice date.
    /// </remarks>
    public TransDate invoiceDate()
    {
        return inventTransferJour.TransDate ? inventTransferJour.TransDate :
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if sales tax adjustments should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns always true.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// A container used to pass various data between methods.
    /// </summary>
    /// <returns>
    /// A container containing various data.
    /// </returns>
    public container vatRegData_W()
    {
        DocumentDate documentDate = inventTransferJour.TransDate;
        PlCustVendName custVendName;
        VATNum vatNum;
        Addressing addressing;
        PlTaxPeriodPaymentCode taxPeriodPaymentCode;
        VatDueDate_W vatDate = inventTransferJour.TransDate;
        CzPostponeVAT postponeVAT;
        IntraComVATDueDate_W useIntrComVatDate;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            InventTransferTable inventTransferTable = inventTransferJour.inventTransferTable();
            switch (this.getUpdateType())
            {
                case InventTransferUpdateType::Shipment:
                    // To address name is used as customer/vendor name for tax line of transfer order
                    custVendName = inventTransferTable.ToAddressName;
                    addressing = LogisticsPostalAddress::findRecId(inventTransferTable.ToPostalAddress).Address;
                    break;
                case InventTransferUpdateType::Receive:
                    // From address name is used as customer/vendor name for tax line of transfer order
                    custVendName = inventTransferTable.FromAddressName;
                    addressing = LogisticsPostalAddress::findRecId(inventTransferTable.FromPostalAddress).Address;
                    break;
                default:
                    break;
            }
        }

        return [
            vatDate,
            documentDate,
            custVendName,
            vatNum,
            addressing,
            taxPeriodPaymentCode,
            postponeVAT,
            useIntrComVatDate
        ];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>