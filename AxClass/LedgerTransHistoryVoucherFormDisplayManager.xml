<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransHistoryVoucherFormDisplayManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerTransHistoryVoucherFormDisplayManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherUser</Name>
				<Source><![CDATA[
    internal UserName getVoucherUser(GeneralJournalEntryHistory _gjeHistory)
    {
        SubledgerVoucherGeneralJournalEntryHistory svgjehistory;
        SubledgerJournalEntry sje;
        AccountingEvent ae;

        // If transfer id is valid then subledger journal entry is created and username needs to be for the 
        // subledger journal entry. This is similar to displayVoucherUser function in <c>LedgerTransVoucher</c> form.
        if (_gjeHistory.TransferId)
        {
            select firstonly svgjehistory
                where svgjehistory.GeneralJournalEntry == _gjeHistory.RecId
            join sje
                where sje.Voucher == svgjehistory.Voucher &&
                    sje.VoucherDataAreaId == svgjehistory.VoucherDataAreaId &&
                    sje.TransferId == _gjeHistory.TransferId
            join ae
                where ae.AccountingDate == svgjehistory.AccountingDate &&
                    ae.RecId == sje.AccountingEvent;

            if (sje.CreatedTransactionId)
            {
                return TransactionLog::find(sje.CreatedTransactionId).CreatedBy;
            }
        }

        return TransactionLog::find(_gjeHistory.CreatedTransactionId).CreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingExchangeRate</Name>
				<Source><![CDATA[
    internal ExchRate getAccountingExchangeRate(GeneralJournalAccountEntryHistory _gjaeHistory)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::current(), _gjaeHistory.TransactionCurrencyCode);
    
        return exchangeRateHelper.displayStoredExchangeRate(CurrencyExchange::calculateExchangeRate(_gjaeHistory.TransactionCurrencyAmount,
                                                            _gjaeHistory.AccountingCurrencyAmount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>