<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransOpenCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>VendTransOpenCashFlow</c> class is the implementation between open vendor transactions and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), 'VendTransOpen'), ExportAttribute('Dynamics.AX.Application.LedgerCovIDocument')]
public class VendTransOpenCashFlow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            this.generateCashFlowForProcessSet(_allNew);
            this.deleteCompletedRows();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet(AllNew _allNew)
    {
        const int SetSize = 2500;

        int64 nextSetSize;
        int64 numberOfRecordsForVendAccountNum;
        AccountNum lastVendAccountNum;
        AccountNum fromVendAccountNum;
        AccountNum toVendAccountNum;

        Query countByVendorQuery = this.buildAccountNumCountQuery(_allNew);
        QueryRun countByVendorQueryRun = new QueryRun(countByVendorQuery);
        int i = 0;

        while (countByVendorQueryRun.next())
        {
            i++;

            VendTransOpen vendTransOpen = countByVendorQueryRun.get(tableNum(VendTransOpen));

            AccountNum vendAccountNum = vendTransOpen.AccountNum;
            numberOfRecordsForVendAccountNum = vendTransOpen.RecId;

            if (i == 1)
            {
                fromVendAccountNum = vendAccountNum;
            }

            nextSetSize +=  numberOfRecordsForVendAccountNum;
            if (nextSetSize >= SetSize)
            {
                toVendAccountNum = vendAccountNum;

                this.processCashFlowForProcessSet(_allNew, fromVendAccountNum, toVendAccountNum);

                i = 0;
                nextSetSize = 0;
                fromVendAccountNum = '';
                toVendAccountNum = '';
            }

            lastVendAccountNum = vendAccountNum;

        }

        // The last set is smaller than SetSize
        if (i > 0)
        {
            toVendAccountNum = lastVendAccountNum;

            this.processCashFlowForProcessSet(_allNew, fromVendAccountNum, toVendAccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountNumCountQuery</Name>
				<Source><![CDATA[
    private Query buildAccountNumCountQuery(AllNew _allNew)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(VendTransOpen));

        qbds.addSelectionField(fieldNum(VendTransOpen, AccountNum));
        qbds.addSelectionField(fieldNum(VendTransOpen, RecId), SelectionField::Count);
        qbds.addGroupByField(fieldNum(VendTransOpen, AccountNum));
        qbds.addOrderByField(fieldNum(VendTransOpen, AccountNum), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(AllNew _allNew,  AccountNum _fromVendAccountNum, AccountNum _toVendAccountNum)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowVendorOpenInvoice))
        {
            System.Exception exception;
            RecId vendTransOpenRecId;
            try
            {
                VendTransOpen vendTransOpen;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(vendTransOpen, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQueryForSet(_allNew, _fromVendAccountNum, _toVendAccountNum);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    vendTransOpen = qr.get(tableNum(VendTransOpen));
                    vendTransOpenRecId = vendTransOpen.RecId;
                    vendTransOpen.updateLedgerCov(ledgerCoverage);
                }

                LedgerCov::deleteForTransTableIdAndFilter(tableNum(VendTransOpen), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(VendTransOpen), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateVendTransOpenCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(VendTransOpen), vendTransOpenRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(VendTransOpen), vendTransOpenRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedRows</Name>
				<Source><![CDATA[
    private void deleteCompletedRows()
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowDeleteNotExistingRows))
        {
            System.Exception exception;
            try
            {
                ttsbegin;

                this.deleteCompletedLedgerCovRows();
                this.deleteCompletedLedgerCovDocumentRows();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(VendTransOpen), 0), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(VendTransOpen), 0, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovRows()
    {
        VendTransOpen vendTransOpen;
        LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

        delete_from ledgerCov
            where ledgerCov.TransTableId == tableNum(VendTransOpen)
                notexists join vendTransOpen
                    where ledgerCov.TransTableId == tableNum(VendTransOpen)
                        && ledgerCov.TransRecId == vendTransOpen.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovDocumentRows()
    {
        VendTransOpen vendTransOpen;
        LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

        delete_from ledgerCovDocument
            where ledgerCovDocument.TransTableId == tableNum(VendTransOpen)
                notexists join vendTransOpen
                    where ledgerCovDocument.TransTableId == tableNum(VendTransOpen)
                        && ledgerCovDocument.TransRecId == vendTransOpen.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQueryForSet</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQueryForSet(AllNew _allNew, AccountNum _fromVendAccountNum, AccountNum _toVendAccountNum)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(VendTransOpen));

        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(VendTransOpen, AccountNum));
        qbr.value(_fromVendAccountNum + '..' + _toVendAccountNum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowVendorOpenInvoice))
        {
            System.Exception exception;
            RecId vendTransOpenRecId;
            try
            {
                VendTransOpen vendTransOpen;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(vendTransOpen, NoYes::Yes);
        
                Query q = this.buildGenerateCashFlowQuery(_allNew);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    vendTransOpen = qr.get(tableNum(VendTransOpen));
                    vendTransOpenRecId = vendTransOpen.RecId;
                    vendTransOpen.updateLedgerCov(ledgerCoverage);
                }

                this.deleteLedgerCovRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                this.deleteLedgerCovDocumentRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateVendTransOpenCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(VendTransOpen), vendTransOpenRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(VendTransOpen), vendTransOpenRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQuery</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQuery(AllNew _allNew)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(VendTransOpen));

        if (_allNew == AllNew::New)
        {
            qbds.addRange(fieldNum(VendTransOpen, CovStatus)).value(queryValue(0));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCov::deleteForTransTableId(tableNum(VendTransOpen));
        }
        else
        {
            LedgerCov::deleteForTransTableIdAndFilter(tableNum(VendTransOpen), _filter);

            VendTransOpen vendTransOpen;
            LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

            delete_from ledgerCov
                where ledgerCov.TransTableId == tableNum(VendTransOpen)
                    notexists join vendTransOpen
                        where ledgerCov.TransTableId == tableNum(VendTransOpen)
                            && ledgerCov.TransRecId == vendTransOpen.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendTransOpenCovStatus</Name>
				<Source><![CDATA[
    private void updateVendTransOpenCovStatus(TmpDataAreaRecIdFilter _updatedRows)
    {
        VendTransOpen vendTransOpen;

        vendTransOpen.skipDataMethods(true);
        vendTransOpen.skipDatabaseLog(true);
        vendTransOpen.skipEvents(true);

        update_recordset vendTransOpen
            setting CovStatus = 1
            exists join _updatedRows
                where vendTransOpen.RecId == _updatedRows.RefRecId
                    && _updatedRows.RefTableId == tableNum(VendTransOpen)
                    && _updatedRows.RefDataAreaId == curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCovDocument::deleteForTransTableId(tableNum(VendTransOpen));
        }
        else
        {
            LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(VendTransOpen), _filter);

            VendTransOpen vendTransOpen;
            LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

            delete_from ledgerCovDocument
                where ledgerCovDocument.TransTableId == tableNum(VendTransOpen)
                    notexists join vendTransOpen
                        where ledgerCovDocument.TransTableId == tableNum(VendTransOpen)
                            && ledgerCovDocument.TransRecId == vendTransOpen.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        VendTable vendTable;
        DirPartyTable dirPartyTable;

        TableId vendTransOpenTableId = tableNum(VendTransOpen);
        LedgerCovDocumentType type = LedgerCovDocumentType::VendTransOpen;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            Voucher,
            AccountNumber,
            DueDate,
            AccountName)
            select vendTransOpenTableId,
                RecId,
                TransDate,
                type,
                accountingCurrency
                from vendTransOpen
            join _filter
                where vendTransOpen.TableId == _filter.RefTableId
                    && vendTransOpen.RecId == _filter.RefRecId
            join Invoice, Voucher, AccountNum, DueDate
                from vendTrans
                    where vendTrans.RecId == vendTransOpen.RefRecId
                        && vendTrans.AccountNum == vendTransOpen.AccountNum
            join vendTable
                where vendTable.AccountNum == vendTrans.AccountNum
            outer join Name
                from dirPartyTable
                    where dirPartyTable.RecId == vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@CashManagement:CashBankMgmt_CashFlow_EntityField_VendorOpenTransaction";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        switch (_tableId)
        {
            case tableNum(VendTransOpen):
                VendTransOpen vendTransOpen = VendTransOpen::find(_recId);
                documentNum = vendTransOpen.AccountNum;
                break;

            case tableNum(VendTrans):
                VendTrans vendTrans = VendTrans::find(_recId);
                documentNum = vendTrans.AccountNum;
                break;
        }

        return documentNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>