<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdChannel_Deferral</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25StdChannel_Deferral extends RTax25StdChannel
{
    RecordSortedList                rDeferralsGroup;
    RDeferralsVATRefundingMethod    deferralsVATRefundingMethod;
    Map                             voucherMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RDeferralsAcquisitionDate acquisitionDate()
    {
        RDeferralsAcquisitionDate acquisitionDate = transMap.lookup(#DocDateOffset).date();

        if (! acquisitionDate)
        {
            acquisitionDate = regCalc.dateTo();
        }
        return acquisitionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean          ret, loop;
        RDeferralsGroup  deferralsGroup;

        ret = super();

        if (ret && this.deferralsAmount() <= 0)
            return false;

        if (ret)
        {
            loop = rDeferralsGroup.first(deferralsGroup);
            while (loop)
            {
                if (RDeferralsWritingOffFactor::existCalculatedFactor(transMap.lookup(#ProfitRecIdOffset).longLong(),
                                                                      deferralsGroup.DeferralsGroupId,
                                                                      RDeferralsGroup::initWriteStartDate(deferralsGroup.DeferralsGroupId,
                                                                                                          this.acquisitionDate())))
                {
                    return false;
                }
                loop = rDeferralsGroup.next(deferralsGroup);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public boolean clear()
    {
        RDeferralsTable deferralsTable;
        RDeferralsBook  deferralsBook;
        RDeferralsTrans deferralsTrans;
        RDeferralsGroup deferralsGroup;
        boolean         loop;

        deferralsTable = RDeferralsTable::findFromSource(transMap.lookup(#TableIdOffset).int(),
                                                         transMap.lookup(#RecIdOffset).longLong(),
                                                         transMap.lookup(#ProfitRecIdOffset).longLong());
        if (deferralsTable.RecId)
        {
            setprefix(strfmt("@GLS104178", deferralsTable.DeferralsId));

            loop = rDeferralsGroup.first(deferralsGroup);
            while (loop)
            {
                select firstonly RecId
                    from deferralsTrans
                    where deferralsTrans.DeferralsId     == deferralsTable.DeferralsId     &&
                          deferralsTrans.DeferralsBookId == deferralsGroup.DeferralsBookId &&
                          deferralsTrans.StornoRecId    == 0;
                if (deferralsTrans.RecId)
                {
                    error(strfmt("@GLS107188", deferralsGroup.DeferralsGroupId));
                    return false;
                }
                delete_from deferralsBook
                    where deferralsBook.DeferralsId     == deferralsTable.DeferralsId &&
                          deferralsBook.DeferralsBookId == deferralsGroup.DeferralsBookId;
                loop = rDeferralsGroup.next(deferralsGroup);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// created receipt transaction for new deferral
    /// </summary>
    /// <param name="_deferralsBook">
    /// value model of new deferral
    /// </param>
    /// <param name="_deferralsTable">
    /// main table of new deferral
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createTrans(RDeferralsBook _deferralsBook, RDeferralsTable _deferralsTable)
    {
        RDeferralsTrans::createTrans(_deferralsBook, this.deferralsLedgerVoucher(_deferralsTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RDeferralsAmount deferralsAmount()
    {
        anytype anyZero = 0.0;
        return transMap.exists(RTax25StdChannelOutputMode::Output) ? transMap.lookup(RTax25StdChannelOutputMode::Output).decimal() : anyZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ledgerVoucher</c> class and initializes several internal
    /// variables with information from a original transactions.
    /// </summary>
    /// <param name="_deferralsTable">
    /// created deferral
    /// </param>
    /// <param name="_allocate">
    /// A Boolean value that determines whether the allocation is ON.
    /// </param>
    /// <returns>
    /// a new instance of the <c>ledgerVoucher</c> class
    /// </returns>
    /// <exception cref="Exception::Error">
    /// if the transaction date is not identified
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerVoucher deferralsLedgerVoucher(RDeferralsTable _deferralsTable, boolean _allocate = true)
    {
        LedgerJournalName   ledgerJournaName;
        NumberSeq           numberSeq;
        LedgerVoucher       ledgerVoucher;
        Voucher             voucher;
        TransDate           transDate;

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, '');
        if (transMap.exists(#DocTransVoucher) && transMap.exists(#DocTransDate))
        {
            voucher     = transMap.lookup(#DocTransVoucher).bStr();
            transDate   = transMap.lookup(#DocTransDate).date();
        }

        if (_allocate && !voucher || transDate != _deferralsTable.AcquisitionDate)
        {
            select firstonly NumberSequenceTable from ledgerJournaName
                where ledgerJournaName.JournalType == LedgerJournalType::RDeferrals;

            numberSeq = NumberSeq::newGetVoucherFromId(ledgerJournaName.NumberSequenceTable);
            voucher   = numberSeq.voucher();
            transDate = _deferralsTable.AcquisitionDate;
        }

        ledgerVoucher.lastTransDate(transDate);
        ledgerVoucher.lastVoucher(voucher);

        if (!transDate)
            throw Error(strfmt("@GLS115960"));

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RDeferralsName deferralsName()
    {
        RDeferralsName deferralsName = transMap.lookup(#DocNameOffset).bStr();

        if (! deferralsName)
        {
            deferralsName = RTax25StdExpressionTable::find(regCalc.seqTable().SeqNum,
                                                           transMap.lookup(#ProfitRecIdOffset).longLong()).Description;
        }
        return deferralsName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public boolean exist()
    {
        RDeferralsTable rDeferralsTable;
        RDeferralsGroup deferralsGroup;
        boolean         loop;

        rDeferralsTable = RDeferralsTable::findFromSource(transMap.lookup(#TableIdOffset).int(),
                                                          transMap.lookup(#RecIdOffset).longLong(),
                                                          transMap.lookup(#ProfitRecIdOffset).longLong());
        if (rDeferralsTable.RecId)
        {
            loop = rDeferralsGroup.first(deferralsGroup);
            while (loop)
            {
                if (RDeferralsBook::find(rDeferralsTable.DeferralsId,deferralsGroup.DeferralsBookId))
                {
                    return true;
                }
                loop = rDeferralsGroup.next(deferralsGroup);
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBook</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertBook(RDeferralsBook _rDeferralsBook)
    {
        _rDeferralsBook.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertTable(RDeferralsTable _rDeferralsTable)
    {
        if (! _rDeferralsTable.RecId)
        {
            _rDeferralsTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        voucherMap = new Map(Types::Container, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    public void open()
    {
        container               deferralsGroup = RTax25RegParametersEngine::parameters2Con(regCalc.seqTable().ChannelId);
        RDeferralsGroup         tmpDeferralsGroup;
        int                     i;
        RDeferralsParameters    deferralsParameters = RDeferralsParameters::find();

        super();
        rDeferralsGroup = new RecordSortedList(tablenum(RDeferralsGroup));
        rDeferralsGroup.sortOrder(fieldnum(RDeferralsGroup, DeferralsGroupId));
        for (i = 1; i <= conlen(deferralsGroup); i++)
        {
            tmpDeferralsGroup = RDeferralsGroup::find(conpeek(deferralsGroup, i));
            if (tmpDeferralsGroup.RecId)
            {
                rDeferralsGroup.ins(tmpDeferralsGroup);
                if (tmpDeferralsGroup.DeferralsBookId == deferralsParameters.DeferralsBookIdDefault)
                {
                    deferralsVATRefundingMethod = tmpDeferralsGroup.vatRefundingMethod;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rDeferralsGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecordSortedList rDeferralsGroup(RecordSortedList _rDeferralsGroup)
    {
        rDeferralsGroup = _rDeferralsGroup;
        return rDeferralsGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rDeferralsId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RDeferralsId rDeferralsId()
    {
        return RDeferralsTable::initDeferralsNumberSeq().num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    public void send()
    {
        RDeferralsGroup     deferralsGroup;
        boolean             loop;
        RDeferralsTable     deferralsTable;
        RDeferralsBook      deferralsBook;

        if (! transMap.exists(RTax25StdChannelOutputMode::Output))
            throw error("@GLS104160");

        deferralsTable = RDeferralsTable::findFromSource(transMap.lookup(#TableIdOffset).int(),
                                                         transMap.lookup(#RecIdOffset).longLong(),
                                                         transMap.lookup(#ProfitRecIdOffset).longLong());
        if (! deferralsTable.RecId)
        {
            deferralsTable.initValue();
            deferralsTable.DeferralsId        = this.rDeferralsId();
            deferralsTable.AcquisitionDate    = this.acquisitionDate();
            deferralsTable.RefTableId         = transMap.lookup(#TableIdOffset).int();
            deferralsTable.RefRecId           = transMap.lookup(#RecIdOffset).longLong();
            deferralsTable.rTax25ProfitTable  = transMap.lookup(#ProfitRecIdOffset).longLong();
            deferralsTable.Name               = this.deferralsName();
            deferralsTable.vatRefundingMethod = deferralsVATRefundingMethod;
        }
        this.insertTable(deferralsTable);
        loop = rDeferralsGroup.first(deferralsGroup);
        while (loop)
        {
            deferralsBook.clear();
            deferralsBook.DeferralsId       = deferralsTable.DeferralsId;
            deferralsBook.initFromDeferralsGroup(deferralsGroup,deferralsTable);
            deferralsBook.DeferralsAmount = round(this.deferralsAmount(),RDeferralsProfile::find(deferralsBook.DeferralsProfile).RoundOffOperation);
            this.insertBook(deferralsBook);
            this.createTrans(deferralsBook, deferralsTable);
            loop = rDeferralsGroup.next(deferralsGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25StdChannel_Deferral construct()
    {
        return new RTax25StdChannel_Deferral();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25StdChannel_Deferral newParameters(RTax25RegCalc_Std _regCalc,
                                                          boolean           _preview)
    {
        RTax25StdChannel ret;

        if (_preview)
        {
            ret = RTax25StdChannel_DeferralPreview::construct();
        }
        else
        {
            ret = RTax25StdChannel_Deferral::construct();
        }

        ret.parmRegCalc(_regCalc);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>