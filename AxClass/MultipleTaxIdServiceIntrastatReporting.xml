<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MultipleTaxIdServiceIntrastatReporting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MultipleTaxIdServiceIntrastatReporting</c> class is responsible for Intrastat reporting by multiple tax id.
/// </summary>
[MultipleTaxIdServiceAttribute(MultipleTaxIdProcessType::IntrastatReporting)]
public class MultipleTaxIdServiceIntrastatReporting extends MultipleTaxIdServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getServiceName</Name>
				<Source><![CDATA[
    public ClassName getServiceName()
    {
        return classStr(MultipleTaxIdServiceIntrastatReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceMethodName</Name>
				<Source><![CDATA[
    public MethodName getServiceMethodName()
    {
        return methodStr(MultipleTaxIdServiceIntrastatReporting, run);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(MultipleTaxIdContract _contract)
    {
        TaxRegistration taxRegistration = TaxRegistration::find(_contract.parmTaxRegistrationRecId());

        TaxRegistrationTypeApplicabilityRule applicabilityRule = TaxRegistrationTypeApplicabilityRule::find(taxRegistration.TaxRegistrationTypeApplicabilityRule);
        LogisticsAddressCountryRegionISOCode countryISOCode = LogisticsAddressCountryRegion::find(applicabilityRule.CountryRegionId).ISOcode;

        IntrastatReporting intrastatReporting = IntrastatReporting::constructByCountryRegionId(countryISOCode);
        intrastatReporting.parmTaxRegistrationRecID(taxRegistration.RecId);
        intrastatReporting.parmCountryRegionId(applicabilityRule.CountryRegionId);
        intrastatReporting.initERParametersByCountry();

        if (intrastatReporting.prompt())
        {
            intrastatReporting.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>