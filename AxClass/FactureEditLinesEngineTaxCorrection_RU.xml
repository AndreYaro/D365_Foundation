<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngineTaxCorrection_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureEditLinesEngineTaxCorrection_RU extends FactureEditLinesEngine_RU
{
    LedgerJournalTrans localTrans;
    Map                facturedTransMap;

    FactureEditLinesLedgerEngine_RU ledgerEngine;

    QueryBuildRange journalNumRange,
                    transSignRange,         transSignRangeSec,
                    offsetAccountRange,     offsetAccountRangeSec,
                    offsetAccountTypeRange, offsetAccountTypeRangeSec,
                    currencyRangeSec,
                    vendorRange,
                    factureDateRangeSec;

    protected const int accountDs = 1;
    protected const int offsetAccountDs = 2;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressDefaultSec</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddress addressDefaultSec()
    {
        LogisticsPostalAddress ret;

        if (this.isCust())
        {
            ret = DirParty::postalAddress(CustTable::find(customerControl.text() ? customerControl.text() : factureCustomerControl.text()).Party,
                                          LogisticsLocationRoleType::Invoice);
        }
        else
        {
            ret = DirParty::postalAddress(CompanyInfo::current(), LogisticsLocationRoleType::Invoice);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    protected boolean checkJour(CustVendInvoiceJour _jour,
                                boolean            _proforma = false)
    {
        LedgerJournalTable localLedgerJournalTable = _jour;
        boolean            ret;

        ret = (localLedgerJournalTable.JournalType == LedgerJournalType::Daily) &&
              ! this.jourFullyFactured(localLedgerJournalTable.RecId, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(CustVendInvoiceTrans _trans)
    {
        LedgerJournalTrans localLedgerJournalTrans = _trans;
        int                sign                    = FactureEditLinesEngineTaxCorrection_RU::taxCorrectionSign(localLedgerJournalTrans);
        FactureModule_RU   module                  = factureCreate.module();
        boolean            contragentOK;
        str                tmpCont                 = this.contragent();
        container          checkPattern            = [ tmpCont, localLedgerJournalTrans.parmOffsetAccount(), localLedgerJournalTrans.OffsetAccountType, module ];
        FactureBook_RU     book                    = FactureJourCreate_RU::module2book(module);
        CurrencyCode       currencyCode            = currencyControl.text();
        boolean            correction              = correctionTypeControl.selection()   != FactureCorrectionType_RU::Unknown &&
                                                     distributionTypeControl.selection() != TaxDistributionType_RU::None;
        switch (checkPattern)
        {
            case [ "",      localLedgerJournalTrans.parmOffsetAccount(), LedgerJournalACType::Cust, module ] : // filter is 'non-cust/vend', _trans is cust
            case [ "",      localLedgerJournalTrans.parmOffsetAccount(), LedgerJournalACType::Vend, module ] : // filter is 'non-cust/vend', _trans is vend
                contragentOK = false;
                break;
            case [ "",      localLedgerJournalTrans.parmOffsetAccount(), localLedgerJournalTrans.OffsetAccountType,  module ] : // filter is 'non-cust/vend',
                                                                                           // _trans is neither cust nor vend
            case [ tmpCont, tmpCont, LedgerJournalACType::Cust, FactureModule_RU::TaxCorrectionSales      ] : // filter is 'cust/vend',
            case [ tmpCont, tmpCont, LedgerJournalACType::Vend, FactureModule_RU::TaxCorrectionPurch      ] : // _trans is cust/vend
            case [ tmpCont, tmpCont, LedgerJournalACType::Cust, FactureModule_RU::TaxCorrectionPurch_Cust ] : // filter is 'cust/vend',
            case [ tmpCont, tmpCont, LedgerJournalACType::Vend, FactureModule_RU::TaxCorrectionSales_Vend ] : // _trans is cust/vend
                contragentOK = true;
                break;
            default :
                contragentOK = false;
        }

        sign = book == FactureBook_RU::Purch ?
                 sign                        :
               - sign;

        return contragentOK                                            &&
               localLedgerJournalTrans.CurrencyCode == currencyCode    &&
               localLedgerJournalTrans.isTaxCorrection_RU(false) &&
               !localLedgerJournalTrans.fullyFactured_RU(true) &&
               (correction                               ||
               ((sign >= 0 &&   positiveControl.value()) ||
                (sign <= 0 && ! positiveControl.value())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlChangedAfter</Name>
				<Source><![CDATA[
    protected void contragentControlChangedAfter()
    {
        FormStringControl contragentCtrl, factureContragentCtrl;

        if (this.isCust())
        {
            contragentCtrl        = customerControl;
            factureContragentCtrl = factureCustomerControl;
        }
        else
        {
            contragentCtrl        = vendorControl;
            factureContragentCtrl = factureVendorControl;
        }
        factureContragentCtrl.enabled(contragentCtrl.enabled() && ! contragentCtrl.text());
        if (contragentCtrl.text())
        {
            factureContragentCtrl.text(contragentCtrl.text());
            this.contragentSec(contragentCtrl.text());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlOK</Name>
				<Source><![CDATA[
    protected boolean contragentControlOK()
    {
        str tmp;

        if (this.isCust())
        {
            tmp = factureCustomerControl.text();
        }
        else
        {
            tmp = factureVendorControl.text();
        }

        return tmp ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentFactureControlOK</Name>
				<Source><![CDATA[
    protected boolean contragentFactureControlOK()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
    public void contragentInit()
    {
        LedgerJournalTrans localLedgerJournalTrans;
        CustVendTrans custVendTrans;

        if (sourceRecord)
        {
            if (this.isCust())
            {
                if (sourceRecord.(fieldnum(LedgerJournalTrans, OffsetAccountType)) == LedgerJournalACType::Cust)
                {
                    localLedgerJournalTrans = sourceRecord as LedgerJournalTrans;
                    this.contragent(localLedgerJournalTrans.parmOffsetAccount());

                    contragentSec = this.contragent();
                    factureCustomerControl.enabled(false);
                }
                else
                {
                    custVendTrans = this.getCustVendTrans();

                    if (custVendTrans)
                    {
                        contragentSec = custVendTrans.AccountNum;
                    }
                    else
                    {
                        contragentSec = (select firstonly AccountNum from custTable order by AccountNum).AccountNum;
                    }
                }
            }
            else
            {
                if (sourceRecord.(fieldnum(LedgerJournalTrans, OffsetAccountType)) == LedgerJournalACType::Vend)
                {
                    localLedgerJournalTrans = sourceRecord as LedgerJournalTrans;
                    this.contragent(localLedgerJournalTrans.parmOffsetAccount());

                    contragentSec = this.contragent();
                    factureVendorControl.enabled(false);
                }
                else
                {
                    custVendTrans = this.getCustVendTrans();

                    if (custVendTrans)
                    {
                        contragentSec = custVendTrans.AccountNum;
                    }
                    else
                    {
                        contragentSec = (select firstonly AccountNum from vendTable order by AccountNum).AccountNum;
                    }
                }
            }
        }
        else
        {
            if (this.isCust())
            {
                this.contragent((select firstonly AccountNum from custTable order by AccountNum).AccountNum);
            }
            else
            {
                this.contragent((select firstonly AccountNum from vendTable order by AccountNum).AccountNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInitDefault</Name>
				<Source><![CDATA[
    public void contragentInitDefault()
    {
        if (this.isCust())
        {
            customerControl.text(contragent);
            factureCustomerControl.text(contragentSec);
            factureCustomerControl.enabled(! contragent);
            customerControl.enabled(! contragent);
        }
        else
        {
            vendorControl.text(contragent);
            factureVendorControl.text(contragentSec);
            factureVendorControl.enabled(! contragent);
            vendorControl.enabled(! contragent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaChanged</Name>
				<Source><![CDATA[
    public void criteriaChanged(boolean _clear = true)
    {
        super(_clear);

        ledgerJournalTableDS.executeQuery();
        ledgerJournalTransDS.executeQuery();
        this.buildTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCheck</Name>
				<Source><![CDATA[
    protected boolean dateCheck(TransDate _date,
                                RecId     _recId)
    {
        boolean            ret;

        select firstonly localTrans
            where localTrans.RecId     == _recId &&
                  localTrans.TransDate >  _date;

        if (localTrans.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRemove</Name>
				<Source><![CDATA[
    protected void dateRemove()
    {
        this.removeTrans(localTrans, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateSet</Name>
				<Source><![CDATA[
    public Set dateSet()
    {
        return transSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTable</Name>
				<Source><![CDATA[
    protected Common decodeTable(Common _journal)
    {
        LedgerJournalTable ret;
        RecId              recId = ledgerEngine ? ledgerEngine.decodeJour(_journal.RecId) : _journal.RecId;

        if (recId)
        {
            ret = LedgerJournalTable::findByRecId(recId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTableRecId</Name>
				<Source><![CDATA[
    protected RecId decodeTableRecId(RecId _recId)
    {
        return ledgerEngine ? ledgerEngine.decodeJour(_recId) : _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTrans</Name>
				<Source><![CDATA[
    protected Common decodeTrans(Common _trans)
    {
        LedgerJournalTrans ret;
        RecId              recId = ledgerEngine ? ledgerEngine.decodeTrans(_trans.RecId) : _trans.RecId;

        if (recId)
        {
            ret = LedgerJournalTrans::findRecId(recId, false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTransRecId</Name>
				<Source><![CDATA[
    protected RecId decodeTransRecId(RecId _recId)
    {
        return ledgerEngine ? ledgerEngine.decodeTrans(_recId) : _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveLedgTable</Name>
				<Source><![CDATA[
    public void dsActiveLedgTable()
    {
        LedgerJournalTable table = ledgerJournalTableDS.cursor();

        ledgerJournalTableDS.allowEdit(! table.facturedFully_RU(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveLedgTrans</Name>
				<Source><![CDATA[
    public void dsActiveLedgTrans()
    {
        LedgerJournalTrans trans = ledgerJournalTransDS.cursor();

        ledgerJournalTransDS.allowEdit(!trans.fullyFactured_RU(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteLedgTable</Name>
				<Source><![CDATA[
    public boolean dsExecuteLedgTable()
    {
        int purchBookLineSign = positiveControl.value() ? 1 : -1;
        boolean correction    = correctionTypeControl.selection()   != FactureCorrectionType_RU::Unknown &&
                                distributionTypeControl.selection() != TaxDistributionType_RU::None;

        currencyRange.value(currencyControl.text());
        factureDateRange.value(this.valueBeforeFactureDate());

        positiveControl.visible(! correction);

        if (correction)
        {
            transSignRange.value(SysQuery::valueUnlimited());
        }
        else
        {
            transSignRange.value(this.factureCreate().book() == FactureBook_RU::Purch ?
                                 int2str(purchBookLineSign) :
                                 int2str(- purchBookLineSign));
        }

        if (showJournalsControl.selection() == FactureEditLines_ShowJournals::Current)
        {
            journalNumRange.value(sourceRecord.(fieldnum(LedgerJournalTrans, JournalNum)));
        }
        else
        {
            journalNumRange.value(SysQuery::valueUnlimited());
        }

        this.initOffsetRanges(offsetAccountRange,
                              offsetAccountTypeRange);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteLedgTrans</Name>
				<Source><![CDATA[
    public boolean dsExecuteLedgTrans()
    {
        int purchBookLineSign = positiveControl.value() ? 1 : -1;
        boolean correction    = correctionTypeControl.selection()   != FactureCorrectionType_RU::Unknown &&
                                distributionTypeControl.selection() != TaxDistributionType_RU::None;

        currencyRangeSec.value(currencyControl.text());
        factureDateRangeSec.value(this.valueBeforeFactureDate());

        if (correction)
        {
            transSignRangeSec.value(SysQuery::valueUnlimited());
        }
        else
        {
            transSignRangeSec.value(this.factureCreate().book() == FactureBook_RU::Purch ?
                                    int2str(purchBookLineSign)                           :
                                    int2str(- purchBookLineSign));
        }

        this.initOffsetRanges(offsetAccountRangeSec,
                              offsetAccountTypeRangeSec);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitLedgTable</Name>
				<Source><![CDATA[
    public void dsInitLedgTable()
    {
        QueryBuildDataSource tmpDS;
        int                  callerRecordSign;
        FactureBook_RU       book = this.factureCreate().book();

        this.initLedgerEngine();
        ledgerEngine.setJour(ledgerJournalTableDS.cursor());
        ledgerEngine.process();

        tmpDS = ledgerJournalTableDS.query().dataSourceTable(tablenum(LedgerJournalTable));
        tmpDS.clearDynalinks();
        tmpDS.clearRanges();

        journalNumRange = tmpDS.addRange(fieldnum(LedgerJournalTable, JournalNum));
        journalNumRange.status(RangeStatus::Hidden);

    //    taxCorrectionJournalNum = sourceRecord.(fieldNum(LedgerJournalTrans, JournalNum));

        callerRecordSign = FactureEditLinesEngineTaxCorrection_RU::taxCorrectionSign(sourceRecord);

        positiveControl.value((book == FactureBook_RU::Purch && callerRecordSign > 0) ||
                              (book == FactureBook_RU::Sales && callerRecordSign < 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitLedgTrans</Name>
				<Source><![CDATA[
    public void dsInitLedgTrans()
    {
        QueryBuildDataSource tmpDS              = ledgerJournalTransDS.query().dataSourceTable(tablenum(LedgerJournalTrans));
        QueryBuildDataSource dimAccountDS       = ledgerJournalTransDS.query().dataSourceTable(tablenum(DimensionAttributeValueCombination), accountDs);
        QueryBuildDataSource dimOffsetAccountDS = ledgerJournalTransDS.query().dataSourceTable(tablenum(DimensionAttributeValueCombination), offsetAccountDs);

        tmpDS.clearRanges();

        dimAccountDS.joinMode(JoinMode::InnerJoin);
        dimOffsetAccountDS.joinMode(JoinMode::InnerJoin);

        this.initLedgerEngine();
        ledgerEngine.setTrans(ledgerJournalTransDS.cursor());
        ledgerEngine.process();

        factureDateRangeSec       = tmpDS.addRange(fieldnum(LedgerJournalTrans, TransDate));
        currencyRangeSec          = tmpDS.addRange(fieldnum(LedgerJournalTrans, CurrencyCode));
        transSignRangeSec         = tmpDS.addRange(fieldnum(LedgerJournalTrans, Qty));
        offsetAccountTypeRangeSec = tmpDS.addRange(fieldnum(LedgerJournalTrans, OffsetAccountType));

        offsetAccountRangeSec     = dimOffsetAccountDS.addRange(fieldNum(DimensionAttributeValueCombination, DisplayValue));
        offsetAccountRangeSec.value(SysQuery::valueNotEmptyString());

        factureDateRangeSec.status(RangeStatus::Hidden);
        currencyRangeSec.status(RangeStatus::Hidden);
        transSignRangeSec.status(RangeStatus::Hidden);
        offsetAccountRangeSec.status(RangeStatus::Hidden);
        offsetAccountTypeRangeSec.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitLedgTransExist</Name>
				<Source><![CDATA[
    public void dsInitLedgTransExist()
    {
        QueryBuildDataSource tmpDS              = ledgerJournalTransExistDS.query().dataSourceTable(tablenum(LedgerJournalTrans));
        QueryBuildDataSource dimAccountDS       = ledgerJournalTransDS.query().dataSourceTable(tablenum(DimensionAttributeValueCombination), accountDs);
        QueryBuildDataSource dimOffsetAccountDS = ledgerJournalTransDS.query().dataSourceTable(tablenum(DimensionAttributeValueCombination), offsetAccountDs);

        tmpDS.clearRanges();

        dimAccountDS.joinMode(JoinMode::InnerJoin);
        dimOffsetAccountDS.joinMode(JoinMode::InnerJoin);

        this.initLedgerEngine();
        ledgerEngine.setTransExists(ledgerJournalTransExistDS.cursor());
        ledgerEngine.process();

        factureDateRange       = tmpDS.addRange(fieldnum(LedgerJournalTrans, TransDate));
        currencyRange          = tmpDS.addRange(fieldnum(LedgerJournalTrans, CurrencyCode));
        transSignRange         = tmpDS.addRange(fieldnum(LedgerJournalTrans, Qty));
        offsetAccountTypeRange = tmpDS.addRange(fieldnum(LedgerJournalTrans, OffsetAccountType));

        offsetAccountRange     = dimOffsetAccountDS.addRange(fieldNum(DimensionAttributeValueCombination, DisplayValue));
        offsetAccountRange.value(SysQuery::valueNotEmptyString());

        findOrCreateRange_W(tmpDS, fieldnum(LedgerJournalTrans, Company), queryValue(curext()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalDateSameAsFactureDate</Name>
				<Source><![CDATA[
    protected boolean externalDateSameAsFactureDate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqCode</Name>
				<Source><![CDATA[
    public NumberSequenceCode extFactureIdNumSeqCode()
    {
        return LedgerParameters::numRefTaxCorrectionFacture_RU().numberSequenceTable().NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureCreate</Name>
				<Source><![CDATA[
    private FactureJourCreateTaxCorrection_RU factureCreate()
    {
        return factureCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>facturedTransMap</Name>
				<Source><![CDATA[
    protected Map facturedTransMap()
    {
        return facturedTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureType</Name>
				<Source><![CDATA[
    public FactureType_RU factureType()
    {
        return FactureType_RU::TaxCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJourByTrans</Name>
				<Source><![CDATA[
    protected void findJourByTrans(Common _trans)
    {
        LedgerJournalTrans localLedgerJournalTrans = _trans as LedgerJournalTrans;
        ;

        tmpJour = LedgerJournalTable::find(localLedgerJournalTrans.JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransByJour</Name>
				<Source><![CDATA[
    protected void findTransByJour(Common _table)
    {
        LedgerJournalTable localLedgerJournalTable = _table as LedgerJournalTable;
        InvoiceId          journal                 = localLedgerJournalTable.JournalNum;

        select tmpTrans
            where  tmpTrans.InvoiceNum == journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTrans</Name>
				<Source><![CDATA[
    private CustVendTrans getCustVendTrans()
    {
        CustVendTrans custVendTrans;

        if (sourceRecord.TableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans localLedgerJournalTrans = sourceRecord as LedgerJournalTrans;
            RefRecId custVendTransRecId = localLedgerJournalTrans.ledgerJournalTrans_W().OrigPaymRefRecId_RU;

            if (custVendTransRecId)
            {
                if (this.isCust())
                {
                    custVendTrans = CustTrans::find(custVendTransRecId);
                }
                else
                {
                    custVendTrans = VendTrans::find(custVendTransRecId);
                }
            }
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalFacture</Name>
				<Source><![CDATA[
    private FactureJour_Ru getOriginalFacture(CustVendTrans _custVendTrans)
    {
        FactureJour_Ru                      factureJour;
        CustTrans_W                         custTransW;
        VendTrans_W                         vendTransW;
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalTrans_W                ledgerJournalTransW;

        if (_custVendTrans.TableId == tableNum(CustTrans))
        {
            select firstonly FactureExternalId, FactureDate_External from factureJour
                where factureJour.Module == FactureModule_RU::Cust
            exists join custTransW
                where custTransW.PrepaymentFactureId_W == factureJour.FactureId
            exists join ledgerJournalTransW
                where ledgerJournalTransW.OrigPaymRefRecID_RU == custTransW.CustTrans
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransW.LedgerJournalTrans
                    && ledgerJournalTrans.CustTransId == _custVendTrans.RecId;
        }
        else
        {
            select firstonly FactureExternalId, FactureDate_External from factureJour
                where factureJour.Module == FactureModule_RU::Vend
            exists join vendTransW
                where vendTransW.PrepaymentFactureId_W == factureJour.FactureId
            exists join ledgerJournalTransW
                where ledgerJournalTransW.OrigPaymRefRecID_RU == vendTransW.VendTrans
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransW.LedgerJournalTrans
                    && ledgerJournalTrans.VendTransId == _custVendTrans.RecId;
        }

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionType</Name>
				<Source><![CDATA[
    public void initCorrectionType()
    {
        CustVendTrans custVendTrans = this.getCustVendTrans();

        if (custVendTrans)
        {
            correctionTypeControl.selection(FactureCorrectionType_RU::Correction);
            FactureJour_Ru factureJour = this.getOriginalFacture(custVendTrans);

            if (factureJour && formHasMethod(editLinesForm, identifierStr(setCorrectionFacture)))
            {
                Object editLinesFormObj = editLinesForm;
                editLinesFormObj.setCorrectionFacture(factureJour.FactureExternalId, factureJour.FactureDate_External);
            }

            this.includeTrans(true, sourceRecord, NoYes::Yes);
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExternalDate</Name>
				<Source><![CDATA[
    public void initExternalDate()
    {
        LedgerJournalTrans  tmp;

        select maxof(TransDate)
             from tmp
             where tmp.JournalNum == sourceRecord.(fieldnum(LedgerJournalTrans, JournalNum));

        factureDateExternalControl.dateValue(tmp.TransDate);
        factureDateExternalControl.allowEdit(false);

        sameAsControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureDate</Name>
				<Source><![CDATA[
    public void initFactureDate()
    {
        LedgerJournalTrans  tmp;

        select maxof(TransDate)
             from tmp
             where tmp.JournalNum == sourceRecord.(fieldnum(LedgerJournalTrans, JournalNum));

        factureDateControl.dateValue(tmp.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerEngine</Name>
				<Source><![CDATA[
    public void initLedgerEngine()
    {
        if (! ledgerEngine)
        {
            ledgerEngine = new FactureEditLinesLedgerEngine_RU(factureCreate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOffsetRanges</Name>
				<Source><![CDATA[
    private void initOffsetRanges(QueryBuildRange _accountRange,
                                  QueryBuildRange _accountTypeRange)
    {
        const str excl = '!';
        const str blank = ' ';
        str offsetAccount,
            offsetAccountType;

        if (this.isCust())
        {
            if (customerControl.text())
            {
                offsetAccount     = customerControl.text();
                offsetAccountType = SysQuery::value(LedgerJournalACType::Cust);
            }
        }
        else
        {
            if (vendorControl.text())
            {
                offsetAccount     = vendorControl.text();
                offsetAccountType = SysQuery::value(LedgerJournalACType::Vend);
            }
        }

        if (!offsetAccount)
        {
            offsetAccount     = SysQuery::valueUnlimited();
            offsetAccountType = excl + SysQuery::value(LedgerJournalACType::Vend) + comma + blank +
                                excl + SysQuery::value(LedgerJournalACType::Cust);
        }

        _accountRange.value(offsetAccount);
        _accountTypeRange.value(offsetAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPositive</Name>
				<Source><![CDATA[
    public void initPositive()
    {
        FactureJourCreateTaxCorrection_RU tmpFactureCreate = factureCreate;

        if (tmpFactureCreate.book() == FactureBook_RU::Purch)
        {
            positiveControl.helpText("@GLS102582");
        }
        else
        {
            positiveControl.helpText("@GLS111540");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceGroup</Name>
				<Source><![CDATA[
    public void initSourceGroup()
    {
        sourceGroupControl.caption("@SYS2163");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCust</Name>
				<Source><![CDATA[
    private boolean isCust()
    {
        boolean isCust;

        switch (factureCreate.module())
        {
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                isCust = false;
                break;
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                isCust = true;
                break;
            default                                        :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return isCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainDataSource</Name>
				<Source><![CDATA[
    protected FormDataSource mainDataSource()
    {
        return ledgerJournalTableDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun mainQueryRun()
    {
        return ledgerJournalTableDS.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _factureCreate)
    {
        super(_factureCreate);

        facturedTransMap = new Map(typeName2Type(extendedtypestr(recId)), Types::Enum);

        tmpJour   = new DictTable(tablenum(LedgerJournalTable)).makeRecord();
        localJour = new DictTable(tablenum(LedgerJournalTable)).makeRecord();
        tmpTrans  = new DictTable(tablenum(LedgerJournalTrans)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nillExternalFactureId</Name>
				<Source><![CDATA[
    protected void nillExternalFactureId()
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccount</Name>
				<Source><![CDATA[
    protected CustVendAC offAccount()
    {
        return this.contragentSec();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    protected OffReportType_RU offReportType()
    {
        return this.isCust()                              ?
               OffReportType_RU::TaxCorrectionFactureCust :
               OffReportType_RU::TaxCorrectionFactureVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFactureExternalIdControl</Name>
				<Source><![CDATA[
    #JmgConstants
    public void refreshFactureExternalIdControl()
    {
        boolean deletedFacturesExist;
        RecId   numberSequenceId = NumberSequenceTable::findByNaturalKey(this.extFactureIdNumSeqCode()).RecId;

        if (factureExternalIdControl)
        {
            switch (taxCorrectionContragentTypeControl.selection())
            {
                case FactureTaxCorrectionContragentType_RU::Customer :
                    deletedFacturesExist = NumberSequenceList::exist(numberSequenceId,
                                                                     NumStatus::Free);

                    factureExternalIdControl.enabled(deletedFacturesExist);

                    super();

                    factureExternalIdControl.lookupButton(deletedFacturesExist ?
                                                          #LOOKUP_ALWAYS :
                                                          #LOOKUP_NEVER);

                    if (deletedFacturesExist            &&
                        factureExternalIdControl.text() &&
                        ! NumberSequenceList::exist(numberSequenceId,
                                                    NumStatus::Free,
                                                    factureExternalIdControl.text()))
                    {
                        factureExternalIdControl.text("");
                    }
                    break;
                case FactureTaxCorrectionContragentType_RU::Vendor :
                    factureExternalIdControl.enabled(true);

                    super();

                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDS</Name>
				<Source><![CDATA[
    protected void researchDS()
    {
        ;
        FactureEditLinesEngine_RU::dsResearch(ledgerJournalTransDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleContragents</Name>
				<Source><![CDATA[
    public void setVisibleContragents()
    {
        boolean isCust = this.isCust();

        customerControl.visible(isCust);
        vendorControl.visible(! isCust);
        employeeControl.visible(false);

        factureCustomerControl.visible(isCust);
        factureCustomerControl.mandatory(isCust);
        factureVendorControl.visible(! isCust);
        factureVendorControl.mandatory(! isCust);

        taxCorrectionContragentTypeControl.visible(true);
        taxCorrectionContragentTypeControl.selection(isCust                                          ?
                                                     FactureTaxCorrectionContragentType_RU::Customer :
                                                     FactureTaxCorrectionContragentType_RU::Vendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    public void setVisibleControls()
    {
        creditNoteControl.visible(false);
        positiveControl.visible(false);
        showJournalsControl.visible(true);
        externalDateGroupControl.visible(true);
        factureExtIdNumSegGroupIdControl.visible(false);
        correctionGroupControl.visible(true);
        distributionTypeControl.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTabs</Name>
				<Source><![CDATA[
    public void setVisibleTabs()
    {
        custTabControl.visible(false);
        vendTabControl.visible(false);
        emplTabControl.visible(false);
        ledgTabControl.visible(true);
        addrTabPageControl.visible(isTableUserEnabled(tablenum(LogisticsPostalAddress), AccessType::View));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCorrectionContragentTypeChanged</Name>
				<Source><![CDATA[
    public void taxCorrectionContragentTypeChanged()
    {
        FormStringControl   contragentActive,  factureContragentActive,
                            contragentPassive, factureContragentPassive;
        Object              form = editLinesForm;

        this.factureCreate().contragentType(taxCorrectionContragentTypeControl.selection());

        if (this.isCust())
        {
            contragentActive         = customerControl;
            factureContragentActive  = factureCustomerControl;
            contragentPassive        = vendorControl;
            factureContragentPassive = factureVendorControl;
        }
        else
        {
            contragentActive         = vendorControl;
            factureContragentActive  = factureVendorControl;
            contragentPassive        = customerControl;
            factureContragentPassive = factureCustomerControl;
        }

        contragentActive.visible          (true);
        factureContragentActive.visible   (true);
        factureContragentActive.mandatory (true);
        contragentPassive.visible         (false);
        factureContragentPassive.visible  (false);

        this.contragentChanged();
        this.refreshFactureExternalIdControl();

        form.editCorrFactureExternalId(true, '');
        form.editCorrFactureDate(true, dateNull());
        form.initCorrFactureDisplay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transAmount</Name>
				<Source><![CDATA[
    protected Amount transAmount(CustVendInvoiceTrans _trans)
    {
        LedgerJournalTrans localLedgerJournalTrans = _trans;
        ;

        return localLedgerJournalTrans.amount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transHeaderName</Name>
				<Source><![CDATA[
    protected str transHeaderName()
    {
        return "@SYS24841";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transName</Name>
				<Source><![CDATA[
    protected str transName(CustVendInvoiceTrans _trans)
    {
        LedgerJournalTrans localLedgerJournalTrans = _trans;
        ;

        return strfmt("@GLS102571",
                      localLedgerJournalTrans.JournalNum,
                      localLedgerJournalTrans.Voucher,
                      localLedgerJournalTrans.TransDate,
                      localLedgerJournalTrans.parmAccount(),
                      localLedgerJournalTrans.parmOffsetAccount(),
                      localLedgerJournalTrans.amount(),
                      localLedgerJournalTrans.TaxCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControl</Name>
				<Source><![CDATA[
    protected FormTreeControl treeControl()
    {
        return ledgTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCorrectionSign</Name>
				<Source><![CDATA[
    public static int taxCorrectionSign(LedgerJournalTrans    _trans,
                                        TaxLedgerAccountGroup _taxGroup = TaxLedgerAccountGroup::find(TaxTable::find(_trans.TaxCode).TaxAccountGroup))
    {
        int                           ret;
        LedgerDimensionDefaultAccount defaultAccount       = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_trans.LedgerDimension);
        LedgerDimensionDefaultAccount offsetDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_trans.OffsetLedgerDimension);
        container                     checkPattern         = [ defaultAccount, offsetDefaultAccount ];

        // sttrictly in this order, because
        // D19.3 K68  is negative, while
        // D19.3 Kxxx is positive
        switch (checkPattern)
        {
            case [ _taxGroup.TaxOutgoingLedgerDimension,           offsetDefaultAccount                           ] :
                ret =   1;
                break;
            case [ defaultAccount,                                 _taxGroup.TaxOutgoingLedgerDimension           ] :
                ret = - 1;
                break;
            case [ _taxGroup.TaxIncomingPaymentLedgerDimension_RU, offsetDefaultAccount                           ] :
                ret =   1;
                break;
            case [ defaultAccount,                                 _taxGroup.TaxIncomingPaymentLedgerDimension_RU ] :
                ret = - 1;
                break;
            case [ _taxGroup.TaxIncomingLedgerDimension,           offsetDefaultAccount                           ] :
                ret =   1;
                break;
            case [ defaultAccount,                                 _taxGroup.TaxIncomingLedgerDimension           ] :
                ret = - 1;
                break;
        }

        if (_trans.amount() < 0)
        {
            ret = - ret;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>