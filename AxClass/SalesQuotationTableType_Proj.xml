<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTableType_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationTypeFactoryAttribute(QuotationType::Project)]
class SalesQuotationTableType_Proj extends SalesQuotationTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canQuotationBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> of type project can be posted.
    /// </summary>
    /// <returns>true if the project based quotation can be posted; otherwise, false.</returns>
    public boolean canQuotationBePosted()
    {
        return (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent
            || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised
            || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBeCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> of type project can be canceled.
    /// </summary>
    /// <param name = "_salesQuotationTable">A <c>SalesQuotationTable</c> record.</param>
    /// <returns>true if the project based quotation can be canceled; otherwise, false.</returns>
    public boolean canQuotationBeCanceled()
    {
        return (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent
            || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised)
            || (!salesQuotationTable.isTemplate() && salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBeSelected</Name>
				<Source><![CDATA[
    public boolean canQuotationBeSelected()
    {
        return salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
            || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised
            || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if delete is allowed for the quotation.
    /// </summary>
    /// <returns>
    /// true if the quotation can be deleted; otherwise, false.
    /// </returns>
    public boolean checkDelete()
    {
        // super() intentionally not called
        //ret = super();

        boolean ret = salesQuotationTable.QuotationStatus != SalesQuotationStatus::Sent &&
              salesQuotationTable.QuotationStatus != SalesQuotationStatus::Revised &&
              salesQuotationTable.QuotationStatus != SalesQuotationStatus::Submitted;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quotation can be updated.
    /// </summary>
    /// <param name="useWarning">
    /// Boolean value used to indicate if warning messages are displayed.
    /// </param>
    /// <returns>
    /// true if the quotation can be updated; otherwise, false.
    /// </returns>
    public boolean checkUpdate(boolean useWarning = true)
    {
        // Intentionally not calling super()
        //ret = super(useWarning);

        boolean ret = (salesQuotationTable ? true : false);

        if (ret && (!salesQuotationTable.isTemplate() &&
                     salesQuotationTable.QuotationStatus != SalesQuotationStatus::Created) &&
                   salesQuotationTable.QuotationStatus != SalesQuotationStatus::Revised  &&
                   salesQuotationTable.QuotationStatus != SalesQuotationStatus::Modified)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        salesQuotationTable.QuotationStatus         = SalesQuotationStatus::Created;
        salesQuotationTable.QuotationType           = QuotationType::Project;

        salesQuotationTable.ModelId                 = ProjParameters::find().ModelId;
        if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            salesQuotationTable.WorkerSalesResponsible = HcmWorkerLookup::currentWorker();

            // Default calendar--resource scheduling enhancement
            salesQuotationTable.psaSchedCalendarId  = PSAParameters::find().SchedDefaultCalendar;

            salesQuotationTable.psaEstProjStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            // Update psaEstProjStartDate to become a working date starting from current date.
            if (!WorkCalendarDate::isPickupDate(salesQuotationTable.PsaSchedCalendarId, salesQuotationTable.psaEstProjStartDate))
            {
                salesQuotationTable.psaEstProjStartDate	= WorkCalendar::findOpenDateForward(salesQuotationTable.PsaSchedCalendarId,
                                                                                    salesQuotationTable.psaEstProjStartDate,
                                                                                    DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
            }
            salesQuotationTable.psaEstProjEndDate   = salesQuotationTable.psaEstProjStartDate;
            salesQuotationTable.psaEstdProjDuration = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirm</Name>
				<Source><![CDATA[
    public QuotationDocNum lastConfirm()
    {
        CustQuotationConfirmSalesLink    custQuotationConfirmSalesLink;
        CustQuotationConfirmJour         custQuotationConfirmJour;

        select firstonly TableId from custQuotationConfirmSalesLink
                order by QuotationDate desc, QuotationConfirmId desc
                where custQuotationConfirmSalesLink.OrigQuotationId == salesQuotationTable.QuotationId
            join QuotationDocNum from custQuotationConfirmJour
                where custQuotationConfirmJour.QuotationConfirmId   == custQuotationConfirmSalesLink.QuotationConfirmId   &&
                      custQuotationConfirmJour.QuotationDate        == custQuotationConfirmSalesLink.QuotationDate &&
                      custQuotationConfirmJour.QuotationType        == QuotationType::Project;

        return custQuotationConfirmJour.QuotationDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastQuotation</Name>
				<Source><![CDATA[
    public SalesQuotationId lastQuotation()
    {
        CustQuotationSalesLink    custQuotationSalesLink;
        CustQuotationJour         custQuotationJour;

        select firstonly TableId from custQuotationSalesLink
                order by QuotationDate desc, QuotationId desc
                where custQuotationSalesLink.OrigQuotationId == salesQuotationTable.QuotationId
            join QuotationDocNum from custQuotationJour
                where custQuotationJour.QuotationId == custQuotationSalesLink.QuotationId   &&
                      custQuotationJour.QuotationDate   == custQuotationSalesLink.QuotationDate;

        return custQuotationJour.QuotationDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayCancelledBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the quotation can be cancelled.
    /// </summary>
    /// <param name="_includeCreated">
    /// Boolean value indicating if quotations in created status are included in the check.
    /// </param>
    /// <returns>
    /// true if the quotation can be updated to status of cancelled; otherwise, false.
    /// </returns>
    public boolean mayCancelledBeUpdated(boolean _includeCreated = false)
    {
        boolean ret;

        // super() intentionally not called
        //ret = super(_includeCreated);

        if ((salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent ||
             salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised) ||
            (_includeCreated && !salesQuotationTable.isTemplate() && salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created))
        {
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConvert2Customer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quotation can be updated from an opportunity to a customer.
    /// </summary>
    /// <returns>
    /// true if the quotation can be updated to a customer quotation; otherwise, false.
    /// </returns>
    public boolean mayConvert2Customer()
    {
        // super() intentionally not called
        //ret = super();

        boolean ret = ((salesQuotationTable.BusRelAccount && !salesQuotationTable.CustAccount) &&
               (!salesQuotationTable.isTemplate() &&
               (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created  ||
                salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent     ||
                salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised)));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayLinkToProjectBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the link or transfer to project buttons can be enabled.
    /// </summary>
    /// <returns>
    /// true if the button can be enabled; otherwise, false.
    /// </returns>
    boolean mayLinkToProjectBeUpdated()
    {
        boolean ok = true;

        //
        // The "Link or Transfer to Project" button should be enabled only when
        // 1. Quotation status is Confirmed and
        // 2. If there is project associated with quotation, item requirements and forecast is enabled in the parameter then consider the values of TransferredToForecast & TransferredToItemReq.
        //
        ok = salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed;

        if (ok)
        {
            boolean createItemRequiremntAllowed = true;
            boolean createForeCastAllowed = true;

            if (salesQuotationTable.ProjIdRef)
            {
                ProjTable projTable = ProjTable::find(salesQuotationTable.ProjIdRef);
                createItemRequiremntAllowed = ProjStatusTypeRule::exist(projTable.Status, projTable.Type, ProjStatusRule::CreateItemTask);
                createForeCastAllowed = ProjStatusTypeRule::exist(projTable.Status, projTable.Type, ProjStatusRule::CreateForecast);
            }

            if (createItemRequiremntAllowed && createForeCastAllowed)
            {
                ok = !(salesQuotationTable.TransferredToForecast && salesQuotationTable.TransferredToItemReq);
            }
            else if (createItemRequiremntAllowed && !createForeCastAllowed)
            {
                ok = !salesQuotationTable.TransferredToItemReq;
            }
            else
            {
                ok = !salesQuotationTable.TransferredToForecast;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayLostBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quotation can be updated as lost.
    /// </summary>
    /// <returns>
    /// true if the quotation can be updated to status of lost; otherwise, false.
    /// </returns>
    public boolean mayLostBeUpdated()
    {
        // Super intentianally not called
        //ret = super();

        boolean ret = ((salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent) ||
               (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check whether the quotation can be linked as an alternate quote.
    /// </summary>
    /// <returns>
    ///     true if the quotation can be linked as an alternate quotation; otherwise, false.
    /// </returns>
    public boolean mayQuotationBeLinked()
    {
        // super() intentionally not called
        //ret = super();

        boolean ret = (!salesQuotationTable.isTemplate() &&
                (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created ||
                 salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent    ||
                 salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup _taxGroup)
    {
        if (salesQuotationTable.ProjIdRef)
        {
            super(ProjParameters::taxGroupInvoice(salesQuotationTable.ProjIdRef));
        }
        else
        {
            super(_taxGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        SalesQuotationTable salesQuotationTableOrig = salesQuotationTable.orig();

        boolean plannedDatesChanged     = (salesQuotationTable.psaEstProjStartDate != salesQuotationTableOrig.psaEstProjStartDate)
                                          || (salesQuotationTable.psaEstProjEndDate != salesQuotationTableOrig.psaEstProjEndDate);
        boolean durationChanged         = (salesQuotationTable.psaEstdProjDuration != salesQuotationTableOrig.psaEstdProjDuration);

        if (plannedDatesChanged || durationChanged)
        {
            HierarchyTreeTable_Extension::projSetRootTaskScheduleAttributes(salesQuotationTable.RecId,
                                                                  tableNum(SalesQuotationTable),
                                                                  0,
                                                                  salesQuotationTable.psaEstProjStartDate,
                                                                  salesQuotationTable.psaEstProjEndDate,
                                                                  salesQuotationTable.psaEstdProjDuration);
        }

        boolean nameChanged             = (salesQuotationTable.QuotationName   != salesQuotationTableOrig.QuotationName);

        if (nameChanged)
        {
            HierarchyTreeTable_Extension::projSetHierarchyRootTaskName(salesQuotationTable.RecId, salesQuotationTable.QuotationName, tableNum(SalesQuotationTable));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateDeleteLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the validateDelete must be performed on the specified line.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    /// A sales quotation line record.
    /// </param>
    /// <returns>
    /// true if the validateDelete must be performed; otherwise false.
    /// </returns>
    protected boolean mustValidateDeleteLine(SalesQuotationLine _salesQuotationLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean                         ok          = true;
        SalesQuotationLine              salesQuotationLine;
        SalesQuotationDeliverySchedule  salesQuotationDeliverySchedule;

        while select salesQuotationLine where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
            notexists join salesQuotationDeliverySchedule
                where salesQuotationDeliverySchedule.OrderLine == salesQuotationLine.InventTransId

        {
			if (this.mustValidateDeleteLine(salesQuotationLine))
			{
				if (!salesQuotationLine.validateDelete())
				{
					ok = false;
					break;
				}
			}
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field value for project sales quotations.
    /// </summary>
    /// <param name="fieldId">
    /// The ID of the field being changed.
    /// </param>
    /// <returns>
    /// true if the change is valid; false otherwise.
    /// </returns>
    public boolean validateField(FieldId fieldId)
    {
        SalesQuotationLine  quotationLine;

        boolean ret = super(fieldId);

        switch (fieldId)
        {
            case fieldNum(SalesQuotationTable, psaEstProjStartDate):
                select firstonly RecId from quotationLine
                    where quotationLine.QuotationId == salesQuotationTable.QuotationId
                       && quotationLine.TransDate
                       && quotationLine.TransDate < salesQuotationTable.psaEstProjStartDate;

                if (quotationLine.RecId)
                {
                    ret = checkFailed("@SYS4009416");
                }
                break;

            case fieldNum(SalesQuotationTable, psaEstProjEndDate):
                select firstonly RecId from quotationLine
                    where quotationLine.QuotationId == salesQuotationTable.QuotationId
                       && quotationLine.TransDate
                       && quotationLine.TransDate > salesQuotationTable.psaEstProjEndDate;

                if (quotationLine.RecId)
                {
                    ret = checkFailed("@SYS4009417");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesQuotationTableType::construct() instead.', false, 31\05\2017)]
    static SalesQuotationTableType construct(SalesQuotationTable _salesQuotationTable)
    {
        return new SalesQuotationTableType_Proj(_salesQuotationTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>