<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalApproval_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Approves the ledger journal for china.
/// </summary>
class LedgerJournalApproval_CN extends RunBase
{
    private const str FeatureReference = 'CN-00002';

    NoYes                   createdByOthers;
    LedgerJournalId         journalNum;
    userId                  user;
    DialogRunbase           dialogRunbase;
    QueryRun                queryRun;
    boolean                 isSelected;
    FormRun                 callerForm;
    DialogField             dialogJournalNum;
    DialogField             dialogUserId;
    DialogField             dialogCreatedByOthers;
    QueryBuildDataSource    qbdLedgerJournal, qbdLedgerJournalTrans, qbdLedgerVoucherType_CN;
    QueryBuildRange         qbrUserId;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
            createdByOthers
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    private void buildQueryRun()
    {
        Query                   query;
        DictRelation            dr;

        isSelected            = true;
        query                 = new Query();
        dr                    = new DictRelation(tablenum(LedgerJournalTrans));
        dr.loadTableRelation(tablenum(LedgerJournalTable));

        qbdLedgerJournal      = query.addDataSource(tablenum(LedgerJournalTable));
        qbdLedgerJournalTrans = qbdLedgerJournal.addDataSource(tablenum(LedgerJournalTrans));
        qbdLedgerVoucherType_CN = qbdLedgerJournalTrans.addDataSource(tablenum(LedgerVoucherType_CN));
        qbdLedgerJournalTrans.addRelation(dr);
        qbdLedgerVoucherType_CN.addLink(fieldnum(LedgerJournalTrans, LedgerVoucherType_CN),
            fieldnum(LedgerVoucherType_CN, RecId));

        qbdLedgerJournal.addRange(fieldnum(LedgerJournalTable, JournalNum)).value(journalNum);

        qbrUserId             = qbdLedgerJournal.addRange(fieldnum(LedgerJournalTable, ReportedAsReadyBy));
        qbrUserId.value(user);

        qbdLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, JournalNum)).status(RangeSTatus::Hidden);
        qbdLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, Voucher));

        qbdLedgerVoucherType_CN.addRange(fieldnum(LedgerVoucherType_CN, Id));
        queryRun              = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();

        dialog.caption("@GLS54517");
        dialogCreatedByOthers = dialog.addField(extendedtypestr(NoYesId), "@GLS54525", "@GLS54518");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayApprovalResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the approval result.
    /// </summary>
    /// <param name="_qtyOfApproval">
    /// The number of approval accounts.
    /// </param>
    /// <param name="_qtyCreatedByOthers">
    /// The number of result created by others.
    /// </param>
    public void displayApprovalResult(Counter _qtyOfApproval, Counter _qtyCreatedByOthers)
    {
        if (LedgerParameters::find().BarSelfApproval_CN
            && createdByOthers == NoYes::No
            && _qtyCreatedByOthers > 0
            && isSelected)
        {
            info(strfmt("@GLS54519", _qtyOfApproval, _qtyCreatedByOthers));
        }
        else
        {
            info(strfmt("@GLS54520", _qtyOfApproval));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        createdByOthers = dialogCreatedByOthers.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(LedgerJournalId _journalNum, userId _userId)
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        journalNum = _journalNum;
        user       = _userId;
        isSelected = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerJournalTable  ledgerJrTblForUpdate;
        LedgerJournalTable  ledgerJournalTableCopy;
        LedgerParameters    ledgerParameters;
        Counter             totalQty;
        Counter             qtyOfNotReady;

        ledgerParameters = LedgerParameters::find();
        if (isSelected)
        {
            ttsbegin;
            while (queryRun.next())
            {
                if (queryRun.changed(tablenum(LedgerJournalTable)))
                {
                    ledgerJournalTableCopy = queryRun.get(tablenum(LedgerJournalTable));
                    ledgerJrTblForUpdate = LedgerJournalTable::find(ledgerJournalTableCopy.JournalNum, true);

                    if (ledgerJrTblForUpdate.ledgerJournalTable_W().ApprovalStatus_CN == LedgerApprovalStatus_CN::Ready)
                    {
                        if (createdByOthers == NoYes::Yes
                            && ledgerJrTblForUpdate.ReportedAsReadyBy == curuserid())
                        {
                            continue;
                        }
                        totalQty++;

                        if (ledgerJrTblForUpdate.ReportedAsReadyBy == curuserid()
                            && ledgerParameters.BarSelfApproval_CN)
                        {
                            qtyOfNotReady++;
                        }
                        else
                        {
                            ledgerJrTblForUpdate.markApproved();
                            ledgerJrTblForUpdate.update();
                        }
                    }
                }
            }
            ttscommit;
        }
        else
        {
            ttsbegin;
            ledgerJrTblForUpdate = LedgerJournalTable::find(journalNum, true);
            if (ledgerParameters.BarSelfApproval_CN == NoYes::No
                || ledgerJrTblForUpdate.ReportedAsReadyBy   != curuserid())
            {
                ledgerJrTblForUpdate.markApproved();
                ledgerJrTblForUpdate.update();
                totalQty++;
            }
            ttscommit;
        }

        this.displayApprovalResult(totalQty - qtyOfNotReady, qtyOfNotReady);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets table buffer.
    /// </summary>
    /// <param name="_args">
    /// The args information.
    /// </param>
    /// <returns>
    /// The instance of the <c>Common</c> class.
    /// </returns>
    protected static Common getTableBuffer(Args _args)
    {
        FormRun                     callerForm;
        Common                      common;

        common      = _args.record();
        callerForm  = _args.caller();

        if (!callerForm)
        {
            throw error(strfmt("@SYS22828", funcname()));
        }

        if (!common.RecId)
        {
            if (callerForm && callerForm.args() && callerForm.args().dataset() && callerForm.args().record().RecId)
            {
                common = callerForm.args().record();
            }
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        Common                      common;
        LedgerJournalTable          ledgerJournalTable;
        LedgerJournalTable          ledgerJournalTableCopy;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalApproval_CN    cjaLedgerJournalApproval;

        common = LedgerJournalApproval_CN::getTableBuffer(args);
        if (common.RecId)
        {
            switch (common.TableId)
            {
                case tablenum(LedgerJournalTable) :
                    ledgerJournalTable       = common;
                    cjaLedgerJournalApproval = new LedgerJournalApproval_CN(ledgerJournalTable.JournalNum, ledgerJournalTable.ReportedAsReadyBy);
                    break;
                case tablenum(LedgerJournalTrans) :
                    ledgerJournalTrans       = common;
                    ledgerJournalTableCopy   = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
                    cjaLedgerJournalApproval = new LedgerJournalApproval_CN(ledgerJournalTrans.JournalNum, ledgerJournalTableCopy.ReportedAsReadyBy);
                    break;
                default:
                    break;
            }
        }

        cjaLedgerJournalApproval.buildQueryRun();

        if (cjaLedgerJournalApproval.prompt())
        {
            cjaLedgerJournalApproval.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>