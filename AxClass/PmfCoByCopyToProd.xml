<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoByCopyToProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Co/By copy destination for copying to a batch order.
/// </summary>
public class PmfCoByCopyToProd extends PmfCoByCopyTo
{
    ProdId      toProdId;

    ProdTable   prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the from Co/By records to this destination.
    /// </summary>
    /// <param name="_copyFrom">Formula Co/By copy source parameters.</param>
    /// <param name="_search">Formula Co/By copy search.</param>
    /// <param name="_toPmfProdCoByProduct">Production Co/By destination record.</param>
    /// <param name="_copyRef">Specify if the references are also to be copied. Default is false.</param>
    public void copyTo(
        PmfCoByCopyFrom     _copyFrom,
        PmfCoBySearchBase   _search,
        PmfCoByMap          _toPmfProdCoByProduct,
        boolean             _copyRef = false)
    {
        PmfProdCoBy             toPmfProdCoByProduct    = _toPmfProdCoByProduct;
        PmfCoByMap              fromCoByMap             = _search.coBy();
        InventTable             inventTable             = InventTable::find(fromCoByMap.ItemId);
        InventDim               fromInventDim           = fromCoByMap.inventDim();
        InventDim               inventDim;

        toPmfProdCoByProduct.initFromProdTable(prodTable);
        _copyFrom.initToPmfProdCoBy(toPmfProdCoByProduct, _copyRef);
        toPmfProdCoByProduct.ProdId = toProdId;

        // Copy only item dimensions
        inventDim.copyPrimaryDim(InventDimGroupSetup::newItemId(inventTable.ItemId), fromInventDim);

        // Handle inventLocationId seperately
        if (! inventDim.InventLocationId && fromInventDim.InventLocationId)
        {
            inventDim.InventLocationId = fromInventDim.InventLocationId;
        }

        if (!inventDim.InventLocationId)
        {
            inventDim.InventSiteId = fromInventDim.InventSiteId;
        }

        // Default warehouse
        if (! inventDim.InventLocationId)
        {
            inventDim.InventLocationId = inventTable.inventLocationId('', InventDim::findOrCreate(inventDim).InventDimId, inventDim.InventSiteId);
        }

        // BP to initialize
        if (inventDim.InventLocationId)
        {
            inventDim.initFromInventLocation(inventDim.inventLocation());
        }

        toPmfProdCoByProduct.setInventDimIdFromInventDim(inventDim);

        toPmfProdCoByProduct.DefaultDimension  = toPmfProdCoByProduct.copyDimension(prodTable.DefaultDimension);

        super(_copyFrom,_search, toPmfProdCoByProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default Co/By record that is to be set.
    /// </summary>
    /// <returns>The default Co/By record to be set.</returns>
    public PmfCoByMap defaultCoBy()
    {
        PmfProdCoBy coBy;

        return coBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the Co/By records from the destination production.
    /// </summary>
    public void delete()
    {
        PmfProdCoBySearch search;

        ttsbegin;

        search  = PmfProdCoBySearch::newProdId(toProdId,true);

        while (search.next())
        {
            if (!search.coBy().validateDelete())
            {
                throw error("@SYS18722");
            }

            search.coBy().delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard protected new.
    /// </summary>
    /// <param name="_toId">Production order identifier for the copy destination.</param>
    protected void new(
        ProdId          _toId)
    {
        toProdId    = _toId;

        prodTable   = ProdTable::find(toProdId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static constructor to create the base instance of PmfCoByCopyToProd.
    /// </summary>
    /// <param name="_prodId">Batch order identifier for the copy destination.</param>
    /// <returns>returns instance</returns>
    public static PmfCoByCopyToProd construct(ProdId _prodId)
    {
        return new PmfCoByCopyToProd(_prodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMRouteCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Special static constructor to create an instance of PmfCoByCopyToProd from copy parameters.
    /// </summary>
    /// <param name="_bomRouteCopy">Formula copy parameters.</param>
    /// <returns>returns instance</returns>
    public static PmfCoByCopyToProd newBOMRouteCopy(
        BOMRouteCopyJob _bomRouteCopy)
    {
        PmfCoByCopyToProd   pmfCoByCopyToProd;

        pmfCoByCopyToProd = PmfCoByCopyToProd::construct(
            _bomRouteCopy.parmToProdId());

        return pmfCoByCopyToProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Special static constructor to create an instance of PmfCoByCopyToProd from a batch order id.
    /// </summary>
    /// <param name="_prodId">Batch order identifier for the copy destination.</param>
    /// <returns>returns instance</returns>
    public static PmfCoByCopyToProd newProdSplit(ProdId  _prodId)
    {
        PmfCoByCopyToProd   pmfCoByCopyToProd;

        pmfCoByCopyToProd = PmfCoByCopyToProd::construct(_prodId);

        return pmfCoByCopyToProd;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>