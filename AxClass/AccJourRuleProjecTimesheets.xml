<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleProjecTimesheets</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An accounting journalizing rule for project timesheets source document.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjectTimesheets), BusinessEvent_ProjectTimesheets::ProjectTimesheetPosting, MonetaryAmount::ExtendedPrice)]
public class AccJourRuleProjecTimesheets extends AccountingJournalizingRule
{
    TSTimesheetLine tsTimesheetLine;
    TSTimesheetTrans tsTimesheetTrans;
    TSTimesheetTable tsTimesheetTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account to use to enter a subledger journal entry.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    /// The default ledger dimension.
    /// </param>
    /// <param name="_accountingDistributionLedgerDimension">
    /// The accounting distribution ledger dimension.
    /// </param>
    /// <returns>
    /// A <c>LedgerDimensionAccount</c> object.
    /// </returns>
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        return LedgerDimensionFacade::serviceMergeLedgerDimensions(_defaultLedgerDimension, _accountingDistributionLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        RefRecId                        sourceDocLineTSTrans;
        TSTimesheetLineWeek             tsTimesheetLineWeek;

        super();

        sourceDocLineTSTrans = sourceDocumentLineItem.parmSourceDocumentLine().RecId;

        tsTimesheetTrans = TSTimesheetTrans::findBySourceDocumentLine(sourceDocLineTSTrans);
        tsTimesheetLineWeek = TSTimesheetLineWeek::findRecId(tsTimesheetTrans.tsTimesheetLineWeek);
        tsTimesheetLine = TSTimesheetLine::findRecId(tsTimesheetLineWeek.tsTimesheetLine);
        tsTimesheetTable = TSTimesheetTable::find(tsTimesheetLine.TimesheetNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        return LedgerPostingType::ProjPayrollAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        if (this.parmAmount() >= 0)
        {
            return DebitCredit::Credit;
        }
        else
        {
            return DebitCredit::Debit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummarize</Name>
				<Source><![CDATA[
    public boolean parmSummarize()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>