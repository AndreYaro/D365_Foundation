<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentPurchOrderUpdateAggregator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentPurchOrderUpdateAggregator</c> class is responsible for the aggregation of
///    kanban jobs that are assigned to a purchase line.
/// </summary>
class LeanDocumentPurchOrderUpdateAggregator extends LeanDocumentPurchaseOrderAggregator
{
    KanbanJob   filterKanbanJob;
    boolean     skipFilterJob;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSourceRecordToLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a source record from the current data provider to the document line.
    /// </summary>
    /// <param name="_line">
    ///    The document line to which the source record is added.
    /// </param>
    /// <remarks>
    ///    As part of adding the source record, some data is aggregated.
    /// </remarks>
    protected void addSourceRecordToLine(LeanDocumentProcessingDataLine _line)
    {
        KanbanJobPurchaseLine   kanbanJobPurchaseLine = currentProvider.getCurrentRecord(tablenum(KanbanJobPurchaseLine));
        Map                     additionalLineValues = _line.parmAdditionalValues();

        Debug::assert(kanbanJobPurchaseLine.RecId != 0);

        // we should not add the filter job to the source records list if we need to filter it out
        if (!skipFilterJob
            || currentKanbanJob.RecId != filterKanbanJob.RecId)
        {
            // do the standard processing (date, qty, unit and source record handling)
            super(_line);
        }

        // store the purchase line for further usage
        if (kanbanJobPurchaseLine.RecId != 0
            && !additionalLineValues.exists(tablenum(PurchLine)))
        {
            PurchLine tempPurchLine = PurchLine::findInventTransId(kanbanJobPurchaseLine.PurchLineInventTransId);
            additionalLineValues.insert(tablenum(PurchLine), tempPurchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentPurchOrderUpdateAggregator otherAggregator = otherObject as LeanDocumentPurchOrderUpdateAggregator;

        return  otherObject == this
                || (otherAggregator != null
                    && this.parmSkipFilterJob() == otherAggregator.parmSkipFilterJob()
                    && super(otherAggregator)) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterKanbanJob</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJob parmFilterKanbanJob(KanbanJob _filterKanbanJob = filterKanbanJob)
    {
        filterKanbanJob = _filterKanbanJob;

        return filterKanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipFilterJob</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmSkipFilterJob(boolean _skipFilterJob = skipFilterJob)
    {
        skipFilterJob = _skipFilterJob;

        return skipFilterJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes the default factory method for the
    ///    <c>LeanDocumentPurchOrderUpdateAggregator</c> class.
    /// </summary>
    /// <param name="_aggregationMode">
    ///    The aggregation mode.
    /// </param>
    /// <param name="_filterKanbanJob">
    ///    The aggregation mode.
    /// </param>
    /// <param name="_skipFilterKanbanJob">
    ///    A Boolean value that indicates whether the filter job is to be skipped during the aggregation of
    ///    data.
    /// </param>
    /// <returns>
    ///    An instance of <c>LeanDocumentPurchOrderUpdateAggregator</c> .
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentPurchOrderUpdateAggregator newStandard(
        LeanDocumentLinesAggregationMode    _aggregationMode,
        KanbanJob                           _filterKanbanJob,
        boolean                             _skipFilterKanbanJob = true)
    {
        LeanDocumentPurchOrderUpdateAggregator result = new LeanDocumentPurchOrderUpdateAggregator(_aggregationMode, Types::Int64);
        result.parmFilterKanbanJob(_filterKanbanJob);
        result.parmSkipFilterJob(_skipFilterKanbanJob);
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
