<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_ES</c> class extends the functionality of the 
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to Spain.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoES)]
public class EuSalesListReportingEngine_ES extends EUSalesListReportingEngine implements BatchRetryable
{
    DialogField                         dialogChangeInPeriodicity;
    DialogField                         dialogCorrectionType;
    DialogField                         dialogCorrectedDeclaration;
    DialogField                         dialogDocumentNumber;
    DialogGroup                         dialogGroupCorrection;
    DialogField                         dialogPresentationType;
    DialogField                         dialogContactPerson;

    EUSalesListCorrectionType_ES        correctionType;
    EUSalesListDocumentNumber_ES        documentNumber;
    EUSalesListPresentationType_ES      presentationType;
    EUSalesListCorrectedDeclaration_ES  correctedDeclaration;
    NoYes                               changeInPeriodicity;
    ContactPersonId                     contactPersonId;
    EUSalesListReportingLine            euSalesListReportingLineCorrection;
    EUSalesListReportingGroup           euSalesListReportingGroup;
    EUSalesListReportingHeader          euSalesListReportingHeader;
    Line                                lineCountCorrections;
    EUSalesListReportingLine            euSalesListReportingLinesByDeliveryCode;
    int                                 lineCountNonTriangularItemSale;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        correctionType,
        documentNumber,
        presentationType,
        correctedDeclaration,
        changeInPeriodicity,
        contactPersonId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingGroup</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The reference to the header record to which the group belongs.
    /// </param>
    /// <returns>
    /// A <c>EUSalesListReportingGroup</c> table buffer.
    /// </returns>
    protected EUSalesListReportingGroup addGroup(RefRecId _euSalesListReportingHeaderRecId)
    {
        //cache the group buffer
        euSalesListReportingGroup = super(_euSalesListReportingHeaderRecId);
        return euSalesListReportingGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingHeader</c> table.
    /// </summary>
    /// <returns>
    /// A <c>EUSalesListReportingHeader</c> table buffer.
    /// </returns>
    protected EUSalesListReportingHeader addHeader()
    {
        euSalesListReportingHeader = super();

        euSalesListReportingHeader.euSalesListCorrectedDeclaration_ES   = correctedDeclaration;
        euSalesListReportingHeader.euSalesListCorrectionType_ES         = correctionType;
        euSalesListReportingHeader.euSalesListDocumentNumber_ES         = documentNumber;
        euSalesListReportingHeader.euSalesListPresentationType_ES       = presentationType;
        euSalesListReportingHeader.ChangeInPeriodicity_ES               = changeInPeriodicity;
        euSalesListReportingHeader.ContactPersonId                      = contactPersonId;
        euSalesListReportingHeader.update();

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingLine</c> table and inserts
    /// corresponding line amounts into the <c>EUSalesListReportingLineAmount</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingGroupRecId">
    /// The reference to the group record to which the line belongs.
    /// </param>
    /// <returns>
    /// A <c>EUSalesListReportingLine</c> table buffer.
    /// </returns>
    /// <remarks>
    /// This method overrides the base method in order to handle the special case of Spanish correction
    /// lines.Correction lines are created separately for Spain. Therefore, the typical lines that are
    /// created in the base method do not have the correction field set.
    /// </remarks>
    protected EUSalesListReportingLine addLine(RefRecId _euSalesListReportingGroupRecId)
    {
        EUSalesListReportingLine euSalesListReportingLine;
        EUSalesList euSalesList;

        euSalesList = queryRun.get(tableNum(EUSalesList));

        euSalesListReportingLine           = super(_euSalesListReportingGroupRecId);
        euSalesListReportingLine.Corrected = NoYes::No;

        euSalesListReportingLine.DeliveryCode_ES = euSalesList.DeliveryCode_ES;

        //For sales of items, use temp table to store up to 3 records (for each of the 3 types of Deliverycodes: E, H or M).
        if (this.isItemAmount(euSalesList)
            && euSalesList.Corrected == NoYes::No
            && euSalesList.Direction == ModuleSalesPurch::Sales)
        {
            lineCountNonTriangularItemSale ++;

            // initialize first record of the temp table. The other lines (if exist) will be added in updateLineAmounts method.
            euSalesListReportingLinesByDeliveryCode.data(this.initializeLine(euSalesListReportingGroup.RecId));
            euSalesListReportingLinesByDeliveryCode.doInsert();
        }

        return euSalesListReportingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drives the calculation and preparation of data for correction lines.
    /// </summary>
    /// <returns>
    /// The record ID of the <c>EUSalesListReportingHeader</c> table.
    /// </returns>
    /// <remarks>
    /// The correction lines must be included separately from typical transaction lines. A temporary buffer
    /// is filled with correction lines and then appended to the main dataset in the end.
    /// </remarks>
    public RefRecId calculate()
    {
        RefRecId                  euSalesListReportingHeaderRecIdLocal;
        EUSalesListReportingLine  euSalesListReportingLine;
        euSalesListReportingLineCorrection.setTmp();

        //call super() to perform the calculation for normal transaction lines and fill the temporary dataset for corrections
        euSalesListReportingHeaderRecIdLocal = super();

        //Add correction lines to the main dataset
        this.addCorrectedData(
            euSalesListReportingLineCorrection,
            euSalesListReportingLine);

        return euSalesListReportingHeaderRecIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGrandTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the totals in the header.
    /// </summary>
    /// <param name="_euSalesListReportingHeader">
    /// The <c>EUSalesListReportingHeader</c> table buffer.
    /// </param>
    protected void calculateGrandTotals(EUSalesListReportingHeader _euSalesListReportingHeader)
    {
        super(_euSalesListReportingHeader);
        _euSalesListReportingHeader.LineCountCorrections_ES = lineCountCorrections;
        _euSalesListReportingHeader.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionType_Modified</Name>
				<Source><![CDATA[
    public boolean correctionType_Modified(FormComboBoxControl _formControl)
    {
        boolean             ret = _formControl.modified();
        correctionType      = dialogCorrectionType.value();

        if (ret && correctionType != EUSalesListCorrectionType_ES::None)
        {
            dialogCorrectedDeclaration.enabled(true);
        }
        else
        {
            dialogCorrectedDeclaration.value(0);
            dialogCorrectedDeclaration.enabled(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();
        dialog.curFormGroup(dialogGroupDate.formGroup());
        dialogChangeInPeriodicity = dialog.addFieldValue(enumStr(NoYes), changeInPeriodicity, "@SYS335872");

        //export options
        dialog.curFormGroup(dialogGroupExportOptions.formGroup());
        dialogDocumentNumber   = dialog.addFieldValue(extendedTypeStr(EUSalesListDocumentNumber_ES), documentNumber);
        dialogContactPerson    = dialog.addFieldValue(extendedTypeStr(ContactPersonId), contactPersonId);
        dialogPresentationType = dialog.addFieldValue(enumStr(EUSalesListPresentationType_ES), presentationType);

        //correction
        dialogGroupCorrection      = dialog.addGroup("@SYS4768");
        dialogCorrectionType       = dialog.addFieldValue(enumStr(EUSalesListCorrectionType_ES), correctionType, "@SYS4768");
        dialogCorrectedDeclaration = dialog.addFieldValue(extendedTypeStr(EUSalesListCorrectedDeclaration_ES), correctedDeclaration, "@SYS99806");
        dialogCorrectedDeclaration.enabled(correctionType != EUSalesListCorrectionType_ES::None);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();

        documentNumber       = dialogDocumentNumber.value();
        contactPersonId      = dialogContactPerson.value();
        presentationType     = dialogPresentationType.value();
        correctionType       = dialogCorrectionType.value();
        correctedDeclaration = dialogCorrectedDeclaration.value();
        changeInPeriodicity  = dialogChangeInPeriodicity.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a record of the <c>EUSalesListReportingLine</c> table with ES specific functionality.
    /// </summary>
    /// <param name="_euSalesListReportingGroupRecId">
    ///     The reference to the group record to which the line belongs.
    /// </param>
    /// <returns>
    ///     A <c>EUSalesListReportingLine</c> table buffer.
    /// </returns>
    /// <remarks>
    ///     Correction lines are created separately for Spain. So, the normal lines created
    ///     in the base method should not have correction field set.
    /// </remarks>
    protected EUSalesListReportingLine initializeLine(RefRecId _euSalesListReportingGroupRecId)
    {
        EUSalesListReportingLine euSalesListReportingLine;
        EUSalesList euSalesList;

        euSalesList = queryRun.get(tableNum(EUSalesList));

        euSalesListReportingLine                    = super(_euSalesListReportingGroupRecId);
        euSalesListReportingLine.Corrected          = NoYes::No;
        euSalesListReportingLine.DeliveryCode_ES    = euSalesList.DeliveryCode_ES;

        return euSalesListReportingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        #define.DefaultDocumentNo(3490000000000)
        super();
        documentNumber = #DefaultDocumentNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the base method to handle the special case of correction lines written in Spanish.
    /// </summary>
    /// <returns>
    /// The return value from call to base method.
    /// </returns>
    /// <remarks>
    /// Correction lines are not supposed to be grouped with typical transaction lines and must be reported
    /// as individual lines.
    /// </remarks>
    protected boolean isNewLine()
    {
        boolean     ret, retCorrected;

        Line        lineCountCorrectionsIncrement,
                    lineCountIncrement;

        ret                      = super();
        [ retCorrected, lineCountCorrectionsIncrement, lineCountIncrement ] = this.updateCorrectedData(
            euSalesListReportingHeader,
            euSalesListReportingGroup,
            euSalesListReportingLineCorrection);

        lineCountCorrections += lineCountCorrectionsIncrement;
        lineCount            += lineCountIncrement;

        return ret && retCorrected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decides if there is information to report, based on the line count.
    /// </summary>
    /// <returns>
    ///    True if there are lines to be printed in the report.
    /// </returns>
    protected boolean isReportEmpty()
    {
        return !lineCount && !lineCountNonTriangularItemSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionType</Name>
				<Source><![CDATA[
    public EUSalesListCorrectionType_ES parmCorrectionType(EUSalesListCorrectionType_ES _correctionType = correctionType)
    {
        correctionType = _correctionType;

        return correctionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public EUSalesListDocumentNumber_ES parmDocumentNumber(EUSalesListDocumentNumber_ES _documentNumber = documentNumber)
    {
        documentNumber = _documentNumber;

        return documentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresentationType</Name>
				<Source><![CDATA[
    public EUSalesListPresentationType_ES parmPresentationType(EUSalesListPresentationType_ES _presentationType = presentationType)
    {
        presentationType = _presentationType;

        return presentationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedDeclaration</Name>
				<Source><![CDATA[
    public EUSalesListCorrectedDeclaration_ES parmCorrectedDeclaration(EUSalesListCorrectedDeclaration_ES _correctedDeclaration = correctedDeclaration)
    {
        correctedDeclaration = _correctedDeclaration;

        return correctedDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeInPeriodicity</Name>
				<Source><![CDATA[
    public NoYes parmChangeInPeriodicity(NoYes _changeInPeriodicity = changeInPeriodicity)
    {
        changeInPeriodicity = _changeInPeriodicity;

        return changeInPeriodicity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactPersonId</Name>
				<Source><![CDATA[
    public ContactPersonId parmContactPersonId(ContactPersonId _contactPersonId = contactPersonId)
    {
        contactPersonId = _contactPersonId;

        return contactPersonId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies runtime filters on the query for data selection.
    /// </summary>
    protected void prepareQuery()
    {
        super();
        queryRun.query().dataSourceTable(tableNum(EUSalesList)).addOrderByField(fieldNum(EUSalesList, CorrectedServices));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    public void registerEventHandlers()
    {
        super();
        dialogCorrectionType.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(EUSalesListReportingEngine_ES, correctionType_Modified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>EUSalesListReportingLineAmountItems</c> table buffers with updated amounts.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    ///    The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    protected void saveLastLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        super(_euSalesListReportingLine);

        //Add Sales of Items lines to the main dataset
        while select euSalesListReportingLinesByDeliveryCode
            where euSalesListReportingLinesByDeliveryCode.EUSalesListReportingGroup == euSalesListReportingGroup.RecId
        {
            if (this.lineHasNoAmounts(euSalesListReportingLinesByDeliveryCode))
            {
                lineCountNonTriangularItemSale--;
                continue;
            }

            if (euSalesListReportingLinesByDeliveryCode.Corrected == NoYes::No)
            {
                _euSalesListReportingLine.clear();
                _euSalesListReportingLine.data(euSalesListReportingLinesByDeliveryCode);
                _euSalesListReportingLine.insert();
                lineCount ++;
                super(_euSalesListReportingLine);
            }
        }
        euSalesListReportingLinesByDeliveryCode = null;
        euSalesListReportingLinesByDeliveryCode.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the special case of item amounts split by Delivery Code
    /// </summary>
    /// <param name="_euSalesList">
    ///    The <c>EUSalesList</c> table buffer.
    /// </param>
    /// <param name="_euSalesListReportingLine">
    ///    The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    private void updateItemLineAmounts(EUSalesList _euSalesList, EUSalesListReportingLine _euSalesListReportingLine)
    {
        select forUpdate firstOnly euSalesListReportingLinesByDeliveryCode
            where euSalesListReportingLinesByDeliveryCode.DeliveryCode_ES == _euSalesList.DeliveryCode_ES;

        if (euSalesListReportingLinesByDeliveryCode)
        {
            euSalesListReportingLinesByDeliveryCode.ItemAmountMST += _euSalesList.AmountMST;
            euSalesListReportingLinesByDeliveryCode.doUpdate();
        }
        else
        {
            lineCountNonTriangularItemSale ++;
            euSalesListReportingLinesByDeliveryCode.data(this.initializeLine(euSalesListReportingGroup.RecId));
            euSalesListReportingLinesByDeliveryCode.ItemAmountMST += _euSalesList.AmountMST;
            euSalesListReportingLinesByDeliveryCode.doInsert();
        }

        if (this.isServiceAmount(_euSalesList))
        {
            _euSalesListReportingLine.selectForUpdate(true);
            _euSalesListReportingLine.ServiceAmountMST += _euSalesList.ServiceAmountMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the special case of correction amounts as they must not be grouped with typical transaction
    /// lines.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    protected void updateLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        //Copy original amounts
        AmountMST   itemAmount;
        AmountMST   triangularAmount;
        AmountMST   serviceAmount;

        EUSalesList euSalesList = queryRun.get(tableNum(EUSalesList));

        if (this.isItemAmount(euSalesList)
            && euSalesList.Corrected == NoYes::No
            && euSalesList.Direction == ModuleSalesPurch::Sales)
        {
            this.updateItemLineAmounts(euSalesList, _euSalesListReportingLine);
        }
        else
        {
            //Copy original amounts
            itemAmount       = _euSalesListReportingLine.ItemAmountMST;
            triangularAmount = _euSalesListReportingLine.TriangularAmountMST;
            serviceAmount    = _euSalesListReportingLine.ServiceAmountMST;

            //call the base functionality
            super(_euSalesListReportingLine);

            //overwrite the amounts from base if there are corrections
            if (_euSalesListReportingLine)
            {
                if (euSalesList.Corrected)
                {
                    if (euSalesList.Listcode == Listcode::EUTrade || euSalesList.Listcode == Listcode::ProductionOnToll)
                    {
                        _euSalesListReportingLine.ItemAmountMST = itemAmount;
                    }
                    else if (euSalesList.Listcode == Listcode::TriangularEUTrade || euSalesList.Listcode == Listcode::TriangularProductionOnToll)
                    {
                        _euSalesListReportingLine.TriangularAmountMST = triangularAmount;
                    }

                    _euSalesListReportingLine.update();
                }

                if (euSalesList.CorrectedServices)
                {
                    _euSalesListReportingLine.ServiceAmountMST = serviceAmount;
                    _euSalesListReportingLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        #define.MaxLengthCompanyCoRegNum(9)
        #define.MaxLengthCompanyName(40)
        #define.MaxLengthContactPersonPhone(9)
        #define.MaxLengthContactPersonName(40)
        #define.MaxLengthDeclarationNumber(13)
        #define.Digits('0123456789')
        #xppTexts

        boolean                           ret;
        DirPerson                         dirPerson;
        LogisticsElectronicAddressLocator contactPhoneNumber;
        CompanyInfo companyInfo           = CompanyInfo::find();
        ret                               = super(calledFrom);

        if (generateFile)
        {
            if (!documentNumber)
            {
                ret = checkFailed(strFmt("@SYS84753", "@SYS92813"));
            }

            if (!contactPersonId)
            {
                ret = checkFailed(strFmt("@SYS84753", "@SYS14142"));
            }
            else
            {
                dirPerson = DirPerson::find(ContactPerson::find(contactPersonId).Party);
                if (dirPerson.Name)
                {
                    this.checkFieldLength(
                        strLen(dirPerson.Name),
                        #MaxLengthContactPersonName,
                        null,
                        0,
                        strFmt("@SYS339950", "@SYS324799", #MaxLengthContactPersonName));
                }
                else
                {
                    ret = checkFailed("@SYS335873");
                }

                contactPhoneNumber     = strKeep(dirPerson.primaryPhone(), #Digits);

                if (contactPhoneNumber)
                {
                    this.checkFieldLength(
                        strLen(contactPhoneNumber),
                        #MaxLengthContactPersonPhone,
                        null,
                        0,
                        strFmt("@SYS339950", "@SYS337", #MaxLengthContactPersonPhone));
                }
                else
                {
                    ret = checkFailed("@SYS335874");
                }
            }

            this.checkFieldLength(
                strLen(companyInfo.CoRegNum),
                #MaxLengthCompanyCoRegNum,
                null,
                0,
                strFmt("@SYS339950", fieldPName(CompanyInfo, CoRegNum), #MaxLengthCompanyCoRegNum));

            this.checkFieldLength(
                strLen(companyInfo.name()),
                #MaxLengthCompanyName,
                null,
                0,
                strFmt("@SYS339950", "@SYS311563", #MaxLengthCompanyName));

            ret = this.checkFieldLength(
                strLen(int642str(documentNumber)),
                #MaxLengthDeclarationNumber,
                null,
                0,
                strFmt("@SYS339951", "@SYS92813", #MaxLengthDeclarationNumber)) && ret;

            ret = this.checkFieldLength(
                strLen(int642str(correctedDeclaration)),
                #MaxLengthDeclarationNumber,
                null,
                0,
                strFmt("@SYS339951", "@SYS99806", #MaxLengthDeclarationNumber)) && ret;
        }

        if (correctionType != EUSalesListCorrectionType_ES::None
            && !correctedDeclaration)
        {
            ret = checkFailed(strFmt("@SYS84753", "@SYS99806"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEUSalesListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the individual EU sales list lines.
    /// </summary>
    /// <param name="_euSalesList">
    /// The <c>EUSalesList</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method to perform custom validations, e.g., checking the field
    /// length of the fields.
    /// </remarks>
    protected boolean validateEUSalesListLine(EUSalesList _euSalesList)
    {
        #define.MaxLengthAmounts(13)
        boolean ret = super(_euSalesList);

        if (generateFile)
        {
            //Check the correction lines here as they are not grouped for spain
            setPrefix(#PreFixField(_euSalesList, AccountNum));

            //Correction Amount Item, without the decimal symbol
            this.checkFieldLength(
                strLen(num2str(_euSalesList.TaxRep349AmountMstPrev, 0, 2, 0, 0)) - 1,
                #MaxLengthAmounts,
                _euSalesList,
                fieldNum(EUSalesList, TaxRep349AmountMstPrev));

            //Correction amount Service, without the decimal symbol
            this.checkFieldLength(
                strLen(num2str(_euSalesList.TaxRep349AmountMstPrevServices, 0, 2, 0, 0)) - 1,
                #MaxLengthAmounts,
                _euSalesList,
                fieldNum(EUSalesList, TaxRep349AmountMstPrevServices));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEUSalesListReportingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the grouped EU sales list reporting lines.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method to perform custom validations on the grouped lines,
    /// e.g., checking the field length of the amount fields.
    /// </remarks>
    protected boolean validateEUSalesListReportingLine(EUSalesListReportingLine _euSalesListReportingLine)
    {
        #define.MaxLengthVATNum(15)
        #define.MaxLengthName(40)
        #define.MaxLengthAmounts(13)

        EUSalesList euSalesList = queryRun.get(tableNum(EUSalesList));
        boolean     ret = super(_euSalesListReportingLine);

        if (generateFile)
        {
            if (_euSalesListReportingLine)
            {
                setPrefix(#PreFixField(_euSalesListReportingLine, AccountNum));

                //VATNum
                this.checkFieldLength(
                    strLen(_euSalesListReportingLine.StrippedVATNum),
                    #MaxLengthVATNum,
                    euSalesList,
                    fieldNum(EUSalesList, vatNum));

                //Name
                this.checkFieldLength(
                    strLen(_euSalesListReportingLine.Name),
                    #MaxLengthName,
                    _euSalesListReportingLine,
                    fieldNum(EUSalesListReportingLine, Name));

                //Item amount, without the decimal symbol
                this.checkFieldLength(
                    strLen(num2str(_euSalesListReportingLine.ItemAmountMST, 0, 2, 0, 0)) - 1,
                    #MaxLengthAmounts,
                    euSalesList,
                    fieldNum(EUSalesList, AmountMST));

                //Triangular amount, without the decimal symbol
                this.checkFieldLength(
                    strLen(num2str(_euSalesListReportingLine.TriangularAmountMST, 0, 2, 0, 0)) - 1,
                    #MaxLengthAmounts,
                    euSalesList,
                    fieldNum(EUSalesList, AmountMST));

                //Service amount, without the decimal symbol
                this.checkFieldLength(
                    strLen(num2str(_euSalesListReportingLine.ServiceAmountMST, 0, 2, 0, 0)) - 1,
                    #MaxLengthAmounts,
                    euSalesList,
                    fieldNum(EUSalesList, ServiceAmountMST));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>EUSalesListReportingHeader</c> record.
    /// </summary>
    /// <param name="_euSalesListReportingHeader">
    /// The <c>EUSalesListReportingHeader</c> buffer.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method to perform custom validations, e.g., checking the field
    /// length of total amounts.
    /// </remarks>
    protected boolean validateHeader(EUSalesListReportingHeader _euSalesListReportingHeader)
    {
        #define.MaxLengthAmounts(15)
        boolean     ret;
        AmountMST   totalAmountWithoutCorrections;

        ret         = super(_euSalesListReportingHeader);

        if (generateFile)
        {
            //Total amount without corrections, without the decimal symbol
            totalAmountWithoutCorrections = _euSalesListReportingHeader.TotalAmountItems
                + _euSalesListReportingHeader.TotalAmountTriangular
                + _euSalesListReportingHeader.TotalAmountServices;

            this.checkFieldLength(
                strLen(num2str(totalAmountWithoutCorrections, 0, 2, 0, 0)) - 1,
                #MaxLengthAmounts,
                null,
                0,
                strFmt("@SYS339950", "@SYS3494", #MaxLengthAmounts));

            //Total correction amount, without the decimal symbol
            this.checkFieldLength(
                strLen(num2str(_euSalesListReportingHeader.TotalAmountCorrections_ES, 0, 2, 0, 0)) - 1,
                #MaxLengthAmounts,
                null,
                0,
                strFmt("@SYS339950", "@SYS339952", #MaxLengthAmounts));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>