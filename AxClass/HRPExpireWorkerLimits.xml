<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HrpExpireWorkerLimits</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HrpExpireWorkerLimits</c> class is used to retrieve limits for the logged in worker.
/// </summary>
class HrpExpireWorkerLimits
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeInAuthorityBasis</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expires the signing limits based on the authority basis value.
    /// </summary>
    /// <param name="_authBasis">
    ///    An <c>HRPAuthorityBasis</c> enumeration to expire the signing limit for the
    ///    <c>HRPAuthorityBasis::Job</c> and <c>HRPAuthorityBasis::Compensation</c> methods.
    /// </param>
    public void changeInAuthorityBasis(HRPAuthorityBasis _authBasis)
    {
        // expires the signing limits depend on the authority basis value
        if (_authBasis == HRPAuthorityBasis::Job)
        {
            this.expireSigningLimitsOnJob();
        }
        else if (_authBasis == HRPAuthorityBasis::Compensation)
        {
            this.expireSigningLimitsOnCompLevel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeInIsEmployeeOnlyGetSL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expires all limit request and approved amounts that are raised by a contractor.
    /// </summary>
    /// <param name="_status">
    ///    A <c>NoYes</c> value that specifies whether to expire contractor limits or not.
    /// </param>
    public void changeInIsEmployeeOnlyGetSL(NoYes _status)
    {
        // expires all limitrequest and approved amounts that are raised by an contractor
        if (_status == NoYes::Yes)
        {
            this.expireContractorSigningLimits();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireApprovedLimitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deprecates the <c>approvedlimitamount</c> records.
    /// </summary>
    /// <param name="_approvedLimitRecId">
    ///    The record ID of the <c>HRPApprovedLimit</c> record to expire.
    /// </param>
    private void expireApprovedLimitAmount(RefRecId _approvedLimitRecId)
    {
        HRPApprovedLimitAmount approvedLimitAmount;
        utcdatetime dateFrom, dateTo;
        dateFrom = DateTimeUtil::minValue();
        dateTo   = DateTimeUtil::maxValue();

        // deprecates the approvedlimitamount records
        ttsbegin;
        approvedLimitAmount.selectForUpdate(true);

        select firstonly forupdate validtimestate(dateFrom, dateTo) ApprovedSigningLimit, ValidTo, RecId from approvedLimitAmount
            where approvedLimitAmount.ApprovedSigningLimit == _approvedLimitRecId;

        if (approvedLimitAmount.RecId)
        {
            approvedLimitAmount.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            approvedLimitAmount.ValidTo = DateTimeUtil::utcNow();
            approvedLimitAmount.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireApprovedLimits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deprecates the approved limits when limit basis is modified.
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    ///    The record ID of the <c>HcmPositionWorkerAssignment</c> record.
    /// </param>
    /// <param name="_hrpLimitDocumentRecId">
    ///    The record ID of the <c>HrpLimitDocument</c> record.
    /// </param>
    [Wrappable(true)]
    final protected void expireApprovedLimits(RefRecId _positionWorkerAssignmentRecId, RefRecId _hrpLimitDocumentRecId = 0)
    {
        HRPApprovedLimit approvedLimit;
        utcdatetime dateFrom, dateTo;
        dateFrom = DateTimeUtil::minValue();
        dateTo   = DateTimeUtil::maxValue();

        ttsbegin;
        // deprecates the approved limits when limit basis is modified
        if (_hrpLimitDocumentRecId == 0)
        {
            while select validtimestate(dateFrom, dateTo) RecId from approvedLimit where approvedLimit.PositionWorkerAssignment == _positionWorkerAssignmentRecId
            {
                this.expireApprovedLimitAmount(approvedLimit.RecId);
            }
            approvedLimit.selectForUpdate(true);
            while select forupdate validtimestate(dateFrom, dateTo) PositionWorkerAssignment, ValidTo, RecId from approvedLimit
                where approvedLimit.PositionWorkerAssignment == _positionWorkerAssignmentRecId
            {
                approvedLimit.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                approvedLimit.ValidTo = DateTimeUtil::utcNow();
                approvedLimit.update();
            }
        }
        else
        {
            // deprecates the approved limits when deprecate the limit rules
            while select validtimestate(dateFrom, dateTo) SigningLimitDocument, RecId from approvedLimit where approvedLimit.PositionWorkerAssignment == _positionWorkerAssignmentRecId
                && approvedLimit.SigningLimitDocument == _hrpLimitDocumentRecId
            {
                this.expireApprovedLimitAmount(approvedLimit.RecId);
            }
            approvedLimit.selectForUpdate(true);
            while select forupdate validtimestate(dateFrom, dateTo) SigningLimitDocument, PositionWorkerAssignment, ValidTo, RecId from approvedLimit
                where   approvedLimit.PositionWorkerAssignment == _positionWorkerAssignmentRecId
                &&      approvedLimit.SigningLimitDocument == _hrpLimitDocumentRecId
            {
                approvedLimit.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                approvedLimit.ValidTo = DateTimeUtil::utcNow();
                approvedLimit.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireContractorSigningLimits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expires all limit request and approved amounts that are raised by a contractor.
    /// </summary>
    private void expireContractorSigningLimits()
    {
        HcmEmployment               contractorEmployment;
        HcmEmploymentDetail         hcmEmploymentDetail;
        HcmWorker                   worker;
        HcmPositionWorkerAssignment positionWorkerAssignment;

        // expires all limitrequest and approved amounts that are raised by an contractor
        while select RecId from positionWorkerAssignment
            join RecId from worker where worker.RecId == positionWorkerAssignment.Worker
            join RecId from contractorEmployment
                where contractorEmployment.Worker == worker.RecId
                &&    contractorEmployment.EmploymentType == HcmEmploymentType::Contractor
            join RecId from hcmEmploymentDetail where hcmEmploymentDetail.Employment == contractorEmployment.RecId
        {
            this.expireLimitRequest(positionWorkerAssignment.RecId);
            this.expireApprovedLimits(positionWorkerAssignment.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireDefaultSigningLimitRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deprecates the signing limits job or compensation rule details based on the authority basis value.
    /// </summary>
    /// <param name="_ruleId">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> record.
    /// </param>
    /// <param name="_document">
    ///    The record ID of the <c>HRPLimitDocument</c> table.
    /// </param>
    public void expireDefaultSigningLimitRule(RefRecId _ruleId, RefRecId _document = 0)
    {
        HRPDefaultLimitDetail defaultSLRuleDetail;
        HRPDefaultLimitJobRule jobRule;
        HRPDefaultLimitCompensationRule compensationRule;

        // deprecate the signing limits job / compensation rule details depend on the authority basis value
        if (this.getAuthorityBasis() == HRPAuthorityBasis::Job)
        {
            if (_document > 0)
            {
                while select SigningLimitDocument from defaultSLRuleDetail where defaultSLRuleDetail.DefaultSigningLimitRule == _ruleId
                    && defaultSLRuleDetail.SigningLimitDocument == _document
                    join RecId, Job from jobRule where jobRule.DefaultLimitDetail == defaultSLRuleDetail.RecId
                {
                    this.expireSigningLimitsOnJob(jobRule.Job, defaultSLRuleDetail.SigningLimitDocument);
                }
            }
            else
            {
                while select SigningLimitDocument from defaultSLRuleDetail where defaultSLRuleDetail.DefaultSigningLimitRule == _ruleId
                    join RecId, Job from jobRule where jobRule.DefaultLimitDetail == defaultSLRuleDetail.RecId
                {
                    this.expireSigningLimitsOnJob(jobRule.Job, defaultSLRuleDetail.SigningLimitDocument);
                }
            }
        }
        else if (this.getAuthorityBasis() == HRPAuthorityBasis::Compensation)
        {
            if (_document > 0)
            {
                while select SigningLimitDocument from defaultSLRuleDetail where defaultSLRuleDetail.DefaultSigningLimitRule == _ruleId
                    && defaultSLRuleDetail.SigningLimitDocument == _document
                    join RecId, CompensationLevel from compensationRule where compensationRule.DefaultLimitDetail == defaultSLRuleDetail.RecId
                {
                    this.expireSigningLimitsOnCompLevel(compensationRule.CompensationLevel, defaultSLRuleDetail.SigningLimitDocument);
                }
            }
            else
            {
                while select SigningLimitDocument from defaultSLRuleDetail where defaultSLRuleDetail.DefaultSigningLimitRule == _ruleId
                    join RecId, CompensationLevel from compensationRule where compensationRule.DefaultLimitDetail == defaultSLRuleDetail.RecId
                {
                    this.expireSigningLimitsOnCompLevel(compensationRule.CompensationLevel, defaultSLRuleDetail.SigningLimitDocument);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireLimitAgreementAttestation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deprecates limit agreement attestations that are made by workers.
    /// </summary>
    /// <param name="_limitRequestRecId">
    ///    When the <c>_agreementDetail</c> value is yes, the <c>_limitRequestRecId</c> value will contain the
    ///    record ID of the <c>HrpLimitAgreementDetail</c> table; else, the record ID of the
    ///    <c>HrpLimitRequest</c> table.
    /// </param>
    /// <param name="_agreementDetail">
    ///    A <c>NoYes</c> value to deprecate limit agreement attestations.
    /// </param>
    private void expireLimitAgreementAttestation(RefRecId _limitRequestRecId, NoYes _agreementDetail = NoYes::No)
    {
        HRPLimitAgreementAttestation limitAgreementAttestation;
        utcdatetime dateFrom, dateTo;
        dateFrom = DateTimeUtil::minValue();
        dateTo   = DateTimeUtil::maxValue();

        // deprecate limit agreement attestrations
        ttsbegin;
        if (_agreementDetail == NoYes::Yes)
        {
            limitAgreementAttestation.selectForUpdate(true);
            while select forupdate validtimestate(dateFrom, dateTo) LimitAgreementDetail, RecId from limitAgreementAttestation
                where   limitAgreementAttestation.LimitAgreementDetail == _limitRequestRecId
            {
                limitAgreementAttestation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                limitAgreementAttestation.ValidTo = DateTimeUtil::utcNow();
                limitAgreementAttestation.update();
            }
        }
        else
        {
            limitAgreementAttestation.selectForUpdate(true);
            while select forupdate validtimestate(dateFrom, dateTo) SigningLimitRequest, RecId from limitAgreementAttestation
                where   limitAgreementAttestation.SigningLimitRequest == _limitRequestRecId
            {
                limitAgreementAttestation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                limitAgreementAttestation.ValidTo = DateTimeUtil::utcNow();
                limitAgreementAttestation.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireLimitAgreementRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expires the existing signing limit agreement rule.
    /// </summary>
    /// <param name="_ruleId">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> record.
    /// </param>
    /// <param name="_documentId">
    ///    The record ID of the <c>HRPLimitDocument</c> record.
    /// </param>
    public void expireLimitAgreementRule(RefRecId _ruleId, RefRecId _documentId = 0)
    {
        HRPLimitAgreementDetail limitAgreementDetail;

        // deprecate the limit agreement rule
        if (_documentId > 0)
        {
            while select RecId from limitAgreementDetail where limitAgreementDetail.SigningLimitAgreementRule == _ruleId && limitAgreementDetail.SigningLimitDocument == _documentId
            {
                this.expireLimitAgreementAttestation(limitAgreementDetail.RecId, NoYes::Yes);
            }
        }
        else
        {
            while select RecId from limitAgreementDetail where limitAgreementDetail.SigningLimitAgreementRule == _ruleId
            {
                this.expireLimitAgreementAttestation(limitAgreementDetail.RecId, NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireLimitRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expires the limit agreement attestations and deletes the limit requests when authority basis is
    ///    modified.
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    ///    The record ID of the <c>HcmPositionWorkerAssignment</c> record.
    /// </param>
    /// <param name="_hrpLimitDocumentRecId">
    ///    The record ID of the <c>HRPLimitDocument</c> record.
    /// </param>
    [Wrappable(true)]
    final protected void expireLimitRequest(RefRecId _positionWorkerAssignmentRecId, RefRecId _hrpLimitDocumentRecId = 0)
    {
        HRPLimitRequest limitRequest;

        // deprecate the limit agreement attestrations and delets the limit requests when authority basis is modified
        if (_hrpLimitDocumentRecId == 0)
        {
            while select RecId from limitRequest where limitRequest.PositionWorkerAssignment == _positionWorkerAssignmentRecId
            {
                this.expireLimitRequestAmount(limitRequest.RecId);
                this.expireLimitAgreementAttestation(limitRequest.RecId);
            }

            delete_from limitRequest where limitRequest.PositionWorkerAssignment == _positionWorkerAssignmentRecId;
        }
        else
        {
            // deprecate the limit agreement attestrations and delets the limit requests when limit rules are derecated
            while select SigningLimitDocument, RecId from limitRequest where limitRequest.PositionWorkerAssignment == _positionWorkerAssignmentRecId
                && limitRequest.SigningLimitDocument == _hrpLimitDocumentRecId
            {
                this.expireLimitRequestAmount(limitRequest.RecId);
                this.expireLimitAgreementAttestation(limitRequest.RecId);
            }

            delete_from limitRequest where limitRequest.PositionWorkerAssignment == _positionWorkerAssignmentRecId && limitRequest.SigningLimitDocument == _hrpLimitDocumentRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireLimitRequestAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the limit request amount in the <c>HrpLimitRequestAmount</c> table.
    /// </summary>
    /// <param name="_limitRequestRecId">
    ///    The record ID of the <c>HrpLimitRequest</c> record.
    /// </param>
    private void expireLimitRequestAmount(RefRecId _limitRequestRecId)
    {
        HRPLimitRequestAmount limitRequestAmount;

        // delete limit request amount
        delete_from limitRequestAmount where limitRequestAmount.SigningLimitRequest == _limitRequestRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireSigningLimitsOnCompLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deprecates the approved limits and deletes the limit requests when the authority basis is changed
    ///    or the limit rules are deprecated.
    /// </summary>
    /// <param name="_compensationRecId">
    ///    The record ID of the <c>HcmCompensationLevel</c> record.
    /// </param>
    /// <param name="_document">
    ///    The record ID of the <c>HrpLimitDocument</c> record.
    /// </param>
    private void expireSigningLimitsOnCompLevel(RefRecId _compensationRecId = 0, RefRecId _document = 0)
    {
        HcmCompensationLevel            compensation;
        HcmJobDetail                    jobDetail;
        HcmJob                          job;
        HcmPositionDetail               positionDetail;
        HcmPosition                     position;
        HcmPositionWorkerAssignment     positionWorkerAssignment;

        // deprecate the approved limits and delete limit requests both when authority basis is changed or limit rules are deprecated

        if (_compensationRecId > 0)
        {
            while select RecId from positionWorkerAssignment
                join RecId from position where position.RecId == positionWorkerAssignment.Position
                join RecId from positionDetail where positionDetail.Position == position.RecId
                join RecId from job where job.RecId == positionDetail.Job
                join RecId from jobDetail where jobDetail.Job == job.RecId
                join RecId from compensation where compensation.RecId == jobDetail.CompensationLevel
                    &&  compensation.RecId == _compensationRecId
            {
                this.expireLimitRequest(positionWorkerAssignment.RecId, _document);
                this.expireApprovedLimits(positionWorkerAssignment.RecId, _document);
            }
        }
        else
        {
            while select RecId from positionWorkerAssignment
                join RecId from position where position.RecId == positionWorkerAssignment.Position
                join RecId from positionDetail where positionDetail.Position == position.RecId
                join RecId from job where job.RecId == positionDetail.Job
                join RecId from jobDetail where jobDetail.Job == job.RecId
                join RecId from compensation where compensation.RecId == jobDetail.CompensationLevel
            {
                this.expireLimitRequest(positionWorkerAssignment.RecId);
                this.expireApprovedLimits(positionWorkerAssignment.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireSigningLimitsOnJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deprecates the approved limits and deletes the limit requests when the authority basis is changed
    ///    or the limit rules are deprecated.
    /// </summary>
    /// <param name="_jobRecId">
    ///    The record ID of the <c>HcmJob</c> record.
    /// </param>
    /// <param name="_document">
    ///    The record ID of the <c>HrpLimitDocument</c> record.
    /// </param>
    private void expireSigningLimitsOnJob(RefRecId _jobRecId = 0, RefRecId _document = 0)
    {
        HcmJob                          job;
        HcmPositionDetail               positionDetail;
        HcmPosition                     position;
        HcmPositionWorkerAssignment     positionWorkerAssignment;

        // deprecate the approved limits and delete limit requests both when authority basis is changed or limit rules are deprecated
        if (_jobRecId > 0)
        {
            while select RecId from positionWorkerAssignment
                join RecId from position where position.RecId == positionWorkerAssignment.Position
                join RecId from positionDetail where positionDetail.Position == position.RecId
                join RecId from job where job.RecId == positionDetail.Job && job.RecId == _jobRecId
            {
                this.expireLimitRequest(positionWorkerAssignment.RecId, _document);
                this.expireApprovedLimits(positionWorkerAssignment.RecId, _document);
            }
        }
        else
        {
            while select RecId from positionWorkerAssignment
                join RecId from position where position.RecId == positionWorkerAssignment.Position
                join RecId from positionDetail where positionDetail.Position == position.RecId
                join RecId from job where job.RecId == positionDetail.Job
            {
                this.expireLimitRequest(positionWorkerAssignment.RecId);
                this.expireApprovedLimits(positionWorkerAssignment.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthorityBasis</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the limit parameters for the authority basis value from the <c>HRPLimitParameters</c>
    ///    table.
    /// </summary>
    /// <returns>
    ///    Retrieves the parameter value of the <c>HRPAuthorityBasis</c> enumeration.
    /// </returns>
    [Wrappable(true)]
    final protected HRPAuthorityBasis getAuthorityBasis()
    {
        HRPLimitParameters limitParameters;

        // retrieve the limit parameters for the authority basis value
        select firstonly SigningLimitBasedOn from limitParameters;

        return limitParameters.SigningLimitBasedOn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>