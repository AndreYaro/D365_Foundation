<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningDocumentViewDataContainer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides the new and old records based on which
/// <c>VersioningDocumentViewManager</c> shows the UI for changed fields and old values.
/// </summary>
public class VersioningDocumentViewDataContainer
{
    private TableId                             recordTableId;
    private Common                              newRecord;
    private Common                              oldRecord;
    private List                                commonFields;
    private FieldName                           orderByField;
    private Query                               recordQuery;
    private QueryBuildDataSource                recordDataSource;
    private VersioningIDocumentViewRecordMapper recordMapper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    private Query createQuery()
    {
        recordQuery = new Query();

        recordDataSource = recordQuery.addDataSource(recordTableId);

        if (orderByField != '')
        {
            recordDataSource.addOrderByField(fieldName2Id(recordTableId, orderByField));
        }

        return recordQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    private void executeQuery(Common _newRecord)
    {
        if (recordTableId != _newRecord.TableId)
        {
            if ((recordMapper != null) && (_newRecord.TableId == recordMapper.fromTableId()))
            {
                newRecord = recordMapper.mapRecord(_newRecord);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            newRecord = _newRecord;
        }

        this.filterToCommonFields();

        QueryRun qr = new QueryRun(recordQuery);
        qr.next();

        oldRecord = qr.get(recordTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterToCommonFields</Name>
				<Source><![CDATA[
    private void filterToCommonFields()
    {
        ListEnumerator le = commonFields.getEnumerator();
        while (le.moveNext())
        {
            SysQuery::findOrCreateRange(recordDataSource, fieldName2Id(recordTableId, le.current())).value(queryValue(newRecord.getFieldValue(le.current())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>VersioningDocumentViewDataContainer</c> based on a table.
    /// </summary>
    /// <param name = "_tableId">
    /// TableId of the table based on which the container should be created.
    /// </param>
    /// <param name = "_commonFields">
    /// List of common fields, between the new and the old records.
    /// This is used for generating the query to find the old record from the new record.
    /// </param>
    /// <param name = "_orderByField">
    /// Field based on which the query should be ordered, so that the old record is the
    /// first in range, and the new record is last.
    /// </param>
    /// <param name = "_recordMapper">
    /// <c>VersioningIDocumentViewRecordMapper</c> to map the records if the new record is a different
    /// table than the old record.
    /// </param>
    /// <returns>
    /// <c>VersioningDocumentViewDataContainer</c> to provide the new and old records.
    /// </returns>
    public static VersioningDocumentViewDataContainer constructFromTable(
        TableId _tableId,
        container _commonFields,
        FieldName _orderByField,
        VersioningIDocumentViewRecordMapper _recordMapper = null)
    {
        VersioningDocumentViewDataContainer dataContainer = new VersioningDocumentViewDataContainer();
        dataContainer.recordTableId    = _tableId;
        dataContainer.commonFields     = con2List(_commonFields);
        dataContainer.orderByField     = _orderByField;
        dataContainer.recordQuery      = dataContainer.createQuery();
        dataContainer.recordMapper     = _recordMapper;
        return dataContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>VersioningDocumentViewDataContainer</c> based on a table.
    /// </summary>
    /// <param name = "_formDataSource">
    /// FormDataSource based on which the container should be created.
    /// </param>
    /// <param name = "_commonFields">
    /// List of common fields, between the new and the old records.
    /// This is used for generating the query to find the old record from the new record.
    /// </param>
    /// <param name = "_orderByField">
    /// Field based on which the query should be ordered, so that the old record is the
    /// first in range, and the new record is last.
    /// </param>
    /// <param name = "_recordMapper">
    /// <c>VersioningIDocumentViewRecordMapper</c> to map the records if the new record is a different
    /// table than the old record.
    /// </param>
    /// <returns>
    /// <c>VersioningDocumentViewDataContainer</c> to provide the new and old records.
    /// </returns>
    public static VersioningDocumentViewDataContainer constructFromDataSource(
        FormDataSource _formDataSource,
        container _commonFields,
        FieldName _orderByField,
        VersioningIDocumentViewRecordMapper _recordMapper = null)
    {
        TableId tableId = _formDataSource.table();

        if (_recordMapper != null)
        {
            if (tableId == _recordMapper.fromTableId())
            {
                tableId = _recordMapper.toTableId();
            }
        }

        return VersioningDocumentViewDataContainer::constructFromTable(tableId, _commonFields, _orderByField, _recordMapper);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the old value for a field.
    /// </summary>
    /// <param name = "_fieldName">
    /// Field name for which old value should be retrieved.
    /// </param>
    /// <returns>
    /// Old value for the field.
    /// </returns>
    public anytype getOldValue(FieldName _fieldName)
    {
        return oldRecord.getFieldValue(_fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValueChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the value of a field is changed between the old and new records.
    /// </summary>
    /// <param name = "_fieldName">
    /// Field name of the field which should be checked.
    /// </param>
    /// <returns>
    /// True if the value of the field has changed; false otherwise.
    /// </returns>
    public boolean hasValueChanged(FieldName _fieldName)
    {
        return (newRecord.getFieldValue(_fieldName) != oldRecord.getFieldValue(_fieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the new and old records in the container.
    /// </summary>
    /// <param name = "_newRecord">
    /// New record based on which update should be triggered.
    /// </param>
    public void updateRecords(Common _newRecord)
    {
        this.executeQuery(_newRecord);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>