<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamVendRebateFindAndCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateFindAndCreate</c> class serves to create vendor rebates.
/// </summary>
class TamVendRebateFindAndCreate
{
    VendInvoiceJour                 vendInvoiceJour;
    VendInvoiceTrans                vendInvoiceTrans;

    PdsCWInventQty                  sumCWQty;
    SalesQty                        sumQty;
    AmountCur                       sumGrossAmt;
    AmountCur                       sumNetAmt;
    TAMVendRebateAgreementLine      tmpVendRebateAgreementLine;
    TAMVendRebateVendInvoiceTrans   tamVendRebateVendInvoiceTrans;
    VendTable                       vendTableOrderAccount;
    
    private boolean calculatedNormalRebateValueZero = false;

    #localMacro.CatchWeightCondition
    && (PdsGlobal::pdsIsCWItem(%1)
        || vendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
    #endMacro

    #localMacro.NotExistRebateTable
        notExists join tamVendRebateTable
            where tamVendRebateTable.VendInvoiceTransRefRecId         == %2.RecId
                && tamVendRebateTable.VendRebateAgreementRefRecId     == %1.RecId
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity and amount totals for the rebate based on the vendor invoice transactions.
    /// </summary>
    private void calculateSums()
    {
        VendInvoiceTrans    localVendInvoiceTrans;

        this.resetTransSums();
        // Gross amount is required to determine Rebates.  Gross amount is determined
        // by multiplying Quantity * Price.
        localVendInvoiceTrans = this.parmVendInvoiceTrans();
        sumCWQty    = localVendInvoiceTrans.PdsCWQty;
        sumQty      = localVendInvoiceTrans.Qty;

        sumGrossAmt = TAMVendRebateHelpers::grossAmountFromVendInvoiceTrans(localVendInvoiceTrans);

        sumGrossAmt =   CurrencyExchangeHelper::curAmount2CurAmount(sumGrossAmt, localVendInvoiceTrans.CurrencyCode, this.currency());

        sumNetAmt   = CurrencyExchangeHelper::curAmount2CurAmount(localVendInvoiceTrans.LineAmount, localVendInvoiceTrans.CurrencyCode, this.currency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvertUnits</Name>
				<Source><![CDATA[
    protected boolean canConvertUnits(TAMVendRebateAgreement _tamVendRebateAgreement)
    {
        UnitOfMeasureSymbol calcUOM;
        boolean             ret = true;

        if (_tamVendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
        {
            calcUOM = vendInvoiceTrans.PurchUnit;
        }
        else
        {
            calcUOM = vendInvoiceTrans.pdsCWUnitId();
        }

        if (_tamVendRebateAgreement.RebateUnit != calcUOM
            && !EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(
                                                vendInvoiceTrans.ItemId,
                                                vendInvoiceTrans.InventDimId,
                                                calcUOM,
                                                _tamVendRebateAgreement.RebateUnit))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates rebate records based on the contents of the tmpVendRebateAgreementLine buffer.
    /// </summary>
    /// <param name="_agreementHeaderRequirementsMet">
    /// A boolean flag indicating if the current purchase line meets the rebate agreement header requirements.
    /// </param>
    protected void createFromTmpAgreementLines(boolean _agreementHeaderRequirementsMet)
    {
        TAMVendRebateAgreement      tamVendRebateAgreementLocal, rebateAgreementZeroRebate;
        TAMVendRebateAgreementLine  rebateAgreementLineLocal;
        TAMVendRebateTable          tamVendRebateTable;
        date                        dateMin = dateNull();
        date                        dateMax = maxDate();

        select firstOnly RecId from tmpVendRebateAgreementLine;

        if (tmpVendRebateAgreementLine)
        {
            if (_agreementHeaderRequirementsMet)
            {
                while select validTimeState(dateMin, dateMax) RebateAgreementRefRecId, LineNum from tmpVendRebateAgreementLine
                    join rebateAgreementLineLocal
                    where rebateAgreementLineLocal.RebateAgreementRefRecId == tmpVendRebateAgreementLine.RebateAgreementRefRecId
                        && rebateAgreementLineLocal.LineNum                == tmpVendRebateAgreementLine.LineNum
                    join tamVendRebateAgreementLocal
                        where tamVendRebateAgreementLocal.RecId == rebateAgreementLineLocal.RebateAgreementRefRecId
                    notexists join tamVendRebateTable
                        where tamVendRebateTable.VendInvoiceTransRefRecId    == vendInvoiceTrans.RecId
                            && tamVendRebateTable.VendRebateAgreementRefRecId == tmpVendRebateAgreementLine.RebateAgreementRefRecId
                {
                    this.findVendRebateAgreementLineAndCreate(tamVendRebateAgreementLocal, rebateAgreementLineLocal);
                }
            }

            while select RebateAgreementRefRecId from tmpVendRebateAgreementLine
                group by RebateAgreementRefRecId
            {
                select firstOnly validTimeState(dateMin, dateMax) rebateAgreementZeroRebate
                    where rebateAgreementZeroRebate.RecId == tmpVendRebateAgreementLine.RebateAgreementRefRecId
                        && rebateAgreementZeroRebate.CumulatePurchaseBy != TAMCumulationPeriod::Invoice
                    notexists join tamVendRebateTable
                        where tamVendRebateTable.VendInvoiceTransRefRecId    == vendInvoiceTrans.RecId
                            && tamVendRebateTable.VendRebateAgreementRefRecId == rebateAgreementZeroRebate.RecId;

                if (rebateAgreementZeroRebate)
                {
                    // this creates a zero rebate for the sales lines that does not meet the rebate quantity or amount
                    // requirements and the accumulation is periodic.
                    this.createZeroRebate(rebateAgreementZeroRebate);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a vendor rebate from a vendor rebate agreement line.
    /// </summary>
    /// <param name="_line">
    /// The <c>TAMVendRebateAgreementLine</c> table record; optional.
    /// </param>
    protected void createRebate(TAMVendRebateAgreementLine  _line = null)
    {
        TAMVendRebateTable          newRebateTable;
        TAMVendRebateParameters     tamVendRebateParameters = TAMVendRebateParameters::find();

        newRebateTable.initValue();

        newRebateTable.initFromVendRebateAgreement(_line);
        newRebateTable.initFromVendInvoiceJour(
                                vendInvoiceJour,
                                vendInvoiceTrans,
                                sumQty,
                                sumGrossAmt,
                                sumNetAmt,
                                sumCWQty);
        newRebateTable.calculateRebateAmount();
        newRebateTable.status().setInitialStatus();
        newRebateTable.updateClaimDimensions();

        if (!newRebateTable.StartingRebateAmt)
        {
            calculatedNormalRebateValueZero = true;

            return;
        }

        ttsbegin;

        newRebateTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZeroRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates zero rebate for the purchase orders that do not meet the rebate quantity and amount requirements
    /// initially and if the rebate agreement has accumulation of periodic.
    /// </summary>
    /// <param name="_tamVendRebateAgreement">
    /// The <c>TAMVendRebateAgreement</c> table record by which zero rebate is creating.
    /// </param>
    protected void createZeroRebate(TAMVendRebateAgreement _tamVendRebateAgreement)
    {
        if (calculatedNormalRebateValueZero)
        {
            return;
        }

        TAMVendRebateTable      newVendRebateTable;
        TAMVendRebateAgreement  tamVendRebateAgreement = _tamVendRebateAgreement;

        newVendRebateTable.initValue();

        if (tamVendRebateAgreement)
        {
            newVendRebateTable.RebateProgramId                = tamVendRebateAgreement.RebateProgramId;
            newVendRebateTable.LedgerDimension                = tamVendRebateAgreement.LedgerDimension;
            newVendRebateTable.OffsetLedgerDimension          = tamVendRebateAgreement.OffsetLedgerDimension;
            newVendRebateTable.VendRebateAgreementRefRecId    = tamVendRebateAgreement.RecId;
            newVendRebateTable.RebateAmtType                  = TAMRebateAmtType::FixedAmount;
        }

        newVendRebateTable.initFromVendInvoiceJour(
                                    vendInvoiceJour,
                                    vendInvoiceTrans,
                                    sumQty,
                                    sumGrossAmt,
                                    sumNetAmt,
                                    sumCWQty);

        newVendRebateTable.calculateRebateAmount();

        newVendRebateTable.status().setInitialStatus();
        newVendRebateTable.updateClaimDimensions();

        ttsbegin;

        newVendRebateTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code of the vendor.
    /// </summary>
    /// <returns>
    /// The currency code on the vendor invoice transaction.
    /// </returns>
    protected CurrencyCode currency()
    {
        return vendInvoiceTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendRebateAgreementApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the rebate agreement is applicable.
    /// </summary>
    /// <param name = "_vendRebateAgreement">The rebate agreement</param>
    /// <returns>true if applicable; otherwise, false.</returns>
    protected boolean isVendRebateAgreementApplicable(TAMVendRebateAgreement _vendRebateAgreement)
    {
        switch (_vendRebateAgreement.ItemRebateCode)
        {
            case TAMVendRebateItemCode::All:
            case TAMVendRebateItemCode::Selection:
                return true;
            
            case TAMVendRebateItemCode::GroupId:
                return _vendRebateAgreement.ItemRebateRelation == tamVendRebateVendInvoiceTrans.PurchLineTAMItemVendRebateGroupId;
            
            case TAMVendRebateItemCode::Table:
                return _vendRebateAgreement.ItemRebateRelation == vendInvoiceTrans.ItemId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendRebateAgreementAndCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TAMVendRebateAgreement</c> table record to create the rebate.
    /// </summary>
    protected void findVendRebateAgreementAndCreate()
    {
        TAMVendRebateAgreement      vendRebateAgreement;
        VendTable                   vendTable   = vendTableOrderAccount ? vendTableOrderAccount : vendInvoiceJour.vendTable_OrderAccount();
        TAMVendRebateTable          tamVendRebateTable;
        InventDim                   inventDim;
        
        InventDim                   vendInvoiceTransInventDim = vendInvoiceTrans.inventDim();
        date                        dateMin = dateNull();
        date                        dateMax = maxDate();

        tmpVendRebateAgreementLine.setTmp();

        //Find all applicable Rebate Agreements.
        while select validTimeState(dateMin, dateMax) vendRebateAgreement
            where (vendRebateAgreement.VendRebateCode             == TableGroupAll::All
                    || (vendRebateAgreement.VendRebateCode        == TableGroupAll::GroupId
                        && vendRebateAgreement.VendRebateRelation == tamVendRebateVendInvoiceTrans.PurchTableTAMVendRebateGroupId)
                    || (vendRebateAgreement.VendRebateCode        == TableGroupAll::Table
                        && vendRebateAgreement.VendRebateRelation == vendTable.AccountNum))
                && ((vendRebateAgreement.VendRebateCalcDateType   == TAMVendRebateCalcDateType::CreatedDate
                        && (!vendRebateAgreement.ValidFrom || vendRebateAgreement.ValidFrom <= tamVendRebateVendInvoiceTrans.PurchLineCreatedDate)
                        && (!vendRebateAgreement.ValidTo   || vendRebateAgreement.ValidTo >= tamVendRebateVendInvoiceTrans.PurchLineCreatedDate))
                    || (vendRebateAgreement.VendRebateCalcDateType == TAMVendRebateCalcDateType::RequestedDeliveryDate
                        && (!vendRebateAgreement.ValidFrom || vendRebateAgreement.ValidFrom <= tamVendRebateVendInvoiceTrans.PurchLineDeliveryDate)
                        && (!vendRebateAgreement.ValidTo   || vendRebateAgreement.ValidTo   >= tamVendRebateVendInvoiceTrans.PurchLineDeliveryDate)))
                && (vendRebateAgreement.RebateCurrency    == vendInvoiceTrans.CurrencyCode)
                && (vendRebateAgreement.RebateUOMOption       == TAMRebateUOMOption::Convert
                    || (vendRebateAgreement.UnitType       == TAMRebateUnitType::InventoryUnit
                        && vendRebateAgreement.RebateUnit  == vendInvoiceTrans.PurchUnit)
                    || (vendRebateAgreement.UnitType       == TAMRebateUnitType::CWUnit
                        && vendRebateAgreement.RebateUnit  == vendInvoiceTrans.pdsCWUnitId()))
                && vendRebateAgreement.Validated
                && (vendRebateAgreement.Verifier
                    || vendRebateAgreement.WFApprovalStatus == TAMVendRebateApprovalStatus::Approved)
        #CatchWeightCondition(vendInvoiceTrans.ItemId)
        #TAMRebateInventDimExistsJoin(vendRebateAgreement.InventDimId, inventDim, vendInvoiceTransInventDim)
        #NotExistRebateTable(vendRebateAgreement, vendInvoiceTrans)
        {
            if (!this.isVendRebateAgreementApplicable(vendRebateAgreement))
            {
                continue;
            }

            InventQty calcQty;
            UnitOfMeasureSymbol calcUOM;

            if (vendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
            {
                calcQty = sumQty;
                calcUOM = vendInvoiceTrans.PurchUnit;
            }
            else
            {
                calcQty = sumCWQty;
                calcUOM = vendInvoiceTrans.pdsCWUnitId();
            }

            if (!this.canConvertUnits(vendRebateAgreement))
            {
                continue;
            }

            boolean checkRebateRequirements = vendRebateAgreement.checkProductRebateRequirements(sumGrossAmt,
                                                                                                 calcQty,
                                                                                                 calcUOM,
                                                                                                 this.currency(),
                                                                                                 vendInvoiceTrans.ItemId,
                                                                                                 vendInvoiceTrans.InventDimId);

            if (vendRebateAgreement.CumulatePurchaseBy == TAMCumulationPeriod::Invoice && !checkRebateRequirements)
            {
                continue;
            }

            this.createTmpVendRebateAgreementLines(vendRebateAgreement);

            this.createFromTmpAgreementLines(checkRebateRequirements);
            // clear the temporary buffer for the next agreement
            delete_from tmpVendRebateAgreementLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpVendRebateAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>TAMVendRebateAgreementLine</c> table based on the vendor rebate agreement.
    /// </summary>
    /// <param name="_vendRebateAgreement">
    /// The vendor rebate agreement header record on which the rebate is being created.
    /// </param>
    [Replaceable]
    protected void createTmpVendRebateAgreementLines(TAMVendRebateAgreement _vendRebateAgreement)
    {
        TAMVendRebateAgreementLine  vendRebateAgreementLine;

        tmpVendRebateAgreementLine.skipDataMethods(true);

        // Agreements with the custom item code are using an item list.
        switch (_vendRebateAgreement.ItemRebateCode)
        {
            case TamVendRebateItemCode::Selection:
                InventDim inventDimLine;
                InventDim vendInvoiceTransInventDim = vendInvoiceTrans.inventDim();
                TAMVendRebateItem tamVendRebateItem;

                // Ensure that the item and dimensions on the transaction
                // are also included in the item list if the custom code is selected.
                insert_recordset tmpVendRebateAgreementLine (Currency, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        FromValue, ToValue, RebateUnit, RebateValue, InventDimId)
                    select Currency, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        FromValue, ToValue, RebateUnit, RebateValue
                    from vendRebateAgreementLine
                        where vendRebateAgreementLine.RebateAgreementRefRecId == _vendRebateAgreement.RecId
                    join InventDimID from tamVendRebateItem
                        where tamVendRebateItem.VendRebateAgreementRefRecId == vendRebateAgreementLine.RebateAgreementRefRecId
                            && tamVendRebateItem.ItemID == vendInvoiceTrans.ItemId
                    #TAMRebateInventDimExistsJoin(tamVendRebateItem.InventDimId, inventDimLine, vendInvoiceTransInventDim);
                break;
        
            case TamVendRebateItemCode::All:
            case TamVendRebateItemCode::GroupId:
            case TamVendRebateItemCode::Table:
                insert_recordset tmpVendRebateAgreementLine (Currency, InventDimId, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        FromValue, ToValue, RebateUnit, RebateValue)
                    select Currency, InventdimId, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        FromValue, ToValue, RebateUnit, RebateValue
                    from vendRebateAgreementLine
                    where vendRebateAgreementLine.RebateAgreementRefRecId == _vendRebateAgreement.RecId;
                break;
        }
        tmpVendRebateAgreementLine.skipDataMethods(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendRebateAgreementLineAndCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>TAMVendRebateTable</c> table based on the vendor rebate agreement line
    /// and vendor rebate agreement header.
    /// </summary>
    /// <param name="_tamVendRebateAgreement">
    /// The vendor rebate agreement header record on which the rebate is being created.
    /// </param>
    /// <param name="_tamVendRebateAgreementLine">
    /// The vendor rebate agreement line record on which the rebate is being created.
    /// </param>
    protected void findVendRebateAgreementLineAndCreate(
        TAMVendRebateAgreement      _tamVendRebateAgreement,
        TAMVendRebateAgreementLine  _tamVendRebateAgreementLine)
    {
        TAMVendRebateAgreementLine  vendRebateAgreementLine = _tamVendRebateAgreementLine;
        TAMVendRebateAgreement      vendRebateAgreement     = _tamVendRebateAgreement;
        InventQty                   calcQty;
        UnitOfMeasureSymbol         calcUOM;
        AmountCur                   calcAmt;
        TAMVendRebateAgreementLine  vendRebateAgreementLineMax;

        if (vendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
        {
            calcQty = sumQty;
            calcUOM = vendInvoiceTrans.PurchUnit;
        }
        else
        {
            calcQty = sumCWQty;
            calcUOM = vendInvoiceTrans.pdsCWUnitId();
        }

        if (vendRebateAgreement.RebateTakenFrom == TAMVendRebateTakenFrom::Gross)
        {
            calcAmt = sumGrossAmt;
        }
        else
        {
            calcAmt = sumNetAmt;
        }

        RebateQuantityRequirementContract contract = RebateQuantityRequirementContract::constructWithVariables(calcQty,
                                                                                                               calcUOM,
                                                                                                               vendInvoiceTrans.ItemId,
                                                                                                               vendInvoiceTrans.InventDimId,
                                                                                                               false);

        if ((vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity
                && vendRebateAgreementLine.checkRebateQuantityRequirements(contract))
            ||(vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount
                && vendRebateAgreementLine.checkRebateAmtRequirements(calcAmt)))
        {
            this.createRebate(vendRebateAgreementLine);
        }
        else
        {
            vendRebateAgreementLineMax = TAMVendRebateAgreementLine::selectRebateAgreementLineMax(vendRebateAgreement,
                                                                                                  vendInvoiceTrans,
                                                                                                  calcQty,
                                                                                                  calcUOM,
                                                                                                  vendRebateAgreement.RebateCurrency,
                                                                                                  calcAmt);
            contract.maxRebateLineBreak = true;

            if (vendRebateAgreementLineMax.RecId == vendRebateAgreementLine.RecId
                && ((vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity
                && vendRebateAgreementLine.checkRebateQuantityRequirements(contract)
                ||(vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount
                && vendRebateAgreementLine.checkRebateAmtRequirements(calcAmt, true)))))
            {
                this.createRebate(vendRebateAgreementLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMVendRebateVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TAMVendRebateVendInvoiceTrans</c> table records for which the rebate is creating.
    /// </summary>
    /// <param name="_tamVendRebateVendInvoiceTrans">
    /// The <c>TAMVendRebateVendInvoiceTrans</c> table record.
    /// </param>
    /// <returns>
    /// The rebate transaction related to a vendor invoice transaction.
    /// </returns>
    protected TAMVendRebateVendInvoiceTrans parmTAMVendRebateVendInvoiceTrans(Common _tamVendRebateVendInvoiceTrans = tamVendRebateVendInvoiceTrans)
    {
        if (!prmisDefault(_tamVendRebateVendInvoiceTrans))
        {
            tamVendRebateVendInvoiceTrans = _tamVendRebateVendInvoiceTrans;
        }

        return tamVendRebateVendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>VendInvoiceJour</c> table record for which the vendor rebate is being created.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The <c>VendInvoiceJour</c> table record.
    /// </param>
    /// <returns>
    /// The vendor invoice journal record.
    /// </returns>
    protected VendInvoiceJour parmVendInvoiceJour(Common _vendInvoiceJour = vendInvoiceJour)
    {
        if (!prmisDefault(_vendInvoiceJour))
        {
            vendInvoiceJour = _vendInvoiceJour;
        }

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>VendInvoiceTrans</c> table records for which the vendor rebate is being created.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// The <c>vendInvoiceTrans</c> table records.
    /// </param>
    /// <returns>
    /// The vendor invoice transactions.
    /// </returns>
    protected VendInvoiceTrans parmVendInvoiceTrans(Common _vendInvoiceTrans = vendInvoiceTrans)
    {
        if (!prmisDefault(_vendInvoiceTrans))
        {
            vendInvoiceTrans = _vendInvoiceTrans;
        }

        return vendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTransSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the amount and quantity totals for the vendor rebate.
    /// </summary>
    private void resetTransSums()
    {
        sumCWQty    = 0;
        sumQty      = 0;
        sumGrossAmt = 0;
        sumNetAmt   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the creation of rebates for the vendor invoice transactions.
    /// </summary>
    public void run()
    {
        VendInvoiceTrans            localVendInvoiceTrans;
        TAMVendRebateVendInvoiceTrans   localTAMVendRebateVendInvoiceTrans;

        if (this.validate())
        {
            if (this.parmVendInvoiceTrans())
            {
                localTAMVendRebateVendInvoiceTrans = vendInvoiceTrans.TAMVendRebateVendInvoiceTrans();
                this.parmTAMVendRebateVendInvoiceTrans(localTAMVendRebateVendInvoiceTrans);
                this.calculateSums();
                this.findVendRebateAgreementAndCreate();
            }
            else
            {
                while select localVendInvoiceTrans
                    where localVendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
                       && localVendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
                       && localVendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
                       && localVendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                    join localTAMVendRebateVendInvoiceTrans
                        where localTAMVendRebateVendInvoiceTrans.VendInvoiceTransRecId == localVendInvoiceTrans.Recid
                {
                    this.parmVendInvoiceTrans(localVendInvoiceTrans);
                    this.parmTAMVendRebateVendInvoiceTrans(localTAMVendRebateVendInvoiceTrans);
                    this.resetTransSums();
                    this.calculateSums();
                    this.findVendRebateAgreementAndCreate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>VendInvoiceJour</c> table record.
    /// </summary>
    /// <returns>
    /// true if the vendor invoice journal is present; otherwise false.
    /// </returns>
    protected boolean validate()
    {
        boolean ret = true;

        if (!vendInvoiceJour)
        {
            ret = checkFailed("@PRO44");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>TAMVendRebateFindAndCreate</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TAMVendRebateFindAndCreate</c> class.
    /// </returns>
    public static TAMVendRebateFindAndCreate construct()
    {
        return new TAMVendRebateFindAndCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>TAMVendRebateFindAndCreate</c> class.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The <c>VendInvoiceJour</c> table.
    /// </param>
    /// <returns>
    /// A new instance of <c>TAmVendRebateFindAndCreate</c> class.
    /// </returns>
    public static TAMVendRebateFindAndCreate newFromVendInvoiceJour(
        VendInvoiceJour  _vendInvoiceJour)
    {
        TAMVendRebateFindAndCreate  findAndCreate = TAMVendRebateFindAndCreate::construct();

        findAndCreate.parmVendInvoiceJour(_vendInvoiceJour);

        return findAndCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>TAMVendRebateFindAndCreate</c> class.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The <c>VendInvoiceJour</c> table.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// The <c>VendInvoiceTrans</c> table.
    /// </param>
    /// <returns>
    /// A new instance of <c>TAMVendRebateFindAndCreate</c> class.
    /// </returns>
    public static TAMVendRebateFindAndCreate newFromVendInvoiceTrans(
        VendInvoiceJour  _vendInvoiceJour,
        VendInvoiceTrans _vendInvoiceTrans)
    {
        TAMVendRebateFindAndCreate  findAndCreate = TAMVendRebateFindAndCreate::construct();

        findAndCreate.parmVendInvoiceJour(_vendInvoiceJour);
        findAndCreate.parmVendInvoiceTrans(_vendInvoiceTrans);

        return findAndCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>