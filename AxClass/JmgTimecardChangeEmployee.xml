<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTimecardChangeEmployee</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgTimecardChangeEmployee</c> table lists the variables in the class declaration, and their
/// type and a short description.
/// </summary>
/// <remarks>
///  <list type="table">
///   <item>
///    <description>
///    <c>worker </c>
///    </description>
///    <description>
///    <c>JmgWorkerRecId </c>
///    </description>
///    <description>
///    The worker entered by the user.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>pinCode </c>
///    </description>
///    <description>
///    <c>JmgPINCode </c>
///    </description>
///    <description>
///    The pin code entered by the user.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>dfWorker </c>
///    </description>
///    <description>
///    <c>DialogField </c>
///    </description>
///    <description>
///    Reference to the worker dialog field.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>dfPinCode </c>
///    </description>
///    <description>
///    <c>DialogField </c>
///    </description>
///    <description>
///    Reference to the <c>pinCode</c> dialog field.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>profileDate </c>
///    </description>
///    <description>
///    <c>JmgProfileDate </c>
///    </description>
///    <description>
///    The profile date for which the user is trying to use the electronic timecard.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>caller </c>
///    </description>
///    <description>
///    <c>FormRun </c>
///    </description>
///    <description>
///    Reference to the <c>FormRun</c> object.
///    </description>
///   </item>
///  </list>
///  The following macros are defined in the class declaration:
///  <list type="table">
///   <item>
///    <description>
///    <c>CurrentVersion</c>
///    </description>
///    <description>
///    The current version of the <c>CurrentList</c> macro.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>CurrentList</c>
///    </description>
///    <description>
///    The list of variables that is packed and unpacked by the pack and unpack methods.
///    </description>
///   </item>
///  </list>
///   This class is used in connection with the
///  <c>
///  JmgTimecard
///  </c>
///   form. The class is run when the Change employee button is clicked on the form. The user is
///  prompted for an employee ID, and if the shop floor control parameters requires it, a password. When
///  the user clicks OK, it is validated, that the employee is allowed to use the electronic timecard,
///  and that the entered password is correct.If the class is not run with a reference to a
///  <c>
///  FormRun
///  </c>
///   object in the
///  <c>
///  JmgTimecard
///  </c>
///   form, an error is thrown. When the invocation is complete, the
///  <c>
///  _args
///  </c>
///   object is updated. The
///  <c>
///  _args.parmEnum
///  </c>
///   field returns:
///  <list type="bullet">
///   <item>
///    <description>
///    <c>NoYes::Yes</c> if the user entered a valid employee ID, and, if required, a valid pin code. The
///    <c>_args.parm</c> method will contain the entered employee ID.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>NoYes::No</c> if the user clicked the cancel button.
///    </description>
///   </item>
///  </list>
/// </remarks>
class JmgTimecardChangeEmployee extends RunBase
{
    DialogField         dfWorker;
    DialogField         dfPinCode;

    JmgWorkerRecId      worker;
    JmgPINCode          pinCode;

    boolean             usePinCode;
    JmgProfileDate      profileDate;
    FormRun             caller;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        worker
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPinCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the user has entered the correct pin code.
    /// </summary>
    /// <param name="_jmgEmployee">
    /// A reference to a <c>JmgEmployee</c> record, which refers to the employee ID that is entered by the
    /// user.
    /// </param>
    /// <returns>
    /// true if the user has supplied the correct pin code; otherwise, false.
    /// </returns>
    private boolean checkPinCode(JmgEmployee _jmgEmployee)
    {
        FormControl control;

        if (!_jmgEmployee.validatePINCode(pinCode))
        {
            dfPinCode.value('');
            pinCode = '';
            control = dfPinCode.control();
            control.setFocus();
            return checkFailed("@SYS32086");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the worker entered by the user is valid.
    /// </summary>
    /// <param name="_jmgEmployee">
    /// Reference to the <c>JmgEmployee</c> table that refers to the worker entered by the user.
    /// </param>
    /// <returns>
    /// true if the entered worker is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The entered worker is considered valid, if a record exist in the <c>JmgEmployee</c> table, and that
    /// the employee is active. Furthermore, the worker must be allowed to use electronic timecard.
    /// </remarks>
    private boolean checkWorker(JmgEmployee _jmgEmployee)
    {
        if (!_jmgEmployee                               ||
            !(_jmgEmployee.Active       == NoYes::Yes)  ||
            (_jmgEmployee.ActiveFrom && _jmgEmployee.ActiveFrom >  profileDate))
        {
            return checkFailed(strfmt("@SYS39817", HcmWorker::find(worker).PersonnelNumber));
        }
        else if (_jmgEmployee.UseTimecard == NoYes::No)
        {
            return checkFailed(strfmt("@SYS39913", HcmWorker::find(_jmgEmployee.Worker).PersonnelNumber));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <param name="dialog">
    /// An already initialized dialog can be passed
    /// </param>
    /// <param name="forceOnClient">
    /// Specifies if the dialog must be instantiated on the client
    /// </param>
    /// <returns>
    /// The class that contains the methods described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// The <c>JmgTimecardChangeEmployee</c> class adds an employee ID field and a pin code field to the
    /// dialog.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        const int dialogSize = 0;

        Dialog      ret;
        FormBuildReferenceGroupControl workerControl;

        ret = this.dialogInternal(dialog, forceOnClient);

        ret.formBuildDesign().dialogSize(dialogSize);
        ret.caption("@SCM:SelectWorker");
        dfWorker = ret.addField(extendedtypestr(JmgWorkerRecId));
        workerControl = dfWorker.control();
        workerControl.registerOverrideMethod(identifierstr(LookupReference), methodstr(JmgTimecardChangeEmployee, workerLookup), this);
        ret.parmIsModal(true);

        if (usePinCode)
        {
            dfPinCode = ret.addField(extendedtypestr(JmgPINCode));
            dfPinCode.passwordStyle(true);
        }

        dfWorker.value(worker);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:SelectWorker";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the dialog values to the <c>emplId</c> and <c>pinCode</c> variables after the dialog is
    ///    closed.
    /// </summary>
    /// <returns>
    ///    true if the method was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method assigns values to the <c>emplId</c> and <c>pinCode</c> variables declared in the
    ///    <c>JmgTimecardChangeEmployee.classDeclaration</c> method. At the same time, the employee ID, and
    ///    pin code is validated. If one or both are not valid, false is returned.Remember always to call
    ///    <c>super()</c> when you inherit from this method.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean     ret;
        JmgEmployee jmgEmployee;

        ret = super();

        worker = dfWorker.value();
        jmgEmployee = JmgEmployee::find(worker);
        ret = this.checkWorker(jmgEmployee);

        if (ret && usePinCode)
        {
            pinCode = dfPinCode.value();
            ret = this.checkPinCode(jmgEmployee);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>JmgTimecardChangeEmployee</c> class.
    /// </summary>
    /// <param name="_args">
    /// The arguments to the class.
    /// </param>
    /// <remarks>
    /// The <c>_args.caller</c> method must refer to a <c>FormRun</c> object of type <c>JmgTimecard</c>.
    /// </remarks>
    void new(Args _args)
    {
        super();
        if (!_args          ||
            !_args.caller() ||
            _args.caller().name() != formstr(JmgTimecard))
        {
            throw error("@SYS59121");
        }
        caller = _args.caller();

        usePinCode = JmgParameters::find().UsePINcode;
        profileDate = str2date(caller.args().parm(),123);

        caller.args().parmEnum(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>JmgTimecardChangeEmployee</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>JmgTimecardChangeEmployee</c> class.
    /// </returns>
    /// <remarks>
    ///    When <see cref="M:RunBase.isSwappingPrompt" /> returns true it might be necessary to pack some
    ///    prompt-related variables as well.
    /// </remarks>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>Args</c> object specified in the <c>JmgTimecardChangeEmployee.new</c> method is
    /// updated.
    /// </summary>
    /// <remarks>
    /// The <c>Args</c> object that is specified in the <c>M:JmgTimecardChangeEmployee.new</c> method is
    /// updated. Specifically, the <c>Args.parm</c> parameter is set to the entered employee ID, and the
    /// <c>Args.parmEnum</c> enumeration is set to a <c>NoYes::Yes</c> value.
    /// </remarks>
    public void run()
    {
        super();

        caller.args().parm(int642str(worker));
        caller.args().parmEnum(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version;
        version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a worker lookup form for the specified <c>FormReferenceGroupControl</c> class.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The <c>FormReferenceGroupControl</c> class for which the lookup form is shown.
    /// </param>
    /// <remarks>
    /// This method overrides the lookup method on the <c>FormReferenceGroupControl</c> class that is added
    /// to the dialog in the dialog method.
    /// </remarks>
    private void workerLookup(FormReferenceGroupControl _formReferenceGroupControl)
    {
        JmgEmployee::lookupRegistrationWorker(_formReferenceGroupControl, true, profileDate, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgTimecardChangeEmployee jmgTimecardChangeEmployee = new JmgTimecardChangeEmployee(_args);

        if (jmgTimecardChangeEmployee.prompt())
        {
            jmgTimecardChangeEmployee.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>