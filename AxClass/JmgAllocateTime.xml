<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAllocateTime</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgAllocateTime</c> class is used to allocate time between job registrations when a worker
///    is working on several jobs at the same time.
/// </summary>
public class JmgAllocateTime
{
    Map                     registrations;
    boolean                 distributed;
    int                     allocationKeyCount[];

    JmgFromDateTime         minFromTime;
    JmgToDateTime           maxToTime;

    JmgFromDateTime         sliceFromDateTime[];
    JmgToDateTime           sliceToDateTime[];
    container               sliceJobIds[];
    Hours                   sliceEstimatedTime[];

    int                     noOfslices;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a registration to consider when the time is allocated.
    /// </summary>
    /// <param name="_registrationTableId">
    ///    A reference to the table from where the registration originates.
    /// </param>
    /// <param name="_registrationRecId">
    ///    A reference to the <c>recId</c> object from where the registration originates.
    /// </param>
    /// <param name="_fromTime">
    ///    The start time of the registration
    /// </param>
    /// <param name="_toTime">
    ///    The end time of the registration
    /// </param>
    /// <param name="_estimatedJobTime">
    ///    The time that a given job is expected to last.
    /// </param>
    /// <param name="_allocationKey">
    ///    The allocation key to use when allocating time to this registration.
    /// </param>
    /// <remarks>
    ///    The estimated job time is used when time is allocated according to the estimation allocation key.
    ///    The added registrations are chopped up in time slices. A time slice is a period of time that a
    ///    worker has been working on a specific set of jobs. Consider the following example: A worker has
    ///    been working on job 1 from 8 to 11, and job 2 from 9 to 10. If these two registrations are added
    ///    using this method, this would give you three time slices: Slice 1: From 8 to 9. Jobs: Job 1Slice 2:
    ///    From 9 to 10. Jobs: Job 1, Job 2Slice 3: From 10 to 11. Jobs: Job 1.
    /// </remarks>
    public void addRegistration(
        RefTableId              _registrationTableId,
        RefRecId                _registrationRecId,
        JmgFromDateTime         _fromTime,
        JmgToDateTime           _toTime,
        Hours                   _estimatedJobTime,
        JmgStdBundleTypeEnum    _allocationKey)
    {
        int i;
        registrations.insert([_registrationTableId, _registrationRecId], [_fromTime, _toTime, _estimatedJobTime]);

        if (!minFromTime || minFromTime > _fromTime)
        {
            this.addSlice(_fromTime, minFromTime ? minFromTime : _toTime, connull(), 0);
            minFromTime = _fromTime;
            if (!maxToTime)
            {
                maxToTime = _toTime;
            }
        }
        if (!maxToTime || maxToTime < _toTime)
        {
            this.addSlice(maxToTime ? maxToTime : _fromTime, _toTime, connull(), 0);
            maxToTime   = _toTime;
        }

        for (i = 1; i <= noOfSlices; i++)
        {
            if ((_fromTime   >= sliceFromDateTime[i] &&
                 _fromTime   <  sliceToDateTime[i])  ||
                (_toTime     >  sliceFromDateTime[i] &&
                 _toTime     <= sliceToDateTime[i])  ||
                (_fromTime   <  sliceFromDateTime[i] &&
                 _toTime     >  sliceToDateTime[i])  &&
                _fromTime    <  _toTime)
            {
                if (_fromTime > sliceFromDateTime[i])
                {
                    this.addSlice(sliceFromDateTime[i], _fromTime, sliceJobIds[i], sliceEstimatedTime[i]);
                    sliceFromDateTime[i]    = _fromTime;
                }

                if (_toTime < sliceToDateTime[i])
                {
                    this.addSlice(_toTime, sliceToDateTime[i], sliceJobIds[i], sliceEstimatedTime[i]);
                    sliceToDateTime[i]      = _toTime;
                }
                sliceJobIds[i]             += [[_registrationTableId, _registrationRecId]];
                sliceEstimatedTime[i]      += _estimatedJobTime;
            }
        }

        allocationKeyCount[enum2int(_allocationKey) + 1]++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSlice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a slice to the internal arrays.
    /// </summary>
    /// <param name="_fromDateTime">
    ///    The start time of the slice.
    /// </param>
    /// <param name="_toDateTime">
    ///    The end time of the slice.
    /// </param>
    /// <param name="_jobIds">
    ///    A container with the <c>jobIds</c> object that has been worked on in this particular time slice.
    /// </param>
    /// <param name="_estimatedJobTime">
    ///    The total estimated job time of the slice.
    /// </param>
    /// <remarks>
    ///    A time slice is a period of time, where a worker has been working on a specific set of jobs.
    /// </remarks>
    private void addSlice(
        JmgFromDateTime _fromDateTime,
        JmgToDateTime   _toDateTime,
        container       _jobIds,
        Hours           _estimatedJobTime)
    {
        noOfSlices++;
        sliceFromDateTime[noOfSlices]   = _fromDateTime;
        sliceToDateTime[noOfSlices]     = _toDateTime;
        sliceJobIds[noOfSlices]         = _jobIds;
        sliceEstimatedTime[noOfSlices]  = _estimatedJobTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the calculated allocation key for the currently added registrations.
    /// </summary>
    /// <returns>
    ///    The calculated allocation key
    /// </returns>
    /// <remarks>
    ///    The allocation key for the added registrations is performed by determining the allocation key
    ///    specified more often when registrations were added.
    /// </remarks>
    public JmgStdBundleTypeEnum getAllocationKey()
    {
        JmgStdBundleTypeEnum    allocationKey;
        int                     maxValue;
        int                     i;

        maxValue = 0;
        allocationKey   = JmgProdParameters::find().BundleAllocation;
        for (i = 1; i <= enumcnt(JmgStdBundleTypeEnum); i++)
        {
            if (maxValue < allocationKeyCount[i])
            {
                allocationKey   = i - 1;
                maxValue        = allocationKeyCount[i];
            }
        }
        return allocationKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the time allocated to a specified registration.
    /// </summary>
    /// <param name="_registrationTableId">
    ///    The table ID of the table where the registration originates.
    /// </param>
    /// <param name="_registrationRecId">
    ///    The record ID of the record from where the registration originates.
    /// </param>
    /// <returns>
    ///    The time in seconds that is allocated to the specified registration.
    /// </returns>
    public Hours getTime(RefTableId _registrationTableId, RefRecId _registrationRecId)
    {
        Hours   ret;
        int     i;
        container jobInfo;
        JmgStdBundleTypeEnum    allocationKey;
        ret = 0;
        allocationKey   = this.getAllocationKey();
        for (i = 1; i <= noOfSlices; i++)
        {
            if (confind(sliceJobIds[i], [_registrationTableId, _registrationRecId]) > 0)
            {
                switch (allocationKey)
                {
                    case JmgStdBundleTypeEnum::Estimation:
                        if (registrations.exists([_registrationTableId, _registrationRecId]))
                        {
                            jobInfo = registrations.lookup([_registrationTableId, _registrationRecId]);
                            if (sliceEstimatedTime[i] == 0)
                            {
                                ret += DateTimeUtil::getDifference(sliceToDateTime[i], sliceFromDateTime[i]) / 3600;
                            }
                            else
                            {
                                ret += (DateTimeUtil::getDifference(sliceToDateTime[i], sliceFromDateTime[i]) /3600) * conpeek(jobInfo, 3) / sliceEstimatedTime[i];
                            }
                        }
                        break;
                    case JmgStdBundleTypeEnum::Jobs:
                    case JmgStdBundleTypeEnum::NetTime:
                        ret += (DateTimeUtil::getDifference(sliceToDateTime[i], sliceFromDateTime[i]) /3600) / conlen(sliceJobIds[i]);
                        break;
                    case JmgStdBundleTypeEnum::RealTime:
                        ret += DateTimeUtil::getDifference(sliceToDateTime[i], sliceFromDateTime[i])/3600;
                        break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        registrations   = new Map(Types::Container, Types::Container);
        distributed     = false;
        allocationKeyCount[enum2int(JmgStdBundleTypeEnum::Estimation) + 1] = 0;
        allocationKeyCount[enum2int(JmgStdBundleTypeEnum::Jobs) + 1] = 0;
        allocationKeyCount[enum2int(JmgStdBundleTypeEnum::NetTime) + 1] = 0;
        allocationKeyCount[enum2int(JmgStdBundleTypeEnum::RealTime) + 1] = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>JmgAllocateTime</c> class.
    /// </summary>
    /// <returns>
    /// a new instance of the <c>JmgAllocateTime</c> class.
    /// </returns>
    public static JmgAllocateTime construct()
    {
        JmgAllocateTime ret = new JmgAllocateTime();
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>