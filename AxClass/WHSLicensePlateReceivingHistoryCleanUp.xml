<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateReceivingHistoryCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLicensePlateReceivingHistoryCleanUp</c> class is used to run batch job for deleting license plate receiving registration history logs.
/// </summary>
internal final class WHSLicensePlateReceivingHistoryCleanUp extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private DialogField     dialogDaysToKeep;
    private PositiveDays    daysToKeep;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        daysToKeep
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase drb = super();

        dialogDaysToKeep = drb.addFieldValue(extendedTypeStr(PositiveDays), daysToKeep, "@WAX3411", "@WAX3131");
        drb.allowUpdateOnSelectCtrl(true);

        return drb;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        daysToKeep = dialogDaysToKeep.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    private void cleanup()
    {
        WHSLicensePlateReceivingHistory lpReceivingRegistrationHistory;
        utcDateTime beforeDateTime = this.determineBeforeDateTime();

        using (var committer = WHSRecordDeletionCommitter::construct())
        {
            while select forupdate lpReceivingRegistrationHistory
                where lpReceivingRegistrationHistory.DateTimeOfReceiving < beforeDateTime
            {
                committer.deleteRecord(lpReceivingRegistrationHistory);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBeforeDateTime</Name>
				<Source><![CDATA[
    private utcdatetime determineBeforeDateTime()
    {
        utcDateTime beforeDateTime = DateTimeUtil::utcNow();

        // If they don't want to keep any history then adjust the date so that it is one day in the future.
        if (daysToKeep == 0)
        {
            beforeDateTime = DateTimeUtil::addDays(beforeDateTime, 1);
        }
        else
        {
            beforeDateTime = DateTimeUtil::addDays(beforeDateTime, -daysToKeep);
        }

        return beforeDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            #OCCRetryCount

            try
            {
                this.cleanup();
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WHSLicensePlateReceivingHistoryCleanUp construct()
    {
        return new WHSLicensePlateReceivingHistoryCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX:WHSLicensePlateReceivingHistoryCleanUp_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        WHSLicensePlateReceivingHistoryCleanUp lpRegistrationCleanUp = WHSLicensePlateReceivingHistoryCleanUp::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(lpRegistrationCleanUp))
        {
            if (lpRegistrationCleanUp.prompt())
            {
                lpRegistrationCleanUp.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WHSLicensePlateReceivingHistoryCleanUp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSLicensePlateReceivingHistoryCleanUp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>