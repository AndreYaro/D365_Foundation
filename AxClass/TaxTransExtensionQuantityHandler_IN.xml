<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransExtensionQuantityHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransExtensionQuantityHandler_IN</c> class is the handler of the tax transaction extension quantity.
/// </summary>
public class TaxTransExtensionQuantityHandler_IN extends TaxTransExtensionHandler_IN
{
    TaxModelExciseTaxable_IN taxModelExciseTaxable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the TaxTrans extension
    /// </summary>
    public void init()
    {
        super();
        taxModelExciseTaxable = taxModelTaxable as TaxModelExciseTaxable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data to the TaxTrans extension.
    /// </summary>
    public void setData()
    {
        super();
        this.setDataTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataCustTable</Name>
				<Source><![CDATA[
        protected void setDataCustTable(CustTable _custTable)
    {
        TaxInformation_IN taxInformation;
        super(_custTable);

        taxInformation = TaxInformation_IN::findDefaultByLocation(DirParty::primaryPostalAddressLocationRecId(_custTable.Party));
        this.setDataPartyRegisteration(taxInformation);

        taxTransExtension.CommissionarateCustomerMaster    = taxInformation.Commissionarate;
        taxTransExtension.DivisionCustomerMaster           = taxInformation.Division;
        taxTransExtension.CustomerAddress                  = LogisticsPostalAddress::findByLocation(taxInformation.RegistrationLocation).Address;
        taxTransExtension.RangeCustomerMaster              = taxInformation.Range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataPartyRegisteration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data party registeration.
    /// </summary>
    /// <param name="_taxInformation">
    /// The tax information.
    /// </param>
    protected void setDataPartyRegisteration(TaxInformation_IN _taxInformation)
    {
        taxTransExtension.CustVendRegistrationNumber = _taxInformation.getTaxRegistrationNumbersTable(TaxType_IN::Excise, taxModelExciseTaxable.getExciseType()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax information.
    /// </summary>
    protected void setDataTax()
    {
        this.setDataTaxExcise();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax excise.
    /// </summary>
    protected void setDataTaxExcise()
    {
        taxTransExtension.CompanyRegistrationNumber  = taxModelExciseTaxable.getExciseTaxRegistrationRefRecId();
        taxTransExtension.Consignment                = taxModelExciseTaxable.isExciseConsignment();
        taxTransExtension.DirectSettlement           = taxModelExciseTaxable.getExciseDirectSettlement();
        taxTransExtension.ExciseRecordType           = taxModelExciseTaxable.getExciseRecordType();
        taxTransExtension.ExciseTariffCodes          = taxModelExciseTaxable.getExciseTariffCodeRefRecId();
        taxTransExtension.RegistrationNumberType     = taxModelExciseTaxable.getExciseType();
        taxTransExtension.TaxType                    = TaxType_IN::Excise;
        this.setDataTaxPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax period data
    /// </summary>
    protected void setDataTaxPeriod()
    {
        TaxGroup        taxgroup;
        TaxItemGroup    taxItemGoup;
        TaxGroupData    taxGroupData;
        TaxOnItem       taxOnItem;
        TaxTable        taxTableLoc;
        TaxCode         taxCode;

        taxItemGoup = taxModelTaxable.getTaxItemGroup();

        if (taxItemGoup)
        {
            taxgroup = taxModelTaxable.getTaxGroup();
        }

        if (taxItemGoup && taxgroup)
        {
            select firstonly RecId, TaxCode from taxGroupData
                where taxGroupData.TaxGroup == taxgroup
                join TaxItemGroup, TaxCode from taxOnItem
                    where taxOnItem.TaxItemGroup == taxItemGoup
                        && taxOnItem.TaxCode     == taxGroupData.TaxCode
                        join RecId, TaxPeriod from taxTableLoc
                            where taxTableLoc.TaxCode     == taxOnItem.TaxCode
                                && taxTableLoc.TaxType_IN == TaxType_IN::Excise;
        }
        else
        {
            taxCode = taxModelTaxable.getTaxCode();
            if (taxcode)
            {
                taxTableLoc = TaxTable::find(taxCode);
            }
        }

        if (taxTableLoc)
        {
            taxTransExtension.TaxPeriod = taxTableLoc.TaxPeriod;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTransactions</Name>
				<Source><![CDATA[
        protected void setDataTransactions(TableId _sourceTableId, RecId _sourceRecId)
    {
        switch (_sourceTableId)
        {
            case tableNum(VendPackingSlipTrans) :
                this.setDataVendPackingSlipTrans(VendPackingSlipTrans::findRecId(_sourceRecId));
                break;
            default :
                super(_sourceTableId, _sourceRecId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataVendPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data vend packing slip journal.
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    /// The vend packing slip journal.
    /// </param>
    protected void setDataVendPackingSlipJour(VendPackingSlipJour _vendPackingSlipJour)
    {
        taxTransExtension.PurchasePackingSlipDate        = _vendPackingSlipJour.DeliveryDate;
        taxTransExtension.PurchasePackingSlipNumber      = _vendPackingSlipJour.PackingSlipId;

        taxTransExtension.Voucher = VendPackingSlipVersion::findLatest(_vendPackingSlipJour.RecId).LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data vend packing slip transaction.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    /// The vend packing slip transaction.
    /// </param>
    protected void setDataVendPackingSlipTrans(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        PurchLine purchLine;
        VendPackingSlipJour  vendPackingSlipJour;
        InventDim inventDim;

        taxTransExtension.LineNum                       = _vendPackingSlipTrans.LineNum;
        taxTransExtension.Unit                          = _vendPackingSlipTrans.PurchUnit;
        taxTransExtension.PurchaseItem                  = taxTransExtension.ItemId;
        taxTransExtension.PurchasePackingSlipQuantity   = taxTransExtension.Quantity;

        inventDim = InventDim::find(_vendPackingSlipTrans.InventDimId);
        if (inventDim)
        {
            this.setDataInventDim(inventDim);
        }

        purchLine = PurchLine::findInventTransId(taxModelTaxable.getInventTransId());
        if (purchLine)
        {
            this.setDataPurchLine(purchLine);
        }

        vendPackingSlipJour = _vendPackingSlipTrans.VendPackingSlipJour();
        if (vendPackingSlipJour)
        {
            this.setDataVendPackingSlipJour(vendPackingSlipJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataVendTable</Name>
				<Source><![CDATA[
        protected void setDataVendTable(VendTable _vendTable)
    {
        TaxInformation_IN taxInformation;

        super(_vendTable);

        taxInformation = TaxInformation_IN::findDefaultByLocation(DirParty::primaryPostalAddressLocationRecId(_vendTable.Party));
        this.setDataPartyRegisteration(taxInformation);

        taxTransExtension.CommissionarateVendorMaster    = taxInformation.Commissionarate;
        taxTransExtension.DivisionVendorMaster           = taxInformation.Division;
        taxTransExtension.VendorAddress                  = LogisticsPostalAddress::findByLocation(taxInformation.RegistrationLocation).Address;
        taxTransExtension.RangeVendorMaster              = taxInformation.Range;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>