<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalTransSaver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Aggregate and save journal transes and information about payment request that originated journal trans.
/// </summary>
public class CFMJournalTransSaver
{
    RecordSortedList recordSortedList;
    RecordSortedList rslAnalyticDataEditUncommitted;
    CFMLedgerDimensionConverterCache cfmDimensionConverter;
    Boolean groupByLedgerDim;
    Map logMap;
    Set reverseLogSource;
    container aggregationFieldsContainer;
    Set aggregationFieldsSet;
    container aggregationDimensionsContainer;
    container sortFieldCon;
    CFMJournalType journalType;
    RefRecId journalRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CFMJournalTransSaver</c> class
    /// </summary>
    /// <param name="_journalTable">
    /// The table buffer of <c>CFMJournalTable</c> type
    /// </param>
    /// <returns>
    /// A new instance of the <c>CFMJournalTransSaver</c> class.
    /// </returns>
    public static CFMJournalTransSaver constructFromJournal(CFMJournalTable _journalTable)
    {
        CFMJournalTransSaver journalTransSaver = new CFMJournalTransSaver();

        journalTransSaver.initialize(_journalTable);

        return journalTransSaver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new line to aggregate data.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> record to add.
    /// </param>
    /// <param name="_sourceRefRecId">
    /// Record id of source record for logging; optional.
    /// </param>
    /// <param name="_sourceHeaderRefRecId">
    /// Record id of header of source record for logging; optional.
    /// </param>
    /// <remarks>
    /// If source line contains changes, this method adds reverece and correction lines as well
    /// </remarks>
    public void addLine(CFMJournalTrans _journalTrans, RefRecId _sourceRefRecId = 0, RefRecId _sourceHeaderRefRecId = 0)
    {
        void addLine(CFMJournalTrans _localJournalTrans)
        {
            CFMJournalTrans journalTransFind;

            journalTransFind.data(_localJournalTrans);

            if (recordSortedList.find(journalTransFind))
            {
                journalTransFind.PaymentAmount += _localJournalTrans.PaymentAmount;
            }

            recordSortedList.ins(journalTransFind, true);

            if (_sourceRefRecId)
            {
                if (_localJournalTrans.CorrectionType == CFMCorrectionType::Reverse)
                {
                    reverseLogSource.add([journalTransFind.SourceType, _sourceHeaderRefRecId]);
                }
                else
                {
                    logMap.insert([_sourceHeaderRefRecId, _sourceRefRecId], journalTransFind);
                }
            }
        }

        addLine(_journalTrans);

        if (_journalTrans.TransDateChanged && _sourceHeaderRefRecId)
        {
            CFMJournalTrans journalTrans;

            journalTrans.data(_journalTrans);

            journalTrans.Uncommitted = NoYes::Yes;
            journalTrans.CorrectionType = CFMCorrectionType::Reverse;
            journalTrans.PaymentAmount = -journalTrans.PaymentAmount;
            addLine(journalTrans);

            journalTrans.CorrectionType = CFMCorrectionType::Correction;
            journalTrans.PaymentAmount = journalTrans.PaymentAmountChanged;
            journalTrans.TransDate = journalTrans.TransDateChanged;
            addLine(journalTrans);

            CFMAnalyticDataEditUncommitted analyticDataEditUncommitted;

            analyticDataEditUncommitted.SourceType = journalTrans.SourceType;
            analyticDataEditUncommitted.SourceRefRecId = _sourceHeaderRefRecId;

            if (!rslAnalyticDataEditUncommitted.find(analyticDataEditUncommitted))
            {
                analyticDataEditUncommitted.initFromPaymentRequest(CFMPaymentRequestTable::findRecID(_sourceHeaderRefRecId));
                analyticDataEditUncommitted.JournalTable = journalRecId;
                analyticDataEditUncommitted.DueDate = journalTrans.TransDateChanged;
                rslAnalyticDataEditUncommitted.ins(analyticDataEditUncommitted);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPaymentRequestLogs</Name>
				<Source><![CDATA[
    private void addPaymentRequestLogs()
    {
        RecId sourceHeader;

        RecordInsertList recordInsertListLogs = new RecordInsertList(tableNum(CFMJournalTransLog),
            true,
            true,
            true);

        if (reverseLogSource)
        {
            SetEnumerator setEnumerator = reverseLogSource.getEnumerator();

            while(setEnumerator.moveNext())
            {
                CFMJournalTransSourceType sourceType;

                [sourceType, sourceHeader] = setEnumerator.current();

                CFMJournalTransLog journalTransLogReversed;

                update_recordSet journalTransLogReversed
                    setting outdated = NoYes::Yes, Uncommitted = NoYes::Yes
                    where journalTransLogReversed.SourceType == sourceType
                       && journalTransLogReversed.SourceHeader == sourceHeader
                       && journalTransLogReversed.JournalType  == journalType
                       && journalTransLogReversed.Outdated == NoYes::No
                       && journalTransLogReversed.JournalTable == journalRecId;

            }
        }

        if (logMap)
        {
            MapEnumerator mapEnumerator = logMap.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                RefRecId source;

                CFMJournalTrans journalTrans = mapEnumerator.currentValue();
                [sourceHeader, source] = mapEnumerator.currentKey();

                if (!recordSortedList.find(journalTrans))
                {
                    continue;
                }

                CFMJournalTransLog journalTransLog;

                journalTransLog.clear();

                journalTransLog.Uncommitted = journalTrans.Uncommitted;
                journalTransLog.Outdated = (journalTransLog.Uncommitted && journalTrans.CorrectionType == CFMCorrectionType::None);
                journalTransLog.JournalTrans = journalTrans.RecId;
                journalTransLog.JournalTable = journalRecId;
                journalTransLog.JournalType = journalType;
                journalTransLog.SourceType = CFMJournalTransSourceType::PaymentRequest;
                journalTransLog.SourceHeader = sourceHeader;
                journalTransLog.Source = source;

                recordInsertListLogs.add(journalTransLog);
            }
            recordInsertListLogs.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFinancialDimension</Name>
				<Source><![CDATA[
    public RefRecId convertFinancialDimension(RecId _financialDimension, NoYes _convertAsDefaultDim)
    {
        RefRecId ret;

        if (groupByLedgerDim)
        {
            if (_convertAsDefaultDim)
            {
                ret = cfmDimensionConverter.convertDefaultDimension(_financialDimension);
            }
            else
            {
                ret = cfmDimensionConverter.convertLedgerDimension(_financialDimension);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flush</Name>
				<Source><![CDATA[
    public void flush()
    {
        recordSortedList.insertDatabase();
        rslAnalyticDataEditUncommitted.insertDatabase();
        this.addPaymentRequestLogs();

        this.initPaymentRequestLogMap();
        this.initRecordSortedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize internal data from <c>CFMJournalTable</c> cursor
    /// </summary>
    /// <param name="_journalTable">
    /// The table buffer of <c>CFMJournalTable</c> type
    /// </param>
    private void initialize(CFMJournalTable _journalTable)
    {
        aggregationFieldsContainer = _journalTable.aggregationFieldIdsContainer();
        aggregationDimensionsContainer = _journalTable.aggregationDimensionsContainer();

        cfmDimensionConverter = CFMLedgerDimensionConverterCache::construct();
        cfmDimensionConverter.setAggregationDimensions(aggregationDimensionsContainer);

        journalType = _journalTable.JournalType;
        journalRecId = _journalTable.RecId;

        sortFieldCon = [fieldNum(CFMJournalTrans, CorrectionType)] +
                       [fieldNum(CFMJournalTrans, TransDate)] +
                       [fieldNum(CFMJournalTrans, CurrencyCode)] +
                       [fieldNum(CFMJournalTrans, SourceType)] +
                        aggregationFieldsContainer;

        if (conLen(aggregationDimensionsContainer))
        {
            groupByLedgerDim = true;
            sortFieldCon += [fieldNum(CFMJournalTrans, LedgerDimension)];
        }

        this.initRecordSortedList();
        this.initPaymentRequestLogMap();

        aggregationFieldsSet = new Set(Types::Integer);

        for (int i = 1; i <= conLen(sortFieldCon); i++)
        {
            aggregationFieldsSet.add(conPeek(sortFieldCon, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentRequestLogMap</Name>
				<Source><![CDATA[
    private void initPaymentRequestLogMap()
    {
        logMap = new Map(Types::Container, Types::Record);
        reverseLogSource = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    private void initRecordSortedList()
    {
        recordSortedList = new RecordSortedList(tableNum(CFMJournalTrans));
        recordSortedList.sortOrderFromContainer(sortFieldCon);

        rslAnalyticDataEditUncommitted = new RecordSortedList(tableNum(CFMAnalyticDataEditUncommitted));
        rslAnalyticDataEditUncommitted.sortOrderFromContainer([fieldNum(CFMAnalyticDataEditUncommitted, SourceRefRecId), fieldNum(CFMAnalyticDataEditUncommitted, SourceType)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Answers the question is a field chosen for the aggregation of information.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field to check whether it is chosen.
    /// </param>
    /// <returns>
    /// true if field is chosen for aggregation; otherwise, false.
    /// </returns>
    public boolean isFieldActive(FieldId _fieldId)
    {
        return aggregationFieldsSet.in(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>CFMJournalTransSaver</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>