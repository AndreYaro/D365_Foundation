<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjWIPProj2PrdDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjWIPProj2PrdDP</c> class provides data for the
///    <c>ProjListProjWIPProj2ColumnPeriod</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementProject)),
    SRSReportParameterAttribute(classstr(ProjListProjWIPContract))
]

class ProjListProjWIPProj2PrdDP extends SRSReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    NoYes                   timeMaterialBillingMethod;
    NoYes                   fixedPriceBillingMethod;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    TransDate               ledgerFromDate1;
    TransDate               ledgerToDate1;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;
    Level                   level;
    boolean                 skipBlankId;
    boolean                 skipZero;

    ProjListProjWIPTmp              projListProjWIPTmp;
    ProjListProjTrans_WIP           listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    projListProjTrans2Period        listProjTrans2Period;
    ProjListProjHelpClass           period1ProjHelpClass;
    ProjListProjHelpClass           period2ProjHelpClass;

    NumberSequenceFormat    oldLevelFormat;

    QueryRun    queryRun;
    ProjId      projIdFound;
    ProjId      projId;

    ProjQty     period1Qty, period2Qty;
    AmountMST   period1WIPCostprice, period2WIPCostprice, period1WIPsalesprice, period2WIPsalesprice, period1Net, period2Net;
    int         showCostValue, showGross, showNet, showOnAccount, showQtyHour, showSalesValue;
    str         costValueLabel, salesValueLabel, netLabel, period1Label, period2Label, headerLabel;
    int         hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        period1ProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        period1ProjHelpClass.setParmField();

        period2ProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        period2ProjHelpClass.setParmField();

        if ((amountQty == ProjAmountQty::Qty) || (amountQty == ProjAmountQty::AmountQty))
        {
            period1Qty          += period1ProjHelpClass.parmProjStatement().b300_Gross_qty();
            period2Qty          += period2ProjHelpClass.parmProjStatement().b300_Gross_qty();
        }

        period1Net          += period1ProjHelpClass.parmProjStatement().b500_Net();
        period1WIPCostprice += period1ProjHelpClass.parmProjStatement().b300_Gross();
        period1WIPsalesprice+= period1ProjHelpClass.parmProjStatement().b400_wip_Invoiced_OnAccount();

        period2Net          += period2ProjHelpClass.parmProjStatement().b500_Net();
        period2WIPCostprice += period2ProjHelpClass.parmProjStatement().b300_Gross();
        period2WIPsalesprice+= period2ProjHelpClass.parmProjStatement().b400_wip_Invoiced_OnAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the parameters to determine if the line should be printed.
    /// </summary>
    /// <returns>
    ///    true if the line should be printed; otherwise, false.
    /// </returns>
    boolean checkPrintLine()
    {
        if ((!skipZero || this.lineValue()) && listProjTransLayout.canPrintId(period1ProjHelpClass.id()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLineOne</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates whether the line should be printed and inserts it into the temporary table.
    /// </summary>
    /// <param name="projTableLocal">
    ///    A record buffer that contains information about a project.
    /// </param>
    void executeLineOne(ProjTable projTableLocal)
    {
        if (stateProjType == ProjListStateProjType::Project)
        {
            if ((projTableLocal.level() <= level) ||
                (projTableLocal.levelFormat(level)   != oldLevelFormat))
            {
                if (this.checkPrintLine())
                {
                    period1ProjHelpClass.setName();
                    this.insertProjListProjWIPTmp();
                    this.setFieldZero();
                }
            }
        }
        else if (this.checkPrintLine())
        {
            period1ProjHelpClass.setName();
            this.insertProjListProjWIPTmp();
            this.setFieldZero();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </returns>

    [SRSReportDataSetAttribute('ProjListProjWIPTmp')]
    public ProjListProjWIPTmp getProjListProjWIPTmp()
    {
        select * from projListProjWIPTmp;

        return projListProjWIPTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans2Period = projListProjTrans2Period::construct(ProjListStateType::WIP, ProjListStateId::Project);
        listProjTrans = listProjTrans2Period.getProjListProjTrans1();
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans2Period.getProjListProjTrans1());

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);
        listProjTrans.parmRevenue(revenue);
        listProjTrans.parmOnAcc(onAcc);

        listProjTrans2Period.parmPeriod1FromDate(ledgerFromDate);
        listProjTrans2Period.parmPeriod1ToDate(ledgerToDate);
        listProjTrans2Period.parmPeriod2FromDate(ledgerFromDate1);
        listProjTrans2Period.parmPeriod2ToDate(ledgerToDate1);
        listProjTrans2Period.parmColumnData(actualVsBudget);
        listProjTrans2Period.parmForecastModelId(forecastModelId);

        listProjTrans.parmColumnData(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmLevel(level);
        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjWIPTmp()
    {
        projListProjWIPTmp.clear();

        projListProjWIPTmp.Id   = period1ProjHelpClass.id();
        projListProjWIPTmp.Name = period1ProjHelpClass.name();

        projListProjWIPTmp.CostValue  = listProjTransLayout.showAmountReport(period1WIPCostprice);
        projListProjWIPTmp.CostValue1 = listProjTransLayout.showAmountReport(period2WIPCostprice);

        projListProjWIPTmp.SalesValue = listProjTransLayout.showAmountReport(period1WIPsalesprice);
        projListProjWIPTmp.SalesValue1= listProjTransLayout.showAmountReport(period2WIPsalesprice);

        projListProjWIPTmp.Net        = listProjTransLayout.showAmountReport(period1Net);
        projListProjWIPTmp.Net1       = listProjTransLayout.showAmountReport(period2Net);

        projListProjWIPTmp.QtyHour    = listProjTransLayout.showAmountReport(period1Qty);
        projListProjWIPTmp.QtyHour1   = listProjTransLayout.showAmountReport(period2Qty);

        // set labels
        projListProjWIPTmp.IdLabel         = strfmt('%1',stateProjType);
        projListProjWIPTmp.HeaderLabel     = headerLabel;
        projListProjWIPTmp.PeriodLabel     = period1Label;
        projListProjWIPTmp.PeriodLabel1    = period2Label;
        projListProjWIPTmp.CostValueLabel  = costValueLabel;
        projListProjWIPTmp.SalesValueLabel = salesValueLabel;
        projListProjWIPTmp.NetLabel        = netLabel;

        // set field visibility
        projListProjWIPTmp.ShowNet        = showNet;
        projListProjWIPTmp.ShowQtyHour    = showQtyHour;
        projListProjWIPTmp.ShowSalesValue = showSalesValue;
        projListProjWIPTmp.ShowCostValue  = showCostValue;

        // set decimals
        projListProjWIPTmp.DecimalAmount  = amountDecimals;
        projListProjWIPTmp.DecimalHourQty = hourQtyDecimals;

        projListProjWIPTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether if the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise, false.
    /// </returns>
    boolean lineValue()
    {
        return ((period1WIPCostprice    != 0) ||
                (period2WIPCostprice    != 0) ||
                (period1WIPsalesprice   != 0) ||
                (period2WIPsalesprice   != 0) ||
                (period1Qty             != 0) ||
                (period2Qty             != 0) ||
                (period1Net             != 0) ||
                (period2Net             != 0 ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource qbdsProjTable = queryRun.query().dataSourceTable(tablenum(ProjTable));
        qbdsProjTable.addSortField(fieldnum(ProjTable, ProjId));

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = queryRun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
            PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
                qbdsPSAContractLineItems,
                hour,
                expenses,
                revenue,
                item,
                false);
        }
        else
        {
            QueryBuildRange rangeHide = qbdsProjTable.addRange(fieldnum(ProjTable, Type));
            rangeHide.status(RangeStatus::Hidden);

            if (timeMaterial)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Investment));
            }

            if (internalCost)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Cost));
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Internal));
            }

            if (!(timeMaterial || fixedPrice || investment || internalCost))
            {
                QueryBuildRange rangeDummy = qbdsProjTable.addRange(fieldnum(ProjTable, Type));
                rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (skipZero)
        {
            QueryBuildDataSource qbdsProjectTrans;

            if (actualVsBudget == ProjListColumnData::Actual)
            {
                qbdsProjectTrans = qbdsProjTable.addDataSource((tablenum(ProjTransPosting)));
                qbdsProjectTrans.joinMode(JoinMode::ExistsJoin);
                qbdsProjectTrans.addLink(FieldNum(ProjTable, ProjId), FieldNum(ProjTransPosting, ProjId));
                qbdsProjectTrans.addRange(fieldnum(ProjTransPosting, LedgerTransDate)).value(queryValue(listProjTrans2Period.parmPeriod1FromDate()) + '..' + queryValue(listProjTrans2Period.parmPeriod1ToDate()));
                qbdsProjectTrans.addRange(fieldnum(ProjTransPosting, LedgerTransDate)).value(queryValue(listProjTrans2Period.parmPeriod2FromDate()) + '..' + queryValue(listProjTrans2Period.parmPeriod2ToDate()));
            }
            else
            {
                qbdsProjectTrans = qbdsProjTable.addDataSource((tablenum(ProjTransBudget)));
                qbdsProjectTrans.joinMode(JoinMode::ExistsJoin);
                qbdsProjectTrans.addLink(FieldNum(ProjTable, ProjId), FieldNum(ProjTransBudget, ProjId));
                qbdsProjectTrans.addRange(fieldnum(ProjTransBudget, LedgerTransDate)).value(queryValue(listProjTrans2Period.parmPeriod1FromDate()) + '..' + queryValue(listProjTrans2Period.parmPeriod1ToDate()));
                qbdsProjectTrans.addRange(fieldnum(ProjTransBudget, LedgerTransDate)).value(queryValue(listProjTrans2Period.parmPeriod2FromDate()) + '..' + queryValue(listProjTrans2Period.parmPeriod2ToDate()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project level and calls the <c>calculate</c> method.
    /// </summary>
    void printProject()
    {
        ProjTable           projTableLocal;
        ProjFundingSource   projFundingSourceLocal;

        projTableLocal  = queryRun.get(tablenum(ProjTable));
        projIdFound     = projTableLocal.ProjId;
        projId          = ProjListProjHelpClass::setProjId(projTableLocal,stateProjType,level);

        if (stateProjType == ProjListStateProjType::FundingSource)
        {
            projFundingSourceLocal = queryRun.get(tablenum(ProjFundingSource));
        }
        period1ProjHelpClass.setId(projTableLocal, projId, projFundingSourceLocal);

        if (! listProjTransLayout.canPrintId(period1ProjHelpClass.idNew()))
        {
            period1ProjHelpClass.setOld();

            return;
        }

        if (period1ProjHelpClass.checkIdChanged())
        {
            this.executeLineOne(projTableLocal);
        }

        this.calculate();

        period1ProjHelpClass.setOld();
        oldLevelFormat  = projTableLocal.levelFormat(listProjTransLayout.parmLevel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. This method should compute the data and populate the
    ///    data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjWIPContract contract = this.parmDataContract() as ProjListProjWIPContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();

        timeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();
        revenue = contract.parmRevenue();
        onAcc = contract.parmOnAcc();

        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();
        ledgerFromDate1 = contract.parmLedgerFromDate1();
        ledgerToDate1 = contract.parmLedgerToDate1();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        stateProjType = contract.parmStateProjType();
        level = contract.parmLevel();
        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        this.initProjListTrans();

        period1Label = listProjTrans2Period.formatPeriodLabel("@SYS9308",1,DateFlags::None);
        period2Label = listProjTrans2Period.formatPeriodLabel("@SYS13183",2,DateFlags::None);
        headerLabel = listProjTrans2Period.formatSelection(showAmount);

        netLabel = "@SYS78442";
        salesValueLabel = "@SYS82747";
        costValueLabel = listProjTrans.setDisplayLabel2PeriodColumn(hour, expenses, item, revenue, onAcc);

        [showQtyHour, showNet, showSalesValue, showCostValue] = listProjTrans.setDisplayFlags2PeriodColumn(hour, expenses, item,
                                                                            revenue, onAcc, amountQty);

        [hourQtyDecimals, amountDecimals,
         grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        period1ProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                            projStatement::newProjListWIP(
                                                listProjTrans2Period.getProjListProjTrans1(),
                                                projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) ,
                                                amountQty,
                                                forecastModelId),
                                            stateProjType);

        period2ProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                            projStatement::newProjListWIP(
                                                listProjTrans2Period.getProjListProjTrans2(),
                                                projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) ,
                                                amountQty,
                                                forecastModelId),
                                            stateProjType);

        queryRun = new QueryRun(this.parmQuery());

        this.modifyQuery();
        this.setSortField();

        while (queryRun.next())
        {
            this.printProject();
        }

        if (this.checkPrintLine())
        {
            period1ProjHelpClass.setName();
            this.insertProjListProjWIPTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the variables to zero.
    /// </summary>
    void setFieldZero()
    {
        period1Net          = 0;
        period1WIPCostprice = 0;
        period1WIPsalesprice= 0;
        period1Qty          = 0;

        period2Net          = 0;
        period2WIPCostprice = 0;
        period2WIPsalesprice= 0;
        period2Qty          = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sort field for the query.
    /// </summary>
    void setSortField()
    {
        queryRun.query().dataSourceTable(tablenum(ProjTable)).sortClear();

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjId));
                break;

            case ProjListStateProjType::Customer:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,CustAccount));
                break;

            case ProjListStateProjType::ProjGroup:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjGroupId));
                break;

            case ProjListStateProjType::WIPProject:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,wipProject));
                break;

            case ProjListStateProjType::InvoiceProject:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));
                break;

            case ProjListStateProjType::ResponsibleSales:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleSales));
                break;

            case ProjListStateProjType::Responsible:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsible));
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleFinancial));
                break;

            case ProjListStateProjType::Type:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,Type));
                break;

            case ProjListStateProjType::Sorting1:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;

            case ProjListStateProjType::Sorting2:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;

            case ProjListStateProjType::Sorting3:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;

            case ProjListStateProjType::Asset:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,AssetId));
                break;

            case ProjListStateProjType::FundingSource:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));

                queryRun.query().dataSourceTable(tablenum(ProjTable)).addDataSource(tablenum(ProjInvoiceTable));
                queryRun.query().dataSourceTable(tablenum(ProjInvoiceTable)).joinMode(JoinMode::InnerJoin);
                queryRun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addLink(fieldnum(ProjTable,ProjInvoiceProjId),fieldnum(ProjInvoiceTable,ProjInvoiceProjId));

                queryRun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addDataSource(tablenum(ProjFundingSource));
                queryRun.query().dataSourceTable(tablenum(ProjFundingSource)).joinMode(JoinMode::InnerJoin);
                queryRun.query().dataSourceTable(tablenum(ProjFundingSource)).addLink(fieldnum(ProjInvoiceTable,ProjInvoiceProjId), fieldnum(ProjFundingSource,ContractId));
                queryRun.query().dataSourceTable(tablenum(ProjFundingSource)).addSortField(fieldnum(ProjFundingSource,FundingSourceId));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>