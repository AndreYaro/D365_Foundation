<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConnSCMonitoringUtilities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Sets the store connect parameters and messages for the actions cancelled by user.
/// </summary>
public class RetailConnSCMonitoringUtilities
{
    // MACRO defs
    // monitor jobs
    #define.M1000('M-1000')  // for updating job status
    #define.M1010('M-1010')  // for update TS profile

    // tables
    #define.IncomingMessagesTable('#GPDD_INCOM')
    #define.OutgoingMessagesTable('#GPDD_OUTGO')

    // columns


    #RetailConn
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelIncomingPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a connection with the client, sets the message and ends the connection.
    /// Sets the fields to cancel the incoming packet from the server.
    /// </summary>
    /// <param name="_scProfile">
    /// Store Connect profile
    /// </param>
    /// <param name="_keyPackageNo">
    /// The incoming packet number.
    /// </param>
    /// <param name="_keyService">
    /// The service name for the connection.
    /// </param>
    /// <returns>
    /// true, if the request is sent to client.
    /// </returns>
    boolean cancelIncomingPackage(RetailConnStoreConnectProfile _scProfile, RetailConnPackageNum _keyPackageNo, RetailConnSCServiceName _keyService)
    {
        /*
        CLRObject scClient = new CLRObject(#SCClientCLRType);
        Microsoft.Dynamics.Retail.StoreConnect.Request.SCMonitoring.SCCancelIncomingMessageRequest request;
        Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponse response;
        CLRObject responseTemp;
        Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponseHandler handler = new Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponseHandler();
        boolean ipsec;
        boolean preferIPV6;
        str connStr;
        int resultCode;
        ;

        if ((_scProfile.Port < 0) || (_scProfile.Port > 65535))
        {
            error(strfmt("@RET634", _scProfile.Port));
            return false;
        }

        ipsec = !_scProfile.NoIPSec;
        preferIPV6 = _scProfile.PreferIPV6;
        connStr = _scProfile.Name + #SCMonConnectionString;

        scClient.CreateConnection(_scProfile.Server, _scProfile.Port, connStr, true, ipsec, preferIPV6);
        scClient.SetJobId(#M1010);
        scClient.SetMsgId(strfmt("%1; %2; %3", #M1000, #IncomingMessagesTable, _keyPackageNo));

        request = new Microsoft.Dynamics.Retail.StoreConnect.Request.SCMonitoring.SCCancelIncomingMessageRequest(_keyService, _keyPackageNo);
        responseTemp = scClient.Send(request, handler);
        response = responseTemp as Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponse;

        if (!response)
        {
            error(RetailConnReplicationUtilities::GetErrorString(scClient.GetLastError()));
            return false;
        }

        scClient.Disconnect();

        resultCode = response.get_ResultCode();

        if (resultCode != 0)
        {
            error(response.get_ErrorMessage());
            error(response.get_DetailedErrorMessage());
            return false;
        }
        */
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOutgoingPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a connection with the client, sets the message and ends the connection.
    /// Sets the fields to cancel the outgoing packet from the server.
    /// </summary>
    /// <param name="_scProfile">
    /// Store Connect profile.
    /// </param>
    /// <param name="_keyPackageNo">
    /// The incoming packet number.
    /// </param>
    /// <param name="_keyService">
    /// The service name for the connection.
    /// </param>
    /// <param name="_keyConnStr">
    /// The connection string value.
    /// </param>
    /// <returns>
    /// true, if the request is sent to client.
    /// </returns>
    boolean cancelOutgoingPackage(RetailConnStoreConnectProfile _scProfile, RetailConnPackageNum _keyPackageNo, RetailConnSCServiceName _keyService, RetailConnConnectionString _keyConnStr)
    {
        /*
        CLRObject scClient = new CLRObject(#SCClientCLRType);
        Microsoft.Dynamics.Retail.StoreConnect.Request.SCMonitoring.SCCancelOutgoingMessageRequest request;
        Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponse response;
        CLRObject responseTemp;
        Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponseHandler handler = new Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponseHandler();
        boolean ipsec;
        boolean preferIPV6;
        str connStr;
        int resultCode;
        ;

        if ((_scProfile.Port < 0) || (_scProfile.Port > 65535))
        {
            error(strfmt("@RET634", _scProfile.Port));
            return false;
        }

        ipsec = !_scProfile.NoIPSec;
        preferIPV6 = _scProfile.PreferIPV6;
        connStr = _scProfile.Name + #SCMonConnectionString;

        scClient.CreateConnection(_scProfile.Server, _scProfile.Port, connStr, true, ipsec, preferIPV6);
        scClient.SetJobId(#M1010);
        scClient.SetMsgId(strfmt("%1; %2; %3", #M1000, #OutgoingMessagesTable, _keyPackageNo));

        request = new Microsoft.Dynamics.Retail.StoreConnect.Request.SCMonitoring.SCCancelOutgoingMessageRequest(_keyService, _keyPackageNo, _keyConnStr);
        responseTemp = scClient.Send(request, handler);
        response = responseTemp as Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponse;

        if (!response)
        {
            error(RetailConnReplicationUtilities::GetErrorString(scClient.GetLastError()));
            return false;
        }

        scClient.Disconnect();

        resultCode = response.get_ResultCode();

        if (resultCode != 0)
        {
            error(response.get_ErrorMessage());
            error(response.get_DetailedErrorMessage());
            return false;
        }
        */
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendConfiguration</Name>
				<Source><![CDATA[
    private boolean sendConfiguration(RetailConnStoreConnectProfile _scProfile, RetailConnStoreConnectUploadOptions _option, RetailTransactionServiceProfile _tsProfile)
    {
        /*
        CLRObject scClient = new CLRObject(#SCClientCLRType);
        Microsoft.Dynamics.Retail.StoreConnect.Request.SCMonitoring.SCMonitoringConfigRequest request;
        Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponse response;
        CLRObject responseTemp;
        Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponseHandler handler = new Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponseHandler();
        boolean ipsec;
        boolean preferIPV6;
        str connStr;
        int resultCode;

        if ((_scProfile.Port < 0) || (_scProfile.Port > 65535))
        {
            error(strfmt("@RET634", _scProfile.Port));
            return false;
        }

        ipsec = !_scProfile.NoIPSec;
        preferIPV6 = _scProfile.PreferIPV6;
        connStr = _scProfile.Name + #SCMonConnectionString;

        scClient.CreateConnection(_scProfile.Server, _scProfile.Port, connStr, true, ipsec, preferIPV6);
        scClient.SetJobId(#M1010);
        scClient.SetMsgId(strfmt("%1", #M1010));

        request = new Microsoft.Dynamics.Retail.StoreConnect.Request.SCMonitoring.SCMonitoringConfigRequest();
        request.set_Enable(_option.UploadEnabled ? true : false);
        request.set_Interval(_option.UploadInterval);
        request.set_ErrMsgOnly(_option.UploadErrorMsgOnly ? true : false);
        request.set_TSProfileId(_tsProfile.ProfileId);
        request.set_TSServer(_tsProfile.CentralTableServer);
        request.set_TSPort(_tsProfile.CentralTableServerPort);
        request.set_TSData(_tsProfile.RetailTSData);
        request.set_TSServiceName(_tsProfile.ServerServiceName);
        request.set_TSCertDNS(_tsProfile.ServerCertificateDNS);

        responseTemp = scClient.Send(request, handler);
        response = responseTemp as Microsoft.Dynamics.Retail.StoreConnect.Request.Base.SCSyncResponse;

        if (!response)
        {
            error(RetailConnReplicationUtilities::GetErrorString(scClient.GetLastError()));
            return false;
        }

        scClient.Disconnect();

        resultCode = response.get_ResultCode();

        if (resultCode != 0)
        {
            error(response.get_ErrorMessage());
            error(response.get_DetailedErrorMessage());
            return false;
        }
        */
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncomingMessageFinError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the error message for the incoming packet if the store connect profile name is invalid.
    /// </summary>
    /// <param name="msg">
    /// The error message string.
    /// </param>
    /// <returns>
    /// true, if the incoming package gets cancelled.
    /// </returns>
    boolean setIncomingMessageFinError(RetailConnSCMonIncomingMessages msg)
    {
        RetailConnStoreConnectProfile scProfile;
        ;

        select scProfile
            index hint NameIdx
            where scProfile.Name == msg.ServiceName;
        if (!scProfile)
        {
            error(strfmt("@RET644", msg.ServiceName));
            return false;
        }

        return this.cancelIncomingPackage(
            scProfile,
            msg.PackageNo,
            msg.ServiceName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutgoingMessageFinError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the error message for the outgoing packet if the store connect profile name is invalid.
    /// </summary>
    /// <param name="msg">
    /// The error message string.
    /// </param>
    /// <returns>
    /// true, if the outgoing package gets cancelled.
    /// </returns>
    boolean setOutgoingMessageFinError(RetailConnSCMonOutgoingMessages msg)
    {
        RetailConnStoreConnectProfile scProfile;
        ;

        select scProfile
            index hint NameIdx
            where scProfile.Name == msg.ServiceName;
        if (!scProfile)
        {
            error(strfmt("@RET644", msg.ServiceName));
            return false;
        }

        return this.cancelOutgoingPackage(
            scProfile,
            msg.PackageNo,
            msg.ServiceName,
            msg.ConnectString);
    }

    /// <summary>
    /// Validates all the store connect parameters and sends the config settings to client.
    /// </summary>
    /// <param name="_scProfile">
    /// The store connect profile name.
    /// </param>
    /// <returns>
    /// false if sending config fails.
    /// </returns>
    /*boolean updateSCMonitoringConfig(RetailConnStoreConnectProfile _scProfile)
    {
        RetailConnStoreConnectUploadOptions option;
        RetailTransactionServiceProfile tsProfile;

        boolean ret;

        // validations

        if (!_scProfile)
        {
            return false;
        }

        if ((_scProfile.Port < 0) || (_scProfile.Port > 65535))
        {
            error(strfmt("@RET634", _scProfile.Name, _scProfile.Port));
            return false;
        }

        select option where option.RecId == _scProfile.scUploadOptionsRecId;

        if (!option)
        {
            error(strfmt("@RET706", _scProfile.Name));
            return false;
        }

        select tsProfile where tsProfile.RecId == _scProfile.TransactionServiceProfileRecId;

        if (!tsProfile)
        {
            error(strfmt("@RET635", _scProfile.Name));
            return false;
        }

        ret = this.sendConfiguration(_scProfile, option, tsProfile);
        return ret;
        }*/

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>