<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceCfdiInterfacturaServiceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Xml;


/// <summary>
/// The class <c>EInvoiceCfdiInterfacturaServiceProvider</c> handles the communication with the Interfactura CFDI service provider.
/// </summary>
[SysObsolete("see EInvoiceInterfacturaWCF class", false, 30\06\2020)]
class EInvoiceCfdiInterfacturaServiceProvider implements IEInvoiceCfdiServiceProvider
{
    private URL url;
    private X509Certificate2 certificate;

    const int StampMaxStringLengthTolerance = 65534;
    const int StampMaxReceivedMessageSizeTolerance = 65534;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>requestStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls GeneraTimbre service with the given xml message.
    /// </summary>
    /// <param name = "_message">The message XML representation in a string.</param>
    /// <returns>The message response XML in a string.</returns>
    [SysObsolete("see EInvoiceInterfacturaWCF class", true, 30\11\2017)]
    public str requestStamp(str _message)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls CancelaTimbre service with the given xml message.
    /// </summary>
    /// <param name = "_message">The message XML representation in a string.</param>
    /// <returns>The message response XML in a string.</returns>
    [SysObsolete("see EInvoiceInterfacturaWCF class", true, 30\11\2017)]
    public str cancelStamp(str _message)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUrl</Name>
				<Source><![CDATA[
    protected void setUrl(URL _url)
    {
        url = _url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCertificate</Name>
				<Source><![CDATA[
    protected void setCertificate(X509Certificate2 _certificate)
    {
        certificate = _certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBinding</Name>
				<Source><![CDATA[
    private Binding createBinding(str _message)
    {
        if (!this.isHttps())
        {
            return new BasicHttpBinding();
        }

        TextMessageEncodingBindingElement messageEncodingBinding = new TextMessageEncodingBindingElement(MessageVersion::get_Soap12(), Encoding::get_UTF8());

        XmlDictionaryReaderQuotas readerQuotas = messageEncodingBinding.get_ReaderQuotas();
        readerQuotas.set_MaxStringContentLength(this.maxExpectedContentStringLength(strLen(_message)));

        HttpsTransportBindingElement transportBinding = new HttpsTransportBindingElement();
        transportBinding.set_RequireClientCertificate(true);
        transportBinding.set_MaxReceivedMessageSize(this.maxExpectedResponseMessageSize(_message));

        BindingElement[] bindingElements = new System.ServiceModel.Channels.BindingElement[2]();
        bindingElements.SetValue(messageEncodingBinding, 0);
        bindingElements.SetValue(transportBinding, 1);

        return new CustomBinding(bindingElements);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHttps</Name>
				<Source><![CDATA[
    private boolean isHttps()
    {
        return strscan(url, 'https', 0, strlen(url));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxExpectedContentStringLength</Name>
				<Source><![CDATA[
    private int maxExpectedContentStringLength(int _messageSize)
    {
        return _messageSize + StampMaxStringLengthTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxExpectedResponseMessageSize</Name>
				<Source><![CDATA[
    private int maxExpectedResponseMessageSize(str _message)
    {
        UTF8Encoding utf8Encoding = new UTF8Encoding();

        System.Byte[] bytes = utf8Encoding.GetBytes(_message);
        int maxReceivedMessageSize = bytes.get_Length();

        return maxReceivedMessageSize + StampMaxReceivedMessageSizeTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EInvoiceCfdiInterfacturaServiceProvider construct(URL _url, X509Certificate2 _certificate)
    {
        EInvoiceCfdiInterfacturaServiceProvider serviceProvider = new EInvoiceCfdiInterfacturaServiceProvider();

        serviceProvider.setUrl(_url);
        serviceProvider.setCertificate(_certificate);

        return serviceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Avoid using new to instantiate. Use constructor instead.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>