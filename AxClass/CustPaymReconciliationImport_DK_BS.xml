<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymReconciliationImport_DK_BS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustPaymReconciliationImport_DK_BS extends CustPaymReconciliationImport implements BatchRetryable
{
    NoYes           printFile;
    DialogField     dialogPrintFile;
    container       reportData;
    Counter         conIdx;
    int             i;

    #DEFINE.currentversion(3)
    #LOCALMACRO.currentList
        fileName,
        printFile
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogPrintFile = dialog.addFieldValue(enumstr(NoYes), printFile, "@SYS920", "@SYS84015");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filename</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Filename filename()
    {
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void findLedgerJournalTrans(
        str 9               _paymRef,
        CustVendPaymStatus  _custVendPaymStatus)
    {
        LedgerJournalTrans ledgerJournalTrans;
        boolean            companyOK;

        // Determine if we are importing into the right company
        // First, check if the ledgerJournalTrans record exists in this company
        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.PaymReference == _paymRef;

        if (ledgerJournalTrans)
        {
            companyOK = true;
        }
        else
        {
            // Record wasn't found in current company, so see if it exists in any company
            select firstonly crosscompany ledgerJournalTrans
                where ledgerJournalTrans.PaymReference == _paymRef;

            if (ledgerJournalTrans && ledgerJournalTrans.company() != curext())
            {
                // LedgerJournalTrans exists, but not in the company where the import is occurring
                warning("@SYS309841");
                companyOK = false;
            }
            else
            {
                companyOK = true;
            }
        }

        // Only want to do updates if importing into the right company
        if (companyOK)
        {
            ttsbegin;
            select firstonly forupdate ledgerJournalTrans
                where ledgerJournalTrans.PaymReference == _paymRef;

            if (ledgerJournalTrans.RecId)
            {
                ledgerJournalTrans.PaymentStatus = _custVendPaymStatus;
                ledgerJournalTrans.update();
                this.updateInvoicesFromPayment(ledgerJournalTrans);
            }
            else
            {
                info(strfmt("@SYS68294", _paymRef));
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2Journal</Name>
				<Source><![CDATA[
    void fromDisk2Journal()
    {
        container   record;

        while (! file.status())
        {
            record = file.read();

            this.processRecord(record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDataAray</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void generateDataAray(container _record)
    {
        if (conIdx == 0)
        {
            conIdx = 1;
        }
        reportData = conins(reportData,conIdx,conpeek( _record,1));
        conIdx++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        printFile   = dialogPrintFile.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    className interfaceName()
    {
        return 'Betalingsservice Basis-returformat (DK)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    boolean openFile()
    {
        boolean ret = false;

        file = this.convertFileStreamToStreamIO(StreamType::CommaIo);

        if (file)
        {
            if (file.status())
            {
                throw error("@SYS52680");
            }
            file.inFieldDelimiter('\r\n');
            file.inRecordDelimiter('\r\n');
            file.inFieldDelimiter(',');
            ret = true;
        }
        else
        {
            throw error("@SYS112406");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void printReport()
    {
        MenuFunction    menuFunction;
        Args parameters = new Args();
        parameters.object(this);
        menuFunction = new MenuFunction(menuitemoutputstr(CustPaymReconciliationPrint_DK_BS), MenuItemType::Output);
        menuFunction.run(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    void processRecord(container record)
    {
        #OCCRetryCount
        CustVendPaymStatus  status;

        str         4       transCode;
        str         5       recType;
        str         4       sectionNum;
        str         9       paymentRef;
        str         9       tempPaymentRef;
        int                 counter;
        CustVendPaymStatus  confirmed = CustVendPaymStatus::Confirmed;
        CustVendPaymStatus  rejected  = CustVendPaymStatus::Rejected;

        if (record)
        {
            if (printFile)
            {
                this.generateDataAray(record);
            }

            recType     = substr(conpeek(record,1),1,5);

            recType     = substr(conpeek(record,1),1,5);

            if (recType == 'BS012')
            {
                sectionNum = substr(conpeek(record,1),14,4);
                switch (sectionNum)
                {
                    case '0211':
                    case '0213': i  = 70;
                        break;

                    case '0215':
                    case '0216': i  = 73;
                        break;
                }
            }

            if (recType == 'BS042')
            {
                transCode = substr(conpeek(record,1),14,4);
                switch (transCode)
                {
                    case '0236': status  = confirmed;
                        break;

                    case '0237':
                    case '0238':
                    case '0239':
                    case '0251':
                    case '0252': status  = rejected;
                        break;

                    case '0297': status = confirmed;
                        break;

                    case '0299': status = rejected;
                        break;

                    default    : status = rejected;
                        break;
                }
            }

            if (status)
            {
                try
                {
                    paymentRef = strLRTrim(substr(conpeek(record,1),i,9));
                    for (counter = strlen(paymentRef); counter < 9; counter++)
                    {
                        tempPaymentRef += '0';
                    }
                    paymentRef = tempPaymentRef + paymentRef;
                    this.findLedgerJournalTrans(paymentRef,status);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container reportData()
    {
        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDK00011, funcName());

        super();

        if (printFile)
            this.printReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicesFromPayment</Name>
				<Source><![CDATA[
    void updateInvoicesFromPayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans   specTrans;

        while select forupdate crosscompany specTrans
            where specTrans.SpecTableId == _ledgerJournalTrans.TableId
               && specTrans.SpecRecId   == _ledgerJournalTrans.RecId
               && specTrans.SpecCompany == _ledgerJournalTrans.company()
        {
            specTrans.PaymentStatus = _ledgerJournalTrans.PaymentStatus;
            ttsbegin;
            changecompany(specTrans.company())
            {
                specTrans.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayments</Name>
				<Source><![CDATA[
    void updatePayments()
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTrans  ledgerJournalTransRejected;
        SpecTrans           specTrans;
        AmountCur           amountConfirmed;
        AmountCur           amountRejected;

        AmountCur calcAmount()
        {
            ExchangeRateHelper exchangeRateHelper =
            ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.CurrencyCode);

            return this.convertAmountTransCurToAmountPaymCur(
                    specTrans.Balance01,
                    specTrans.RefCompany,
                    this.fetchTransCurrencyCode(specTrans.RefTableId, specTrans.RefRecId, specTrans.RefCompany),
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.CurrencyCode,
                    ledgerJournalTrans.TransDate,
                    specTrans.CrossRate,
                    exchangeRateHelper.prepareExchangeRateForStorage(ledgerJournalTrans.crossrate()));
        }

        ttsbegin;

        while select ledgerJournalTable
            where ledgerJournalTable.JournalType == this.journalType()
        join forupdate ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
        {
            amountConfirmed = 0;
            amountRejected  = 0;

            while select forupdate crosscompany specTrans
                where specTrans.SpecTableId == ledgerJournalTrans.TableId
                   && specTrans.SpecRecId   == ledgerJournalTrans.RecId
                   && specTrans.SpecCompany == ledgerJournalTrans.company()
                   && specTrans.RefTableId  == tablenum(CustTransOpen)
            {
                switch (specTrans.PaymentStatus)
                {
                    case CustVendPaymStatus::Confirmed :
                        ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
                        amountConfirmed += calcAmount();
                        break;

                    case CustVendPaymStatus::Rejected :
                        if (!ledgerJournalTransRejected.RecId)
                        {
                            ledgerJournalTransRejected.data(ledgerJournalTrans);
                            ledgerJournalTransRejected.PaymentStatus = CustVendPaymStatus::Rejected;
                            ledgerJournalTransRejected.AmountCurCredit = 0;
                            ledgerJournalTransRejected.AmountCurDebit = 0;
                            ledgerJournalTransRejected.insert();
                        }
                        specTrans.SpecRecId = ledgerJournalTransRejected.RecId;
                        changecompany(specTrans.company())
                        {
                            specTrans.update();
                        }

                        amountRejected += calcAmount();

                        break;

                    default :
                }
            }

            if (amountConfirmed)
            {
                if (amountConfirmed < 0)
                {
                    ledgerJournalTrans.AmountCurDebit   = abs(amountConfirmed);
                    ledgerJournalTrans.AmountCurCredit  = 0;
                }
                else
                {
                    ledgerJournalTrans.AmountCurDebit   = 0;
                    ledgerJournalTrans.AmountCurCredit  = abs(amountConfirmed);
                }
                ledgerJournalTrans.update();
            }

            if (amountRejected)
            {
                if (amountRejected < 0)
                {
                    ledgerJournalTransRejected.AmountCurDebit   = abs(amountRejected);
                    ledgerJournalTransRejected.AmountCurCredit  = 0;
                }
                else
                {
                    ledgerJournalTransRejected.AmountCurDebit   = 0;
                    ledgerJournalTransRejected.AmountCurCredit  = abs(amountRejected);
                }
                //if there were no confirmed invoices
                if (!(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed))
                {
                    ledgerJournalTrans.PaymentStatus    = CustVendPaymStatus::Rejected;
                    ledgerJournalTrans.AmountCurCredit  = ledgerJournalTransRejected.AmountCurCredit;
                    ledgerJournalTrans.AmountCurDebit   = ledgerJournalTransRejected.AmountCurDebit;

                    ledgerJournalTrans.update();

                    //move marked invoices back to original LedgerJournalTrans
                    while select forupdate crosscompany specTrans
                    where specTrans.SpecRecId == ledgerJournalTransRejected.RecId
                        && specTrans.SpecTableId == ledgerJournalTransRejected.TableId
                        && specTrans.SpecCompany == ledgerJournalTransRejected.company()
                    {
                        specTrans.SpecRecId = ledgerJournalTrans.RecId;
                        changecompany(specTrans.company())
                        {
                            specTrans.update();
                        }
                    }
                    ledgerJournalTransRejected.delete();
                }
                else
                {
                    ledgerJournalTransRejected.Voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(true);
                    ledgerJournalTransRejected.update();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return new CustPaymReconciliationImport_DK_BS().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileStream</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmFileStream(System.IO.Stream _stream)
    {
        this.fileStream = _stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>