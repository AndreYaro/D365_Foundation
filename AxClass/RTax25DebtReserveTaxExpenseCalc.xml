<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25DebtReserveTaxExpenseCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class calculates expenses for a doubtful debt reserve model.
/// The calculation results are used in tax registers for tax differences calculation.
/// </summary>

class RTax25DebtReserveTaxExpenseCalc
{
    Map             mapExpenseAmounts;
    Set             setWrittenOff;
    RefTableId      regTransTableIdReserve;
    RefTableId      regTransTableIdReserveMov;
    FromDate        fromDate;
    ToDate          toDate;
    Query           qReserve;
    Query           qReserveMov;
    QueryBuildRange qrDateReserve;
    QueryBuildRange qrDateReserveMov;
    RTax25DebtModel debtModel;
    boolean         calcTempDiff;

    const str DebtWrittenOff = 'Hopeless';
    const str ExpenseWrittenOff = 'Excess';
    const str ReserveRemainder = 'Remainder';
    const str ExpenseReserve = 'Expend';
    const str RevenueReserve = 'SaleReceipt';
    const str RefTableId = 'RefTableId';
    const str RefRecId = 'RefRecId';
    const str AccountingObject = 'AccountingObject';
    const str PostingDate = 'PostingDate';
    const str JournalTransRefRecId = 'JournalTransRefRecId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the expenses calculation.
    /// </summary>
    private void calc()
    {
        QueryRun    qr;
        int         idx;
        container   key, value;
        Common      regTrans;
        AmountMST   expense;
        AmountMST   expenseWrittenOffLoc;
        AmountMST   reserveRemainderLoc;
        RefTableId  refTableIdLoc;
        RefRecId    refRecIdLoc;
        boolean     addToMap = true;

        for (idx = 1; idx <= 2; idx++)
        {
            if (idx == 1 && ! calcTempDiff)
            {
                continue;
            }

            if (idx == 1)
            {
                qrDateReserve.value(queryRange(dateNull(), fromDate - 1));
                qrDateReserveMov.value(queryRange(dateNull(), fromDate - 1));
            }
            else
            {
                qrDateReserve.value(queryRange(fromDate, toDate));
                qrDateReserveMov.value(queryRange(fromDate, toDate));
            }

            qr = new QueryRun(qReserve);
            while (qr.next())
            {
                regTrans = qr.get(regTransTableIdReserve);

                if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
                {
                    refTableIdLoc  = regTrans.(fieldName2id(regTransTableIdReserve, RefTableId));
                    refRecIdLoc    = regTrans.(fieldName2id(regTransTableIdReserve, RefRecId));

                    key = [refTableId,
                       refRecId,
                       regTrans.(fieldName2id(regTransTableIdReserve, AccountingObject)),
                       regTrans.(fieldName2id(regTransTableIdReserve, PostingDate))];

                    addToMap = calcTempDiff ^ this.isConstDiff(refTableIdLoc, refRecIdLoc);
                }
                else
                {
                    key = [0, 0, '', dateNull()];
                }

                if (! addToMap)
                {
                    continue;
                }

                if (mapExpenseAmounts.exists(key))
                {
                    value = mapExpenseAmounts.lookup(key);
                }
                else
                {
                    value = [0, 0]; //expense incoming balance, expense for the period
                }

                expense = regTrans.(fieldName2id(regTransTableIdReserve, ExpenseReserve)) -
                      regTrans.(fieldName2id(regTransTableIdReserve, RevenueReserve)) +
                      conPeek(value, idx);

                value = conPoke(value, idx, expense);

                mapExpenseAmounts.insert(key, value);
            }

            qr = new QueryRun(qReserveMov);
            while (qr.next())
            {
                regTrans = qr.get(regTransTableIdReserveMov);

                expenseWrittenOffLoc = regTrans.(fieldName2id(regTransTableIdReserveMov, ExpenseWrittenOff));
                reserveRemainderLoc  = regTrans.(fieldName2id(regTransTableIdReserveMov, ReserveRemainder));

                if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
                {
                    refTableIdLoc  = regTrans.(fieldName2id(regTransTableIdReserveMov, RefTableId));
                    refRecIdLoc    = regTrans.(fieldName2id(regTransTableIdReserveMov, RefRecId));

                    key = [refTableId,
                       refRecId,
                       regTrans.(fieldName2id(regTransTableIdReserveMov, AccountingObject)),
                       regTrans.(fieldName2id(regTransTableIdReserveMov, PostingDate))];

                    addToMap = calcTempDiff ^ this.isConstDiff(refTableIdLoc, refRecIdLoc);

                    if (idx == 2)
                    {
                        setWrittenOff.add([refTableId, refRecId]);
                    }
                }
                else
                {
                    key = [0, 0, '', dateNull()];
                }

                if (! addToMap)
                {
                    continue;
                }

                if (mapExpenseAmounts.exists(key))
                {
                    value = mapExpenseAmounts.lookup(key);
                }
                else
                {
                    value = [0, 0]; //expense incoming balance, expense for the period
                }

                expense = expenseWrittenOff + conPeek(value, idx);

                if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
                {
                    expense -= reserveRemainderLoc;
                }

                value = conPoke(value, idx, expense);

                mapExpenseAmounts.insert(key, value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a map containing calculation results used in tax registers for tax differences calculation.
    /// </summary>
    /// <returns>
    /// A map containing calculation results used in tax registers for tax differences calculation.
    /// </returns>
    public Map getExpenseMap()
    {
        return mapExpenseAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWrittenOffSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a set containing references to written-off documents used in tax registers for tax differences calculation.
    /// </summary>
    /// <returns>
    /// A set containing references to written-off documents used in tax registers for tax differences calculation.
    /// </returns>
    public Set getWrittenOffSet()
    {
        return setWrittenOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class according to input parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// The period start date.
    /// </param>
    /// <param name="_toDate">
    /// The period end date.
    /// </param>
    /// <param name="_modelType">
    /// The debt model type.
    /// </param>
    /// <param name="_calcTempDiff">
    /// A boolean parameter indicating if the calculation is for temporary tax differences.
    /// </param>
    protected void init(
        FromDate            _fromDate,
        ToDate              _toDate,
        RTax25DebtModelType _modelType,
        boolean             _calcTempDiff)
    {
        switch (_modelType)
        {
            case RTax25DebtModelType::RAP :
                debtModel = RTax25DebtModel::findRecId(CustParameters::rTax25DebtModel());
                if (debtModel.AccountingPolicy == RTax25DebtPolicy::Total)
                {
                    regTransTableIdReserve      = tableNum(RTax25RegisterTrans_DebtDebitReserveRAP);
                    regTransTableIdReserveMov   = tableNum(RTax25RegisterTrans_DebtDebitResMovRAP);
                }
                else
                {
                    regTransTableIdReserve      = tableNum(RTax25RegisterTrans_DebtDebResDetailRAP);
                    regTransTableIdReserveMov   = tableNum(RTax25RegisterTrans_DebtDebResMovDetRAP);
                }
                break;
            case RTax25DebtModelType::TAX :
                debtModel = RTax25DebtModel::findRecId(CustParameters::rTax25DebtModelTax());
                if (debtModel.AccountingPolicy == RTax25DebtPolicy::Total)
                {
                    regTransTableIdReserve      = tableNum(RTax25RegisterTrans_DebtDebitReservation);
                    regTransTableIdReserveMov   = tableNum(RTax25RegisterTrans_DebtDebitReservMov);
                }
                else
                {
                    regTransTableIdReserve      = tableNum(RTax25RegisterTrans_DebtDebitResDetail);
                    regTransTableIdReserveMov   = tableNum(RTax25RegisterTrans_DebtDebResMovDetail);
                }
                break;
        }

        fromDate        = _fromDate;
        toDate          = _toDate;
        calcTempDiff    = _calcTempDiff;

        mapExpenseAmounts = new Map(Types::Container, Types::Container);
        setWrittenOff     = new Set(Types::Container);

        this.initQueries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes queries for calculation.
    /// </summary>
    private void initQueries()
    {
        QueryBuildDataSource qbds;

        QueryBuildRange addDateRange()
        {
            qbds = qbds.addDataSource(tableNum(RTax25RegisterJournalTrans));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.relations(true);

            qbds = qbds.addDataSource(tableNum(RTax25RegisterJournalTable));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.relations(true);

            return findOrCreateRange_W(qbds, fieldNum(RTax25RegisterJournalTable, EndDate));
        }

        qReserve = new Query();

        qbds = qReserve.addDataSource(regTransTableIdReserve);
        qbds.addSelectionField(fieldName2id(regTransTableIdReserve, ExpenseReserve), SelectionField::Sum);
        qbds.addSelectionField(fieldName2id(regTransTableIdReserve, RevenueReserve), SelectionField::Sum);

        if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
        {
            qbds.addGroupByField(fieldName2id(regTransTableIdReserve, RefTableId));
            qbds.addGroupByField(fieldName2id(regTransTableIdReserve, RefRecId));
            qbds.addGroupByField(fieldName2id(regTransTableIdReserve, AccountingObject));
            qbds.addGroupByField(fieldName2id(regTransTableIdReserve, PostingDate));
        }

        findOrCreateRange_W(qbds, fieldName2id(regTransTableIdReserve, RefTableId), SysQuery::valueNotEmptyString());
        qrDateReserve = addDateRange();

        qReserveMov = new Query();

        qbds = qReserveMov.addDataSource(regTransTableIdReserveMov);
        qbds.addSelectionField(fieldName2id(regTransTableIdReserveMov, ExpenseWrittenOff), SelectionField::Sum);
        qbds.addSelectionField(fieldName2id(regTransTableIdReserveMov, ReserveRemainder), SelectionField::Sum);

        if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
        {
            qbds.addGroupByField(fieldName2id(regTransTableIdReserveMov, RefTableId));
            qbds.addGroupByField(fieldName2id(regTransTableIdReserveMov, RefRecId));
            qbds.addGroupByField(fieldName2id(regTransTableIdReserveMov, AccountingObject));
            qbds.addGroupByField(fieldName2id(regTransTableIdReserveMov, PostingDate));
        }

        findOrCreateRange_W(qbds, fieldName2id(regTransTableIdReserveMov, RefTableId), SysQuery::valueNotEmptyString());
        findOrCreateRange_W(qbds, fieldName2id(regTransTableIdReserveMov, DebtWrittenOff), '>0');
        qrDateReserveMov = addDateRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConstDiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value indicating if there will be a constant tax difference for the document.
    /// </summary>
    /// <param name="_refTableId">
    /// A table ID of the document reference.
    /// </param>
    /// <param name="_refRecId">
    /// A record ID of the document reference.
    /// </param>
    /// <returns>
    /// A boolean value indicating if there will be a constant tax difference for the document.
    /// </returns>
    private boolean isConstDiff(
        RefTableId  _refTableId,
        RefRecId    _refRecId)
    {
        RTax25RegisterTrans_DebtDebitInventory  regTransInvent;
        RTax25RegisterTrans_DebtDebInventoryRAP regTransInventRAP;
        RTax25RegisterJournalTrans              journalTrans;
        RTax25RegisterJournalTable              journalTable;

        select firstOnly TableId from journalTable
        order by EndDate desc
        where journalTable.EndDate <= toDate
    join TableId from journalTrans
        where journalTrans.RegisterJournalType == journalTable.RegisterJournalType
           && journalTrans.FiscalYear          == journalTable.FiscalYear
           && journalTrans.PeriodNum           == journalTable.PeriodNum
           && journalTrans.PeriodType          == journalTable.PeriodType
           && journalTrans.JournalNum          == journalTable.JournalNum
    join ExcludeReserveCalc from regTransInvent
        where regTransInvent.JournalTransRefRecId == journalTrans.RecId
           && regTransInvent.RefTableId           == _refTableId
           && regTransInvent.RefRecId             == _refRecId;

        select firstOnly TableId from journalTable
        order by EndDate desc
        where journalTable.EndDate <= toDate
    join TableId from journalTrans
        where journalTrans.RegisterJournalType == journalTable.RegisterJournalType
           && journalTrans.FiscalYear          == journalTable.FiscalYear
           && journalTrans.PeriodNum           == journalTable.PeriodNum
           && journalTrans.PeriodType          == journalTable.PeriodType
           && journalTrans.JournalNum          == journalTable.JournalNum
    join ExcludeReserveCalc from regTransInventRAP
        where regTransInventRAP.JournalTransRefRecId == journalTrans.RecId
           && regTransInventRAP.RefTableId           == _refTableId
           && regTransInventRAP.RefRecId             == _refRecId;

        return regTransInvent.ExcludeReserveCalc != regTransInventRAP.ExcludeReserveCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static RTax25DebtReserveTaxExpenseCalc construct()
    {
        return new RTax25DebtReserveTaxExpenseCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initializes the class according to input parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// The period start date.
    /// </param>
    /// <param name="_toDate">
    /// The period end date.
    /// </param>
    /// <param name="_modelType">
    /// The debt model type.
    /// </param>
    /// <param name="_calcTempDiff">
    /// A boolean parameter indicating if the calculation is for temporary tax differences.
    /// </param>
    /// <returns>
    /// An initialized instance of the class.
    /// </returns>
    public static RTax25DebtReserveTaxExpenseCalc newParameters(
        FromDate            _fromDate,
        ToDate              _toDate,
        RTax25DebtModelType _modelType,
        boolean             _calcTempDiff = false)
    {
        RTax25DebtReserveTaxExpenseCalc reserveTaxDiffCalc = RTax25DebtReserveTaxExpenseCalc::construct();

        reserveTaxDiffCalc.init(
        _fromDate,
        _toDate,
        _modelType,
        _calcTempDiff);

        reserveTaxDiffCalc.calc();

        return reserveTaxDiffCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>