<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseReleaseProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWarehouseReleaseProdBOM</c> class contains the logic for release materials
/// from the the <c>WHSReleaseToWarehouseProdBOM</c> form.
/// </summary>
public class WHSWarehouseReleaseProdBOM extends WhsWarehouseRelease
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reserveBOM</Name>
				<Source><![CDATA[
    private void reserveBOM(ProdBOM _prodBom)
    {
        InventMovement::construct(_prodBOM).updateReservation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireFullReservation</Name>
				<Source><![CDATA[
    protected boolean requireFullReservation(ProdTable _prodTable, ProdBOM _prodBom)
    {
        return (_prodTable.ProdWHSReleasePolicy == ProdWHSReleasePolicy::RequireFullReservation ||
               (_prodTable.ProdWHSReleasePolicy == ProdWHSReleasePolicy::UseProdBomValue && _prodBom.BomWHSReleasePolicy == BomWHSReleasePolicy::RequireFullReservation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveProdBOMs</Name>
				<Source><![CDATA[
    private void reserveProdBOMs(WHSTmpReleaseToWarehouse _releaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse releaseToWarehouse;

        releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

        ProdBOM   prodBOM;
        ProdTable prodTable;
        boolean   fullyReserved = true;

        while select releaseToWarehouse
            where releaseToWarehouse.Module == WHSModule::ProdBOM
            join prodBOM
                where prodBOM.InventTransId == releaseToWarehouse.InventTransId
            join ProdWHSReleasePolicy from prodTable
                where prodTable.ProdId == prodBOM.ProdId
        {
            if (prodBOM.Reservation == ProdReservation::Estimation
            ||  prodBOM.Reservation == ProdReservation::Scheduling
            ||  prodBOM.Reservation == ProdReservation::Release)
            {
                this.reserveBOM(prodBOM);
            }

            if (this.requireFullReservation(prodTable, prodBOM))
            {
                var inventTransIdSum = prodBOM.getInventTransIdSum();
                var qtyReserved = -inventTransIdSum.reservPhysical();
                var qtyPicked   = -inventTransIdSum.picked();

                boolean itemFullyReserved = (qtyReserved + qtyPicked == prodBOM.RemainInventPhysical);

                if (!itemFullyReserved)
                {
                    warning(strFmt("@SYS4010249", prodBOM.ItemId));
                }
                fullyReserved = fullyReserved && itemFullyReserved;
            }
        }

        if (!fullyReserved)
        {
            throw error("@SYS4010248");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createWHSProdBOMPool</Name>
				<Source><![CDATA[
    private void createWHSProdBOMPool(WHSTmpReleaseToWarehouse _releaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse releaseToWarehouse;
        releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);
                
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(WHSProdBOMPool));
        ProdBOM          prodBOM;
        WHSProdBOMPool   prodBomPool;

        Map newProdBomPoolByInventTransIdMap = new Map(Types::String, Types::Record);
        
        while select ReleasedQty from releaseToWarehouse
            where releaseToWarehouse.Module == WHSModule::ProdBOM
            join prodBOM
                where prodBOM.InventTransId == releaseToWarehouse.InventTransId
            outer join forupdate prodBomPool
                where prodBomPool.InventTransId == releaseToWarehouse.InventTransId
        {
            if (prodBomPool.RecId == 0)
            {
                WHSProdBOMPool newProdBOMPool;
                if (newProdBomPoolByInventTransIdMap.exists(prodBOM.InventTransId))
                {
                    newProdBOMPool = newProdBomPoolByInventTransIdMap.lookup(prodBOM.InventTransId);
                    newProdBOMPool.ReleasedInventQty += releaseToWarehouse.ReleasedQty;
                }
                else
                {
                    newProdBOMPool.whsPoolProdBOM().initFromBuffer(prodBom);
                    newProdBOMPool.ReleasedInventQty = releaseToWarehouse.ReleasedQty;
                }

                newProdBomPoolByInventTransIdMap.insert(prodBOM.InventTransId, newProdBOMPool);
            }
            else
            {
                // Update the release quantity of the existing pool record.
                prodBomPool.ReleasedInventQty += releaseToWarehouse.ReleasedQty;
                prodBomPool.update();
            }
        }
        
        MapEnumerator newProdBomPoolByInventTransIdMapEnumerator = newProdBomPoolByInventTransIdMap.getEnumerator();
        while (newProdBomPoolByInventTransIdMapEnumerator.moveNext())
        {
            WHSProdBOMPool newProdBOMPool = newProdBomPoolByInventTransIdMapEnumerator.currentValue();
            recordInsertList.add(newProdBOMPool);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdBOMWave</Name>
				<Source><![CDATA[
    private void createProdBOMWave(WHSTmpReleaseToWarehouse _releaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse releaseToWarehouse;
        releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

        ProdBOM         prodBOM;
        WHSProdBOMPool  prodBomPool;

        // Assign the bill of material to a wave unless it is already on an open wave line.
        while select prodBOMPool
            join QtyInventCalc from prodBOM
                where prodBOM.InventTransId == prodBOMPool.InventTransId
            exists join releaseToWarehouse
                where releaseToWarehouse.InventTransId  == prodBOM.InventTransId
                   && releaseToWarehouse.Module         == WHSModule::ProdBOM
        {
            waveSet = WHSPoolProdBOM::assignOrCreateWaveAddtoSet(prodBomPool, waveSet, prodBOM.QtyInventCalc);
        }

        // Execute waves that should be autoExecuted.
        WHSWaveTable::autoExecuteWaves(waveSet, releaseToWarehouseId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWarehouseRelease construct()
    {
        return new WHSWarehouseReleaseProdBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseToWarehouseProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the pool and wave information for the <c>WHSTmpReleaseToWarehouse</c> records.
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// The temporary <c>WHSTmpReleaseToWarehouse</c> table object.
    /// </param>
    /// <param name="_releaseToWarehouseId">
    /// The release to warehouse identifier.
    /// </param>
    /// <param name="_simulate">
    /// true if the process should be simulated; otherwise, false.
    /// </param>
    /// <param name="_showInfo">
    /// true if the information should be displayed; otherwise, false.
    /// </param>
    /// <param name="_auto">
    /// true if the created wave should be executed automatically; otherwise, false.
    /// </param>
    public static void releaseToWarehouseProdBOM(
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSReleaseToWarehouseId     _releaseToWarehouseId,
        boolean                     _simulate    = false,
        boolean                     _showInfo    = false,
        boolean                     _auto        = false)
    {
        WHSWarehouseReleaseProdBOM  warehouseRelease = WHSWarehouseReleaseProdBOM::construct();
        WHSWaveId                   waveId;
        WHSTmpReleaseToWarehouse    releaseToWarehouse;
        WHSTmpWorkLine              tmpWorkLine;

        void handleException()
        {
            WHSTmpWorkLine::cleanupTmpWorkLinesForReleaseToWarehouseId(_releaseToWarehouseId);

            if (_showInfo)
            {
                warning("@WAX1895");
            }
        }

        try
        {
            ttsbegin;

            releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

            warehouseRelease.parmReleaseToWarehouseId(_releaseToWarehouseId);
            warehouseRelease.parmShowInfo(_showInfo);
            warehouseRelease.parmAuto(_auto);
            warehouseRelease.reserveProdBOMs(releaseToWarehouse);
            warehouseRelease.createWHSProdBOMPool(releaseToWarehouse);
            warehouseRelease.createProdBOMWave(releaseToWarehouse);

            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::DuplicateKeyException;
            }
            handleException();
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }
            handleException();
        }
        catch
        {
            handleException();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>