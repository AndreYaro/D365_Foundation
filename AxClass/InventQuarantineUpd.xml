<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineUpd</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventQuarantineUpd extends UpdateBase
{
    InventQuarantineOrder       inventQuarantineOrder;
    InventParmQuarantineOrder   inventParmQuarantineOrder;

    Voucher                     voucher;
    NumberSeq                   numberSeq;

    LedgerVoucher               ledgerVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    void beginLedger()
    {
        TransactionTxt      transactionTxt = TransactionTxt::construct();

        numberSeq           = NumberSeq::newGetNum(InventParameters::numRefInventJournalVoucherId());
        voucher             = numberSeq.num();

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                             SysModule::Invent,
                                                             numberSeq.parmNumberSequenceCode());

        transactionTxt.setType(LedgerTransTxt::InventQuarantineOrder);
        transactionTxt.setDate(inventParmQuarantineOrder.TransDate);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setKey1(inventQuarantineOrder.QuarantineId);
        transactionTxt.setKey2(inventQuarantineOrder.ItemId);

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                                  inventParmQuarantineOrder.TransDate,
                                                                                  SysModule::Invent,
                                                                                  LedgerTransType::Invent);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitLedger</Name>
				<Source><![CDATA[
    void commitLedger()
    {
        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQuarantineOrder</Name>
				<Source><![CDATA[
    void initInventQuarantineOrder(boolean     _forUpdate = false)
    {
        ParmBuffer  parmBuffer  = this.parmParmBuffer();

        inventQuarantineOrder = InventQuarantineOrder::find(parmBuffer.Id,_forUpdate);

        if (! inventQuarantineOrder.checkValid(parmBuffer.Id))
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer parmParmBuffer(ParmBuffer _inventParmQuarantineOrder = inventParmQuarantineOrder)
    {
        if (!_inventParmQuarantineOrder.RecId)
        {
            throw error("@SYS53949");
        }

        inventParmQuarantineOrder = _inventParmQuarantineOrder;

        return inventParmQuarantineOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateQuarantineOrder</Name>
				<Source><![CDATA[
    protected void preUpdateQuarantineOrder()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount
        setPrefix(#PreFixField(InventParmQuarantineOrder,QuarantineId));

        try
        {
            this.setParameters();

            if (! this.validate())
                throw error("@SYS18447");

            this.preUpdateQuarantineOrder();

            ttsbegin;

            this.beginLedger();

            this.updateQuarantineOrder();

            this.updateJobJournal(ParmJobStatus::Executed);

            this.commitLedger();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw (Exception::Error);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    void setParameters()
    {
        this.initInventQuarantineOrder(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuarantineOrder</Name>
				<Source><![CDATA[
    abstract void updateQuarantineOrder()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        if (!inventParmQuarantineOrder.TransDate)
            return checkFailed("@SYS24455");

        if (inventParmQuarantineOrder.Qty > inventQuarantineOrder.RemainQty)
            return checkFailed(strFmt("@SYS58581",inventQuarantineOrder.RemainQty));

        if (inventParmQuarantineOrder.PdsCWQty > inventQuarantineOrder.PdsCWRemainQty)
        {
            return checkFailed(strFmt("@SYS58581",inventQuarantineOrder.PdsCWRemainQty));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
