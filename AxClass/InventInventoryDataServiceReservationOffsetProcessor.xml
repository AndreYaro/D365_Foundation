<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceReservationOffsetProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceReservationOffsetProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInventTransByVersion</Name>
				<Source><![CDATA[
    public static void processInventTransByVersion(InventTrans _inventTrans, DataEventType _dataEventType, boolean _isProcessingQueueBackup, InventInventoryDataServiceSoftReserveAndOffsetVersion _version, StatusIssue _offsetStatusIssue)
    {
        // Split inventtrans
        if (_dataEventType == DataEventType::Inserted)
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromInsertedInventTrans(_inventTrans, _isProcessingQueueBackup, _version, _offsetStatusIssue);
        }
        else if (_dataEventType == DataEventType::Updated)
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedInventTrans(_inventTrans, _isProcessingQueueBackup, _version, _offsetStatusIssue);
        }
        else if (_dataEventType == DataEventType::Deleted)
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromDeletedInventTrans(_inventTrans, _isProcessingQueueBackup, _version, _offsetStatusIssue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSalesLineByVersion</Name>
				<Source><![CDATA[
    public static void processSalesLineByVersion(SalesLine _salesLine, DataEventType _dataEventType, boolean _isProcessingQueueBackup, InventInventoryDataServiceSoftReserveAndOffsetVersion _version, StatusIssue _offsetStatusIssue)
    {
        if (_dataEventType == DataEventType::Inserted
            && (_salesLine.InventoryServiceReservationId != '' || _salesLine.InventoryServiceAutoOffset)
            && _offsetStatusIssue == StatusIssue::OnOrder)
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(_salesLine.ItemId, _salesLine.inventDimId, _salesLine.InventoryServiceReservationId, _salesLine.QtyOrdered, _isProcessingQueueBackup);
        }
        else if (_dataEventType == DataEventType::Updated
            && (_salesLine.InventoryServiceReservationId != _salesLine.orig().InventoryServiceReservationId || _salesLine.InventoryServiceAutoOffset != _salesLine.orig().InventoryServiceAutoOffset))
        {
            // Auto offset cannot be applied to soft reservation offset
            if (!_salesLine.orig().InventoryServiceReservationId && !_salesLine.orig().InventoryServiceAutoOffset)
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLineByVersion(_salesLine, _isProcessingQueueBackup, false, _version, _offsetStatusIssue);
            }
            else if (!_salesLine.InventoryServiceReservationId && !_salesLine.InventoryServiceAutoOffset)
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLineByVersion(_salesLine.orig(), _isProcessingQueueBackup, true, _version, _offsetStatusIssue);
            }
            else
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLineByVersion(_salesLine, _isProcessingQueueBackup, false, _version, _offsetStatusIssue);
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLineByVersion(_salesLine.orig(), _isProcessingQueueBackup, true, _version, _offsetStatusIssue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventTrans</Name>
				<Source><![CDATA[
    public static void processInventTrans(InventTrans _inventTrans, DataEventType _dataEventType,  InventInventoryDataServiceParameters _parameter)
    {
        InventQty offsetQtyV0;
        InventQty offsetQtyV1;
        boolean alreadyCalculateOffsetQtyOnReservedStatus = false;

        if (InventInventoryDataServiceSoftReservationHelper::isV0Enabled(_parameter))
        {
            if (_parameter.ReservationOffsetModifier == InventInventoryDataServiceReservationOffsetModifier::OnOrder)
            {
                offsetQtyV0 = InventInventoryDataServiceReservationOffsetProcessor::getOffsetQty(_inventTrans, _dataEventType,  StatusIssue::OnOrder);
            }
            else
            {
                offsetQtyV0 = InventInventoryDataServiceReservationOffsetProcessor::getOffsetQty(_inventTrans, _dataEventType,  StatusIssue::ReservOrdered);
                alreadyCalculateOffsetQtyOnReservedStatus = true;
            }
        }

        if (InventInventoryDataServiceSoftReservationHelper::isV1Enabled()) 
        {
            if (alreadyCalculateOffsetQtyOnReservedStatus)
            {
                offsetQtyV1 = offsetQtyV0;
            }
            else
            {
                offsetQtyV1 = InventInventoryDataServiceReservationOffsetProcessor::getOffsetQty(_inventTrans, _dataEventType,  StatusIssue::ReservOrdered);
            }
        }

        if (offsetQtyV0 || offsetQtyV1)
        {
            InventInventoryDataServiceReservationOffsetProcessor::processReservationOffsets(_inventTrans.inventTransOrigin, offsetQtyV0, offsetQtyV1, _parameter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSalesLine</Name>
				<Source><![CDATA[
    public static void processSalesLine(SalesLine _salesLine, DataEventType _dataEventType, InventInventoryDataServiceParameters _parameter)
    {
        if (_dataEventType == DataEventType::Inserted
            && (_salesLine.InventoryServiceReservationId != '' || _salesLine.InventoryServiceAutoOffset)
            && InventInventoryDataServiceSoftReservationHelper::isV0Enabled(_parameter)
            && _parameter.ReservationOffsetModifier == InventInventoryDataServiceReservationOffsetModifier::OnOrder)
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(_salesLine.ItemId, _salesLine.inventDimId, _salesLine.InventoryServiceReservationId, _salesLine.QtyOrdered, _parameter.IsProcessingQueueBackup);
        }
        else if (_dataEventType == DataEventType::Updated)
        {
            if (_salesLine.InventoryServiceReservationId != _salesLine.orig().InventoryServiceReservationId || _salesLine.InventoryServiceAutoOffset != _salesLine.orig().InventoryServiceAutoOffset
                || (_salesLine.InventDimId != _salesLine.orig().InventDimId && (_salesLine.InventoryServiceAutoOffset == true || _salesLine.InventoryServiceReservationId != "")))
            {
                // Auto offset cannot be applied to soft reservation offset
                if (!_salesLine.orig().InventoryServiceReservationId && !_salesLine.orig().InventoryServiceAutoOffset)
                {
                    InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLine(_salesLine, false, _parameter);
                }
                else if (!_salesLine.InventoryServiceReservationId && !_salesLine.InventoryServiceAutoOffset)
                {
                    InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLine(_salesLine.orig(), true, _parameter);
                }
                else
                {
                    InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLine(_salesLine, false, _parameter);
                    InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedSalesLine(_salesLine.orig(), true, _parameter);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventTransferLine</Name>
				<Source><![CDATA[
    public static void processInventTransferLine(InventTransferLine inventTransferLine, DataEventType _dataEventType, boolean _isProcessingQueueBackup, StatusIssue _offsetStatusIssue)
    {
        if (_dataEventType == DataEventType::Inserted
            && _offsetStatusIssue == StatusIssue::OnOrder)
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(inventTransferLine.ItemId, inventTransferLine.inventDimId, inventTransferLine.InventoryServiceReservationId, inventTransferLine.QtyTransfer, _isProcessingQueueBackup);
        }
        else if (_dataEventType == DataEventType::Updated)
        {
            if (!inventTransferLine.orig().InventoryServiceReservationId && !inventTransferLine.orig().InventoryServiceAutoOffset)
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedInventTransferLine(inventTransferLine, _isProcessingQueueBackup, false, _offsetStatusIssue);
            }
            else if (!inventTransferLine.InventoryServiceReservationId && !inventTransferLine.InventoryServiceAutoOffset)
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedInventTransferLine(inventTransferLine.orig(), _isProcessingQueueBackup, true, _offsetStatusIssue);
            }
            else
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedInventTransferLine(inventTransferLine, _isProcessingQueueBackup, false, _offsetStatusIssue);
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueFromUpdatedInventTransferLine(inventTransferLine.orig(), _isProcessingQueueBackup, true, _offsetStatusIssue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueueFromInsertedInventTrans</Name>
				<Source><![CDATA[
    // old version
    public static void insertReservationQueueFromInsertedInventTrans(InventTrans _inventTrans, boolean _isProcessingQueueBackup, InventInventoryDataServiceSoftReserveAndOffsetVersion _version, StatusIssue _offsetStatusIssue)
    {
        if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(_inventTrans, _offsetStatusIssue))
        {
            InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, -_inventTrans.Qty, _version);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueueFromDeletedInventTrans</Name>
				<Source><![CDATA[
    // old version
    public static void insertReservationQueueFromDeletedInventTrans(InventTrans _inventTrans, boolean _isProcessingQueueBackup, InventInventoryDataServiceSoftReserveAndOffsetVersion _version, StatusIssue _offsetStatusIssue)
    {
        if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(_inventTrans, _offsetStatusIssue))
        {
            InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, _inventTrans.Qty, _version);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOffsetWithReservationId</Name>
				<Source><![CDATA[
    // old version
    private static void processOffsetWithReservationId(InventTrans _inventTrans, str reservationId, boolean _isProcessingQueueBackup, InventQty offsetQty, InventInventoryDataServiceSoftReserveAndOffsetVersion _version)
    {
        if (_version == InventInventoryDataServiceSoftReserveAndOffsetVersion::v1)
        {
            var reserveInfo = InventInventoryDataServiceSoftReserveHistory::readOffsetQtyForInventTransWithQty(_inventTrans, offsetQty);
            if (reserveInfo)
            {
                var updatedOffsetQty = reserveInfo.parmOffsetQty();
                var history = reserveInfo.parmSoftReserveHistory();

                ttsbegin;
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(_inventTrans.ItemId, history.inventDimId, reservationId, updatedOffsetQty, _isProcessingQueueBackup);
                reserveInfo.updateRelatedSoftReserveHistory();
                ttscommit;
            }
        }
        else
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(_inventTrans.ItemId, _inventTrans.inventDimId, reservationId, offsetQty, _isProcessingQueueBackup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOffset</Name>
				<Source><![CDATA[
    public static void processOffset(InventTrans _inventTrans, boolean _isProcessingQueueBackup, InventQty offsetQty, InventInventoryDataServiceSoftReserveAndOffsetVersion _version)
    {
        if (_version == InventInventoryDataServiceSoftReserveAndOffsetVersion::v1)
        {
            SalesLine salesLine;
            InventTransOrigin   inventTransOrigin;

            select firstonly salesLine where  salesLine.InventoryServiceReservationId != ''
                            exists join inventTransOrigin
                            where inventTransOrigin.RecId == _inventTrans.InventTransOrigin
                            && inventTransOrigin.InventTransId == salesLine.InventTransId;

            if (salesLine)
            {
                InventInventoryDataServiceReservationOffsetProcessor::processOffsetWithReservationId(_inventTrans, salesLine.InventoryServiceReservationId, _isProcessingQueueBackup, offsetQty, _version);
            }
        }
        else
        {
            InventTransOrigin   inventTransOrigin;
            select firstonly inventTransOrigin where inventTransOrigin.RecId == _inventTrans.InventTransOrigin;
            
            if (inventTransOrigin)
            {
                if (inventTransOrigin.ReferenceCategory == InventTransType::Sales)
                {
                    SalesLine salesLine;
                    InventInventoryDataServiceSoftReserveHistory softReservHistory;
                    select firstonly salesLine where  salesLine.InventoryServiceReservationId != '' || salesLine.InventoryServiceAutoOffset
                            exists join inventTransOrigin
                            where inventTransOrigin.RecId == _inventTrans.InventTransOrigin
                            && inventTransOrigin.InventTransId == salesLine.InventTransId
                        notexists join softReservHistory
                        where softReservHistory.inventTransOrigin == _inventTrans.InventTransOrigin;
                    if (salesLine.RecId)
                    {
                        InventInventoryDataServiceReservationOffsetProcessor::processOffsetWithReservationId(_inventTrans, salesLine.InventoryServiceReservationId, _isProcessingQueueBackup, offsetQty, _version);
                    }
                }
                else if (inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip
                || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive
                || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderScrap)
                {
                    InventTransferLine inventTransferLine;
                    select firstonly inventTransferLine 
                        where inventTransferLine.InventoryServiceReservationId != '' || inventTransferLine.InventoryServiceAutoOffset
                        exists join inventTransOrigin
                        where inventTransOrigin.RecId == _inventTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == inventTransferLine.InventTransId;
                    if (inventTransferLine.RecId)
                    {
                        InventInventoryDataServiceReservationOffsetProcessor::processOffsetWithReservationId(_inventTrans, inventTransferLine.InventoryServiceReservationId, _isProcessingQueueBackup, offsetQty, _version);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueueFromUpdatedInventTrans</Name>
				<Source><![CDATA[
    public static void insertReservationQueueFromUpdatedInventTrans(InventTrans _inventTrans, boolean _isProcessingQueueBackup, InventInventoryDataServiceSoftReserveAndOffsetVersion _version, StatusIssue _offsetStatusIssue)
    {
        InventQty newTransQty = _inventTrans.Qty;
        InventQty origTransQty = _inventTrans.orig().Qty;
        InventQty offsetQty;

        if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueExactMatched(_inventTrans, _offsetStatusIssue))
        {
            if (newTransQty         != origTransQty         &&
                _inventTrans.inventDimId == _inventTrans.orig().inventDimId )
            {
                InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, -(newTransQty - origTransQty), _version);
            }
            else if (_inventTrans.inventDimId != _inventTrans.orig().inventDimId)
            {
                // In reservation Offset V1, InventDimID is fetched from InventTrans. So we keep 2 seperate calls.
                // When these calls are merged into queue temp the records are sumed together.
                InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, -newTransQty, _version);
                InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans.orig(), _isProcessingQueueBackup, origTransQty, _version);
            }
        }
        else if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatchedForUpdatedInventTrans(_inventTrans, _inventTrans.orig(), _offsetStatusIssue))
        {
            InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, -newTransQty, _version);
        }
        else if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatchedForUpdatedInventTrans(_inventTrans.orig(), _inventTrans, _offsetStatusIssue))
        {
            InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, newTransQty, _version);
        }
        // TODO the behaviour of various cancels
        // Cancel packing slip
        else if (_offsetStatusIssue ==StatusIssue::ReservOrdered
            && _inventTrans.StatusIssue == StatusIssue::Sold
            && _inventTrans.orig().StatusIssue == StatusIssue::Deducted
            && _inventTrans.PackingSlipReturned == NoYes::Yes)
        {
            InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, newTransQty, _version);
        }
        // Cancel transfer order
        else if (_version ==InventInventoryDataServiceSoftReserveAndOffsetVersion::v0
            && _offsetStatusIssue == StatusIssue::ReservOrdered
            && _inventTrans.StatusReceipt == StatusReceipt::Purchased
            && _inventTrans.orig().StatusReceipt == StatusReceipt::Received
            && _inventTrans.InvoiceReturned == NoYes::Yes)
        {
            InventInventoryDataServiceReservationOffsetProcessor::processOffset(_inventTrans, _isProcessingQueueBackup, -newTransQty, _version);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationOffsetsFromInsertedInventTrans</Name>
				<Source><![CDATA[
    private static InventQty getReservationOffsetsFromInsertedInventTrans(InventTrans _inventTrans, StatusIssue _offsetStatusIssue)
    {
        InventQty offsetQty;
        if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(_inventTrans, _offsetStatusIssue))
        {
            offsetQty = -_inventTrans.Qty;
        }
        return offsetQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationOffsetsFromUpdatedInventTrans</Name>
				<Source><![CDATA[
    private static InventQty getReservationOffsetsFromUpdatedInventTrans(InventTrans _inventTrans, StatusIssue _offsetStatusIssue)
    {
        InventQty offsetQty;
        InventQty newTransQty = _inventTrans.Qty;
        InventQty origTransQty = _inventTrans.orig().Qty;
        if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueExactMatched(_inventTrans, _offsetStatusIssue))
        {
            offsetQty = -(newTransQty - origTransQty);
        }
        else if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatchedForUpdatedInventTrans(_inventTrans, _inventTrans.orig(), _offsetStatusIssue))
        {
            offsetQty =  -newTransQty;
        }
        else if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatchedForUpdatedInventTrans(_inventTrans.orig(), _inventTrans, _offsetStatusIssue))
        {
            offsetQty =  newTransQty;
        }
        // TODO the behaviour of various cancels
        // Cancel packing slip
        else if (_offsetStatusIssue ==StatusIssue::ReservOrdered
            && _inventTrans.StatusIssue == StatusIssue::Sold
            && _inventTrans.orig().StatusIssue == StatusIssue::Deducted
            && _inventTrans.PackingSlipReturned == NoYes::Yes)
        {
            offsetQty = newTransQty;
        }
        // Cancel transfer order
        else if (_offsetStatusIssue == StatusIssue::ReservOrdered
            && _inventTrans.StatusReceipt == StatusReceipt::Purchased
            && _inventTrans.orig().StatusReceipt == StatusReceipt::Received
            && _inventTrans.InvoiceReturned == NoYes::Yes)
        {
            offsetQty = -newTransQty;
        }

        return offsetQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationOffsetsFromDeletedInventTrans</Name>
				<Source><![CDATA[
    private static InventQty getReservationOffsetsFromDeletedInventTrans(InventTrans _inventTrans, StatusIssue _offsetStatusIssue)
    {
        InventQty offsetQty;
        if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(_inventTrans, _offsetStatusIssue))
        {
            offsetQty = _inventTrans.Qty;
        }
        return offsetQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedSourceTable</Name>
				<Source><![CDATA[
    private static Common findRelatedSourceTable(InventTransoriginid _inventTransOriginId, TableId sourceTableId)
    {
        InventTransOrigin   inventTransOrigin;
        Common              sourceTable = new SysDictTable(sourceTableId).makeRecord();
        FieldId             reservationIdFieldId = fieldName2Id(sourceTableId, identifierStr(InventoryServiceReservationId));
        FieldId             autoOffsetFieldId = fieldName2Id(sourceTableId, identifierStr(InventoryServiceAutoOffset));
        FieldId             inventTransIdField = fieldName2Id(sourceTableId, identifierStr(InventTransId));
    
        select firstonly sourceTable
            where (sourceTable.(reservationIdFieldId) != '' || sourceTable.(autoOffsetFieldId) == true)
            exists join inventTransOrigin
                where inventTransOrigin.RecId == _inventTransOriginId
                   && inventTransOrigin.InventTransId == sourceTable.(inventTransIdField);

        return sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReservationOffsets</Name>
				<Source><![CDATA[
    private static void processReservationOffsets(InventTransoriginid _inventTransOriginId, InventQty _offsetQtyV0, InventQty _offsetQtyV1, InventInventoryDataServiceParameters _parameter)
    {
        // try salesline first
        SalesLine salesLine = InventInventoryDataServiceReservationOffsetProcessor::findRelatedSourceTable(_inventTransOriginId, tableNum(SalesLine)) as SalesLine;
        if (salesLine)
        {
            InventInventoryDataServiceSoftReserveHistory history = InventInventoryDataServiceSoftReserveHistory::findInventTransOriginId(_inventTransOriginId, true);

            if (history)
            {
                // will include the previous imported logic: create softReservHistory and set all qty as successedQty
                InventInventoryDataServiceReservationOffsetProcessor::processOffsetV1(history, salesLine.InventoryServiceReservationId, _offsetQtyV1, _parameter.IsProcessingQueueBackup);
            }
            else
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(salesLine.ItemId, salesLine.InventDimId, salesLine.InventoryServiceReservationId, _offsetQtyV0, _parameter.IsProcessingQueueBackup);
            }
        }
        else if (_offsetQtyV0)
        {
            InventTransferLine inventTransferLine = InventInventoryDataServiceReservationOffsetProcessor::findRelatedSourceTable(_inventTransOriginId, tableNum(InventTransferLine)) as InventTransferLine;
            if (inventTransferLine)
            {
                InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(inventTransferLine.ItemId, inventTransferLine.InventDimId, inventTransferLine.InventoryServiceReservationId, _offsetQtyV0, _parameter.IsProcessingQueueBackup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetQty</Name>
				<Source><![CDATA[
    private static InventQty getOffsetQty(InventTrans _inventTrans, DataEventType _dataEventType,  StatusIssue _statusIssue)
    {
        InventQty offsetQty;

        // Split inventtrans
        if (_dataEventType == DataEventType::Inserted)
        {
            offsetQty = InventInventoryDataServiceReservationOffsetProcessor::getReservationOffsetsFromInsertedInventTrans(_inventTrans, _statusIssue);
        }
        else if (_dataEventType == DataEventType::Updated)
        {
            offsetQty = InventInventoryDataServiceReservationOffsetProcessor::getReservationOffsetsFromUpdatedInventTrans(_inventTrans, _statusIssue);
        }
        else if (_dataEventType == DataEventType::Deleted)
        {
            offsetQty = InventInventoryDataServiceReservationOffsetProcessor::getReservationOffsetsFromDeletedInventTrans(_inventTrans, _statusIssue);
        }
        return offsetQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOffsetV1</Name>
				<Source><![CDATA[
    private static void processOffsetV1(InventInventoryDataServiceSoftReserveHistory _history, str reservationId, InventQty offsetQty, boolean _isProcessingQueueBackup)
    {
        var reserveInfo = _history.readOffsetQty(offsetQty);
        if (reserveInfo)
        {
            var updatedOffsetQty = reserveInfo.parmOffsetQty();

            ttsbegin;
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(_history.ItemId, _history.inventDimId, reservationId, updatedOffsetQty, _isProcessingQueueBackup);
            reserveInfo.updateRelatedSoftReserveHistory();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueueFromUpdatedSalesLineByVersion</Name>
				<Source><![CDATA[
    public static void insertReservationQueueFromUpdatedSalesLineByVersion(SalesLine _salesLine, boolean _isProcessingQueueBackup, boolean reverseQty, InventInventoryDataServiceSoftReserveAndOffsetVersion _version, StatusIssue _offsetStatusIssue)
    {
        InventTrans _inventTrans;
        InventTransOriginSalesLine inventTransOriginSalesLine;
        InventInventoryDataServiceSoftReserveHistory softReservHistory;
        if (_version == InventInventoryDataServiceSoftReserveAndOffsetVersion::v0)
        {
            while select _inventTrans
                exists join inventTransOriginSalesLine
                    where inventTransOriginSalesLine.SalesLineDataAreaId == _salesLine.DataAreaId
                       && inventTransOriginSalesLine.SalesLineInventTransId == _salesLine.InventTransId
                       && inventTransOriginSalesLine.InventTransOrigin == _inventTrans.InventTransOrigin
                notexists join softReservHistory
                                where softReservHistory.inventTransOrigin == _inventTrans.InventTransOrigin
            {
                if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(_inventTrans, _offsetStatusIssue))
                {
                    InventQty offsetQty = reverseQty ? _inventTrans.Qty : -_inventTrans.Qty;
                    InventInventoryDataServiceReservationOffsetProcessor::processOffsetWithReservationId(_inventTrans, _salesLine.InventoryServiceReservationId, _isProcessingQueueBackup, offsetQty, _version);
                }
            }
        }
        else
        {
            while select _inventTrans
                exists join inventTransOriginSalesLine
                    where inventTransOriginSalesLine.SalesLineDataAreaId == _salesLine.DataAreaId
                       && inventTransOriginSalesLine.SalesLineInventTransId == _salesLine.InventTransId
                       && inventTransOriginSalesLine.InventTransOrigin == _inventTrans.InventTransOrigin
            {
                if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(_inventTrans, _offsetStatusIssue))
                {
                    InventQty offsetQty = reverseQty ? _inventTrans.Qty : -_inventTrans.Qty;
                    InventInventoryDataServiceReservationOffsetProcessor::processOffsetWithReservationId(_inventTrans, _salesLine.InventoryServiceReservationId, _isProcessingQueueBackup, offsetQty, _version);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueueFromUpdatedSalesLine</Name>
				<Source><![CDATA[
    public static void insertReservationQueueFromUpdatedSalesLine(SalesLine _salesLine, boolean reverseQty, InventInventoryDataServiceParameters _parameter)
    {
        InventTrans inventTrans;
        InventTransOriginSalesLine inventTransOriginSalesLine;

        InventInventoryDataServiceSoftReserveHistory history = InventInventoryDataServiceSoftReserveHistory::findInventTransId(_salesLine.InventTransId, true);
        if (history) // v1 todo: confirm that v1 won't go to update offset
        {
            if (InventInventoryDataServiceSoftReservationHelper::isV1Enabled())
            {
                while select inventTrans
                    exists join inventTransOriginSalesLine
                    where inventTransOriginSalesLine.SalesLineDataAreaId == _salesLine.DataAreaId
                    && inventTransOriginSalesLine.SalesLineInventTransId == _salesLine.InventTransId
                    && inventTransOriginSalesLine.InventTransOrigin == inventTrans.InventTransOrigin
                {
                    if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(inventTrans, StatusIssue::ReservOrdered))
                    {
                        InventQty offsetQty = reverseQty ? inventTrans.Qty : -inventTrans.Qty;
                        InventInventoryDataServiceReservationOffsetProcessor::processOffsetV1(history, _salesLine.InventoryServiceReservationId, offsetQty, _parameter.IsProcessingQueueBackup);
                    }
                }
            }
        }
        else if (InventInventoryDataServiceSoftReservationHelper::isV0Enabled(_parameter))
        {
            while select inventTrans
                exists join inventTransOriginSalesLine
                where inventTransOriginSalesLine.SalesLineDataAreaId == _salesLine.DataAreaId
                && inventTransOriginSalesLine.SalesLineInventTransId == _salesLine.InventTransId
                && inventTransOriginSalesLine.InventTransOrigin == inventTrans.InventTransOrigin
            {
                if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(inventTrans, _parameter.getReservationOffsetV0StatusIssue()))
                {
                    InventQty offsetQty = reverseQty ? inventTrans.Qty : -inventTrans.Qty;
                    InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(inventTrans.ItemId, _salesLine.inventDimId, _salesLine.InventoryServiceReservationId, offsetQty, _parameter.IsProcessingQueueBackup);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSumQueue</Name>
				<Source><![CDATA[
    public static void insertInventSumQueue(ItemId itemid, InventDimId inventDimId)
    {
        InventInventoryDataServiceInventSumQueue inventSumQueue;

        inventSumQueue.ItemId = itemid;
        inventSumQueue.InventDimId = inventDimId;
        inventSumQueue.Company = curExt();
        inventSumQueue.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSumQueueBackup</Name>
				<Source><![CDATA[
    public static void insertInventSumQueueBackup(ItemId itemid, InventDimId inventDimId)
    {
        InventInventoryDataServiceInventSumQueueBackup inventSumQueueBackup;

        inventSumQueueBackup.ItemId = itemid;
        inventSumQueueBackup.InventDimId = inventDimId;
        inventSumQueueBackup.Company = curExt();
        inventSumQueueBackup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueue</Name>
				<Source><![CDATA[
    public static void insertReservationQueue(ItemId itemid, InventDimId inventDimId, str reservationId, InventQty qty)
    {
        InventInventoryDataServiceReservationQueue reservationQueue;

        reservationQueue.ItemId = itemId;
        reservationQueue.InventDimId = inventDimId;
        reservationQueue.Company = curExt();
        reservationQueue.ReservationId = reservationId;
        reservationQueue.offsetQty = qty;
        reservationQueue.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueueBackup</Name>
				<Source><![CDATA[
    public static void insertReservationQueueBackup(ItemId itemid, InventDimId inventDimId, str reservationId, InventQty qty)
    {
        InventInventoryDataServiceReservationQueueBackup reservationQueueBackup;

        reservationQueueBackup.ItemId = itemId;
        reservationQueueBackup.InventDimId = inventDimId;
        reservationQueueBackup.Company = curExt();
        reservationQueueBackup.ReservationId = reservationId;
        reservationQueueBackup.offsetQty = qty;
        reservationQueueBackup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationQueueFromUpdatedInventTransferLine</Name>
				<Source><![CDATA[
    public static void insertReservationQueueFromUpdatedInventTransferLine(InventTransferLine inventTransferLine, boolean _isProcessingQueueBackup, boolean reverseQty, StatusIssue _offsetStatusIssue)
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        while select inventTrans
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == inventTransferLine.InventTransId
                   && inventTransOrigin.RecId == inventTrans.InventTransOrigin
        {
            if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatched(inventTrans, _offsetStatusIssue))
            {
                InventQty offsetQty = reverseQty ? inventTrans.Qty : -inventTrans.Qty;
                if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
                {
                    InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(inventTrans.ItemId, inventTransferLine.inventDimId, inventTransferLine.InventoryServiceReservationId, offsetQty, _isProcessingQueueBackup);
                }
                else
                {
                    InventInventoryDataServiceReservationOffsetProcessor::insertReservationRecords(inventTrans.ItemId, inventTrans.inventDimId, inventTransferLine.InventoryServiceReservationId, offsetQty, _isProcessingQueueBackup);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationRecords</Name>
				<Source><![CDATA[
    internal static void insertReservationRecords(ItemId itemId, InventDimId inventDimId, str reservationId, InventQty qty, boolean _isProcessingQueueBackup)
    {
        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            if (qty == 0)
            {
                return;
            }
        }

        ttsbegin;
        if (_isProcessingQueueBackup)
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueue(itemId, inventDimId, reservationId, qty);
            InventInventoryDataServiceReservationOffsetProcessor::insertInventSumQueue(itemId, inventDimId);
        }
        else
        {
            InventInventoryDataServiceReservationOffsetProcessor::insertReservationQueueBackup(itemId, inventDimId, reservationId, qty);
            InventInventoryDataServiceReservationOffsetProcessor::insertInventSumQueueBackup(itemId, inventDimId);
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>