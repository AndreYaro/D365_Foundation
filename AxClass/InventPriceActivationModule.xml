<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPriceActivationModule</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventPriceActivationModule extends InventPriceActivation
{
    ItemId                  itemId;
    CostingVersionPriceType priceType;
    InventDimId             inventDimId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            super();

            InventItemPriceSim inventItemPriceSimulated = InventItemPriceSim::find(itemId,
                                                                                versionId,
                                                                                fromDate,
                                                                                priceType,
                                                                                inventDimId,
                                                                                '',
                                                                                true);

            if (!inventItemPriceSimulated.RecId)
            {
                throw(error(strFmt("@SCM:ErrorMessage_CannotFindValidPendingPriceToActivate", itemId, inventDimId)));
            }

            this.checkFromDate();
            inventItemPriceSimulated.moveSimulatedToCurrent();

            InventTableModule inventTableModule = InventTableModule::find(itemId,
                                                                          InventItemPrice::convPriceTypeToModuleInventPurchSales(priceType),
                                                                          true);
            inventTableModule.initFromInventItemPriceSim(inventItemPriceSimulated);
            inventTableModule.update(false);

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCheckFailedMessage</Name>
				<Source><![CDATA[
    protected str dateCheckFailedMessage()
    {
        return strFmt("@SYS104963", itemId, date2StrUsr( fromDate, DateFlags::FormatAll), date2StrUsr( DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceType</Name>
				<Source><![CDATA[
    public CostingVersionPriceType parmPriceType(CostingVersionPriceType _priceType = priceType)
    {
        priceType = _priceType;
        return priceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventPriceActivationModule construct()
    {
        return new InventPriceActivationModule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventItemPriceSim</Name>
				<Source><![CDATA[
    public static  InventPriceActivation newInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        return InventPriceActivationModule::newInventModule(    _inventItemPriceSim.ItemId,
                                                                _inventItemPriceSim.VersionId,
                                                                _inventItemPriceSim.FromDate,
                                                                _inventItemPriceSim.PriceType,
                                                                _inventItemPriceSim.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventModule</Name>
				<Source><![CDATA[
    public static InventPriceActivationModule newInventModule(
        ItemId                  _itemId,
        CostingVersionId        _versionId,
        FromDate                _fromDate,
        CostingVersionPriceType _priceType,
        InventDimId             _inventDimId = InventDim::inventDimIdBlank()
        )
    {
        InventPriceActivationModule inventPriceActivationModule = InventPriceActivationModule::construct();

        inventPriceActivationModule.parmItemId(_itemId);
        inventPriceActivationModule.parmVersionId(_versionId);
        inventPriceActivationModule.parmFromDate(_fromDate);
        inventPriceActivationModule.parmPriceType(_priceType);
        inventPriceActivationModule.parmInventDimId(_inventDimId);
        return inventPriceActivationModule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>