<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGType</c> class is the business object class for the <c>BankLG</c> table.
/// </summary>
class BankLGType
{
    BankLGGuarantee     bankLGGuarantee;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the expiry date of current Letter of Guarantee. If its expiry date has been passed, close it.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkExpiryDate()
    {
        if (bankLGGuarantee.RecId != 0)
        {
            bankLGGuarantee.selectForUpdate(true);

            // Check both session date time and server date time to avoid LG is auto
            // expired by mistake when the session date time is earlier than server date time.
            if (BankLGType::isExecutionAction(BankLGType::statusToAction(bankLGGuarantee.Status))
                && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open
                && bankLGGuarantee.ExpiryDateTime    <  DateTimeUtil::utcNow()
                && bankLGGuarantee.ExpiryDateTime    <  DateTimeUtil::getSystemDateTime())
            {
                ttsbegin;
                bankLGGuarantee.FacilityStatus = BankLGFacilityStatusType::Closed;
                bankLGGuarantee.update();
                ttscommit;

                // The current Letter of Guarantee has been auto expired and closed. It cannot be used until be extended.
                info("@SYS328175");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActionAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a specified action is available for current Letter of Guarantee.
    /// </summary>
    /// <param name="_actionType">
    ///    The type of action.
    /// </param>
    /// <returns>
    ///    true if available; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isActionAvailable(BankLGAllActionType _actionType)
    {
        boolean ret = false;

        if (bankLGGuarantee.RecId)
        {
            switch (_actionType)
            {
                // Execution actions
                case BankLGAllActionType::ExecuteSubmitToBank:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::Request
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Requested;
                    break;
                case BankLGAllActionType::ExecuteReceiveFromBank:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::ExecuteSubmitToBank
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Requested;
                    break;
                case BankLGAllActionType::ExecuteGiveToBeneficiary:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::RequestGiveToBeneficiary
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open;
                    break;
                case BankLGAllActionType::ExecuteIncreaseValue:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::RequestIncreaseValue
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open;
                    break;
                case BankLGAllActionType::ExecuteDecreaseValue:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::RequestDecreaseValue
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open;
                    break;
                case BankLGAllActionType::ExecuteExtend:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::RequestExtend
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open;
                    break;
                case BankLGAllActionType::ExecuteCancel:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::RequestCancel
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open;
                    break;
                case BankLGAllActionType::ExecuteLiquidate:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::RequestLiquidate
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open;
                    break;

                // Request actions
                case BankLGAllActionType::RequestGiveToBeneficiary:
                    ret = bankLGGuarantee.Status             == BankLGStatusType::ExecuteReceiveFromBank
                        && bankLGGuarantee.FacilityStatus    == BankLGFacilityStatusType::Open;
                    break;
                case BankLGAllActionType::RequestExtend:
                case BankLGAllActionType::RequestIncreaseValue:
                case BankLGAllActionType::RequestDecreaseValue:
                case BankLGAllActionType::RequestCancel:
                case BankLGAllActionType::RequestLiquidate:
                    ret = bankLGGuarantee.FacilityStatus == BankLGFacilityStatusType::Open
                        && (bankLGGuarantee.Status    == BankLGStatusType::ExecuteGiveToBeneficiary
                            || bankLGGuarantee.Status == BankLGStatusType::ExecuteIncreaseValue
                            || bankLGGuarantee.Status == BankLGStatusType::ExecuteDecreaseValue
                            || bankLGGuarantee.Status == BankLGStatusType::ExecuteExtend);
                    break;
            }

            // For "Request extend" and "Request cancel", if LG is closed by auto expired, the LG can be requested to extend.
            if (!ret
                && (_actionType     == BankLGAllActionType::RequestExtend
                    || _actionType  == BankLGAllActionType::RequestCancel))
            {
                if (bankLGGuarantee.isAutoExpired())
                {
                    ret = true;
                }
            }
        }
        else if (_actionType == BankLGAllActionType::Request)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLG</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public BankLGGuarantee parmBankLG(BankLGGuarantee _bankLGGuarantee = bankLGGuarantee)
    {
        bankLGGuarantee = _bankLGGuarantee;

        return bankLGGuarantee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionToExecutionAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a value of the <c>BankLGAllActionType</c> enumeration to the
    ///    <c>BankLGExecutionActionType</c> enumeration.
    /// </summary>
    /// <param name="_actionType">
    ///    The value of the <c>BankLGAllActionType</c> enumeration.
    /// </param>
    /// <returns>
    ///    The corresponding value of the <c>BankLGExecutionActionType</c> enumeration.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGExecutionActionType actionToExecutionAction(BankLGAllActionType _actionType)
    {
        switch (_actionType)
        {
            case BankLGAllActionType::ExecuteSubmitToBank:
                return BankLGExecutionActionType::SubmitToBank;
            case BankLGAllActionType::ExecuteReceiveFromBank:
                return BankLGExecutionActionType::ReceiveFromBank;
            case BankLGAllActionType::ExecuteGiveToBeneficiary:
                return BankLGExecutionActionType::GiveToBeneficiary;
            case BankLGAllActionType::ExecuteIncreaseValue:
                return BankLGExecutionActionType::IncreaseValue;
            case BankLGAllActionType::ExecuteDecreaseValue:
                return BankLGExecutionActionType::DecreaseValue;
            case BankLGAllActionType::ExecuteExtend:
                return BankLGExecutionActionType::Extend;
            case BankLGAllActionType::ExecuteCancel:
                return BankLGExecutionActionType::Cancel;
            case BankLGAllActionType::ExecuteLiquidate:
                return BankLGExecutionActionType::Liquidate;
        }

        return BankLGExecutionActionType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionToFacilityStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a value of the <c>BankLGAllActionType</c> enumeration to the
    ///    <c>BankLGFacilityStatusType</c> enumeration.
    /// </summary>
    /// <param name="_actionType">
    ///    The value of the <c>BankLGAllActionType</c> enumeration.
    /// </param>
    /// <returns>
    ///    The corresponding value of the <c>BankLGFacilityStatusType</c> enumeration.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGFacilityStatusType actionToFacilityStatus(BankLGAllActionType _actionType)
    {
        BankLGFacilityStatusType    bankLGFacilityStatusType;

        switch (_actionType)
        {
            case BankLGAllActionType::ExecuteSubmitToBank:
            case BankLGAllActionType::Request:
                bankLGFacilityStatusType = BankLGFacilityStatusType::Requested;
                break;

            case BankLGAllActionType::RequestGiveToBeneficiary:
            case BankLGAllActionType::RequestExtend:
            case BankLGAllActionType::RequestIncreaseValue:
            case BankLGAllActionType::RequestDecreaseValue:
            case BankLGAllActionType::RequestCancel:
            case BankLGAllActionType::RequestLiquidate:
            case BankLGAllActionType::ExecuteReceiveFromBank:
            case BankLGAllActionType::ExecuteGiveToBeneficiary:
            case BankLGAllActionType::ExecuteExtend:
            case BankLGAllActionType::ExecuteIncreaseValue:
            case BankLGAllActionType::ExecuteDecreaseValue:
                bankLGFacilityStatusType = BankLGFacilityStatusType::Open;
                break;

            case BankLGAllActionType::ExecuteCancel:
            case BankLGAllActionType::ExecuteLiquidate:
                bankLGFacilityStatusType = BankLGFacilityStatusType::Closed;
                break;

            default:
                throw error(strfmt("@SYS12580", _actionType));
        }

        return bankLGFacilityStatusType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionToRequestAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a value of the <c>BankLGAllActionType</c> enumeration to the
    ///    <c>BankLGRequestActionType</c> enumeration.
    /// </summary>
    /// <param name="_actionType">
    ///    The value of the <c>BankLGAllActionType</c> enumeration.
    /// </param>
    /// <returns>
    ///    The corresponding value of the <c>BankLGRequestActionType</c> enumeration.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGRequestActionType actionToRequestAction(BankLGAllActionType _actionType)
    {
        switch (_actionType)
        {
            case BankLGAllActionType::Request:
                return BankLGRequestActionType::Request;
            case BankLGAllActionType::RequestGiveToBeneficiary:
                return BankLGRequestActionType::GiveToBeneficiary;
            case BankLGAllActionType::RequestExtend:
                return BankLGRequestActionType::Extend;
            case BankLGAllActionType::RequestIncreaseValue:
                return BankLGRequestActionType::IncreaseValue;
            case BankLGAllActionType::RequestDecreaseValue:
                return BankLGRequestActionType::DecreaseValue;
            case BankLGAllActionType::RequestCancel:
                return BankLGRequestActionType::Cancel;
            case BankLGAllActionType::RequestLiquidate:
                return BankLGRequestActionType::Liquidate;
        }

        return BankLGRequestActionType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionToStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a value of the <c>BankLGAllActionType</c> enumeration to the <c>BankLGStatusType</c>
    ///    enumeration.
    /// </summary>
    /// <param name="_actionType">
    ///    The value of the <c>BankLGAllActionType</c> enumeration.
    /// </param>
    /// <returns>
    ///    The corresponding value of the <c>BankLGStatusType</c> enumeration.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGStatusType actionToStatus(BankLGAllActionType _actionType)
    {
        BankLGStatusType    bankLGStatusType;

        // The enum value for BankLGAllActionType and BankLGStatusType are set to be matched.
        bankLGStatusType = enum2int(_actionType);
        return bankLGStatusType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExecutionAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether an action is an execution action or not.
    /// </summary>
    /// <param name="_actionType">
    ///    The type of action.
    /// </param>
    /// <returns>
    ///    true if it is an execution action.
    /// </returns>
    /// <remarks>
    ///    The enumeration value that is used.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isExecutionAction(BankLGAllActionType _actionType)
    {
        return _actionType >= BankLGAllActionType::ExecuteSubmitToBank
            && _actionType <= BankLGAllActionType::ExecuteLiquidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequestAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether an action is a request action or not.
    /// </summary>
    /// <param name="_actionType">
    ///    The type of action.
    /// </param>
    /// <returns>
    ///    true if it is a request action.
    /// </returns>
    /// <remarks>
    ///    The enumeration value that is used.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isRequestAction(BankLGAllActionType _actionType)
    {
        return _actionType >= BankLGAllActionType::Request
            && _actionType <= BankLGAllActionType::RequestLiquidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusToAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value of the <c>BankLGStatusType</c> enum to the <c>BankLGAllActionType</c> enum.
    /// </summary>
    /// <param name="_bankLGStatusType">
    /// The value of the <c>BankLGStatusType</c> enum.
    /// </param>
    /// <returns>
    /// The corresponding value of the <c>BankLGAllActionType</c> enum.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGAllActionType statusToAction(BankLGStatusType _bankLGStatusType)
    {
        BankLGAllActionType actionType;

        // The enum value for BankLGAllActionType and BankLGStatusType are set to be matched.
        actionType = enum2int(_bankLGStatusType);

        return actionType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>