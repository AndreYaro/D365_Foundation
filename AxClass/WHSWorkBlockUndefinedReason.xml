<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkBlockUndefinedReason</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkBlockUndefinedReason</c> class handles the blocking of multiple works for Undefined Reason.
/// </summary>
public class WHSWorkBlockUndefinedReason
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSWorkTable workArgs = _args.record() as WHSWorkTable;
        if (workArgs && FormDataUtil::isFormDataSource(workArgs))
        {
            FormDataSource dataSource = FormDataUtil::getFormDataSource(workArgs) as FormDataSource;
           
            for (WHSWorkTable work = dataSource.getFirst(true) ? dataSource.getFirst(true) : dataSource.cursor();
            work;
            work = dataSource.getNext())
            {
                try
                {
                    using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
                    {
                        WHSWorkBlockUndefinedReason::tryBlockWorkForUndefinedReason(work);
                    }
                }
                catch (Exception::Error)
                {
                    // Blocking of the other works should continue if the blocking of a work throws an error.
                }
            }
            dataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockWorkForUndefinedReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to block the current work for Undefined reason.
    /// </summary>
    /// <param name = "_workTable">The current work.</param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work cannot be blocked.
    /// </exception>
    [Hookable(false)]
    public static void tryBlockWorkForUndefinedReason(WHSWorkTable _workTable)
    {
        ttsbegin;

        if (WHSWorkBlockUndefinedReason::validateWorkIsNotBlockedByUndefinedReason(_workTable.WorkId))
        {
            WHSWorkBlockUndefinedReason::tryBlockUndefinedReason(_workTable.WorkId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkIsNotBlockedByUndefinedReason</Name>
				<Source><![CDATA[
    private static boolean validateWorkIsNotBlockedByUndefinedReason(WHSWorkId _workId)
    {
        WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkId(_workId);

        if (workBlocking.isBlockedByReasonType(WHSWorkBlockingReasonType::Undefined))
        {
            warning(strFmt("@WAX:WHSWorkAlreadyBlockedMessage", _workId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockUndefinedReason</Name>
				<Source><![CDATA[
    private static void tryBlockUndefinedReason(WHSWorkId _workId)
    {
        ttsbegin;

        WHSWorkBlocking::newFromWorkId(_workId)
            .tryBlockWorkWithReasonType(WHSWorkBlockingReasonType::Undefined);

        // When blocking a work for Undefined reason, the blocking either succeeds or an error is thrown.
        info(strFmt("@WAX:WHSWorkBlockSuccessMessage", _workId));

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>