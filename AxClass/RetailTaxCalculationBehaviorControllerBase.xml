<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTaxCalculationBehaviorControllerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTaxCalculationBehaviorControllerBase</c> class is used to control the behavior of tax calculation in a centralized fashion.
/// </summary>
public abstract class RetailTaxCalculationBehaviorControllerBase
{
    private boolean isLegalEntityInConsolidatedCountry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailTaxCalculationBehaviorControllerBase</c> class.
    /// </summary>
    protected void new()
    {
        isLegalEntityInConsolidatedCountry = SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureInvoicingToAllowLineLevelTaxAdjusments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configure the <c>SalesFormLetter</c> contract so that it allows for line level tax adjustments.
    /// </summary>
    /// <param name = "_salesFormLetter">The SalesFormLetter instance.</param>
    public void configureInvoicingToAllowLineLevelTaxAdjusments(SalesFormLetter _salesFormLetter)
    {
        SalesFormLetterInvoiceContract contract = _salesFormLetter.getContract() as SalesFormLetterInvoiceContract;

        if (contract == null)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        contract.parmAllowLineLevelTaxAdjustments(this.allowLineLevelTaxAdjustments() || this.allowCustomerOrderLineLevelTaxAdjustments());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineLevelTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not cash and carry line level tax adjusments are allowed. This is specific to retail statements.
    /// </summary>
    /// <returns>true if line level tax adjustments are allowed; otherwise, false.</returns>
    public boolean allowLineLevelTaxAdjustments()
    {
        if (isLegalEntityInConsolidatedCountry)
        {
            return true;
        }
        else
        {
            return this.isFromStatement() && RetailParameters::find().TaxCalculationBehavior == RetailTaxCalculationBehavior::DontRecalculate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCustomerOrderLineLevelTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not customer order line level tax adjusments are allowed.
    /// </summary>
    /// <returns>true if line level tax adjustments are allowed; otherwise, false.</returns>
    internal boolean allowCustomerOrderLineLevelTaxAdjustments()
    {
        if (isLegalEntityInConsolidatedCountry)
        {
            return true;
        }
        else
        {
            return RetailParameters::find().CustomerOrderTaxCalculationBehavior == RetailCustomerOrderTaxCalculationBehavior::DontRecalculate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areChargeLevelTaxAdjustmentsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether charge tax adjustments are allowed.
    /// </summary>
    /// <param name="isReturn">
    /// Boolean for whether the charge is for a return line or return order.
    /// </param>
    /// <param name="isCarryOut">
    /// Boolean for whether the charge is for a carry out line or carry out mixed cart order.
    /// </param>
    /// <returns>true if charge tax adjustments are allowed; otherwise, false.</returns>
    internal boolean areChargeLevelTaxAdjustmentsAllowed(boolean isReturn, boolean isCarryOut)
    {
        return (RetailStatementFeatureControl::isAdjustChargeTaxesEnabled() && this.allowLineLevelTaxAdjustments())
            || ((isReturn || isCarryOut) && this.allowCustomerOrderLineLevelTaxAdjustments());
    }

]]></Source>
			</Method>
			<Method>
				<Name>areLineLevelTaxAdjustmentsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether line level tax adjustments are allowed.
    /// </summary>
    /// <param name="isSales">
    /// Boolean for whether the line is a Sales and not a quotation.
    /// </param>
    /// <param name="isReturnLine">
    /// Boolean for whether the line is a return line.
    /// </param>
    /// <param name="isCarryOutLine">
    /// Boolean for whether the line is a carry out line.
    /// </param>
    /// <returns>true if line level tax adjustments are allowed; otherwise, false.</returns>
    internal boolean areLineLevelTaxAdjustmentsAllowed(boolean isSales, boolean isReturnLine, boolean isCarryOutLine)
    {
        return isSales && (this.allowLineLevelTaxAdjustments()
            || ((isReturnLine || isCarryOutLine) && this.allowCustomerOrderLineLevelTaxAdjustments()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowHeaderLevelTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not header level tax adjusments are allowed.
    /// </summary>
    /// <returns>true if header level tax adjustments are allowed; otherwise, false.</returns>
    public boolean allowHeaderLevelTaxAdjustments()
    {
        return !isLegalEntityInConsolidatedCountry && !this.isFromStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFromStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not the invoice to be posted belongs to a retail statement.
    /// </summary>
    /// <returns>true if we are posting invoices originating from retail statements; otherwise, false.</returns>
    public abstract boolean isFromStatement()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>