<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditableExcelContextFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionAuditableExcelContextFactory</c> class creates <c>ExportToExcelDataEntityContext</c> with predefined set of entites and filters.
/// </summary>
internal static class RetailTransactionAuditableExcelContextFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructCashManagementContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>ExportToExcelDataEntityContext</c> that exposes all cash management transactions for a given statements.
    /// </summary>
    /// <param name = "_statementTable">The statement record.</param>
    /// <returns>An ExportToExcelDataEntityContext instance.</returns>
    public static ExportToExcelDataEntityContext constructCashManagementContext(RetailStatementTable _statementTable)
    {
        container cashManagementTransactionTypes = [
            RetailTransactionType::BankDrop, 
            RetailTransactionType::SafeDrop, 
            RetailTransactionType::TenderDeclaration, 
            RetailTransactionType::IncomeExpense,
            RetailTransactionType::StartingAmount,
            RetailTransactionType::RemoveTender,
            RetailTransactionType::FloatEntry,
            RetailTransactionType::ChangeTender,
            RetailTransactionType::Payment,
            RetailTransactionType::SalesInvoice
        ];

        var context = ExportToExcelDataEntityContext::construct(tableStr(RetailTransactionAuditableEntity), tableFieldGroupStr(RetailTransactionAuditableEntity, CashManagement));

        var headerEntityInfo = context.findEntityByName(tableStr(RetailTransactionAuditableEntity));
        headerEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditableEntity),
                                                                                fieldStr(RetailTransactionAuditableEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, TransactionType),
                                                                                cashManagementTransactionTypes));

        var bankDropEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableBankDropEntity));
        bankDropEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatement(_statementTable,
                                                                                tableStr(RetailTransactionAuditableBankDropEntity),
                                                                                fieldStr(RetailTransactionAuditableBankDropEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableBankDropEntity, HeaderStatementNumber)));

        var safeDropEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableSafeDropEntity));
        safeDropEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatement(_statementTable,
                                                                                tableStr(RetailTransactionAuditableSafeDropEntity),
                                                                                fieldStr(RetailTransactionAuditableSafeDropEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableSafeDropEntity, HeaderStatementNumber)));

        var tenderDeclarationEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableTenderDeclarationEntity));
        tenderDeclarationEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatement(_statementTable,
                                                                                tableStr(RetailTransactionAuditableTenderDeclarationEntity),
                                                                                fieldStr(RetailTransactionAuditableTenderDeclarationEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableTenderDeclarationEntity, HeaderStatementNumber)));

        var incomeExpenseEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableIncomeExpenseLineEntity));
        incomeExpenseEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatement(_statementTable,
                                                                                tableStr(RetailTransactionAuditableIncomeExpenseLineEntity),
                                                                                fieldStr(RetailTransactionAuditableIncomeExpenseLineEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableIncomeExpenseLineEntity, HeaderStatementNumber)));
                
        var paymentEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditablePaymentLineEntity));
        paymentEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditablePaymentLineEntity),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, HeaderTransactionType),
                                                                                cashManagementTransactionTypes));

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCashAndCarryStatementContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>ExportToExcelDataEntityContext</c> that exposes all cash and carry transactions for a given statements.
    /// </summary>
    /// <param name = "_statementTable">The statement record.</param>
    /// <returns>An ExportToExcelDataEntityContext instance.</returns>
    public static ExportToExcelDataEntityContext constructCashAndCarryStatementContext(RetailStatementTable _statementTable)
    {
        container cashAndCarryTransactionType = [RetailTransactionType::Sales];

        var context = ExportToExcelDataEntityContext::constructDefault(tableStr(RetailTransactionAuditableEntity));

        var headerEntityInfo = context.findEntityByName(tableStr(RetailTransactionAuditableEntity));
        headerEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditableEntity),
                                                                                fieldStr(RetailTransactionAuditableEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, TransactionType),
                                                                                cashAndCarryTransactionType));

        var salesLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableSalesLineEntity));
        salesLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditableSalesLineEntity),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var paymentEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditablePaymentLineEntity));
        paymentEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditablePaymentLineEntity),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var discountLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableDiscountLineEntity));
        discountLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditableDiscountLineEntity),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, HeaderStatementNumber),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var taxLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableTaxLineEntity));
        taxLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditableTaxLineEntity),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, HeaderStatementNumber),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var chargeLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableChargeLineEntity));
        chargeLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByStatementAndType(_statementTable,
                                                                                tableStr(RetailTransactionAuditableChargeLineEntity),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, HeaderStatementNumber),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));
                

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCashAndCarryStoreContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>ExportToExcelDataEntityContext</c> that exposes all cash and carry transactions for a given statements.
    /// </summary>
    /// <param name = "_statementTable">The statement record.</param>
    /// <returns>An ExportToExcelDataEntityContext instance.</returns>
    public static ExportToExcelDataEntityContext constructCashAndCarryStoreContext(RetailStoreTable _storeTable)
    {
        container cashAndCarryTransactionType = [RetailTransactionType::Sales];

        var context = ExportToExcelDataEntityContext::constructDefault(tableStr(RetailTransactionAuditableEntity));

        var headerEntityInfo = context.findEntityByName(tableStr(RetailTransactionAuditableEntity));
        headerEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterUnmarkedAndFailedTransactionsByStore(_storeTable,
                                                                                tableStr(RetailTransactionAuditableEntity),
                                                                                fieldStr(RetailTransactionAuditableEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, ValidationStatus),
                                                                                fieldStr(RetailTransactionAuditableEntity, TransactionType),
                                                                                cashAndCarryTransactionType));

        var salesLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableSalesLineEntity));
        salesLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterUnmarkedAndFailedTransactionsByStore(_storeTable,
                                                                                tableStr(RetailTransactionAuditableSalesLineEntity),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, HeaderValidationStatus),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var paymentEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditablePaymentLineEntity));
        paymentEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterUnmarkedAndFailedTransactionsByStore(_storeTable,
                                                                                tableStr(RetailTransactionAuditablePaymentLineEntity),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, StatementNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, HeaderValidationStatus),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var discountLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableDiscountLineEntity));
        discountLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterUnmarkedAndFailedTransactionsByStore(_storeTable,
                                                                                tableStr(RetailTransactionAuditableDiscountLineEntity),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, HeaderStatementNumber),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, HeaderValidationStatus),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var taxLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableTaxLineEntity));
        taxLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterUnmarkedAndFailedTransactionsByStore(_storeTable,
                                                                                tableStr(RetailTransactionAuditableTaxLineEntity),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, HeaderStatementNumber),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, HeaderValidationStatus),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));

        var chargeLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableChargeLineEntity));
        chargeLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterUnmarkedAndFailedTransactionsByStore(_storeTable,
                                                                                tableStr(RetailTransactionAuditableChargeLineEntity),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, HeaderStoreNumber),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, HeaderStatementNumber),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, HeaderValidationStatus),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, HeaderTransactionType),
                                                                                cashAndCarryTransactionType));
                

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOnlineTransactionContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>ExportToExcelDataEntityContext</c> that exposes a single online transaction.
    /// </summary>
    /// <param name = "_transactionTable">The transaction record.</param>
    /// <returns>An ExportToExcelDataEntityContext instance.</returns>
    public static ExportToExcelDataEntityContext constructOnlineTransactionContext(RetailTransactionTable _transactionTable)
    {
        var context = ExportToExcelDataEntityContext::construct(tableStr(RetailTransactionAuditableEntity), tableFieldGroupStr(RetailTransactionAuditableEntity, OnlineTransaction));

        var headerEntityInfo = context.findEntityByName(tableStr(RetailTransactionAuditableEntity));
        headerEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByTransaction(_transactionTable,
                                                                                tableStr(RetailTransactionAuditableEntity),
                                                                                fieldStr(RetailTransactionAuditableEntity, OperatingUnitNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, RegisterNumber),
                                                                                fieldStr(RetailTransactionAuditableEntity, TransactionId)));

        var salesLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableSalesLineEntity));
        salesLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByTransaction(_transactionTable,
                                                                                tableStr(RetailTransactionAuditableSalesLineEntity),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, OperatingUnitNumber),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, RegisterNumber),
                                                                                fieldStr(RetailTransactionAuditableSalesLineEntity, TransactionId)));

        var paymentEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditablePaymentLineEntity));
        paymentEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByTransaction(_transactionTable,
                                                                                tableStr(RetailTransactionAuditablePaymentLineEntity),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, OperatingUnitNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, RegisterNumber),
                                                                                fieldStr(RetailTransactionAuditablePaymentLineEntity, TransactionId)));

        var discountLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableDiscountLineEntity));
        discountLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByTransaction(_transactionTable,
                                                                                tableStr(RetailTransactionAuditableDiscountLineEntity),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, OperatingUnitNumber),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, RegisterNumber),
                                                                                fieldStr(RetailTransactionAuditableDiscountLineEntity, TransactionId)));

        var taxLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableTaxLineEntity));
        taxLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByTransaction(_transactionTable,
                                                                                tableStr(RetailTransactionAuditableTaxLineEntity),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, OperatingUnitNumber),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, RegisterNumber),
                                                                                fieldStr(RetailTransactionAuditableTaxLineEntity, TransactionId)));

        var chargeLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableChargeLineEntity));
        chargeLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByTransaction(_transactionTable,
                                                                                tableStr(RetailTransactionAuditableChargeLineEntity),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, OperatingUnitNumber),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, RegisterNumber),
                                                                                fieldStr(RetailTransactionAuditableChargeLineEntity, TransactionId)));

        var addressLineEntityInfo = context.addEntityDefault(tableStr(RetailTransactionAuditableAddressLineEntity));
        addressLineEntityInfo.filter(RetailTransactionAuditableExcelFilterBuilder::filterByTransaction(_transactionTable,
                                                                                tableStr(RetailTransactionAuditableAddressLineEntity),
                                                                                fieldStr(RetailTransactionAuditableAddressLineEntity, OperatingUnitNumber),
                                                                                fieldStr(RetailTransactionAuditableAddressLineEntity, StoreNumber),
                                                                                fieldStr(RetailTransactionAuditableAddressLineEntity, RegisterNumber),
                                                                                fieldStr(RetailTransactionAuditableAddressLineEntity, TransactionId)));
                
        return context;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>