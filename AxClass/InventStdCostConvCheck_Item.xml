<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvCheck_Item</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventStdCostConvCheck_Item extends InventStdCostConvCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a re-evaluation account and round variance account can be found for the item being
    ///    checked.
    /// </summary>
    /// <returns>
    ///    true if accounts could be found; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean                         ret = true;
        InventItemCostGroupRollupSim    inventItemCostGroupRollupSim;
        InventItemPriceSim              inventItemPriceSim;

        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            QueryRun qr = new QueryRun(this.getExtendedParmQuery());

            while (qr.next())
            {
                inventItemCostGroupRollupSim = qr.get(tableNum(InventItemCostGroupRollupSim));
                inventItemPriceSim = qr.get(tableNum(InventItemPriceSim));

                ItemGroupId itemGroupId = InventTable::itemGroupIdByItemId(inventStdCostConvItem.ItemId);

                if (!InventPosting::costItemExtendParm_CN(
                        InventAccountType::InventStdCostRevaluation,
                        InventPostingExtendParm_CN::constructInventDim(InventDim::find(inventItemPriceSim.InventDimId)),
                        inventItemCostGroupRollupSim.CostGroupId,
                        inventStdCostConvItem.ItemId,
                        itemGroupId))
                {
                    // Cost price revaluation account for item '%1' and cost group '%2' was not found.
                    this.addError(strfmt("@SYS119930", inventStdCostConvItem.ItemId, inventItemCostGroupRollupSim.CostGroupId));
                    ret = false;
                }

                if (!InventPosting::costItemExtendParm_CN(
                        InventAccountType::InventStdCostRoundingVariance,
                        InventPostingExtendParm_CN::constructInventDim(InventDim::find(inventItemPriceSim.InventDimId)),
                        inventItemCostGroupRollupSim.CostGroupId,
                        inventStdCostConvItem.ItemId,
                        itemGroupId))
                {
                    // Rounding variance account for item '%1' and cost group '%2' was not found.
                    this.addError(strfmt("@SYS119931", inventStdCostConvItem.ItemId, inventItemCostGroupRollupSim.CostGroupId));
                    ret = false;
                }
            }
        }
        else
        {
            while select CostGroupId
                from inventItemCostGroupRollupSim
                group by CostGroupId
                exists join inventItemPriceSim
                    where inventItemPriceSim.VersionId  == inventStdCostConvItem.inventStdCostConv().CostingVersionId
                       && inventItemPriceSim.ItemId     == inventStdCostConvItem.ItemId
                       && inventItemPriceSim.RecId      == inventItemCostGroupRollupSim.InventItemPriceSimRefRecId
            {
                if (!(InventPosting::costItemLedgerDimensionFromParameter(
                    this.buildCostItemLedgerDimensionParameter(
                            InventAccountType::InventStdCostRevaluation,
                            inventItemCostGroupRollupSim))))
                {
                    this.addError(strfmt("@SYS119930", inventStdCostConvItem.ItemId, inventItemCostGroupRollupSim.CostGroupId));
                    ret = false;
                }

                if (!(InventPosting::costItemLedgerDimensionFromParameter(
                    this.buildCostItemLedgerDimensionParameter(
                        InventAccountType::InventStdCostRoundingVariance,
                        inventItemCostGroupRollupSim))))
                {
                    this.addError(strfmt("@SYS119931", inventStdCostConvItem.ItemId, inventItemCostGroupRollupSim.CostGroupId));
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCostItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting cost ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name="_inventItemCostGroupRollupSim">An <c>InventItemCostGroupRollupSim</c> record.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingCostItemLedgerDimensionParameters buildCostItemLedgerDimensionParameter(
        InventAccountType               _inventAccountType,
        InventItemCostGroupRollupSim    _inventItemCostGroupRollupSim)
    {
        ItemGroupId itemGroupId = InventTable::itemGroupIdByItemId(inventStdCostConvItem.ItemId);

        return InventPostingCostItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            _inventItemCostGroupRollupSim.CostGroupId,
            inventStdCostConvItem.ItemId,
            itemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an <c>InventStdCostConvCheck_Item</c> object.
    /// </summary>
    /// <param name="_inventStdCostConvItem">
    ///    An <c>InventStdCostConvItem</c> record buffer that must be checked.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvCheck_Item</c> object
    /// </returns>
    /// <remarks>
    ///    This method should not be called directly. An <c>InventStdCostConvCheck</c> object should be
    ///    instantiated using the constructor on the <c>InventStdCostConvCheck</c> class.
    /// </remarks>
    static public InventStdCostConvCheck_Item construct(InventStdCostConvItem _inventStdCostConvItem)
    {
        return new InventStdCostConvCheck_Item(_inventStdCostConvItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedParmQuery</Name>
				<Source><![CDATA[
    private Query getExtendedParmQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds1 = query.addDataSource(tableNum(inventItemPriceSim));
        qbds1.addRange(fieldNum(InventItemPriceSim, VersionId)).value(queryValue(inventStdCostConvItem.inventStdCostConv().CostingVersionId));
        qbds1.addRange(fieldNum(InventItemPriceSim, ItemId)).value(queryValue(inventStdCostConvItem.ItemId));

        QueryBuildDataSource qbds2 = qbds1.addDataSource(tableNum(InventItemCostGroupRollupSim));
        qbds2.addLink(fieldNum(inventItemPriceSim, RecId), fieldNum(InventItemCostGroupRollupSim, InventItemPriceSimRefRecId));
        qbds2.joinMode(JoinMode::InnerJoin);

        qbds1.addGroupByAndSelectionField(fieldNum(inventItemPriceSim, InventDimId));
        qbds2.addGroupByAndSelectionField(fieldNum(InventItemCostGroupRollupSim, CostGroupId));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>