<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventOnHandCriteria</c> class is the base class for inventory on hand criteria classes.
/// </summary>
/// <remarks>
/// <para>In most cases a criteria should add the conditions to the query but the caller cannot rely on this behavior as a criteria
/// implementation may filter records in X++ because of the complexity of the rules. Therefore, when you use implementations of this
/// class to apply criteria to an on hand query, after you run the query, you must use either <see cref="isMatchedByInventDim method"/>
/// or <see cref="mergeMatchingRecords method"/> when retrieving the results.</para>
/// <para>If you simply want to get a cummulative on hand record, then use <see cref="mergeMatchingRecords method"/>, for example:
/// <code>
///     query = InventSum::newQuery(null, inventDim, inventDimParm, null);
///     inventOnHandCriteria.applyToOnHand(query);
///     inventSum = inventOnHandCriteria.mergeMatchingRecords(query, tableNum(InventSum));
/// </code>
/// </para>
/// <para>If you need to process each inventory record retrieved, then use <see cref="isMatchedByInventDim"/>, for example:
/// <code>
///     query = InventSum::newQuery(null, inventDim, inventDimParm, inventDimParmGroupBy);
///     inventOnHandCriteria.applyToOnHand(query);
///     queryRun = new QueryRun(query);
///     while (queryRun.next())
///     {
///         inventDim = queryRun.get(tableNum(InventDim));
///         if (inventOnHandCriteria.isMatchedByInventDim(inventDim))
///         {
///             ...logic here for processing each on hand record that matches the criteria...
///         }
///     }
/// </code>
/// </para>
/// </remarks>
public abstract class InventOnHandCriteria
{
    UnknownNoYes mustBeApplied;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>affectedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of inventory dimensions that the on hand query should be filtered by.
    /// </summary>
    /// <returns>
    /// The list containing IDs of the inventory dimension fields that the on hand query should be filtered by.
    /// </returns>
    public abstract Set affectedDimensions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyToOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds required filters to the on hand query to make sure that the query
    ///    only selects those on hand records that match the criteria.
    /// </summary>
    /// <param name="_onHandQuery">
    ///    The on hand query.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the query is not specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if the specified query is not recognized as an on hand query.
    /// </exception>
    public void applyToOnHand(Query _onHandQuery)
    {
        this.applyToOnHandQuery(InventOnHandQuery::newFromSysQuery(_onHandQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyToOnHandQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds required filters to the on hand query to make sure that the query
    /// only selects those on hand records that match the criteria.
    /// </summary>
    /// <param name="_onHandQuery">
    /// The on hand query.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the query is not specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if the specified query is not recognized as an on hand query.
    /// </exception>
    public void applyToOnHandQuery(InventOnHandQuery _onHandQuery)
    {
        if (!_onHandQuery)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (this.mustBeApplied() && this.mustBeAppliedToQuery(_onHandQuery))
        {
            this.doApplyToOnHandQuery(_onHandQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMustBeApplied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the particular on hand criteria must be applied.
    /// </summary>
    /// <returns>
    ///    true if the criteria is applicable; otherwise, false.
    /// </returns>
    protected abstract boolean calcMustBeApplied()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApplyToOnHandQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs filter specific logic of adding filters to the specified on hand query.
    /// </summary>
    /// <param name="_onHandQuery">
    /// The on hand query.
    /// </param>
    protected abstract void doApplyToOnHandQuery(InventOnHandQuery _onHandQuery)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatchedByInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the specified inventory dimensions are matched by the requirements of this criteria.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimensions to check.
    /// </param>
    /// <returns>
    /// true if the specified inventory dimensions are matched by the requirements of this critiera; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method only needs to be overridden if it is not possible to implement the filter using
    /// just query ranges in the <c>doApplyToOnHandQuery</c> method.
    /// The method should not contain full filter validations. Only those checks that are impossible
    /// to implement using query ranges should be implemented in this method.
    /// </remarks>
    public boolean isMatchedByInventDim(InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeMatchingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges all the records that match this criteria.
    /// </summary>
    /// <param name="_query">
    ///    The query containing the records to merge.
    /// </param>
    /// <param name="_tableId">
    ///    The ID of the table in <paramref name="_queryRun"/> to merge.
    /// </param>
    /// <returns>
    ///    A record buffer containing the merged fields for all the records that match.
    /// </returns>
    /// <remarks>
    ///    <para>This is provided for those cases when the criteria is too complex to add to the
    ///    initial query and the records must be matched programatically using <cref name="isMatchedByRecord" /> method.</para>
    ///    <para>To work effectively, the table should override <cref name="Common.merge" /> method to provide
    ///    specific logic on how to merge two records of that table together.</para>
    /// </remarks>
    public Common mergeMatchingRecords(Query _query, TableId _tableId)
    {
        QueryRun    queryRun       = new QueryRun(_query);
        boolean     firstIteration = true;
        Common      result         = new DictTable(_tableId).makeRecord();

        while (queryRun.next())
        {
            if (this.isMatchedByInventDim(queryRun.get(tableNum(InventDim))))
            {
                if (firstIteration)
                {
                    result.data(queryRun.get(_tableId));
                    firstIteration = false;
                }
                else
                {
                    queryRun.get(_tableId).merge(result);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeApplied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the on hand criteria must be applied.
    /// </summary>
    /// <returns>
    ///    true if the criteria is applicable; otherwise, false.
    /// </returns>
    public boolean mustBeApplied()
    {
        if (mustBeApplied == UnknownNoYes::Unknown)
        {
            mustBeApplied = this.calcMustBeApplied() ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return mustBeApplied == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAppliedToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the criteria must be applied to the specified query.
    /// </summary>
    /// <param name="_onHandQuery">
    /// The on hand query.
    /// </param>
    /// <returns>
    /// true if the criteria must be applied to the query; otherwise, false.
    /// </returns>
    public abstract boolean mustBeAppliedToQuery(InventOnHandQuery _onHandQuery)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>