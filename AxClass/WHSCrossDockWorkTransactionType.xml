<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDockWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCrossDockWorkTransactionType</c> class handles logic specific to the cross docking work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::CrossDocking)]
public final class WHSCrossDockWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirCrossDock);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateCrossDockV2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.itemId)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(InventTable)), fieldNum(InventTable, ItemId)).value(_parameters.itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::Shipping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void cancelWork(
        WHSWorkTable _workTable, 
        boolean      _cancellingProductReceipt)
    {
        ttsbegin;

        WHSWaveTable::resetWhenWorkIsRemoved(_workTable.WaveId);
        WHSContainerTable::deleteRelatedToWorkContainersCreatedByContainerization(_workTable.WorkId);
        WHSCrossDockWorkTransactionType::cancelLoadLinesForWork(_workTable.WorkId, this.parmDecrementLoadLineWorkCreatedQty());
        WHSWorkTable::updateWorkStatusToCancelledForOriginWork(_workTable.WorkId);
        this.cancelReplenishmentWork(_workTable.WorkId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectedSerialNumberQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventQty expectedSerialNumberQty(WhsWorkLine _whsWorkLine)
    {
        InventMovement inventMovement = InventTransOrigin::findByInventTransId(_whsWorkLine.InventTransId).inventMovement();

        return -inventMovement.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ajust the container lines for the workline.
    /// </summary>
    /// <param name = "_workLine">The workline to cancel.</param>
    /// <param name = "_inventQty">The quantity to cancel.</param>
    [Hookable(false)]
    internal void adjustContainerLine(WHSWorkLine _workLine, InventQty _inventQty)
    {
        // we do not support containerization although when trying to cancel a work header we are trying to delete the container created via containerization.
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelLoadLinesForWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels load lines for a work.
    /// </summary>
    /// <param name = "_workId">The ID of the work.</param>
    /// <param name = "_decrementLoadLineWorkCreatedQty">true if load lines work created quantity is being decremented, otherwise, false.</param>
    [Hookable(false)]
    internal final static void cancelLoadLinesForWork(
        WHSWorkId   _workId, 
        boolean     _decrementLoadLineWorkCreatedQty)
    {
        Debug::assert(appl.ttsLevel() > 0);

        if (_decrementLoadLineWorkCreatedQty && _workId)
        {
            WHSWorkLine firstPutLine = WHSWorkTable::getFirstPutWorkLine(_workId);
            WHSWorkLine workLine;

            // Can't select loadLine or ProdBOMPool record in query.
            // If it hits same record twice because it's related to two or more workLines then the data will be out of date and update conflict will occur.
            while select InventQtyWork, LoadLineRefRecId, InventTransOriginIdSupply from workLine
                where workLine.WorkId       == _workId
                &&    workLine.WorkStatus   != WHSWorkStatus::Cancelled
                &&    workLine.LineNum      <  firstPutLine.LineNum
            {
                WHSLoadLine loadLine = WHSLoadLine::findbyRecId(workLine.LoadLineRefRecId, true);

                if (loadLine)
                {
                    WHSCrossDockLoadLine crossDockLoadLine;

                    select firstOnly forUpdate crossDockLoadLine
                        where crossDockLoadLine.LoadLineRecId               == loadLine.RecId
                        &&    crossDockLoadLine.InventTransIdDemand         == loadLine.InventTransId
                        &&    crossDockLoadLine.InventTransOriginIdSupply   == workLine.InventTransOriginIdSupply;
    
                    if (crossDockLoadLine.InventHandlingQty > workLine.InventQtyWork)
                    {
                        crossDockLoadLine.InventHandlingQty -= workLine.InventQtyWork;
                        crossDockLoadLine.InventQtyMarked = crossDockLoadLine.calculateInventQtyMarked(-workLine.InventQtyWork);
                                            
                        crossDockLoadLine.update();
                    }
                    else
                    {
                        crossDockLoadLine.delete();
                    }
                    
                    // Load line buffer needs to be reread since WHSLoadLine may be modified
                    // in WHSCrossDockLoadLine update/delete action above.
                    loadLine.reread();

                    WHSCrossDockWorkTransactionType::calculateLoadLineQuantitiesDuringCancellation(loadLine, workLine);

                    loadLine.CrossDockEvaluatedQuantity = max(loadLine.CrossDockEvaluatedQuantity - workLine.InventQtyWork, 0);

                    WHSCrossDockWorkTransactionType::updateLoadLineQuantitiesDuringCancellation(loadLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLoadLineQuantitiesDuringCancellation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantities for load line during cancellation.
    /// </summary>
    /// <param name = "_loadLine">The load line record.</param>
    /// <param name = "_workLine">The work line record.</param>
    protected static void calculateLoadLineQuantitiesDuringCancellation(
        WHSLoadLine _loadLine,
        WHSWorkLine _workLine)
    {
        _loadLine.WorkCreatedQty -= _workLine.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLineQuantitiesDuringCancellation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load line during cancellation.
    /// </summary>
    /// <param name = "_loadLine">The load line record.</param>
    protected static void updateLoadLineQuantitiesDuringCancellation(WHSLoadLine _loadLine)
    {
        _loadLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocDirCodeForWorkTemplateLine</Name>
				<Source><![CDATA[
    public WHSWorkTemplateErrorText validateLocDirCodeForWorkTemplateLine(WHSWorkTemplateLine _templateLine, boolean _isLastLine)
    {
        if (   _templateLine.WorkType == WHSWorkType::Put
            && ((!_isLastLine && !_templateLine.LocDirHintCode) || (_isLastLine && _templateLine.LocDirHintCode)))
        {
            return "@WAX1365";
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isOutbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkLineForShipment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isWorkLineForShipment(WHSWorkLine _workLine)
    {
        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(_workLine.LoadLineRefRecId);

        return WHSInvent::construct().isInventTransTypeForOutboundShipment(loadLine.InventTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativeAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isNegativeAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReplenishmentAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isReplenishmentAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalPutLocationRequirements</Name>
				<Source><![CDATA[
    public WHSMessage validateFinalPutLocationRequirements(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile)
    {
        return this.validateFinalPutLocation(_location, _locationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountNum</Name>
				<Source><![CDATA[
    public AccountNum findAccountNum(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        AccountNum accountNum;

        if (_whsWorkLine.InventTransId)
        {
            accountNum = SalesLine::findInventTransId(_whsWorkLine.InventTransId).CustAccount;
        }
        else if (_whsWorkTable.OrderNum)
        {
            accountNum = SalesTable::find(_whsWorkTable.OrderNum).CustAccount;
        }
        else
        {
            accountNum = "@WAX402";
        }

        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountName</Name>
				<Source><![CDATA[
    public AccountName findAccountName(AccountNum _accountNum)
    {
        AccountName accountName;

        if (!_accountNum)
        {
            accountName = '';
        }
        else if (_accountNum != "@WAX402")
        {
            accountName = CustTable::find(_accountNum).name();
        }
        else
        {
            accountName = "@WAX402";
        }

        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress findToAddress(WhsWorkTable _whsWorkTable, WHSLicensePlateLabel _label)
    {
        return SalesTable::find(_label.OrderNum).deliveryAddress();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>