<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class PurchRFQCaseTableType extends InventType
{
    PurchRFQCaseTable       purchRFQCaseTable;

    NumberSeqFormHandler    numberSeqFormHandlerPurchId;
    PurchRFQType            purchRFQType;

    private PurchRFQInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    public boolean checkDelete(boolean _useWarning = true)
    {
        boolean     ok = (purchRFQCaseTable ? true : false);

        if (purchRFQCaseTable
            &&  (purchRFQCaseTable.StatusHigh > PurchRFQStatus::Created && purchRFQCaseTable.StatusHigh != PurchRFQStatus::Canceled))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkType</Name>
				<Source><![CDATA[
    protected boolean checkType()
    {
        boolean ret = true;

        if (purchRFQCaseTable.rfqType == PurchRFQType::PurchReq)
        {
            ret = checkFailed(strFmt("@SYS109192", enum2str(PurchRFQType::PurchReq)));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    public boolean checkUpdate(boolean useWarning = true)
    {
        boolean ok = (purchRFQCaseTable ? true : false);
        boolean isRFQAmendmentEnabled = PurchRFQParameters::isRFQAmendmentEnabled();

        if (ok)
        {
            if (isRFQAmendmentEnabled)
            {
                if (purchRFQCaseTable.StatusHigh != PurchRFQStatus::Created)
                {
                    return purchRFQCaseTable.editAmendmentAllowed();
                }
            }

            if (purchRFQCaseTable.StatusHigh > PurchRFQStatus::Sent
            && purchRFQCaseTable.StatusHigh != PurchRFQStatus::Canceled)
            {
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the purchase order related fields.
    /// </summary>
    public void setPurchFields()
    {
        purchRFQCaseTable.ResponsibleWorkerId    = purchRFQCaseTable.Requester;
        purchRFQCaseTable.ValidityDateStart      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        purchRFQCaseTable.ValidityDateEnd        = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ case record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ case record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodClose</Name>
				<Source><![CDATA[
    public void formMethodClose()
    {
        if (numberSeqFormHandlerPurchId)
        {
            numberSeqFormHandlerPurchId.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceCreate</Name>
				<Source><![CDATA[
    public void formMethodDataSourceCreate(FormRun _element, FormDataSource _purchRFQCasetable_ds)
    {
        this.numberSeqFormHandlerPurchId(_element, _purchRFQCasetable_ds).formMethodDataSourceCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceDelete</Name>
				<Source><![CDATA[
    public void formMethodDataSourceDelete(FormRun _element, FormDataSource _purchRFQCasetable_ds)
    {
        this.numberSeqFormHandlerPurchId(_element, _purchRFQCasetable_ds).formMethodDataSourceDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceLinkActive</Name>
				<Source><![CDATA[
    public void formMethodDataSourceLinkActive(FormRun _element, FormDataSource _purchRFQCaseTable_ds)
    {
        this.numberSeqFormHandlerPurchId(_element, _purchRFQCaseTable_ds).formMethodDataSourceLinkActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceValidateWrite</Name>
				<Source><![CDATA[
    public boolean formMethodDataSourceValidateWrite(FormRun _element, FormDataSource _purchRFQCaseTable_ds)
    {
        return this.numberSeqFormHandlerPurchId(_element, _purchRFQCaseTable_ds).formMethodDataSourceValidateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceWrite</Name>
				<Source><![CDATA[
    public void formMethodDataSourceWrite(FormRun _element, FormDataSource _purchRFQCaseTable_ds)
    {
        this.numberSeqFormHandlerPurchId(_element, _purchRFQCaseTable_ds).formMethodDataSourceWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        PurchRFQParameters  params          = PurchRFQParameters::find();
        CompanyInfo         companyInfo     = CompanyInfo::find();
        WorkCalendarSched   workCalendar    = new WorkCalendarSched();

        purchRFQCaseTable.DeliveryDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        purchRFQCaseTable.Requester         = PurchRFQCaseTable::getCurrentWorker();
        purchRFQCaseTable.ItemBuyerGroup    = PurchRFQWorkerSetup::findByWorker(purchRFQCaseTable.Requester).BuyerGroupId;

        purchRFQCaseTable.rfqVendNum        = PurchRFQVendNum::None;
        purchRFQCaseTable.LanguageId        = CompanyInfo::languageId();
        purchRFQCaseTable.CurrencyCode      = Ledger::accountingCurrency(companyInfo.RecId);

        purchRFQCaseTable.ExpiryDateTime    = DateTimeUtil::newDateTime(
                            workCalendar.schedDate(SchedDirection::Forward, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), params.DaysOffset, params.ExpDateCalendarDays, companyInfo.ShippingCalendarId),
                            params.TimeOffset,
                            DateTimeUtil::getCompanyTimeZone());

        purchRFQCaseTable.rfqType           = params.PurchRFQType;
        purchRFQCaseTable.DlvMode           = params.DlvMode;
        purchRFQCaseTable.DlvTerm           = params.DlvTerm;
        purchRFQCaseTable.Payment           = params.Payment;
        purchRFQCaseTable.DlvMode           = params.DlvMode;

        if (FeatureStateProvider::isFeatureEnabled(PurchRFQShowLegacyFieldFeature::instance()))
        {
            purchRFQCaseTable.rfqReplyHeaderCurrencyCode      = params.ReplyHeaderCurrencyCode;
            purchRFQCaseTable.rfqReplyHeaderDeliveryDate      = params.ReplyHeaderDeliveryDate;
            purchRFQCaseTable.rfqReplyHeaderDlvTerm           = params.ReplyHeaderDlvTerm;
            purchRFQCaseTable.rfqReplyHeaderDocumentation     = params.ReplyHeaderDocumentation;
            purchRFQCaseTable.rfqReplyHeaderEndDiscPct        = params.ReplyHeaderEndDiscPct;
            purchRFQCaseTable.rfqReplyHeaderMarkup            = params.ReplyHeaderMarkup;
            purchRFQCaseTable.rfqReplyHeaderPayment           = params.ReplyHeaderPayment;
            purchRFQCaseTable.rfqReplyHeaderValidFromDate     = params.ReplyHeaderValidFromDate;
            purchRFQCaseTable.rfqReplyHeaderValidToDate       = params.ReplyHeaderValidToDate;
            purchRFQCaseTable.rfqReplyHeaderVendRef           = params.ReplyHeaderVendRef;

            purchRFQCaseTable.rfqReplyLineDeliveryDate        = params.ReplyLineDeliveryDate;
            purchRFQCaseTable.rfqReplyLineDocumentation       = params.ReplyLineDocumentation;
            purchRFQCaseTable.rfqReplyLineExternalItemFreeTxt = params.ReplyLineExternalItemFreeTxt;
            purchRFQCaseTable.rfqReplyLineExternalItemId      = params.ReplyLineExternalItemId;
            purchRFQCaseTable.rfqReplyLineLeadTime            = params.ReplyLineLeadTime;
            purchRFQCaseTable.rfqReplyLineLineDisc            = params.ReplyLineLineDisc;
            purchRFQCaseTable.rfqReplyLineMarkup              = params.ReplyLineMarkup;
            purchRFQCaseTable.rfqReplyLineMultiLnDisc         = params.ReplyLineMultiLnDisc;
            purchRFQCaseTable.rfqReplyLineMultiLnPercent      = params.ReplyLineMultiLnPercent;
            purchRFQCaseTable.rfqReplyLinePercent             = params.ReplyLinePercent;
            purchRFQCaseTable.rfqReplyLinePriceUnit           = params.ReplyLinePriceUnit;
            purchRFQCaseTable.rfqReplyLineQuantity            = params.ReplyLineQuantity;
            purchRFQCaseTable.rfqReplyLineUnit                = params.ReplyLineUnit;
            purchRFQCaseTable.rfqReplyLineValidFromDate       = params.ReplyLineValidFromDate;
            purchRFQCaseTable.rfqReplyLineValidToDate         = params.ReplyLineValidToDate;
            purchRFQCaseTable.rfqReplyLineWorkingdays         = params.ReplyLineWorkingdays;
        }

        purchRFQCaseTable.SolicitationType                = params.DefaultSolicitationType;
        purchRFQCaseTable.BidType                         = purchRFQCaseTable.SolicitationType ?
                                                                PurchRFQSolicitationType::find(purchRFQCaseTable.SolicitationType).DefaultBidType :
                                                                params.DefaultBidType;
        purchRFQCaseTable.IsSealed                        = purchRFQCaseTable.BidType == PurchRFQBidType::Sealed;

        purchRFQCaseTable.ShowRFQReplyLinePriceUnitEP       = params.ShowRFQReplyLinePriceUnitEP;
        purchRFQCaseTable.ShowRFQReplyLineMarkupEP          = params.ShowRFQReplyLineMarkupEP;
        purchRFQCaseTable.ShowRFQReplyLineLineDiscEp        = params.ShowRFQReplyLineLineDiscEP;
        purchRFQCaseTable.ShowRFQReplyLinePercentEP         = params.ShowRFQReplyLinePercentEP;
        purchRFQCaseTable.ShowRFQReplyLineMultiLnDiscEP     = params.ShowRFQReplyLineMultiLnDiscEP;
        purchRFQCaseTable.ShowRFQReplyLineMultiLnPercentEP  = params.ShowRFQReplyLineMultiLnPercentEP;

        purchRFQCaseTable.initDefaultAddress();

        if (purchRFQCaseTable.rfqType != PurchRFQType::Purch)
        {
            purchRFQCaseTable.ResponsibleWorkerId = purchRFQCaseTable.Requester;
        }

        purchRFQCaseTable.ValidityDateStart     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        purchRFQCaseTable.ValidityDateEnd       = dateNull();
        purchRFQCaseTable.RFQCloseVisibilityType = this.getRFQCloseVisibilityType(params);

        if (FeatureStateProvider::isFeatureEnabled(PurchRFQCaseFieldsTransferToReplyFeature::instance()))
        {
            purchRFQCaseTable.IsRFQVendReplyLineDeliveryDateEnabled = params.IsRFQVendReplyLineDeliveryDateEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineLineAmountEnabled = params.IsRFQVendReplyLineLineAmountEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineLineDiscountEnabled = params.IsRFQVendReplyLineLineDiscountEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineLinePercentageEnabled = params.IsRFQVendReplyLineLinePercentageEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineMultiLineDiscountEnabled = params.IsRFQVendReplyLineMultiLineDiscountEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineMultiLinePercentageEnabled = params.IsRFQVendReplyLineMultiLinePercentageEnabled;
            purchRFQCaseTable.IsRFQVendReplyLinePurchaseChargesEnabled = params.IsRFQVendReplyLinePurchaseChargesEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineQuantityEnabled = params.IsRFQVendReplyLineQuantityEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineUnitEnabled = params.IsRFQVendReplyLineUnitEnabled;
            purchRFQCaseTable.IsRFQVendReplyLineUnitPriceEnabled = params.IsRFQVendReplyLineUnitPriceEnabled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ case record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ case record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeCompare</Name>
				<Source><![CDATA[
    public boolean invokeCompare()
    {
        if (purchRFQCaseTable.StatusLow > PurchRFQStatus::Created)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeConfigReply</Name>
				<Source><![CDATA[
    public boolean invokeConfigReply()
    {
        if (purchRFQCaseTable.StatusLow < PurchRFQStatus::Rejected)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeCopyAll</Name>
				<Source><![CDATA[
    public boolean invokeCopyAll()
    {
        if (purchRFQCaseTable.StatusLow < PurchRFQStatus::Sent)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeCopyOfAddress</Name>
				<Source><![CDATA[
    public boolean invokeCopyOfAddress()
    {
        if (purchRFQCaseTable.StatusLow < PurchRFQStatus::Received)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeMarkupTrans</Name>
				<Source><![CDATA[
    public boolean invokeMarkupTrans()
    {
        if (purchRFQCaseTable.StatusLow < PurchRFQStatus::Received)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokePurchDocuHandle</Name>
				<Source><![CDATA[
    public boolean invokePurchDocuHandle()
    {
        if (purchRFQCaseTable.StatusLow < PurchRFQStatus::Rejected)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayRFQBeSent</Name>
				<Source><![CDATA[
    public boolean mayRFQBeSent()
    {
        boolean sendRFQ;

        if (isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN))
            || PurchRFQParameters::find().LockRFQOnSend)
        {
            sendRFQ = purchRFQCaseTable.rfqVendNum > PurchRFQVendNum::None &&
                        purchRFQCaseTable.StatusLow < PurchRFQStatus::Received &&
                        !purchRFQCaseTable.isAmended;
        }
        else
        {
            sendRFQ = purchRFQCaseTable.rfqVendNum > PurchRFQVendNum::None &&
                        purchRFQCaseTable.StatusLow < PurchRFQStatus::Received;
        }

        return sendRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(PurchRFQCaseTable _purchRFQCaseTable)
    {
        purchRFQCaseTable      = _purchRFQCaseTable;

        super(_purchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQCaseTable</Name>
				<Source><![CDATA[
    public PurchRFQCaseTable parmPurchRFQCaseTable()
    {
        return purchRFQCaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerPurchId</Name>
				<Source><![CDATA[
    protected NumberSeqFormHandler numberSeqFormHandlerPurchId(FormRun _element, FormDataSource _purchRFQCaseTable_ds)
    {
        if (!numberSeqFormHandlerPurchId)
        {
            numberSeqFormHandlerPurchId = NumberSeqFormHandler::newForm(PurchParameters::numRefPurchRFQCaseId().NumberSequenceId,
                                                                 _element,
                                                                 _purchRFQCaseTable_ds,
                                                                 fieldNum(PurchRFQCaseTable, rfqCaseId)
                                                                );
        }
        return numberSeqFormHandlerPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSeqFormHandlerPurchId</Name>
				<Source><![CDATA[
    public NumberSeqFormHandler parmNumberSeqFormHandlerPurchId(NumberSeqFormHandler _numberSeqFormHandlerPurchId = numberSeqFormHandlerPurchId)
    {
        numberSeqFormHandlerPurchId = _numberSeqFormHandlerPurchId;
        return numberSeqFormHandlerPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ case record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ case record has been updated.
    /// </summary>
    /// <param name="_purchRFQCaseTableOrig">
    /// The original RFQ case which is updated.
    /// </param>
    public void updated(PurchRFQCaseTable _purchRFQCaseTableOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus(LineNum _lineNum = 0)
    {
        PurchRFQCaseLine    rfqCaseLine;
        PurchRFQVendLink    rfqVendLink;
        PurchRFQTable       rfqTable;
        boolean             setLowStatus2Created;
        PurchRFQVendNum     vendNum;
        PurchRFQStatus      statusHigh;

        using (var activityContextUpdStatus = this.instrumentationLogger().caseInstrumentationActivities().updateStatus(purchRFQCaseTable))
        {            
            ttsbegin;

            select count(RecId) from rfqVendLink
            where rfqVendLink.rfqCaseId == purchRFQCaseTable.rfqCaseId;

            select count(RecId) from rfqTable
            where rfqTable.rfqCaseId == purchRFQCaseTable.rfqCaseId;

            setLowStatus2Created = (rfqVendLink.RecId > rfqTable.RecId);

            vendNum = (rfqVendLink.RecId < 2) ? rfqVendLink.RecId : PurchRFQVendNum::Multiple;
                
            if (PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled())
            {
                this.computeAndUpdateRfqCaseLineMinMaxStatus(setLowStatus2Created, _lineNum);
            }
            else
            {
                while select forupdate rfqCaseLine
                where rfqCaseLine.rfqCaseId == purchRFQCaseTable.rfqCaseId
                && (_lineNum == 0 || rfqCaseLine.LineNum == _lineNum)
                {
                    rfqCaseLine.updateStatus(setLowStatus2Created);
                }
            }

            select minof(StatusLow), maxof(StatusHigh) from rfqCaseLine
            where rfqCaseLine.rfqCaseId == purchRFQCaseTable.rfqCaseId &&
                  rfqCaseLine.StatusHigh != PurchRFQStatus::Canceled;

            if (!rfqCaseLine)
            {
                // There is no lines with status other than cancelled.
                // Check lines with status cancelled...
                select firstonly RecId, StatusHigh, StatusLow  from rfqCaseLine
                where rfqCaseLine.rfqCaseId == purchRFQCaseTable.rfqCaseId
                &&    rfqCaseLine.StatusHigh == PurchRFQStatus::Canceled
                &&    rfqCaseLine.StatusLow  == PurchRFQStatus::Canceled;
            }

            //it can be that we have reply containing RFQ lines not connected to RFQ Case lines
            //It means that RFQ Reply can have status Received which is not reflected in RFQ Case lines status
            //We should also take into account the highest status from RFQ Reply header
            select maxof(StatusHigh) from rfqTable
            where rfqTable.rfqCaseId == purchRFQCaseTable.rfqCaseId;

            if (rfqCaseLine.StatusHigh != PurchRFQStatus::Canceled)
            {
                statusHigh = rfqCaseLine.StatusHigh > rfqTable.StatusHigh ? rfqCaseLine.StatusHigh : rfqTable.StatusHigh;
            }
            else
            {
                statusHigh = rfqTable.StatusHigh != PurchRFQStatus::Created ? rfqTable.StatusHigh : rfqCaseLine.StatusHigh;
            }

            // Update
            if ( purchRFQCaseTable.StatusLow  != rfqCaseLine.StatusLow  ||
                purchRFQCaseTable.StatusHigh != statusHigh ||
                purchRFQCaseTable.rfqVendNum != vendNum )
            {
                purchRFQCaseTable.StatusLow = rfqCaseLine.StatusLow;
                purchRFQCaseTable.StatusHigh = statusHigh;
                purchRFQCaseTable.rfqVendNum = vendNum;
                purchRFQCaseTable.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeAndUpdateRfqCaseLineMinMaxStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes and updates RFQ case lines min and max statuses based on related RFQ lines status if changed
    /// </summary>
    /// <param name="_setLowStatus2Created">
    /// Set min status to Created for RFQ case lines
    /// </param>
    /// <param name="_lineNum">
    /// Recalculate a specific RFQ case line
    /// </param>
    protected void computeAndUpdateRfqCaseLineMinMaxStatus(boolean _setLowStatus2Created,
                                                           LineNum _lineNum = 0)
    {
        PurchRFQCaseLineAggregateView view;
        PurchRFQCaseLine              rfqCaseLine;

        using (var activityContextUpdMinMaxStatus = this.instrumentationLogger().caseInstrumentationActivities().computeAndUpdateRfqCaseLineMinMaxStatus(purchRFQCaseTable, _setLowStatus2Created))
        {
            while select forupdate rfqCaseLine
                join MinStatus, MaxStatus from view
                where rfqCaseLine.rfqCaseId == purchRFQCaseTable.rfqCaseId
                && rfqCaseLine.StatusHigh   != PurchRFQStatus::Canceled
                && (_lineNum == 0           || rfqCaseLine.LineNum == _lineNum)
                && view.rfqCaseId           == purchRFQCaseTable.rfqCaseId
                && view.RFQCaseLineRefRecId == rfqCaseLine.RecId
                && (view.MinStatus          != rfqCaseLine.StatusLow ||
                    view.MaxStatus          != rfqCaseLine.StatusHigh)
            {
                rfqCaseLine.StatusLow   = view.MinStatus;
                rfqCaseLine.StatusHigh  = view.MaxStatus;
                rfqCaseLine.update(true);
            }

            // if a new vendor is added => update min status to Created for RFQ case lines
            if (_setLowStatus2Created)
            {
                while select forupdate rfqCaseLine
                    where rfqCaseLine.RfqCaseId == purchRFQCaseTable.RfqCaseId
                    && rfqCaseLine.StatusLow    != PurchRFQStatus::Created
                    && (_lineNum == 0 || rfqCaseLine.LineNum == _lineNum)
                {
                    rfqCaseLine.StatusLow   = PurchRFQStatus::Created;
                    rfqCaseLine.update(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is allowed to add more lines on the current RFQ Case.
    /// </summary>
    /// <returns>true if it is allowed to create lines; otherwise, false.</returns>
    public boolean createLineAllowed()
    {
        boolean createLineAllowed = true;
                
        if (PurchRFQParameters::isRFQAmendmentEnabled())
        {
            boolean isRFQSent = purchRFQCaseTable.StatusHigh != PurchRFQStatus::Created;
            createLineAllowed = !(isRFQSent && purchRFQCaseTable.isAmended != NoYes::Yes);
        }
        else if (!purchRFQCaseTable.checkUpdate(false))
        {
            createLineAllowed = false;
        }
        
        return createLineAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean         ok          = true;

        if (purchRFQCaseTable.StatusHigh == PurchRFQStatus::Created)
        {
            if (FormDataUtil::isFormDataSource(purchRFQCaseTable)) // the dialog must only appear when called from a form
            {
                if (FormDataUtil::getFormDataSource(purchRFQCaseTable).name() != formStr(PurchRFQCaseTable)) // Only do this for forms not PurchRFQCaseTable
                {
                    if (Box::yesNo("@SYS105324", DialogButton::No) == DialogButton::No)
                    {
                        ok = checkFailed("@SYS19437");
                    }
                }
            }
        }
        else
        {
            ok = checkFailed(strFmt("@SYS105325", purchRFQCaseTable.StatusLow != PurchRFQStatus::Created ? purchRFQCaseTable.StatusLow : purchRFQCaseTable.StatusHigh));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean  ret = true;

        switch (_fieldId)
        {
            case fieldNum(PurchRFQCaseTable, rfqType):
                ret = this.checkType();
                break;
            case fieldNum(PurchRFQCaseTable, DeliveryDate):
                if (purchRFQCaseTable.DeliveryDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    // Delivery date must not be before today's date
                    ret = checkFailed("@SCM:PurchReceiptDateRequestedBeforeTodaysDateWarning");
                }
                break;
            case fieldNum(PurchRFQCaseTable, ExpiryDateTime):
                if (purchRFQCaseTable.ExpiryDateTime < DateTimeUtil::utcNow())
                {
                    // Expiry date must not be before today's date
                    ret = checkFailed("@SYS4009645");
                }
                break;
            case fieldNum(PurchRFQCaseTable, ValidityDateStart):
                if (purchRFQCaseTable.ValidityDateStart < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    // The start date cannot precede today's date
                    ret = checkFailed("@SYS303197");
                }
                break;
            case fieldNum(PurchRFQCaseTable, ValidityDateEnd):
                if (purchRFQCaseTable.ValidityDateEnd < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    // The end date cannot precede today's date
                    ret = checkFailed("@SYS303198");
                }
                if (purchRFQCaseTable.ValidityDateEnd < purchRFQCaseTable.ValidityDateStart)
                {
                    // The end date cannot precede the start date
                    ret = checkFailed("@SYS303199");
                }
                break;
            case fieldNum(PurchRFQCaseTable, ProjId):
                if (purchRFQCaseTable.ProjId)
                {
                    ret = ProjTable::find(purchRFQCaseTable.ProjId).status().validateWritePurchReqTable();
                }
            case fieldNum(PurchRFQCaseTable, InventLocationId):
                ret = purchRFQCaseTable.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQCaseTableType construct(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQTypeFactoryAttribute        attribute       = new PurchRFQTypeFactoryAttribute(_purchRFQCaseTable.rfqType);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_purchRFQCaseTable);
        PurchRFQCaseTableType               instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(PurchRFQCaseTableType), attribute, instantiation) as PurchRFQCaseTableType;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFQCloseVisibilityType</Name>
				<Source><![CDATA[
    private PurchRFQVisibilityTypeRecId getRFQCloseVisibilityType(PurchRFQParameters _parms)
    {
        return purchRFQCaseTable.SolicitationType
            ? PurchRFQSolicitationType::find(purchRFQCaseTable.SolicitationType).DefaultRFQCloseVisibilityType
            : _parms.DefaultRFQCloseVisibilityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates class <c>PurchRFQInstrumentationLogger</c> object.
    /// </summary>
    /// <returns>
    /// Class <c>PurchRFQInstrumentationLogger</c> object.
    /// </returns>
    private PurchRFQInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchRFQInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>