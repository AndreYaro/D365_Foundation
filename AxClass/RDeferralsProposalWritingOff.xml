<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsProposalWritingOff</Name>
	<SourceCode>
		<Declaration><![CDATA[
[RDeferralsProposalFactory(RDeferralsTransType::WritingOff, '')]
public class rDeferralsProposalWritingOff extends RDeferralsProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines()
    {
        AmountCur                     amountCur;
        RDeferralsTransDate           transDate, accountingDate;

        RDeferralsTableMethodIterator iterator =
            RDeferralsTableMethodIterator::construct(deferralsBook.DeferralsProfile);

        void updateDeprPeriod()
        {
            LedgerJournalTrans  ledgerJournalTransLocal;
            LedgerJournalTrans_RDeferrals  ledgerJournalTransLocal_RDeferrals;

            ledgerJournalTransLocal                   = rDeferralsJournal.ledgerJournalTrans();
            ledgerJournalTransLocal_RDeferrals        = rDeferralsJournal.ledgerJournalTrans_RDeferrals();

            ledgerJournalTransLocal.selectForUpdate(true);
            ledgerJournalTransLocal_RDeferrals.selectForUpdate(true);

            ledgerJournalTransLocal_RDeferrals.Period = iterator.getEndIntervalDate();
            ledgerJournalTransLocal.NoEdit            = NoYes::Yes;

            ledgerJournalTransLocal.doUpdate();
            ledgerJournalTransLocal_RDeferrals.doUpdate();
        }

        if (! deferralsBook.PostingProfile ||
            deferralsBook.Depreciate       ||
            deferralsBook.Status != RDeferralsStatus::Open)
            return;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00092, funcName());

        iterator.initFromDeferralsBook(deferralsBook,
                                       this.calculatePeriodEndDate(runDate));

        ttsbegin;

        while (iterator.next())
        {
            amountCur = iterator.getIntervalSum();

            if (amountCur != 0)
            {
                transDate = iterator.getStartIntervalDate();
                accountingDate = this.checkFirstDate(iterator.getStartIntervalDate(), deferralsBook.DeferralsBookId);

                if (transDate != accountingDate)
                {
                    rDeferralsJournal.parmCorrect(true);
                    rDeferralsJournal.parmAccountingDate(accountingDate);
                }
                else
                {
                    rDeferralsJournal.parmCorrect(false);
                }

                if (RDeferralsProfile::find(deferralsBook.DeferralsProfile).DeferralsMethod == RDeferralsMethod::LinearWithFactor &&
                    ! RDeferralsWritingOffFactor::findCalculatedPeriod(transDate,
                                                                       RDeferralsTable::find(deferralsBook.DeferralsId).rTax25ProfitTable,
                                                                       deferralsBook.DeferralsGroupId).RecId)
                {
                    warning(strFmt("@GLS107207", transDate, deferralsBook.DeferralsId, deferralsBook.DeferralsBookId));
                    break;
                }

                amountCur = RDeferralsProposal::roundAmount(deferralsBook,
                                                            amountCur);

                if (amountCur)
                {
                    rDeferralsJournal.createVoucher();
                    EventHandlerResult result = new EventHandlerResult();
                    this.createJournalLinesOnCreateTrans(strFmt("@GLS104182", iterator.getEndIntervalDate()), deferralsBook.rPayWriteOffsetLedgerDimension, deferralsBook.rPayWriteOffsetLedgerDimension ? RDeferralsTrans::findFirstType(deferralsBook.DeferralsId, deferralsBook.DeferralsBookId, RDeferralsTransType::Receipt, false).LedgerDimension : offsetDefaultAccount, result);

                    rDeferralsJournal.createTrans(-amountCur,
                                                   deferralsBook,
                                                   transDate,
                                                   strFmt("@GLS104182", iterator.getEndIntervalDate())
                                                   //<RUP>
                                                   ,
                                                   deferralsBook.rPayWriteOffsetLedgerDimension,
                                                   deferralsBook.rPayWriteOffsetLedgerDimension ? RDeferralsTrans::findFirstType(deferralsBook.DeferralsId, deferralsBook.DeferralsBookId, RDeferralsTransType::Receipt, false).LedgerDimension : offsetDefaultAccount
                                                   //</RUP>
                                                   );
                    updateDeprPeriod();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLinesOnCreateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables additional actions before creating transactions.
    /// </summary>
    /// <param name = "_transTxt">The transaction text.</param>
    /// <param name = "_defaultAccount">The default ledger account.</param>
    /// <param name = "_offsetDefaultAccount">The default offset ledger account.</param>
    /// <param name = "_result">The event handler result.</param>
    delegate void createJournalLinesOnCreateTrans(LedgerJournalTransTxt _transTxt, LedgerDimensionDefaultAccount _defaultAccount, LedgerDimensionDefaultAccount _offsetDefaultAccount, EventHandlerResult _result) {}

]]></Source>
			</Method>
			<Method>
				<Name>deferralsTransType</Name>
				<Source><![CDATA[
    public RDeferralsTransType deferralsTransType()
    {
        return RDeferralsTransType::WritingOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(LedgerJournalId _p1, RDeferralsTransDate _p2, RDeferralsBook _p3)
    {
        super(_p1, _p2, _p3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _runProposal = queryRun)
    {
        _runProposal.query().dataSourceNo(1).findRange(fieldNum(RDeferralsBook, Status)).value(queryValue(RDeferralsStatus::Open));
        super (_runProposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePeriodEndDate</Name>
				<Source><![CDATA[
    protected EndDate calculatePeriodEndDate(RDeferralsTransDate _runDate)
    {
        return endMth(prevMth(_runDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>