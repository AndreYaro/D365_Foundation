<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorInventoryAdjustmentBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

internal class RetailDocumentOperationProcessorInventoryAdjustmentBase extends RetailDocumentOperationProcessorInventoryJournalBase
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateJournalSerialNumberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document serial number line.
    /// </summary>
    /// <param name = "_serialNumberline">The journal document serial number line.</param>
    /// <param name = "_lineInventDim">The <c>InventDim</c> used by journal document line.</param>
    /// <param name = "_inventJournalTrans">The inventory journal transaction.</param>
    protected void createOrUpdateJournalSerialNumberLine(CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine _serialNumberline, InventDim _lineInventDim, InventJournalTrans _inventJournalTrans)
    {
        InventDim lineInventDim;
        lineInventDim = lineInventDim.data(_lineInventDim);
        str serialNumberLineInventSerialId = _serialNumberline.SerialNumber;
        InventQty qty = _serialNumberline.Quantity;
        InventQtyJournal lineQty = _inventJournalTrans.Qty;

        if (WHSInventEnabled::exist(_inventJournalTrans.ItemId) && !lineInventDim.InventStatusId)
        {
            lineInventDim.InventStatusId = WHSInventStatus::getDefaultInventStatus(this.defaultInventLocation.InventLocationId).InventStatusId;
        }

        // Register the serial number from POS.
        lineInventDim.inventSerialId = serialNumberLineInventSerialId;
        lineInventDim = InventDim::findOrCreate(lineInventDim);

        if (lineQty > 0)
        {
            this.registerLine(_inventJournalTrans, lineInventDim, qty);
        }
        else 
        {
            this.pickupLine(_inventJournalTrans, lineInventDim, qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get quantity to update from <c>InventoryInboundOutboundDocumentLine</c> based on the pos adjustment type.
    /// </summary>
    /// <param name="_line">
    /// The <c>InventoryInboundOutboundDocumentLine</c>.
    /// </param>
    /// <returns>The quantity to update.</returns>
    protected InventQtyJournal getQuantityToUpdate(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        InventQtyJournal qty;

        if (_line.AdjustmentType == CommerceRunTimeDataModel.InventoryJournalPosAdjustmentType::In)
        {
            qty = _line.QuantityToUpdate;
        }
        else
        {
            qty = -_line.QuantityToUpdate;
        }


        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateInventJournalTrans</Name>
				<Source><![CDATA[
    protected void insertOrUpdateInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        InventJournalTransTaxExtensionIN inventJournalTransTaxExtensionIN;
    
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && _inventJournalTrans.JournalType == InventJournalType::Movement
                && RetailInventoryAdjustmentSupportMovementJournalInIndiaFlight::instance().isEnabled())
        {
            InventJournalTransTaxExtensionIN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(_inventJournalTrans);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>