<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredPutProcessingTaskCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkDeferredPutProcessingTaskCancel</c> class handles deferred put processing task cancelation action from a form.
/// </summary>
public class WHSWorkDeferredPutProcessingTaskCancel
{
    private const int NumOfTasksToCancelWithoutConfirmation = 5;
    private const int MaximumNumberOfTasksAllowedCancellation = 10;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSWorkDeferredPutProcessingTask taskArgs = _args.record() as WHSWorkDeferredPutProcessingTask;
        if (taskArgs && FormDataUtil::isFormDataSource(taskArgs))
        {
            FormDataSource dataSource = FormDataUtil::getFormDataSource(taskArgs) as FormDataSource;

            if (WHSWorkDeferredPutProcessingTaskCancel::ensureShouldCancelWork(dataSource))
            {
                var multiSelect = MultiSelectionHelper::construct();
                multiSelect.parmDatasource(dataSource);

                Common workDeferredPutProcessingTaskCommon = multiSelect.getFirst();
                List selectedWorkDeferredPutProcessingTask = new List(Types::Int64);
                while (workDeferredPutProcessingTaskCommon)
                {
                    WHSWorkDeferredPutProcessingTask workDeferredPutProcessingTaskProcess = workDeferredPutProcessingTaskCommon;

                    selectedWorkDeferredPutProcessingTask.addEnd(workDeferredPutProcessingTaskProcess.RecId);

                    workDeferredPutProcessingTaskCommon = multiSelect.getNext();
                }

                if (selectedWorkDeferredPutProcessingTask.elements())
                {
                    WHSWorkDeferredPutMultiTaskCancellationController::cancel(selectedWorkDeferredPutProcessingTask);
                    dataSource.research();
                    dataSource.refresh();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureShouldCancelWork</Name>
				<Source><![CDATA[
    private static boolean ensureShouldCancelWork(FormDataSource _workDeferredPutProcessingTaskFormDataSource)
    {
        int numOfMarkedTasks = _workDeferredPutProcessingTaskFormDataSource.recordsMarked().lastIndex();

        if (numOfMarkedTasks >= MaximumNumberOfTasksAllowedCancellation)
        {
            error(strFmt("@WAX:WHSToManyRecordsSelectedError", MaximumNumberOfTasksAllowedCancellation));
            return false;
        }

        boolean doCancel = true;
        if (numOfMarkedTasks >= NumOfTasksToCancelWithoutConfirmation)
        {
            doCancel = Box::confirm(strFmt("@WAX:ConfirmCancelManyWorkDeferredPutProcessingTasks", numOfMarkedTasks));
        }

        return doCancel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>