<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentCheque</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankDocumentCheque</c> class is the business class of bank document for check.
/// </summary>
[BankDocumentAttribute(BankDocumentBookType::Cheque)]
class BankDocumentCheque extends BankDocument
implements BankDocumentIStateChangeEventHandler
{
    BankChequeTable bankChequeTable;
    LedgerJournalTrans ledgerJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankDocumentStateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event of bank document state change.
    /// </summary>
    /// <param name="_bankDocumentState">
    /// The bank document state.
    /// </param>
    public void bankDocumentStateChanged(BankDocumentState _bankDocumentState)
    {
        this.processBankAccountTransReconcileStatus(_bankDocumentState.parmBankDocumentStatusChangeType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode getBankCurrencyCode()
    {
        return bankChequeTable.BankCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTransType</Name>
				<Source><![CDATA[
    public BankTransactionType getBankTransType()
    {
        return ledgerJournalTrans.BankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    [HookableAttribute(false)]
    public TransactionTextLarge getDescription()
    {
        return ledgerJournalTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    public Num getDocumentNum()
    {
        return bankChequeTable.ChequeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    public BankDocumentBookType getDocumentType()
    {
        return BankDocumentBookType::Cheque;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrignalBankDocumentStatusName</Name>
				<Source><![CDATA[
    public BankDocumentOrigDocumentStatus getOrignalBankDocumentStatusName()
    {
        return enum2str(bankChequeTable.ChequeStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
    public PaymReference getReference()
    {
        return ledgerJournalTrans.PaymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyAccount</Name>
				<Source><![CDATA[
    public AccountNum getRelatedPartyAccount()
    {
        AccountNum ret;
        BankReconciliationRelatedPartyType dirPartyRoleType = this.getRelatedPartyType();

        if (dirPartyRoleType == DirPartyRoleType::Vendor
            || dirPartyRoleType == DirPartyRoleType::Customer)
        {
            ret = bankChequeTable.RecipientAccountNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyCompany</Name>
				<Source><![CDATA[
    public CompanyId getRelatedPartyCompany()
    {
        CompanyId company;

        company = bankChequeTable.RecipientCompany;

        return company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyName</Name>
				<Source><![CDATA[
    public DirPartyName getRelatedPartyName()
    {
        DirPartyName relatedPartyName;

        relatedPartyName = super();

        if (!relatedPartyName)
        {
            relatedPartyName = bankChequeTable.BankNegInstRecipientName;
        }

        return relatedPartyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyType</Name>
				<Source><![CDATA[
    public BankReconciliationRelatedPartyType getRelatedPartyType()
    {
        BankReconciliationRelatedPartyType dirPartyRoleType = DirPartyRoleType::None;

        if (bankChequeTable.RecipientType == BankChequeRecipientType::Vend)
        {
            dirPartyRoleType = DirPartyRoleType::Vendor;
        }
        else if (bankChequeTable.RecipientType == BankChequeRecipientType::Cust)
        {
            dirPartyRoleType = DirPartyRoleType::Customer;
        }

        return dirPartyRoleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getTransactionCurrency()
    {
        return bankChequeTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountCur getTransactionCurrencyAmount()
    {
        return -bankChequeTable.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDate</Name>
				<Source><![CDATA[
    public TransDate getTransactionDate()
    {
        TransDate transDate = bankChequeTable.TransDate;

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerPostDatedChecks)) && bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans))
        {
            CustVendPDCRegister custVendPDCRegister = CustVendPDCRegister::findByReference(bankChequeTable.SourceRecId);
            if (custVendPDCRegister.MaturityDate != dateNull())
            {
                transDate = custVendPDCRegister.MaturityDate;
            }
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceBuffer</Name>
				<Source><![CDATA[
    protected void loadSourceBuffer()
    {
        bankChequeTable  = documentMap;

        if (bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(bankChequeTable.SourceRecId, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>