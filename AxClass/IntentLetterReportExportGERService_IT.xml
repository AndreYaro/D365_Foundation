<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntentLetterReportExportGERService_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntentLetterReportExportGERService_IT</c> class gets actions for intent letter
/// electronic report exporting.
/// </summary>
public class IntentLetterReportExportGERService_IT extends SysOperationServiceBase
{
    public IntentLetterReportTable_IT intentLetterReportTable_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports electronic report.
    /// </summary>
    /// <param name = "_dataContract">The data contract to be used for electronic report export.</param>
    public void runExport(IntentLetterReportExportGERDataContract_IT _dataContract)
    {
        ERFileName filename = _dataContract.parmFileName();

        intentLetterReportTable_IT = _dataContract.parmIntentLetterReportTable();
        RefRecId formatMappingId = VendParameters::find().IntentLetterERFormatMappingId_IT;
        
        Query query = new Query();

        query.addDataSource(tableNum(IntentLetterReportTable_IT))
            .addRange(fieldNum(IntentLetterReportTable_IT, RecId))
            .value(int642Str(intentLetterReportTable_IT.RecId));
        
        ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId, filename)
            .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addQuery(tableNum(IntentLetterReportTable_IT), query))
            .run();

        if (_dataContract.parmConfirmExported())
        {
            this.updateCallerRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates intent letter header record after the successful report creation.
    /// </summary>
    protected void updateCallerRecord()
    {
        ttsbegin;
        intentLetterReportTable_IT.selectForUpdate(true);
        intentLetterReportTable_IT.ExportDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        intentLetterReportTable_IT.Exported = NoYes::Yes;
        intentLetterReportTable_IT.update();
    
        ttscommit;
    
        FormDataSource dataSource = FormDataUtil::getFormDataSource(intentLetterReportTable_IT) as FormDataSource;

        if (dataSource)
        {
            dataSource.reread();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>