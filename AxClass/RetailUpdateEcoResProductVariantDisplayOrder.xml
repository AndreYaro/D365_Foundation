<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUpdateEcoResProductVariantDisplayOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailUpdateEcoResProductVariantDisplayOrder</c> classs updates display order of all variant dimensions from product dimensions.
/// </summary>
internal class RetailUpdateEcoResProductVariantDisplayOrder extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrades Product variants dimension values tables with display order configured on product dimension values tables .
    /// </summary>
    [Hookable(false)]
    public void run()
    {
        using (var telemetry = RetailInstrumentationSegment::construct(classId2Name(ClassIdGet(this)), funcName()))
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Reset();
            sw.Start();

            this.update();

            sw.Stop();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    private void update()
    {
        ttsbegin;
        EcoResDistinctProductVariant ecoResDistinctProductVariant;

        EcoResProductMasterSize ecoResProductMasterSize;
        EcoResProductVariantSize ecoResProductVariantSize;
        this.callInsertUpdateRelatedSkipMethods(ecoResProductVariantSize);

        update_recordset ecoResProductVariantSize
            setting RetailDisplayOrder = ecoResProductMasterSize.RetailDisplayOrder
            join ecoResDistinctProductVariant
                where ecoResDistinctProductVariant.RecId == ecoResProductVariantSize.DistinctProductVariant
                join EcoResProductMasterSize
                    where EcoResProductMasterSize.SizeProductMaster == ecoResDistinctProductVariant.ProductMaster
                        && EcoResProductMasterSize.Size == ecoResProductVariantSize.Size
                        && EcoResProductMasterSize.RetailDisplayOrder != 0;

        EcoResProductMasterColor ecoResProductMasterColor;
        EcoResProductVariantColor ecoResProductVariantColor;
        this.callInsertUpdateRelatedSkipMethods(ecoResProductVariantColor);

        update_recordset ecoResProductVariantColor
            setting RetailDisplayOrder = ecoResProductMasterColor.RetailDisplayOrder
            join ecoResDistinctProductVariant
                where ecoResDistinctProductVariant.RecId == ecoResProductVariantColor.DistinctProductVariant
                join ecoResProductMasterColor
                    where ecoResProductMasterColor.ColorProductMaster == ecoResDistinctProductVariant.ProductMaster
                        && ecoResProductMasterColor.Color == ecoResProductVariantColor.Color
                        && ecoResProductMasterColor.RetailDisplayOrder != 0;

        EcoResProductMasterStyle ecoResProductMasterStyle;
        EcoResProductVariantStyle ecoResProductVariantStyle;
        this.callInsertUpdateRelatedSkipMethods(ecoResProductVariantStyle);

        update_recordset ecoResProductVariantStyle
            setting RetailDisplayOrder = ecoResProductMasterStyle.RetailDisplayOrder
            join ecoResDistinctProductVariant
                where ecoResDistinctProductVariant.RecId == ecoResProductVariantStyle.DistinctProductVariant
                join ecoResProductMasterStyle
                    where ecoResProductMasterStyle.StyleProductMaster == ecoResDistinctProductVariant.ProductMaster
                        && ecoResProductMasterStyle.Style == ecoResProductVariantStyle.Style
                        && ecoResProductMasterStyle.RetailDisplayOrder != 0;

        EcoResProductMasterConfiguration ecoResProductMasterConfiguration;
        EcoResProductVariantConfiguration ecoResProductVariantConfiguration;
        this.callInsertUpdateRelatedSkipMethods(ecoResProductVariantConfiguration);

        update_recordset ecoResProductVariantConfiguration
            setting RetailDisplayOrder = ecoResProductMasterConfiguration.RetailDisplayOrder
            join ecoResDistinctProductVariant
                where ecoResDistinctProductVariant.RecId == ecoResProductVariantConfiguration.DistinctProductVariant
                join ecoResProductMasterConfiguration
                    where ecoResProductMasterConfiguration.ConfigProductMaster == ecoResDistinctProductVariant.ProductMaster
                        && ecoResProductMasterConfiguration.Configuration == ecoResProductVariantConfiguration.Configuration
                        && ecoResProductMasterConfiguration.RetailDisplayOrder != 0;

        RetailConfigurationParameters config; 
        
        config = RetailConfigurationParameters::findByName(RetailConfigurationParameters::getNameForEcoResProductVariantDimensionsUpdatedForDisplayOrder(), true);
        config.Name = RetailConfigurationParameters::getNameForEcoResProductVariantDimensionsUpdatedForDisplayOrder();
        config.Value = 'true';
        config.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callInsertUpdateRelatedSkipMethods</Name>
				<Source><![CDATA[
    private void callInsertUpdateRelatedSkipMethods(Common _buffer)
    {
        //BP deviation documented
        _buffer.skipAosValidation(true);
        _buffer.skipDatabaseLog(true);
        _buffer.skipDataMethods(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@Retail:RetailUpdateEcoResProductVariantDisplayOrderCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the update run job
    /// </summary>
    [Hookable(false)]
    public static void scheduleRun()
    {
        // Prevent multiple running or waiting jobs
        Batch runningBatch;
        select firstonly runningBatch
            where runningBatch.ClassNumber == classnum(RetailUpdateEcoResProductVariantDisplayOrder)
            && (runningBatch.Status == BatchStatus::Waiting || runningBatch.Status == BatchStatus::Executing);

        if (runningBatch.RecId != 0)
        {
            return;
        }

        BatchHeader batchHeader;
        BatchInfo batchInfo;
        
        RunBaseBatch task = new RetailUpdateEcoResProductVariantDisplayOrder();
        batchInfo = task .batchInfo();
        batchInfo.parmGroupId("");
        batchHeader = BatchHeader::construct();
        batchHeader.addTask(task);
        batchHeader.save();
        info(strFmt("@Retail:RetailUpdateEcoResProductVariantDisplayOrderInfoMessage", task.caption()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>needUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if variant dimensions need update
    /// </summary>
    /// <returns>True if need update, otherwise false</returns>
    [Hookable(false)]
    public static boolean needUpdate()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            return false;
        }

        RetailConfigurationParameters config = RetailConfigurationParameters::findByName(RetailConfigurationParameters::getNameForEcoResProductVariantDimensionsUpdatedForDisplayOrder());

        if (config.Value == 'true')
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>