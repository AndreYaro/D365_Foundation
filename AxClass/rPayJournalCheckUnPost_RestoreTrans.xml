<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayJournalCheckUnPost_RestoreTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A class for unposting posted journals with restoring to unposted.
/// </summary>
class rPayJournalCheckUnPost_RestoreTrans extends RPayJournalCheckUnPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        RHRMOrderTable   orderTable;
        boolean ret;

        ret = super(_journalTransList);

        orderTable = this.orderTable();

        if (orderTable && orderTable.Posted == NoYes::No)
        {
            ret = checkFailed("@RUP6148");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks transactions are valid for restoring.
    /// </summary>
    /// <param name="_journalTransData">
    /// The <c>JournalTransData</c> class instance.
    /// </param>
    /// <returns>
    /// True if validation passed without any errors.
    /// </returns>
    protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean ret;

        RPayTrans           rPayTrans;
        RPayJournalTrans    rPayJournalTrans = _journalTransData.journalTrans();

        ret = super(_journalTransData);

        while select * from rPayTrans
            where rPayTrans.SourceTableId == tableNum(RPayJournalTrans) &&
                  rPayTrans.SourceRecId == rPayJournalTrans.RecId       &&
                  rPayTrans.CounterUnit == rPayJournalTrans.JournalId
        {
            ret = (!TransLink_RU::exist(rPayTrans.TableId, rPayTrans.RecId, rPayTrans.RecId)) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs post-end operations.
    /// </summary>
    /// <returns>
    /// Returns run result (#runEnd)
    /// </returns>
    protected Integer runPostEnd()
    {
        RPayReverse_PayJournalTable payReverseJT;
        RPayReverse payReverse;
        RHRMOrderTable orderTable;
        TransLink_RU transLink;
        RPayJournalTable payJournal;

        Args        args;
        Integer ret;

        ret = super();
        if (ret)
        {
            args = new Args();
            args.parmEnumType(enumNum(RPayReverseType));
            args.parmEnum(RPayReverseType::Reverse);
            args.record(journalTableData.journalTable());
            args.parm();

            payReverse = RPayReverse::newFromTable(args);

            if (payReverse is RPayReverse_PayJournalTable)
            {
                payReverseJT = payReverse;
                payReverseJT.parmRestoreOrigLines(true);
                payReverseJT.runOperation();
            }
            else
            {
                payReverse.runOperation();
            }

            orderTable = this.orderTable(true);
            if (orderTable)
            {
                if (orderTable.PayJournalNum)
                {
                    orderTable.PayJournalNum = '';
                }
                else
                {
                    select firstonly RefSec from transLink
                        where transLink.RefPri == journalTableData.journalTable().RecId
                           && transLink.RefSec != transLink.RefPri
                           && transLink.TransLinkType == TransLinkType_RU::Storno;

                    payJournal = RPayJournalTable::findRecId(transLink.RefSec);

                    orderTable.PayJournalNum = payJournal.JournalId;
                }

                orderTable.update();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTablePosted</Name>
				<Source><![CDATA[
    protected void updateJournalTablePosted(JournalTableMap _journalTable)
    {
        //do not update posted status
        //super(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>