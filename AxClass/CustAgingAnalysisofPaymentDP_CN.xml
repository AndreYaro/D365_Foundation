<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingAnalysisofPaymentDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class <c>CustAgingAnalysisofPaymentDP_CN</c>
/// for <c>CustAgingAnalysisofPayment_CN</c> report.
/// </summary>
public class CustAgingAnalysisofPaymentDP_CN
{
    const str Dash = '-';

    CustAgingAnalysisofPaymentTmp_CN custAgingAnalysisofPaymentTmp_CN;
    TransDate                        fromDate;
    TransDate                        toDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPeriodRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period range.
    /// </summary>
    /// <param name="_period">
    /// The periof value.
    /// </param>
    /// <returns>
    /// The period value.
    /// </returns>
    private Integer calcPeriodRange(Integer _period)
    {
        // 1 period contains 30 days
        const Integer DefaultPeriod = 30;
        Integer period;

        if (!_period)
        {
            period = DefaultPeriod;
        }
        else
        {
            period = _period;
        }

        if (_period <= 0)
        {
            period = DefaultPeriod;
        }

        return period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Invoice transaction for the Customer.
    /// </summary>
    /// <param name="_accountNum">
    /// The customer account.
    /// </param>
    /// <returns>
    /// The <c>CustTrans</c> recid.
    /// </returns>
    private recId findInvoiceTrans(CustAccount _accountNum)
    {
        CustTrans       custTransLocal;
        LedgerTransType transType;
        recId           recid;

        select firstOnly recId,TransType
            from custTransLocal
            where custTransLocal.AccountNum == _accountNum;

        transType = custTransLocal.TransType;

        if (transType == LedgerTransType::Sales || transType == LedgerTransType::Cust)
        {
            recid = custTransLocal.RecId;
        }

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAgingAnalysisofPaymentTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data used by <c>CustAgingAnalysisofPayment_CN</c> report .
    /// </summary>
    /// <returns>
    /// Temporary table <c>CustAgingAnalysisofPaymentTmp_CN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(CustAgingAnalysisofPaymentTmp_CN))
    ]
    public CustAgingAnalysisofPaymentTmp_CN getCustAgingAnalysisofPaymentTmp_CN()
    {
        return custAgingAnalysisofPaymentTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment due date.
    /// </summary>
    /// <param name="_offsetId">
    /// The <c>CustTrans</c> Recid.
    /// </param>
    /// <returns>
    /// The DueDate value.
    /// </returns>
    private DueDate getPaymentDueDate(CustTransRefRecId _offsetId)
    {
        CustTrans custTransLocal;
        DueDate   dueDate;

        select firstOnly OffsetRecid,DueDate
            from custTransLocal
            where custTransLocal.RecId == _offsetId;

        dueDate = custTransLocal.DueDate;

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrePaymentDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pre payment due date.
    /// </summary>
    /// <param name="_invoice">
    /// The Invoice id.
    /// </param>
    /// <returns>
    /// The DueDate value.
    /// </returns>
    private DueDate getPrePaymentDueDate(CustInvoiceId _invoice)
    {
        CustTrans       custTransLocal;
        DueDate         dueDate;
        LedgerTransType transType;

        select firstOnly DueDate, TransType, Invoice
            from custTransLocal
            where custTransLocal.Invoice == _invoice;

        transType = custTransLocal.TransType;

        if (transType == LedgerTransType::Sales || transType == LedgerTransType::Cust)
        {
            dueDate = custTransLocal.DueDate;
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAgingAnalysisofPaymentTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into <c>CustAgingAnalysisofPaymentTmp_CN</c> table.
    /// </summary>
    /// <param name="_account">
    /// The vend account.
    /// </param>
    /// <param name="_payment">
    /// The Payment value.
    /// </param>
    /// <param name="_unDueAmount">
    /// The undue amount value.
    /// </param>
    /// <param name="_AmountOne">
    /// The AmountOne value.
    /// </param>
    /// <param name="_AmountTwo">
    /// The AmountTwo value.
    /// </param>
    /// <param name="_AmountOver">
    /// The AmountOver value.
    /// </param>
    private void insertCustAgingAnalysisofPaymentTmp_CN(
        custAccount _account,
        AmountMST   _prepaymentAmount,
        AmountMST   _payment,
        Amount      _unDueAmount,
        Amount      _AmountOne,
        Amount      _AmountTwo,
        Amount      _AmountOver)
    {
        custAgingAnalysisofPaymentTmp_CN.AccountNum  = _account;
        custAgingAnalysisofPaymentTmp_CN.Name        = CustTable::find(_account).name();
        custAgingAnalysisofPaymentTmp_CN.Prepayment  = _prepaymentAmount;
        custAgingAnalysisofPaymentTmp_CN.Payment     = _payment + _prepaymentAmount;
        custAgingAnalysisofPaymentTmp_CN.UndueAmount = _unDueAmount;
        custAgingAnalysisofPaymentTmp_CN.AmountOne   = _AmountOne;
        custAgingAnalysisofPaymentTmp_CN.AmountTwo   = _AmountTwo;
        custAgingAnalysisofPaymentTmp_CN.AmountOver  = _AmountOver;

        if (custAgingAnalysisofPaymentTmp_CN.Payment == 0)
        {
            custAgingAnalysisofPaymentTmp_CN.PrepaymentPercent  = 0;
            custAgingAnalysisofPaymentTmp_CN.UndueAmountPercent = 0;
            custAgingAnalysisofPaymentTmp_CN.AmountOnePercent   = 0;
            custAgingAnalysisofPaymentTmp_CN.AmountTwoPercent   = 0;
            custAgingAnalysisofPaymentTmp_CN.AmountOverPercent  = 0;
        }
        else
        {
            custAgingAnalysisofPaymentTmp_CN.PrepaymentPercent  = (_prepaymentAmount / custAgingAnalysisofPaymentTmp_CN.Payment) * 100;
            custAgingAnalysisofPaymentTmp_CN.UndueAmountPercent = (_unDueAmount / custAgingAnalysisofPaymentTmp_CN.Payment) * 100;
            custAgingAnalysisofPaymentTmp_CN.AmountOnePercent   = (_AmountOne / custAgingAnalysisofPaymentTmp_CN.Payment) * 100;
            custAgingAnalysisofPaymentTmp_CN.AmountTwoPercent   = (_AmountTwo / custAgingAnalysisofPaymentTmp_CN.Payment) * 100;
            custAgingAnalysisofPaymentTmp_CN.AmountOverPercent  = (_AmountOver / custAgingAnalysisofPaymentTmp_CN.Payment) * 100;
        }
        custAgingAnalysisofPaymentTmp_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    /// <param name = "_contract">instance of <c>CustAgingAnalysisofPaymentContract_CN</c></param>
    /// <returns>buffer of <c>CustAgingAnalysisofPaymentTmp_CN</c></returns>
    public CustAgingAnalysisofPaymentTmp_CN prepareData(CustAgingAnalysisofPaymentContract_CN _contract)
    {
        Query                query;
        QueryRun             queryRun;
        QueryBuildDataSource qbdsCustTrans;
        QueryBuildDataSource qbdsCustSettlement;
        QueryBuildRange      queryBuildRange;
        CustTrans            custTrans;
        CustSettlement       custSettlement;
        CustTrans            custTransPrepayment;
        Integer              periodOne;
        Integer              periodTwo;
        CustAccount          lastCustNum;
        LedgerTransType      transType;
        CustInvoiceId        invoice;
        CustTransRefRecId    offsetId;
        DueDate              tmpDateTime;
        TransDate            transDate;
        String255            fromPeriodLabel;
        String255            toPeriodLabel;
        AmountMST            settleAmountMST;
        String255            periodLabel;
        String255            custRange;
        CustAccount          custAccount;
        Amount               unDueAmount;
        Amount               AmountOne;
        Amount               AmountTwo;
        Amount               AmountOver;
        AmountMST            payment;
        AmountMST            prepaymentAmount;
        NoYes                prepayment;
        RecId                lastCustTransRecId;
        AmountMST            prepaymentOrigin;

        boolean first                      = true;
        boolean isPayment                  = false;
        boolean getPrepaymentOrigin        = false;

        query = new Query(SysOperationHelper::base64Decode(_contract.parmQuery()));

        if (_contract.parmLedgerFiscalPeriodNameContractER().parmFromDate())
        {
            fromDate      = _contract.parmLedgerFiscalPeriodNameContractER().parmFromDate();
            fromPeriodLabel = _contract.parmLedgerFiscalPeriodNameContractER().parmFromPeriod();
        }
        else
        {
            fromDate      = LedgerFiscalCalendar::currentLedgePeriod_CN().StartDate;
            fromPeriodLabel = LedgerFiscalCalendar::currentLedgePeriod_CN().Name;
        }
        if (_contract.parmLedgerFiscalPeriodNameContractER().parmToDate())
        {
            toDate      = _contract.parmLedgerFiscalPeriodNameContractER().parmToDate();
            toPeriodLabel = _contract.parmLedgerFiscalPeriodNameContractER().parmToPeriod();
        }
        else
        {
            toDate      = LedgerFiscalCalendar::currentLedgePeriod_CN().EndDate;
            toPeriodLabel = LedgerFiscalCalendar::currentLedgePeriod_CN().Name;
        }

        periodOne   = this.calcPeriodRange(_contract.parmPeriodOne());
        periodTwo   = this.calcPeriodRange(_contract.parmPeriodTwo());

        periodLabel = fromPeriodLabel + Dash + toPeriodLabel;
        _contract.parmPeriodLabel(periodLabel);

        qbdsCustTrans      = query.dataSourceTable(tableNum(CustTrans));
        qbdsCustSettlement = query.dataSourceTable(tableNum(CustSettlement));

        SysQuery::findOrCreateRange(qbdsCustSettlement, fieldnum(custSettlement, TransDate)).value(queryRange(fromDate, toDate));

        queryBuildRange = qbdsCustTrans.range(1);
        custRange       = queryBuildRange.value();
        _contract.parmCustRange(custRange);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            custTrans           = queryRun.get(tableNum(CustTrans));
            custSettlement      = queryRun.get(tableNum(CustSettlement));
            custAccount         = custTrans.AccountNum;
            transType           = custTrans.TransType;
            invoice             = custTrans.Invoice;

            isPayment = custTrans.transType == LedgerTransType::Payment || (custTrans.transType == LedgerTransType::GeneralJournal && custTrans.Invoice == '');
            prepaymentOrigin = -custTrans.AmountMST;

            if (isPayment)
            {
                if (first)
                {
                    lastCustNum = custTrans.AccountNum;
                    lastCustTransRecId   = custTrans.RecId;
                    first       = false;
                }

                if (lastCustNum == custTrans.AccountNum)
                {
                    if (custSettlement
                        || (transType == LedgerTransType::None && settleAmountMST != 0 && offsetId == this.findInvoiceTrans(custAccount))
                        || (transType == LedgerTransType::Settlement && settleAmountMST != 0))
                    {
                        offsetId        = custSettlement.OffsetRecid;
                        settleAmountMST = -custSettlement.SettleAmountMST;
                        transDate       = custSettlement.TransDate;

                        if (transType == LedgerTransType::Settlement && settleAmountMST != 0)
                        {
                            tmpDateTime =  this.getPrePaymentDueDate(invoice);
                        }
                        else
                        {
                            tmpDateTime = this.getPaymentDueDate(offsetId);
                        }

                        if (custTrans.RecId != lastCustTransRecId)
                        {
                            getPrepaymentOrigin = false;
                            lastCustTransRecId   = custTrans.RecId;
                        }

                        if (!getPrepaymentOrigin)
                        {
                            if (custTrans.TransDate >= fromDate && custTrans.TransDate <= toDate && custTrans.Prepayment == NoYes::Yes)
                            {
                                prepaymentAmount += prepaymentOrigin;
                            }

                            getPrepaymentOrigin = true;
                        }

                        if (prepaymentAmount != 0 && custTrans.Prepayment == NoYes::Yes)
                        {
                            prepaymentAmount -= settleAmountMST;
                        }

                        payment += settleAmountMST;

                        if (transDate <= tmpDateTime)
                        {
                            unDueAmount += settleAmountMST;
                        }
                        else if (transDate <= tmpDateTime + periodOne)
                        {
                            AmountOne += settleAmountMST;
                        }
                        else if (transDate <= tmpDateTime + periodOne + periodTwo)
                        {
                            AmountTwo += settleAmountMST;
                        }
                        else
                        {
                            AmountOver += settleAmountMST;
                        }
                    }
                    else
                    {
                        if (custTrans.TransDate >= fromDate && custTrans.TransDate <= toDate && custTrans.Prepayment == NoYes::Yes)
                        {
                            prepaymentAmount += prepaymentOrigin;
                        }
                    }
                }
                else
                {
                    if (prepaymentAmount != 0 || payment != 0)
                    {
                        this.insertCustAgingAnalysisofPaymentTmp_CN(
                            lastCustNum,
                            prepaymentAmount,
                            payment,
                            unDueAmount,
                            AmountOne,
                            AmountTwo,
                            AmountOver);

                        prepaymentAmount    = 0;
                        payment             = 0;
                        unDueAmount         = 0;
                        AmountOne           = 0;
                        AmountTwo           = 0;
                        AmountOver          = 0;
                        getPrepaymentOrigin = false;
                    }

                    lastCustNum         = custTrans.AccountNum;

                    if (custSettlement
                        || (transType == LedgerTransType::None && settleAmountMST != 0 && offsetId == this.findInvoiceTrans(custAccount))
                        || (transType == LedgerTransType::Settlement && settleAmountMST != 0))
                    {
                        offsetId        = custSettlement.OffsetRecid;
                        settleAmountMST = -custSettlement.SettleAmountMST;
                        transDate       = custSettlement.TransDate;

                        if (transType == LedgerTransType::Settlement && settleAmountMST != 0)
                        {
                            tmpDateTime =  this.getPrePaymentDueDate(invoice);
                        }
                        else
                        {
                            tmpDateTime = this.getPaymentDueDate(offsetId);
                        }

                        if (custTrans.RecId != lastCustTransRecId)
                        {
                            getPrepaymentOrigin = false;
                            lastCustTransRecId   = custTrans.RecId;
                        }

                        if (!getPrepaymentOrigin)
                        {
                            if (custTrans.TransDate >= fromDate && custTrans.TransDate <= toDate && custTrans.Prepayment == NoYes::Yes)
                            {
                                prepaymentAmount = prepaymentOrigin;
                            }

                            getPrepaymentOrigin = true;
                        }

                        if (prepaymentAmount != 0 && custTrans.Prepayment == NoYes::Yes)
                        {
                            prepaymentAmount -= settleAmountMST;
                        }

                        payment = settleAmountMST;

                        if (transDate <= tmpDateTime)
                        {
                            unDueAmount = settleAmountMST;
                        }
                        else if (transDate <= tmpDateTime + periodOne)
                        {
                            AmountOne = settleAmountMST;
                        }
                        else if (transDate <= tmpDateTime + periodOne + periodTwo)
                        {
                            AmountTwo = settleAmountMST;
                        }
                        else
                        {
                            AmountOver = settleAmountMST;
                        }
                    }
                    else if (custTrans.TransDate >= fromDate && custTrans.TransDate <= toDate && custTrans.Prepayment == NoYes::Yes)
                    {
                        prepaymentAmount = prepaymentOrigin;
                    }
                }
            }
        }

        if (lastCustNum != custTrans.AccountNum && (prepaymentAmount != 0 || payment != 0))
        {
            this.insertCustAgingAnalysisofPaymentTmp_CN(
                        lastCustNum,
                        prepaymentAmount,
                        payment,
                        unDueAmount,
                        AmountOne,
                        AmountTwo,
                        AmountOver);
        }

        return custAgingAnalysisofPaymentTmp_CN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>