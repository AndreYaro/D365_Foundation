<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransBaseController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerTransBaseController extends SrsReportRunController implements BatchRetryable
{
    private date userPreferredCurrentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        LedgerTransBaseContract contract = this.parmReportContract().parmRdpContract() as LedgerTransBaseContract;

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
            contract.parmDisplayDescription(false);
        }
        // </GEEPL>

        if (!Ledger::reportingCurrency() || Ledger::accountingCurrency() == Ledger::reportingCurrency())
        {
            contract.parmShowReportingCurrency(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets default parameter values before the user is prompted for input.
    /// </summary>
    [Wrappable(false)]
    protected void prePromptModifyContract()
    {
        super();

        LedgerTransBaseContract contract = this.parmReportContract().parmRdpContract() as LedgerTransBaseContract;

        if (!contract.parmFromDate())
        {
            // Set the default value for the From date to the first day of the current fiscal period. Apply the default value.
            contract.parmFromDate(FiscalCalendars::findFirstDayOfMonth(Ledger::fiscalCalendar(), userPreferredCurrentDate));
        }

        if (!contract.parmToDate())
        {
            // Set the default value for the To date to the last day of the current fiscal period. Apply the default value.
            contract.parmToDate(FiscalCalendars::findLastDayOfMonth(Ledger::fiscalCalendar(), userPreferredCurrentDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        LedgerTransBaseController controller = new LedgerTransBaseController();
        controller.parmReportName(ssrsReportStr(LedgerTransBase, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>