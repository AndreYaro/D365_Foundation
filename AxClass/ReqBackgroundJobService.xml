<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqBackgroundJobService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqBackgroundJobService</c> class that serves as the mediator for spawning various
///    background tasks.
/// </summary>
public class ReqBackgroundJobService
{
    BatchHeader batchHeader;
    private Set dataAreaIds;
    BatchGroupId batchGroupId;
    private str triggeredBy;
    private boolean reqBatchTasksSchedulingFixToggleEnabled;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPlanVersionCleanupTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the plan version cleanup task.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The master plan version to delete.
    /// </param>
    public void addPlanVersionCleanupTask(ReqPlanVersion _reqPlanVersion)
    {
        ReqPlanVersionCleanup cleanupJob = ReqPlanVersionCleanup::newPlanVersionId(_reqPlanVersion.RecId);

        cleanupJob.parmTriggeredBy(this.parmTriggeredBy());

        if (!reqBatchTasksSchedulingFixToggleEnabled)
        {
            cleanupJob.batchInfo().parmGroupId(this.parmGroupId());
        }
        
        this.batchHeader().addTask(cleanupJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrphanedPlanVersionCleanupTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the plan version cleanup task for orphaned plan versions.
    /// </summary>
    public void addOrphanedPlanVersionCleanupTask()
    {
        Set localDataAreaIds = dataAreaIds;

        if (localDataAreaIds == null)
        {
            localDataAreaIds = new Set(Types::String);
            localDataAreaIds.add(curExt());
        }

        SetEnumerator dataAreaIdEnumerator = localDataAreaIds.getEnumerator();

        while (dataAreaIdEnumerator.moveNext())
        {
            ReqPlanVersionCleanup cleanupJob = ReqPlanVersionCleanup::newCleanupOfOrphanedVersions();
            cleanupJob.parmTriggeredBy(this.parmTriggeredBy());
            cleanupJob.batchInfo().parmDataareaId(dataAreaIdEnumerator.current());
            this.batchHeader().addTask(cleanupJob);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNetRequirementsCleanupTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ReqNetRequirementsCleanup</c> batch task to the header.
    /// </summary>
    public void addNetRequirementsCleanupTask()
    {
        ReqNetRequirementsCleanup netRequirementsCleanup = new ReqNetRequirementsCleanup();

        this.batchHeader().addTask(netRequirementsCleanup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the batch header that is used by the <c>RegBackgroundJobService</c> object.
    /// </summary>
    /// <returns>
    ///    The batch header that is used by <c>RegBackgroundJobService</c> object.
    /// </returns>
    public BatchHeader batchHeader()
    {
        if (!batchHeader)
        {
            batchHeader = BatchHeader::construct();
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        reqBatchTasksSchedulingFixToggleEnabled = ReqBatchTasksSchedulingFixToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the batch header for the <c>ReqBackgroundJobService.setBatchHeader</c> object.
    /// </summary>
    /// <param name="_batchHeader">
    ///    The batch header for the <c>ReqBackgroundJobService.setBatchHeader</c> object.
    /// </param>
    protected void setBatchHeader(BatchHeader _batchHeader = batchHeader)
    {
        batchHeader = _batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the background operations.
    /// </summary>
    public void start()
    {
        if (reqBatchTasksSchedulingFixToggleEnabled)
        {
            this.batchHeader().parmBatchGroup(this.parmGroupId());
        }

        this.batchHeader().save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startPlanVersionCleanup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the batch job to delete the specified master plan version.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The master plan version to delete.
    /// </param>
    public void startPlanVersionCleanup(ReqPlanVersion _reqPlanVersion)
    {
        this.addPlanVersionCleanupTask(_reqPlanVersion);
        this.start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqBackgroundJobService construct()
    {
        return new ReqBackgroundJobService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the new instance of the <c>ReqBackgroundJobService</c> class.
    /// </summary>
    /// <param name="_batchHeader">
    ///     The instance of the <c>BatchHeader</c> class; optional.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>ReqBackgroundJobService</c> class.
    /// </returns>
    public static ReqBackgroundJobService newBatchHeader(BatchHeader _batchHeader = BatchHeader::construct())
    {
        ReqBackgroundJobService backgroundJobService = ReqBackgroundJobService::construct();

        backgroundJobService.setBatchHeader(_batchHeader);

        return backgroundJobService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaIds</Name>
				<Source><![CDATA[
    internal Set parmDataAreaIds(Set _dataAreaIds  = dataAreaIds)
    {
        dataAreaIds = _dataAreaIds;
        return dataAreaIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTriggeredBy</Name>
				<Source><![CDATA[
    internal str parmTriggeredBy(str _triggeredBy  = triggeredBy)
    {
        triggeredBy = _triggeredBy;
        return triggeredBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupId</Name>
				<Source><![CDATA[
    public BatchGroupId parmGroupId(BatchGroupId _batchGroupId = batchGroupId)
    {
        batchGroupId = _batchGroupId;
        return batchGroupId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>