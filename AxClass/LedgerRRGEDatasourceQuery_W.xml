<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceQuery_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEDatasourceQuery_W extends LedgerRRGEDatasource_W
{
    LedgerRRGEQueries_W eQuery;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterQueryAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes operations for a table record after the changing of the query Id field.
    /// </summary>
    /// <param name="_record">
    ///    The table record contains a field with changed query Id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void afterQueryAssigned(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_runBase">
    ///    An instance of the <c>RunBase</c> class.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Object dialog(RunBase _runBase)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromEQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEQueries_W parmEQuery(LedgerRRGEQueries_W _eQuery = eQuery)
    {
       
        if (!prmisDefault(_eQuery))
        {
            eQuery = _eQuery;
            this.initFromEQuery();
        }

        return eQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether it is all right to continue.
    /// </summary>
    /// <returns>
    ///    True if it is all right to continue; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>value</Name>
				<Source><![CDATA[
    public str value(int _fieldId, int _tableId = 1)
    {
        if (this.isQueryMultiLine() && evaluator)
        {
            evaluator.linkToTableId(eQuery.RecId, _tableId);
        }

        return super(_fieldId, _tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static protected LedgerRRGEDatasourceQuery_W construct()
    {
        return new LedgerRRGEDatasourceQuery_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceQuery_W newQuery(LedgerRRGEQueries_W _eQuery, LedgerRRGEDocuments_W _document = null)
    {
        LedgerRRGEDatasourceQuery_W query;

        if (!_eQuery)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_eQuery.Type)
        {
            case LedgerRRGEQueryType_W::Simple:
                query = LedgerRRGEDatasourceQuerySimple_W::construct();
                break;

            case LedgerRRGEQueryType_W::Function:
                query = LedgerRRGEDatasourceQueryFunction_W::construct();
                break;

            case LedgerRRGEQueryType_W::VATDeclarationTA:
                query = LedgerRRGEDatasourceVATDeclaration_W::construct();
                break;

            case LedgerRRGEQueryType_W::Requisites:
                query = LedgerRRGEDatasourceQueryRequisites_W::construct();
                break;
            
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        query.parmDocument(_document);
        query.parmEQuery(_eQuery);

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>