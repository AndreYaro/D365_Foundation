<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationHeaderFormView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationHeaderFormView</c> is form view of bank reconciliation header.
/// </summary>
class BankReconciliationHeaderFormView implements BankReconciliationWorksheetFormCaller
{
    #BankElectronicReconciliation
    private const str UnreconcileButton = 'Unreconcile';
    private const str ReconcileInBatch = 'ReconcileInBatch';
    private const str BatchReconciliationProgress = 'BatchReconciliationProgress';
    private const str BankAutomationReconciliationWorksheet = 'BankAutomationReconciliationWorksheet';

    FormRun reconciliationFormRun;

    // Data sources
    FormDataSource dsReconciliation;

    // View model
    BankReconciliationHeaderViewModel reconciliationViewModel;

    // Controls
    FormComboBoxControl allOpenReconciledFieldControl;
    FormStringControl bankAccountIdFieldControl;
    FormCheckBoxControl showUserCreatedOnlyControl;
    FormCheckBoxControl markInUseBlockControl;
    FormCheckBoxControl systemBlockedControl;
    FormStringControl batchReconciliationProgressControl;
    FormFunctionButtonControl journalLinesControl;
    private FormFunctionButtonControl bankAutomationReconciliationWorksheetControl;
    FormFunctionButtonControl reconcileControl;
    FormFunctionButtonControl reconcileInBatchControl;
    FormFunctionButtonControl unreconcileControl;
    FormFunctionButtonControl printControl;
    FormFunctionButtonControl printGERControl;
    FormWindowControl blockImageControl;

    // Query range
    QueryBuildRange criteriaReconciled;
    QueryBuildRange criteriaBankAccountId;
    QueryBuildRange criteriaShowUserCreatedOnly;

    private JournalTableData journalTableData;
    private JournalTableMap journalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform actions after reconciliation active.
    /// </summary>
    /// <param name="_header">
    /// The bank reconciliation header.
    /// </param>
    public void activeReconciliationPost(BankReconciliationHeader _header)
    {
        reconciliationViewModel.dsReconciliationActivePost(_header);
        this.enableControlsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform actions after creating <c>BankReconciliationHeader</c> record.
    /// </summary>
    public void createReconciliationPost()
    {
        BankReconciliationHeader bankReconciliationHeaderLocal = dsReconciliation.cursor();

        if (bankReconciliationHeaderLocal.AccountId)
        {
            // Mark the record as dirty
            dsReconciliation.object(fieldnum(BankReconciliationHeader, AccountId)).modified();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReconciliationPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform actions before creating <c>BankReconciliationHeader</c> record.
    /// </summary>
    /// <returns>
    /// Whether the creating is enabled.
    /// </returns>
    public boolean createReconciliationPre()
    {
        boolean isCreateEnabled = allOpenReconciledFieldControl.selection() != BankReconciliationHeaderStatus::Reconciled;

        if (isCreateEnabled)
        {
            reconciliationViewModel.dsReconciliationCreatePre();
        }

        return isCreateEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Perfrom actions after deleting <c>BankReconciliationHeader</c> record.
    /// </summary>
    public void deleteReconciliationPost()
    {
        reconciliationViewModel.dsReconciliationDeletePost();

        this.enableControlsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>designSelectionBankAccountIdField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles event when bank account Id is changed.
    /// </summary>
    public void designSelectionBankAccountIdField()
    {
        reconciliationViewModel.dsReconciliationExecuteQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>designSelectionChangeAllOpenReconciled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles event when show all/open/reconciled control is changed.
    /// </summary>
    public void designSelectionChangeAllOpenReconciled()
    {
        reconciliationViewModel.dsReconciliationExecuteQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>designSelectionChangeShowUserCreateOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles event when show user created only control is changed.
    /// </summary>
    public void designSelectionChangeShowUserCreateOnly()
    {
        reconciliationViewModel.dsReconciliationExecuteQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInUseUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the user using the reconciliation header.
    /// </summary>
    /// <param name="_reconciliation">
    /// The reconciliation header.
    /// </param>
    /// <returns>
    /// The using user id.
    /// </returns>
    public JournalBlockInUseUserId displayInUseUserId(BankReconciliationHeader _reconciliation)
    {
        return reconciliationViewModel.dsReconciliationMethodInUseUserId(_reconciliation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControlsActive</Name>
				<Source><![CDATA[
    private void enableControlsActive()
    {
        BankReconciliationHeader header = dsReconciliation.cursor();

        boolean isHeaderReconciled = header.IsReconciled();
        boolean isHeaderBeingReconciledInBatch = header.ReconcileBatchStatus == BankReconciliationHeaderRunInBatchStatus::Running;
        boolean isHeaderBlocked = header.isHeaderBlocked();
        boolean isHeaderKeyFieldFilled = header.AccountId && header.CutOffDate;
        boolean isHeaderLockedInWorkflow = header.isLockedInWorkflow();
        boolean isHeaderInReviewInWorkflow = header.BankReconciliationApprovalWFStatus == BankReconciliationApprovalWFStatus::InReview;
        boolean isHeaderPendingApproval = header.isPendingWorkflowApproval();
        boolean isHeaderEditable = !isHeaderReconciled && !isHeaderBlocked && !isHeaderLockedInWorkflow && !isHeaderBeingReconciledInBatch;

        // Control data source
        dsReconciliation.object(fieldNum(BankReconciliationHeader, CutoffDate)).allowEdit(isHeaderEditable);
        dsReconciliation.object(fieldNum(BankReconciliationHeader, Description)).allowEdit(isHeaderEditable);
        dsReconciliation.allowDelete(!isHeaderReconciled && !isHeaderBlocked && !isHeaderInReviewInWorkflow && !isHeaderBeingReconciledInBatch);

        // Control buttons
        journalLinesControl.enabled(!isHeaderBlocked && isHeaderKeyFieldFilled);
        bankAutomationReconciliationWorksheetControl.enabled(!isHeaderBlocked && isHeaderKeyFieldFilled);
        reconcileControl.enabled(!isHeaderReconciled && !isHeaderBlocked && isHeaderKeyFieldFilled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
        reconcileInBatchControl.enabled(!isHeaderReconciled && !isHeaderBlocked && isHeaderKeyFieldFilled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
        unreconcileControl.enabled(isHeaderReconciled && !isHeaderBlocked && isHeaderKeyFieldFilled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
        printControl.enabled(!isHeaderBlocked && isHeaderKeyFieldFilled);
        printGERControl.enabled(!isHeaderBlocked && isHeaderKeyFieldFilled);

        markInUseBlockControl.allowEdit(header.SessionId);
        systemBlockedControl.allowEdit(header.SystemBlocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Perform controling after executing data source query.
    /// </summary>
    public void executeQueryReconciliationPost()
    {
        this.enableControlsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryReconciliationPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes data source query.
    /// </summary>
    public void executeQueryReconciliationPre()
    {
        this.queryAddRange();

        criteriaReconciled.value(this.valueAllOpenReconciled());
        criteriaBankAccountId.value(BankAccountIdFieldControl.valueStr());
        criteriaShowUserCreatedOnly.value(ShowUserCreatedOnlyControl.checked() ? queryValue(curuserid()) : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedAccountIdPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform actions after account id field modified.
    /// </summary>
    public void fieldModifiedAccountIdPost()
    {
        this.enableControlsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Called before form is closed.
    /// </summary>
    public void formClosePre()
    {
        reconciliationViewModel.formClosePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after form is closed.
    /// </summary>
    internal void formClosePost()
    {
        FormRun callerForm = this.parmReconciliationFormRun().args().caller();
        if (callerForm)
        {
            switch (callerForm.name())
            {
                case formStr(BankAutomationStatementForm):
                    BankAutomationStatementFormView automationStatementFormView = callerForm.getFormView();
                    automationStatementFormView.refreshBook(true);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles event after given form is initialized.
    /// </summary>
    /// <param name = "_formRun">
    ///     The form run object.
    /// </param>
    public void formInitPost(FormRun _formRun)
    {
        Debug::assert(_formRun != null);
        Debug::assert(_formRun.name() == formStr(BankReconciliationHeader));

        this.parmReconciliationFormRun(_formRun);
        this.init();
        this.enableControlsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes an instance of the <c>BankReconciliationHeaderFormView</c> class.
    /// </summary>
    protected void init()
    {
        // Initialize view model
        this.initReconciliationViewModel();

        // Initialize controls
        this.initControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the form view controls.
    /// </summary>
    private void initControls()
    {
        allOpenReconciledFieldControl = reconciliationFormRun.design().controlName(#ControlNameAllOpenReconciledField);
        bankAccountIdFieldControl = reconciliationFormRun.design().controlName(#BankAccountIdField);
        showUserCreatedOnlyControl = reconciliationFormRun.design().controlName(#ShowUserCreatedOnly);
        markInUseBlockControl = reconciliationFormRun.design().controlName(#MarkInUseBlock);
        systemBlockedControl = reconciliationFormRun.design().controlName(#SystemBlocked);
        batchReconciliationProgressControl = reconciliationFormRun.design().controlName(BatchReconciliationProgress);
        journalLinesControl = reconciliationFormRun.design().controlName(#JournalLines);
        bankAutomationReconciliationWorksheetControl = reconciliationFormRun.design().controlName(BankAutomationReconciliationWorksheet);
        reconcileControl = reconciliationFormRun.design().controlName(#Reconcile);
        unreconcileControl = reconciliationFormRun.design().controlName(UnreconcileButton);
        reconcileInBatchControl = reconciliationFormRun.design().controlName(ReconcileInBatch);
        printControl = reconciliationFormRun.design().controlName(#Print);
        printGERControl = reconciliationFormRun.design().controlName(formControlStr(BankReconciliationHeader, PrintReportGERVersion));
        blockImageControl = reconciliationFormRun.design().controlName(#BlockImage);

        boolean isBankModernReconciliationFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance());
        journalLinesControl.visible(!isBankModernReconciliationFeatureEnabled);
        bankAutomationReconciliationWorksheetControl.visible(isBankModernReconciliationFeatureEnabled);

        boolean printGERReportEnabled = FeatureStateProvider::isFeatureEnabled(BankReconciliationGERReportFlight::instance());
        printControl.visible(!isBankModernReconciliationFeatureEnabled || !printGERReportEnabled);
        printGERControl.visible(isBankModernReconciliationFeatureEnabled && printGERReportEnabled);

        allOpenReconciledFieldControl.selection(BankReconciliationHeaderStatus::Open);

        if (reconciliationFormRun.args()
            && reconciliationFormRun.args().lookupRecord().TableId == tableNum(BankReconciliationHeader))
        {
            BankReconciliationHeader lastReconciledJournal = reconciliationFormRun.args().lookupRecord();

            if (lastReconciledJournal.IsReconciled == NoYes::Yes)
            {
                allOpenReconciledFieldControl.selection(BankReconciliationHeaderStatus::Reconciled);
            }
        }

        if (reconciliationFormRun.args()
            && reconciliationFormRun.args().record().TableId == tableNum(BankAccountTable))
        {
            bankAccountIdFieldControl.visible(NoYes::No);
        }

        blockImageControl.imageList(reconciliationViewModel.getImageListAppl().imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles event after data srouce of given buffer is initailized.
    /// </summary>
    /// <param name="_header">
    ///     the <c>BankReconciliationHeader</c> buffer.
    /// </param>
    public void initReconciliationPost(BankReconciliationHeader _header)
    {
        this.initJournalTableData(_header);

        if (!dsReconciliation)
        {
            dsReconciliation = FormDataUtil::getFormDataSource(_header);
        }

        this.queryAddRange();
        dsReconciliation.queryBuildDataSource().addSortField(fieldNum(BankReconciliationHeader, CutOffDate), SortOrder::Descending);
        dsReconciliation.queryBuildDataSource().addSortField(fieldNum(BankReconciliationHeader, RecId), SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal table data to maintain the block.
    /// </summary>
    /// <param name = "_journalTable">The journal table map. </param>
    [Hookable(false)]
    public void initJournalTableData(JournalTableMap _journalTable)
    {
        journalTable = _journalTable;
        journalTableData = JournalTableData::newTable(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReconciliationViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the bank reconciliation view model.
    /// </summary>
    protected void initReconciliationViewModel()
    {
        reconciliationViewModel = BankReconciliationHeaderViewModel::newFromReconciliationView(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values of <c>BankReconciliationHeader</c>.
    /// </summary>
    /// <param name="_reconciliation">
    ///     Given <c>BankReconciliationHeader</c> buffer.
    /// </param>
    public void initValueReconciliationPost(BankReconciliationHeader _reconciliation)
    {
        reconciliationViewModel.dsReconciliationInitValuePost(_reconciliation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inUseBlockReconciliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the in use flag.
    /// </summary>
    /// <param name="_set">
    /// Whether to change the flag.
    /// </param>
    /// <param name="_journalTable">
    /// The journal table map.
    /// </param>
    /// <param name="_value">
    /// The flag value.
    /// </param>
    /// <returns>
    /// The flag value after setting.
    /// </returns>
    public JournalMarkInUseBlock inUseBlockReconciliation(boolean _set, JournalTableMap _journalTable, JournalMarkInUseBlock _value)
    {
        return reconciliationViewModel.dsReconciliationMethodInUseBlock(_set, _journalTable, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveReconciliationPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Links active <c>BankReconciliationHeader</c> record.
    /// </summary>
    public void linkActiveReconciliationPre()
    {
        reconciliationViewModel.dsReconciliationLinkActivePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockImageReconciliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets lock image.
    /// </summary>
    /// <param name="_reconciliation">
    /// The reconciliation header.
    /// </param>
    /// <returns>
    /// The lock image id.
    /// </returns>
    public Integer lockImageReconciliation(BankReconciliationHeader _reconciliation)
    {
        return reconciliationViewModel.dsReconciliationMethodLockImage(_reconciliation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSReconciliation</Name>
				<Source><![CDATA[
    public FormDataSource parmDSReconciliation(FormDataSource _dsReconciliation = dsReconciliation)
    {
        dsReconciliation = _dsReconciliation;

        return dsReconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconciliationFormRun</Name>
				<Source><![CDATA[
    public FormRun parmReconciliationFormRun(FormRun _reconciliationFormRun = reconciliationFormRun)
    {
        reconciliationFormRun = _reconciliationFormRun;

        return reconciliationFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data source ranges.
    /// </summary>
    private void queryAddRange()
    {
        QueryBuildDataSource qbds = dsReconciliation.query().dataSourceTable(tableNum(BankReconciliationHeader));
        criteriaReconciled = qbds.findRange(fieldNum(BankReconciliationHeader, IsReconciled));
        criteriaReconciled = criteriaReconciled ? criteriaReconciled : qbds.addRange(fieldNum(BankReconciliationHeader, IsReconciled));

        criteriaBankAccountId = qbds.findRange(fieldNum(BankReconciliationHeader, AccountId));
        criteriaBankAccountId = criteriaBankAccountId ? criteriaBankAccountId : qbds.addRange(fieldNum(BankReconciliationHeader, AccountId));

        criteriaShowUserCreatedOnly = qbds.findRange(fieldNum(BankReconciliationHeader, CreatedBy));
        criteriaShowUserCreatedOnly = criteriaShowUserCreatedOnly ? criteriaShowUserCreatedOnly : qbds.addRange(fieldNum(BankReconciliationHeader, CreatedBy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reReadReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions after reread reconciliation buffer.
    /// </summary>
    public void reReadReconciliationPost()
    {
        this.enableControlsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes <c>BankReconciliationHeader</c> record.
    /// </summary>
    /// <param name="_ret">
    ///     Indicates whether <c>BankReconciliationHeader</c> record to be validated.
    /// </param>
    /// <returns>
    ///     Returns true if validation is passed. Otherwise, returns false.
    /// </returns>
    public boolean validateWriteReconciliationPost(boolean _ret)
    {
        return reconciliationViewModel.dsReconciliationValidateWritePost(_ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueAllOpenReconciled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the value of show all/open/reconciled control.
    /// </summary>
    /// <returns>
    ///     The value of show all/open/reconciled control. The value is used as range value.
    /// </returns>
    private str valueAllOpenReconciled()
    {
        str ret;

        switch (AllOpenReconciledFieldControl.selection())
        {
            case BankReconciliationHeaderStatus::All:
                ret = SysQuery::valueUnlimited();
                break;

            case BankReconciliationHeaderStatus::Open:
                ret = enum2Value(NoYes::No);
                break;

            case BankReconciliationHeaderStatus::Reconciled:
                ret = enum2Value(NoYes::Yes);
                break;

            default:
                ret = SysQuery::valueUnlimited();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeReconciliationPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls after writing the <c>BankReconciliationHeader</c> record.
    /// </summary>
    public void writeReconciliationPost()
    {
        reconciliationViewModel.dsReconciliationWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>BankReconciliationHeaderFormView</c> class.
    /// </summary>
    /// <returns>
    ///     An instance of <c>BankReconciliationHeaderFormView</c> class.
    /// </returns>
    public static BankReconciliationHeaderFormView construct()
    {
        return new BankReconciliationHeaderFormView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTableData</Name>
				<Source><![CDATA[
    public JournalTableData parmJournalTableData(JournalTableData _data = journalTableData)
    {
        journalTableData = _data;

        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCacheCurrent</Name>
				<Source><![CDATA[
    public void updateFormCacheCurrent(JournalTableMap _journalTable, boolean _doRefresh = false)
    {
        journalTable.data(_journalTable);

        if (dsReconciliation)
        {
            dsReconciliation.setCurrent();

            if (_doRefresh)
            {
                dsReconciliation.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMBRFeatureWizardNotExecutedAndAddWarning</Name>
				<Source><![CDATA[
    internal boolean isMBRFeatureWizardNotExecutedAndAddWarning()
    {
        boolean isBlocking = false;
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            if (!BankModernReconciliationUpgradeWizardTrigger::checkExecutionStatusAndAddWarning())
            {
                isBlocking = true;
            }
        }
        return isBlocking;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>