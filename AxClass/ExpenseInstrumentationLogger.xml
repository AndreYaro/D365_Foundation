<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExpenseInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ExpenseInstrumentationLogger</c> serves as the base logger class for logging
/// events in Expense management.
/// </summary>
/// <Remarks>
/// To create a logger, use <c>createLogger</c> method and pass the name of the class from
/// where the logger is defined.
/// </Remarks>
public class ExpenseInstrumentationLogger extends SysInstrumentationLoggerBase
{
    public const str InstrumentationNamespace = 'ExpenseFinOps';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>namespace</Name>
				<Source><![CDATA[
    public final str namespace()
    {
        return InstrumentationNamespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogger</Name>
				<Source><![CDATA[
    public static ExpenseInstrumentationLogger createLogger(str _name)
    {
        return new ExpenseInstrumentationLogger(InstrumentationNamespace + '.' + _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>properties</Name>
				<Source><![CDATA[
    public ExpenseInstrumentationLoggerProperties properties()
    {
        return new ExpenseInstrumentationLoggerProperties();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    public void logInformation(str _message)
    {
        logger.logInformation(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarning</Name>
				<Source><![CDATA[
    public void logWarning(str _message)
    {
        logger.logWarning(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    public void logError(str _message)
    {
        logger.logError(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCritical</Name>
				<Source><![CDATA[
    public void logCritical(str _message)
    {
        logger.logCritical(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logErrorWithCallStack</Name>
				<Source><![CDATA[
    public void logErrorWithCallStack(str _message)
    {
        logger.logError(strFmt("Information: %1; Call stack: %2", _message, this.getCallStack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallStack</Name>
				<Source><![CDATA[
    private str getCallStack()
    {
        container callStack;

        callStack = xSession::xppCallStack();

        str path;

        for(int i=1; i<=conlen(callStack); i++)
        {
            path += strFmt("%1\n", conpeek(callStack, i));
        }

        return path;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>