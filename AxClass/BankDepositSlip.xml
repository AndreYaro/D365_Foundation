<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDepositSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
Microsoft.Dynamics.AX.Platform.Extensibility.ExportInterfaceAttribute,
System.ComponentModel.Composition.ExportMetadataAttribute('BankCreateDepositSlip', 'BankDepositSlip'),
System.ComponentModel.Composition.ExportAttribute('Dynamics.AX.Application.BankDepositSlip')
]
public class BankDepositSlip extends RunBase
{
    TransDate           postingDate;
    LedgerJournalId     ledgerJournalId;

    // variables that do not need to be packed/unpacked
    NumberSeq           numberSeq;
    DialogField         dialogPostingDate;
    AmountCur           totalCur;
    AmountMST           totalMst;
    AmountMSTSecondary  totalReportingCurrency;
    AmountCur           totalBankTransAmountCur;
    BankDepositNum      depositNum;

    private boolean hasDepositSlip;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        postingDate,
        ledgerJournalId
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBankDepositDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates bank deposit document.
    /// </summary>
    /// <param name="_accountId">
    /// The bank account id.
    /// </param>
    /// <param name="_depositNum">
    /// The deposit number.
    /// </param>
    /// <returns>
    /// The bank deposit table.
    /// </returns>
    protected BankDepositDocument createBankDepositDocument(
        CompanyBankAccountId    _accountId,
        BankDepositNum          _depositNum)
    {
        BankDepositDocument bankDepositDocument;

        bankDepositDocument.AccountId =  _accountId;
        bankDepositDocument.DepositNum = _depositNum;

        bankDepositDocument.insert();

        return bankDepositDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depositNum</Name>
				<Source><![CDATA[
    BankDepositNum depositNum()
    {
        return depositNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialog = super();

        dialogPostingDate = dialog.addFieldValue(extendedtypestr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS7402", "@SYS53502");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        postingDate = dialogPostingDate.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>BankDepositSlip.unpack</c> method returns false, the
    ///    <c>BankDepositSlip.initParmDefault</c> method will be called.
    /// </remarks>
    public void getLast()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstance</Name>
				<Source><![CDATA[
    protected void initInstance(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalId = _ledgerJournalTrans.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferAmountsFromBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Transfers amounts from bank account transactions.
    /// </summary>
    /// <param name = "_accountID">
    ///     The bank account ID.
    /// </param>
    /// <param name = "_ledgerJournalTrans">
    ///     The ledger journal transaction table buffer.
    /// </param>
    [Wrappable]
    protected final void transferAmountsFromBankAccountTrans(CompanyBankAccountId _accountID, LedgerJournalTrans _ledgerJournalTrans)
    {
        BankAccountTrans    bankAccountTrans;

        select sum(AmountCur), sum(AmountMST), sum(AmountReportingCurrency), sum(BankTransAmountCur) from bankAccountTrans
            where bankAccountTrans.AccountId  == _accountID
               && bankAccountTrans.Voucher    == _ledgerJournalTrans.Voucher
               && bankAccountTrans.TransDate  == _ledgerJournalTrans.TransDate;

        totalCur                += bankAccountTrans.AmountCur;
        totalMst                += bankAccountTrans.AmountMST;
        totalReportingCurrency  += bankAccountTrans.AmountReportingCurrency;
        totalBankTransAmountCur += bankAccountTrans.BankTransAmountCur;

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.updateBankDepositSlip_IN(_accountID, _ledgerJournalTrans, bankAccountTrans.AmountCur, bankAccountTrans.AmountMST);
        }
        // </GIN>

        delete_from bankAccountTrans
            where bankAccountTrans.AccountId  == _accountID
               && bankAccountTrans.Voucher    == _ledgerJournalTrans.Voucher
               && bankAccountTrans.TransDate  == _ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void modifyLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransDeposit;

        select forupdate ledgerJournalTransDeposit
            where ledgerJournalTransDeposit.RecId == _ledgerJournalTrans.RecId;

        ledgerJournalTransDeposit.BankDepositNum     = depositNum;
        ledgerJournalTransDeposit.BankDepositVoucher = NoYes::Yes;
        ledgerJournalTransDeposit.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDepositNum</Name>
				<Source><![CDATA[
    private BankDepositNum newDepositNum()
    {
        numberSeq = NumberSeq::newGetNum(BankParameters::numRefBankDepositNum(), true);

        if (! numberSeq)
        {
            throw error(strfmt("@SYS26165","@SYS23659"));
        }
        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutDepositSlip</Name>
				<Source><![CDATA[
    protected void printoutDepositSlip(BankAccountTrans _bankAccountTrans)
    {
        Args    args = new Args();

        if(_bankAccountTrans)
        {
            args.parmObject(this);
            args.record(_bankAccountTrans);
            new MenuFunction(menuitemoutputstr(BankDepositslip), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankDepositSlip</Name>
				<Source><![CDATA[
    protected void processBankDepositSlip(CompanyBankAccountId _accountId, CurrencyCode _currencyCode)
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        BankAccountTrans bankAccountTrans;
        BankDeposit bankDeposit;
        boolean depositSlipCreated;
        BankTransactionType bankTransType;
        BankAccountTable bankAccountTable = BankAccountTable::find(_accountId);
        boolean hasMoreThanOneDeposit;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        BankDepositDocument bankDepositDocument;
        NoYes isCancelPayment;

        try
        {
            ttsbegin;

            depositNum = this.newDepositNum();
            totalMst = 0;
            totalReportingCurrency = 0;
            totalCur = 0;
            totalBankTransAmountCur = 0;

            FieldId bankAccountDimensionKeyFieldId  = DimensionAttributeValueCombination::getDimensionKeyFieldId(DimensionAttribute::getAttributeByHierarchyType(DimensionHierarchyType::BankAccount, false).Name);

            while select ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalId
                    && ledgerJournalTrans.CurrencyCode == _currencyCode
                    && (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
                        || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
                exists join dimAttrValueCombo 
                    where ((ledgerJournalTrans.LedgerDimension == dimAttrValueCombo.RecId && ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
                           || (ledgerJournalTrans.OffsetLedgerDimension == dimAttrValueCombo.RecId && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank))
                        && dimAttrValueCombo.(bankAccountDimensionKeyFieldId) == bankAccountTable.RecId
            {
                isCancelPayment = (ledgerJournalTrans.CustTransId != 0 ? 
                    CustTrans::find(ledgerJournalTrans.CustTransId).CancelledPayment :
                    NoYes::No);
                
                if (ledgerJournalTrans.BankDepositVoucher && !isCancelPayment)
                {
                    if (!ledgerJournalTrans.BankDepositNum)
                    {
                        if (!bankDepositDocument)
                        {
                            bankDepositDocument = this.createBankDepositDocument(_accountId, depositNum);
                        }

                        bankDeposit.createTransFromJournal(ledgerJournalTrans, depositNum, _accountId);

                        this.setLinkToBankDepositDocument(bankDeposit, bankDepositDocument);

                        this.modifyLedgerJournalTrans(ledgerJournalTrans);

                        bankAccountTrans.TransDate = postingDate;
                        bankAccountTrans.Voucher = ledgerJournalTrans.Voucher;

                        bankAccountTrans.PaymReference = (hasMoreThanOneDeposit ? '' : ledgerJournalTrans.PaymReference);

                        bankAccountTrans.PaymentMode = ledgerJournalTrans.PaymMode;

                        this.transferAmountsFromBankAccountTrans(_accountId, ledgerJournalTrans);

                        if (ledgerJournalTrans.BankTransType)
                        {
                            bankTransType = ledgerJournalTrans.BankTransType;
                        }

                        depositSlipCreated = true;
                    }
                    else
                    {
                        select firstonly bankAccountTrans
                            where bankAccountTrans.AccountId == _accountId
                                && bankAccountTrans.Voucher == ledgerJournalTrans.Voucher;
                    }
                }

                hasMoreThanOneDeposit = true;
            }

            if (depositSlipCreated)
            {
                bankAccountTrans.AccountId = _accountId;
                bankAccountTrans.BankTransCurrencyCode = _currencyCode;
                bankAccountTrans.CurrencyCode = bankAccountTable.CurrencyCode;
                bankAccountTrans.BankTransAmountCur = totalBankTransAmountCur;
                bankAccountTrans.AmountCur = totalCur;
                bankAccountTrans.AmountMST = totalMst;
                bankAccountTrans.AmountReportingCurrency = totalReportingCurrency;
                bankAccountTrans.DepositNum = depositNum;
                bankAccountTrans.BankTransType = bankTransType;
                bankAccountTrans.Txt = strfmt("@SYS53501",depositNum);
                bankAccountTrans.DefaultDimension = bankAccountTable.DefaultDimension;
                bankAccountTrans.SourceTableId = bankDepositDocument.TableId;
                bankAccountTrans.SourceRecId = bankDepositDocument.RecId;
                bankAccountTrans.insert();

                this.setBankDepositDocumentDetails(bankDepositDocument, bankAccountTrans);
            }

            ttscommit;

            if (depositSlipCreated)
            {
                numberSeq.used();
                this.printoutDepositSlip(bankAccountTrans);
            }
            else
            {
                numberSeq.abort();
                this.printoutDepositSlip(bankAccountTrans);
            }

            hasDepositSlip = bankAccountTrans.RecId != 0;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        LedgerJournalTrans                  bankJournal;
        DimensionAttributeValueCombination  dimAttrValueCombo;

        if (!this.validate())
        {
            throw error("@SYS21628");
        }

        while select DisplayValue from dimAttrValueCombo
            group by DisplayValue
        join CurrencyCode, LedgerDimension from bankJournal
            group by CurrencyCode, AccountType, LedgerDimension
        where   bankJournal.JournalNum      == ledgerJournalId              &&
                bankJournal.AccountType     == LedgerJournalACType::Bank    &&
                bankJournal.LedgerDimension == dimAttrValueCombo.RecId      &&
                bankJournal.BankDepositVoucher
        {
            this.processBankDepositSlip(bankJournal.parmAccount(), bankJournal.CurrencyCode);
        }

        while select DisplayValue from dimAttrValueCombo
            group by DisplayValue
        join CurrencyCode, OffsetLedgerDimension, OffsetCompany, OffsetAccountType from bankJournal
            group by CurrencyCode, OffsetLedgerDimension, OffsetCompany, OffsetAccountType
        where   bankJournal.JournalNum              == ledgerJournalId              &&
                bankJournal.OffsetAccountType       == LedgerJournalACType::Bank    &&
                bankJournal.OffsetLedgerDimension   == dimAttrValueCombo.RecId      &&
                bankJournal.BankDepositVoucher
        {
            this.processBankDepositSlip(bankJournal.parmOffsetAccount(), bankJournal.CurrencyCode);
        }

        if (!hasDepositSlip)
        {
            info("@CashManagement:NoBankDepositSlipRecordsFound");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankDepositDocumentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets bank deposit table details.
    /// </summary>
    /// <param name="_bankDepositDocument">
    /// The bank deposit document.
    /// </param>
    /// <param name="_bankAccountTrans">
    /// The bank account transaction.
    /// </param>
    protected void setBankDepositDocumentDetails(
        BankDepositDocument _bankDepositDocument,
        BankAccountTrans    _bankAccountTrans)
    {
        _bankDepositDocument.selectForUpdate(true);

        _bankDepositDocument.BankCurrency = _bankAccountTrans.CurrencyCode;
        _bankDepositDocument.BankCurrencyAmount = _bankAccountTrans.AmountCur;
        _bankDepositDocument.TransactionCurrency = _bankAccountTrans.BankTransCurrencyCode;
        _bankDepositDocument.TransactionCurrencyAmount = _bankAccountTrans.BankTransAmountCur;
        _bankDepositDocument.AccountingCurrencyAmount = _bankAccountTrans.AmountMST;
        _bankDepositDocument.ReportingCurrencyAmount = _bankAccountTrans.AmountReportingCurrency;
        _bankDepositDocument.TransDate = _bankAccountTrans.TransDate;
        _bankDepositDocument.PaymReference = _bankAccountTrans.PaymReference;
        _bankDepositDocument.Txt = _bankAccountTrans.Txt;
        _bankDepositDocument.BankTransType = _bankAccountTrans.BankTransType;
        _bankDepositDocument.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinkToBankDepositDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets links of  detailed deposit slip to deposit slip table.
    /// </summary>
    /// <param name="_bankDeposit">
    /// The detailed deposit slip.
    /// </param>
    /// <param name="_bankDepositDocument">
    /// The bank deposit document.
    /// </param>
    protected void setLinkToBankDepositDocument(
        BankDeposit             _bankDeposit,
        BankDepositDocument     _bankDepositDocument)
    {
        _bankDeposit.selectForUpdate(true);
        _bankDeposit.BankDepositDocument = _bankDepositDocument.RecId;
        _bankDeposit.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankDepositSlip_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the table by finding the specific record.
    /// </summary>
    /// <param name="_accountID">
    /// The field is used to find the record.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The table buffer used to find the record.
    /// </param>
    /// <param name="_amountCur">
    /// The field is used to find the record.
    /// </param>
    /// <param name="_amountMST">
    /// The field is used to find the record.
    /// </param>
    private void updateBankDepositSlip_IN(CompanyBankAccountId  _accountID,
                                          LedgerJournalTrans    _ledgerJournalTrans,
                                          AmountCur             _amountCur,
                                          AmountMST             _amountMST)
    {
        BankDeposit bankDepositLoc;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt;

        ledgerJournalTransTaxExt = _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

        if (ledgerJournalTransTaxExt.tdsGroup || ledgerJournalTransTaxExt.tcsGroup)
        {
            ttsbegin;
            select forupdate bankDepositLoc
                where bankDepositLoc.AccountId  == _accountID
                   && bankDepositLoc.DepositNum == depositNum
                   && bankDepositLoc.Voucher    == _ledgerJournalTrans.Voucher
                   && bankDepositLoc.TransDate  == _ledgerJournalTrans.TransDate;
            if (bankDepositLoc)
            {
                bankDepositLoc.AmountCur          = _amountCur;
                bankDepositLoc.AmountMST          = _amountMST;
                bankDepositLoc.BankTransAmountCur = _amountCur;
                bankDepositLoc.doUpdate();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!LedgerJournalTable::find(ledgerJournalId).Posted)
        {
            ret = checkFailed("@SYS26395");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS23659";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankDepositSlip instance;

        if (args && args.record())
        {
            instance = BankDepositSlip::construct(args.record(), args.parm());

            if (instance.prompt())
            {
                instance.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constucts the bank deposit slip instance.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The table buffer used to find the deposit slip records.
    /// </param>
    /// <param name="_variationName">
    /// Defines the bank deposit slip pluggable variation name.
    /// </param>
    /// <returns>
    /// A <c>BankDepositSlip</c> instance.
    /// </returns>
    protected static BankDepositSlip construct(LedgerJournalTrans _ledgerJournalTrans, str _variationName = 'BankDepositSlip')
    {
        BankDepositSlip instance;

        SysPluginMetadataCollection meta = new SysPluginMetadataCollection();
        meta.SetManagedValue('BankCreateDepositSlip', _variationName);
        instance = SysPluginFactory::Instance('Dynamics.AX.Application', classstr(BankDepositSlip), meta);

        Debug::assert(instance != null);

        instance.initInstance(_ledgerJournalTrans);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>