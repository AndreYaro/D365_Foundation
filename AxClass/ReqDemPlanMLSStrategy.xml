<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanMLSStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.DemandPlanning.Azure;
using Microsoft.Dynamics.AX.DemandPlanning.Azure.Data;

/// <summary>
///     The <c>ReqDemPlanMLSStrategy</c> class is responsible for creating the forecast using Machine Learning Service.
/// </summary>
[ReqDemPlanForecastStrategyAttribute]
internal class ReqDemPlanMLSStrategy extends ReqDemPlanAzureMlStrategy
{
    private const str DeploymentInfoUrl = 'https://go.microsoft.com/fwlink/?linkid=2165514';
    private const ReqDemPlanForecastingStrategy ForecastingStrategyMLS = ReqDemPlanForecastingStrategy::MachineLearningService;
    private const int DefaultPartitionsNumber = 1000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getForecastingStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns binded forecasting strategy enum value.
    /// </summary>
    /// <returns>
    ///     The strategy enum value.
    /// </returns>
    [Wrappable(false)]
    protected ReqDemPlanForecastingStrategy getForecastingStrategy()
    {
        return ReqDemPlanMLSStrategy::ForecastingStrategyMLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanForecastingStrategyRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if current forecasting strategy is enabled and can be run.
    /// </summary>
    /// <returns>
    ///     true if it is enabled; otherwise, false.
    /// </returns>
    [Wrappable(false)]
    protected boolean checkCanForecastingStrategyRun()
    {
        if (ReqDemPlanAzureMachineLearningServiceFeature::isEnabled())
        {
            return true;
        }
        else
        {
            return checkFailed(strFmt("@DMP:MLSUsedLogicWithDisabledFeature", 
                                      SysLabel::labelId2String(ReqDemPlanAzureMachineLearningServiceFeature::instance().label())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAzureMachineLearningServiceUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if Azure Machine Learning service is used by forecast generation.
    /// </summary>
    /// <returns>
    ///     true if Azure Machine Learning service is used by forecast generation; otherwise false.
    /// </returns>
    public static boolean isAzureMachineLearningServiceUsed()
    {
        return ReqDemPlanAzureMlStrategy::isForecastingStrategyUsed(ReqDemPlanMLSStrategy::ForecastingStrategyMLS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAzureMachineLearningServiceSetUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if Azure Machine Learning service parameters are set up.
    /// </summary>
    /// <returns>
    ///     true if Azure Machine Learning service parameters are set up; otherwise, false.
    /// </returns>
    public static boolean isAzureMachineLearningServiceSetUp()
    {
        var globalForecastParameters = ReqDemPlanForecastParameters::find();
        
        return globalForecastParameters.MLSPipelineEndpointUri != '' 
            && globalForecastParameters.MLSTenantId != ''
            && globalForecastParameters.MLSServicePrincipalApplicationId != ''
            && globalForecastParameters.MLSServicePrincipalApplicationSecret != '' 
            && globalForecastParameters.mlsServicePrincipalApplicationSecretDecrypted() != ''
            && globalForecastParameters.MLSStorageAccountName != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMLSServiceDeploymentInstruction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows Machine Learning Service deployment instructions.
    /// </summary>
    public static void showMLSServiceDeploymentInstruction()
    {
        if (!ReqDemPlanAzureMachineLearningServiceFeature::isEnabled())
        {
            return;
        }

        if (ReqDemPlanMLSStrategy::isAzureMachineLearningServiceUsed() && !ReqDemPlanMLSStrategy::isAzureMachineLearningServiceSetUp())
        {
            setPrefix("@DMP:AzureMlDeployMainMessage");
            warning("@DMP:MLSDeploymentInfo");
            info(DeploymentInfoUrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureAzureClientCreated</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void ensureAzureClientCreated()
    {
        if (!azureClient)
        {
            var context = new AzureMLSConnectionContext();

            context.PipelineEndpointUri = globalForecastParameters.MLSPipelineEndpointUri;
            context.ServicePrincipalTenantId = globalForecastParameters.MLSTenantId;
            context.ServicePrincipalApplicationId = globalForecastParameters.MLSServicePrincipalApplicationId;
            context.ServicePrincipalSecret = globalForecastParameters.mlsServicePrincipalApplicationSecretDecrypted();
            context.AzureStorageAccountName = globalForecastParameters.MLSStorageAccountName;
            
            azureClient = new ForecastClient(context);

            this.setAzureClientFlights();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAzureClientFlights</Name>
				<Source><![CDATA[
    private void setAzureClientFlights()
    {
        azureClient.SetFlightStatus(classStr(ReqDemPlanMLSUsePartitionSizeLimitFlight), ReqDemPlanMLSUsePartitionSizeLimitFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>feedHistoricalData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides historical data to the AzureML client library.
    /// </summary>
    /// <param name = "_allocationKeyFilterTable">The allocation key filter table buffer.</param>
    [Wrappable(false)]
    protected void feedHistoricalData(ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable)
    {
        super(_allocationKeyFilterTable);

        if (ReqDemPlanMLSUsePartitionSizeLimitFlight::instance().isEnabled())
        {
            this.setPartitionSizeForAzureClient();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPartitionSizeForAzureClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and passes to Azure client partition size, 
    /// equal to desired number of unique granularity attributes in a single partition.
    /// </summary>
    private void setPartitionSizeForAzureClient()
    {
        int uniqueGranularityAttributesNumber = this.totalUniqueGranularityAttributesInStaging();
        int requestedPartitionsNumber = this.requestedPartitionsNumberForAzureClient();

        int partitionSize = 1;
      
        if (uniqueGranularityAttributesNumber >= requestedPartitionsNumber)
        {
            partitionSize = uniqueGranularityAttributesNumber div requestedPartitionsNumber;
        }

        azureClient.SetPartitionSize(partitionSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalUniqueGranularityAttributesInStaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a total number of unique granularity attributes in staging table for all allocation keys.
    /// </summary>
    /// <returns> Number of attributes.</returns>
    /// <remarks>
    /// The method does not use ReqDemPlanAllocationKeyFilterTmp to filter data out.
    /// ReqDemPlanMiningModelStagingTable data was initially filled using ReqDemPlanAllocationKeyFilterTmp.
    /// 
    /// SELECT COUNT(DISTINCT GranularityAttribute)
    /// FROM ReqDemPlanMiningModelStagingTable
    /// WHERE Partition = curPartitionRecId
    /// </remarks>
    private int totalUniqueGranularityAttributesInStaging()
    {
        const str partitionParam = 'CurrentPartition';

        str stagingTable = this.dbTableName(tableNum(ReqDemPlanMiningModelStagingTable));
        str granularityAttributeField = this.dbFieldName(tableNum(ReqDemPlanMiningModelStagingTable), fieldNum(ReqDemPlanMiningModelStagingTable, GranularityAttribute));
        str partitionField = this.dbFieldName(tableNum(ReqDemPlanMiningModelStagingTable), fieldNum(ReqDemPlanMiningModelStagingTable, Partition));

        str sql = 
            'SELECT ' +
                'COUNT(DISTINCT ' + granularityAttributeField + ')' +
            ' FROM ' + stagingTable +
            ' WHERE ' +
                partitionField + ' = @' + partitionParam;

        int res = 0;

        new SqlStatementExecutePermission(sql).assert();
        Connection connection = new Connection();

        try
        {
            Statement statement = connection.createStatement();
            Map sqlParams = SqlParams::create();
            sqlParams.add(partitionParam, getCurrentPartitionRecId());

            ResultSet sqlres = statement.executeQueryWithParameters(sql, sqlParams);
            CodeAccessPermission::revertAssert();
            sqlres.next();
            res = sqlres.getInt(1);
        }
        finally
        {
            connection.finalize();
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestedPartitionsNumberForAzureClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an approximate number of partitions that should be used by the client.
    /// </summary>
    /// <returns> Number of partitions.</returns>
    /// <remarks> Use max number based on related active features. </remarks>
    private int requestedPartitionsNumberForAzureClient()
    {
        if (ReqDemPlanMLSUse5000PartitionsFlight::instance().isEnabled())
        {
            return 5000;
        }

        if (ReqDemPlanMLSUse500PartitionsFlight::instance().isEnabled())
        {
            return 500;
        }

        return DefaultPartitionsNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanMLSStrategy construct()
    {
        return new ReqDemPlanMLSStrategy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>