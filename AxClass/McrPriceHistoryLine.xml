<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPriceHistoryLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRPriceHistoryLine</c> class represents price history records that can be
///     recorded and displayed.
/// </summary>
/// <remarks>
///     Represents a line for which
///     Price history can be recorded (see/use class MCRPriceHistoryUpdate)
///     Price history can be displayed (see/use class MCRPriceHistoryForm and form MCRPriceHistory)
///     Note that the majority of the functionality is accessors.
/// </remarks>
abstract class McrPriceHistoryLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowPriceHistoryUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether a price history update can proceed.
    /// </summary>
    /// <returns>
    /// true if a price history update is allowed; otherwise, false.
    /// </returns>
    public boolean allowPriceHistoryUpdate()
    {
        return this.isPriceDetailsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowView</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if price history is allowed to be viewed.
    /// </summary>
    /// <returns>
    ///     true if history can be viewed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Used elsewhere to control:
    ///     1) Whether price history menu button is enabled.
    ///     2) Whether price history form displays anything.
    /// </remarks>
    public boolean allowView()
    {
        boolean allowView = true;

        return allowView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMCRRoyaltyVendTableTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the royalty table buffer has been created as temporary.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTableTmp">
    /// The royalty table buffer to check.
    /// </param>
    /// <remarks>
    /// This method is overridden by the child classes to fill the <c>MCRRoyaltyVendTable</c> temporary buffer.
    /// </remarks>
    public void fillMCRRoyaltyVendTableTmp(MCRRoyaltyVendTable  _mcrRoyaltyVendTableTmp)
    {
        if (!_mcrRoyaltyVendTableTmp.isTmp())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPdsRebateTableTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the rebate table buffer has been created as temporary.
    /// </summary>
    /// <param name="_pdsRebateTableTmp">
    /// The rebate table buffer to check.
    /// </param>
    /// <remarks>
    /// This method is overridden by the child classes to fill the <c>PdsRebateTable</c> temporary buffer.
    /// </remarks>
    public void fillPdsRebateTableTmp(PdsRebateTable _pdsRebateTableTmp)
    {
        if (!_pdsRebateTableTmp.isTmp())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendRebateTableTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the vendor rebate table buffer has been created as temporary.
    /// </summary>
    /// <param name="_tamVendRebateTableTmp">
    /// The vendor rebate table buffer to check.
    /// </param>
    public void fillVendRebateTableTmp(TAMVendRebateTable _tamVendRebateTableTmp)
    {
        if (!_tamVendRebateTableTmp.isTmp())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a list of history records for this line.
    /// </summary>
    /// <returns>
    ///     A <c>List</c> containing the <c>MCRPriceHistory</c> records for this line.
    /// </returns>
    public final RecordSortedList findHistory()
    {
        MCRPriceHistory     priceHistory;
        MCRPriceHistoryRef  priceHistoryRef;
        RecordSortedList    recordSortedListHistory;

        recordSortedListHistory = new RecordSortedList(tableNum(MCRPriceHistory));
        recordSortedListHistory.sortOrder(fieldNum(MCRPriceHistory, RecId));

        while select priceHistory
            exists join priceHistoryRef
                where priceHistory.RecId                           == priceHistoryRef.PriceHistoryRecId
                   && priceHistoryRef.mcrOrderLine2PriceHistoryRef == this.parmMCROrderLine2PriceHistoryRef()
        {
            recordSortedListHistory.ins(priceHistory);
        }

        return recordSortedListHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of agreement lines.
    /// </summary>
    /// <returns>
    /// The list of agreement lines.
    /// </returns>
    protected List getAgreementLines()
    {
        return new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpMCRAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>TmpMCRAgreementLine</c>table record.
    /// </summary>
    /// <param name="_tmpMCRAgreementLine">
    ///     The <c>TmpMCRAgreementLine</c>table buffer.
    /// </param>
    public void initTmpMCRAgreementLine(TmpMCRAgreementLine _tmpMCRAgreementLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContinuityBillUpFrontChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets if the line is a child line of a continuity item that is bill up front.
    /// </summary>
    /// <returns>
    ///     true if line is a child line of a continuity item that is bill up front; otherwise false.
    /// </returns>
    abstract public boolean isContinuityBillUpFrontChild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the link is valid.
    /// </summary>
    /// <param name="_agreementLine">
    /// The agreement line to validate.
    /// </param>
    /// <returns>
    /// true if the link is valid; otherwise, false.
    /// </returns>
    protected boolean isLinkValid(AgreementLine _agreementLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMerchandisingEventHistoryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether merchandising events should be included as part of price history.
    /// </summary>
    /// <returns>
    /// true if price history should be created for merchandising events; otherwise, false.
    /// </returns>
    public boolean isMerchandisingEventHistoryEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDetailsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether price details is enabled for the price history line.
    /// </summary>
    /// <returns>
    /// true if price details is enabled; otherwise, false.
    /// </returns>
    abstract public boolean isPriceDetailsEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipToChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if this line is a ship to child
    /// </summary>
    /// <returns>
    ///     true if this is a ship to child; otherwise false.
    /// </returns>
    abstract public boolean isShipToChild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMarginAlert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a <c>MCRMarginAlert</c> object
    /// </summary>
    /// <returns>
    /// A <c>MCRMarginAlert</c> object initialized from the price history line.
    /// </returns>
    abstract public MCRMarginAlert mcrMarginAlert()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRPriceHistoryLine</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    abstract public CustVendAC parmAccountId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountMultilineDiscCode</Name>
				<Source><![CDATA[
    abstract public MultiLnDiscCode parmAccountMultilineDiscCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementId</Name>
				<Source><![CDATA[
    public Num parmAgreementId()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFindLineDisc</Name>
				<Source><![CDATA[
    abstract public boolean parmCanFindLineDisc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFindTAMMerchEventPricing</Name>
				<Source><![CDATA[
    public boolean parmCanFindTAMMerchEventPricing()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    abstract public CurrencyCode parmCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExistPriceHistoryType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a <c>boolean</c> indicating if price history exists for the given <c>MCRPriceHistoryType</c>.
    /// </summary>
    /// <param name="_mcrPriceHistoryType">
    ///     The <c>MCRPriceHistoryType</c> to check for price for.
    /// </param>
    /// <returns>
    ///     true if a type of price history exists for this line; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Developed initially for landed cost but unused, left for possible future use.
    /// </remarks>
    protected boolean parmExistPriceHistoryType(MCRPriceHistoryType _mcrPriceHistoryType)
    {
        MCRPriceHistory     mcrPriceHistory;
        RecordSortedList    recordSortedListHistory;
        boolean             moreRecords;
        boolean             existPriceHistoryType = false;

        recordSortedListHistory = this.findHistory();
        moreRecords = recordSortedListHistory.first(mcrPriceHistory);
        while (moreRecords)
        {
            if (mcrPriceHistory.PriceHistoryType == _mcrPriceHistoryType)
            {
                existPriceHistoryType = true;
                break;
            }
            moreRecords = recordSortedListHistory.next(mcrPriceHistory);
        }
        return existPriceHistoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    abstract public InventDim parmInventDim()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    abstract public InventTransId parmInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    abstract public ItemId parmItemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemLineDiscCode</Name>
				<Source><![CDATA[
    abstract public LineDiscCode parmItemLineDiscCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemMultilineDiscCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the multiline discount code defined for item on the line.
    /// </summary>
    /// <returns>
    ///     The multiline discount code defined for the item.
    /// </returns>
    final public MultiLnDiscCode parmItemMultilineDiscCode()
    {
        InventTableModule inventTableModule;
        select MultiLineDisc from inventTableModule
            where inventTableModule.ItemId     == this.parmItemId()
               && inventTableModule.ModuleType == this.parmModuleType();
        return inventTableModule.MultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscAmount</Name>
				<Source><![CDATA[
    abstract public DiscAmount parmLineDiscAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscCode</Name>
				<Source><![CDATA[
    abstract public LineDiscCode parmLineDiscCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscPct</Name>
				<Source><![CDATA[
    abstract public DiscPct parmLineDiscPct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMultiLn</Name>
				<Source><![CDATA[
    abstract public LineMultiLn parmLineMultiLn()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    abstract public PriceMarkup parmMarkup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingAgreementLine</Name>
				<Source><![CDATA[
    abstract public AgreementLineRecId parmMatchingAgreementLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    abstract public MCROrderLinePriceHistoryReference parmMCROrderLine2PriceHistoryRef()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    abstract public ModuleInventPurchSales parmModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscAmount</Name>
				<Source><![CDATA[
    abstract public DiscAmount parmMultilineDiscAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscPct</Name>
				<Source><![CDATA[
    abstract public DiscPct parmMultilineDiscPct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the line's original order line to price history reference value.
    /// </summary>
    /// <returns>
    /// The original (not the current) order line to price history reference value.
    /// </returns>
    /// <remarks>
    /// This is the value found by calling .orig() on the buffer and therefore will
    /// be 0 for an unsaved line.
    /// </remarks>
    abstract MCROrderLinePriceHistoryReference parmOrigMCROrderLine2PriceHistoryRef()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    abstract public PriceCur parmPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDate</Name>
				<Source><![CDATA[
    abstract PriceDate parmPriceDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    abstract public PriceGroupId parmPriceGroupId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceOverride</Name>
				<Source><![CDATA[
    abstract public NoYes parmPriceOverride()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    abstract public PriceUnit parmPriceUnit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    abstract public PurchId parmPurchId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    abstract public Qty parmQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyMultiline</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity for the multiline.
    /// </summary>
    /// <returns>
    ///     The total quantity of all lines that have matching multiline discount code.
    /// </returns>
    /// <remarks>
    ///     Used as a starting point for potential multiline discount agreements (multiline discount
    ///     agreement may be active that has higher quantity than current line quantity).
    /// </remarks>
    abstract public Qty parmQtyMultiline()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuotationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quotation id.
    /// </summary>
    /// <returns>
    ///     The quotation id of the price history.
    /// </returns>
    abstract public QuotationId parmQuotationId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    abstract protected RecId parmRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the sales order id.
    /// </summary>
    /// <returns>
    ///     The sales order id of the price history.
    /// </returns>
    abstract public SalesId parmSalesId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAgreementRelated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a <c>boolean</c> value indicating if the sales price history line
    ///     shows it is related to agreement.
    /// </summary>
    /// <returns>
    ///     true if is related to agreement; otherwise, false.
    /// </returns>
    public boolean parmShowAgreementRelated()
    {
        return !this.usesRetailPricing() || FeatureStateProvider::isFeatureEnabled(RetailSalesAgreementPriceSupportFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowCustRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>boolean</c> value indicating if the price history line shows values
    /// related to customer rebates.
    /// </summary>
    /// <returns>
    /// true if customer rebates should be be shown; otherwise, false.
    /// </returns>
    public boolean parmShowCustRebates()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginBrokerAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>boolean</c> value indicating if the price history line shows values
    /// related to margin calculation and broker.
    /// </summary>
    /// <returns>
    /// true if broker amount for margin calculation should be be shown; otherwise, false.
    /// </returns>
    public boolean parmShowMarginBrokerAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginEstimatedSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>boolean</c> value indicating if the price history line shows values
    /// related to margin calculation and estimated sales price.
    /// </summary>
    /// <returns>
    /// true if estimated sales price for margin calculation should be be shown; otherwise, false.
    /// </returns>
    public boolean parmShowMarginEstimatedSalesPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginRelated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>boolean</c> value indicating if the price history line shows values
    /// related to margins.
    /// </summary>
    /// <returns>
    /// true if margin should be be shown; otherwise, false.
    /// </returns>
    abstract public boolean parmShowMarginRelated()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginRoyaltyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>boolean</c> value indicating if the price history line shows values
    /// related to margin calculation and royalties.
    /// </summary>
    /// <returns>
    /// true if royalty amount for margin calculation should be be shown; otherwise, false.
    /// </returns>
    public boolean parmShowMarginRoyaltyAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowRoyaltyTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a <c>boolean</c> value indicating if the sales price history line shows the royalty tab.
    /// </summary>
    /// <returns>
    ///     true if royalty tab shoud be be shown on price history form; otherwise, false.
    /// </returns>
    public boolean parmShowRoyaltyTab()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowVendRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>boolean</c> value indicating if the price history line shows values
    /// related to vendor rebates.
    /// </summary>
    /// <returns>
    /// true if vendor rebates should be be shown; otherwise, false.
    /// </returns>
    public boolean parmShowVendRebates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    abstract protected TableId parmTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    abstract public UnitOfMeasureSymbol parmUnitId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes pre update logic for a price history line.  Deletes any previous
    /// references and inserts a new reference record to be used to link the
    /// price history line with one or more price history references.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of newly inserted <c>MCROrderLine2PriceHistoryRef</c> record.
    /// </returns>
    /// <remarks>
    /// Signals that a price history update is beginning.
    /// </remarks>
    public RefRecId preUpdate()
    {
        MCROrderLine2PriceHistoryRef        mcrOrderLine2PriceHistoryRef;
        MCROrderLinePriceHistoryReference   origRef;
        MCROrderLinePriceHistoryReference   currentRef;

        origRef    = this.parmOrigMCROrderLine2PriceHistoryRef();
        currentRef = this.parmMCROrderLine2PriceHistoryRef();

        // When there is an original reference, the record has been saved at least once.  If the
        // current reference is different from the original, then this is the second or later edit.
        // A new reference will be created so the current reference needs to be deleted.
        // When the line does not have a RecId, the line has not yet been saved.  If the line
        // already has a reference, then this is the second or later edit.  Again, a new reference
        // will be created so the current reference needs to be deleted.
        if ((origRef       && origRef != currentRef)
            || (currentRef && !this.parmRecId()))
        {
            MCROrderLine2PriceHistoryRef::deleteRef(currentRef);
        }

        // Insert a new reference.
        mcrOrderLine2PriceHistoryRef.clear();
        mcrOrderLine2PriceHistoryRef.insert();

        this.updateMCROrderLine2PriceHistoryRef(mcrOrderLine2PriceHistoryRef.RecId);

        return mcrOrderLine2PriceHistoryRef.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a <c>PriceDisc</c> object using information of line and specified quantity.
    /// </summary>
    /// <param name="_qty">
    ///     The quantity to use for the new <c>PriceDisc</c> record; optional.
    /// </param>
    /// <returns>
    ///     A <c>PriceDisc</c> record built from the line and <c>Qty</c> passed in.
    /// </returns>
    public final PriceDisc priceDisc(Qty _qty = this.parmQty())
    {
        PriceDiscParameters priceDiscParameters = this.createAndInitPriceDiscParameters(_qty);

        PriceDisc priceDisc = this.createPriceDiscInstance(priceDiscParameters);

        return priceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_quantity">A <c>Qty</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(Qty _quantity)
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(this.parmModuleType());
        parameters.parmItemId(this.parmItemId());
        parameters.parmInventDim(this.parmInventDim());
        parameters.parmUnitID(this.parmUnitId());
        parameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(_quantity);
        parameters.parmAccountNum(this.parmAccountId());
        parameters.parmCurrencyCode(this.parmCurrencyCode());

        switch (this.parmTableId())
        {
            case tableNum(PurchLine):
                parameters.parmOrderNum(this.parmPurchId());
                break;
            case tableNum(SalesLine):
                parameters.parmOrderNum(this.parmSalesId());
                break;
            case tableNum(SalesQuotationLine):
                parameters.parmOrderNum(this.parmQuotationId());
                break;
            default:
                throw error(strFmt("@MCR10766", funcName()));
        }

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reference between the price history line and price history references.
    /// </summary>
    /// <param name="_mcrOrderLinePriceHistoryReference">
    /// The new reference value.
    /// </param>
    abstract public void updateMCROrderLine2PriceHistoryRef(MCROrderLinePriceHistoryReference _mcrOrderLinePriceHistoryReference)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>usesRetailPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether retail pricing is used for price history line.
    /// </summary>
    /// <returns>
    /// false
    /// </returns>
    abstract public boolean usesRetailPricing()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a <c>MCRPriceHistoryLine</c> record based on the specified table buffer.
    /// </summary>
    /// <param name="_common">
    ///     The <c>Common</c> record used to create a new <c>MCRPriceHistoryLine</c>.
    /// </param>
    /// <returns>
    ///     A new <c>MCRPriceHistoryLine</c> built from the passed in record.
    /// </returns>
    public static MCRPriceHistoryLine construct(Common _common)
    {
        MCRPriceHistoryLine mcrPriceHistoryLine;

        switch (_common.TableId)
        {
            case tableNum(PurchLine):
                mcrPriceHistoryLine = MCRPriceHistoryLine_Purch::newPurchLine(_common);
                break;
            case tableNum(SalesLine):
                mcrPriceHistoryLine = MCRPriceHistoryLine_Sales::newSalesLine(_common);
                break;
            case tableNum(SalesQuotationLine):
                mcrPriceHistoryLine = MCRPriceHistoryLine_Quotation::newSalesQuotationLine(_common);
                break;
            default:
                throw error(strFmt("@MCR10766", funcName()));
        }
        return mcrPriceHistoryLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>