<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDimensionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerDimensionBuilder</c> class creates ledger dimensions without rules.
/// </summary>
/// <remarks>
///    The account structure will only contain the main account.The other dimension values are stored
///    through the <c>SingleAttributeStructure</c> hierarchies.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class LedgerDimensionBuilder
{
    Map                 dimAttrIdToDimAttribute;
    Map                 dimAttrIdToSingleAttrHierarchyId;
    recId               accountStructureHierarchyId;
    List                targetDimAttrIds;
    Map                 tagCategoryLookupTable;             // Key: DimensionAttribute.RecId<Destination>   Value: FinancialTagCategory.RecId
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a ledger dimension for the specified account and dimension values.
    /// </summary>
    /// <param name="_accountNum">
    /// The main account for the combination.
    /// </param>
    /// <param name="_mainAccountDimensionAttributeValueId">
    /// The record ID of the <c>DimensionAttributeValue</c> record corresponding to the main account.
    /// </param>
    /// <param name="_mainAccountDimensionAttributeValueHashKey">
    /// The hash key of the <c>DimensionAttributeValue</c> record corresponding to the main account.
    /// </param>
    /// <param name="_dimensionValues">
    /// The map containing the dimension values.
    /// </param>
    /// <returns>
    /// The ledger dimension for the combination.
    /// </returns>
    /// <remarks>
    /// The map key is the record ID of the <c>DimensionAttribute</c> record.
    /// The map value is the display value that corresponds to the backing entity's value.
    /// The dimension attributes that are in both <c>_dimensionValues</c> and <c>setDimensionAttributes</c> will
    /// be saved in the combination.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// wrongUseOfFunction returned if _accountNum or _mainAccountDimensionAttributeValueId or _dimensionValues is empty.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// wrongUseOfFunction returned if <c>setDimensionAttributes</c> and <c>setTagCategories</c> were not called prior to evoking this method.
    /// </exception>
    public LedgerDimensionAccount getLedgerDimension(
        MainAccountNum                      _accountNum,
        recId                               _mainAccountDimensionAttributeValueId,
        HashKey                             _mainAccountDimensionAttributeValueHashKey,
        Map                                 _dimensionValues)
    {
        DimensionAttribute                      dimAttr;
        DimensionAttributeValue                 dimAttrValue;
        DimensionFinancialTag                   dimFinancialTag;
        DimensionStorage                        dimStorage;
        DimensionStorageSegment                 dimStorageSegment;
        recId                                   dimAttrId;
        recId                                   ruleHierarchyId;
        recId                                   financialTagCategoryId;
        int                                     ruleSegmentIndex;
        ListEnumerator                          dimAttrIdEnumerator;
        DimensionValue                          displayValue;

        // Validate input parameter
        if (!_accountNum || !_mainAccountDimensionAttributeValueId || !_dimensionValues)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Ensure the processing state is setup properly
        if (!tagCategoryLookupTable || !targetDimAttrIds)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Add account structure
        dimStorage = DimensionStorage::construct(0);
        dimStorage.addAccountStructure(accountStructureHierarchyId, 1);
        dimStorage.setSegment(1, DimensionStorageSegment::construct(_accountNum, _mainAccountDimensionAttributeValueId, _mainAccountDimensionAttributeValueHashKey));

        // Add rule dimension values
        ruleSegmentIndex = 2;
        dimAttrIdEnumerator = targetDimAttrIds.getEnumerator();
        while (dimAttrIdEnumerator.moveNext())
        {
            dimAttrId = dimAttrIdEnumerator.current();
            ruleHierarchyId = dimAttrIdToSingleAttrHierarchyId.lookup(dimAttrId);
            dimStorage.addHierarchy(ruleHierarchyId, 1);
            if (_dimensionValues.exists(dimAttrId))
            {
                dimAttr = dimAttrIdToDimAttribute.lookup(dimAttrId);
                displayValue = _dimensionValues.lookup(dimAttrId);

                if (tagCategoryLookupTable.exists(dimAttr.RecId))
                {
                    // Lookup backing entity, if it don't exist, create it, then do the DAV lookup
                    financialTagCategoryId = tagCategoryLookupTable.lookup(dimAttr.RecId);
                    select firstonly RecId from dimFinancialTag
                        where dimFinancialTag.Value == displayValue &&
                            dimFinancialTag.FinancialTagCategory == financialTagCategoryId;

                    if (!dimFinancialTag.RecId)
                    {
                        dimFinancialTag.FinancialTagCategory = financialTagCategoryId;
                        dimFinancialTag.Value = displayValue;
                        dimFinancialTag.Description = '';
                        dimFinancialTag.insert();
                    }

                    dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimAttr, displayValue, false, true);
                }
                else
                {
                    // Fetch DAV for entity backed dimension (create if DAV doesn't exist but the backing entity does exist)
                    dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(dimAttr, displayValue, false, true);

                    if (!dimAttrValue.RecId)
                    {
                        // Check if record is in consolidations DAV table
                        // Note: DimensionAttributeValueConsolidation is used to prevent duplicate records from being created
                        //  for soft inserted DAV records.  The table is only used in this section of code.  Consolidations is
                        //  the only process that needs to create DAV's on-the-fly for non-existent backing entities.
                        dimAttrValue = this.createDimensionAttributeValueConsolidation(dimAttr.RecId, displayValue);
                    }
                }

                dimStorageSegment = DimensionStorageSegment::constructFromValue(displayValue, dimAttrValue);
                dimStorage.setSegment(ruleSegmentIndex, dimStorageSegment);
            }
            ruleSegmentIndex++;
        }

        return dimStorage.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensionAttributeValueConsolidation</Name>
				<Source><![CDATA[
    private DimensionAttributeValue createDimensionAttributeValueConsolidation (
        DimensionAttributeRecId _dimAttrId,
        DimensionValue _displayValue)
    {
        Microsoft.Dynamics.Ax.Xpp.DuplicateKeyExceptionÂ duplicateKeyException;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadlockException;

        dataAreaId dataArea = curext();
        UserConnection userConnection;
        DimensionAttributeValue dimAttrValue;

        try
        {
            userConnection = new UserConnection();

            // Fetch DAV from DimensionAttributeValueConsolidation where RecIds of missing usable DAV are stored.
            DimensionAttributeValueRecId davRecId = this.findDimensionAttributeValueFromDAVConsolidation(
                                                        _dimAttrId, _displayValue, dataArea, userConnection);

            if (davRecId)
            {
                dimAttrValue = DimensionAttributeValue::find(davRecId);
            }
            else
            {
                // In case DAV does not exist in DimensionAttributeValueConsolidation
                // create DimensionAttributeValueConsolidation record for missing usable DAV.
                dimAttrValue = this.forceCreateMissingUsableDimensionAttributeValue(
                                    _dimAttrId, _displayValue, dataArea, userConnection);
            }
        }
        catch (duplicateKeyException)
        {
            if (LedgerExceptionHandler::shouldExceptionBeRetried(duplicateKeyException))
            {
                retry;
            }
            else
            {
                this.createLogError(duplicateKeyException, _dimAttrId,  dimAttrValue);
                throw duplicateKeyException;
            }
        }
        catch (deadlockException)
        {
            if (LedgerExceptionHandler::shouldExceptionBeRetried(deadlockException))
            {
                retry;
            }
            else
            {
                this.createLogError(deadlockException, _dimAttrId,  dimAttrValue);
                throw deadlockException;
            }
        }
        finally
        {
            if (userConnection)
            {
                userConnection.finalize();
            }

            dimAttrValue.setConnection(new Connection());
        }

        return dimAttrValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogError</Name>
				<Source><![CDATA[
    private void createLogError(System.Exception _exception, DimensionAttributeRecId _dimAttrId, DimensionAttributeValue _dimAttrVal)
    {
        SysInstrumentationLoggerFactory::CreateLogger(
            strFmt("%1.%2", classStr(LedgerDimensionBuilder), methodStr(LedgerDimensionBuilder, createDimensionAttributeValueConsolidation)))
                .logError(strFmt('%1 (DimAttr:%2 DimAttrVal:%3, EntityInstance:%4)',
                    _exception.GetType().Name, _dimAttrId, _dimAttrVal.RecId, _dimAttrVal.EntityInstance));
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceCreateMissingUsableDimensionAttributeValue</Name>
				<Source><![CDATA[
    private DimensionAttributeValue forceCreateMissingUsableDimensionAttributeValue(
        DimensionAttributeRecId _dimAttrId,
        DimensionValue _displayValue,
        DataAreaId _dataArea,
        UserConnection _userConnection)
    {
        str logMessage = 'Try to create DimensionAttributeValueConsolidation by creating soft deleted DAV.';
        SysInstrumentationLoggerFactory::CreateLogger(
            strFmt("%1.%2", classStr(LedgerDimensionBuilder), methodStr(LedgerDimensionBuilder, forceCreateMissingUsableDimensionAttributeValue)))
                .logInformation(strFmt('%1 (DimAttr:%2)', logMessage, _dimAttrId));

        _userConnection.ttsbegin();

        DimensionAttributeValue dimAttrValue = this.createSoftDeletedDimAttrValue(
                                    _dimAttrId, _displayValue, _dataArea, _userConnection);

        this.insertDimensionAttributeValueConsolidation(
                    _dimAttrId, _displayValue, _dataArea, dimAttrValue.RecId, _userConnection);

        _userConnection.ttscommit();

        return dimAttrValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionAttributeValueFromDAVConsolidation</Name>
				<Source><![CDATA[
    private DimensionAttributeValueRecId findDimensionAttributeValueFromDAVConsolidation(
        DimensionAttributeRecId _dimAttrId,
        DimensionValue _displayValue,
        DataAreaId _dataArea,
        UserConnection _userConnection)
    {
        DimensionAttributeValueConsolidation dimensionAttributeValueConsolidation;
        dimensionAttributeValueConsolidation.setConnection(_userConnection);
 
        select firstonly DimensionAttributeValue from dimensionAttributeValueConsolidation
            where dimensionAttributeValueConsolidation.DataArea == _dataArea
                && dimensionAttributeValueConsolidation.DimensionAttribute == _dimAttrId
                && dimensionAttributeValueConsolidation.DisplayValue == _displayValue;

        return dimensionAttributeValueConsolidation.DimensionAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSoftDeletedDimAttrValue</Name>
				<Source><![CDATA[
    private DimensionAttributeValue createSoftDeletedDimAttrValue(
        DimensionAttributeRecId _dimensionAttributeId,
        DimensionValue _displayValue,
        SelectableDataArea _dataAreaId,
        UserConnection _userConnection)
    {
        DimensionAttributeValue dimAttrValue;
        dimAttrValue.setConnection(_userConnection);

        dimAttrValue.DimensionAttribute = _dimensionAttributeId;
        dimAttrValue.DisplayValue = _displayValue;
        dimAttrValue.BackingRecordDataAreaId = _dataAreaId;
        dimAttrValue.EntityInstance = this.getNextDeletedEntityInstance(_dimensionAttributeId);
        dimAttrValue.IsDeleted = NoYes::Yes;
        dimAttrValue.IsSuspended = NoYes::Yes;
        dimAttrValue.insert();

        return dimAttrValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextDeletedEntityInstance</Name>
				<Source><![CDATA[
    private recId getNextDeletedEntityInstance(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        DimensionAttributeValue dimAttrValue;

        select firstonly EntityInstance from dimAttrValue
            order by dimAttrValue.EntityInstance desc
            where dimAttrValue.DimensionAttribute == _dimensionAttributeRecId
                && dimAttrValue.IsDeleted == true;

        return dimAttrValue.EntityInstance + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionAttributeValueConsolidation</Name>
				<Source><![CDATA[
    private DimensionAttributeValueConsolidation insertDimensionAttributeValueConsolidation(
        DimensionAttributeRecId _dimAttrId,
        DimensionValue _displayValue,
        DataAreaId _dataArea,
        RefRecId _dimAttrValueRecId,
        UserConnection _userConnection)
    {
        DimensionAttributeValueConsolidation dimAttrValueConsolidation;
        dimAttrValueConsolidation.setConnection(_userConnection);
 
        dimAttrValueConsolidation.DimensionAttribute = _dimAttrId;
        dimAttrValueConsolidation.DisplayValue = _displayValue;
        dimAttrValueConsolidation.DataArea = _dataArea;
        dimAttrValueConsolidation.DimensionAttributeValue = _dimAttrValueRecId;
        dimAttrValueConsolidation.insert();

        return dimAttrValueConsolidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(DimensionEnumeration _dimensionAttributeSetId)
    {
        Map     singleAttrMaps;

        singleAttrMaps = DimensionHierarchy::getSingleAttributeHierarchies(_dimensionAttributeSetId);
        dimAttrIdToDimAttribute = singleAttrMaps.lookup(1);
        dimAttrIdToSingleAttrHierarchyId = singleAttrMaps.lookup(2);
        accountStructureHierarchyId = DimensionHierarchy::getRelationalAccountStructureId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the dimension attributes that define the rule portion for the combinations to create.
    /// </summary>
    /// <param name="_dimensionAttributes">
    ///    A collection of record ID values for the <c>DimensionAttribute</c> records.
    /// </param>
    /// <remarks>
    ///    The dimension attributes must have a <c>DimensionFinancialTag</c> table as a backing entity.The
    ///    caller is responsible for making sure that this condition is met.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <c>wrongUseOfFunction</c> method is called because the <paramref name="_dimensionAttributes" />
    ///    parameter was null.
    /// </exception>
    public void setDimensionAttributes(List _dimensionAttributes)
    {
        // Validate input parameter
        if (_dimensionAttributes == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        targetDimAttrIds = _dimensionAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTagCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the financial tag categories that correspond to the dimension attributes of the rule.
    /// </summary>
    /// <param name="_tagCategories">
    ///    A map that contains the financial tag category lookup information.
    /// </param>
    /// <remarks>
    ///    The map key is the record ID of the <c>DimensionAttribute</c> record.The map value is the record ID
    ///    of the <c>FinancialTagCategory</c> record.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <c>wrongUseOfFunction</c> was called because the <paramref name="_tagCategories" /> parameter
    ///    was null.
    /// </exception>
    public void setTagCategories(Map _tagCategories)
    {
        // Validate input parameter
        if (_tagCategories == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        tagCategoryLookupTable = _tagCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerDimensionBuilder</c> class.
    /// </summary>
    /// <param name="_dimensionAttributeSetId">
    ///    The record ID of the dimension attribute set that specifies the dimension attributes.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LedgerDimensionBuilder</c> class.
    /// </returns>
    /// <remarks>
    ///    Records are retrieved and potentially created for each dimension attribute so this is not a
    ///    lightweight constructor.
    /// </remarks>
    public static LedgerDimensionBuilder construct(DimensionEnumeration _dimensionAttributeSetId)
    {
        LedgerDimensionBuilder  builder;

        builder = new LedgerDimensionBuilder(_dimensionAttributeSetId);

        return builder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>