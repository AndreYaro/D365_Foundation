<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlSAD_Finance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Wrappers for SAD documents - ledger.
/// </summary>
final class PlSAD_Finance
{
    LedgerJournalTable  ledgerJournalTable;
    PlSADFinanceTable   sadFinanceTable;
    private TmpTaxWorkTrans taxWorkTrans;
    boolean isTaxIntegrationEnabled = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::SADDocument);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSAD</Name>
				<Source><![CDATA[
    private boolean checkSAD()
    {
        PlSADFinanceInvoice  sadFinanceInvoice;
        PlSADFinanceInvTrans sadFinanceInvTrans;
        PlSADFinanceLines    sadFinanceLines;
        int64                qtyOfLines;

        if (sadFinanceTable.SADTransAmount && !sadFinanceTable.SADTransportVend)
            return false;

        qtyOfLines = (select count(RecId) from plSADFinanceInvoice
                      where plSADFinanceInvoice.sadDate   == sadFinanceTable.SADDate &&
                            plSADFinanceInvoice.sadNumber == sadFinanceTable.SADNumber).RecId;

        while select count(RecId) from sadFinanceInvoice
            group by InvoiceId
            where sadFinanceInvoice.sadDate    == sadFinanceTable.sadDate     &&
                  sadFinanceInvoice.sadNumber  == sadFinanceTable.sadNumber
        exists join sadFinanceInvTrans
            where sadFinanceInvTrans.sadNumber == sadFinanceInvoice.sadNumber &&
                  sadFinanceInvTrans.sadDate   == sadFinanceInvoice.sadDate   &&
                  sadFinanceInvTrans.InvoiceId == sadFinanceInvoice.InvoiceId
        {
            if (! sadFinanceInvoice.RecId)
                return false;
            qtyOfLines --;
        }

        if (qtyOfLines)
        {
            return false;
        }

        qtyOfLines = (select count(RecId) from plSADFinanceLines
                      where plSADFinanceLines.sadDate   == sadFinanceTable.sadDate &&
                            plSADFinanceLines.sadNumber == sadFinanceTable.sadNumber).RecId;

        while select count(RecId) from sadFinanceLines
            group by sadLineNo
            where sadFinanceLines.sadDate             == sadFinanceTable.sadDate   &&
                  sadFinanceLines.sadNumber           == sadFinanceTable.sadNumber
        exists join sadFinanceInvTrans
            where sadFinanceInvTrans.sadNumber        == sadFinanceLines.sadNumber &&
                  sadFinanceInvTrans.sadDate          == sadFinanceLines.sadDate   &&
                  sadFinanceInvTrans.sadInvoiceLineNo == sadFinanceLines.sadLineNo
        {
            if (! sadFinanceLines.RecId)
            {
                return false;
            }
            qtyOfLines--;
        }

        if (qtyOfLines)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    private void createTrans()
    {
        JournalVoucherNum               journalVoucherNum;

        LedgerJournalTrans              ledgerJournalTrans;

        PlSADFinanceInvTrans            sadFinanceInvTrans;
        PlSADFinanceInvoice             sadFinanceInvoice;
        PlSADFinanceLines               sadFinanceLines;
        PlSADFinanceLedgerJournalRef    sadReference;

        RecordInsertList                sadReferenceList = new RecordInsertList(tableNum(PlSADFinanceLedgerJournalRef));

        ExchRate     exchRate;
        CurrencyCode currencyCode;
        Voucher      voucher = "";
        LineNum      lineNum, lineNumBegin;

        void insertLine()
        {
            ledgerJournalTrans.AmountCurCredit = CurrencyExchangeHelper::amount(ledgerJournalTrans.AmountCurCredit, ledgerJournalTrans.CurrencyCode);
            ledgerJournalTrans.AmountCurDebit  = CurrencyExchangeHelper::amount(ledgerJournalTrans.AmountCurDebit, ledgerJournalTrans.CurrencyCode);
            if (ledgerJournalTrans.amount())
            {
                ledgerJournalTrans.Voucher    = voucher;
                ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;
                ledgerJournalTrans.TransDate  = sadFinanceTable.TransDate;
                ledgerJournalTrans.Txt        = "@GLS109193" + ': ' + sadFinanceTable.sadNumber;

                lineNum ++;
                ledgerJournalTrans.LineNum    = lineNum;
                if (isTaxIntegrationEnabled 
                    && ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
                {
                    LedgerJournalTransTaxExtension taxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
                    taxExtension.OverrideSalesTax = NoYes::Yes;
                    ledgerJournalTrans.packExtensionTable(taxExtension);
                }
                ledgerJournalTrans.insert();

                if (ledgerJournalTrans.Invoice &&
                    ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    sadReference.clear();
                    sadReference.initValue();
                    sadReference.LedgerJournalTransRefRecId = ledgerJournalTrans.RecId;
                    sadReference.SADFinanceTableRefRecId    = sadFinanceTable.RecId;
                    sadReferenceList.add(sadReference);
                }
            }
        }

        lineNum = (select maxof(LineNum) from ledgerJournalTrans
                      where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum).LineNum;
        lineNumBegin = lineNum;

        journalVoucherNum = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable));
        voucher           = journalVoucherNum.getNew(true);
        if (! voucher)
        {
            error("@SYS26396");
            return;
        }

        currencyCode = sadFinanceTable.CurrencyCode;
        exchRate     = sadFinanceTable.ExchRate;
        TaxSAD taxSAD = this.calculateTax();

        VendAccount vendAccount = sadFinanceTable.sadGovDuty;
        VendTable vendTable = VendTable::find(vendAccount);

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();
        ledgerJournalTrans.AccountType          = LedgerJournalACType::Vend;
        ledgerJournalTrans.LedgerDimension      = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(vendAccount, LedgerJournalACType::Vend);
        ledgerJournalTrans.AmountCurCredit      = sadFinanceTable.totalDuty();
        insertLine();

        while select sadFinanceInvoice
            where sadFinanceInvoice.sadNumber == sadFinanceTable.sadNumber &&
                  sadFinanceInvoice.sadDate   == sadFinanceTable.SadDate
        {
            ledgerJournalTrans.clear();
            ledgerJournalTrans.initValue();
            ledgerJournalTrans.AccountType      = LedgerJournalACType::Vend;
            ledgerJournalTrans.LedgerDimension  = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sadFinanceInvoice.VendAccount, LedgerJournalACType::Vend);
            ledgerJournalTrans.AmountCurCredit  = sadFinanceInvoice.totalForInvoice();
            ledgerJournalTrans.Invoice          = sadFinanceInvoice.InvoiceId;
            ledgerJournalTrans.CurrencyCode     = currencyCode;
            ledgerJournalTrans.ExchRate         = exchRate;
            insertLine();
        }

        if (isTaxIntegrationEnabled)
        {
            boolean shouldSetVatNum = false;
            if (TaxIntegrationUtils::isMultipleTaxIdEnabledForTaxService())
            {
                vendAccount = taxSAD.getCustVendAccount_PL();
                vendTable = VendTable::find(vendAccount);
                if (vendAccount)
                {
                    shouldSetVatNum = true;
                }
            }
            while select sum(SourceBaseAmountCur), sum(SourceTaxAmountCur), sum(TaxInCostPrice)
                from taxWorkTrans
                group by TaxCode, VATNum_PL, PartyTaxId
            {
                ledgerJournalTrans.clear();
                ledgerJournalTrans.initValue();
                ledgerJournalTrans.AccountType      = LedgerJournalACType::Ledger;
                ledgerJournalTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(TaxLedgerAccountGroup::accountLedgerDimension(taxWorkTrans.TaxCode, TaxDirection::IncomingTax), 0);
                ledgerJournalTrans.AmountCurDebit   = taxWorkTrans.SourceTaxAmountCur - taxWorkTrans.TaxInCostPrice;
                ledgerJournalTrans.Invoice          = sadFinanceTable.sadNumber;
                ledgerJournalTrans.Addressing_PL    = vendTable.postalAddress().Address;

                if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTrans.ledgerJournalTable().JournalType))
                {
                    if (shouldSetVatNum && taxWorkTrans.PartyTaxId)
                    {
                        ledgerJournalTrans.vatNumJournal = taxWorkTrans.VATNum_PL;
                        LedgerJournalTransTaxExtension taxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
                        taxExtension.VATNumRecId = taxWorkTrans.PartyTaxId;
                        taxExtension.VATNumTableType = TaxExemptNumberSourceType::TaxRegistration;
                        ledgerJournalTrans.packExtensionTable(taxExtension);
                    }
                    else
                    {
                        vendTable.copyPrimaryRegistrationNumberToVATMap(ledgerJournalTrans, sadFinanceTable.TransDate);
                    }
                }
                else
                {
                    ledgerJournalTrans.vatNumJournal = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, sadFinanceTable.TransDate);
                }

                ledgerJournalTrans.CustVendName_PL  = vendTable.name();
                ledgerJournalTrans.VatDueDate_W     = sadFinanceTable.vatDueDate;
                ledgerJournalTrans.DocumentDate     = sadFinanceTable.SadDate;
                ledgerJournalTrans.TaxCode          = taxWorkTrans.TaxCode;
                ledgerJournalTrans.TaxBase_W        = taxWorkTrans.SourceBaseAmountCur;
                insertLine();
            }
        }
        else
        {
            while select sum(TaxAmount), sum(SADDuty1Rate), sum(SADDuty2Rate), sum(SADBaseAmount)
                from sadFinanceLines
                group by TaxCode
                where sadFinanceLines.sadNumber == sadFinanceTable.sadNumber &&
                      sadFinanceLines.sadDate   == sadFinanceTable.SadDate
            {
                ledgerJournalTrans.clear();
                ledgerJournalTrans.initValue();
                ledgerJournalTrans.AccountType      = LedgerJournalACType::Ledger;
                ledgerJournalTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(TaxLedgerAccountGroup::accountLedgerDimension(sadFinanceLines.TaxCode, TaxDirection::IncomingTax), 0);
                ledgerJournalTrans.AmountCurDebit   = sadFinanceLines.TaxAmount;
                ledgerJournalTrans.Invoice          = sadFinanceTable.sadNumber;
                ledgerJournalTrans.Addressing_PL    = vendTable.postalAddress().Address;

                if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTrans.ledgerJournalTable().JournalType))
                {
                    vendTable.copyPrimaryRegistrationNumberToVATMap(ledgerJournalTrans, ledgerJournalTrans.TransDate);
                }
                else
                {
                    ledgerJournalTrans.vatNumJournal = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, sadFinanceTable.TransDate);
                }

                ledgerJournalTrans.CustVendName_PL  = vendTable.name();
                ledgerJournalTrans.VatDueDate_W     = sadFinanceTable.vatDueDate;
                ledgerJournalTrans.DocumentDate     = sadFinanceTable.SadDate;
                ledgerJournalTrans.TaxCode          = sadFinanceLines.TaxCode;
                ledgerJournalTrans.TaxBase_W        = sadFinanceLines.sadBaseAmount + sadFinanceLines.sadDuty1Rate + sadFinanceLines.sadDuty2Rate;
                insertLine();
            }
        }

        while select LedgerDimension, sum(AmountCur), sum(Calculate1)
            from sadFinanceInvTrans
            group by LedgerDimension
            where sadFinanceInvTrans.sadNumber == sadFinanceTable.sadNumber &&
                  sadFinanceInvTrans.sadDate   == sadFinanceTable.SadDate
        {
            ledgerJournalTrans.clear();
            ledgerJournalTrans.initValue();
            ledgerJournalTrans.AccountType      = LedgerJournalACType::Ledger;
            ledgerJournalTrans.LedgerDimension  = sadFinanceInvTrans.LedgerDimension;
            ledgerJournalTrans.AmountCurDebit   = sadFinanceInvTrans.Calculate1;
            ledgerJournalTrans.DefaultDimension = 0;
            insertLine();

            ledgerJournalTrans.clear();
            ledgerJournalTrans.initValue();
            ledgerJournalTrans.AccountType      = LedgerJournalACType::Ledger;
            ledgerJournalTrans.LedgerDimension  = sadFinanceInvTrans.LedgerDimension;
            ledgerJournalTrans.AmountCurDebit   = sadFinanceInvTrans.AmountCur;
            ledgerJournalTrans.CurrencyCode     = sadFinanceTable.CurrencyCode;
            ledgerJournalTrans.ExchRate         = sadFinanceTable.ExchRate;
            ledgerJournalTrans.DefaultDimension = 0;
            insertLine();
        }

        if (sadFinanceTable.sadTransportVend)
        {
            ledgerJournalTrans.clear();
            ledgerJournalTrans.initValue();
            ledgerJournalTrans.AccountType      = LedgerJournalACType::Vend;
            ledgerJournalTrans.LedgerDimension  = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sadFinanceTable.sadTransportVend, LedgerJournalACType::Vend);
            ledgerJournalTrans.AmountCurCredit  = sadFinanceTable.sadTransAmount;
            insertLine();
        }

        if (lineNum == lineNumBegin)
        {
            journalVoucherNum.abort();
        }
        else
        {
            journalVoucherNum.used(voucher);
            sadReferenceList.insertDatabase();
            info(strfmt("@GLS109235", voucher));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    private boolean isPosted()
    {
        return ledgerJournalTable.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerJournalTable _ledgerJournalTable, PlSADFinanceTable _sadFinanceTable)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00031, funcName());

        sadFinanceTable    = _sadFinanceTable;
        ledgerJournalTable = _ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates general journal lines.
    /// </summary>
    public void run()
    {
        if (! this.checkSAD())
            throw error("@GLS109234");

        if (this.isPosted())
            throw error("@SYS21497");

        this.createTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger journal for posting of SAD document
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// Ledger journal header
    /// </param>
    /// <param name="_sadFinanceTable">
    /// SAD template header
    /// </param>
    public static void createJournal(
        LedgerJournalTable _ledgerJournalTable,
        PlSADFinanceTable  _sadFinanceTable)
    {
        PlSAD_Finance sad_Finance;

        ttsbegin;

        PlSAD_Finance::splitFinanceTrans(_sadFinanceTable);
        // LedgerJournalTable is re-searched to detach from form datasource
        sad_Finance = new PlSAD_Finance(LedgerJournalTable::findByRecId(_ledgerJournalTable.RecId), _sadFinanceTable);
        sad_Finance.run();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitFinanceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits document lines based on SADDate.
    /// </summary>
    /// <param name = "_sadFinanceTable">SAD document to be split.</param>
    public static void splitFinanceTrans(PlSADFinanceTable _sadFinanceTable)
    {
        PlSADFinanceLines   sadFinanceLines;

        _sadFinanceTable.transMiscSplit();
        while select sadFinanceLines
            where sadFinanceLines.sadNumber == _sadFinanceTable.sadNumber &&
                  sadFinanceLines.sadDate   == _sadFinanceTable.sadDate
        {
            sadFinanceLines.splitTaxesOnLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    private TaxSAD calculateTax()
    {
        if (!isTaxIntegrationEnabled)
        {
            return null;
        }

        SADCalcTax sadCalcTax = SADCalcTax::newForSourceTable(sadFinanceTable);
        sadCalcTax.calcTax(null);
        sadCalcTax.validateTaxcode(NoYes::Yes);

        // PlSADFinanceLines.TaxAmount needs to be updated for later use in the method totalDuty of table PlSADFinanceTable.
        taxWorkTrans = sadCalcTax.tax().tmpTaxWorkTrans();
        PlSADFinanceLines financeLines;
        ttsbegin;
        while select forupdate financeLines
            where financeLines.SADDate == sadFinanceTable.SADDate
                && financeLines.SADNumber == sadFinanceTable.SADNumber
        {
            select sum(SourceTaxAmountCur), sum(TaxInCostPrice) from taxWorkTrans
                where taxWorkTrans.SourceTableId == financeLines.TableId
                    && taxWorkTrans.SourceRecId == financeLines.RecId;
            financeLines.TaxAmount = taxWorkTrans.SourceTaxAmountCur - taxWorkTrans.TaxInCostPrice;
            financeLines.update();
        }
        ttscommit;

        TaxSAD taxSAD = sadCalcTax.tax() as TaxSAD;
        return taxSAD;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>