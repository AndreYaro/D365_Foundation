<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetCachePurgeJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostProdRecalcMultiJob</c> class cleans up the costing sheet cache.
/// Records in the cache with age of the specified days or older will be deleted.
/// </summary>
public class CostSheetCachePurgeJob extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase       dialog;
    DialogField         dialogToInteger;
    DialogField         dialogTruncateTable;

    utcdatetime emptyDate;
    utcdatetime cutOffDate;
    CostSheetCachePurgeJobCutOffDays cutOffDateDiff;
    boolean useTruncateTable;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        cutOffDateDiff,
        useTruncateTable
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>true if the class is shown in the list of <c>Journal</c> types; otherwise, false.</returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:CostSheetCachePurgeJobMenuName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();
        dialog.addText("@SCM:CostSheetCachePurgeJobDialogDescription");

        dialogToInteger = dialog.addFieldValue(extendedTypeStr(CostSheetCachePurgeJobCutOffDays),cutOffDateDiff);
        dialogToInteger.enabled(false);

        dialogTruncateTable = dialog.addField(enumStr(NoYes), "@SCM:CostSheetCachePurgeJobUseTruncateDescription", "@SCM:CostSheetCachePurgeJobUseTruncateDescriptionHelper");
        dialogTruncateTable.control().registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(CostSheetCachePurgeJob, dialogTruncateTableModified),
            this);
        dialogTruncateTable.value(NoYes::Yes);

        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(RunbaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        cutOffDateDiff = dialogToInteger.value();
        useTruncateTable = dialogTruncateTable.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateDiff</Name>
				<Source><![CDATA[
    public CostSheetCachePurgeJobCutOffDays parmToDateDiff(CostSheetCachePurgeJobCutOffDays _cutOffDateDiff = cutOffDateDiff)
    {
        cutOffDateDiff = _cutOffDateDiff;
        return cutOffDateDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseTruncateTable</Name>
				<Source><![CDATA[
    public boolean parmUseTruncateTable(boolean _useTruncateTable = useTruncateTable)
    {
        useTruncateTable = _useTruncateTable;
        return useTruncateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogTruncateTableModified</Name>
				<Source><![CDATA[
    public boolean dialogTruncateTableModified(FormCheckBoxControl _callerControl)
    {
        if (dialogTruncateTable.value() == NoYes::Yes)
        {
            dialogToInteger.enabled(false);
            useTruncateTable = true;
        }
        else
        {
            warning("@SCM:CostSheetCachePurgeJobUseDeleteWarning");
            dialogToInteger.enabled(true);
            useTruncateTable = false;
        }
        return _callerControl.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purge table CostSheetCache as batch job
    /// </summary>
    /// <param name = "_args">Class argument. Not used.</param>
    public static void main(Args _args)
    {
        CostSheetCachePurgeJob costSheetCachePurgeJob = new CostSheetCachePurgeJob();

        if (CostSheetCachePurgeJob.prompt())
        {
            costSheetCachePurgeJob.runOperation();        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purge table CostSheetCache.
    /// </summary>
    public void run()
    {
        if (this.validate())
        {
            if (useTruncateTable)
            {
                this.runTruncateTable();
            }
            else
            {
                this.runDelete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTruncateTable</Name>
				<Source><![CDATA[
    internal void runTruncateTable()
    {
        DictTable dictTable;
        dictTable = new DictTable(tablenum(CostSheetCache));

        SqlDataDictionary sqlTable;

        if (dictTable && dictTable.enabled())
        {
            str sqlTableName = dictTable.name(DbBackend::Sql);
            sqlTable = new SqlDataDictionary();

            if (sqlTable.tableExist(sqlTableName))
            {
                new SqlDataDictionaryPermission(methodstr(SqlDataDictionary, tableTruncate)).assert();
                sqlTable.tableTruncate(tablenum(CostSheetCache), false);
                CodeAccessPermission::revertAssert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDelete</Name>
				<Source><![CDATA[
    private void runDelete()
    {
        ttsbegin;
   
        CostSheetId sheetId = CostSheetTable::defaultCostSheetTable().SheetId;

        cutOffDateDiff = this.parmToDateDiff();

        cutOffDate = DateTimeUtil::addDays(DateTimeUtil::utcNow(), - cutOffDateDiff);

        CostSheetCache costSheetCache;

        delete_from costSheetCache
                where costSheetCache.SheetId == sheetId
                && (costSheetCache.CreatedDateTime == emptyDate || costSheetCache.CreatedDateTime <=  cutOffDate);
               
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                cutOffDateDiff = conPeek(packedClass,2);
                if (cutOffDateDiff < 1)
                {
                    cutOffDateDiff = 1;
                }

                useTruncateTable = conPeek(packedClass,3);
                break;
            case #CurrentVersion - 1:
                cutOffDateDiff = conPeek(packedClass,2);
                if (cutOffDateDiff < 1)
                {
                    cutOffDateDiff = 1;
                }
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>CostSheetPurgeCache</c> class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>CostSheetPurgeCache</c> can be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        ret = super(calledFrom);

        if (ret && cutOffDateDiff < 1)
        {
            ret = checkFailed("@SCM:CostSheetCachePurgeJobErrorMessage");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>