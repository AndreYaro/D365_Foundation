<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastProcessActualsLedgerDimensionLoader</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowForecastProcessActualsLedgerDimensionLoader
{
    private DimensionEnumeration dimensionAttributeSet;
    private DimensionHierarchy cashFlowDimensionHierarchy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CashFlowForecastProcessActualsLedgerDimensionLoader construct()
    {
        CashFlowForecastProcessActualsLedgerDimensionLoader dimensionLoader = new CashFlowForecastProcessActualsLedgerDimensionLoader();

        dimensionLoader.cashFlowDimensionHierarchy = CashFlowForecastDimensionHierarchy::findDimensionHierarchyForCashFlowForecast();
        dimensionLoader.dimensionAttributeSet = CashFlowForecastDimensionHierarchy::findDimensionAttributeSetForCashFlowForecastHierarchy();

        return dimensionLoader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDimensionReferences</Name>
				<Source><![CDATA[
    internal void loadDimensionReferences()
    {
        RecordInsertList newDefaultDimensionReferences = new RecordInsertList(tableNum(CashFlowForecastLedgerDimensionReference));

        Query query = new Query();
        QueryBuildDataSource gjae = query.addDataSource(tableNum(GeneralJournalAccountEntry));
        gjae.addGroupByAndSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        gjae.addGroupByAndSelectionField(fieldNum(GeneralJournalAccountEntry, MainAccount));

        // A notExists join to the CashFlowForecastLedgerDimensionReference table is included because
        // the primary purpose of this loop is to create ledger dimensions for the missing
        // CashFlowForecastDimensionReference records
        QueryBuildDataSource ledgerDimensionReference = gjae.addDataSource(tableNum(CashFlowForecastLedgerDimensionReference));
        ledgerDimensionReference.relations(false);
        ledgerDimensionReference.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(CashFlowForecastLedgerDimensionReference, AccountEntryLedgerDimension));
        ledgerDimensionReference.joinMode(JoinMode::NoExistsJoin);
        ledgerDimensionReference.fetchMode(QueryFetchMode::One2One);

        // Only Liquidity accounts, as defined in Cash flow Forecasting, should be balanced.
        QueryBuildDataSource liquidityAccounts = gjae.addDataSource(tableNum(LedgerLiquidity));
        liquidityAccounts.relations(false);
        liquidityAccounts.addLink(fieldNum(GeneralJournalAccountEntry, MainAccount), fieldNum(LedgerLiquidity, MainAccount));
        liquidityAccounts.joinMode(JoinMode::ExistsJoin);
        liquidityAccounts.fetchMode(QueryFetchMode::One2One);

        QueryRun qr = new QueryRun(query);

        while (qr.next())
        {
            GeneralJournalAccountEntry accountEntry = qr.get(tableNum(GeneralJournalAccountEntry));

            this.processAccountEntryLedgerDimension(
                newDefaultDimensionReferences,
                accountEntry.LedgerDimension,
                accountEntry.MainAccount);
        }

        newDefaultDimensionReferences.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    private void processAccountEntryLedgerDimension(
        RecordInsertList _newDefaultDimensionReferences,
        LedgerDimensionAccount _accountEntryLedgerDimension,
        MainAccountRecId _mainAccountRecId)
    {
        DimensionHierarchyLevel dimHierarchyLevel;
        DimensionAttributeLevelValueView dimAttrLevelValueView;
        DimensionAttributeValueSetStorage dimSetStorage = new DimensionAttributeValueSetStorage();

        while select DimensionAttribute, Level from dimHierarchyLevel
            order by dimHierarchyLevel.Level
                where dimHierarchyLevel.DimensionHierarchy == cashFlowDimensionHierarchy.RecId
            join firstonly ValueCombinationRecId, DimensionAttribute, AttributeValueRecId from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == _accountEntryLedgerDimension
                    && dimAttrLevelValueView.DimensionAttribute == dimHierarchyLevel.DimensionAttribute
        {
            if (dimAttrLevelValueView)
            {
                dimSetStorage.addItem(DimensionAttributeValue::find(dimAttrLevelValueView.AttributeValueRecId));
            }
        }

        RecId dimAttrValueSetRecId;
        if (dimSetStorage.elements() > 0)
        {
            dimAttrValueSetRecId = dimSetStorage.save();
        }
        else
        {
            dimAttrValueSetRecId = 0;
        }

        CashFlowForecastLedgerDimensionReference dimensionReference;
        select firstonly RecId from dimensionReference
            where dimensionReference.AccountEntryLedgerDimension == _accountEntryLedgerDimension
                && dimensionReference.BalanceDefaultDimension == dimAttrValueSetRecId
                && dimensionReference.MainAccount == _mainAccountRecId;

        if (!dimensionReference)
        {
            dimensionReference.AccountEntryLedgerDimension = _accountEntryLedgerDimension;
            dimensionReference.BalanceDefaultDimension = dimAttrValueSetRecId;
            dimensionReference.MainAccount = _mainAccountRecId;
            dimensionReference.DimensionAttributeSet = dimensionAttributeSet;
            _newDefaultDimensionReferences.add(dimensionReference);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReferences</Name>
				<Source><![CDATA[
    internal void clearReferences()
    {
        CashFlowForecastLedgerDimensionReference references;
        delete_from references
            where references.DimensionAttributeSet != dimensionAttributeSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>