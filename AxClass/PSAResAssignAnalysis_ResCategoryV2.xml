<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAResAssignAnalysis_ResCategoryV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This derived class is used for handling worker wise assignment analysis.
///     This class is used specifically when project resource performance enhancement feature is enabled.
/// </summary>
public class PSAResAssignAnalysis_ResCategoryV2 extends PSAResAssignAnalysisBase
{
    #TimeConstants

    private Query rootQuery;
    private QueryBuildDataSource analysisDS;

    private utcdatetime startDateTime;
    private utcdatetime endDateTime;

    private boolean projBase;
    private const real percent100 = 100.0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for getting worker wise resource assignment analysis records.
    /// </summary>
    public void buildQuery()
    {
        startDateTime = DateTimeUtil::minValue();
        endDateTime = DateTimeUtil::maxValue();

        if (m_dStartDate)
        {
            startDateTime = DateTimeUtil::newDateTime(m_dStartDate, 0);
        }

        if (m_dEndDate)
        {
            endDateTime = DateTimeUtil::newDateTime(m_dEndDate, 0);
        }

        rootQuery = new Query();

        if (m_tCommon && (m_tCommon.TableId == tableNum(ProjTable)))
        {
            projBase = true;
            ProjTable projTable = m_tCommon;
            ActivityRecId activity = ProjWBS::getRootActivityRecId(projTable.ProjId);

            analysisDS = rootQuery.addDataSource(tableNum(ResResourceAnalysisPerProjectDayViewV2));
            
            analysisDS.addRange(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Activity))
                .value(SysQuery::value(activity));
            analysisDS.addRange(fieldnum(ResResourceAnalysisPerProjectDayViewV2, RecipientCompany))
                .value(SysQuery::value(curExt()));
            analysisDS.addRange(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Timeframe))
                .value(queryRange(startDateTime, endDateTime));
            
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategoryId));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategory));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Capacity), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, HardLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, SoftLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategoryDescription));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Remaining), SelectionField::Sum);
            
            analysisDS.orderMode(OrderMode::GroupBy);
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategoryId));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategory));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Activity));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategoryDescription));
            
        }
        else
        {
            analysisDS = rootQuery.addDataSource(tableNum(ResResourceAnalysisDayViewV2));
            
            analysisDS.addRange(fieldnum(ResResourceAnalysisDayViewV2, RecipientCompany))
                .value(SysQuery::value(curExt()));
            analysisDS.addRange(fieldnum(ResResourceAnalysisDayViewV2, Timeframe))
                .value(queryRange(startDateTime, endDateTime));
            
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategoryId));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategory));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategoryDescription));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, Capacity), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, HardLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, SoftLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, Remaining), SelectionField::Sum);
            
            analysisDS.orderMode(OrderMode::GroupBy);
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategoryId));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategory));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategoryDescription));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query based on value provided for department wise resource assignment analysis.
    /// </summary>
    public void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssignmentAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and populates the temporary table for worker wise assignment analysis.
    /// </summary>
    public void insertAssignmentAnalysis()
    {
        m_oSummaryQueryRun = new QueryRun(rootQuery);

        ttsbegin;

        if (projBase)
        {
            this.insertRecordByActivityProcess();
        }
        else
        {
            this.insertRecordByResourceProcess();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordByActivityProcess</Name>
				<Source><![CDATA[
    private void insertRecordByActivityProcess()
    {
        real hardUtilizationPercentage, softUtilizationPercentage;
        real totalUtilizationPercentage, unscheduledHoursPercentage;

        while (m_oSummaryQueryRun.next())
        {
            ResResourceAnalysisPerProjectDayViewV2 projectAnalysis = m_oSummaryQueryRun.get(tableNum(ResResourceAnalysisPerProjectDayViewV2));
                
            if (projectAnalysis.Capacity == 0)
            {
                hardUtilizationPercentage = 0;
                softUtilizationPercentage = 0;
                totalUtilizationPercentage = 0;
                unscheduledHoursPercentage = 0;
            }
            else
            {
                hardUtilizationPercentage = projectAnalysis.HardLocked / projectAnalysis.Capacity * percent100;
                softUtilizationPercentage = projectAnalysis.SoftLocked / projectAnalysis.Capacity * percent100;
                totalUtilizationPercentage = hardUtilizationPercentage + softUtilizationPercentage;
                unscheduledHoursPercentage = projectAnalysis.Remaining / projectAnalysis.Capacity * percent100;
            }

            m_tTmpResourceAssignmentAnalysis.Description = projectAnalysis.ResourceCategoryDescription;
            m_tTmpResourceAssignmentAnalysis.ResourceCategoryId = projectAnalysis.ResourceCategoryId;
            m_tTmpResourceAssignmentAnalysis.Capacity = projectAnalysis.Capacity;
            m_tTmpResourceAssignmentAnalysis.HardCommit = projectAnalysis.HardLocked;
            m_tTmpResourceAssignmentAnalysis.SoftCommit = projectAnalysis.SoftLocked;
            m_tTmpResourceAssignmentAnalysis.Availability = projectAnalysis.Remaining;
            m_tTmpResourceAssignmentAnalysis.PercentHard = hardUtilizationPercentage;
            m_tTmpResourceAssignmentAnalysis.PercentSoft = softUtilizationPercentage;
            m_tTmpResourceAssignmentAnalysis.PercentTotal = totalUtilizationPercentage;
            m_tTmpResourceAssignmentAnalysis.PercentAvailability = unscheduledHoursPercentage;

            m_tTmpResourceAssignmentAnalysis.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordByResourceProcess</Name>
				<Source><![CDATA[
    private void insertRecordByResourceProcess()
    {
        real hardUtilizationPercentage, softUtilizationPercentage;
        real totalUtilizationPercentage, unscheduledHoursPercentage;

        while (m_oSummaryQueryRun.next())
        {
            ResResourceAnalysisDayViewV2 companyAnalysis = m_oSummaryQueryRun.get(tableNum(ResResourceAnalysisDayViewV2));

            if (companyAnalysis.Capacity == 0)
            {
                hardUtilizationPercentage = 0;
                softUtilizationPercentage = 0;
                totalUtilizationPercentage = 0;
                unscheduledHoursPercentage = 0;
            }
            else
            {
                hardUtilizationPercentage = companyAnalysis.HardLocked / companyAnalysis.Capacity * percent100;
                softUtilizationPercentage = companyAnalysis.SoftLocked / companyAnalysis.Capacity * percent100;
                totalUtilizationPercentage = hardUtilizationPercentage + softUtilizationPercentage;
                unscheduledHoursPercentage = companyAnalysis.Remaining / companyAnalysis.Capacity * percent100;
            }

            m_tTmpResourceAssignmentAnalysis.Description = companyAnalysis.ResourceCategoryDescription;
            m_tTmpResourceAssignmentAnalysis.ResourceCategoryId = companyAnalysis.ResourceCategoryId;
            m_tTmpResourceAssignmentAnalysis.Capacity = companyAnalysis.Capacity;
            m_tTmpResourceAssignmentAnalysis.HardCommit = companyAnalysis.HardLocked;
            m_tTmpResourceAssignmentAnalysis.SoftCommit = companyAnalysis.SoftLocked;
            m_tTmpResourceAssignmentAnalysis.Availability = companyAnalysis.Remaining;
            m_tTmpResourceAssignmentAnalysis.PercentHard = hardUtilizationPercentage;
            m_tTmpResourceAssignmentAnalysis.PercentSoft = softUtilizationPercentage;
            m_tTmpResourceAssignmentAnalysis.PercentTotal = totalUtilizationPercentage;
            m_tTmpResourceAssignmentAnalysis.PercentAvailability = unscheduledHoursPercentage;

            m_tTmpResourceAssignmentAnalysis.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>