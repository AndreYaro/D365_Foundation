<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityManagementBlockHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityManagementBlockHandler</c> class handles all process blocking events.
/// </summary>
final class InventQualityManagementBlockHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockProductionEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles process blocking for production end.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> record.
    /// </param>
    public static void blockProductionEnd(ProdTable _prodTable)
    {
        PmfProdCoBy prodCoBy;

        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_prodTable, InventTestBlockProcess::End);
        while select prodCoBy
            where  prodCoBy.ProdId      == _prodTable.ProdId
        {
            InventQualityManagementBlock::blockPerQualityAssociations(prodCoBy, InventTestBlockProcess::End);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockProductionReportFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles process blocking for production report as finished.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> record.
    /// </param>
    public static void blockProductionReportFinished(ProdTable _prodTable)
    {
        PmfProdCoBy prodCoBy;

        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_prodTable, InventTestBlockProcess::ReportFinished);
        while select prodCoBy
            where  prodCoBy.ProdId      == _prodTable.ProdId
        {
            InventQualityManagementBlock::blockPerQualityAssociations(prodCoBy, InventTestBlockProcess::ReportFinished);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockPurchaseInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a purchase invoice.
    /// </summary>
    /// <param name="_purchLine">
    ///    A <c>PurchLine</c> buffer.
    /// </param>
    public static void blockPurchaseInvoice(PurchLine _purchLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_purchLine, InventTestBlockProcess::Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockPurchaseProductReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a purchase product receipt.
    /// </summary>
    /// <param name="_purchLine">
    ///    A <c>PurchLine</c> buffer.
    /// </param>
    public static void blockPurchaseProductReceipt(PurchLine _purchLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_purchLine, InventTestBlockProcess::ProductReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockPurchaseReceiptsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a purchase receipt list.
    /// </summary>
    /// <param name="_purchLine">
    ///    A <c>PurchLine</c> buffer.
    /// </param>
    public static void blockPurchaseReceiptsList(PurchLine _purchLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_purchLine, InventTestBlockProcess::ReceiptsList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockQuarantineEnd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a quarantine end.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    An <c>InventQuarantineOrder</c> buffer.
    /// </param>
    public static void blockQuarantineEnd(InventQuarantineOrder _inventQuarantineOrder)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_inventQuarantineOrder, InventTestBlockProcess::End);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockQuarantineReportFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a quarantine report as finished.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    An <c>InventQuarantineOrder</c> buffer.
    /// </param>
    public static void blockQuarantineReportFinished(InventQuarantineOrder _inventQuarantineOrder)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_inventQuarantineOrder, InventTestBlockProcess::ReportFinished);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockRouteOprReportFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a route operation report as finished.
    /// </summary>
    /// <param name="_prodId">
    ///    A <c>ProdId</c> value.
    /// </param>
    /// <param name="_oprNum">
    ///    An <c>OprNum</c> value of route operations being updated.
    /// </param>
    /// <param name="_onlySecondary">
    ///    A Boolean value that describes route operations being updated.
    /// </param>
    /// <param name="_reverse">
    ///    A Boolean value that describes route operations being updated.
    /// </param>
    public static void blockRouteOprReportFinished(
        ProdId    _prodId,
        OprNum    _oprNum,
        boolean   _onlySecondary,
        boolean   _reverse)
    {
        ProdRoute   prodRoute;

        if (_reverse || !InventParameters::find().UseQualityManagement)
        {
            return;
        }

        while select prodRoute
               where prodRoute.ProdId          == _prodId                                                          &&
                    ((prodRoute.OprNum         == _oprNum)                                     || !_oprNum)        &&
                    ((prodRoute.OprPriority    != RouteOprPriority::Primary && _onlySecondary) || !_onlySecondary) &&
                    (prodRoute.OprFinished     == NoYes::No)
        {
            InventQualityManagementBlock::blockPerQualityAssociations(prodRoute, InventTestBlockProcess::ReportFinished);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a sales invoice.
    /// </summary>
    /// <param name="_salesLine">
    ///    A <c>SalesLine</c> buffer.
    /// </param>
    public static void blockSalesInvoice(SalesLine _salesLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_salesLine, InventTestBlockProcess::Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockSalesPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a sales packing slip.
    /// </summary>
    /// <param name="_salesLine">
    ///    A <c>SalesLine</c> buffer.
    /// </param>
    public static void blockSalesPackingSlip(SalesLine _salesLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_salesLine, InventTestBlockProcess::PackingSlip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockSalesPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles process blocking for a sales packing slip.
    /// </summary>
    /// <param name="_salesLine">
    ///    A <c>SalesLine</c> buffer.
    /// </param>
    public static void blockSalesPickingList(SalesLine _salesLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementBlock::blockPerQualityAssociations(_salesLine, InventTestBlockProcess::PickingList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>