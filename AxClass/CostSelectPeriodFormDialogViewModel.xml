<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSelectPeriodFormDialogViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CostSelectPeriodFormDialogViewModel</c> is a form view model for selecting a date inverval code, from date and to date.
/// </summary>
public class CostSelectPeriodFormDialogViewModel
{
    CostSelectPeriodModel   selectPeriodModel;
    FormStringControl       dateCodeControl;
    FormDateControl         fromDateControl,
                            toDateControl;

    private const str       blankMaxDateLabel = '\t';  // A tab will display a max data as blank

    CostICostSelectPeriodStorage periodStorage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>redrawFormDateControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redraws FormDateControl controls.
    /// </summary>
    /// <remarks>
    /// This method is used to remove "Warning" icon displayed inside the <c>FormDateControl</c> control. "Warning" icon appears when
    /// user sets invalid date period. After he corrects the period, <c>FormDateControl</c> control should be drawn without this icon.
    /// </remarks>
    /// <param name = "control">
    /// The instance of the <c>FormDateControl</c> to redraw.
    /// </param>
    private static void redrawFormDateControl(FormDateControl control)
    {
        // Re-setting value enforces redrawing control.
        control.dateValue(control.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void parmDateCode(DateCode _dateCode)
    {
        dateCodeControl.text(_dateCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void parmFromDate(FromDate _fromDate)
    {
        fromDateControl.dateValue(_fromDate);
        // If the date period was previously invalid, "Warning" icon is displayed inside one of the date period controls.
        // When user sets new period properly, "Warning" icon should disappear (only toDateControl field has to be redrawn, because
        // value of fromDateControl has just been set).
        CostSelectPeriodFormDialogViewModel::redrawFormDateControl(toDateControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void parmToDate(ToDate _toDate)
    {
        toDateControl.dateValue(_toDate);
        // If the date period was previously invalid, "Warning" icon is displayed inside one of the date period controls.
        // When user sets new period properly, "Warning" icon should disappear (only fromDateControl field has to be redrawn, because
        // value of toDateControl has just been set).
        CostSelectPeriodFormDialogViewModel::redrawFormDateControl(fromDateControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCodeOnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnModified event for the <c>DateCode</c>.
    /// </summary>
    /// <param name = "_sender">
    /// The instance of the <c>FormControl</c> rasing the event.
    /// </param>
    /// <param name = "_e">
    /// The instance of the <c>FormControlEventArgs</c>.
    /// </param>
    private void dateCodeOnModified(FormControl _sender, FormControlEventArgs _e)
    {
        selectPeriodModel.parmDateCode(_sender.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateOnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnModified event for the <c>FromDate</c>.
    /// </summary>
    /// <param name = "_sender">
    /// The instance of the <c>FormControl</c> rasing the event.
    /// </param>
    /// <param name = "_e">
    /// The instance of the <c>FormControlEventArgs</c>.
    /// </param>
    private void fromDateOnModified(FormControl _sender, FormControlEventArgs _e)
    {
        var sender = _sender as FormDateControl;

        selectPeriodModel.parmFromDate(sender.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateOnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnModified event for the <c>ToDate</c>.
    /// </summary>
    /// <param name = "_sender">
    /// The instance of the <c>FormControl</c> raising the event.
    /// </param>
    /// <param name = "_e">
    /// The instance of the <c>FormControlEventArgs</c>.
    /// </param>
    private void toDateOnModified(FormControl _sender, FormControlEventArgs _e)
    {
        var sender = _sender as FormDateControl;

        selectPeriodModel.parmToDate(sender.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the form.
    /// </summary>
    /// <param name = "_sender">
    /// The instance of the <c>FormControl</c> raising the event.
    /// </param>
    /// <param name = "_e">
    /// The instance of the <c>FormControlEventArgs</c>.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void validateOnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        this.saveState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current state.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void saveState()
    {
        selectPeriodModel.validate();
        periodStorage.setPeriod(selectPeriodModel.getState());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view model.
    /// </summary>
    /// <param name = "_periodStorage">
    /// The implementation of the <c>CostICostSelectPeriodStorage</c> interface used to provide the initial state and notify about state changes.
    /// </param>
    /// <param name = "_dateCodeControl">
    /// The instance of the <c>FormStringControl</c> class implementing the <c>DateCode</c>.
    /// </param>
    /// <param name = "_fromDateControl">
    /// The instance of the <c>FormDateControl</c> class implementing the <c>FromDate</c>.
    /// </param>
    /// <param name = "_toDateControl">
    /// The instance of the <c>FormDateControl</c> class implementing the <c>ToDate</c>.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initialize(
        CostICostSelectPeriodStorage    _periodStorage,
        FormStringControl               _dateCodeControl,
        FormDateControl                 _fromDateControl,
        FormDateControl                 _toDateControl)
    {
        periodStorage = _periodStorage;

        dateCodeControl = _dateCodeControl;
        fromDateControl = _fromDateControl;
        toDateControl   = _toDateControl;
        dateCodeControl.OnModified += eventhandler(this.dateCodeOnModified);
        fromDateControl.OnModified += eventhandler(this.fromDateOnModified);
        toDateControl.OnModified   += eventhandler(this.toDateOnModified);

        toDateControl.maxDateLabel(blankMaxDateLabel);

        selectPeriodModel = CostSelectPeriodModel::construct();
        selectPeriodModel.notifyDateCodeChange+=eventhandler(this.parmDateCode);
        selectPeriodModel.notifyFromDateChange+=eventhandler(this.parmFromDate);
        selectPeriodModel.notifyToDateChange+=eventhandler(this.parmToDate);

        if (periodStorage)
        {
            selectPeriodModel.setState(periodStorage.getPeriod());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CostSelectPeriodFormViewModel</c> class.
    /// </summary>
    /// <param name = "_dateCodeControl">
    /// The instance of the <c>FormStringControl</c> implementing the <c>DateCode</c>.
    /// </param>
    /// <param name = "_fromDateControl">
    /// The instance of the <c>FormDateControl</c> implementing the <c>FromDate</c>.
    /// </param>
    /// <param name = "_toDateControl">
    /// The instance of the <c>FormDateControl</c> implementing the <c>ToDate</c>.
    /// </param>
    /// <returns>
    /// An instance of <c>CostSelectPeriodFormViewModel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CostSelectPeriodFormDialogViewModel construct(
        CostICostSelectPeriodStorage    _formCaller,
        FormStringControl               _dateCodeControl,
        FormDateControl                 _fromDateControl,
        FormDateControl                 _toDateControl)
    {
        CostSelectPeriodFormDialogViewModel viewModel = new CostSelectPeriodFormDialogViewModel();

        viewModel.initialize(_formCaller,
                             _dateCodeControl,
                             _fromDateControl,
                             _toDateControl);

        return viewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodToDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a date interval representating the period.
    /// </summary>
    /// <returns>A <c>DateInterval</c> representation of the period.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DateInterval periodToDateInterval()
    {
        return periodStorage.getPeriod().asDateInterval();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
