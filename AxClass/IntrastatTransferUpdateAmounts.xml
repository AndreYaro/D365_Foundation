<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferUpdateAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntrastatTransferUpdateAmounts</c> class provides recalculation of values on the <c>Intrastat</c> cursor according Intrastat reporting currency.
/// </summary>
internal class IntrastatTransferUpdateAmounts
{
    private Intrastat intrastat;
    private CurrencyCode intrastatCurrencyCode;
    private CurrencyCode transactionCurrencyCode;
    private CurrencyCode accountingCurrencyCode;

    private const container Cur2AccFields = [
                                             [fieldNum(Intrastat, AmountCurOrig), fieldNum(Intrastat, AmountMST)],
                                             [fieldNum(Intrastat, StatisticalValueCurOrig), fieldNum(Intrastat, StatisticalValue)],
                                             [fieldNum(Intrastat, InvoiceMarkupCurOrig), fieldNum(Intrastat, InvoiceMarkupMst)],
                                             [fieldNum(Intrastat, MarkupCurOrig), fieldNum(Intrastat, Markup)]
                                            ];

    private const container Cur2CurFields = [
                                             [fieldNum(Intrastat, AmountMSTOrig), fieldNum(Intrastat, AmountCur)],
                                             [fieldNum(Intrastat, InvoiceMarkupMSTOrig), fieldNum(Intrastat, InvoiceMarkupCur)]
                                            ];

    private const container Acc2AccFields = [
                                             [fieldNum(Intrastat, AmountMSTOrig), fieldNum(Intrastat, AmountMST)],
                                             [fieldNum(Intrastat, StatisticalValueMSTOrig), fieldNum(Intrastat, StatisticalValue)],
                                             [fieldNum(Intrastat, InvoiceMarkupMSTOrig), fieldNum(Intrastat, InvoiceMarkupMST)],
                                             [fieldNum(Intrastat, MarkupMSTOrig), fieldNum(Intrastat, Markup)]
                                            ];


    private static const container Source2OrigFields = [
                                             [fieldNum(Intrastat, AmountCur), fieldNum(Intrastat, AmountCurOrig)],
                                             [fieldNum(Intrastat, AmountMST), fieldNum(Intrastat, AmountMSTOrig)],
                                             [fieldNum(Intrastat, CurrencyCode), fieldNum(Intrastat, CurrencyCodeOrig)],
                                             [fieldNum(Intrastat, InvoiceMarkupCur), fieldNum(Intrastat, InvoiceMarkupCurOrig)],
                                             [fieldNum(Intrastat, InvoiceMarkupMST), fieldNum(Intrastat, InvoiceMarkupMSTOrig)],
                                             [fieldNum(Intrastat, Markup), fieldNum(Intrastat, MarkupMSTOrig)],
                                             [fieldNum(Intrastat, MarkupCur), fieldNum(Intrastat, MarkupCurOrig)],
                                             [fieldNum(Intrastat, StatisticalValueCur), fieldNum(Intrastat, StatisticalValueCurOrig)],
                                             [fieldNum(Intrastat, StatisticalValue), fieldNum(Intrastat, StatisticalValueMSTOrig)]
    ];


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>recalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates values of fields from one currency to another.
    /// </summary>
    /// <param name = "_fieldMap">The container of fields IDs [ from, to ] pairs to recalculate amounts.</param>
    /// <param name = "_fromCurrencyCode">Origin currency code.</param>
    /// <param name = "_toCurrencyCode">Target currency code.</param>
    private void recalc(container _fieldMap, CurrencyCode _fromCurrencyCode, CurrencyCode _toCurrencyCode)
    {
        int fieldsQty = conLen(_fieldMap);
        for (int i = 1; i <= fieldsQty; i++)
        {
            FieldId fieldIdFrom, fieldIdTo;
            [fieldIdFrom, fieldIdTo] = conPeek(_fieldMap, i);
            
            Amount amount;
            if (_fromCurrencyCode == accountingCurrencyCode)
            {
                intrastat.(fieldIdTo) = CurrencyExchangeHelper::curAmount(intrastat.(fieldIdFrom), _toCurrencyCode, intrastat.TransDate);
            }
            else
            {
                intrastat.(fieldIdTo) = CurrencyExchangeHelper::curAmount2CurAmount(intrastat.(fieldIdFrom), _fromCurrencyCode, _toCurrencyCode, intrastat.TransDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyValue</Name>
				<Source><![CDATA[
    private static void copyValue(Intrastat _intrastat, container _fieldMap)
    {
        int fieldsQty = conLen(_fieldMap);
        for (int i = 1; i <= fieldsQty; i++)
        {
            FieldId fieldIdFrom, fieldIdTo;
            [fieldIdFrom, fieldIdTo] = conPeek(_fieldMap, i);
            
            _intrastat.(fieldIdTo) = _intrastat.(fieldIdFrom);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanValue</Name>
				<Source><![CDATA[
    private static void cleanValue(Intrastat _intrastat, container _fieldMap)
    {
        int fieldsQty = conLen(_fieldMap);
        for (int i = 1; i <= fieldsQty; i++)
        {
            FieldId dummy, fieldIdTo;
            [dummy, fieldIdTo] = conPeek(_fieldMap, i);
            
            _intrastat.(fieldIdTo) = Global::nullValue(_intrastat.(fieldIdTo));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcCompanyAmountsFromMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates accounting amounts from accounting currency to Intrastat reporting currency.
    /// This method should be used in case Transaction currency amount are anot filled in (for example for records with Transfer order origin).
    /// </summary>    
    public void recalcCompanyAmountsFromMST()
    {
        this.recalc(Acc2AccFields, accountingCurrencyCode, intrastatCurrencyCode);

        // StatisticalAdjustmentAmount does not support idempotence
        intrastat.StatisticalAdjustmentAmount = CurrencyExchangeHelper::curAmount2CurAmount(intrastat.StatisticalAdjustmentAmount, accountingCurrencyCode, intrastatCurrencyCode, intrastat.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcCompanyAmountsFromCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates accounting amounts from accounting currency to Intrastat reporting currency.
    /// It is preferable recalculation method from accounting amounts.
    /// </summary>
    public void recalcCompanyAmountsFromCur()
    {
        // copy from accounting values, otherwise copy or recalculate from transaction values
        if (intrastatCurrencyCode == accountingCurrencyCode)
        {
            this.recalc(Acc2AccFields, accountingCurrencyCode, intrastatCurrencyCode);
        }
        else 
        {
            this.recalc(Cur2AccFields, transactionCurrencyCode, intrastatCurrencyCode);
        }

        // StatisticalAdjustmentAmount does not support idempotence
        intrastat.StatisticalAdjustmentAmount = CurrencyExchangeHelper::curAmount2CurAmount(intrastat.StatisticalAdjustmentAmount, accountingCurrencyCode, intrastatCurrencyCode, intrastat.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcTransAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates transaction amounts to Intrastat reporting currency.
    /// It is preferable recalculation method from accounting amounts.
    /// </summary>
    public void recalcTransAmounts()
    {
        // copy from accounting values, otherwise copy or recalculate from transaction values
        if (intrastat.CurrencyCodeOrig != transactionCurrencyCode)
        {
            this.recalc(Cur2CurFields, intrastat.CurrencyCodeOrig, transactionCurrencyCode);
        }
        else
        {
            IntrastatTransferUpdateAmounts::cleanValue(intrastat, Cur2CurFields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>presaveOrigValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves current field values into dedicated fields.
    /// </summary>
    /// <param name = "_intrastat">The <c>Intrastat</c> curesor.</param>
    public static void presaveOrigValues(Intrastat _intrastat)
    {
        IntrastatTransferUpdateAmounts::copyValue(_intrastat, IntrastatTransferUpdateAmounts::Source2OrigFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromIntrastat</Name>
				<Source><![CDATA[
    public static IntrastatTransferUpdateAmounts constructFromIntrastat(Intrastat _intrastat)
    {
        IntrastatTransferUpdateAmounts intrastatTransferUpdateAmounts = new IntrastatTransferUpdateAmounts();

        intrastatTransferUpdateAmounts.intrastat = _intrastat;
        intrastatTransferUpdateAmounts.intrastatCurrencyCode = _intrastat.CompanyIntrastatReportCurrencyCode;
        intrastatTransferUpdateAmounts.accountingCurrencyCode = Ledger::accountingCurrency();
        intrastatTransferUpdateAmounts.transactionCurrencyCode = _intrastat.CurrencyCode;

        return intrastatTransferUpdateAmounts;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>