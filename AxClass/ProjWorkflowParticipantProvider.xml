<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWorkflowParticipantProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjWorkflowParticipantProvider implements WorkflowParticipantProvider
{
    const str ProjectSales = 'ProjectSales';
    const str ProjectManager = 'ProjectManager';
    const str ProjectController = 'ProjectController';
    const str DepartmentOwner = 'DepartmentOwner';
    const str CostCenterOwner = 'CostCenterOwner';
    const str PurposeOwner = 'PurposeOwner';
    const str DepartManager = 'aaDepartment Manager';
    const str Arhitect = 'aaArhitect';

    ProjTable               projTable;
    PSAHcmWorkerExtension	tpsaHcmWorkerExtension;
    boolean                 isProjectEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParticipantTokens</Name>
				<Source><![CDATA[
    public WorkflowParticipantTokenList getParticipantTokens()
    {
        DimensionAttribute  dimensionAttribute;

        WorkflowParticipantTokenList userGroups = WorkflowParticipantTokenList::construct();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            userGroups.add(DepartManager, "@PSA209");
            userGroups.add(Arhitect, "@PSA10264");
        }

        userGroups.add(ProjectSales,      "@SYS79867");
        userGroups.add(ProjectManager,    "@SYS70488");
        userGroups.add(ProjectController, "@SYS92681");

        while select Name from dimensionAttribute
        {
            userGroups.add(dimensionAttribute.Name, dimensionAttribute.Name);
        }

        return userGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    public WorkflowUserList resolve(WorkflowContext _context, WorkflowParticipantToken _participantTokenName)
    {
        WorkflowUserList        userList = WorkflowUserList::construct();

        if (!_participantTokenName)
        {
            throw error("@SYS105453");
        }

        isProjectEnabled = Project::Enabled();

        switch (_context.parmTableId())
        {
            case tableNum(TSTimesheetTable):
                this.resolveForTSTimesheetTable(_context.parmRecId());
                break;

            case tableNum(TSTimesheetLine):
                this.resolveForTSTimesheetLine(_context.parmRecId());
                break;

            case tableNum(TrvExpTable):
                this.resolveForTrvExpTable(_context.parmRecId());
                break;
        }

        if (this.parmProjTable().RecId)
        {
            switch (_participantTokenName)
            {
                case Arhitect:
                    if (isProjectEnabled)
                    {
                        userList.add(DirPersonUserEx::worker2UserId(this.parmProjTable().WorkerPSAArchitect));
                    }
                    break;

                case DepartManager:
                    if (isProjectEnabled)
                    {
                        userList.add(DirPersonUserEx::worker2UserId(this.parmPSAHcmWorkerExtension().SupervisorWorker));
                    }
                    break;

                case ProjectSales:
                    userList.add(DirPersonUserEx::worker2UserId(this.parmProjTable().WorkerResponsibleSales));
                    break;

                case ProjectManager:
                    userList.add(DirPersonUserEx::worker2UserId(this.parmProjTable().WorkerResponsible));
                    break;

                case ProjectController:
                    userList.add(DirPersonUserEx::worker2UserId(this.parmProjTable().WorkerResponsibleFinancial));
                    break;

                default :
                    this.resolveDimension(_participantTokenName, userList, this.parmProjTable().DefaultDimension);
            }
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveDimension</Name>
				<Source><![CDATA[
    private void resolveDimension(Name _name, WorkflowUserList _userList, DimensionDefault _defaultDimension)
    {
        DimensionAttribute                          da;
        DimensionAttributeValue                     dav;
        DimensionAttributeValueSet                  davs;
        DimensionAttributeValueSetItem              davsi;
        DimensionAttrValueLedgerOverride            davlo;

        int64                                       owner = 0;

        select RecId from davs
            where davs.RecId == _defaultDimension
            join DimensionAttributeValueSet from davsi where davs.RecId == davsi.DimensionAttributeValueSet
            join Owner, RecId from dav where davsi.DimensionAttributeValue == dav.RecId
            join Name, RecId from da where da.RecId == dav.DimensionAttribute && da.Name == _name
            outer join Owner, RecId from davlo where davlo.DimensionAttributeValue == dav.RecId;

        owner = davlo.Owner ? davlo.Owner : dav.Owner;
        _userList.add(DirPersonUserEx::worker2UserId(owner));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjWorkflowParticipantProvider construct()
    {
        return new ProjWorkflowParticipantProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    public ProjTable parmProjTable(ProjTable _projTable = projTable)
    {
        projTable = _projTable;
        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSAHcmWorkerExtension</Name>
				<Source><![CDATA[
    public PSAHcmWorkerExtension parmPSAHcmWorkerExtension(PSAHcmWorkerExtension _tpsaHcmWorkerExtension= tpsaHcmWorkerExtension)
    {
        tpsaHcmWorkerExtension= _tpsaHcmWorkerExtension;
        return tpsaHcmWorkerExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveForTSTimesheetTable</Name>
				<Source><![CDATA[
    private void resolveForTSTimesheetTable(RecId _contextRecId)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tablenum(TSTimesheetTable));
        TSTimesheetTable tsTimesheetTable = TSTimesheetTable::findRecId(_contextRecId);
        qbds.addRange(fieldNum(TSTimesheetLine, TimesheetNbr)).value(queryValue(tsTimesheetTable.TimesheetNbr));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            TSTimesheetLine tsTimesheetLine = queryRun.get(tableNum(TSTimesheetLine));

            if (tsTimesheetLine.RecId != 0)
            {
                changecompany(tsTimesheetLine.ProjectDataAreaId)
                {
                    this.parmProjTable(ProjTable::find(tsTimesheetLine.ProjId));

                    if (isProjectEnabled)
                    {
                        this.parmPSAHcmWorkerExtension(PSAHcmWorkerExtension::findByResource (tsTimesheetLine.Resource));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveForTSTimesheetLine</Name>
				<Source><![CDATA[
    private void resolveForTSTimesheetLine(RecId _contextRecId)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tablenum(TSTimesheetLine));
        qbds.addRange(fieldNum(TSTimesheetLine, RecId)).value(queryValue(_contextRecId));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            TSTimesheetLine tsTimesheetLine = queryRun.get(tableNum(TSTimesheetLine));

            if (tsTimesheetLine.RecId != 0)
            {
                changecompany(tsTimesheetLine.ProjectDataAreaId)
                {
                    this.parmProjTable(ProjTable::find(tsTimesheetLine.ProjId));

                    if (isProjectEnabled)
                    {
                        this.parmPSAHcmWorkerExtension(PSAHcmWorkerExtension::findByResource(tsTimesheetLine.Resource));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveForTrvExpTable</Name>
				<Source><![CDATA[
    private void resolveForTrvExpTable(RecId _contextRecId)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tablenum(TrvExpTable));
        qbds.addRange(fieldNum(TrvExpTable, RecId)).value(queryValue(_contextRecId));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            TrvExpTable trvExpTable = queryRun.get(tableNum(TrvExpTable));

            if (trvExpTable.RecId != 0)
            {
                changecompany(trvExpTable.InterCompanyLE)
                {
                    this.parmProjTable(ProjTable::find(trvExpTable.ProjId));

                    if (isProjectEnabled)
                    {
                        ResourceRecId resource = ResourceFacade::findByWorker(trvExpTable.CreatingWorker);

                        if (resource)
                        {
                            this.parmPSAHcmWorkerExtension(PSAHcmWorkerExtension::findByResource(resource));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>