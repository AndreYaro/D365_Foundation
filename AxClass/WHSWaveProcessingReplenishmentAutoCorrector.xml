<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveProcessingReplenishmentAutoCorrector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveProcessingReplenishmentCorrector</c> class is responsible for automatically correcting the wave related works
/// in certain scenarios that might happen during wave processing and are related to the replenishment work.
/// </summary>
public class WHSWaveProcessingReplenishmentAutoCorrector
{
    private WHSWaveTable waveTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lockReplenWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locks the open/in process replenishment work until current wave commits the transaction.
    /// </summary>
    /// <remarks>
    /// This makes sure that replenishment work is not completed or cancelled until the wave processing is done.
    /// </remarks>
    private void lockReplenWorkTable()
    {
        WHSWorkTable        replenWorkTable;
        WHSReplenWorkLink   replenWorkLink;
        WHSWorkTable        demandWorkTable;

        while select WorkId from replenWorkTable
            where replenWorkTable.WorkTransType == WHSWorkTransType::Replenishment
                && (replenWorkTable.WorkStatus == WHSWorkStatus::Open
                    || replenWorkTable.WorkStatus == WHSWorkStatus::InProcess)
            exists join replenWorkLink
                where replenWorkLink.ReplenWorkId == replenWorkTable.WorkId
                    && replenWorkLink.InventQty > 0
            exists join demandWorkTable
                where demandWorkTable.WaveId == waveTable.WaveId
                    && demandWorkTable.WorkBuildId == waveTable.WorkBuildId
                    && demandWorkTable.WorkId == replenWorkLink.DemandWorkId
        {
            WHSWorkTable replenWorkTableLock;
            select firstonly repeatableread replenWorkTableLock
                where replenWorkTableLock.WorkId == replenWorkTable.WorkId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>satisfyDemandWorkLinesForClosedReplenWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Satisfies the demand work lines for replenishment work that got closed during the current wave processing.
    /// </summary>
    private void satisfyDemandWorkLinesForClosedReplenWork()
    {
        WHSWorkTable        replenWorkTable;
        WHSReplenWorkLink   replenWorkLink;
        WHSWorkTable        demandWorkTable;

        while select replenWorkTable
            where replenWorkTable.WorkStatus == WHSWorkStatus::Closed
            exists join replenWorkLink
                where replenWorkLink.InventQty > 0
                    && replenWorkLink.ReplenWorkId == replenWorkTable.WorkId
                exists join demandWorkTable
                    where demandWorkTable.WaveId == waveTable.WaveId
                        && demandWorkTable.WorkBuildId == waveTable.WorkBuildId
                        && demandWorkTable.WorkId == replenWorkLink.DemandWorkId
        {
            using (WHSSatisfyDemandWorkLineContext context = WHSSatisfyDemandWorkLineContext::newFromWorkBuildId(waveTable.WorkBuildId))
            {
                replenWorkTable.satisfyDemandWorkLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReplenWorkNotCancelledCombined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that replenishment work linked to work created during wave processing still exists and is not cancelled/combined.
    /// </summary>
    private void checkReplenWorkNotCancelledCombined()
    {
        WHSReplenWorkLink   replenWorkLink;
        WHSWorkTable        demandWorkTable;
        WHSWorkLine         replenWorkLine;

        select firstonly RecId from replenWorkLink
            where replenWorkLink.InventQty > 0
            exists join demandWorkTable
                where demandWorkTable.WaveId == waveTable.WaveId
                    && demandWorkTable.WorkBuildId == waveTable.WorkBuildId
                    && demandWorkTable.WorkId == replenWorkLink.DemandWorkId
            exists join replenWorkLine
                where replenWorkLine.WorkId         == replenWorkLink.ReplenWorkId
                    && replenWorkLine.LineNum       == replenWorkLink.ReplenLineNum
                    && (replenWorkLine.WorkStatus    == WHSWorkStatus::Cancelled
                        || replenWorkLine.WorkStatus == WHSWorkStatus::Combined);

        if (replenWorkLink)
        {
            throw error(strFmt("@WAX:WHSWaveProcessingValidateReplenishmentWorkIsCancelledError", waveTable.WaveId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTable</Name>
				<Source><![CDATA[
    public WHSWaveTable parmWaveTable(WHSWaveTable _waveTable = waveTable)
    {
        waveTable = _waveTable;

        return waveTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWaveProcessingReplenishmentAutoCorrector construct()
    {
        return new WHSWaveProcessingReplenishmentAutoCorrector();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSWaveProcessingReplenishmentAutoCorrector</c> class.
    /// </summary>
    /// <param name="_waveTable">
    /// A <c>WHSWaveTable</c> buffer used in the class.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSWaveProcessingReplenishmentAutoCorrector</c> class.
    /// </returns>
    public static WHSWaveProcessingReplenishmentAutoCorrector newFromWaveTable(WHSWaveTable _waveTable)
    {
        WHSWaveProcessingReplenishmentAutoCorrector corrector = WHSWaveProcessingReplenishmentAutoCorrector::construct();

        corrector.parmWaveTable(_waveTable);

        return corrector;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAutoCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the auto correction for the replenishment during wave processing.
    /// </summary>
    public void runAutoCorrection()
    {
        this.lockReplenWorkTable();
        this.checkReplenWorkNotCancelledCombined();
        this.satisfyDemandWorkLinesForClosedReplenWork();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>