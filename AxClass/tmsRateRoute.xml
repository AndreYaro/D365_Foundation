<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRateRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>tmsRateRoute</c> class is used to run apportionment over miscellaneous charges.
/// </summary>
public class tmsRateRoute
{
    protected TMSApportionedValue apportionedValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if apportioned value should be appended.
    /// </summary>
    /// <param name="_loadTable">
    /// The <c>WHSLoadTable></c> record.
    /// </param>
    /// <param name="_loadLine">
    /// The <c>WHSLoadLine</c> record.
    /// </param>
    /// <param name="_markUp">
    /// The <c>MarkupTrans</c> record.
    /// </param>
    /// <param name="_value">
    /// The <c>Amount</c> that we want to append.
    /// </param>
    /// <returns>
    /// The <c>Amount</c> that we can append.
    /// </returns>
    protected Amount appendValue(
        WHSLoadTable    _loadTable,
        WHSLoadLine     _loadLine,
        MarkupTrans     _markUp,
        Amount          _value
    )
    {
        Amount          ret;

        // Check appending value for load
        if (!TMSValueExcludedMiscCharges::find(_markUp.ModuleType, _markUp.MarkupCode))
        {
            ret += _loadLine.LoadId == _loadTable.LoadId ? _value : 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates miscellaneous charges at the Load level.
    /// </summary>
    /// <param name="_loadId">
    /// The load ID
    /// </param>
    /// <returns>
    /// Miscellaneous charges at the Load level
    /// </returns>
    protected Amount calcMiscChargesLoad(WHSLoadId _loadId)
    {
        Amount          ret;
        MarkupTrans     markupTrans;
        WHSLoadTable    loadTable = WHSLoadTable::find(_loadId);
        WHSLoadLine     loadLine;
        InventTransType transType;

        loadLine = WHSLoadLine::findFirstForLoadId(loadTable.LoadId);

        transType = InventTransOrigin::findByInventTransId(loadLine.InventTransId).ReferenceCategory;

        this.deleteApportionedValues(loadTable, TMSMiscCharges::Load);

        if (loadTable)
        {
            switch (transType)
            {
                // Sales Orders
            case InventTransType::Sales:
                ret += this.calcMiscChargesSOLoad(_loadId);
                break;

                // Purchase Orders
            case InventTransType::Purch:
                ret += this.calcMiscChargesPOLoad(_loadId);
                break;

                // Transfer Orders
            case InventTransType::TransferOrderShip:
                break;

            default:
                boolean implemented;
                [implemented, ret] = this.calcMiscChargesLoadDefault(transType, _loadId);
                if (!implemented)
                {
                    throw error(error::wrongUseOfFunction(funcName()));
                }
            }

            // Load Header
            while select ModuleType, MarkupCode, Value from markupTrans
                where markupTrans.TransTableId  == loadTable.TableId  &&
                      markupTrans.TransRecId    == loadTable.RecId
            {
                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                {
                    ret += markupTrans.Value;
                }
            }

            // Load Details
            while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
                join loadLine
                where markupTrans.TransTableId  == loadLine.TableId    &&
                      markupTrans.TransRecId    == loadLine.RecId      &&
                      loadLine.LoadId        == loadTable.LoadId
            {
                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                {
                    ret += this.calcWithMarkupCategory(markupTrans.MarkupCategory,
                                                       loadLine.InventQty,
                                                       this.lineValue(loadLine),
                                                       markupTrans.Value);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates miscellaneous charges at the Purchase Order level.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase order ID.
    /// </param>
    /// <returns>
    /// Miscellaneous charges at the Purchase Order level.
    /// </returns>
    protected Amount calcMiscChargesPO(PurchId _purchId)
    {
        Amount          ret;
        MarkupTrans     markupTrans;
        MarkupTrans     markupTrans2;
        WHSLoadTable    loadTable;
        WHSLoadLine     loadLine;
        WHSLoadLine     loadLine2;
        Amount          totalValue;
        Qty             totalQty;
        PurchTable      purchTable = PurchTable::find(_purchId);
        PurchLine       purchLine;
        WHSLoadId       prevId;
        Amount          lineChargeValue;

        if (purchTable)
        {
            this.deleteApportionedValues(purchTable, TMSMiscCharges::PurchaseOrder);

            ttsbegin;

            while select LoadId, Recid from loadTable
                order by LoadId
                join OrderNum, InventTransType, TransportRequest, LoadId from loadLine
                where loadLine.OrderNum         == purchTable.PurchId       &&
                      loadLine.InventTransType  == InventTransType::Purch   &&
                      loadLine.TransportRequest == NoYes::No                &&
                      loadTable.LoadId          == loadLine.LoadId
            {
                if (!prevId || prevId != loadTable.LoadId)
                {
                    totalQty   = 0;
                    totalValue = 0;

                    while select ItemId, InventQty, InventTransId, InventTransType, TransportRequest from loadLine2
                        where loadLine2.LoadId == loadTable.LoadId
                    {
                        totalQty   += loadLine2.InventQty;
                        totalValue += this.lineValue(loadLine2);
                    }

                    prevId = loadTable.LoadId;

                    // Load header
                    while select markupTrans
                        where markupTrans.TransTableId == loadTable.TableId &&
                              markupTrans.TransRecId   == loadTable.RecId
                    {
                        while select loadLine2
                            where loadLine2.LoadId == loadTable.LoadId
                        {
                            lineChargeValue = this.findOrCreateApportionedValue(purchTable,
                                                                                markupTrans,
                                                                                loadLine2,
                                                                                loadLine2.InventQty,
                                                                                totalQty,
                                                                                this.lineValue(loadLine2),
                                                                                totalValue,
                                                                                TMSMiscCharges::PurchaseOrder);

                            // Check to see if load line is related to purchase line on purchase table
                            // if not, this portion can be skipped
                            if (loadLine2.InventTransType   == InventTransType::Purch   &&
                                loadLine2.TransportRequest  == NoYes::No                &&
                                this.findRelatedLine(purchTable.PurchId, loadLine2.InventTransId, TMSMiscCharges::PurchaseOrder))
                            {
                                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                                {
                                    ret += lineChargeValue;
                                }
                            }
                        }
                    }

                    // Load Details
                    while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans2
                        join loadLine2
                        where loadLine2.LoadId              == loadTable.LoadId         &&
                              loadLine2.OrderNum            == purchTable.PurchId       &&
                              loadLine2.InventTransType     == InventTransType::Purch   &&
                              loadLine2.TransportRequest    == NoYes::No                &&
                              markupTrans2.TransTableId     == loadLine2.TableId        &&
                              markupTrans2.TransRecId       == loadLine2.RecId
                    {
                        if (!TMSValueExcludedMiscCharges::find(markupTrans2.ModuleType, markupTrans2.MarkupCode))
                        {
                            ret += this.calcWithMarkupCategory(markupTrans2.MarkupCategory,
                                                               loadLine2.InventQty,
                                                               this.lineValue(loadLine2),
                                                               markupTrans2.Value);
                        }
                    }
                }
            }

            // Purchase Header
            while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
                where markupTrans.TransTableId  == purchTable.TableId  &&
                      markupTrans.TransRecId    == purchTable.RecId
            {
                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                {
                    ret += this.calcWithMarkupCategory(markupTrans.MarkupCategory,
                                                       0,
                                                       this.lineValue(purchTable),
                                                       markupTrans.Value);
                }
            }

            // Purchase Details
            while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
                join purchLine
                where markupTrans.TransTableId  == purchLine.TableId    &&
                      markupTrans.TransRecId    == purchLine.RecId      &&
                      purchLine.PurchId         == purchTable.PurchId
            {
                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                {
                    ret += this.calcWithMarkupCategory(markupTrans.MarkupCategory,
                                                       purchLine.PurchQty,
                                                       this.lineValue(purchLine),
                                                       markupTrans.Value);
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesPOLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the miscellaneous charges of inbound load.
    /// </summary>
    /// <param name="_loadId">
    /// The load id.
    /// </param>
    /// <returns>
    /// The total miscellaneous charges for inbound load.
    /// </returns>
    protected Amount calcMiscChargesPOLoad(WHSLoadId _loadId)
    {
        WHSLoadTable    loadTable = WHSLoadTable::find(_loadId);
        WHSLoadLine     loadLine;
        WHSLoadLine     loadLine2;
        PurchTable      purchTable;
        PurchLine       purchLine;
        MarkupTrans     markupTrans;
        MarkupTrans     markupTrans2;

        TMSId           prevId;
        Qty             totalQty;
        Amount          totalValue;
        Amount          lineChargeValue;
        Amount          ret;
        Counter         purchaseOrderCounter;

        if (TMSRateRoutePerfOptimizationFlight::instance().isEnabled())
        {
            while select OrderNum, InventTransType, TransportRequest, LoadId from loadLine
                order by OrderNum
                where loadLine.InventTransType  == InventTransType::Purch   &&
                      loadLine.TransportRequest == NoYes::No                &&
                      loadTable.LoadId          == loadLine.LoadId
                join PurchId, TableId, RecId from purchTable
                    where purchTable.PurchId == loadLine.OrderNum
            {
                if (!prevId || prevId != purchTable.PurchId)
                {
                    totalQty   = 0;
                    totalValue = 0;

                    select sum(LineAmount), sum(PurchQty) from purchLine
                        where purchLine.PurchId == purchTable.PurchId;

                    totalQty   += purchLine.PurchQty;
                    totalValue += purchLine.LineAmount;

                    prevId = purchTable.PurchId;
                    purchaseOrderCounter++;

                    // Purchase header
                    while select markupTrans
                        where markupTrans.TransTableId == purchTable.TableId &&
                              markupTrans.TransRecId   == purchTable.RecId
                    {
                        while select purchLine
                            where purchLine.PurchId == purchTable.PurchId
                        {
                            lineChargeValue = this.findOrCreateApportionedValue(loadTable,
                                                                                markupTrans,
                                                                                purchLine,
                                                                                purchLine.PurchQty,
                                                                                totalQty,
                                                                                purchLine.LineAmount,
                                                                                totalValue,
                                                                                TMSMiscCharges::Load);

                            if (this.findRelatedLine(loadTable.LoadId, purchLine.InventTransId, TMSMiscCharges::Load))
                            {
                                while select loadLine2
                                    where loadLine2.InventTransId == purchLine.InventTransId
                                {
                                    ret += this.appendValue(loadTable,
                                                            loadLine2,
                                                            markupTrans,
                                                            this.findOrCreateApportionedValue(loadTable,
                                                                                              markupTrans,
                                                                                              loadLine2,
                                                                                              loadLine2.InventQty,
                                                                                              purchLine.PurchQty,
                                                                                              this.lineValue(loadLine2),
                                                                                              purchLine.LineAmount,
                                                                                              TMSMiscCharges::Load,
                                                                                              lineChargeValue,
                                                                                              purchLine));
                                }
                            }
                        }
                    }

                    // Purchase Details
                    while select InventTransId, PurchQty, LineAmount from purchLine
                        join markupTrans2
                        where purchLine.PurchId         == purchTable.PurchId   &&
                              markupTrans2.TransTableId == purchLine.TableId    &&
                              markupTrans2.TransRecId   == purchLine.RecId
                        join loadLine2
                            where loadLine2.InventTransId == purchLine.InventTransId
                               && loadLine2.LoadId == loadTable.LoadId
                    {
                        ret += this.appendValue(loadTable,
                                                loadLine2,
                                                markupTrans2,
                                                this.findOrCreateApportionedValue(loadTable,
                                                                                  markupTrans2,
                                                                                  loadLine2,
                                                                                  loadLine2.InventQty,
                                                                                  purchLine.PurchQty,
                                                                                  this.lineValue(loadLine2),
                                                                                  purchLine.LineAmount,
                                                                                  TMSMiscCharges::Load));
                    }
                }
            }
        }
        else
        {
            while select PurchId from purchTable
                order by PurchId
                join OrderNum, InventTransType, TransportRequest, LoadId from loadLine
                where loadLine.OrderNum         == purchTable.PurchId       &&
                      loadLine.InventTransType  == InventTransType::Purch   &&
                      loadLine.TransportRequest == NoYes::No                &&
                      loadTable.LoadId          == loadLine.LoadId
            {
                if (!prevId || prevId != purchTable.PurchId)
                {
                    totalQty   = 0;
                    totalValue = 0;

                    select sum(LineAmount), sum(PurchQty) from purchLine
                        where purchLine.PurchId == purchTable.PurchId;

                    totalQty   += purchLine.PurchQty;
                    totalValue += purchLine.LineAmount;

                    prevId = purchTable.PurchId;
                    purchaseOrderCounter++;

                    // Purchase header
                    while select markupTrans
                        where markupTrans.TransTableId == purchTable.TableId &&
                              markupTrans.TransRecId   == purchTable.RecId
                    {
                        while select purchLine
                            where purchLine.PurchId == purchTable.PurchId
                        {
                            lineChargeValue = this.findOrCreateApportionedValue(loadTable,
                                                                                markupTrans,
                                                                                purchLine,
                                                                                purchLine.PurchQty,
                                                                                totalQty,
                                                                                purchLine.LineAmount,
                                                                                totalValue,
                                                                                TMSMiscCharges::Load);

                            if (this.findRelatedLine(loadTable.LoadId, purchLine.InventTransId, TMSMiscCharges::Load))
                            {
                                while select loadLine2
                                    where loadLine2.InventTransId == purchLine.InventTransId
                                {
                                    ret += this.appendValue(loadTable,
                                                            loadLine2,
                                                            markupTrans,
                                                            this.findOrCreateApportionedValue(loadTable,
                                                                                              markupTrans,
                                                                                              loadLine2,
                                                                                              loadLine2.InventQty,
                                                                                              purchLine.PurchQty,
                                                                                              this.lineValue(loadLine2),
                                                                                              purchLine.LineAmount,
                                                                                              TMSMiscCharges::Load,
                                                                                              lineChargeValue,
                                                                                              purchLine));
                                }
                            }
                        }
                    }

                    // Purchase Details
                    while select InventTransId, PurchQty, LineAmount from purchLine
                        join markupTrans2
                        where purchLine.PurchId         == purchTable.PurchId   &&
                              markupTrans2.TransTableId == purchLine.TableId    &&
                              markupTrans2.TransRecId   == purchLine.RecId
                        join loadLine2
                            where loadLine2.InventTransId == purchLine.InventTransId
                               && loadLine2.LoadId == loadTable.LoadId
                    {
                        ret += this.appendValue(loadTable,
                                                loadLine2,
                                                markupTrans2,
                                                this.findOrCreateApportionedValue(loadTable,
                                                                                  markupTrans2,
                                                                                  loadLine2,
                                                                                  loadLine2.InventQty,
                                                                                  purchLine.PurchQty,
                                                                                  this.lineValue(loadLine2),
                                                                                  purchLine.LineAmount,
                                                                                  TMSMiscCharges::Load));
                    }
                }
            }
        }

        TMSInstrumentationLogger::instance(classStr(tmsRateRoute)).miscChargesActivities().logOrderCalculationResults(funcName(), loadTable.RecId, purchaseOrderCounter, totalQty, totalValue, ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesSO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates miscellaneous charges at the Sales Order level.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID.
    /// </param>
    /// <returns>
    /// Miscellaneous charges at the Sales Order level.
    /// </returns>
    protected Amount calcMiscChargesSO(SalesId _salesId)
    {
        Amount          ret;
        MarkupTrans     markupTrans;
        MarkupTrans     markupTrans2;
        WHSLoadTable    loadTable;
        WHSLoadLine     loadLine;
        WHSLoadLine     loadLine2;
        Amount          totalValue;
        Qty             totalQty;
        SalesTable      salesTable = SalesTable::find(_salesId);
        SalesLine       salesLine;
        TMSId           prevId;
        Amount          lineChargeValue;

        if (salesTable)
        {
            this.deleteApportionedValues(salesTable, TMSMiscCharges::SalesOrder);

            ttsbegin;

            while select LoadId, Recid from loadTable
                order by LoadId
                join OrderNum, InventTransType, TransportRequest, LoadId from loadLine
                where loadLine.OrderNum         == salesTable.SalesId       &&
                      loadLine.InventTransType  == InventTransType::Sales   &&
                      loadLine.TransportRequest == NoYes::No                &&
                      loadTable.LoadId          == loadLine.LoadId
            {
                if (!prevId || prevId != loadTable.LoadId)
                {
                    totalQty   = 0;
                    totalValue = 0;

                    while select ItemId, InventQty, InventTransId, InventTransType, TransportRequest from loadLine2
                        where loadLine2.LoadId == loadTable.LoadId
                    {
                        totalQty   += loadLine2.InventQty;
                        totalValue += this.lineValue(loadLine2);
                    }

                    prevId = loadTable.LoadId;

                    // Load header
                    while select markupTrans
                        where markupTrans.TransTableId == loadTable.TableId &&
                              markupTrans.TransRecId   == loadTable.RecId
                    {
                        while select loadLine2
                            where loadLine2.LoadId == loadTable.LoadId
                        {
                            lineChargeValue = this.findOrCreateApportionedValue(salesTable,
                                                                                markupTrans,
                                                                                loadLine2,
                                                                                loadLine2.InventQty,
                                                                                totalQty,
                                                                                this.lineValue(loadLine2),
                                                                                totalValue,
                                                                                TMSMiscCharges::SalesOrder);

                            // Check to see if load line is related to sales line on sales table
                            // if not, this portion can be skipped
                            if (loadLine2.InventTransType   == InventTransType::Sales &&
                                loadLine2.TransportRequest  == NoYes::No              &&
                                this.findRelatedLine(salesTable.SalesId, loadLine2.InventTransId, TMSMiscCharges::SalesOrder))
                            {
                                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                                {
                                    ret += lineChargeValue;
                                }
                            }
                        }
                    }

                    // Load Details
                    while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans2
                        join loadLine2
                        where loadLine2.LoadId              == loadTable.LoadId         &&
                              loadLine2.OrderNum            == salesTable.SalesId       &&
                              loadLine2.InventTransType     == InventTransType::Sales   &&
                              loadLine2.TransportRequest    == NoYes::No                &&
                              markupTrans2.TransTableId     == loadLine2.TableId        &&
                              markupTrans2.TransRecId       == loadLine2.RecId
                    {
                        if (!TMSValueExcludedMiscCharges::find(markupTrans2.ModuleType, markupTrans2.MarkupCode))
                        {
                            ret += this.calcWithMarkupCategory(markupTrans2.MarkupCategory,
                                                               loadLine2.InventQty,
                                                               this.lineValue(loadLine2),
                                                               markupTrans2.Value);
                        }
                    }
                }
            }

            // Sales Header
            while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
                where markupTrans.TransTableId  == salesTable.TableId  &&
                      markupTrans.TransRecId    == salesTable.RecId
            {
                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                {
                    ret += this.calcWithMarkupCategory(markupTrans.MarkupCategory,
                                                       0,
                                                       this.lineValue(salesTable),
                                                       markupTrans.Value);
                }
            }

            // Sales Details
            while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
                join SalesQty, LineAmount from salesLine
                where markupTrans.TransTableId  == salesLine.TableId    &&
                      markupTrans.TransRecId    == salesLine.RecId      &&
                      salesLine.SalesId         == salesTable.SalesId
            {
                if (!TMSValueExcludedMiscCharges::find(markupTrans.ModuleType, markupTrans.MarkupCode))
                {
                    ret += this.calcWithMarkupCategory(markupTrans.MarkupCategory,
                                                       salesLine.SalesQty,
                                                       salesLine.LineAmount,
                                                       markupTrans.Value);
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesSOLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the miscellaneous charges of outbound load.
    /// </summary>
    /// <param name="_loadId">
    /// The load id.
    /// </param>
    /// <returns>
    /// The total miscellaneous charges for outbound load.
    /// </returns>
    protected Amount calcMiscChargesSOLoad(WHSLoadId _loadId)
    {
        WHSLoadTable    loadTable = WHSLoadTable::find(_loadId);
        WHSLoadLine     loadLine;
        WHSLoadLine     loadLine2;
        SalesTable      salesTable;
        SalesLine       salesLine;
        MarkupTrans     markupTrans;
        MarkupTrans     markupTrans2;

        TMSId           prevId;
        RecId           prevRecId;
        Qty             totalQty;
        Amount          totalValue;
        Amount          lineChargeValue;
        Qty             adjTotalQty;
        Amount          adjTotalValue;
        Amount          ret;
        Counter         salesOrderCounter;

        var logger = TMSInstrumentationLogger::instance(classStr(tmsRateRoute));

        if (TMSRateRoutePerfOptimizationFlight::instance().isEnabled())
        {
            while select OrderNum, InventTransType, TransportRequest, LoadId from loadLine
                order by OrderNum
                where loadLine.InventTransType  == InventTransType::Sales   &&
                      loadLine.TransportRequest == NoYes::No                &&
                      loadLine.LoadId           == loadTable.LoadId
                join SalesId, TableId, RecId from salesTable
                    where salesTable.SalesId == loadLine.OrderNum
            {
                if (!prevId || prevId != salesTable.SalesId)
                {
                    totalQty   = 0;
                    totalValue = 0;

                    select sum(LineAmount), sum(SalesQty) from salesLine
                        where salesLine.SalesId == salesTable.SalesId;

                    totalQty   += salesLine.SalesQty;
                    totalValue += salesLine.LineAmount;

                    prevId = salesTable.SalesId;
                    salesOrderCounter++;

                    // Sales header
                    Counter markupTransSalesOrderCount;
                    while select markupTrans
                        where markupTrans.TransTableId == salesTable.TableId &&
                              markupTrans.TransRecId   == salesTable.RecId
                    {
                        while select salesLine
                            where salesLine.SalesId == salesTable.SalesId
                        {
                            markupTransSalesOrderCount++;

                            lineChargeValue = this.findOrCreateApportionedValue(loadTable,
                                                                            markupTrans,
                                                                            salesLine,
                                                                            salesLine.SalesQty,
                                                                            totalQty,
                                                                            salesLine.LineAmount,
                                                                            totalValue,
                                                                            TMSMiscCharges::Load);

                            if (this.findRelatedLine(loadTable.LoadId, salesLine.InventTransId, TMSMiscCharges::Load))
                            {
                                [adjTotalQty, adjTotalValue] = this.checkTotals(loadTable,
                                                                            markupTrans,
                                                                            salesLine,
                                                                            salesLine.SalesQty,
                                                                            salesLine.LineAmount,
                                                                            TMSMiscCharges::Load);
                                while select loadLine2
                                where loadLine2.InventTransId == salesLine.InventTransId
                                {
                                    ret += this.appendValue(loadTable,
                                                        loadLine2,
                                                        markupTrans,
                                                        this.findOrCreateApportionedValue(loadTable,
                                                                                          markupTrans,
                                                                                          loadLine2,
                                                                                          loadLine2.InventQty,
                                                                                          adjTotalQty,
                                                                                          this.lineValue(loadLine2),
                                                                                          adjTotalValue,
                                                                                          TMSMiscCharges::Load,
                                                                                          lineChargeValue,
                                                                                          salesLine));
                                }
                            }
                        }
                    }
                    logger.miscChargesActivities().logMarkupTransSalesOrderCount(markupTransSalesOrderCount);

                    // Sales Details
                    Counter markupTransSalesLineCount;
                    while select salesLine
                        join markupTrans2
                        where salesLine.SalesId         == salesTable.SalesId   &&
                              markupTrans2.TransTableId == salesLine.TableId    &&
                              markupTrans2.TransRecId   == salesLine.RecId
                        join loadLine2
                            where loadLine2.InventTransId == salesLine.InventTransId
                    {
                        markupTransSalesLineCount++;

                        if (!prevRecId || prevRecId != markupTrans2.RecId)
                        {
                            [adjTotalQty, adjTotalValue] = this.checkTotals(loadTable,
                                                                        markupTrans2,
                                                                        salesLine,
                                                                        salesLine.SalesQty,
                                                                        salesLine.LineAmount,
                                                                        TMSMiscCharges::Load);

                            prevRecId = markupTrans2.RecId;
                        }

                        ret += this.appendValue(loadTable,
                                            loadLine2,
                                            markupTrans2,
                                            this.findOrCreateApportionedValue(loadTable,
                                                                              markupTrans2,
                                                                              loadLine2,
                                                                              loadLine2.InventQty,
                                                                              adjTotalQty,
                                                                              this.lineValue(loadLine2),
                                                                              adjTotalValue,
                                                                              TMSMiscCharges::Load));
                    }

                    logger.miscChargesActivities().logMarkupTransSalesLineCount(markupTransSalesLineCount);
                }
            }
        }
        else
        {
            while select SalesId from salesTable
                order by salesId
                join OrderNum, InventTransType, TransportRequest, LoadId from loadLine
                    where loadLine.OrderNum         == salesTable.SalesId       &&
                          loadLine.InventTransType  == InventTransType::Sales   &&
                          loadLine.TransportRequest == NoYes::No                &&
                          loadLine.LoadId           == loadTable.LoadId
            {
                if (!prevId || prevId != salesTable.SalesId)
                {
                    totalQty   = 0;
                    totalValue = 0;

                    select sum(LineAmount), sum(SalesQty) from salesLine
                    where salesLine.SalesId == salesTable.SalesId;

                    totalQty   += salesLine.SalesQty;
                    totalValue += salesLine.LineAmount;

                    prevId = salesTable.SalesId;
                    salesOrderCounter++;

                    // Sales header
                    Counter markupTransSalesOrderCount;
                    while select markupTrans
                        where markupTrans.TransTableId == salesTable.TableId &&
                              markupTrans.TransRecId   == salesTable.RecId
                    {
                        while select salesLine
                            where salesLine.SalesId == salesTable.SalesId
                        {
                            markupTransSalesOrderCount++;

                            lineChargeValue = this.findOrCreateApportionedValue(loadTable,
                                                                            markupTrans,
                                                                            salesLine,
                                                                            salesLine.SalesQty,
                                                                            totalQty,
                                                                            salesLine.LineAmount,
                                                                            totalValue,
                                                                            TMSMiscCharges::Load);

                            if (this.findRelatedLine(loadTable.LoadId, salesLine.InventTransId, TMSMiscCharges::Load))
                            {
                                [adjTotalQty, adjTotalValue] = this.checkTotals(loadTable,
                                                                            markupTrans,
                                                                            salesLine,
                                                                            salesLine.SalesQty,
                                                                            salesLine.LineAmount,
                                                                            TMSMiscCharges::Load);
                                while select loadLine2
                                    where loadLine2.InventTransId == salesLine.InventTransId
                                {
                                    ret += this.appendValue(loadTable,
                                                        loadLine2,
                                                        markupTrans,
                                                        this.findOrCreateApportionedValue(loadTable,
                                                                                          markupTrans,
                                                                                          loadLine2,
                                                                                          loadLine2.InventQty,
                                                                                          adjTotalQty,
                                                                                          this.lineValue(loadLine2),
                                                                                          adjTotalValue,
                                                                                          TMSMiscCharges::Load,
                                                                                          lineChargeValue,
                                                                                          salesLine));
                                }
                            }
                        }
                    }
                    logger.miscChargesActivities().logMarkupTransSalesOrderCount(markupTransSalesOrderCount);

                    // Sales Details
                    Counter markupTransSalesLineCount;
                    while select salesLine
                        join markupTrans2
                        where salesLine.SalesId         == salesTable.SalesId   &&
                              markupTrans2.TransTableId == salesLine.TableId    &&
                              markupTrans2.TransRecId   == salesLine.RecId
                        join loadLine2
                            where loadLine2.InventTransId == salesLine.InventTransId
                    {
                        markupTransSalesLineCount++;

                        if (!prevRecId || prevRecId != markupTrans2.RecId)
                        {
                            [adjTotalQty, adjTotalValue] = this.checkTotals(loadTable,
                                                                        markupTrans2,
                                                                        salesLine,
                                                                        salesLine.SalesQty,
                                                                        salesLine.LineAmount,
                                                                        TMSMiscCharges::Load);

                            prevRecId = markupTrans2.RecId;
                        }

                        ret += this.appendValue(loadTable,
                                            loadLine2,
                                            markupTrans2,
                                            this.findOrCreateApportionedValue(loadTable,
                                                                              markupTrans2,
                                                                              loadLine2,
                                                                              loadLine2.InventQty,
                                                                              adjTotalQty,
                                                                              this.lineValue(loadLine2),
                                                                              adjTotalValue,
                                                                              TMSMiscCharges::Load));
                    }

                    logger.miscChargesActivities().logMarkupTransSalesLineCount(markupTransSalesLineCount);
                }
            }
        }

        logger.miscChargesActivities().logOrderCalculationResults(funcName(), loadTable.RecId, salesOrderCounter, totalQty, totalValue, ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesLoadDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the switch statement for calculating miscellaneous charges at the Load level providing an entry point for extenders.
    /// </summary>
    /// <param name = "_inventTransType">The inventTransType of the load being processed.</param>
    /// <param name = "_loadId">The load ID.</param>
    /// <returns>A boolean indicating that the method has been extended and the amount of the charges on source record associated with the load.</returns>
    protected container calcMiscChargesLoadDefault(
        InventTransType _inventTransType,
        WHSLoadId       _loadId)
    {
        return [false, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithMarkupCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the markup based on a given markup category.
    /// </summary>
    /// <param name="_markupCategory">
    ///    The markup category.
    /// </param>
    /// <param name="_qty">
    ///    The quantity.
    /// </param>
    /// <param name="_amount">
    ///    The amount.
    /// </param>
    /// <param name="_markupValue">
    ///    The markup value.
    /// </param>
    /// <returns>
    ///    The calculated markup amount.
    /// </returns>
    protected Amount calcWithMarkupCategory(
        MarkupCategory _markupCategory,
        Qty            _qty,
        Amount         _amount,
        Amount         _markupValue)
    {
        Amount ret;

        switch (_markupCategory)
        {
            case MarkupCategory::Pcs:
                ret += _markupValue * _qty;
                break;

            case MarkupCategory::Percent:
                ret += _amount * (_markupValue / 100);
                break;

            case MarkupCategory::Fixed:
                ret += _markupValue;
                break;

            case MarkupCategory::InterCompanyPercent:
                ret += _amount * (_markupValue / 100);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if apportioned level record is either shipped or routed. If either condition is met and the miscellaneous charge has not been applied the total qty and value to be apportioned must reduce.
    /// </summary>
    /// <param name="_topLevel">
    /// The <c>WHSLoadTable</c> record.
    /// </param>
    /// <param name="_markup">
    /// The <c>MarkupTrans</c> record.
    /// </param>
    /// <param name="_source">
    /// The <c>SalesLine</c> record.
    /// </param>
    /// <param name="_totalQty">
    /// The current total quantity.
    /// </param>
    /// <param name="_totalValue">
    /// The current total value amount.
    /// </param>
    /// <param name="_miscCharge">
    /// The <c>TMSMiscCharges</c> record.
    /// </param>
    /// <returns>
    /// Container with adjusted total quantity and value amount.
    /// </returns>
    protected container checkTotals(
        WHSLoadTable    _topLevel,
        MarkupTrans     _markup,
        SalesLine       _source,
        Qty             _totalQty,
        Amount          _totalValue,
        TMSMiscCharges  _miscCharge)
    {
        SalesLine   salesLine;
        WHSLoadLine loadLine;

        if (_miscCharge == TMSMiscCharges::Load)
        {
            WHSLoadTable loadTable;

            while select loadLine
                join loadTable
                    where loadTable.LoadId == loadLine.LoadId
                exists join salesLine
                    where salesLine.InventTransId == loadLine.InventTransId
                       && salesLine.RecId         == _source.RecId
                
            {
                if ((loadTable.isShipped()
                        || loadTable.isReceived())
                    && !TMSApportionedValue::find(_topLevel, loadLine, _markup))
                {
                    _totalQty   -= loadLine.InventQty;
                    _totalValue -= this.lineValue(loadLine);
                }
            }
        }

        return [_totalQty, _totalValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteApportionedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all records related to top level object, unless shipped.
    /// </summary>
    /// <param name="_source">
    /// The source record.
    /// </param>
    /// <param name="_levelType">
    /// The type of the passed source record.
    /// </param>
    protected void deleteApportionedValues(Common _source, TMSMiscCharges _levelType)
    {
        ttsbegin;

        while select forupdate apportionedValue
            where apportionedValue.TopLevelRecId == _source.RecId
                && apportionedValue.TopLevelTableId == _source.TableId
                && apportionedValue.MiscCharges == _levelType
        {
            WHSLoadTable loadTable;
            
            if  (apportionedValue.ApportionedLevelTableId == tableNum(WHSLoadLine))
            {
                loadTable = WHSLoadLine::findbyRecId(apportionedValue.ApportionedLevelRecId).whsLoadTable();
            }
            else if (apportionedValue.ApportionedLevelTableId == tableNum(WHSLoadTable))
            {
                loadTable = WHSLoadTable::findByRecId(apportionedValue.ApportionedLevelRecId);
            }

            if (loadTable.RecId != 0
                && (loadTable.isShipped()
                    || loadTable.isReceived()))
            {
                continue;
            }
            else
            {
                apportionedValue.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateApportionedValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates a record in the <c>TMSApportionedValue</c> table.
    /// </summary>
    /// <param name="_topLevel">
    ///    The top level record that the apportioned markup belongs to.
    /// </param>
    /// <param name="_markup">
    ///    The <c>MarkupTrans</c> table record.
    /// </param>
    /// <param name="_appLevel">
    ///    The apportionment level record that the markup belongs to.
    /// </param>
    /// <param name="_appQty">
    ///    The apportioned quantity.
    /// </param>
    /// <param name="_totalQty">
    ///    The total quantity.
    /// </param>
    /// <param name="_lineValue">
    ///    The line value.
    /// </param>
    /// <param name="_totalValue">
    ///    The total value.
    /// </param>
    /// <param name="_topLevelType">
    ///    The miscellaneous charge type.
    /// </param>
    /// <param name="_2tierCharge">
    ///    A two tier charge value; optional.
    /// </param>
    /// <param name="_midLevel">
    ///    The midlevel record that the apportioned value belongs to; optional.
    /// </param>
    /// <returns>
    ///    The apportioned value.
    /// </returns>
    protected Amount findOrCreateApportionedValue(
        Common          _topLevel,
        MarkupTrans     _markup,
        Common          _appLevel,
        Qty             _appQty,
        Qty             _totalQty,
        Amount          _lineValue,
        Amount          _totalValue,
        TMSMiscCharges  _topLevelType,
        Amount          _2tierCharge = 0,
        Common          _midLevel    = null
    )
    {
        WHSLoadLine     loadLine;
        boolean         isShippedOrReceived;
        Amount          markupValue;

        // Check to see if record already exists
        select firstonly apportionedValue
            where apportionedValue.TopLevelRecId           == _topLevel.RecId
               && apportionedValue.TopLevelTableId         == _topLevel.TableId
               && apportionedValue.SourceRecId             == _markup.RecId
               && apportionedValue.SourceTableId           == _markup.TableId
               && apportionedValue.ApportionedLevelRecId   == _appLevel.RecId
               && apportionedValue.ApportionedLevelTableId == _appLevel.TableId;

        if (_appLevel.TableId == tableNum(WHSLoadLine))
        {
            loadLine  = _appLevel;

            WHSLoadTable loadTable = WHSLoadTable::find(loadLine.LoadId);
            isShippedOrReceived = loadTable.isShipped() || loadTable.isReceived();
        }

        if (   !apportionedValue
            && !isShippedOrReceived)
        {
            apportionedValue.clear();
            apportionedValue.TopLevelRecId           = _topLevel.RecId;
            apportionedValue.TopLevelTableId         = _topLevel.TableId;
            apportionedValue.SourceRecId             = _markup.RecId;
            apportionedValue.SourceTableId           = _markup.TableId;
            apportionedValue.ApportionedLevelRecId   = _appLevel.RecId;
            apportionedValue.ApportionedLevelTableId = _appLevel.TableId;
            apportionedValue.Qty                     = _appQty;
            apportionedValue.MiscCharges             = _topLevelType;
            apportionedValue.MidLevelRecId           = _midLevel.RecId;
            apportionedValue.MidLevelTableId         = _midLevel.TableId;

            markupValue = _2tierCharge ? _2tierCharge : _markup.Value;

            // if sum of qty + current detail line = total load qty, this is the last line
            // apply necessary changes
            if (this.sumApportionedQty(_markup, _topLevelType, _midLevel) + _appQty == _totalQty)
            {
                apportionedValue.ApportionValue  = this.calcWithMarkupCategory(
                                                                    _markup.MarkupCategory,
                                                                    _appQty,
                                                                    this.lineValue(_appLevel),
                                                                    markupValue);
                apportionedValue.ApportionValue -= this.sumApportionedValue(
                                                                    _markup,
                                                                    _topLevelType,
                                                                    _midLevel);
            }

            else
            {
                if (_totalValue != 0)
                {
                    apportionedValue.ApportionValue =
                                                decRound(
                                                    (_lineValue / _totalValue)
                                                    * this.calcWithMarkupCategory(
                                                                    _markup.MarkupCategory,
                                                                    _appQty,
                                                                    this.lineValue(_appLevel),
                                                                    markupValue), 2);
                }
            }

            apportionedValue.insert();
        }

        return apportionedValue.ApportionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the source document exists with a transaction id.
    /// </summary>
    /// <param name="_tmsId">
    /// The id of the source document.
    /// </param>
    /// <param name="_inventTransId">
    /// Transaction id of the source document.
    /// </param>
    /// <param name="_topLevel">
    /// Miscellaneous charges level of the source document.
    /// </param>
    /// <returns>
    /// True if the source document exists, false otherwise.
    /// </returns>
    protected boolean findRelatedLine(TMSId _tmsId, InventTransId _inventTransId, TMSMiscCharges _topLevel)
    {
        WHSLoadLine         loadLine;
        RecId               recId;

        switch (_topLevel)
        {
            case TMSMiscCharges::Load:
                select firstonly RecId from loadLine
                    where loadLine.LoadId        == _tmsId &&
                          loadLine.InventTransId == _inventTransId;

                recId = loadLine.RecId;
                break;

            case TMSMiscCharges::SalesOrder:
                recId = SalesLine::findInventTransId(_inventTransId).RecId;
                break;

            case TMSMiscCharges::PurchaseOrder:
                recId = PurchLine::findInventTransId(_inventTransId).RecId;
                break;
        }

        return recId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the price of a source document line.
    /// </summary>
    /// <param name="_source">
    /// The source document line. The valid sources are load line, sales and purchase orders.
    /// </param>
    /// <returns>
    /// The price of the source document line.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Inventory transaction type is not valid.
    /// </exception>
    protected Amount lineValue(Common _source)
    {
        SalesLine           salesLine;
        PurchLine           purchLine;
        WHSLoadLine         loadLine;
        Amount              ret;
        TMSId               id;
        InventTransType     transType;

        switch (_source.TableId)
        {
            // Load
        case tableNum(WHSLoadLine):
            loadLine  = WHSLoadLine::findbyRecId(_source.RecId);
            transType = InventTransOrigin::findByInventTransId(loadLine.InventTransId).ReferenceCategory;

            switch (transType)
            {
                case InventTransType::Sales:
                    salesLine = loadLine.getOrderCommonFromLoadLine() as SalesLine;

                    if (salesLine.PriceUnit)
                    {
                        ret = loadLine.InventQty * salesLine.SalesPrice / salesLine.PriceUnit;
                    }

                    else
                    {
                        ret = loadLine.InventQty * salesLine.SalesPrice;
                    }
                    break;

                case InventTransType::Purch:
                    purchLine = loadLine.getOrderCommonFromLoadLine() as PurchLine;

                    ret = loadLine.InventQty * purchLine.PurchPrice;
                    break;

                case InventTransType::TransferOrderShip:
                    ret = 0;
                    break;

                default:
                    boolean implemented;
                    [implemented, ret] = this.lineValueLoadLineDefault(transType, loadLine);
                    if (!implemented)
                    {
                        throw error(error::wrongUseOfFunction(funcName()));
                    }
            }
            break;

            // Sales Order
        case tableNum(SalesTable):
            id = SalesTable::findRecId(_source.RecId).SalesId;

            select sum(LineAmount) from salesLine
                    where salesLine.SalesId == id;

            ret = salesLine.LineAmount;
            break;

            // Purchase Order
        case tableNum(PurchTable):
            id = PurchTable::findRecId(_source.RecId).PurchId;

            select sum(LineAmount) from purchLine
                    where purchLine.PurchId == id;

            ret = purchLine.LineAmount;
            break;

        default:
            [id, ret] = this.lineValueHeaderDefault(_source);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValueLoadLineDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value of the load line in the default cause. Access point for extenders.
    /// </summary>
    /// <param name = "_inventTransType">The inventory transaction type for the load line.</param>
    /// <param name = "_loadine">The load line being processed.</param>
    /// <returns>The value of the load line.</returns>
    protected container lineValueLoadLineDefault(
        InventTransType _inventTransType,
        WHSLoadLine     _loadine)
    {
        return [false, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValueHeaderDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ID and value of the source record. Access point for extenders.
    /// </summary>
    /// <param name = "_source">The source record.</param>
    /// <returns>A container with the ID and value of the source record.</returns>
    protected container lineValueHeaderDefault(Common _source)
    {
        return ['', 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumApportionedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of apportioned quantity.
    /// </summary>
    /// <param name="_source">
    /// The source record.
    /// </param>
    /// <param name="_miscChargeLevel">
    /// The miscellaneous charges level.
    /// </param>
    /// <param name="_midSource">
    /// The mid source record.
    /// </param>
    /// <returns>
    /// The apportioned quantity.
    /// </returns>
    TMSApportionValue sumApportionedQty(Common          _source,
                                        TMSMiscCharges  _miscChargeLevel,
                                        Common          _midSource = null)
    {
        TMSApportionedValue tmsApportionedValue;

        select sum(Qty) from tmsApportionedValue
            where tmsApportionedValue.SourceRecId                == _source.RecId            &&
                  tmsApportionedValue.SourceTableId              == _source.TableId          &&
                  tmsApportionedValue.MidLevelRecId              == _midSource.RecId         &&
                  tmsApportionedValue.MidLevelTableId            == _midSource.TableId       &&
                  tmsApportionedValue.MiscCharges                == _miscChargeLevel;

        return tmsApportionedValue.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumApportionedValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of apportioned value.
    /// </summary>
    /// <param name="_source">
    /// The source record.
    /// </param>
    /// <param name="_miscChargeLevel">
    /// The miscellaneous charges level.
    /// </param>
    /// <param name="_midSource">
    /// The mid source record.
    /// </param>
    /// <returns>
    /// The apportioned value.
    /// </returns>
    TMSApportionValue sumApportionedValue(Common        _source,
                                          TMSMiscCharges  _miscChargeLevel,
                                          Common          _midSource = null)
    {
        TMSApportionedValue tmsApportionedValue;

        select sum(ApportionValue) from tmsApportionedValue
            where tmsApportionedValue.SourceRecId                == _source.RecId            &&
                  tmsApportionedValue.SourceTableId              == _source.TableId          &&
                  tmsApportionedValue.MidLevelRecId              == _midSource.RecId         &&
                  tmsApportionedValue.MidLevelTableId            == _midSource.TableId       &&
                  tmsApportionedValue.MiscCharges                == _miscChargeLevel;

        return tmsApportionedValue.ApportionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates miscellaneous charges determined by top level of charge.
    /// </summary>
    /// <param name="_tmsId">
    /// <c>TMSId</c> of a record.
    /// </param>
    /// <param name="_miscChargesTable">
    /// Top level of charge.
    /// </param>
    /// <returns>
    /// Calculated amount.
    /// </returns>
    static Amount calcMiscCharges(TMSId             _tmsId,
                                  TMSMiscCharges    _miscChargesTable)
    {
        TMSRateRoute    tmsRateRoute = new TMSRateRoute();
        Amount          ret;

        var logger = TMSInstrumentationLogger::instance(classStr(tmsRateRoute));
        using (var activityContext = logger.miscChargesActivities().calcMiscCharges(_tmsId, _miscChargesTable))
        {
            // Determine top level of charge
            switch (_miscChargesTable)
            {
                case TMSMiscCharges::SalesOrder:
                    ret = tmsRateRoute.calcMiscChargesSO(_tmsId);
                    break;

                case TMSMiscCharges::Load:
                    ret = tmsRateRoute.calcMiscChargesLoad(_tmsId);
                    break;

                case TMSMiscCharges::PurchaseOrder:
                    ret = tmsRateRoute.calcMiscChargesPO(_tmsId);
                    break;

                default:
                    ret = tmsRateRoute.calcMiscChargesDefault(_miscChargesTable, _tmsId);
            }

            logger.logInformation(strFmt('{"Calculation result":%1}', ret));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates charges in the default case. Access point for extenders.
    /// </summary>
    /// <param name = "_miscChargesTable">The charges table enum value.</param>
    /// <param name = "_tmsId">The charges tables ID value.</param>
    /// <returns>The total amount of charges on the source table.</returns>
    protected Amount calcMiscChargesDefault(
        TMSMiscCharges _miscChargesTable,
        TMSId          _tmsId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total line amount of a sales order.
    /// </summary>
    /// <param name="_tmsId">
    /// <c>TMSId</c> of a sales order.
    /// </param>
    /// <returns>
    /// Calculated amount.
    /// </returns>
    static Amount calcTotalValue(TMSId _tmsId)
    {
        SalesLine   salesLine;

        select sum(LineAmount) from salesLine
            where salesLine.SalesId == _tmsId;

        return salesLine.LineAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>