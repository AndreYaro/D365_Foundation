<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteSMAItemLinkedDimensionEntryController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSiteSMAItemLinkedDimensionEntryController</c> class provides support for data entry in the dimension entry control for
/// the behavior mandated by the inventory dimension link setup.
/// </summary>
[System.ComponentModel.Composition.ExportMetadataAttribute(extendedtypestr(ExtendedDataTypeName), extendedtypestr(InventSiteSMAItemLinkedDimensionValueSet)),
 System.ComponentModel.Composition.ExportAttribute(identifierstr(Dynamics.AX.Application.DimensionEntryController))]
public class InventSiteSMAItemLinkedDimensionEntryController extends LedgerDefaultDimensionEntryController
{
    DimensionEnumeration inventSiteDimensionsToAllowEdit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventSiteSMAItemLinkedDimensionEntryController construct()
    {
        InventSiteSMAItemLinkedDimensionEntryController controller = new InventSiteSMAItemLinkedDimensionEntryController();
        controller.initialize();
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCompanyChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controller when the company changes.
    /// </summary>
    protected void onCompanyChange()
    {
        super();

        changecompany (company)
        {
            InventParameters inventParameters = InventParameters::find();

            if (inventParameters.SiteDimensionAttribute &&
                inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked)
            {
                DimensionAttributeSetStorage editableDimensionSetStorage =
                    DimensionAttributeSetStorage::find(this.parmDimensionsToDisplay());
                editableDimensionSetStorage.removeDimensionAttribute(inventParameters.SiteDimensionAttribute);

                inventSiteDimensionsToAllowEdit = editableDimensionSetStorage.save();
            }
            else
            {
                inventSiteDimensionsToAllowEdit = this.parmDimensionsToDisplay();
            }

            this.updateDimensionsToAllowEdit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValueSetLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controller when the displayed value set changes.
    /// </summary>
    /// <returns>
    /// true if the controller parameters were changed; otherwise, false.
    /// </returns>
    public boolean onValueSetLoad()
    {
        DimensionEnumeration oldDimensionsToAllowEdit = this.parmDimensionsToAllowEdit();

        this.updateDimensionsToAllowEdit();

        return this.parmDimensionsToAllowEdit() != oldDimensionsToAllowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionsToAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the set of editable dimensions based on the <c>SMATransactionType</c> enumeration value.
    /// </summary>
    private void updateDimensionsToAllowEdit()
    {
        if (inventSiteDimensionsToAllowEdit != this.parmDimensionsToDisplay() &&
            this.parmDataSource() &&
            InventSiteSMAItemLinkedDimensionEntryController::preventEditForSMATransactionType(
                this.parmDataSource().cursor()))
        {
            this.parmDimensionsToAllowEdit(inventSiteDimensionsToAllowEdit);
        }
        else
        {
            this.parmDimensionsToAllowEdit(this.parmDimensionsToDisplay());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventEditForSMATransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the linked site dimension should be editable based on the
    ///    <c>SMATransactionType</c> enumeration value.
    /// </summary>
    /// <param name="_common">
    ///    The data buffer that holds a reference to the <c>SMATransactionType</c> enumeration type.
    /// </param>
    /// <returns>
    ///    true if the linked site dimension should not be editable; otherwise, false.
    /// </returns>
    private static boolean preventEditForSMATransactionType(Common _common)
    {
        boolean preventEdit;

        switch (_common.TableId)
        {
            case tableNum(SMAAgreementLine):
                SMAAgreementLine smaAgreementLine = _common;
                preventEdit = (smaAgreementLine.TransactionType == SMATransactionType::Item);
                break;

            case tableNum(SMAServiceOrderLine):
                SMAServiceOrderLine smaServiceOrderLine = _common;
                preventEdit = (smaServiceOrderLine.TransactionType == SMATransactionType::Item);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return preventEdit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>