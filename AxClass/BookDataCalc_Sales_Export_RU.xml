<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookDataCalc_Sales_Export_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BookDataCalc_Sales_Export_RU extends BookDataCalc_Sales_All_RU implements BatchRetryable
{
    SalesBookVATProcessLogTrans_RU           processLogTrans;
    TmpSalesBookVATProcessLogTransOper_RU    tmpProcessLogTransOper;
    SalesBookVATProcessCancelType_RU         processMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>begin</Name>
				<Source><![CDATA[
    protected void begin()
    {
        SalesBookTrans_RU salesBookTrans;

        delete_from salesBookTrans
            where salesBookTrans.SalesBookTable_RU == bookTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineData</Name>
				<Source><![CDATA[
    protected void calcLineData()
    {
        SalesBookVATProcessLogTransOper_RU  processLogTransOper;
        SalesBookVATProcessParameters_RU    processParameters;
        BookStructVATAmounts_RU             amounts;
        Set                                 set = new Set(Types::Date);
        SetEnumerator                       setEnumerator;

        if (! bookTableMode)
        {
            super();
            return;
        }

        progress.setText(strFmt("@GLS111359", processLogTrans.AccountNum, processLogTrans.FactureExternalId));

        while select TransDate from  processLogTransOper
            group by TransDate
            where processLogTransOper.RefRecId         == processLogTrans.RecId &&
                  processLogTransOper.TransDate        >= fromDate              &&
                  processLogTransOper.TransDate        <= toDate                &&
                  processLogTransOper.Blocked          == NoYes::No             &&
                  processLogTransOper.CanceledRefRecId == 0
            exists join processParameters
                where processParameters.RecId          == processLogTransOper.SalesBookVATProcessParameters_RU &&
                      processParameters.IncludeInBook  == NoYes::Yes
        {
            set.add(processLogTransOper.TransDate);
        }

        setEnumerator = set.getEnumerator();

        while (setEnumerator.moveNext())
        {
            amounts = new BookStructVATAmounts_RU();

            while select sum(AmountLiableToVAT), sum(TaxAmount), TaxCode from  processLogTransOper
                group by TaxCode
                where processLogTransOper.RefRecId         == processLogTrans.RecId &&
                      processLogTransOper.Blocked          == NoYes::No             &&
                      processLogTransOper.CanceledRefRecId == 0                     &&
                      processLogTransOper.TransDate        == setEnumerator.current()
                exists join processParameters
                    where processParameters.RecId          == processLogTransOper.SalesBookVATProcessParameters_RU &&
                          processParameters.IncludeInBook  == NoYes::Yes
            {
                amounts.addSmallAmounts(processLogTransOper.TaxCode,
                                        processLogTransOper.AmountLiableToVAT + processLogTransOper.TaxAmount,
                                        processLogTransOper.AmountLiableToVAT,
                                        processLogTransOper.TaxAmount);
            }

            if (amounts.amountInclVAT())
            {
                this.insertLine(amounts);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean                 ret = true;
        CustTrans               custTransPayment;
        CustTrans_W             custTransPayment_W;
        CustVendTransDetails    custVendTransDetails;

        if (bookTableMode)
        {
            ret = this.getBookDataCalc().check();
        }

        if (closeBook)
        {
            if ( RestoredVATLogTable_RU::exist(toDate) &&
                !RestoredVATLogTable_RU::checkApproved(toDate))
            {
                ret = checkFailed(strFmt("@GLS114225", fromDate, toDate));
            }
            else
            {
                TaxTrans taxTrans;

                while select custTransPayment
                        where custTransPayment.Prepayment == NoYes::Yes &&
                              custTransPayment.TransDate  <= toDate
                    exists join custTransPayment_W
                        where custTransPayment_W.CustTrans == custTransPayment.RecId &&
                              !custTransPayment_W.PrepaymentFactureId_W
                    exists join taxTrans
                        where taxTrans.Voucher == custTransPayment.Voucher
                            && taxTrans.TransDate == custTransPayment.TransDate
                {
                    custVendTransDetails = new CustVendTransDetails(custTransPayment, toDate);
                    if (custVendTransDetails.amountCurSettled() != custTransPayment.AmountCur)
                    {
                        if (!CustTable::find(custTransPayment.AccountNum).ForeignResident_RU ||
                            Tax::taxTotalVoucherDate(custTransPayment.Voucher, custTransPayment.TransDate) != 0)
                        {
                            ret = checkFailed(strFmt("@SYS26801", custTransPayment.Voucher, custTransPayment.TransDate) + "@GLS102907" + "@GLS102230" + "@GLS102907" + "@GLS104367", '', new SysInfoAction_FormName_RU(null, formStr(CustPrepaymentFactureCreate_RU)));
                            break;
                        }
                    }
                }

                if (this.existsTransForProces())
                {
                    ret = checkFailed(strFmt("@GLS104895", fromDate, toDate));
                }
            }
        }

        if (! ret)
        {
            throw error("@GLS101992");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTransForProces</Name>
				<Source><![CDATA[
    protected boolean existsTransForProces()
    {
        BookDataCalc_Sales_Export_Process_RU  bookDataCalc;
        TmpSalesBookVATProcessLogTransOper_RU tmpTransOper;

        bookDataCalc = BookDataCalc_Sales_Export_Process_RU::newFromBookTable(fromDate, toDate);
        bookDataCalc.initParmDefault();
        bookDataCalc.parmCloseBookCheck(true);

        if (bookDataCalc.validate(null))
        {
            bookDataCalc.runOperation();
        }
        else
        {
            return true;
        }

        tmpTransOper = bookDataCalc.parmProcessLogTransOper();

        select firstonly tmpTransOper
            where tmpTransOper.Blocked == NoYes::No;

        return tmpTransOper ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRecord</Name>
				<Source><![CDATA[
    protected boolean fetchNextRecord()
    {
        return recordSortedList.next(processLogTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookDataCalc</Name>
				<Source><![CDATA[
    protected BookDataCalc_Sales_RU getBookDataCalc()
    {
        BookDataCalc_Sales_RU bookDataCalc;

        bookDataCalc = new BookDataCalc_Sales_RU();

        bookDataCalc.parmFromDate(fromDate);
        bookDataCalc.parmToDate(toDate);
        bookDataCalc.parmBookRecId(bookRecId);
        bookDataCalc.parmBookTableMode(bookTableMode);
        bookDataCalc.parmCloseBook(closeBook);
        bookDataCalc.parmFullCheck(fullCheck);

        return bookDataCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        SalesBookTrans_RU    salesBookTrans;

        salesPurchBookData = salesBookTrans;

        this.initRecordSortedList();

        if (! (select RecId from purchBookTable_RU
                where purchBookTable_RU.ClosingDate >= toDate).RecId)
        {
            warning(strFmt("@GLS104894", toDate));
            warning("@GLS104893");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    protected void initRecordSortedList()
    {
        SalesBookVATProcessLogTrans_RU      processLogTransLocal;
        SalesBookVATProcessLogTransOper_RU  processLogTransOper;
        SalesBookVATProcessParameters_RU    processParameters;

        recordSortedList = new RecordSortedList(tableNum(SalesBookVATProcessLogTrans_RU));

        recordSortedList.sortOrder(fieldNum(SalesBookVATProcessLogTrans_RU, RecId));

        while select processLogTransLocal
            exists join RecId from processLogTransOper
                where processLogTransOper.RefRecId  == processLogTransLocal.RecId &&
                      processLogTransOper.TransDate >= fromDate                   &&
                      processLogTransOper.TransDate <= toDate                     &&
                      ! processLogTransOper.CanceledRefRecId
            exists join RecId from processParameters
                where processParameters.RecId         == processLogTransOper.SalesBookVATProcessParameters_RU &&
                      processParameters.IncludeInBook == NoYes::Yes
        {
            if ( ! recordSortedList.find(processLogTransLocal))
            {
                recordSortedList.ins(processLogTransLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLine</Name>
				<Source><![CDATA[
    private void insertLine(BookStructVATAmounts_RU _amounts)
    {
        FactureJour_RU factureJourLocal;

        salesPurchBookData.clear();

        salesPurchBookData.data(processLogTrans);

        salesPurchBookData.SalesPurchBookTable_RU = bookTable.RecId;
        salesPurchBookData.FactureDate_External   = processLogTrans.factureDate_External();
        salesPurchBookData.OperationTypeCodes     = processLogTrans.SalesPurchBookDataMap_RU::factureOperationTypeCodes();

        if (processLogTrans.ReverseDate)
        {
            salesPurchBookData.Reversed         = ! processLogTrans.Reversed;
        }

        salesPurchBookData.AmountInclVAT        = _amounts.amountInclVAT();
        salesPurchBookData.AmountLiableToVAT20  = _amounts.amountLiableToVAT20();
        salesPurchBookData.AmountLiableToVAT10  = _amounts.amountLiableToVAT10();
        salesPurchBookData.AmountLiableToVAT0   = _amounts.amountLiableToVAT0();
        salesPurchBookData.AmountNotLiableToVAT = _amounts.amountNotLiableToVAT();
        salesPurchBookData.TaxAmountVAT20       = _amounts.taxAmountVAT20();
        salesPurchBookData.TaxAmountVAT10       = _amounts.taxAmountVAT10();

        if (salesPurchBookData.Reversed)
        {
            salesPurchBookData.CorrectedFactureExternalId = salesPurchBookData.FactureExternalId;
            salesPurchBookData.CorrectedFactureDate       = salesPurchBookData.FactureDate_External;

            if (salesPurchBookData.ReverseDate &&
                ! BookDataCalc_Sales_Export_RU::existFactureBlock(processLogTrans.FactureId, processLogTrans.TransType, bookTable.getFromDate()))
            {
                salesPurchBookData.CorrectedSalesPurchBookTable_RU = SalesBookTable_RU::findFirstByClosingDate(salesPurchBookData.ReverseDate).RecId;
            }
        }
        if ((salesPurchBookData.TransType == SalesPurchBookTransType_RU::Invoice  ||
             salesPurchBookData.TransType == SalesPurchBookTransType_RU::Facture) &&
             ! salesPurchBookData.Reversed)
        {
            factureJourLocal = FactureJour_RU::find(salesPurchBookData.FactureID, processLogTrans.factureModule());

            salesPurchBookData.CorrectedFactureExternalId = factureJourLocal.CorrectedFactureExternalId;
            salesPurchBookData.CorrectedFactureDate       = factureJourLocal.CorrectedFactureDate;
            if (factureJourLocal.CorrectedPeriod)
            {
                salesPurchBookData.CorrectedSalesPurchBookTable_RU = SalesBookTable_RU::findFirstByClosingDate(factureJourLocal.CorrectedPeriod).RecId;
            }
        }

        if (factureJour.PrepaymTaxCorrection == NoYes::Yes)
        {
            salesPurchBookData.PaymentDate = factureJour.PaymentTransDate;
            salesPurchBookData.PaymDocumentNum = factureJour.PaymentOrderNum;
        }

        if (salesPurchBookData.TransType == SalesPurchBookTransType_RU::PrepaymentStorno)
        {
            this.initPaymentInfo(
                salesPurchBookData,
                VendTrans::find(processLogTrans.InvoiceRecIdRef));
        }
 
        if (salesPurchBookData.CorrectedSalesPurchBookTable_RU && salesPurchBookData.CorrectedSalesPurchBookTable_RU == bookTable.RecId)
        {
            salesPurchBookData.CorrectedSalesPurchBookTable_RU = 0;
        }

        salesPurchBookData.FactureJour_RU = FactureJour_RU::find(salesPurchBookData.FactureID, salesPurchBookData.factureModule()).RecId;
        salesPurchBookData.SalesPurchBookDataMap_RU::initSalesPurchBookDataFields();
        
        salesPurchBookData.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransForProcess</Name>
				<Source><![CDATA[
    protected boolean isTransForProcess()
    {
        if (tmpProcessLogTransOper)
        {
            select firstonly tmpProcessLogTransOper
                where tmpProcessLogTransOper.Blocked == NoYes::No;
        }

        return tmpProcessLogTransOper.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessLogTrans</Name>
				<Source><![CDATA[
    public TmpSalesBookVATProcessLogTrans_RU parmProcessLogTrans(TmpSalesBookVATProcessLogTrans_RU _processLogTrans = salesPurchBookData)
    {
        salesPurchBookData = _processLogTrans;
        return salesPurchBookData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessLogTransOper</Name>
				<Source><![CDATA[
    public TmpSalesBookVATProcessLogTransOper_RU parmProcessLogTransOper(TmpSalesBookVATProcessLogTransOper_RU _processLogTransOper = tmpProcessLogTransOper)
    {
        tmpProcessLogTransOper = _processLogTransOper;
        return tmpProcessLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (bookTableMode)
        {
            this.getBookDataCalc().runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS101509";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFactureBlock</Name>
				<Source><![CDATA[
    public static boolean existFactureBlock(FactureId_RU                   _factureId,
                                            SalesPurchBookTransType_RU     _transType,
                                            TransDate                      _toDate)
    {
        SalesBookVATProcessLogTrans_RU      processLogTransLocal;
        SalesBookVATProcessLogTable_RU      processLogTableLocal;
        SalesBookVATProcessLogTransOper_RU  processLogTransOperBlocked;

        select firstonly RecId from processLogTransLocal
            where processLogTransLocal.FactureId == _factureId &&
                  processLogTransLocal.TransType == _transType
        join TableId from processLogTransOperBlocked
            where processLogTransOperBlocked.RefRecId == processLogTransLocal.RecId  &&
                  processLogTransOperBlocked.Blocked
        join TableId from processLogTableLocal
            where processLogTableLocal.RecId     == processLogTransOperBlocked.LogTableRefRecId &&
                  processLogTableLocal.TransDate <  _toDate;

        return processLogTransLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATProcess</Name>
				<Source><![CDATA[
    public static BookDataCalc_Sales_Export_RU newFromVATProcess(SalesBookVATProcessCancelType_RU _processMode)
    {
        BookDataCalc_Sales_Export_RU bookDataCalc;

        switch (_processMode)
        {
            case SalesBookVATProcessCancelType_RU::Process :
                bookDataCalc = new BookDataCalc_Sales_Export_Process_RU();
                break;

            case SalesBookVATProcessCancelType_RU::Cancel  :
                bookDataCalc = new BookDataCalc_Sales_Export_Cancel_RU();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        bookDataCalc.parmFromDate(dateNull());
        bookDataCalc.parmToDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        bookDataCalc.parmBookTableMode(false);

        return bookDataCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>