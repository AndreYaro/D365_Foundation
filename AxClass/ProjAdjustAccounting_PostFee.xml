<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustAccounting_PostFee</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to update original fee transaction and post accounting adjustments.
/// </summary>
public class ProjAdjustAccounting_PostFee extends ProjAdjustAccounting_post
{
    private ProjRevenueTrans projRevenueTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOrigVoucher</Name>
				<Source><![CDATA[
    // <summary>
    /// Checks if the voucher passed is associated with the original <c>ProjRevenueTran</c> posted transaction.
    /// </summary>
    /// <param name = "_voucher">A voucher.</param>
    /// <returns>
    ///  true if <c>ProjRevenueTran</c> has the voucher. otherwise, false.
	public boolean checkOrigVoucher(Voucher _voucher)
    {
        return projRevenueTrans.VoucherJournal == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjRevenueTrans</Name>
				<Source><![CDATA[
	public ProjRevenueTrans parmProjRevenueTrans(ProjRevenueTrans _projRevenueTrans = projRevenueTrans)
    {
        projRevenueTrans = _projRevenueTrans;
        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	public void new(Common _origTrans)
    {
        super();
        projRevenueTrans = _origTrans as ProjRevenueTrans;
        
		if (!projRevenueTrans)
        {
            throw error(Error::missingRecord(tableStr(ProjRevenueTrans)));
        }
        this.parmOrigTransId(projRevenueTrans.TransId);
        this.parmNewVoucher(projRevenueTrans.VoucherJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjRevenueTrans</Name>
				<Source><![CDATA[
	private void updateProjRevenueTrans(ProjRevenueTrans _projRevenueTrans, ProjTransIdBase _projTransId, voucher _subledgerVoucher)
    {
        this.updateRelatedTablesWithNewDimension(_projRevenueTrans, _projTransID, _subledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTables</Name>
				<Source><![CDATA[
    private void updateRelatedTables(ProjRevenueTrans _projRevenueTrans, ProjTransIdBase _projTransId, voucher _subledgerVoucher)
    {
        // Sale
        ProjRevenueTransSale projRevenueTransSale;
        update_recordset projRevenueTransSale
        setting
            TransId = _projTransId
        where projRevenueTransSale.TransId == _projRevenueTrans.TransId
            && projRevenueTransSale.DataAreaId == _projRevenueTrans.DataAreaId;

        this.updateProjInvoiceRevenue(_projRevenueTrans, _projTransId, _subledgerVoucher);

        ProjPostedTransTable projPostedTransTable;

        select firstonly forupdate projPostedTransTable
            where projPostedTransTable.TransId == _projRevenueTrans.TransId;
        projPostedTransTable.TransId = _projTransId;
        projPostedTransTable.update();

        ProjRevenueTrans projRevenueTransBuff;
        select firstonly forupdate TransId from projRevenueTransBuff
            where projRevenueTransBuff.TransId == _projRevenueTrans.TransId;

        projRevenueTransBuff.TransId = _projTransId;
        projRevenueTransBuff.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTablesWithNewDimension</Name>
				<Source><![CDATA[
    private void updateRelatedTablesWithNewDimension(ProjRevenueTrans _projRevenueTrans, ProjTransIdBase _projTransId, voucher _subledgerVoucher)
    {
        DimensionDefault mergedDimension;
        if (dataContract)
        {
            mergedDimension = dataContract.parmMergedDimension();
        }

        if (!mergedDimension)
        {
            this.updateRelatedTables(_projRevenueTrans, _projTransID, _subledgerVoucher);
        }
        else
        {
            // Sale
            ProjRevenueTransSale projRevenueTransSale;
            update_recordset projRevenueTransSale
            setting
                TransId = _projTransId, DefaultDimension = mergedDimension
            where projRevenueTransSale.TransId == _projRevenueTrans.TransId
                && projRevenueTransSale.DataAreaId == _projRevenueTrans.DataAreaId;

            this.updateProjInvoiceRevenue(_projRevenueTrans, _projTransId, _subledgerVoucher);

            // Posted trans
            ProjPostedTransTable projPostedTransTable = ProjPostedTransTable::findByTransId(_projRevenueTrans.TransId, true);
            projPostedTransTable.TransId = _projTransId;
            projPostedTransTable.DefaultDimension = mergedDimension;
            projPostedTransTable.update();

            // Parent trans record
            ProjRevenueTrans projRevenueTransBuff = ProjRevenueTrans::find(_projRevenueTrans.TransId, true);
            projRevenueTransBuff.TransId = _projTransId;
            projRevenueTransBuff.DefaultDimension = mergedDimension;
            projRevenueTransBuff.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method for updating original posted fee transaction.
    /// </summary>
	public void updateProjTrans()
    {
        ProjTransIdBase transId = this.parmNewTransId();
        Voucher voucher = this.parmNewVoucher();
        if (transId && voucher)
        {
            this.updateProjRevenueTrans(projRevenueTrans, transId, voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjInvoiceRevenue</Name>
				<Source><![CDATA[
    private void updateProjInvoiceRevenue(ProjRevenueTrans _ProjRevenueTrans, ProjTransIdBase _projTransId, Voucher _voucher)
    {
        ProjProposalJour projProposalJour;
        ProjInvoiceJour projInvoiceJour;
        ProjProposalRevenue projProposalRevenue;
        ProjInvoiceRevenue projInvoiceRevenue;
        Set unAdjustedSet = this.parmUnAdjustedVoucherSet();

        while select forupdate projProposalJour
			join forupdate projProposalRevenue
			where projProposalJour.ProposalId == projProposalRevenue.ProposalId
			&& projProposalRevenue.TransId == _ProjRevenueTrans.TransId
			outer join forupdate projInvoiceJour
			join forupdate projInvoiceRevenue
			where projInvoiceJour.ProposalId == projProposalJour.ProposalId
			&& projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
			&& projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
			&& projInvoiceRevenue.TransId == projProposalRevenue.TransId
        {
            projProposalRevenue.TransId = _projTransId;
            projProposalRevenue.update();
   
            // ProjProposalJour.LedgerVoucher only needs to be updated if any
            // voucher entry for an invoice was adjusted.
            if(projProposalJour.LedgerVoucher
                && unAdjustedSet
                && !unAdjustedSet.in(projProposalJour.LedgerVoucher))
            {
                projProposalJour.LedgerVoucher = _voucher;
                projProposalJour.update();
            }

            if (projInvoiceJour)
            {
                if (!unAdjustedSet.in(projInvoiceJour.LedgerVoucher))
                {
                    projInvoiceJour.LedgerVoucher = _voucher;
                    projInvoiceJour.update();
                }
                
                projInvoiceRevenue.TransId = _projTransId;
                projInvoiceRevenue.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>