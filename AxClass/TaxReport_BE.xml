<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReport_BE extends TaxReportAdjustTrans implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if this class can be executed in batch.
    /// </summary>
    /// <returns>
    ///    True if can run this class in batch; otherwise false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkfields</Name>
				<Source><![CDATA[
    private boolean checkfields()
    {
        boolean             checkStatus         = true;
        TaxEnterpriseNumber taxEnterpriseNumber = CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, transactionDate);

        if (! taxEnterpriseNumber)
        {
            error(strfmt("@SYS89866", "@SYS77429"));
            checkStatus = false;
        }

        else
        {
            if (! TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(taxEnterpriseNumber))
            {
                error(strfmt("@SYS94000", taxEnterpriseNumber));
                checkStatus = false;
            }
        }

        return checkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header of this dialog.
    /// </summary>
    /// <returns>
    /// Returns the header of this dialog.
    /// </returns>
    protected Caption dialogHeader()
    {
        return "@SYS60665";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDialogValues</Name>
				<Source><![CDATA[
    public void getDialogValues(NoYes                   _updateNow,
                                TaxPeriod               _taxPeriod,
                                TaxPeriodDate           _fromDate,
                                TransDate               _transactionDate)

    {
        updateNow        = _updateNow;
        taxPeriod        = _taxPeriod;
        fromDate         = _fromDate;
        transactionDate  = _transactionDate;
        taxRepVersion    = TaxRepVersion::Original;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report.
    /// </summary>
    public void printout()
    {
        Args args = new Args();
        args.caller(this);
        args.record(taxReportPeriod);
        
        if (this.checkfields())
        {
            new MenuFunction(menuitemoutputstr(TaxReport_BE), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleOtherAmounts</Name>
				<Source><![CDATA[
    /*
      This method is updating or inserting taxReportExtraFieldsBE record.
    */
    public TaxAmount settleOtherAmounts(DimensionDefault _defaultDimension)
    {
        TaxReportExtraFieldsBE::setVoucherAndDateByTaxPeriod(
            taxPeriod,
            fromDate,
            toDate,
            voucher,
            transactionDate);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args  _args)
    {
        TaxReport   taxReport = new TaxReport_BE();

        if (taxReport.runDialogParametersAndParseArgs(_args))
        {
            if (taxReport.canRunBatch())
            {
                taxReport.runBatch();
            }
            else
            {
                taxReport.runOperation();

                if (taxReport.canDisplayReport())
                {
                    taxReport.printout();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIL</Name>
				<Source><![CDATA[
    private static container runIL(container _pack)
    {
        TaxReport taxReport = new TaxReport_BE();
        taxReport.unpack(_pack);
        taxReport.runOperation();
        return taxReport.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>