<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValCheckTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjValCheckTrans
{
    ProjId              projId;
    ResourceRecId       resource;
    ProjCategoryId      categoryId;
    DataAreaId          projDataAreaID = curExt();
    DataAreaId          interCompanyLE;

    ProjCategoryType    categoryType;

    boolean             checkResourceProj;
    boolean             checkResourceCategory;
    boolean             checkProjCategory;

    NoYes               subscription;

    boolean             filterSubscription;
    boolean             filterEstimate;
    boolean             showActiveOrSubscription;
    boolean             serviceItem;
    boolean             production;
    boolean             excludeRevenue;

    boolean             checkProjType;
    ProjType            projType;
    boolean             isIntercompany;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    public boolean checkBuffer(Args    _args)
    {
        TableId                     tableId    = _args.dataset();

        switch (tableId)
        {
            case    tableNum(ProjCategory):
                return true;
            //    empl
            case    tableNum(ProjForecastEmpl):
                return true;
            case    tableNum(ProjEmplTrans):
                return true;
            case    tableNum(ProjHourCostPrice):
                return true;
            case    tableNum(ProjHourSalesPrice):
                return true;
            case    tableNum(ProjJournalTable):
                return true;
            case    tableNum(ProjActivity):
                return true;
            case    tableNum(ProdRoute):
                return true;
            case    tableNum(ProdJournalRoute):
                return true;
            case    tableNum(ResourceSetup):
                return true;
            case    tableNum(ProjPlanVersion):
                return true;

            //    cost
            case    tableNum(LedgerJournalTrans):
            case    tableNum(LedgerJournalTrans_Project):
                return true;
            case    tableNum(ProjForecastCost):
                return true;
            case    tableNum(ProjCostTrans):
                return true;
            case    tableNum(ProjParameters):
                return true;
            case    tableNum(ProjCostSalesPrice):
                return true;
            case    tableNum(ProjCostPriceExpense):
                return true;
            case    tableNum(ProjControlPeriodTable):
                return true;
            case    tableNum(ProjDefaultOffsetSetup):
                return true;

            //    revenue
            case    tableNum(ProjForecastRevenue):
                return true;
            case    tableNum(ProjRevenueTrans):
                return true;
            case    tableNum(ProjRevenueSalesPrice):
                return true;
            case    tableNum(CustInvoiceLine):
                return true;

            case    tableNum(CustBillingCodeVersion):
            case    tableNum(AdvancedLedgerEntryLine):
                return true;

            //    item
            case    tableNum(ForecastSales):
                return true;
            case    tableNum(InventJournalTrans):
                return true;
            case    tableNum(VendInvoiceInfoLine_Project):
                return true;
            case    tableNum(ProdTable):
                return true;
            case    tableNum(ProdBOM):
                return true;
            case    tableNum(ProdTableProj):
                return true;
            case    tableNum(ProdJournalBOM):
                return true;
            case    tableNum(ProdParmSplit):
                return true;
            case    tableNum(SalesLine):
                return true;
            case    tableNum(ProjItemTrans):
                return true;
            case    tableNum(PurchLine):
                return true;
            case    tableNum(PurchReqLine):
                return true;
            case    tableNum(PurchRFQCaseLine):
                return true;
            case    tableNum(BudgetReservationLine_PSN):
                return true;
            case    tableNum(InventTable):
                return true;
            case    tableNum(AgreementLineDefault):
                return true;

            //  misc
            case    tableNum(ProjJournalTrans):
                return true;
            case    tableNum(TmpProjAdjustment):
                return true;
            case    tableNum(TmpProjAdjustmentCreate):
                return true;
            case    tableNum(TmpSysQuery):
                return true;
            case    tableNum(CustInvoiceStandardLineTemplate):
                return true;
            case    tableNum(PSAActivityEstimates):
                return true;

            //  SMA Begin ->
            case    tableNum(SMAAgreementLine),
                    tableNum(SMAServiceOrderLine),
                    tableNum(SMASubscriptionTable),
                    tableNum(SMASalesPriceSubscription):
                return true;
            //  SMA End <-

            // SFC - Begin:
            case    tableNum(JmgEmployee):
                return true;
            case    tableNum(JmgStampJournalTrans):
                return true;
            case    tableNum(JmgTmpJobBundleProjStartup):
                return true;
            case    tableNum(JmgTimecardTrans):
                return true;
            // SFC - End

            case    tableNum(SalesQuotationLine):
                return true;

            case    tableNum(ProjBegBalJournalTrans_CostSales):
                return true;
            case    tableNum(ProjBegBalJournalTrans_Fee):
                return true;
            // Timesheet - Begin:
            case    tableNum(TSTimesheetLine):
                return true;
            case    tableNum(TSTimesheetFavorites):
                return true;
            // Timesheet - End
            case    tableNum(ProjectAccountingDistribution):
                return true;

            //Expense
            case tableNum(TrvExpTable):
            case tableNum(TrvExpTrans):
            case tableNum(TrvRequisitionLine):
                return true;

            //Budget
            case tableNum(ProjBudgetLine):
            case tableNum(TmpProjBudgetRevisionLine):
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResourceCategory</Name>
				<Source><![CDATA[
    public boolean checkResourceCategory(boolean   _checkResourceCategory    = checkResourceCategory)
    {
        checkResourceCategory    = _checkResourceCategory;

        return checkResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResourceProj</Name>
				<Source><![CDATA[
    public boolean checkResourceProj(boolean   _checkResourceProj    = checkResourceProj)
    {
        checkResourceProj    = _checkResourceProj;

        return checkResourceProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategory</Name>
				<Source><![CDATA[
    public boolean checkProjCategory(boolean   _checkProjCategory    = checkProjCategory)
    {
        checkProjCategory    = _checkProjCategory;

        return checkProjCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjType</Name>
				<Source><![CDATA[
    public boolean checkProjType(boolean   _checkProjType    = checkProjType)
    {
        checkProjType    = _checkProjType;

        return checkProjType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDistribution</Name>
				<Source><![CDATA[
    private AccountingDistribution getAccountingDistribution(Args _args, Common _childBuffer)
    {
        FormRun                         callerForm;
        ProjectAccountingDistribution   projectAccountingDistribution;
        AccountingDistribution          accountingDistribution;
        int                             i;
        FormDataSource                  formDataSource;

        if (_childBuffer.TableId == tableNum(AccountingDistribution))
        {
            return _childBuffer;
        }

        projectAccountingDistribution = _args.record() as ProjectAccountingDistribution;
        if (_args.caller())
        {
            callerForm = _args.caller().formRun();
            if (callerForm)
            {
                for (i=1; i<= callerForm.dataSourceCount(); i++)
                {
                    formDataSource = callerForm.dataSource(i);
                    if (formDataSource.table() == tableNum(AccountingDistribution))
                    {
                        break;
                    }
                }
            }
            if (formDataSource && formDataSource.table() == tableNum(AccountingDistribution))
            {
                accountingDistribution = formDataSource.cursor() as AccountingDistribution;
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            accountingDistribution = AccountingDistribution::find(projectAccountingDistribution.AccountingDistribution);
            if (!accountingDistribution)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return accountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLine</Name>
				<Source><![CDATA[
    private AgreementLine getAgreementLine(Args _args, Common _childBuffer)
    {
        FormRun                 callerForm;
        AgreementLineDefault    agreementLineDefault;
        AgreementLine           agreementLine;
        int                     i;
        FormDataSource          formDataSource;

        if (_childBuffer.TableId == tableNum(AgreementLine))
        {
            return _childBuffer;
        }

        agreementLineDefault = _args.record() as AgreementLineDefault;
        if (_args.caller())
        {
            callerForm = _args.caller() as FormRun;
            if (callerForm)
            {
                for (i=1; i<= callerForm.dataSourceCount(); i++)
                {
                    formDataSource = callerForm.dataSource(i);
                    if (formDataSource.table() == tableNum(AgreementLine))
                    {
                        break;
                    }
                }
            }
            if (formDataSource && formDataSource.table() == tableNum(AgreementLine))
            {
                agreementLine = formDataSource.cursor() as AgreementLine;
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            agreementLine = AgreementLine::find(agreementLineDefault.AgreementLine);
            if (!agreementLine)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmCategoryId(ProjCategoryId    _categoryId = categoryId)
    {
        categoryId  = _categoryId;

        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryType</Name>
				<Source><![CDATA[
    public ProjCategoryType parmCategoryType(ProjCategoryType _categoryType = categoryType)
    {
        categoryType    = _categoryType;

        return categoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeRevenue</Name>
				<Source><![CDATA[
    public NoYes parmExcludeRevenue(NoYes    _excludeRevenue = excludeRevenue)
    {
        excludeRevenue  = _excludeRevenue;

        return excludeRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterEstimate</Name>
				<Source><![CDATA[
    public NoYes parmFilterEstimate(NoYes    _filterEstimate = filterEstimate)
    {
        filterEstimate  = _filterEstimate;

        return filterEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterSubscription</Name>
				<Source><![CDATA[
    public boolean parmFilterSubscription(boolean    _filterSubscription = filterSubscription)
    {
        filterSubscription  = _filterSubscription;

        return filterSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsIntercompany</Name>
				<Source><![CDATA[
    public boolean parmIsIntercompany(boolean _isIntercompany = isIntercompany)
    {
        isIntercompany = _isIntercompany;

        return isIntercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduction</Name>
				<Source><![CDATA[
    public boolean parmProduction(boolean _production = production)
    {
        production = _production;

        return production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId    _projId = projId)
    {
        projId  = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjType</Name>
				<Source><![CDATA[
    public ProjType parmProjType(ProjType _projType = projType)
    {
        projType    = _projType;

        return projType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resource</c> variable.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resource</c> variable.
    /// </returns>
    public ResourceRecId parmResource(ResourceRecId _resourceRecId = resource)
    {
        resource  = _resourceRecId;

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceItem</Name>
				<Source><![CDATA[
    public boolean parmServiceItem(boolean    _serviceItem = serviceItem)
    {
        serviceItem  = _serviceItem;

        return serviceItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowActiveOrSubscription</Name>
				<Source><![CDATA[
    public boolean parmShowActiveOrSubscription(boolean _showActiveOrSubscription = showActiveOrSubscription)
    {
        showActiveOrSubscription = _showActiveOrSubscription;

        return showActiveOrSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscription</Name>
				<Source><![CDATA[
    public NoYes parmSubscription(NoYes    _subscription = subscription)
    {
        subscription  = _subscription;

        return subscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVariablesFromBuffer</Name>
				<Source><![CDATA[
    public void setVariablesFromBuffer(Args _args, Common _childBuffer = null)
    {
        TableId tableId = _args.dataset();
        Common buffer   = _args.record();

        this.checkResourceCategory(true);
        this.checkResourceProj(true);
        this.checkProjCategory(true);

        if (tableId == tableNum(TmpSysQuery))
        {
            Common emptyBuffer;
            TmpSysQuery tmpSysQuery = buffer as TmpSysQuery;
            tableId    = tmpSysQuery.Table_Id;

            DictTable dt = new DictTable(tableId);
            buffer = emptyBuffer;
            buffer = dt.makeRecord();
        }

        filterSubscription  = true;
        filterEstimate      = true;
        showActiveOrSubscription = false;
        serviceItem         = false;

        switch (tableId)
        {
            case    tableNum(ProjCategory):
                filterSubscription  = false;
                filterEstimate      = false;
                break;

            case    tableNum(ProjJournalTable):
                ProjJournalTable projJournalTable    = buffer as ProjJournalTable;
                projId              = projJournalTable.ProjId;
                resource            = projJournalTable.Resource;
                categoryId          = projJournalTable.CategoryId;
                if (projJournalTable.JournalType == ProjJournalType::Revenue)
                {
                    categoryType        = ProjCategoryType::Revenue;
                    projType            = ProjType::TimeMaterial;
                    this.checkProjType(true);
                }
                else if (projJournalTable.JournalType == ProjJournalType::BegBalance)
                {
                    categoryType        = ProjCategoryType::None;
                }

                else
                {
                    categoryType        = ProjCategoryType::Hour;
                }

                if (!(resource && categoryId))
                {
                    this.checkResourceCategory(false);
                }

                this.checkProjCategory(false);

                if (!(resource && projId))
                {
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(PSAActivityEstimates):
                PSAActivityEstimates activityEstimates    = buffer as PSAActivityEstimates;
                projId      = ProjPlanVersionDetail::findByHierarchyId(activityEstimates.ProjPlanHierarchyId).ProjId;
                categoryId  = activityEstimates.ProjCategoryId;
                switch (activityEstimates.ProjTransType)
                {
                    case QuotationProjTransType::Hour:
                        categoryType = ProjCategoryType::Hour;
                        break;
                    case QuotationProjTransType::Item:
                        categoryType = ProjCategoryType::Item;
                        break;
                    case QuotationProjTransType::Fee:
                        categoryType = ProjCategoryType::Revenue;
                        break;
                    case QuotationProjTransType::Expense:
                        categoryType = ProjCategoryType::Cost;
                        break;
                }
                break;

            case    tableNum(ProjPlanVersion):
                ProjPlanVersion planVersion    = buffer as ProjPlanVersion;
                projId      = ProjPlanVersionDetail::findByHierarchyId(planVersion.HierarchyId).ProjId;
                categoryId  = planVersion.TaskCategory;
                categoryType = ProjCategoryType::Hour;
                break;

            case    tableNum(ProjForecastEmpl):
                ProjForecastEmpl projForecastEmpl    = buffer as ProjForecastEmpl;
                resource            = projForecastEmpl.Resource;
                projId              = projForecastEmpl.ProjId;
                categoryId          = projForecastEmpl.CategoryId;
                categoryType        = ProjCategoryType::Hour;
                if (projForecastEmpl.ResourceValidationSkipped == NoYes::Yes)
                {
                    this.checkResourceCategory(false);
                }
                break;

            case    tableNum(ProjEmplTrans):
                ProjEmplTrans projEmplTrans       = buffer as ProjEmplTrans;
                resource            = projEmplTrans.Resource;
                projId              = projEmplTrans.ProjId;
                categoryId          = projEmplTrans.CategoryId;
                categoryType        = ProjCategoryType::Hour;
                if (!resource &&
                    (projEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance || projEmplTrans.TransactionOrigin == ProjOrigin::ProductionConsumed))
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(ProjHourCostPrice):
                ProjHourCostPrice projHourCostPrice   = buffer as ProjHourCostPrice;
                resource            = projHourCostPrice.Resource;
                projId              = projHourCostPrice.ProjId;
                categoryId          = projHourCostPrice.CategoryId;
                categoryType        = ProjCategoryType::Hour;
                break;

            case    tableNum(ProjHourSalesPrice):
                ProjHourSalesPrice projHourSalesPrice  = buffer as ProjHourSalesPrice;
                resource            = projHourSalesPrice.Resource;
                projId              = projHourSalesPrice.ProjId;
                categoryId          = projHourSalesPrice.CategoryId;
                categoryType        = ProjCategoryType::Hour;
                break;

            case    tableNum(ResourceSetup):
                ResourceSetup resourceSetup = buffer as ResourceSetup;
                categoryId          = resourceSetup.defaultTimeCategoryId();
                categoryType        = ProjCategoryType::Hour;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProjActivity):
                ProjActivity projActivity = buffer as ProjActivity;
                ProjTable projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities::find(projActivity.ActivityNumber), tableNum(ProjTable)) as ProjTable;
                projId              = projTable.ProjId;
                excludeRevenue      = true;
                break;

            case    tableNum(ProdRoute):
                ProdRoute prodRoute = buffer as ProdRoute;
                categoryType        = ProjCategoryType::Hour;
                production          = true;

                if (prodRoute.getResource(true,true).WrkCtrType != WrkCtrType::Personnel )
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(ProdJournalRoute):
                ProdJournalRoute prodJournalRoute = buffer as ProdJournalRoute;
                categoryType        = ProjCategoryType::Hour;
                production          = true;
                break;

            //    cost
            case    tableNum(LedgerJournalTrans):
            case    tableNum(LedgerJournalTrans_Project):
                LedgerJournalTrans_Project ledgerJournalTrans_Project;

                if (tableId == tableNum(LedgerJournalTrans))
                {
                    // _args.caller() is the FormStringControl for this lookup field.
                    // Need to get the the LedgerJournalTrans_Project buffer record from the caller Form,
                    // so that we will get the correct data which reflect any user's changes.
                    FormRun callerForm = _args.caller().formRun();
                    if (callerForm && callerForm.dataSource(tableStr(LedgerJournalTrans_Project)))
                    {
                        ledgerJournalTrans_Project = callerForm.dataSource(tableStr(LedgerJournalTrans_Project)).cursor() as LedgerJournalTrans_Project;
                    }
                }
                else
                {
                    ledgerJournalTrans_Project  = buffer as LedgerJournalTrans_Project;
                }

                projId              = ledgerJournalTrans_Project.ProjId;
                categoryId          = ledgerJournalTrans_Project.CategoryId;
                categoryType        = ProjCategoryType::Cost;
                resource            = ledgerJournalTrans_Project.Resource;
                if (!resource)
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(ProjControlPeriodTable):
                ProjControlPeriodTable projControlPeriodTable = buffer as ProjControlPeriodTable;
                categoryId              = projControlPeriodTable.CategoryNew;
                categoryType            = ProjCategoryType::Cost;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProjForecastCost):
                ProjForecastCost projForecastCost = buffer as ProjForecastCost;
                projId              = projForecastCost.ProjId;
                categoryId          = projForecastCost.CategoryId;
                categoryType        = ProjCategoryType::Cost;
                resource            = projForecastCost.Resource;
                if (!resource)
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                filterEstimate      = false;
                break;

            case    tableNum(ProjCostTrans):
                ProjCostTrans projCostTrans = buffer as ProjCostTrans;
                projId              = projCostTrans.ProjId;
                categoryId          = projCostTrans.CategoryId;
                categoryType        = ProjCategoryType::Cost;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProjParameters):
                ProjParameters projParameters = buffer as ProjParameters;
                FormRun callerForm = _args.caller();
                if (callerForm)
                {
                    FormStringControl lookupControl = callerForm.selectedControl();
                    if (lookupControl)
                    {
                        switch (fieldExt2Id(lookupControl.dataField()))
                        {
                            case fieldNum(ProjParameters, CostCategory) :
                                categoryId          = projParameters.CostCategory;
                                categoryType        = ProjCategoryType::Cost;
                                break;

                            case fieldNum(ProjParameters, EmplCategory) :
                                categoryId          = projParameters.EmplCategory;
                                categoryType        = ProjCategoryType::Hour;
                                break;

                            case fieldNum(ProjParameters, RevenueCategory) :
                                categoryId          = projParameters.RevenueCategory;
                                categoryType        = ProjCategoryType::Revenue;
                                break;

                            case fieldNum(ProjParameters, ItemCategory) :
                                categoryId          = projParameters.ItemCategory;
                                categoryType        = ProjCategoryType::Item;
                                break;
                        }
                    }
                }

                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProjCostSalesPrice):
                ProjCostSalesPrice projCostSalesPrice   = buffer as ProjCostSalesPrice;
                resource              = projCostSalesPrice.Resource;
                projId              = projCostSalesPrice.ProjId;
                categoryId          = projCostSalesPrice.CategoryId;
                categoryType        = ProjCategoryType::Cost;
                if (!resource)
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(ProjCostPriceExpense):
                ProjCostPriceExpense projCostPriceExpense = buffer as ProjCostPriceExpense;
                resource              = projCostPriceExpense.Resource;
                projId              = projCostPriceExpense.ProjId;
                categoryId          = projCostPriceExpense.CategoryId;
                categoryType        = ProjCategoryType::Cost;
                if (!resource)
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(ProjDefaultOffsetSetup):
                ProjDefaultOffsetSetup projDefaultOffsetSetup = buffer as ProjDefaultOffsetSetup;
                categoryId          = projDefaultOffsetSetup.ProjCategoryId;
                categoryType        = ProjCategoryType::Cost;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            // Revenue forecase
            case    tableNum(ProjForecastRevenue):
                ProjForecastRevenue projForecastRevenue = buffer as ProjForecastRevenue;
                projId              = projForecastRevenue.ProjId;
                categoryId          = projForecastRevenue.CategoryId;
                categoryType        = ProjCategoryType::Revenue;
                resource            = projForecastRevenue.Resource;
                filterSubscription  = false;
                if (!resource)
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(ProjRevenueTrans):
                ProjRevenueTrans projRevenueTrans = buffer as ProjRevenueTrans;
                projId              = projRevenueTrans.ProjId;
                resource            = projRevenueTrans.Resource;
                categoryId          = projRevenueTrans.CategoryId;
                categoryType        = ProjCategoryType::Revenue;
                if (!(resource && categoryId))
                {
                    this.checkResourceCategory(false);
                }
                if (!(resource && projId))
                {
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(ProjRevenueSalesPrice):
                ProjRevenueSalesPrice projRevenueSalesPrice = buffer as ProjRevenueSalesPrice;
                resource            = projRevenueSalesPrice.Resource;
                projId              = projRevenueSalesPrice.ProjId;
                categoryId          = projRevenueSalesPrice.CategoryId;
                categoryType        = ProjCategoryType::Revenue;
                if (!resource)
                {
                    this.checkResourceCategory(false);
                    this.checkResourceProj(false);
                }
                break;

            // item forecast
            case    tableNum(ForecastSales):
                ForecastSales forecastSales = buffer as ForecastSales;
                projId              = forecastSales.ProjId;
                categoryId          = forecastSales.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(InventJournalTrans):
                InventJournalTrans inventJournalTrans = buffer as InventJournalTrans;
                projId              = inventJournalTrans.ProjId;
                categoryId          = inventJournalTrans.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(VendInvoiceInfoLine_Project):
                VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project = buffer as VendInvoiceInfoLine_Project;
                projId              = vendInvoiceInfoLine_Project.ProjId;
                categoryId          = vendInvoiceInfoLine_Project.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                projDataAreaID      = vendInvoiceInfoLine_Project.ProjDataAreaId;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProdTable):
                ProdTable prodTable = buffer as ProdTable;
                projId              = prodTable.ProjId;
                categoryId          = prodTable.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProdTableProj):
                ProdTableProj prodTableProj = buffer as ProdTableProj;
                projId              = ProdTable::find(prodTableProj.ProdId).ProjId;
                categoryId          = prodTableProj.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProdBOM):
                ProdBOM prodBOM     = buffer as ProdBOM;
                projId              = ProdTable::find(prodBOM.ProdId).ProjId;
                categoryId          = prodBOM.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProdJournalBOM):
                ProdJournalBOM prodJournalBOM = buffer as ProdJournalBOM;
                projId              = prodJournalBOM.ProjId;
                categoryId          = prodJournalBOM.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProdParmSplit):
                ProdParmSplit prodParmSplit = buffer as ProdParmSplit;
                projId              = prodParmSplit.ProjId;
                categoryId          = prodParmSplit.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;
            case    tableNum(SalesLine):
                SalesLine salesLine = buffer as SalesLine;
                projId              = salesLine.ProjId;
                categoryId          = salesLine.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(AgreementLineDefault):
                AgreementLineDefault agreementLineDefault = buffer as AgreementLineDefault;
                AgreementLine localAgreementLine = this.getAgreementLine(_args, _childBuffer);
                projId                  = localAgreementLine.ProjectProjId;
                categoryId              = agreementLineDefault.ProjectCategory;
                categoryType            = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(BudgetReservationLine_PSN):
                BudgetReservationLine_PSN budgetReservationLine = buffer as BudgetReservationLine_PSN;
                projId                  = budgetReservationLine.ProjId;
                categoryId              = budgetReservationLine.ProjCategoryId;
                categoryType            = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProjItemTrans):
                ProjItemTrans projItemTrans = buffer as ProjItemTrans;
                projId              = projItemTrans.ProjId;
                categoryId          = projItemTrans.CategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(PurchLine):
                PurchLine purchLine = buffer as PurchLine;
                projId              = purchLine.ProjId;
                categoryId          = purchLine.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(PurchReqLine):
                PurchReqLine purchReqLine = buffer as PurchReqLine;
                projId              = purchReqLine.ProjId;
                categoryId          = purchReqLine.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(PurchRFQCaseLine):
                PurchRFQCaseLine purchRFQCaseLine = buffer as PurchRFQCaseLine;
                projId              = purchRFQCaseLine.ProjId;
                categoryId          = purchRFQCaseLine.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProjJournalTrans):
                ProjJournalTrans projJournalTrans = buffer as ProjJournalTrans;
                ProjJournalType journalType = ProjJournalTable::find(projJournalTrans.JournalId).JournalType;
                projId              = projJournalTrans.ProjId;
                categoryId          = projJournalTrans.CategoryId;
                resource            = projJournalTrans.Resource;
                if (journalType == ProjJournalType::Hour)
                {
                    categoryType    = ProjCategoryType::Hour;
                }
                else if (journalType    == ProjJournalType::Revenue) //    revenue
                {
                    categoryType        = ProjCategoryType::Revenue;
                    if (!(resource && categoryId))
                    {
                        this.checkResourceCategory(false);
                    }
                    if (!(resource && projId))
                    {
                        this.checkResourceProj(false);
                    }
                }
                break;

            case tableNum(ProjBegBalJournalTrans_CostSales):
                ProjBegBalJournalTrans_CostSales projBegBalJournalTrans_CostSales = buffer as ProjBegBalJournalTrans_CostSales;
                projId              = projBegBalJournalTrans_CostSales.ProjId;
                resource            = projBegBalJournalTrans_CostSales.Resource;
                categoryId          = projBegBalJournalTrans_CostSales.ProjCategoryId;
                switch (projBegBalJournalTrans_CostSales.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Cost :
                        categoryType = ProjCategoryType::Cost;
                        break;

                    case BegBalProjTransTypeCost::Hour :
                        categoryType = ProjCategoryType::Hour;
                        if (! resource)
                        {
                            this.checkResourceCategory(false);
                            this.checkResourceProj(false);
                        }
                        break;

                    case BegBalProjTransTypeCost::Item :
                        categoryType = ProjCategoryType::Item;
                        break;

                    default:
                        categoryType = this.getProjCategoryTypeForCustomProjTransType(projBegBalJournalTrans_CostSales);
                        break;
                }
                break;

            case tableNum(ProjBegBalJournalTrans_Fee):
                ProjBegBalJournalTrans_Fee projBegBalJournalTrans_Fee = buffer as ProjBegBalJournalTrans_Fee;
                projId              = projBegBalJournalTrans_Fee.ProjId;
                resource            = projBegBalJournalTrans_Fee.Resource;
                categoryId          = projBegBalJournalTrans_Fee.CategoryId;
                categoryType = ProjCategoryType::Revenue;
                if (!(resource && categoryId))
                {
                    this.checkResourceCategory(false);
                }
                if (!(resource && projId))
                {
                    this.checkResourceProj(false);
                }
                break;

            case    tableNum(TmpProjAdjustmentCreate):
                TmpProjAdjustmentCreate tmpProjAdjustmentCreate = buffer as TmpProjAdjustmentCreate;
                ProjAdjustmentType projAdjustmentType = tmpProjAdjustmentCreate.AdjustmentType;
                projId                  = tmpProjAdjustmentCreate.ProjId;
                categoryId              = tmpProjAdjustmentCreate.CategoryId;

                switch (projAdjustmentType)
                {
                    case ProjAdjustmentType::Hour   :
                        resource          = tmpProjAdjustmentCreate.Resource;
                        categoryType    = ProjCategoryType::Hour;
                        break;

                    case ProjAdjustmentType::Cost       :
                        categoryType    = ProjCategoryType::Cost;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;

                    case ProjAdjustmentType::Revenue    :
                        categoryType    = ProjCategoryType::Revenue;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;

                    case ProjAdjustmentType::Item    :
                        categoryType    = ProjCategoryType::Item;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;
                }

                break;

            case    tableNum(InventTable):
                InventTable inventTable = buffer as InventTable;
                categoryId          = inventTable.ProjCategoryId;
                categoryType        = ProjCategoryType::Item;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                this.checkProjCategory(false);
                break;

            case    tableNum(TmpProjAdjustment):
                TmpProjAdjustment tmpProjAdjustment = buffer as TmpProjAdjustment;
                ProjAdjustmentType projAdjustmentTypeLocal = tmpProjAdjustment.AdjustmentType;
                projId                  = tmpProjAdjustment.ProjId;
                categoryId              = tmpProjAdjustment.CategoryId;

                switch (projAdjustmentTypeLocal)
                {
                    case ProjAdjustmentType::Hour  :
                        resource          = tmpProjAdjustment.Resource;
                        categoryType    = ProjCategoryType::Hour;
                        break;

                    case ProjAdjustmentType::Cost       :
                        categoryType    = ProjCategoryType::Cost;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;

                    case ProjAdjustmentType::Revenue    :
                        categoryType    = ProjCategoryType::Revenue;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;

                    case ProjAdjustmentType::Item    :
                        categoryType    = ProjCategoryType::Item;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;
                }

                break;

            //  SMA Begin ->
            case    tableNum(SMAAgreementLine):
                SMAAgreementLine agreementLine = buffer as SMAAgreementLine;
                resource            = ResourceFacade::findByWorker(agreementLine.Worker);
                projId              = agreementLine.ProjId;
                categoryId          = agreementLine.ProjCategoryId;
                categoryType        = SMAServiceLineMap::projCategoryType(agreementLine.TransactionType);
                ProjCategory projCategory = ProjCategory::find(categoryId);

                switch (categoryType)
                {
                    case ProjCategoryType::Item :
                        serviceItem = true;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;
                    case ProjCategoryType::Revenue, ProjCategoryType::Cost:
                        if (!resource && projCategory.ProjCategoryEmplOption != ProjCategoryEmplOption::Mandatory)
                        {
                            this.checkResourceCategory(false);
                            this.checkResourceProj(false);
                        }
                        break;
                }
                break;

            case    tableNum(SMAServiceOrderLine):
                SMAServiceOrderLine serviceOrderLine = buffer as SMAServiceOrderLine;
                resource            = ResourceFacade::findByWorker(serviceOrderLine.Worker);
                projId              = serviceOrderLine.ProjId;
                categoryId          = serviceOrderLine.ProjCategoryId;
                categoryType        = SMAServiceLineMap::projCategoryType(serviceOrderLine.TransactionType);
                ProjCategory projCategoryLocal = ProjCategory::find(categoryId);
                switch (categoryType)
                {
                    case ProjCategoryType::Item :
                        serviceItem = true;
                        this.checkResourceCategory(false);
                        this.checkResourceProj(false);
                        break;

                    case ProjCategoryType::Revenue, ProjCategoryType::Cost:
                        if (!resource && projCategoryLocal.ProjCategoryEmplOption != ProjCategoryEmplOption::Mandatory)
                        {
                            this.checkResourceCategory(false);
                            this.checkResourceProj(false);
                        }
                        break;
                }
                break;

            case    tableNum(SMASalesPriceSubscription):
                SMASalesPriceSubscription salesPriceSubscription = buffer as SMASalesPriceSubscription;
                projId              = salesPriceSubscription.ProjId;
                categoryId          = salesPriceSubscription.CategoryId;
                categoryType        = ProjCategoryType::Revenue;
                subscription        = true;
                this.checkResourceProj(false);
                this.checkResourceCategory(false);
                this.checkProjCategory(false);
                break;

            case    tableNum(SMASubscriptionTable):
                SMASubscriptionTable subscriptionTable   = buffer as SMASubscriptionTable;
                categoryId          = subscriptionTable.ProjCategoryId;
                categoryType        = ProjCategoryType::Revenue;
                subscription        = true;
                this.checkResourceProj(false);
                this.checkResourceCategory(false);
                this.checkProjCategory(false);
                break;

            //  SMA End <-

            // Time and attendance - begin
            case    tableNum(JmgEmployee):
                JmgEmployee jmgEmployee = buffer as JmgEmployee;
                resource            = ResourceFacade::findByWorker(jmgEmployee.Worker);
                categoryId          = jmgEmployee.ProjCategoryId;
                categoryType        = ProjCategoryType::Hour;
                this.checkResourceProj(false);
                this.checkProjCategory(false);
                break;

            case    tableNum(JmgTmpJobBundleProjStartup):
                JmgTmpJobBundleProjStartup jmgTmpJobBundleProjStartup = buffer as JmgTmpJobBundleProjStartup;
                resource            = ResourceFacade::findByWorker(jmgTmpJobBundleProjStartup.Worker);
                categoryId          = jmgTmpJobBundleProjStartup.ProjCategory;
                categoryType        = ProjCategoryType::Hour;
                projId              = jmgTmpJobBundleProjStartup.JobRef;
                break;

            case    tableNum(JmgTimecardTrans):
                JmgTimecardTrans jmgTimecardTrans = buffer as JmgTimecardTrans;
                resource            = ResourceFacade::findByWorker(jmgTimecardTrans.Worker);
                categoryId          = jmgTimecardTrans.ProjCategory;
                categoryType        = ProjCategoryType::Hour;
                projId              = jmgTimecardTrans.projectId();
                break;

            case    tableNum(JmgStampJournalTrans):
                JmgStampJournalTrans jmgStampJournalTrans = buffer as JmgStampJournalTrans;
                resource            = ResourceFacade::findByWorker(jmgStampJournalTrans.Worker);
                categoryId          = jmgStampJournalTrans.ProjCategory;
                categoryType        = ProjCategoryType::Hour;
                projId              = jmgStampJournalTrans.JobRef;
                break;
            // SFC - End

            // Timesheet - Begin
            case    tableNum(TSTimesheetLine):
                TSTimesheetLine tsTimesheetLine = buffer as TSTimesheetLine;
                resource            = tsTimesheetLine.Resource;
                categoryId          = tsTimesheetLine.CategoryId;
                categoryType        = ProjCategoryType::Hour;
                projId              = tsTimesheetLine.ProjId;
                projDataAreaID      = tsTimesheetLine.ProjectDataAreaId;
                break;
            case    tableNum(TSTimesheetFavorites):
                TSTimesheetFavorites tsTimesheetFavorites = buffer as TSTimesheetFavorites;
                categoryId          = tsTimesheetFavorites.CategoryId;
                categoryType        = ProjCategoryType::Hour;
                projId              = tsTimesheetFavorites.ProjId;
                resource            = tsTimesheetFavorites.Resource;
                projDataAreaID      = tsTimesheetFavorites.ProjectDataAreaId;
                break;
            // Timesheet - End

            //Project budget - Start
            case    tableNum(ProjBudgetLine):
                ProjBudgetLine projBudgetLine = buffer as ProjBudgetLine;
                categoryId     = projBudgetLine.CategoryId;
                projId         = projBudgetLine.ProjId;
                categoryType   = ProjCategory::transType2CategoryType(projBudgetLine.ProjTransType);
                this.checkResourceProj(false);
                this.checkResourceCategory(false);
                break;

            case    tableNum(TmpProjBudgetRevisionLine):
                TmpProjBudgetRevisionLine tmpProjBudgetRevisionLine = buffer as tmpProjBudgetRevisionLine;
                categoryId     = tmpProjBudgetRevisionLine.CategoryId;
                projId         = tmpProjBudgetRevisionLine.ProjId;
                categoryType   = ProjCategory::transType2CategoryType(tmpProjBudgetRevisionLine.ProjTransType);
                this.checkResourceProj(false);
                this.checkResourceCategory(false);
                break;
            //Project budget - End

            case    tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = buffer as SalesQuotationLine;
                projId = salesQuotationLine.projId();
                categoryId = salesQuotationLine.ProjCategoryId;

                resource = this.getResourceForSalesQuotationLine(salesQuotationLine);

                categoryType = this.getCategoryTypeForSalesQuotationLine(salesQuotationLine);

                if (!projId)
                {
                    // Only validate when linked project id exists
                    this.checkResourceProj(false);
                    this.checkProjCategory(false);
                }
                break;

            case tableNum(CustInvoiceLine) :
                CustInvoiceLine custInvoiceLine = buffer as CustInvoiceLine;
                categoryType    =   ProjCategoryType::Revenue;
                projId          =   custInvoiceLine.ProjId;
                categoryId      =   custInvoiceLine.ProjCategoryId;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case tableNum(CustInvoiceStandardLineTemplate) :
                CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate = buffer as CustInvoiceStandardLineTemplate;
                categoryType    =   ProjCategoryType::Revenue;
                projId          =   custInvoiceStandardLineTemplate.ProjId;
                categoryId      =   custInvoiceStandardLineTemplate.ProjCategoryId;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case    tableNum(ProjectAccountingDistribution):
                ProjectAccountingDistribution projectAccountingDistribution = buffer as ProjectAccountingDistribution;
                AccountingDistribution accountingDistribution = this.getAccountingDistribution(_args, _childBuffer);
                SourceDocumentLineItem sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(accountingDistribution.SourceDocumentLine);
                SourceDocumentLineItemIProject sourceDocumentLineItemIProject = sourceDocumentLineItem as SourceDocumentLineItemIProject;
                projId = ProjTable::findRecId(projectAccountingDistribution.ProjTable).ProjId;
                categoryId = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory).CategoryId;
                categoryType = ProjectSourceDocumentLineItemHelper::projCategoryType(sourceDocumentLineItem);
                resource = sourceDocumentLineItemIProject.parmProjectResourceRecId();
                if (!ResourceFacade::isResourceInCurrentCompany(resource))
                {
                    resource = 0;
                }
                if (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem) == ProjTransType::Revenue)
                {
                    projType = ProjType::TimeMaterial;
                    this.checkProjType(true);
                }
                if (!(resource && categoryId))
                {
                    this.checkResourceCategory(false);
                }
                if (!(projId && categoryId))
                {
                    this.checkProjCategory(false);
                }
                if (!(resource && projId))
                {
                    this.checkResourceProj(false);
                }
                break;

            case tableNum(TrvExpTable):
                TrvExpTable trvExpTable = buffer as TrvExpTable;
                projId              = trvExpTable.ProjId;
                resource            = ResourceFacade::findByWorker(trvExpTable.CreatingWorker, trvExpTable.LegalEntity);
                this.checkResourceCategory(false);
                this.checkProjCategory(false);
                break;

            case tableNum(TrvExpTrans):
                TrvExpTrans trvExpTrans = buffer as TrvExpTrans;
                if (trvExpTrans.InterCompanyCategory != '' &&
                    trvExpTrans.InterCompanyLE       != '' &&
                    trvExpTrans.ReferenceDataAreaId  != trvExpTrans.InterCompanyLE)
                {
                    categoryId      = trvExpTrans.InterCompanyCategory;
                }
                else
                {
                    categoryId      = trvExpTrans.CostType;
                }
                projId              = trvExpTrans.ProjId;
                projDataAreaID      = ProjTable::find(projId).DataAreaId;
                interCompanyLE      = trvExpTrans.InterCompanyLE;
                resource            = ResourceFacade::findByWorker(trvExpTrans.CreatingWorker, trvExpTrans.LegalEntity);

                break;

            case tableNum(TrvRequisitionLine):
                TrvRequisitionLine trvRequisitionLine = buffer as TrvRequisitionLine;
                categoryId          = trvRequisitionLine.Category;
                projId              = ProjTable::findRecId(trvRequisitionLine.ProjTable).ProjId;
                TrvRequisitionTable trvRequisitionTable = TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable);
                resource            = ResourceFacade::findByWorker(trvRequisitionTable.CreatingWorker, trvRequisitionTable.LegalEntity);
                break;

            case tableNum(CustBillingCodeVersion) :
                CustBillingCodeVersion custBillingCodeVersion = buffer as CustBillingCodeVersion;
                categoryType    =   ProjCategoryType::Revenue;
                projId          =   custBillingCodeVersion.ProjId;
                categoryId      =   custBillingCodeVersion.ProjCategoryId;
                this.checkResourceCategory(false);
                this.checkResourceProj(false);
                break;

            case tableNum(AdvancedLedgerEntryLine) :
                AdvancedLedgerEntryLine advancedLedgerEntryLine = buffer as AdvancedLedgerEntryLine;
                projId          =   advancedLedgerEntryLine.ProjId;
                categoryId      =   advancedLedgerEntryLine.ProjCategoryId;
                resource        =   advancedLedgerEntryLine.Resource;
                this.checkProjCategory(true);
                break;

            default :
                ProjValCheckTrans::setVariablesFromRemainingBuffers(this, _args, _childBuffer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCategoryTypeForCustomProjTransType</Name>
				<Source><![CDATA[
    protected ProjCategoryType getProjCategoryTypeForCustomProjTransType(ProjBegBalJournalTrans_CostSales _projBegBalJournalTrans_CostSales)
    {
        return ProjCategoryType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryTypeForSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjCategoryType</c> enumeration value for the specified <c>SalesQuotationLine</c> record.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record.
    /// </param>
    /// <returns>
    /// A <c>ProjCategoryType</c> enumeration value.
    /// </returns>
    protected ProjCategoryType getCategoryTypeForSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        ProjCategoryType projCategoryType;

        switch (_salesQuotationLine.ProjTransType)
        {
            case QuotationProjTransType::Expense:
                projCategoryType = ProjCategoryType::Cost;
                break;

            case QuotationProjTransType::Fee:
                projCategoryType = ProjCategoryType::Revenue;
                break;

            case QuotationProjTransType::Hour:
                projCategoryType = ProjCategoryType::Hour;
                break;

            case QuotationProjTransType::Item:
                projCategoryType = ProjCategoryType::Item;
                break;

            case QuotationProjTransType::None:
                projCategoryType = ProjCategoryType::None;
                break;
        }

        return projCategoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceForSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource record Id for the specified <c>SalesQuotationLine</c> record.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record.
    /// </param>
    /// <returns>
    /// A resource record Id.
    /// </returns>
    protected ResourceRecId getResourceForSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        ResourceRecId resourceRecId;

        switch (_salesQuotationLine.ProjTransType)
        {
            case QuotationProjTransType::Expense:
                resourceRecId = _salesQuotationLine.ProjectResource;
                break;

            case QuotationProjTransType::Fee:
                resourceRecId = _salesQuotationLine.ProjectResource;
                break;

            case QuotationProjTransType::Hour:
                resourceRecId = _salesQuotationLine.ProjectResource;
                break;
        }

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVariablesFromBuffer_PSA</Name>
				<Source><![CDATA[
    protected boolean setVariablesFromBuffer_PSA(Args _args, Common _childBuffer = null)
    {
        TableId                     tableId    = _args.dataset();
        Common                      buffer      = _args.record();
        PSAActivityEstimates        psaActivityEstimates       ;

        boolean retVal = false;

        switch (tableId)
        {
            case tableNum(PSAActivityEstimates):
                psaActivityEstimates  = buffer as PSAActivityEstimates;
                ProjTable projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities::find(psaActivityEstimates.ActivityNumber), tableNum(ProjTable));
                if (projTable)
                {
                    projId          = projTable.ProjId;
                }
                categoryId          = psaActivityEstimates.ProjCategoryId;
                resource              = psaActivityEstimates.Resource;
                if (psaActivityEstimates.ProjTransType == QuotationProjTransType::Expense)
                {
                    categoryType = ProjCategoryType::Cost;
                }
                if (psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour)
                {
                    categoryType = ProjCategoryType::Hour;
                }
                if (psaActivityEstimates.ProjTransType == QuotationProjTransType::Fee)
                {
                    categoryType = ProjCategoryType::Revenue;
                }
                if (psaActivityEstimates.ProjTransType == QuotationProjTransType::Item)
                {
                    categoryType = ProjCategoryType::Item;
                }

                retVal = true;
                break;
            default:
                retVal = false;
                break;
        }
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMandatory</Name>
				<Source><![CDATA[
    public boolean validateMandatory(Common _buffer, Common _childBuffer = null)
    {
        if (_buffer.TableId == tableNum(ProjItemTrans)
            || _buffer.TableId == tableNum(ProjCostTrans)
            || _buffer.TableId == tableNum(ProjRevenueTrans)
            || _buffer.TableId == tableNum(ProjEmplTrans))
        {
            // Code below assumes ProjId has same name in all 4 tables
            if (!_buffer.(fieldName2Id(_buffer.TableId, fieldstr(ProjItemTrans, ProjId))))
            {
                // The project must be specified.
                return checkFailed("@SYS53238");
            }

            // Code below assumes CategoryId has same name in all 4 tables
            if (!_buffer.(fieldName2Id(_buffer.TableId, fieldstr(ProjItemTrans, CategoryId))))
            {
                // A category relation must be specified.
                return checkFailed("@SYS68856");
            }
        }

        ProjParameters projParameters = ProjParameters::find();
        boolean ret;
        boolean checkResourceFlag = true;

        Args args = new Args();
        args.record(_buffer);

        /*Ask how to get the data source name to be able to use it to verify the require activity field
    */
        if (_buffer.TableId == tableNum(ProjectAccountingDistribution))
        {
            ProjectAccountingDistribution projectAccountingDistribution = _buffer as ProjectAccountingDistribution;
            AccountingDistribution accountingDistribution = this.getAccountingDistribution(args, _childBuffer);
            SourceDocumentLineItem sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(accountingDistribution.SourceDocumentLine);
            ret = projectAccountingDistribution.checkReqActivity(accountingDistribution, projectAccountingDistribution, sourceDocumentLineItem);
            if (!ret)
            {
                return ret;
            }
        }

        if (_buffer.TableId == tableNum(ProjJournalTrans)) // Check for Hour Trx 604
        {
            ProjJournalTrans projJournalTrans = _buffer as ProjJournalTrans;
            ProjJournalTable projJournalTable = ProjJournalTable::find(projJournalTrans.JournalId);
            if (projJournalTable.JournalType == ProjJournalType::Hour)
            {
                ret = projJournalTrans.checkReqActivity(projJournalTrans);
                if (!ret)
                {
                    return checkFailed("@Proj:ActivityNumberMissingForHour");
                }
            }
        }

        if (_buffer.TableId == tableNum(TSTimesheetLine)) // Check for Timesheet journal
        {
            TSTimesheetLine tsTimesheetLine = _buffer as TSTimesheetLine;
            if (tsTimesheetLine.ProjectDataAreaId != tsTimesheetLine.dataAreaId)
            {
                isIntercompany = true;
            }
            ret = tsTimesheetLine.checkReqActivity(tsTimesheetLine);
            if (!ret)
            {
                return checkFailed("@Proj:ActivityNumberMissingForTimesheet");
            }
        }

        if (_buffer.TableId == tableNum(TSTimesheetFavorites)) // Check for Timesheet
        {
            TSTimesheetFavorites tsTimesheetFavorites = _buffer as TSTimesheetFavorites;
            ret = tsTimesheetFavorites.checkReqActivity(tsTimesheetFavorites);
            if (!ret)
            {
                return checkFailed("@Proj:ActivityNumberMissingForTimesheet");
            }
        }

        if (_buffer.TableId == tableNum(LedgerJournalTrans_Project)) // Check for Expense Trx
        {
            LedgerJournalTable  ledgerJournalTable;
            LedgerJournalTrans_Project ledgerJournalTrans_Project = _buffer as LedgerJournalTrans_Project;
            ledgerJournalTable = LedgerJournalTable::find(LedgerJournalTrans::findRecId(ledgerJournalTrans_Project.RefRecId, false).JournalNum);
            ret = ledgerJournalTrans_Project.checkReqActivity();
            if (!ret)
            {
                if (ledgerJournalTable.JournalType == LedgerJournalType::Cost)
                {
                    return checkFailed("@Expense:ActivityNumberMissing");
                }
                else
                {
                    return checkFailed("@Proj:ActivityNumberMissingForJournal");
                }
            }
        }

        if (_buffer.TableId == tableNum(InventJournalTrans)) // Check for item Trx
        {
            InventJournalTrans inventJournalTrans;
            ret = inventJournalTrans.checkReqActivity(_buffer as InventJournalTrans);
            if (!ret)
            {
                return checkFailed("@Proj:ActivityNumberMissingForItemTrans");
            }
        }

        if (_buffer.TableId == tableNum(ProjForecastEmpl))
        {
            ProjForecastEmpl projForecastEmpl = _buffer as ProjForecastEmpl;
            ret = projForecastEmpl.checkReqActivity(projForecastEmpl);
            if (!ret)
            {
                return checkFailed("@SYS104473");
            }

            if (projForecastEmpl.ResourceValidationSkipped)
            {
                checkResourceFlag = false;
            }
        }

        if (_buffer.TableId == tableNum(ProjForecastCost)) // Forecast Expense 578
        {
            ProjForecastCost projForecastCost;
            ret = projForecastCost.checkReqActivity(_buffer as ProjForecastCost);
            if (!ret)
            {
                return checkFailed("@SYS104472");
            }
        }

        if (_buffer.TableId == tableNum(ForecastSales)) // Item Expense 578
        {
            ForecastSales forecastSales;
            ret = forecastSales.checkReqActivity(_buffer as ForecastSales);
            if (!ret)
            {
                return checkFailed("@SYS104474");
            }
        }

        if (this.checkBuffer(args))
        {
            this.setVariablesFromBuffer(args, _childBuffer);
        }

        if (this.checkResourceCategory() && projParameters.ValidationEmplCategory == ProjValParameter::Mandatory)
        {
            if (!this.parmCategoryId())
            {
                // A category relation must be specified.
                return checkFailed("@SYS68856");
            }

            if (!this.checkProjectResource(_buffer, _childBuffer, args))
            {
                // Worker must associate with a project resource.
                return checkFailed("@Res:WorkerNotAssociatedWithResource");
            }

            if (ProjCategory::createResourceConnection(this.parmResource(), isIntercompany))
            {
                DataAreaId company = (_buffer.TableId == tableNum(TrvExpTrans)) ? interCompanyLE : curExt();
                
                changecompany (company)
                {
                    ProjValEmplCategorySetUp projValEmplCategorySetUp, projValEmplCategorySetUp2;
                    ResourceRecId lookupResourceRecId = this.parmResource();

                    if (_buffer.TableId == tableNum(TrvExpTrans))
                    {
                        TrvExpTrans trvExpTrans = _buffer as TrvExpTrans;
                        lookupResourceRecId = ResourceFacade::findByWorker(trvExpTrans.CreatingWorker, CompanyInfo::findDataArea(trvExpTrans.InterCompanyLE).RecId);
                    }

                    select firstonly projValEmplCategorySetUp
                        where projValEmplCategorySetUp.Resource    == lookupResourceRecId &&
                              projValEmplCategorySetUp.CategoryId  == this.parmCategoryId();

                    // Check group
                    if (!projValEmplCategorySetUp)
                    {
                        select projValEmplCategorySetUp
                            where projValEmplCategorySetUp.CategoryId     == this.parmCategoryId()      &&
                                  projValEmplCategorySetUp.GroupId
                            exists join  projValEmplCategorySetUp2
                              where projValEmplCategorySetUp2.Resource  == this.parmResource()          &&
                                        projValEmplCategorySetUp2.GroupId == projValEmplCategorySetUp.GroupId;

                        if (!projValEmplCategorySetUp)
                        {
                            // The combination resource/category is mandatory, but does not exist for resource '%1' and category '%2'.
                            return checkFailed(strFmt("@Res:ResourceAndCategoryCombinationDoesNotExist", ResourceFacade::getID(this.parmResource()), this.parmCategoryId()));
                        }
                    }
                }
            }
        }

        if (this.checkResourceProj() && projParameters.ValidationEmplProj == ProjValParameter::Mandatory)
        {
            if (!this.parmProjId())
            {
                // The project must be specified.
                return checkFailed("@SYS53238");
            }

            ProjValEmplProjSetup projValEmplProjSetup, projValEmplProjSetup2;
            
            if (checkResourceFlag && !this.parmResource())
            {
                select firstOnly RecId from projValEmplProjSetup
                    where projValEmplProjSetup.Projid   == this.parmProjId() &&
                        projValEmplProjSetup.GroupId
                    exists join  projValEmplProjSetup2
                    where projValEmplProjSetup2.Resource  == this.parmResource() &&
                            projValEmplProjSetup2.GroupId == projValEmplProjSetup.GroupId;

                if (projValEmplProjSetup.RecId)
                {
                    checkResourceFlag = this.isEmployeeRequired(_buffer);
                }
                
                if (checkResourceFlag)
                {
                    // Employee number must be specified.
                    return checkFailed("@SYS67768");
                }
            }

            if (ProjTable::createResourceConnection(this.parmResource(), isIntercompany))
            {
                DataAreaId company = (_buffer.TableId == tableNum(TrvExpTrans)) ? interCompanyLE : curExt();
                
                changecompany (company)
                {
                    select firstonly projValEmplProjSetup
                        where projValEmplProjSetup.Resource    == this.parmResource()        &&
                                projValEmplProjSetup.Projid    == this.parmProjId();

                    // Check group
                    if (!projValEmplProjSetup)
                    {
                        select projValEmplProjSetup
                            where projValEmplProjSetup.Projid   == this.parmProjId()     &&
                                    projValEmplProjSetup.GroupId
                            exists join  projValEmplProjSetup2
                                where projValEmplProjSetup2.Resource  == this.parmResource()    &&
                                    projValEmplProjSetup2.GroupId == projValEmplProjSetup.GroupId;

                        if (!projValEmplProjSetup)
                        {
                            // The combination resource/project is mandatory, but does not exist for resource '%1' and project '%2'.
                            return checkFailed(strFmt("@Res:ResourceAndProjectCombinationDoesNotExist", ResourceFacade::getID(this.parmResource()), this.parmProjId()));
                        }
                    }
                }
            }
        }

        if (this.checkProjCategory() && projParameters.ValidationProjCategory   == ProjValParameter::Mandatory && !ProjCategory::find(this.parmCategoryId()).PSACustPaymentRetention)
        {
            if (!this.parmProjId())
            {
                // The project must be specified.
                return checkFailed("@SYS53238");
            }

            if (! this.parmCategoryId())
            {
                // A category relation must be specified.
                return checkFailed("@SYS68856");
            }

            if (ProjTable::find(this.parmProjId()).ValidateProjCategory == NoYes::Yes)
            {
                changecompany (this.parmProjDataAreaId())
                {
                    ProjValProjCategorySetUp projValProjCategorySetUp, projValProjCategorySetUp2;

                    select firstonly projValProjCategorySetUp
                        where projValProjCategorySetUp.CategoryId   == this.parmCategoryId()      &&
                              projValProjCategorySetUp.ProjId       == this.parmProjId();

                    // Check group
                    if (!projValProjCategorySetUp)
                    {
                        select projValProjCategorySetUp
                            where projValProjCategorySetUp.ProjId   == this.parmProjId()    &&
                                  projValProjCategorySetUp.GroupId
                            exists join  projValProjCategorySetUp2
                                  where projValProjCategorySetUp2.CategoryId  == this.parmCategoryId()    &&
                                        projValProjCategorySetUp2.GroupId     == projValProjCategorySetUp.GroupId;

                        if (!projValProjCategorySetUp)
                        {
                            // The combination project/category is mandatory, but does not exist for project '%1' and category '%2'.
                            return checkFailed(strFmt("@SYS69535", this.parmProjId(), this.parmCategoryId()));
                        }
                    }
                }
            }
        }

        if (_buffer.TableId == tableNum(VendInvoiceInfoLine_Project)) // Check for item Trx
        {
            VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project = _buffer;
            ret = vendInvoiceInfoLine_Project.checkReqActivity();
            if (!ret)
            {
                return checkFailed("@Proj:ActivityNumberMissingForVendorInvoice");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmployeeRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for <c>ProjCategoryType</c> or TableId and returns a boolean value.
    /// </summary>
    /// <param name = "_buffer">
    ///     A table buffer.
    /// </param>
    /// <returns>
    ///     false if <c>ProjCategoryType</c> is Item or buffer is <c>TSTimesheetFavorites</c> and TableGroup field has a value other than "Table"; otherwise, true.
    /// </returns>
    protected boolean isEmployeeRequired(Common _buffer)
    {
        boolean checkResourceFlag = true;

        if (this.parmCategoryType() == ProjCategoryType::Item )
        {
            checkResourceFlag = false;
        }

        if (_buffer.TableId == tableNum(TSTimesheetFavorites)) // Check for Timesheet
        {
            TSTimesheetFavorites tsTimesheetFavorites = _buffer as TSTimesheetFavorites;

            if(tsTimesheetFavorites.TableGroupAll != TableGroupAll::Table)
            {
                checkResourceFlag = false;
            }
        }
        return checkResourceFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// If a worker is mandatory, checks that one is specified.
    /// </summary>
    /// <param name = "_buffer">
    /// The table buffer.
    /// </param>
    /// <param name = "_childBuffer">
    /// The child table buffer.
    /// </param>
    /// <param name = "_args">
    /// An <c>Args</c> instance.
    /// </param>
    /// <returns>
    /// true if a worker is specified or if a worker is not mandatory; otherwise, false.
    /// </returns>
    protected boolean checkProjectResource(Common _buffer, Common _childBuffer, Args _args)
    {
        return (this.parmResource() || (ProjCategory::find(this.parmCategoryId()).ProjCategoryEmplOption != ProjCategoryEmplOption::Mandatory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer_PSA</Name>
				<Source><![CDATA[
    //    [PostHandlerFor(classStr(ProjValCheckTrans), methodStr(ProjValCheckTrans, checkBuffer))]
    private static void checkBuffer_PSA(XppPrePostArgs _eventArgs)
    {
        Args args = _eventArgs.getArg('_args');

        ProjValCheckTrans  pvct = _eventArgs.getThis();

        TableId tableId  = args.dataset();

        boolean retVal = _eventArgs.getReturnValue();

        if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            switch (tableId)
            {
                case tableNum(PSAActivityEstimates):

                    retVal = true;
                    break;
            }
        }

        _eventArgs.setReturnValue(retVal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVariablesFromRemainingBuffers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used as an event handler to attach additional code in more layers that work with additional tables.
    /// </summary>
    /// <param name="_pvct">
    /// An instance of the <c>ProjValCheckTrans</c> class.
    /// </param>
    /// <param name="_args">
    /// The arguments that are passed to the ProjValCheckTrans.setVariablesFromBuffer method.
    /// </param>
    /// <param name="_childBuffer">
    /// A common buffer that is passed to the <c>ProjValCheckTrans.setVariablesFromBuffer</c> method.
    /// </param>
    /// <returns>
    /// true if the table is successfully handled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method itself returns false and is intended to be the hook point for more layer solutions.This
    /// method is called from the <c>ProjValCheckTrans.setVariablesFromBuffer</c> method when the specified
    /// table is not recognized as one of the known tables.
    /// </remarks>
    [SysObsoleteAttribute("Use a Post event on the setVariablesFromBuffer method.", false, 24\06\2017)]
    public static boolean setVariablesFromRemainingBuffers(ProjValCheckTrans _pvct, Args _args, Common _childBuffer = null)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVariablesFromRemainingBuffers_PSA</Name>
				<Source><![CDATA[
    //     [PostHandlerFor(classStr(ProjValCheckTrans), staticMethodStr(ProjValCheckTrans, setVariablesFromRemainingBuffers))]
    private static void setVariablesFromRemainingBuffers_PSA(XppPrePostArgs _eventArgs)
    {
        ProjValCheckTrans pvct  = _eventArgs.getArg('_pvct');
        Args              args  =   _eventArgs.getArg('_args');
        Common            childBuf = _eventArgs.getArg('_childBuffer');

        boolean retVal = _eventArgs.getReturnValue();

        if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            retVal = pvct.setVariablesFromBuffer_PSA(args, childBuf);
        }

        _eventArgs.setReturnValue(retVal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjDataAreaId</Name>
				<Source><![CDATA[
    private DataAreaId parmProjDataAreaId(DataAreaId _projDataAreaId = projDataAreaID)
    {
        projDataAreaID    = _projDataAreaId;

        return projDataAreaID;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>