<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayFundTransReport_LedgerAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Off-funds allocations (in accounts) report.
/// </summary>
final class RPayFundTransReport_LedgerAccount extends RPayFundTransReport implements BatchRetryable
{
    #define.accountNumLabel('AccountNumLabel')
    #define.accountNum('AccountNum')
    #define.dimensionLabel('DimensionLabel')
    #define.dimHeader('dimHeader')
    #define.dimBody('dimBody')
    #define.dimFooter('dimFooter')

    Set                         dimNames;
    DimensionDynamicAccount     prevLedgerDimension;
    DimensionDefault            prevDefaultDimension;
#define.AccountCol(1)
    #define.FirstDimCol(2)
    #define.emptyColForProlog(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createColumns</Name>
				<Source><![CDATA[
    protected void createColumns()
    {
        OXMLWorksheet_RU    worksheet   = document.workbook().getWorksheet(1);
        str                 worksheetName;
        int                 rowHeader, rowBody, rowProlog, rowDate, rowPageNum, rowFooter, rowOrgHeader, rowOrgFooter;
        Set                 dims    = this.getDimensionNames();
        SetEnumerator       se      = dims.getEnumerator();
        int                 fundsCount, dimsCount, totalColsCount;
        int                 i, colNum;
        Set                 mergeCells = new Set(Types::Container);
        int                 cx;
        real                width;

        dimNames = this.getDimensionNames();
        dimsCount = dimNames.elements();

        fundsCount = fundsMap.elements();
        totalColsCount = dimsCount + 2*fundsCount + 3;

        [worksheetName, rowDate]  = worksheet.workbook().definedNames().lookup(([#PrologDate, #localSheetIdUndefined]));
        [worksheetName, rowPageNum]  = worksheet.workbook().definedNames().lookup(([#PrologPageNum, #localSheetIdUndefined]));
        [worksheetName, rowProlog]  = worksheet.workbook().definedNames().lookup(([#PrologLabels, #localSheetIdUndefined]));
        [worksheetName, rowHeader]  = worksheet.workbook().definedNames().lookup(([#Header, #localSheetIdUndefined]));
        [worksheetName, rowOrgHeader]    = worksheet.workbook().definedNames().lookup(([#OrgHeader, #localSheetIdUndefined]));
        [worksheetName, rowBody]    = worksheet.workbook().definedNames().lookup(([#Body, #localSheetIdUndefined]));
        [worksheetName, rowOrgFooter]    = worksheet.workbook().definedNames().lookup(([#OrgFooter, #localSheetIdUndefined]));
        [worksheetName, rowFooter]    = worksheet.workbook().definedNames().lookup(([#Footer, #localSheetIdUndefined]));

        //prolog
        worksheet.rowTemplate(rowDate).multiplyCell(#emptyColForProlog, totalColsCount-#emptyColForProlog);
        document.workbook().addDefinedName(#date,  worksheet.name(), rowDate, totalColsCount, rowProlog, totalColsCount);

        worksheet.rowTemplate(rowPageNum).multiplyCell(#emptyColForProlog, totalColsCount-#emptyColForProlog);
        document.workbook().addDefinedName(#pagenum,  worksheet.name(), rowPageNum, totalColsCount, rowPageNum, totalColsCount);

        worksheet.rowTemplate(rowProlog).multiplyCell(1, totalColsCount-1);
        document.workbook().addDefinedName(#accountNumLabel,  worksheet.name(), rowProlog, #AccountCol, rowProlog, #AccountCol);
        mergeCells.add([rowProlog, rowHeader, #AccountCol, #AccountCol]);
        if (dimsCount)
        {
            document.workbook().addDefinedName(#dimensionLabel,  worksheet.name(), rowProlog, #FirstDimCol, rowProlog, #FirstDimCol);
            mergeCells.add([rowProlog, rowProlog, #FirstDimCol, #FirstDimCol+dimsCount-1]);
        }

        document.workbook().addDefinedName(#taxAmountBodyLabel,  worksheet.name(), rowProlog, #FirstDimCol+dimsCount, rowProlog, #FirstDimCol+dimsCount);
        mergeCells.add([rowProlog, rowHeader, #FirstDimCol+dimsCount, #FirstDimCol+dimsCount]);

        document.workbook().addDefinedName(#TaxBaseLabel,  worksheet.name(), rowProlog, #FirstDimCol+dimsCount+1, rowProlog, #FirstDimCol+dimsCount+1);
        mergeCells.add([rowProlog, rowProlog, #FirstDimCol+dimsCount+1, #FirstDimCol+dimsCount+fundsCount]);

        document.workbook().addDefinedName(#FundAmountLabel,  worksheet.name(), rowProlog, #FirstDimCol+dimsCount+fundsCount+1, rowProlog, #FirstDimCol+dimsCount+fundsCount+1);
        mergeCells.add([rowProlog, rowProlog, #FirstDimCol+dimsCount+fundsCount+1, #FirstDimCol+dimsCount+2*fundsCount]);

        document.workbook().addDefinedName(#FundTotalsLabel,  worksheet.name(), rowProlog, totalColsCount, rowProlog, totalColsCount);
        mergeCells.add([rowProlog, rowHeader, totalColsCount, totalColsCount]);
        //header
        worksheet.rowTemplate(rowHeader).multiplyCell(#accountCol, totalColsCount-1);
        //body
        worksheet.rowTemplate(rowBody).multiplyCell(#accountCol, totalColsCount-1);
        document.workbook().addDefinedName(#accountNum, worksheet.name(), rowBody, #accountCol, rowBody, #accountCol);
        colNum = dimsCount+2;
        document.workbook().addDefinedName(#taxAmountBody, worksheet.name(), rowBody, colNum, rowBody, colNum);
        colNum = totalColsCount;
        document.workbook().addDefinedName(#FundTotals, worksheet.name(), rowBody, colNum, rowBody, colNum);
        //footer
        worksheet.rowTemplate(rowFooter).multiplyCell(#emptyColForProlog, totalColsCount-#emptyColForProlog);
        colNum = dimsCount+2;
        document.workbook().addDefinedName(#taxAmountFooter, worksheet.name(), rowFooter, colNum, rowFooter, colNum);
        colNum = totalColsCount;
        document.workbook().addDefinedName(#FundTotalsFooter, worksheet.name(), rowFooter, colNum, rowFooter, colNum);

        //by organization
        if (printHrmOrganizationId)
        {
            worksheet.rowTemplate(rowOrgHeader).multiplyCell(#AccountCol, totalColsCount-1);
            worksheet.rowTemplate(rowOrgFooter).multiplyCell(#FirstDimCol,totalColsCount-2);
            document.workbook().addDefinedName(#orgName,  worksheet.name(), rowOrgHeader, #AccountCol, rowOrgHeader, #AccountCol);
            document.workbook().addDefinedName(#taxAmountOrg,  worksheet.name(), rowOrgFooter, dimsCount+2, rowOrgFooter, dimsCount+2);
            document.workbook().addDefinedName(#FundTotalsOrg,  worksheet.name(), rowOrgFooter, totalColsCount, rowOrgFooter, totalColsCount);
        }
        for (i=1;i<=dimsCount;i++)
        {
            colNum = #FirstDimCol+i-1;
            document.workbook().addDefinedName(#dimHeader+int2str(i), worksheet.name(), rowHeader, colNum, rowHeader, colNum);
            document.workbook().addDefinedName(#dimBody+int2str(i), worksheet.name(), rowBody, colNum, rowBody, colNum);
            document.workbook().addDefinedName(#dimFooter+int2str(i), worksheet.name(), rowFooter, colNum, rowFooter, colNum);
        }
        for (i=1;i<=2*fundsCount;i++)
        {
            colNum = dimsCount+2+i;
            document.workbook().addDefinedName(#sheetHeader + int2str(i), worksheet.name(), rowHeader, colNum, rowHeader, colNum);
            document.workbook().addDefinedName(#sheetBody + int2str(i), worksheet.name(), rowBody, colNum, rowBody, colNum);
            document.workbook().addDefinedName(#sheetFooter + int2str(i), worksheet.name(), rowFooter, colNum, rowFooter, colNum);
            if (printHrmOrganizationId)
            {
                document.workbook().addDefinedName(#sheetOrgFooter + int2str(i),  worksheet.name(), rowOrgFooter, colNum, rowOrgFooter, colNum);
            }
        }

        //set width and merge
        worksheet.addMergeCellsCopy(mergeCells, rowProlog, rowHeader);
        worksheet.parmSaveColumnWidths(true);

        width = this.convertPointsToTwips(70);
        for (cx = 1; cx <= 2*fundsCount; cx++)
        {
            worksheet.columnWidth(cx, width);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    protected void fillBody()
    {
        int dimsCount = dimNames.elements();
        int fundsCount = fundsMap.elements();
        SetEnumerator se = dimNames.getEnumerator();
        RPayTrans       rpayTrans;
        RPayAmount      amount;
        QueryRun        qrLocal;

        int i = 0;
        DimensionAttributeValueSetStorage storage;
        DimensionAttribute                dimAttr;
        str                               mainAcc;
        DimensionAttributeValueCombination dimAttrComb = DimensionAttributeValueCombination::find(prevLedgerDimension);

        mainAcc = dimAttrComb.MainAccount ?
                  LedgerDimensionFacade::getMainAccountFromLedgerDimension(prevLedgerDimension).MainAccountId :
                  LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(prevLedgerDimension);

        this.insertValueToSection(#accountNum,  mainAcc);

        while (se.moveNext())
        {
            i++;
            storage = DimensionAttributeValueSetStorage::find(prevDefaultDimension);
            dimAttr = DimensionAttribute::findByName(se.current());
            this.insertValueToSection(#dimBody+int2str(i), storage.getDisplayValueByDimensionAttribute(dimAttr.RecId));
        }

        super();

        qrLocal = new QueryRun(queryRun.query());
        while (qrLocal.next())
        {
            rpayTrans = qrLocal.get(TableNum(rpayTrans));
            if (rpayTrans.LedgerDimension == prevLedgerDimension
               && rpayTrans.getDefaultDimension() == prevDefaultDimension
               && rpayTrans.PayPeriod == rPayPeriod
               && (!printHrmOrganizationId || rpayTrans.HrmOrganisationId == prevOrganizationId))
            {
                amount += rpayTrans.Amount;
            }
        }

        FooterTaxAmount += amount;
        orgTaxAmount    += amount;
        this.insertValueToSection(#taxAmountBody, amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader()
    {
        int i=0;
        int dimsCount = dimNames.elements();
        SetEnumerator se = dimNames.getEnumerator();
        while (se.moveNext())
        {
            i++;
            this.insertValueToSection(#dimHeader+int2str(i), se.current());
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    protected void fillProlog()
    {
        super();
        this.insertValueToSection(#accountNumLabel, "@SYS24500");
        if (document.workbook().definedNames().exists([ #dimensionLabel, #localSheetIdUndefined ]))
        {
            this.insertValueToSection(#dimensionLabel, "@RUP17");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimensions names for pay type transactions.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> with dimensions names.
    /// </returns>
    private Set getDimensionNames()
    {
        RPayTrans       rpayTrans;
        Set             dims =  new Set(Types::String);
        str             names;
        ListEnumerator  le;

        queryRun.reset();
        while (queryRun.next())
        {
            rpayTrans = queryRun.get(tableNum(rpayTrans));
            names = DimensionAttributeValueSet::getDimAttrNames(rpayTrans.getDefaultDimension());
            le = strSplit(names, ",").getEnumerator();
            while (le.moveNext())
            {
                if (le.current())
                {
                    dims.add(strLRTrim(le.current()));
                }
            }
        }
        queryRun.reset();

        return dims;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        QueryBuildDataSource    rpayTransDS, rpayTableDS;
        QueryBuildRange         range;
        Query                   query;

        query = new Query();
        rpayTransDS = query.addDataSource(tablenum(RPayTrans));
        rpayTransDS.sortClear();

        range = findOrCreateRange_W(rpayTransDS, fieldnum(RPayTrans, PayPeriod), queryValue(rPayPeriod));
        range.status(RangeStatus::Hidden);
        findOrCreateRange_W(rpayTransDS, fieldNum(RPayTrans, HrmOrganisationId));

        rpayTableDS = rpayTransDS.addDataSource(tablenum(RPayTable));
        rpayTableDS.relations(true);

        findOrCreateRange_W(rpayTableDS, fieldNum(RPayTable, PayCType));
        range = findOrCreateRange_W(rpayTableDS, fieldnum(RPayTable,PayChargeType), queryValue(RPayChargeType::AddSum));
        range.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBody</Name>
				<Source><![CDATA[
    protected void printBody()
    {
        int fundsCount = fundsMap.elements();
        int dimCount = dimNames.elements();
        int i;
        RPayTrans             rpayTrans;
        MapEnumerator         fundsEnumerator = fundsMap.getEnumerator();
        RPayCounterUnit       fund;
        RPayFundMember        rPayFundMember;
        RpayFundCtypeSplitSum rpayFundCtypeSplitSum;

        queryRun.reset();
        if (queryRun.next())
        {
            rpayTrans = queryRun.get(tableNum(RPayTrans));
            prevLedgerDimension = rpayTrans.LedgerDimension;
            prevDefaultDimension = rpayTrans.getDefaultDimension();
            prevOrganizationId = rpayTrans.HrmOrganisationId;
            if (printHrmOrganizationId)
            {
                this.execute(#orgHeader);
            }
        }

        queryRun.reset();
        while (queryRun.next())
        {
            rpayTrans = queryRun.get(tableNum(RPayTrans));
            fundsEnumerator.reset();

            if (printHrmOrganizationId && rpayTrans.HrmOrganisationId != prevOrganizationId)
            {
                if (prevOrganizationId)
                {
                    this.execute(#Body);
                    this.execute(#OrgFooter);
                }
                this.execute(#OrgHeader);
                prevOrganizationId = rpayTrans.HrmOrganisationId;
                prevLedgerDimension = rpayTrans.LedgerDimension;
                prevDefaultDimension = rpayTrans.getDefaultDimension();
            }

            if (rpayTrans.LedgerDimension != prevLedgerDimension
            || rpayTrans.getDefaultDimension() != prevDefaultDimension)
            {
                this.execute(#Body);
                prevLedgerDimension = rpayTrans.LedgerDimension;
                prevDefaultDimension = rpayTrans.getDefaultDimension();
            }

            for (i = 1; i <= fundsCount; i++)
            {
                if ( !fundsEnumerator.moveNext())
                {
                    break;
                }
                fund = fundsEnumerator.currentKey();
                select firstonly rPayFundMember
                    where rPayFundMember.PayCostType == rpayTrans.PayCtype
                       && rPayFundMember.CounterUnit == fund;

                if (rPayFundMember)
                {
                    rpayFundCtypeSplitSum = new RpayFundCtypeSplitSum(rPayFundMember.CounterUnit,rPayTrans);

                    rpayFundCtypeSplitSum.calc();
                    amounts = conPoke(amounts, i, conPeek(amounts, i) + rpayFundCtypeSplitSum.getBaseAmount());
                    amounts = conPoke(amounts, i+fundsCount, conPeek(amounts, i+fundsCount) + rpayFundCtypeSplitSum.getFundAmount());
                    fundAmount += rpayFundCtypeSplitSum.getFundAmount();
                }
            }
        }
        this.execute(#Body);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report name.
    /// </summary>
    /// <returns>
    /// The report name.
    /// </returns>
    public str reportName()
    {
        return "@RUP879";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        super();

        queryRun.query().dataSourceTable(tableNum(RPayTrans)).addSortField(fieldnum(RPayTrans, LedgerDimension));
        queryRun.query().dataSourceTable(tableNum(RPayTrans)).addSortField(fieldnum(RPayTrans, DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>