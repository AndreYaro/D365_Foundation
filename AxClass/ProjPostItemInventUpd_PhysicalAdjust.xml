<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemInventUpd_PhysicalAdjust</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemInventUpd_PhysicalAdjust extends  ProjPost
{
    InventMovement      movement;
    Qty                 qty;
    Amount              transCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(boolean _throwerror = false)
    {
        boolean ok  = true;

        ok  = super();

        if (ok)
        {
            if (ProjCategory::find(projTrans.categoryId()).CategoryType    != ProjCategoryType::Item)
            {
                ok = checkFailed(strFmt("@SYS54897",projTrans.categoryId()));
            }

            if (!projTrans.salesUnit())
            {
                ok = checkFailed("@SYS73707");
            }

            if (!projTrans.currencyIdSales())
            {
                ok = checkFailed("@SYS73708");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return projTrans.statusAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        projTrans = ProjTrans::newInventMovement(movement, ledgerVoucher, qty, transCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventMovement</Name>
				<Source><![CDATA[
    public InventMovement parmInventMovement(InventMovement _movement = movement)
    {
        movement = _movement;

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(Qty _qty = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransCost</Name>
				<Source><![CDATA[
    public Amount parmTransCost(Amount _transCost = transCost)
    {
        transCost = _transCost;

        return transCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return LedgerPostingType::ProjStatusAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return LedgerPostingType::ProjOffsetAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjItemTrans::splitNeverLedger(this.parmInventTransId(), this.parmAdjustRefId(), this.parmLedgerVoucher().lastVoucher());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPostItemInventUpd_PhyAdjust</Name>
				<Source><![CDATA[
    public static ProjPostItemInventUpd_PhysicalAdjust newProjPostItemInventUpd_PhyAdjust(InventMovement _movement, LedgerVoucher _ledgerVoucher, Qty _qty, Amount _transCost)
    {
        ProjPostItemInventUpd_PhysicalAdjust projPost;
        projPost = new ProjPostItemInventUpd_PhysicalAdjust(_movement.buffer());
        projPost.parmInventMovement(_movement);
        projPost.parmLedgerVoucher(_ledgerVoucher);
        projPost.parmQty(_qty);
        projPost.parmTransCost(_transCost);
        projPost.parmTransIdSales(_movement.projTransId());
        projPost.parmTransIdCost(_movement.projTransId());

        projPost.init();

        return projPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>