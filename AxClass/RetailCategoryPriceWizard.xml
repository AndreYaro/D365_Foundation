<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCategoryPriceWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail category price rule wizard.
/// </summary>
public class RetailCategoryPriceWizard extends SysWizard
{
    RetailCategoryPriceRule categoryPriceRule;
    RetailCategoryPriceRuleGroupCode categoryPriceRuleGroupCode;

    CurrencyCode priceCurrencyCode;
    FromDate priceFromDate;
    ToDate priceToDate;
    RetailPriceBasisDate priceBasisDate;
    RetailCategoryPriceProductSelectionType productSelectionType;
    boolean isZeroPriceOnly;
    boolean expirePreviousTAs;
    boolean findNext;
    boolean runInBatch;
    // <GEERU>
    boolean isGroupProcessing;
    boolean ruleScope;
    container excludedRootCategories; //contains roots of subtries of categories wich are should be excluded as already calculated each element is container [category, includeSubCategory]
    PriceDiscJournalNum   priceDiscJournalNum; //it is used for group processing only
    PriceDiscJournalNum   expireJourNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessMenuFunction</Name>
				<Source><![CDATA[
    // </GEERU>

    /// <summary>
    /// Gets menu function.
    /// </summary>
    /// <returns>
    /// The menu function.
    /// </returns>
    public MenuFunction accessMenuFunction()
    {
        return new MenuFunction(menuitemdisplaystr(RetailCategoryPriceWizard),MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    protected void finish()
    {
        super();

        // <GEERU>
        if (this.paramIsGroupProcessing())
        {
            this.groupRuleProcessing();
        }
        else
        {
        // </GEERU>
            this.applyRule();
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formstr(RetailCategoryPriceWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCategoryPriceRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the retail category price rule record.
    /// </summary>
    /// <param name="_categoryPriceRule">
    /// Retail category price rule record.
    /// </param>
    /// <returns>
    /// Retail category price rule record.
    /// </returns>
    public RetailCategoryPriceRule paramCategoryPriceRule(RetailCategoryPriceRule _categoryPriceRule = categoryPriceRule)
    {
        categoryPriceRule = _categoryPriceRule;
        return categoryPriceRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets currency code.
    /// </summary>
    /// <param name="_currencyCode">
    /// Currency code.
    /// </param>
    /// <returns>
    /// Currency code.
    /// </returns>
    public CurrencyCode paramCurrencyCode(CurrencyCode _currencyCode = priceCurrencyCode)
    {
        priceCurrencyCode = _currencyCode;

        return priceCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramExpirePreviousTAs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the flag indicating whether to expire previous trade agreements.
    /// </summary>
    /// <param name="_expirePreviousTAs">
    /// The flag indicating whether to expire previous trade agreements.
    /// </param>
    /// <returns>
    /// Whether to expire previous trade agreements.
    /// </returns>
    public boolean paramExpirePreviousTAs(boolean _expirePreviousTAs = expirePreviousTAs)
    {
        expirePreviousTAs = _expirePreviousTAs;

        return expirePreviousTAs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramFindNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the flag indicating whether to search next.
    /// </summary>
    /// <param name="_findNext">
    /// The flag indicating whether to search next
    /// </param>
    /// <returns>
    /// Whether to search next.
    /// </returns>
    public boolean paramFindNext(boolean _findNext = findNext)
    {
        findNext = _findNext;

        return findNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the from date.
    /// </summary>
    /// <param name="_fromDate">
    /// From date.
    /// </param>
    /// <returns>
    /// From date.
    /// </returns>
    public FromDate paramFromDate(FromDate _fromDate = priceFromDate)
    {
        priceFromDate = _fromDate;
        return priceFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramProductSelectionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product selection type for category price rule.
    /// </summary>
    /// <param name="_productSelectionType">
    /// The product selection type for category price rule.
    /// </param>
    /// <returns>
    /// The product selection type for category price rule.
    /// </returns>
    public RetailCategoryPriceProductSelectionType paramProductSelectionType(RetailCategoryPriceProductSelectionType _productSelectionType = productSelectionType)
    {
        productSelectionType = _productSelectionType;

        return productSelectionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramRunInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the flag indicating whether to run in batch mode.
    /// </summary>
    /// <param name="_runInBatch">
    /// The flag indicating whether to run in batch mode.
    /// </param>
    /// <returns>
    /// Whether to run in batch mode.
    /// </returns>
    public boolean paramRunInBatch(boolean _runInBatch = runInBatch)
    {
        runInBatch = _runInBatch;

        return runInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets to date.
    /// </summary>
    /// <param name="_ToDate">
    /// To date.
    /// </param>
    /// <returns>
    /// To date.
    /// </returns>
    public ToDate paramToDate(ToDate _ToDate = priceToDate)
    {
        priceToDate = _ToDate;
        return priceToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up nativation.
    /// </summary>
    void setupNavigation()
    {
        boolean enabled;
        int     curTab = this.curTab();

        switch (curTab)
        {
            // In step 2, disable next button if some fields aren't set.
            case 2:
                enabled = ! priceCurrencyCode;
                if (enabled)
                {
                    enabled = ! priceFromDate;
                }
                this.nextEnabled(enabled);
                break;
            // do nothing for other steps.
            default:
                break;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailCategoryPriceWizard construct()
    {
        return new RetailCategoryPriceWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(args args)
    {
        RetailCategoryPriceWizard wizard = RetailCategoryPriceWizard::constructFromArgs(args);

        if (wizard.prompt())
        {
            wizard.run();
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRule</Name>
				<Source><![CDATA[
    private void applyRule()
    {
        RetailCategoryPriceScheduler priceScheduler = RetailCategoryPriceScheduler::construct();
        BatchHeader batchHeader;
        BatchInfo batchInfo;

        priceScheduler.parmCaller(this);
        priceScheduler.parmCategoryPriceRule(categoryPriceRule);
        priceScheduler.parmCurrencyCode(priceCurrencyCode);
        priceScheduler.parmExpirePreviousTAs(expirePreviousTAs);
        priceScheduler.parmPriceBasisDate(priceBasisDate);
        priceScheduler.parmFromDate(priceFromDate);
        priceScheduler.parmToDate(priceToDate);
        priceScheduler.parmFindNext(findNext);
        priceScheduler.parmProductSelectionType(productSelectionType);
        // <GEERU>
        priceScheduler.parmIsGroupProcessing(this.paramIsGroupProcessing());

        if (this.paramIsGroupProcessing())
        {
            priceScheduler.parmPriceDiscJournalNum(this.getPriceDiscJournalNum());
            priceScheduler.parmExcludedCategories(excludedRootCategories);
            if (expirePreviousTAs)
            {
                priceScheduler.parmExpireJourNum(this.getExpireJournalNum());
            }
        }
        // </GEERU>

        if (runInBatch)
        {
            batchInfo = priceScheduler.batchInfo();
            batchInfo.parmCaption("@REX1324");
            batchInfo.parmGroupId('');
            batchHeader = BatchHeader::construct();
            batchHeader.addTask(priceScheduler);
            batchHeader.save();
        }
        else
        {
            priceScheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpireJournalNum</Name>
				<Source><![CDATA[
    private PriceDiscJournalNum getExpireJournalNum()
    {
        PriceDiscAdmTable admTable;
        RetailParameters retailParams;

        if (!expireJourNum)
        {
            retailParams         = RetailParameters::find();
            admTable.JournalName = retailParams.DefaultJournalName4CategoryPrice;
            admTable.Name        = RetailParameters::expirePreviousTAsJourDescription();

            admTable.insert();

            RetailPriceDiscAdmTable::createRetailPriceDiscAdmTable(admTable.RecId, this.paramCategoryPriceRuleGroup(), true);

            expireJourNum = admTable.JournalNum;
        }
        return expireJourNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceDiscJournalNum</Name>
				<Source><![CDATA[
    private PriceDiscJournalNum getPriceDiscJournalNum()
    {
        PriceDiscAdmTable admTable;
        RetailParameters retailParams;

        if (!priceDiscJournalNum)
        {
            retailParams = RetailParameters::find();
            admTable.JournalName = retailParams.DefaultJournalName4CategoryPrice;
            admTable.Name = strFmt("@SYP4880834", this.paramCategoryPriceRuleGroup(), this.paramPriceBasisDate());
            admTable.insert();
            RetailPriceDiscAdmTable::createRetailPriceDiscAdmTable(admTable.RecId, categoryPriceRuleGroupCode);
            priceDiscJournalNum = admTable.JournalNum;
        }

        return priceDiscJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupRuleProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processing rules included into the group sequently.
    /// </summary>
    /// <remarks>
    /// In this method rules processed according to category tree.
    /// Sorting by <c>NestedSetRight</c> field is topological sorting of the category tree.
    /// That means that rules with child categories will be processed first than rules with parent ctegory.
    /// It is required to apply nearest rule to product and avoid duplicate applying more then one rule to product.
    /// </remarks>
    private void groupRuleProcessing()
    {
        PriceDiscAdmTable priceDiscAdm;
        MenuFunction menuFunction;
        Args args;

        EcoResCategory resCategory;

        while select RecId from resCategory
            order by NestedSetRight
            join categoryPriceRule
                where  categoryPriceRule.Category == resCategory.RecId
                    && categoryPriceRule.CategoryPriceRuleGroupCode == this.paramCategoryPriceRuleGroup()
        {
            if (categoryPriceRule.isReady4GeneratingPrices())
            {
                this.applyRule();
                excludedRootCategories += [[resCategory.RecId, categoryPriceRule.Scope == RetailPriceCategoryRuleScope::IncludeSubCategories]];
            }
        }

        if (priceDiscJournalNum)
        {
            if (!runInBatch)
            {
                this.postProcessExpireTAJour();

                priceDiscAdm = PriceDiscAdmTable::find(priceDiscJournalNum);
                menuFunction = new MenuFunction(menuitemDisplayStr(RetailPriceDiscResearch), MenuItemType::Display);
                args = new Args();
                args.name(classStr(RetailCategoryPriceWizard));
                args.caller(this);
                args.record(priceDiscAdm);
                menuFunction.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCategoryPriceRuleGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the retail category price rule group code.
    /// </summary>
    /// <param name="_categoryPriceRuleGroupCode">
    /// Retail category price rule group code.
    /// </param>
    /// <returns>
    /// Retail category price rule group code.
    /// </returns>
    public RetailCategoryPriceRuleGroupCode paramCategoryPriceRuleGroup(RetailCategoryPriceRuleGroupCode _categoryPriceRuleGroupCode = categoryPriceRuleGroupCode)
    {
        categoryPriceRuleGroupCode = _categoryPriceRuleGroupCode;
        return categoryPriceRuleGroupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramIsGroupProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets value to indicate that group of rules is processing.
    /// </summary>
    /// <param name="_isGroupProcessing">
    /// Indicating whether to group of rules is processing.
    /// </param>
    /// <returns>
    /// Whether to group of rules is processing.
    /// </returns>
    public boolean paramIsGroupProcessing(boolean _isGroupProcessing = isGroupProcessing)
    {
        isGroupProcessing = _isGroupProcessing;

        return isGroupProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramPriceBasisDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the price basis date.
    /// </summary>
    /// <param name="_priceBasisDate">
    /// Price basis date.
    /// </param>
    /// <returns>
    /// Price basis date.
    /// </returns>
    public RetailPriceBasisDate paramPriceBasisDate(RetailPriceBasisDate _priceBasisDate = priceBasisDate)
    {
        priceBasisDate = _priceBasisDate;

        return priceBasisDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessExpireTAJour</Name>
				<Source><![CDATA[
    private void postProcessExpireTAJour()
    {
        PriceDiscAdmTrans newAdmTrans;
        PriceDiscAdmTable admTable;

        if (expireJourNum)
        {
            select firstOnly RecId from newAdmTrans
                where newAdmTrans.JournalNum == expireJourNum;

            if (newAdmTrans)
            {
                info("@REX1270", '', SysInfoAction_TableField::newBuffer(PriceDiscAdmTable::find(expireJourNum)));
            }
            else
            {
                delete_from admTable
                    where admTable.JournalNum == expireJourNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives an initialized instance of the <c>RetailCategoryPriceWizard</c> class.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>Args</c> class that holds caller recordset and menu item.
    /// </param>
    /// <returns>
    /// An initialized instance of the <c>RetailCategoryPriceWizard</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception will throw if <c>_args</c> doesn't contain appropriate dataset.
    /// </exception>
    public static RetailCategoryPriceWizard constructFromArgs(Args _args)
    {
        RetailCategoryPriceRuleGroup priceRuleGroup;
        RetailCategoryPriceRule      priceRule;
        RetailCategoryPriceWizard    wizard = RetailCategoryPriceWizard::construct();

        switch (_args.dataset())
        {
            case tableNum(RetailCategoryPriceRule):
                priceRule = _args.record();
                wizard.paramCategoryPriceRule(priceRule);
                break;

            // <GEERU>
            case tableNum(RetailCategoryPriceRuleGroup):
                priceRuleGroup = _args.record();
                wizard.paramCategoryPriceRuleGroup(priceRuleGroup.Code);
                wizard.paramIsGroupProcessing(true);
                break;
            // </GEERU>

            default:
                throw error(error::missingParameter(null));
        }

        return wizard;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>