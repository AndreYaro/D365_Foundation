<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRouteSegmentAddressFormHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSRouteSegmentAddressFormHandler</c> class is the address form handler for a route segment.
/// </summary>
class TMSRouteSegmentAddressFormHandler extends LogisticsPostalAddressFormHandler
{
    boolean                     destination;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerUpdateQuery</Name>
				<Source><![CDATA[
    public void callerUpdateQuery(FieldId _FieldId)
    {
        callerAddressDS.query().dataSourceName(callerAddressDS.name()).addLink(_fieldId, fieldnum(LogisticsPostalAddress,Location));
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the caller record with the location that was created.
    /// </summary>
    public void callerWrite()
    {
        FormDataSource      callerFormDataSource;
        TMSRouteSegment     routeSegment;

        ttsbegin;

        if (!destination)
        {
            callerRecordMap = this.getCallerRecord();
            callerRecordMap.Location = location;
            callerRecordMap.write();
        }
        else
        {
            routeSegment = this.getCallerRecord();
            routeSegment.DestinationLocation = location;
            routeSegment.write();
        }

        // reset the dirty state of the dataSource before calling research
        if (FormDataUtil::isFormDataSource(callerRecordMap)
        && !destination)
        {
            callerFormDataSource = FormDataUtil::getFormDataSource(callerRecordMap);
            callerFormDataSource.forceWrite(false);
        }
        else if (FormDataUtil::isFormDataSource(routeSegment))
        {
            callerFormDataSource = FormDataUtil::getFormDataSource(routeSegment);
            callerFormDataSource.forceWrite(false);
        }
        this.callerResearch();
        ttscommit;

        // set the form dataSource as dirty and refresh form's country/region code cache
        if (callerFormDataSource)
        {
            callerFormDataSource.forceWrite(true);
            callerFormDataSource.formRun().flushCountryRegionCodeCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the destination parameter for an address record.
    /// </summary>
    /// <param name="_destination">
    ///    True if the record is a destination address; otherwise false.
    /// </param>
    /// <returns>
    ///    The destination value.
    /// </returns>
    public boolean parmDestination(boolean _destination = destination)
    {
        destination = _destination;

        return destination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the action buttons for the address depending on the record buffer.
    /// </summary>
    /// <param name="_newBtn">
    ///    A <c>FormFunctionButtonControl</c> control for the new button.
    /// </param>
    /// <param name="_editBtn">
    ///    A <c>FormFunctionButtonControl</c> control for the edit button.
    /// </param>
    /// <param name="_deleteBtn">
    ///    A <c>FormFunctionButtonControl</c> control for the clear/delete button.
    /// </param>
    /// <param name="_mapBtn">
    ///    A <c>FormFunctionButtonControl</c> control for the map button.
    /// </param>
    /// <param name="_deactivateBtn">
    ///    A <c>FormFunctionButtonControl</c> control for the deactivate button.
    /// </param>
    /// <param name="_defaultBtn">
    ///    A <c>FormFunctionButtonControl</c> control for the default button.
    /// </param>
    /// <param name="_isPrimary">
    ///    A <c>boolean</c> value to indicate that the location is primary.
    /// </param>
    public void updateButtons(
        FormFunctionButtonControl _newBtn,
        FormFunctionButtonControl _editBtn,
        FormFunctionButtonControl _deleteBtn,
        FormFunctionButtonControl _mapBtn = null,
        FormFunctionButtonControl _deactivateBtn = null,
        FormFunctionButtonControl _defaultBtn = null,
        boolean _isPrimary = false)
    {
        boolean callerRecordExist;
        boolean addressExist;

        callerRecord = this.getCallerRecord();
        callerRecordExist = callerRecord.RecId != 0;

        addressRecordMap = callerAddressDS.cursor() ? callerAddressDS.cursor() : null;
        addressExist = addressRecordMap.RecId != 0;

        _newBtn.visible(!addressExist);
        _newBtn.enabled(callerRecordExist);

        _editBtn.visible(callerRecordExist && addressExist);
        _editBtn.enabled(callerRecordExist);
        _deleteBtn.visible(hasTableAccess(tableNum(LogisticsLocation), AccessType::Delete) && callerRecordExist && addressExist);
        _deleteBtn.enabled(!_isPrimary);

        if (_mapBtn)
        {
            _mapBtn.visible(callerRecordExist && addressExist);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class.
    /// </summary>
    /// <returns>
    ///    Returns a new instance of <c>TMSRouteSegmentAddressFormHandler</c> class.
    /// </returns>
    public static TMSRouteSegmentAddressFormHandler construct()
    {
        return new TMSRouteSegmentAddressFormHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>