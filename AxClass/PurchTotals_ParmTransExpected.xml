<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotals_ParmTransExpected</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchTotals_ParmTransExpected extends PurchTotals_ParmTransEdit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the totals for the current document can be edited.
    /// </summary>
    /// <returns>
    ///    true if the totals can be edited; otherwise, false.
    /// </returns>
    boolean allowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustVendMarkupOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the value of the <c>MarkupTrans</c> table records with the <c>CustVend</c> markup type
    ///    that are attached to a record in the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <param name="_markup">
    ///    A record in the <c>MarkupTrans</c> table.
    /// </param>
    /// <param name="_purchLine">
    ///    The record in the <c>PurchLine</c> table that is associated with the <paramref name="_source" />
    ///    parameter.
    /// </param>
    /// <param name="_purchQty">
    ///    The invoice line quantity.
    /// </param>
    /// <param name="_lineAmount">
    ///    The invoice line amount.
    /// </param>
    /// <param name="_source">
    ///    A <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    ///    The sum of the <c>CustVend</c> markup type miscellaneous charges for the given line.
    /// </returns>
    protected AmountCur calcCustVendMarkupOnLine(
                Markup _markup,
                PurchLine _purchLine,
                PurchQty _purchQty,
                AmountCur _lineAmount,
                Common _source)
    {
        CurrencyExchangeHelper currencyExchange;

        _markup.parmOnlyIncludeConnected(true);
        _markup.parmTransIds(_source.TableId, _source.RecId);

        currencyExchange = CurrencyExchangeHelper::construct();
        currencyExchange.parmExchangeDate(parmTable.updateDate());
        currencyExchange.parmExchangeRate1(parmTable.ExchRate);
        currencyExchange.parmExchangeRate2(parmTable.ExchRateSecondary);

        _markup.parmDocumentCurrencyExch(currencyExchange);
        _markup.parmDocumentCurrencyCode(parmTable.CurrencyCode);

        // Calculate the misc charge total, using PurchLine as the source
        return super(_markup, _purchLine, _purchQty, _lineAmount, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustVendMarkupOnTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the value of the <c>MarkupTrans</c> table records with the <c>CustVend</c> markup type
    ///    that are attached to a record in the <c>VendInvoiceInfoSubTable</c> or <c>VendInvoiceInfoTable</c>
    ///    table.
    /// </summary>
    /// <param name="_markup">
    ///    A record in the <c>MarkupTrans</c> table.
    /// </param>
    /// <param name="_purchTable">
    ///    The <c>PurchTable</c> record that is associated with the <paramref name="_source" /> parameter.
    /// </param>
    /// <param name="_purchQty">
    ///    The invoice line quantity.
    /// </param>
    /// <param name="_lineAmount">
    ///    The invoice line amount.
    /// </param>
    /// <param name="_source">
    ///    A record in the <c>VendInvoiceInfoSubTable</c> or <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <returns>
    ///    The sum of the <c>CustVend</c> markup type miscellaneous charges for the specified header.
    /// </returns>
    protected AmountCur calcCustVendMarkupOnTable(
                Markup _markup,
                PurchTable _purchTable,
                PurchQty _purchQty,
                AmountCur _lineAmount,
                Common _source)
    {
        CurrencyExchangeHelper currencyExchange;
        PurchTable localPurchTable;
        VendInvoiceInfoSubTable localSubTable;

        _markup.parmOnlyIncludeConnected(true);
        _markup.parmTransIds(_source.TableId, _source.RecId);

        currencyExchange = CurrencyExchangeHelper::construct();
        currencyExchange.parmExchangeDate(parmTable.updateDate());
        currencyExchange.parmExchangeRate1(parmTable.ExchRate);
        currencyExchange.parmExchangeRate2(parmTable.ExchRateSecondary);

        _markup.parmDocumentCurrencyExch(currencyExchange);
        _markup.parmDocumentCurrencyCode(parmTable.CurrencyCode);

        if (_source.TableId == tableNum(VendInvoiceInfoSubTable))
        {
            localSubTable = _source;
            localPurchTable = PurchTable::find(localSubTable.OrigPurchId);
        }
        else
        {
            localPurchTable = _purchTable;
        }

        // Calculate the misc charge total, using PurchTable as the source
        return super(_markup, _purchTable, _purchQty, _lineAmount, localPurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the weight of a category based order line.
    /// </summary>
    /// <returns>
    ///    A value of 0 because weight is not used in expected totals.
    /// </returns>
    protected Weight categoryWeight()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPurchCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PurchCalcTax</c> class that corresponds with the specified
    ///    <c>PurchTotals</c> object.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>PurchCalcTax</c> class.
    /// </returns>
    public PurchCalcTax constructPurchCalcTax()
    {
        return PurchCalcTax_ParmTransExpected::construct(parmTable, parmId, sumPurchId, documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the discount percent for the current <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <returns>
    ///    The discount percent for the current <c>VendInvoiceInfoLine</c> record.
    /// </returns>
    public DiscPct discPercent()
    {
        return parmLine.purchTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the total discount for the current document.
    /// </summary>
    /// <param name="_roundResult">
    /// true if the result should be rounded; otherwise, false; optional.
    /// </param>
    /// <returns>
    /// The total discount for the current document.
    /// </returns>
    public DiscAmount endDisc(boolean _roundResult = true)
    {
        endDisc = this.calculatedEndDisc(_roundResult);

        return endDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRoundOff</Name>
				<Source><![CDATA[
    AmountCur invoiceRoundOff()
    {
        // Expected totals (from the PO) don't have a manual roundOff amount
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemVolume</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the volume of the current item on an item based order line.
    /// </summary>
    /// <returns>
    ///    A value of 0 because volume is not used in expected totals.
    /// </returns>
    protected Volume itemVolume()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the weight of the current item on an item based order line.
    /// </summary>
    /// <returns>
    ///    A value of 0 because weight is not used in expected totals.
    /// </returns>
    protected Weight itemWeight()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the net amount of the current line.
    /// </summary>
    /// <param name="_purchQty">
    /// The quantity of the current document line.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date of the current document.
    /// </param>
    /// <returns>
    /// The net amount of the current line.
    /// </returns>
    public AmountCur lineAmount(PurchQty _purchQty, TransDate _transDate)
    {
        // Get the extended PO line amount for the invoice quantity
        return purchLine.calcLineAmountExclTax(_purchQty, _transDate, tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
            Common _source,
            PurchUpdate _specQty,
            ParmId _parmId,
            PurchId _sumPurchId,
            DocumentStatus _documentStatus)
    {
        VendDocumentTableMap viit = _source.data();

        // Treat approval journals like normal invoices for expected totals
        viit.Ordering = DocumentStatus::Invoice;

        super(viit, _specQty, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchVolume</Name>
				<Source><![CDATA[
    Volume purchVolume()
    {
        // Volume is not calculated for expected totals
        Debug::assert(false);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchWeight</Name>
				<Source><![CDATA[
    Weight purchWeight()
    {
        // Weight is not calculated for expected totals
        Debug::assert(false);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new <c>PurchTotals</c> object to calculate the totals of an associated table record.
    /// </summary>
    /// <param name="_source">
    /// The source table record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity to use.
    /// </param>
    /// <param name="_parmId">
    /// A session identifier.
    /// </param>
    /// <param name="_sumPurchId">
    /// The purchase order identifier of a summary <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <param name="_documentStatus">
    /// The document type.
    /// </param>
    /// <returns>
    /// A <c>PurchTotals_ParmTransExpected</c> object.
    /// </returns>
    static public PurchTotals_ParmTransExpected construct(
            Common _source,
            PurchUpdate _specQty,
            ParmId _parmId,
            PurchId _sumPurchId,
            DocumentStatus _documentStatus)
    {
        Debug::assert( (_documentStatus == DocumentStatus::Invoice) || (_documentStatus == DocumentStatus::ApproveJournal));

        return new PurchTotals_ParmTransExpected(_source, _specQty, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>