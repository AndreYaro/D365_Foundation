<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParmCleanUpSingleOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SalesParmCleanUpSingleOrder extends SalesParmCleanUp
{
    DialogField dialogSalesId;
    SalesId salesId;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        salesId
    #Endmacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    internal SalesId parmSalesId(SalesId _salesId = salesId)
    {
        salesId = _salesId;
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleSalesOrder</Name>
				<Source><![CDATA[
    internal boolean isSingleSalesOrder()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogSalesId = dialog.addFieldValue(extendedTypeStr(SalesId), salesId);
        dialogSalesId.enabled(false);

        dialogCleanUpMode.visible(false);
        dialogCleanupDate.visible(false);

        dialogSetDaysAgo.visible(false);
        dialogDaysAgo.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean ret = super();

        cleanUpMode = SalesPurchParmCleanUpMode::ExecutedAndErrors;
        cleanupDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesId</Name>
				<Source><![CDATA[
    internal SalesId getSalesId()
    {
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SCM:CleanUpSalesUpdateHistory";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static SalesParmCleanUpSingleOrder construct(SalesTable _salesTable)
    {
        SalesParmCleanUpSingleOrder salesParmCleanUpSingleOrder = new SalesParmCleanUpSingleOrder();
        salesParmCleanUpSingleOrder.parmSalesId(_salesTable.SalesId);

        return salesParmCleanUpSingleOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args || !(_args.record() is SalesTable))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        SalesParmCleanUpSingleOrder salesParmCleanUp = SalesParmCleanUpSingleOrder::construct(_args.record() as SalesTable);

        if (salesParmCleanUp.prompt())
        {
            salesParmCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>