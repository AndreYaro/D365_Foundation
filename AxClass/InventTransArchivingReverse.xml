<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchivingReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class InventTransArchivingReverse extends RunBaseBatch
{
    RecId reverseInventTransArchivingRecId;
    RecId inventTransArchivingRecId;
    Connection connection;

    InventTransArchiveProcessHistoryTable   reverseInventTransArchiveTable;
    InventTransArchiveProcessHistoryTable   inventTransArchiveTable;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        reverseInventTransArchivingRecId,
        inventTransArchivingRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  packedClass)
    {
        Integer  version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract void execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseInventTransArchivingRecId</Name>
				<Source><![CDATA[
    public RecId parmReverseInventTransArchivingRecId(RecId _reverseInventTransArchivingRecId = reverseInventTransArchivingRecId)
    {
        reverseInventTransArchivingRecId = _reverseInventTransArchivingRecId;
        return reverseInventTransArchivingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransArchivingRecId</Name>
				<Source><![CDATA[
    public RecId parmInventTransArchivingRecId(RecId _inventTransArchivingRecId = inventTransArchivingRecId)
    {
        inventTransArchivingRecId = _inventTransArchivingRecId;
        return inventTransArchivingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecords</Name>
				<Source><![CDATA[
    protected void rereadRecords()
    {
        select firstonly reverseInventTransArchiveTable where reverseInventTransArchiveTable.RecId == reverseInventTransArchivingRecId;
        if (inventTransArchivingRecId)
        {
            select firstonly inventTransArchiveTable where inventTransArchiveTable.RecId == inventTransArchivingRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        this.rereadRecords();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (!InventTransArchiveFeature::isEnabled())
        {
            return;
        }

        try
        {
            if (!this.batchInfo())
            {
                throw error(strFmt("@SYS19306", funcName()));
            }

            this.init();
            this.execute();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        finally
        {
            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNotFinishedInventTransArchivingReverseJob</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existsNotFinishedInventTransArchivingReverseJob(RecId _reverseArchivingRefRecId)
    {
        ttsbegin;
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTableCheck;
        inventTransArchiveProcessHistoryTableCheck.selectLocked(false);

        select firstonly RecId from inventTransArchiveProcessHistoryTableCheck
            where inventTransArchiveProcessHistoryTableCheck.InventTransArchiveState < InventTransArchiveState::Ended
              &&  inventTransArchiveProcessHistoryTableCheck.Active == NoYes::Yes
              &&  inventTransArchiveProcessHistoryTableCheck.IsReverse == NoYes::Yes
              &&  inventTransArchiveProcessHistoryTableCheck.ReverseArchivingRefRecId != _reverseArchivingRefRecId;
        ttscommit;

        return inventTransArchiveProcessHistoryTableCheck.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnotherInventTransArchivingReverseJobRunning</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existsAnotherInventTransArchivingReverseJobRunning(RecId _batchRecId = 0)
    {
        Batch    batch;
        BatchJob batchJob;

        select firstOnly RecId from batchJob
            exists join batch
            where batch.BatchJobId   == batchJob.RecId
               && (batch.Status      == BatchStatus::Executing || batch.Status == BatchStatus::Waiting)
               && batch.Company      == curext()
               && (!_batchRecId      || batch.RecId != _batchRecId)
               && (batch.ClassNumber == classNum(InventTransArchivingReverse_Init)
               ||  batch.ClassNumber == classNum(InventTransArchivingReverse_Restore)
               ||  batch.ClassNumber == classNum(InventTransArchivingReverse_End));

        if (batchJob.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notExistsInventDimFromArchivedTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    internal static boolean notExistsInventDimFromArchivedTrans(SysGuidString _sessionId)
    {
        InventDim           inventDim;
        InventTransArchive  inventTransArchive;

        select firstonly RecId from inventTransArchive
            where inventTransArchive.SessionId == _sessionId
            notexists join inventDim
            where inventTransArchive.InventDimId == inventDim.inventDimId;

        return inventTransArchive.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>