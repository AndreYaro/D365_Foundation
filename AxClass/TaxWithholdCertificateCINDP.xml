<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCertificateCINDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCertificateCINDP</c> class is the base report data provider class for the
/// sub-report of the tax withholding certificate SSRS report.
/// </summary>
/// <remarks>
/// This is the RDP class for the sub-report of the tax withholding certificate SSRS report..
/// </remarks>
[
    SRSReportParameterAttribute(classStr(TaxWithholdCertificateSubReportContract))
]
public class TaxWithholdCertificateCINDP extends SRSReportDataProviderBase
{
    TaxWithholdCertificateCINTmp    taxWithholdCertificateCINTmp;
    int                             serialNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic for certificate.
    /// </summary>
    /// <param name="_certificateNumber">
    /// The report parameter certificate number from report data contract.
    /// </param>
    /// <param name="_componentGroup">
    /// The report parameter component group from report data contract.
    /// </param>
    /// <param name="_taxWithholdType">
    /// The report parameter TaxWithholdType from report data contract.
    /// </param>
    /// <param name="_accountNum">
    /// The report parameter account number from report data contract.
    /// </param>
    /// <param name="_custVendACType">
    /// The report parameter CustVendACType from report data contract.
    /// </param>
    /// <param name="_fromDate">
    /// The report parameter FromDate from report data contract.
    /// </param>
    /// <param name="_toDate">
    /// The report parameter ToDate from report data contract.
    /// </param>
    /// <param name="_tanNumber">
    /// The report parameter TAN number from report data contract.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getCIN(
        Taxwithholdcertificatenumber_IN _certificateNumber,
        TaxWithholdComponentGroup_IN    _componentGroup,
        TaxWithholdType_IN              _taxWithholdType,
        AccountNum                      _accountNum,
        CustVendACType                  _custVendACType,
        TransDate                       _fromDate,
        TransDate                       _toDate,
        TaxWithholdTAN_IN               _tanNumber)
    {
        TaxWithholdSettleTrans_IN           taxWithholdSettleTrans;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTransAdjust;

        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroupTable;

        TaxWithholdComponentGroupRecId_IN   componentGroupRecId;
        TaxWithholdRegNumberRecId_IN        tanNumberRecId;
        TaxWithholdSectionCode_IN           sectionCode;

        Amount      taxAmount;
        TransDate   challanDate;
        str         challanNumber;
        str         bsrCode;
        container   origVoucherCon;
        int         counterOrigVoucherCon;

        taxWithholdComponentGroupTable = TaxWithholdComponentGroupTable_IN::findByComponentGroup(_taxWithholdType, _componentGroup);

        componentGroupRecId = taxWithholdComponentGroupTable.RecId;
        sectionCode         = taxWithholdComponentGroupTable.SectionCode;
        tanNumberRecId      = TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(_tanNumber, TaxRegistrationType_IN::Company).RecId;

        while select sum(TaxAmount), maxOf(ChallanNumber), maxOf(ChallanDate), maxOf(BSRCode), maxOf(TransDate) from taxWithholdSettleTrans
            group by OrigVoucher
            where   taxWithholdSettleTrans.TaxWithholdComponentGroup    == componentGroupRecId
                &&  taxWithholdSettleTrans.TaxWithholdRegNumber         == tanNumberRecId
                &&  taxWithholdSettleTrans.CertificateNumber            == _certificateNumber
                &&  taxWithholdSettleTrans.CustVendAccount              == _accountNum
                &&  taxWithholdSettleTrans.TaxType                      == _taxWithholdType
                &&  taxWithholdSettleTrans.SourceTransVoucher           == ''
                &&  taxWithholdSettleTrans.SourceTransDate              == dateNull()
                &&  taxWithholdSettleTrans.TransDate                    >= _fromDate
                &&  taxWithholdSettleTrans.TransDate                    <= _toDate
        {
            counterOrigVoucherCon++;
            origVoucherCon  = conPoke(origVoucherCon, counterOrigVoucherCon, taxWithholdSettleTrans.OrigVoucher);

            taxAmount       = 0;
            challanDate     = dateNull();
            challanNumber   = '';
            bsrCode         = '';

            taxAmount       += -taxWithholdSettleTrans.TaxAmount;
            challanDate     = taxWithholdSettleTrans.ChallanDate;
            challanNumber   = taxWithholdSettleTrans.ChallanNumber;
            bsrCode         = taxWithholdSettleTrans.BSRCode;

            select sum(TaxAmount) from taxWithholdSettleTransAdjust
                where   taxWithholdSettleTransAdjust.SourceTransDate            == taxWithholdSettleTrans.TransDate
                    &&  taxWithholdSettleTransAdjust.SourceTransVoucher         == taxWithholdSettleTrans.OrigVoucher
                    &&  taxWithholdSettleTransAdjust.TaxWithholdComponentGroup  == componentGroupRecId;

            taxAmount   += -taxWithholdSettleTransAdjust.TaxAmount;
            if (taxAmount)
            {
                this.initFieldValues(
                    taxWithholdCertificateCINTmp,
                    challanDate,
                    challanNumber,
                    bsrCode,
                    taxAmount);

                taxWithholdCertificateCINTmp.insert();
            }
        }

        while select sum(TaxAmount), maxOf(ChallanNumber), maxOf(ChallanDate), maxOf(BSRCode), maxOf(TransDate) from taxWithholdSettleTrans
            group by SourceTransVoucher
            where   taxWithholdSettleTrans.TaxWithholdComponentGroup    == componentGroupRecId
                &&  taxWithholdSettleTrans.TaxWithholdRegNumber         == tanNumberRecId
                &&  taxWithholdSettleTrans.CertificateNumber            == _certificateNumber
                &&  taxWithholdSettleTrans.CustVendAccount              == _accountNum
                &&  taxWithholdSettleTrans.TaxType                      == _taxWithholdType
                &&  taxWithholdSettleTrans.SourceTransVoucher           != ''
                &&  taxWithholdSettleTrans.SourceTransDate              != dateNull()
                &&  taxWithholdSettleTrans.TransDate                    >= _fromDate
                &&  taxWithholdSettleTrans.TransDate                    <= _toDate
        if (!conFind(origVoucherCon, taxWithholdSettleTrans.SourceTransVoucher))
        {
            taxWithholdCertificateCINTmp.clear();
            counterOrigVoucherCon++;
            origVoucherCon  = conPoke(origVoucherCon, counterOrigVoucherCon, taxWithholdSettleTrans.SourceTransVoucher);
            taxAmount       = 0;
            challanDate     = dateNull();
            challanNumber   = '';
            bsrCode         = '';

            taxAmount       += -taxWithholdSettleTrans.TaxAmount;
            challanDate     = taxWithholdSettleTrans.ChallanDate;
            challanNumber   = taxWithholdSettleTrans.ChallanNumber;
            bsrCode         = taxWithholdSettleTrans.BSRCode;

            if (taxAmount)
            {
                this.initFieldValues(
                    taxWithholdCertificateCINTmp,
                    challanDate,
                    challanNumber,
                    bsrCode,
                    taxAmount);

                taxWithholdCertificateCINTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialNum</Name>
				<Source><![CDATA[

    /// <summary>
    /// Retrieves a serial number.
    /// </summary>
    /// <returns>
    /// The serial number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int getSerialNum()
    {
        serialNum++;
        return serialNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdCertificateCINTmp</Name>
				<Source><![CDATA[

    /// <summary>
    /// Retrieves data from the <c>TaxWithholdCertificateCINTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdCertificateCINTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdCertificateCINTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdCertificateCINTmp getTaxWithholdCertificateCINTmp()
    {
        return TaxWithholdCertificateCINTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldValues</Name>
				<Source><![CDATA[

    /// <summary>
    /// Initializes the fields value of TaxWithholdCertificateCINTmp table.
    /// </summary>
    /// <param name="_taxWithholdCertificateCINTmp">
    /// The TaxWithholdCertificateCINTmp table.
    /// </param>
    /// <param name="_challanDate">
    /// The challan date.
    /// </param>
    /// <param name="_challanNumber">
    /// The challan number.
    /// </param>
    /// <param name="_bsrCode">
    /// The bsr code.
    /// </param>
    /// <param name="_totalAmountPerLine">
    /// The total amount per line.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFieldValues(
        TaxWithholdCertificateCINTmp    _taxWithholdCertificateCINTmp,
        Transdate                       _challanDate,
        str                             _challanNumber,
        str                             _bsrCode,
        Amount                          _totalAmountPerLine)
    {
        str  dateStrtmp = date2str(_challanDate, 123, 2, 1, 2, 1, 4, DateFlags::None);

        //Sets the fields' value
        _taxWithholdCertificateCINTmp.Amount            = _totalAmountPerLine;
        _taxWithholdCertificateCINTmp.SerialNumber      = this.getSerialNum();
        _taxWithholdCertificateCINTmp.BSRCode1          = subStr(_bsrCode, 1, 1);
        _taxWithholdCertificateCINTmp.BSRCode2          = subStr(_bsrCode, 2, 1);
        _taxWithholdCertificateCINTmp.BSRCode3          = subStr(_bsrCode, 3, 1);
        _taxWithholdCertificateCINTmp.BSRCode4          = subStr(_bsrCode, 4, 1);
        _taxWithholdCertificateCINTmp.BSRCode5          = subStr(_bsrCode, 5, 1);
        _taxWithholdCertificateCINTmp.BSRCode6          = subStr(_bsrCode, 6, 1);
        _taxWithholdCertificateCINTmp.BSRCode7          = subStr(_bsrCode, 7, 1);
        _taxWithholdCertificateCINTmp.ChallanDate1      = substr(dateStrtmp, 1, 1);
        _taxWithholdCertificateCINTmp.ChallanDate2      = substr(dateStrtmp, 2, 1);
        _taxWithholdCertificateCINTmp.ChallanDate3      = substr(dateStrtmp, 4, 1);
        _taxWithholdCertificateCINTmp.ChallanDate4      = substr(dateStrtmp, 5, 1);
        _taxWithholdCertificateCINTmp.ChallanDate5      = substr(dateStrtmp, 7, 1);
        _taxWithholdCertificateCINTmp.ChallanDate6      = substr(dateStrtmp, 8, 1);
        _taxWithholdCertificateCINTmp.ChallanDate7      = substr(dateStrtmp, 9, 1);
        _taxWithholdCertificateCINTmp.ChallanDate8      = substr(dateStrtmp, 10, 1);
        _taxWithholdCertificateCINTmp.ChallanNumber1    = subStr(_challanNumber, 1, 1);
        _taxWithholdCertificateCINTmp.ChallanNumber2    = subStr(_challanNumber, 2, 1);
        _taxWithholdCertificateCINTmp.ChallanNumber3    = subStr(_challanNumber, 3, 1);
        _taxWithholdCertificateCINTmp.ChallanNumber4    = subStr(_challanNumber, 4, 1);
        _taxWithholdCertificateCINTmp.ChallanNumber5    = subStr(_challanNumber, 5, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[

    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// The method will compute data and populate the data tables that will be returned to SSRS at runtime.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdCertificateSubReportContract contract = this.parmDataContract();

        serialNum = 0;

        this.getCIN(
            contract.parmCertificateNumber(),
            contract.parmComponentGroup(),
            contract.parmTaxWithholdType(),
            contract.parmAccountNum(),
            contract.parmCustVendACType(),
            contract.parmFromDate(),
            contract.parmToDate(),
            contract.parmTanNumber());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
