<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetReportsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetReportsController</c> class can be used by all the countries.
/// </summary>
class AssetReportsController extends SrsReportRunController implements BatchRetryable
{
    #ISOCountryRegionCodes

    str     strReportName;
    boolean reportFlag;
    AssetTransactionListingContract assetTransactionListingContract;
    AssetBalancesContract assetBalancesContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is executed.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        AssetDisposalContractLV contract;
        Query query;

        if (this.parmReportName() == ssrsReportStr(AssetDisposalLV, Report))
        {
            contract = this.parmReportContract().parmRdpContract();
            query = this.getFirstQuery();

            // Modify the query contract based on fromDate & toDate.
            SrsReportHelper::addFromAndToDateRangeToQuery(query,
                                                          contract.parmFromDate(),
                                                          contract.parmToDate(),
                                                          tableNum(AssetBook),
                                                          fieldNum(AssetBook, DisposalDate));
        }
        else if (this.parmReportName() == ssrsReportStr(AssetTransactionListingPL, Report)
            || this.parmReportName() == ssrsReportStr(AssetTransactionListing, Report))
        {
            assetTransactionListingContract = this.parmReportContract().parmRdpContract() as AssetTransactionListingContract;
            assetTransactionListingContract.parmSysVersion(SysReportRun::sysVersion());
            assetTransactionListingContract.parmUserName(SysReportRun::userName());
            if (Ledger::reportingCurrency() && Ledger::accountingCurrency() != Ledger::reportingCurrency())
            {
                assetTransactionListingContract.parmShowReportingCurrency(true);
            }
        }
        else if (this.parmReportName() == ssrsReportStr(AssetBalances, Report))
        {
            assetBalancesContract = this.parmReportContract().parmRdpContract() as AssetBalancesContract;
            assetBalancesContract.parmSysVersion(SysReportRun::sysVersion());
            assetBalancesContract.parmUserName(SysReportRun::userName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the report name by using the caller and country region code.
    /// </summary>
    /// <returns>
    /// The report name.
    /// </returns>
    public str setReportName()
    {
        str menuItemName;

        reportFlag = true;
        menuItemName = this.parmArgs().menuItemName();
        // To point out to another report add another case in swtich statement.
        // To point out some other country specific report with same menuitem for below mentioned cases
        // add another If clause just like the existing one and set its report name after checking country region code.
        switch (menuItemName)
        {
            case menuitemOutputStr(AssetListing) :
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    strReportName = ssrsReportStr(AssetListing_IN, Report);
                    break;
                }
                // </GIN>
                strReportName =  ssrsReportStr(AssetListing, Report);
                break;

            case menuitemOutputStr(AssetTransactionListing) :
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    strReportName = ssrsReportStr(AssetTransactionListing_IN, Report);
                    return strReportName;
                }
                // </GIN>
                // <GEEPL>
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00042, funcName());
                    strReportName = ssrsReportStr(AssetTransactionListingPL, Report);
                    return strReportName;
                }
                // </GEEPL>
                strReportName = ssrsReportStr(AssetTransactionListing, Report);
                break;

            case menuitemOutputStr(AssetBalances) :
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    strReportName = ssrsReportStr(AssetBalances_IN, Report);
                    break;
                }
                // </GIN>
                strReportName = ssrsReportStr(AssetBalances, Report);
                break;
            case menuitemOutputStr(AssetDisposal) :
            case menuitemOutputStr(AssetDisposalReport) :
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    strReportName = ssrsReportStr(AssetDisposal_IN, Report);
                    break;
                }
                // </GIN>

                // <GEELV>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00020, funcName());
                    strReportName = ssrsReportStr(AssetDisposalLV, Report);
                    break;
                }
                // </GEELV>

                strReportName = ssrsReportStr(AssetDisposal, Report);
                break;
            case menuitemOutputStr(AssetBasis) :
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    strReportName =  ssrsReportStr(AssetBasis_IN, Report);
                    break;
                }
                // </GIN>
                break;
        }

        return strReportname;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the <c>AssetReportsController</c> class to call the sys report if the report has a
    /// controller in the SYS layer.
    /// </summary>
    /// <param name="_args">
    /// The <c>args</c> value from the caller to this method.
    /// </param>
    /// <returns>
    /// A controller object which calls the report based on caller and country region code.
    /// </returns>
    public static SrsReportRunController construct(Args _args)
    {
        SrsReportRunController controller;
        AssetReportsController commonController;

       // Verifying the legal Entity does not belong to particular country.
       // If so creating a Sys layer controller object of this report and thus we call the sys layer report.
       // If in case of having another country specific report with the same name ,Add another condition using 'and' operator in if statement,
       // and Add the corresponding case in setReportName method.
        switch (_args.menuItemName())
        {
            case menuitemOutputStr(AssetBasis):
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    break;
                }
                // </GIN>
                controller = AssetBasisController::construct(_args);
                break;
        }

        if (!controller)
        {
            commonController = new AssetReportsController();
            commonController.parmArgs(_args);
            commonController.parmReportName(commonController.setReportName());
            return commonController;
        }
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetReportsController::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>