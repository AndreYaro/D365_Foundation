<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_WMSPickingRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form WMSPickingRegistration.
/// </summary>
class PdsFormCtrl_WMSPickingRegistration extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Complete the standard field modified functionality
    /// </summary>
    /// <param name="_fieldId">
    /// FieldId of modified field
    /// </param>
    /// <remarks>
    /// Method also calls the Form control button manager.
    /// </remarks>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - WMSOrderTrans
    /// </param>
    /// <param name="_datasources2">
    /// Form Data source used by class - WMSPickingRoute
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1,
        Common _datasources2 = null,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(WMSOrderTrans))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(WMSPickingRoute))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PdsFormCtrl_WMSPickingRegistration construct()
    {
        return new PdsFormCtrl_WMSPickingRegistration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PdsFormCtrl_WMSPickingRegistration</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// New instance of class <c>PdsFormCtrl_WMSPickingRegistration</c>
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PdsFormCtrl_WMSPickingRegistration</c> and sets the formRun variable
    /// to the vlue of the calling form.
    /// </remarks>
    public static PdsFormCtrl_WMSPickingRegistration newFromForm(FormRun _fr)
    {
        PmfFormCtrl                             frmCtrl;
        PdsCWFormCtrl_WMSPickingRegistration    cwFrmCtrl;

        frmCtrl = PdsFormCtrl_WMSPickingRegistration::construct();
        frmCtrl.parmFormRun(_fr);

        if (#PdsCatchWeightEnabled)
        {
            cwFrmCtrl = PdsCWFormCtrl_WMSPickingRegistration::newFromForm(_fr);
            cwFrmCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(WMSOrderTrans, Qty),
                  fieldnum(WMSOrderTrans, PdsCWQty),
                  true]]
                ));
            cwFrmCtrl.parmItemFieldId(fieldnum(WMSOrderTrans, ItemId));
            cwFrmCtrl.parmUnitMethodStr(tablemethodstr(WMSOrderTrans, pdsCWUnitId));

            frmCtrl.addSubFormCtrl(cwFrmCtrl);
        }

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>