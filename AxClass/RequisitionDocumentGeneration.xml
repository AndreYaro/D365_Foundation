<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RequisitionDocumentGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base class for releasing requisition lines to documents.
/// </summary>
abstract class RequisitionDocumentGeneration
{
    PurchReqTmpSourcingPolicyRule   purchReqTmpSourcingPolicyRule;
    container                       buyingLegalEntityCon;
    boolean                         isRunningInAutoMode;
    container                       purchReqLineRecIdCon;
    Map                             purchReqTableFailureMap;

    private PurchReqInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applySourcingPolicyOnError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies policies when error occurs during releasing the requisition lines.
    /// </summary>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// Throw an exception when update conflict occurs.
    /// </exception>
    protected void applySourcingPolicyOnError()
    {
        #OCCRetryCount
        MapEnumerator      me = purchReqTableFailureMap.getEnumerator();
        SetEnumerator      se;
        PurchReqLine       purchReqLineRecord;
        Set                purchReqLineSet;
        PurchReqTable      purchReqTableRecord;
        PurchReqAutoCreate purchReqAutoCreate;
        Set                purchReqLineCreateSet;

        while (me.moveNext())
        {
            purchReqLineCreateSet = new Set(typeName2Type(extendedTypeStr(RecId)));

            try
            {
                ttsbegin;
                purchReqLineSet = me.currentValue();

                se = purchReqLineSet.getEnumerator();

                while (se.moveNext())
                {
                    purchReqLineRecord = PurchReqLine::find(se.current());

                    switch (PurchReqPurchaseOrderGenerationRule::purchReqSourcingPolicyRuleStatic(purchReqLineRecord).ErrorOption)
                    {
                        case PurchReqPurchOrderGenerationErrorOption::DoNothing :
                            break;
                        case PurchReqPurchOrderGenerationErrorOption::Cancel    :
                            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(purchReqLineRecord.RecId, PurchReqRequisitionStatus::Cancelled);
                            break;
                        case PurchReqPurchOrderGenerationErrorOption::CreateNew :
                            purchReqLineCreateSet.add(purchReqLineRecord.RecId);
                            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(purchReqLineRecord.RecId, PurchReqRequisitionStatus::Cancelled);
                            break;
                    }
                }

                if (purchReqLineCreateSet.elements())
                {
                    purchReqTableRecord = PurchReqTable::find(me.currentKey());

                    purchReqAutoCreate = PurchReqAutoCreate::newAutoCreate(purchReqTableRecord);
                    purchReqAutoCreate.parmPurchReqLineSet(me.currentValue());
                    purchReqAutoCreate.parmShowInfo(true);
                    purchReqAutoCreate.create();
                }
                ttscommit;
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    exceptionTextFallThrough();
                }
            }
            catch (Exception::UpdateConflictNotRecovered)
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRunningInAutoMode</Name>
				<Source><![CDATA[
    public boolean parmIsRunningInAutoMode(boolean _autoMode)
    {
        isRunningInAutoMode = _autoMode;
        return isRunningInAutoMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLineRecIdContainer</Name>
				<Source><![CDATA[
    public container parmPurchReqLineRecIdContainer(container _con = purchReqLineRecIdCon)
    {
        purchReqLineRecIdCon = _con;
        return purchReqLineRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the requisition lines.
    /// </summary>
    /// <remarks>
    /// The actual logic should be implemented in the derived classes.
    /// </remarks>
    public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqLineGeneration2Manual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets IsPurchaseOrderGenerationManual flag to true for specified requisition line.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// The ID of the requisition line to update.
    /// </param>
    public void setPurchReqLineGeneration2Manual(RecId _purchReqLineRecId)
    {
        PurchReqLine    purchReqLine;

        ttsbegin;

        update_recordset purchReqLine
        setting IsPurchaseOrderGenerationManual = true
        where purchReqLine.RecId == _purchReqLineRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqLineProcessingError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update records in <c>PurchReqLineProcessingError</c> table.
    /// </summary>
    /// <param name="_packedLines">
    ///     A container containing records from from <c>PurchReqLine</c> table.
    /// </param>
    /// <param name="_errorCode">
    ///     The enum value in the <c>PurchReqLineProcessingErrorType</c> enum to retrieve.
    /// </param>
    /// <param name="_errorDescription">
    ///     The error description message
    /// </param>
    protected void updatePurchReqLineProcessingError(container                       _packedLines,
                                                   PurchReqLineProcessingErrorType _errorCode,
                                                   FreeTxt                         _errorDescription)
    {
        PurchReqLineProcessingError purchReqLineProcessingError;
        Set                         purchReqLineSet;

        if (!purchReqTableFailureMap)
        {
            purchReqTableFailureMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Class);
        }
        int numberOfPackedLines = conLen(_packedLines);

        for (int i = 1; i <= numberOfPackedLines; i++)
        {
            PurchReqLine purchReqLineRecord = conPeek(_packedLines, i);

            this.setPurchReqLineGeneration2Manual(purchReqLineRecord.RecId);

            select forupdate purchReqLineProcessingError where
                purchReqLineProcessingError.PurchReqLine  == purchReqLineRecord.RecId &&
                purchReqLineProcessingError.Type          == _errorCode;

            if (!purchReqLineProcessingError.RecId)
            {
                purchReqLineProcessingError.PurchReqLine    = purchReqLineRecord.RecId;
                purchReqLineProcessingError.Type            = _errorCode;
                purchReqLineProcessingError.Description     = _errorDescription;
                purchReqLineProcessingError.insert();
            }

            if (!purchReqTableFailureMap.exists(purchReqLineRecord.PurchReqTable))
            {
                purchReqLineSet = new Set(typeName2Type(extendedTypeStr(RecId)));

                purchReqTableFailureMap.insert(purchReqLineRecord.PurchReqTable, purchReqLineSet);
            }
            else
            {
                purchReqLineSet = purchReqTableFailureMap.lookup(purchReqLineRecord.PurchReqTable);
            }

            purchReqLineSet.add(purchReqLineRecord.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchReqInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>