<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocSplitCalcView_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgrExportDocSplitCalcView_CN</c> is view of split calculation.
/// </summary>
class TaxIntgrExportDocSplitCalcView_CN
{
    TaxIntgrExportDocumentSplitCalc_CN splitCalc;

    TaxIntgrExportDocTmp_CN     exportDoc;
    TaxIntgrExportDocLineTmp_CN exportDocLine;

    // numbering of the export document. This is used on UI only and should not be used
    // as sequence of export document.
    int numbering;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExportDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new export document.
    /// </summary>
    /// <param name="_splitType">
    /// The split type.
    /// </param>
    /// <param name="_exportDoc">
    /// The export document data.
    /// </param>
    /// <param name="_exportDocLine">
    /// The export document line data.
    /// </param>
    public void createExportDoc(
        TaxIntgrExportDocumentSplitType_CN  _splitType,
        TaxIntgrExportDocTmp_CN             _exportDoc,
        TaxIntgrExportDocLineTmp_CN         _exportDocLine = null)
    {
        TaxIntgrExportDocTmp_CN exportDocLocal;

        switch (_splitType)
        {
            case TaxIntgrExportDocumentSplitType_CN::ByAmount:
                splitCalc.splitByAmount(_exportDoc.TransactionCurrencyAmount,
                    0,
                    _exportDoc.MiscChargesNetAmount,
                    _exportDoc.MiscChargesTaxAmount);
                break;

            case TaxIntgrExportDocumentSplitType_CN::ByPercent:
                splitCalc.splitByPercent(_exportDoc.Percent);
                break;

            case TaxIntgrExportDocumentSplitType_CN::ByQuantity:
                splitCalc.splitByQuantity(0, _exportDocLine);
                break;
        }

        exportDocLocal = splitCalc.getNewCreatedExportDoc();

        exportDoc.clear();
        exportDoc.copyFrom(exportDocLocal);
        exportDoc.CalculateExportDocRecId = exportDocLocal.RecId;
        exportDoc.Number = this.getNextNumber();
        exportDoc.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get reference of reference of tmp export document
    /// </summary>
    /// <returns>
    /// reference of tmp export document
    /// </returns>
    public TaxIntgrExportDocTmp_CN getExportDoc()
    {
        return exportDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get reference of reference of tmp export document lines
    /// </summary>
    /// <param name="_exportDoc">
    /// The header of the lines.
    /// </param>
    /// <returns>
    /// reference of tmp export document lines
    /// </returns>
    public TaxIntgrExportDocLineTmp_CN getExportDocLine(TaxIntgrExportDocTmp_CN     _exportDoc)
    {
        //if the temp table has not been populated, it is populated first.
        select firstOnly exportDocLine
            where exportDocLine.TaxIntgrExportDocTmp_CN == _exportDoc.RecId;
        if (!exportDocLine)
        {
            this.insertExportDocLine(_exportDoc);
        }
        return exportDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next line number.
    /// </summary>
    /// <returns>
    /// The line number.
    /// </returns>
    private int getNextNumber()
    {
        numbering += 1;
        return numbering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the export document line of a header.
    /// </summary>
    /// <param name="_exportDoc">
    /// The header.
    /// </param>
    protected void insertExportDocLine(TaxIntgrExportDocTmp_CN _exportDoc)
    {
        MapEnumerator   mapEnum;
        Map             lineMap;
        TaxIntgrExportDocLineTmp_CN exportDocLineLocal;

        lineMap = splitCalc.getExportDocMap().lookup(splitCalc.findExportDocByRecId(_exportDoc.CalculateExportDocRecId));
        mapEnum = lineMap.getEnumerator();

        while (mapEnum.moveNext())
        {
            exportDocLineLocal = mapEnum.currentValue();
            exportDocLine.data(exportDocLineLocal);
            exportDocLine.TaxIntgrExportDocTmp_CN = _exportDoc.RecId;
            exportDocLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitCalc</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocumentSplitCalc_CN parmSplitCalc(TaxIntgrExportDocumentSplitCalc_CN _splitCalc = splitCalc)
    {
        splitCalc = _splitCalc;
        return splitCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAllExportDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates all the export document.
    /// </summary>
    public void populateAllExportDoc()
    {
        MapEnumerator           enum;
        TaxIntgrExportDocTmp_CN exportDocLocal;

        enum = splitCalc.getExportDocMap().getEnumerator();
        while (enum.moveNext())
        {
            exportDocLocal = enum.currentKey();
            exportDoc.clear();
            exportDoc.data(exportDocLocal);
            exportDoc.CalculateExportDocRecId = exportDocLocal.RecId;
            exportDoc.Number = this.getNextNumber();
            exportDoc.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExportDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the export document.
    /// </summary>
    /// <param name="_splitType">
    /// The split type.
    /// </param>
    /// <param name="_exportDoc">
    /// The export document.
    /// </param>
    public void removeExportDoc(
        TaxIntgrExportDocumentSplitType_CN  _splitType,
        TaxIntgrExportDocTmp_CN             _exportDoc)
    {
        splitCalc.reverseExportDoc(_exportDoc.CalculateExportDocRecId, _splitType);

        //refresh the number
        while select forUpdate exportDoc
            where exportDoc.Number > _exportDoc.Number
        {
            exportDoc.Number = exportDoc.Number - 1;
            exportDoc.update();
        }
        numbering--;
        this.removeObosoleteLines(_exportDoc);
        _exportDoc.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeObosoleteLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes obosolete lines.
    /// </summary>
    /// <param name="_exportDoc">
    /// Obosolete export document.
    /// </param>
    protected void removeObosoleteLines(TaxIntgrExportDocTmp_CN _exportDoc)
    {
        delete_from exportDocLine
            where exportDocLine.TaxIntgrExportDocTmp_CN == _exportDoc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExportDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the export document.
    /// </summary>
    /// <param name="_splitType">
    /// The split type.
    /// </param>
    /// <param name="_exportDoc">
    /// The export document.
    /// </param>
    public void updateExportDoc(
        TaxIntgrExportDocumentSplitType_CN  _splitType,
        TaxIntgrExportDocTmp_CN             _exportDoc)
    {
        TaxIntgrExportDocTmp_CN exportDocLocal;

        //reverse current
        splitCalc.reverseExportDoc(_exportDoc.CalculateExportDocRecId, _splitType);

        switch (_splitType)
        {
            case TaxIntgrExportDocumentSplitType_CN::ByAmount:
                splitCalc.splitByAmount(_exportDoc.TransactionCurrencyAmount,
                    0,
                    _exportDoc.MiscChargesNetAmount * (_exportDoc.TransactionCurrencyAmount / splitCalc.getRemainingAmount()),
                    _exportDoc.MiscChargesTaxAmount * (_exportDoc.TransactionCurrencyAmount / splitCalc.getRemainingAmount()));
                break;

            case TaxIntgrExportDocumentSplitType_CN::ByPercent:
                splitCalc.splitByPercent(_exportDoc.Percent);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        exportDocLocal = splitCalc.getNewCreatedExportDoc();
        _exportDoc.selectForUpdate(true);
        _exportDoc.copyFrom(exportDocLocal);
        _exportDoc.CalculateExportDocRecId = exportDocLocal.RecId;
        _exportDoc.update();
        this.removeObosoleteLines(_exportDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new split calculation view.
    /// </summary>
    /// <param name="_splitCalc">
    /// An instance of split calculation.
    /// </param>
    /// <returns>
    /// The split calculation view.
    /// </returns>
    public static TaxIntgrExportDocSplitCalcView_CN construct(TaxIntgrExportDocumentSplitCalc_CN _splitCalc)
    {
        TaxIntgrExportDocSplitCalcView_CN splitCalcView;

        splitCalcView = new TaxIntgrExportDocSplitCalcView_CN();
        splitCalcView.parmSplitCalc(_splitCalc);

        return splitCalcView;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>