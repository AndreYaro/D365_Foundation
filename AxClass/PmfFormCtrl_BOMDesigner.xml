<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMDesigner</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control class for the <c>BOMDesigner</c> form
/// </summary>
class PmfFormCtrl_BOMDesigner
    extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doLinkActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>linkActive</c> event of the datasource
    /// </summary>
    /// <remarks>
    /// Set the caption based on the type of the calling record
    /// </remarks>
    public void doLinkActivePost()
    {
        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Creates and initializes the form button manager and adjusts various
    /// properties for the usage of the form with formulas
    /// </remarks>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOM_PDSIngredientType)),
                methodstr(PmfFormCtrl_BomDesigner, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        boolean     ret = false;
        InventTable inventTable;
        SalesLine   salesLine;
        PurchLine   purchLine;
        BOMTable    bomTable;

        switch (this.callerBuffer().TableId)
        {
            case tablenum(InventTable) :
                inventTable = this.callerBuffer();
                break;
            case tablenum(SalesLine) :
                salesLine = this.callerBuffer();
                inventTable = salesLine.inventTable();
                break;
            case tablenum(PurchLine) :
                purchLine = this.callerBuffer();
                inventTable = purchLine.inventTable();
                break;
            case tablenum(BOMTable) :
                bomTable = this.callerBuffer();
                if (bomTable.PmfBOMFormula == PmfBOMFormula::Formula)
                {
                    ret = true;
                }
                break;
        }

        if (inventTable.isFormulaAllowed())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the actual run method of the form element
    /// </summary>
    public void runPre()
    {
        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@PRO1483");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMDesigner construct()
    {
        return new PmfFormCtrl_BOMDesigner();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_formRun">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BOMDesigner newFromForm(FormRun _formRun)
    {
        PmfFormCtrl_BOMDesigner frmCtrl;

        frmCtrl = PmfFormCtrl_BOMDesigner::construct();
        frmCtrl.parmFormRun(_formRun);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>