<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTrans_Virtual</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTrans_Virtual extends ProjTrans
{
    ProjTransType transType;
    TransDate transDate;
    ProjId projId;
    ProjActivityNumber activityNumber;
    ProjCategoryId categoryId;
    ResourceRecId resource;
    ResourceCategoryRecId resourceCategory;
    SMASubscriptionId subscriptionId;
    ItemId itemId;
    CurrencyCode currencyIdCost;
    ProjSalesCurrencyCode currencyIdSales;
    ExchRate exchRateSales;
    ProjLinePropertyId linePropertyId;
    AmountCur transTurnover;
    boolean isIntercompany;
    DataAreaId lendingLegalEntity;
    private ProjTaxGroup projTaxGroup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the activity number for a transaction.
    /// </summary>
    /// <returns>
    /// The activity number for the transaction.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public CostPrice costPrice()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the costs that are reported by this transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the costs reported by this transaction.
    /// </returns>
    /// <remarks>
    /// The costs are always reported in the company currency. Therefore, this method calls the
    /// <c>standardCurrency</c> method of the <c>CompanyInfo</c> class.
    /// </remarks>
    public CurrencyCode currencyIdCost()
    {
        return currencyIdCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return currencyIdSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    If exchange rate has been provided to <c>ProjTrans_Virtual</c>, return provided exchange rate.
    ///    If not, method retrieves the exchange rate to use for the sales amounts that are reported by this transaction
    ///    based on the transaction date.
    /// </summary>
    /// <param name="_transDate">
    ///    The date to use to find the exchange rate. Defaults to the transaction date; optional.
    /// </param>
    /// <returns>
    ///    The exchange rate to use for the sales amounts that are reported by this transaction.
    /// </returns>
    public ExchRate exchRateSales(TransDate _transDate = this.transDate())
    {
        if (exchRateSales)
        {
            return exchRateSales;
        }
        else
        {
            return super(_transDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory dimension for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public InventDimId inventDimId()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is invoiceable.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public boolean invoiceable()
    {
        boolean ret = true;

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret)
        {
            ProjFundingSource projFundingSource = ProjFundingSource::find(this.fundingSource());

            if ((projFundingSource.FundingType == ProjFundingType::Organization) ||
                (projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource))
            {
                ret = false;
            }
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), PSAContractLineItemsSetup::find(this.ProjId(), this.categoryId()).ContractLineNum, this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction origin for this transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjItemType::Project</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to return a different transaction
    /// origin for the specific transaction.
    /// </remarks>
    public ProjTransactionOrigin itemType()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public NoYes ledgerSalesPosted()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjLedgerStatus ledgerStatusCost()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return linePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method will be overridden by child classes to return true if budgetary control is required.
    /// </remarks>
    public boolean mustHandleBudget()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleCommittedCost</Name>
				<Source><![CDATA[
    public boolean mustHandleCommittedCost()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleForecast</Name>
				<Source><![CDATA[
    public boolean mustHandleForecast()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _buffer, Common _childBuffer)
    {
        super(_buffer, _childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projEmplItemId</Name>
				<Source><![CDATA[
    public ProjEmplItemId projEmplItemId()
    {
        return this.itemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lendingLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lendingLegalEntity for the intercompany transaction.
    /// </summary>
    /// <returns>
    /// The lendingLegalEntity value.
    /// </returns>
    public DataAreaId lendingLegalEntity()
    {
        return lendingLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Qty qty()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the resource <c>RecId</c> value for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the resourceCategory <c>RecId</c> value for the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesPrice salesPrice()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public UnitOfMeasureSymbol salesUnit()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityNumber</Name>
				<Source><![CDATA[
    public void setActivityNumber(ProjActivityNumber _activityNumber)
    {
        activityNumber = _activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryId</Name>
				<Source><![CDATA[
    public void setCategoryId(ProjCategoryId _categoryId)
    {
        categoryId = _categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyIdCost</Name>
				<Source><![CDATA[
    public void setCurrencyIdCost(CurrencyCode _currencyIdCost)
    {
        currencyIdCost = _currencyIdCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyIdSales</Name>
				<Source><![CDATA[
    public void setCurrencyIdSales(ProjSalesCurrencyCode _currencyIdSales)
    {
        currencyIdSales = _currencyIdSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExchRateSales</Name>
				<Source><![CDATA[
    public void setExchRateSales(ExchRate _exchRateSales)
    {
        exchRateSales = _exchRateSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    public void setItemId(ItemId _itemId)
    {
        itemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinePropertyId</Name>
				<Source><![CDATA[
    public void setLinePropertyId(ProjLinePropertyId _linePropertyId)
    {
        linePropertyId = _linePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjId</Name>
				<Source><![CDATA[
    public void setProjId(ProjId _projId)
    {
        projId = _projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLendingLegalEntity</Name>
				<Source><![CDATA[
    public void setLendingLegalEntity(DataAreaId _lendingLegalEntity)
    {
        lendingLegalEntity = _lendingLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResource</Name>
				<Source><![CDATA[
    public void setResource(ResourceRecId _resource)
    {
        resource = _resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory(ResourceCategoryRecId _resourceCategory)
    {
        resourceCategory = _resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubscriptionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SubscriptionId</c> value.
    /// </summary>
    /// <param name="_subscriptionId">
    /// The <c>SubscriptionId</c> value to set.
    /// </param>
    public void setSubscriptionId(SMASubscriptionId _subscriptionId)
    {
        subscriptionId = _subscriptionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    public void setTransDate(TransDate _transDate)
    {
        transDate = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransTurnover</Name>
				<Source><![CDATA[
    public void setTransTurnover(AmountCur _transTurnover)
    {
        transTurnover = _transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransType</Name>
				<Source><![CDATA[
    public void setTransType(ProjTransType _transType)
    {
        transType = _transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscriptionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>subscriptionId</c> value that is associated with this transaction if it exists.
    /// </summary>
    /// <returns>
    /// Returns the <c>subscriptionId</c> value that is associated with this transaction if it exists.
    /// </returns>
    public SMASubscriptionId subscriptionId()
    {
        return subscriptionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransDate transDate()
    {
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction type.
    /// </summary>
    /// <returns>
    /// The transaction type.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjTransType transType()
    {
        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransTxt txt()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an error.
    /// </summary>
    /// <returns>
    /// A system error message: Function %1 has been incorrectly called..
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public boolean validateWrite()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherInvoice()
    {
        throw error(strFmt("@SYS22828",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjTrans construct()
    {
        return new ProjTrans_Virtual(null, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    public boolean isIntercompany()
    {
        return isIntercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the transaction should behave as if it were an intercompany transaction.
    /// </summary>
    /// <param name="_isIntercompany">
    /// true if the transaction should behave as if it were an intercompany transaction, false otherwise.
    /// </param>
    public void setIntercompany(boolean _isIntercompany)
    {
        isIntercompany = _isIntercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set Tax Group from timesheet line
    /// </summary>
    /// <param name="_ProjTaxGroup">
    /// it contains the value if time sheet line have tax group
    /// </param>
    internal void setTaxGroup(ProjTaxGroup _projTaxGroup)
    {
        projTaxGroup = _projTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for the transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    internal TaxGroup taxGroup()
    {
        return ProjTaxGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>