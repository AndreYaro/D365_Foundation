<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcConfigurationProductVariantFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCConfigurationProductVariantFactory</c> class is responsible for creating the product
/// variants for product configuration.
/// </summary>
class PcConfigurationProductVariantFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new variant configuration and a new distinct product variant for a specified generic
    /// product model, if they don't already exist, and releases it.
    /// </summary>
    /// <param name="_ecoResProductMaster">
    /// The product master that is associated with the distinct product variants.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that was released from the generic product model.
    /// </param>
    /// <param name="_lineInventDimId">
    /// The ID of the inventory dimension that is attached to the item line that contains the item.
    /// </param>
    /// <param name="_configurationName">
    /// The configuration name to attempt to use again; optional.
    /// </param>
    /// <returns>
    /// A container that contains the ID of the new variant that was created, the ID of the inventory
    /// dimension that was created, and the name of the configuration that was created.
    /// </returns>
    public container createVariant(
        EcoResProductMaster                 _ecoResProductMaster,
        ItemId                              _itemId,
        InventDimId                         _lineInventDimId,
        PCConstraintBasedConfigurationName  _configurationName = '')
    {
        PCVariantConfiguration              variantConfiguration;
        InventDimId                         inventDimId;
        PCConstraintBasedConfigurationName  configurationName;
        RefRecId                            distinctProductVariantRecId;

        ttsbegin;

        [configurationName, inventDimId, distinctProductVariantRecId] = this.createVariantForItem(_itemId, InventDim::find(_lineInventDimId), _ecoResProductMaster, _configurationName);

        //create the reference to the distinctProductVariant
        variantConfiguration.DistinctProductVariant = distinctProductVariantRecId;
        variantConfiguration.insert();

        ttscommit;

        return [variantConfiguration.RecId, inventDimId, configurationName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVariantForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new product variant for a specified product master and configuration, if
    /// it doesn't already exist, and releases it.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item that was released from the generic product model.
    /// </param>
    /// <param name="_baseInventDim">
    /// The inventory dimension that serves as a base for the construction of the new dimension.
    /// </param>
    /// <param name="_ecoResProductMaster">
    /// The product master that is associated with the distinct product variants.
    /// </param>
    /// <param name="_configurationName">
    /// The configuration name to attempt to use again; optional.
    /// </param>
    /// <returns>
    /// A container that contains the ID of the new variant, the ID of the inventory dimension, and the
    /// name of the configuration.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The function was called without the correct parameters.
    /// </exception>
    public container createVariantForItem(
        ItemId                              _itemId,                //the item id
        InventDim                           _baseInventDim,         //starting point for our new dimension
        EcoResProductMaster                 _ecoResProductMaster,   //the product master of the item
        PCConstraintBasedConfigurationName  _configurationName = '') //the configuration to assign
    {
        InventDim                           inventDim;
        NumberSeq                           configNumSeq;
        PCConstraintBasedConfigurationName  configurationName;
        RefRecId                            distinctProductVariantRecId;
        container                           dimensions;
        boolean                             mustGetNewNumber = true;
        EcoResProductName                   productName;

        if (!_itemId || !_ecoResProductMaster ) //InventDim may not be committed yet
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_configurationName)
        {
            dimensions = EcoResProductVariantDimValue::getDimensionValuesContainerForConfiguration(_configurationName);
            //check if this configuration already exists for the item
            if (!EcoResProductVariantManager::existDistinctProductVariant(_ecoResProductMaster.RecId, dimensions)
                || (!this.isProductVariantReleased(EcoResProductVariantManager::findDistinctProductVariant(_ecoResProductMaster.RecId, dimensions)))
                )
            {
                //we can reuse the given value, it doesn't exist yet
                mustGetNewNumber  = false;
            }
        }

        if (mustGetNewNumber)
        {
            configNumSeq        =   NumberSeq::newGetNum(EcoResProductParameters::numRefConstraintBasedConfigurationName());
            configurationName   =   configNumSeq.num();
        }
        else
        {
            configurationName = _configurationName;
        }

        //create the inventory dimension record
        inventDim.initFromInventDim(_baseInventDim);
        inventDim.ConfigId      =   configurationName;
        inventDim               =   InventDim::findOrCreate(inventDim);

        //Attach the new configuration to the product master configuration product dimensions, if not already there.
        if (!EcoResProductMasterManager::checkDimensionValue(
                _ecoResProductMaster.RecId,
                EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                new InventProductDimensionConfig().findDimensionByNaturalKey(inventDim.ConfigId).RecId)
            )
        {
            if (EcoResProductMasterManagerMethodSignatureChangeFlight::instance().isEnabled())
            {
                EcoResProductMasterManager::addNewProductDimensionValue(
                    _ecoResProductMaster.RecId,
                    EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                    inventDim.ConfigId,
                    '',
                    '');
            }
            else
            {
                EcoResProductMasterManager::addProductDimensionValue(
                    _ecoResProductMaster.RecId,
                    EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                    inventDim.ConfigId,
                    '',
                    '');
            }
        }

        //Find or create the distinct product variant to release it on the current legal entity.
        dimensions= EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDim);

        distinctProductVariantRecId = EcoResProductVariantManager::findOrCreateProductVariant(
            _ecoResProductMaster.RecId,
            _ecoResProductMaster.SearchName + inventDim.ConfigId,
            dimensions);

        //Release distinct product variant to the current legal entity.
        EcoResProductReleaseManagerBase::releaseProduct(distinctProductVariantRecId, CompanyInfo::findDataArea(curext()).RecId); 
        
        return [configurationName, inventDim.InventDimId, distinctProductVariantRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureVariantIsReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or releases a product variant.
    /// </summary>
    /// <param name="_distintProductVariant">
    /// A distinct product variant.
    /// </param>
    public void ensureVariantIsReleased(EcoResDistinctProductVariant _distintProductVariant)
    {
        if (!this.isProductVariantReleased(_distintProductVariant))
        {
            EcoResProductReleaseManagerBase::releaseProduct(_distintProductVariant.RecId, CompanyInfo::findDataArea(curext()).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductVariantReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a distinct product variant has been released in the current legal entity.
    /// </summary>
    /// <param name = "_distintProductVariant">The specific distinct product variant to check.</param>
    /// <returns>true if the distinct product variant has been released; otherwise, false.</returns>
    private boolean isProductVariantReleased(EcoResDistinctProductVariant _distintProductVariant)
    {
        return InventDimCombination::findByDistinctProductVariant(_distintProductVariant.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCConfigurationProductVariantFactory construct()
    {
        return new PCConfigurationProductVariantFactory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>