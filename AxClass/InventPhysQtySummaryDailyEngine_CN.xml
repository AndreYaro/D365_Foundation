<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySummaryDailyEngine_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysQtySummaryDailyEngine_CN</c> class is used to calculate the inventory quantity for each day in the period.
/// </summary>
/// <remarks>
/// In the result, summary belonging to a day has beginning date and ending date equaling that day.
/// </remarks>

class InventPhysQtySummaryDailyEngine_CN extends InventPhysQtySummaryEngine_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mergeRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// merge and delete intermediate result
    /// </summary>
    protected void mergeRecords()
    {
        InventSumDateTransPhysTmp_CN    inventSumDateTrans;
        InventSumDateTransPhysTmp_CN    inventSumDateTransnew;

        inventSumDateTransnew = inventSumDateTransResult;
        inventSumDateTrans = inventSumDateTransPhy;

        //Physical inventory
        this.progressUpdate("@SYS23942");
        inventSumDateType = InventSumDateType::Final;
        insert_recordset inventSumDateTransnew (
            ItemId, InventDimId, BeginDate, EndDate,
            ReceivedQty, IssuedQty,
            TransType)
            select  ItemId, InventDimId, BeginDate, BeginDate /*same day*/,
                    sum(ReceivedQty), sum(IssuedQty),
                    inventSumDateType /*scalar*/
            from inventSumDateTrans
                group by ItemId, InventDimId, BeginDate
                    where inventSumDateTrans.TransType != InventSumDateType::Final;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates physical quantity.
    /// </summary>
    protected void selectInventTransPostingPhysical()
    {
        //  Update Inventory Physical by Date
        this.selectInventTransPostingPhysicalByDate();
        this.selectInventTransRegisterPickByDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysicalByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory quantity for each day in the period.
    /// </summary>

    protected void selectInventTransPostingPhysicalByDate()
    {
        InventTrans                 inventTrans;
        InventTransPosting          inventTransPostingPhysical;
        InventSumDateTransPhysTmp_CN    inventSumDateTrans;
        InventSumDateTransPhysTmp_CN    inventSumDateTransNew;

        inventSumDateTransNew = inventSumDateTransPhy;
        inventSumDateTrans = inventSumDateTransOrigin;
        //  Received + Purchased:   ReceivedQty         -= Qty
        this.progressUpdate("@SYS4465");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, BeginDate, EndDate, ReceivedQty, Sign)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                join TransDate, TransDate from inventTransPostingPhysical
                    group by TransDate
                    where inventTransPostingPhysical.ItemId                     == inventSumDateTrans.ItemId
                        && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                        && inventTransPostingPhysical.TransDate                 >= beginDate
                        && inventTransPostingPhysical.TransDate                 <= endDate
                join sum(Qty), minus /*scalar*/ from inventTrans
                    where inventTrans.VoucherPhysical           == inventTransPostingPhysical.Voucher
                        && inventTrans.DatePhysical             == inventTransPostingPhysical.TransDate
                        && inventTrans.InventTransOrigin        == inventTransPostingPhysical.InventTransOrigin
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.StatusIssue              == StatusIssue::None
                        && (inventTrans.StatusReceipt           == StatusReceipt::Received
                            || inventTrans.StatusReceipt        == StatusReceipt::Purchased);

        //  Deducted + Sold:        DeductedQty         += Qty
        this.progressUpdate("@SYS15979");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, BeginDate, EndDate, IssuedQty)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                join TransDate, TransDate from inventTransPostingPhysical
                    group by TransDate
                    where inventTransPostingPhysical.ItemId                     == inventSumDateTrans.ItemId
                        && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                        && inventTransPostingPhysical.TransDate                 >= beginDate
                        && inventTransPostingPhysical.TransDate                 <= endDate
                join sum(Qty) from inventTrans
                    where inventTrans.VoucherPhysical           == inventTransPostingPhysical.Voucher
                        && inventTrans.DatePhysical             == inventTransPostingPhysical.TransDate
                        && inventTrans.InventTransOrigin        == inventTransPostingPhysical.InventTransOrigin
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.StatusReceipt            == StatusReceipt::None
                        && (inventTrans.StatusIssue             == StatusIssue::Deducted
                            || inventTrans.StatusIssue          == StatusIssue::Sold);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransRegisterPickByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates registered and picked quantity during the period.
    /// </summary>
    protected void selectInventTransRegisterPickByDate()
    {
        InventTrans                     inventTrans;

        InventSumDateTransPhysTmp_CN inventSumDateTransNew = inventSumDateTransPhy;
        InventSumDateTransPhysTmp_CN inventSumDateTrans = inventSumDateTransOrigin;

        // Registered
        this.progressUpdate("@SYS50316");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, BeginDate, EndDate, Sign)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                join sum(Qty), DateInvent, DateInvent, minus /*scalar*/ from inventTrans
                    group by DateInvent
                    where inventTrans.ItemId                    == inventSumDateTrans.ItemId
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.DateInvent               >= beginDate
                        && inventTrans.DateInvent               <= endDate
                        && inventTrans.StatusIssue              == StatusIssue::None
                        && inventTrans.StatusReceipt            == StatusReceipt::Registered;

        //Picked
        this.progressUpdate("@SYS15980");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, IssuedQty, BeginDate, EndDate)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                join sum(Qty), DateInvent, DateInvent from inventTrans
                    group by DateInvent
                    where inventTrans.ItemId                    == inventSumDateTrans.ItemId
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.DateInvent               >= beginDate
                        && inventTrans.DateInvent               <= endDate
                        && inventTrans.StatusReceipt            == StatusReceipt::None
                        && inventTrans.StatusIssue              == StatusIssue::Picked;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>