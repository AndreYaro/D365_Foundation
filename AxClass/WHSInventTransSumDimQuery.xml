<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventTransSumDimQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for providing a mechanism for applying common filters
/// to <c>WHSInventTransSumDim</c> based queries.
/// </summary>
class WHSInventTransSumDimQuery
{
    Query query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dsInventTransSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides access to the main data source of the query.
    /// </summary>
    /// <returns>
    /// The main data source of the query.
    /// </returns>
    internal QueryBuildDataSource dsInventTransSumDim()
    {
        return query.dataSourceTable(tableNum(WHSInventTransSumDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>forInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter that ensures that only TMS-enabled items are selected.
    /// </summary>
    /// <param name="_inventTransId">
    /// The transaction number to create a range for.
    /// </param>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery forInventTransId(InventTransId _inventTransId)
    {
        SysQuery::findOrCreateRange(this.dsInventTransSumDim(), fieldNum(WHSInventTransSumDim, InventTransId)).value(queryValue(_inventTransId));
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forIssueOfTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter to the query that ensures that only inventory transactions
    /// that represent issue of the specified transfer order are selected.
    /// </summary>
    /// <param name="_transferId">
    /// The transfer order number to filter on.
    /// </param>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery forIssueOfTransferId(InventTransferId _transferId)
    {
        QueryBuildDataSource dsSalesLine = this.dsInventTransSumDim().addDataSource(tableNum(InventTransferLine));
        dsSalesLine.joinMode(JoinMode::ExistsJoin);
        dsSalesLine.fetchMode(QueryFetchMode::One2One);
        dsSalesLine.addLink(fieldNum(WHSInventTransSumDim, InventTransId), fieldNum(InventTransferLine, InventTransId));
        dsSalesLine.addRange(fieldNum(InventTransferLine, TransferId)).value(queryValue(_transferId));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forNotWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter that ensures that only lines that do not have a related
    /// Output order with a specific status are selected.
    /// </summary>
    /// <param name="_statusFrom">
    /// The status of the Output order to start filtering on.
    /// </param>
    /// <param name="_statusTo">
    /// The status of the Output order to stop filtering on.
    /// </param>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery forNotWMSOrder(WMSOrderStatus _statusFrom, WMSOrderStatus _statusTo)
    {
        QueryBuildDataSource dsWMSOrder = this.dsInventTransSumDim().addDataSource(tableNum(WMSOrder));
        dsWMSOrder.joinMode(JoinMode::NoExistsJoin);
        dsWMSOrder.fetchMode(QueryFetchMode::One2One);
        dsWMSOrder.addLink(fieldNum(WHSInventTransSumDim, InventTransId), fieldNum(WMSOrder, InventTransId));
        dsWMSOrder.addRange(fieldNum(WMSOrder, Status)).value(queryRange(_statusFrom, _statusTo));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter to the query that ensures that only inventory transactions
    /// for the specified sales order ID are selected.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order to filter on.
    /// </param>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery forSalesId(SalesId _salesId)
    {
        QueryBuildDataSource dsSalesLine = this.dsInventTransSumDim().addDataSource(tableNum(SalesLine));
        dsSalesLine.joinMode(JoinMode::ExistsJoin);
        dsSalesLine.fetchMode(QueryFetchMode::One2One);
        dsSalesLine.addLink(fieldNum(WHSInventTransSumDim, InventTransId), fieldNum(SalesLine, InventTransId));
        dsSalesLine.addRange(fieldNum(SalesLine, SalesId)).value(queryValue(_salesId));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter to the query that ensures that only prodBOM inventory transactions
    /// for the specified production ID are selected.
    /// </summary>
    /// <param name = "_prodId">
    /// The production ID to filter on.
    /// </param>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery forProdId(ProdId _prodId)
    {
        QueryBuildDataSource dsProdBOM = this.dsInventTransSumDim().addDataSource(tableNum(ProdBOM));
        dsProdBOM.joinMode(JoinMode::ExistsJoin);
        dsProdBOM.fetchMode(QueryFetchMode::One2One);
        dsProdBOM.addLink(fieldNum(WHSInventTransSumDim, InventTransId), fieldNum(ProdBOM, InventTransId));
        dsProdBOM.addRange(fieldNum(ProdBOM, ProdId)).value(queryValue(_prodId));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forWHSModuleOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter to the query that ensures that only inventory transactions
    /// related to the specified document are selected.
    /// </summary>
    /// <param name="_module">
    /// The module for the filter.
    /// </param>
    /// <param name="_orderNum">
    /// The order number of the filter.
    /// </param>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery forWHSModuleOrder(WHSModule _module, WHSOrderNum _orderNum)
    {
        switch (_module)
        {
            case WHSModule::Sales:
                this.forSalesId(_orderNum);
                break;

            case WHSModule::Transfer:
                this.forIssueOfTransferId(_orderNum);
                break;

            case WHSModule::ProdBOM:
                this.forProdId(_orderNum);
                break;
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter that ensures that only lines that do have a related
    /// Output order with a specific status are selected.
    /// </summary>
    /// <param name="_statusFrom">
    /// The status of the Output order to start filtering on.
    /// </param>
    /// <param name="_statusTo">
    /// The status of the Output order to stop filtering on.
    /// </param>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery forWMSOrder(WMSOrderStatus _statusFrom, WMSOrderStatus _statusTo)
    {
        QueryBuildDataSource dsWMSOrder = this.dsInventTransSumDim().addDataSource(tableNum(WMSOrder));
        dsWMSOrder.joinMode(JoinMode::ExistsJoin);
        dsWMSOrder.fetchMode(QueryFetchMode::One2One);
        dsWMSOrder.addLink(fieldNum(WHSInventTransSumDim, InventTransId), fieldNum(WMSOrder, InventTransId));
        dsWMSOrder.addRange(fieldNum(WMSOrder, Status)).value(queryRange(_statusFrom, _statusTo));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromWHSEnabledWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter to the query that ensures that only inventory transactions
    /// for WHS-enabled warehouses are selected.
    /// </summary>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery fromWHSEnabledWarehouse()
    {
        QueryBuildDataSource dsInventDim = this.dsInventTransSumDim().addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::ExistsJoin);
        dsInventDim.fetchMode(QueryFetchMode::One2One);
        dsInventDim.addLink(fieldNum(WHSInventTransSumDim, InventDimId), fieldNum(InventDim, InventDimId));

        QueryBuildDataSource dsInventLocation = dsInventDim.addDataSource(tableNum(InventLocation));
        dsInventLocation.joinMode(JoinMode::ExistsJoin);
        dsInventLocation.fetchMode(QueryFetchMode::One2One);
        dsInventLocation.relations(true);
        dsInventLocation.addRange(fieldNum(InventLocation, WHSEnabled)).value(queryValue(NoYes::Yes));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator object that allows iterating over the query.
    /// </summary>
    /// <returns>
    /// An enumerator object that allows iterating over the query.
    /// </returns>
    public WHSInventTransSumDimEnumerator getEnumerator()
    {
        return new WHSInventTransSumDimEnumerator(this.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        query = new Query();
        query.addDataSource(tableNum(WHSInventTransSumDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyTMSItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter that ensures that only TMS-enabled items are selected.
    /// </summary>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    public WHSInventTransSumDimQuery onlyTMSItems()
    {
        QueryBuildDataSource dsTMSInventEnabled = this.dsInventTransSumDim().addDataSource(tableNum(TMSInventEnabled));
        dsTMSInventEnabled.joinMode(JoinMode::ExistsJoin);
        dsTMSInventEnabled.fetchMode(QueryFetchMode::One2One);
        dsTMSInventEnabled.addLink(fieldNum(WHSInventTransSumDim, ItemId), fieldNum(TMSInventEnabled, ItemId));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides acces to the sys query object that was built based on the applied filters.
    /// </summary>
    /// <returns>
    /// The sys query object that was built based on the applied filters.
    /// </returns>
    public Query query()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notFullyReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filter out lines that have already been fully released.
    /// </summary>
    /// <returns>
    /// The current <c>WHSInventTransSumDimQuery</c> object.
    /// </returns>
    [Hookable(false)]
    internal WHSInventTransSumDimQuery notFullyReleased()
    {
        QueryBuildDataSource dsWHSReleasedQtyView = this.dsInventTransSumDim().addDataSource(tableNum(WHSReleasedQtyView));
        
        dsWHSReleasedQtyView.joinMode(JoinMode::NoExistsJoin);
        dsWHSReleasedQtyView.addLink(fieldNum(WHSInventTransSumDim, InventTransId), fieldNum(WHSReleasedQtyView, InventTransId));
        dsWHSReleasedQtyView.addLink(fieldNum(WHSInventTransSumDim, InventDimId), fieldNum(WHSReleasedQtyView, InventDimId));
        dsWHSReleasedQtyView.addLink(fieldNum(WHSInventTransSumDim, ReverseSumOfQty), fieldNum(WHSReleasedQtyView, InventMinusPicked));

        return this;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>