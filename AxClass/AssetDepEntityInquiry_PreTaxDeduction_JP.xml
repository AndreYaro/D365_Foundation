<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepEntityInquiry_PreTaxDeduction_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The asset depreciation entity inquiry for pre-tax deduction
/// </summary>
class AssetDepEntityInquiry_PreTaxDeduction_JP extends AssetDepEntityInquiry_JP
{
    AssetTableInterval      assetTableInterval;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInclusionByOverUnderDepreciationYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates inclusion by over under depreciation year to date
    /// </summary>
    /// <param name="_entityTypeList">
    /// The entity type list
    /// </param>
    /// <param name="_date">
    /// The date
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcInclusionByOverUnderDepreciationYTD(
        container           _entityTypeList,
        AssetTransDate      _date)
    {
        AssetAmount         ret;

        ret = this.calcOverUnderBalanceYTD(
            _entityTypeList,
            [AssetDepEntityTransType_JP::InclusionByOverUnderDep],
            _date);

        // For inclusion by under depreciation, it is postive value;
        // for inclusion by over depreciation, it is negative value.
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcOverUnderBalanceCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates over under balance carry forward amount
    /// </summary>
    /// <param name="_entityTypeList">
    /// The entity type list
    /// </param>
    /// <param name="_lastDayOfCurYear">
    /// The last day of current year
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcOverUnderBalanceCarryForward(
        container               _entityTypeList,
        AssetTransDate          _lastDayOfCurYear)
    {
        AssetAmount     ret;

        ret = this.calcSum(
            _entityTypeList,
            dateNull(),
            _lastDayOfCurYear,
            _lastDayOfCurYear + 1,
            conNull(),
            dateNull(),
            _lastDayOfCurYear);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcOverUnderBalanceYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates over under balance year to date amount
    /// </summary>
    /// <param name="_entityTypeList">
    /// The entity type list
    /// </param>
    /// <param name="_transTypeList">
    /// The transaction type list
    /// </param>
    /// <param name="_date">
    /// The date
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcOverUnderBalanceYTD(
        container           _entityTypeList,
        container           _transTypeList,
        AssetTransDate      _date)
    {
        AssetAmount         ret;
        AssetTransDate      firstDayOfCurYear   = assetTableInterval.findFirstDayOfYear(_date);
        AssetTransDate      lastDayOfCurYear    = assetTableInterval.findLastDayOfYear(_date);

        ret = this.calcSum(
            _entityTypeList,
            firstDayOfCurYear,
            lastDayOfCurYear,
            dateNull(),
            _transTypeList,
            dateNull(),
            _date);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcSpecialUnderDepWillExpirInNextYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates special under depreciation will expire in next year
    /// </summary>
    /// <param name="_lastDayForCurYear">
    /// The last day of current year
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcSpecialUnderDepWillExpirInNextYear(AssetTransDate _lastDayForCurYear)
    {
        AssetAmount     ret;

        ret = this.calcSumOfExpiredOnDate(
            _lastDayForCurYear + 1,
            [
                AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                AssetDepEntityType_JP::AdditionalDepreciationWithReserve,
                AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                AssetDepEntityType_JP::SpecialDepreciationWithReserve
            ]);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTableInterval</Name>
				<Source><![CDATA[
    public AssetTableInterval parmAssetTableInterval(AssetTableInterval _assetTableInterval = assetTableInterval)
    {
        assetTableInterval = _assetTableInterval;
        return assetTableInterval;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>AssetDepEntityInquiry_PreTaxDeduction_JP</C>
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    /// <param name="_assetTableInterval">
    /// The asset table interval instance
    /// </param>
    /// <returns>
    /// Returns the instance
    /// </returns>
    public static AssetDepEntityInquiry_PreTaxDeduction_JP construct(
        AssetId                                 _assetId,
        AssetBookMergeId                        _bookId,
        AssetTableInterval                      _assetTableInterval)
    {
        AssetDepEntityInquiry_PreTaxDeduction_JP    ret;

        ret = new AssetDepEntityInquiry_PreTaxDeduction_JP(
            AssetDepEntityGroup_JP::findOrCreate(
                _assetId,
                _bookId));

        ret.parmAssetTableInterval(_assetTableInterval);

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>