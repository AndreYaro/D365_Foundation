<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostTrans_AdjNeg</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostTrans_AdjNeg extends ProjPostCostTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        // <GIN>
        ProjCostTransTaxExtensionIN projCostTransTaxExtensionIN;
        ProjCostTransTaxExtensionIN projCostTransTaxExtensionINLoc;

        #ISOCountryRegionCodes
        // </GIN>

        ProjCostTrans locProjCostTrans = this.initializeProjCostTrans();

        if (! locProjCostTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            projCostTransTaxExtensionIN                                 = ProjCostTransTaxExtensionIN::findByProjCostTrans(projCostTrans.RecId);
            projCostTransTaxExtensionINLoc.AssessableValueTransactionCurrency   = projCostTransTaxExtensionIN.AssessableValueTransactionCurrency;
            projCostTransTaxExtensionINLoc.MaximumRetailPrice                   = projCostTransTaxExtensionIN.MaximumRetailPrice;
            locProjCostTrans.packProjCostTrans_IN(projCostTransTaxExtensionINLoc);
        }
        // </GIN>

        locProjCostTrans.insert();

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(projCostTrans, locProjCostTrans);
        }
        // </GTE>

        projTrans   = ProjTrans::newProjCostTrans(locProjCostTrans);

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(locProjCostTrans.TransId);
        }

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(locProjCostTrans.TransId);
        }

        transIdNew = locProjCostTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjCostTrans</c> table buffer.
    /// </summary>
    /// <returns>
    /// A <c>ProjCostTrans</c> table buffer.
    /// </returns>
    protected ProjCostTrans initializeProjCostTrans()
    {
        ProjCostTrans locProjCostTrans;

        locProjCostTrans.VoucherJournal       = projCostTrans.VoucherJournal;
        locProjCostTrans.CategoryId           = projCostTrans.CategoryId;
        locProjCostTrans.CurrencyId           = projCostTrans.CurrencyId;
        locProjCostTrans.DefaultDimension     = projCostTrans.DefaultDimension;
        locProjCostTrans.LinePropertyId       = projCostTrans.LinePropertyId;
        locProjCostTrans.ProjId               = projCostTrans.ProjId;

        locProjCostTrans.TransDate            = projCostTrans.TransDate;
        locProjCostTrans.Txt                  = projCostTrans.Txt;
        locProjCostTrans.TaxItemGroupId       = projCostTrans.TaxItemGroupId;
        locProjCostTrans.TaxGroupId           = projCostTrans.TaxGroupId;
        locProjCostTrans.Resource             = projCostTrans.Resource;
        locProjCostTrans.ResourceCategory     = projCostTrans.ResourceCategory;
        locProjCostTrans.ActivityNumber       = projCostTrans.ActivityNumber;

        locProjCostTrans.CurrencyIdCost       = projCostTrans.CurrencyIdCost;
        locProjCostTrans.Qty                  = projCostTrans.Qty * -1;
        locProjCostTrans.TransIdRef           = projCostTrans.TransIdRef;
        locProjCostTrans.AdjRefTransId        = projCostTrans.TransId;

        if (!locProjCostTrans.TransId)
        {
            locProjCostTrans.TransId = ProjParameters::newTransId();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            locProjCostTrans.psaProjOrigTransId = projCostTrans.TransId;
        }

        locProjCostTrans.TransactionOrigin = projCostTrans.TransactionOrigin;

        return locProjCostTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>