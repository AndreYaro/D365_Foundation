<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableType_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesTableType))]
public final class SalesTableType_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a sales order record has been inserted.
    /// </summary>
    public void inserted()
    {
        next inserted();

        if (!CustFormletterParameters::find().AttachFreeNotesDirectly_IT)
        {
            SalesTable salesTable = this.parmSalesTable();
            FreeNotesTable_IT::insertDocumentRef(salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a sales order record has been updated.
    /// </summary>
    /// <param name = "_salesTableOrig">The original line state.</param>
    public void updated(SalesTable _salesTableOrig)
    {
        next updated(_salesTableOrig);

        if (!CustFormletterParameters::find().AttachFreeNotesDirectly_IT)
        {
            SalesTable salesTable = this.parmSalesTable();
            SalesTable salesTable_Orig = _salesTableOrig;
            boolean languageMatches = salesTable_Orig.LanguageId == salesTable.LanguageId;
            boolean accountMatches = salesTable_Orig.CustAccount == salesTable.CustAccount;

            if (!languageMatches || !accountMatches)
            {
                FreeNotesTable_IT::updateDocumentRef(salesTable);

                if (!languageMatches && accountMatches)
                {
                    //If language is changed, there's a cascading update of Sales lines' notes.
                    //If Customer account is changed, this update has already been executed.
                    SalesLine salesLine;
                    while select salesLine
                        where salesLine.salesId == salesTable.salesId
                    {
                        FreeNotesTable_IT::updateDocumentRef(salesLine);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTableType_Post_modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs additional modifications for related <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(SalesTableType), methodStr(SalesTableType, modifiedField))]
    public static void SalesTableType_Post_modifiedField(XppPrePostArgs _args)
    {
        SalesTableType salesTableType = _args.getThis();
        FieldId fieldId = _args.getArg('_fieldId');
        TableId tableId = _args.getArg('_tableId');

        if (fieldId
            && tableId
            && tableId == tableNum(SalesTable)
            && salesTableType)
        {
            switch (fieldId)
            {
                case fieldnum(SalesTable, DlvReason):
                    if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
                    {
                        salesTableType.modifiedDlvReason(salesTableType);
                    }

                    break;

                case fieldnum(SalesTable, IntentLetterId_IT):
                    if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
                    {
                        salesTableType.modifiedIntentLetterId_IT(salesTableType);
                    }

                    break;

                case fieldnum(SalesTable, EximPorts_IN):
                    if (TaxParameters::isCustomsEnable_IN())
                    {
                        SalesTable salesTableLocal = salesTableType.parmSalesTable();
                        SalesLine salesLine;

                        update_recordset salesLine
                            setting EximPorts_IN = salesTableLocal.EXIMPorts_IN
                            where salesLine.SalesId == salesTableLocal.SalesId;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTableType_Post_updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs additional modifications for related <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(SalesTableType), methodStr(SalesTableType, updated))]
    public static void SalesTableType_Post_updated(XppPrePostArgs _args)
    {
        SalesTableType salesTableType = _args.getThis();
        SalesTable salesTable_orig = _args.getArg('_salesTableOrig');

        if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance())
            && salesTableType
            && salesTable_orig)
        {
            SalesTable salesTable = salesTableType.parmSalesTable();
            NoYes forFree = SalesTable::invoiceForFree_IT(salesTable);

            // updates "for free" order lines
            if (forFree != SalesTable::invoiceForFree_IT(salesTable_Orig))
            {
                SalesLine salesLine;

                update_recordset salesLine
                    setting GoodsForFree_IT = forFree
                    where salesLine.SalesId == salesTable.SalesId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        next initValue();

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            salesTable.CommissionType_IT = CustParameters::find().CommissionType_IT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIntentLetterId_IT</Name>
				<Source><![CDATA[
    private void modifiedIntentLetterId_IT(SalesTableType _salesTableType)
    {
        SalesTable salesTable = _salesTableType.parmSalesTable();

        if (salesTable.IntentLetterId_IT)
        {
            if (CustIntentLetter_IT::findInternalId(salesTable.IntentLetterId_IT).Status == IntentLetterStatus_IT::Open)
            {
                _salesTableType.setTaxGroup(CustParameters::find().UsualExporterExemptionTaxGroup_IT);
                info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
            }
        }
        else
        {
            _salesTableType.setTaxGroup(salesTable.custTable_InvoiceAccount().TaxGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDlvReason</Name>
				<Source><![CDATA[
    private void modifiedDlvReason(SalesTableType _salesTableType)
    {

        SalesTable salesTable = _salesTableType.parmSalesTable();
        NumberSequenceGroupId numberSequenceGroupIdOrig = salesTable.NumberSequenceGroup;
        SalesTable::initFreeSales_IT(salesTable);

        if (salesTable.InvoiceAccount == salesTable.CustAccount || !DlvReason::find(salesTable.DlvReason).InvoiceAccount_IT)
        {
            salesTable.NumberSequenceGroup = numberSequenceGroupIdOrig;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>