<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffJournalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>SettlementWriteOffJournalProcessor</c> class generates ledger journal payment headers and lines for settlement write off.
/// One payment journal line is generated per company context.
/// The remainder of each associated invoice is marked against the new payment line.
/// The write-off amounts are assigned to the ledger accounts specified in the customer or vendor parameters.
/// </summary>
[ExportInterfaceAttribute()]
internal abstract class SettlementWriteOffJournalProcessor
{
    protected SettlementWriteOffJournalContract journalContract;
    protected SettlementWriteOffAdjustment settlementWriteOffAdjustment;
    protected SettlementWriteOffCalculatedTransactions settlementWriteOffCalculatedTransactions;
    protected SettlementWriteOffJournalLineProcessor journalLineProcessor;
    protected SettlementWriteOffDefaults defaults;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processWriteOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal header and line information for settlement write off.
    /// </summary>
    /// <param name = "_journalContract">The settlement journal contract.</param>
    /// <param name = "_settlementWriteOffCalculatedTransactions">The set of transactions involved in write off.</param>
    /// <returns>The journal header id.</returns>
    internal LedgerJournalId processWriteOff(
        SettlementWriteOffJournalContract _journalContract,
        SettlementWriteOffCalculatedTransactions _settlementWriteOffCalculatedTransactions)
    {
        ttsbegin;

        this.initForCreateJournalData(_journalContract, _settlementWriteOffCalculatedTransactions);
        this.updateSpecTransBalances();
        this.suppressCashDiscountsForWriteOffDocuments();

        LedgerJournalId ledgerJournalId = this.findOrCreateJournalHeader();

        this.createJournalLines(ledgerJournalId);
        this.createRelatedVoucherLinkForJournalLines(ledgerJournalId);
        this.finalizeJournal(ledgerJournalId);

        ttscommit;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementWriteOffDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the module-specific defaults for use in calculation.
    /// </summary>
    /// <param name = "_defaults">The module defaults.</param>
    /// <returns>The module defaults.</returns>
    internal SettlementWriteOffDefaults parmSettlementWriteOffDefaults(SettlementWriteOffDefaults _settlementWriteOffDefaults = defaults)
    {
        defaults = _settlementWriteOffDefaults;
        return defaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecTransBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the balances on existing <c>SpecTrans</c> records with the adjusted balances
    /// calculated for the potential write off.
    /// </summary>
    internal protected void updateSpecTransBalances()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>suppressCashDiscountsForWriteOffDocuments</Name>
				<Source><![CDATA[
    private void suppressCashDiscountsForWriteOffDocuments()
    {
        SpecTransWriteOffTmp specTransWriteOffTmp = settlementWriteOffCalculatedTransactions.getWriteOffAdjustmentTransactions();
        SpecTrans SpecTrans;
        container legalEntities = settlementWriteOffCalculatedTransactions.getAdjustmentLegalEntities();

        for (int i = 1; i <= conLen(legalEntities); i++)
        {
            if (defaults.getModuleCustVend() == ModuleCustVend::Cust)
            {
                CustTransOpen custTransOpen;

                update_recordset custTransOpen
                    setting UseCashDisc = UseCashDisc::Never
                    exists join specTransWriteOffTmp
                        where custTransOpen.TableId == specTransWriteOffTmp.RefTableId
                            && custTransOpen.RecId == specTransWriteOffTmp.RefRecId
                            && specTransWriteOffTmp.RefCompany == conPeek(legalEntities, i);
            }
            else if (defaults.getModuleCustVend() == ModuleCustVend::Vend)
            {
                VendTransOpen vendTransOpen;

                update_recordset vendTransOpen
                    setting UseCashDisc = UseCashDisc::Never
                    exists join specTransWriteOffTmp
                        where vendTransOpen.TableId == specTransWriteOffTmp.RefTableId
                            && vendTransOpen.RecId == specTransWriteOffTmp.RefRecId
                            && specTransWriteOffTmp.RefCompany == conPeek(legalEntities, i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the journal header and line data for this implementation.
    /// </summary>
    /// <returns>The journal header id.</returns>
    internal protected abstract LedgerJournalId findOrCreateJournalHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    private void createJournalLines(LedgerJournalId _journalNum)
    {
        container legalEntities = settlementWriteOffCalculatedTransactions.getAdjustmentLegalEntities();

        for (int i = 1; i <= conLen(legalEntities); i++)
        {
            LedgerJournalTrans createdPaymentLine = journalLineProcessor.createJournalLine(
                journalContract,
                _journalNum,
                conPeek(legalEntities, i));

            this.markJournalLineForSettlement(createdPaymentLine);

            journalLineProcessor.setPaymentLineAmount(createdPaymentLine, settlementWriteOffAdjustment);

            journalLineProcessor.setModuleSpecificFields(journalContract, createdPaymentLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelatedVoucherLinkForJournalLines</Name>
				<Source><![CDATA[
    private void createRelatedVoucherLinkForJournalLines(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerTransVoucherLink voucherLink;
        boolean first = true;
        RecId voucherGroupId;

        while select ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalNum
        {
            if (first)
            {
                voucherGroupId = LedgerTransVoucherLink::findOrCreateParentVoucherLink(
                    ledgerJournalTrans.Voucher,
                    ledgerJournalTrans.TransDate,
                    ledgerJournalTrans.Company).RecId;

                first = false;
            }
            else
            {
                voucherLink.clear();
                voucherLink.VoucherGroupId = voucherGroupId;
                voucherLink.Voucher = ledgerJournalTrans.Voucher;
                voucherLink.TransDate = ledgerJournalTrans.TransDate;
                voucherLink.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalize the created journal header and line data.
    /// </summary>
    /// <param name = "_journalNum">The journal header id.</param>
    internal protected abstract void finalizeJournal(LedgerJournalId _journalNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForCreateJournalData</Name>
				<Source><![CDATA[
    private void initForCreateJournalData(SettlementWriteOffJournalContract _journalContract, SettlementWriteOffCalculatedTransactions _settlementWriteOffCalculatedTransactions)
    {
        journalContract = _journalContract;
        settlementWriteOffCalculatedTransactions = _settlementWriteOffCalculatedTransactions;

        journalLineProcessor = SettlementWriteOffJournalLineProcessorFactory::constructJournalLineProcessor(defaults);
        settlementWriteOffAdjustment = SettlementWriteOffAdjustment::newFromCurrency(journalContract.parmAdjustmentCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markJournalLineForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks all reference lines in the payment journal line's company context for settlement.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The newly created journal line to mark for settlement in a company context.</param>
    /// <remarks>
    /// Any document from the SpecTrans snapshot in the legal entity which retains an open amount will be processed for write off.
    /// </remarks>
    private void markJournalLineForSettlement(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTransManager writeOffSpecTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);

        changecompany (_ledgerJournalTrans.Company)
        {
            CustVendTransOpen custVendTransOpen = CustVendTransOpen::getEmptyTableBuffer(defaults.getModuleCustVend());
            CustVendTrans custVendTrans = CustVendTrans::getEmptyTableBuffer(defaults.getModuleCustVend());
            SpecTransWriteOffTmp specTransWriteOffTmp = settlementWriteOffCalculatedTransactions.getWriteOffAdjustmentTransactions();

            CustVendOpenTransManager custVendOpenTransManager = CustVendOpenTransManager::construct(_ledgerJournalTrans);

            // Neither the SpecTrans record nor the open balance are guaranteed to exist during journal creation.
            // We rely on the snapshot of SpecTrans from the potential calculation to find remaining open transactions.
            while select custVendTransOpen
                join CurrencyCode from custVendTrans
                    where custVendTransOpen.RefRecId == custVendTrans.RecId
                join specTransWriteOffTmp
                    where custVendTransOpen.DataAreaId == specTransWriteOffTmp.RefCompany
                        && custVendTransOpen.TableId == specTransWriteOffTmp.RefTableId
                        && custVendTransOpen.RecId == specTransWriteOffTmp.RefRecId
            {
                AmountCur settleAmountInTransactionCurrency = writeOffSpecTransManager.findUnmarkedAmountForRef(
                    custVendTransOpen.AmountCur,
                    specTransWriteOffTmp.RefCompany,
                    specTransWriteOffTmp.RefTableId,
                    specTransWriteOffTmp.RefRecId);

                if (settleAmountInTransactionCurrency)
                {
                    writeOffSpecTransManager.insert(
                        specTransWriteOffTmp.RefCompany,
                        specTransWriteOffTmp.RefTableId,
                        specTransWriteOffTmp.RefRecId,
                        settleAmountInTransactionCurrency,
                        custVendTrans.CurrencyCode);

                    AmountCur settleAmountInPaymentCurrency = custVendOpenTransManager.convertAmountTransCurToAmountPaymCur(custVendTransOpen, settleAmountInTransactionCurrency);

                    settlementWriteOffAdjustment.addAdjustmentAmount(_ledgerJournalTrans.Company, settleAmountInPaymentCurrency);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>