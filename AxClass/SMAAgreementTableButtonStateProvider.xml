<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaAgreementTableButtonStateProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SMAAgreementTableButtonStateProvider</c> class provides the set of rules to manage behavior
///    of the buttons on service agreement list page and task form.
/// </summary>
/// <remarks>
///    This class implements the <c>ButtonStateProvider</c> interface.
/// </remarks>
class SmaAgreementTableButtonStateProvider implements ButtonStateProvider
{
    SMAAgreementTable   agreementTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleExistRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the buffer is not empty.
    /// </summary>
    /// <returns>
    ///    true if the buffer is not empty; otherwise, false.
    /// </returns>
    public boolean checkRuleExistRecord()
    {
        return agreementTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleLineServicePeriodic_Create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates rules for the <c>LineServicePeriodic_Create</c> menu item.
    /// </summary>
    /// <returns>
    /// true if the rules are valid; otherwise, false.
    /// </returns>
    public boolean checkRuleLineServicePeriodic_Create()
    {
        return this.hasEmptyTemplateGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleLineServicePeriodic_Transfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates rules for the <c>LineServicePeriodic_Transfer</c> menu item.
    /// </summary>
    /// <returns>
    /// true if the rules are valid; otherwise, false.
    /// </returns>
    public boolean checkRuleLineServicePeriodic_Transfer()
    {
        return this.hasEmptyTemplateGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleProjSalesPriceRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ProjSalesPriceRevenue</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if the rules are valid; otherwise, false.
    /// </returns>
    public boolean checkRuleProjSalesPriceRevenue()
    {
        ProjTable       projTable;
        ProjStatusType  projStatusType;
        boolean         ret = false;

        if (agreementTable)
        {
            projTable = ProjTable::find(agreementTable.ProjId);
            projStatusType = projTable.status();

            ret = projStatusType.ctrlProjSalesPriceRevenue();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAServiceOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>SMAServiceOrderTable</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if the rules are valid; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAServiceOrderTable()
    {
        return agreementTable && agreementTable.TemplateGroupId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAServicePeriodic_Cancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>SMAServicePeriodic_Cancel</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAServicePeriodic_Cancel()
    {
        return agreementTable && agreementTable.TemplateGroupId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAServicePeriodic_Create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>SMAServicePeriodic_Create</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if rules are valid; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAServicePeriodic_Create()
    {
        return    agreementTable
               && agreementTable.TemplateGroupId == ''
               && agreementTable.Suspended == NoYes::No
               && (    !agreementTable.EndDate
                    || agreementTable.EndDate > DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAServicePeriodic_Delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rule for the <c>SMAServicePeriodic_Delete</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAServicePeriodic_Delete()
    {
        return agreementTable && agreementTable.TemplateGroupId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAServicePeriodic_Transfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>SMAServicePeriodic_Transfer</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAServicePeriodic_Transfer()
    {
        return agreementTable && agreementTable.TemplateGroupId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the advanced caching.
    /// </summary>
    void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    String identifying the rule for which advanced caching is to be performed.
    /// </param>
    /// <remarks>
    ///    This method is called by the <c>FormButtonManager</c> on the rule class that implements the
    ///    <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEmptyTemplateGroupId</Name>
				<Source><![CDATA[
        private boolean hasEmptyTemplateGroupId()
    {
        return agreementTable && agreementTable.TemplateGroupId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets form data sources.
    /// </summary>
    /// <param name="datasources1">
    ///    The first form data source.
    /// </param>
    /// <param name="datasources2">
    ///    The second form data source; optional.
    /// </param>
    /// <param name="datasources3">
    ///    The third form data source; optional.
    /// </param>
    /// <param name="datasources4">
    ///    The fourth form data source; optional.
    /// </param>
    /// <param name="datasources5">
    ///    The fifth form data source; optional.
    /// </param>
    void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        agreementTable = datasources1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>