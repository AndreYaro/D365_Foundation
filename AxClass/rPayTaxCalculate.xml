<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class rPayTaxCalculate
{
    RHRMEmplTable           emplTable;
    RHRMPayMainEmplId       emplId;
    RPayTaxIncomeTable      rPayTaxIncomeTable;
    RPayTaxDeductionTable   rPayTaxDeductionTable;
    RPayTaxIncomeGroupTable rPayTaxIncomeGroupTable;
    container               conTaxSumPrev;
    RPayParameters          rPayParameters;
    RPayTaxParameters       rPayTaxParameters;
    RPayRateTable           nonResidentStatusRateTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxDeduct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract RPayAmount calcTaxDeduct(ReportPeriod_RU _payPeriod)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxDeductionCurrent</Name>
				<Source><![CDATA[
    #RpayModuleName
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container calcTaxDeductionCurrent(RpayTaxDeductionCode _deductionCode,
                                             ReportPeriod_RU      _payPeriod        = rPayParameters.PayPeriod,
                                             RPayRateCriterion    _incomeCurrent    = 0,
                                             RpayTaxIncomeCode    _incomeCode       = 0,
                                             RHRMFamilyRecId      _familyRecId      = 0,
                                             Counter              _childCounter     = 0)
    {
        RPayAmount              deductionAmount,
                                deductionAmountRefundable,
                                incomeTotal,
                                incomeManual;
        RPayTaxDeductionTable   rpayTaxDeductionTableLocal =  RPayTaxDeductionTable::find(_deductionCode);
        RPayCalculate_Tax       payCalculate;
        container               conIncomeTotal;
        ReportPeriod_RU         periodStart;
        RPayEmplTax             emplTaxLocal;
        RPayRateCallContext     rateContext;
        RHRMPersonnelNumberId   personId = emplTable.personTable().PersonnelNumber;

        emplTaxLocal  = RPayEmplTax::construct(emplId, RPayParameters::payPeriod(emplTable.EmployeeId));
        if (!emplTaxLocal.useLastTaxStatus())
            emplTaxLocal  = RPayEmplTax::construct(emplId, _payPeriod);

        if (emplTaxLocal.taxStatus() != RPayEmplTaxStatus::Resident)
        {
            return [0, 0];
        }

        incomeTotal = 0;

        if (rpayTaxDeductionTableLocal.RpayPeriodFrequence == RPayRatePeriodFrequency::Unlimeted ||
            rpayTaxDeductionTableLocal.RpayPeriodFrequence == RPayRatePeriodFrequency::Year)
        {
            rateContext = RPayRateCallContext::construct(_payPeriod, emplTable.EmployeeId);
            rateContext.parmPersonId(personId);
            if (rpayTaxDeductionTableLocal.RpayRateCodeEmpl)
            {
                periodStart = RPayRateObj::constructFromRateCode(rpayTaxDeductionTableLocal.RpayRateCodeEmpl, rateContext).appliedDate();
            }

            if (! periodStart)
            {
                periodStart = RPayController::getFirstPeriodFrequency(_payPeriod,
                                                                      rpayTaxDeductionTableLocal.RpayPeriodFrequence,
                                                                      rpayTaxDeductionTableLocal.RpayRateCodeEmpl);

                if (!periodStart && rpayTaxDeductionTableLocal.RpayPeriodFrequence != RPayRatePeriodFrequency::Unlimeted)
                {
                    return [deductionAmount, rpayTaxDeductionTableLocal.TaxRefundAllowed ? deductionAmount : 0];
                }
            }
        }
        else
        {
            periodStart = endmth(dateStartYr(_payPeriod));
        }

        conIncomeTotal = RPayTaxEmplSum::getTaxSum(emplId,
                                                   rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                   periodStart,
                                                   endmth(prevMth(_payPeriod))) ;

        incomeManual = RPayTaxEmplSum::getNetIncomeManual(emplId,rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,_payPeriod,NoYes::Yes);
        incomeTotal  = conPeek(conIncomeTotal,1) - conPeek(conIncomeTotal,3) + incomeManual + _incomeCurrent;

        if (! rpayTaxDeductionTableLocal.RpayRateCodeEmpl)
        {
            if (rpayTaxDeductionTableLocal.RpaySequence)
            {
                payCalculate = new RPayCalculate_Tax(RPayModuleTable::find(#ModuleNameTax));
                payCalculate.setSourceTable(emplTable);
                payCalculate.setSeqTable(RPaySeqTable::find(rpayTaxDeductionTableLocal.RpaySequence));
                payCalculate.payPeriod(_payPeriod);
                payCalculate.setInitValue(incomeTotal);
                payCalculate.setTaxDeductionTable(rpayTaxDeductionTableLocal);
                payCalculate.setIncomeTable(RPayTaxIncomeTable::find(_incomeCode));
                payCalculate.setFamilyRecId(_familyRecId);
                payCalculate.parmChildOrderNum(_childCounter);
                payCalculate.calcSequence();
                deductionAmount = payCalculate.getCurrentValue();
            }
            else
            {
                rateContext = RPayRateCallContext::construct(_payPeriod, emplId);
                rateContext.parmCriterion(incomeTotal);
                rateContext.parmPersonId(personId);
                deductionAmount = RPayRateTable::find(rpayTaxDeductionTableLocal.RpayRateCodeValue).getValue(rateContext);
            }
        }
        else
        {
            rateContext = RPayRateCallContext::construct(_payPeriod, emplId);
            rateContext.parmCriterion(incomeTotal);
            rateContext.parmPersonId(personId);

            if (_deductionCode == RPayRateTable::find(rpayTaxDeductionTableLocal.RpayRateCodeEmpl).getValue(rateContext))
            {
                if (rpayTaxDeductionTableLocal.RpaySequence)
                {
                    payCalculate = new RPayCalculate_Tax(RPayModuleTable::find(#ModuleNameTax));
                    payCalculate.setSourceTable(emplTable);
                    payCalculate.setSeqTable(RPaySeqTable::find(rpayTaxDeductionTableLocal.RpaySequence));
                    payCalculate.payPeriod(_payPeriod);
                    payCalculate.setInitValue(incomeTotal);
                    payCalculate.setTaxDeductionTable(rpayTaxDeductionTableLocal);
                    payCalculate.setIncomeTable(RPayTaxIncomeTable::find(_incomeCode));
                    payCalculate.setFamilyRecId(_familyRecId);
                    payCalculate.parmChildOrderNum(_childCounter);
                    payCalculate.calcSequence();
                    deductionAmount = payCalculate.getCurrentValue();
                }
                else
                {
                    deductionAmount = RPayRateTable::find(rpayTaxDeductionTableLocal.RpayRateCodeValue).getValue(rateContext);
                }
            }
        }

        if (rpayTaxDeductionTableLocal.ActOnRelative)
            return [deductionAmount, 0];

        if ((rpayTaxDeductionTableLocal.RpayPeriodFrequence  == RPayRatePeriodFrequency::Unlimeted ||
             rpayTaxDeductionTableLocal.RpayPeriodFrequence  == RPayRatePeriodFrequency::Year)     &&
             rpayTaxDeductionTableLocal.RpayTaxDeductionType == RpayTaxDeductionType::Standard)
        {
            incomeTotal -= RPayTaxEmplSum::getEffectiveDeductTaxCodeAmount(emplId,
                                                                           rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                                           _deductionCode,
                                                                           periodStart,
                                                                           _payPeriod);
            deductionAmount = incomeTotal > 0 ? any2real(min(deductionAmount, incomeTotal)) : 0.0;
        }

        if (rpayTaxDeductionTableLocal.RpayPeriodFrequence != RPayRatePeriodFrequency::None &&
            rpayTaxDeductionTableLocal.RpayPeriodFrequence != RPayRatePeriodFrequency::Month)
        {
            periodStart = RPayController::getFirstPeriodFrequency(_payPeriod,
                                                                  rpayTaxDeductionTableLocal.RpayPeriodFrequence,
                                                                  rpayTaxDeductionTableLocal.RpayRateCodeValue);
            conIncomeTotal = conNull();
            conIncomeTotal = RPayTaxEmplSum::getTaxCodeSum(emplId,
                                                           rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                           _deductionCode,
                                                           periodStart,
                                                           endmth(prevMth(_payPeriod)));
            deductionAmount = max(0,deductionAmount - conPeek(conincomeTotal,1));
        }

        if (rpayTaxDeductionTableLocal.TaxRefundAllowed)
        {
            conIncomeTotal = RPayTaxEmplSum::getTaxCodeSum(emplId,
                                                           rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                           _deductionCode,
                                                           endmth(dateStartYr(_payPeriod)),
                                                           endmth(prevMth(_payPeriod)));

            deductionAmountRefundable = conPeek(conIncomeTotal, 1) + deductionAmount;
        }

        if (rpayTaxDeductionTableLocal.ReverseBorrowingGain && _payPeriod >= dateStartYr(RPayParameters::payPeriod()))
        {
            this.createReversalTrans(_payPeriod);
        }

        return [deductionAmount, deductionAmountRefundable];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxDiscountValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount calcTaxDiscountValue(RpayTaxIncomeCode _incomeCode,
                                           RPayAmount        _incomeValue,
                                           RPayCounterUnit   _fund,
                                           ReportPeriod_RU   _payPeriod = rPayParameters.PayPeriod,
                                           RHRMFamilyRecId   _familyRecId = 0)
    {
        RPayTaxIncomeTable    rpayTaxIncomeTableLocal =  RPayTaxIncomeTable::find(_incomeCode);
        container             con = [0,0],conManual = [0,0];
        RPayAmount            discountValue,incomeTotalValue, dedStandardRefundable;
        RPayTaxDeductionTable rPayTaxDeductionTableLocal =  RPayTaxDeductionTable::find(rpayTaxIncomeTableLocal.RpayTaxDeductionCode);
        ReportPeriod_RU       periodStart;
        RPayEmplTax           emplTaxLocal = RPayEmplTax::construct(emplId, _payPeriod);

        if (!rPayTaxIncomeGroupTable.OtherDeductions)
        {
            return 0;
        }

        if (rpayTaxIncomeTableLocal.RpayTaxDeductionCode && _incomeValue)
        {
            [discountValue, dedStandardRefundable] = this.calcTaxDeductionCurrent(rpayTaxIncomeTableLocal.RpayTaxDeductionCode, _payPeriod, _incomeValue, rpayTaxIncomeTableLocal.RpayTaxIncomeCode, _familyRecId);

            if (rPayTaxDeductionTableLocal.ActOnRelative)
            {
                periodStart = dateNull();

                if (rPayTaxDeductionTableLocal.RpayPeriodFrequence == RPayRatePeriodFrequency::None)
                {
                    con = RPayTaxEmplSum::getTaxCodeSum(emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                        _incomeCode,periodStart,endmth(prevMth(_payPeriod)),false,_familyRecId);

                    conManual = RPayTaxEmplSum::getTaxCodeSum(emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                              _incomeCode,endmth(_payPeriod),endmth(_payPeriod),true,_familyRecId);

                    if (conPeek(con, 2) || conPeek(conManual, 2))
                    {
                        return 0;
                    }
                }
            }

            if (rPayTaxDeductionTableLocal.RpayPeriodFrequence != RPayRatePeriodFrequency::None &&
               rPayTaxDeductionTableLocal.RpayPeriodFrequence != RPayRatePeriodFrequency::Month)
            {
                periodStart = RPayController::getFirstPeriodFrequency(_payPeriod,
                                                                      rPayTaxDeductionTableLocal.RpayPeriodFrequence,
                                                                      rPayTaxDeductionTableLocal.RpayRateCodeValue);
                if (periodStart)
                {
                    con = RPayTaxEmplSum::getTaxCodeSum(emplId,rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                        _incomeCode,periodStart,endmth(prevMth(_payPeriod)),false,_familyRecId);
                    conManual = RPayTaxEmplSum::getTaxCodeSum(emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                              _incomeCode,endmth(_payPeriod),endmth(_payPeriod),true,_familyRecId);
                }
            }

            incomeTotalValue = conPeek(con,1) + conPeek(conManual,1) + _incomeValue;
            if (incomeTotalValue > 0)
            {
                discountValue = min(discountValue,incomeTotalValue);
            }
            else
            {
                discountValue = max(-discountValue,incomeTotalValue);
            }
            discountValue = discountValue - (conPeek(con,2) + conPeek(conManual,2));
        }

        return discountValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxIncomeCurrent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container calcTaxIncomeCurrent(RpayTaxIncomeCode _incomeCode,
                                          RPayCounterUnit   _fund,
                                          ReportPeriod_RU   _payPeriod = rPayParameters.PayPeriod,
                                          RHRMFamilyRecId   _familyRecId = 0)
    {
        RPayTrans          rPayTrans;
        RPayTable          rPayTable;
        RHRMEmplTable      emplTableLocal;
        RPayFundMember     fundMember;
        RPayAmount         discountValue,incomeValue;

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod == _payPeriod &&
                  rPayTrans.PayPeriod <= RPayParameters::payPeriod(emplId) &&
                  (rPayTrans.FamilyRecId == _familyRecId || !_familyRecId)
        exists join rPayTable
            where rPayTable.PayCtype          == rPayTrans.PayCtype &&
                  rPayTable.RpayTaxIncomeCode == _incomeCode
            exists join fundMember
                where fundMember.PayCostType == rPayTable.PayCtype &&
                      fundMember.CounterUnit == _fund
        exists join emplTableLocal
            where emplTableLocal.EmployeeId        == rPayTrans.Emplid &&
                  (emplTableLocal.PayMainEmplId    == emplId           ||
                   emplTableLocal.EmployeeId       == emplId);

        incomeValue   = rPayTrans.Amount;
        discountValue = this.calcTaxDiscountValue(_incomeCode,incomeValue, _fund, _payPeriod,_familyRecId);

        return [incomeValue,discountValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxIncomeCurrentCorrected</Name>
				<Source><![CDATA[
    //calculation income only for basis amount
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container calcTaxIncomeCurrentCorrected(RpayTaxIncomeCode _incomeCode,
                                                   RPayCounterUnit   _fund,
                                                   ReportPeriod_RU   _payPeriod         = rPayParameters.PayPeriod,
                                                   ReportPeriod_RU   _correctedPeriod   = rPayParameters.PayPeriod,
                                                   RHRMFamilyRecId   _familyRecId       = 0)
    {
        RPayTrans          rPayTrans;
        RPayTable          rPayTable;
        RHRMEmplTable      emplTableLocal;
        RPayFundMember     fundMember;
        RPayAmount         discountValue,incomeValue;

        select sum(Amount) from rPayTrans
            where rPayTrans.CorrectedPeriod == _correctedPeriod &&
                  rPayTrans.PayPeriod       <= RPayParameters::payPeriod(emplId) &&
                  (rPayTrans.FamilyRecId    == _familyRecId || !_familyRecId)
        exists join rPayTable
            where rPayTable.PayCtype          == rPayTrans.PayCtype &&
                  rPayTable.RpayTaxIncomeCode == _incomeCode
            exists join fundMember
                where fundMember.PayCostType == rPayTable.PayCtype &&
                      fundMember.CounterUnit == _fund
        exists join emplTableLocal
            where emplTableLocal.EmployeeId        == rPayTrans.Emplid &&
                  (emplTableLocal.PayMainEmplId    == emplId           ||
                   emplTableLocal.EmployeeId       == emplId);

        incomeValue   = rPayTrans.Amount;
        discountValue = this.calcTaxDiscountValue(_incomeCode,incomeValue, _fund, _payPeriod,_familyRecId);

        return [incomeValue,discountValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalTrans</Name>
				<Source><![CDATA[
    #RpayModuleName
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createReversalTrans(ReportPeriod_RU _payPeriod)
    {
        ReportPeriod_RU                 currentPeriod, dateStart, dateEnd;
        RpayTaxSumCalc                  rpayTaxSumCalc = new RpayTaxSumCalc();
        ;

        dateStart = endmth(dateStartYr(_payPeriod));

        if (dateStart < dateEnd)
        {
            for (currentPeriod = dateStart; currentPeriod <= dateEnd; currentPeriod = endmth(nextMth(currentPeriod)))
            {
                rpayTaxSumCalc.runTax(currentPeriod, emplId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(RPayTaxIncomeGroupTable _incomeGroupTable, RHRMEmplId _emplId)
    {
        emplId  = _emplId;

        emplTable                   = RHRMEmplTable::find(emplId);
        rPayParameters              = RPayParameters::find();
        rPayTaxParameters           = RPayTaxParameters::find();
        nonResidentStatusRateTable  = RPayRateTable::find(rPayTaxParameters.NonResidentRateCode);
        rPayTaxIncomeGroupTable     = _incomeGroupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>redemptionAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount redemptionAmount(ReportPeriod_RU _payPeriodCurrent)
    {
        RPayAmount      retAmount;
        ReportPeriod_RU periodFrom, periodTo;
        container       con;

        if (_payPeriodCurrent == endmth(dateStartYr(_payPeriodCurrent)) ||
            RPayTaxParameters::find().ReimbursementType == RPayTaxReimbursementType::ReckoningTax)
        {
            return 0;
        }

        periodFrom = endmth(dateStartYr(_payPeriodCurrent));
        periodTo   = endmth(prevMth(_payPeriodCurrent));

        con = RPayTaxEmplSum::getTaxSum(emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode, periodFrom, periodTo, dateNull(), dateMax(), true);

        retAmount = max(conPeek(con, 4) - conPeek(con, 5) - conPeek(con, 11) + conPeek(con, 8), 0);

        con = RPayTaxEmplSum::getTaxSum(emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode, _payPeriodCurrent, _payPeriodCurrent, dateNull(), dateMax(), true);

        retAmount -= min(conPeek(con, 5), 0);

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>redemptionAmountSumType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container redemptionAmountSumType(ReportPeriod_RU _payPeriodCurrent)
    {
        RPayTaxIncomeGroupTable taxIncomeGroupTableLinked;
        RPayFundMember          fundMemberLinked, fundMember;
        ReportPeriod_RU         periodFrom, periodTo;
        RPayEmplTax             emplTaxPrev;

        container       con;
        RPayAmount      retAmount;

        if (_payPeriodCurrent == endmth(dateStartYr(_payPeriodCurrent)) ||
            RPayTaxParameters::find().ReimbursementType == RPayTaxReimbursementType::ReckoningTax)
        {
            return con;
        }

        periodFrom      = endmth(dateStartYr(_payPeriodCurrent));
        periodTo        = endmth(prevMth(_payPeriodCurrent));
        emplTaxPrev     = RPayEmplTax::construct(emplId, periodTo);

        retAmount = this.redemptionAmount(_payPeriodCurrent);

        if (emplTaxPrev.taxStatus() == rPayTaxIncomeGroupTable.EmplTaxStatus)
        {
            return [rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode, retAmount];
        }
        else
        {
            select firstonly RpayTaxIncomeGroupCode from taxIncomeGroupTableLinked
                where taxIncomeGroupTableLinked.EmplTaxStatus == emplTaxPrev.taxStatus()
                    exists join fundMemberLinked
                        where fundMemberLinked.CounterUnit == taxIncomeGroupTableLinked.Fund
                    exists join fundMember
                        where fundMemberLinked.PayCostType == fundMember.PayCostType &&
                              fundMember.CounterUnit       == rPayTaxIncomeGroupTable.Fund;

            return [taxIncomeGroupTableLinked.RpayTaxIncomeGroupCode, retAmount];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayEmplTaxStatus taxStatus(ReportPeriod_RU _payPeriod)
    {
        RPayEmplTax emplTax = RPayEmplTax::construct(emplId, _payPeriod);

        return emplTax.taxStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTaxCalculate construct(RPayTaxIncomeGroupTable _incomeGroupTable, RHRMPayMainEmplId _emplId)
    {
        RPayTaxCalculate rPayTaxCalculate;

        switch (RPayTaxParameters::find().RpayFutureTaxTypeCalc)
        {
            case RpayFutureTaxTypeCalc::NotCalculated:
                rPayTaxCalculate = new RPayTaxCalculate_Standard(_incomeGroupTable, _emplId);
                break;
            case RpayFutureTaxTypeCalc::PayPeriod:
                rPayTaxCalculate = new RPayTaxCalculate_StandardPayPeriod(_incomeGroupTable, _emplId);
                break;
            case RpayFutureTaxTypeCalc::SourceDate:
                rPayTaxCalculate =  new RPayTaxCalculate_StandardSourceDate(_incomeGroupTable, _emplId);
                break;
        }

        return rPayTaxCalculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForHistory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTaxCalculate constructForHistory(RPayTaxIncomeGroupTable _incomeGroupTable, RHRMEmplId _emplId)
    {
        RPayTaxCalculate rPayTaxCalculate;

        switch (RPayTaxParameters::find().RpayFutureTaxTypeCalc)
        {
            case RpayFutureTaxTypeCalc::NotCalculated:
                rPayTaxCalculate = new RPayTaxCalculate_Standard(_incomeGroupTable, _emplId);
                break;
            case RpayFutureTaxTypeCalc::PayPeriod   :
            case RpayFutureTaxTypeCalc::SourceDate  :
                rPayTaxCalculate =  new RPayTaxCalculate_StandardSourceDate(_incomeGroupTable, _emplId);
                break;
        }

        return rPayTaxCalculate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>