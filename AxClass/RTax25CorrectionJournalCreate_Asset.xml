<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25CorrectionJournalCreate_Asset</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Class <c>RTax25CorrectionJournalCreate_Asset</c> used to determine
/// if corrections may be created for fixed asset tax registers and create them.
/// </summary>
class RTax25CorrectionJournalCreate_Asset extends RTax25CorrectionJournalCreate
{
    boolean createAssessed;
    Set     correctedJournalSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCorrectedJournalSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates <c>Set</c> object which contains <c>RTax25RegisterJournalTable</c> records which must be corrected.
    /// </summary>
    /// <remarks>
    ///  For previous years, only final journals selected for correction, i. e. journals which last in year. For current year quaterly journals selected.
    /// </remarks>
    private void calcCorrectedJournalSet()
    {
        RTax25RegisterJournalTable  registerJournalTable, tmpRegisterJournalTable;
        RAssetTrans                 rAssetTrans;
        RAssetTable                 rAssetTable;
        TransLink_RU                transLink;
        FromDate                    fromDate;
        TransDate                   beginningOfYear = mkDate(1, 1, rTax25RegisterJournalTable.FiscalYear);
        ;
    
        if (correctedJournalSet)
        {
            return;
        }
    
        correctedJournalSet = new Set(Types::Record);
    
        if (rTax25RegisterJournalTable.PeriodType == RTax25PeriodType::Year)
        {
            fromDate = mkDate(01, 10, rTax25RegisterJournalTable.FiscalYear);
        }
        else
        {
            fromDate = rTax25RegisterJournalTable.fromDate();
        }
    
        while select TransDate from rAssetTrans
            where rAssetTrans.AssetStandardId == RAssetParameters::find().StandardIdDefault  &&
                  rAssetTrans.TransDate       < fromDate
            join TableId from transLink
                where transLink.AccountingDate >= fromDate            &&
                      transLink.RefTableId     == rAssetTrans.TableId &&
                      transLink.RefSec         == rAssetTrans.RecId
            join TableId from rAssetTable
            where rAssetTable.AccountNum == rAssetTrans.AccountNum  &&
                  rAssetTable.TaxCode                               &&
                 (rAssetTable.AssetType == RAssetType::LandBuilding ||
                  rAssetTable.AssetType == RAssetType::Vehicle      ||
                  rAssetTable.AssetType == RAssetType::Tangible     ||
                  rAssetTable.AssetType == RAssetType::Other)
        {
            while select tmpRegisterJournalTable
                where (tmpRegisterJournalTable.PeriodType         == RTax25PeriodType::Year              ||
                      (tmpRegisterJournalTable.PeriodType         == RTax25PeriodType::Quarter           &&
                       tmpRegisterJournalTable.PeriodNum          == 4))                                 &&
                      tmpRegisterJournalTable.RegisterJournalType == RTax25RegisterJournalType::Asset_RU &&
                      tmpRegisterJournalTable.CorrectedRecId      == 0                                   &&
                      tmpRegisterJournalTable.EndDate             >= rAssetTrans.TransDate               &&
                      tmpRegisterJournalTable.EndDate             <  beginningOfYear                     &&
                     (tmpRegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty ||
                      tmpRegisterJournalTable.AssetTaxType        == RAssetTaxType::AssessedTax)
                notexists join registerJournalTable
                    where registerJournalTable.CorrectedRecId == tmpRegisterJournalTable.RecId &&
                          registerJournalTable.SourceRecId  == rTax25RegisterJournalTable.RecId
    
            {
                correctedJournalSet.add(tmpRegisterJournalTable.data());
            }
    
            while select tmpRegisterJournalTable
                where tmpRegisterJournalTable.PeriodType          == RTax25PeriodType::Quarter           &&
                      tmpRegisterJournalTable.RegisterJournalType == RTax25RegisterJournalType::Asset_RU &&
                      tmpRegisterJournalTable.CorrectedRecId      == 0                                   &&
                      tmpRegisterJournalTable.EndDate             >= rAssetTrans.TransDate               &&
                      tmpRegisterJournalTable.EndDate             >= beginningOfYear                     &&
                      tmpRegisterJournalTable.RecId               != rTax25RegisterJournalTable.RecId    &&
                     (tmpRegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty ||
                      tmpRegisterJournalTable.AssetTaxType        == RAssetTaxType::AssessedTax)
                notexists join registerJournalTable
                    where registerJournalTable.CorrectedRecId == tmpRegisterJournalTable.RecId &&
                          registerJournalTable.SourceRecId    == rTax25RegisterJournalTable.RecId
    
            {
                correctedJournalSet.add(tmpRegisterJournalTable.data());
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>createCorrectionJournals</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates correction journals.
    /// </summary>
    /// <remarks>
    ///  Currently, only journals related to assessed tax created.
    /// </remarks>
    public void createCorrectionJournals()
    {
        if (createAssessed)
        {
            this.createCorrectionJournalsAssessed();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>createCorrectionJournalsAssessed</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates correction journals for assessed tax.
    /// </summary>
    /// <remarks>
    ///  Journals created based on previously calculation map of journals which must be corrected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createCorrectionJournalsAssessed()
    {
        RTax25RegisterJournalTable  registerJournalTable, tmpRegisterJournalTable;
        NumberSeq                   numberSeq;
        SetEnumerator               enumerator;
        ;
    
        if (rTax25RegisterJournalTable.CorrectedRecId)
        {
            return;
        }
    
        this.calcCorrectedJournalSet();
    
        if (!correctedJournalSet.elements())
        {
            return;
        }
    
        ttsBegin;
    
        switch (rTax25RegisterJournalTable.RegisterJournalType)
        {
            case RTax25RegisterJournalType::Asset_RU:
                numberSeq = NumberSeq::newGetNum(RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RTax25RegisterJournalNum_Assessed)));
                break;
            default:
                numberSeq = NumberSeq::newGetNum(RTax25Parameters::numRefRegisterJournalNum());
        }
    
        enumerator = correctedJournalSet.getEnumerator();
    
        while (enumerator.moveNext())
        {
            tmpRegisterJournalTable = enumerator.current();
    
            registerJournalTable.data(tmpRegisterJournalTable);
    
            registerJournalTable.JournalNum          = numberSeq.num();
            registerJournalTable.Name                = strfmt("@SYP4860764", registerJournalTable.PeriodNum, tmpRegisterJournalTable.PeriodType, registerJournalTable.FiscalYear);
            registerJournalTable.AssetTaxType        = RAssetTaxType::AssessedTax;
            registerJournalTable.CorrectedRecId      = tmpRegisterJournalTable.RecId;
            registerJournalTable.SourceRecId         = rTax25RegisterJournalTable.RecId;
            registerJournalTable.Version             = RTax25RegisterJournalTable::lastVersion(tmpRegisterJournalTable.RecId) + 1;
    
            registerJournalTable.insert();
    
            info(strFmt("@SYP4860768", registerJournalTable.JournalNum), "", SysInfoAction_TableField::newBuffer(registerJournalTable));
        }
    
        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>mustCreateCorrectionJournals</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines if any correction journals can be created.
    /// </summary>
    /// <returns>
    ///  True, if journals can be created; otherwise, false.
    /// </returns>
    public boolean mustCreateCorrectionJournals()
    {
        if (!rTax25RegisterJournalTable.CorrectedRecId &&
            (rTax25RegisterJournalTable.AssetTaxType == RAssetTaxType::Empty ||
             rTax25RegisterJournalTable.AssetTaxType == RAssetTaxType::AssessedTax))
        {
            createAssessed = this.mustCreateCorrectionJournalsAssessed();
        }
    
        return createAssessed;
    }
]]></Source>
			</Method>
			<Method>
				<Name>mustCreateCorrectionJournalsAssessed</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines if correction journals on assessed tax can be created.
    /// </summary>
    /// <returns>
    ///  True, if journals can be created; otherwise false.
    /// </returns>
    private boolean mustCreateCorrectionJournalsAssessed()
    {
        if (rTax25RegisterJournalTable.CorrectedRecId)
        {
            return false;
        }
    
        switch (rTax25RegisterJournalTable.RegisterJournalType)
        {
            case RTax25RegisterJournalType::Asset_RU:
                this.calcCorrectedJournalSet();
    
                return correctedJournalSet.elements() != 0;
    
            default:
                return false;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>mustPrompt</Name>
				<Source><![CDATA[
    public boolean mustPrompt()
    {
        return true;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>