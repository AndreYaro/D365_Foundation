<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSPickingList_OrderPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSPickingList_OrderPick</c> class is the helper class for the associated reports.
/// </summary>
/// <remarks>
/// This controller is using print management
/// </remarks>
public class WmsPickingList_OrderPick extends TradeDocumentReportController implements BatchRetryable
{
    InventDimParm                               inventDimVisible;
    WMSPickingRoute                             wmsPickingRoute;
    Object                                      callerObject;
    WmsPickingList_OrderPickContract            rdpContractVar;

    // <GEECZ>
    LogisticsAddressCountryRegionISOCode        isoCountryCode;
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report header title.
    /// </summary>
    /// <param name="_printCopyOriginal">
    /// Print copy or original document; optional.
    /// </param>
    /// <returns>
    /// The report header title.
    /// </returns>
    public str documentTitle(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        return WMSPickingList_OrderPick::reportHeader(_printCopyOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the table buffer.
    /// </summary>
    /// <returns>
    /// The record ID of the table buffer.
    /// </returns>
    protected RecId getRecordId()
    {
        return 0; // The record is transferred through temporary storage
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        SalesPickingListJournalPrint                salesPickingListJournalPrint;
        SalesFormLetterReport_PickingList           salesFormLetterReport;
        InventDimCtrl_Rep_Sales                     inventDimReport;

        printCopyOriginal = this.parmArgs().parmEnum();

        salesFormLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::InventPickList);
        salesFormLetterReport.parmPrintType(printCopyOriginal);

        // Default value for print mgmt. according to enum parameter
        if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            salesFormLetterReport.parmUsePrintMgmtDestinations(true);
        }

        callerObject = this.parmArgs().caller();
        if (callerObject is SalesPickingListJournalPrint)
        {
            salesPickingListJournalPrint = callerObject as SalesPickingListJournalPrint;
            salesFormLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesPickingListJournalPrint.parmPrinterSettingsFormLetterCopy()));
            salesFormLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesPickingListJournalPrint.parmPrinterSettingsFormLetter()));
            salesFormLetterReport.parmUsePrintMgmtDestinations(salesPickingListJournalPrint.parmUsePrintManagement());
        }
        else if (callerObject is InventTransferPrintCommandPick)
        {
            InventTransferPrintCommandPick printCommandPick = callerObject as InventTransferPrintCommandPick;
            salesFormLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(printCommandPick.printerSettings()));
            salesFormLetterReport.parmUsePrintMgmtDestinations(printCommandPick.usePrintManagement());
        }

        wmsPickingRoute = null;

        if (this.parmArgs().record())
        {
            wmsPickingRoute     = this.parmArgs().record() as WMSPickingRoute;
            journalList         = new RecordSortedList(tableNum(WMSPickingRoute));
            journalList.ins(wmsPickingRoute);
        }
        else
        {
            journalList         = this.parmArgs().object() as RecordSortedList;

            if (journalList && journalList.len() > 0)
            {
                journalList.first(wmsPickingRoute);
            }
        }

        if (!wmsPickingRoute)
        {
            throw error("@SYS26348");
        }

        salesFormLetterReport.setPrintMgmtNodeTypeFromTransType(wmsPickingRoute.TransType);
        formLetterReport = salesFormLetterReport;

        // Prepare visibility on inventory dimensions - will be transferred to the contract in modifyContract()
        inventDimReport = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::PickingList);
        inventDimReport.initDimParmVisible();
        if (inventDimReport.isInventDimLine())
        {
            inventDimVisible = inventDimReport.getInventDimVisibility();
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    private WmsPickingList_OrderPickContract parmContract()
    {
        if (!rdpContractVar)
        {
            rdpContractVar = contract as WmsPickingList_OrderPickContract;
        }
        return rdpContractVar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the values of the instance variables.
    /// </summary>
    protected void modifyContract()
    {
        WmsPickingList_OrderPickContract    rdpContract = this.parmContract();
        SRSTmpDataStore                     srsTmpDataStore;

        rdpContract.parmInventDimViewContract().parmInventDimParm(inventDimVisible);
        rdpContract.parmPrintCopyOriginal(printCopyOriginal);
        rdpContract.parmDocumentTitle(WMSPickingList_OrderPick::reportHeader(printCopyOriginal));

        // Pack the class and insert into the temporary store.
        srsTmpDataStore.Value = Global::buf2Con(wmsPickingRoute);
        ttsbegin;
        srsTmpDataStore.insert();
        ttscommit;

        // Set the rec id to contract parameter
        rdpContract.parmPickingRouteId(srsTmpDataStore.RecId);

        if (!this.parmShowDialog())
        {
            // set default values if parameters dialog is not showed
            rdpContract.parmShowRegistered(true);
            rdpContract.parmShowActivated(true);
            rdpContract.parmShowComplete(true);
            rdpContract.parmShowLoaded(true);
            rdpContract.parmShowPicked(true);
            rdpContract.parmShowStaged(true);
            rdpContract.parmShowStarted(true);
            rdpContract.parmShowCancelled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// The overridden method sets the footer text on the contract, and updates it.
    /// </summary>
    protected void outputReport()
    {
        this.parmContract().parmFooterText(formLetterReport.getCurrentPrintSetting().parmIdentificationText());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(wmsPickingRoute);

        do
        {
            if (!wmsPickingRoute)
            {
                throw error("@SYS26348");
            }

            this.initializePrintSettings();

            this.outputReports();
        }
        while (journalList.next(wmsPickingRoute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the print settings.
    /// </summary>
    /// <returns>true if the settings are initialized; otherwise, false.</returns>
    protected boolean initializePrintSettings()
    {
        if (wmsPickingRoute.TransType == InventTransType::Sales && wmsPickingRoute.TransRefId)
        {
            formLetterReport.loadPrintSettings(wmsPickingRoute, SalesTable::find(wmsPickingRoute.TransRefId), CompanyInfo::languageId());
            return true;
        }
        
        if (wmsPickingRoute.TransType == InventTransType::TransferOrderShip && wmsPickingRoute.TransRefId)
        {
            formLetterReport.loadPrintSettings(wmsPickingRoute, InventTransferTable::find(wmsPickingRoute.TransRefId), CompanyInfo::languageId());
            return true;
        }
        
        if (callerObject is MCRPickingWorkBench)
        {
            formLetterReport.loadPrintSettings(wmsPickingRoute, null, CompanyInfo::languageId());
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of a <c>WMSPickingRoute</c> record.
    /// </summary>
    /// <param name="_common">
    /// A <c>WMSPickingRoute</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        wmsPickingRoute = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSPickingList_OrderPick construct()
    {
        return new WMSPickingList_OrderPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>WMSPickingList_OrderPick</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the class.
    /// </param>
    public static void main(Args _args)
    {
        SrsReportRunController          formLetterController = WMSPickingList_OrderPick::construct();
        WMSPickingList_OrderPick        controller;
        SalesPickingListJournalPrint    salesPickingListJournalPrint;

        if (_args.caller() is SalesPickingListJournalPrint)
        {
            salesPickingListJournalPrint = _args.caller() as SalesPickingListJournalPrint;
        }

        controller = formLetterController;
        controller.initArgs(_args, ssrsReportStr(WMSPickingList_OrderPick, Report));

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            controller.kittingParmReportName_delegate(controller);
        }

        controller.parmDialogCaption(WMSPickingList_OrderPick::reportHeader(_args.parmEnum()));

        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report header that is based on the input parameters.
    /// </summary>
    /// <param name="_printCopyOriginal">
    /// The type of print.
    /// </param>
    /// <returns>
    /// A String that contains the report header.
    /// </returns>
    public static str reportHeader(PrintCopyOriginal   _printCopyOriginal)
    {
        str pickingListTxt;

        pickingListTxt = (_printCopyOriginal == PrintCopyOriginal::Copy) ? "@SYS53093" : "@SYS76093";
        return pickingListTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingParmReportName_delegate</Name>
				<Source><![CDATA[
    delegate void kittingParmReportName_delegate(WMSPickingList_OrderPick controller)
    {
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>