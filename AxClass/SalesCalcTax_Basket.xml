<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_Basket</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesCalcTax_Basket
extends     SalesCalcTax_Sales
{
    SalesBasket         salesBasket;
    SalesBasketLine     salesBasketLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    TaxAmountCur calcTax(TradeTotalsBase _salesTotals)
    {
        salesTotals = _salesTotals as SalesTotals_Basket;

        TaxSales_Basket taxSales = TaxSales_Basket::construct(this);
        this.tax(taxSales);

        TaxAmountCur amountCur = taxSales.calc();

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return salesBasket.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        return salesBasketLine.deliveryDate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateMarkup</Name>
				<Source><![CDATA[
    DlvDate deliveryDateMarkup()
    {
        if (salesBasketLine)
            return this.deliveryDate();

        return salesBasket.deliveryDate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    public boolean doTaxGroupExistsForDocument()
    {
        salesBasketLine salesBasketLineLocal;

        select firstOnly RecId from salesBasketLineLocal
            where salesBasketLineLocal.SalesBasketId == salesBasket.SalesBasketId &&
                  salesBasketLineLocal.TaxGroup != '' &&
                  salesBasketLineLocal.TaxItemGroup != '';

        return salesBasketLineLocal.RecId !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscPct   endDisc()
    {
        return salesBasketLine.salesBasket().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(salesBasket.exchRate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(salesBasket.exchRateSecondary(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the tax is included in the item price for the sales document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in the item price; otherwise, false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return salesBasket.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (salesBasketLine)
            return salesBasketLine.defaultDimension();

        return salesBasket.defaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(SalesBasket  _salesBasket, SalesUpdate _specQty)
    {
        super(_salesBasket, _specQty);

        salesBasket = _salesBasket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        if (this.lineQueryRunNext(lineQueryRun))
            salesBasketLine = this.lineQueryRunGet(lineQueryRun);
        else
            salesBasketLine = null;

        this.initCursorMarkup(salesBasketLine.TableId, salesBasketLine.RecId);

        return salesBasketLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccount()
    {
        return salesBasketLine.accountSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccountMarkup()
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item :
                if (salesBasketLine)
                {
                    ledgerAccount = this.operationAccount();
                }
                break;

            case MarkupType::LedgerAccount :
                ledgerAccount = markupTrans.markupTable().parmVendorLedgerDimension();
                break;

            case MarkupType::CustVend :
                ledgerAccount = CustLedgerAccounts::summaryLedgerDimension(salesBasket.invoiceAccount(),salesBasket.postingProfile());
                break;
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsBasketContract::newFromSalesBasket(salesBasket);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    RecId  salesTableRecID()
    {
        return salesBasket.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableTableID</Name>
				<Source><![CDATA[
    TableId  salesTableTableID()
    {
        return salesBasket.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCashDiscPercent</Name>
				<Source><![CDATA[
    DiscPct taxCashDiscPercent()
    {
        return salesTotals.taxCashDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        return salesBasketLine.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        return salesBasketLine.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        return salesBasketLine.taxPcsPrice(this.invoiceDate(), tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty  transQty()
    {
        return salesBasketLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup    transTaxGroup()
    {
        return salesBasketLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup    transTaxItemGroup()
    {
        return salesBasketLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    TradeInventTransId  transTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation  triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return salesBasket.euroTriangulation(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>