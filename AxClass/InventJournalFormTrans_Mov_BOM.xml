<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalFormTrans_Mov_BOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalFormTrans_Mov_BOM extends InventJournalFormTrans_Movement
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        if (this.hasReturnLotId())
        {
            this.journalTrans_DS().allowEdit(false);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editViewModeChanged</Name>
				<Source><![CDATA[
    public void editViewModeChanged(boolean _calledFromViewEditModeTaskHandler = true)
    {
        super(_calledFromViewEditModeTaskHandler);

        if (journalTableData && journalTableData.journalTable())
        {
            if (this.journalTable().isInventBatchJournalRelated())
            {
                this.journalTrans_DS().allowDelete(false);
                this.journalTrans_DS().allowCreate(false);
                InventJournalFormTrans_Mov_BOM::setAllowEditOnAllFields(this.journalTrans_DS(), false);
                formRun.control(formRun.controlId(formControlStr(InventJournalBOM, PdsDispositionCode))).allowEdit(false);
                inventDim_ds.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    public void datasourceCreatePre()
    {
        if (this.hasReturnLotId())
        {
            throw error("@SYS84766");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceDeletePost</Name>
				<Source><![CDATA[
    public void datasourceDeletePost(boolean _research = true)
    {
        super();

        inventJournalTrans.updateAssemblyLineAmounts(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceDeletePre</Name>
				<Source><![CDATA[
    public void datasourceDeletePre()
    {
        if (this.hasReturnLotId())
        {
            throw error(strFmt("@SYS84765"+'\n\n'+"@SYS84768", new MenuFunction(menuitemActionStr(InventJournalDeleteTrans), MenuItemType::Action).label()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    public void datasourceInitValuePost()
    {
        InventJournalTrans  bomAssembly;
        int                 numAssemblies;

        super();

        [numAssemblies,bomAssembly] = inventJournalTrans.getBOMLineAssembly();
        if (numAssemblies == 1)
        {
            inventJournalTrans.ProfitSet = bomAssembly.ProfitSet;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    public void datasourceInitValuePre()
    {
        super();

        if (journalTableData.journalTable().NumOfLines > 0) // First line should by default be assembly item, the rest component lines
        {
            inventJournalTrans.bomLine = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that producible items are selected if this is an assembly line.
    /// </summary>
    /// <param name="_ret">
    ///    true if other validations have succeeded; otherwise, false.
    /// </param>
    /// <returns>
    ///    true if a validation succeeded; otherwise, false.
    /// </returns>
    public boolean datasourceValidateWritePost(boolean _ret)
    {
        boolean ret = super(_ret);

        if (ret)
        {
            if (! inventJournalTrans.bomLine)
            {
                if (!inventJournalTrans.inventTable().inventItemType().canBeProduced())
                {
                    return checkFailed(strFmt("@SYS78162",inventJournalTrans.inventTable().ItemType));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    public void datasourceWritePost()
    {
        InventJournalTrans  tmp;

        super();

        if (FormDataUtil::isFormDataSource(inventJournalTrans))
        {
            tmp.data(inventJournalTrans);
        }

        inventJournalTrans.updateAssemblyLineAmounts();

        if (tmp.data())
        {
            FormDataUtil::getFormDataSource(inventJournalTrans).findRecord(tmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventTransIdFatherPost</Name>
				<Source><![CDATA[
    public void fieldModifiedInventTransIdFatherPost()
    {
        if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
        {
            journalTransData.initVoucher(journalTrans_last.Voucher,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedItemIdPost()
    {
        super();

        inventJournalTrans.setAssemblyBOMJournalLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs standard validation and validates that the <c>InventJournalTrans</c> record is for a catch
    /// weight item.
    /// </summary>
    /// <returns>
    /// true if the item ID is a <c>InventJournalTrans</c> record; otherwise, false.
    /// </returns>
    public boolean fieldValidateItemId()
    {
        ItemId  itemId  = inventJournalTrans.ItemId;
        boolean ret     = itemId && InventTable::checkExist(itemId);

        if ( ret && PdsGlobal::pdsIsCWItem(itemId))
        {
            ret = checkFailed(strfmt("@PDS95",itemId));
        }

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReturnLotId</Name>
				<Source><![CDATA[
    protected boolean hasReturnLotId()
    {
        return (select firstonly RecId from inventJournalTrans
            where inventJournalTrans.JournalId == journalTableData.journalTable().JournalId
                && inventJournalTrans.InventTransIdReturn != '').RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIdReturnEnabled</Name>
				<Source><![CDATA[
    protected void setInventTransIdReturnEnabled()
    {
        this.fieldInventTransIdReturn().allowEdit(false);
        this.fieldInventTransIdReturn().skip(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditOnAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property for all field objects on the given data source.
    /// </summary>
    /// <param name="_dataSource">
    ///    The data source to set the allow edit properties on.
    /// </param>
    /// <param name="_allowEdit">
    ///    The value to assign to the allow edit property.
    /// </param>
    private static void setAllowEditOnAllFields(FormDataSource _dataSource, boolean _allowEdit)
    {
        SysDictTable dictTable = new SysDictTable(_dataSource.table());
        int          fieldCnt;

        int maxFieldCnt = dictTable.fieldCntWithoutSys();
        for (fieldCnt = 1; fieldCnt <= maxFieldCnt; fieldCnt++)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(fieldCnt);
            _dataSource.object(fieldId).allowEdit(_allowEdit);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>