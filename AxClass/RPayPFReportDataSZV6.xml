<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportDataSZV6</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportDataSZV6 extends RPayPFReportData
{
    RHolderData_ComplexContainer    fundAmountData;
    Map                             seniorityMap;
    RPayPFSeniorityType             keySpecialSeniority;

    #RPayPFReportSZV6

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initDataStrucuture</Name>
				<Source><![CDATA[
        protected void initDataStrucuture()
    {
        seniorityMap   = new Map(Types::Container, Types::Container);
        fundAmountData = new RHolderData_ComplexContainer(0, Types::Container, connull(), createParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert(container _conValue)
    {
        container tmpCon;

        switch (conpeek(_conValue, 1))
        {
            case #FundAmountDS:
                tmpCon = condel(_conValue, 1, 1);
                this.insertFundValues(tmpCon);
                break;

            case #SeniorityDS:
                tmpCon = condel(_conValue, 1, 1);
                this.insertSeniority(tmpCon);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFundValues</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void insertFundValues(container _conValue)
    {
        container conKey;
        container conValue;

        if (conlen(_conValue))
        {
            conKey   = conpeek(_conValue, 1);
            conValue = conpeek(_conValue, 2);

            fundAmountData.insert(conKey, conValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSeniority</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void insertSeniority(container _conValue)
    {
        if (conlen(_conValue) > 0)
        {
            seniorityMap.insert(conpeek(_conValue,1), conpeek(_conValue, 2));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterator</Name>
				<Source><![CDATA[
        public IRPayPFReportDataIterator iterator(container _initIteratorValue)
    {
        RPayPFReportDataIteratorSZV6 iterator;
        container tmpCon;

        switch (conpeek(_initIteratorValue, 1))
        {
            case #FundAmountDS:
                iterator = RPayPFReportDataIteratorSZV6::createAsFundAmount(fundAmountData.getMap());

                if (conlen(_initIteratorValue) > 1)
                {
                    tmpCon = condel(_initIteratorValue, 1, 1);
                    iterator.find(tmpCon);
                }
                break;

            case #SeniorityDS:
                tmpCon = condel(_initIteratorValue, 1, 1);

                if (seniorityMap.exists(tmpCon))
                {
                    iterator = RPayPFReportDataIteratorSZV6::createAsSeniority(seniorityMap.lookup(tmpCon));
                }
                else
                {
                    iterator = RPayPFReportDataIteratorSZV6::createAsSeniority(connull());
                }

                break;
        }

        return iterator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>