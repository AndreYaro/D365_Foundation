<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateTaxCorrection_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureJourCreateTaxCorrection_RU extends FactureJourCreate_RU
{
    Set uniqueTaxCodeAccount;

    FactureTaxCorrectionContragentType_RU   contragentType;
    FactureModule_RU                        module;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>book</Name>
				<Source><![CDATA[
    abstract public FactureBook_RU book()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs check of parameters specified for facture creation.
    /// </summary>
    /// <returns>
    /// True, if check succeed; otherwise false.
    /// </returns>
    protected boolean checkParameters()
    {
        boolean ret;

        ret = super();

        if (correctionType != FactureCorrectionType_RU::Revision            &&
            contragentType == FactureTaxCorrectionContragentType_RU::Vendor &&
            ! factureExtId)
        {
            ret = checkFailed("@GLS104571");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentType</Name>
				<Source><![CDATA[
    final public FactureTaxCorrectionContragentType_RU contragentType(FactureTaxCorrectionContragentType_RU _type = contragentType)
    {
        if (_type != contragentType)
        {
            contragentType = _type;
            this.contragentTypeChanged();
        }
        return contragentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentTypeChanged</Name>
				<Source><![CDATA[
    abstract protected void contragentTypeChanged()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    final protected Common findInvoiceJourByTrans(Common _trans)
    {
        LedgerJournalTrans localLedgerJournalTrans;
        ;

        localLedgerJournalTrans = _trans as LedgerJournalTrans;

        return LedgerJournalTable::find(localLedgerJournalTrans.JournalNum, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    final protected Common findInvoiceTransByFacture()
    {
        LedgerJournalTrans  ret;
        LedgerJournalId     tmpNum = factureTrans.InvoiceId;
        RecId               recId;

        while select firstfast ret
            where ret.JournalNum  == tmpNum                      &&
                  ret.LineNum     == factureTrans.InvoiceLineNum &&
                  ret.TaxCode                                    &&
                  ret.AccountType == LedgerJournalACType::Ledger
        {
            if (ret.isTaxCorrection_RU(false))
            {
                recId = ret.RecId;
                break;
            }
        }

        if (recId)
        {
            select firstonly ret
                where ret.RecId       == recId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        DictType            dictType;
        NumberSequenceTable numTable, numTableExternal;
        NumberSeq_RU        externalNumSeq_RU;
        boolean             error = false;

        numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustFactureId_RU(),false,true);

        if (! numberSeq)
        {
            dictType = new DictType(extendedtypenum(FactureId_RU));
            error(strfmt("@SYS53911", dictType.label(), "@SYS25196"));
            error    = true;
        }
        else
        {
            numTable = numberSeq.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedtypenum(FactureId_RU));
                error(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
        }

        super();

        if (correctionType == FactureCorrectionType_RU::Revision)
        {
            factureJour.FactureExternalId = correctedFactureExtId;
        }
        else if (contragentType == FactureTaxCorrectionContragentType_RU::Customer)
        {
            externalNumberSeq = NumberSeq_RU::newGetNum(LedgerParameters::numRefTaxCorrectionFacture_RU(), false, true);
            if (! externalNumberSeq)
            {
                dictType = new DictType(extendedtypenum(FactureExternalId_TaxCorrection_RU));
                error(strfmt("@SYS53911", dictType.label(), "@SYS24097"));
                error    = true;
            }
            else
            {
                numTableExternal = externalNumberSeq.parmNumTableNum(numTableExternal);
                if (numTableExternal.Manual)
                {
                    dictType = new DictType(extendedtypenum(FactureExternalId_TaxCorrection_RU));
                    error(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                    error    = true;
                }
                if (! numTableExternal.Continuous)
                {
                    dictType = new DictType(extendedtypenum(FactureExternalId_TaxCorrection_RU));
                    error(strfmt("@SYS26207", strfmt("@SYS70938", numTableExternal.NumberSequence, dictType.label())));
                    error    = true;
                }
            }

            if (! error && mustBeUpdated && ! factureExtId) // factureExtId can be reused ID of deleted facture
            {
                factureJour.FactureExternalId = externalNumberSeq.num();
            }

            if (! error && factureExtId)
            {
                if (NumberSequenceList::exist(numTableExternal.RecId, NumStatus::Free, factureExtId))
                {
                    if (mustBeUpdated)
                    {
                        externalNumSeq_RU = externalNumberSeq;
                        externalNumSeq_RU.useNumFromList(numTableExternal, factureExtId);
                    }
                    factureJour.FactureExternalId = factureExtId;
                }
                else
                {
                    error(strfmt("@GLS104927", factureExtId, tableid2pname(tablenum(NumberSequenceList)), tablestr(NumberSequenceList)));
                    error = true;
                }
            }
        }

        if (error)
        {
            throw error("@SYS26077");
        }

        factureJour.FactureId           = numberSeq.num();

        if (this.module() == FactureModule_RU::TaxCorrectionPurch ||
            this.module() == FactureModule_RU::TaxCorrectionSales_Vend)
        {
            factureJour.VATTaxAgent = VendTable::find(custVendAC).VATTaxAgent_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    final public FactureModule_RU module()
    {
        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        uniqueTaxCodeAccount = new Set(Types::Container);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>