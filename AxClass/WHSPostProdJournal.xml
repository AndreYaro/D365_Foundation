<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPostProdJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Starts a production order and posts a picking list journal for the work that was just completed.
/// </summary>
public class WHSPostProdJournal
{
    WHSWorkLine workLine;
    InventTrans postInventTrans;
    Qty         postQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSPostProdJournal construct()
    {
        return new WHSPostProdJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class <c>WHSPostProdJournal</c> based off a given work line.
    /// </summary>
    /// <param name = "_workLine">
    /// The work line used to create the class.
    /// </param>
    /// <returns>
    /// A new instance of <c>WHSPostProdJournal</c>.
    /// </returns>
    public static WHSPostProdJournal newFromWorkLine(WHSWorkLine _workLine)
    {
        WHSPostProdJournal postProdJournal = WHSPostProdJournal::construct();
        postProdJournal.workLine = _workLine;

        return postProdJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class <c>WHSPostProdJournal</c> based off an invent transaction record and a quantity.
    /// </summary>
    /// <param name = "_inventTrans">
    /// The transaction used in the class.
    /// </param>
    /// <param name = "_qty">
    /// The quantity amount being posted.
    /// </param>
    /// <returns>
    /// A new instance of <c>WHSPostProdJournal</c>.
    /// </returns>
    public static WHSPostProdJournal newFromInventTrans(
        InventTrans _inventTrans,
        Qty         _qty)
    {
        WHSPostProdJournal postProdJournal = WHSPostProdJournal::construct();
        postProdJournal.postInventTrans = _inventTrans;
        postProdJournal.postQty = _qty;

        return postProdJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLineFromTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and posts a picking list journal from the transaction.
    /// </summary>
    /// <param name = "_inventTransId">The transaction ID for the line being created.</param>
    /// <param name = "_inventDimId">The dimension set being used.</param>
    /// <param name = "_qty">The amount of the picking list line.</param>
    /// <param name = "_journalId">The journal ID to add the line to.</param>
    /// <returns>The journal ID used to create the journal.</returns>
    public static JournalId createJournalLineFromTransaction(
        InventTransId _inventTransId,
        InventDimId	  _inventDimId,
        InventQty	  _qty,
        JournalId	  _journalId = '')
    {
        WHSPostProdJournal	postProdJournal = WHSPostProdJournal::construct();
        ProdBOM				prodBOMLine  = ProdBOM::findTransId(_inventTransId);
        ProdParametersDim	prodParamDim = prodBOMLine.prodTable().prodParametersDim();

        ProdJournalCreateBOM prodJournalCreateBOM = postProdJournal.createProdJournal(prodParamDim,
                                                                                          prodBOMLine,
                                                                                          DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                          _qty,
                                                                                          _journalId,
                                                                                          _inventDimId);

        return prodJournalCreateBOM.parmJournalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalFromJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the journal for a specific journal ID.
    /// </summary>
    /// <param name = "_journalId">The ID of the journal to post.</param>
    public static void postJournalFromJournalId(JournalId _journalId)
    {
        WHSPostProdJournal::postJournalInBatch(ProdJournalTable::find(_journalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProdBOMPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post a picking list journal for the raw materials picked in the completed work.
    /// </summary>
    public void postProdBOMPick()
    {
        List            prodList = this.getListOfProdIdsWithPickFlushingPrinciple();
        ListEnumerator  le = prodList.getEnumerator();

        while (le.moveNext())
        {
            ProdId currentProdId = le.current();

            if (ProdTable::find(currentProdId).ProdStatus == ProdStatus::StartedUp)
            {
                this.createProdPickingList(currentProdId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfProdIdsWithPickFlushingPrinciple</Name>
				<Source><![CDATA[
    private List getListOfProdIdsWithPickFlushingPrinciple()
    {
        WHSWorkInventTrans	workInventTrans;
        ProdBOM				prodBOMLine;
        ProdId              prevProdId;
        List                prodList = new List(Types::String);

        while select prodBOMLine
                order by ProdId
                exists join workInventTrans
                    where workInventTrans.InventTransIdParent == prodBOMLine.InventTransId
                    &&	  workInventTrans.WorkId			  == workLine.WorkId
                    &&	  workInventTrans.LineNum			  == workLine.LineNum
        {
            if (prevProdId != prodBOMLine.ProdId
                &&  prodBOMLine.flushingPrinciple() == ProdFlushingPrincipBOM::Picked)
            {
                prodList.addEnd(prodBOMLine.ProdId);
                prevProdId = prodBOMLine.ProdId;
            }
        }

        return prodList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdPickingList</Name>
				<Source><![CDATA[
    private void createProdPickingList(ProdId _prodId)
    {
        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(workLine.WorkId))
        {
            this.createProdPickingListWithWarehouseInventoryTransactions(_prodId);
        }
        else
        {
            this.createProdPickingListWithHardcodedQuery(_prodId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdPickingListWithWarehouseInventoryTransactions</Name>
				<Source><![CDATA[
    private void createProdPickingListWithWarehouseInventoryTransactions(ProdId _prodId)
    {
        ProdJournalCreateBOM prodJournalCreateBOM;
        ProdParametersDim	 prodParamDim;
        ProdBOM				 prodBOMLine;
        ProdJournalId		 journalId;
        date				 todaysDate;

        WHSWorkInventoryTransactionDescriptor transactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(workLine.WorkId)
            .registeredReceiptByWorkLine(workLine.LineNum, WHSWorkInventoryTransactionQueryParameters::construct());
        var transactionEnumerator = transactionDescriptor.getEnumerator();

        while (transactionEnumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement descriptorElement = transactionEnumerator.current();

            prodBOMLine = ProdBOM::findTransId(descriptorElement.parmInventTransIdParent());

            if (prodBOMLine == null || prodBOMLine.flushingPrinciple() != ProdFlushingPrincipBOM::Picked)
            {
                continue;
            }

            if (!journalId)
            {
                prodParamDim = prodBOMLine.prodTable().prodParametersDim();
                todaysDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }

            WHSInventoryQuantityPair inventoryQuantity = descriptorElement.getInventoryFormatQuantity();
            PdsCWQty cwQty = inventoryQuantity.parmCwInventQty();
            Qty  inventQty = inventoryQuantity.parmInventQty();
            InventDimId inventDimId = descriptorElement.parmInventoryDimensionsDescriptor().convertToInventDim(true).inventDimId;

            prodJournalCreateBOM = this.createProdJournal(prodParamDim, prodBOMLine, todaysDate, inventQty, journalId, inventDimid, cwQty);
            journalId = prodJournalCreateBOM.parmJournalId();
        }

        if (journalId)
        {
            WHSPostProdJournal::postJournalInBatch(prodJournalCreateBOM.usedProdJournalTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdPickingListWithHardcodedQuery</Name>
				<Source><![CDATA[
    private void createProdPickingListWithHardcodedQuery(ProdId _prodId)
    {
        ProdJournalCreateBOM prodJournalCreateBOM;
        WHSWorkInventTrans	 workInventTrans;
        ProdParametersDim	 prodParamDim;
        ProdBOM				 prodBOMLine;
        ProdJournalId		 journalId;
        date				 todaysDate;

        while select prodBOMLine
            where prodBOMLine.ProdId                  == _prodId
        join Qty, InventTransIdTo, TransactionWeight, InventDimIdTo  from workInventTrans
            where workInventTrans.InventTransIdParent == prodBOMLine.InventTransId
               && workInventTrans.WorkId			  == workLine.WorkId
               && workInventTrans.LineNum			  == workLine.LineNum
        {
            if (prodBOMLine.flushingPrinciple() != ProdFlushingPrincipBOM::Picked)
            {
                continue;
            }

            if (!journalId)
            {
                prodParamDim = prodBOMLine.prodTable().prodParametersDim();
                todaysDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }

            // The production BOM could be updated when the journal is created, if above location dimensions are being specified
            // need to reselect the record to avoid an update conflict.
            prodBOMLine.reread();

            WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();

            if (reservationHierarchyProvider.itemHasDimensionBelowLicensePlate(InventTable::find(prodBOMLine.ItemId)))
            {
                InventTrans         inventTrans;
                InventTransOrigin   transOrigin;

                while select Qty, InventDimId, PdsCWQty from inventTrans
                        exists join transOrigin
                            where transOrigin.RecId         == inventTrans.InventTransOrigin
                            &&    transOrigin.InventTransId == workInventTrans.InventTransIdTo
                {
                    prodJournalCreateBOM = this.createProdJournal(prodParamDim, prodBOMLine, todaysDate, inventTrans.Qty, journalId, inventTrans.inventDimId, inventTrans.PdsCWQty);
                    journalId = prodJournalCreateBOM.parmJournalId();
                }
            }
            else
            {
                PdsCWQty cwQty;
                Qty      inventQty = workInventTrans.Qty;

                if (PdsGlobal::pdsIsCWItem(prodBOMLine.ItemId))
                {
                    cwQty = workInventTrans.Qty;
                    inventQty = workInventTrans.TransactionWeight;
                }
               
                prodJournalCreateBOM = this.createProdJournal(prodParamDim, prodBOMLine, todaysDate, inventQty, journalId, workInventTrans.InventDimIdTo, cwQty);             
                journalId = prodJournalCreateBOM.parmJournalId();
            }
        }

        if (journalId)
        {
            WHSPostProdJournal::postJournalInBatch(prodJournalCreateBOM.usedProdJournalTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalInBatch</Name>
				<Source><![CDATA[
    internal static void postJournalInBatch(ProdJournalTable _prodJournalTable)
    {
        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmCaption(strFmt("@WAX:PostPickJournalBatchDescription", _prodJournalTable.JournalId, _prodJournalTable.ProdId));
        batchHeader.parmStartDateTime(DateTimeUtil::getSystemDateTime());
        batchHeader.parmLogLevel(BatchLogLevel::Always);
        batchHeader.parmAlerts(NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::No);
        
        Args args = new Args();
        args.record(_prodJournalTable);
        
        batchHeader.addTask(WHSPostPickListController::construct(args));
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournal</Name>
				<Source><![CDATA[
    private ProdJournalCreateBOM createProdJournal(
        ProdParametersDim	 _prodParamDim,
        ProdBOM				 _prodBOMLine,
        date				 _todaysDate,
        InventHandlingQty    _inventHandlingQty,
        ProdJournalId		 _journalId,
        InventDimId          _inventDimId = '',
        PdsCWQty             _cwQty = 0)
    {
        Qty bomQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_prodBOMLine.ItemId,
                                                                                           _prodBOMLine.InventDimId,
                                                                                           _inventHandlingQty,
                                                                                           InventTableModule::find(_prodBOMLine.ItemId,ModuleInventPurchSales::Invent).UnitId,
                                                                                           _prodBOMLine.UnitId);

        ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::newConsumption(_prodBOMLine, _prodParamDim.BOMJournalNameId, _todaysDate, bomQty);
        prodJournalCreateBOM.parmInventDimId(_inventDimId);
        prodJournalCreateBOM.parmCWQtyConsump(_cwQty);

        // If it's the first run this will be blank, a journal Id will be assigned in runOperation,
        // if it's after the first run assigning the previous journal Id will add lines to the same journal
        prodJournalCreateBOM.parmJournalId(_journalId);
                
        prodJournalCreateBOM.runOperation();

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates production start parameters and runs production start up.
    /// </summary>
    /// <param name="_prodId">
    /// Production order id.
    /// </param>
    /// <param name="_qty">
    /// Start up quantity.
    /// </param>
    /// <param name="_userId">
    /// Warehouse worker ID.
    /// </param>
    /// <param name="_bomAutoConsump">
    /// The flushing principle.
    /// </param>
    public static void prodStartUp(
        ProdId			   _prodId,
        Qty				   _qty = 0,
        WHSUserId          _userId = '',
        BOMAutoConsump	   _bomAutoConsump = BOMAutoConsump::FlushingPrincip,
        WHSWorkExecuteMode _workExecuteMode = WHSWorkExecuteMode::StartProdOrder)
    {
        ttsbegin;

        ProdParmStartUp prodParmStartUp;

        if (WHSPostProdJournal::mustStartProductionOrder(_prodId))
        {
            ProdMultiStartUp prodMultiStartUp = ProdMultiStartUp::construct(null);
            prodMultiStartUp.getLast();
            prodMultiStartUp.parmId(RunBaseMultiParm::getSysParmId());
            prodMultiStartUp.insert(ProdTable::find(_prodId), prodParmStartUp);

            boolean update;

            if (_qty)
            {
                prodParmStartUp.StartUpQty = _qty;
                update = true;
            }
            if (!prmIsDefault(_bomAutoConsump))
            {
                prodParmStartUp.BOMAutoConsump = _bomAutoConsump;
                update = true;
            }

            if (update)
            {
                prodParmStartUp.update();
            }

            prodMultiStartUp.runOnServer();
        }

        if (strLen(_userId) > 0)
        {
            WHSWorkExecute::logProductionOrderStart(_prodId, prodParmStartUp.parmId, _userId, _workExecuteMode);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustStartProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines if the production order must be started.
    /// </summary>
    /// <param name="_prodId">
    /// Production order id.
    /// </param>
    /// <returns>true if the production order must be started; otherwise, false.</returns>
    [Wrappable(true)]
    internal static boolean mustStartProductionOrder(ProdId _prodId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>