<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySumDataOutput_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysQtySumDataOutput_CN</c> class is used to get the user required output from engine's result.
/// </summary>

class InventPhysQtySumDataOutput_CN
{
    QueryRun    queryRun;
    Query       query;
    boolean     isQueryConfigured;

    boolean hasInvent;
    boolean hasInventSummary;
    boolean hasInventDim;
    boolean hasInventModule;

    //data table
    InventSumDateTransPhysTmp_CN    inventSumTable;

    //output
    InventPhysQtySumTmp_CN          inventSumOutput;
    //for current group of records
    InventSumDateTransPhysTmp_CN    inventSummary;
    InventDim                       inventDim;
    InventTable                     inventTable;
    InventTableModule               inventTableModule;

    InventQty   receivedQty;
    InventQty   issuedQty;
    InventQty   onHandQty;

    //for current cursor
    InventSumDateTransPhysTmp_CN    currentInventSum;
    InventDim                       currentInventDim;
    InventTable                     currentInventTable;
    InventTableModule               currentInventModule;

    //parameters
    TransDate fromDate;
    TransDate toDate;
    //properties
    //wheter the on-hand quantity is of beginning date
    boolean     isOnHandBegin;
    boolean     showEmptyLine;

    UserConnection  userConnection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records in current cursor.
    /// </summary>

    protected void getCurrentRecord()
    {
        if (hasInvent)
        {
            currentInventTable = queryRun.get(tablenum(InventTable));
        }

        if (hasInventModule)
        {
            currentInventModule = queryRun.get(tablenum(InventTableModule));
        }
        if (hasInventSummary)
        {
            currentInventSum = queryRun.get(tablenum(InventSumDateTransPhysTmp_CN));
        }

        if (hasInventDim)
        {
            currentInventDim = queryRun.get(tablenum(InventDim));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a temporary table, which contains the final user required inventory summary result.
    /// </summary>
    /// <returns>
    /// A temporary table containing user required inventory summary result.
    /// </returns>

    public InventPhysQtySumTmp_CN getInventSummaryData()
    {
        //clear buffer
        this.init();

        //get first group
        if (this.nextLine())
        {
            this.refreshGroupData();
            this.onLineChanged();
        }

        while (this.nextLine())
        {
            if (this.isGroupChanged())
            {
                this.onGroupChanged();
            }

            this.onLineChanged();
        }
        //write the last line
        if (!this.isGroupEmpty())
        {
            this.onGroupChanged();
        }

        return inventSumOutput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssuedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets issued quantity of current item and dimension.
    /// </summary>
    /// <returns>
    /// The issued quantity.
    /// </returns>

    protected InventQty getIssuedQty()
    {
        return issuedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets on-hand quantityty of current item and dimension.
    /// </summary>
    /// <returns>
    /// The on-hand qty.
    /// </returns>

    protected InventQty getOnHandQty()
    {
        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets received quantity of current item and dimension.
    /// </summary>
    /// <returns>
    /// The received quantity.
    /// </returns>

    protected InventQty getReceivedQty()
    {
        return receivedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize internal variables.
    /// </summary>

    protected void init()
    {
        InventPhysQtySumTmp_CN tmpOutPut;

        //clear group data
        inventTable.clear();
        inventDim.clear();
        inventSummary.clear();
        inventTableModule.clear();

        receivedQty = 0;
        issuedQty   = 0;
        onHandQty   = 0;
        //initialize ouput
        if (userConnection)
        {
            tmpOutPut.setConnection(userConnection);
            inventSumOutput.setConnection(userConnection);
        }

        inventSumOutput.linkPhysicalTableInstance(tmpOutPut);

        //init query run
        if (!isQueryConfigured)
        {
            this.preQuery();
            isQueryConfigured = true;
        }
        queryRun = new QueryRun(query);
        queryRun.setRecord(inventSumTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEngineDataQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a default query of engine's result.
    /// </summary>
    /// <returns>
    /// A default query of engine's result.
    /// </returns>
    /// <remarks>
    /// PhysicalQty, ReceivedQty, IssuedQty are summary fields.
    /// </remarks>

    protected Query initEngineDataQuery()
    {
        QueryBuildDataSource qbdsItem;
        QueryBuildDataSource qbdsInventSum;
        QueryBuildDataSource qbdsDim;
        QueryBuildDataSource qbdsInventModule;

        query = new Query(queryStr(InventItemGroupItem_CN));

        //InventTable
        qbdsItem = query.dataSourceTable(tablenum(InventTable));

        //invent summary
        qbdsInventSum = qbdsItem.addDataSource(tablenum(InventSumDateTransPhysTmp_CN));
        qbdsInventSum.addLink(fieldnum(InventTable, ItemId),fieldnum(InventSumDateTransPhysTmp_CN, ItemId));
        qbdsInventSum.joinMode(JoinMode::InnerJoin);

        qbdsInventSum.addGroupByField(fieldnum(InventSumDateTransPhysTmp_CN, ItemId));
        qbdsInventSum.addSelectionField(fieldnum(InventSumDateTransPhysTmp_CN, PhysicalQty), SelectionField::Sum);
        qbdsInventSum.addSelectionField(fieldnum(InventSumDateTransPhysTmp_CN, ReceivedQty), SelectionField::Sum);
        qbdsInventSum.addSelectionField(fieldnum(InventSumDateTransPhysTmp_CN, IssuedQty), SelectionField::Sum);

        //dimension
        qbdsDim = qbdsInventSum.addDataSource(tablenum(InventDim));
        qbdsDim.relations(true);
        qbdsDim.joinMode(JoinMode::InnerJoin);

        //invent module
        qbdsInventModule = qbdsDim.addDataSource(tablenum(InventTableModule));
        qbdsInventModule.addLink(fieldnum(InventTable, ItemId), fieldnum(InventTableModule, ItemId), qbdsItem.name());
        qbdsInventModule.joinMode(JoinMode::OuterJoin);
        qbdsInventModule.addRange(fieldnum(InventTableModule, ModuleType)).value(SysQuery::value( ModuleInventPurchSales::Invent));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the query parameter.
    /// </summary>
    /// <param name="_query">
    /// A query parameter.
    /// </param>
    /// <returns>
    /// The query parameter.
    /// </returns>
    /// <remarks>
    /// The query should at least contain InventSumDateTransPhysTmp_CN datasource.
    /// </remarks>

    public Query initQuery(Query _query = null)
    {
        isQueryConfigured = false;
        if (_query == null)
        {
            query = this.initEngineDataQuery();
        }
        else
        {
            query = _query;
        }

        hasInvent           = query.dataSourceTable(tablenum(InventTable)) != null;
        hasInventSummary    = query.dataSourceTable(tablenum(InventSumDateTransPhysTmp_CN)) != null;
        hasInventDim        = query.dataSourceTable(tablenum(InventDim)) != null;
        hasInventModule     = query.dataSourceTable(tablenum(InventTableModule)) != null;

        if (!hasInventSummary)
        {
            throw error(funcname());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the output record is empty
    /// </summary>
    /// <param name="_record">
    /// The output record
    /// </param>
    /// <returns>
    /// True if the output record is empty. Otherwise, false.
    /// </returns>

    protected boolean isEmptyOutput(InventPhysQtySumTmp_CN _record)
    {
        boolean result = false;

        if (_record.ReceivedQty     == 0
            && _record.IssuedQty    == 0
            && _record.OnHandQty    == 0)
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record group is changed.
    /// </summary>
    /// <returns>
    /// True if the group is changed.
    /// </returns>

    protected boolean isGroupChanged()
    {
        if (!this.isGroupEmpty())
        {
            if (currentInventSum.ItemId != inventSummary.ItemId
                || !currentInventDim.equal(inventDim))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the group data is empty.
    /// </summary>
    /// <returns>
    /// True if the group data is empty.
    /// </returns>

    protected boolean isGroupEmpty()
    {
        return !(inventSummary.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventSumOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates new output line.
    /// </summary>
    /// <returns>
    /// The new output line.
    /// </returns>

    protected InventPhysQtySumTmp_CN newInventSumOutput()
    {
        InventPhysQtySumTmp_CN tmpInventSum;

        if (userConnection)
        {
            tmpInventSum.setConnection(userConnection);
        }

        tmpInventSum = inventSumOutput;

        tmpInventSum.clear();
        //Invent
        tmpInventSum.ItemGroupId    = inventTable.ItemGroupId();
        tmpInventSum.ItemId         = inventSummary.ItemId;
        tmpInventSum.ItemName       = inventTable.ItemName();
        tmpInventSum.UnitId         = inventTableModule.UnitId;

        //InventDim
        tmpInventSum.InventDimId = inventSummary.InventDimId;
        tmpInventSum.inventDim(inventDim,true);

        //date
        tmpInventSum.BeginDate = inventSummary.BeginDate;
        tmpInventSum.EndDate = inventSummary.EndDate;

        //Qty
        if (isOnHandBegin)
        {
            tmpInventSum.OnHandQty = this.getOnHandQty();
            tmpInventSum.OnHandQtyOfEnd = tmpInventSum.OnHandQty + this.getReceivedQty() + this.getIssuedQty();
        }
        else
        {
            tmpInventSum.OnHandQtyOfEnd = this.getOnHandQty();
            tmpInventSum.OnHandQty = tmpInventSum.OnHandQtyOfEnd - this.getReceivedQty() - this.getIssuedQty();
        }
        tmpInventSum.ReceivedQty = this.getReceivedQty();
        tmpInventSum.IssuedQty = this.getIssuedQty();

        return tmpInventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Goto next record.
    /// </summary>
    /// <returns>
    /// False if there is no more records.
    /// </returns>

    protected boolean nextLine()
    {
        boolean more;

        more = queryRun.next();

        if (more)
        {
            this.getCurrentRecord();
        }

        return more;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGroupChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts when the group is changed.
    /// </summary>

    protected void onGroupChanged()
    {
        InventPhysQtySumTmp_CN tmpInventSum;
        boolean doInsert = true;

        if (userConnection)
        {
            tmpInventSum.setConnection(userConnection);
        }

        tmpInventSum = this.newInventSumOutput();

        //show or hide empty lines
        if (!showEmptyLine)
        {
            if (this.isEmptyOutput(tmpInventSum))
            {
                doInsert = false;
            }
        }

        if (doInsert)
        {
            tmpInventSum.insert();
        }

        this.refreshGroupData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts when the record is changed.
    /// </summary>

    protected void onLineChanged()
    {
        receivedQty += currentInventSum.receivedQty();
        issuedQty += currentInventSum.issuedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSummaryTable</Name>
				<Source><![CDATA[
        public InventSumDateTransPhysTmp_CN parmInventSummaryTable(InventSumDateTransPhysTmp_CN _inventSumTable = inventSumTable)
    {
        inventSumTable = _inventSumTable;

        return inventSumTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOnHandBegin</Name>
				<Source><![CDATA[
        public boolean parmIsOnHandBegin(boolean _isOnHandBegin = isOnHandBegin)
    {
        isOnHandBegin = _isOnHandBegin;

        return isOnHandBegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowEmptyLine</Name>
				<Source><![CDATA[
        public Boolean parmShowEmptyLine(Boolean _showEmptyLine = showEmptyLine)
    {
        showEmptyLine = _showEmptyLine;

        return showEmptyLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
        public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decorates the query before run.
    /// </summary>

    protected void preQuery()
    {
        QueryBuildDataSource qbdsInventSum;
        QueryBuildDataSource qbdsInventModule;
        QueryBuildDataSource qbdsItem;

        if (query == null)
        {
            this.initEngineDataQuery();
        }

        qbdsItem = query.dataSourceTable(tablenum(InventTable));

        qbdsItem.addGroupByField(fieldnum(InventTable, ItemId));
        qbdsItem.addGroupByField(fieldnum(InventTable, Product));
        qbdsInventSum = query.dataSourceTable(tablenum(InventSumDateTransPhysTmp_CN));
        qbdsInventSum.addGroupByField(fieldnum(InventSumDateTransPhysTmp_CN, BeginDate));
        qbdsInventSum.addGroupByField(fieldnum(InventSumDateTransPhysTmp_CN, EndDate));
        qbdsInventSum.addGroupByField(fieldnum(InventSumDateTransPhysTmp_CN, InventTransType));

        qbdsInventModule = query.dataSourceTable(tablenum(InventTableModule));
        qbdsInventModule.addGroupByField(fieldnum(InventTableModule, UnitId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshs group data for a new group of records.
    /// </summary>

    protected void refreshGroupData()
    {
        inventTable.data(currentInventTable);
        inventDim.data(currentInventDim);
        inventSummary.data(currentInventSum);
        inventTableModule.data(currentInventModule);

        //init qty
        receivedQty = 0;
        issuedQty = 0;
        onHandQty = inventSummary.PhysicalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs instance according to sum calculation type.
    /// </summary>
    /// <param name="_type">
    /// The sum calculation type.
    /// </param>
    /// <returns>
    /// The instance of the <c>InventPhysQtySumDataOutput_CN</c> class.
    /// </returns>
    public static InventPhysQtySumDataOutput_CN construct(InventorySumCalcType_CN _type)
    {
        InventPhysQtySumDataOutput_CN inventSumQty_CN;

        switch (_type)
        {
            case InventorySumCalcType_CN::ByDate:
                inventSumQty_CN = new InventPhysQtySumByDateDataOutput_CN();
                break;

            case InventorySumCalcType_CN::ByTransType:
                inventSumQty_CN = new InventPhysQtySumByTypeDataOutput_CN();
                break;

            case InventorySumCalcType_CN::InPeriod:
            default:
                inventSumQty_CN = new InventPhysQtySumDataOutput_CN();
                break;
        }

        return inventSumQty_CN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>