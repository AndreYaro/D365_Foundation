<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMTable_BOMVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfFormCtrl_BOMTable_BOMVersion</c> class is the form control handler for the
/// <c>BOMVersion</c> datasource of the <c>BOMTable</c> form.
/// </summary>
class PmfFormCtrl_BOMTable_BOMVersion
    extends PmfFormCtrl_BOM_BOMVersion
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing after the <c>BOMVersion</c> datasource has been initialized.
    /// </summary>
    /// <param name="_buffer">
    /// The <c>Common</c> record buffer associated with the datasource.
    /// </param>
    public void dataSourceInitPost(Common _buffer)
    {
        Query                   q;
        QueryBuildDataSource    qB;

        super(_buffer);

        if (this.isPmfEnabled())
        {
            q = this.parmFormDataSource(FormDataUtil::getFormDataSource(_buffer)).query();

            qB = q.dataSourceTable(tableNum(BOMVersion));

            qB.addRange(
                fieldNum(BOMVersion, PmfTypeId)).value(
                    queryValue(this.isFormulaEnabled()
                                ? PmfBOMFormula::Formula
                                : PmfBOMFormula::BOM));

            this.parmFormDataSource().query(q);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the lookup for the fields on the <c>BOMVersion</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> value of the field for which to handle the lookup.
    /// </param>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object initiating the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// A value that specifies additional filters for the lookup.
    /// </param>
    public void fieldLookup(
        FieldId     _fieldId,
        FormControl _formControl,
        str         _filterStr)
    {
        BOMVersion  bomVersion = this.bomVersion();
        #define.PercentMax(100)

        super(_fieldId, _formControl, _filterStr);

        switch (_fieldId)
        {
            case fieldNum(BOMVersion, ItemId):
                InventLookupItemIdByDefaultOrder::newLookupCtrl(_formControl, true, InventItemLookupDefaultTab::TabProduction, this.filterPmfProductTypes()).run();
                break;

            case fieldNum(BOMVersion, PmfBulkParent) :
                InventTable::lookupPmfBulkItem(_formControl,
                    this.bomVersion().bomId, this.bomVersion().ItemId);
                break;
            default :
                //break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modification of fields for the <c>BOMVersion</c> datasource.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> value of the field that has been changed.
    /// </param>
    public void fieldModified(FieldId _fieldId)
    {
        BOMVersion  bomVersion = this.bomVersion();
        #define.PercentMax(100)

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(BOMVersion, ItemId):
                bomVersion.initFromInventTable(bomVersion.inventTable());
                if (#PmfEnabled && bomVersion.PmfYieldPct == 0)
                {
                    bomVersion.PmfYieldPct = #PercentMax;
                }
                break;

            default :
                //break;
        }

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterPmfProductTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of product types that should be filtered when looking up items.
    /// </summary>
    /// <returns>
    /// A set of product types.
    /// </returns>
    protected Set filterPmfProductTypes()
    {
        Set set = new Set(Types::Enum);

        if (this.isFormulaEnabled())
        {
            set.add(PmfProductType::Formula);
            set.add(PmfProductType::MainItem);
        }
        else
        {
            set.add(PmfProductType::BOM);
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing after the form element has been initialized.
    /// </summary>
    /// <remarks>
    /// Creates and initializes the form button manager and adjusts various properties for the usage of the
    /// form with formulas.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The form element has not been set for this class.
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isCatchWeightEnabled())
        {
            this.registerPdsCatchWeightCtrlRules();
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPdsCatchWeightCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPdsCatchWeightCtrlRules()
    {
        this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(BOMTable,VersionGrpGrid)),
                    formRun.design().controlName(formControlStr(BOMTable,BOMVersion_PdsCWUnit)),
                    methodStr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, HeaderDetailsVersion)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@SCM:FormulaVersions");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,VersionGrpGrid)),
                formRun.design().controlName(formControlStr(BOMTable,BOMVersion_ItemId)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO2892");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,VersionGrpGrid)),
                formRun.design().controlName(formControlStr(BOMTable,BOMVersion_PmfCoByVarAllow)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,VersionGrpGrid)),
                formRun.design().controlName(formControlStr(BOMTable,PmfFormulaUnit)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,VersionGrpGrid)),
                formRun.design().controlName(formControlStr(BOMTable,BOMVersion_FromDate)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO993");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,VersionGrpGrid)),
                formRun.design().controlName(formControlStr(BOMTable,BOMVersion_ToDate)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO2893");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,VersionGrpGrid)),
                formRun.design().controlName(formControlStr(BOMTable,BOMVersion_FromQty)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO1978");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroupUpDownConfigRoute)),
                formRun.design().controlName(formControlStr(BOMTable,Up)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO2894");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroupUpDownConfigRoute)),
                formRun.design().controlName(formControlStr(BOMTable,Down)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO2895");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(BOMTable,CoByProducts)),
                methodStr(PmfFormCtrl_BOMTable_BOMVersion, isFormulaVersionExists),
                ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the version is a formula.
    /// </summary>
    /// <returns>
    /// true if the version is a formula; otherwise, false .
    /// </returns>
    public boolean isFormulaEnabled()
    {
        InventTable callerInventTable;
        BOMTable    callerBOMTable;
        InventSum   callerInventSum;
        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tableNum(InventTable) :
                callerInventTable = common;
                ret = callerInventTable.isFormulaAllowed();
                break;
            case tableNum(BOMTable) :
                callerBOMTable = common;
                ret = callerBOMTable.PmfBOMFormula == PmfBOMFormula::Formula;
                break;
            case tableNum(InventSum) :
                callerInventSum = common;
                ret = callerInventSum.inventTable().isFormulaAllowed();
                break;
            default:
                // break;
        }

        ret = ret
            || this.menuItemName() == menuitemDisplayStr(PmfFormulaTable)
            || this.menuItemName() == menuitemDisplayStr(PmfFormulaTableHeader);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaVersionExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a formula version exists.
    /// </summary>
    /// <returns>
    /// true if a formula version exists; otherwise, false .
    /// </returns>
    private boolean isFormulaVersionExists()
    {
        BOMVersion  bomVersion = this.parmBuffer();
        boolean     ret;

        ret = this.isFormulaEnabled() && (bomVersion.RecId != 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PdsCWFormCtrl   cwCtrl;

        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);

        if (this.isCatchWeightEnabled())
        {
            cwCtrl = PdsCWFormCtrl_Std::construct();

            cwCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldNum(BOMVersion,PmfBatchSize),
                    fieldNum(BOMVersion,PdsCWSize),
                    false],
                    [fieldNum(BOMVersion,FromQty),
                    fieldNum(BOMVersion,PdsCWFromQty),
                    false]]
                ));
            cwCtrl.parmItemFieldId(fieldNum(BOMVersion,ItemId));
            cwCtrl.parmUnitMethodStr(tableMethodStr(BOMVersion, pdsCWUnitId));

            this.addSubFormCtrl(cwCtrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that will be used in rule computation.
    /// </summary>
    /// <param name="_datasources1">
    /// A <c>Common</c> table buffer that belongs to the first datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A <c>Common</c> table buffer that belongs to the second datasource instance; optional.
    /// </param>
    /// <param name="_datasources3">
    /// A <c>Common</c> table buffer that belongs to the third datasource instance; optional.
    /// </param>
    /// <param name="_datasources4">
    /// A <c>Common</c> table buffer that belongs to the fourth datasource instance; optional.
    /// </param>
    /// <param name="_datasources5">
    /// A <c>Common</c> table buffer that belongs to the fifth datasource instance; optional.
    /// </param>
    /// <remarks>
    /// Up to five datasources can be passed. If the implementation requires more datasources additional
    /// custom methods should be implemented on the rule implementer class.The method is called by
    /// <c>FormButtonManager</c> on the rule class implementing the <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tableNum(BOMVersion))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the states and visibility of form controls, depending on the <c>BOMVersion</c> value.
    /// </summary>
    public void updateDesign()
    {
        boolean isFormula       = this.isFormulaEnabled();
        boolean allowEdit       = true;

        if (BOMParameters::find().BlockEditing && this.bomVersion().isApproved())
        {
            allowEdit = false;
        }

        super();

        this.visibleDSField(
            fieldNum(BOMVersion, PmfYieldPct),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfBatchSize),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfBatchSize),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PdsCWSize),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PdsCWFromQty),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfFormulaChangeDate),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfYieldPct),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfFormulaMultiple),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfBulkParent),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfFormulaVersionCalculation),
            isFormula);

        this.visibleDSField(
            fieldNum(BOMVersion, PmfTotalCostAllocation),
            isFormula);

        if (isFormula)
        {
            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).allowEdit(allowEdit);
        }

        if (isFormula
            && allowEdit
            && PdsGlobal::pdsIsCWItem(this.bomVersion().ItemId))
        {
            this.enableDSField(
                fieldNum(BOMVersion, PdsCWFromQty),
                true);

            this.enableDSField(
                fieldNum(BOMVersion, PmfBatchSize),
                false);

            this.enableDSField(
                fieldNum(BOMVersion, FromQty),
                false);
        }

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMTable_BOMVersion construct()
    {
        return new PmfFormCtrl_BOMTable_BOMVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>PmfFormCtrl_BOMTable_BOMVersion</c> class.
    /// </summary>
    /// <param name="_fr">
    /// A <c>FormRun</c> object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PmfFormCtrl_BOMTable_BOMVersion</c> class.
    /// </returns>
    public static PmfFormCtrl_BOMTable_BOMVersion newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMTable_BOMVersion::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>