<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListBudgetDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjListBudgetDP</c> class provides methods to fetch the data that is used by the
/// <c>ProjListBudget</c> report.
/// </summary>
/// <remarks>
/// This class contains the declaration of the global variables that are used.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProjListBudget)),
    SRSReportParameterAttribute(classStr(ProjListBudgetContract))
]

public class ProjListBudgetDP extends SRSReportDataProviderPreProcessTempDB
{
    #LocalMacro.SelectProjTransBudget
        where
           (ProjTransBudget.Transid    == ProjTransBudgetQuery.transid)
           && (ProjTransBudget.ModelId   == forecastModelId)
           &&
           (((ProjTransBudget.ProjTransType == ProjTransType::Hour)      && hour)    ||
            ((ProjTransBudget.ProjTransType == ProjTransType::Item)      && item)    ||
            ((ProjTransBudget.ProjTransType == ProjTransType::OnAccount) && onAcc)   ||
            ((ProjTransBudget.ProjTransType == ProjTransType::Revenue)   && revenue) ||
            ((ProjTransBudget.ProjTransType == ProjTransType::Cost)      && expenses))
           &&
           (((ProjTransBudget.ProjType         == ProjType::TimeMaterial)          && TimeMaterial) ||
            ((ProjTransBudget.ProjType         == ProjType::FixedPrice)            && FixedPrice)   ||
            ((ProjTransBudget.ProjType         == ProjType::Investment)            && Investment)   ||
            ((ProjTransBudget.ProjType         == ProjType::Cost)                  && internalCost) ||
            ((ProjTransBudget.ProjType         == ProjType::Internal)              && internalCost) ||
            ((ProjTransBudget.ProjType         == ProjType::Time)                  && Time))
           && ProjTransBudget.LedgerTransDate  >= this.LedgerTransDateFrom()
           && ProjTransBudget.LedgerTransDate  <= this.LedgerTransDateTo()
           && ProjTransBudget.ProjTransDate    >= this.projTransDateFrom()
           && ProjTransBudget.ProjTransDate    <= this.projTransDateTo()
    {
        this.insertTmpProjTransList(ProjTransBudget);
    }
    #Endmacro

    #LocalMacro.SelectProjTransBudget1
        while select ProjTransBudget
            group by %1, ProjTransType, transId
            #SelectProjTransBudget
    #Endmacro

    #LocalMacro.SelectProjTransBudget2
        while select ProjTransBudget
            group by %1, %2, ProjTransType, transId
            #SelectProjTransBudget
    #EndMacro

    #LocalMacro.SelectProjTransBudget3
        while select ProjTransBudget
            group by %1, %2, %3, ProjTransType, transId
            #SelectProjTransBudget
    #Endmacro

    //  variables used for holding UI parameter values.
    TransDate                   projFromDate;
    TransDate                   projToDate;
    TransDate                   ledgerFromDate;
    TransDate                   ledgerToDate;

    boolean                     timeMaterialBillingMethod, fixedPriceBillingMethod, timeMaterial, fixedPrice, investment, internalCost, time;
    boolean                     hour;
    boolean                     expenses;
    boolean                     revenue;
    boolean                     onAcc;
    boolean                     item;
    boolean                     skipZero;
    boolean                     specifyTransactions, specifyBudgetUpdates;
    boolean                     isProjMultipleContractLinesForProjectFeatureEnabled;

    ProjAmountQty               showHour;
    ProjListProfitFactor        plFactor;
    ProjStatementType           statementType;

    ProjTransLayout             paramLevel1, paramLevel2, paramLevel3;
    ProjShowAmount              showAmount;
    ProjCommittedCostStatus     showTransactions;
    ProjForecastModelId         forecastModelId;

    //  variables used in the logic for visibility of columns on the report.
    boolean                     qtyVisible;
    boolean                     wipVisible;
    boolean                     wipInvVisible;
    boolean                     wipNetVisible;
    boolean                     marginVisible;
    boolean                     ratioVisible;
    boolean                     costVisible;
    boolean                     salesVisible;

    //  variables used to hold the label values for columns to be shown on the report.
    str                         periodLabel, selectionLabel;
    str                         qtyVisibility,  wipNetVisibility , marginVisibility;
    str                         salesRatioVisibility, costRatioVisibility;
    str                         costAmountVisibility, salesAmountVisibility;
    str                         wipInvoiceOnAccountVisibility;
    str                         costAmountLabel, salesAmountLabel, marginLabel, wipNetLabel;
    str                         level1Label, level2Label, level3Label;
    str                         accountingCurrency;
    //  variables used for report logic and control flow.
    Name                        name1, name2, name3;
    ProjListStateType           projListStateType;
    projStatement               projStatement;
    ProjCategoryEmpl            level1, level2, level3;
    ProjTransIdBase             transId;
    boolean                     checkProjId;
    boolean                     checkCategoryId;
    boolean                     checkId;
    boolean                     checkResourceCategory;
    TmpProjTransList            tmpProjTransList, tmpProjTransListDetail;
    ProjTransBudget             projTransBudgetQuery;
    Ledger                      ledger;
    ProjListBudgetTmp           projListBudgetTmp;
    TmpProjTransListLedger      tmpProjTransListLedger;
    DimensionProvider           dimProvider;
    int                         hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;

    #define.True    ('true')
    #define.False   ('false')
    #define.Blank   ('')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRangesForPSAContractLineItems</Name>
				<Source><![CDATA[
    private void addRangesForPSAContractLineItems(Query _query)
    {
        QueryBuildDataSource qbdsProjTable = _query.dataSourceTable(tableNum(ProjTable));
        qbdsProjTable.enabled(true);
        QueryBuildDataSource qbdsPSAContractLineItems = _query.dataSourceTable(tableNum(PSAContractLineItems));
        PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
        PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
                qbdsPSAContractLineItems,
                hour,
                expenses,
                revenue,
                item,
                false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForProjTransBudget</Name>
				<Source><![CDATA[
    private void addRangesForProjTransBudget(Query _query)
    {
        QueryBuildDatasource qbdsProjTransBudget = _query.dataSourceTable(tableNum(ProjTransBudget));

        if (timeMaterial)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType)).value(queryValue(ProjType::TimeMaterial));
        }

        if (fixedPrice)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType)).value(queryValue(ProjType::FixedPrice));
        }

        if (time)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType)).value(queryValue(ProjType::Time));
        }

        if (investment)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType)).value(queryValue(ProjType::Investment));
        }

        if (internalCost)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType)).value(queryValue(ProjType::Cost));
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType)).value(queryValue(ProjType::Internal));
        }

        if (hour)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjTransType)).value(queryValue(ProjTransType::Hour));
        }

        if (expenses)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjTransType)).value(queryValue(ProjTransType::Cost));
        }

        if (item)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjTransType)).value(queryValue(ProjTransType::Item));
        }

        if (revenue)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjTransType)).value(queryValue(ProjTransType::Revenue));
        }

        if (onAcc)
        {
            qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjTransType)).value(queryValue(ProjTransType::OnAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemoveFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the logic for the visibility of the data fields that are to be displayed on the report.
    /// </summary>
    public void addRemoveFields()
    {
        qtyVisible     = true;
        wipVisible     = false;
        wipInvVisible  = true;
        wipNetVisible  = true;
        marginVisible  = true;
        ratioVisible   = true;
        costVisible    = true;
        salesVisible   = true;

        if (statementType != ProjStatementType::ProfitLoss)
        {
            ratioVisible  = false;
        }

        if (statementType   == ProjStatementType::Consumption  || statementType   == ProjStatementType::Payroll)
        {
            salesVisible  = false;
        }

        if (statementType   == ProjStatementType::Invoice)
        {
            costVisible   = false;
            qtyVisible    = false;
        }

        if (statementType == ProjStatementType::WIP)
        {
            wipVisible   = true;
            if (! onAcc)
            {
                wipInvVisible   = false;
            }
        }

        if (showHour == ProjAmountQty::Amount || ! hour)
        {
            qtyVisible    = false;
        }

        if (wipVisible && wipInvVisible && hour && !(expenses || item || revenue || onAcc))
        {
            if (statementType == ProjStatementType::WIP)
            {
                wipInvVisible  = false;
            }
        }

        if (hour && !(expenses || item))
        {
            if (showHour == ProjAmountQty::Qty)
            {
                costVisible     = false;
                if (!(revenue || onAcc))
                {
                    wipInvVisible   = false;
                    marginVisible   = false;
                    salesVisible    = false;
                    ratioVisible    = false;
                    wipVisible      = false;
                }
            }
        }

        if (showHour == ProjAmountQty::Qty && (statementType == ProjStatementType::Payroll))
        {
            costVisible     = false;
        }

        if (wipVisible && wipInvVisible && expenses && !(hour || item || revenue || onAcc))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible   = false;
            }
            if (statementType == ProjStatementType::WIP)
            {
                wipInvVisible  = false;
            }
        }

        if (wipVisible && wipInvVisible && item && !(hour || expenses || revenue || onAcc))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible   = false;
            }
            if (statementType == ProjStatementType::WIP)
            {
                wipInvVisible  = false;
            }
        }

        if (wipVisible && wipInvVisible && revenue && !(hour || expenses || item || onAcc))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible   = false;
            }
            if (statementType == ProjStatementType::ProfitLoss)
            {
                costVisible     = false;
                marginVisible   = false;
            }
            if (statementType == ProjStatementType::WIP)
            {
                costVisible     = false;
                wipInvVisible   = false;
                marginVisible   = false;
                wipNetVisible   = false;
            }
        }

        if (wipVisible && wipInvVisible && onAcc && !(hour || expenses || item || revenue))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible   = false;
            }

            if (statementType == ProjStatementType::ProfitLoss)
            {
                costVisible     = false;
                marginVisible   = false;
            }

            if (statementType == ProjStatementType::WIP)
            {
                costVisible     = false;
                salesVisible    = false;
                wipNetVisible   = false;
            }
        }

        if (revenue && onAcc && !(hour || expenses || item))
        {
            if (statementType == ProjStatementType::WIP)
            {
                costVisible     = false;
            }
        }

        // "Total cost" and "Gross Margin" should disappear when only transaction "Fee" or "On account" is selected.

        if (statementType == ProjStatementType::ProfitLoss)
        {
            if (!(hour || item || expenses))
            {
                costVisible     = false;
                marginVisible   = false;
            }
        }

        if (! qtyVisible)
        {
            qtyVisibility = #False;
        }

        if (! wipVisible)
        {
            wipInvoiceOnAccountVisibility = #False;
            wipNetVisibility = #False;
        }

        if (! wipInvVisible)
        {
            wipInvoiceOnAccountVisibility = #False;
        }

        if (! wipNetVisible)
        {
            wipNetVisibility        = #False;
        }

        if (! ratioVisible)
        {
            marginVisibility        = #False;
            salesRatioVisibility    = #False;
            costRatioVisibility     = #False;
        }

        if (! marginVisible)
        {
            marginVisibility        = #False;
        }

        if (! costVisible)
        {
            costAmountVisibility    = #False;
        }

        if (! salesVisible)
        {
            salesAmountVisibility   = #False;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the logic for populating the <c>TmpProjTransList</c> table by using the UI parameter
    /// values.
    /// </summary>
    /// <param name="_queryRun">
    /// Gets the <c>ProjTransBudget</c> table for data manipulation.
    /// </param>
    public void buildTmp(QueryRun _queryRun)
    {
        ProjTransBudget    projTransBudget;

        projTransBudgetQuery = _queryRun.get(tableNum(ProjTransBudget));

        switch (paramLevel1)
        {
            case ProjTransLayout::Project:
                checkProjId = true;
                if (enum2str(paramLevel2) != #Blank)
                {
                    if (paramLevel2 == ProjTransLayout::Category)
                    {
                        checkCategoryId = true;

                        if (paramLevel3 == ProjTransLayout::ID)
                        {
                            checkId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, EmplItemId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ResourceCategory)
                        {
                            checkResourceCategory = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, CategoryId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::ID)
                    {
                        checkId = true;

                        if (paramLevel3 == ProjTransLayout::Category)
                        {
                            checkCategoryId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, CategoryId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ResourceCategory)
                        {
                            checkResourceCategory = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, EmplItemId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::ResourceCategory)
                    {
                        checkResourceCategory = true;

                        if (paramLevel3 == ProjTransLayout::Category)
                        {
                            checkCategoryId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, CategoryId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ID)
                        {
                            checkId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, EmplItemId));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                    }
                }
                else
                {
                    this.selectProjTransBudget1(fieldNum(ProjTransBudget, ProjId));
                }
                break;
            case ProjTransLayout::Category:
                checkCategoryId = true;

                if (enum2str(paramLevel2) != #Blank)
                {
                    if (paramLevel2 == ProjTransLayout::Project)
                    {
                        checkProjId = true;

                        if (paramLevel3 == ProjTransLayout::ID)
                        {
                            checkId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, EmplItemId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ResourceCategory)
                        {
                            checkResourceCategory = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ProjId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::ID)
                    {
                        checkId = true;

                        if (paramLevel3 == ProjTransLayout::Project)
                        {
                            checkProjId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ProjId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ResourceCategory)
                        {
                            checkResourceCategory = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, EmplItemId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::ResourceCategory)
                    {
                        checkResourceCategory = true;

                        if (paramLevel3 == ProjTransLayout::Project)
                        {
                            checkProjId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, ProjId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ID)
                        {
                            checkId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, EmplItemId));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                    }
                }
                else
                {
                    this.selectProjTransBudget1(fieldNum(ProjTransBudget, CategoryId));
                }
                break;
            case ProjTransLayout::ID:
                checkId     = true;

                if (enum2str(paramLevel2) != #Blank)
                {
                    if (paramLevel2 == ProjTransLayout::Project)
                    {
                        checkProjId = true;

                        if (paramLevel3 == ProjTransLayout::Category)
                        {
                            checkCategoryId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, CategoryId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ResourceCategory)
                        {
                            checkResourceCategory = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ProjId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::Category)
                    {
                        checkCategoryId = true;

                        if (paramLevel3 == ProjTransLayout::Project)
                        {
                            checkProjId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ProjId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ResourceCategory)
                        {
                            checkResourceCategory = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, CategoryId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::ResourceCategory)
                    {
                        checkResourceCategory = true;

                        if (paramLevel3 == ProjTransLayout::Project)
                        {
                            checkProjId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, ProjId));
                        }
                        else if (paramLevel3 == ProjTransLayout::Category)
                        {
                            checkCategoryId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, CategoryId));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ResourceCategory));
                        }
                    }
                }
                else
                {
                    this.selectProjTransBudget1(fieldNum(ProjTransBudget, EmplItemId));
                }
                break;
            case ProjTransLayout::ResourceCategory:
                checkResourceCategory     = true;

                if (enum2str(paramLevel2) != #Blank)
                {
                    if (paramLevel2 == ProjTransLayout::Project)
                    {
                        checkProjId = true;

                        if (paramLevel3 == ProjTransLayout::Category)
                        {
                            checkCategoryId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, CategoryId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ID)
                        {
                            checkId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, ProjId), fieldNum(ProjTransBudget, EmplItemId));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, ProjId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::Category)
                    {
                        checkCategoryId = true;

                        if (paramLevel3 == ProjTransLayout::Project)
                        {
                            checkProjId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, ProjId));
                        }
                        else if (paramLevel3 == ProjTransLayout::ID)
                        {
                            checkId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, CategoryId), fieldNum(ProjTransBudget, EmplItemId));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, CategoryId));
                        }
                    }
                    else if (paramLevel2 == ProjTransLayout::ID)
                    {
                        checkId = true;

                        if (paramLevel3 == ProjTransLayout::Project)
                        {
                            checkProjId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, ProjId));
                        }
                        else if (paramLevel3 == ProjTransLayout::Category)
                        {
                            checkCategoryId = true;
                            this.selectProjTransBudget3(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, EmplItemId), fieldNum(ProjTransBudget, CategoryId));
                        }
                        else
                        {
                            this.selectProjTransBudget2(fieldNum(ProjTransBudget, ResourceCategory), fieldNum(ProjTransBudget, EmplItemId));
                        }
                    }
                }
                else
                {
                    this.selectProjTransBudget1(fieldNum(ProjTransBudget, ResourceCategory));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>CostAmount</c> value that is based on the selected UI parameters.
    /// </summary>
    /// <returns>
    /// <c>CostAmount</c> value of the <c>tmpProjTransListDetail</c> table.
    /// </returns>
    private CostAmount costAmount()
    {
        if (specifyTransactions)
        {
            select sum(CostAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3 &&
                  tmpProjTransListDetail.TransId  == transId;
        }
        else if (paramLevel3)
        {
            select sum(CostAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select sum(CostAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select sum(CostAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1;
        }

        return tmpProjTransListDetail.CostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjTrans</c> class object that is used to populate the <c>TmpProjTransList</c> table.
    /// </summary>
    /// <param name="_projTransBudget">
    /// Gets the <c>TransType</c> and <c>TransId</c> values that are used for data manipulation.
    /// </param>
    /// <returns>
    /// A <c>ProjTrans</c> object.
    /// </returns>
    public ProjTrans findProjTrans(ProjTransBudget _projTransBudget)
    {
        ProjTrans               projTransReturn;
        ProjForecastEmpl        projForecastEmpl;
        ProjForecastCost        projForecastCost;
        ProjForecastRevenue     projForecastRevenue;
        ForecastSales           forecastSales;
        ProjForecastOnAcc       projForecastOnAcc;

        switch (_projTransBudget.ProjTransType)
        {
            case ProjTransType::Revenue:
                projForecastRevenue     = ProjForecastRevenue::find(_projTransBudget.TransId);
                projTransReturn         = ProjTrans::newProjForecastRevenue(projForecastRevenue);
                break;

            case ProjTransType::Hour:
                projForecastEmpl        = ProjForecastEmpl::find(_projTransBudget.TransId);
                projTransReturn         = ProjTrans::newProjForecastEmpl(projForecastEmpl);
                break;

            case ProjTransType::Cost:
                projForecastCost        = ProjForecastCost::find(_projTransBudget.TransId);
                projTransReturn         = ProjTrans::newProjForecastCost(projForecastCost);
                break;

            case ProjTransType::Item:
                forecastSales           = ForecastSales::findProjTransId(_projTransBudget.TransId);
                projTransReturn         = ProjTrans::newForecastSales(forecastSales);
                break;

            case ProjTransType::OnAccount:
                projForecastOnAcc       = ProjForecastOnAcc::find(_projTransBudget.TransId);
                projTransReturn         = ProjTrans::newProjForecastOnAcc(projForecastOnAcc);
                break;
        }

        return projTransReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPeriodLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period label value that is based on the selected UI parameters.
    /// </summary>
    /// <returns>
    /// The String value that is based on the selected UI parameters.
    /// </returns>
    /// <remarks>
    /// Operates on the values for the UI parameters such as ProjFromDate, ProjToDate, LedgerFromDate, and
    /// LedgerToDate to display the text in the page header of the Microsoft SQL Server Reporting Services
    /// report.
    /// </remarks>
    public str formatPeriodLabel()
    {
        if (ledgerFromDate || (! projFromDate && ! projToDate && ledgerToDate))
        {
            return strFmt("@SYS91012", date2StrUsr(this.ledgerTransDateFrom(), DateFlags::FormatAll),
                        date2StrUsr(this.ledgerTransDateTo() == dateMax() ? dateNull() : this.ledgerTransDateTo(), DateFlags::FormatAll));
        }
        else
        {
            return strFmt("@SYS91013", date2StrUsr(this.projTransDateFrom(), DateFlags::FormatAll),
                        date2StrUsr(this.projTransDateTo() == dateMax() ? dateNull() : this.projTransDateTo(), DateFlags::FormatAll));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a String value that is based on the selected UI parameters.
    /// </summary>
    /// <returns>
    /// A String value that is based on the selected UI parameters.
    /// </returns>
    /// <remarks>
    /// Operates on the values for the UI parameters such as ProjectStatement, ForecastModel, and
    /// ShowAmount to display text in the page header of the Microsoft SQL Server Reporting Services report.
    /// </remarks>
    public str formatSelection()
    {
        str displayLabel;

        displayLabel = strFmt('%1 %2',"@SYS80981",forecastModelId);

        if (showAmount == ProjShowAmount::Amount1000 ||
        showAmount == ProjShowAmount::Amount1000000)
        {
            displayLabel += strFmt(', %1',showAmount);
        }

        return displayLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListBudgetTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the temporary table and retrieves the data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [
    SRSReportDataSetAttribute(tableStr('ProjListBudgetTmp'))
]
public ProjListBudgetTmp getProjListBudgetTmp()
    {
        select  projListBudgetTmp;
        return  projListBudgetTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>idLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a label for the levels on the report.
    /// </summary>
    /// <param name="_level">
    /// The level value from the UI parameter.
    /// </param>
    /// <returns>
    /// A String label value.
    /// </returns>
    public str idLabel(ProjTransLayout _level)
    {
        str label;

        switch (_level)
        {
            case ProjTransLayout::None:
                label   = #Blank;
                break;
            case ProjTransLayout::Project:
                label   = "@SYS4534";
                break;
            case ProjTransLayout::Category:
                label   = "@SYS71008";
                break;
            case ProjTransLayout::ID:
            if ((hour || revenue || expenses) && !(item || onAcc))
                {
                    label   = "@Res:Resource";
                }
                else if ((item || onAcc) && !(expenses || hour || revenue))
                {
                    label   = "@SYS14428";
                }
                else
                {
                    label   = "@Res:ResourceItem";
                }
                break;
            case ProjTransLayout::ResourceCategory:
                label   = "@PSA2679";
                break;
        }

        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProjTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required data and inserts it into the <c>TmpProjTransList</c> table.
    /// </summary>
    /// <param name="_projTransBudget">
    /// The source of the values to assign to the <c> TmpProjTransList </c> table.
    /// </param>
    public void insertTmpProjTransList(ProjTransBudget _projTransBudget)
    {
        ProjTrans           projTrans;
        ProjTransBudget     projTransBudgetLedgerUpdate;
        QueryRun            queryLedger;

        projTrans = this.findProjTrans(_projTransBudget);

        tmpProjTransList.clear();

        tmpProjTransList.Level1     = this.printLevel(paramLevel1,projTrans);
        tmpProjTransList.Level2     = this.printLevel(paramLevel2,projTrans);
        tmpProjTransList.Level3     = this.printLevel(paramLevel3,projTrans);
        tmpProjTransList.TransId    = projTrans.transId();

        if (specifyTransactions)
        {
            tmpProjTransList.TransDate      = projTrans.transDate();
            tmpProjTransList.LinePropertyId = projTrans.linePropertyId();

            if (projTrans.transType() == ProjTransType::Cost ||
            projTrans.transType() == ProjTransType::Item)
            {
                tmpProjTransList.Txt    =  num2str(projTrans.qty(),-1,-1,-1,-1)+' / '+projTrans.txt();
            }
            else
            {
                tmpProjTransList.Txt    = projTrans.txt();
            }
        }

        tmpProjTransList.CostPrice      = projTrans.costPrice();
        tmpProjTransList.SalesPrice     = projTrans.salesPrice();

        tmpProjTransList.TransType      = projTrans.transType();

        this.setProjStmtParm(paramLevel1, tmpProjTransList.Level1);

        this.setProjStmtParm(paramLevel2, tmpProjTransList.Level2);

        this.setProjStmtParm(paramLevel3, tmpProjTransList.Level3);

        projStatement.parmTransId(tmpProjTransList.TransId);
        this.setStatementTransType(_projTransBudget);

        if (statementType == ProjStatementType::ProfitLoss)
        {
            tmpProjTransList.Salary             = projStatement.a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
        }
        else
        {
            tmpProjTransList.Salary             = projStatement.a310_Cost_Hour();
        }

        if (statementType == ProjStatementType::WIP)
        {
            tmpProjTransList.CostAmount         = projStatement.costAmount();
            tmpProjTransList.SalesAmount        = projStatement.salesAmount()+projStatement.b400_wip_Invoiced_OnAccount();
            tmpProjTransList.wipInvoicedOnAcc   = projStatement.b400_wip_Invoiced_OnAccount();
        }
        else
        {
            tmpProjTransList.CostAmount         = projStatement.costAmount();
            tmpProjTransList.SalesAmount        = projStatement.salesAmount();
        }

        if (showAmount == ProjShowAmount::Amount1000)
        {
            tmpProjTransList.CostAmount         = tmpProjTransList.CostAmount / 1000;
            tmpProjTransList.SalesAmount        = tmpProjTransList.SalesAmount / 1000;
            tmpProjTransList.wipInvoicedOnAcc   = tmpProjTransList.wipInvoicedOnAcc / 1000;
            tmpProjTransList.Salary             = tmpProjTransList.Salary / 1000;
        }
        else if (showAmount == ProjShowAmount::Amount1000000)
        {
            tmpProjTransList.CostAmount         = tmpProjTransList.CostAmount / 1000000;
            tmpProjTransList.SalesAmount        = tmpProjTransList.SalesAmount / 1000000;
            tmpProjTransList.wipInvoicedOnAcc   = tmpProjTransList.wipInvoicedOnAcc / 1000000;
            tmpProjTransList.Salary             = tmpProjTransList.Salary / 1000000;
        }

        // For quantity, include only the one with category not tied to indirect cost component.
        if (_projTransBudget.ProjTransType == ProjTransType::Hour && ProjCategory::find(_projTransBudget.CategoryId).PSAIndirectComponent == NoYes::No)
        {
            tmpProjTransList.Qty                = projStatement.transListQty();
        }

        tmpProjTransList.insert();

        if (specifyBudgetUpdates)
        {
            queryLedger = new QueryRun(projStatement.queryBudgetExecuted());

            while (queryLedger.next())
            {
                projTransBudgetLedgerUpdate              = queryLedger.get(tableNum(ProjTransBudget));

                tmpProjTransListLedger.TransId           = projTransBudgetLedgerUpdate.TransId;
                tmpProjTransListLedger.LedgerDimension   = projTransBudgetLedgerUpdate.LedgerDimension;
                tmpProjTransListLedger.LedgerPostingType = projTransBudgetLedgerUpdate.PostingType;
                tmpProjTransListLedger.LedgerTransDate   = projTransBudgetLedgerUpdate.LedgerTransDate;
                tmpProjTransListLedger.Qty               = projTransBudgetLedgerUpdate.Qty;
                tmpProjTransListLedger.Voucher           = projTransBudgetLedgerUpdate.Voucher;

                tmpProjTransListLedger.CostAmount        = 0;
                tmpProjTransListLedger.SalesAmount       = 0;

                if (statementType == ProjStatementType::WIP)
                {
                    if (projTransBudgetLedgerUpdate.CostSales == ProjCostSales::Cost)
                    {
                        tmpProjTransListLedger.CostAmount   = projTransBudgetLedgerUpdate.AmountMst;
                    }
                    else
                    {
                        if (projTransBudgetLedgerUpdate.ProjTransType == ProjTransType::OnAccount)
                        {
                            tmpProjTransListLedger.wipInvoicedOnAcc = projTransBudgetLedgerUpdate.AmountMst;
                        }
                        else

                        {
                            tmpProjTransListLedger.SalesAmount      = projTransBudgetLedgerUpdate.AmountMst;
                        }
                    }
                }
                else
                {
                    if (projTransBudgetLedgerUpdate.CostSales == ProjCostSales::Cost)
                    {
                        tmpProjTransListLedger.CostAmount           = projTransBudgetLedgerUpdate.AmountMst;
                    }
                    else
                    {
                        tmpProjTransListLedger.SalesAmount          = projTransBudgetLedgerUpdate.AmountMst;
                    }
                }

                if (showAmount == ProjShowAmount::Amount1000)
                {
                    tmpProjTransListLedger.CostAmount       = tmpProjTransListLedger.CostAmount  / 1000;
                    tmpProjTransListLedger.SalesAmount      = tmpProjTransListLedger.SalesAmount / 1000;
                    tmpProjTransListLedger.wipInvoicedOnAcc = tmpProjTransListLedger.wipInvoicedOnAcc / 1000;
                }
                else if (showAmount == ProjShowAmount::Amount1000000)
                {
                    tmpProjTransListLedger.CostAmount       = tmpProjTransListLedger.CostAmount  / 1000000;
                    tmpProjTransListLedger.SalesAmount      = tmpProjTransListLedger.SalesAmount / 1000000;
                    tmpProjTransListLedger.wipInvoicedOnAcc = tmpProjTransListLedger.wipInvoicedOnAcc / 1000000;
                }

                tmpProjTransListLedger.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjStmtParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets parm methods of <c>projStatement</c> class instance.
    /// </summary>
    /// <param name = "_paramLevel">
    ///     UI parameter.
    /// </param>
    /// <param name = "_level">
    ///     Project category ID.
    /// </param> 
    protected void setProjStmtParm(ProjTransLayout _paramLevel, ProjCategoryId _level)
    {
        switch (_paramLevel)
        {
            case ProjTransLayout::Project:
                projStatement.parmProjId(_level);
                break;

            case ProjTransLayout::Category:
                projStatement.parmCategoryId(_level);
                break;

            case ProjTransLayout::ID:
                projStatement.parmEmplItemId(_level);
                break;

            case ProjTransLayout::ResourceCategory:
                projStatement.parmResourceCategory(str2int64(_level));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required data and inserts it into the User defined temporary table.
    /// </summary>
    /// <param name="_tmpProjTransList">
    /// Provides values to be inserted into <c> ProjListBudgetTmp </c> table.
    /// </param>
    /// <param name="_tmpProjTransListLedger">
    /// Provides values to be inserted into <c> ProjListBudgetTmp </c> table.
    /// </param>
    /// <param name="_showLedger">
    /// Decides whether to insert the values of TmpProjTransLedger table or dummy values into the UI temp table.
    /// </param>
    private void insertTmpTable(TmpProjTransList _tmpProjTransList, TmpProjTransListLedger _tmpProjTransListLedger , int _showLedger )
    {
        projListBudgetTmp.clear();
        projListBudgetTmp.Level1                        =   level1;
        projListBudgetTmp.Name1                         =   name1;
        projListBudgetTmp.Level2                        =   level2;
        projListBudgetTmp.Name2                         =   name2;
        projListBudgetTmp.Level3                        =   level3;
        projListBudgetTmp.Name3                         =   name3;
        projListBudgetTmp.TransType                     =   level1 ? _tmpProjTransList.TransType:ProjTransType::None;
        projListBudgetTmp.TransDate                     =   _tmpProjTransList.TransDate;
        projListBudgetTmp.Voucher                       =   queryValue(_tmpProjTransList.VoucherJournal);
        projListBudgetTmp.TransIdReport                 =   transId;
        projListBudgetTmp.LinePropertyId                =   _tmpProjTransList.LinePropertyId;
        projListBudgetTmp.TransTxt                      =   _tmpProjTransList.Txt;
        projListBudgetTmp.Amount1000000Decimals         =   amountDecimals;
        projListBudgetTmp.Amount1000Decimals            =   amountDecimals;
        projListBudgetTmp.HourQtyDecimals               =   hourQtyDecimals;
        projListBudgetTmp.ValueAddedDecimals            =   valueAddedDecimals;
        projListBudgetTmp.GrossMarginDecimals           =   grossMarginDecimals;
        projListBudgetTmp.CostPrice                     =   _tmpProjTransList.CostPrice;
        projListBudgetTmp.SalesPrice                    =   _tmpProjTransList.SalesPrice;
        if (_showLedger == 0)
        {
            projListBudgetTmp.Qty                       =   this.qty();
            projListBudgetTmp.CostAmount                =   this.costAmount();
            projListBudgetTmp.SalesAmount               =   this.salesAmount();
            projListBudgetTmp.Margin                    =   projListBudgetTmp.SalesAmount - projListBudgetTmp.CostAmount;
        }
        projListBudgetTmp.wipInvoicedOnAccount          =   this.wipInvoicedOnAcc();
        projListBudgetTmp.wiPnet                        =   projListBudgetTmp.SalesAmount + projListBudgetTmp.CostAmount -  projListBudgetTmp.wipInvoicedOnAccount;
        projListBudgetTmp.SalesRatio                    =   this.salesRatio();
        projListBudgetTmp.CostRatio                     =   ProjParameters::grossMarginPct(projListBudgetTmp.CostAmount,
                                                            projListBudgetTmp.SalesAmount,projListBudgetTmp.Margin);
        projListBudgetTmp.CurrencyCode                  =   ledger.AccountingCurrency;

        if (_showLedger != 0)
        {
            projListBudgetTmp.DimensionDisplay           =   dimProvider.getStringValueFromCursor(_tmpProjTransListLedger, fieldStr(TmpProjTransListLedger, LedgerDimension));
            projListBudgetTmp.LedgerQty                  =   _tmpProjTransListLedger.Qty;
            projListBudgetTmp.LedgerVoucher              =   _tmpProjTransListLedger.Voucher;
            projListBudgetTmp.LedgerCostAmount           =   _tmpProjTransListLedger.CostAmount;
            projListBudgetTmp.LedgerSalesAmount          =   _tmpProjTransListLedger.SalesAmount;
            projListBudgetTmp.wiPnetLedger               =   _tmpProjTransListLedger.SalesAmount-_tmpProjTransListLedger.wipInvoicedOnAcc;
            projListBudgetTmp.LedgerTransDate            =   _tmpProjTransListLedger.LedgerTransDate;
            projListBudgetTmp.LedgerPostingType          =   _tmpProjTransListLedger.LedgerPostingType;
            projListBudgetTmp.LedgerWIPInvoicedOnAccount =   _tmpProjTransListLedger.wipInvoicedOnAcc;
        }

        projListBudgetTmp.QtyVisibility                 =   qtyVisibility;
        projListBudgetTmp.WipNetVisibility              =   wipNetVisibility;
        projListBudgetTmp.MarginVisibility              =   marginVisibility;
        projListBudgetTmp.CostRatioVisibility           =   costRatioVisibility;
        projListBudgetTmp.SalesRatioVisibility          =   salesRatioVisibility;
        projListBudgetTmp.CostAmountVisibility          =   costAmountVisibility;
        projListBudgetTmp.SalesAmountVisibility         =   salesAmountVisibility;
        projListBudgetTmp.WipInvoiceOnAccountVisibility =   wipInvoiceOnAccountVisibility;

        projListBudgetTmp.WipNetLabel                   =   wipNetLabel;
        projListBudgetTmp.MarginLabel                   =   marginLabel;
        projListBudgetTmp.Level1Label                   =   level1Label;
        projListBudgetTmp.Level2Label                   =   level2Label;
        projListBudgetTmp.Level3Label                   =   level3Label;
        projListBudgetTmp.CostRatioLabel                =   ProjParameters::find().grossMarginDisplayLabel();
        projListBudgetTmp.SalesRatioLabel               =   ProjParameters::find().valueAddedDisplayLabel();
        projListBudgetTmp.CostAmountLabel               =   costAmountLabel;
        projListBudgetTmp.SalesAmountLabel              =   salesAmountLabel;

        if (!skipZero || ( projListBudgetTmp.Qty != 0 ||
                        projListBudgetTmp.CostAmount != 0 ||
                        projListBudgetTmp.SalesAmount != 0 ||
                        projListBudgetTmp.wipInvoicedOnAccount != 0 ||
                        projListBudgetTmp.wiPnet !=0 ) )

        {
            projListBudgetTmp.DetailVisibility  = #True;
        }
        else
        {
            projListBudgetTmp.DetailVisibility  = #False;
        }

        if (! (enum2str(paramLevel2) != #Blank || enum2str(paramLevel3) != #Blank))
        {
            projListBudgetTmp.GroupVisibility   = #False;
        }
        else
        {
            projListBudgetTmp.GroupVisibility = #True;
        }

        projListBudgetTmp.PeriodLabel       = periodLabel;
        projListBudgetTmp.SelectionLabel    = selectionLabel;

        projListBudgetTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransDateFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks a null date that is provided as a value for the LedgerFromDate UI parameter.
    /// </summary>
    /// <returns>
    /// A null date or the ledgerFromDate value that is based on the UI parameter.
    /// </returns>
    public TransDate ledgerTransDateFrom()
    {
        if (! ledgerFromDate)
        {
            return dateNull();
        }

        return ledgerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransDateTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks a null date that is provided as a value for the LedgerToDate UI parameter.
    /// </summary>
    /// <returns>
    /// null date or the ledgerToDate value that is based on the UI parameter.
    /// </returns>
    public TransDate ledgerTransDateTo()
    {
        if (! ledgerToDate)
        {
            return dateMax();
        }

        return ledgerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leftcontrol</Name>
				<Source><![CDATA[
    /// <summary>
    /// sets the visibility of the columns on the report.
    /// </summary>
    /// <remarks>
    /// Chooses the appropriate field to be displayed as the second column from the right end of the report.
    /// </remarks>
    public void leftcontrol()
    {
        if (qtyVisibility != #False)
        {
            qtyVisibility = #True;
            return;
        }

        if (costAmountVisibility != #False)
        {
            costAmountVisibility = #True;
            return;
        }

        if (salesAmountVisibility != #False)
        {
            salesAmountVisibility = #True;
            return;
        }

        if (wipInvoiceOnAccountVisibility != #False)
        {
            wipInvoiceOnAccountVisibility = #True;
            return;
        }

        if (wipNetVisibility != #False)
        {
            wipNetVisibility = #True;
            return;
        }

        if (marginVisibility != #False)
        {
            marginVisibility = #True;
            return;
        }

        if (salesRatioVisibility != #False)
        {
            salesRatioVisibility = #True;
            return;
        }

        costRatioVisibility = #True;
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the Report Query based on the UI parameters.
    /// </summary>
    /// <param name="_query">
    /// Manipulates the query.
    /// </param>
    /// <returns>
    /// A modified query object that contains the hidden range values that were added to it.
    /// </returns>
    public Query modifyQueryBudget(Query _query)
    {
        #define.Hide(2)

        QueryBuildDataSource qbdsProjTransBudget =_query.dataSourceTable(tableNum(ProjTransBudget));

        qbdsProjTransBudget.orderMode(OrderMode::GroupBy);
        qbdsProjTransBudget.addGroupByField(fieldNum(ProjTransBudget, TransId));

        if (isProjMultipleContractLinesForProjectFeatureEnabled)
        {
            this.addRangesForPSAContractLineItems(_query);
        }
        else
        {
            QueryBuildRange rangeHide = qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType));
            rangeHide.status(#Hide);

            rangeHide = qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjTransType));
            rangeHide.status(#Hide);

            this.addRangesForProjTransBudget(_query);

            QueryBuildRange rangeDummy;

            if (! (timeMaterial || fixedPrice || investment || internalCost))
            {
                rangeDummy = qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjType));
                rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (! (hour || expenses || item || revenue || onAcc))
            {
                rangeDummy = qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget,ProjTransType));
                rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks zero values for the columns in each row.
    /// </summary>
    /// <param name="_niveau">
    /// Manipulates the values that are retrieved from the <c>TmpProjTransWIPOperation</c> table.
    /// </param>
    /// <param name="_projTrans">
    /// The values to retrieve from the <c>TmpProjTransWIP</c> table.
    /// </param>
    /// <returns>
    /// A Boolean value that is based on the given conditions in the code.
    /// </returns>
    public ProjCategoryEmpl printLevel(ProjTransLayout _niveau, ProjTrans _projTrans)
    {
        switch (_niveau)
        {
            case ProjTransLayout::Project:
                return _projTrans.projId();

            case ProjTransLayout::Category:
                return _projTrans.categoryId();

            case ProjTransLayout::ID:
            if (_projTrans.transType() == ProjTransType::Hour ||
                _projTrans.transType() == ProjTransType::Cost)
                {
                    return int642str(_projTrans.resource());
                }
                else
            if (_projTrans.transType() == ProjTransType::Item)
                {
                    return _projTrans.itemId();
                }
                else
            if (_projTrans.transType() == ProjTransType::Revenue)
                {
                    return int642str(_projTrans.resource());
                }

            case ProjTransLayout::ResourceCategory:
                return int642str(_projTrans.resourceCategory());
        }

        return #Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Groups the data in the Report temporary table and inserts the data into the
    /// <c>ProjListBudgetTmp</c> table.
    /// </summary>
    public void printReport()
    {
        if (specifyTransactions)
        {
            while select tmpProjTransList
            group by Level1, Level2, Level3, TransId
            {
                this.setLevel();
                this.setName();
                this.insertTmpTable(tmpProjTransList, tmpProjTransListLedger, 0);
                if (specifyBudgetUpdates)
                {
                    while select tmpProjTransListLedger
                    where tmpProjTransListLedger.TransId  == tmpProjTransList.TransId
                    {
                        this.insertTmpTable(tmpProjTransList, tmpProjTransListLedger, 1);
                    }
                }
            }
        }
        else
        {
            while select tmpProjTransList
            group by Level1, Level2, Level3
            {
                this.setLevel();
                this.setName();
                this.insertTmpTable(tmpProjTransList, tmpProjTransListLedger, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjTransBudgetQuery</Name>
				<Source><![CDATA[
    private void processProjTransBudgetQuery(Query _query)
    {
        QueryRun queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            ProjTransBudget projTransBudget = queryRun.get(tableNum(ProjTransBudget));
            this.insertTmpProjTransList(projTransBudget);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. This method should compute data and populate the data
    /// tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        QueryRun    queryRun;
        Query       reportQuery;

        ProjListBudgetContract contract     =   this.parmDataContract() as ProjListBudgetContract;
        dimProvider                         =   new DimensionProvider();
        timeMaterialBillingMethod           =   contract.parmProjTimeAndMaterialBillingMethod();
        fixedPriceBillingMethod             =   contract.parmProjFixedPriceBillingMethod();
        timeMaterial                        =   contract.parmProjTimeAndMaterial();
        fixedPrice                          =   contract.parmProjFixedPrice();
        investment                          =   contract.parmProjInvestment();
        internalCost                        =   contract.parmProjInternalCost();
        time                                =   contract.parmProjTime();
        hour                                =   contract.parmProjHour();
        expenses                            =   contract.parmProjExpenses();
        item                                =   contract.parmProjItem();
        revenue                             =   contract.parmProjRevenue();
        onAcc                               =   contract.parmProjOnAccount();
        projFromDate                        =   contract.parmProjFromDate();
        projToDate                          =   contract.parmProjToDate();
        ledgerFromDate                      =   contract.parmLedgerFromDate();
        ledgerToDate                        =   contract.parmLedgerToDate();
        statementType                       =   contract.parmStatementType();
        paramLevel1                         =   contract.parmProjLevel1();
        paramLevel2                         =   contract.parmProjLevel2();
        paramLevel3                         =   contract.parmProjLevel3();
        skipZero                            =   contract.parmProjSkipZero();
        showAmount                          =   contract.parmProjShowAmt();
        showHour                            =   contract.parmProjShowHour();
        plFactor                            =   contract.parmProjPLRatio();
        specifyTransactions                 =   contract.parmProjSpecifyTransactions();
        specifyBudgetUpdates                =   contract.parmProjSpecifyBudgetUpdates();
        forecastModelId                     =   contract.parmForecastModelId();
        isProjMultipleContractLinesForProjectFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        projListStateType                   =   projStatement::statementType2StateType(statementType);
        projStatement                       =   projStatement::construct(projListStateType);

        this.setProjStatementParm();
        this.setDisplayLabel();
        this.addRemoveFields();
        this.leftcontrol();
        this.rightcontrol();

        periodLabel             = this.formatPeriodLabel();
        selectionLabel          = this.formatSelection();

        [hourQtyDecimals, amountDecimals,
        grossMarginDecimals, valueAddedDecimals] = this.setNoOfDecimals(showAmount);

        reportQuery             = this.modifyQueryBudget(this.parmQuery());
        queryRun                = new QueryRun(reportQuery);

        ledger = Ledger::findByLegalEntity(CompanyInfo::current());

        while (queryRun.next())
        {
            this.buildTmp(queryRun);
        }

        tmpProjTransListDetail.linkPhysicalTableInstance(tmpProjTransList);
        this.printReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransDateFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks any null date that is provided for the ProjFromDate parameter.
    /// </summary>
    /// <returns>
    /// A null date or a fromDate value that is based on the UI parameter.
    /// </returns>
    public TransDate projTransDateFrom()
    {
        if (! projFromDate)
        {
            return dateNull();
        }

        return projFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransDateTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks any null date that is provided for the <c>ProjToDate</c> parameter.
    /// </summary>
    /// <returns>
    /// A null date or <c>toDate</c> value that is based on the UI parameter.
    /// </returns>
    public TransDate projTransDateTo()
    {
        if (! projToDate)
        {
            return dateMax();
        }

        return projToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>Qty</c> value that is based on the UI parameters.
    /// </summary>
    /// <returns>
    /// The <c>Qty</c> value from the <c>tmpProjTransListDetail</c> table.
    /// </returns>
    public Qty qty()
    {
        if (specifyTransactions)
        {
            select sum(Qty) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3 &&
                  tmpProjTransListDetail.TransId  == transId;
        }
        else if (paramLevel3)
        {
            select sum(Qty) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select sum(Qty) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select sum(Qty) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1;
        }

        return tmpProjTransListDetail.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightcontrol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the columns on the report.
    /// </summary>
    /// <remarks>
    /// Chooses the appropriate field to be displayed as the first column from the right end of the report.
    /// </remarks>
    public void rightcontrol()
    {
        if (costRatioVisibility != #False)
        {
            costRatioVisibility = #True;
            return;
        }

        if (salesRatioVisibility != #False)
        {
            salesRatioVisibility = #True;
            return;
        }

        if (marginVisibility != #False)
        {
            marginVisibility = #True;
            return;
        }

        if (wipNetVisibility != #False)
        {
            wipNetVisibility = #True;
            return;
        }

        if (wipInvoiceOnAccountVisibility != #False)
        {
            wipInvoiceOnAccountVisibility = #True;
            return;
        }

        if (costAmountVisibility != #False)
        {
            costAmountVisibility = #True;
            return;
        }

        if (salesAmountVisibility != #False)
        {
            salesAmountVisibility = #True;
            return;
        }

        qtyVisibility = #True;
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>Salary</c> value that is based on the UI parameters.
    /// </summary>
    /// <returns>
    /// The <c>Salary</c> value from the <c>tmpProjTransListDetail</c> table.
    /// </returns>
    public AmountMST salary()
    {
        if (specifyTransactions)
        {
            select sum(Salary) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3 &&
                  tmpProjTransListDetail.TransId  == transId;
        }
        else if (paramLevel3)
        {
            select sum(Salary) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select sum(Salary) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select sum(Salary) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1;
        }

        return tmpProjTransListDetail.Salary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>SalesAmount</c> value that is based on the UI parameters.
    /// </summary>
    /// <returns>
    /// The <c>SalesAmount</c> value from the <c>tmpProjTransListDetail</c> table.
    /// </returns>
    public SalesAmount salesAmount()
    {
        if (specifyTransactions)
        {
            select sum(SalesAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3 &&
                  tmpProjTransListDetail.TransId  == transId;
        }
        else if (paramLevel3)
        {
            select sum(SalesAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select sum(SalesAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select sum(SalesAmount) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1;
        }

        return tmpProjTransListDetail.SalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and retrieves the <c>SalesRatio</c> value to be inserted into the
    /// <c>ProjListBudgetTmp</c> table.
    /// </summary>
    /// <returns>
    /// The value for the <c>SalesRatio</c> field in the <c>ProjListBudgetTmp</c> table.
    /// </returns>
    public ProjFactorValueAdded salesRatio()
    {
        switch (ProjParameters::find().ValueAddedDisplay)
        {
            case ProjValueAddedDisplay::ValueAddedMarkup:
            if (this.salary())
                {
                    return (this.valueAdded() / this.salary());
                }
                break;

            case ProjValueAddedDisplay::ValueAddedRation:
            if (this.salesAmount())
                {
                    return (this.valueAdded() * 100 / this.salesAmount());
                }
                break;

            case ProjValueAddedDisplay::ValueAddedMarupPct:
            if (this.salary())
                {
                    return (this.valueAdded() * 100 / this.salary());
                }
                break;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransBudgetQuery</Name>
				<Source><![CDATA[
    private Query selectProjTransBudgetQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjTransBudget = query.addDatasource(tableNum(ProjTransBudget));
        qbdsProjTransBudget.addGroupByField(fieldNum(ProjTransBudget, ProjTransType));
        qbdsProjTransBudget.addGroupByField(fieldNum(ProjTransBudget, transId));
        findOrCreateRange_W(qbdsProjTransBudget, fieldNum(ProjTransBudget, Transid), queryValue(ProjTransBudgetQuery.transid));
        findOrCreateRange_W(qbdsProjTransBudget, fieldNum(ProjTransBudget, ModelId), queryValue(forecastModelId));

        if (isProjMultipleContractLinesForProjectFeatureEnabled)
        {
            QueryBuildDataSource qbdsProjTable = qbdsProjTransBudget.addDataSource(tableNum(ProjTable));
            qbdsProjTable.relations(true);
            qbdsProjTable.joinMode(JoinMode::ExistsJoin);
            QueryBuildDataSource qbdsPSAContractLineItems = qbdsProjTable.addDataSource(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(PSAContractLineItems, ProjInvoiceProjId));
            qbdsPSAContractLineItems.joinMode(JoinMode::ExistsJoin);
            this.addRangesForPSAContractLineItems(query);
        }
        else
        {
            this.addRangesForProjTransBudget(query);
        }

        qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget, LedgerTransDate)).value(queryRange(this.LedgerTransDateFrom(), this.LedgerTransDateTo()));
        qbdsProjTransBudget.addRange(fieldNum(ProjTransBudget, ProjTransDate)).value(queryRange(this.projTransDateFrom(), this.projTransDateTo()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransBudget1</Name>
				<Source><![CDATA[
    private void selectProjTransBudget1(FieldId _fieldId)
    {
        Query query = this.selectProjTransBudgetQuery();
        QueryBuildDataSource qbdsProjTransBudget = query.dataSourceTable(tableNum(ProjTransBudget));
        qbdsProjTransBudget.addGroupByField(_fieldId);
        this.processProjTransBudgetQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransBudget2</Name>
				<Source><![CDATA[
    private void selectProjTransBudget2(FieldId _fieldId1, FieldId _fieldId2)
    {
        Query query = this.selectProjTransBudgetQuery();
        QueryBuildDataSource qbdsProjTransBudget = query.dataSourceTable(tableNum(ProjTransBudget));
        qbdsProjTransBudget.addGroupByField(_fieldId1);
        qbdsProjTransBudget.addGroupByField(_fieldId2);
        this.processProjTransBudgetQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransBudget3</Name>
				<Source><![CDATA[
    private void selectProjTransBudget3(FieldId _fieldId1, FieldId _fieldId2, FieldId _fieldId3)
    {
        Query query = this.selectProjTransBudgetQuery();
        QueryBuildDataSource qbdsProjTransBudget = query.dataSourceTable(tableNum(ProjTransBudget));
        qbdsProjTransBudget.addGroupByField(_fieldId1);
        qbdsProjTransBudget.addGroupByField(_fieldId2);
        qbdsProjTransBudget.addGroupByField(_fieldId3);
        this.processProjTransBudgetQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the labels for the columns to display on the report.
    /// </summary>
    public void setDisplayLabel()
    {
        SalesRatioVisibility    = #True;
        CostRatioVisibility     = #True;
        wipNetLabel             = "@SYS78442";

        switch (statementType)
        {
            case ProjStatementType::ProfitLoss:
                if (hour && !(expenses || item))
                {
                    CostAmountLabel = "@SYS60097";
                }
                else if (item && !(expenses || hour))
                {
                    CostAmountLabel = "@SYS58392";
                }
                else if (expenses && !(item || hour))
                {
                    CostAmountLabel = "@SYS78743";
                }
                else
                {
                    CostAmountLabel  = "@SYS74805";
                }

                SalesAmountLabel    = "@SYS2835";
                MarginLabel         = "@SYS78439";

                if (pLFactor == ProjListProfitFactor::None ||
                    pLFactor == ProjListProfitFactor::GrossMarginFactorPct)
                {
                    SalesRatioVisibility = #False;
                }

                if (pLFactor == ProjListProfitFactor::None ||
                    pLFactor == ProjListProfitFactor::ValueAddedFactorPct)
                {
                    CostRatioVisibility = #False;
                }

                break;

            case ProjStatementType::WIP:
                if (hour && !(expenses || item))
                {
                    CostAmountLabel = "@SYS78746";
                }
                else if (item && !(expenses || hour))
                {
                    CostAmountLabel = "@SYS58393";
                }
                else if (expenses && !(item || hour))
                {
                    CostAmountLabel = "@SYS78747";
                }
                else
                {
                    CostAmountLabel = "@SYS78440";
                }

                if (hour && !(expenses || item || revenue || onAcc))
                {
                    SalesAmountLabel = "@SYS55369";
                }
                else if (item && !(expenses || hour || revenue || onAcc))
                {
                    SalesAmountLabel = "@SYS55369";
                }
                else if (expenses && !(item || hour || revenue || onAcc))
                {
                    SalesAmountLabel = "@SYS55369";
                }
                else
                {
                    SalesAmountLabel = "@SYS78748";
                }

                if (!onAcc)
                {
                    wipNetLabel = "@SYS78441";
                }

                break;

            case ProjStatementType::Payroll:
                CostAmountLabel = "@SYS14982";
                break;

            case ProjStatementType::Consumption:
                if (hour && !(expenses || item))
                {
                    CostAmountLabel = "@SYS5269";
                }
                else if (item && !(expenses || hour))
                {
                    CostAmountLabel = "@SYS14428";
                }
                else if (expenses && !(item || hour))
                {
                    CostAmountLabel = "@SYP4882014";
                }
                else
                {
                    CostAmountLabel = "@SYS78919";
                }

                break;

            case ProjStatementType::Invoice:
                SalesAmountLabel = "@SYS14204";

                break;
        }

        Level1label = this.idLabel(paramLevel1);
        Level2label = this.idLabel(paramLevel2);
        Level3label = this.idLabel(paramLevel3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the level values for data manipulation.
    /// </summary>
    public void setLevel()
    {
        level1  = tmpProjTransList.Level1;
        level2  = tmpProjTransList.Level2;
        level3  = tmpProjTransList.Level3;
        transId = tmpProjTransList.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Name to display for each level on the report.
    /// </summary>
    public void setName()
    {
        name1 = this.getNameFromProjTransLayout(paramLevel1, tmpProjTransList.Level1);

        name2 = this.getNameFromProjTransLayout(paramLevel2, tmpProjTransList.Level2);

        name3 = this.getNameFromProjTransLayout(paramLevel3, tmpProjTransList.Level3);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameFromProjTransLayout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets name display for each level on the report..
    /// </summary>
    /// <param name = "_paramLevel">
    ///     UI parameter.
    /// </param>
    /// <param name = "_level">
    ///     Project category ID.
    /// </param>
    /// <returns>
    ///     Name based on <c>ProjTransLayout</c>.
    /// </returns>
    protected Name getNameFromProjTransLayout(ProjTransLayout _paramLevel, ProjCategoryId _level)
    {
        Name name;
        switch (_paramLevel)
        {
            case ProjTransLayout::None:
                name   = #Blank;
                break;

            case ProjTransLayout::Project:
                name   = ProjTable::find(_level).Name;
                break;

            case ProjTransLayout::Category:
                name   = ProjCategory::find(_level).Name;
                break;

            case ProjTransLayout::ID:
            if (tmpProjTransList.TransType == ProjTransType::Hour ||
                tmpProjTransList.TransType == ProjTransType::Cost ||
                tmpProjTransList.TransType == ProjTransType::Revenue)
                {
                    name   = ResourceFacade::getID(str2int64(_level));
                }
                else
                {
                    name   = InventTable::find(_level).itemName();
                }
                break;

            case ProjTransLayout::ResourceCategory:
                name   = ResourceCategoryFacade::getID(str2int64(_level));
                break;
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNoOfDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the number of decimals on the type, by modifing the ProjShowAmount enum value.
    /// </summary>
    /// <param name="_showAmount">
    ///     <c>_showAmount</c> as a param holds the enum value for the type of the ProjShowAmount.
    /// </param>
    /// <returns>
    ///     Returns the demicals values for the types.
    /// </returns>
    container setNoOfDecimals(ProjShowAmount _showAmount)
    {
        System.Globalization.NumberFormatInfo fi;
        ProjParameters  projParameters = ProjParameters::find();

        switch (_showAmount)
        {
            case ProjShowAmount::WithDec:
                fi = new System.Globalization.NumberFormatInfo();
                amountDecimals = fi.get_CurrencyDecimalDigits();
                break;

            case ProjShowAmount::WithoutDec:
                amountDecimals = 0;
                break;

            case ProjShowAmount::Amount1000:
                amountDecimals = projParameters.Amount1000Decimals;
                break;

            case ProjShowAmount::Amount1000000:
                amountDecimals = projParameters.Amount1000000Decimals;
                break;
        }

        hourQtyDecimals  = projParameters.HourQtyDecimals;
        valueAddedDecimals = projParameters.ValueAddedDecimals;
        grossMarginDecimals = projParameters.GrossMarginDecimals;

        return [hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjStatementParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for the object of the <c>ProjStatement</c> class.
    /// </summary>
    public void setProjStatementParm()
    {
        projStatement.parmTimeMaterial(timeMaterial);
        projStatement.parmFixedPrice(fixedPrice);
        projStatement.parmInternal(internalCost);
        projStatement.parmCost(internalCost);
        projStatement.parmInvestment(investment);
        projStatement.parmTime(time);

        projStatement.parmLedgerTransDateFrom(this.ledgerTransDateFrom());
        projStatement.parmLedgerTransDateTo(this.ledgerTransDateTo());

        projStatement.parmProjTransDateFrom(this.projTransDateFrom());
        projStatement.parmProjTransDateTo(this.projTransDateTo());

        if (specifyTransactions)
        {
            projStatement.parmListId(ProjListStateId::TransId);
        }

        this.projStatementSetListValue();

        projStatement.parmStateProjType(ProjListStateProjType::Type);
        projStatement.parmAmountQty(showHour);
        projStatement.parmBudget(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for the instance of the <c>ProjStatement</c> class.
    /// </summary>
    /// <param name="_projTransBudget">
    /// Provides the <c>ProjTransType</c> object for manipulation.
    /// </param>
    public void setStatementTransType(ProjTransBudget    _projTransBudget)
    {
        projStatement.parmRevenue(false);
        projStatement.parmHour(false);
        projStatement.parmExpenses(false);
        projStatement.parmItem(false);
        projStatement.parmOnAccount(false);

        switch (_projTransBudget.ProjTransType)
        {
            case ProjTransType::Revenue:
            if (revenue)
                {
                    projStatement.parmRevenue(true);
                }
                break;

            case ProjTransType::Hour:
            if (hour)
                {
                    projStatement.parmHour(true);
                }
                break;

            case ProjTransType::Cost:
            if (expenses)
                {
                    projStatement.parmExpenses(true);
                }
                break;

            case ProjTransType::Item:
            if (item)
                {
                    projStatement.parmItem(true);
                }
                break;

            case ProjTransType::OnAccount:
            if (onAcc)
                {
                    projStatement.parmOnAccount(true);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projStatementSetListValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets list values for project statement table. 
    /// </summary>
    protected void projStatementSetListValue()
    {
        switch (paramLevel1)
        {
            case ProjTransLayout::Project:
                projStatement.parmListId(ProjListStateId::Project);
                break;

            case ProjTransLayout::Category:
                projStatement.parmListId(ProjListStateId::Category);
                break;

            case ProjTransLayout::ID:
                projStatement.parmListId(ProjListStateId::EmplItem);
                break;

            case ProjTransLayout::ResourceCategory:
                projStatement.parmListId(ProjListStateId::ResourceCategory);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>ValueAdded</c> value, which is used in the calculation of the <c>SalesRatio</c>
    /// value.
    /// </summary>
    /// <returns>
    /// The value that is obtained from manipulating the <c>SalesAmount</c>, <c>CostAmount</c>, and
    /// <c>Salary</c> values.
    /// </returns>
    public ContributionMargin valueAdded()
    {
        return this.salesAmount() - this.costAmount() + this.salary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipInvoicedOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>wipInvoicedOnAcc</c> value that is based on the UI parameters.
    /// </summary>
    /// <returns>
    /// The <c>wipInvoicedOnAcc</c> value from the <c>tmpProjTransListDetail</c> table.
    /// </returns>
    public AmountMST wipInvoicedOnAcc()
    {
        if (specifyTransactions)
        {
            select sum(wipInvoicedOnAcc) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3 &&
                  tmpProjTransListDetail.TransId  == transId;
        }
        else if (paramLevel3)
        {
            select sum(wipInvoicedOnAcc) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2 &&
                  tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select sum(wipInvoicedOnAcc) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1 &&
                  tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select sum(wipInvoicedOnAcc) from tmpProjTransListDetail
            where tmpProjTransListDetail.Level1   == level1;
        }
        return tmpProjTransListDetail.wipInvoicedOnAcc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>