<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingStatusSwitcher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class contains the logic to handle price change tracking feature status switch (feature turn on and turn off).
/// </summary>
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal class RetailPriceChangeTrackingStatusSwitcher
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onSystemStartup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hooks to the AOS initialization and executes the DataEventHandler register when change tracking is enabled.
    /// This is to avoid the perf impacts to customers who do not enabled the price change tracking.
    /// </summary>
    [SubscribesTo(classStr(ApplicationStartupEventManager), staticDelegateStr(ApplicationStartupEventManager, onSystemStartup))]
    public static void onSystemStartup()
    {
        try
        {
            // Refresh the RetailPriceChangeTrackingDataArea to handle the first upgrade scenario to the supported version (>=10.0.32).
            // Mark the hidden flag sharedParameters.EnablePriceChangeTracking as true on the first upgrade.
            // With this flag set, when customer manually clear the RetailPriceChangeTrackingDataArea, the refreshDataAreaList won't be invoked to add the UseAzureSeach DataArea back again.
            // After that, the configuration changes on UseAzureSearch and this RetailPriceChangeTrackingDataArea grid will be handled propertly.
            RetailSharedParameters sharedParameters = RetailSharedParameters::find(true);

            if (!sharedParameters.EnablePriceChangeTracking)
            {
                RetailPriceChangeTrackingDataArea::refreshDataAreaList();

                ttsbegin;
                sharedParameters.EnablePriceChangeTracking = NoYes::Yes;
                sharedParameters.update();
                ttscommit;
            }

            // Only register the data event handler when the change tracking is enabled.
            // Then we can avoid the perf impacts of data event handler to set based operations.
            if (!RetailPriceChangeTrackingHelper::isPriceChangeTrackingEnabled())
            {
                return;
            }

            eventSource.EventWritePriceChangeTrackingRegisterDataEventHandler(
                'System startup',
                classStr(RetailPriceChangeTrackingStatusSwitcher),
                staticMethodStr(RetailPriceChangeTrackingStatusSwitcher, onSystemStartup),
                '');

            RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandlers();
        }
        catch
        {
            eventSource.EventWriteGeneralExceptionOnMethodWithErrorMessage(funcName(), "Process retail price change tracking handler subscribed to system startup failed.");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChangeTrackingStatusForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update change tracking status for given legal entity.
    /// </summary>
    /// <param name = "_dataAreaId">The legal entity.</param>
    /// <param name = "_newStatus">The change tracking enbale status.</param>
    internal static void updateChangeTrackingStatusForLegalEntity(DataAreaId _dataAreaId, boolean _newStatus)
    {
        str enableStatus = _newStatus == NoYes::Yes ? 'Enabled' : 'Disabled';

        eventSource.EventWritePriceChangeTrackingStatusChangedForCompany(
                _dataAreaId,
                enableStatus,
                classStr(RetailPriceChangeTrackingStatusSwitcher),
                staticMethodStr(RetailPriceChangeTrackingStatusSwitcher, updateChangeTrackingStatusForLegalEntity),
                '');

        if (_newStatus == NoYes::Yes)
        {
            // If this is the first legal entity, then need to
            //  -- 1. setup baseline for the legal entity in the RetailPriceChangetRacking table.
            //  -- 2. register data event handlers.
            //  -- 3. setup the recurence batch job to handle discount/ta valid period.
            // If this is not the first one, then just need to 
            //  -- 1. setup the baseline on the RetailPriceChangetRacking table.
            // We do all the 3 steps as event register and batch job setup will do some check first and skip if already configured, this may take some extra cost, but can avoid missing settings.
            changecompany(_dataAreaId)
            {
                RetailPriceChangeTracking::writeFullRefreshRecord();
            }

            RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandlers();
            RetailPriceChangeTrackingStatusSwitcher::setupBatchJobs(true);
        }
        else
        {
            // Do cleanup work for the last legal entity
            if (!RetailPriceChangeTrackingHelper::isPriceChangeTrackingEnabled())
            {
                RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandlers();
                RetailPriceChangeTrackingStatusSwitcher::setupBatchJobs(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBatchJobs</Name>
				<Source><![CDATA[
    private static void setupBatchJobs(boolean _isChangeTrackingEnabled)
    {
        if (_isChangeTrackingEnabled)
        {
            // Setup the valid period check job when not exist.
            if (!RetailPriceChangeTrackingValidPeriodChecker::isRecurrenceInstanceScheduled())
            {
                RetailPriceChangeTrackingValidPeriodChecker::runWithRecurrence();
            }
        }
        else
        {
            // Trigger the cleanup job.
            RetailPriceChangeTrackingCleanupBatchTask cleanupTask = RetailPriceChangeTrackingCleanupBatchTask::construct();
            cleanupTask.runOperation();

            // Stop the triggered data event handler batch.
            RetailPriceChangeTrackingEventHandlerBatch::stopTriggeredInstances();

            // Stop the recurrence job to check valid period (set status to hold and clear the recurrenceData).
            RetailPriceChangeTrackingValidPeriodChecker::stopRecurrenceInstance();
       }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>