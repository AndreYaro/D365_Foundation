<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxWithholdTransProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBTaxWithholdTransProcessor_BR</c> is used to manage Fiscal books withhold tax data.
/// </summary>
class FBTaxWithholdTransProcessor_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the fiscal establishment related to a customer transaction.
    /// </summary>
    /// <param name="_custTransInvoiceId">
    /// The customer transaction ID.
    /// </param>
    /// <returns>
    /// A string value with the ID of the fiscal establishment.
    /// </returns>
    private static FiscalEstablishmentId_BR findFiscalEstablishment(CustTransRefRecId _custTransInvoiceId)
    {
        CustTrans               custTrans;

        custTrans = CustTrans::find(_custTransInvoiceId);

        return custTrans.fiscalEstablishmentId_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessmentRegimenForFiscalOrg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the Withhold trans assessment regimen
    /// </summary>
    /// <param name="_rootFiscalOrganization">
    /// The fiscal organization
    /// </param>
    /// <param name="fbTaxWithholdTrans">
    /// The FBTaxwithholdTrans
    /// </param>
    /// <returns>
    /// The transaction assessment regimen
    /// </returns>
    public static FBContribAssessmentRegimen_BR getAssessmentRegimenForFiscalOrg(FiscalOrganization_BR _rootFiscalOrganization, FBTaxWithholdTrans_BR fbTaxWithholdTrans)
    {
        FBContribAssessmentRegimen_BR   pisAssessementRegimen;
        FBContribAssessmentRegimen_BR   cofinsAssessementRegimen;

        if (!_rootFiscalOrganization)
        {
            checkFailed("@SYP4882323");

            return FBContribAssessmentRegimen_BR::None;
        }

        if (_rootFiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            return FBContribAssessmentRegimen_BR::Cumulative;
        }
        else if (_rootFiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::NonCumulative)
        {
            return FBContribAssessmentRegimen_BR::NonCumulative;
        }
        else if (_rootFiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Both)
        {
            pisAssessementRegimen = FBTaxWithholdTransProcessor_BR::getTaxWithholdAssessmentRegimenByTaxType(fbTaxWithholdTrans.VoucherId, fbTaxWithholdTrans.InvoiceNumber, fbTaxWithholdTrans.TransDate, TaxType_BR::PIS);

            cofinsAssessementRegimen = FBTaxWithholdTransProcessor_BR::getTaxWithholdAssessmentRegimenByTaxType(fbTaxWithholdTrans.VoucherId, fbTaxWithholdTrans.InvoiceNumber, fbTaxWithholdTrans.TransDate, TaxType_BR::COFINS);

            if (pisAssessementRegimen == cofinsAssessementRegimen)
            {
                return cofinsAssessementRegimen; // If they are equal we can assign either
            }
        }

        return FBContribAssessmentRegimen_BR::None; // If we can't determine the assessement, assign None
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the amount of the withhold tax transactions related to an <c>FBTaxWithholdTrans_BR</c>.
    /// </summary>
    /// <param name="_voucher">
    /// A ledger voucher ID related to the <c>FBTaxWithholdTrans_BR</c>.
    /// </param>
    /// <param name="_invoice">
    /// The Invoice ID of the <c>FBTaxWithholdTrans_BR</c>.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date of the <c>FBTaxWithholdTrans_BR</c>.
    /// </param>
    /// <returns>
    /// A real value with the sum amount.
    /// </returns>
    /// <remarks>
    /// The sum does not consider the withholding tax types: PIS and COFINS.
    /// </remarks>
    public static TaxWithholdAmount getOtherTaxWithholdAmount(Voucher _voucher, InvoiceId _invoice, TransDate _transDate)
    {
        TaxWithholdTrans        taxWithholdTrans;
        TaxWithholdTable        taxWithholdTable;

        select sum(TaxWithholdAmount) from taxWithholdTrans
            where   taxWithholdTrans.Voucher        == _voucher
                &&  taxWithholdTrans.Invoice        == _invoice
                &&  taxWithholdTrans.TransDate      == _transDate
            join RecId from taxWithholdTable
                where   taxWithholdTable.TaxWithholdCode    == taxWithholdTrans.TaxWithholdCode
                    &&  taxWithholdTable.TaxWithholdType_BR != TaxWithholdType_BR::PIS
                    &&  taxWithholdTable.TaxWithholdType_BR != TaxWithholdType_BR::COFINS;

        return taxWithholdTrans.TaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxValuesInWHTInvoiceByTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves all tax values for all service lines in an invoice, filtering by a specific tax type.
    /// </summary>
    /// <param name="_paymentVoucher">
    /// The WHT trans payment voucher
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice id
    /// </param>
    /// <param name="_paymTransDate">
    /// The WHT trans date
    /// </param>
    /// <param name="_taxType">
    /// The tax type to be filtered by
    /// </param>
    /// <returns>
    /// A container with all tax values
    /// </returns>
    private static container getTaxValuesInWHTInvoiceByTaxType(Voucher _paymentVoucher, InvoiceId _invoiceId, TransDate _paymTransDate, TaxType_BR _taxType)
    {
        CustTrans                   invoiceCustTrans;
        CustSettlement              custSettlement;
        FiscalDocument_BR           fiscalDocument;
        FiscalDocumentLine_BR       fiscaldocumentLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;
        container                   taxValues;

        while select
                    TaxValue
                from fiscalDocumentTaxTrans
                group by TaxValue
                where   fiscalDocumentTaxTrans.Type == _taxType
            exists join fiscalDocumentLine
                where   fiscalDocumentLine.RecId    == fiscalDocumentTaxTrans.FiscalDocumentLine
                    &&  fiscaldocumentLine.ItemType == FiscalDocumentLineItemType_BR::Service
            exists join fiscalDocument
                where   fiscalDocument.RecId == fiscaldocumentLine.FiscalDocument
            exists join invoiceCustTrans
                where   invoiceCustTrans.Voucher    == fiscalDocument.Voucher
                    &&  invoiceCustTrans.TransDate  == fiscalDocument.FiscalDocumentDate
                    &&  invoiceCustTrans.Invoice    == _invoiceId
            exists join custSettlement
                where   custSettlement.TransRecId         == invoiceCustTrans.RecId
                    &&  custSettlement.OffsetTransVoucher == _paymentVoucher
                    &&  custSettlement.TransDate          == _paymTransDate
        {
            taxValues += fiscalDocumentTaxTrans.TaxValue;
        }

        return taxValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdAmountByTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the amount of the withhold tax transactions related to an <c>FBTaxWithholdTrans_BR</c>
    /// for a specific withholding tax type.
    /// </summary>
    /// <param name="_voucher">
    /// A ledger voucher ID related to the <c>FBTaxWithholdTrans_BR</c>.
    /// </param>
    /// <param name="_invoice">
    /// The Invoice ID of the <c>FBTaxWithholdTrans_BR</c>
    /// </param>
    /// <param name="_transDate">
    /// The transaction date of the <c>FBTaxWithholdTrans_BR</c>.
    /// </param>
    /// <param name="_taxType">
    /// The withholding tax type to be filtered by.
    /// </param>
    /// <returns>
    /// A real value with the sum amount.
    /// </returns>

    public static TaxWithholdAmount getTaxWithholdAmountByTaxType(Voucher _voucher, InvoiceId _invoice, TransDate _transDate, TaxWithholdType_BR _taxType)
    {
        TaxWithholdTrans        taxWithholdTrans;
        TaxWithholdTable        taxWithholdTable;

        select firstonly TaxWithholdAmount from taxWithholdTrans
            where   taxWithholdTrans.Voucher        == _voucher
                &&  taxWithholdTrans.Invoice        == _invoice
                &&  taxWithholdTrans.TransDate      == _transDate
            join RecId from taxWithholdTable
                where   taxWithholdTable.TaxWithholdCode    == taxWithholdTrans.TaxWithholdCode
                    &&  taxWithholdTable.TaxWithholdType_BR == _taxType;

        return taxWithholdTrans.TaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdAssessmentRegimenByTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the assessment regimen for a specific tax type in an invoice
    /// </summary>
    /// <param name="_paymVoucher">
    /// The WHT trans payment voucher
    /// </param>
    /// <param name="_invoice">
    /// The invoice id
    /// </param>
    /// <param name="_paymTransDate">
    /// The WHT trans date
    /// </param>
    /// <param name="_taxType">
    /// The tax type to be filtered by
    /// </param>
    /// <returns>
    /// The assessment regimen of the revenue origin
    /// </returns>
    /// <remarks>
    /// If the revenue origin can't be determined, this method will return None.
    /// </remarks>
    public static FBContribAssessmentRegimen_BR getTaxWithholdAssessmentRegimenByTaxType(Voucher _paymVoucher, InvoiceId _invoice, TransDate _paymTransDate, TaxType_BR _taxType)
    {
        BrazilParameters            parameters;
        TaxValue                    value;
        container                   taxValues;

        taxValues = FBTaxWithholdTransProcessor_BR::getTaxValuesInWHTInvoiceByTaxType(_paymVoucher, _invoice, _paymTransDate, _taxType);

        // We only know the revenue origin assessement regimen if the invoice has the same tax value for all service lines
        if (conLen(taxValues) != 1)
        {
            // Return none and the user must classify the regimen manually in the FBTaxWithholdTrans_BR form
            return FBContribAssessmentRegimen_BR::None;
        }

        value = conPeek(taxValues, 1);

        parameters = BrazilParameters::find();

        if (_taxType == TaxType_BR::PIS)
        {
            if (parameters.BasicTaxValuePISCumulative == value)
            {
                return FBContribAssessmentRegimen_BR::Cumulative;
            }
            else if (parameters.BasicTaxValuePISNonCumulative == value)
            {
                return FBContribAssessmentRegimen_BR::NonCumulative;
            }
        }
        else if (_taxType == TaxType_BR::COFINS)
        {
            if (parameters.BasicTaxValueCOFINSCumulative == value)
            {
                return FBContribAssessmentRegimen_BR::Cumulative;
            }
            else if (parameters.BasicTaxValueCOFINSNonCumulative == value)
            {
                return FBContribAssessmentRegimen_BR::NonCumulative;
            }
        }

        // Return none if we can't determine the revenue origin assessement regimen
        return FBContribAssessmentRegimen_BR::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxWithholdTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an intermediary table with withholding tax data into order to report it in Fiscal Books.
    /// </summary>
    /// <param name="_paymTransLedgerVoucher">
    /// The <c>LedgerVoucher</c> object of the payment transaction.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record that is associated with the tax withholding.
    /// </param>
    [PostHandlerFor(classStr(TaxWithhold_CustPaym), staticMethodStr(TaxWithhold_CustPaym, postTaxWithhold))]
    public static void postTaxWithholdTrans_BR(XppPrePostArgs _args)
    {
        LedgerVoucher           paymTransLedgerVoucher = _args.getArg(identifierstr(_paymTransLedgerVoucher));
        LedgerJournalTrans      ledgerJournalTrans = _args.getArg(identifierstr(_ledgerJournalTrans));

        TaxWithholdTrans        taxWithholdTrans;
        CustTable               custTable;
        FBTaxWithholdTrans_BR   fbTaxWithholdTrans;
        FiscalOrganization_BR   rootFiscalOrganization;
        FiscalEstablishment_BR  fiscalEstablishment;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        ttsBegin;

        while select CustAccount, CustTransInvoiceId, Invoice, TaxWithholdBaseAmount, TransDate, Voucher from taxWithholdTrans
            group by taxWithholdTrans.CustAccount,
                    taxWithholdTrans.CustTransInvoiceId,
                    taxWithholdTrans.Invoice,
                    taxWithholdTrans.TaxWithholdBaseAmount,
                    taxWithholdTrans.TransDate,
                    taxWithholdTrans.Voucher,
                    custTable.CNPJCPFNum_BR,
                    custTable.CustWhtContributionType_BR
            where   taxWithholdTrans.Voucher        == ledgerJournalTrans.Voucher
                &&  taxWithholdTrans.TransDate      == ledgerJournalTrans.TransDate
            join CNPJCPFNum_BR, CustWhtContributionType_BR from custTable
                where custTable.AccountNum          == taxWithholdTrans.CustAccount
        {
            fbTaxWithholdTrans.clear();

            fbTaxWithholdTrans.ThirdPartyCNPJCPF            = custTable.CNPJCPFNum_BR;
            fbTaxWithholdTrans.CustWhtContributionType      = custTable.CustWhtContributionType_BR;
            fbTaxWithholdTrans.FiscalEstablishment          = FBTaxWithholdTransProcessor_BR::findFiscalEstablishment(taxWithholdTrans.CustTransInvoiceId);
            fbTaxWithholdTrans.InvoiceNumber                = taxWithholdTrans.Invoice;
            fbTaxWithholdTrans.TaxWithholdBaseAmount        = abs(taxWithholdTrans.TaxWithholdBaseAmount);
            fbTaxWithholdTrans.TransDate                    = taxWithholdTrans.TransDate;
            fbTaxWithholdTrans.VoucherId                    = taxWithholdTrans.Voucher;
            fbTaxWithholdTrans.FinancialLedgerDimension     = taxWithholdTrans.LedgerDimension;
            fbTaxWithholdTrans.PisWithholdAmount            = FBTaxWithholdTransProcessor_BR::getTaxWithholdAmountByTaxType(taxWithholdTrans.Voucher, taxWithholdTrans.Invoice, taxWithholdTrans.TransDate, TaxWithholdType_BR::PIS);
            fbTaxWithholdTrans.CofinsWithholdAmount         = FBTaxWithholdTransProcessor_BR::getTaxWithholdAmountByTaxType(taxWithholdTrans.Voucher, taxWithholdTrans.Invoice, taxWithholdTrans.TransDate, TaxWithholdType_BR::COFINS);
            fbTaxWithholdTrans.OtherTaxWithholdAmount       = FBTaxWithholdTransProcessor_BR::getOtherTaxWithholdAmount(taxWithholdTrans.Voucher, taxWithholdTrans.Invoice, taxWithholdTrans.TransDate);

            fiscalEstablishment             = FiscalEstablishment_BR::findById(fbTaxWithholdTrans.FiscalEstablishment);
            rootFiscalOrganization          = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);

            fbTaxWithholdTrans.AssessmentRegimen = FBTaxWithholdTransProcessor_BR::getAssessmentRegimenForFiscalOrg(rootFiscalOrganization, fbTaxWithholdTrans);

            fbTaxWithholdTrans.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>