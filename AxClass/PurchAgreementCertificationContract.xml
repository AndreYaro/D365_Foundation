<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementCertificationContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>PurchAgreementCertificationCompliance</c> SSRS report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(PurchAgreementCertificationUIBuilder)),
    SysOperationAlwaysInitializeAttribute
]
public class PurchAgreementCertificationContract implements SysOperationValidatable, SysOperationInitializable
{
    AgreementClassificationId       agreementClassificationId;
    VendCertTypeId                  vendCertTypeId;
    TransDate                       certificationExpireDate;
    boolean                         certificationPastDue;
    boolean                         isCertificationExpired;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data contract values.
    /// </summary>
    public void initialize()
    {
        this.parmCertificationExpireDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementClassificationId</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('AgreementClassificationId'),
        SysOperationLabelAttribute('SYS303813'),
        SysOperationHelpTextAttribute('SPS2087')
    ]
    public AgreementClassificationId parmAgreementClassificationId(AgreementClassificationId _agreementClassificationId = agreementClassificationId)
    {
        agreementClassificationId = _agreementClassificationId;
        return agreementClassificationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificationExpireDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('CertificationExpireDate'),
        SysOperationLabelAttribute(literalStr("@SYS336660")),
        SysOperationHelpTextAttribute(literalStr("@SPS2375"))

    ]
    public TransDate parmCertificationExpireDate(ToDate _certificationExpireDate = certificationExpireDate)
    {
        certificationExpireDate = _certificationExpireDate;
        return certificationExpireDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificationPastDue</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('CertificationPastDue'),
        SysOperationLabelAttribute(literalStr("@SPS2372")),
        SysOperationHelpTextAttribute(literalStr("@SPS2374"))
    ]
    public boolean parmCertificationPastDue(boolean _certificationPastDue = certificationPastDue)
    {
        certificationPastDue = _certificationPastDue;
        return certificationPastDue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCertificationExpired</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('IsCertificationExpired')
    ]
    public boolean parmIsCertificationExpired(boolean _isCertificationExpired = isCertificationExpired)
    {
        isCertificationExpired = _isCertificationExpired;
        return isCertificationExpired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendCertTypeId</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('VendCertTypeId'),
        SysOperationLabelAttribute('SYS184339'),
        SysOperationHelpTextAttribute('SPS1360')
    ]
    public VendCertTypeId parmVendCertTypeId(VendCertTypeId _vendCertTypeId = vendCertTypeId)
    {
        vendCertTypeId = _vendCertTypeId;
        return vendCertTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid. Otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean  ok = true;

        if (this.parmAgreementClassificationId() && !AgreementClassification::findPurchClassification(this.parmAgreementClassificationId()).RecId)
        {
            ok = checkFailed(strFmt("@SPS1691", this.parmAgreementClassificationId()));
        }
        if (this.parmVendCertTypeId() && !VendCertType::findByName(this.parmVendCertTypeId()).RecId)
        {
            ok = checkFailed(strFmt("@SPS1694", this.parmVendCertTypeId()));
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>