<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrlGeneratorRSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCtrlGeneratorRSV extends RPayPFReportCtrlRSV1_2013
{
    ReportPeriod_RU periodTransLimitDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    protected void initData()
    {
        keyContract      = new RPayPFReportKeyContract_RSV();
        valueContract    = new RPayPFReportValueContract_RSV();
        reportData       = new RPayPFReportDataRSV1();

        studentsCommand  = new RPayPFReportCommandGeneratorRSV(reportData, [#StudentDS]);
        totalFundCommand = new RPayPFReportCommandGeneratorRSV(reportData, [#TotalAmountDS]);
        invalidsCommand  = new RPayPFReportCommandGeneratorRSV(reportData, [#InvalidDS]);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initEmplQuery</Name>
				<Source><![CDATA[
    protected void initEmplQuery()
    {
        RPayPFReportCalcGeneratorRSV reportCalcGeneratorRSV = new RPayPFReportCalcGeneratorRSV();
        reportCalcGeneratorRSV.corReportPeriod(reportCalcStartDate, reportEndDate);
        reportCalcGeneratorRSV.init();
        reportCalcGeneratorRSV.parmReportTransLimitDate(periodTransLimitDate);
        reportCalc = reportCalcGeneratorRSV;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initTemplateParameters</Name>
				<Source><![CDATA[
    protected void initTemplateParameters()
    {
        fF                          = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 1, "@RUP906",  "@RUP732");
        deductionCodeExceedMaxOMI   = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 2, "@RUP2170", "@RUP2986");
        deductionCode212A8p7        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 3, "@RUP2170", "@RUP3428");
        deductionCode212            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 4, "@RUP2170", "@RUP2990");
        studentRate                 = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 5, "@RUP2170", "@RUP3429");
        pe1                         = payTaxParameters.PensionFundExtra1;
        pe2                         = payTaxParameters.PensionFundExtra2;

        funds = [pensionInsuranceFund, pensionStorageFund, fF];

        if (pe1)
        {
            funds += pe1;
        }

        if (pe2)
        {
            funds += pe2;
        }

        deductionCodeExceedMax = payTaxParameters.PFDeductionCodePctBase;
        foreignerRate          = payTaxParameters.InsuredForeignCitizens;

        codesToExclude  = payTaxParameters.PensionFundinvalidDeduction;
        codesToExclude += deductionCodeExceedMax ? ((codesToExclude ? ',' : '') + deductionCodeExceedMax) : '';
        codesToExclude += deductionCode212       ? ((codesToExclude ? ',' : '') + deductionCode212)       : '';
        codesToExclude += deductionCode212A8p7   ? ((codesToExclude ? ',' : '') + deductionCode212A8p7)   : '';
        codesToExclude = '!' + strreplace(codesToExclude, ',', ',!');

        codesToExcludeOMI += deductionCodeExceedMaxOMI ? ((codesToExcludeOMI ? ',' : '') + deductionCodeExceedMaxOMI) : '';
        codesToExcludeOMI += deductionCode212          ? ((codesToExcludeOMI ? ',' : '') + deductionCode212)       : '';
        codesToExcludeOMI += deductionCode212A8p7      ? ((codesToExcludeOMI ? ',' : '') + deductionCode212A8p7)   : '';
        codesToExcludeOMI = '!' + strreplace(codesToExcludeOMI, ',', ',!');
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
    protected void unpackData(container _callParameters)
    {
        RPayPFReportParmContractGeneratorRSV parmContractGeneratorRSV = new RPayPFReportParmContractGeneratorRSV();
        date d;
        container packedQuery;

        if (_callParameters == connull())
        {
            throw Error(Error::missingParameter(this));
        }

        parmContractGeneratorRSV.unpack(_callParameters);
        packedQuery = parmContractGeneratorRSV.queryRun();

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }
        else
        {
            this.initEmplQuery();
        }

        periodEndDate = parmContractGeneratorRSV.reportEndPeriod();
        periodTransLimitDate = parmContractGeneratorRSV.periodTransLimitPeriod();

        if (periodEndDate <= 31\12\2004)
        {
            throw Error("@RUP1160");
        }
        else
        {
            d           = dateStartQtr(periodEndDate);
            wholePeriod = SysQuery::range(dateStartYr(d), dateEndQtr(d));

            reportStartDate = dateStartYr(d);
            reportEndDate   = dateEndQtr(d);

            month1      = SysQuery::range(d, endmth(d));
            mth1        = endmth(d);
            d           = nextmth(d);
            month2      = SysQuery::range(d, endmth(d));
            mth2        = endmth(d);
            d           = nextmth(d);
            month3      = SysQuery::range(d, endmth(d));
            mth3        = endmth(d);

            fromYearStart = SysQuery::range(dateStartYr(d), dateEndQtr(d));

            if (!parmContractGeneratorRSV.corrReportEndPeriod())
            {
                beforeQuarter = SysQuery::range(dateStartYr(payYear), dateStartQtr(periodEndDate) - 1);
                currentQuarter = SysQuery::range(dateStartQtr(periodEndDate), dateEndQtr(periodEndDate));
            }

            reportType = parmContractGeneratorRSV.corrReportEndPeriod() ? RpayPensionFundExportKindOfCorrection::Correctional : RpayPensionFundExportKindOfCorrection::None;
            reportCalcStartDate = endmth(reportStartDate);
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>