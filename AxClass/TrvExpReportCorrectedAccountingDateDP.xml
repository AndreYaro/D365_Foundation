<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpReportCorrectedAccountingDateDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvExpReportCorrectedAccountingDateDP</c> class provides data for the <c>TrvExpReportCorrectedAccounting</c> report,
/// and contains the declaration of the global variables.
/// </summary>
/// <remarks>
/// This class provides the methods to fetch the data which is used by the <c>TrvExpReportCorrectedAccounting</c> report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(TrvExpReportCorrectedAccountingDate)),
    SRSReportParameterAttribute(classstr(TrvExpCorrectedAccountingDateContract))
]
public class TrvExpReportCorrectedAccountingDateDP extends SRSReportDataProviderBase
{
    container                                   correctedAccountingDateExpenses;
    TrvExpReportCorrectedAccountingDateTmp      trvExpReportCorrectedAccountingDateTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrvCorrectedAccountingDateTmp</Name>
				<Source><![CDATA[
    private void createTrvCorrectedAccountingDateTmp()
    {
        DirPerson                       dirPerson;
        HcmWorker                       hcmWorker;
        TrvExpTable                     trvExpTable;
        TrvExpTrans                     trvExpTrans;
        AccountingDistribution          accountingDistribution;
        ProjectAccountingDistribution   projectAccountingDistribution;
        QueryRun                        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            trvExpTrans                     = queryRun.get(tablenum(TrvExpTrans));
            trvExpTable                     = queryRun.get(tablenum(TrvExpTable));
            accountingDistribution          = queryRun.get(tablenum(AccountingDistribution));
            projectAccountingDistribution   = queryRun.get(tablenum(ProjectAccountingDistribution));
            hcmWorker                       = queryRun.get(tablenum(HcmWorker));
            dirPerson                       = queryRun.get(tablenum(DirPerson));

            trvExpReportCorrectedAccountingDateTmp.clear();

            trvExpReportCorrectedAccountingDateTmp.totalWithCurrencyCode        = trvExpTable.totalWithCurrencyCode();
            trvExpReportCorrectedAccountingDateTmp.ExpNumber                    = trvExpTable.ExpNumber;
            trvExpReportCorrectedAccountingDateTmp.DateTime                     = trvExpTable.createdDateTime;

            trvExpReportCorrectedAccountingDateTmp.Name                         = dirPerson.Name;
            trvExpReportCorrectedAccountingDateTmp.PersonnelNumber              = hcmWorker.PersonnelNumber;

            trvExpReportCorrectedAccountingDateTmp.TrvExpTable                  = TrvExpTrans.ParentRecId;
            trvExpReportCorrectedAccountingDateTmp.TransDate                    = TrvExpTrans.TransDate;
            trvExpReportCorrectedAccountingDateTmp.CostType                     = TrvExpTrans.CostType;
            trvExpReportCorrectedAccountingDateTmp.ExchangeCode                 = TrvExpTrans.ExchangeCode;
            trvExpReportCorrectedAccountingDateTmp.AmountCur                    = TrvExpTrans.AmountCurr;
            trvExpReportCorrectedAccountingDateTmp.LineNumber                   = TrvExpTrans.LineNumber;
            trvExpReportCorrectedAccountingDateTmp.LineType                     = TrvExpTrans.LineType;
            trvExpReportCorrectedAccountingDateTmp.OriginalAccountingDate       = TrvExpTrans.TransDate;
            trvExpReportCorrectedAccountingDateTmp.CategoryOrSubCategoryName    = TrvExpTrans.categoryOrSubCategoryName();

            if (accountingDistribution.RecId)
            {
                trvExpReportCorrectedAccountingDateTmp.DistributionRecId            = accountingDistribution.RecId;
                trvExpReportCorrectedAccountingDateTmp.CorrectedAccountingDate      = accountingDistribution.AccountingDate;
                trvExpReportCorrectedAccountingDateTmp.TransactionCurrency          = accountingDistribution.TransactionCurrency;
                trvExpReportCorrectedAccountingDateTmp.TransactionCurrencyAmount    = accountingDistribution.TransactionCurrencyAmount;
                trvExpReportCorrectedAccountingDateTmp.DataArea                     = CompanyInfo::findRecId(accountingDistribution.AccountingLegalEntity).DataArea;
                trvExpReportCorrectedAccountingDateTmp.Percentage                   = accountingDistribution.percentage();
                trvExpReportCorrectedAccountingDateTmp.LedgerDimensionValue         = DimensionAttributeValueCombination::find(accountingDistribution.LedgerDimension).DisplayValue;

                if (projectAccountingDistribution.RecId && projectAccountingDistribution.ProjTable)
                {
                    trvExpReportCorrectedAccountingDateTmp.DisplayProjId = projectAccountingDistribution.displayProjId();
                }
            }

            trvExpReportCorrectedAccountingDateTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvCorrectedAccountingDateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves report data from the temporary table.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('TrvExpReportCorrectedAccountingDateTmp')]
    public TrvExpReportCorrectedAccountingDateTmp getTrvCorrectedAccountingDateTmp()
    {
        select trvExpReportCorrectedAccountingDateTmp;
        return trvExpReportCorrectedAccountingDateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// SQL Server Reporting Services (SSRS) at run time. The method should compute data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query                                   query = this.parmQuery();
        QueryBuildDataSource                    trvExpTransDS, accountingDistributionDS;
        TrvExpCorrectedAccountingDateContract   contract = this.parmDataContract() as TrvExpCorrectedAccountingDateContract;

        query.dataSourceTable(tableNum(TrvExpTable)).addRange(fieldNum(TrvExpTable, ApprovalStatus)).value(queryValue(TrvAppStatus::Ledger));

        trvExpTransDS = query.dataSourceTable(tableNum(TrvExpTrans)).addDataSource(tableNum(TrvExpTrans));
        trvExpTransDS.addLink(fieldNum(TrvExpTrans, TrvExpTable), fieldNum(TrvExpTrans, TrvExpTable));
        trvExpTransDS.joinMode(JoinMode::ExistsJoin);

        accountingDistributionDS = trvExpTransDS.addDataSource(tableNum(AccountingDistribution));
        accountingDistributionDS.joinMode(JoinMode::ExistsJoin);

        accountingDistributionDS.addRange(fieldNum(AccountingDistribution, AccountingDate)).value(
                                            strFmt('((%1 != %2) && (%3 == %4))',
                                            fieldStr(AccountingDistribution, AccountingDate),
                                            'TrvExpTrans_1.TransDate',
                                            fieldStr(AccountingDistribution, SourceDocumentLine),
                                            'TrvExpTrans_1.SourceDocumentLine'));

        this.parmQuery(query);
        SRSReportHelper::addFromAndToDateRangeToQuery(this.parmQuery(), contract.parmFromDate(), contract.parmToDate(), tableNum(TrvExpTable), fieldNum(TrvExpTable, createdDateTime));
        this.createTrvCorrectedAccountingDateTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
