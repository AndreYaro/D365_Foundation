<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAgingReportLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAgingReportLines</c> class stores lines on the aging report in memory.
/// </summary>
class InventAgingReportLines
{
    RecordSortedList    reportLines;
    InventAgingTmp      line;
    protected RecordInsertList recordInsertList;
    private int bulkSize;
    protected int insertReportLineCount = 50000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeCommand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the command on each line that is stored in the object.
    /// </summary>
    /// <param name="_command">
    /// The command to execute on each line.
    /// </param>
    public void executeCommand(InventAgingICommand _command)
    {
        if (reportLines.first(line))
        {
            do
            {
                _command.execute();
            }
            while (reportLines.next(line));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a line on the report.
    /// </summary>
    /// <param name="_itemGroupId">
    /// The <c>ItemGroupId</c> to find.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> to find.
    /// </param>
    /// <param name="_itemName">
    /// The <c>ItemName</c> to find.
    /// </param>
    /// <param name="_unit">
    /// The <c>UnitOfMeasureSymbol</c> to find.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> buffer with the inventory dimensions to find.
    /// </param>
    /// <returns>
    /// The specified <c>InventAgingTmp</c> buffer representing a line on the report.
    /// </returns>
    public InventAgingTmp findOrCreate(
        ItemGroupId         _itemGroupId,
        ItemId              _itemId,
        ItemName            _itemName,
        UnitOfMeasureSymbol _unit,
        InventDim           _inventDim)
    {
        InventAgingTmp   localLine;

        localLine.ItemGroupId = _itemGroupId;
        localLine.ItemId = _itemId;
        localLine.ItemName = _itemName;
        localLine.Unit = _unit;
        localLine.initFromInventDim(_inventDim);

        reportLines.find(localLine);

        return localLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flush</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes all report lines.
    /// </summary>
    public void flush()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushReportLines</Name>
				<Source><![CDATA[
    private void flushReportLines()
    {
        reportLines = new RecordSortedList(tableNum(InventAgingTmp));

        container sortOrder = [fieldNum(InventAgingTmp, ItemGroupId),
                               fieldNum(InventAgingTmp, ItemId),
                               fieldNum(InventAgingTmp, ItemName),
                               fieldNum(InventAgingTmp, Unit)];

        var enumerator  = InventDim::dimFieldListEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            sortOrder += [InventDimFieldsMap::mappedFieldId(inventDimFieldId, tableStr(InventAgingTmp))];
        }
        reportLines.sortOrderFromContainer(sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushRecordInsertList</Name>
				<Source><![CDATA[
    private void flushRecordInsertList()
    {
        recordInsertList = new RecordInsertList(tableNum(InventAgingTmp));
        bulkSize = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record sorted list and record insert list.
    /// </summary>
    private void init()
    {
        this.flushReportLines();
        this.flushRecordInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a line into the report lines.
    /// </summary>
    /// <param name="_line">
    /// The line to insert.
    /// </param>
    /// <remarks>
    /// The line will replace an existing line.
    /// </remarks>
    public void insert(InventAgingTmp _line)
    {
        reportLines.ins(_line, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert all the report lines to the database.
    /// </summary>
    /// <remarks>
    /// The report lines are flushed when inserted into the database.
    /// </remarks>
    public void insertDatabase()
    {
        RecordInsertList recordInsertListLocal = new RecordInsertList(tableNum(InventAgingTmp));

        if (reportLines.first(line))
        {
            do
            {
                recordInsertListLocal.add(line);
            }
            while (reportLines.next(line));
        }

        recordInsertListLocal.insertDatabase();
        this.flushReportLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bulkInsertDatabase</Name>
				<Source><![CDATA[
    public void bulkInsertDatabase()
    {
        if (reportLines.first(line))
        {
            do
            {
                recordInsertList.add(line);
                bulkSize++;
            }
            while (reportLines.next(line));
        }

        if (bulkSize >= insertReportLineCount)
        {
            this.insertDatabaseForTheRestList();
        }

        this.flushReportLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabaseForTheRestList</Name>
				<Source><![CDATA[
    public void insertDatabaseForTheRestList()
    {
        recordInsertList.insertDatabase();
        this.flushRecordInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLine</Name>
				<Source><![CDATA[
    public InventAgingTmp parmLine()
    {
        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAgingReportLines construct()
    {
        return new InventAgingReportLines();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>