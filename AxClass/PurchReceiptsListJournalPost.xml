<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReceiptsListJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReceiptsListJournalPost
extends FormletterJournalPost
{
    PurchParmTable          purchParmTable;
    PurchParmLine           purchParmLine;

    VendReceiptsListJour    vendReceiptsListJour;
    VendReceiptsListTrans   vendReceiptsListTrans;
    PurchLine               purchLine;
    PurchTable              purchTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _vendReceiptsListTrans)
    {
        VendReceiptsListTrans   localVendReceiptsListTrans = _vendReceiptsListTrans as VendReceiptsListTrans;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventQty               qtyRemain = localVendReceiptsListTrans.InventQty;

        if (purchLine.isStocked())
        {
            while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId       == localVendReceiptsListTrans.InventTransId
                   && inventTransOrigin.ReferenceCategory   == InventTransType::Purch
                join InventDimId, sum(Qty) from inventTrans
                group by InventDimId
                where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                   && ((inventTrans.StatusReceipt == StatusReceipt::Ordered && inventTrans.StatusIssue == StatusIssue::None)
                   || (inventTrans.StatusReceipt == StatusReceipt::None 
                        && (inventTrans.StatusIssue == StatusIssue::OnOrder 
                            || (InventReportDimHistoryReservPhysicalFlight::instance().isEnabled() 
                                && inventTrans.StatusIssue == StatusIssue::ReservPhysical)
                )))
            {
                if (qtyRemain)
                {
                    qtyRemain = this.createInventReportDimHistory(localVendReceiptsListTrans.InventTransId,
                                                                  inventTrans.InventDimId,
                                                                  localVendReceiptsListTrans.ReceiptsListId,
                                                                  inventTrans.Qty,
                                                                  qtyRemain);
                }
                else
                {
                    break;
                }
            }
        }
        else
        {
            this.createInventReportDimHistory(localVendReceiptsListTrans.InventTransId,
                                              localVendReceiptsListTrans.InventDimId,
                                              localVendReceiptsListTrans.ReceiptsListId,
                                              localVendReceiptsListTrans.PurchQty,
                                              localVendReceiptsListTrans.PurchQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    public boolean createReportData(FormletterJournalPrint _formletterJournalPrint = null)
    {
        PurchReceiptsListDP purchReceiptsListDP = this.instantiatePurchReceiptsListDP();
        PurchReceiptsListContract contract      = this.instantiatePurchReceiptsListContract();
        contract.parmRecordId(formletterJournal.RecId);
        purchReceiptsListDP.createData(contract);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiatePurchReceiptsListDP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PurchReceiptsListDP</c> report data provider.
    /// </summary>
    /// <returns>The instance for <c>PurchReceiptsListDP</c>.</returns>
    protected PurchReceiptsListDP instantiatePurchReceiptsListDP()
    {
        return new PurchReceiptsListDP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiatePurchReceiptsListContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PurchReceiptsListContract</c> report data contract.
    /// </summary>
    /// <returns>The instance for <c>PurchReceiptsListContract</c>.</returns>
    protected PurchReceiptsListContract instantiatePurchReceiptsListContract()
    {
        return new PurchReceiptsListContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus  documentStatus()
    {
        return DocumentStatus::ReceiptsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    protected void endPostLine()
    {
        InventQualityManagementCreateHandler::createPurchaseReceiptsListAfter(purchParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a voucher number.
    /// </summary>
    /// <returns>
    /// A voucher number.
    /// </returns>
    protected Num getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    public void init()
    {
        super();
        purchTable = purchParmTable.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        purchLine = vendReceiptsListTrans.purchLine();

        this.initRelatedParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>purchParmLine</c> member variable.
    /// </summary>
    protected void initRelatedParmLine()
    {
        select purchParmLine
            where purchParmLine.ParmId                 == purchParmTable.ParmId
               && purchParmLine.TableRefId             == purchParmTable.TableRefId
               && purchParmLine.PurchaseLineLineNumber == purchLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReportDimHistoryLogType</Name>
				<Source><![CDATA[
    protected InventReportDimHistoryLogType inventReportDimHistoryLogType()
    {
        return InventReportDimHistoryLogType::PurchReceiptList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current journal line record.
    /// </summary>
    /// <param name="_journalLine">
    /// A journal line record.
    /// </param>
    /// <returns>
    /// A journal line record.
    /// </returns>
    protected Common journalLine(Common _journalLine = vendReceiptsListTrans)
    {
        vendReceiptsListTrans = _journalLine as VendReceiptsListTrans;
        return vendReceiptsListTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(VendReceiptsListTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = vendReceiptsListJour)
    {
        vendReceiptsListJour = _journalTable as VendReceiptsListJour;

        return vendReceiptsListJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;

        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendReceiptsListJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line record for the current journal line.
    /// </summary>
    /// <returns>
    /// A source line record.
    /// </returns>
    protected Common sourceLine()
    {
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source header record for the journal header.
    /// </summary>
    /// <returns>
    /// A source header record.
    /// </returns>
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TransTxt</c> object.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TransTxt</c> object.
    /// </returns>
    protected TransTxt  transactionLogTxt()
    {
        return "@SYS53064";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::PurchReceiptsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return vendReceiptsListJour.ReceiptsListDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line.
    /// </summary>
    /// <remarks>
    /// Nothing to update.
    /// </remarks>
    protected void updateJournalLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        SetEnumerator   se = ordersPosted.getEnumerator();
        ttsbegin;
        while (se.moveNext())
        {
            purchTable = PurchTable::find(se.current(),true);
            if (purchTable)
            {
                purchTable.updateDocumentStatus(this.documentStatus());
                purchTable.updateBackStatus();
                purchTable.updatePurchaseType();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>PurchStatus</c> on purchase order in case of summary update.
    /// </summary>
    /// <remarks>
    /// Receipts list posting will not update the <c>PurchStatus</c> of a purchase order.
    /// </remarks>
    protected void  updateSumPurchId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchReceiptsListJournalPost construct()
    {
        return new PurchReceiptsListJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax doucment.
    /// </summary>
    /// <param name="_checkLedgerVoucher">
    /// A Boolean value that indicates whether checking the LedgerVoucher; optional.
    /// </param>
    public void postTaxDocument(boolean _checkLedgerVoucher = true)
    {
        super(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>