<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendLedgerTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendLedgerTransDP</c> class declares the variables that are required for the
/// <c>VendLedgerTrans</c> report.
/// </summary>
[SRSReportQueryAttribute(queryStr(VendLedgerTrans)),
    SRSReportParameterAttribute(classStr(VendLedgerTransContract))]
public class VendLedgerTransDP extends SrsReportDataProviderPreProcessTempDB
{
    GeneralJournalAccountEntry generalJournalAccountEntry;
    GeneralJournalEntry generalJournalEntry;
    NoYes totalsPerLedgerAccount;
    NoYes mainAccountOnly;
    VendLedgerTransTmp vendLedgerTransTmpIntermediate;
    VendLedgerTransTmp vendLedgerTransTmp;
    SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
    MainAccountNum mainAccountId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the records and inserts them into the <c>VendLedgerTransTmp</c> table when the
    /// <c>TotalsPerLedgerAccount</c> parameter IS NOT checked.
    /// </summary>
    /// <param name="_vendLedgerTransBuf">
    /// The temporary table buffer that is passed in from <c>processReport</c> containing all valid records
    /// to query against.
    /// </param>
    private void fetchLedgerTrans(VendLedgerTransBuf _vendLedgerTransBuf)
    {
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalEntry subledgerJournalEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        VendInvoiceJour vendInvoiceJour;

        // put summed amounts for transactions that were not transferred from subledger journal into
        // intermediate table
        insert_recordSet vendLedgerTransTmpIntermediate
            (Voucher, TransDate, InvoiceId, Name, TraceNum, VendAccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, Posting, Txt, AccountNum, DisplayValue)
        select
            Voucher, TransDate, InvoiceId, Name, TraceNum, VendAccountNum
        from _vendLedgerTransBuf
        join
            sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), TransactionCurrencyCode, PostingType, Text
        from generalJournalAccountEntry
        join generalJournalEntry
            where
                generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && (generalJournalEntry.JournalCategory != LedgerTransType::Purch
                || (generalJournalEntry.JournalCategory == LedgerTransType::Purch && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchPckSlp && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchReceipt))
        join subledgerVoucherLink
            where
                subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                subledgerVoucherLink.Voucher == _vendLedgerTransBuf.Voucher &&
                subledgerVoucherLink.VoucherDataAreaId == _vendLedgerTransBuf.SavedDataAreaId &&
                subledgerVoucherLink.AccountingDate == _vendLedgerTransBuf.TransDate
        join
            MainAccount, FullyQualifiedAccount
        from mainAccountLedgerDimensionView
            group by
                mainAccountLedgerDimensionView.MainAccount,
                generalJournalAccountEntry.TransactionCurrencyCode,
                generalJournalAccountEntry.PostingType,
                generalJournalAccountEntry.Text,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                _vendLedgerTransBuf.InvoiceId,
                _vendLedgerTransBuf.Name,
                _vendLedgerTransBuf.TraceNum,
                _vendLedgerTransBuf.TransDate,
                _vendLedgerTransBuf.VendAccountNum,
                _vendLedgerTransBuf.Voucher
            order by
                _vendLedgerTransBuf.VendAccountNum, _vendLedgerTransBuf.TransDate, _vendLedgerTransBuf.Voucher
            where
                generalJournalAccountEntry.LedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId &&
                (!mainAccountId || mainAccountLedgerDimensionView.MainAccount == mainAccountId)
        notexists join subledgerJournalAccountEntry
            where
                subledgerJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId;

        // put summed amounts for transactions that were transferred from subledger journal into
        // intermediate table
        insert_recordSet vendLedgerTransTmpIntermediate
            (Voucher, TransDate, InvoiceId, Name, TraceNum, VendAccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, Posting, AccountNum, DisplayValue)
        select
            Voucher, TransDate, InvoiceId, Name, TraceNum, VendAccountNum
        from _vendLedgerTransBuf
        join
            sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), TransactionCurrency, PostingType
        from subledgerJournalAccountEntry
        join subledgerJournalEntry
            where
                subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry &&
                subledgerJournalEntry.Status == SubledgerJournalEntryStatus::Transferred
        join generalJournalAccountEntry
            where
                generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
        join generalJournalEntry
            where
                generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && (generalJournalEntry.JournalCategory != LedgerTransType::Purch
                || (generalJournalEntry.JournalCategory == LedgerTransType::Purch && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchPckSlp && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchReceipt))
        join subledgerVoucherLink
            where
                subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                subledgerVoucherLink.Voucher == _vendLedgerTransBuf.Voucher &&
                subledgerVoucherLink.VoucherDataAreaId == _vendLedgerTransBuf.SavedDataAreaId &&
                subledgerVoucherLink.AccountingDate == _vendLedgerTransBuf.TransDate
        join
            MainAccount, FullyQualifiedAccount
        from mainAccountLedgerDimensionView
            group by
                mainAccountLedgerDimensionView.MainAccount,
                subledgerJournalAccountEntry.TransactionCurrency,
                subledgerJournalAccountEntry.PostingType,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                _vendLedgerTransBuf.Voucher,
                _vendLedgerTransBuf.TransDate,
                _vendLedgerTransBuf.InvoiceId,
                _vendLedgerTransBuf.Name,
                _vendLedgerTransBuf.TraceNum,
                _vendLedgerTransBuf.VendAccountNum,
                generalJournalAccountEntry.Text
            order by
                _vendLedgerTransBuf.VendAccountNum, _vendLedgerTransBuf.TransDate, _vendLedgerTransBuf.Voucher
            where
                mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension &&
                (!mainAccountId || mainAccountLedgerDimensionView.MainAccount == mainAccountId);

        //  sum amounts for transactions that are of transaction type purchase order
        insert_recordSet vendLedgerTransTmpIntermediate
            (Voucher, TransDate, InvoiceId, Name, TraceNum, VendAccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, Posting, Txt, AccountNum, DisplayValue)
        select CostLedgerVoucher
        from vendInvoiceJour
        join
            TransDate, InvoiceId, Name, TraceNum, VendAccountNum
        from _vendLedgerTransBuf
            where
                _vendLedgerTransBuf.InvoiceId == vendInvoiceJour.InvoiceId
                && _vendLedgerTransBuf.Voucher == vendInvoiceJour.LedgerVoucher
                && _vendLedgerTransBuf.TransDate == vendInvoiceJour.InvoiceDate
                && _vendLedgerTransBuf.VendAccountNum == vendInvoiceJour.InvoiceAccount
        join
            sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), TransactionCurrencyCode, PostingType, Text
        from generalJournalAccountEntry
        join generalJournalEntry
            where
                generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.JournalCategory == LedgerTransType::Purch
                && (generalJournalAccountEntry.PostingType == LedgerPostingType::PurchPckSlp ||
                generalJournalAccountEntry.PostingType == LedgerPostingType::PurchReceipt)
        join subledgerVoucherLink
            where
                subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                subledgerVoucherLink.Voucher == vendInvoiceJour.CostLedgerVoucher &&
                subledgerVoucherLink.VoucherDataAreaId == _vendLedgerTransBuf.SavedDataAreaId &&
                subledgerVoucherLink.AccountingDate == _vendLedgerTransBuf.TransDate
        join
            MainAccount, FullyQualifiedAccount
        from mainAccountLedgerDimensionView
            group by
                mainAccountLedgerDimensionView.MainAccount,
                generalJournalAccountEntry.TransactionCurrencyCode,
                generalJournalAccountEntry.PostingType,
                generalJournalAccountEntry.Text,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                _vendLedgerTransBuf.TransDate,
                _vendLedgerTransBuf.InvoiceId,
                _vendLedgerTransBuf.Name,
                _vendLedgerTransBuf.TraceNum,
                _vendLedgerTransBuf.VendAccountNum,
                vendInvoiceJour.CostLedgerVoucher
            order by
                _vendLedgerTransBuf.VendAccountNum, _vendLedgerTransBuf.TransDate
            where
                generalJournalAccountEntry.LedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId &&
                (!mainAccountId || mainAccountLedgerDimensionView.MainAccount == mainAccountId);

        // Combine the summed amounts from the intermediate table into the correct order for display
        insert_recordset vendLedgerTransTmp
            (AccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, DisplayValue, InvoiceId, Name, Posting, TraceNum, TransDate, Txt, VendAccountNum, Voucher)
            select
                AccountNum,
                AmountCur,
                AmountMST,
                ReportingCurrencyAmount,
                CurrencyCode,
                DisplayValue, InvoiceId, Name, Posting, TraceNum, TransDate, Txt, VendAccountNum, Voucher
            from vendLedgerTransTmpIntermediate
            order by
                VendAccountNum, TransDate, Voucher, DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTotalsLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the records and inserts them into the <c>VendLedgerTransTmp</c> table when the
    /// <c>TotalsPerLedgerAccount</c> parameter IS checked.
    /// </summary>
    /// <param name="_vendLedgerTransBuf">
    /// The temporary table buffer that is passed in from <c>process</c> containing all valid records
    /// to query against.
    /// </param>
    private void fetchTotalsLedgerTrans(VendLedgerTransBuf _vendLedgerTransBuf)
    {
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalEntry subledgerJournalEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        VendInvoiceJour vendInvoiceJour;

        // put summed amounts for transactions that were not transferred from subledger journal into
        // intermediate table
        insert_recordSet vendLedgerTransTmpIntermediate
            (Name, VendAccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, AccountNum, DisplayValue)
        select
            Name, VendAccountNum
        from _vendLedgerTransBuf
        join
            sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), TransactionCurrencyCode
        from generalJournalAccountEntry
        join
            generalJournalEntry
            where
                generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && (generalJournalEntry.JournalCategory != LedgerTransType::Purch
                || (generalJournalEntry.JournalCategory == LedgerTransType::Purch && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchPckSlp && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchReceipt))
        join
            subledgerVoucherLink
            where
                subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                subledgerVoucherLink.Voucher == _vendLedgerTransBuf.Voucher &&
                subledgerVoucherLink.VoucherDataAreaId == _vendLedgerTransBuf.SavedDataAreaId &&
                subledgerVoucherLink.AccountingDate == _vendLedgerTransBuf.TransDate
        join
            MainAccount, FullyQualifiedAccount
        from mainAccountLedgerDimensionView
            group by
                mainAccountLedgerDimensionView.MainAccount,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                _vendLedgerTransBuf.Name,
                _vendLedgerTransBuf.VendAccountNum,
                generalJournalAccountEntry.TransactionCurrencyCode
            order by
                _vendLedgerTransBuf.VendAccountNum
            where
                generalJournalAccountEntry.LedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId &&
                (!mainAccountId || mainAccountLedgerDimensionView.MainAccount == mainAccountId)
        notexists join subledgerJournalAccountEntry
            where subledgerJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId;

        // put summed amounts for transactions that were transferred from subledger journal into
        // intermediate table
        insert_recordSet vendLedgerTransTmpIntermediate
            (Name, VendAccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, AccountNum, DisplayValue)
        select
            Name, VendAccountNum
        from _vendLedgerTransBuf
        join
            sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), TransactionCurrency
        from subledgerJournalAccountEntry
        join subledgerJournalEntry
            where
                subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry &&
                subledgerJournalEntry.Status == SubledgerJournalEntryStatus::Transferred
        join generalJournalAccountEntry
            where
                generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
        join generalJournalEntry
            where
                generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && (generalJournalEntry.JournalCategory != LedgerTransType::Purch
                || (generalJournalEntry.JournalCategory == LedgerTransType::Purch && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchPckSlp && generalJournalAccountEntry.PostingType != LedgerPostingType::PurchReceipt))
        join subledgerVoucherLink
            where
                subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                subledgerVoucherLink.Voucher == _vendLedgerTransBuf.Voucher &&
                subledgerVoucherLink.VoucherDataAreaId == _vendLedgerTransBuf.SavedDataAreaId &&
                subledgerVoucherLink.AccountingDate == _vendLedgerTransBuf.TransDate
        join
            MainAccount, FullyQualifiedAccount
        from mainAccountLedgerDimensionView
            group by
                mainAccountLedgerDimensionView.MainAccount,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                _vendLedgerTransBuf.Name,
                _vendLedgerTransBuf.VendAccountNum,
                subledgerJournalAccountEntry.TransactionCurrency
            order by
                _vendLedgerTransBuf.VendAccountNum
            where
                mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension &&
                (!mainAccountId || mainAccountLedgerDimensionView.MainAccount == mainAccountId);

        // sum amounts for transactions that are of transaction type purchase order
        insert_recordSet vendLedgerTransTmpIntermediate
            (Voucher, Name, VendAccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, AccountNum, DisplayValue)
        select CostLedgerVoucher
        from vendInvoiceJour
        join
            Name, VendAccountNum
        from _vendLedgerTransBuf
            where
                _vendLedgerTransBuf.InvoiceId == vendInvoiceJour.InvoiceId
                && _vendLedgerTransBuf.Voucher == vendInvoiceJour.LedgerVoucher
                && _vendLedgerTransBuf.TransDate == vendInvoiceJour.InvoiceDate
                && _vendLedgerTransBuf.VendAccountNum == vendInvoiceJour.InvoiceAccount
        join
            sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), TransactionCurrencyCode
        from generalJournalAccountEntry
        join generalJournalEntry
            where
                generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.JournalCategory == LedgerTransType::Purch
                && (generalJournalAccountEntry.PostingType == LedgerPostingType::PurchPckSlp || generalJournalAccountEntry.PostingType == LedgerPostingType::PurchReceipt)
        join subledgerVoucherLink
            where
                subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                subledgerVoucherLink.Voucher == vendInvoiceJour.CostLedgerVoucher &&
                subledgerVoucherLink.VoucherDataAreaId == _vendLedgerTransBuf.SavedDataAreaId &&
                subledgerVoucherLink.AccountingDate == _vendLedgerTransBuf.TransDate
        join
            MainAccount, FullyQualifiedAccount
        from mainAccountLedgerDimensionView
            group by
                mainAccountLedgerDimensionView.MainAccount,
                generalJournalAccountEntry.TransactionCurrencyCode,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                _vendLedgerTransBuf.Name,
                _vendLedgerTransBuf.VendAccountNum,
                vendInvoiceJour.CostLedgerVoucher
            where
                mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension &&
                (!mainAccountId || mainAccountLedgerDimensionView.MainAccount == mainAccountId);

        // Combine the summed amounts from the intermediate table, summing again if needed, into the correct groups
        // and order for display
        if (mainAccountOnly)
        {
            insert_recordset vendLedgerTransTmp(AccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, Name, Posting, VendAccountNum)
                select
                    AccountNum, sum(AmountCur), sum(AmountMST), sum(ReportingCurrencyAmount), CurrencyCode, Name, Posting, VendAccountNum
                from vendLedgerTransTmpIntermediate
                group by
                    AccountNum, CurrencyCode, Name, Posting, VendAccountNum
                order by
                    VendAccountNum;
        }
        else
        {
            insert_recordset vendLedgerTransTmp(AccountNum, AmountCur, AmountMST, ReportingCurrencyAmount, CurrencyCode, DisplayValue, Name, Posting, VendAccountNum)
                select
                    AccountNum, sum(AmountCur), sum(AmountMST), sum(ReportingCurrencyAmount), CurrencyCode, DisplayValue, Name, Posting, VendAccountNum
                from vendLedgerTransTmpIntermediate
                group by
                    AccountNum, CurrencyCode, DisplayValue, Name, Posting, VendAccountNum
                order by
                    VendAccountNum, DisplayValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendLedgerTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>VendLedgerTransTmp</c> table for the report.
    /// </summary>
    /// <returns>
    /// The <c>VendLedgerTransTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(VendLedgerTransTmp))]
    public VendLedgerTransTmp getVendLedgerTransTmp()
    {
        select vendLedgerTransTmp;

        return vendLedgerTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves records by using the parameters entered.
    /// </summary>
    public void processReport()
    {
        Voucher voucherOld;
        TransDate transdateOld;
        boolean first = true;
        AccountNum prevAccountNum;
        VendName prevVendName;
        VendTable vendTable;
        VendTrans vendTrans;
        TransactionReversalTrans transactionReversalTrans;
        VendLedgerTransBuf vendLedgerTransBuf;
        RecordInsertList recordInsertList;
        Query query;
        QueryRun queryRun;
        VendLedgerTransContract contract;

        this.takeOwnershipOfTempTable(vendLedgerTransBuf);
        this.takeOwnershipOfTempTable(vendLedgerTransTmp);
        this.takeOwnershipOfTempTable(vendLedgerTransTmpIntermediate);

        query = new Query(this.parmQuery());
        contract = this.parmDataContract() as VendLedgerTransContract;
        recordInsertList = new RecordInsertList(vendLedgerTransBuf.TableId, true, true, true, false, true, vendLedgerTransBuf);

        totalsPerLedgerAccount = contract.parmTotalsPerLedgerAccount();
        mainAccountOnly = contract.parmMainAccountOnly();
        mainAccountId = contract.parmMainAccountId();

        queryRun = new QueryRun(query);

        // add relevant results to temporary TempDB table
        while (queryRun.next())
        {
            vendTable = queryRun.get(tableNum(VendTable));
            vendTrans = queryRun.get(tableNum(VendTrans));
            transactionReversalTrans = queryRun.get(tableNum(TransactionReversalTrans));

            if (first || (vendTrans.TransDate != transdateOld || vendTrans.Voucher != voucherOld))
            {
                first = false;
                transdateOld = vendTrans.TransDate;
                voucherOld = vendTrans.Voucher;

                // Eliminate excess vendTable.name() calls
                if (vendTable.AccountNum != prevAccountNum)
                {
                    prevAccountNum = vendTable.AccountNum;
                    prevVendName = vendTable.name();
                }

                vendLedgerTransBuf.clear();

                vendLedgerTransBuf.Voucher = vendTrans.Voucher;
                vendLedgerTransBuf.TransDate = vendTrans.TransDate;
                vendLedgerTransBuf.InvoiceId = vendTrans.Invoice;
                vendLedgerTransBuf.Name = prevVendName;
                vendLedgerTransBuf.TraceNum = transactionReversalTrans.TraceNum;
                vendLedgerTransBuf.VendAccountNum = vendTrans.AccountNum;
                vendLedgerTransBuf.SavedDataAreaId = vendTrans.DataAreaId;

                recordInsertList.add(vendLedgerTransBuf);

                LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
                select firstonly ToVoucher, ToDate from ledgerJournalVoucherChanged
                    where ledgerJournalVoucherChanged.ToVoucher != vendTrans.Voucher
                        && ledgerJournalVoucherChanged.FromVoucher == vendTrans.Voucher
                        && ledgerJournalVoucherChanged.FromDate == vendTrans.TransDate
                        && ledgerJournalVoucherChanged.JournalNum == vendTrans.JournalNum;

                if (ledgerJournalVoucherChanged)
                {
                    vendLedgerTransBuf.Voucher = ledgerJournalVoucherChanged.ToVoucher;
                    vendLedgerTransBuf.TransDate = ledgerJournalVoucherChanged.ToDate;

                    recordInsertList.add(vendLedgerTransBuf);
                }
            }
        }

        recordInsertList.insertDatabase();

        // Get records based on results of query
        if (totalsPerLedgerAccount)
        {
            this.fetchTotalsLedgerTrans(vendLedgerTransBuf);
        }
        else
        {
            this.fetchLedgerTrans(vendLedgerTransBuf);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>