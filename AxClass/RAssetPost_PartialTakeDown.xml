<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_PartialTakeDown</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_PartialTakeDown extends RAssetPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateAssetTrans</Name>
				<Source><![CDATA[
    public boolean canCreateAssetTrans()
    {
        return ledgerJournalTrans_RAsset.CanDisposal ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsName</Name>
				<Source><![CDATA[
    protected RDeferralsName deferralsName()
    {
        return "@GLS116983" + ' ' + "@GLS116642";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lossAmount</Name>
				<Source><![CDATA[
    protected RAssetAmount lossAmount()
    {
        LedgerJournalTrans         ledgerJournalTransRAP;
        LedgerJournalTrans_RAsset  ledgerJournalTransRAP_RAsset;
        ;

        if (rAssetStandards.AssetStandardId == RAssetParameters::standardTaxIdDefault())
        {
            select firstonly ledgerJournalTransRAP
                where ledgerJournalTransRAP.JournalNum        == ledgerJournalTrans.JournalNum
            join ledgerJournalTransRAP_RAsset
                where ledgerJournalTransRAP_RAsset.RefRecId   == ledgerJournalTransRAP.RecId   &&
                      ledgerJournalTransRAP_RAsset.StandardId == RAssetParameters::standardIdDefault();

            if (ledgerJournalTransRAP.RecId)
                return CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTransRAP_RAsset.sumDisposable(ledgerJournalTransRAP), ledgerJournalTransRAP.CurrencyCode, rAssetStandards.CurrencyCode, transDate) -
                       CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans_RAsset.sumPartial(ledgerJournalTransRAP), ledgerJournalTrans.CurrencyCode, rAssetStandards.CurrencyCode, transDate);
            else
                return 0;
        }
        return CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans_RAsset.sumDisposable(ledgerJournalTrans) - ledgerJournalTrans_RAsset.sumPartial(ledgerJournalTrans), ledgerJournalTrans.CurrencyCode, rAssetStandards.CurrencyCode, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        InventMov_Scrap_RU      movement;
        InventUpd_Financial     financial;
        InventUpd_Estimated     estimated;
        RAssetScrap             rAssetScrap;
        TransDate               scrapTransDate = ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans);
        ;
    
        ttsbegin;
    
        while select forupdate rAssetScrap
            where rAssetScrap.AssetId     == ledgerJournalTrans_RAsset.AssetId &&
                  rAssetScrap.Assembling  == NoYes::No                     &&
                  ! rAssetScrap.TransDate
        {
            if (strltrim(strrtrim(rAssetScrap.ItemId)) == strltrim(strrtrim(ledgerJournalTrans.Txt)))
            {
                rAssetScrap.InventTransId      = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                rAssetScrap.DefaultDimension   = ledgerJournalTrans.DefaultDimension;
                rAssetScrap.TransDate          = scrapTransDate;
                rAssetScrap.Voucher            = ledgerJournalTrans.Voucher;
                rAssetScrap.update();
    
                movement                  = InventMovement::construct(rAssetScrap);
                estimated                 = InventUpd_Estimated::newInventMovement(movement);
                estimated.updateNow();
    
                financial                 = InventUpd_Financial::newPostAsset_RU(movement,
                                                                                 ledgerVoucher,
                                                                                 abs(rAssetScrap.CostAmount) * movement.transSign());
    
                financial.updateNow();
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        if (! rAssetTable)
        {
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);
        }

        if (! rAssetStandards)
        {
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);
        }

        this.createDeferrals(RassetDeferralsType::PartialTakeDown);
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
