<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransIntercompanyJumpRef</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransIntercompanyJumpRef</c> class implements a custom go to main table action for the
///    intercompany references in the <c>ReqTransIntercompany</c> records.
/// </summary>
class ReqTransIntercompanyJumpRef
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the go to main table commands in the <c>CustomerReference</c> and <c>VendorReference</c>
    ///    fields in the <c>ReqTransIntercompany</c> view.
    /// </summary>
    /// <param name="_args">
    ///    The caller arguments.
    /// </param>
    /// <returns>
    ///    true if the command was successful; otherwise, false.
    /// </returns>
    public static boolean jumpRef(Args _args)
    {
        ReqTransIntercompany                    reqTransIntercompany;
        ReqTransIntercompanyPurch               reqTransIntercompanyPurch;
        ReqTransIntercompanySales               reqTransIntercompanySales;
        ReqTransIntercompanyItemPlannedOrder    reqTransIntercompanyItemPlannedOrder;
        ReqTransIntercompanyPlannedICDemand     reqTransIntercompanyPlannedICDemand;
        dataAreaId                              company;

        if (_args.dataset() == tablenum(ReqTransIntercompany))
        {
            reqTransIntercompany = _args.record() as ReqTransIntercompany;
            company = reqTransIntercompany.CustomerCompany ? reqTransIntercompany.CustomerCompany : reqTransIntercompany.VendorCompany;
            if (company)
            {
                appl.setDefaultCompany(company);

                switch (reqTransIntercompany.RefType)
                {
                    case ReqRefType::Purch:
                        select firstonly crossCompany InventTransOrigin from reqTransIntercompanyPurch
                            where reqTransIntercompanyPurch.ReqTrans == reqTransIntercompany.ReqTrans;
                        return InventTransFormHelper::jumpRefReferenceId(InventTransOrigin::find(reqTransIntercompanyPurch.InventTransOrigin), _args.openMode());

                    case ReqRefType::Sales:
                        select firstonly crossCompany InventTransOrigin from reqTransIntercompanySales
                            where reqTransIntercompanySales.ReqTrans == reqTransIntercompany.ReqTrans;
                        return InventTransFormHelper::jumpRefReferenceId(InventTransOrigin::find(reqTransIntercompanySales.InventTransOrigin), _args.openMode());

                    case ReqRefType::ItemPlannedOrder:
                        select firstonly crossCompany IntercompanyReqTrans from reqTransIntercompanyItemPlannedOrder
                            where reqTransIntercompanyItemPlannedOrder.ReqTrans == reqTransIntercompany.ReqTrans;
                        return ReqTrans::findRecId(reqTransIntercompanyItemPlannedOrder.IntercompanyReqTrans).jumpRefRefId(_args.caller(), _args.openMode());

                    case ReqRefType::PlannedIntercompanyDemand:
                        select firstonly crossCompany IntercompanyPlanVersion, Reference from reqTransIntercompanyPlannedICDemand
                            where reqTransIntercompanyPlannedICDemand.ReqTrans == reqTransIntercompany.ReqTrans;
                        return ReqPO::jumpRefRefId(_args.caller(),reqTransIntercompanyPlannedICDemand.Reference, reqTransIntercompanyPlannedICDemand.IntercompanyPlanVersion, _args.openMode());
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args _args)
    {
        ReqTransIntercompanyJumpRef::jumpRef(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>