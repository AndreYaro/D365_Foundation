<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceBasisCalcFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Factory for <c>RetailPriceBasisCalculator</c> class hierarchy.
/// </summary>
abstract class RetailPriceBasisCalcFactory
{
    RetailPriceBasisCalc calculator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculator</Name>
				<Source><![CDATA[
    private RetailPriceBasisCalc calculator()
    {
        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultCalculator</Name>
				<Source><![CDATA[
    private void createDefaultCalculator(RetailPriceBasisType _priceBasisType, ItemId _itemId)
    {
        calculator = RetailPriceBasisCalcFactory::getCalculatorFromBasisType(_priceBasisType, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    protected void initFromPriceDiscAdmTrans(PriceDiscAdmTrans _priceDiscAdmTrans, PriceGroupId _otherPriceGroup)
    {
        calculator.parmCurrencyCodeTo(_priceDiscAdmTrans.Currency);
        calculator.parmItemId(_priceDiscAdmTrans.itemId());
        calculator.parmInventDim(_priceDiscAdmTrans.inventDim());
        calculator.parmUnitIdTo(_priceDiscAdmTrans.UnitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance of <c>RetailPriceBasisCalc</c> by correct <c>RetailCategoryPriceRule</c> field values.
    /// </summary>
    /// <param name="_priceRule">
    /// Price rule line for initialization.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    abstract protected void initFromPriceRule(RetailCategoryPriceRule _priceRule, ItemId _itemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static RetailPriceBasisCalcFactory construct(RetailPriceBasisType _priceBasisType)
    {
        RetailPriceBasisCalcFactory                factory;
        RetailPriceBasisCalcExtensionAttribute     extensionAttribute = new RetailPriceBasisCalcExtensionAttribute(_priceBasisType);

        factory = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RetailPriceBasisCalcFactory), extensionAttribute);

        return factory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatorFromBasisType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instance of <c>RetailPriceBasisCalculator</c> class.
    /// </summary>
    /// <param name="_priceBasisType">
    /// Price basis type.
    /// </param>
    /// <param name="_itemId">
    /// Item id for price calculation.
    /// </param>
    /// <returns>
    /// Instance of <c>RetailPriceBasisCalculator</c> class.
    /// </returns>
    /// <remarks>
    /// No need to create instance of factory in this case.
    /// </remarks>
    public static RetailPriceBasisCalc getCalculatorFromBasisType(RetailPriceBasisType _priceBasisType, ItemId _itemId)
    {
        RetailPriceBasisCalcExtensionAttribute     extensionAttribute = new RetailPriceBasisCalcExtensionAttribute(_priceBasisType);
        RetailPriceBasisCalc                       calculator;

        calculator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RetailPriceBasisCalc), extensionAttribute);
        calculator.init();

        calculator.parmItemId(_itemId);

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatorFromPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instance of <c>RetailPriceBasisCalculator</c> class.
    /// </summary>
    /// <param name="_priceDiscAdmTrans">
    /// Line of trade agreement journal.
    /// </param>
    /// <param name="_priceBasisType">
    /// Price basis type.
    /// </param>
    /// <param name="_priceBasisDate">
    /// Price basis date.
    /// </param>
    /// <param name="_exchangeRateTypeRecId">
    /// Exchange rate type.
    /// </param>
    /// <param name="_otherPriceGroup">
    /// Other price group for price calculation.
    /// </param>
    /// <returns>
    /// Instance of <c>RetailPriceBasisCalculator</c> class.
    /// </returns>
    /// <remarks>
    /// Makes a default calculator for the type received and initializes it from trade agreement journal line.
    /// </remarks>
    public static RetailPriceBasisCalc getCalculatorFromPriceDiscAdmTrans(PriceDiscAdmTrans    _priceDiscAdmTrans,
                                                                          RetailPriceBasisType _priceBasisType,
                                                                          RetailPriceBasisDate _priceBasisDate,
                                                                          ExchangeRateTypeRecId _exchangeRateTypeRecId,
                                                                          PriceGroupId         _otherPriceGroup = "")
    {
        RetailPriceBasisCalc                    calculator;
        RetailPriceBasisCalcFactory             calculatorFactory;

        calculatorFactory = RetailPriceBasisCalcFactory::construct(_priceBasisType);
        calculatorFactory.createDefaultCalculator(_priceBasisType, _priceDiscAdmTrans.itemId());
        calculatorFactory.initFromPriceDiscAdmTrans(_priceDiscAdmTrans, _otherPriceGroup);

        calculator = calculatorFactory.calculator();

        calculator.parmExchangeRateTypeRecId(_exchangeRateTypeRecId);
        calculator.parmDatePrice(_priceBasisDate);

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatorFromPriceRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instance of <c>RetailPriceBasisCalculator</c> class
    /// based on <c>RetailCategoryPriceRule</c> record.
    /// </summary>
    /// <param name="_priceRule">
    /// Price rule record.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <param name="_currencyTo">
    /// Currency for price basis calculation.
    /// </param>
    /// <param name="_unitIdTo">
    /// Unit of measure for calculation.
    /// </param>
    /// <param name="_priceBasisDate">
    /// Date for price basis calulation.
    /// </param>
    /// <returns>
    /// Instance of <c>RetailPriceBasisCalculator</c> class.
    /// </returns>
    public static RetailPriceBasisCalc getCalculatorFromPriceRule(
        RetailCategoryPriceRule _priceRule,
        ItemId                  _itemId,
        CurrencyCode            _currencyTo,
        UnitOfMeasureSymbol     _unitIdTo,
        RetailPriceBasisDate    _priceBasisDate)
    {
        RetailPriceBasisCalcFactory          calculatorFactory = RetailPriceBasisCalcFactory::construct(_priceRule.PriceBasis);
        RetailPriceBasisCalc                 calculator;

        calculatorFactory.createDefaultCalculator(_priceRule.PriceBasis, _itemId);
        calculatorFactory.initFromPriceRule(_priceRule, _itemId);

        calculator = calculatorFactory.calculator();

        calculator.parmCurrencyCodeTo(_currencyTo);
        calculator.parmUnitIdTo(_unitIdTo);
        calculator.parmDatePrice(_priceBasisDate);

        return calculator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>