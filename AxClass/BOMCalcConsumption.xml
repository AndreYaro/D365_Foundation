<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcConsumption</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcConsumption
{
    BOMCalcData     calcData;

    BOMQty          bomQty;
    BOMTable        bomTable;
    Qty             serieSize;
    real            signSerieSize;

    PmfYieldPct     pmfYieldPct;
    boolean         pmfApplyYeildPct;
    Percent         pmfAdjConsumption;
    boolean         applyAdjConsumption;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustMeasureConfig</Name>
				<Source><![CDATA[
    protected void adjustMeasureConfig(BOMMap   bom)
    {
        bomQty = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomQty</Name>
				<Source><![CDATA[
    BOMQty bomQty(BOMMap bom)
    {
        this.calcSerieSize(bom);
        this.adjustMeasureConfig(bom);

        return bomQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    public Qty calcConsumption(
        BOMMap              bom,
        Percent             calcAccError            = 1,
        NoYes               includeConstantConsump  = NoYes::Yes,
        NoYes               includeVariableScrap    = NoYes::Yes,
        NoYes               includeConstantScrap    = NoYes::Yes
        )
    {
        return this.calcConsumptionPrim(bom,
                                        calcAccError,
                                        includeConstantConsump,
                                        includeVariableScrap,
                                        includeConstantScrap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumptionPrim</Name>
				<Source><![CDATA[
    protected Qty calcConsumptionPrim(
        BOMMap              bom,
        Percent             calcAccError            = 1,
        NoYes               includeConstantConsump  = NoYes::Yes,
        NoYes               includeVariableScrap    = NoYes::Yes,
        NoYes               includeConstantScrap    = NoYes::Yes
        )
    {
        Qty             calculatedQty;

        Factor          calcHeight;
        Factor          calcWidth;
        Factor          calcDepth;

        Factor          calcFactor;

        BOMQty          tmpScrapConst;
        BOMQty          tmpScrapVar;

        boolean         isBOMCalcConsumptionYieldApplyingFlightEnabled = PmfBOMCalcConsumptionYieldApplyingFlight::instance().isEnabled();

        tmpScrapConst   = ( includeConstantConsump && includeConstantScrap) ? bom.scrapConst() : 0;
        tmpScrapVar     = includeVariableScrap ? bom.scrapVar() / 100 : 0;

        this.calcSerieSize(bom);

        // Calculate the bomQty depending on the BOMFormula
        this.adjustMeasureConfig(bom);

        if (isBOMCalcConsumptionYieldApplyingFlightEnabled
            && #PmfEnabled
            && bom.bomConsump == BOMConsumpType::Variable
            && pmfApplyYeildPct
            && pmfYieldPct
            && bomQty)
        {
            bomQty = (bomQty / pmfYieldPct) * 100;
        }

        if (bom.RoundUp == BOMRoundUp::Qty)
        {
            bomQty = roundUp(bomQty, bom.RoundUpQty);
        }

        // SerieSize is already multiplied to bomQty
        if (bom.bomConsump == BOMConsumpType::Variable || includeConstantConsump)
        {
            // Adjust for variable scrap, constant scrap and error like this:
            //
            // Seriesize   = +10
            // Bom qty     =  -2
            // Const scrap =  +1 OR var scrap = 5%
            // Calc qty    = -19, because "making" one bom should put less on stock when having scrap
            //
            // Seriesize   = -10
            // Bom qty     =  +2
            // Const scrap =  +1 OR var scrap = 5%
            // Calc qty    = -21 (after changing sign to nagative again), because "disassembling" one bom should give same scrap as when creating

            calculatedQty = ((bomQty + abs(bomQty * tmpScrapVar)) * calcAccError) + tmpScrapConst;
        }
        else
        {
            calculatedQty = 0;
        }

        // Rounding from here
        switch (bom.RoundUp)
        {
            case BOMRoundUp::MeasureConfig:
                if (serieSize && bom.RoundUpQty >= bomQty/serieSize)
                {
                    calcFactor      = (bom.Constant ? bom.Constant : 1);

                    if (bomQty)
                        calcHeight  =   calculatedQty * calcFactor * (serieSize ? serieSize : 1) / bomQty;
                    else
                        calcHeight  =   calculatedQty * calcFactor;

                    if (calculatedQty)
                        calcWidth   =   bom.RoundUpQty * (calcHeight ? calcHeight : 1) / calculatedQty;

                    calcWidth       =   trunc(calcWidth);
                    calcDepth       =   calcHeight / (calcWidth ? calcWidth : 1);
                    calcDepth       =   roundUp(calcDepth,1);
                    calculatedQty   =   calcDepth * bom.RoundUpQty;
                }
                break;

            case BOMRoundUp::Consumption:
                if (calculatedQty >= 0)
                    calculatedQty = roundUp(calculatedQty,bom.RoundUpQty);
                else
                    calculatedQty = roundDown(calculatedQty,bom.RoundUpQty);
                break;
        }
        if (#PmfEnabled)
        {
            if (!isBOMCalcConsumptionYieldApplyingFlightEnabled
                && bom.bomConsump == BOMConsumpType::Variable
                && pmfApplyYeildPct
                && calculatedQty
                && pmfYieldPct)
            {
                calculatedQty = (calculatedQty / pmfYieldPct) * 100;
            }

            if (applyAdjConsumption)
            {
                calculatedQty = calculatedQty * pmfAdjConsumption /100;
            }
        }

        calculatedQty = decround(calculatedQty,
                                min(UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(bom.UnitId)),
                                    UnitOfMeasureSCMFieldValidationEventHandlers::MaxInventUnitDecimalPrecision));

        // Convert the quantity to have the correct sign again
        return calculatedQty * signSerieSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSerieSize</Name>
				<Source><![CDATA[
    void calcSerieSize(BOMMap bom)
    {
        // Find seriesize
        if (bom.bomConsump == BOMConsumpType::Variable)
            serieSize = calcData.seriesSize();
        else if (bom.bomConsump == BOMConsumpType::Constant)
            serieSize = (calcData.seriesSize() >= 0 ? 1 : -1);

        // Remember and remove the sign from series size to ensure the exact same rounding calculation for positive
        // and negative series values
        signSerieSize = sign(serieSize);
        serieSize = abs(serieSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the BOM record buffer, either from cache or from database.
    /// </summary>
    /// <param name="_bom">
    ///     The BOM line.
    /// </param>
    /// <returns>
    ///     The BOM record buffer.
    /// </returns>
    protected BOMTable getBOMTable(BOMMap _bom)
    {
        if (!bomTable)
        {
            bomTable = _bom.pmfBOMTable();
        }

        return bomTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(BOMCalcData    _calcData)
    {
        calcData = _calcData;

        pmfAdjConsumption = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApplyAdjConsumption</Name>
				<Source><![CDATA[
    public boolean parmApplyAdjConsumption(boolean _applyAdjConsumption = applyAdjConsumption)
    {
        applyAdjConsumption = _applyAdjConsumption;
        return applyAdjConsumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomTable</Name>
				<Source><![CDATA[
    public BomTable parmBomTable(BomTable _bomTable = bomTable)
    {
        bomTable = _BomTable;
        return bomTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfAdjustConsumption</Name>
				<Source><![CDATA[
    public Percent parmPmfAdjustConsumption(
        Percent _adjConsumption = pmfAdjConsumption)
    {
        pmfAdjConsumption = _adjConsumption;
        return pmfAdjConsumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcConsumption</Name>
				<Source><![CDATA[
    public container pdsCWCalcConsumption(BOMMap _bom)
    {
        InventQty        calcQty;
        PdsCWInventQty   cwCalcQty;

        if (!PdsGlobal::pdsIsCWItem(_bom.ItemId))
        {
            return [0, 0];
        }

        this.calcSerieSize(_bom);

        [calcQty, cwCalcQty] = this.pdsCWSGetQtys(_bom);

        if (cwCalcQty > 0)
        {
            cwCalcQty = roundUp(cwCalcQty, 1);
        }
        else
        {
            cwCalcQty = roundDown(cwCalcQty, 1);
        }

        calcQty = PdsCatchWeight::inventQty(_bom.ItemId, cwCalcQty);

        return [calcQty, cwCalcQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSGetQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory and catch weight quantities for the bill of material line.
    /// </summary>
    /// <param name="_bom">
    ///  A bill of material record to retrieve the quantities from.
    /// </param>
    /// <returns>
    /// A contanier of the inventory and catch weight quantities.
    /// </returns>
    protected container pdsCWSGetQtys(BOMMap _bom)
    {
        InventQty        bqty, inventQty;
        PdsCWInventQty   cwQty;
        UnitOfMeasureConverter_Product converter = UnitOfMeasureConverter_Product::construct();
        
        if (_bom.bomConsump == BOMConsumpType::Variable)
        {
            bqty = _bom.bomQtySerie
                    ? (abs(serieSize) * _bom.bomQty) / _bom.bomQtySerie
                    : abs(serieSize) * _bom.bomQty;
        }
        else
        {
            bqty = _bom.BOMQty;
        }

        converter.parmFromUnitOfMeasure(UnitOfMeasure::unitOfMeasureIDBySymbol(_bom.UnitId));
        converter.parmToUnitOfMeasure(UnitOfMeasure::unitOfMeasureIDBySymbol(
            InventTableModule::find(_bom.ItemId, ModuleInventPurchSales::Invent).UnitId));
        converter.parmProduct(InventTable::itemProduct(_bom.ItemId));

        inventQty = converter.convertValue(bqty);

        if (_bom.bomConsump == BOMConsumpType::Variable
            && pmfApplyYeildPct
            && pmfYieldPct)
        {
            inventQty = (inventQty / pmfYieldPct) * 100;
        }

        cwQty = PdsCatchWeight::cwQty(_bom.ItemId, inventQty);

        return [inventQty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchBalanceCalcConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the correct BOM consumption quantity for a bill of material record which has been batch balanced.
    /// </summary>
    /// <param name = "_prodBOM">
    /// A bill of material record to retrieve the quantities from.
    /// </param>
    /// <returns>Returns the BOM Qty consumption of the bill of material record that has been batch balanced.</returns>
    [Hookable(false)]
    internal BOMQty pdsBatchBalanceCalcConsumption(ProdBOM _prodBOM)
    {
        UnitOfMeasureDecimalPrecision decimalPrecision = UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIDBySymbol(_prodBOM.UnitId));
            
        ProdQtyCalc prevSerieSize = ProdTable::find(_prodBOM.ProdId).QtySched;

        this.calcSerieSize(_prodBOM);

        var serieSizeFactor = serieSize / prevSerieSize;
            
        return decRound(_prodBOM.BOMQty * serieSizeFactor, decimalPrecision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfApplyYeildPct</Name>
				<Source><![CDATA[
    public boolean pmfApplyYeildPct(
        boolean _pmfApplyYeildPct = pmfApplyYeildPct)
    {
        pmfApplyYeildPct = _pmfApplyYeildPct;
        return pmfApplyYeildPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfParmYieldPct</Name>
				<Source><![CDATA[
    public PmfYieldPct pmfParmYieldPct(PmfYieldPct _pmfYieldPct = pmfYieldPct)
    {
        pmfYieldPct = _pmfYieldPct <= 0 ? 100 : _pmfYieldPct;
        return pmfYieldPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcConsumption construct(
        BOMFormula  formula,
        BOMCalcData calcData,
        PmfYieldPct _pmfYieldPct        = 100,
        boolean     _pmfApplyYeildPct   = false,
        bomTable    _bomTable           = null
        )
    {
        BOMCalcConsumption      bomCalcConsumption;

        switch (formula)
        {
            case BOMFormula::Formula0   :
                bomCalcConsumption =  new BOMCalcConsump_Formula0(calcData);
                break;
            case BOMFormula::Formula1   :
                bomCalcConsumption =  new BOMCalcConsump_Formula1(calcData);
                break;
            case BOMFormula::Formula2   :
                bomCalcConsumption =  new BOMCalcConsump_Formula2(calcData);
                break;
            case BOMFormula::Formula3   :
                bomCalcConsumption =  new BOMCalcConsump_Formula3(calcData);
                break;
            case BOMFormula::Formula4   :
                bomCalcConsumption =  new BOMCalcConsump_Formula4(calcData);
                break;
            case BOMFormula::Formula5   :
                bomCalcConsumption =  new BOMCalcConsump_Formula5(calcData);
                break;
            default                     :
                bomCalcConsumption =  new BOMCalcConsump_Formula0(calcData);
                break;
        }

        if (#PmfEnabled)
        {
            bomCalcConsumption.pmfParmYieldPct(_pmfYieldPct);
            bomCalcConsumption.pmfApplyYeildPct(_pmfApplyYeildPct);
        }

        bomCalcConsumption.parmBomTable(_bomTable);

        return bomCalcConsumption;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>