<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>TrvExpenseSettlementController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>TrvExpenseSettlementController</c> class is the controller class for the <c>TrvExpenseSettlementReport</c> report.
/// </summary>
public class TrvExpenseSettlementController extends SrsReportRunController implements BatchRetryable
{
    TrvExpTable trvExpTable;
    TrvExpTrans trvExpTrans;
    const str fromDateParam = "FromDate";
    const str toDateParam = "ToDate";

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>prePromptModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Modifies the report query and parameters by using the caller settings.
    /// </summary>
    protected void prePromptModifyContract()
    {
        TrvExpenseSettlementContract trvExpenseSettlementContract = this.parmReportContract().parmRdlContract() as TrvExpenseSettlementContract;

        trvExpenseSettlementContract.setValue(fromDateParam, DateStartMth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        trvExpenseSettlementContract.setValue(toDateParam, endmth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    protected void preRunModifyContract()
    {        
        TrvExpenseSettlementContract contract = this.parmReportContract().parmRdlContract() as TrvExpenseSettlementContract;
        ToDate toDate = DateTimeUtil::date(contract.getValue(toDateParam));
        FromDate fromDate = DateTimeUtil::date(contract.getValue(fromDateParam));

        if (toDate == dateNull())
        {
            toDate = dateMax();
        }

        Query query = this.getFirstQuery();
        SRSReportHelper::addFromAndToDateRangeToQuery(query, fromDate, toDate, tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TransDate));
        SRSReportHelper::addParameterValueRangeToQuery(query, tablenum(TrvExpTable), fieldnum(TrvExpTable, ReferenceDataAreaId), curExt());
    }

]]></Source>
      </Method>
      <Method>
        <Name>setRecord</Name>
        <Source><![CDATA[
    private void setRecord()
    {
        switch (this.parmArgs().record().TableId)
        {
            case tableNum(TrvExpTable):
                trvExpTable = this.parmArgs().record();
                break;

            case tableNum(TrvExpTrans):
                trvExpTrans = this.parmArgs().record();
                trvExpTable = TrvExpTable::find(trvExpTrans.ExpNumber);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
      
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller  = new TrvExpenseSettlementController();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(TrvExpenseSettlementReport, Report));
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>