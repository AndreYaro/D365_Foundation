<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupProcessTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimLPCleanupProcessTask extends RunBaseBatch implements BatchRetryable
{
    #ISOCountryRegionCodes

    protected Array refTableTaskArray;
    protected List  specialRefTableTaskList;
    protected SysGuidString sessionId;
    protected InventDimLPCleanupJob cleanupJob;
    protected InventDimLPCleanupTask inventDimLPCleanupTask;
    private NoYes updateRefTable;
    private RecordInsertList recordInsertList;
    private int insertedRecordCount;
    private boolean updateRefTableAllSucceed;
    private boolean bundleUpdateRefTablesEnabled;
    private boolean separateUpdateFlightEnabled;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        sessionId
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return InventDimLPCleanupProcessTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventDimLPCleanupProcessTask construct()
    {
        return new InventDimLPCleanupProcessTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventDimLPCleanupProcessTaskDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupProcessTask newFromParameters(SysGuidString _sessionId)
    {
        if (!_sessionId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        InventDimLPCleanupProcessTask inventDimLPCleanupProcessTask = InventDimLPCleanupProcessTask::construct();
        inventDimLPCleanupProcessTask.getLast();
        inventDimLPCleanupProcessTask.parmSessionId(_sessionId);

        return inventDimLPCleanupProcessTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionId</Name>
				<Source><![CDATA[
    public SysGuidString parmSessionId(SysGuidString _sessionId = sessionId)
    {
        sessionId = _sessionId;
        return sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            using (var context = InventDimLPCleanupInventTransUpdateFlight::instance().isEnabled() ? InventDimLPCleanupInventTransUpdateContext::construct() : null)
            {
                this.processCleanupJob();

                if (!updateRefTableAllSucceed)
                {
                    // Change the batch status from Ended to Error
                    throw Exception::Error;
                }
            }
        }
        finally
        {
            if (InventDimLPCleanupBatchTaskMergeFlight::instance().isEnabled())
            {
                ttsbegin;
                delete_from inventDimLPCleanupTask
                    where inventDimLPCleanupTask.SessionId     == sessionId
                       && inventDimLPCleanupTask.CleanupStatus == InventDimLPCleanupStatus::Complete;

                cleanupJob = InventDimLPCleanupJob::findBySessionId(sessionId, true);

                inventDimLPCleanupTask.clear();
                select firstonly RecId from inventDimLPCleanupTask
                    where inventDimLPCleanupTask.SessionId == sessionId;

                if (inventDimLPCleanupTask.RecId != 0)
                {
                    cleanupJob.StopRunning = NoYes::Yes;
                }
                else
                {
                    cleanupJob.StopRunning = NoYes::No;
                    if (separateUpdateFlightEnabled && updateRefTable == NoYes::No)
                    {
                        cleanupJob.Status = InventDimLPCleanupStatus::ReadyForUpdateRefTable;
                    }
                    else
                    {
                        cleanupJob.Status = InventDimLPCleanupStatus::Complete;
                    }
                }
                cleanupJob.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCleanupJob</Name>
				<Source><![CDATA[
    public void processCleanupJob()
    {
        #OCCRetryCount
        boolean processContinue;
        updateRefTableAllSucceed = true;
        bundleUpdateRefTablesEnabled = InventDimLPCleanupBundleUpdateRefTablesFlight::instance().isEnabled();
        separateUpdateFlightEnabled = bundleUpdateRefTablesEnabled && InventDimLPCleanupSeparateUpdateRefTableFlight::instance().isEnabled();

        ttsbegin;
        cleanupJob = InventDimLPCleanupJob::findBySessionId(sessionId, true);
        if (cleanupJob.StopRunning == NoYes::Yes)
        {
            return;
        }

        cleanupJob.Status = (separateUpdateFlightEnabled && cleanupJob.Status == InventDimLPCleanupStatus::ReadyForUpdateRefTable) ?
                            InventDimLPCleanupStatus::UpdateRefTableInProgress : InventDimLPCleanupStatus::InProgress;
        cleanupJob.update();
        ttscommit;

        updateRefTable = separateUpdateFlightEnabled ? cleanupJob.UpdateRefTable : NoYes::Yes;

        insertedRecordCount = 0;
        do
        {
            try
            {
                cleanupJob = InventDimLPCleanupJob::findBySessionId(sessionId);
                inventDimLPCleanupTask.clear();
                processContinue = cleanupJob && cleanupJob.StopRunning == NoYes::No
                                && (select firstonly RecId from inventDimLPCleanupTask
                                    where inventDimLPCleanupTask.SessionId     == sessionId
                                       && inventDimLPCleanupTask.CleanupStatus == InventDimLPCleanupStatus::Ready).RecId != 0;

                // Step 1: Create new InventDimId, backup InventDimIdOrigin and InventDimIdCurrent, update affected InventDimId in InventTrans
                if (processContinue)
                {
                    this.processCleanupTask();

                    if (!bundleUpdateRefTablesEnabled)
                    {
                        this.cleanupInventDimLPTask();
                    }
                }

                // Step 2: Update other reference tables by bundle, and clean up processed task and InventDimId with LP from InventDim
                // If parameter updateRefTable set to No, skip this step unless user trigger the updating of reference tables later
                if (bundleUpdateRefTablesEnabled && updateRefTable == NoYes::Yes && (!processContinue || insertedRecordCount >= this.bundleUpdateRecordCount()))
                {
                    if (!refTableTaskArray)
                    {
                        this.initRefTableUpdateTaskArray();
                    }

                    if (!specialRefTableTaskList)
                    {
                        this.initSpecialRefTableTaskList();
                    }

                    updateRefTableAllSucceed = updateRefTableAllSucceed
                        && InventDimLPCleanupInventDimIdRefTableUpdater::newFromBundleParametersV2(refTableTaskArray, specialRefTableTaskList).processTasks();

                    this.cleanupInventDimLPTask();
                    insertedRecordCount = 0;
                }
            }
            catch (Exception::UpdateConflict)
            {
                retry;
            }
            catch (Exception::UpdateConflictNotRecovered)
            {
                // Skip the error and move ahead.
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    this.handleError();
                    throw;
                }
            }
            catch (Exception::CLRError)
            {
                ApplicationUnhandledExceptionLogger::processUnhandledCLRException();
                this.handleError();
                throw;
            }
            catch
            {
                this.handleError();
                throw;
            }
        }
        while (processContinue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCleanupTask</Name>
				<Source><![CDATA[
    protected void processCleanupTask()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            while select firstonly1000 forupdate inventDimLPCleanupTask
                where inventDimLPCleanupTask.SessionId     == sessionid
                    && inventDimLPCleanupTask.CleanupStatus == InventDimLPCleanupStatus::Ready
            {
                if (this.runValidate(inventDimLPCleanupTask))
                {
                    inventDimLPCleanupTask.CleanupStatus = InventDimLPCleanupStatus::InProgress;
                    this.runUpdateReferenceTable(inventDimLPCleanupTask);
                }
                inventDimLPCleanupTask.CleanupStatus = InventDimLPCleanupStatus::Complete;
                inventDimLPCleanupTask.update();
            }

            if (bundleUpdateRefTablesEnabled)
            {
                recordInsertList.insertDatabase();
                recordInsertList = null;
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 1)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.handleError();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.handleError();
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runValidate</Name>
				<Source><![CDATA[
    private boolean runValidate(InventDimLPCleanupTask _inventDimLPCleanupTask)
    {
        boolean isValid = true;

        isValid = isValid && this.checkNotUsedInWHSInventoryTransaction(_inventDimLPCleanupTask.LicensePlateId);
        isValid = isValid && this.checkNoChildWHSLicensePlate(_inventDimLPCleanupTask.LicensePlateId);
        isValid = isValid && this.checkNotUsedInPendingWHSWorkLineCycleCount(_inventDimLPCleanupTask.InventDimId);
        isValid = isValid && this.checkWHSInventReserveWithZeroQty(_inventDimLPCleanupTask.InventDimId);
        isValid = isValid && this.checkInventSumQtyClosed(_inventDimLPCleanupTask.InventDimId);
        isValid = isValid && this.checkInventTransFinancialUpdated(_inventDimLPCleanupTask.InventDimId);
        isValid = isValid && this.checkLatestInventTransOverSixMonthsAgo(_inventDimLPCleanupTask.InventDimId);
        isValid = isValid && this.checkInventTransSumQtyZero(_inventDimLPCleanupTask.InventDimId);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdateReferenceTable</Name>
				<Source><![CDATA[
    private void runUpdateReferenceTable(InventDimLPCleanupTask _inventDimLPCleanupTask)
    {
        InventDim inventDimOrigin = InventDim::find(_inventDimLPCleanupTask.InventDimId);
        WHSLicensePlateId dummyLP = InventDimLPCleanupService::getDummyLPForCleanup();
        inventDimOrigin.LicensePlateId = dummyLP;
        InventDim inventDimCurrent = InventDim::findOrCreate(inventDimOrigin);

        InventDimLPCleanupSource::create(inventDimCurrent.InventDimId, _inventDimLPCleanupTask.InventDimId, _inventDimLPCleanupTask.LicensePlateId, inventDimOrigin.SHA1HashHex);

        if (bundleUpdateRefTablesEnabled)
        {
            if (recordInsertList == null)
            {
                recordInsertList = new RecordInsertList(tableNum(InventDimLPCleanupChangeTmp));
            }
            recordInsertList.add(InventDimLPCleanupChangeTmp::initInventDimIds(_inventDimLPCleanupTask.InventDimId, inventDimCurrent.InventDimId));
            insertedRecordCount ++;
        }

        InventTrans inventTrans;
        update_recordset inventTrans
            setting InventDimId = inventDimCurrent.inventDimId
            where inventTrans.InventDimId == _inventDimLPCleanupTask.InventDimId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            InventTrans inventTransLocal;
            inventTransLocal.skipDataMethods(true);
            inventTransLocal.skipEvents(true);
            inventTransLocal.skipDatabaseLog(true);

            update_recordset inventTransLocal
                setting InventDimIdSales_RU = inventDimCurrent.inventDimId
                where inventTransLocal.InventDimIdSales_RU == _inventDimLPCleanupTask.InventDimId;
        }

        WHSInventoryTransactionArchive whsInventoryTransactionArchive;
        update_recordset whsInventoryTransactionArchive
            setting LicensePlateId = dummyLP
            where whsInventoryTransactionArchive.LicensePlateId == _inventDimLPCleanupTask.LicensePlateId;

        if (!bundleUpdateRefTablesEnabled)
        {
            this.updateRefTableWithInventDimIdUniqueIdxDelegate(_inventDimLPCleanupTask.InventDimId, inventDimCurrent.inventDimId);

            if (!refTableTaskArray)
            {
                this.initRefTableUpdateTaskArray();
            }

            updateRefTableAllSucceed = updateRefTableAllSucceed
                && InventDimLPCleanupInventDimIdRefTableUpdater::newFromParameters(refTableTaskArray, _inventDimLPCleanupTask.InventDimId, inventDimCurrent.inventDimId).processTasks();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupInventDimLPTask</Name>
				<Source><![CDATA[
    protected void cleanupInventDimLPTask()
    {
        InventDimLPCleanupSource   inventDimLPCleanupSource;
        InventDimLPCleanupTask     inventDimLPCleanupTaskCompleted;

        ttsbegin;
        delete_from inventDimLPCleanupTaskCompleted
            where inventDimLPCleanupTaskCompleted.SessionId      == sessionId
               && inventDimLPCleanupTaskCompleted.CleanupStatus  == InventDimLPCleanupStatus::Complete
            exists join inventDimLPCleanupSource
                where inventDimLPCleanupSource.InventDimIdOrigin == inventDimLPCleanupTaskCompleted.InventDimId;

        if (bundleUpdateRefTablesEnabled)
        {
            this.cleanupInventDim();

            InventDimLPCleanupChangeTmp inventDimLPCleanupChangeTmp;
            delete_from inventDimLPCleanupChangeTmp;
        }
        else
        {
            InventDim inventDim;

            inventDim.skipDataMethods(true);
            inventDim.skipDeleteActions(true);
            inventDim.skipEvents(true);
            inventDim.skipDatabaseLog(true);

            delete_from inventDim
                exists join inventDimLPCleanupSource
                where inventDimLPCleanupSource.InventDimIdOrigin == inventDim.inventDimId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupInventDim</Name>
				<Source><![CDATA[
    private void cleanupInventDim()
    {
        int recordsToDeleteBatchSize = this.bundleDeleteInventDimRecordCount();
        str sqlStatement = this.buildSQLDeleteInventDimStatement(recordsToDeleteBatchSize);

        Connection connection = new Connection();
        Statement statement = connection.createStatement();

        try
        {
            // Delete InventDim already cleaned up
            int deletedRows = recordsToDeleteBatchSize;

            connection.ttsbegin();
            while (deletedRows == recordsToDeleteBatchSize)
            {
                deletedRows =  statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());
            }
            connection.ttscommit();
        }
        catch
        {
            if (connection != null)
            {
                connection.ttsabort();
            }
            throw;
        }
        finally
        {
            statement.close();
            connection.finalize();
            connection = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLDeleteInventDimStatement</Name>
				<Source><![CDATA[
    protected str buildSQLDeleteInventDimStatement(int _recordsToDeleteBatchSize)
    {
        /* Build up the following SQL statement
        DELETE TOP(200000) FROM INVENTDIM
            WHERE INVENTDIM.PARTITION=5637144576 AND INVENTDIM.DATAAREAID='usmf'
            AND EXISTS (SELECT 'x' FROM INVENTDIMLPCLEANUPCHANGETMP T2
            WHERE T2.PARTITION=5637144576 AND T2.DATAAREAID='usmf' AND T2.INVENTDIMIDFROM=INVENTDIM.INVENTDIMID)
        */

        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) FROM INVENTDIM', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));

        directSQL += strFmt(
            ' WHERE INVENTDIM.PARTITION = %1 AND INVENTDIM.DATAAREAID = %2' +
            ' AND EXISTS (SELECT \'x\' FROM INVENTDIMLPCLEANUPCHANGETMP T2' +
            ' WHERE T2.PARTITION = %1 AND T2.DATAAREAID = %2 AND T2.INVENTDIMIDFROM=INVENTDIM.INVENTDIMID)',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    private void handleError()
    {
        ttsbegin;
        cleanupJob = InventDimLPCleanupJob::findBySessionId(sessionId, true);
        cleanupJob.StopRunning = NoYes::Yes;
        cleanupJob.update();
        ttscommit;

        if (inventDimLPCleanupTask)
        {
            error(strFmt("@SCM:InventDimLPCleanupTaskError", inventDimLPCleanupTask.InventDimId, inventDimLPCleanupTask.LicensePlateId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotUsedInWHSInventoryTransaction</Name>
				<Source><![CDATA[
    private boolean checkNotUsedInWHSInventoryTransaction(WHSLicensePlateId _whsLicensePlateId)
    {
        WHSInventoryTransaction whsInventoryTransaction;

        select firstonly RecId from whsInventoryTransaction
            where whsInventoryTransaction.LicensePlateId == _whsLicensePlateId;

        return whsInventoryTransaction.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotUsedInPendingWHSWorkLineCycleCount</Name>
				<Source><![CDATA[
    private boolean checkNotUsedInPendingWHSWorkLineCycleCount(InventDimId _inventDimId)
    {
        WHSWorkLineCycleCount whsWorkLineCycleCount;

        select firstonly RecId from whsWorkLineCycleCount
            where whsWorkLineCycleCount.InventDimId  == _inventDimId
               && whsWorkLineCycleCount.AcceptReject == WHSAcceptReject::None;

        return whsWorkLineCycleCount.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoChildWHSLicensePlate</Name>
				<Source><![CDATA[
    private boolean checkNoChildWHSLicensePlate(WHSLicensePlateId _whsLicensePlateId)
    {
        WHSLicensePlate whsLicensePlate;

        select firstonly RecId from whsLicensePlate
            where whsLicensePlate.LicensePlateParent == _whsLicensePlateId;

        return whsLicensePlate.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWHSInventReserveWithZeroQty</Name>
				<Source><![CDATA[
    private boolean checkWHSInventReserveWithZeroQty(InventDimId _inventDimId)
    {
        WHSInventReserve whsInventReserve;

        select firstonly RecId from whsInventReserve
            where whsInventReserve.InventDimId == _inventDimId
               && (whsInventReserve.AvailOrdered   != 0 || whsInventReserve.CWAvailOrdered   != 0
                || whsInventReserve.AvailPhysical  != 0 || whsInventReserve.CWAvailPhysical  != 0
                || whsInventReserve.ReservOrdered  != 0 || whsInventReserve.CWReservOrdered  != 0
                || whsInventReserve.ReservPhysical != 0 || whsInventReserve.CWReservPhysical != 0);

        if (whsInventReserve.RecId != 0)
        {
            return false;
        }

        whsInventReserve.clear();
        select firstonly RecId from whsInventReserve
            where whsInventReserve.ParentInventDimId == _inventDimId
               && (whsInventReserve.AvailOrdered   != 0 || whsInventReserve.CWAvailOrdered   != 0
                || whsInventReserve.AvailPhysical  != 0 || whsInventReserve.CWAvailPhysical  != 0
                || whsInventReserve.ReservOrdered  != 0 || whsInventReserve.CWReservOrdered  != 0
                || whsInventReserve.ReservPhysical != 0 || whsInventReserve.CWReservPhysical != 0);

        return whsInventReserve.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventSumQtyClosed</Name>
				<Source><![CDATA[
    private boolean checkInventSumQtyClosed(InventDimId _inventDimId)
    {
        InventSum inventSum;

        select firstonly RecId from inventSum
            where inventSum.InventDimId == _inventDimId
               && inventSum.ClosedQty   == NoYes::No;

        return inventSum.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTransFinancialUpdated</Name>
				<Source><![CDATA[
    private boolean checkInventTransFinancialUpdated(InventDimId _inventDimId)
    {
        InventTrans inventTrans;

        select firstonly RecId from inventTrans
            where inventTrans.InventDimId   == _inventDimId
            && ((inventTrans.StatusIssue != StatusIssue::Sold && inventTrans.StatusReceipt == StatusReceipt::None)
             || (inventTrans.StatusIssue == StatusIssue::None && inventTrans.StatusReceipt != StatusReceipt::Purchased));

        return inventTrans.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLatestInventTransOverSixMonthsAgo</Name>
				<Source><![CDATA[
    private boolean checkLatestInventTransOverSixMonthsAgo(InventDimId _inventDimId)
    {
        InventTrans inventTrans;

        select firstonly RecId from inventTrans
            where inventTrans.InventDimId      == _inventDimId
               && inventTrans.ModifiedDateTime  > DateTimeUtil::addDays(DateTimeUtil::utcNow(), -180);

        return inventTrans.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTransSumQtyZero</Name>
				<Source><![CDATA[
    private boolean checkInventTransSumQtyZero(InventDimId _inventDimId)
    {
        InventTrans inventTrans;

        while select sum(Qty) from inventTrans
            group by inventTrans.ItemId, inventTrans.InventDimId
            where inventTrans.InventDimId   == _inventDimId
               && ((inventTrans.StatusIssue == StatusIssue::Sold && inventTrans.StatusReceipt == StatusReceipt::None)
                || (inventTrans.StatusIssue == StatusIssue::None && inventTrans.StatusReceipt == StatusReceipt::Purchased))
        {
            if (inventTrans.Qty != 0)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRefTableUpdateTaskArray</Name>
				<Source><![CDATA[
    public Array initRefTableUpdateTaskArray()
    {
        refTableTaskArray = new Array(Types::container);
        InventDimIdFieldReferenceProvider provider = InventDimIdFieldReferenceProvider::construct();
        ListEnumerator le = provider.findInventDimIdFields().getEnumerator();
        int i = 1;
        while (le.moveNext())
        {
            TableId tableId;
            FieldId fieldId;
            [tableId, fieldId] = le.current();
            EventHandlerResult result = new EventHandlerResult();
            this.tableWithInventDimIdDiscoveredDelegate(tableId, fieldId, result);
            if (result.result())
            {
                refTableTaskArray.value(i, result.result());
                i++;
            }
        }
        return refTableTaskArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSpecialRefTableTaskList</Name>
				<Source><![CDATA[
    public List initSpecialRefTableTaskList()
    {
        EventHandlerResult result = new EventHandlerResult();
        this.tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate(result);

        if (result.result())
        {
            specialRefTableTaskList = result.result();
        }
        return specialRefTableTaskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bundleUpdateRecordCount</Name>
				<Source><![CDATA[
    public int bundleUpdateRecordCount()
    {
        return 50000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bundleDeleteInventDimRecordCount</Name>
				<Source><![CDATA[
    public int bundleDeleteInventDimRecordCount()
    {
        return 200000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableWithInventDimIdDiscoveredDelegate</Name>
				<Source><![CDATA[
    delegate void tableWithInventDimIdDiscoveredDelegate(
        TableId _refTableTableId,
        FieldId _inventDimIdFieldId,
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRefTableWithInventDimIdUniqueIdxDelegate</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    delegate void updateRefTableWithInventDimIdUniqueIdxDelegate(
        InventDimId _inventDimIdFrom,
        InventDimId _inventDimIdTo)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate</Name>
				<Source><![CDATA[
    delegate void tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>