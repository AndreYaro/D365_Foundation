<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSubcodeTriggerFuncTypeItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to handle <c>RetailTriggerFunction::Item</c> trigger function type.
/// </summary>
[RetailSubcodeTriggerFuncAttribute(RetailTriggerFunction::Item)]
public class RetailSubcodeTriggerFuncTypeItem extends RetailSubcodeTriggerFuncType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDiscount</Name>
				<Source><![CDATA[
	/// <summary>
    /// Indicates whether an item can be discounted.
    /// </summary>
    /// <returns>
    /// true if the discount is enabled; otherwise false.
    /// </returns>
    /// <remarks>
    /// Throws an error if there is no discount enabled is enabled for the item for which a discount is
    /// applied.
    /// </remarks>
    public boolean checkDiscount()
    {
        RetailInventTable retailInventTable;
        boolean           ret = true;

        if (this.parmRetailInformationSubcodeTable().PriceType == RetailPriceType::Percent)
        {
            select firstonly RecId from  retailInventTable
                where retailInventTable.ItemId == this.parmRetailInformationSubcodeTable().TriggerCode
                   && retailInventTable.NoDiscountAllowed;

            if (retailInventTable.RecId)
            {
                ret =  checkFailed(strFmt("@RET3970", retailInventTable.ItemId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTriggerCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// checks that the trigger code is valid.
    /// </summary>
    /// <returns>
    /// true if the item exist; otherwise, false.
    /// </returns>
	private boolean checkTriggerCode()
    {
        boolean ret = true;

        ItemId itemId = this.parmRetailInformationSubcodeTable().triggerCode;

        if (!InventTable::exist(itemId))
        {
            ret = checkFailed(strFmt("@REX4161301",itemId, fieldStr(RetailInformationSubcodeTable, TriggerCode), tableStr(InventTable)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTriggerCode</Name>
				<Source><![CDATA[
	public void jumpRefTriggerCode()
    {
        InventTable::jumpRefItemId(this.parmRetailInformationSubcodeTable().triggerCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTriggerCode</Name>
				<Source><![CDATA[
	public void lookupTriggerCode(FormStringControl _stringControl)
    {
        InventTable::lookupItem(_stringControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTriggerCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate trigger code.
    /// </summary>
    /// <returns>
    /// True if trigger code is valid; otherwise, false.
    /// </returns>
	public boolean validateTriggerCode()
    {
        boolean ret = super();

		ret = ret && this.checkTriggerCode();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether record can be written.
    /// </summary>
    /// <returns>
    /// True if the record can be written; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the discount or trigger code are invalid the record cannot be written.
	/// </remarks>
	public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.checkDiscount() && this.checkTriggerCode();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>