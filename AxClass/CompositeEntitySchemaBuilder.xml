<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CompositeEntitySchemaBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The <c>CompositeEntitySchemaBuilder</c> class allows to build a <c>XmlSchema</c> file for a composite data entity 
/// by parsing the metadata definition of the composite entity: root data entities, embededed data entities recursively and individuals view fields for each.
/// </summary>
public class CompositeEntitySchemaBuilder
{
    const str BaseStringSimpleType = "string";
    const str BaseGuidSimpleType = "guid";
    const str StandardSchemaNamespace = "http://www.w3.org/2001/XMLSchema";
    const str RootElementName = "Document";
  
    str compositeDataEntityViewName;
    Map simpleTypesToBeAddedMap = new Map(Types::String, Types::AnyType);
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSchemaTargetNameSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target schema namespace.
    /// </summary>
    /// <returns>The string for the target schema namespace.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str getSchemaTargetNameSpace()
    {
        return StandardSchemaNamespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSimpleTypeToMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add new simple types to a map from which we will add them to the schema and avoid duplication.
    /// </summary>
    /// <param name = "_simpleType">A <c>XmlSchemaSimpleType</c> type.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addSimpleTypeToMap(System.Xml.Schema.XmlSchemaSimpleType _simpleType)
    {
        if (!simpleTypesToBeAddedMap.exists(_simpleType.Name))
        {
            simpleTypesToBeAddedMap.insert(_simpleType.Name, _simpleType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveStringSchemaTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new schema type for a table field with extended data base type string.
    /// </summary>
    /// <param name = "_tableField">Table field of type string.</param>
    /// <returns>A <c>XmlQualifiedName</c> which defines the name for the new schema type.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected System.Xml.XmlQualifiedName retrieveStringSchemaTypeName(AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;

        AxEdtString edtString = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetEdt(_tableField.ExtendedDataType);
        str stringSimpleTypeName = strFmt("%1%2", BaseStringSimpleType, edtString.StringSize);
        var stringSimpleType =  XMLSchemaBuilderHelper::createStringSimpleType(stringSimpleTypeName, edtString.StringSize);
        this.addSimpleTypeToMap(stringSimpleType);
        schemaTypeName = new System.Xml.XmlQualifiedName(stringSimpleTypeName, this.getSchemaTargetNameSpace());
       
        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveGuidSchemaTypeName</Name>
				<Source><![CDATA[
    private System.Xml.XmlQualifiedName retrieveGuidSchemaTypeName(AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;

        AxTableFieldGuid tableFieldGuid = _tableField as AxTableFieldGuid;

        if (tableFieldGuid)
        {
            // <xs:pattern value='[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}");
            var stringSimpleType = XMLSchemaBuilderHelper::createStringSimpleType(BaseGuidSimpleType, 36);
            this.addSimpleTypeToMap(stringSimpleType);
            schemaTypeName = new System.Xml.XmlQualifiedName("string36", this.getSchemaTargetNameSpace());
        }
       
        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveEnumSchemaTypeName</Name>
				<Source><![CDATA[
    private System.Xml.XmlQualifiedName retrieveEnumSchemaTypeName(AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;

        AxTableFieldEnum tableFieldEnum = _tableField as AxTableFieldEnum;

        if (tableFieldEnum)
        {
            AxEnum fieldEnum = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetEnum(tableFieldEnum.EnumType);
            var stringSimpleType = XMLSchemaBuilderHelper::createEnumSimpleType(fieldEnum);
            this.addSimpleTypeToMap(stringSimpleType);
            schemaTypeName = new System.Xml.XmlQualifiedName(stringSimpleType.Name, this.getSchemaTargetNamespace());
        }
       
        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSchemaTypeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected System.Xml.XmlQualifiedName retrieveSchemaTypeName(AxTableField _tableField)
    {
        System.Xml.XmlQualifiedName schemaTypeName;

        System.Type tableFieldType = _tableField.GetType();
            
        switch (tableFieldType.Name)
        {
            case "AxTableFieldString":
                schemaTypeName = this.retrieveStringSchemaTypeName(_tableField);
                break;
            case "AxTableFieldGuid":
                schemaTypeName = this.retrieveGuidSchemaTypeName(_tableField);
                break;
            case "AxTableFieldEnum":
                schemaTypeName = this.retrieveEnumSchemaTypeName(_tableField);
                break;
            case "AxTableFieldDate":
                schemaTypeName = new System.Xml.XmlQualifiedName("date", StandardSchemaNamespace);
                break;
            case "AxTableFieldInt":
            case "AxTableFieldInt64":
                schemaTypeName = new System.Xml.XmlQualifiedName("integer", StandardSchemaNamespace);
                break;
            case "AxTableFieldReal":
                schemaTypeName = new System.Xml.XmlQualifiedName("decimal", StandardSchemaNamespace);
                break;
            case "AxTableFieldTime":
                schemaTypeName = new System.Xml.XmlQualifiedName("time", StandardSchemaNamespace);
                break;
            case "AxTableFieldUtcDateTime":
                schemaTypeName = new System.Xml.XmlQualifiedName("dateTime", StandardSchemaNamespace);
                break;
            default:
                throw error("@SYS18879");
        }

        return schemaTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEntityFieldSchemaElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds schema element for an entity field.
    /// </summary>
    /// <param name = "_tableField">Entity field.</param>
    /// <param name = "_elementName">Name for the new <c>XmlSchemaElement</c>. By default it should be entity field name.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected System.Xml.Schema.XmlSchemaElement buildEntityFieldSchemaElement(
        AxDataEntityViewMappedField _entityField,
        str _elementName = _entityField.Name)
    {
        System.Xml.Schema.XmlSchemaElement fieldEntityName = XMLSchemaBuilderHelper::createXMLSchemaElement(_elementName);
        fieldEntityName.isNillable =!_entityField.Mandatory;
       
        AxTableField tableField = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetTableField(_entityField.DataSource, _entityField.DataField);
        fieldEntityName.SchemaTypeName = this.retrieveSchemaTypeName(tableField);

        return fieldEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeDataEntityViewFieldInSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the field should be included in the schema. Fx fields which are not public should not be visible
    /// </summary>
    /// <param name = "_field">Entity field</param>
    /// <returns>True, if entity field should be included in schema definition; false otherwise.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean includeDataEntityViewFieldInSchema(AxDataEntityViewMappedField _field)
    {
        boolean result = true;
        if (_field.AccessModifier != Microsoft.Dynamics.AX.Metadata.Core.MetaModel.FieldAccessModifier::Public)
        {
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseEntityFieldsAndGetSchemaSequence</Name>
				<Source><![CDATA[
    private System.Xml.Schema.XmlSchemaSequence traverseEntityFieldsAndGetSchemaSequence(AxDataEntityView _dataEntityView)
    {
        System.Xml.Schema.XmlSchemaSequence dataEntityViewElementSequence =  new System.Xml.Schema.XmlSchemaSequence();
     
        var dataEntityViewFields = _dataEntityView.Fields;
        var dataEntityViewFieldsEnumerator = dataEntityViewFields.GetEnumerator();

        while(dataEntityViewFieldsEnumerator.moveNext())
        {
            var dataEntityViewField = dataEntityViewFieldsEnumerator.Current;
            if (!this.includeDataEntityViewFieldInSchema(dataEntityViewField))
            {
                continue;
            }
            
            var entityFieldSchemaElement = this.buildEntityFieldSchemaElement(dataEntityViewField);

            var items = dataEntityViewElementSequence.Items;
            items.add(entityFieldSchemaElement);
        }

        return dataEntityViewElementSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseEmbeddedDataEntitiesAndAddSchemaElementsForThem</Name>
				<Source><![CDATA[
    private void traverseEmbeddedDataEntitiesAndAddSchemaElementsForThem(System.Collections.IEnumerable _embeddedDataEntities, System.Xml.Schema.XmlSchemaSequence _schemaElementSequence)
    {       
        var embeddedDataEntitiesEnumerator = _embeddedDataEntities.GetEnumerator();

        while(embeddedDataEntitiesEnumerator.moveNext())
        {
            AxDataEntityViewReferenceEmbedded embeddedDataEntity = embeddedDataEntitiesEnumerator.Current;
            
            AxDataEntityView dataEntityView = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetDataEntityView(embeddedDataEntity.DataEntity);
            var embeddedDataEntities = embeddedDataEntity.EmbeddedDataEntities;
            System.Xml.Schema.XmlSchemaElement childDataEntitySchemaElement = this.buildDataEntitySchemaElement(dataEntityView, embeddedDataEntities);
           
            var items = _schemaElementSequence.Items;
            items.add(childDataEntitySchemaElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDataEntitySchemaElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// For each root data entity we need to traverse the list the fields and traverse the list of children embedded data entities.
    /// </summary>
    /// <param name = "_rootDataEntity">Parent root data entity</param>
    /// <returns>Schema element for the current root data entity.</returns>
    private System.Xml.Schema.XmlSchemaElement buildDataEntitySchemaElement(AxDataEntityView _dataEntityView,  System.Collections.IEnumerable _embeddedDataEntities)
    {
        System.Xml.Schema.XmlSchemaElement dataEntitySchemaElement = XMLSchemaBuilderHelper::createXMLSchemaElement(_dataEntityView.Name);
      
        // get Fields
        System.Xml.Schema.XmlSchemaSequence elementSequence = this.traverseEntityFieldsAndGetSchemaSequence(_dataEntityView);
        
        // get Children data entities
        this.traverseEmbeddedDataEntitiesAndAddSchemaElementsForThem(_embeddedDataEntities, elementSequence);
        
        System.Xml.Schema.XmlSchemaComplexType entityComplexType = XMLSchemaBuilderHelper::createXMLComplexType(elementSequence);
        dataEntitySchemaElement.SchemaType = entityComplexType;

        return dataEntitySchemaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseRootDataEntitiesAndAddSchemaElementsForThem</Name>
				<Source><![CDATA[
    private void traverseRootDataEntitiesAndAddSchemaElementsForThem(System.Xml.Schema.XmlSchemaSequence _rootDataEntitiesElementSequence)
    {
        var sequenceItems = _rootDataEntitiesElementSequence.Items;
       
        AxCompositeDataEntityView compositeDataEntityView = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetAxCompositeDataEntityView(compositeDataEntityViewName);
        
        var rootDataEntities = compositeDataEntityView.RootDataEntities;
        var rootDataEntitiesEnumerator = rootDataEntities.GetEnumerator();
        
        while(rootDataEntitiesEnumerator.moveNext())
        {
            AxDataEntityViewReferenceRoot rootDataEntity = rootDataEntitiesEnumerator.get_Current();
     
            AxDataEntityView dataEntityView = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetDataEntityView(rootDataEntity.DataEntity);
            var embeddedDataEntities = rootDataEntity.EmbeddedDataEntities;
     
            System.Xml.Schema.XmlSchemaElement rootDataEntitySchemaElement = this.buildDataEntitySchemaElement(dataEntityView, embeddedDataEntities);
            
            sequenceItems.add(rootDataEntitySchemaElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCompositeEntitySchema</Name>
				<Source><![CDATA[
    internal System.Xml.Schema.XmlSchema buildCompositeEntitySchema()
    {
        System.Xml.Schema.XmlSchema schema = new System.Xml.Schema.XmlSchema();
        schema.TargetNamespace = this.getSchemaTargetNameSpace();
        
        System.Xml.Schema.XmlSchemaSequence rootDataEntitiesElementSequence =  new System.Xml.Schema.XmlSchemaSequence();
     
        this.traverseRootDataEntitiesAndAddSchemaElementsForThem(rootDataEntitiesElementSequence);

        System.Xml.Schema.XmlSchemaComplexType rootDataEntitiesComplexType = XMLSchemaBuilderHelper::createXMLComplexType(rootDataEntitiesElementSequence);
        System.Xml.Schema.XmlSchemaElement documentElement = XMLSchemaBuilderHelper::createXMLSchemaElement(RootElementName);
        documentElement.SchemaType = rootDataEntitiesComplexType;
      
        var schemaItems = schema.Items;
        schemaItems.Add(documentElement);
     
        // Add all simple types
        this.addSimpleTypesToSchema(schema);

        return schema;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSimpleTypesToSchema</Name>
				<Source><![CDATA[
    private void addSimpleTypesToSchema(System.Xml.Schema.XmlSchema _schema)
    {
        var schemaItems = _schema.Items;
    
        MapEnumerator simpleTypesEnumerator = new MapEnumerator(simpleTypesToBeAddedMap);
   
        while (simpleTypesEnumerator.moveNext())
        {
            schemaItems.Add(simpleTypesEnumerator.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>