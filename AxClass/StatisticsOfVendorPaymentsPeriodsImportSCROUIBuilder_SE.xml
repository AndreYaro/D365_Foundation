<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatisticsOfVendorPaymentsPeriodsImportSCROUIBuilder_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>StatisticsOfVendorPaymentsPeriodsImportSCROUIBuilder_SE</c> is a UI builder of import SCRO data for Statistics of Vendor payments periods.
/// </summary>
internal final class StatisticsOfVendorPaymentsPeriodsImportSCROUIBuilder_SE extends SysOperationAutomaticUIBuilder
{
    private StatisticsOfVendorPaymentsPeriodsImportSCROContract_SE dataContract;
    private const str SCROFileUploadControlName = 'SCROFileUpload';
    private const str OkButtonName = 'CommandButton';
    private const str SCROFileImportFileTypeCSV = '.csv';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void build()
    {
        super();

        dataContract = this.dataContractObject();

        SysOperationDialog dlg = dialog as SysOperationDialog;
        dlg.mainFormGroup().columns(1);

        DialogGroup dialogGroup = dlg.addGroup();
        FormBuildControl formBuildControl = dlg.formBuildDesign().control(dialogGroup.name());
        FileUploadBuild dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), SCROFileUploadControlName);
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
        dialogFileUpload.fileTypesAccepted(SCROFileImportFileTypeCSV);
        dialogFileUpload.fileNameLabel("@StatisticsOfVendorPaymentsDelays:SCROFile");
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void postRun()
    {
        super();

        DialogField importFormatMappingFieldId = this.bindInfo().getDialogField(
            dataContract,
            methodStr(StatisticsOfVendorPaymentsPeriodsImportSCROContract_SE, parmImportFormatMappingId));

        importFormatMappingFieldId.registerOverrideMethod(
            methodStr(FormReferenceControl, lookupReference),
            methodStr(StatisticsOfVendorPaymentsPeriodsImportSCROUIBuilder_SE, importFormatMappingFieldId_LookupReference),
            this);
        importFormatMappingFieldId.registerOverrideMethod(
            methodStr(FormReferenceGroupControl, modified),
            methodStr(StatisticsOfVendorPaymentsPeriodsImportSCROUIBuilder_SE, importFormatMappingFieldId_Modified),
            this);

        FileUpload SCROFileUpload = this.getFormControl(SCROFileUploadControlName);
        SCROFileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);

        this.setDialogOkButtonEnabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFormatMappingFieldId_LookupReference</Name>
				<Source><![CDATA[
    private Common importFormatMappingFieldId_LookupReference(FormReferenceControl _formReferenceControl)
    {
        return StatisticsOfVendorPaymentsPeriodsImportSCROUIBuilder_SE::lookupImportModelMapping(_formReferenceControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFormatMappingFieldId_Modified</Name>
				<Source><![CDATA[
    private boolean importFormatMappingFieldId_Modified(FormReferenceGroupControl _formReferenceGroupControl)
    {
        boolean ret = _formReferenceGroupControl.modified();

        if (ret)
        {
            dataContract.parmImportFormatMappingId(_formReferenceGroupControl.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupImportModelMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup form of GER model mapping for importing format.
    /// </summary>
    /// <param name = "_formReferenceControl">The form controll.</param>
    /// <returns>Selected record.</returns>
    private static Common lookupImportModelMapping(FormReferenceControl _formReferenceControl)
    {
        return ERModelMappingTable::lookup(_formReferenceControl, StatisticsOfVendorPaymentsPeriodsImportSCROService_SE::IntegrationPoint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    private void uploadCompleted()
    {
        FileUpload fileUploadControl = this.getFormControl(SCROFileUploadControlName);
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();
        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            dataContract.parmSCROUploadFileURL(fileUploadResult.getDownloadUrl());
            dataContract.parmSCROUploadFileName(fileUploadResult.getFileName());

            this.setDialogOkButtonEnabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    private FormControl getFormControl(str _controlName)
    {
        FormRun formRun = dialog.formRun();

        return formRun.control(formRun.controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    private void setDialogOkButtonEnabled(boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(OkButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>