<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightTagCache</c> class caches information about whether catch weight tags are used or not.
/// </summary>
internal final class WHSCatchWeightTagCache
{
    private SysGlobalObjectCache sysGlobalObjectCache;
    private str                  tagCacheKey;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private GlobalObjectCacheScope cacheScope()
    {
        return classStr(WHSCatchWeightTagCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the entire cache.
    /// </summary>
    [Hookable(false)]
    internal void clearCache()
    {
        sysGlobalObjectCache.clear(this.cacheScope());
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCacheKey</Name>
				<Source><![CDATA[
    private container makeCacheKey()
    {
        return [tagCacheKey, curExt()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTagFeatureUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the catch weight tags are used for items.
    /// </summary>
    /// <returns>
    /// true if the catch weight tags are used for items; otherwise false
    /// </returns>
    [Hookable(false)]
    internal boolean isCatchWeightTagFeatureUsed()
    {
        container cacheKey = this.makeCacheKey();
        container result   = sysGlobalObjectCache.find(this.cacheScope(), cacheKey);

        if (result == conNull())
        {
            result = this.isCatchWeightTagFeatureUsedNoCache(cacheKey);
        }
        
        if (conPeek(result, 1))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTagFeatureUsedNoCache</Name>
				<Source><![CDATA[
    private container isCatchWeightTagFeatureUsedNoCache(container _cacheKey)
    {
        WHSCatchWeightTag catchWeightTag;

        select firstonly RecId from catchWeightTag;

        container result;

        if (catchWeightTag.RecId)
        {
            result = [NoYes::Yes];
        }
        else
        {
            result = [NoYes::No];
        }
            
        sysGlobalObjectCache.insert(this.cacheScope(), _cacheKey, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        sysGlobalObjectCache = classFactory.globalObjectCache();
        tagCacheKey = strFmt('%1.%2', classStr(WHSCatchWeightTagCache), methodStr(WHSCatchWeightTagCache, isCatchWeightTagFeatureUsed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of <c>WHSCatchWeightTagCache</c> class.
    /// </summary>
    /// <returns>An instance of <c>WHSCatchWeightTagCache</c>.</returns>
    [Hookable(false)]
    internal static WHSCatchWeightTagCache construct()
    {
        return new WHSCatchWeightTagCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>