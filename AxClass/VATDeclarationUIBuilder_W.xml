<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclarationUIBuilder_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UIBuilder class of VAT declaration.
/// </summary>
public class VATDeclarationUIBuilder_W extends SysOperationAutomaticUIBuilder
{
    const str ModelName					= 'VAT declaration model';
    const str ParametersGroupName		= 'Parameters';
    const str ExportGroupName			= 'Export';
    const str PeriodGroupName			= 'Period';
    const str ExportOptionsGroupName	= 'ExportOptions';
    const str FormatMappingGroupName	= 'FormatMappingGroup';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Action after build of the dialog UI.
    /// </summary>
    public void postBuild()
    {
        #ISOCountryRegionCodes
        boolean isGTEEnabled = VATDeclarationService_W::isGTEEnabled();

        super();

        if (isGTEEnabled || TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations())
        {
            VATDeclaraitonContract_W contract = this.dataContractObject();

            DialogField formatMapping = this.bindInfo().getDialogField(contract, methodStr(VATDeclaraitonContract_W, parmFormatMapping));
            formatMapping.visible(false);
            
            FormBuildGroupControl periodGroup = this.dialog().formBuildDesign().control(PeriodGroupName);
            periodGroup.visible(false);

        }
        else 
        {
            VATDeclaraitonContract_W contract = this.dataContractObject();
            DialogField formatMapping = this.bindInfo().getDialogField(contract, methodStr(VATDeclaraitonContract_W, parmFormatMapping));
            formatMapping.registerOverrideMethod(
                methodStr(FormReferenceControl, lookupReference),
                methodStr(VATDeclarationUIBuilder_W, formatMappingLookup),
                this);

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoEE, #isoCZ, #isoLT, #isoLV]))
            {
                FormBuildGroupControl parametersGroup = this.dialog().formBuildDesign().control(ParametersGroupName);
                parametersGroup.breakable(false);

                FormBuildGroupControl exportGroup = this.dialog().formBuildDesign().control(ExportGroupName);
                exportGroup.breakable(false);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAT]))
            {
                DialogField fromDateDialogField = this.bindInfo().getDialogField(contract, methodStr(VATDeclaraitonContract_W, parmFromDate));
                fromDateDialogField.visible(false);

                DialogField toDateDialogField = this.bindInfo().getDialogField(contract, methodStr(VATDeclaraitonContract_W, parmToDate));
                toDateDialogField.visible(false);
            }

            if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoEE, #isoCZ, #isoLT, #isoLV, #isoNO]))
            {
                FormBuildGroupControl periodGroup = this.dialog().formBuildDesign().control(PeriodGroupName);
                periodGroup.allowEdit(false);
                periodGroup.breakable(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatMappingLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup form for format mapping.
    /// </summary>
    /// <param name="_referenceGroupControl">
    /// The control to perform lookup form.
    /// </param>
    public void formatMappingLookup(FormReferenceControl _referenceGroupControl)
    {
        ERObjectsFactory::createFormatMappingTableLookupForControlAndModel(_referenceGroupControl, ModelName, ModelName).performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>