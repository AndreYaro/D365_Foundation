<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementFormView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementFormView</c> is the form view of bank statement form.
/// </summary>
class BankStatementFormView
{
    private const str ReverseButton = 'ReverseButton';
    private const str ReverseButtonV2 = 'ReverseButtonV2';
    private const str ReopenButton = 'ReopenButton';
    private const str UpdateAccountingDateButton = 'UpdateAccountingDateButton';
    private const str VoucherButtonLine = 'VoucherButtonLine';

    FormRun statementFormRun;

    // Data sources
    FormDataSource dsStatement;
    FormDataSource dsReportEntry;
    FormDataSource dsDocument;
    FormDataSource dsGroupHeader;
    FormDataSource dsOpeningBalance;
    FormDataSource dsEndingBalance;
    FormDataSource dsNetAmount;
    FormDataSource dsTradingParty;
    FormDataSource dsBankDocumentInformation;

    // View model
    BankStatementViewModel statementViewModel;

    // Controls
    FormRealControl editAmountControl;
    FormRealControl editDebitAmountControl;
    FormRealControl editCreditAmountControl;

    FormStringControl headerTitleControl;

    FormButtonGroupControl showGroupControl;

    FormFunctionButtonControl editDetailsButtonControl;
    FormFunctionButtonControl accountDistributionButtonControl;
    FormFunctionButtonControl bankReconciliationDetailsControl;
    FormFunctionButtonControl taxTransSourceBankStatementLineControl;
    FormFunctionButtonControl bankStatementReverseButtonControl;
    FormFunctionButtonControl bankStatementReopenButtonControl;
    FormDropDialogButtonControl updateAccountingDateButtonControl;
    FormFunctionButtonControl voucherButtonLineControl;

    private FormFunctionButtonControl bankStatementReverseV2ButtonControl;

    FormTabPageControl tabPageGridControl;

    boolean isStatementNeedRefresh;

    //Internal shared variables
    Set bankStatementLineFieldsFinancialSet;
    Set bankStatementLineFieldsAllSet;
    Set bankStatementLineFieldsControlsSet;

    #BankElectronicReconciliation

    private boolean isPostInBatchFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankStatementPostInBatchFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changedReportEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event after <c>BankStmtISOReportEntry</c> is changed.
    /// </summary>
    delegate void changedReportEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedStatementEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event after <c>BankStmtISOAccountStatement</c> is changed.
    /// </summary>
    delegate void changedStatementEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeReportEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the active <c>BankStmtISOReportEntry</c> record.
    /// </summary>
    /// <param name="_reportEntry">
    ///     The <c>BankStmtISOReportEntry</c> record to which to change.
    /// </param>
    public void changeReportEntry(BankStmtISOReportEntry _reportEntry)
    {
        this.changingReportEntryEventHandler();
        statementViewModel.dsReportEntryActivePost(_reportEntry);
        this.setReportEntryButtonStatus(_reportEntry);
        this.setReportEntryDataSourceStatus(_reportEntry);
        this.changedReportEntryEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the active <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    /// <param name="_statement">
    ///     The <c>BankStmtISOAccountStatement</c> record to which to change.
    /// </param>
    public void changeStatement(BankStmtISOAccountStatement _statement)
    {
        this.changingStatementEventHandler();
        statementViewModel.dsStatementActivePost(_statement);
        this.setHeaderTitle(_statement);
        this.changedStatementEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeUpdateAccountingDateButton</Name>
				<Source><![CDATA[
    internal void changeUpdateAccountingDateButton()
    {
        boolean isMarked = dsReportEntry.anyMarked();
        BankStmtISOAccountStatement statement = dsStatement.cursor();
        boolean shouldEnable = !statement.Posted && isMarked;

        if (shouldEnable)
        {
            BankStmtISOReportEntry statementLine = dsReportEntry.getFirst(1);

            while (statementLine)
            {
                if (statementLine.isPosted() || !statementLine.IsNewBankDocument)
                {
                    shouldEnable = false;
                    break;
                }

                statementLine = dsReportEntry.getNext();
            }
        }

        if (isPostInBatchFeatureEnabled)
        {
            boolean isPostInBatchProcessing = BankReconciliationOperationValidator::isAnyBatchJobProcessingOnRecord(statement.TableId, statement.RecId);
            updateAccountingDateButtonControl.enabled(shouldEnable && !isPostInBatchProcessing);
        }
        else
        {
            updateAccountingDateButtonControl.enabled(shouldEnable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changingReportEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event before <c>BankStmtISOReportEntry</c> is changed.
    /// </summary>
    delegate void changingReportEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changingStatementEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event before <c>BankStmtISOAccountStatement</c> is changed.
    /// </summary>
    delegate void changingStatementEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupHeaderPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    public void createGroupHeaderPre()
    {
        statementViewModel.dsGroupHeaderCreatePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs actions after creating <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    public void createStatementPost()
    {
        BankStmtISOAccountStatement statementLocal;

        statementLocal = dsStatement.cursor();

        statementLocal.FromDateTime = DateTimeUtil::getSystemDateTime();
        statementLocal.ToDateTime = DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    public void createStatementPre()
    {
        statementViewModel.dsStatementCreatePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    public void deleteGroupHeaderPost()
    {
        statementViewModel.dsGroupHeaderDeletePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReportEntryPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes <c>BankStmtISOReportEntry</c> record.
    /// </summary>
    /// <param name="_statementLine">
    ///     Given <c>BankStmtISOReportEntry</c> buffer.
    /// </param>
    public void deleteReportEntryPost(BankStmtISOReportEntry _statementLine)
    {
        if (_statementLine && dsStatement.cursor())
        {
            this.refreshStatement(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    public void deleteStatementPost()
    {
        statementViewModel.dsStatementDeletePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Called before form is closed.
    /// </summary>
    public void formClosePre()
    {
        statementViewModel.formClosePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes an instance of the <c>BankReconciliationStatementFormView</c> class.
    /// </summary>
    protected void init()
    {
        // Initialize form data source
        this.initDataSource();

        // Initialize view model
        this.initStatementViewModel();

        // Initialize controls
        this.initControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalanceDSByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes data source for <c>BankStmtISOCashBalance</c> by adding balance type range.
    /// </summary>
    /// <param name="_dataSource">
    ///     Data source of <c>BankStmtISOCashBalance</c>.
    /// </param>
    /// <param name="_dataSourceName">
    ///     Data source name.
    /// </param>
    /// <param name="_type">
    ///     Indicates which balance type the data source is for.
    /// </param>
    private void initBalanceDSByType(
        FormDataSource _dataSource,
        str _dataSourceName,
        BankStatementBalanceType _type)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSourceName);

        QueryBuildRange qbr = qbds.addRange(fieldNum(BankStmtISOCashBalance, BankStatementBalanceType));
        qbr.value(queryValue(_type));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtonControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the form view button controls.
    /// </summary>
    private void initButtonControls()
    {
        editDetailsButtonControl = statementFormRun.design().controlName(#ControlNameEditDetailsButton);

        accountDistributionButtonControl = statementFormRun.design().controlName(#ControlNameAccountDistribution);
        bankReconciliationDetailsControl = statementFormRun.design().controlName(#ControlNameBankReconciliationDetails);
        taxTransSourceBankStatementLineControl = statementFormRun.design().controlName(#ControlNameTaxTransSourceBankStatementLine);
        bankStatementReverseButtonControl = statementFormRun.design().controlName(ReverseButton);
        bankStatementReopenButtonControl = statementFormRun.design().controlName(ReopenButton);
        updateAccountingDateButtonControl = statementFormRun.design().controlName(UpdateAccountingDateButton);
        voucherButtonLineControl = statementFormRun.design().controlName(VoucherButtonLine);
        bankStatementReverseV2ButtonControl = statementFormRun.design().controlName(ReverseButtonV2);

        boolean isReverseWithNewTransEnabled = FeatureStateProvider::isFeatureEnabled(BankStatementReversePostWithNewTransactionFeature::instance());
        bankStatementReverseButtonControl.visible(!isReverseWithNewTransEnabled);
        bankStatementReverseV2ButtonControl.visible(isReverseWithNewTransEnabled);

        if (!FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()))
        {
            updateAccountingDateButtonControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtonGroupControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the form view button controls.
    /// </summary>
    private void initButtonGroupControls()
    {
        showGroupControl = statementFormRun.design().controlName(#ControlNameShowGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the bank statement form controls.
    /// </summary>
    protected void initControls()
    {
        this.initFieldControls();
        this.initButtonControls();
        this.initButtonGroupControls();
        this.initTabControls();
        this.initViewForLineAmountControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the bank statement form data source.
    /// </summary>
    protected void initDataSource()
    {
        dsStatement = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, BankStmtISOAccountStatement));
        dsReportEntry = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, BankStmtISOReportEntry));
        dsDocument = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, BankStmtISODocument));
        dsGroupHeader = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, BankStmtISOGroupHeader));
        dsOpeningBalance = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, OpeningBalance));
        dsEndingBalance = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, EndingBalance));
        dsNetAmount = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, NetAmount));
        dsTradingParty = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, TradingParty));
        dsBankDocumentInformation = statementFormRun.dataSource(formDataSourceStr(BankStatementTable, BankStatementLineBankDocumentInformation));

        this.initBalanceDSByType(dsOpeningBalance, formDataSourceStr(BankStatementTable, OpeningBalance), BankStatementBalanceType::Opening);
        this.initBalanceDSByType(dsEndingBalance, formDataSourceStr(BankStatementTable, EndingBalance), BankStatementBalanceType::Closing);
        this.initBalanceDSByType(dsNetAmount, formDataSourceStr(BankStatementTable, NetAmount), BankStatementBalanceType::NetAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the form view field controls.
    /// </summary>
    private void initFieldControls()
    {
        editAmountControl = statementFormRun.design().controlName(formControlStr(BankStatementTable, editAmount));
        editDebitAmountControl = statementFormRun.design().controlName(formControlStr(BankStatementTable, editDebitAmount));
        editCreditAmountControl = statementFormRun.design().controlName(formControlStr(BankStatementTable, editCreditAmount));

        headerTitleControl = statementFormRun.design().controlName(formControlStr(BankStatementTable, HeaderTitle));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedViewEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Represents the initialized view event handler delegate.
    /// </summary>
    delegate void initializedViewEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingViewEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Represents the initializing view event handler delegate.
    /// </summary>
    delegate void initializingViewEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatementViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the bank statement view model.
    /// </summary>
    protected void initStatementViewModel()
    {
        statementViewModel = BankStatementViewModel::newFromStatementView(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTabControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the form view tab controls.
    /// </summary>
    private void initTabControls()
    {
        tabPageGridControl  = statementFormRun.design().controlName(formControlStr(BankStatementTable, TabPageGrid));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueEndingBalancePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the ending balance.
    /// </summary>
    /// <param name="_endingBalance">
    ///     Ending balance.
    /// </param>
    public void initValueEndingBalancePost(BankStmtISOCashBalance _endingBalance)
    {
        statementViewModel.dsEndingBalanceInitValuePost(_endingBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    /// <param name="_groupHeader">
    ///     Given <c>BankStmtISOGroupHeader</c> buffer.
    /// </param>
    public void initValueGroupHeaderPost(BankStmtISOGroupHeader _groupHeader)
    {
        statementViewModel.dsGroupHeaderInitValuePost(_groupHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueNetAmountPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the net amount.
    /// </summary>
    /// <param name="_netAmount">
    ///     Net amount.
    /// </param>
    public void initValueNetAmountPost(BankStmtISOCashBalance _netAmount)
    {
        statementViewModel.dsNetAmountInitValuePost(_netAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueOpeningBalancePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the opening balance.
    /// </summary>
    /// <param name="_openingBalance">
    ///     Opening balance.
    /// </param>
    public void initValueOpeningBalancePost(BankStmtISOCashBalance _openingBalance)
    {
        statementViewModel.dsOpeningBalanceInitValuePost(_openingBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">
    ///     The <c>BankStmtISOAccountStatement</c> record to initialize.
    /// </param>
    public void initValueStatementPost(BankStmtISOAccountStatement _statement)
    {
        statementViewModel.dsStatementInitValuePost(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewForLineAmountControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the form-view for the statement line amount.
    /// </summary>
    private void initViewForLineAmountControls()
    {
        boolean isBioColumn = BankParameters::find().BankStatementShowDrCrAmount;

        editAmountControl.visible(!isBioColumn);
        editDebitAmountControl.visible(isBioColumn);
        editCreditAmountControl.visible(isBioColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveGroupHeaderPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Links active <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    public void linkActiveGroupHeaderPre()
    {
        statementViewModel.dsGroupHeaderLinkActivePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Links active <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    public void linkActiveStatementPre()
    {
        statementViewModel.dsStatementLinkActivePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markNewBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks new bank document.
    /// </summary>
    public void markNewBankDocument()
    {
        statementViewModel.markNewBankDocument();

        dsReportEntry.reread();
        dsReportEntry.active();

        this.refreshStatement(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flipNewBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Flips the new bank document field.
    /// </summary>
    internal void flipNewBankDocument()
    {
        BankStmtISOReportEntry reportEntryLocal = dsReportEntry.cursor();
        this.setNewBankDocument(!reportEntryLocal.isNewBankDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the new bank document field.
    /// </summary>
    /// <param name="_isNewBankDocument">
    /// A boolean value indicating whether bank document is marked as new.
    /// </param>
    internal void setNewBankDocument(boolean _isNewBankDocument)
    {
        BankStmtISOReportEntry reportEntryLocal = dsReportEntry.cursor();
        reportEntryLocal.IsNewBankDocument = _isNewBankDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBookingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default booking date.
    /// </summary>
    internal void defaultBookingDate()
    {
        BankStmtISOReportEntry reportEntryLocal = dsReportEntry.cursor();

        if (!reportEntryLocal.BookingDateTime)
        {
            reportEntryLocal.BookingDateTime = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeReportEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts or updates the statement line.
    /// </summary>
    internal void writeReportEntry()
    {
        dsReportEntry.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies credit amount.
    /// </summary>
    public void modifiedCreditAmount()
    {
        statementViewModel.amountModified(editCreditAmountControl.realValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies debit amount.
    /// </summary>
    public void modifiedDebitAmount()
    {
        statementViewModel.amountModified(editDebitAmountControl.realValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls after modifying field <c>BankAccountTable</c> of table <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">
    ///     Given <c>BankStmtISOAccountStatement</c> buffer.
    /// </param>
    public void modifyBankAccountTable(BankStmtISOAccountStatement _statement)
    {
        statementViewModel.fieldModifiedBankAccountTablePost(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSBankDocumentInformation</Name>
				<Source><![CDATA[
    public FormDataSource parmDSBankDocumentInformation(FormDataSource _dsBankDocumentInformation = dsBankDocumentInformation)
    {
        dsBankDocumentInformation = _dsBankDocumentInformation;

        return dsBankDocumentInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSDocument</Name>
				<Source><![CDATA[
    public FormDataSource parmDSDocument(FormDataSource _dsDocument = dsDocument)
    {
        dsDocument = _dsDocument;

        return dsDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSEndingBalance</Name>
				<Source><![CDATA[
    public FormDataSource parmDSEndingBalance(FormDataSource _dsEndingBalance = dsEndingBalance)
    {
        dsEndingBalance = _dsEndingBalance;

        return dsEndingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSGroupHeader</Name>
				<Source><![CDATA[
    public FormDataSource parmDSGroupHeader(FormDataSource _dsGroupHeader = dsGroupHeader)
    {
        dsGroupHeader = _dsGroupHeader;

        return dsGroupHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSNetAmount</Name>
				<Source><![CDATA[
    public FormDataSource parmDSNetAmount(FormDataSource _dsNetAmount = dsNetAmount)
    {
        dsNetAmount = _dsNetAmount;

        return dsNetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDSOpeningBalance</Name>
				<Source><![CDATA[
    public FormDataSource getDSOpeningBalance()
    {
        return dsOpeningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSReportEntry</Name>
				<Source><![CDATA[
    public FormDataSource parmDSReportEntry(FormDataSource _dsReportEntry = dsReportEntry)
    {
        dsReportEntry = _dsReportEntry;

        return dsReportEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSStatement</Name>
				<Source><![CDATA[
    public FormDataSource parmDSStatement(FormDataSource _dsStatement = dsStatement)
    {
        dsStatement = _dsStatement;

        return dsStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSTradingParty</Name>
				<Source><![CDATA[
    public FormDataSource parmDSTradingParty(FormDataSource _dsTradingParty = dsTradingParty)
    {
        dsTradingParty = _dsTradingParty;

        return dsTradingParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementFormRun</Name>
				<Source><![CDATA[
    public FormRun parmStatementFormRun(FormRun _statementFormRun = statementFormRun)
    {
        statementFormRun = _statementFormRun;

        return statementFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementViewModel</Name>
				<Source><![CDATA[
    public BankStatementViewModel parmStatementViewModel()
    {
        return statementViewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes <c>BankStmtISOAccountStatement</c> buffer.
    /// </summary>
    /// <param name="_isCheckReread">
    ///     Whether check and reread is needed.
    /// </param>
    private void refreshStatement(boolean _isCheckReread)
    {
        boolean isRefresh = true;

        if (_isCheckReread)
        {
            if (!BankStmtISOAccountStatement::find(dsStatement.cursor().recid).equal(dsStatement.cursor()))
            {
                dsStatement.reread();
            }
            else
            {
                isRefresh = false;
            }
        }

        if (isRefresh)
        {
            dsStatement.refresh();
            dsStatement.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets header title text.
    /// </summary>
    /// <param name="_statement">
    ///     Given <c>BankStmtISOAccountStatement</c> buffer.
    /// </param>
    private void setHeaderTitle(BankStmtISOAccountStatement _statement)
    {
        BankStmtISOGroupHeader  groupHeader = dsGroupHeader.cursor();

        headerTitleControl.text(strFmt('%1 : %2',
            groupHeader.dispBankName(),
            _statement.Identification));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportEntryAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property of statement line fields.
    /// </summary>
    /// <param name="_isStatementEditable">
    /// A boolean value indicating whether statement is editable.
    /// </param>
    /// <param name="_isLineEditable">
    ///  A boolean value indicating whether statement line is editable.
    /// </param>
    /// <param name="_isLineFinancialEditable">
    ///  A boolean value indicating whether financial tab of statement line is editable.
    /// </param>
    /// <param name="_isLineAllowedMarkedNew">
    ///  A boolean value indicating whether the bank statement line is allowed to be marked as new bank document.
    /// </param>
    public void setReportEntryAllowEdit(
        boolean _isStatementEditable,
        boolean _isLineEditable,
        boolean _isLineFinancialEditable,
        boolean _isLineAllowedMarkedNew)
    {
        //editable derive from the statement
        dsTradingParty.allowEdit(_isLineEditable);
        dsBankDocumentInformation.allowEdit(_isLineFinancialEditable);
        //set fields editable
        this.setReportEntryFieldsAllowEdit(_isStatementEditable, _isLineEditable, _isLineFinancialEditable, _isLineAllowedMarkedNew);

        dsReportEntry.allowDelete(_isLineEditable);
        dsReportEntry.allowCreate(_isLineEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportEntryButtonStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets report entry button status.
    /// </summary>
    /// <param name="_statementLine">
    /// The statement line.
    /// </param>
    public void setReportEntryButtonStatus(BankStmtISOReportEntry _statementLine)
    {
        BankStmtISOAccountStatement statement = dsStatement.cursor();

        //enable distribution button
        if (isPostInBatchFeatureEnabled)
        {
            boolean isStatementPostInBatchProcessing = BankReconciliationOperationValidator::isAnyBatchJobProcessingOnRecord(statement.TableId, statement.RecId);
            boolean isStatementLinePostInBatchProcessing = BankReconciliationOperationValidator::isAnyBatchJobProcessingOnRecord(_statementLine.TableId, _statementLine.RecId);
            accountDistributionButtonControl.enabled(_statementLine.isNewBankDocument() && !isStatementPostInBatchProcessing && !isStatementLinePostInBatchProcessing);
            taxTransSourceBankStatementLineControl.enabled(_statementLine.isNewBankDocument() && !isStatementPostInBatchProcessing && !isStatementLinePostInBatchProcessing);
            bankReconciliationDetailsControl.enabled(_statementLine.Reconciled && !statement.Posted && !isStatementPostInBatchProcessing && !isStatementLinePostInBatchProcessing);
        }
        else
        {
            accountDistributionButtonControl.enabled(_statementLine.isNewBankDocument());
            taxTransSourceBankStatementLineControl.enabled(_statementLine.isNewBankDocument());
            bankReconciliationDetailsControl.enabled(_statementLine.Reconciled && !statement.Posted);
        }

        voucherButtonLineControl.enabled((statement.Posted || _statementLine.isPosted()) && _statementLine.IsNewBankDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportEntryDataSourceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report entry data source status.
    /// </summary>
    /// <param name = "_statementLine">The statement line.</param>
    internal void setReportEntryDataSourceStatus(BankStmtISOReportEntry _statementLine)
    {
        if (isPostInBatchFeatureEnabled)
        {
            BankStmtISOAccountStatement statement = dsStatement.cursor();
            boolean isStatementPostInBatchProcessing = BankReconciliationOperationValidator::isAnyBatchJobProcessingOnRecord(statement.TableId, statement.RecId);
            boolean isStatementLinePostInBatchProcessing = BankReconciliationOperationValidator::isAnyBatchJobProcessingOnRecord(_statementLine.TableId, _statementLine.RecId);
            // Disable financial tab if the record is being processed in batch or has been posted in other sessions
            statement.reread();
            _statementLine.reread();
            dsBankDocumentInformation.allowEdit(
                !_statementLine.isPosted()
                && !statement.Posted
                && !isStatementPostInBatchProcessing
                && !isStatementLinePostInBatchProcessing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportEntryFieldsAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property of statement line fields.
    /// </summary>
    /// <param name="_isStatementEditable">
    /// A boolean value indicating whether statement is editable.
    /// </param>
    /// <param name="_isLineEditable">
    /// A boolean value indicating whether statement line is editable.
    /// </param>
    /// <param name="_isLineFinancialEditable">
    /// A boolean value indicating whether financial tab of statement line is editable.
    /// </param>
    /// <param name="_isLineAllowedMarkedNew">
    /// A boolean value indicating whether the bank statement line is allowed to be marked as new bank document.
    /// </param>
    private void setReportEntryFieldsAllowEdit(
        boolean _isStatementEditable,
        boolean _isLineEditable,
        boolean _isLineFinancialEditable,
        boolean _isLineAllowedMarkedNew)
    {
        DictTable   dictTable;
        DictField   dictField;
        int i;
        FieldId fieldId;
        SetEnumerator   fieldsEnumerator;
        SetEnumerator   controlsEnumerator;
        FormControl     formControl;

        if (bankStatementLineFieldsAllSet == null)
        {
            bankStatementLineFieldsAllSet = new Set(Types::Integer);
            dictTable = new dictTable(tableNum(BankStmtISOReportEntry));

            for (i = 1; i <= dictTable.fieldCnt(); i++)
            {
                fieldId = dictTable.fieldCnt2Id(i);
                dictField = new DictField(tableNum(BankStmtISOReportEntry), fieldId);
                if (!dictField.isSystem())
                {
                    bankStatementLineFieldsAllSet.add(fieldId);
                }
            }
        }
        if (bankStatementLineFieldsFinancialSet == null)
        {
            bankStatementLineFieldsFinancialSet = new Set(Types::Integer);
            bankStatementLineFieldsFinancialSet.add(fieldNum(BankStmtISOReportEntry, IsNewBankDocument));
        }
        if (bankStatementLineFieldsControlsSet == null)
        {
            bankStatementLineFieldsControlsSet = new Set(Types::Class);
            bankStatementLineFieldsControlsSet.add(editAmountControl);
            bankStatementLineFieldsControlsSet.add(editDebitAmountControl);
            bankStatementLineFieldsControlsSet.add(editCreditAmountControl);
        }

        fieldsEnumerator = bankStatementLineFieldsAllSet.getEnumerator();

        while (fieldsEnumerator.moveNext())
        {
            fieldId = fieldsEnumerator.current();
            if (bankStatementLineFieldsFinancialSet.in(fieldId))
            {
                dsReportEntry.object(fieldId).allowEdit(_isLineAllowedMarkedNew);
            }
            else
            {
                dsReportEntry.object(fieldId).allowEdit(_isLineEditable);
            }
        }

        controlsEnumerator = bankStatementLineFieldsControlsSet.getEnumerator();
        while (controlsEnumerator.moveNext())
        {
            formControl = controlsEnumerator.current();
            formControl.allowEdit(_isLineEditable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets statement allow edit property.
    /// </summary>
    /// <param name="_isStatementEditable">
    /// Whether statement is editable.
    /// </param>
    public void setStatementAllowEdit(boolean _isStatementEditable)
    {
        dsStatement.allowEdit(_isStatementEditable);
        dsStatement.allowDelete(_isStatementEditable);
        dsEndingBalance.allowEdit(_isStatementEditable);
        dsOpeningBalance.allowEdit(_isStatementEditable);
        dsNetAmount.allowEdit(_isStatementEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    /// <param name="_ret">
    ///     Indicates whether <c>BankStmtISOGroupHeader</c> record to be validated.
    /// </param>
    /// <returns>
    ///     Returns true if validation is passed. Otherwise, returns false.
    /// </returns>
    public boolean validateWriteGroupHeaderPost(boolean _ret)
    {
        return statementViewModel.dsGroupHeaderValidateWritePost(_ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    /// <param name="_ret">
    ///     Indicates whether <c>BankStmtISOReportEntry</c> record to be validated.
    /// </param>
    /// <returns>
    ///     Returns true if validation is passed. Otherwise, returns false.
    /// </returns>
    public boolean validateWriteStatementPost(boolean _ret)
    {
        return statementViewModel.dsStatementValidateWritePost(_ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDocumentPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Writes the <c>BankStmtISODocument</c> record.
    /// </summary>
    /// <param name="_document">
    ///     Given <c>BankStmtISODocument</c> buffer.
    /// </param>
    public void writeDocumentPre(BankStmtISODocument _document)
    {
        statementViewModel.dsDocumentWritePre(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Writes the <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    public void writeGroupHeaderPost()
    {
        statementViewModel.dsGroupHeaderWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeReportEntryPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls before writing the <c>BankStmtISOReportEntry</c> record.
    /// </summary>
    /// <param name="_reportEntry">
    ///     Given <c>BankStmtISOReportEntry</c> buffer.
    /// </param>
    public void writeReportEntryPre(BankStmtISOReportEntry _reportEntry)
    {
        this.writingStatementEventHandler();
        statementViewModel.dsReportEntryWritePre(_reportEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls after writing the <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    public void writeStatementPost()
    {
        statementViewModel.dsStatementWritePost();
        this.writtenStatementEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls before writing the <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    /// <param name="_statement">
    ///     Given <c>BankStmtISOAccountStatement</c> buffer.
    /// </param>
    public void writeStatementPre(BankStmtISOAccountStatement _statement)
    {
        this.writingStatementEventHandler();
        statementViewModel.dsStatementWritePre(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTradingPartyPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls before writing the <c>TradingParty</c> record.
    /// </summary>
    /// <param name="_tradingParty">
    ///     The trading party record.
    /// </param>
    /// <returns>
    ///     Whether to write the trading party record.
    /// </returns>
    public boolean writeTradingPartyPre(BankStmtISOPartyIdentification _tradingParty)
    {
        boolean doWrite;

        //only write when the Name or ID is not empty
        if (_tradingParty.Name || _tradingParty.PartyIdOrganisationGenericOrgId)
        {
            doWrite = true;
        }

        return doWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writingReportEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event when <c>BankStmtISOReportEntry</c> is writing.
    /// </summary>
    delegate void writingReportEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writingStatementEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event when <c>BankStmtISOAccountStatement</c> is writing.
    /// </summary>
    delegate void writingStatementEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writtenReportEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event after <c>BankStmtISOReportEntry</c> is written.
    /// </summary>
    delegate void writtenReportEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writtenStatementEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event after <c>BankStmtISOAccountStatement</c> is written.
    /// </summary>
    delegate void writtenStatementEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>BankStatementFormView</c> class.
    /// </summary>
    /// <returns>
    ///     An instance of <c>BankStatementFormView</c> class.
    /// </returns>
    protected static BankStatementFormView construct()
    {
        return new BankStatementFormView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>BankStatementFormView</c> class
    ///     from a <c>FormRun</c> object.
    /// </summary>
    /// <param name="_formRun">
    ///     The form run object.
    /// </param>
    /// <returns>
    ///     An instance of <c>BankStatementFormView</c> class.
    /// </returns>
    public static BankStatementFormView newFromParameters(FormRun _formRun)
    {
        BankStatementFormView statementFormView;

        Debug::assert(_formRun != null);
        Debug::assert(_formRun.name() == formStr(BankStatementTable));

        statementFormView = BankStatementFormView::construct();
        statementFormView.parmStatementFormRun(_formRun);
        statementFormView.init();

        Debug::assert(statementFormView != null);

        return statementFormView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBook</Name>
				<Source><![CDATA[
    internal void refreshBook()
    {
        BankStmtISOReportEntry statementLine = dsReportEntry.cursor();
        BankStmtISOReportEntry statementLineOrig = statementLine.orig();

        dsReportEntry.research(true);

        if (statementLine.Reconciled != statementLineOrig.Reconciled)
        {
            dsStatement.reread();
            dsStatement.refresh();

            BankStmtISOAccountStatement statement = dsStatement.cursor();

            bankReconciliationDetailsControl.enabled(statementLine.Reconciled && !statement.Posted);
            bankStatementReopenButtonControl.enabled(statement.isPassedValidation());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>