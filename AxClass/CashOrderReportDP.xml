<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashOrderReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CashOrderReportDP</c> class is the base class for providing data for the eastern European
/// <c>CashOrder</c> reports.
/// </summary>
/// <remarks>
/// The country or region specific cash order reports can extend from this class and add specialized
/// business logic.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(CashOrder))
]
public class CashOrderReportDP extends SRSReportDataProviderBase
{
    CashOrderHeaderTmp      cashOrderHeader;
    CashOrderLinesTmp       cashOrderLines;
    RCashTrans              cashTrans;
    RCashTransType          transType;
    RNumDateInWordConverter rNumDateInWordConverter;
    int                     recordCount;
    CompanyInfo             companyInfo;
    boolean                 newCashTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temporary line transaction for cash order report.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>queryRun</c> object.
    /// </param>
    protected void createTmpTransactions(QueryRun _queryRun)
    {
        cashTrans          = _queryRun.get(tablenum(RCashTrans));
        transType          = cashTrans.type();
        newCashTrans       = false;

        if (_queryRun.changed(tableNum(RCashTrans)))
        {
            newCashTrans = true;
            this.insertIntoCashOrderLinesTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount in transaction currency.
    /// </summary>
    /// <returns>
    /// Amount in transaction currency.
    /// </returns>
    /// <remarks>
    /// Derived classes can override this method to provide country/region specific variations.
    /// </remarks>
    protected AmountCur getAmountCur()
    {
        return abs(cashTrans.AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount converted to words.
    /// </summary>
    /// <returns>
    /// The amount in words.
    /// </returns>
    protected TempStr getAmountInWords()
    {
        return rNumDateInWordConverter.numeralsToCurrency(abs(cashTrans.AmountCur),
                                                            cashTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount in accounting currency.
    /// </summary>
    /// <returns>
    /// Amount in accounting currency.
    /// </returns>
    /// <remarks>
    /// Derived classes can override this method to provide country/region specific variations.
    /// </remarks>
    protected AmountCur getAmountMST()
    {
        return abs(cashTrans.AmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashOrderHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CashOrderHeaderTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>CashOrderHeaderTmp</c> table buffer.
    /// </returns>
    [
        SrsReportDataSetAttribute(tablestr(CashOrderHeaderTmp))
    ]
    public CashOrderHeaderTmp getCashOrderHeaderTmp()
    {
        select cashOrderHeader;
        return cashOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashOrderLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CashOrderLinesTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>CashOrderLinesTmp</c> table buffer.
    /// </returns>
    [
        SrsReportDataSetAttribute(tablestr(CashOrderLinesTmp))
    ]
    public CashOrderLinesTmp getCashOrderLinesTmp()
    {
        select cashOrderLines;
        return cashOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the address of current company.
    /// </summary>
    /// <returns>
    ///     The address of the company.
    /// </returns>
    protected LogisticsAddressing getCompanyAddress()
    {
        return companyInfo.postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormattedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cash transaction date in a specific format.
    /// </summary>
    /// <returns>
    /// The date converted to string.
    /// </returns>
    /// <remarks>
    /// Derived classes can override this method to provide country/region specific date formatting.
    /// </remarks>
    protected TempStr getFormattedDate()
    {
        return  date2StrUsr(cashTrans.TransDate, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an opportunity to change cash order query.
    /// </summary>
    /// <returns>
    /// The query to retrieve data for cash order report.
    /// </returns>
    protected Query getQuery()
    {
        return this.parmQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRepresentativeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the representative.
    /// </summary>
    /// <returns>
    /// The name of the representative.
    /// </returns>
    protected EmplName getRepresentativeName()
    {
        return transType.represPersonName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text to be displayed on the report.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    /// <remarks>
    /// Derived classes can override this method to provide country/region specific variations.
    /// </remarks>
    protected TransTxt getTransTxt()
    {
        return cashTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashOrderHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>CashOrderHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>CashOrderHeaderTmp</c> table buffer.
    /// </returns>
    protected CashOrderHeaderTmp initializeCashOrderHeaderTmp()
    {
        cashOrderHeader.CompanyName         = companyInfo.Name;
        cashOrderHeader.CoRegNum            = companyInfo.CoRegNum;
        cashOrderHeader.AccountingCurrency  = CompanyInfoHelper::standardCurrency();
        cashOrderHeader.CompanyAddress      = this.getCompanyAddress();
        cashOrderHeader.UserName            = UserInfoHelp::userName(curuserid());
        cashOrderHeader.RegNum              = companyInfo.RegNum;
        cashOrderHeader.CompanyLogo         = CompanyImage::findByRecord(companyInfo).Image;
        return cashOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashOrderLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>CashOrderLinesTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>CashOrderLinesTmp</c> table buffer.
    /// </returns>
    protected cashOrderLinesTmp initializeCashOrderLinesTmp()
    {
        recordCount++;
        cashOrderLines.clear();
        cashOrderLines.AmountCur            = this.getAmountCur();
        cashOrderLines.AmountMST            = this.getAmountMST();
        cashOrderLines.DocType              = cashTrans.DocType;
        cashOrderLines.Txt                  = this.getTransTxt();
        cashOrderLines.EmplName             = this.getRepresentativeName();
        cashOrderLines.DocId                = cashTrans.DocId;
        cashOrderLines.Voucher              = cashTrans.Voucher;
        cashOrderLines.TransDate            = cashTrans.TransDate;
        cashOrderLines.CurrencyCode         = cashTrans.CurrencyCode;
        cashOrderLines.PaymentNotes         = cashTrans.PaymentNotes;
        cashOrderLines.AmountInWords        = this.getAmountInWords();
        cashOrderLines.FormattedDate        = this.getFormattedDate();
        cashOrderLines.RecordNum            = recordCount;
        cashOrderLines.AccountNum           = cashTrans.AccountNum;
        cashOrderLines.CurrencySymbol       = Currency::find(cashTrans.CurrencyCode).Symbol;
        cashOrderLines.MainAccountId        = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(cashTrans.LedgerDimension);
        cashOrderLines.OffsetMainAccountId  = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(cashTrans.OffsetLedgerDimension);
        if (cashTrans.OffsetLedgerDimensionNum)
        {
            cashOrderLines.OffsetAccountType    = cashTrans.OffsetAccountType;
        }
        return cashOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCashOrderHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c>CashOrderHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    /// The inserted <c>CashOrderHeaderTmp</c> table buffer.
    /// </returns>
    protected CashOrderHeaderTmp insertIntoCashOrderHeaderTmp()
    {
        cashOrderHeader = this.initializeCashOrderHeaderTmp();

        cashOrderHeader.insert();
        return cashOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCashOrderLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c>CashOrderLinesTmp</c> table.
    /// </summary>
    /// <returns>
    /// The inserted <c>CashOrderLinesTmp</c> table buffer.
    /// </returns>
    protected CashOrderLinesTmp insertIntoCashOrderLinesTmp()
    {
        cashOrderLines = this.initializeCashOrderLinesTmp();
        cashOrderLines.insert();
        return cashOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopThroughTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses through the records fetched by the query and creates transactions
    /// in temporary tables to be used by the report.
    /// </summary>
    protected void loopThroughTransactions()
    {
        QueryRun queryRun = new queryRun(this.getQuery());

        while (queryRun.next())
        {
            this.createTmpTransactions(queryRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// Note that this is a framework class. Customizing this class may cause problems with future upgrades
    /// to the software.
    /// </remarks>
    public void processReport()
    {
        rNumDateInWordConverter = RNumDateInWordConverter::construct();
        companyInfo             = CompanyInfo::find();

        ttsBegin;
        this.insertIntoCashOrderHeaderTmp();
        this.loopThroughTransactions();
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>