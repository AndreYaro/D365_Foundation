<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostingVersionCopyCostCategoryPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostingVersionCopyCostCategoryPrice</c> class is used to bulk copy cost category prices
///    between costing versions.
/// </summary>
class CostingVersionCopyCostCategoryPrice extends CostingVersionCopy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Bulk copies the prices between costing versions according to the selected parameters.
    /// </summary>
    protected void copy()
    {
        RouteCostCategoryPrice  routeCostCategoryPrice;
        RouteCostCategoryPrice  routeCostCategoryPriceJudgement;
        RouteCostCategoryPrice  oldRouteCostCategoryPrice;

        boolean skip()
        {
            if ( (useFromVersionAsSource
               && !includeActive
               && routeCostCategoryPrice.CostingVersionStatus != CostingVersionStatus::Pending)
             ||  (!useFromVersionAsSource
               && routeCostCategoryPrice.CostingVersionStatus == CostingVersionStatus::Pending) )
            {
                return true;
            }

            // If 'asPerDate' is provided, we only need to include one price per the combination of cost category and site
            if (routeCostCategoryPrice.CostCategoryId == oldRouteCostCategoryPrice.CostCategoryId
             && routeCostCategoryPrice.InventSiteId   == oldRouteCostCategoryPrice.InventSiteId
             && asPerDate != dateNull())
            {
                return true;
            }

            return false;
        }

        CostingVersion dsToCostingVersion = CostingVersion::find(toCostingVersion);

        QueryBuildDataSource qbds = queryRun.query().dataSourceTable(tableNum(RouteCostCategoryPrice));

        if (useFromVersionAsSource)
        {
            qbds.findRange(fieldNum(RouteCostCategoryPrice, VersionId)).value(queryValue(fromCostingVersion));
        }

        if (changeSite)
        {
            SysQuery::findOrCreateRange(qbds, fieldNum(RouteCostCategoryPrice, InventSiteId)).value(queryValue(fromSiteId));
        }

        qbds.sortClear();

        qbds.addSortField(fieldNum(RouteCostCategoryPrice, CostCategoryId));
        qbds.addSortField(fieldNum(RouteCostCategoryPrice, InventSiteId));
        qbds.addSortField(fieldNum(RouteCostCategoryPrice, FromDate), SortOrder::Descending);
        qbds.addSortField(fieldNum(RouteCostCategoryPrice, CostingVersionStatus));
        qbds.addSortField(fieldNum(RouteCostCategoryPrice, LineId), SortOrder::Descending);

        if (asPerDate != dateNull())
        {
            qbds.addRange(fieldNum(RouteCostCategoryPrice, FromDate)).value(queryValue(dateNull()) + '..' + queryValue(asPerDate));
        }

        while (queryRun.next())
        {
            routeCostCategoryPrice  = queryRun.get(tableNum(RouteCostCategoryPrice));

            if (skip())
            {
                continue;
            }

            routeCostCategoryPrice.VersionId = dsToCostingVersion.VersionId;
            routeCostCategoryPrice.FromDate = this.calcFromDate(routeCostCategoryPrice.FromDate);
            routeCostCategoryPrice.Price = this.calcPrice(routeCostCategoryPrice.Price, priceFactor, priceMarkup);

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                routeCostCategoryPrice.PriceSecCur_RU = this.calcPrice(routeCostCategoryPrice.PriceSecCur_RU, priceFactor, priceMarkupSec);
            }

            routeCostCategoryPrice.CostingVersionStatus = CostingVersionStatus::Pending;
            routeCostCategoryPrice.LineId = 0;

            if (changeSite)
            {
                routeCostCategoryPrice.InventSiteId = toSiteId;
            }

            select firstonly routeCostCategoryPriceJudgement
                    where routeCostCategoryPriceJudgement.CostCategoryId        ==   routeCostCategoryPrice.CostCategoryId
                       && routeCostCategoryPriceJudgement.InventSiteId          ==   routeCostCategoryPrice.InventSiteId
                       && routeCostCategoryPriceJudgement.FromDate              ==   routeCostCategoryPrice.FromDate
                       && routeCostCategoryPriceJudgement.CostingVersionStatus  ==   routeCostCategoryPrice.CostingVersionStatus
                       && routeCostCategoryPriceJudgement.VersionId             ==   routeCostCategoryPrice.VersionId;

            if (routeCostCategoryPriceJudgement.RecId == 0)
            {
                routeCostCategoryPrice.insert();
            }

            oldRouteCostCategoryPrice.data(routeCostCategoryPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_ChangePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables that are related to changing the amounts.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_ChangePrice(Dialog _dialog /*in-out*/)
    {
        DialogGroup dialogGroupPrice;

        // Change in price
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            dialogGroupPrice = _dialog.addGroup();
            dialogGroupPrice.columns(2);
            dialogGroupPrice.frameType(FormFrameType::None);

            _dialog.addGroup("@SYS117848", dialogGroupPrice);
        }
        else
        {
            _dialog.addGroup("@SYS117848");
        }
            // Amount = Amount *
        dialogFieldPriceFactor = _dialog.addFieldValue(extendedTypeStr(Factor), priceFactor, "@SYS22313");
            // +
        dialogFieldPriceMarkup = _dialog.addFieldValue(extendedTypeStr(MarkupAmount), priceMarkup,' + ');

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _dialog.addGroup("@SYS29141", dialogGroupPrice);
            _dialog.addText(' ');
            dialogFieldPriceMarkupSec = _dialog.addFieldValue(extendedTypeStr(MarkupAmount), priceMarkupSec, ' + ', "@SYS53088");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_SelectionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables that are related to changing the selection
    ///    criteria.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_SelectionCriteria(Dialog _dialog /*in-out*/)
    {
        // Copy from version
        dialogGroupVersion = _dialog.addGroup("@SYS117843");
        dialogGroupVersion.frameOptionButton(FormFrameOptionButton::Radio);
        dialogGroupVersion.optionValue(useFromVersionAsSource);
            // Include active
        dialogFieldIncludeActive = _dialog.addFieldValue(enumStr(NoYes), includeActive, "@SYS117844");
        // Copy from active
        dialogGroupActive = _dialog.addGroup("@SYS117845");
        dialogGroupActive.frameOptionButton(FormFrameOptionButton::Radio);
        dialogGroupActive.optionValue(!useFromVersionAsSource);

        // Display a dummy field to prevent the dialogGroupActive from hiding
        DialogField dummyField = _dialog.addFieldValue(enumStr(InventItemCostingType), InventItemCostingType::Default, "@SYS111755");
        dummyField.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        query.addDataSource(tableNum(RouteCostCategoryPrice));
        query.dataSourceTable(tableNum(RouteCostCategoryPrice)).addRange(fieldNum(RouteCostCategoryPrice, CostCategoryId));
        query.dataSourceTable(tableNum(RouteCostCategoryPrice)).addRange(fieldNum(RouteCostCategoryPrice, VersionId)).status(RangeStatus::Hidden);
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostingVersionCopyCostCategoryPrice construct()
    {
        return new CostingVersionCopyCostCategoryPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS309747";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CostingVersionCopy costingVersionCopy = CostingVersionCopyCostCategoryPrice::construct();
        costingVersionCopy.getLast();

        if (args == null
         || args.record().RecId == 0
         || args.dataset() != tableNum(CostingVersion))
        {
            throw error(Error::missingFormActiveBuffer(CostingVersionCopyCostCategoryPrice::description(), tableStr(CostingVersion)));
        }

        CostingVersion costingVersion = args.record();
        costingVersionCopy.parmFromCostingVersion(costingVersion.VersionId);
        if (costingVersionCopy.prompt())
        {
            costingVersionCopy.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
