<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteDimensionLink_DimActive</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSiteDimensionLink_DimActive extends InventSiteDimensionLink
{
    InventParameters    inventParameters;
    DimensionDefaultMap dimensionDefaultMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axParmDefaultDimensionSet</Name>
				<Source><![CDATA[
    public void axParmDefaultDimensionSet(AxInventSiteDimensionable _axInventSiteDimensionable, DimensionDefault _dimension)
    {
        DimensionDefault originalDimension = dimensionDefaultMap.DefaultDimension;

        DimensionDefault resultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(_dimension, originalDimension, inventParameters.SiteDimensionAttribute);
        resultDimension = LedgerDimensionFacade::serviceApplyDerivedDimensionsForAttribute(resultDimension, inventParameters.SiteDimensionAttribute, Ledger::current());

        _axInventSiteDimensionable.setDefaultDimensionValue(resultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSetDefaultDimension</Name>
				<Source><![CDATA[
    public void axSetDefaultDimension(AxInventSiteDimensionable _axInventSiteDimensionable, boolean _forceDefaultDimensionChanges = false)
    {
        boolean isSiteDimensionEmpty(DimensionDefault _dimension)
        {
            return (DimensionAttributeValueSetStorage::find(_dimension).getValueByDimensionAttribute(inventParameters.SiteDimensionAttribute) == 0);
        }

        _axInventSiteDimensionable.setStorageDimField(inventSiteIdFieldId);

        if (_axInventSiteDimensionable.isStorageDimFieldSet(inventSiteIdFieldId))
        {
            DimensionDefault originalDimension = dimensionDefaultMap.DefaultDimension;

            if (isSiteDimensionEmpty(originalDimension)
            || inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked
            || (_forceDefaultDimensionChanges && inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Active))
            {
                DimensionDefault siteDimension = InventSite::find(storageDimTable.(inventSiteIdFieldId)).DefaultDimension;

                DimensionDefault resultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(originalDimension, siteDimension, inventParameters.SiteDimensionAttribute);
                resultDimension = LedgerDimensionFacade::serviceApplyDerivedDimensionsForAttribute(resultDimension, inventParameters.SiteDimensionAttribute, Ledger::current());

                _axInventSiteDimensionable.setDefaultDimensionValue(resultDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkDimension</Name>
				<Source><![CDATA[
    public void linkDimension()
    {
        DimensionDefault dimension = dimensionDefaultMap.DefaultDimension;
        dimensionDefaultMap.DefaultDimension = InventSite::changeDimension(dimension, storageDimTable.(inventSiteIdFieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common)
    {
        super();

        dimensionDefaultMap  = _common;

        inventParameters    = InventParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventSiteDimensionLink_DimActive construct(Common _common)
    {
        return new InventSiteDimensionLink_DimActive(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static InventSiteDimensionLink_DimActive newStandard(Common _common)
    {
        return InventSiteDimensionLink_DimActive::construct(_common);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>