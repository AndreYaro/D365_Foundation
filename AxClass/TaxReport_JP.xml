<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates tax reports for Japan.
/// </summary>
public class TaxReport_JP extends RunBaseBatch implements BatchRetryable, TaxReportIParameters_JP, ISrsReportFileFormatContract
{
    protected Name apellative;
    protected CompanyInfo companyInfo;
    protected LedgerConsumptionTaxCalcTrans_JP consTaxCalc;
    protected LedgerBadDebtAccounts_JP ledgerBadDebtAccounts_JP;
    protected LedgerJournalTrans ledgerJournalTrans;
    protected TaxReport_JP taxReport_JP;
    protected TaxReportPeriod taxReportPeriod;
    protected TaxPeriod taxPeriod;
    protected TaxPeriodDate fromDate;
    protected TaxPeriodDate toDate;
    protected TransDate transactionDate;
    protected TaxRepVersion taxRepVersion;
    protected NoYes amendment;
    protected CalcMethod_JP calcMethod;
    protected TypeOfDeclaration_JP typeOfDeclaration;
    protected NoYes printout;
    protected NoYes updateNow;

    protected DialogField dialogTaxPeriod;
    protected DialogField dialogFromDate;
    protected DialogField dialogCalculationMethod;
    protected DialogField dialogTypeOfDeclaration;
    protected DialogField dialogAmendment;
    protected DialogField dialogToDate;

    protected SRSReportFileFormat fileFormat;  // Used in TaxReportContract_JP::newFromParameter() via the ISrsReportFileFormatContract interface

    private TaxReportILayoutFactory_JP taxReportLayoutFactory;
    private TaxReportILayout_JP taxReportLayout;

    #define.CurrentVersion(2)
    #localMacro.CurrentList
        taxPeriod,
        fromDate,
        toDate,
        typeOfDeclaration,
        calcMethod,
        amendment
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amendment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the <c>amendment</c> field.
    /// </summary>
    /// <returns>
    /// The field value of amendment.
    /// </returns>
    public NoYes amendment()
    {
        return amendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the <c>calcMethod</c> field.
    /// </summary>
    /// <returns>
    /// The field value of calcMethod.
    /// </returns>
    public CalcMethod_JP calcMethod()
    {
        return calcMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Check whether it can run by batch way.
    /// </summary>
    /// <returns>
    /// True or false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecConsTaxReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new LedgerConsumptionTaxReportTrans_JP record.
    /// </summary>
    public void createRecConsTaxReport()
    {
        this.getTaxReportLayout().createConsumptionTaxReportRecord(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@GLS60096", this);

        updateNow = false;

        dialogFromDate          = dialog.addFieldValue(extendedTypeStr(TaxPeriodDate), fromDate, "@SYS5209", "@SYS12292");
        dialogToDate            = dialog.addFieldValue(extendedTypeStr(TaxPeriodDate), toDate,"@SYS35904", "@SYS80933");
        dialogTaxPeriod         = dialog.addFieldValue(extendedTypeStr(TaxPeriod), taxPeriod);
        dialogTypeOfDeclaration = dialog.addFieldValue(enumStr(TypeOfDeclaration_JP), typeOfDeclaration, "@SYS96725");
        dialogCalculationMethod = dialog.addFieldValue(enumStr(CalcMethod_JP), calcMethod, "@SYS53185");
        dialogAmendment         = dialog.addFieldValue(enumStr(NoYes), amendment, "@GLS60163", "@GLS60176");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dialog header of the report.
    /// </summary>
    /// <returns>
    /// Returns the dialog header of the report.
    /// </returns>
    public str dialogHeader()
    {
        return "@GLS60096";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the <c>fromDate</c> field.
    /// </summary>
    /// <returns>
    /// The field value of fromDate.
    /// </returns>
    StartDate fromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDialogValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get dialog values.
    /// </summary>
    /// <param name="_updateNow">
    /// The value of _updateNow.
    /// </param>
    /// <param name="_taxPeriod">
    /// The value of _taxPeriod.
    /// </param>
    /// <param name="_fromDate">
    /// The value of start date.
    /// </param>
    /// <param name="_toDate">
    /// The value of end date.
    /// </param>
    public void getDialogValues(NoYes           _updateNow,
                                TaxPeriod       _taxPeriod,
                                TaxPeriodDate   _fromDate,
                                ToDate          _toDate)
    {
        updateNow        = _updateNow;
        taxPeriod        = _taxPeriod;
        fromDate         = _fromDate;
        toDate           = _toDate;
        taxRepVersion    = TaxRepVersion::Original;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get values  from the dialog.
    /// </summary>
    /// <returns>
    /// True or false.
    /// </returns>
    public boolean getFromDialog()
    {
        taxPeriod           = dialogTaxPeriod.value();
        fromDate            = dialogFromDate.value();
        toDate              = dialogToDate.value();
        typeOfDeclaration   = dialogTypeOfDeclaration.value();
        calcMethod          = dialogCalculationMethod.value();
        amendment           = dialogAmendment.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00004] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>openForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Open ledgerConsumptionTaxCalcTrans_JP form from menu item.
    /// </summary>
    public void openForm()
    {
        this.getTaxReportLayout().openConsumptionTaxTransactionForm(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileFormat</Name>
				<Source><![CDATA[
    public SRSReportFileFormat parmFileFormat(SRSReportFileFormat _fileFormat = fileFormat)
    {
        fileFormat = _fileFormat;
        return fileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmendment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get or set value for amendment.
    /// </summary>
    /// <param name="_amendment">
    /// The value of _amendment.
    /// </param>
    /// <returns>
    /// Yes or no.
    /// </returns>
    public NoYes parmAmendment(NoYes _amendment = amendment)
    {
        amendment = _amendment;

        return amendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApellative</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get or set value for _apellative.
    /// </summary>
    /// <param name="_apellative">
    /// The value of _apellative.
    /// </param>
    /// <returns>
    /// The value of apellative.
    /// </returns>
    public Name parmApellative(Name _apellative = apellative)
    {
        apellative = _apellative;

        return apellative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get or set value for _calcMethod.
    /// </summary>
    /// <param name="_calcMethod">
    /// The value of _calcMethod.
    /// </param>
    /// <returns>
    /// The value of _calcMethod.
    /// </returns>
    public CalcMethod_JP parmCalcMethod(CalcMethod_JP _calcMethod = calcMethod)
    {
        calcMethod = _calcMethod;

        return calcMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get or set value for _fromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The value of _fromDate.
    /// </param>
    /// <returns>
    /// The value of _fromDate.
    /// </returns>
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get or set value for _taxPeriod.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The value of _taxPeriod.
    /// </param>
    /// <returns>
    /// The value of _taxPeriod.
    /// </returns>
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;

        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get or set value for _toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The value of _toDate.
    /// </param>
    /// <returns>
    /// The value of _toDate.
    /// </returns>
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get or set value for _typeOfDeclaration.
    /// </summary>
    /// <param name="_typeOfDeclaration">
    /// The value of _typeOfDeclaration.
    /// </param>
    /// <returns>
    /// The value of _typeOfDeclaration.
    /// </returns>
    public TypeOfDeclaration_JP parmTypeOfDeclaration(TypeOfDeclaration_JP _typeOfDeclaration = typeOfDeclaration)
    {
        typeOfDeclaration = _typeOfDeclaration;

        return typeOfDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsShowFileFormat</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIsShowFileFormat(boolean _isShowFileFormat = true)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Print out the report.
    /// </summary>
    public void printout()
    {
        this.getTaxReportLayout().printoutConsumptionTaxReport(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Print out the transactions if they are in the certain tax period.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (this.name() != classStr(TaxReport_JP)
            && TaxAuthorityAddress::find(TaxPeriodHead::find(taxPeriod).TaxAuthority).TaxReportLayout == TaxReportLayout::Japan)
        {
            error("@GLS60155");
            return;
        }

        try
        {
            printout = NoYes::Yes;
            taxReportPeriod = TaxReportPeriod::find(taxPeriod, fromDate);
            if (!taxReportPeriod)
            {
                printout = NoYes::No;
                throw error("@SYS24993");
            }

            if (typeOfDeclaration == TypeOfDeclaration_JP::Final)
            {
                fromDate = taxReportPeriod.FromDate;
            }

            taxReportPeriod = TaxReportPeriod::find(taxPeriod, toDate);
            if (!taxReportPeriod)
            {
                printout = NoYes::No;
                throw error("@SYS24993");
            }

            if (typeOfDeclaration == TypeOfDeclaration_JP::Final)
            {
                toDate = taxReportPeriod.ToDate;
            }

            if (!this.getTaxReportLayout().doesTransactionExist(this))
            {
                printout = NoYes::No;
                throw error("@SYS32808");
            }

            if (printout)
            {
                this.getTaxReportLayout().calculateReport(this);
                this.openForm();
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show the dialog of the report.
    /// </summary>
    /// <returns>
    /// Returns true if the operation succeed.
    /// </returns>
    public boolean showDialog()
    {
        boolean ret = super();

        if (TaxParameters::find().TaxReport_JP == NoYes::No)
        {
            throw error(strfmt("@GLS60241", fieldpname(TaxParameters, TaxReport_JP), "@SYS24097", "@GLS60238"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays taxPeriod.
    /// </summary>
    /// <returns>
    /// The field value of taxPeriod.
    /// </returns>
    public TaxPeriod taxPeriod()
    {
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRepVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable taxRepVersion.
    /// </summary>
    /// <returns>
    ///    The variable taxRepVersion.
    /// </returns>
    public TaxRepVersion  taxRepVersion()
    {
        return taxRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the value for toDate.
    /// </summary>
    /// <returns>
    /// The value of toDate.
    /// </returns>
    public EndDate toDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the variable transactionDate.
    /// </summary>
    /// <returns>
    ///    The value of the variable transactionDate.
    /// </returns>
    public TransDate transDate()
    {
        return transactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeOfDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the variable typeOfDeclaration.
    /// </summary>
    /// <returns>
    ///    The value of the variable typeOfDeclaration.
    /// </returns>
    public TypeOfDeclaration_JP typeOfDeclaration()
    {
        return typeOfDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        boolean ret = true;

        #LOCALMACRO.CurrentListV1
            taxPeriod,
            fromDate,
            toDate
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            case 1 :
                [version, #CurrentListV1] = packedClass;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor of the <c>TaxReport_JP</c> class.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxReport_JP</c> class.
    /// </returns>
    public static TaxReport_JP construct()
    {
        if (TaxParameters::find().TaxReport_JP == NoYes::No)
        {
            throw error(strfmt("@GLS60241", fieldpname(TaxParameters, TaxReport_JP), "@SYS24097", "@GLS60238"));
        }

        return new TaxReport_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByTaxReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new taxReport_JP class instance.
    /// </summary>
    /// <param name="_taxReport_JP">
    /// Refer to _taxReport_JP instance.
    /// </param>
    /// <returns>
    ///    The value of the TaxReport_JP.
    /// </returns>
    public static TaxReport_JP constructByTaxReport(TaxReport_JP _taxReport_JP)
    {
        TaxReport_JP taxReport_JP = TaxReport_JP::construct();

        taxReport_JP.parmTaxPeriod(_taxReport_JP.taxPeriod());
        taxReport_JP.parmFromDate(_taxReport_JP.fromDate());
        taxReport_JP.parmToDate(_taxReport_JP.toDate());
        taxReport_JP.parmCalcMethod(_taxReport_JP.calcMethod());
        taxReport_JP.parmTypeOfDeclaration(_taxReport_JP.typeOfDeclaration());
        taxReport_JP.parmAmendment(_taxReport_JP.amendment());

        return taxReport_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new taxReport_JP and run.
    /// </summary>
    /// <param name="_args">
    /// Refer to _args instance.
    /// </param>
    public static void main(Args  _args)
    {
        TaxReport_JP taxReport = TaxReport_JP::construct();

        if (taxReport.prompt())
        {
            taxReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVersionNotMatured</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Remove records in table TaxReportByCode_JP, LedgerConsumptionTaxCalcTrans_JP and LedgerConsumptionTaxReportTrans_JP if their version is less than 2.
    /// </summary>
    /// <param name="_taxPeriod">
    /// _taxPeriod value.
    /// </param>
    /// <param name="_fromDate">
    /// _fromDate value.
    /// </param>
    /// <param name="_toDate">
    /// _toDate value.
    /// </param>
    /// <param name="_typeOfDeclaration">
    /// _typeOfDeclaration value.
    /// </param>
    public static void removeVersionNotMatured(
        TaxPeriod            _taxPeriod,
        FromDate             _fromDate,
        ToDate               _toDate,
        TypeOfDeclaration_JP _typeOfDeclaration)
    {
        TaxReportByCode_JP                  taxReportBycode;
        LedgerConsumptionTaxCalcTrans_JP    consTaxCalc;
        LedgerConsumptionTaxReportTrans_JP  consTaxReport;

        ttsbegin;

        delete_from taxReportBycode
            where (taxReportBycode.Version == TaxRepVersion::Original
                || taxReportBycode.Version == TaxRepVersion::Correct);

        delete_from consTaxCalc
            where consTaxCalc.PeriodOfTaxationFrom >= _fromDate
                && consTaxCalc.PeriodOfTaxationTo  <= _toDate
                && consTaxCalc.SettlementPeriod    == _taxPeriod
                && consTaxCalc.TypeOfDeclaration   == _typeOfDeclaration
                && (consTaxCalc.Version            == TaxRepVersion::Original
                    || consTaxCalc.Version         == TaxRepVersion::Correct);

        delete_from consTaxReport
            where ((consTaxReport.PeriodOfTaxationFrom >= _fromDate
                && consTaxReport.PeriodOfTaxationTo <= _toDate)
                || (consTaxReport.InterimTo <= _toDate
                && consTaxReport.InterimFrom >= _fromDate))
                && consTaxReport.TypeOfDeclaration == _typeOfDeclaration
                && (consTaxReport.Version == TaxRepVersion::Original
                || consTaxReport.Version == TaxRepVersion::Correct);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportLayout</Name>
				<Source><![CDATA[
    internal TaxReportILayout_JP parmTaxReportLayout(TaxReportILayout_JP _taxReportLayout = taxReportLayout)
    {
        taxReportLayout = _taxReportLayout;

        return this.getTaxReportLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportLayoutFactory</Name>
				<Source><![CDATA[
    internal TaxReportILayoutFactory_JP parmTaxReportLayoutFactory(TaxReportILayoutFactory_JP _taxReportLayoutFactory = taxReportLayoutFactory)
    {
        taxReportLayoutFactory = _taxReportLayoutFactory;

        return this.getTaxReportLayoutFactory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportLayout</Name>
				<Source><![CDATA[
    internal TaxReportILayout_JP getTaxReportLayout()
    {
        if (!taxReportLayout)
        {
            taxReportLayout = this.getTaxReportLayoutFactory().createTaxReportLayout(this);
        }

        return taxReportLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportLayoutFactory</Name>
				<Source><![CDATA[
    private TaxReportILayoutFactory_JP getTaxReportLayoutFactory()
    {
        if (!taxReportLayoutFactory)
        {
            taxReportLayoutFactory = TaxReportLayoutByStartDateFactory_JP::construct();
        }

        return taxReportLayoutFactory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>