<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherTransList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerVoucherTransList</c> class maintains a collection of ledger posting transactions.
/// </summary>
public class LedgerVoucherTransList
{
    LedgerVoucherTransObject currentTransaction;
    boolean isEnumerating;

    RecordSortedList ledgerPostingTransactions;
    int nextRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified transaction to the collection.
    /// </summary>
    /// <param name="_ledgerPostingTransaction">
    /// The ledger posting transaction.
    /// </param>
    public void add(LedgerVoucherTransObject _ledgerPostingTransaction)
    {
        LedgerPostingTransactionTmp         transaction;
        boolean                             success;

        isEnumerating = false;

        _ledgerPostingTransaction.parmTempRecId(nextRecId);
        nextRecId++;

        transaction = _ledgerPostingTransaction.getLedgerPostingTransaction();

        success = ledgerPostingTransactions.ins(transaction);
        Debug::assert(success);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of transactions in the collection.
    /// </summary>
    /// <returns>
    /// The number of transaction in the collection.
    /// </returns>
    public Counter elements()
    {
        return ledgerPostingTransactions.len();
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves to the first transaction in the collection.
    /// </summary>
    /// <returns>
    /// true if the collection contains at least one transaction; otherwise, false.
    /// </returns>
    public boolean first()
    {
        LedgerPostingTransactionTmp         transaction;
        LedgerPostingTransactionProjectTmp  project;
        boolean                             haveMore;

        isEnumerating = true;

        haveMore = ledgerPostingTransactions.first(transaction);

        if (haveMore)
        {
            currentTransaction = this.newLedgerPostingTransaction(transaction, project);
        }
        else
        {
            currentTransaction = null;
        }

        return haveMore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerPostingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LedgerVoucherTransObject</c> class.
    /// </summary>
    /// <param name = "_ledgerPostingTransaction">
    /// The <c>LedgerPostingTransactionTmp</c> buffer.
    /// </param>
    /// <param name = "_projectPostingTransaction">
    /// The <c>LedgerPostingTransactionProjectTmp</c> buffer.
    /// </param>
    /// <returns>
    /// Returns an instance of the <c>LedgerVoucherTransObject</c> class.
    /// </returns>
    [Wrappable(true)]
    protected final LedgerVoucherTransObject newLedgerPostingTransaction(LedgerPostingTransactionTmp _ledgerPostingTransaction, LedgerPostingTransactionProjectTmp _projectPostingTransaction = null)
    {
        return LedgerVoucherTransObject::newLedgerPostingTransaction(_ledgerPostingTransaction, _projectPostingTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current transaction.
    /// </summary>
    /// <returns>
    /// The current transaction.
    /// </returns>
    public LedgerVoucherTransObject item()
    {
        return currentTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerVoucherTransList</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerVoucherTransList</c> object.</returns>
    public static LedgerVoucherTransList construct()
    {
        return new LedgerVoucherTransList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        ledgerPostingTransactions = new RecordSortedList(tableNum(LedgerPostingTransactionTmp));
        ledgerPostingTransactions.sortOrder(fieldNum(LedgerPostingTransactionTmp, RecId));

        nextRecId = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the next transaction in the collection.
    /// </summary>
    /// <returns>
    ///    true if it is successful; otherwise, false.
    /// </returns>
    public boolean next()
    {
        LedgerPostingTransactionTmp         transaction;
        LedgerPostingTransactionProjectTmp  project;
        boolean                             haveMore;
        // </GIN>

        if (!isEnumerating)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        haveMore = ledgerPostingTransactions.next(transaction);

        if (haveMore)
        {
            currentTransaction = this.newLedgerPostingTransaction(transaction, project);
        }
        else
        {
            currentTransaction = null;
        }

        return haveMore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the <c>LedgerVoucherTransObject</c> object from the collection.
    /// </summary>
    /// <param name="_ledgerPostingTransaction">
    /// The <c>LedgerVoucherTransObject</c> object to remove.
    /// </param>
    public void remove(LedgerVoucherTransObject _ledgerPostingTransaction)
    {
        LedgerVoucherTransObject transactionObject;
        Set transactionsToRemove;
        SetEnumerator enumerator;
        boolean haveMore;
        RecId tempRecId;

        if (_ledgerPostingTransaction == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        tempRecId = _ledgerPostingTransaction.parmTempRecId();

        // if the TempRecId is zero, the object has not been added to the collection
        Debug::assert(tempRecId != 0);

        if (tempRecId != 0)
        {
            this.removeSingle(_ledgerPostingTransaction);

            // Only attempt to remove children if the parent's TempRecId is non-
            // zero because
            // 1) Zero means the object has not been added to the collection which
            // means it can't have any children
            // 2) Zero is the ParentTempRecId default that indicates the object is
            // first level and has no parent
            transactionsToRemove = new Set(Types::Class);

            haveMore = this.first();
            while (haveMore)
            {
                transactionObject = this.item();

                if (transactionObject.parmParentTempRecId() == tempRecId)
                {
                    transactionsToRemove.add(transactionObject);
                }

                haveMore = this.next();
            }

            enumerator = transactionsToRemove.getEnumerator();
            while (enumerator.moveNext())
            {
                transactionObject = enumerator.current();

                this.removeSingle(transactionObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSingle</Name>
				<Source><![CDATA[
    private void removeSingle(LedgerVoucherTransObject _ledgerPostingTransaction)
    {
        LedgerPostingTransactionTmp transaction;
        boolean found;

        if (_ledgerPostingTransaction == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        transaction = _ledgerPostingTransaction.getLedgerPostingTransaction();
        found = ledgerPostingTransactions.find(transaction);
        if (found)
        {
            isEnumerating = false;

            found = ledgerPostingTransactions.del(transaction);
            Debug::assert(found);

            currentTransaction = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(LedgerVoucherTransObject _ledgerPostingTransaction)
    {
        LedgerPostingTransactionTmp transaction;
        boolean success;

        transaction = _ledgerPostingTransaction.getLedgerPostingTransaction();

        success = ledgerPostingTransactions.ins(transaction, true);
        Debug::assert(!success);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>