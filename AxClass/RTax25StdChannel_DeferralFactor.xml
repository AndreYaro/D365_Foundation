<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdChannel_DeferralFactor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25StdChannel_DeferralFactor extends RTax25StdChannel
{
    boolean overWrite;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
        private AmountMST baseAmount()
    {
        return transMap.lookup(RTax25StdChannelOutputMode::BaseAmount).decimal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsFactor</Name>
				<Source><![CDATA[
        private RDeferralsFactor deferralsFactor()
    {
        return transMap.lookup(RTax25StdChannelOutputMode::Factor).decimal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizedAmount</Name>
				<Source><![CDATA[
        private AmountMST normalizedAmount()
    {
        return transMap.lookup(RTax25StdChannelOutputMode::NormalizedAmount).decimal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
public void open()
    {
        RDeferralsWritingOffFactor    writingOffFactor;
        LedgerJournalTrans            ledgerJournalTrans;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals;
        LedgerJournalTable            ledgerJournalTable;

        void delete()
        {
            if (RTax25StdChannel_DeferralFactor::notExistWritingOffTrans(writingOffFactor.DeferralsGroupId,
                                                                         writingOffFactor.rTax25ProfitTable,
                                                                         writingOffFactor.StartDate,
                                                                         writingOffFactor.EndDate,
                                                                         false))
            {
                writingOffFactor.delete();
            }
        }

        super();

        select firstonly RecId, JournalNum from ledgerJournalTrans
         join TableId from ledgerJournalTrans_RDeferrals
             where ledgerJournalTrans_RDeferrals.RefRecId  == ledgerJournalTrans.RecId        &&
                   ledgerJournalTrans_RDeferrals.TransType == RDeferralsTransType::WritingOff &&
                   ledgerJournalTrans_RDeferrals.LedgerDimension                              &&
                 ((ledgerJournalTrans.TransDate            >= regCalc.dateFrom()              &&
                   ledgerJournalTrans.TransDate            <= regCalc.dateTo()) || (
                   ledgerJournalTrans.TransDate            >  regCalc.dateTo() &&
                   ledgerJournalTrans_RDeferrals.CorrectedPeriod >= regCalc.dateFrom() &&
                   ledgerJournalTrans_RDeferrals.CorrectedPeriod <= regCalc.dateTo()
                   ))
         exists join ledgerJournalTable
             where ledgerJournalTable.JournalNum           == ledgerJournalTrans.JournalNum   &&
                   ledgerJournalTable.Posted               == NoYes::No;

        if (ledgerJournalTrans.RecId)
            warning(strfmt("@GLS107275", ledgerJournalTrans.JournalNum));

        if (! overWrite)
        {
            while select forupdate writingOffFactor
                where writingOffFactor.StartDate  == regCalc.dateFrom() &&
                      writingOffFactor.SeqNum     == regCalc.seqTable().SeqNum
            {
                if (RTax25StdChannel_DeferralFactor::notExistWritingOffTrans(writingOffFactor.DeferralsGroupId,
                                                                             writingOffFactor.rTax25ProfitTable,
                                                                             writingOffFactor.StartDate,
                                                                             writingOffFactor.EndDate,
                                                                             false)
                   )
                {
                    writingOffFactor.delete();
                }
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmRegCalc</Name>
				<Source><![CDATA[
    public void parmRegCalc(RTax25RegCalc_Std _regCalc)
    {
        RTax25RegCalc_StdDeferrals regCalcStdDeferrals;
        ;

        super(_regCalc);

        if (SysDictClass::isSuperclass(classidget(_regCalc), classnum(RTax25RegCalc_StdDeferrals)))
        {
            regCalcStdDeferrals = _regCalc;
            overWrite = regCalcStdDeferrals.parmOverWrite();
        }
        else
        {
            throw error (Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
        public void send()
    {
        RDeferralsWritingOffFactor  writingOffFactor;
        RDeferralsFactorCalculation deferralsFactorCalculation;

        if (! transMap.exists(RTax25StdChannelOutputMode::Factor))
            throw error(strfmt("@GLS107196",
                        new DictEnum(enumnum(RTax25StdChannelOutputMode)).value2Label(RTax25StdChannelOutputMode::Factor)));
        if (! transMap.exists(RTax25StdChannelOutputMode::BaseAmount))
            throw error(strfmt("@GLS107196",
                        new DictEnum(enumnum(RTax25StdChannelOutputMode)).value2Label(RTax25StdChannelOutputMode::BaseAmount)));
        if (! transMap.exists(RTax25StdChannelOutputMode::NormalizedAmount))
            throw error(strfmt("@GLS107196",
                        new DictEnum(enumnum(RTax25StdChannelOutputMode)).value2Label(RTax25StdChannelOutputMode::NormalizedAmount)));

        if (RTax25StdChannel_DeferralFactor::notExistWritingOffTrans(regCalc.seqTable().ChannelId,
                                                                     transMap.lookup(#ProfitRecIdOffset).longLong(),
                                                                     regCalc.dateFrom(),
                                                                     regCalc.dateTo(),
                                                                     false))
        {
            deferralsFactorCalculation = RDeferralsFactorCalculation::findPeriod(regCalc.dateFrom(), true);

            writingOffFactor = RDeferralsWritingOffFactor::find(regCalc.dateFrom(),
                                                                transMap.lookup(#ProfitRecIdOffset).longLong(),
                                                                regCalc.seqTable().ChannelId,
                                                                true);

            writingOffFactor.NormalizedAmount = this.normalizedAmount();
            writingOffFactor.BaseAmount       = this.baseAmount();
            writingOffFactor.Factor           = this.deferralsFactor();
            writingOffFactor.EndDate          = regCalc.dateTo();
            writingOffFactor.SeqNum           = regCalc.seqTable().SeqNum;

            if (writingOffFactor.RecId)
            {
                writingOffFactor.doUpdate();
            }
            else
            {
                writingOffFactor.StartDate         = regCalc.dateFrom();
                writingOffFactor.rTax25ProfitTable = transMap.lookup(#ProfitRecIdOffset).longLong();
                writingOffFactor.DeferralsGroupId  = regCalc.seqTable().ChannelId;
                writingOffFactor.RefRecId          = deferralsFactorCalculation.RecId;
                writingOffFactor.doInsert();
            }

            deferralsFactorCalculation.Calculated = NoYes::Yes;
            deferralsFactorCalculation.doUpdate();

            update_recordset deferralsFactorCalculation
                setting Calculated = NoYes::No
                where deferralsFactorCalculation.StartDate  > regCalc.dateFrom();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RTax25StdChannel_DeferralFactor construct()
    {
        return new RTax25StdChannel_DeferralFactor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RTax25StdChannel_DeferralFactor newParameters(RTax25RegCalc_StdDeferralsFactor _regCalc)
    {
        RTax25StdChannel_DeferralFactor ret = RTax25StdChannel_DeferralFactor::construct();

        ret.parmRegCalc(_regCalc);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notExistWritingOffTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean notExistWritingOffTrans(
        RDeferralsGroupId _deferralsGroupId,
        RefRecId          _profitTableRecId,
        TransDate         _dateFrom,
        TransDate         _dateTo,
        boolean           _warning = true)
    {
        RDeferralsBook              rDeferralsBook;
        RDeferralsTrans             rDeferralsTrans;
        RDeferralsTable             rDeferralsTable;

        select firstonly RecId, DeferralsId, DeferralsBookId from rDeferralsTrans
            where ((rDeferralsTrans.TransDate       <= _dateFrom
                 && rDeferralsTrans.DeferralsPeriod >= _dateFrom)
                || (rDeferralsTrans.TransDate       <= _dateTo
                 && rDeferralsTrans.DeferralsPeriod >= _dateTo))
               && !rDeferralsTrans.StornoRecId
            join TableId from rDeferralsBook
                where rDeferralsBook.DeferralsBookId  == rDeferralsTrans.DeferralsBookId
                   && rDeferralsBook.DeferralsId      == rDeferralsTrans.DeferralsId
                   && rDeferralsBook.DeferralsGroupId == _deferralsGroupId
            join TableId from rDeferralsTable
                where rDeferralsTable.DeferralsId       == rDeferralsTrans.DeferralsId
                   && rDeferralsTable.rTax25ProfitTable == _profitTableRecId;

        if (rDeferralsTrans.RecId)
            return _warning ? checkFailed(strfmt("@GLS107200",
                                                 rDeferralsTrans.DeferralsId,
                                                 rDeferralsTrans.DeferralsBookId,
                                                 _dateFrom)) : false;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>