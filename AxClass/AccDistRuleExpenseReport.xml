<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleExpenseReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::ExtendedPrice)
]
class AccDistRuleExpenseReport extends AccountingDistributionRule
{
    TrvExpTrans                 trvExpTrans;
    PostingProfile              postingProfile;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        super();
        trvExpTrans = TrvExpTrans::findBySourceDocumentLine(sourceDocumentLineItem.parmSourceDocumentLine().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType               ledgerPostingType;
        TrvPartyEmployeeRelationship    trvEmpSetup;
        LedgerJournalACType             accountType;
        TrvCashAdvance                  trvCashAdvance;
        TrvExchSetup                    trvExchSetup;
        ProjectAccDistRule              projectAccDistRule;
        boolean                         isProject;

        if (!trvExpTrans)
        {
            this.initialize();
        }

        if (trvExpTrans.InterCompanyLE && trvExpTrans.ReferenceDataAreaId != trvExpTrans.InterCompanyLE)
        {
           isProject = false;
        }
        else
        {
            projectAccDistRule = ProjectAccDistRule::newFromAccountingDistributionRule(this);
            isProject = projectAccDistRule.parmIsProject();
        }

        if (isProject)
        {
           ledgerPostingType = projectAccDistRule.parmLedgerPostingType();
        }
        else if (trvExpTrans.ExpType == TrvExpType::Personal || trvExpTrans.ExpType == TrvExpType::Advance)
        {
            changecompany(CompanyInfo::findRecId(trvExpTrans.LegalEntity).DataArea)
            {
                if (trvExpTrans.ExpType == TrvExpType::Personal)
                {   //Get ledgerDimension from Employee for personal expense
                    trvEmpSetup = TrvPartyEmployeeRelationship::find(trvExpTrans.CreatingWorker);
                    if (trvEmpSetup)
                    {
                        accountType = trvEmpSetup.AccountType;
                    }
                }
                else
                {   //Get ledgerDimension from trvCashAdvance for cash return
                    trvCashAdvance = TrvCashAdvance::findRecId(trvExpTrans.CashAdvanceRecId);
                    if (trvCashAdvance)
                    {
                        if (trvCashAdvance.AdvanceLedgerDimension)
                        {
                            accountType = trvCashAdvance.AccountType;
                        }
                        else
                        {
                            trvExchSetup = TrvExchSetup::find(trvCashAdvance.CurrencyCode);
                            accountType = trvExchSetup.AccountType;
                        }
                    }
                }
            }
            if (trvEmpSetup||trvCashAdvance)
            {
                switch (accountType)
                {
                    case LedgerJournalACType::Bank :
                        ledgerPostingType = LedgerPostingType::Bank;
                        break;

                    case LedgerJournalACType::Cust :
                        ledgerPostingType = LedgerPostingType::CustBalance;
                        break;

                    case LedgerJournalACType::Ledger :
                        ledgerPostingType = LedgerPostingType::LedgerJournal;
                        break;

                    case LedgerJournalACType::Vend:
                        ledgerPostingType = LedgerPostingType::VendBalance;
                        break;
                    case LedgerJournalACType::FixedAssets:
                    case LedgerJournalACType::Project:
                    default:
                        throw error(strFmt('Account type \'%1\' is not supported',accountType));
                }
            }
        }
        else
        {
            ledgerPostingType = LedgerPostingType::LedgerJournal;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        if (!trvExpTrans)
        {
            this.initialize();
        }

        // For normal expense line, it's debit side if amount is positive.
        // For cash advance line, it's credit.
        if (trvExpTrans.ExpType == TrvExpType::Advance)
        {
            return trvExpTrans.AmountCurr > 0.0 ? DebitCredit::Credit : DebitCredit::Debit;
        }
        else
        {
            return trvExpTrans.AmountCurr > 0.0 ? DebitCredit::Debit : DebitCredit::Credit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>