<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInvoiceLineSourceDocumentLines</c> class provides the information to handle the
///    distributions and subledger journal account entries for a free text invoice line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_CustomerInvoice), SourceDocumentLine_CustomerInvoice::CustomerInvoiceTotalsLine)]
public class CustInvoiceSourceDocLineItem extends SourceDocumentLineItem
{
    CustInvoiceTable custInvoiceTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount map for the line.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>SourceDocumentAmountMap</c> class.
    /// </returns>
    /// <remarks>
    /// This map is cached in the <see cref="M:SourceDocumentLineItem.parmSourceDocumentAmountMap" />. All
    /// consumers should use that method to retrieve the map, because it will call this method as necessary.
    /// </remarks>
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        Amount cashDiscAmount;
        Amount invoiceRoundAmount;
        SourceDocumentAmount sourceDocumentAmount;
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        cashDiscAmount = this.parmCashDiscountAmount();
        // Spanish cash discount on header
        if (cashDiscAmount != 0 && TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(sourceDocumentLine, cashDiscAmount,
                                                                           MonetaryAmount::Discount);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        invoiceRoundAmount = this.parmInvoiceRoundAmount();

        if (invoiceRoundAmount)
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(sourceDocumentLine, invoiceRoundAmount,
                                                                           MonetaryAmount::RoundingAmount);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance variables of the <c>CustInvoiceSourceDocLineItem</c> class.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    ///    A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        custInvoiceTable = _sourceDocumentLineImplementation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashDiscountAmount</Name>
				<Source><![CDATA[
    private Amount parmCashDiscountAmount()
    {
        Amount cashDiscountAmount;
        Amount invoiceAmount;
        Amount taxAutogenerated;
        Amount taxAdjusted;
        Amount invoiceRounding;
        TaxUncommitted taxUncommitted;
        CustInvoiceLine custInvoiceLineSum;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;

        custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);

        select sum(AmountCur) from custInvoiceLineSum
            where custInvoiceLineSum.ParentRecId == custInvoiceTable.RecId;

        invoiceAmount = custInvoiceLineSum.AmountCur;

        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            select sum(SourceTaxAmountCur) from taxUncommitted
            where taxUncommitted.HeadingTableId == tableNum(CustInvoiceTable) &&
                  taxUncommitted.HeadingRecId == custInvoiceTable.RecId &&
                  taxUncommitted.TaxAutogenerated == NoYes::Yes;

            taxAutogenerated = taxUncommitted.SourceTaxAmountCur;

            select sum(SourceRegulateAmountCur) from taxUncommitted
            where taxUncommitted.HeadingTableId == tableNum(CustInvoiceTable) &&
                  taxUncommitted.HeadingRecId == custInvoiceTable.RecId &&
                  taxUncommitted.TaxAutogenerated == NoYes::No;

            taxAdjusted = taxUncommitted.SourceRegulateAmountCur;
        }
        invoiceAmount = invoiceAmount - taxAutogenerated - taxAdjusted;

        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(custInvoiceTable.TableId, custInvoiceTable.RecId))
        {
            if (TaxParameters::canApplyCashDiscOnInvoice_ES())
            {
                cashDiscountAmount = CustParameters::cashDiscAmount(custInvoiceTable.CashDiscCode,
                                                                    custInvoiceTable.CurrencyCode,
                                                                    invoiceAmount,
                                                                    invoiceAmount + taxAutogenerated + taxAdjusted,
                                                                    custInvoiceTable.CashDiscPercent);
            }
            else
            {
                if (invoiceAmount)
                {
                    invoiceRounding = custFreeInvoiceCalcTotals.roundedOffTotalAmount(invoiceAmount);
                    invoiceRounding -= invoiceAmount;
                }

                invoiceAmount += invoiceRounding;

                cashDiscountAmount = CustParameters::cashDiscAmount(custInvoiceTable.CashDiscCode,
                                                                    custInvoiceTable.CurrencyCode,
                                                                    invoiceAmount,
                                                                    invoiceAmount + taxAutogenerated + taxAdjusted);
            }
        }

        return -cashDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate1()
    {
        ExchRate exchRate;

        exchRate = custInvoiceTable.getExchRate();

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate2</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate2()
    {
        ExchRate exchRate;

        exchRate = custInvoiceTable.getExchRateSecondary();

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceRoundAmount</Name>
				<Source><![CDATA[
    public Amount parmInvoiceRoundAmount()
    {
        Amount invoiceRoundAmount;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;

        custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
        custFreeInvoiceCalcTotals.calc();

        invoiceRoundAmount = custFreeInvoiceCalcTotals.custFreeInvoiceRoundOff();

        return invoiceRoundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return custInvoiceTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionExchangeRate</Name>
				<Source><![CDATA[
    public ExchRate parmTransactionExchangeRate()
    {
        return custInvoiceTable.getExchRate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>