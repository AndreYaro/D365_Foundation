<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdResourcesInProgressDPV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdResourcesInProgressDP</c> class is the report data Provider class for the
/// <c>ProdResourcesInProgress</c> report.
/// </summary>
/// <remarks>
/// This is the report data provider class for the <c>ProdResourcesInProgress</c> report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProdResourcesInProgress)),
    SRSReportParameterAttribute(classstr(ProdResourcesInProgressContract))
]
public class ProdResourcesInProgressDPV2 extends SRSReportDataProviderPreProcessTempDB
{
    ProdResourcesInProgressTmp prodResourcesInProgressTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProdResourcesInProgressTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute('ProdResourcesInProgressTmp')
    ]
    public ProdResourcesInProgressTmp getProdResourcesInProgressTmp()
    {
        select prodResourcesInProgressTmp;
        return prodResourcesInProgressTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        prodResourcesInProgressTmp.setConnection(this.parmUserConnection());

        ProdRouteTrans prodRouteTrans;
        WrkCtrResourceGroup wrkCtrResourceGroup;
        QueryRun queryRun = new QueryRun(this.parmQuery());

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(ProdResourcesInProgressTmp), true, true, true, false, true, prodResourcesInProgressTmp);
        int recCount;
        while (queryRun.next())
        {
            prodRouteTrans = queryRun.get(tableNum(ProdRouteTrans));
            wrkCtrResourceGroup = queryRun.get(tableNum(WrkCtrResourceGroup));
            prodResourcesInProgressTmp.clear();
            prodResourcesInProgressTmp.Amount = prodRouteTrans.Amount;
            prodResourcesInProgressTmp.DateCalc = prodRouteTrans.DateCalc;
            prodResourcesInProgressTmp.DateWIP = prodRouteTrans.DateWIP;
            prodResourcesInProgressTmp.Hours = prodRouteTrans.Hours;
            prodResourcesInProgressTmp.OprId = prodRouteTrans.OprId;
            prodResourcesInProgressTmp.OprNum = prodRouteTrans.OprNum;
            prodResourcesInProgressTmp.OprPriority = prodRouteTrans.OprPriority;
            prodResourcesInProgressTmp.QtyError = prodRouteTrans.QtyError;
            prodResourcesInProgressTmp.QtyGood = prodRouteTrans.QtyGood;
            prodResourcesInProgressTmp.TransRefId = prodRouteTrans.TransRefId;
            prodResourcesInProgressTmp.TransRefType = prodRouteTrans.TransRefType;
            prodResourcesInProgressTmp.TransType = prodRouteTrans.TransType;
            prodResourcesInProgressTmp.ResourceGroup = prodRouteTrans.ResourceGroup;
            prodResourcesInProgressTmp.WrkCtrId = prodRouteTrans.WrkCtrId;
            prodResourcesInProgressTmp.PdsCWQtyGood = prodRouteTrans.PdsCWQtyGood;
            prodResourcesInProgressTmp.PdsCWQtyError = prodRouteTrans.PdsCWQtyError;
            prodResourcesInProgressTmp.InputInventLocationId = wrkCtrResourceGroup.InputInventLocationId;
            prodResourcesInProgressTmp.InputWMSLocationId = wrkCtrResourceGroup.InputWMSLocationId;
            prodResourcesInProgressTmp.IsWorkCell = wrkCtrResourceGroup.IsWorkCell;
            prodResourcesInProgressTmp.OutputInventLocationId = wrkCtrResourceGroup.OutputInventLocationId;
            prodResourcesInProgressTmp.OutputWMSLocationId = wrkCtrResourceGroup.OutputWMSLocationId;
            prodResourcesInProgressTmp.ProdUnitId = wrkCtrResourceGroup.ProdUnitId;
            prodResourcesInProgressTmp.SiteId = wrkCtrResourceGroup.SiteId;
            prodResourcesInProgressTmp.WrkCtrResourceGroupDataAreaId = wrkCtrResourceGroup.DataAreaId;
            prodResourcesInProgressTmp.WrkCtrResourceGroupRecId = wrkCtrResourceGroup.RecId;
            prodResourcesInProgressTmp.WrkCtrResourceGroupRecVersion = wrkCtrResourceGroup.RecVersion;
            prodResourcesInProgressTmp.WrkCtrResourceGroupWrkCtrId = wrkCtrResourceGroup.WrkCtrId;

            recordInsertList.add(prodResourcesInProgressTmp);
            recCount++;

            if (recCount == 10000)
            {
                recCount = 0;
                recordInsertList.insertDatabase();
                recordInsertList = new RecordInsertList(tableNum(ProdResourcesInProgressTmp), true, true, true, false, true, prodResourcesInProgressTmp);
            }
        }

        if (recCount != 0)
        {
            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>