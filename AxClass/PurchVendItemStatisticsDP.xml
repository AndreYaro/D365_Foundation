<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchVendItemStatisticsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The  <c>PurchVendItemStatisticsDP</c> class is the data provider class of the
/// <c>PurchStatisticsItemVend</c> and <c>PurchStatisticsVendItem</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PurchVendItemStatistics)),
    SRSReportParameterAttribute(classStr(PurchVendItemStatisticsContract))
]

class PurchVendItemStatisticsDP extends SRSReportDataProviderPreProcessTempDB
{
    PurchVendItemStatistcsTmp   tmpPurchVendItemStatistcs;
    FromDate                    fromDatePeriod1;
    ToDate                      toDatePeriod1;
    FromDate                    fromDatePeriod2;
    ToDate                      toDatePeriod2;
    ItemReportPeriodNum         periodNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPeriodQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds period ranges for the report query.
    /// </summary>
    /// <returns>
    /// A query that contains period ranges.
    /// </returns>
    private Query buildPeriodQuery()
    {
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        Query                           queryBuild;
        PurchVendItemStatisticsContract dataContract;
        #define.delimiter(',')

        dataContract    =   this.parmDataContract() as PurchVendItemStatisticsContract;

        fromDatePeriod1 =   dataContract.parmFromDate();
        toDatePeriod1   =   dataContract.parmToDate();
        fromDatePeriod2 =   dataContract.parmValidFromDate();
        toDatePeriod2   =   dataContract.parmValidToDate();
        queryBuild      =   this.parmQuery();

        queryBuildDataSource    = queryBuild.dataSourceTable(tableNum(VendInvoiceJour));
        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(VendInvoiceJour, InvoiceDate));

        if (!fromDatePeriod1)
        {
            fromDatePeriod1 =   DateTimeUtil::date(DateTimeUtil::minValue());
        }
        if (!toDatePeriod1)
        {
            toDatePeriod1 =   DateTimeUtil::date(DateTimeUtil::maxValue());
        }
        if (!fromDatePeriod2)
        {
            fromDatePeriod2 =   DateTimeUtil::date(DateTimeUtil::minValue());
        }
        if (!toDatePeriod2)
        {
            toDatePeriod2 =   DateTimeUtil::date(DateTimeUtil::maxValue());
        }

        queryBuildRange.value(queryRange(fromDatePeriod1, toDatePeriod1) + #delimiter + queryRange(fromDatePeriod2, toDatePeriod2));

        queryBuildDataSource.addSortField(fieldNum(VendInvoiceJour, OrderAccount));
        queryBuild.dataSourceTable(tablenum(VendInvoiceTrans)).addSortField(fieldNum(VendInvoiceTrans, ItemId));

        return queryBuild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>definePeriod</Name>
				<Source><![CDATA[
    private void definePeriod(TransDate _date)
    {
        boolean isFirst = false;

        if ( (_date >= fromDatePeriod1 || !fromDatePeriod1)
            && (_date <= toDatePeriod1 || !toDatePeriod1) )
        {
            periodNum = ItemReportPeriodNum::First;
            isFirst = true;
        }

        if ((_date >= fromDatePeriod2 || !fromDatePeriod2)
           && (_date <= toDatePeriod2 || !toDatePeriod2))
        {
            if (isFirst)
            {
                periodNum = ItemReportPeriodNum::Both;
            }
            else
            {
                periodNum = ItemReportPeriodNum::Second;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Reporting
    /// Services at runtime. The method should compute data and populate the data tables that will be
    /// returned to Reporting Services. Note that this is a framework class. Customizing this class may
    /// cause problems with future upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        VendInvoiceTrans        queryVendInvoiceTrans;
        VendInvoiceJour         queryVendInvoiceJour;

        VendAccount             orderAccount;
        ItemId                  itemId;
        DirPartyName            vendName;
        PurchUnit               purchUnit;
        boolean                 itemNEqPrev;
        boolean                 accNEqPrev;

        QueryRun                qr;
        Query                   q;
        q = this.buildPeriodQuery();
        qr = new QueryRun(q);
        ttsbegin;

        tmpPurchVendItemStatistcs.clear();
        while (qr.next())
        {
            queryVendInvoiceTrans = qr.get(tableNum(VendInvoiceTrans));
            queryVendInvoiceJour = qr.get(tableNum(VendInvoiceJour));

            itemNEqPrev = itemId != queryVendInvoiceTrans.ItemId;
            accNEqPrev = orderAccount != queryVendInvoiceJour.OrderAccount;

            if (itemNEqPrev || accNEqPrev)
            {
                if (orderAccount)
                {
                    tmpPurchVendItemStatistcs.insert();
                }

                itemId = queryVendInvoiceTrans.ItemId;
                orderAccount = queryVendInvoiceJour.OrderAccount;

                if (accNEqPrev)
                {
                    vendName = VendTable::find(queryVendInvoiceJour.OrderAccount).name();
                }

                if (itemNEqPrev)
                {
                    purchUnit = InventTableModule::find(queryVendInvoiceTrans.ItemId,ModuleInventPurchSales::Purch).UnitId;
                }

                tmpPurchVendItemStatistcs.clear();
                tmpPurchVendItemStatistcs.ItemId        =   queryVendInvoiceTrans.ItemId;
                tmpPurchVendItemStatistcs.ItemName      =   queryVendInvoiceTrans.itemName();
                tmpPurchVendItemStatistcs.OrderAccount  =   queryVendInvoiceJour.OrderAccount;
                tmpPurchVendItemStatistcs.VendName      =   vendName;
            }

            this.definePeriod(queryVendInvoiceTrans.InvoiceDate);

            if (    periodNum == ItemReportPeriodNum::First
                ||  periodNum == ItemReportPeriodNum::Both)
            {
                tmpPurchVendItemStatistcs.QtyPrd1           +=  this.unitConvert(queryVendInvoiceTrans.ItemId,
                                                                queryVendInvoiceTrans.InventDimId,
                                                                ModuleInventPurchSales::Purch,
                                                                queryVendInvoiceTrans.PurchUnit,
                                                                queryVendInvoiceTrans.Qty);
                tmpPurchVendItemStatistcs.PurchUnitPrd1     =   purchUnit;
                tmpPurchVendItemStatistcs.LineAmountPrd1    +=  queryVendInvoiceJour.amountMST(queryVendInvoiceTrans.LineAmount);
            }

            if (    periodNum == ItemReportPeriodNum::Second
                ||  periodNum == ItemReportPeriodNum::Both)
            {
                tmpPurchVendItemStatistcs.QtyPrd2          +=   this.unitConvert(queryVendInvoiceTrans.ItemId,
                                                                queryVendInvoiceTrans.InventDimId,
                                                                ModuleInventPurchSales::Purch,
                                                                queryVendInvoiceTrans.PurchUnit,
                                                                queryVendInvoiceTrans.Qty);
                tmpPurchVendItemStatistcs.PurchUnitPrd2    =    purchUnit;
                tmpPurchVendItemStatistcs.LineAmountPrd2   +=   queryVendInvoiceJour.amountMST(queryVendInvoiceTrans.LineAmount);
            }
        }

        if (orderAccount)
        {
            tmpPurchVendItemStatistcs.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchVendItemStatistcsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>PurchVendItemStatistcsTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('PurchVendItemStatistcsTmp')]
    public PurchVendItemStatistcsTmp purchVendItemStatistcsTmp()
    {
        select * from tmpPurchVendItemStatistcs;
        return tmpPurchVendItemStatistcs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvert</Name>
				<Source><![CDATA[
    private Qty unitConvert(
        ItemId                   _itemId,
        InventDimId              _inventDimId,
        ModuleInventPurchSales   _module,
        UnitOfMeasureSymbol      _unitFrom,
        Qty                      _value = 1)
    {
        UnitOfMeasureSymbol unitTo = InventTableModule::find(_itemId, _module).UnitId;

        if (_unitFrom != unitTo)
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                         _inventDimId,
                                                                                         _value,
                                                                                         _unitFrom,
                                                                                         unitTo,
                                                                                         NoYes::Yes);
        }

        return _value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>