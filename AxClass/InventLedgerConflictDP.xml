<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventLedgerConflictDP</c> class handles data extraction for the <c>InventLedgerConflict</c>
///    report.
/// </summary>
[
SRSReportQueryAttribute(queryStr(InventLedgerConflictTmpConflict)),
SRSReportParameterAttribute(classStr(InventLedgerConflictContract))
]
public class InventLedgerConflictDP extends SrsReportDataProviderPreProcess
{
    InventLedgerConflictContract inventLedgerConflictContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventLedgerConflictTmpPrintAsteriskNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the report data from the print asterisk note temporary table.
    /// </summary>
    /// <returns>
    ///    The report data from the print asterisk note temporary table.
    /// </returns>
    [
    SRSReportDataSetAttribute(tableStr(InventLedgerConflictTmpPrintAsteriskNote))
    ]
    public InventLedgerConflictTmpPrintAsteriskNote getInventLedgerConflictTmpPrintAsteriskNote()
    {
        InventLedgerConflictTmpPrintAsteriskNote inventLedgerConflictTmpPrintAsteriskNote;

        inventLedgerConflictTmpPrintAsteriskNote.setConnection(this.parmUserConnection());

        select inventLedgerConflictTmpPrintAsteriskNote;
        return inventLedgerConflictTmpPrintAsteriskNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLedgerConflictTmpBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the balance temporary table.
    /// </summary>
    /// <returns>
    ///    The required report data.
    /// </returns>
    [
    SRSReportDataSetAttribute(tableStr(InventLedgerConflictTmpBalance))
    ]
    public InventLedgerConflictTmpBalance getInventLedgerConflictTmpBalance()
    {
        InventLedgerConflictTmpBalance inventLedgerConflictTmpBalance;

        inventLedgerConflictTmpBalance.setConnection(this.parmUserConnection());

        select inventLedgerConflictTmpBalance;
        return inventLedgerConflictTmpBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventLedgerConflictTmpBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process all <c>InventLedgerConflictTmpBalance</c> records for this report by
    /// summing them up by module and re-inserting them, thus updating their <c>CreatedTransactionId</c>
    /// field so that it can be picked up by the report query.
    /// </summary>
    private void processInventLedgerConflictTmpBalance()
    {
        InventLedgerConflictTmpBalance  inventLedgerConflictTmpBalance;
        InventLedgerConflictTmpBalance  inventLedgerConflictTmpBalanceReport;

        inventLedgerConflictTmpBalance.setConnection(this.parmUserConnection());
        inventLedgerConflictTmpBalanceReport.setConnection(this.parmUserConnection());

        ttsbegin;

        // There can be more balance records to be summed up
        insert_recordset inventLedgerConflictTmpBalanceReport
        (
            SignedBalance,
            Balance,
            Module
        )
        select sum(SignedBalance), sum(Balance), Module from inventLedgerConflictTmpBalance
            group by inventLedgerConflictTmpBalance.Module
            where inventLedgerConflictTmpBalance.ReportId   == inventLedgerConflictContract.parmReportId()
               && inventLedgerConflictTmpBalance.SessionId  == inventLedgerConflictContract.parmSessionId();

        // Cleanup the data in DB after they have been transferred to a temp. table
        delete_from inventLedgerConflictTmpBalance
            where inventLedgerConflictTmpBalance.ReportId   == inventLedgerConflictContract.parmReportId()
               && inventLedgerConflictTmpBalance.SessionId  == inventLedgerConflictContract.parmSessionId();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLedgerConflictTmpConflict</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the report data from the conflict temporary table.
    /// </summary>
    /// <returns>
    ///    The report data from the conflict temporary table.
    /// </returns>
    [
    SRSReportDataSetAttribute(tableStr(InventLedgerConflictTmpConflict))
    ]
    public InventLedgerConflictTmpConflict getInventLedgerConflictTmpConflict()
    {
        InventLedgerConflictTmpConflict inventLedgerConflictTmpConflict;

        inventLedgerConflictTmpConflict.setConnection(this.parmUserConnection());

        select inventLedgerConflictTmpConflict;
        return inventLedgerConflictTmpConflict;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventLedgerConflictTmpConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process all <c>InventLedgerConflictTmpConflict</c> records for this report by
    /// updating their <c>CreatedTransactionId</c> field so that it can be picked up by
    /// the report query.
    /// </summary>
    private void processInventLedgerConflictTmpConflict()
    {
        Connection connection = this.parmUserConnection();
        connection.ttsbegin();

        Statement statement = connection.createStatement();

        str sqlStatement = this.getSqlStatementForConflictRecordsUpdate();
        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());

        connection.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlStatementForConflictRecordsUpdate</Name>
				<Source><![CDATA[
    private str getSqlStatementForConflictRecordsUpdate()
    {
        SysDictTable    dictInventLedgerConflictTmpConflict = new SysDictTable(tableNum(InventLedgerConflictTmpConflict));
        SqlSystem       sqlSystem = new SqlSystem();

        /*
        update INVENTLEDGERCONFLICTTMPCONFLICT
        set CREATEDTRANSACTIONID = <this.parmCreatedTransactionId()>
        where INVENTLEDGERCONFLICTTMPCONFLICT.REPORTID = <inventLedgerConflictContract.parmReportId()>
        and INVENTLEDGERCONFLICTTMPCONFLICT.SESSIONID = <inventLedgerConflictContract.parmSessionId()>
        */

        str sqlUpdateInventLedgerConflictTmpConflict;
        sqlUpdateInventLedgerConflictTmpConflict += strFmt('UPDATE %1 SET %2 = %3 ',
                                                            dictInventLedgerConflictTmpConflict.name(DbBackend::Sql),
                                                            dictInventLedgerConflictTmpConflict.fieldName(fieldnum(InventLedgerConflictTmpConflict, CreatedTransactionId), DbBackend::Sql),
                                                            sqlSystem.sqlLiteral(this.parmCreatedTransactionId()));

        sqlUpdateInventLedgerConflictTmpConflict += strFmt('WHERE %1.%2 = %3 ',
                                                            dictInventLedgerConflictTmpConflict.name(DbBackend::Sql),
                                                            dictInventLedgerConflictTmpConflict.fieldName(fieldnum(InventLedgerConflictTmpConflict, ReportId), DbBackend::Sql),
                                                            sqlSystem.sqlLiteral(inventLedgerConflictContract.parmReportId()));

        sqlUpdateInventLedgerConflictTmpConflict += strFmt('AND %1.%2 = %3 ',
                                                            dictInventLedgerConflictTmpConflict.name(DbBackend::Sql),
                                                            dictInventLedgerConflictTmpConflict.fieldName(fieldnum(InventLedgerConflictTmpConflict, SessionId), DbBackend::Sql),
                                                            sqlSystem.sqlLiteral(inventLedgerConflictContract.parmSessionId()));

        return sqlUpdateInventLedgerConflictTmpConflict;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic. For this report, only data in pseudo-temporary tables are
    ///    transferred to SSRS.
    /// </summary>
    public void processReport()
    {
        InventLedgerConflictInit inventLedgerConflictInit = InventLedgerConflictInit::construct();

        inventLedgerConflictContract = this.parmDataContract() as InventLedgerConflictContract;

        inventLedgerConflictInit.parmInventLedgerConflictContract(inventLedgerConflictContract);
        inventLedgerConflictInit.parmQuery(this.parmQuery());
        inventLedgerConflictInit.parmUserConnection(this.parmUserConnection());
        inventLedgerConflictInit.run();

        this.parmCreatedTransactionId(appl.curTransactionId(true));

        this.processInventLedgerConflictTmpBalance();
        this.processInventLedgerConflictTmpConflict();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventLedgerConflictDP construct()
    {
        return new InventLedgerConflictDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>