<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountCreate_BatchExpired</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCountCreate_BatchExpired extends InventCountCreate_Base implements BatchRetryable
{
    NoYes                       activateCountSystem;
    AllPositiveNegativeZero     allPositiveNegativeZero;
    InventSiteId                inventSiteId;
    InventLocationId            inventLocationId;

    FormBuildStringControl  fbs_ControlInventLocation;
    FormStringControl       fb_ControlInventLocation;

    DialogField                 dialogActivateCountSystem;
    DialogField                 dialogOnhands;
    DialogField                 dialogInventSiteId;
    DialogGroup                 dialogInventDimParm;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
         ActivateCountSystem,
         allPositiveNegativeZero,
         inventSiteId,
         inventLocationId //added in version 3
    #ENDMACRO

    #LOCALMACRO.CurrentList2
         ActivateCountSystem,
         allPositiveNegativeZero,
         inventSiteId //added in version 2
    #ENDMACRO

    #LOCALMACRO.currentList1
        ActivateCountSystem,
        allPositiveNegativeZero
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateCountSystem</Name>
				<Source><![CDATA[
    protected NoYes activateCountSystem()
    {
        return activateCountSystem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        InventDimParm dimParmDisabledFields;

        dialog = super();

        dialogActivateCountSystem = dialog.addField(enumStr(NoYes), "@SYS54346", "@SYS54347");
        dialogActivateCountSystem.value(activateCountSystem);

        dialogOnhands = dialog.addField(enumStr(AllPositiveNegativeZero));
        dialogOnhands.value(allPositiveNegativeZero);

        //added to make it easier for users to do counting for a specific site
        dialogInventSiteId = dialog.addField(extendedTypeStr(InventSiteId), '', "@SYS117830");
        dialogInventSiteId.value(inventSiteId);

        FormBuildControl setupGroupControl = dialog.formBuildDesign().control(dialogGroupSetup.formBuildGroup().id());

        fbs_ControlInventLocation = setupGroupControl.addControl(FormControlType::String,'InventLocationId');
        fbs_ControlInventLocation.extendedDataType(extendedTypeNum(InventLocationId));
        fbs_ControlInventLocation.text(inventLocationId);
        fbs_ControlInventLocation.helpText("@FieldDescriptions_InventoryManagement:InventCountCreateItems_Warehouse");

        //if multisite is enabled counting must be done per site, hence the site field is not enabled but is selected
        dimParmDisabledFields.InventSiteIdFlag = inventDimParm.InventSiteIdFlag;
        dialogInventDimParm = inventDimParm.addFieldsToDialog(dialog,"@SYS54383",false,false,'',dimParmDisabledFields);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        //lookup and validation for inventlocationId is overridden
        FormRun formRun = _dialog.dialogForm().formRun();
        formRun.controlMethodOverload(true);
        formRun.controlMethodOverloadObject(this);

        //do casting from formbuildstringcontrol to formstringcontrol
        fb_ControlInventLocation = formRun.design().control(fbs_ControlInventLocation.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCounting</Name>
				<Source><![CDATA[
    protected boolean doCounting(
        InventSum       _inventSum,
        InventDim       _inventDim)
    {
        boolean     ret = super(_inventSum, _inventDim);

        if (ret)
        {
            switch (allPositiveNegativeZero)
            {
                case AllPositiveNegativeZero::All:
                    ret = true;
                    break;
                case AllPositiveNegativeZero::Positive:
                    ret = (InventSumDatePhysicalDim::onHandQty(countDate,_inventSum.ItemId,_inventDim,inventDimParm) > 0);
                    break;
                case AllPositiveNegativeZero::Negative:
                    ret = (InventSumDatePhysicalDim::onHandQty(countDate,_inventSum.ItemId,_inventDim,inventDimParm) < 0);
                    break;
                case AllPositiveNegativeZero::Zero:
                    ret = (InventSumDatePhysicalDim::onHandQty(countDate,_inventSum.ItemId,_inventDim,inventDimParm) == 0);
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();
        activateCountSystem     = dialogActivateCountSystem.value();
        allPositiveNegativeZero = dialogOnhands.value();
        inventSiteId            = dialogInventSiteId.value();
        inventLocationId        = fb_ControlInventLocation.text();

        inventDimParm.getFromDialog(dialog, dialogInventDimParm);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId_lookup</Name>
				<Source><![CDATA[
    public void inventLocationId_lookup()
    {
        InventLocation::lookupBySiteIdAllTypes(fb_ControlInventLocation,dialogInventSiteId.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId_validate</Name>
				<Source><![CDATA[
    public boolean inventLocationId_validate()
    {
        boolean ret = true;

        if (!fb_ControlInventLocation.text())
        {
            return true;
        }

        InventLocation inventLocation = InventLocation::find(fb_ControlInventLocation.text());

        if (!inventLocation.RecId)
        {
            return checkFailed(strFmt("@SYS5001",fb_ControlInventLocation.text()));
        }

        if (dialogInventSiteId.value() && inventLocation.InventSiteId != dialogInventSiteId.value())
        {
            return checkFailed(strFmt("@SYS104861",fb_ControlInventLocation.text(),dialogInventSiteId.value()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSumQuery</Name>
				<Source><![CDATA[
    protected Query initInventSumQuery(
        ItemId          _itemId,
        InventBatchId   _inventBatchId)
    {
        QueryBuildDataSource    qbsDim,qbsSum;

        ListEnumerator          dimFields   = InventDim::dimEnabledFieldList().getEnumerator();
        boolean                 doGroupBy;

        Query query = new Query(queryStr(InventSumCount));

        qbsSum = query.dataSourceTable(tableNum(InventSum));
        qbsDim = query.dataSourceTable(tableNum(InventDim));

        QueryBuildRange queryRangeItemId = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum, ItemId));
        queryRangeItemId.value(queryValue(_itemId));

        QueryBuildRange queryRangeBatchId = SysQuery::findOrCreateRange(qbsDim, fieldNum(InventDim, InventBatchId));
        queryRangeBatchId.value(queryValue(_inventBatchId));

        //blank site is interpreted as all sites so no criteria is added
        if (inventSiteId)
        {
            QueryBuildRange queryRangeInventSiteId = SysQuery::findOrCreateRange(qbsDim, fieldNum(InventDim, InventSiteId));
            queryRangeInventSiteId.value(queryValue(inventSiteId));
        }

        if (inventLocationId)
        {
            QueryBuildRange queryRangeInventLocationId = SysQuery::findOrCreateRange(qbsDim, fieldNum(InventDim, InventLocationId));
            queryRangeInventLocationId.value(queryValue(inventLocationId));
        }

        qbsSum.sortClear();
        qbsSum.addSortField(fieldNum(InventSum,ItemId));
        qbsSum.orderMode(OrderMode::GroupBy);

        qbsDim.sortClear();
        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();
            if (inventDimParm.isFieldIdEnabled(dimFieldId))
            {
                qbsDim.addSortField(dimFieldId);
                doGroupBy = true;
            }
        }
        if (doGroupBy)
        {
            qbsDim.orderMode(OrderMode::GroupBy);
        }
        else
        {
            qbsDim.orderMode(OrderMode::OrderBy);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected void initQueryRun()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventBatch));

        queryBuildDataSource.addSortField(fieldNum(InventBatch, ItemId));
        queryBuildDataSource.addSortField(fieldNum(InventBatch, ExpDate));
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventBatch, ItemId));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventBatch, ExpDate));
        queryBuildRange.value(queryRange(prevYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventBatch, InventBatchId));

        QueryBuildDataSource inventTableQBDS = queryBuildDataSource.addDataSource(tableNum(InventTable));
        inventTableQBDS.relations(true);
        inventTableQBDS.joinMode(JoinMode::ExistsJoin);
        // Hide the range already present on InventBatch
        inventTableQBDS.addRange(fieldNum(InventTable, ItemId)).status(RangeStatus::Hidden);

        InventInventoriedPolicy::addInventoriedRangeToInventTable(inventTableQBDS);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c>.
    /// </summary>
    /// <returns>
    ///    The <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c>.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not instantiate the <c>queryRun</c> object whenever the method is called. This should be
    ///    done in the <c>unpack</c> method and the <c>initParmDefault</c> method or in the <c>init</c>
    ///    method, if this is used, or in the method only when it is not instantiated.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        setPrefix(InventCountCreate_BatchExpired::description());
        var logger = InventInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = logger.activityContext(logger.activity('Create counting journal of expired batches')))
        {
            try
            {
                ttsbegin;

                if (! this.validate())
                {
                    throw error("@SYS18447");
                }

                this.progressInit(InventCountCreate_BatchExpired::description(), QueryRun::getQueryRowCount(queryRun.query(), maxInt()), #AviUpdate);
                this.initJournalTableData();

                boolean allowMoreLines = true;

                this.addFilterToCountingGroup();

                while (queryRun.next())
                {
                    InventBatch inventBatch = queryRun.get(tableNum(InventBatch)) as InventBatch;
                    setPrefix(#prefixField(inventBatch,itemId) + ', ' + #prefixField(inventBatch,inventBatchId));
                    progress.setText(inventBatch.ItemId + ', ' + inventBatch.InventBatchId, 1);
                    progress.incCount();

                    QueryRun queryRunSumDim = new QueryRun(this.initInventSumQuery(inventBatch.ItemId, inventBatch.InventBatchId));

                    while (queryRunSumDim.next())
                    {
                        InventSum inventSum = queryRunSumDim.get(tableNum(InventSum)) as InventSum;
                        InventDim inventDim = queryRunSumDim.get(tableNum(InventDim)) as InventDim;
                        if (this.doCounting(inventSum,inventDim))
                        {
                            this.createInventJournalTrans(inventSum,inventDim);
                            allowMoreLines = this.allowMoreLines();
                        }
                        if (!allowMoreLines)
                        {
                            break;
                        }
                    }
                    if (!allowMoreLines)
                    {
                        break;
                    }
                }
                if (journalTableData.journalTable().JournalId == journalId && this.isInBatch())
                {
                    journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
                }
                else
                {
                    journalTableData.journalTable().update();
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                queryRun.reset();
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        queryRun.reset();
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version     = RunBase::getVersion(_packedClass);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, base] = _packedClass;
                if (base)
                    ret = super(base);
                break;

            case 2:
                [version,#CurrentList2, base] = _packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;

            case 1:
                [version,#CurrentList1, base] = _packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (!inventDimParm.InventBatchIdFlag)
        {
            ret = checkFailed(strFmt("@SYS62948", new DictField(tableNum(InventDim),fieldNum(InventDim, InventBatchId)).label()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS62951";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JournalForm                     journalForm         = JournalForm::fromArgs(_args);
        InventJournalId                 journalId           = InventCountCreate_Base::argsJournalId(_args);
        InventCountCreate_BatchExpired  inventCountCreate   = InventCountCreate_BatchExpired::newCountCreate(journalId,InventJournalTable::journalId2inventDimParm(journalId));

        InventCountCreate_Base::mainHandling(inventCountCreate, journalId, journalForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCountCreate</Name>
				<Source><![CDATA[
    public static InventCountCreate_BatchExpired newCountCreate(
        InventJournalId _journalId,
        InventDimParm   _inventDimParm)
    {
        InventCountCreate_BatchExpired  inventCountCreate = new InventCountCreate_BatchExpired();

        inventCountCreate.getLast();
        inventCountCreate.parmJournalId(_journalId);
        inventCountCreate.parmCountDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        inventCountCreate.parmInventDimParm(_inventDimParm);
        InventJournalTable inventJournalTable = InventJournalTable::find(_journalId);
        if (inventJournalTable.InventSiteId)
        {
            inventCountCreate.parmInventSiteId(inventJournalTable.InventSiteId);
        }

        if (inventJournalTable.InventLocationId)
        {
            inventCountCreate.parmInventLocationId(inventJournalTable.InventLocationId);
        }

        return inventCountCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>