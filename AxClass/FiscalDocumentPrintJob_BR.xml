<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentPrintJob_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FiscalDocumentPrintJob_BR</c> prints fiscal documents according to parameters specified by the user.
/// </summary>
class FiscalDocumentPrintJob_BR extends RunBaseBatch implements BatchRetryable
{
    CustVendType_BR         accountType;
    AccountNum              accountNum;
    date                    fromDate;
    date                    toDate;
    FiscalDocDirection_BR   direction;
    FiscalDocumentSeries_BR series;
    FiscalDocumentModel_BR  model;
    PrintCopyOriginal       printCopyOriginal;
    container               printerSettingsCopy;
    container               printerSettingsOriginal;
    NoYes                   usePrintManagementDest;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;

        qbds = query.addDataSource(tableNum(FiscalDocument_BR));

        qbds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentAccountType)).value(SysQuery::value(this.parmAccountType()));

        if (this.parmAccountNum())
        {
            qbds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum)).value(this.parmAccountNum());
        }

        if (this.parmFromDate() || this.parmToDate())
        {
            qbds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentDate)).value(queryRange(this.parmFromDate(), this.parmToDate()));
        }

        if (this.parmDirection())
        {
            qbds.addRange(fieldNum(FiscalDocument_BR, Direction)).value(SysQuery::value(this.parmDirection()));
        }

        if (this.parmSeries())
        {
            qbds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentSeries)).value(this.parmSeries());
        }

        if (this.parmModel())
        {
            qbds.addRange(fieldNum(FiscalDocument_BR, model)).value(this.parmModel());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createListFromQuery</Name>
				<Source><![CDATA[
    private RecordSortedList createListFromQuery(Query _query)
    {
        QueryRun queryRun = new QueryRun(_query);
        RecordSortedList recordList = new RecordSortedList(tableNum(FiscalDocument_BR));

        recordList.sortOrder(fieldNum(FiscalDocument_BR, RecId));

        while (queryRun.next())
        {
            recordList.ins(queryRun.get(tableNum(FiscalDocument_BR)));
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        return Dialog::newFormnameRunbase(formstr(FiscalDocumentPrintJob_BR), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterServiceController</Name>
				<Source><![CDATA[
    private FormLetterServiceController initFormLetterServiceController(FormLetterServiceController    _formLetter)
    {
        _formLetter.updatePrinterSettingsFormLetter(this.parmPrinterSettingsOriginal(), PrintSetupOriginalCopy::Original);
        _formLetter.updatePrinterSettingsFormLetter(this.parmPrinterSettingsCopy(), PrintSetupOriginalCopy::Copy);
        _formLetter.usePrintManagement(this.parmUsePrintManagementDest());
        _formLetter.parmUseUserDefinedDestinations(true);

        return _formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    public AccountNum parmAccountNum(AccountNum _accountNum = accountNum)
    {
        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountType</Name>
				<Source><![CDATA[
    public CustVendType_BR parmAccountType(CustVendType_BR _accountType = accountType)
    {
        accountType = _accountType;
        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirection</Name>
				<Source><![CDATA[
    public FiscalDocDirection_BR parmDirection(FiscalDocDirection_BR _direction = direction)
    {
        direction = _direction;
        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public date parmFromDate(date _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModel</Name>
				<Source><![CDATA[
    public FiscalDocumentModel_BR parmModel(FiscalDocumentModel_BR _model = model)
    {
        model = _model;
        return model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsCopy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PrinterSettingsCopy</c> parameter.
    /// </summary>
    /// <param name="_printerSettings">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>PrinterSettingsCopy</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>PrinterSettingsCopy</c> parameter will contain the user-defined printer destinations for
    ///    copy invoices. If no user-defined destinations are found then copy invoices will be printed by
    ///    using the screen as the default destination.
    /// </remarks>
    public container parmPrinterSettingsCopy(container _printerSettings = printerSettingsCopy)
    {
        printerSettingsCopy = _printerSettings;
        return printerSettingsCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PrinterSettingsOriginal</c> parameter.
    /// </summary>
    /// <param name="_printerSettings">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>PrinterSettingsOriginal</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>PrinterSettingsOriginal</c> will contain the user-defined printer destinations for original
    ///    invoices. If no user-defined destinations are found then original invoices will be printed by using
    ///    the screen as the default destination.
    /// </remarks>
    public container parmPrinterSettingsOriginal(container _printerSettings = printerSettingsOriginal)
    {
        printerSettingsOriginal = _printerSettings;
        return printerSettingsOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeries</Name>
				<Source><![CDATA[
    public FiscalDocumentSeries_BR parmSeries(FiscalDocumentSeries_BR _series = series)
    {
        series = _series;
        return series;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public date parmToDate(date _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePrintManagementDest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>UsePrintManagementDest</c> parameter.
    /// </summary>
    /// <param name="_usePrintManagementDest">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>UsePrintManagementDest</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>UsePrintManagementDest</c> parameter will contain a <c>NoYes</c> enumeration value. When the
    ///    <c>UsePrintManagementDest</c> parameter is <c>NoYes::Yes</c> then the default print management
    ///    destinations will be used for printing invoices. When the <c>UsePrintManagementDest</c> parameter
    ///    is <c>NoYes::No</c> then the user-defined printer destinations will be used; otherwise, invoices
    ///    will be printed by using the screen as the default destination.
    /// </remarks>
    public NoYes parmUsePrintManagementDest(NoYes _usePrintManagementDest = usePrintManagementDest)
    {
        usePrintManagementDest = _usePrintManagementDest;
        return usePrintManagementDest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the menu item that fires the printing.
    /// </summary>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    /// <param name="_copy">
    /// The copy printing menu item name.
    /// </param>
    /// <param name="_original">
    /// The original printing menu item name.
    /// </param>
    /// <param name="_originalPrint">
    /// The print management printing menu item name.
    /// </param>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    protected void printCopyOriginal(PrintCopyOriginal _action, str _copy, str _original, str _originalPrint, Args _args)
    {
        str menuItem;

        switch (_action)
        {
            case PrintCopyOriginal::Copy :
                menuItem = _copy;
                break;
            case PrintCopyOriginal::Original :
                menuItem = _original;
                break;
            case PrintCopyOriginal::OriginalPrint :
                menuItem = _originalPrint;
                break;
        }

        _args.name(menuItem);
        new MenuFunction(menuItem, MenuItemType::Output).run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalFiscalDocument(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        if (_recordList.len() > 0 )
        {
            _args.caller(this);
            _args.object(_recordList);
            this.printCopyOriginal(
                    _action,
                    menuitemoutputstr(FiscalDocument_BR),
                    menuitemoutputstr(FiscalDocument_BR),
                    menuitemoutputstr(FiscalDocument_BR),
                    _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalFreeTextInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document related to a free text invoice.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalFreeTextInvoice(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        FormLetterServiceController formLetterServiceController;

        if (_recordList.len() > 0 )
        {
            formLetterServiceController = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
            _args.caller(this.initFormLetterServiceController(formLetterServiceController));
            _args.object(_recordList);
            this.printCopyOriginal(
                    _action,
                    menuitemoutputstr(FreeTextInvoiceCopy),
                    menuitemoutputstr(FreeTextInvoiceOriginal),
                    menuitemoutputstr(FreeTextInvoice),
                    _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document related to a packing slip.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalPackingSlip(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        FormLetterServiceController formLetterServiceController;

        if (_recordList.len() > 0 )
        {
            formLetterServiceController = SalesFormLetter::construct(DocumentStatus::DeliverySlip_BR);
            _args.caller(this.initFormLetterServiceController(formLetterServiceController));
            _args.object(_recordList);
            this.printCopyOriginal(
                    _action,
                    menuitemOutputStr(SalesPackingSlipCopy),
                    menuitemOutputStr(SalesPackingSlipOriginal),
                    menuitemOutputStr(SalesPackingSlip),
                    _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document related to a project invoice.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalProjInvoiceJour(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        ProjInvoiceJour projInvoiceJour;

        if (_recordList.len() > 0)
        {
            _recordList.first(projInvoiceJour);

            _args.caller(this);
            _args.object(_recordList);
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                if (projInvoiceJour.psaInvoiceFormats == PSAInvoiceFormats::ManageInvoice)
                {
                    this.printCopyOriginal(
                            _action,
                            menuitemoutputstr(PSAManageInvoice),
                            menuitemoutputstr(PSAManageInvoice),
                            menuitemoutputstr(PSAManageInvoice),
                            _args);
                }
                else if (ProjProposalJour::isProposalRelease(projInvoiceJour.ProposalId))
                {
                    this.printCopyOriginal(
                        _action,
                        menuitemoutputstr(PSACustRetentionReleaseInvoice),
                        menuitemoutputstr(PSACustRetentionReleaseInvoice),
                        menuitemoutputstr(PSACustRetentionReleaseInvoice),
                        _args);
                }
                else
                {
                    switch (projInvoiceJour.psaInvoiceFormats)
                    {
                        case PSAInvoiceFormats::SummaryByCategory :
                            this.printCopyOriginal(
                                _action,
                                menuitemoutputstr(PSAProjInvoiceCopy),
                                menuitemoutputstr(PSAProjInvoiceOriginal),
                                menuitemoutputstr(PSAProjInvoice),
                                _args);
                            break;

                        case PSAInvoiceFormats::DetailInvoice :
                        case PSAInvoiceFormats::SummaryInvoice :
                            if (PSAContractLineItems::hasBillingRules(projInvoiceJour.ProjInvoiceProjId))
                            {
                                this.printCopyOriginal(
                                    _action,
                                    menuitemoutputstr(PSAContractLineInvoice),
                                    menuitemoutputstr(PSAContractLineInvoice),
                                    menuitemoutputstr(PSAContractLineInvoice),
                                    _args);
                            }
                            else
                            {
                                this.printCopyOriginal(
                                    _action,
                                    menuitemoutputstr(PSAProjInvoiceCopy),
                                    menuitemoutputstr(PSAProjInvoiceOriginal),
                                    menuitemoutputstr(PSAProjInvoice),
                                    _args);
                        }
                        break;

                    default :
                        this.printCopyOriginal(
                                    _action,
                                    menuitemoutputstr(PSAProjInvoiceCopy),
                                    menuitemoutputstr(PSAProjInvoiceOriginal),
                                    menuitemoutputstr(PSAProjInvoice),
                                    _args);
                        break;
                    }
                }
            }
            else
            {
                // For fiscal documents, print settings is retrieved by enum value inside the controller
                this.printCopyOriginal(
                        _action,
                        menuitemoutputstr(ProjInvoiceCopy),
                        menuitemoutputstr(ProjInvoiceOriginalPrint),
                        menuitemoutputstr(ProjInvoice),
                        _args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalPurchComplementary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document related to a purchase complementary invoice.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalPurchComplementary(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        if (_recordList.len() > 0 )
        {
            _args.caller(this);
            _args.object(_recordList);
            this.printCopyOriginal(
                    _action,
                    menuitemoutputstr(PurchComplementaryInvoice),
                    menuitemoutputstr(PurchComplementaryInvoice),
                    menuitemoutputstr(PurchComplementaryInvoice),
                    _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalPurchInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document related to a purchase invoice.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalPurchInvoice(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        FormLetterServiceController formLetterServiceController;

        if (_recordList.len() > 0 )
        {
            formLetterServiceController = PurchFormLetter_Invoice::newInvoice();
            _args.caller(this.initFormLetterServiceController(formLetterServiceController));
            _args.object(_recordList);
            this.printCopyOriginal(
                    _action,
                    menuitemoutputstr(PurchinvoiceCopy),
                    menuitemoutputstr(PurchinvoiceOriginal),
                    menuitemoutputstr(Purchinvoice),
                    _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalSalesComplementary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document related to a sales complementary invoice.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalSalesComplementary(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        if (_recordList.len() > 0 )
        {
            _args.caller(this);
            _args.object(_recordList);
            this.printCopyOriginal(
                    _action,
                    menuitemoutputstr(SalesComplementaryInvoice),
                    menuitemoutputstr(SalesComplementaryInvoice),
                    menuitemoutputstr(SalesComplementaryInvoice),
                    _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCopyOriginalSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the fiscal document related to a sales invoice.
    /// </summary>
    /// <param name="_args">
    /// The arguments required for the printing.
    /// </param>
    /// <param name="_recordList">
    /// The fiscal document reference records.
    /// </param>
    /// <param name="_action">
    /// The parameter that determines if it should print the original or the copy document.
    /// </param>
    protected void printCopyOriginalSalesInvoice(Args _args, RecordSortedList _recordList, PrintCopyOriginal _action)
    {
        FormLetterServiceController formLetterServiceController;

        if (_recordList.len() > 0 )
        {
            formLetterServiceController = SalesFormLetter::construct(DocumentStatus::Invoice);
            _args.caller(this.initFormLetterServiceController(formLetterServiceController));
            _args.object(_recordList);
            this.printCopyOriginal(
                    _action,
                    menuitemoutputstr(SalesInvoiceCopy),
                    menuitemoutputstr(SalesInvoiceOriginal),
                    menuitemoutputstr(SalesInvoice),
                    _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFiscalDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints a list of fiscal documents.
    /// </summary>
    /// <param name="_fiscalDocumentList">
    /// <c>RecordSortedList</c> of <c>FiscalDocument_BR</c> records to be printed.
    /// </param>
    /// <param name="_action">
    /// <c>PrintCopyOriginal</c> value indicating the print action for the documents.
    /// </param>
    public void printFiscalDocuments(RecordSortedList _fiscalDocumentList, PrintCopyOriginal _action)
    {
        FiscalDocument_BR   fiscalDocument;
        CustInvoiceJour     custInvoiceJour;

        RecordSortedList    recordListPurchComplementary;
        RecordSortedList    recordListSalesComplementary;
        RecordSortedList    recordListSalesInvoice;
        RecordSortedList    recordListFreeTextInvoice;
        RecordSortedList    recordListPurchInvoice;
        RecordSortedList    recordListPackingSlip;
        RecordSortedList    recordListTransferOrders;
        RecordSortedList    recordListTaxTransfer;
        RecordSortedList    recordListProjInvoiceJour;

        Args                args                            = new Args();

        boolean hasMore;

        // We need divide the fiscal documents since we use a different controller for each
        // origin. For the cases that we use the same controller (FiscalDocument) but still
        // use different record lists is because the controller finds the proper FormLetter
        // implementation for each document.

        recordListPurchComplementary    = new RecordSortedList(tablenum(FiscalDocument_BR));
        recordListPurchComplementary.sortOrder(fieldNum(FiscalDocument_BR, RecId));

        recordListSalesComplementary    = new RecordSortedList(tablenum(FiscalDocument_BR));
        recordListSalesComplementary.sortOrder(fieldNum(FiscalDocument_BR, RecId));

        recordListSalesInvoice          = new RecordSortedList(tablenum(CustInvoiceJour));
        recordListSalesInvoice.sortOrder(fieldNum(CustInvoiceJour, RecId));

        recordListFreeTextInvoice       = new RecordSortedList(tablenum(CustInvoiceJour));
        recordListFreeTextInvoice.sortOrder(fieldNum(CustInvoiceJour, RecId));

        recordListPurchInvoice          = new RecordSortedList(tablenum(VendInvoiceJour));
        recordListPurchInvoice.sortOrder(fieldNum(VendInvoiceJour, RecId));

        recordListPackingSlip           = new RecordSortedList(tablenum(CustPackingSlipJour));
        recordListPurchInvoice.sortOrder(fieldNum(CustPackingSlipJour, RecId));

        recordListTransferOrders        = new RecordSortedList(tablenum(FiscalDocument_BR));
        recordListTransferOrders.sortOrder(fieldNum(FiscalDocument_BR, RecId));

        recordListTaxTransfer        = new RecordSortedList(tablenum(FiscalDocument_BR));
        recordListTaxTransfer.sortOrder(fieldNum(FiscalDocument_BR, RecId));

        recordListProjInvoiceJour        = new RecordSortedList(tablenum(ProjInvoiceJour));
        recordListProjInvoiceJour.sortOrder(fieldNum(ProjInvoiceJour, RecId));

        for (hasMore = _fiscalDocumentList.first(fiscalDocument);
             hasMore;
             hasMore = _fiscalDocumentList.next(fiscalDocument))
        {
            switch (fiscalDocument.RefTableId)
            {
                case tableNum(CustInvoiceJour):
                    custInvoiceJour = fiscalDocument.findRefRecord();
                    if (custInvoiceJour.salesTable())
                    {
                        recordListSalesInvoice.ins(custInvoiceJour);
                    }
                    else
                    {
                        recordListFreeTextInvoice.ins(custInvoiceJour);
                    }
                    break;

                case tableNum(VendInvoiceJour) :
                    recordListPurchInvoice.ins(fiscalDocument.findRefRecord());
                    break;

                case tableNum(PurchComplementaryInvoiceHeader) :
                    recordListPurchComplementary.ins(fiscalDocument);
                    break;

                case tableNum(SalesComplementaryInvoiceHeader) :
                    recordListSalesComplementary.ins(fiscalDocument);
                    break;

                case tableNum(CustPackingSlipJour) :
                    recordListPackingSlip.ins(fiscalDocument.findRefRecord());
                    break;

                case tableNum(InventTransferJour) :
                    recordListTransferOrders.ins(fiscalDocument);
                    break;

                case tableNum(TaxFiscalDocument_BR):
                    recordListTaxTransfer.ins(fiscalDocument);
                    break;

                case tableNum(ProjInvoiceJour) :
                    recordListProjInvoiceJour.ins(fiscalDocument.findRefRecord());
                    break;
            }
        }

        args.parmEnum(_action);
        args.parmEnumType(enumNum(PrintCopyOriginal));

        this.printCopyOriginalSalesInvoice(args, recordListSalesInvoice, _action);
        this.printCopyOriginalFreeTextInvoice(args, recordListFreeTextInvoice, _action);
        this.printCopyOriginalPurchInvoice(args, recordListPurchInvoice, _action);
        this.printCopyOriginalPackingSlip(args, recordListPackingSlip, _action);
        this.printCopyOriginalPurchComplementary(args, recordListPurchComplementary, _action);
        this.printCopyOriginalSalesComplementary(args, recordListSalesComplementary, _action);
        this.printCopyOriginalFiscalDocument(args, recordListTransferOrders, _action);
        this.printCopyOriginalFiscalDocument(args, recordlistTaxTransfer, _action);
        this.printCopyOriginalProjInvoiceJour(args, recordListProjInvoiceJour, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Drives the invoice printing process which includes validation of data, setting up the printing
    ///    settings, pulling up the invoice records to print, and printing the invoices.
    /// </summary>
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00016, funcName());

        super();

        this.printFiscalDocuments(this.createListFromQuery(this.buildQuery()), this.parmPrintCopyOriginal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FiscalDocumentPrintJob_BR printJob = new FiscalDocumentPrintJob_BR();

        if (printJob.prompt())
        {
            printJob.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>