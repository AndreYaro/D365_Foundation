<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountEventHandler_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>MainAccount</c> event handlers for CN country/region.
/// </summary>
public class MainAccountEventHandler_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>MainAccount</c> hasBalanceCheck event.
    /// </summary>
    /// <param name = "_eventArgs">The event arguments.</param>
    [SubscribesTo(Tablestr(MainAccount), delegatestr(MainAccount, hasBalanceCheck))]
    public static void hasBalanceCheck(MainAccountEventArgs _eventArgs)
    {
        if (LedgerParameters::isCommonAccountType_CN() && _eventArgs.parmMainAccount().Type == DimensionLedgerAccountType::Common_CN)
        {
            _eventArgs.parmHasBalance(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MainAccount_onValidatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>MainAccount</c> ValidatingDelete event.
    /// </summary>
    /// <param name = "_sender">The <c>MainAccount</c>.</param>
    /// <param name = "_e">The event arguments.</param>
    [DataEventHandler(tableStr(MainAccount), DataEventType::ValidatingDelete), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void MainAccount_onValidatingDelete(Common _sender, DataEventArgs _e)
    {
        MainAccount mainAccount = _sender as MainAccount;
        ValidateEventArgs ve = _e;

        if (LedgerChartOfAccounts::isTreeStructureEnabled_CN(mainAccount.LedgerChartOfAccounts) &&
            LedgerAccountUtility_CN::existSub(mainAccount.RecId))
        {
            ve.parmValidateResult(checkFailed("@GLS54678"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MainAccount_onValidatingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>MainAccount</c> ValidatingField event.
    /// </summary>
    /// <param name = "_sender">The <c>MainAccount</c>.</param>
    /// <param name = "_e">The event arguments.</param>
    [DataEventHandler(tableStr(MainAccount), DataEventType::ValidatingField), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void MainAccount_onValidatingField(Common _sender, DataEventArgs _e)
    {
        MainAccount mainAccount = _sender as MainAccount;
        ValidateFieldEventArgs ve = _e;
        boolean isValid = true;

        if (ve.parmFieldId() == fieldNum(MainAccount, Type))
        {
            if (LedgerChartOfAccounts::isTreeStructureEnabled_CN())
            {
                isValid = MainAccountEventHandler_CN::validateLedgerAccountType(mainAccount);
            }

            if (mainAccount.Type == DimensionLedgerAccountType::Common_CN
                    && !LedgerParameters::isCommonAccountType_CN())
            {
                isValid = checkFailed("@GLS60505") & isValid;
            }

            ve.parmValidateResult(isValid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerAccountType</Name>
				<Source><![CDATA[
    private static boolean validateLedgerAccountType(MainAccount _mainAccount)
    {
        boolean                    ret = true;
        recId                      rootAccountRecId;
        MainAccount                peerAccount;
        LedgerAccountUtility_CN    ledgerAccountUtility;

        if (_mainAccount.orig().Type != _mainAccount.Type
                && _mainAccount.orig().Type == DimensionLedgerAccountType::Total
                && LedgerAccountUtility_CN::existSub(_mainAccount.RecId))
        {
            ret = checkFailed(strfmt("@GLS54683", _mainAccount.MainAccountId, _mainAccount.orig().Type));
        }

        if (ret)
        {
            ledgerAccountUtility = new LedgerAccountUtility_CN();
            rootAccountRecId = ledgerAccountUtility.findParentRecId(_mainAccount.MainAccountId, _mainAccount.LedgerChartOfAccounts);

            peerAccount = ledgerAccountUtility.findFirstSubLeaf(rootAccountRecId, _mainAccount.RecId);

            if ((_mainAccount.Type != DimensionLedgerAccountType::Total)
                    && (_mainAccount.Type != peerAccount.Type)
                    && (peerAccount != null)
                    && (peerAccount.Type != DimensionLedgerAccountType::Total))
            {
                ret = checkFailed("@GLS54868");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>