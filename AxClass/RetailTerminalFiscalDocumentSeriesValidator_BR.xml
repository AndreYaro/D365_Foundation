<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTerminalFiscalDocumentSeriesValidator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides the validations methods for fiscal documents series fields that are owned by retail terminal.
/// </summary>
internal final class RetailTerminalFiscalDocumentSeriesValidator_BR
{
    private RetailTerminalTable retailTerminalTableValidate;

    // validation pattern for checking the fiscal document series (must be in range 1-999 or be "0").
    private const str regExpPattern = '^(0|[1-9]{1}[0-9]{0,2})$';
    private static System.Text.RegularExpressions.Regex re = new System.Text.RegularExpressions.Regex(regExpPattern, 
        System.Text.RegularExpressions.RegexOptions::Compiled);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>RetailTerminalFiscalDocumentSeriesValidator_BR</c> class.
    /// </summary>
    /// <param name = "_retailTerminalTable">The retail terminal table record.</param>
    /// <returns>A new instance of <c>RetailTerminalFiscalDocumentSeriesValidator_BR</c> class.</returns>
    public static RetailTerminalFiscalDocumentSeriesValidator_BR construct(RetailTerminalTable _retailTerminalTable)
    {
        RetailTerminalFiscalDocumentSeriesValidator_BR validator = new RetailTerminalFiscalDocumentSeriesValidator_BR();
        validator.retailTerminalTableValidate = _retailTerminalTable;
        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>RetailTerminalFiscalDocumentSeriesValidator_BR</c> class.
    /// </summary>
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalDocumentSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the fiscal document series is in the valid range (0 - 999)
    /// and if in the same store there is no another terminal dublicating current value.
    /// </summary>
    /// <returns>
    /// returns true if the fiscal document series is filled correctly; otherwise false.
    /// </returns>
    public boolean validateFiscalDocumentSeries()
    {
        FiscalDocumentSeries_BR fiscalDocumentSeries = retailTerminalTableValidate.FiscalDocumentSeries;

        if (!re.IsMatch(fiscalDocumentSeries))
        {
            return checkFailed("@Brazil_Retail:NFCeSeriesValidationError2");
        }

        if (fiscalDocumentSeries == retailTerminalTableValidate.FiscalDocumentSeriesContingency)
        {
            return checkFailed("@Brazil_Retail:NFCeAndNFCeContingencySeriesValidationError");
        }

        if (this.terminalWithSameDocSeriesExists(fiscalDocumentSeries))
        {
            return checkFailed("@SYP4860109");
        }

        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalDocumentSeriesContingency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the fiscal document contingency series is in the valid range (0 - 999)
    /// and if in the same store there is no another terminal dublicating current value.
    /// </summary>
    /// <returns>
    /// returns true if the fiscal document series is filled correctly; otherwise false.
    /// </returns>
    public boolean validateFiscalDocumentSeriesContingency()
    {
        FiscalDocumentSeries_BR fiscalDocumentSeriesContingency = retailTerminalTableValidate.FiscalDocumentSeriesContingency;

        if (!re.IsMatch(fiscalDocumentSeriesContingency))
        {
            return checkFailed("@Brazil_Retail:NFCeContingencySeriesValidateError2");
        }

        if (fiscalDocumentSeriesContingency == retailTerminalTableValidate.FiscalDocumentSeries)
        {
            return checkFailed("@Brazil_Retail:NFCeAndNFCeContingencySeriesValidationError");
        }

        if (this.terminalWithSameDocSeriesExists(fiscalDocumentSeriesContingency))
        {
            return checkFailed("@SYP4860109");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalDocumentSeriesEFDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the fiscal document NF-e series is in the valid range (0 - 999) or empty.
    /// </summary>
    /// <returns>
    /// returns true if the fiscal document series is filled correctly or empty, otherwise false..
    /// </returns>
    public boolean validateFiscalDocumentSeriesEFDoc()
    {
        FiscalDocumentSeries_BR fiscalDocumentSeriesEFDoc = retailTerminalTableValidate.FiscalDocumentSeriesEFDoc;

        if (!re.IsMatch(fiscalDocumentSeriesEFDoc))
        {
            return checkFailed("@Brazil_Retail:NFeSeriesValidateError2");
        }

        return this.checkTerminalWithSameEFDocSeriesExists(fiscalDocumentSeriesEFDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>terminalWithSameDocSeriesExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the fiscal document series and the fiscal document contingency series is unique among all terminals in the same store.
    /// </summary>
    /// <param name = "_documentSeries">The fiscal document series or fiscal document contingency series to check.</param>
    /// <returns>
    /// True if the fiscal document and the fiscal document contingency series has no dublicates; otherwise false.
    /// </returns>
    private boolean terminalWithSameDocSeriesExists(FiscalDocumentSeries_BR _documentSeries)
    {
        RetailTerminalTable retailTerminalTable;

        select firstOnly RecId
            from retailTerminalTable
            where  retailTerminalTable.StoreRecId == this.retailTerminalTableValidate.StoreRecId
                && (retailTerminalTable.FiscalDocumentSeries == _documentSeries
                || retailTerminalTable.FiscalDocumentSeriesContingency == _documentSeries)
                && retailTerminalTable.RecId != this.retailTerminalTableValidate.RecId;

        return retailTerminalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTerminalWithSameEFDocSeriesExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks wheter the fiscal document NF-e series is unique among all terminals in the same store.
    /// </summary>
    /// <param name = "_documentSeries">The fiscal document NF-e series to check.</param>
    /// <returns>
    /// True if the fiscal document NF-e series has no dublicates; otherwise false.
    /// </returns>
    private boolean checkTerminalWithSameEFDocSeriesExists(FiscalDocumentSeries_BR _documentSeries)
    {
        RetailTerminalTable retailTerminalTable;

        select firstOnly RecId, terminalId
            from retailTerminalTable
            where  retailTerminalTable.StoreRecId == this.retailTerminalTableValidate.StoreRecId
                && retailTerminalTable.FiscalDocumentSeriesEFDoc == _documentSeries
                && retailTerminalTable.RecId != this.retailTerminalTableValidate.RecId;

        if (retailTerminalTable)
        {
            return checkFailed(strFmt("@Brazil_Retail:NFeSeriesAlreadyUsedValidationError", retailTerminalTable.terminalId));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>