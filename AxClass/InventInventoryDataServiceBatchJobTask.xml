<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceBatchJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryDataServiceBatchJobTask
{
    RecId           minRecId;
    RecId           maxRecId;
    boolean         shouldSyncDim9;
    boolean         shouldSyncDim10;
    boolean         isPartitionByProductIdForDiagTool;

    InventInventoryDataServiceJobTaskType   jobTaskType;
    internal InventInstrumentationLogger    logger;

    #DEFINE.CurrentVersion(3)
    
    #LOCALMACRO.CurrentList
        minRecId,
        maxRecId,
        shouldSyncDim9,
        shouldSyncDim10,
        jobTaskType,
        isPartitionByProductIdForDiagTool
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    internal container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    internal boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packed;
                break;
    
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinRecId</Name>
				<Source><![CDATA[
    internal Recid parmMinRecId(RecId _minRecId = minRecId)
    {
        minRecId = _minRecId;
        return minRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxRecId</Name>
				<Source><![CDATA[
    internal Recid parmMaxRecId(RecId _maxRecId = maxRecId)
    {
        maxRecId = _maxRecId;
        return maxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldSyncDim9</Name>
				<Source><![CDATA[
    internal boolean parmShouldSyncDim9(boolean _shouldSyncDim9 = shouldSyncDim9)
    {
        shouldSyncDim9 = _shouldSyncDim9;
        return shouldSyncDim9;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldSyncDim10</Name>
				<Source><![CDATA[
    internal boolean parmShouldSyncDim10(boolean _shouldSyncDim10 = shouldSyncDim10)
    {
        shouldSyncDim10 = _shouldSyncDim10;
        return shouldSyncDim10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobTaskType</Name>
				<Source><![CDATA[
    internal InventInventoryDataServiceJobTaskType parmJobTaskType(InventInventoryDataServiceJobTaskType _jobTaskType = jobTaskType)
    {
        jobTaskType = _jobTaskType;
        return jobTaskType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmisPartitionByProductIdForDiagTool</Name>
				<Source><![CDATA[
    internal boolean parmisPartitionByProductIdForDiagTool(boolean _isPartitionByProductIdForDiagTool = isPartitionByProductIdForDiagTool)
    {
        isPartitionByProductIdForDiagTool = _isPartitionByProductIdForDiagTool;
        return isPartitionByProductIdForDiagTool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceBatchJobTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceBatchJobTask construct()
    {
        return new InventInventoryDataServiceBatchJobTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        // do nothing in base class.
        System.Threading.Tasks.Task threadTask;
        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        // do nothing in base class.
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceBatchJobTask create(RecId minRecId, RecId maxRecId, InventInventoryDataServiceJobTaskType taskType, boolean _isPartitionByProductIdForDiagTool = false)
    {
        InventInventoryDataServiceBatchJobTask batchJobTask;

        switch(taskType)
        {
            case InventInventoryDataServiceJobTaskType::OnHandChangeSchedule:
                batchJobTask = new InventInventoryDataServiceOnhandChangeScheduleBatchJobTask();
                break;
            case InventInventoryDataServiceJobTaskType::InventSum:
                batchJobTask = new InventInventoryDataServiceInventSumBatchJobTask();
                break;
            case InventInventoryDataServiceJobTaskType::WHSInventReserve:
                batchJobTask = new InventInventoryDataServiceWhsInventReserveBatchJobTask();
                break;
            case InventInventoryDataServiceJobTaskType::SoftReserve:
                batchJobTask = new InventInventoryDataServiceSoftReserveBatchJobTask();
                break;
            case InventInventoryDataServiceJobTaskType::IV_Adjustment:
                batchJobTask = new InventInventoryDataServiceAdjustmentBatchJobTask();
                break;
            case InventInventoryDataServiceJobTaskType::OnHandDiagnose:
                batchJobTask = new InventInventoryDataServiceOnhandDiagnosticBatchJobTask();
                break;
            case InventInventoryDataServiceJobTaskType::InventJournalTransStatus:
                batchJobTask = new InventInventoryDataServiceJournalTransStatusUpdateJobTask();
                break;
            default:
                throw error("@SCM:InventInventoryDataServiceWrongJobTaskTypeError");
        }

        batchJobTask.parmMinRecId(minRecId);
        batchJobTask.parmMaxRecId(maxRecId);

        boolean shouldSyncDim9 = InventInventoryDataServiceFeature::shouldSyncInventDimension(fieldnum(InventDim, InventDimension9));
        boolean shouldSyncDim10 = InventInventoryDataServiceFeature::shouldSyncInventDimension(fieldnum(InventDim, InventDimension10));
        
        batchJobTask.parmShouldSyncDim9(shouldSyncDim9);
        batchJobTask.parmShouldSyncDim10(shouldSyncDim10);
        batchJobTask.parmJobTaskType(taskType);
        batchJobTask.parmisPartitionByProductIdForDiagTool(_isPartitionByProductIdForDiagTool);

        return batchJobTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertResToMap</Name>
				<Source><![CDATA[
    protected void insertResToMap(Map resMap, Newtonsoft.Json.Linq.JArray resArray, str resStatus)
    {
        for (int i = 0; i < resArray.Count; i++)
        {
            Newtonsoft.Json.Linq.JObject resObj = resArray.get_item(i);
            Newtonsoft.Json.Linq.JValue inventSumId = resObj.GetValue('inventSumId');
            Newtonsoft.Json.Linq.JValue resMessage = resObj.GetValue('message');
            Newtonsoft.Json.Linq.JObject offsetEventResponses = resObj.GetValue('onHandOffsetEventResponses');
            resMap.insert(inventSumId.Value, [resStatus, resMessage.Value, offsetEventResponses]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessInventSumQueue</Name>
				<Source><![CDATA[
    [SysObsolete("Moved to class InventInventoryDataServiceInventSumBatchJobTask", false, 20\12\2023)]
    public void runProcessInventSumQueue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessWHSQueue</Name>
				<Source><![CDATA[
    [SysObsolete("Moved to class InventInventoryDataServiceWhsInventReserveBatchJobTask", false, 20\12\2023)]
    public void runProcessWHSQueue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessSoftReserveQueue</Name>
				<Source><![CDATA[
    [SysObsolete("Moved to class InventInventoryDataServiceSoftReserveBatchJobTask", false, 20\12\2023)]
    public void runProcessSoftReserveQueue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessAdjustmentQueue</Name>
				<Source><![CDATA[
    [SysObsolete("Moved to class InventInventoryDataServiceAdjustmentBatchJobTask", false, 20\12\2023)]
    public void runProcessAdjustmentQueue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessOnHandDiagnoseQueue</Name>
				<Source><![CDATA[
    [SysObsolete("Moved to class InventInventoryDataServiceOnhandDiagnosticBatchJobTask", false, 20\12\2023)]
    public void runProcessOnHandDiagnoseQueue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformInventSum</Name>
				<Source><![CDATA[
    // Keep in base class as customers have already extended this method.
    public InventOnHandChangeEvent transformInventSum(InventSum inventSum, RecId inventSumQueueRecId, List reserveOffsetList)
    {
        var changeEvent = InventOnHandChangeEvent::buildFromInventSum(inventSum, inventSumQueueRecId);

        changeEvent.parmReserveOffset(reserveOffsetList);
        return changeEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformWHSInventReserve</Name>
				<Source><![CDATA[
    // Keep in base class as customers have already extended this method.
    public InventOnHandChangeEvent_WHS transformWHSInventReserve(WHSInventReserve whsInventReserve, RecId whsInventReserveQueueRecId, List reserveOffsetList)
    {
        var dimensions = new InventOnHandChangeEventDimensionSet_WHS();
        dimensions.parmConfigId(whsInventReserve.ConfigId);
        dimensions.parmInventSizeId(whsInventReserve.InventSizeId);
        dimensions.parmInventColorId(whsInventReserve.InventColorId);
        dimensions.parmInventStyleId(whsInventReserve.InventStyleId);
        dimensions.parmInventSiteId(whsInventReserve.InventSiteId);
        dimensions.parmInventLocationId(whsInventReserve.InventLocationId);
        dimensions.parmInventBatchId(whsInventReserve.InventBatchId);
        dimensions.parmWMSLocationId(whsInventReserve.wmsLocationId);
        dimensions.parmInventSerialId(whsInventReserve.InventSerialId);
        dimensions.parmLicensePlateId(whsInventReserve.LicensePlateId);
        dimensions.parmInventStatusId(whsInventReserve.InventStatusId);
        dimensions.parmInventDimension1(whsInventReserve.InventDimension1);
        dimensions.parmInventDimension2(whsInventReserve.InventDimension2);
        dimensions.parmInventDimension3(whsInventReserve.InventDimension3);
        dimensions.parmInventDimension4(whsInventReserve.InventDimension4);
        dimensions.parmInventDimension5(whsInventReserve.InventDimension5);
        dimensions.parmInventDimension6(whsInventReserve.InventDimension6);
        dimensions.parmInventDimension7(whsInventReserve.InventDimension7);
        dimensions.parmInventDimension8(whsInventReserve.InventDimension8);
        if (shouldSyncDim9)
        {
            dimensions.parmInventDimension9(any2Str(whsInventReserve.InventDimension9));
        }
        if (shouldSyncDim10)
        {
            dimensions.parmInventDimension10(any2Str(whsInventReserve.InventDimension10));
        }
        dimensions.parmInventVersionId(whsInventReserve.InventVersionId);
        dimensions.parmInventDimension11(whsInventReserve.InventDimension11);
        dimensions.parmInventDimension12(whsInventReserve.InventDimension12);

        var modifiers = new InventOnHandChangeEventModifiers_WHS();
        modifiers.parmAvailOrdered(whsInventReserve.AvailOrdered);
        modifiers.parmAvailPhysical(whsInventReserve.AvailPhysical);
        modifiers.parmReservOrdered(whsInventReserve.ReservOrdered);
        modifiers.parmReservPhysical(whsInventReserve.ReservPhysical);

        var quantities = new InventOnHandChangeEventQuantities_WHS();
        quantities.parmFnoModifiers(modifiers);

        var changeEvent = new InventOnHandChangeEvent_WHS();
        changeEvent.parmQuantities(quantities);
        changeEvent.parmId(int642Str(whsInventReserveQueueRecId));
        changeEvent.parmOrganizationId(whsInventReserve.DataAreaId);
        changeEvent.parmDimensionSet(dimensions);
        changeEvent.parmProductId(whsInventReserve.ItemId);
        changeEvent.parmReserveOffset(reserveOffsetList);

        changeEvent.parmInventDimId(whsInventReserve.InventDimId);
        changeEvent.parmParentInventDimId(whsInventReserve.ParentInventDimId);
        changeEvent.parmHierarchyLevel(whsInventReserve.HierarchyLevel);

        return changeEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>