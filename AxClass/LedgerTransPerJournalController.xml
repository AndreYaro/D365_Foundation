<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransPerJournalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerTransPerJournalController</c> class is the controller class for the
///    <c>LedgerTransPerJournalDP</c> SRS Report.
/// </summary>
public class LedgerTransPerJournalController extends SrsReportRunController implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        #ISOCountryRegionCodes
        LedgerTransPerJournalContract  contract;

        contract = this.parmReportContract().parmRdpContract() as LedgerTransPerJournalContract;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
            contract.parmDisplayDescription(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets default parameter values before the user is prompted for input.
    /// </summary>
    [Wrappable(false)]
    protected void prePromptModifyContract()
    {
        super();

        LedgerTransPerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerTransPerJournalContract;

        if (contract.parmJournalContext() == false)
        {
            if (!contract.parmFromDate())
            {
                // Set the default value for the From date to the first day of the current fiscal period. Apply the default value.
                contract.parmFromDate(FiscalCalendars::findFirstDayOfMonth(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            }

            if (!contract.parmToDate())
            {
                // Set the default value for the To date to the last day of the current fiscal period. Apply the default value.
                contract.parmToDate(FiscalCalendars::findLastDayOfMonth(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the SRS Report query range based on the caller.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> object.
    /// </param>
    /// <param name="_query">
    ///    The <c>Controller</c> object.
    /// </param>
    public void setRange(Args _args, Query _query)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange qbr;
        JournalId journalNum;
        LedgerEntryJournal ledgerEntryJournal;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        if (_args && _args.dataset())
        {
            switch (_args.dataset())
            {
                case tablenum(LedgerEntryJournal) :
                    ledgerEntryJournal = _args.record() as LedgerEntryJournal;
                    journalNum  = ledgerEntryJournal.JournalNumber;
                    break;

                case tablenum(LedgerJournalTrans) :
                    ledgerJournalTrans = _args.record() as LedgerJournalTrans;
                    journalNum = ledgerJournalTrans.JournalNum;
                    break;

                case tablenum(LedgerJournalTable) :
                    ledgerJournalTable = _args.record() as LedgerJournalTable;
                    journalNum = ledgerJournalTable.JournalNum;
                    break;
            }
        }

        LedgerTransPerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerTransPerJournalContract;

        // Only set the journal number range if we found a value for journal number because this report can also be run from the GL Area page.
        // Setting a blank journal number range in that case would clear out the previous value provided by the user
        if (journalNum != '')
        {
            qbds = _query.dataSourceTable(tablenum(LedgerEntryJournal));

            qbr = qbds.findRange(fieldname2id(tablenum(LedgerEntryJournal),fieldstr(LedgerEntryJournal, JournalNumber)));

            if (!qbr)
            {
                qbr = qbds.addRange(fieldnum(LedgerEntryJournal, JournalNumber));
            }
            qbr.value(journalNum);

            // If the report is bound to a Journal, set the report contract journal context parameter value which is used to
            // enforce required date parameters on the report dialog.
            contract.parmJournalContext(true);
            contract.parmFromDate(dateNull());
            contract.parmToDate(dateNull());
        }
        else
        {
            contract.parmJournalContext(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTransPerJournalController controller = new LedgerTransPerJournalController();

        controller.parmReportName(ssrsReportStr(LedgerTransPerJournal, Report));
        controller.setRange(_args, controller.parmReportContract().parmQueryContracts().lookup(controller.getFirstQueryContractKey()));
        controller.parmArgs(_args);
        controller.parmShowDialog(true);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>