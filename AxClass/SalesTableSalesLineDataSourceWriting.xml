<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableSalesLineDataSourceWriting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableSalesLineDataSourceWriting</c> class is used to perform writing to the <c>SalesLine</c> data source.
/// </summary>
public class SalesTableSalesLineDataSourceWriting implements KittingIFormHandlerProvider
{
    protected SalesLine salesLine;

    private KittingIFormHandler_Sales kittingFormHandler;
    
    private SalesParameters salesParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSalesParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setSalesParameters(SalesParameters _salesParameters)
    {
        salesParameters = _salesParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingFormHandler</Name>
				<Source><![CDATA[
    public KittingIFormHandler kittingFormHandler()
    {
        return kittingFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSetFormHandler</Name>
				<Source><![CDATA[
    public void kittingSetFormHandler(KittingIFormHandler _formHandler)
    {
        kittingFormHandler = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()) ? _formHandler : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesTableSalesLineDataSourceWriting</c> class with a sales line.
    /// </summary>
    /// <param name = "_salesLine">A sales line to be used for initializing the <c>SalesTableSalesLineDataSourceWriting</c> instance.</param>
    /// <returns>An instance of the <c>SalesTableSalesLineDataSourceWriting</c>.</returns>
    public static SalesTableSalesLineDataSourceWriting newFromSalesLine(SalesLine _salesLine)
    {
        SalesTableSalesLineDataSourceWriting salesTableSalesLineDataSourceWriting = new SalesTableSalesLineDataSourceWriting();
        salesTableSalesLineDataSourceWriting.salesLine = _salesLine;

        return salesTableSalesLineDataSourceWriting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPriceBeenChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales line price has been changed.
    /// </summary>
    /// <returns>true if any component of the price has been changed; otherwise, false.</returns>
    public boolean hasPriceBeenChanged()
    {
        boolean priceHasBeenChanged = false;

        if (salesLine.orig().SalesPrice         != salesLine.SalesPrice
                || salesLine.orig().LineDisc    != salesLine.LineDisc
                || salesLine.orig().LinePercent != salesLine.LinePercent
                || salesLine.orig().PriceUnit   != salesLine.PriceUnit
                || salesLine.orig().SalesMarkup != salesLine.SalesMarkup)
        {
            priceHasBeenChanged = true;
        }

        return priceHasBeenChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineContinuityParentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates continuity data of the <c>SalesLine</c> instance, in case it is a continuity parent.
    /// </summary>
    /// <param name="_mcrCallCenterEnabled">true if MCR call center is enabled; otherwise, false.</param>
    /// <param name="_mcrSalesLine">An MCR sales line.</param>
    /// <returns>An MCR invent instance, related to the <c>SalesLine</c> instance and containing continuity data.</returns>
    public MCRInventTable updateSalesLineContinuityParentData(boolean _mcrCallCenterEnabled, MCRSalesLine _mcrSalesLine)
    {
        // Find if an item is set up as a continuity parent
        MCRInventTable mcrInventTableLocal;
        if (_mcrCallCenterEnabled)
        {
            mcrInventTableLocal = MCRInventTable::findByItemId(salesLine.ItemId);
            if (mcrInventTableLocal.ContinuityScheduleId)
            {
                _mcrSalesLine.ContinuityScheduleId = mcrInventTableLocal.ContinuityScheduleId;
                _mcrSalesLine.LineType = MCRLineType::ContinuityParent;
            }
        }

        return mcrInventTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSaleLineInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates invent dim id for the <c>SalesLine</c> instance.
    /// </summary>
    /// <param name="_inventDim">An inventory dimension, to be linked to the current sales line.</param>
    public void updateSaleLineInventDimId(InventDim _inventDim)
    {
        salesLine.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax group for the <c>SalesLine</c> instance.
    /// </summary>
    /// <param name="_copyTaxGroupToMarkupTrans">A dialog button that indicates which miscellaneous charges to update.</param>
    public void updateSalesLineTaxGroup(DialogButton _copyTaxGroupToMarkupTrans)
    {
        MarkupTrans::updateTaxGroup(
            salesLine.TableId,
            salesLine.RecId,
            salesLine.TaxGroup,
            salesLine.orig().TaxGroup,
            _copyTaxGroupToMarkupTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineOverrideSalesTax</Name>
				<Source><![CDATA[
    internal void updateSalesLineOverrideSalesTax(DialogButton _copyOverrideSalesTaxToMarkupTrans)
    {
        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            MarkupTrans::updateOverrideSalesTax(
                salesLine.TableId,
                salesLine.RecId,
                salesLine.OverrideSalesTax,
                _copyOverrideSalesTaxToMarkupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markToSyncLinkedPurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the sales line that the linked purchase order line has to be synced.
    /// </summary>
    public void markToSyncLinkedPurchaseOrderLine()
    {
        if (this.mustUpdateLinkedPurchaseOrderLine())
        {
            salesLine.SyncPurchLine = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLinkedPurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms if the linked purchase order line must be updated.
    /// </summary>
    /// <returns>true if the linked purchase order line must be updated; otherwise, false.</returns>
    private boolean mustUpdateLinkedPurchaseOrderLine()
    {
        if (salesLine.InventRefTransId
            && salesLine.InventRefType == InventRefType::Purch
            && salesLine.DeliveryType == TradeLineDlvType::None
            && salesLine.SalesQty != salesLine.orig().SalesQty
            && !PurchTable::find(salesLine.InventRefId).InterCompanyOrder)  // For intercompany orders we always sync the quantities, so don't ask.
        {
            PurchLine purchLine = PurchLine::findInventTransId(salesLine.InventRefTransId);

            if (Box::yesNo(strFmt("@SCM:SalesLineQtyChangeUpdateLinkedPurchLine", purchLine.PurchId, purchLine.LineNumber), DialogButton::Yes))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToSalesLineDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the sales line drop shipment in case it has already been created.
    /// </summary>
    /// <param name="_salesTable">An instance of the <c>SalesTable</c>.</param>
    /// <param name="_mcrSalesLineDropShipment">An order line.</param>
    /// <param name="_mcrSalesLineDropShipment_ds">The form data source for an instance of the <c>MCRSalesLineDropShipment</c>.</param>
    public void copyToSalesLineDropShipment(SalesTable _salesTable, MCRSalesLineDropShipment _mcrSalesLineDropShipment, FormDataSource _mcrSalesLineDropShipment_ds)
    {
        if (_salesTable.InterCompanyAutoCreateOrders
                && _salesTable.InterCompanyDirectDelivery
                && !_mcrSalesLineDropShipment.RecId)
        {
            MCRSalesLineDropShipment mcrSalesLineDropShipmentLocal = MCRSalesLineDropShipment::findSalesLine(SalesLine.RecId);
            if (mcrSalesLineDropShipmentLocal)
            {
                _mcrSalesLineDropShipment.data(mcrSalesLineDropShipmentLocal);
                _mcrSalesLineDropShipment_ds.setCurrent();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the instance of <c>WHSSalesLine</c> based on sales line invent trans id.
    /// </summary>
    /// <param name="_whsSalesLine">An instance of the <c>WHSSalesLine</c> with additional sales line fields.</param>
    public void updateWHSSalesLine(WHSSalesLine _whsSalesLine)
    {
        if (WHSInventEnabled::exist(salesLine.ItemId) || TMSInventEnabled::exist(salesLine.ItemId))
        {
            WHSSalesLine newWHSSalesLine = WHSSalesLine::find(salesLine.InventTransId);
            if (!newWHSSalesLine.RecId)
            {
                _whsSalesLine.InventTransId = salesLine.InventTransId;
                _whsSalesLine.write();
            }
            else
            {
                _whsSalesLine.data(newWHSSalesLine);
                _whsSalesLine.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDirectDeliveryPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related direct delivery purchase order.
    /// </summary>
    /// <param name="_mcrSalesLineDropShipment">An order line.</param>
    /// <param name="_salesLine_ds">The form data source for an instance of the <c>SalesLine</c>.</param>
    /// <param name = "_mcrDropShipmentOrigValue">The original <c>MCRDropShipment</c> value retrieved from the original buffer.</param>
    /// <remarks>
    /// This is used for cases when user un-checks the drop shipment flag.
    /// </remarks>
    private void deleteDirectDeliveryPurchaseOrder(McrSalesLineDropShipment _mcrSalesLineDropShipment, FormDataSource _salesLine_ds, MCRDropShipment _mcrDropShipmentOrigValue = NoYes::No)
    {
        if (salesLine
                && _mcrSalesLineDropShipment
                && !_mcrSalesLineDropShipment.DropShipment
                && _mcrDropShipmentOrigValue)
        {
            MCRSalesLineDropShipment::deleteRelatedPurchaseOrderLine(salesLine.RecId);
            _salesLine_ds.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the linked retail sales line.
    /// </summary>
    /// <param name="_salesTable">An instance of the <c>SalesTable</c>.</param>
    /// <param name="_retailSalesLine">A retail service line.</param>
    [SysObsolete('Do not use this method to avoid multiple calls to form data source Salesline by framework.', false, 15\07\2021)]
    public void updateRetailSalesLine(SalesTable _salesTable, RetailSalesLine _retailSalesLine)
    {
        SalesTable::mcrUpdatePriceOverrideOnHold(_salesTable.SalesId);

        RetailSalesLine retailSalesLineLocal = RetailSalesLine::findBySalesLine(salesLine.RecId, true);

        if (retailSalesLineLocal)
        {
            ttsbegin;
            retailSalesLineLocal.OriginalPrice = _retailSalesLine.OriginalPrice;
            //retailSalesLineLocal.IsPriceOverridden = _retailSalesLine.IsPriceOverridden;
            retailSalesLineLocal.PriceOverrideReasonCode = _retailSalesLine.PriceOverrideReasonCode;
            retailSalesLineLocal.update();
            ttscommit;
            
            salesLine.retailPackRetailSalesLine(retailSalesLineLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForeignTradeCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and saves sales line foreign trade category.
    /// </summary>
    /// <param name="_salesLineForeignTradeCategory">A sales line foreign trade category.</param>
    public void updateForeignTradeCategory(SalesLineForeignTradeCategory _salesLineForeignTradeCategory)
    {
        if (salesLine.isCategoryBased() && !_salesLineForeignTradeCategory.SalesLineInventTransId)
        {
            _salesLineForeignTradeCategory.initFromSalesLine(salesLine);
            _salesLineForeignTradeCategory.write();
            salesLine.type().updatePendingRegistrationsNonStocked(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryMarkingForCreditNoteTransaction_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory marking for the current credit note transaction of the instance of <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_origSalesQuantity">The original sales quantity.</param>
    public void updateInventoryMarkingForCreditNoteTransaction_PL(SalesQty _origSalesQuantity)
    {
        salesLine.updateCreditNoteMarking_PL(_origSalesQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsContinuityParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the sales line as a continuity.
    /// </summary>
    public void markAsContinuityParent()
    {
        salesLine.mcrCreateContinuityCust();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the sales line inventory dimension data.
    /// </summary>
    /// <param name = "_inventDim">An Inventory dimension.</param>
    /// <param name = "_inventDim_ds">The form data source for an instance of the <c>InventDim</c>.</param>
    public void copyToInventDim(InventDim _inventDim, FormDataSource _inventDim_ds)
    {
        if (salesLine.InventDimId != _inventDim.InventDimId)
        {
            _inventDim.data(InventDim::find(salesLine.InventDimId));
            _inventDim_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates confirmed dates based on UI strategy.
    /// </summary>
    /// <param name = "_salesTable">An instance of the <c>SalesTable</c>.</param>
    /// <param name = "_salesLine_ds">The form data source for an instance of the <c>SalesLine</c>.</param>
    public void calculateConfirmedDates(SalesTable _salesTable, FormDataSource _salesLine_ds)
    {
        if (salesLine.salesTable().InterCompanyDirectDelivery && salesLine.isInterCompanyOriginalLine())
        {
            SalesLine intercompanySalesLine = salesLine.interCompanySalesLine();
            if (intercompanySalesLine && intercompanySalesLine.isDeliveryDateControlTypeClassicCTP())
            {
                changecompany(intercompanySalesLine.DataAreaId)
                {
                    intercompanySalesLine.selectForUpdate(true);
                    SalesLine::setConfirmedDatesUsingUIStrategy(intercompanySalesLine, intercompanySalesLine.salesTable(), true);
                }
            }
        }

        else
        {
            if (SalesLine::setConfirmedDatesUsingUIStrategy(salesLine, _salesTable, true))
            {
                _salesLine_ds.reread();
                _salesLine_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes delivery schedule for the sales line.
    /// </summary>
    /// <param name = "_salesTableForm">An instance of the <c>SalesTableForm</c>, used to update the delivery schedule.</param>
    public void refreshDeliverySchedule(SalesTableForm _salesTableForm)
    {
        boolean agreementWasChanged = (salesLine.MatchingAgreementLine != salesLine.orig().MatchingAgreementLine);
        _salesTableForm.refreshDeliverySchedule(salesLine, agreementWasChanged && !salesLine.MatchingAgreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesLineDataSourceForIntercompanyOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes query on sales line data source in case current order is an intercompany order.
    /// </summary>
    /// <param name = "_salesTable">An instance of the <c>SalesTable</c>.</param>
    /// <param name = "_salesLine_ds">The form data source for an instance of the <c>SalesLine</c>.</param>
    public void querySalesLineDataSourceForIntercompanyOrder(SalesTable _salesTable, FormDataSource _salesLine_ds)
    {
        if (PurchTable::find(salesLine.InventRefId).InterCompanyOrder
            || _salesTable.InterCompanyOrder)
        {       
            this.retrieveSalesParameters();

            if (salesParameters.IntercompanyDefaultSalesLineSorting)
            {                
                _salesLine_ds.reread();   
                _salesLine_ds.refresh();
            }
            else
            {           
                SalesLine localSalesLine;
                localSalesLine.data(salesLine.data());

                _salesLine_ds.research();
                _salesLine_ds.positionToRecord(localSalesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSalesParameters</Name>
				<Source><![CDATA[
    private void retrieveSalesParameters()
    {
        if (!salesParameters)
        {
            salesParameters = SalesParameters::find();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchSaleLineDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-queries the sales lines (discounts may have changed for other lines) if using retail pricing.
    /// </summary>
    /// <param name="_salesLine_ds">The form data source for an instance of the <c>SalesLine</c>.</param>
    public void researchSaleLineDataSource(FormDataSource _salesLine_ds)
    {
        if (this.shouldResearchSaleLineDataSource(_salesLine_ds))
        {
            if (RetailPricingKillSwitch::disableResearchTrueForSalesLineRefresh())
            {
                SalesLine salesLineHolder;
                salesLineHolder.RecId = salesLine.RecId;
                _salesLine_ds.research();
                _salesLine_ds.positionToRecord(salesLineHolder);
            }
            else
            {
                _salesLine_ds.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldResearchSaleLineDataSourceForRetailPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether sales lines must be re-queried for retail pricing.
    /// </summary>
    /// <param name="_salesLine_ds">The form data source for an instance of the <c>SalesLine</c>.</param>
    /// <returns>true if re-query should be performed; otherwise, false.</returns>
    protected boolean shouldResearchSaleLineDataSourceForRetailPricing()
    {
        return RetailParameters::isRetailEnabledAndInUse()
            && !RetailParameters::find().EnableDelayedPriceAndDiscountCalculation
            && RetailPricingEngine::useRetailPricing(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldResearchSaleLineDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether sales lines must be re-queried.
    /// </summary>
    /// <param name="_salesLine_ds">The form data source for an instance of the <c>SalesLine</c>.</param>
    /// <returns>true if re-query should be performed; otherwise, false.</returns>
    protected boolean shouldResearchSaleLineDataSource(FormDataSource _salesLine_ds)
    {
        return this.shouldResearchSaleLineDataSourceForRetailPricing()
            || (kittingFormHandler && (kittingFormHandler.mustResearch() || kittingFormHandler.isKit()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForAdditionalSalesLinesDueToUpOrCrossSellItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes new form to allow the addition of SalesLines.
    /// </summary>
    /// <param name="_salesLine_ds">The form data source for an instance of the <c>SalesLine</c>.</param>
    public void promptForAdditionalSalesLinesDueToUpOrCrossSellItems (FormDataSource _salesLine_ds)
    {
        MCRUpSellRule mcrUpSellRule = MCRUpSellItem::getRuleByItemId(salesLine.ItemId);

        if (mcrUpSellRule == '' || MCRUpSellCrossSell::executeRule(mcrUpSellRule, salesLine.RecId))
        {
            TmpMCRUpSellOrderEntry::mcrJumpRef(salesLine);

            // Recalculate the Retail Discounts.
            salesLine.updateRetailDiscounts();

            // Finds the current selected sales line.
            SalesLine salesLineFind = SalesLine::findInventTransId(salesLine.InventTransId);

            // Syncs sales table with the db.
            _salesLine_ds.research();

            // Updates table UI.
            _salesLine_ds.reread();

            // Finds the current selected sales line.
            _salesLine_ds.positionToRecord(salesLineFind);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>