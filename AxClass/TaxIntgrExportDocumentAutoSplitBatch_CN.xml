<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentAutoSplitBatch_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgrExportBatch_CN</c> class is run base for split.
/// </summary>
class TaxIntgrExportDocumentAutoSplitBatch_CN extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;
    #DEFINE.CurrentVersion(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyMandatoryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the hidden range.
    /// </summary>
    protected void applyMandatoryRange()
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        dataSource = queryRun.query().dataSourceTable(tableNum(TaxIntgrExportDocument_CN));
        if (dataSource)
        {
            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, IsExported));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(NoYes::No));

            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, IsOverAmountLimit));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(NoYes::Yes));
        }
        dataSource = queryRun.query().dataSourceTable(tableNum(TaxIntgrExportDocumentOperation_CN));
        if (dataSource)
        {
            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocumentOperation_CN, OperationType));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(TaxIntgrExportDocumentOperationType_CN::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the query.
    /// </summary>
    protected void initializeQueryBuild()
    {
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(TaxIntgrExportDocumentSource_CN));
        queryBuildDataSource.addRange(fieldNum(TaxIntgrExportDocumentSource_CN, InvoiceId));
        queryBuildDataSource.addRange(fieldNum(TaxIntgrExportDocumentSource_CN, ProjInvoiceProjId));
        queryBuildDataSource.addRange(fieldNum(TaxIntgrExportDocumentSource_CN, InvoiceAccount));
        queryBuildDataSource.addRange(fieldNum(TaxIntgrExportDocumentSource_CN, InvoiceDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        Query queryLocal;

        super();

        queryLocal = new query(queryStr(TaxIntgrExportDocumentSourceView_CN));
        queryRun  = new QueryRun(queryLocal);
        this.initializeQueryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run actual split.
    /// </summary>
    public void run()
    {
        this.applyMandatoryRange();

        TaxIntgrExportDocumentAutoSplitBatch_CN::doAutoSplit(queryRun.query().pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add select button for query and show the filter value on the dialog.
    /// </summary>
    /// <returns>
    /// Return true.
    /// </returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container packedQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQueryRun] = _packedClass;
                //Re-initialize the queryRun object from the packed queryRun.
                queryRun = new QueryRun(packedQueryRun);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>TaxIntgrExportDocumentAutoSplitBatch_CN</c>
    /// </summary>
    /// <returns>
    /// An instance of <c>TaxIntgrExportDocumentAutoSplitBatch_CN</c>.
    /// </returns>
    public static TaxIntgrExportDocumentAutoSplitBatch_CN construct()
    {
        return new TaxIntgrExportDocumentAutoSplitBatch_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAutoSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfroms the actual split.
    /// </summary>
    /// <param name="_queryPack">
    /// The query pack.
    /// </param>
    private static void doAutoSplit(container _queryPack)
    {
        SysOperationProgress            progressLocal;
        #avifiles
        Query                           querySource;
        Map                             mapOfsource;
        MapEnumerator                   enumerator;
        TaxIntgrExportDocumentSource_CN curExportDocumentSource;

        querySource = new Query(_queryPack);
        mapOfsource = TaxIntgrExportDocumentAutoSplitBatch_CN::getMapOfSources(querySource);

        progressLocal = SysOperationProgress::newGeneral(#AviFormLetter, "@SYS10133", mapOfsource.elements());
        enumerator = mapOfsource.getEnumerator();
        while (enumerator.moveNext())
        {
            [curExportDocumentSource] = enumerator.currentValue();
            progressLocal.setText(curExportDocumentSource.InvoiceId);
            TaxIntgrExportDocumentSplit_CN::splitExportDocumentAuto(enumerator.currentKey(), true);
            progressLocal.incCount();
        }

        info(strFmt("@SYS4002224", mapOfsource.elements()));

        if (progressLocal)
        {
            progressLocal.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapOfSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map with the source categorized by key.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <returns>
    /// The map with the source categorized by key.
    /// </returns>
    protected static Map getMapOfSources(Query _query)
    {
        Map                                     mapOfsource;
        QueryRun                                queryRun;
        TaxIntgrExportDocumentSource_CN         curExportDocumentSource;

        queryRun = new QueryRun(_query);
        mapOfsource = new Map(Types::Int64, Types::Container);
        while (queryRun.next())
        {
            curExportDocumentSource = queryRun.get(curExportDocumentSource.TableId);
            if (!mapOfsource.exists(curExportDocumentSource.RecId))
            {
                mapOfsource.insert(curExportDocumentSource.RecId, [curExportDocumentSource]);
            }
        }

        return mapOfsource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TaxIntgrExportDocumentAutoSplitBatch_CN splitBatch;

        splitBatch = TaxIntgrExportDocumentAutoSplitBatch_CN::construct();

        if (splitBatch.prompt())
        {
            splitBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>