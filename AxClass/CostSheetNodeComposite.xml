<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeComposite</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetNodeComposite</c> class represents a costing sheet node that can have subnodes.
/// </summary>
abstract class CostSheetNodeComposite extends CostSheetNode
{
    List    subnodeList;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSubnode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a subnode to the current costing sheet node.
    /// </summary>
    /// <param name="_node">
    ///    The node to add.
    /// </param>
    /// <param name="_insertAfterNodeId">
    ///    The identifier of the node to position the new sub-node after; optional.
    /// </param>
    public void addSubnode(
        CostSheetNode      _node,
        CostSheetNodeId    _insertAfterNodeId = 0
        )
    {
        if (_insertAfterNodeId == 0)
        {
            _node.setParentNodeId(nodeId);
            subnodeList.addEnd(_node);
        }
        else
        {
            if (_insertAfterNodeId != this.getNodeId())
            {
                List packedSubnodeList = this.getPackedSubnodeList();
                ListEnumerator packedSubnodeEnumerator = packedSubnodeList.getEnumerator();
                subnodeList = new List(Types::Class);
                while (packedSubnodeEnumerator.moveNext())
                {
                    CostSheetNode subnode = CostSheetNode::create(packedSubnodeEnumerator.current());
                    subnode.setParentNodeId(nodeId);
                    subnodeList.addEnd(subnode);

                    if (subnode.getNodeId() == _insertAfterNodeId)
                    {
                        _node.setParentNodeId(nodeId);
                        subnodeList.addEnd(_node);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amounts based on input data and costing sheet structure.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet object.
    /// </param>
    /// <param name="_costCalcTransData">
    ///    The <c>CostCalcTransData</c> object that has input data.
    /// </param>
    /// <returns>
    ///    A <c>CostCalcTransData</c> object.
    /// </returns>
    /// <remarks>
    ///    Every node may be in either "calculated" or "not calculated‚Äù state.The costing sheet is calculated
    ///    in one or more passes until all nodes have "calculated" status. If the node is a "leaf" (has no
    ///    sub-nodes), the <c>calcLowestLevel</c> method is called that processes the input data and marks the
    ///    node as "calculated". If the node is a composite (has sub-nodes) it is marked as "calculated" after
    ///    all its sub-nodes are "calculated".
    /// </remarks>
    public CostCalcTransData calc(
        CostSheet           _costSheet,
        CostCalcTransData   _costCalcTransData)
    {
        if (calculated)
        {
            return costCalcTransData;
        }

        super(_costSheet, _costCalcTransData);

        if (this.hasSubnodes())
        {
            calculated = this.subnodesCalculated();

            if (calculated)
            {
                return costCalcTransData;
            }

            ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
            while (subnodeEnumerator.moveNext())
            {
                CostSheetNode subnode = subnodeEnumerator.current();

                if (subnode.isCalculated() == false) // ... if subnode is still not calculated, then ...
                {
                    // ... try again ...
                    CostCalcTransData subnodeCostCalcTransData = subnode.calc(_costSheet, _costCalcTransData);
                    if (subnode.isCalculated())
                    {
                        this.getCostCalcTransData().addCostCalcTransData(subnodeCostCalcTransData);
                    }
                }
            }

            calculated = this.subnodesCalculated();

            if (calculated && this.isCostGroupWithSubnodes())
            {
                /* It may happen that _costCalcTransData contains indirect costs from lower production levels.
                In this case CostSheetNodeGroup object, representing indirect costs, should fetch those of the
                lower level after having its own "Calculation" subnodes calculated */
                this.addCalculatedCostsFromLowerLevels(_costCalcTransData);
            }
        }
        else
        {
            this.calcLowestLevel(_costSheet, _costCalcTransData);
        }

        this.updateCostGroupImpactSet(_costSheet);

        return costCalcTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveSubnode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a proposed node may be added as a sub-node.
    /// </summary>
    /// <param name="_node">
    ///    The potential sub-node.
    /// </param>
    /// <returns>
    ///    true if the potential sub-node is valid; otherwise, false.
    /// </returns>
    public boolean canHaveSubnode(CostSheetNode _node)
    {
        boolean ret = this.validSubnodeTypeSet().in(_node.getType());

        if (ret &&
            this.getType() != CostSheetNodeType::Root &&
            _node.getCostType() != CostPriceType::Undefined &&
            this.getCostType() != _node.getCostType())
        {
            ret = this.checkFailed("@SYS190018");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the instance of the composite costing sheet node can have subnodes.
    /// </summary>
    /// <returns>
    ///    true if the object can have subnodes; otherwise, false.
    /// </returns>
    public boolean canHaveSubnodes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Compares attributes and sub-node lists of two costing sheet nodes.
    /// </summary>
    /// <param name="_costSheetNode">
    ///    The costing sheet node to compare to.
    /// </param>
    /// <returns>
    ///    true if the nodes have equal attributes and lists of sub-nodes; otherwise, false.
    /// </returns>
    public boolean equal(Object _costSheetNode)
    {
        boolean ret = super(_costSheetNode);

        if (!ret)
            return ret;

        if (!SysDictClass::isEqualOrSuperclass(classIdGet(_costSheetNode), classIdGet(this)))
            return false;

        CostSheetNodeComposite costSheetNodeComposite = _costSheetNode;
        ListEnumerator subnodeToCompareEnumerator = costSheetNodeComposite.getSubnodeEnumerator();
        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            if (!subnodeToCompareEnumerator.moveNext())
            {
                return false;
            }

            CostSheetNode subnode = subnodeEnumerator.current();
            CostSheetNode subnodeToCompare = subnodeToCompareEnumerator.current();

            if (!subnode.equal(subnodeToCompare))
            {
                return false;
            }
        }

        if (subnodeToCompareEnumerator.moveNext())
        {
            return false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCostGroupImpactMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces all subnodes to fill in the impact map.
    /// </summary>
    /// <param name="_costGroupImpactMap">
    ///    The map that stores the relations between the cost group IDs and the costing sheet nodes.
    /// </param>
    public void fillCostGroupImpactMap(CostSheetCostGroupImpactMap _costGroupImpactMap)
    {
        super(_costGroupImpactMap);

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            subnode.fillCostGroupImpactMap(_costGroupImpactMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNodeIndexMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a node index map with data from sub-nodes.
    /// </summary>
    /// <param name="_costSheet">
    ///    A costing sheet object.
    /// </param>
    public void fillNodeIndexMap(CostSheet _costSheet)
    {
        super(_costSheet);

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            subnode.fillNodeIndexMap(_costSheet);
            subnode.setParentNodeId(nodeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNodeList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a list of costing sheet nodes.
    /// </summary>
    /// <param name="_nodeList">
    ///    A list to fill.
    /// </param>
    /// <param name="_nodeListType">
    ///    The type of the list.
    /// </param>
    public void fillNodeList(List _nodeList, CostSheetNodeListType _nodeListType)
    {
        super(_nodeList, _nodeListType);

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            subnode.fillNodeList(_nodeList, _nodeListType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBranchNodeIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Collects IDs of all sub-nodes.
    /// </summary>
    /// <returns>
    ///    A set with IDs of all sub-nodes that includes the ID of the composite node itself.
    /// </returns>
    public Set getBranchNodeIds()
    {
        Set allSubnodesNodeIdSet = super();

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            allSubnodesNodeIdSet = Set::union(allSubnodesNodeIdSet, subnode.getBranchNodeIds());
        }

        return allSubnodesNodeIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedSubnodeList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Composes a list of packed subnodes.
    /// </summary>
    /// <returns>
    ///    A list filled with packed subnodes.
    /// </returns>
    protected List getPackedSubnodeList()
    {
        List packedSubnodeList = new List(Types::Container);

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            packedSubnodeList.addEnd(subnode.pack());
        }

        return packedSubnodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubnodeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>ListEnumerator</c> that contains all the subnodes of this node.
    /// </summary>
    /// <returns>
    ///    A <c>ListEnumerator</c> object.
    /// </returns>
    public ListEnumerator getSubnodeEnumerator()
    {
        return subnodeList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the instance of the composite costing sheet node has subnodes.
    /// </summary>
    /// <returns>
    ///    true if the object has subnodes; otherwise, false.
    /// </returns>
    public boolean hasSubnodes()
    {
        return subnodeList ? subnodeList.elements() > 0 : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads sub-nodes from a database.
    /// </summary>
    /// <param name="_modeStrategy">
    ///    The mode in which the costing sheet is built.
    /// </param>
    protected void loadSubnodes(CostSheetModeStrategy _modeStrategy)
    {
        QueryRun queryRun = this.subnodesQueryRun(_modeStrategy);
        while (queryRun.next())
        {
            CostSheetNodeTable costSheetNodeTable = queryRun.get(tableNum(CostSheetNodeTable));
            CostSheetNode node = CostSheetNode::construct(costSheetNodeTable, nodeId, _modeStrategy);
            this.addSubnode(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>CostSheetNodeComposite</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    protected void new(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        super(_costSheetNodeTable, _parentNodeId, _modeStrategy);

        subnodeList = new List(Types::Class);
        if (_modeStrategy.mustLoadSubnodes())
        {
            this.loadSubnodes(_modeStrategy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return  [#CurrentVersion] + [this.getPackedSubnodeList().pack()] + [super(_areSurchargesPackedByParentContext)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSubnode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a node from the list of sub-nodes.
    /// </summary>
    /// <param name="_node">
    ///    A <c>CostSheetNode</c> object.
    /// </param>
    /// <returns>
    ///    A set with IDs of nodes from the whole deleted branch.
    /// </returns>
    public Set removeSubnode(CostSheetNode _node)
    {
        Set removedNodeIdSet = new Set(Types::Integer);
        removedNodeIdSet.add(_node.getNodeId());
        removedNodeIdSet = Set::union(removedNodeIdSet, _node.getBranchNodeIds());

        boolean removed = false;

        List packedSubnodeList = this.getPackedSubnodeList();
        ListEnumerator packedSubnodeEnumerator = packedSubnodeList.getEnumerator();
        subnodeList = new List(Types::Class);
        while (packedSubnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = CostSheetNode::create(packedSubnodeEnumerator.current());

            if (subnode.getNodeId() != _node.getNodeId())
            {
                subnode.setParentNodeId(nodeId);
                subnodeList.addEnd(subnode);
            }
            else
            {
                removed = true;
            }
        }

        return removed ? removedNodeIdSet : new Set(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns new IDs to the node and all its sub-nodes.
    /// </summary>
    /// <param name="_newNodeId">
    ///    The ID that will be assigned to the current node.
    /// </param>
    /// <returns>
    ///    The last node ID acquired by this costing sheet branch.
    /// </returns>
    public CostSheetNodeId resetNodeId(CostSheetNodeId _newNodeId)
    {
        super(_newNodeId);

        CostSheetNodeId lastNodeId = _newNodeId;

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            lastNodeId = subnode.resetNodeId(CostSheet::nextNodeId(lastNodeId));
        }

        return lastNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the node and all sub-nodes to the database.
    /// </summary>
    /// <param name="_costSheet">
    ///    A costing sheet object.
    /// </param>
    /// <param name="_lineNum">
    ///    The line number that should be assigned to the node.
    /// </param>
    /// <returns>
    ///    The last line number acquired by this branch.
    /// </returns>
    public Integer save(
        CostSheet   _costSheet,
        Integer     _lineNum)
    {
        Integer lineNum = super(_costSheet, _lineNum);

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            lineNum = subnode.save(_costSheet, lineNum);
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subnodesCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether all sub-nodes have the status set to calculated.
    /// </summary>
    /// <returns>
    ///    true if all sub-nodes are calculated; otherwise, false.
    /// </returns>
    protected boolean subnodesCalculated()
    {
        boolean subnodesCalculated = true;
        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodesCalculated && subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            subnodesCalculated = subnode.isCalculated() && subnodesCalculated;
        }

        return subnodesCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subnodesQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a <c>QueryRun</c> object that is used when sub-nodes from the database are retrieved.
    /// </summary>
    /// <param name="_modeStrategy">
    ///    A <c>CostSheetModeStrategy</c> object that contains identifiers of nodes to load.
    /// </param>
    /// <returns>
    ///    A <c>QueryRun</c> object.
    /// </returns>
    /// <remarks>
    ///    In order to improve performance of large costing sheets, a set of node IDs may be provided so that
    ///    calculation time will not be wasted on nodes not affected by input data.
    /// </remarks>
    protected QueryRun subnodesQueryRun(CostSheetModeStrategy _modeStrategy)
    {
        str                     nodeIdRangeValue = '';

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(CostSheetNodeTable));
        qbds.addRange(fieldNum(CostSheetNodeTable, SheetId)).value(queryValue(sheetId));
        qbds.addRange(fieldNum(CostSheetNodeTable, ParentNodeId)).value(queryValue(nodeId));

        nodeIdRangeValue = _modeStrategy.allowedNodeIdRangeValue();
        
        if (nodeIdRangeValue != '')
        {
            qbds.addRange(fieldNum(CostSheetNodeTable, NodeId)).value(nodeIdRangeValue);
        }
        else if (_modeStrategy.parmCostType() != CostPriceType::Undefined)
        {   
            qbds.addRange(fieldNum(CostSheetNodeTable, PriceType)).value(queryValue(_modeStrategy.parmCostType()));
        }

        qbds.addOrderByField(fieldNum(CostSheetNodeTable, LineNum));

        QueryRun queryRun = new QueryRun(query);
        queryRun.setCursor(_modeStrategy.getNodeCursor());

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version             version = RunBase::getVersion(_packedClass);
        container           packedSubnodePackedList;
        container           base;
        switch (version)
        {
            case #CurrentVersion:
                [version, packedSubnodePackedList, base] = _packedClass;

                boolean ret = super(base);
                if (ret)
                {
                    List packedSubnodeList = List::create(packedSubnodePackedList);
                    ListEnumerator packedSubnodeEnumerator = packedSubnodeList.getEnumerator();
                    while (packedSubnodeEnumerator.moveNext())
                    {
                        container packedSubnode = packedSubnodeEnumerator.current();
                        CostSheetNode subnode = CostSheetNode::create(packedSubnode);
                        this.addSubnode(subnode);
                    }
                }

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the costing sheet node.
    /// </summary>
    /// <param name="_costSheet">
    ///    A costing sheet instance.
    /// </param>
    /// <returns>
    ///    true if the node is valid; otherwise, false.
    /// </returns>
    public boolean validate(CostSheet _costSheet)
    {
        boolean ret = super(_costSheet);
        ret = (!this.canHaveSubnodes() && this.hasSubnodes() ? this.checkFailed("@SYS105367") : true) && ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
