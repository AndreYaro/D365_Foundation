<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcExplodeProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
ReqRefTypeFactory(ReqRefType::Production),
ReqRefTypeFactory(ReqRefType::PmfCoProduct)
]
class ReqCalcExplodeProd extends ReqCalcExplode implements BatchRetryable
{
    boolean             isPlanningItem;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        marking
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strfmt("@SYS23499",refId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteData</Name>
				<Source><![CDATA[
    public void deleteData()
    {
        ProdBOM             prodBOM;
        ReqTrans            reqTrans;

        if (   refType == ReqRefType::Production
            && refId
            && inventTransOriginId)
        {
            while select forupdate reqTrans
                where reqTrans.PlanVersion            == this.reqPlanVersionRefRecId()
                   && reqTrans.RefType                == ReqRefType::Production
                   && reqTrans.RefId                  == refId
                   && reqTrans.InventTransOrigin      == inventTransOriginId
            {
                if (deleteCoverage)
                {
                    reqTrans.deleteExplosionCoverage(reqPlanData);
                }

                reqTrans.FuturesDate = dateNull();
                reqTrans.update();
            }

            while select forupdate reqTrans
                index hint RefIdx
                where reqTrans.PlanVersion  == this.reqPlanVersionRefRecId()
                    && reqTrans.RefType   == ReqRefType::PmfCoProduct
                    && reqTrans.RefId     == refId
            {
                if (deleteCoverage)
                {
                    reqTrans.deleteExplosionCoverage(reqPlanData);
                }

                reqTrans.FuturesDate = dateNull();
                reqTrans.update();
            }

            while select forupdate prodBOM
                where prodBOM.ProdId == refId
            {
                reqTrans = prodBOM.reqTrans(this.reqPlanVersionRefRecId(), true);

                if (reqTrans.RecId)
                {
                    reqTrans.FuturesDate = dateNull();
                    reqTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///    A dialog represents rescheduling dialog, optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog(Dialog _dialog = null)
    {
        dialog = _dialog == null ? super() : _dialog;

        if (reqPlanId == ReqPlanSched::defaultDynamicId())
        {
            dialogDeleteMarking = dialog.addFieldValue(extendedtypestr(InventDeleteMarking),deleteMarking,"@SYS86123","@SYS86131");

            dialog.addGroup("@SYS86126");
            dialogAutoReserveCoverage = dialog.addFieldValue(extendedtypestr(ReqAutoReserveCoverage),autoReserveCoverage,"@SYS86123","@SYS86185");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>ReqTrans</c> records into the internal cache.
    /// </summary>
    /// <remarks>
    ///    Records in the internal cache will be coverage-planned.
    /// </remarks>
    protected void insertData()
    {
        ItemId                      itemId;
        ReqTrans                    reqTrans;
        BOMLevel                    level;
        ProdTable                   prodTable = ProdTable::find(refId);

        itemId = prodTable.ItemId;

        if (itemId)
        {
            if (!inventTransOriginId)
            {
                isPlanningItem = prodTable.inventTable().PmfProductType == PmfProductType::MainItem;
                if (!isPlanningItem)
                {
                    return;
                }
            }

            this.updateItemLock(itemId);
            this.updateReqTransUpdate(itemId);

            while select forupdate reqTrans
                where reqTrans.PlanVersion            == this.reqPlanVersionRefRecId()
                   && reqTrans.RefType                == ReqRefType::Production
                   && reqTrans.RefId                  == refId
                   && (reqTrans.InventTransOrigin     == inventTransOriginId || isPlanningItem)
            {
                if (deleteCoverage)
                {
                    reqTrans.deleteExplosionCoverage(reqPlanData);
                }

                ReqTraceLog::deleteTraceForReqTrans(reqTrans);

                this.addReqTrans2ReqTransCache(reqTrans,false);

                level = reqTrans.Level;
            }

            this.insertProdBOM(refId, deleteMarking);
            if (prodTable.ProdType == ProdType::Process)
            {
                this.insertProdCoBy(refId);
            }

            this.createReqProcessTransFilterForInventJournalReqTrans(itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoReserveCoverage</Name>
				<Source><![CDATA[
    boolean updateAutoReserveCoverage()
    {
        if (! super())
        {
            return false;
        }

        if (reqPlanId != ReqPlanSched::defaultDynamicId())
        {
            return false;
        }

        ProdTable::updateBOMLinesReservationAndMarkingFromPlan(refId, this.parmMarking(), deleteMarking, this.reqPlanVersionRefRecId());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>ReqCalcExplodeProd</c> class.
    /// </summary>
    /// <param name="_prodTable">
    ///    The production table to use.
    /// </param>
    /// <param name="_autoReserveCoverage">
    ///    The value to assign to the <c>parmAutoReserveCoverage</c> of the new <c>ReqCalcExplodeProd</c>
    ///    table.
    /// </param>
    /// <param name="_deleteCoverage">
    ///    The value to assign to the <c>parmDeleteCoverage</c> of the new <c>ReqCalcExplodeProd</c> table.
    /// </param>
    /// <param name="_deleteMarking">
    ///    The value to assign to the <c>parmDeleteMarking</c> of the new <c>ReqCalcExplodeProd</c> table.
    /// </param>
    /// <returns>
    ///    A new <c>ReqCalcExplodeProd</c> class.
    /// </returns>
    public static ReqCalcExplode newProdTable(
        ProdTable   _prodTable,
        NoYes       _autoReserveCoverage,
        NoYes       _deleteCoverage,
        NoYes       _deleteMarking
        )
    {
        ReqCalcExplode reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withSysLastValue()
            .withReqRefType(ReqRefType::Production)
            .withInventTransRefId(_prodTable.ProdId)
            .withInventTransOriginId(InventTransOriginProdTable::findInventTransOriginId(_prodTable.dataAreaId,_prodTable.ProdId))
            .createInstance();

        if (reqCalcExplode)
        {
            reqCalcExplode.parmReqPlanId(ReqPlanSched::defaultDynamicId());
            reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
            reqCalcExplode.parmDeleteCoverage(_deleteCoverage);
            reqCalcExplode.parmDeleteMarking(_deleteMarking);
            reqCalcExplode.parmAutoReserveCoverage(_autoReserveCoverage);
            reqCalcExplode.parmReqPlanData(null);
            reqCalcExplode.parmMarking(true);
        }
        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTablePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ReqCalcExplodeProd</c> class.
    /// </summary>
    /// <param name="_prodTable">
    /// The production table to use.
    /// </param>
    /// <returns>
    /// A new <c>ReqCalcExplodeProd</c> table.
    /// </returns>
    public static ReqCalcExplode newProdTablePrompt(ProdTable      _prodTable)
    {
        ReqCalcExplode reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withSysLastValue()
            .withReqRefType(ReqRefType::Production)
            .withInventTransRefId(_prodTable.prodId)
            .withInventTransOriginId(InventTransOriginProdTable::findInventTransOriginId(_prodTable.dataAreaId,_prodTable.ProdId))
            .createInstance();

        reqCalcExplode.parmReqPlanId(ReqPlanSched::defaultDynamicId());
        reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        reqCalcExplode.parmMarking(true);
        reqCalcExplode.parmReqPlanData(null);

        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPlanningItemSupplyFilters</Name>
				<Source><![CDATA[
    protected void addPlanningItemSupplyFilters(Query _query)
    {
        QueryBuildDataSource prodTableDs        = _query.dataSourceTable(tableNum(ProdTable));

        prodTableDs.addRange(fieldNum(ProdTable, ProdId)).value(queryValue(refId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupPlanningItemTransactions</Name>
				<Source><![CDATA[
    public void cleanupPlanningItemTransactions(ReqPlanningItemHelper _planningItemHelper)
    {
        _planningItemHelper.cleanupByRefId(reqPlanData.parmReqPlanVersionRefRecId(), refId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertPlanningItemSupply</Name>
				<Source><![CDATA[
    public boolean mustInsertPlanningItemSupply()
    {
        return isPlanningItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>