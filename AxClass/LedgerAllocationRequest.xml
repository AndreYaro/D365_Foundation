<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAllocationRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerAllocationRequest</c> class processes general ledger allocation requests.
/// </summary>
public class LedgerAllocationRequest extends RunBaseBatch implements BatchRetryable
{
    LedgerAllocationRuleID          ruleId;
    Description                     description;
    TransDate                       asOfDate, glPostDate, lastRunDate;
    LedgerAllocationZeroSourceMode  zeroSource;
    LedgerAllocationProcessMode     processOptions;
    LedgerAllocationProcessRequest  ledgerAllocationProcessRequest;
    ReasonRefRecId                  reasonRefRecId;
    PostReleaseDate                 releaseDate;

    private FinTagRecId finTagRecId;

    DialogRunbase   dialog;

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        ruleId,
        asOfDate,
        glPostDate,
        zeroSource,
        processOptions,
        reasonRefRecId,
        releaseDate,
        lastRunDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = Dialog::newFormnameRunbase(formstr(LedgerAllocationRequest), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>LedgerAllocationRequest</c> class with the specified fields.
    /// </summary>
    /// <param name="_ruleId">
    ///    The ID of the rule selected.
    /// </param>
    /// <param name="_asOfDate">
    ///    The value of the <c>AsOfDate</c>.
    /// </param>
    /// <param name="_glPostDate">
    ///    The transaction date for the GL postings.
    /// </param>
    /// <param name="_zeroSource">
    ///    The value of the <c>LedgerAllocationZeroSourceMode</c> type selected on the form.
    /// </param>
    /// <param name="_processOptions">
    ///    The value of the <c>LedgerAllocationProcessMode</c> type on which it depends whether to post the
    ///    journal.
    /// </param>
    /// <param name="_reasonRefRecId">
    ///    The corresponding record ID of the selected <c>ReasonCode</c> field value and <c>ReasonComment</c>
    ///    field value from <c>ReasonTableRef</c> table.
    /// </param>
    /// <param name="_releaseDate">
    ///    The date that the transaction can be posted. If the field is blank, the transaction can be posted
    ///    immediately.
    /// </param>
    public void initParameters(LedgerAllocationRuleID           _ruleId,
                                TransDate                       _asOfDate,
                                TransDate                       _glPostDate,
                                LedgerAllocationZeroSourceMode  _zeroSource,
                                LedgerAllocationProcessMode     _processOptions,
                                ReasonRefRecId                  _reasonRefRecId,
                                PostReleaseDate                 _releaseDate)
    {
        this.parmRuleId(_ruleId);
        this.parmAsOfDate(_asOfDate);
        this.parmGLPostDate(_glPostDate);
        this.parmZeroSource(_zeroSource);
        this.parmProcessOptions(_processOptions);
        this.parmReasonRefRecId(_reasonRefRecId);
        this.parmReleaseDate(_releaseDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList];
        packed = this.appendVariableToPack(packed, varStr(finTagRecId), finTagRecId);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(LedgerAllocationRequest) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAsOfDate</Name>
				<Source><![CDATA[
    public TransDate parmAsOfDate(TransDate _asOfDate  = asOfDate)
    {
        asOfDate = _asOfDate;

        return asOfDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGLPostDate</Name>
				<Source><![CDATA[
    public TransDate parmGLPostDate(TransDate _glPostDate  = glPostDate)
    {
        glPostDate = _glPostDate;

        return glPostDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastRunDate</Name>
				<Source><![CDATA[
    public TransDate parmLastRunDate(TransDate _lastRunDate  = lastRunDate)
    {
        lastRunDate = _lastRunDate;

        return _lastRunDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessOptions</Name>
				<Source><![CDATA[
    public LedgerAllocationProcessMode parmProcessOptions(LedgerAllocationProcessMode _processOptions  = processOptions)
    {
        processOptions = _processOptions;

        return processOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>reasonRefRecId</c> variable for the class.
    /// </summary>
    /// <param name="_reasonRefRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>reasonRefRecId</c> variable.
    /// </returns>
    public ReasonRefRecId parmReasonRefRecId(ReasonRefRecId _reasonRefRecId  = reasonRefRecId)
    {
        reasonRefRecId = _reasonRefRecId;

        return reasonRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>releaseDate</c> variable for the class.
    /// </summary>
    /// <param name="_releaseDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>releaseDate</c> variable.
    /// </returns>
    public PostReleaseDate parmReleaseDate(PostReleaseDate _releaseDate  = releaseDate)
    {
        releaseDate = _releaseDate;

        return releaseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuleId</Name>
				<Source><![CDATA[
    public LedgerAllocationRuleID parmRuleId(LedgerAllocationRuleID _ruleId  = ruleId)
    {
        ruleId = _ruleId;

        return ruleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZeroSource</Name>
				<Source><![CDATA[
    public LedgerAllocationZeroSourceMode parmZeroSource(LedgerAllocationZeroSourceMode _zeroSource  = zeroSource)
    {
        zeroSource = _zeroSource;

        return zeroSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinTagRecId</Name>
				<Source><![CDATA[
    public FinTagRecId parmFinTagRecId(FinTagRecId _finTagRecId = finTagRecId)
    {
        finTagRecId = _finTagRecId;

        return finTagRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerAllocationProcessRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>LedgerAllocationProcessRequest</c> instance.
    /// </summary>
    protected void initializeLedgerAllocationProcessRequest()
    {
        ledgerAllocationProcessRequest = LedgerAllocationProcessRequest::construct(
            ruleId,
            asOfDate,
            glPostDate,
            zeroSource,
            processOptions,
            reasonRefRecId,
            releaseDate,
            lastRunDate);

        ledgerAllocationProcessRequest.parmFinTagRecId(finTagRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the allocation process.
    /// </summary>
    public void run()
    {
        this.initializeLedgerAllocationProcessRequest();

        ledgerAllocationProcessRequest.allocate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                finTagRecId = this.extractPackedVariable(_packedClass, varStr(finTagRecId));
                ret = true;
                break;

            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerAllocationRequest construct()
    {
        return new LedgerAllocationRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS103488";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerAllocationRequest ledgerAllocationRequest = LedgerAllocationRequest::construct();

        if (ledgerAllocationRequest.prompt())
        {
            try
            {
                ledgerAllocationRequest.runOperation();
            }
            catch
            {
                Box::stop("@GeneralLedger:AllocationProcessFailure");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>