<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingItemSalesOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostControlPostingItemSalesOrder extends CostControlPostingItem
{
    SalesLine  salesOrderLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    public PriceCur costPricePcs()
    {
        PriceCur    retPrice;

        if (salesOrderLine.isStocked())
        {
            InventTable inventTable = InventTable::find(salesOrderLine.ItemId);

            if (salesOrderLine.InventRefType == InventRefType::Purch)
            {                
                PurchLine purchLine = PurchLine::findInventTransId(salesOrderLine.InventRefTransId);

                InventPriceMap inventPriceMap = inventTable.inventCostPriceMap(purchLine.InventDimId, purchLine.inventDim(), null);

                AmountCur purchAmount = PriceDisc::price2Amount(purchLine.PurchPrice,
                                                                purchLine.PriceUnit,
                                                                purchLine.DiscAmount,
                                                                purchLine.PurchQty,
                                                                purchLine.PurchQty,
                                                                inventPriceMap.Markup(),
                                                                purchLine.DiscPercent,
                                                                '',
                                                                0,
                                                                true);

                PriceCur purchPrice = salesOrderLine.SalesQty ? (purchAmount / salesOrderLine.SalesQty) : purchLine.PurchPrice;

                return ExchangeRateHelper::curPrice2CurPrice(purchPrice, purchLine.CurrencyCode, CompanyInfoHelper::standardCurrency());
            }

            if (inventTable)
            {
                if (salesOrderLine.salesUnit != inventTable.inventUnitId())
                {
                    retPrice = inventTable.convertCostPrice2Amount(salesOrderLine.SalesUnit,
                                                                    salesOrderLine.CostPrice,
                                                                    salesOrderLine.PriceUnit, 
                                                                    salesOrderLine.InventDimId,
                                                                    salesOrderLine.inventDim());
                }
                else
                {
                    retPrice = inventTable.costPcsPrice(salesOrderLine.InventDimId, salesOrderLine.inventDim());
                }
            }
            else
            {
                retPrice = 0;
            }
        }
        return retPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    public boolean createCommittedCost(InventQty _qty = this.openInTotal(salesOrderLine), TransDate _transDate=DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (!super(_qty))
            return false;

        if (_qty==0)
            return true;

        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(CostControlPostingItemSalesOrder));
        using (var activityContext = logger.projOpsManagementActivity().insertCommittedCostContext())
        {
            CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, _transDate);
            this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

            ProjTable projTable = ProjTable::find(salesOrderLine.ProjId);

            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ProjectIdProperty, any2Str(projTable.RecId));
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::TransIdProperty, salesOrderLine.ProjTransId);
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::SourceDocumentLineProperty, any2Str(salesOrderLine.SourceDocumentLine));
        
            if (projTable.UseBudgeting)
            {
                ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(salesOrderLine);
                projBudgetTransactionLine.parmQty(costControlTransCommittedCost.Qty);
                projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.AmountMst);

                if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(), projBudgetTransactionLine.salesAmount()))
                {
                    ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                    this.budgetUpdate(salesOrderLine.ProjId, projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
                }
            }
            else
            {
                if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                {
                    this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.Amount);
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableCostPrice</Name>
				<Source><![CDATA[
    private CostPrice inventTableCostPrice(SalesLine _salesLine)
    {
        boolean isStocked = _salesLine.isStocked();

        // To update cost price according to purchase price of its associated purchase order for both stock and non-stocked items.
        if (_salesLine.InventRefType == InventRefType::Purch)
        {
            return this.getCostPriceUsedOnPO(_salesLine);
        }
        
        if (isStocked)
        {
            InventTable inventTable = _salesLine.inventTable();
            InventDimParm inventDimParmFinancial, inventDimParmActive;
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_salesLine.ItemId);

            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);
            inventDimGroupSetup.inventDimParmActive(inventDimParmActive);

            InventDim inventDim = InventDim::find(_salesLine.InventDimId);

            InventOnhand inventOnhand = InventOnhand::newParametersActive(_salesLine.ItemId, inventDim, inventDimParmFinancial, inventDimParmActive);
            CostPrice costPrice = inventOnhand.costPricePcs();
            
            if (costPrice)
            {
                 return costPrice;
            }
            else
            {
                return _salesLine.CostPrice;
            }
        }
        else
        {
            return _salesLine.CostPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost = super(_qty, _transDate);
        costControlTransCommittedCost.initFromSalesLine(salesOrderLine);

        CostPrice costPrice;
        //Get the cost price for the item from inventory tables when the flight <c>ProjInventTableCostForSalesOrderCommittedCostFlight</c> is enabled.
        if (ProjInventTableCostForSalesOrderCommittedCostFlight::instance().isEnabled())
        {
            costPrice = this.inventTableCostPrice(salesOrderLine);
        }
        else
        {
            costPrice = salesOrderLine.CostPrice;
        }
        
        AmountCur amountCur;
        UnitOfMeasureSymbol inventUnit = salesOrderLine.inventTable().inventUnitId();
        if (salesOrderLine.SalesUnit != inventUnit)
        {
            //Converts 1 quantity in sales unit to invent unit
            //Eg. Invent unit = ea and sales unit = dz and 1 dz = 12 ea then qtyInInventUnit will be 12
            InventQty qtyInInventUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesOrderLine.ItemId,
                                                                                                          salesOrderLine.InventDimId,
                                                                                                          1,
                                                                                                          salesOrderLine.SalesUnit,
                                                                                                          inventUnit,
                                                                                                          NoYes::Yes,
                                                                                                          NoYes::Yes);
            amountCur = costControlTransCommittedCost.Qty * costPrice * qtyInInventUnit;
        }
        else
        {
            amountCur = costControlTransCommittedCost.Qty * costPrice;
        }

        PurchLine purchLine = PurchLine::findInventTransId(salesOrderLine.InventRefTransId);
        if (purchLine.CurrencyCode != costControlTransCommittedCost.CurrencyCode
            && salesOrderLine.InventRefTransId 
            && salesOrderLine.InventRefType == InventRefType::Purch)
        {
            // Converts cost amount from Purchline currency to company accounting currency.
            costControlTransCommittedCost.Amount = CurrencyExchangeHelper::curAmount2CurAmount(amountCur,
                                                                                               purchLine.CurrencyCode,
                                                                                               costControlTransCommittedCost.CurrencyCode,
                                                                                               _transDate);
        }
        else
        {
            costControlTransCommittedCost.Amount = amountCur;
        }
        
        costControlTransCommittedCost.AmountMst = costControlTransCommittedCost.Amount;

        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        ProjCommittedCostUpdateAction   retActionType;
        SalesLine                       salesOrderLine_Orig;
        // No original means create a brand new salesLine
        if (!movement_Orig || (!CostControlTransCommittedCost::findOpenedByProjTransID(salesOrderLine.ProjTransId) && salesOrderLine.SalesQty != salesOrderLine.orig().SalesQty))
        {
            retActionType = ProjCommittedCostUpdateAction::Create;
        }
        else
        {
            if (movement_Orig.buffer().TableId!=tablenum(SalesLine))
                throw error ("@SYS22828",funcname());
            else
                salesOrderLine_Orig=movement_Orig.buffer();

            if (salesOrderLine_Orig.SalesType == SalesType::Journal && salesOrderLine.SalesType == SalesType::Sales)
            {
                retActionType = ProjCommittedCostUpdateAction::Create;
            }

            // Don't change the order of the three
            // dimension changes, update committed cost without reverse
            if (!DimensionDefaultFacade::areEqual(salesOrderLine_Orig.DefaultDimension, salesOrderLine.DefaultDimension)
              ||salesOrderLine_Orig.ProjCategoryId!=salesOrderLine.ProjCategoryId
              ||salesOrderLine_Orig.ActivityNumber!=salesOrderLine.ActivityNumber)
                    retActionType = ProjCommittedCostUpdateAction::UpdateOnly;

            // qty,currency got change, should reverse the old one and recreate committed cost
            if (salesOrderLine_Orig.ItemId != salesOrderLine.ItemId)
                retActionType = ProjCommittedCostUpdateAction::UpdateReverse;

            if (salesOrderLine.SalesType == SalesType::ItemReq)
            {
                if (salesOrderLine.isLinkedToProdConsumed())
                {
                    if (CostControlTransCommittedCost::findOpenedByProjTransID(salesOrderLine.ProjTransId).Qty != this.openInTotal(salesOrderLine))
                        retActionType = ProjCommittedCostUpdateAction::UpdateReverse;
                }
                else
                {
                    if (this.openInTotal(salesOrderLine_Orig) != this.openInTotal(salesOrderLine))
                    retActionType = ProjCommittedCostUpdateAction::UpdateReverse;
                }
            }
            else
            {
                if (this.openInTotal(salesOrderLine_Orig) != this.openInTotal(salesOrderLine))
                    retActionType = ProjCommittedCostUpdateAction::UpdateReverse;
            }
        }
        //no match, return updateOnly
        return retActionType==ProjCommittedCostUpdateAction::Unknown? ProjCommittedCostUpdateAction::UpdateOnly:retActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        salesOrderLine=buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPriceUsedOnPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates cost price of item requirement according to cost price utilized on its associated purchase order.
    /// </summary>
    /// <returns>
    /// Returns cost price of the item requirement.
    /// </returns>
    private CostPrice getCostPriceUsedOnPO(SalesLine salesLine)
    {
        SalesQty salesQty = salesLine.SalesQty;
        PurchLine purchLine = PurchLine::findInventTransId(salesLine.InventRefTransId);
        
        PriceCur purchPrice;
        if (purchLine.PurchPrice != 0)
        {
            if (salesQty != 0)
            {
                InventPriceMap inventPriceMap = salesLine.inventTable().inventCostPriceMap(purchLine.InventDimId, purchLine.inventDim(), null);

                AmountCur purchAmount = PriceDisc::price2Amount(purchLine.PurchPrice,
                                                                        purchLine.PriceUnit,
                                                                        purchLine.DiscAmount,
                                                                        purchLine.PurchQty,
                                                                        purchLine.PurchQty,
                                                                        inventPriceMap.Markup(),
                                                                        purchLine.DiscPercent,
                                                                        '',
                                                                        0,
                                                                        true);

                purchPrice = purchAmount / salesQty;
            }
            else
            {
                purchPrice = purchLine.PurchPrice;
            }
        }

        return purchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amount of a transaction.
    /// </summary>
    /// <param name="_costAmount">
    ///    The cost amount of the transaction; optional.
    /// </param>
    /// <param name="_salesAmount">
    ///    The sales amount of the transaction; optional.
    /// </param>
    /// <returns>
    ///    true if the cost and sales amounts can be reduced from the budget; otherwise, false.
    /// </returns>
    public boolean mustUpdateBudget(AmountCur _costAmount = 0, AmountCur _salesAmount = 0)
    {
        boolean ret = true;

        if ((actionType == ProjCommittedCostUpdateAction::Create || actionType == ProjCommittedCostUpdateAction::Post)
            && _costAmount == 0
            && _salesAmount == 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
    {
        if (actionType== ProjCommittedCostUpdateAction::Create
        && _qty==0)
            return false;
        if ((actionType== ProjCommittedCostUpdateAction::UpdateReverse || actionType== ProjCommittedCostUpdateAction::Delete)
        && _qty==0)
            return false;
        if (actionType== ProjCommittedCostUpdateAction::Post)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(InventMovement _movement)
    {
        super(_movement);
        if (movement)
           buffer=movement.buffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInTotal</Name>
				<Source><![CDATA[
    private InventQty openInTotal(SalesLine _salesLine)
    {
        InventQty           estimatedIssue = 0;
        InventQty           estimatedReceipt = 0;

        if (_salesLine.SalesType != SalesType::ItemReq)
        {
            return _salesLine.RemainSalesFinancial + _salesLine.RemainSalesPhysical;
        }

        if (!_salesLine.isLinkedToProdConsumed())
        {
            if (salesParmLine && !_salesLine.isStocked())
            {
                return salesParmLine.RemainAfter;
            }
            else
            {
            return _salesLine.RemainSalesPhysical;
        }
        }

        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
        estimatedIssue = -inventTransIdSum.estimatedIssue();

        ListIterator it = _salesLine.prodConsumedInventTransOriginIds();
        while (it.more())
        {
            InventTransOriginId prodInventTransOriginId = it.value();
            InventTransIdSum inventTransIdSumRef = InventTransIdSum::newTransOriginId(prodInventTransOriginId);
            estimatedReceipt += inventTransIdSumRef.estimatedReceipt();
            it.next();
        }

        if (estimatedIssue > estimatedReceipt)
        {
            return estimatedIssue - estimatedReceipt;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesOrderLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesOrderLine(SalesLine _salesOrderLine=salesOrderLine)
    {
        salesOrderLine=_salesOrderLine;
        return salesOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return salesOrderLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return this.openInTotal(salesOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean reverseCommittedCost(NoYes isInvoiced)
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;
        Voucher                         voucher;
        TransDate                       ledgerTransDate;

        if (!super(isInvoiced))
            return false;

        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(CostControlPostingItemSalesOrder));
        using (var activityContext = logger.projOpsManagementActivity().reverseCommittedCostContext())
        {
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::TransIdProperty, salesOrderLine.ProjTransId);
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::SourceDocumentLineProperty, any2Str(salesOrderLine.SourceDocumentLine));

            if (isInvoiced)
            {
                voucher = this.parmLedgerVoucher().lastVoucher();
                ledgerDimensionDefaultAccount = this.parmMovement().accountOperations();
                ledgerTransDate=this.parmLedgerVoucher().lastTransDate();
            }

            while select forupdate costControlTransCommittedCost
                where costControlTransCommittedCost.ProjTransId == salesOrderLine.ProjTransId
            {
                // Clear the open; if invoiced, set reverse =true
                if (isInvoiced)
                {
                    if (!costControlTransCommittedCost.Voucher)
                    {
                        costControlTransCommittedCost.Voucher = voucher;
                        costControlTransCommittedCost.LedgerDimension=ledgerDimensionDefaultAccount;
                    }
                }

                if (costControlTransCommittedCost.Open ==NoYes::Yes)
                {
                    costControlTransCommittedCost.Open = NoYes::No;
                    costControlTransCommittedCost.Reverse = NoYes::No;
                    costControlTransCommittedCost.update();

                    CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, isInvoiced, voucher, ledgerDimensionDefaultAccount, ledgerTransDate);

                    ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(salesOrderLine);
                    projBudgetTransactionLine.parmQty(costControlTransCommittedCost.Qty);
                    projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.AmountMst);

                    if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(), projBudgetTransactionLine.SalesAmount())
                         && ProjBudgetReductionHistory::existProjTransId(costControlTransCommittedCost.ProjTransId))
                    {
                        boolean     updateBudgetOnOrigSalesLine;

                        if (costControlTransCommittedCost.CategoryId     != salesOrderLine.ProjCategoryId ||
                            costControlTransCommittedCost.ActivityNumber != salesOrderLine.ActivityNumber ||
                            salesOrderLine.orig().SalesPrice             != salesOrderLine.SalesPrice)
                        {
                            updateBudgetOnOrigSalesLine = true;
                        }

                        this.budgetUpdate((updateBudgetOnOrigSalesLine ? salesOrderLine.orig().ProjId : this.parmSalesOrderLine().ProjId),
                            ProjBudgetTransaction::construct((updateBudgetOnOrigSalesLine ? salesOrderLine.orig(): this.parmSalesOrderLine())),ProjBudgetAdjustmentType::Increment);
                    }

                    if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                        this.forecastUpdate(costControlTransCommittedCost,
                                            -costControlTransCommittedCost.Qty,
                                            -costControlTransCommittedCost.Amount);
                }
                else
                    costControlTransCommittedCost.update();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
    {
        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(CostControlPostingItemSalesOrder));
        using (var activityContext = logger.projOpsManagementActivity().updateCommittedCostContext())
        {
            CostControlTransCommittedCost oldOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId());
            ProjCategoryId oldCategoryId = oldOpenCCTCC.CategoryId;
            smmActivityNumber oldActivityNum = oldOpenCCTCC.ActivityNumber;

            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::TransIdProperty, salesOrderLine.ProjTransId);
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::SourceDocumentLineProperty, any2Str(salesOrderLine.SourceDocumentLine));

            ProjCategoryId newCategoryId = salesOrderLine.ProjCategoryId;
            smmActivityNumber newActivityNum = salesOrderLine.ActivityNumber;

            CostControlTransCommittedCost  updateCCTCC;

            while select forupdate updateCCTCC
                where updateCCTCC.ProjTransId == salesOrderLine.ProjTransId
            {
                updateCCTCC.DefaultDimension = salesOrderLine.DefaultDimension;
                updateCCTCC.CategoryId = salesOrderLine.ProjCategoryId;
                updateCCTCC.ActivityNumber = salesOrderLine.ActivityNumber;
                updateCCTCC.update();
            }

            if (oldCategoryId != newCategoryId || oldActivityNum != newActivityNum || salesOrderLine.SalesPrice != salesOrderLine.orig().SalesPrice)
            {
                this.budgetUpdate(salesOrderLine.orig().ProjId,ProjBudgetTransaction::construct(salesOrderLine.orig()),ProjBudgetAdjustmentType::Increment);
                this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.Amount);
                CostControlTransCommittedCost newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId());

                if (ProjTable::find(this.parmSalesOrderLine().ProjId).UseBudgeting)
                {
                    ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(this.parmSalesOrderLine());
                    projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                    projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                    ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                    this.budgetUpdate(salesOrderLine.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
                }
                else
                {
                    this.forecastUpdate(newOpenCCTCC,  newOpenCCTCC.Qty,  newOpenCCTCC.Amount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        boolean ret = super();
        if (ret)
        {
            if (salesOrderLine.SalesType==SalesType::ItemReq)
                ret= ProjParameters::find().TrackCommittedCostItemRequirement;
            else if (salesOrderLine.SalesType==SalesType::ReturnItem
                  ||salesOrderLine.SalesType==SalesType::Sales)
                ret =ProjParameters::find().TrackCommittedCostSalesOrder;
            else
                ret=false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>