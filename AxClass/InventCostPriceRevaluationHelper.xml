<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostPriceRevaluationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventCostPriceRevaluationHelper
{    
    #ISOCountryRegionCodes
    public InventSettlement preInventSettlement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPreInventSettlement</Name>
				<Source><![CDATA[
    public InventSettlement parmPreInventSettlement(InventSettlement _preInventSettlement)
    {
        this.preInventSettlement = _preInventSettlement;
        return this.preInventSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStdCostPriceRevaluationPhy</Name>
				<Source><![CDATA[
    public InventSettlement updateStdCostPriceRevaluationPhy(
        InventTrans         _inventTrans,
        InventTable         _inventTable,
        Voucher             _voucher,
        CostAmount          _adjustment,
        date                _revaluationDate,
        InventMovement      _inventMovement = null,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        return this.updatePriceRevaluationPhy(
             _inventTrans,
             _inventTable,
             InventAccountType::InventStdCostRoundingVariance,
             _voucher,
             _adjustment,
             _revaluationDate,
             _inventMovement,
             _inventTransCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStdCostPriceRevaluationFin</Name>
				<Source><![CDATA[
    public InventSettlement updateStdCostPriceRevaluationFin(
        InventTrans         _inventTrans,
        InventTable         _inventTable,
        Voucher             _voucher,
        CostAmount          _adjustment,
        date                _revaluationDate,
        InventMovement      _inventMovement = null,
        boolean             _rounding = false,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        InventSettlement    inventSettlement;

        if (_adjustment)
        {
            if (_rounding)
            {
                inventSettlement = this.updatePriceRevaluationFin(_inventTrans,
                                                                  _inventTable,
                                                                  InventAccountType::InventStdCostRevaluation,
                                                                  _voucher,
                                                                  _adjustment,
                                                                  _revaluationDate,
                                                                  _inventMovement,
                                                                  _inventTransCurrency);
            }
            else
            {
                inventSettlement = this.updatePriceRevaluationFin(_inventTrans,
                                                                  _inventTable,
                                                                  InventAccountType::InventStdCostRoundingVariance,
                                                                  _voucher,
                                                                  _adjustment,
                                                                  _revaluationDate,
                                                                  _inventMovement,
                                                                  _inventTransCurrency);
            }
        }
        return inventSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceRevaluationPhy</Name>
				<Source><![CDATA[
    public InventSettlement updatePriceRevaluationPhy(
        InventTrans         _inventTrans,
        InventTable         _inventTable,
        InventAccountType   _inventAccountType,
        Voucher             _voucher,
        CostAmount          _adjustment,
        date                _revaluationDate,
        InventMovement      _inventMovement = null,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventTransPosting  inventTransPosting;
        InventSettlement    inventSettlement;
        DimensionDefault    defaultDimension;

        if (_adjustment)
        {
            this.initSettlementFromCostParameters(_inventTrans, inventSettlement, _inventTable, _inventMovement);

            boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
            if (countryRegion_RU)
            {
                inventSettlement.CostAmountAdjustment   = CurrencyExchangeHelper::amount(_adjustment, _inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? CompanyInfoHelper::standardCurrency() : CompanyInfoHelper::secondaryCurrency_RU());
                inventSettlement.InventTransCurrency_RU = _inventTransCurrency;
            }
            else
            {
                inventSettlement.CostAmountAdjustment   = CurrencyExchangeHelper::amount(_adjustment);
            }
            inventSettlement.TransDate              = _revaluationDate;
            inventSettlement.Voucher                = _voucher;
            inventSettlement.SettleModel            = InventSettleModel::PhysicalValue;
            inventSettlement.SettleType             = InventSettleType::CompleteAdjustment;
            if (_inventMovement)
            {
                inventSettlement.BalanceSheetPosting            = _inventMovement.postingPhysical();

                if (_inventTrans.inventTransOrigin().isPhysicalOffsetInventory())
                {
                    if (!InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
                    {
                        defaultDimension = _inventMovement.defaultDimension();
                        inventSettlement.DefaultDimension = defaultDimension;
                    }
                    else
                    {
                        defaultDimension = inventSettlement.DefaultDimension;
                    }

                    inventSettlement.BalanceSheetLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                                                      _inventMovement.accountPhysical(),
                                                                      defaultDimension);
                    inventSettlement.OperationsPosting          = _inventMovement.postingOffsetPhysical();
                    inventSettlement.OperationsLedgerDimension  = this.getLedgerDimensionFromDefaultAccount(
                                                                    _inventMovement.offsetAccountPhysical(),
                                                                    inventSettlement.DefaultDimension);
                }
                else
                {
                    inventSettlement.BalanceSheetLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                                                      _inventMovement.accountPhysical(),
                                                                      inventSettlement.DefaultDimension);

                    inventSettlement.OperationsPosting          = InventPosting::accountType2LedgerPostingType(_inventAccountType);
                    if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                    {
                        inventSettlement.OperationsLedgerDimension  = this.getLedgerDimensionFromDefaultAccount(
                                                                            InventPosting::itemExtendParm_CN(
                                                                                _inventAccountType,
                                                                                InventPostingExtendParm_CN::constructInventDim(_inventTrans.inventDim()),
                                                                                _inventTable.ItemId,
                                                                                _inventTable.itemGroupId()),
                                                                            inventSettlement.DefaultDimension);
                    }
                    else
                    {
                        inventSettlement.OperationsLedgerDimension  = this.getLedgerDimensionFromDefaultAccount(
                                                                        InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameterFromInventTable(_inventTrans, _inventAccountType, _inventTable)),
                                                                        inventSettlement.DefaultDimension);
                    }
                }
            }
            else
            {
                inventTransPosting = _inventTrans.inventTransPostingPhysical();

                inventSettlement.BalanceSheetPosting            = inventTransPosting.PostingType;

                if (_inventTrans.inventTransOrigin().isPhysicalOffsetInventory())
                {
                    inventSettlement.BalanceSheetLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                                                     LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(inventTransPosting.LedgerDimension),
                                                                     inventTransPosting.DefaultDimension);

                    if (!InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
                    {
                        inventSettlement.DefaultDimension = inventTransPosting.DefaultDimension;
                    }
                    inventSettlement.OperationsPosting          = inventTransPosting.PostingTypeOffset;
                    inventSettlement.OperationsLedgerDimension  = this.getLedgerDimensionFromDefaultAccount(
                                                                    LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(inventTransPosting.OffsetLedgerDimension),
                                                                    inventSettlement.DefaultDimension);
                }
                else
                {
                    inventSettlement.BalanceSheetLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                                                     LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(inventTransPosting.LedgerDimension),
                                                                     inventSettlement.DefaultDimension);

                    inventSettlement.OperationsPosting          = InventPosting::accountType2LedgerPostingType(_inventAccountType);

                    if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                    {
                        inventSettlement.OperationsLedgerDimension  = this.getLedgerDimensionFromDefaultAccount(
                            InventPosting::itemExtendParm_CN(
                                _inventAccountType,
                                InventPostingExtendParm_CN::constructInventDim(_inventTrans.inventDim()),
                                _inventTable.ItemId,
                                _inventTable.itemGroupId()),
                            inventSettlement.DefaultDimension);
                    }
                    else
                    {
                        inventSettlement.OperationsLedgerDimension  = this.getLedgerDimensionFromDefaultAccount(
                                                                        InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameterFromInventTable(_inventTrans, _inventAccountType, _inventTable)),
                                                                        inventSettlement.DefaultDimension);
                    }
                }
            }
            if (countryRegion_RU
                && _inventTransCurrency != InventTransCurrency_RU::PrimaryCur)
            {
                _inventTrans.CostAmountSecCurPhysical_RU += inventSettlement.CostAmountAdjustment;
            }
            else
            {
                _inventTrans.CostAmountPhysical          += inventSettlement.CostAmountAdjustment;
            }
        }
        return inventSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceRevaluationFin</Name>
				<Source><![CDATA[
    public InventSettlement updatePriceRevaluationFin(
        InventTrans         _inventTrans,
        InventTable         _inventTable,
        InventAccountType   _inventAccountType,
        Voucher             _voucher,
        CostAmount          _adjustment,
        date                _revaluationDate,
        InventMovement      _inventMovement = null,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        InventTransPosting  inventTransPosting;
        InventSettlement    inventSettlement;

        if (_adjustment)
        {
            this.initSettlementFromCostParameters(_inventTrans, inventSettlement, _inventTable, _inventMovement);

            boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
            if (countryRegion_RU)
            {
                inventSettlement.CostAmountAdjustment   = CurrencyExchangeHelper::amount(_adjustment, _inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? CompanyInfoHelper::standardCurrency() : CompanyInfoHelper::secondaryCurrency_RU());
            }
            else
            {
                inventSettlement.CostAmountAdjustment   = CurrencyExchangeHelper::amount(_adjustment);
            }
            if (countryRegion_RU)
            {
                inventSettlement.InventTransCurrency_RU = _inventTransCurrency;
            }

            inventSettlement.TransDate              = _revaluationDate;
            inventSettlement.Voucher                = _voucher;
            inventSettlement.SettleModel            = InventSettleModel::Adjustment;
            inventSettlement.SettleType             = InventSettleType::CompleteAdjustment;
            if (_inventMovement)
            {
                inventSettlement.BalanceSheetPosting            = _inventMovement.postingBalanceSheet();
                inventSettlement.BalanceSheetLedgerDimension    = this.getLedgerDimensionFromDefaultAccount(
                                                                        _inventMovement.accountBalanceSheet(),
                                                                        inventSettlement.DefaultDimension);
            }
            else
            {
                inventTransPosting = _inventTrans.inventTransPostingFinancial();

                if (inventTransPosting)
                {
                    inventSettlement.BalanceSheetPosting            = inventTransPosting.PostingType;
                    inventSettlement.BalanceSheetLedgerDimension    = this.getLedgerDimensionFromDefaultAccount(
                                                                        LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(inventTransPosting.LedgerDimension),
                                                                        inventSettlement.DefaultDimension);
                }
                else
                {
                    InventTransOrigin inventTransOrigin = _inventTrans.inventTransOrigin();
                    if (inventTransOrigin.isTransfer() == NoYes::Yes || inventTransOrigin.isArchivedTransaction())
                    {
                        inventSettlement.BalanceSheetPosting = _inventTrans.isIssue() ?
                                                               LedgerPostingType::InventIssue :
                                                               LedgerPostingType::InventReceipt;
                        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                        {
                            if (_inventTrans.isIssue())
                            {
                                inventSettlement.BalanceSheetLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                    InventPosting::itemExtendParm_CN(
                                        InventAccountType::InventIssue,
                                        InventPostingExtendParm_CN::constructInventDim(_inventTrans.inventDim()),
                                        _inventTable.ItemId,
                                        _inventTable.itemGroupId()),
                                    inventSettlement.DefaultDimension);
                            }
                            else
                            {
                                inventSettlement.BalanceSheetLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                    InventPosting::itemExtendParm_CN(
                                        InventAccountType::InventReceipt,
                                        InventPostingExtendParm_CN::constructInventDim(_inventTrans.inventDim()),
                                        _inventTable.ItemId,
                                        _inventTable.itemGroupId()),
                                    inventSettlement.DefaultDimension);
                            }
                        }
                        else
                        {
                            inventSettlement.BalanceSheetLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                                        InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameterFromInventTable(
                                                                                                                _inventTrans,
                                                                                                                _inventTrans.isIssue() ?
                                                                                                                InventAccountType::InventIssue :
                                                                                                                InventAccountType::InventReceipt,
                                                                                                                _inventTable)),
                                                        inventSettlement.DefaultDimension);
                        }
                    }
                }
            }
            inventSettlement.OperationsPosting = InventPosting::accountType2LedgerPostingType(_inventAccountType);

            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                //To Do: Dimension
                inventSettlement.OperationsLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                                        InventPosting::itemExtendParm_CN(
                                                                    _inventAccountType,
                                                                    InventPostingExtendParm_CN::constructInventDim(_inventTrans.inventDim()),
                                                                    _inventTable.ItemId,
                                                                    _inventTable.itemGroupId()),
                                                        inventSettlement.DefaultDimension);
            }
            else
            {
                inventSettlement.OperationsLedgerDimension = this.getLedgerDimensionFromDefaultAccount(
                                                        InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameterFromInventTable(_inventTrans, _inventAccountType, _inventTable)),
                                                        inventSettlement.DefaultDimension);
            }

            if (!countryRegion_RU
                || (countryRegion_RU
                && _inventTransCurrency == InventTransCurrency_RU::PrimaryCur))
            {
                _inventTrans.CostAmountAdjustment += inventSettlement.CostAmountAdjustment;
            }
            else
            {
                _inventTrans.CostAmountSecCurAdjustment_RU += inventSettlement.CostAmountAdjustment;
            }
        }
        return inventSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount getLedgerDimensionFromDefaultAccount(
        LedgerDimensionDefaultAccount   _defaultAccount,
        DimensionDefault                _defaultDimension = 0)
    {
        if (!_defaultAccount)
        {
            return 0;
        }

        return LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, _defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSettlementFromCostParameters</Name>
				<Source><![CDATA[
    public void initSettlementFromCostParameters(
        InventTrans      _inventTrans,
        InventSettlement _inventSettlement,
        InventTable      _inventTable,
        InventMovement   _inventMovement)
    {
        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
        {
            CostParameters costParameters = CostParameters::find();
            switch (costParameters.DimensionDefaultingSource)
            {
                case DimensionDefaultingSource::None:
                    _inventSettlement.initFromInventTrans(_inventTrans, 0);
                    break;
                case DimensionDefaultingSource::Posting:
                    _inventSettlement.initFromInventTrans(_inventTrans, this.getDefaultDimensionFromLastRevaluation(_inventMovement, _inventTrans));
                    break;
                case DimensionDefaultingSource::Table:
                default:
                    _inventSettlement.initFromInventTrans(_inventTrans, _inventTable.inventDimLinkedDefaultDimension(_inventTrans.inventDim()));
            }
        }
        else
        {
            _inventSettlement.initFromInventTrans(_inventTrans, _inventTable.inventDimLinkedDefaultDimension(_inventTrans.inventDim()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionFromLastRevaluation</Name>
				<Source><![CDATA[
    public DimensionDefault getDefaultDimensionFromLastRevaluation(InventMovement _inventMovement, InventTrans _inventTrans)
    {
        if (preInventSettlement)
        {
            return preInventSettlement.DefaultDimension;
        }
        else
        {
            if (_inventMovement == null)
            {
                InventTransPosting inventTransPosting;
                select firstonly inventTransPosting
                            where inventTransPosting.InventTransOrigin == _inventTrans.InventTransOrigin;
                return inventTransPosting.DefaultDimension;
            }
            else
            {
                return _inventMovement.defaultDimension();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameterFromInventTable</Name>
				<Source><![CDATA[
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameterFromInventTable(
        InventTrans         _inventTrans,
        InventAccountType   _inventAccountType,
        InventTable         _inventTable)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            _inventTable.ItemId,
            _inventTable.itemGroupId());

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            searchParameters.InventDim_RU = _inventTrans.inventDim();
        }

        return searchParameters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>