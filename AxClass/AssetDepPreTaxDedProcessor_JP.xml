<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedProcessor_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The processor of pre-tax deduction settlement process.
/// </summary>
class AssetDepPreTaxDedProcessor_JP
{
    private const str FeatureReference = 'JP-00026';

    AssetDepPreTaxDedProcess_JP             assetDepPreTaxDedProcess;

    // For UI, optional.
    FormDataSource                          formDataSourceOfProcess;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyCarryForwardRulesForAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies carry forward rules for <C>AssetBook</C>.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    public void applyCarryForwardRulesForAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        AssetDepPreTaxDedProcessContext_JP      assetDepPreTaxDedProcessContext;
        AssetDepPreTaxDedProcessContext_JP      contextOrdinary;
        AssetDepPreTaxDedProcessContext_JP      contextExtra;

        ttsBegin;

        while select forUpdate assetDepPreTaxDedProcessContext
            where assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP   == assetDepPreTaxDedProcess.RecId
                && assetDepPreTaxDedProcessContext.AssetId                      == _assetId
                && assetDepPreTaxDedProcessContext.BookId                       == _bookId
        {
            this.calcCarryForwardForContext(assetDepPreTaxDedProcessContext);
            assetDepPreTaxDedProcessContext.update();

            if (assetDepPreTaxDedProcessContext.DepType == AssetDepType_JP::OrdinaryDepreciation)
            {
                contextOrdinary = assetDepPreTaxDedProcessContext.data();
            }
            else
            {
                contextExtra = assetDepPreTaxDedProcessContext.data();
            }
        }

        Debug::assert(contextOrdinary.recid != 0);

        // Apply additional calculation logic cross context for same asset value model.
        this.calcCarryForwardCrossContext(contextOrdinary, contextExtra);
        contextOrdinary.update();

        if (contextExtra)
        {
            contextExtra.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySettlementRulesForAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies settlement rules for <C>AssetBook</C>.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    public void applySettlementRulesForAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        AssetAdvRuleExe_PreTaxDedSettlement_JP::doSettlement(
            assetDepPreTaxDedProcess,
            _assetId,
            _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCarryForwardCrossContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the carrying forward amount for context.
    /// </summary>
    /// <param name="_contextOrdinary">
    /// The context for ordinary depreciation.
    /// </param>
    /// <param name="_contextExtra">
    /// The context for special or additional depreciation. Optional.
    /// </param>
    public void calcCarryForwardCrossContext(
        AssetDepPreTaxDedProcessContext_JP _contextOrdinary,
        AssetDepPreTaxDedProcessContext_JP _contextExtra = null)
    {
        AssetAmount     totalReserveAllocationAmt;
        AssetAmount     carryFwdAmount;
        AssetAmount     carryFwdAmountToReduce;

        if (_contextOrdinary)
        {
            totalReserveAllocationAmt = _contextOrdinary.ReserveAllocationAmount + _contextExtra.ReserveAllocationAmount;
            if (totalReserveAllocationAmt > 0)
            {
                // Ordinary
                carryFwdAmount = _contextOrdinary.editCarryFwdOverUnderAmount();
                if (carryFwdAmount > 0)
                {
                    carryFwdAmountToReduce = min(carryFwdAmount, totalReserveAllocationAmt);
                    _contextOrdinary.CarryForwardOverUnderAmountRuleAdj += -1 * carryFwdAmountToReduce;

                    totalReserveAllocationAmt -= carryFwdAmountToReduce;
                }

                // Extra
                if (_contextExtra && totalReserveAllocationAmt > 0)
                {
                    carryFwdAmount = _contextExtra.editCarryFwdOverUnderAmount();
                    if (carryFwdAmount > 0)
                    {
                        carryFwdAmountToReduce = min(carryFwdAmount, totalReserveAllocationAmt);
                        _contextExtra.CarryForwardOverUnderAmountRuleAdj += -1 * carryFwdAmountToReduce;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCarryForwardForContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the carrying forward amount for context.
    /// </summary>
    /// <param name="_context">
    /// The context
    /// </param>
    public void calcCarryForwardForContext(AssetDepPreTaxDedProcessContext_JP _context)
    {
        AssetTableInterval      assetTableInterval;
        AssetTransDate          firstDayOfCurTerm;
        AssetTransDate          lastDayOfCurTerm;
        AssetTransDate          lastYearValidTo;
        AssetTransDate          curTermValidTo;

        AssetDepEntityInquiry_PreTaxDeduction_JP    entityInquiry;

        AssetAmount     totalRemaining;

        AssetAmount     broughtFwdSettled;
        AssetAmount     broughtFwdRemaining;
        AssetAmount     broughtFwdPostedWillBeExpiredNextYear;
        AssetAmount     broughtFwdCanCarryFwd;

        AssetAmount     curTermRemaining;
        AssetAmount     curTermCanCarryFwd;

        // Init
        assetTableInterval  = _context.assetTableInterval();
        firstDayOfCurTerm   = assetTableInterval.findFirstDayOfYear(assetDepPreTaxDedProcess.ProcessDate);
        lastDayOfCurTerm    = assetTableInterval.findLastDayOfYear(assetDepPreTaxDedProcess.ProcessDate);

        // Remove the manually adjustment on carry forward.
        _context.CarryForwardOverUnderAmountManualAdj = 0;

        //
        // Total
        //
        totalRemaining = _context.editRemainingOverUnderAmount();

        // Divide into two parts
        broughtFwdSettled   = _context.BroughtForwardOverUnderAmountSettled + _context.InclusionByOverUnderDepreciation;
        broughtFwdRemaining = _context.editBroughtFwdOverUnderAmount() - broughtFwdSettled;
        curTermRemaining    = totalRemaining - broughtFwdRemaining;

        // If user do manual adjustment, it is possible that broughtFwdRemaining & curTermRemaining has different sign.
        // In this case, a virtual settlement is needed before calculate the amount can carry forward.
        if (sign(broughtFwdRemaining) != sign(curTermRemaining))
        {
            if (abs(broughtFwdRemaining) >= abs(curTermRemaining))
            {
                broughtFwdRemaining = totalRemaining;
                curTermRemaining    = 0;
            }
            else
            {
                broughtFwdRemaining = 0;
                curTermRemaining    = totalRemaining;
            }
        }

        //
        // Brought forward part
        //
        if (broughtFwdRemaining != 0)
        {
            if (_context.BroughtForwardOverUnderAmountManualAdj != 0)
            {
                // The brought forward amount is adjusted. Consider all the brought forward amount to be the amount in last year.
                lastYearValidTo = AssetAdvRuleExe_PreTaxDedCarryFwd_JP::calcValidToDate(
                    _context.DepType,
                    AssetDepPreTaxDeductionHelper_JP::determinOverUnderType(broughtFwdRemaining),
                    firstDayOfCurTerm - 1);

                if (lastYearValidTo > lastDayOfCurTerm)
                {
                    broughtFwdCanCarryFwd = broughtFwdRemaining;
                }
                else
                {
                    broughtFwdCanCarryFwd = 0;
                }
            }
            else
            {
                entityInquiry = AssetDepEntityInquiry_PreTaxDeduction_JP::construct(_context.AssetId, _context.BookId, assetTableInterval);

                broughtFwdPostedWillBeExpiredNextYear = _context.BroughtForwardOverUnderAmount
                    - entityInquiry.calcSum(
                        [AssetDepPreTaxDeductionHelper_JP::depTypeToDepEntityType(_context.DepType)],
                        dateNull(),
                        firstDayOfCurTerm - 1,
                        lastDayOfCurTerm + 1,
                        conNull(),
                        dateNull(),
                        firstDayOfCurTerm - 1);

                // Remove the amount that will be expired in next year but has not been settled yet.
                broughtFwdCanCarryFwd = broughtFwdRemaining - sign(broughtFwdRemaining) * max(0, (abs(broughtFwdPostedWillBeExpiredNextYear) - abs(broughtFwdSettled)));
            }
        }
        else
        {
            broughtFwdCanCarryFwd = 0;
        }

        //
        // Current term part
        //
        if (curTermRemaining != 0)
        {
            curTermValidTo      = AssetAdvRuleExe_PreTaxDedCarryFwd_JP::calcValidToDate(
                _context.DepType,
                AssetDepPreTaxDeductionHelper_JP::determinOverUnderType(curTermRemaining),
                lastDayOfCurTerm);

            if (curTermValidTo > lastDayOfCurTerm)
            {
                curTermCanCarryFwd = curTermRemaining;
            }
            else
            {
                curTermCanCarryFwd = 0;
            }
        }

        // Add log. The log is not saved during above calculation. Save it now if there is any amount to carry forward.
        if (broughtFwdCanCarryFwd + curTermCanCarryFwd != 0)
        {
            lastYearValidTo = AssetAdvRuleExe_PreTaxDedCarryFwd_JP::calcValidToDate(
                _context.DepType,
                AssetDepPreTaxDeductionHelper_JP::determinOverUnderType(broughtFwdCanCarryFwd + curTermCanCarryFwd),
                lastDayOfCurTerm,
                _context);
        }

        //
        // The difference between the total and the rule allowed carry forward amount is the adjustment by rule
        //
        _context.CarryForwardOverUnderAmountRuleAdj = broughtFwdCanCarryFwd + curTermCanCarryFwd - totalRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPreTaxDeductionForAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the pre-tax deduction for <C>AssetBook</C>.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    public void calcPreTaxDeductionForAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        AssetDepPreTaxDedProcessContext_JP      assetDepPreTaxDedProcessContext;

        ttsBegin;

        while select forUpdate assetDepPreTaxDedProcessContext
            where assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP == assetDepPreTaxDedProcess.RecId
                && assetDepPreTaxDedProcessContext.AssetId                      == _assetId
                && assetDepPreTaxDedProcessContext.BookId                       == _bookId
        {
            this.calcPreTaxDeductionForContext(assetDepPreTaxDedProcessContext);
            assetDepPreTaxDedProcessContext.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPreTaxDeductionForContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the pre-tax deduction for context.
    /// </summary>
    /// <param name="_context">
    /// The context
    /// </param>
    public void calcPreTaxDeductionForContext(AssetDepPreTaxDedProcessContext_JP _context)
    {
        AssetBook assetBook = AssetBook::find(_context.AssetId, _context.BookId);
        AssetTableInterval assetTableInterval = _context.assetTableInterval();

        AssetDepPreTaxDedCalculator_JP assetDepPreTaxDedCalculator = AssetDepPreTaxDedCalculator_JP::construct(
            assetBook,
            _context.DepType,
            assetTableInterval);

        if (AssetDepPreTaxDedUsePostedTaxLayerAmountForAllowableLimit_JPFlight::instance().isEnabled())
        {
            _context.CurrentTermAllowableLimit = assetDepPreTaxDedCalculator.getPostedAmountYTD(assetDepPreTaxDedProcess.ProcessDate, CurrentOperationsTax::Tax);
        }
        else
        {
            AssetDepLimitCalculator_JP assetDepLimitCalculator = AssetDepLimitCalculator_JP::construct(
                assetBook,
                AssetDepPreTaxDeductionHelper_JP::depTypeToDepLimitType(_context.DepType),
                assetTableInterval.findFirstDayOfYear(assetDepPreTaxDedProcess.ProcessDate),
                assetDepPreTaxDedProcess);
            assetDepLimitCalculator.parmAssetTableInterval(assetTableInterval);
            assetDepLimitCalculator.init();

            _context.CurrentTermAllowableLimit = assetDepLimitCalculator.calcLimitForPeriodYTD(assetDepPreTaxDedProcess.ProcessDate);

            if (_context.DepType == AssetDepType_JP::OrdinaryDepreciation)
            {
                if (assetBook.DepreciationAcceleratedProfile_JP)
                {
                    AssetDepLimitCalculator_JP assetDepLimitCalculatorAcclerated = AssetDepLimitCalculator_JP::construct(
                        assetBook,
                        AssetDepLimitType_JP::AcceleratedDepreciation,
                        assetTableInterval.findFirstDayOfYear(assetDepPreTaxDedProcess.ProcessDate),
                        assetDepPreTaxDedProcess);
                    assetDepLimitCalculatorAcclerated.parmAssetTableInterval(assetTableInterval);
                    assetDepLimitCalculatorAcclerated.init();

                    _context.CurrentTermAllowableLimit += assetDepLimitCalculatorAcclerated.calcLimitForPeriodYTD(assetDepPreTaxDedProcess.ProcessDate);
                }
            }
        }

        _context.CurrentTermCurrentLayerPostedAmount = assetDepPreTaxDedCalculator.getPostedAmountYTD(assetDepPreTaxDedProcess.ProcessDate, CurrentOperationsTax::Current);

        _context.BroughtForwardOverUnderAmount       = assetDepPreTaxDedCalculator.getBroughtForwardOverUnderAmount(_context.DepType, assetDepPreTaxDedProcess.ProcessDate);
        _context.CurrentTermOverUnderAmount          = assetDepPreTaxDedCalculator.calcOverUnderDepAmount(
            _context.CurrentTermAllowableLimit,
            _context.CurrentTermCurrentLayerPostedAmount);

        _context.InclusionByOverUnderDepreciation    = assetDepPreTaxDedCalculator.calcInclusionByOverUnderDep(
            _context.BroughtForwardOverUnderAmount,
            _context.CurrentTermOverUnderAmount);

        _context.CurrentTermPreTaxDedAmount = abs(_context.InclusionByOverUnderDepreciation)
            + assetDepPreTaxDedCalculator.calcPreTaxDeductionAmount(
                _context.CurrentTermAllowableLimit,
                _context.CurrentTermCurrentLayerPostedAmount);

        _context.CurrentTermOverUnderAmount  = assetDepPreTaxDedCalculator.calcOverUnderDepAmount(
                _context.CurrentTermAllowableLimit,
                _context.CurrentTermCurrentLayerPostedAmount);

        // The logic of using allocation to adjust over depreciation carry forward comes from 16-1 & 16-2 reports.
        // In these reports, the special part is only considered when the tax layer is using direct-off method.
        // So here only needs to init the allocation amount for below 3 types of depreciation.
        if (_context.DepType    == AssetDepType_JP::OrdinaryDepreciation
            || _context.DepType == AssetDepType_JP::AdditionalDepreciationWithDirectOff
            || _context.DepType == AssetDepType_JP::SpecialDepreciationWithDirectOff)
        {
            _context.ReserveAllocationAmount = assetDepPreTaxDedCalculator.getReserveAllocationAmountYTD(assetDepPreTaxDedProcess.ProcessDate, CurrentOperationsTax::Current);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and posts the journal.
    /// </summary>
    protected void createAndPostJournal()
    {
        AssetDepPreTaxDedProcessContext_JP  assetDepPreTaxDedProcessContext;
        LedgerJournalTable                  ledgerJournalTable;
        boolean                             hasLineCreated;
        AssetDepPreTaxDedCalculator_JP      assetDepPreTaxDedCalculator;
        AssetDepPreTaxDedJournalizer_JP     assetDepPreTaxDedJournalizer;
        LineNum journalLineNum;

        ttsBegin;

        while select forUpdate assetDepPreTaxDedProcessContext
            where assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP == assetDepPreTaxDedProcess.RecId
        {
            assetDepPreTaxDedCalculator = AssetDepPreTaxDedCalculator_JP::construct(
                AssetBook::find(assetDepPreTaxDedProcessContext.AssetId, assetDepPreTaxDedProcessContext.BookId),
                assetDepPreTaxDedProcessContext.DepType,
                assetDepPreTaxDedProcessContext.assetTableInterval());

            assetDepPreTaxDedProcessContext.CurrentTermTaxLayerPostedAmount = assetDepPreTaxDedCalculator.getPostedAmountYTD(
                assetDepPreTaxDedProcess.ProcessDate,
                CurrentOperationsTax::Tax);

            if (assetDepPreTaxDedProcessContext.CurrentTermPreTaxDedAmount != assetDepPreTaxDedProcessContext.CurrentTermTaxLayerPostedAmount)
            {
                // Create the journal if not created yet
                if (ledgerJournalTable.RecId == 0)
                {
                    ledgerJournalTable.JournalName      = assetDepPreTaxDedProcess.LedgerJournalName;
                    ledgerJournalTable.SystemBlocked    = NoYes::Yes;
                    ledgerJournalTable.insert();

                    assetDepPreTaxDedProcess.LedgerJournalTable = ledgerJournalTable.JournalNum;
                    assetDepPreTaxDedProcess.update();
                }

                assetDepPreTaxDedProcessContext.CurrentTermTaxLayerNewAmountToPost = assetDepPreTaxDedProcessContext.CurrentTermPreTaxDedAmount
                    - assetDepPreTaxDedProcessContext.CurrentTermTaxLayerPostedAmount;

                assetDepPreTaxDedJournalizer = AssetDepPreTaxDedJournalizer_JP::construct(
                    AssetBook::find(assetDepPreTaxDedProcessContext.AssetId, assetDepPreTaxDedProcessContext.BookId),
                    assetDepPreTaxDedProcessContext.DepType);

                journalLineNum++;

                assetDepPreTaxDedJournalizer.parmJournalLineNum(journalLineNum);
                assetDepPreTaxDedJournalizer.createTrans(
                    ledgerJournalTable.JournalNum,
                    -1 * assetDepPreTaxDedProcessContext.CurrentTermTaxLayerNewAmountToPost,
                    assetDepPreTaxDedProcess.ProcessDate);

                hasLineCreated = true;
            }

            assetDepPreTaxDedProcessContext.update();
        }

        ttsCommit;

        // Post journal
        if (hasLineCreated)
        {
            // Unlock journal
            update_recordset ledgerJournalTable
                setting SystemBlocked = NoYes::No
                    where ledgerJournalTable.JournalNum       == assetDepPreTaxDedProcess.LedgerJournalTable
                        && ledgerJournalTable.SystemBlocked   == NoYes::Yes;

            LedgerJournalPost::postJournal(
                LedgerJournalTable::find(assetDepPreTaxDedProcess.LedgerJournalTable),
                NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrePostValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the validation before posting.
    /// </summary>
    protected void doPrePostValidation()
    {
        AssetDepPreTaxDedProcessContext_JP          assetDepPreTaxDedProcessContext;
        AssetDepPreTaxDedProcessContext_JP          assetDepPreTaxDedProcessContextDel;
        boolean                                     hasNewIgnoredTask;

        while select AssetId, BookId from assetDepPreTaxDedProcessContext
            group by AssetId, BookId
            where assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP == assetDepPreTaxDedProcess.RecId
        {
            // During the processing, the "last process date" for some asset value model may be changed due some reason. Like some other process posted.
            // So validate the task again before posting.
            if (!this.validateTask(AssetBook::find(assetDepPreTaxDedProcessContext.AssetId, assetDepPreTaxDedProcessContext.BookId)))
            {
                hasNewIgnoredTask = true;

                delete_from assetDepPreTaxDedProcessContextDel
                    where assetDepPreTaxDedProcessContextDel.AssetDepPreTaxDedProcess_JP    == assetDepPreTaxDedProcess.RecId
                        && assetDepPreTaxDedProcessContextDel.AssetId                       == assetDepPreTaxDedProcessContext.AssetId
                        && assetDepPreTaxDedProcessContextDel.BookId                        == assetDepPreTaxDedProcessContext.BookId;
            }
        }

        if (hasNewIgnoredTask)
        {
            // The fixed assets that are not eligible for settlement are included in the ignored fixed asset list
            info("@SYP4881528");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the process.
    /// </summary>
    public void finalizeProcess()
    {
        this.updateProcessStatus(AssetDepPreTaxDedProcessStatus_JP::Draft);

        // Post journal if needed.
        if (assetDepPreTaxDedProcess.AutoPost)
        {
            this.postProcess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContextForAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes context for <C>AssetBook</C>.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    public void initContextForAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        AssetDepPreTaxDedProcessContext_JP      context;
        AssetBook                               assetBook = AssetBook::find(_assetId, _bookId);
        AssetDepType_JP                         specialDepType;

        // Oridinary depreciation
        context.AssetDepPreTaxDedProcess_JP = assetDepPreTaxDedProcess.RecId;
        context.AssetId                     = _assetId;
        context.BookId                      = _bookId;
        context.DepType                     = AssetDepType_JP::OrdinaryDepreciation;
        context.insert();

        // Special depreciation
        specialDepType = assetBook.determinSpecialDepType_JP();
        if (specialDepType != AssetDepType_JP::OrdinaryDepreciation)
        {
            context.DepType = specialDepType;
            context.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialises status to InReview.
    /// </summary>
    public void initForReview()
    {
        if (assetDepPreTaxDedProcess.Status == AssetDepPreTaxDedProcessStatus_JP::Draft)
        {
            this.updateProcessStatus(AssetDepPreTaxDedProcessStatus_JP::InReview);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the process
    /// </summary>
    public void initProcess()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <C>AssetDepPreTaxDedProcess_JP</C> class.
    /// </summary>
    /// <param name="_assetDepPreTaxDedProcess">
    /// The <C>AssetDepPreTaxDedProcess_JP</C>
    /// </param>
    protected void new(AssetDepPreTaxDedProcess_JP _assetDepPreTaxDedProcess)
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        if (FormDataUtil::isFormDataSource(_assetDepPreTaxDedProcess))
        {
            formDataSourceOfProcess = FormDataUtil::getFormDataSource(_assetDepPreTaxDedProcess);
        }

        if (_assetDepPreTaxDedProcess.selectForUpdate())
        {
            assetDepPreTaxDedProcess = _assetDepPreTaxDedProcess;
        }
        else
        {
            assetDepPreTaxDedProcess = AssetDepPreTaxDedProcess_JP::find(_assetDepPreTaxDedProcess.RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEntityTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts entity transactions.
    /// </summary>
    protected void postEntityTrans()
    {
        AssetDepEntityPost_PreTaxDeduction_JP       entityPost;
        AssetDepPreTaxDedProcessContext_JP          assetDepPreTaxDedProcessContext;
        AssetDepEntityType_JP                       entityType;
        AssetId                                     curAssetId;
        AssetBookId                                 curBookId;
        AssetTableInterval                          assetTableInterval;
        boolean                                     isNewAssetBook;

        while select assetDepPreTaxDedProcessContext
            order by AssetId, BookId
            where assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP == assetDepPreTaxDedProcess.RecId
        {
            ttsBegin;

            isNewAssetBook = false;
            if (assetDepPreTaxDedProcessContext.AssetId     != curAssetId
                || assetDepPreTaxDedProcessContext.BookId   != curBookId)
            {
                curAssetId      = assetDepPreTaxDedProcessContext.AssetId;
                curBookId       = assetDepPreTaxDedProcessContext.BookId;
                isNewAssetBook  = true;
            }

            entityType          = AssetDepPreTaxDeductionHelper_JP::depTypeToDepEntityType(assetDepPreTaxDedProcessContext.DepType);
            assetTableInterval  = assetDepPreTaxDedProcessContext.assetTableInterval();

            entityPost = AssetDepEntityPost_PreTaxDeduction_JP::construct(
                assetDepPreTaxDedProcessContext.AssetId,
                assetDepPreTaxDedProcessContext.BookId,
                assetTableInterval,
                assetDepPreTaxDedProcess);

            // Revert previous process trans in this year for each asset value model
            if (isNewAssetBook)
            {
                entityPost.revertAllTransInCurYear(assetDepPreTaxDedProcess.ProcessDate);
            }

            // Save the adjustment for brought forward
            entityPost.postBalanceAdjForCarryForward(
                entityType,
                assetDepPreTaxDedProcessContext.editBroughtFwdOverUnderAmount(),
                assetTableInterval.findFirstDayOfYear(assetDepPreTaxDedProcess.ProcessDate) - 1);

            // Save origional pre tax deduction info for current term
            entityPost.post(
                entityType,
                assetDepPreTaxDedProcess.ProcessDate,
                assetDepPreTaxDedProcessContext.CurrentTermOverUnderAmount,
                assetDepPreTaxDedProcess.ProcessDate,
                AssetDepEntityTransType_JP::OverUnderDepreciation);

            // Post inclusion by over/under depreciation
            entityPost.postInclusionByOverUnderDep(
                entityType,
                assetDepPreTaxDedProcessContext.InclusionByOverUnderDepreciation,
                assetDepPreTaxDedProcess.ProcessDate);

            // Save settlement info
            this.postSettlementDetails(assetDepPreTaxDedProcessContext);

            // Save the remaining adjustment
            entityPost.post(
                entityType,
                assetDepPreTaxDedProcess.ProcessDate,
                assetDepPreTaxDedProcessContext.TotalRemainingOverUnderAmountManualAdj,
                assetDepPreTaxDedProcess.ProcessDate,
                AssetDepEntityTransType_JP::OverUnderDepreciation,
                true);

            // Save the final carry forward info
            entityPost.postBalanceAdjForCarryForward(
                entityType,
                assetDepPreTaxDedProcessContext.editCarryFwdOverUnderAmount(),
                assetTableInterval.findLastDayOfYear(assetDepPreTaxDedProcess.ProcessDate));

            // Update asset book status
            this.updateAssetBookStatusAfterContextPosted(assetDepPreTaxDedProcessContext);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts process.
    /// </summary>
    public void postProcess()
    {
        ttsBegin;

        //
        // Validate the whole process before posting.
        //
        this.doPrePostValidation();

        //
        // Save over under depreciation info
        //
        this.postEntityTrans();

        //
        // Post journal
        //
        this.createAndPostJournal();

        //
        // Update process status
        //
        this.updateProcessStatus(AssetDepPreTaxDedProcessStatus_JP::Posted);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlementDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts settlement details.
    /// </summary>
    /// <param name="_assetDepPreTaxDedProcessContext">
    /// The context instance
    /// </param>
    protected void postSettlementDetails(AssetDepPreTaxDedProcessContext_JP _assetDepPreTaxDedProcessContext)
    {
        AssetDepPreTaxDedProcessSettlement_JP   assetDepPreTaxDedProcessSettlement;
        AssetDepEntityPost_PreTaxDeduction_JP   entityPost;
        AssetDepEntityType_JP                   entityType;

        entityPost = AssetDepEntityPost_PreTaxDeduction_JP::construct(
            _assetDepPreTaxDedProcessContext.AssetId,
            _assetDepPreTaxDedProcessContext.BookId,
            _assetDepPreTaxDedProcessContext.assetTableInterval(),
            assetDepPreTaxDedProcess);

        entityType = AssetDepPreTaxDeductionHelper_JP::depTypeToDepEntityType(_assetDepPreTaxDedProcessContext.DepType);

        // Note, for same <_assetId, _bookId>, all AssetDepPreTaxDedProcessSettlement_JP record should be created at the same AOS,
        // so the RecId order is the same to the record created order.
        while select assetDepPreTaxDedProcessSettlement
            where assetDepPreTaxDedProcessSettlement.AssetDepPreTaxDedProcessContext_Over   == _assetDepPreTaxDedProcessContext.RecId
                || assetDepPreTaxDedProcessSettlement.AssetDepPreTaxDedProcessContext_Under == _assetDepPreTaxDedProcessContext.RecId
        {
            // Post entity trans for over part
            if (assetDepPreTaxDedProcessSettlement.AssetDepPreTaxDedProcessContext_Over == _assetDepPreTaxDedProcessContext.RecId)
            {
                entityPost.postForEntityType(
                    entityType,
                    -1 * assetDepPreTaxDedProcessSettlement.AccountingCurrencyAmount,
                    assetDepPreTaxDedProcess.ProcessDate,
                    AssetDepEntityTransType_JP::OverUnderDepSettlement);
            }

            // Post entity trans for under part
            if (assetDepPreTaxDedProcessSettlement.AssetDepPreTaxDedProcessContext_Under == _assetDepPreTaxDedProcessContext.RecId)
            {
                entityPost.postForEntityType(
                    entityType,
                    assetDepPreTaxDedProcessSettlement.AccountingCurrencyAmount,
                    assetDepPreTaxDedProcess.ProcessDate,
                    AssetDepEntityTransType_JP::OverUnderDepSettlement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs steps by asset id and book id from AssetBook
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    public void runForAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        // Init context
        this.initContextForAssetBook(_assetId, _bookId);

        // Calculate pre tax deduction for each depreciation type
        this.calcPreTaxDeductionForAssetBook(_assetId, _bookId);

        // Apply settlement rules
        this.applySettlementRulesForAssetBook(_assetId, _bookId);

        // Apply carry forward rules
        this.applyCarryForwardRulesForAssetBook(_assetId, _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetBookStatusAfterContextPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <C>AssetBook</C>status after context posted.
    /// </summary>
    /// <param name="_context">
    /// The context instance
    /// </param>
    protected void updateAssetBookStatusAfterContextPosted(AssetDepPreTaxDedProcessContext_JP _context)
    {
        AssetBook           assetBook;
        AssetTableInterval  assetTableInterval;

        if (_context.DepType    == AssetDepType_JP::AdditionalDepreciationWithReserve
            || _context.DepType == AssetDepType_JP::AdditionalDepreciationWithDirectOff)
        {
            assetBook = AssetBook::find(_context.AssetId, _context.BookId, true);

            if (assetBook && assetBook.SpecialDepStartDate_JP == dateNull())
            {
                assetTableInterval = _context.assetTableInterval();

                ttsBegin;
                assetBook.SpecialDepStartDate_JP = assetTableInterval.findFirstDayOfYear(assetDepPreTaxDedProcess.ProcessDate);
                assetBook.update();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates process status.
    /// </summary>
    /// <param name="_newStatus">
    /// The new status
    /// </param>
    protected void updateProcessStatus(AssetDepPreTaxDedProcessStatus_JP _newStatus)
    {
        if (assetDepPreTaxDedProcess.Status != _newStatus)
        {
            ttsBegin;

            assetDepPreTaxDedProcess.Status = _newStatus;
            assetDepPreTaxDedProcess.update();

            if (formDataSourceOfProcess)
            {
                formDataSourceOfProcess.reread();
                formDataSourceOfProcess.refresh();
                formDataSourceOfProcess.active();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the task.
    /// </summary>
    /// <param name="_assetBook">
    /// The asset book table
    /// </param>
    /// <param name="_addToIgnoreListIfInvalid">
    /// Add to ignore list if the task is invalid, defaulted true.
    /// </param>
    /// <returns>
    /// Returns true if valid, otherwise false
    /// </returns>
    public boolean validateTask(
        AssetBook   _assetBook,
        boolean     _addToIgnoreListIfInvalid = true)
    {
        boolean                             ret = true;
        AssetTransDate                      lastPostedDate;
        AssetTransDate                      lastDayOfLastPostedYear;
        AssetTableInterval                  assetTableInterval;
        AssetDepPreTaxDedProcessIgnored_JP  assetDepPreTaxDedProcessIgnored;

        lastPostedDate = AssetDepPreTaxDedProcess_JP::getLastPostedDate(_assetBook.AssetId, _assetBook.BookId);
        if (lastPostedDate == dateNull())
        {
            // Not already post in any process yet, then the new post must:
            // 1. in the same year of depreciation start date.
            // 2. or in the previous year of the depreciation start date, in case current layer starts depreciation
            //    earlier than tax layer.
            assetTableInterval = _assetBook.AssetDepBookMap_JP::assetTableInterval(_assetBook.DepreciationStartDate);
            if (assetTableInterval.findLastDayOfYear(_assetBook.DepreciationStartDate) < assetDepPreTaxDedProcess.ProcessDate)
            {
                ret = false;
            }
        }
        else
        {
            // Already posted in process, then the new post must:
            // 1. Later than the posted date, or the same, but cannot be earlier.
            // 2. If the last posted date is not the end day of the year, new post date must in the same year of the last posted date,
            // 3. If the last posted date is the end day of the year, new post date must in the next year of the last posted date, or the same to the last posted date.
            if (lastPostedDate > assetDepPreTaxDedProcess.ProcessDate)
            {
                // New task must later than the last posted date.
                ret = false;
            }
            else
            {
                assetTableInterval      = _assetBook.AssetDepBookMap_JP::assetTableInterval(lastPostedDate);
                lastDayOfLastPostedYear = assetTableInterval.findLastDayOfYear(lastPostedDate);
                if (lastPostedDate < lastDayOfLastPostedYear)
                {
                    ret = (assetDepPreTaxDedProcess.ProcessDate <= lastDayOfLastPostedYear);
                }
                else if (lastPostedDate == lastDayOfLastPostedYear)
                {
                    if (assetDepPreTaxDedProcess.ProcessDate != lastPostedDate
                        && (assetTableInterval.findFirstDayOfYear(assetDepPreTaxDedProcess.ProcessDate) != lastDayOfLastPostedYear + 1))
                    {
                        ret = false;
                    }
                }
            }
        }

        if (!ret && _addToIgnoreListIfInvalid)
        {
            try
            {
                assetDepPreTaxDedProcessIgnored.AssetDepPreTaxDedProcess_JP = assetDepPreTaxDedProcess.RecId;
                assetDepPreTaxDedProcessIgnored.AssetId                     = _assetBook.AssetId;
                assetDepPreTaxDedProcessIgnored.BookId                      = _assetBook.BookId;
                assetDepPreTaxDedProcessIgnored.IgnoreReason                = AssetDepPreTaxDedProcessIgnoreReason_JP::InvalidPeriod;
                assetDepPreTaxDedProcessIgnored.insert();
            }
            catch (Exception::DuplicateKeyException)
            {
                // No need to insert if it alreay exists.
                // Clear the last infolog message, which is created by trying to insert a duplicate record.
                infolog.clear(Global::infologLine() - 1);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs
    /// </summary>
    /// <param name="_assetDepPreTaxDedProcess">
    /// the process instance
    /// </param>
    /// <returns>
    /// Returns the initialized instance
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throw exceptions when no process records
    /// </exception>
    public static AssetDepPreTaxDedProcessor_JP construct(AssetDepPreTaxDedProcess_JP _assetDepPreTaxDedProcess)
    {
        AssetDepPreTaxDedProcessor_JP   ret;

        if (_assetDepPreTaxDedProcess.RecId == 0)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ret = new AssetDepPreTaxDedProcessor_JP(_assetDepPreTaxDedProcess);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>