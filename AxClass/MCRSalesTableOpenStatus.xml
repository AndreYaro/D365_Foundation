<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesTableOpenStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRSalesTableOpenStatus</c> class allows a user to select open sales orders and run them through the end order process.
/// </summary>
class MCRSalesTableOpenStatus extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase       dialog;
    QueryRun            query;
    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dailog of sales order open status.
    /// </summary>
    /// <returns>The dailog object.</returns>
    public Object dialog()
    {
        dialog = super();

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogQueryButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a button to the dialog.
    /// </summary>
    public void dialogQueryButton()
    {
        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RunbaseQueryDialog), DialogMenuItemGroup::BottomGrp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variable for the <c>MCRSalesTableOpenStatus</c> class.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        query = new QueryRun(queryStr(MCRSalesTableOpenStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SalesTable salesTable;
        int i = 0;
        boolean submitted;

        if (!this.validate())
            throw error("");

        setPrefix("@MCR23010");
        try
        {
            while (query.next() && i == 0)
            {
                //  Submits the sales order for "end order" logic, which includes submitting

                salesTable = query.get(tableNum(SalesTable));
                try
                {
                    submitted = MCREndOrder::endOrder(salesTable.SalesId);
                    if (submitted)
                    {
                        // Write the info log with order that was submitted.
                        info(strFmt("@MCR23009", salesTable.SalesId));
                    }
                    else
                    {
                        info(strFmt("@MCR23012", salesTable.SalesId));
                    }
                }
                catch
                {
                    // continue executing this method if an exception is thrown

                    //  (Some data might have been updated before the exception was thrown --
                    //   always re-execute the query to obtain the updated data.)
                    Global::exceptionTextFallThrough();
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        info("@MCR23011");
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version] =  packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the sales status is open.
    /// </summary>
    /// <param name="calledFrom">
    /// The form to be called; optional.
    /// </param>
    /// <returns>
    /// false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        if (false)
            return checkFailed("");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRSalesTableOpenStatus construct()
    {
        return new MCRSalesTableOpenStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR23024";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRSalesTableOpenStatus    mcrSalesTableOpenStatus;
        mcrSalesTableOpenStatus = MCRSalesTableOpenStatus::construct();

        if (mcrSalesTableOpenStatus.prompt())
            mcrSalesTableOpenStatus.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// This batch job is not retryable because MCREndOrder::endOrder is not wrapped with a transaction.
    /// </summary>
    /// <returns>An instance of BatchInfo with the configuration for retryable and retries.</returns>
    public BatchInfo batchInfo()
    {
        BatchInfo info = super();

        info.parmRetryable(false);
        info.parmRetriesOnFailure(0);

        return info;
    }

]]></Source>
			</Method>

		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>