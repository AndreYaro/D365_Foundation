<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastPostItem extends ProjForecastPost
{
    ForecastSales   forecastSales;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateTransBudget</Name>
				<Source><![CDATA[
    protected boolean canCreateTransBudget()
    {
        boolean ret = false;

        if ((forecastSales.ExpandId == 0 && forecastSales.AllocateMethod == BudgetAllocateMethod::None) ||
            (forecastSales.ExpandId != 0))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteTransBudget</Name>
				<Source><![CDATA[
    protected boolean canDeleteTransBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditCost</Name>
				<Source><![CDATA[
    protected boolean checkCreditCost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
    protected boolean checkEnterCost()
    {
        boolean ret = super();

        if (ret)
        {
            if (projTrans.transCost() == 0)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterNeverLedger</Name>
				<Source><![CDATA[
    protected boolean checkEnterNeverLedger()
    {
        if (this.forecastUpdateType() == ProjForecastUpdateType::Journals)
        {
            if (!ProjForecastPostItemCostNonStockedFlight::instance().isEnabled() && !this.postOnhandFinancial())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType costPostingType()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
            case ProjLedgerStatus::Operations:
                ledgerPostingType = LedgerPostingType::ProjCost;
                break;

            default:
                if (this.shouldThrowInvalidCostLedgerStatusErrorForItem())
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowInvalidCostLedgerStatusErrorForItem</Name>
				<Source><![CDATA[
    protected boolean shouldThrowInvalidCostLedgerStatusErrorForItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger account that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <param name="_categoryID">
    /// The project category id value.
    /// </param>
    /// <returns>
    /// The ledger account used for posting the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCost(ProjFundingSourceRefId _fundingSourceId, ProjCategoryId _categoryID = '')
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        switch (this.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
            case ProjLedgerStatus::Operations:
                ledgerAccount = projTrans.costAccountLedgerDimension(_fundingSourceId);
                break;

            default:
                if (this.shouldThrowInvalidCostLedgerStatusErrorForItem())
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentDate</Name>
				<Source><![CDATA[
        // Method to get the payment date as per the crieteria
    public TransDate getPaymentDate(LedgerPostingType _postingType)
    {
        TransDate paymentDate;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjNeverLedger,
                 LedgerPostingType::ProjCost:
                paymentDate = forecastSales.ProjForecastCostPaymDate;
                break;

            case LedgerPostingType::ProjTurnover:
                paymentDate = forecastSales.ProjForecastSalesPaymDate;
                break;
        }

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentStatus</Name>
				<Source><![CDATA[
        // Method to get the payment status as per the crieteria
    public ProjPaymentStatus getPaymentStatus(LedgerPostingType _postingType)
    {
        ProjPaymentStatus paymentStatus;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjNeverLedger,
                 LedgerPostingType::ProjCost,
                 LedgerPostingType::ProjTurnover:
                paymentStatus = ProjPaymentStatus::Paid;
                break;

            case LedgerPostingType::ProjOffsetAccountItem,
                 LedgerPostingType::ProjStatusAccountItem,
                 LedgerPostingType::ProjSalesvalue,
                 LedgerPostingType::ProjSalesvalueOffset:
                paymentStatus = ProjPaymentStatus::NoPayment;
                break;
        }

        return paymentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    ProjLedgerStatus ledgerStatusCost()
    {
        ProjLedgerStatus itemLS;
        if (isMultipleContractLineFeatureEnabled)
        {
            itemLS = this.isIncludedInProjectContractForMultipleContractLines(projTable, ProjTransType::Item) ?
                ProjRevRecHelper::item2LedgerStatus(projRevProfile.ItemLedgerStatus) : ProjLedgerStatus::Operations;
        }
        else
        {
            itemLS = projGroup.ItemTransCost;
        }

        return itemLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelId</Name>
				<Source><![CDATA[
    ForecastModelId modelId()
    {
        return projTrans.forecastModelId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        forecastSales  = _buffer;
        projTrans           = ProjTrans::newForecastSales(forecastSales);
        this.parmContractLineItems(forecastSales.getContractLineItems());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNeverLedger</Name>
				<Source><![CDATA[
    void postNeverLedger()
    {
        MapEnumerator   fundingAllocationEnumerator;
        Map             splitTransQty;

        this.accountNum(0);
        this.postingType(LedgerPostingType::ProjNeverLedger);
        this.costSales(ProjCostSales::Cost);

        this.ledgerTransDate(projTrans.transDate());

        if (projTrans.transCostMST() != 0)
        {
            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCostMST(), projTrans.currencyIdCost()).getEnumerator();
            splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
            while (fundingAllocationEnumerator.moveNext())
            {
                this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                this.amountMST(fundingAllocationEnumerator.currentValue());
                this.createForecastPosting(fundingAllocationEnumerator.currentKey());
            }
        }
        else
        {
            this.createForecastPosting(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOnhandFinancial</Name>
				<Source><![CDATA[
    boolean postOnhandFinancial()
    {
        if (forecastSales.ProjForecastBudgetType != ProjForecastBudgetType::None)
        {
            return true;
        }
        else if (forecastSales.ItemAllocateId &&
            forecastSales.ItemAllocateId == ProjParameters::find().DefaultForecastItemAllocation)
        {
            return true;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public ProjQty qty(ProjQty  _qty  = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplItemId</Name>
				<Source><![CDATA[
    ProjEmplItemId setEmplItemId()
    {
        return projTrans.itemId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>