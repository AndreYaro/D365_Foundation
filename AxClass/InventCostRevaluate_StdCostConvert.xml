<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostRevaluate_StdCostConvert</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostRevaluate_StdCostConvert</c> class generates the inventory cost transactions
///    during a standard cost conversion.
/// </summary>

class InventCostRevaluate_StdCostConvert extends InventCostRevaluate
{
    CostAmount      prevCostAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initActCostList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the actual cost.
    /// </summary>
    /// <remarks>
    ///    The actual cost in the case of a conversion and the current inventory cost.These are passed into
    ///    this class by a new parameter method and is assigned to the variable <c>prevCostAmount</c>, which
    ///    will be used to initialize the total line in the actual cost list.
    /// </remarks>
    protected void initActCostList()
    {
        InventCostTransVariance     costTransVariance;

        // Initialize the list
        actCostList = InventCostTransCostList::construct();

        costTransVariance.CostGroupId  = inventTable.costGroup();
        costTransVariance.Level        = InventCostLevel::Total;
        costTransVariance.Split        = NoYes::No;
        costTransVariance.VarianceType = InventCostVarianceType::Revaluation;

        this.initCostAmount(costTransVariance);

        actCostList.insert(costTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes cost amount field depending on cyrrency type.
    /// </summary>
    /// <param name = "_costTransVariance">The <c>InventCostTransVariance</c> table.</param>
    protected void initCostAmount(InventCostTransVariance _costTransVariance)
    {
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            _costTransVariance.CostAmount   = prevCostAmount;
        }
        else if (inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
        {
            _costTransVariance.CostAmountSecCur_RU = prevCostAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevCostAmount</Name>
				<Source><![CDATA[
    public CostAmount parmPrevCostAmount(CostAmount _prevCostAmount = prevCostAmount)
    {
        prevCostAmount = _prevCostAmount;

        return prevCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCostTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the transactions that need to be revaluated.
    /// </summary>

    protected void processCostTransList()
    {
        // Records
        InventCostTrans                 costTrans;

        // Control variables
        boolean                         found;
        boolean                         callUpdate;

        callUpdate = false;

        found = inventCostTransList.first(costTrans);
        while (found)
        {
            // If at least one record has been found,
            // I need to pass them to the update framework
            callUpdate = true;

            // For the first time, initialize all the variables
            // I need to preform the processing
            if (!processInitialized)
            {
                this.initProcess();
            }

            if (revaluationByPosting)
            {
                this.addToTransRevalListByPosting(inventCostTransRevalNewList,
                                     costTransNew,
                                     costTrans.FinancialInventDimId,
                                     costTrans.getQtyFields(),
                                     InventCostTransType::Receipt,
                                     costTrans.TransRefId,
                                     costTrans.revaluationDefaultDimension(inventTable),
                                     costTrans.InventTransId);
            }
            else
            {
                // Add the new record
                this.addToTransRevalList(inventCostTransRevalNewList,
                                     costTransNew,
                                     costTrans.FinancialInventDimId,
                                     costTrans.getQtyFields(),
                                     InventCostTransType::Receipt,
                                     costTrans.TransRefId,
                                     costTrans.revaluationDefaultDimension(inventTable));
            }

            found = inventCostTransList.next(costTrans);
        }

        // Now, all the lists have been filled, hand them over to the
        // inventCostUpdate framework
        // First of all, the prev cost trans records. No variance has to be created for them
        if (callUpdate)
        {
            // Post to ledger
            // <GEERU>
            InventCostPost::post(ledgerVoucher, inventTable, inventCostTransRevalNewList, inventCostTransVarianceMap, InventAdjustmentSpec::Total, inventTransCurrency);
            // </GEERU>

            // Add to inventCost framework
            InventCostUpdateGlobal::Instance().inventCostUpdate().finalizeCostTransVariance(inventCostTransRevalNewList, inventCostTransVarianceMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the currently processed item needs to be revaluated.
    /// </summary>
    /// <returns>
    ///    A Boolean flag indicating if there is something to revaluate.
    /// </returns>

    protected boolean validate()
    {
        if ( ! (inventTable.inventItemType().mustInventBeControlled() &&
                inventItemPrice.ItemId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostRevaluate_StdCostConvert construct()
    {
        return new InventCostRevaluate_StdCostConvert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a new instance of the <c>inventCostRevaluate_StdCostConvert</c> class.
    /// </summary>
    /// <param name="_inventTable">
    ///    The inventory table record for the item that should be converted.
    /// </param>
    /// <param name="_inventItemPrice">
    ///    The item price record for the item that should be converted.
    /// </param>
    /// <param name="_inventCostTransList">
    ///    The inventory cost transaction list that is holding the on-hand and deferred cost of goods sold
    ///    quantity that should be converted.
    /// </param>
    /// <param name="_prevCostAmount">
    ///    The inventory value based on the old inventory framework.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The <see cref="LedgerVoucher Class" />, to which the ledger postings should be added.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// The transaction currency: primary (default) or secondary - used for Dual Warehousing
    /// </param>
    /// <returns>
    ///    An initialized instance of the <see cref="InventCostRevaluate_StdCostConvert Class" />.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    If one of the caller parameters is missing, the operation can not be continued.
    /// </exception>

    public static InventCostRevaluate_StdCostConvert newFromParameters(
                                                         InventTable           _inventTable,
                                                         InventItemPrice       _inventItemPrice,
                                                         InventCostTransList   _inventCostTransList,
                                                         CostAmount            _prevCostAmount,
                                                         LedgerVoucher         _ledgerVoucher
                                                         ,
                                                         InventTransCurrency_RU _inventTransCurrency  = InventTransCurrency_RU::PrimaryCur
                                                         )
    {
        InventCostRevaluate_StdCostConvert      inventCostRevaluate;

        // A ledgerVoucher needs to be passed
        if ( ! _ledgerVoucher || ! _inventItemPrice || ! _inventTable || ! _inventCostTransList)
        {
            throw error("@SYS25407");
        }

        inventCostRevaluate = InventCostRevaluate_StdCostConvert::construct();

        inventCostRevaluate.parmLedgerVoucher(_ledgerVoucher);
        inventCostRevaluate.parmInventTable(_inventTable);
        inventCostRevaluate.parmInventCostTransList(_inventCostTransList);
        inventCostRevaluate.parmInventItemPrice(_inventItemPrice);
        inventCostRevaluate.parmPrevCostAmount(_prevCostAmount);
        // <GEERU>
        inventCostRevaluate.parmInventTransCurrency_RU(_inventTransCurrency);
        // </GEERU>

        return inventCostRevaluate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>