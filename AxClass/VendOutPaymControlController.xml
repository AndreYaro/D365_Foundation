<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymControlController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendOutPaymControlController</c> is the controller class for the <c>VendOutPaymControl</c> report.
/// </summary>
public class VendOutPaymControlController extends SRSReportRunController implements BatchRetryable
{
    // worker class
    private CustVendOutPaym custVendOutPaym;

    // source data containers
    private CustVendOutPaymRecord outPaymRecord;
    private LedgerJournalTrans ledgerJournalTrans;

    // temporary data stores
    private CustVendOutTmp vendOutPaymControlTmp;

    // internal parameter caches
    private RecId tmpTableDataRecId;
    private RecId tmpSummaryDataRecId;

    private SRSPrintDestinationSettings printDestinationSetting;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    private void fetch()
    {
        boolean getTotals = false;
        TmpAccountSum tmpAccountSum;

        // iterate through the list of VendOutPaymRecords
        ListEnumerator enumOutPaymRecords = custVendOutPaym.getOutPaymRecords().getEnumerator();
        while (enumOutPaymRecords.moveNext())
        {
            // access the current VendOutPaymRecord
            outPaymRecord = enumOutPaymRecords.current();

            // access the current LedgerJournalTrans
            ledgerJournalTrans = outPaymRecord.parmCustVendPaym().ledgerJournalTrans();

            // insert this data row into the Temp data store
            this.insert();

            // note, that we'll need to include total calculations
            getTotals = true;
        }

        // cache all of the table data records
        tmpTableDataRecId = this.storeTmpTable(vendOutPaymControlTmp);

        // check to see if Account Summary information is required
        if (getTotals)
        {
            // cache all of the account summary data records
            tmpAccountSum.setTmpData(custVendOutPaym.getSumByCurrency());
        }

        tmpSummaryDataRecId = this.storeTmpTable(tmpAccountSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryDataRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID that is associated with the account summary information.
    /// </summary>
    /// <returns>
    /// The record ID that is associated with the account summary information.
    /// </returns>
    public RecId getSummaryDataRecId()
    {
        return tmpSummaryDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableDataRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID that is associated with the report body information.
    /// </summary>
    /// <returns>
    /// The record ID that is associated with the report body information.
    /// </returns>
    public RecId getTableDataRecId()
    {
        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>VendOutPaymControl</c> class.
    /// </summary>
    /// <param name="_custVendOutPaym">
    /// An instance of the <c>CustVendOutPaym</c> class.
    /// </param>
    public void init(CustVendOutPaym _custVendOutPaym)
    {
        container printerSetting;

        // validate input parameters
        if (_custVendOutPaym == null)
        {
            throw error(Error::missingRecord(funcname()));
        }

        printDestinationSetting = new SRSPrintDestinationSettings();
        printerSetting = _custVendOutPaym.getPrinterSettings(PaymDocumentType::ControlReport);
        printDestinationSetting.unpack(printerSetting);

        // initialize the session using input parameters
        custVendOutPaym = _custVendOutPaym;

        // build the report data set
        this.fetch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendOutPaymentControlTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates values into the <c>CustVendOutTmp</c> table buffer.
    /// </summary>
    /// <param name = "_vendOutPaymControlTmp">
    ///     The <c>CustVendOutTmp</c> table buffer used for storing line item data.
    /// </param>
    /// <param name = "_outPaymRecord">
    ///     An instance of the <c>CustVendOutPaymRecord</c> class.
    /// </param>
    [Wrappable(true)]
    protected final void populateVendOutPaymentControlTmp(CustVendOutTmp _vendOutPaymentControlTmp, CustVendOutPaymRecord _outPaymentRecord)
    {
        // store the table line item data
        _vendOutPaymentControlTmp.AccountNum = ledgerJournalTrans.parmAccount();
        _vendOutPaymentControlTmp.Name = VendTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount()).name();
        _vendOutPaymentControlTmp.BankAccountName = _outPaymentRecord.parmCustVendPaym().recieversBankName();
        _vendOutPaymentControlTmp.RegistrationNum = _outPaymentRecord.parmCustVendPaym().recieversBankRegistrationNumber();
        _vendOutPaymentControlTmp.BankAccount = _outPaymentRecord.parmCustVendPaym().recieversBankAccount();
        _vendOutPaymentControlTmp.AmountCurDebit = ledgerJournalTrans.AmountCurDebit;
        _vendOutPaymentControlTmp.AmountCur = ledgerJournalTrans.AmountCurCredit;
        _vendOutPaymentControlTmp.CurrencyCode = ledgerJournalTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    private void insert()
    {
        this.populateVendOutPaymentControlTmp(vendOutPaymControlTmp, outPaymRecord);
        vendOutPaymControlTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        VendOutPaymControlContract contract;

        this.init(this.parmArgs().caller());

        if (printDestinationSetting)
        {
            this.parmReportContract().parmPrintSettings(printDestinationSetting);
        }

        contract = this.parmReportContract().parmRdpContract() as VendOutPaymControlContract;
        contract.parmSummaryDataRecId(this.getSummaryDataRecId());
        contract.parmTableDataRecId(this.getTableDataRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    private RecId storeTmpTable(Common tblToSend)
    {
        RecId recId;

        // storing the temp table data using SRSTmpTblMarshaller
        SRSReportRunPermission permission = new SRSReportRunPermission();
        permission.assert();

        // store the session context in the temporary cache
        recId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(tblToSend);

        // revert the access permissions
        CodeAccessPermission::revertAssert();

        delete_from tblToSend;

        // return the key for the temp dataset
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller = new VendOutPaymControlController();
        controller.parmReportName(ssrsReportStr(VendOutPaymControl, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doNotUseWaitPattern</Name>
				<Source><![CDATA[
    public boolean doNotUseWaitPattern()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>