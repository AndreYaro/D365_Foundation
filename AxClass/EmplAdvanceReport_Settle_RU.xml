<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplAdvanceReport_Settle_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplAdvanceReport_Settle_RU
{
    KeySum              keySumSettle, keySumExchAdj, keySumAdvAdj, keySumOverLed, keySumOverDoc, keySumExchAdjUnrealized;
    EmplAdvanceId_RU    advanceId;
    AmountMST           balanceMst;
    AmountMST           balanceExchAdjMst;
    TransDate           headerTransDate;
    EmplSettlement_RU   settleTrans, settleLine , checkSettle;
    EmplTrans_RU        exchAdjUnrealizedTrans;
    PostingProfile      profile;
    Map                 balanceMap;
    EmplTrans_RU        transDebit, transCredit;

    #define.one(1)
    #define.two(2)
    #define.three(3)
    #define.four(4)
    #define.five(5)
    #define.six(6)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceExchAdjMst</Name>
				<Source><![CDATA[
    public AmountMST balanceExchAdjMst()
    {
        return balanceExchAdjMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceMst</Name>
				<Source><![CDATA[
    public AmountMST balanceMst()
    {
        return balanceMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdvanceBalance</Name>
				<Source><![CDATA[
    protected void calcAdvanceBalance(EmplAdvanceId_RU _advanceId,
                                      EmplAccount_RU   _emplAccount)
    {
        EmplAdvLine_RU              emplAdvLine;
        EmplTrans_RU                emplTrans, emplTransLine, emplTransAdv;
        EmplSettlement_RU           settleAdv;
        AmountMST                   exchAdjAmount;
        AmountMST                   exchAdjUnrealized;
        Set                         transSet  = new Set(typeName2Type(extendedtypestr(recId)));
        EmplTransSource_RU          source;
        CustVendExchAdjParm_W       custVendExchAdjParm;
        LedgerPostingType           posting;
        MainAccountNum              accountNum,
                                    offsetAccountNum,
                                    ledgerAccount;
        LedgerDimensionAccount      ledgerDimension;

        RNumDateInWordConverter     converter = RNumDateInWordConverter::construct();
        EmplExchAdjustmentCalc_RU   emplExchAdjustment = EmplExchAdjustmentCalc_RU::newFromSettlement(null);
        ExchRate                    exchRate, newExchRate;
        TaxTrans                    taxTrans;
        TaxAmount                   taxAmount;
        boolean                     inheritInvoicePosting;
        GeneralJournalAccountEntry  generalJournalAccountEntry;

        DimensionAttributeValueCombination  dimAttrValueCombination;
        SubledgerVoucherGeneralJournalEntry voucherLink;

        #localMacro.updateKeySettle
            source           = EmplTransSource_RU::newEmplTrans(%3);
            accountNum       = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(source.ledgerDimension());
            offsetAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(source.offsetLedgerDimension());

            if (%1 != 0 || %2 != 0 || keySumSettle.key2Index_W([%5, accountNum, %4]) == 0)
            {
                keySumSettle.updateNow([%5, accountNum, %4], [%1, %2, offsetAccountNum]);
            }
        #endMacro

        #localMacro.updateKeySettleExchAdj
        if (%1)
        {
            accountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(
                CustVendExchAdjParm_W::newFromParmEmpl(emplTransLine, false, false, LedgerTransType::ExchAdjustment).ledgerDimension(
                    %1 > 0 ? LedgerPostingType::ExchRateLoss : LedgerPostingType::ExchRateGain));

            keySumExchAdj.updateNow([%2, accountNum],
                                    [%1, ! keySumExchAdj.key2Index_W([%2, accountNum]) ? %3 : '']);
        }
        #endMacro

        #localMacro.updateKeySettleAdvAdj
        if (%1)
        {
            keySumAdvAdj.updateNow([%2, %3, %4], [%1, %8, %5, %6, %7, %9]);
        }
        #endMacro

        #localMacro.updateKeySettleExchAdjUnrealized
        if (%1)
        {
            accountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(
                CustVendExchAdjParm_W::newFromParmEmpl(emplTransLine, false, true, LedgerTransType::ExchAdjustment).ledgerDimension(
                    %1 > 0 ? LedgerPostingType::ExchRateLoss : LedgerPostingType::ExchRateGain));

            keySumExchAdjUnrealized.updateNow([%2, accountNum],
                                              [%1, ! keySumExchAdjUnrealized.key2Index_W([%2, accountNum]) ? %3 : '']);
        }
        #endMacro

        #localMacro.updateKeyOver
        if (%3)
        {
            source           = EmplTransSource_RU::newEmplTrans(%1);
            accountNum       = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(source.ledgerDimension());
            offsetAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(source.offsetLedgerDimension());

            keySumOverLed.updateNow([accountNum],
                                    [%3, ! keySumOverLed.key2Index_W([accountNum]) ? offsetAccountNum : '']);

            keySumOverDoc.updateNow([%4], [%3, (%2 ? converter.date2Str(%2) : '')]);
        }
        #endMacro

        while select AmountMst, EmplTransRecId from emplAdvLine
            where emplAdvLine.AdvanceId  == _advanceId
        {
            if (_advanceId != advanceId)
            {
                balanceMst -= emplAdvLine.AmountMst;
            }

            select sum(SettleAmountMST), sum(SettleAmountCurCredit) from settleLine
                where settleLine.CreditRecId == emplAdvLine.EmplTransRecId;

            exchRate = settleLine.SettleAmountCurCredit ? 100 * abs(settleLine.SettleAmountMST / settleLine.SettleAmountCurCredit) : 100;

            while select settleLine
                where settleLine.CreditRecId == emplAdvLine.EmplTransRecId
            {
                emplTransLine = EmplTrans_RU::findRecId(settleLine.DebitRecId);

                if (_advanceId == advanceId || settleLine.TransDate <= headerTransDate)
                {
                    exchAdjAmount           = settleLine.ExchAdjustment;
                    exchAdjUnrealized       = this.getUnrealizedExchAdjSettlement(_emplAccount, settleLine);
                }

                if (! emplTransLine || emplTransLine.TransType == EmplTransSourceType_RU::ExchAdj)
                {
                    continue;
                }

                if (! transSet.in(emplTransLine.RecId))
                {
                    if (emplTransLine.TransDate > headerTransDate)
                    {
                        if (this.checkUnderPayment(emplTransLine,_advanceId))
                        {
                            if (_advanceId == advanceId)
                            {
                                #updateKeyOver(emplTransLine, emplTransLine.TransDate, emplTransLine.AmountMST, emplTransLine.Voucher)
                            }
                        }
                    }
                    else
                    {
                        if (this.checkPrePayment(emplTransLine,_advanceId))
                        {
                            if (_advanceId == advanceId)
                            {
                                #updateKeySettle(emplTransLine.AmountMst, emplTransLine.AmountCur, emplTransLine, emplTransLine.CurrencyCode, emplTransLine.Voucher)
                                exchAdjUnrealized += EmplExchAdjustmentCalc_RU::getUnrealizedExchAdjByPeriod(emplTransLine, emplTransLine.TransDate, headerTransDate);
                            }
                            else
                            {
                                balanceMst += emplTransLine.AmountMST + EmplExchAdjustmentCalc_RU::getUnrealizedExchAdjByPeriod(emplTransLine, emplTransLine.TransDate, headerTransDate);
                            }

                            if (emplTransLine.TransDate < headerTransDate)
                            {
                                balanceMst -= emplTransLine.AmountMST + EmplExchAdjustmentCalc_RU::getUnrealizedExchAdjByPeriod(emplTransLine, emplTransLine.TransDate, headerTransDate);
                            }
                        }

                        while select settleTrans
                            where (settleTrans.DebitRecId  == emplTransLine.RecId)
                        {
                            emplTrans = EmplTrans_RU::findRecId(settleTrans.CreditRecId);
                            if (! emplTrans || emplTrans.AdvanceId || emplTrans.TransType == EmplTransSourceType_RU::ExchAdj)
                            {
                                continue;
                            }

                            if (emplTrans.TransDate >= headerTransDate && this.checkOverPayment(emplTransLine,_advanceId))
                            {
                                if (_advanceId == advanceId)
                                {
                                    #updateKeyOver(emplTrans, emplTrans.TransDate, emplTrans.AmountMST, emplTrans.Voucher)
                                }
                                else
                                {
                                    balanceMst += emplTrans.AmountMST + EmplExchAdjustmentCalc_RU::getUnrealizedExchAdjByPeriod(emplTransLine, emplTransLine.TransDate, headerTransDate);
                                }

                                transSet.add(emplTrans.RecId);
                                exchAdjAmount     += settleTrans.ExchAdjustment;
                                exchAdjUnrealized += this.getUnrealizedExchAdjSettlement(_emplAccount,  settleTrans);

                                if (balanceMap.exists(emplTrans.RecId))
                                {
                                    balanceMst -= balanceMap.lookup(emplTrans.RecId) + EmplExchAdjustmentCalc_RU::getUnrealizedExchAdjByPeriod(emplTransLine, emplTransLine.TransDate, headerTransDate);
                                }
                            }
                        }
                    }

                    transSet.add(emplTransLine.RecId);
                }

                if (exchAdjAmount)
                {
                    if (_advanceId == advanceId)
                    {
                        #updateKeySettle(0, 0, emplTransLine, emplTransLine.CurrencyCode, emplTransLine.Voucher)

                        transDebit  = EmplTrans_RU::findRecId(settleLine.DebitRecId);
                        transCredit = EmplTrans_RU::findRecId(settleLine.CreditRecId);

                        if (emplExchAdjustment.isAdvanceAdjustment(transDebit, transCredit))
                        {
                            custVendExchAdjParm = CustVendExchAdjParm_W::newFromParmEmpl(transCredit);
                            posting             = custVendExchAdjParm.postingType(exchAdjAmount);

                            select firstonly RecId from dimAttrValueCombination
                                where dimAttrValueCombination.MainAccount != LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(emplTransLine.LedgerDimension)
                            join LedgerDimension, RecId from generalJournalAccountEntry
                                where generalJournalAccountEntry.LedgerDimension == dimAttrValueCombination.RecId                &&
                                      (generalJournalAccountEntry.PostingType    == LedgerPostingType::AdvanceAdjustmentGain_RU  ||
                                       generalJournalAccountEntry.PostingType     == LedgerPostingType::AdvanceAdjustmentLoss_RU)
                            exists join voucherLink
                                where voucherLink.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                            exists join emplTransAdv
                                where emplTransAdv.Voucher   == voucherLink.Voucher        &&
                                      emplTransAdv.TransDate == voucherLink.AccountingDate &&
                                      ! emplTransAdv.Reversed
                            exists join settleAdv
                                where settleAdv.RecId       == emplTransAdv.RefRecId &&
                                      settleAdv.CreditRecId == transCredit.RecId;

                            ledgerDimension = generalJournalAccountEntry.RecId ? generalJournalAccountEntry.LedgerDimension :
                                            custVendExchAdjParm.inheritInvoicePosting() ? emplAdvLine.LedgerDimension : custVendExchAdjParm.ledgerDimension(posting);

                            ledgerAccount           = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimension);
                            inheritInvoicePosting   = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(emplTransLine.LedgerDimension) ? true : false;

                            if (inheritInvoicePosting && ! generalJournalAccountEntry.RecId)
                            {
                                newExchRate = exchRate;
                            }

                            if (emplAdvLine.TaxGroup)
                            {
                                taxAmount = CurrencyExchangeHelper::amount(emplAdvLine.TaxAmountMST / emplAdvLine.AmountMst * exchAdjAmount);

                                #updateKeySettleAdvAdj(- (exchAdjAmount - taxAmount), emplTransLine.Voucher, ledgerAccount, emplAdvLine.RecId, inheritInvoicePosting, ! generalJournalAccountEntry.RecId, newExchRate, LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(transCredit.LedgerDimension), false)

                                taxTrans = TaxTrans::find(transCredit.Voucher, transCredit.TransDate);

                                #updateKeySettleAdvAdj(- taxAmount, emplTransLine.Voucher, taxTrans.accountName(), emplAdvLine.RecId, inheritInvoicePosting, ! generalJournalAccountEntry.RecId, newExchRate, LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(transCredit.LedgerDimension), true)
                            }
                            else
                            {
                                #updateKeySettleAdvAdj(- exchAdjAmount, emplTransLine.Voucher, ledgerAccount, emplAdvLine.RecId, inheritInvoicePosting, ! generalJournalAccountEntry.RecId, newExchRate, LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(transCredit.LedgerDimension), false)
                            }
                        }
                        else
                        {
                            #updateKeySettleExchAdj(- exchAdjAmount, emplTransLine.Voucher, LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(emplTransLine.LedgerDimension))
                        }
                    }
                    else
                    {
                        balanceMst += exchAdjAmount;
                    }
                }

                if (exchAdjUnrealized)
                {
                    if (_advanceId == advanceId)
                    {
                       #updateKeySettleExchAdjUnrealized(- exchAdjUnrealized,
                           emplTransLine.Voucher,
                           LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(emplTransLine.LedgerDimension))
                    }
                    else
                    {
                        balanceMst += exchAdjUnrealized;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkByBalance</Name>
				<Source><![CDATA[
    private AmountMST checkByBalance(TransDate        _date,
                                     EmplAccount_RU   _employee)
    {
        EmplBalanceMST_RU   balance;
        AmountMST           amountMST;
        EmplTrans_RU        emplTrans, emplLine;
        boolean             settleExists;

        balance = new EmplBalanceMST_RU(_date - 1,true);
        balance.calc(_employee, profile);
        amountMST  = balance.amountMST() + balance.amountMSTExchAdj() + balance.amountMSTExchAdjForecast();

        amountMST += - (select sum(ExchAdjustmentUnrealized) from emplTrans_RU
                            where emplTrans_RU.EmplAccount == _employee                       &&
                                  emplTrans_RU.TransDate   == _date                           &&
                                  emplTrans_RU.TransType   == EmplTransSourceType_RU::ExchAdj &&
                                  emplTrans_RU.LastExchAdj                                    &&
                                  emplTrans_RU.LastExchAdjRate).ExchAdjustmentUnrealized;

        balanceMap = new Map(typeName2Type(extendedtypestr(recId)),Types::Real);

        while select RecId, AmountMST from emplTrans
            where emplTrans.TransDate   == _date                                      &&
                  emplTrans.EmplAccount == _employee                                  &&
                  emplTrans.TransType   != EmplTransSourceType_RU::ExchAdj            &&
                  emplTrans.TransType   != EmplTransSourceType_RU::CrossAccountSettle &&
                  ! emplTrans.AdvanceId
        {
            settleExists = false;
            while select settleTrans
                where settleTrans.DebitRecId  == emplTrans.RecId ||
                      settleTrans.CreditRecId == emplTrans.RecId
            {
                emplLine = EmplTrans_RU::findRecId(emplTrans.AmountMST < 0 ? settleTrans.DebitRecId : settleTrans.CreditRecId);
                if (emplLine.TransDate == _date)
                {
                    settleExists = true;
                }
            }
            if (! settleExists)
            {
                amountMST += emplTrans.AmountMST;
                balanceMap.insert(emplTrans.RecId,emplTrans.AmountMST);
            }
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverPayment</Name>
				<Source><![CDATA[
    #define.Value2(2)
    protected boolean checkOverPayment(EmplTrans_RU _emplTrans,EmplAdvanceId_RU _advanceId)
    {
        EmplTrans_RU  emplTrans;
        boolean       ret = true;
        Map           advanceMap = new Map(Types::Container,Types::Enum);
        MapEnumerator mapEnumerator;
        boolean       currentAdvance;
        ;
        while select checkSettle
           where (checkSettle.DebitRecId  == _emplTrans.RecId)
        {
            emplTrans  = EmplTrans_RU::findRecId(checkSettle.CreditRecId);
            if (emplTrans.AdvanceId && emplTrans.TransDate  >= _emplTrans.TransDate)
            {
                advanceMap.insert([emplTrans.TransDate,emplTrans.AdvanceId],
                                   emplTrans.AmountCur == checkSettle.SettleAmountCurCredit ? NoYes::Yes : NoYes::No);
            }
        }

        mapEnumerator = advanceMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            if (conpeek(mapEnumerator.currentKey(),1) == headerTransDate &&
                conpeek(mapEnumerator.currentKey(),#Value2) == _advanceId)
            {
                currentAdvance = true;
            }
            else
            {
                if (currentAdvance)
                {
                    ret = false;
                    break;
                }
            }
            if (mapEnumerator.currentValue() == NoYes::No)
            {
                ret = currentAdvance;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrePayment</Name>
				<Source><![CDATA[
    #define.Value2(2)
    protected boolean checkPrePayment(EmplTrans_RU _emplTrans,EmplAdvanceId_RU _advanceId)
    {
        EmplTrans_RU  emplTrans;
        boolean       ret = false;
        Set           set = new Set(Types::Container);
        SetEnumerator setEnumerator;
        ;
        while select checkSettle
           where (checkSettle.DebitRecId  == _emplTrans.RecId)
        {
            emplTrans  = EmplTrans_RU::findRecId(checkSettle.CreditRecId);
            if (emplTrans.AdvanceId && emplTrans.TransDate >= _emplTrans.TransDate)
            {
                set.add([emplTrans.TransDate,emplTrans.AdvanceId]);
            }
        }
        setEnumerator = set.getEnumerator();
        setEnumerator.moveNext();
        if (conpeek(setEnumerator.current(),1) == headerTransDate &&
            conpeek(setEnumerator.current(),#Value2) == _advanceId)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnderPayment</Name>
				<Source><![CDATA[
    #define.Value2(2)
    protected boolean checkUnderPayment(EmplTrans_RU _emplTrans,EmplAdvanceId_RU _advanceId)
    {
        EmplTrans_RU  emplTrans;
        boolean       ret = true;
        Set           set = new Set(Types::Container);
        SetEnumerator setEnumerator;
        boolean       currentAdvance;
        ;
        while select checkSettle
           where (checkSettle.DebitRecId  == _emplTrans.RecId)
        {
            emplTrans  = EmplTrans_RU::findRecId(checkSettle.CreditRecId);
            if (emplTrans.AdvanceId && emplTrans.TransDate <= _emplTrans.TransDate)
            {
                set.add([emplTrans.TransDate,emplTrans.AdvanceId]);
            }
        }
        setEnumerator = set.getEnumerator();
        while (setEnumerator.moveNext())
        {
            if (conpeek(setEnumerator.current(),1) == headerTransDate &&
                conpeek(setEnumerator.current(),#Value2) == _advanceId)
            {
                currentAdvance = true;
            }
            else
            {
                if (currentAdvance)
                {
                    ret = false;
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnrealizedExchAdjSettlement</Name>
				<Source><![CDATA[
    public AmountMST getUnrealizedExchAdjSettlement(EmplAccount_RU     _emplAccount,
                                                    EmplSettlement_RU  _emplSettlement)
    {
        EmplTrans_RU    exchAdjTrans;

        select sum(ExchAdjustmentUnrealized) from exchAdjUnrealizedTrans
            where exchAdjUnrealizedTrans.EmplAccount == _emplAccount              &&
                  exchAdjUnrealizedTrans.TransDate   == _emplSettlement.TransDate &&
                  exchAdjUnrealizedTrans.Voucher     == _emplSettlement.Voucher   &&
                  exchAdjUnrealizedTrans.TransType   == EmplTransSourceType_RU::ExchAdj;

        select sum(ExchAdjustmentUnrealized) from exchAdjTrans
            where exchAdjTrans.EmplAccount == _emplAccount              &&
                  exchAdjTrans.TransDate   == _emplSettlement.TransDate &&
                  exchAdjTrans.Voucher     == _emplSettlement.Voucher   &&
                  exchAdjTrans.TransType   == EmplTransSourceType_RU::ExchAdj;

        return - (exchAdjUnrealizedTrans.ExchAdjustmentUnrealized + exchAdjTrans.ExchAdjustmentUnrealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyCount</Name>
				<Source><![CDATA[
    public Counter keyCount(int _keySwitch)
    {
        switch (_keySwitch)
        {
            case #one   :
                return keySumSettle.numOfTrans();
            case #two   :
                return keySumOverLed.numOfTrans();
            case #three :
                return keySumOverDoc.numOfTrans();
            case #four  :
                return keySumExchAdj.numOfTrans();
            case #five  :
                return keySumExchAdjUnrealized.numOfTrans();
            case #six  :
                return keySumAdvAdj.numOfTrans();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyData</Name>
				<Source><![CDATA[
    public anytype keyData(int _keySwitch, int _idx)
    {
        switch (_keySwitch)
        {
            case #one   :
                return keySumSettle.index2Data(_idx);
            case #two   :
                return keySumOverLed.index2Data(_idx);
            case #three :
                return keySumOverDoc.index2Data(_idx);
            case #four  :
                return keySumExchAdj.index2Data(_idx);
            case #five  :
                return keySumExchAdjUnrealized.index2Data(_idx);
            case #six  :
                return keySumAdvAdj.index2Data(_idx);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyIndex</Name>
				<Source><![CDATA[
    public anytype keyIndex(int _keySwitch, int num)
    {
        switch (_keySwitch)
        {
            case #one   :
                return keySumSettle.index2Key(num);
            case #two   :
                return keySumOverLed.index2Key(num);
            case #three :
                return keySumOverDoc.index2Key(num);
            case #four  :
                return keySumExchAdj.index2Key(num);
            case #five  :
                return keySumExchAdjUnrealized.index2Key(num);
            case #six  :
                return keySumAdvAdj.index2Key(num);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(EmplAdvanceId_RU   _advanceId,
                    TransDate          _headerTransDate,
                    EmplSettlement_RU  _settleTable,
                    EmplTrans_RU       _exchAdjUnrealizedTrans)
    {
        advanceId       = _advanceId;
        headerTransDate = _headerTransDate;

        settleTrans.setTmp();
        settleLine.setTmp();
        checkSettle.setTmp();
        exchAdjUnrealizedTrans.setTmp();

        settleTrans.setTmpData(_settleTable);
        settleLine.setTmpData(_settleTable);
        checkSettle.setTmpData(_settleTable);
        exchAdjUnrealizedTrans.setTmpData(_exchAdjUnrealizedTrans);

        keySumSettle             = KeySum::construct(#three, #three);
        keySumOverLed            = KeySum::construct(#one,   #two);
        keySumOverDoc            = KeySum::construct(#one,   #two);
        keySumExchAdj            = KeySum::construct(#two,   #two);
        keySumExchAdjUnrealized  = KeySum::construct(#two,   #two);
        keySumAdvAdj             = KeySum::construct(#three, #four);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        EmplAdvTable_RU         advTable;
        EmplAccount_RU          emplAccount;
        ;
        emplAccount = EmplAdvTable_RU::find(advanceId).EmplAccount;
        balanceMst = this.checkByBalance(headerTransDate,emplAccount);

        while select AdvanceId from advTable
            where advTable.Status      == EmplAdvStatus_RU::Posted &&
                  advTable.TransDate   == headerTransDate          &&
                  advTable.EmplAccount == emplAccount              &&
                  advTable.AdvanceId   <= advanceId
        {
            this.calcAdvanceBalance(advTable.AdvanceId, emplAccount);
        }

        if (this.keyCount(#three))
        {
            select firstonly advTable order by AdvanceId desc
                where advTable.Status      == EmplAdvStatus_RU::Posted &&
                      advTable.TransDate   ==  headerTransDate         &&
                      advTable.EmplAccount == emplAccount              &&
                      advTable.AdvanceId   < advanceId;

            if (! advTable)
            {
                select firstonly advTable
                    where advTable.Status      == EmplAdvStatus_RU::Posted &&
                          advTable.TransDate   <  headerTransDate          &&
                          advTable.EmplAccount == emplAccount;

                if (advTable)
                {
                    balanceExchAdjMst = - (select sum(ExchAdjustmentUnrealized) from emplTrans_RU
                                               where emplTrans_RU.EmplAccount == emplAccount                     &&
                                                     emplTrans_RU.TransDate   >  advTable.TransDate              &&
                                                     emplTrans_RU.TransDate   <= headerTransDate                 &&
                                                     emplTrans_RU.TransType   == EmplTransSourceType_RU::ExchAdj &&
                                                     emplTrans_RU.LastExchAdj                                    &&
                                                     emplTrans_RU.LastExchAdjRate).ExchAdjustmentUnrealized;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
