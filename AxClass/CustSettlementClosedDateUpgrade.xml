<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettlementClosedDateUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustSettlementClosedDateUpgrade extends CustVendSettlementClosedDateUpgrade
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doesBatchJobExist</Name>
				<Source><![CDATA[
    internal static boolean doesBatchJobExist()
    {
        return CustVendSettlementClosedDateUpgrade::doesBatchJobExistByBatchJobClassId(classNum(CustSettlementClosedDateUpgrade));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchJob</Name>
				<Source><![CDATA[
    internal static void createBatchJob()
    {
        const str BatchJobName = "@CashManagement:CustSettlementClosedDateUpgrade";

        if (!CustSettlementClosedDateUpgrade::doesBatchJobExist())
        {
            CustSettlementClosedDateUpgrade processingController =
            new CustSettlementClosedDateUpgrade(
                classStr(CustSettlementClosedDateUpgrade),
                methodStr(CustSettlementClosedDateUpgrade, run),
                SysOperationExecutionMode::ScheduledBatch);

            processingController.scheduleBatch(BatchJobName);

            processingController.doBatch();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:CustSettlementClosedDateUpgrade";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void main(Args args)
    {
        IdentifierName className;
        IdentifierName methodName;
        SysOperationExecutionMode executionMode;

        try
        {
            [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(args);
            CustSettlementClosedDateUpgrade controller = new CustSettlementClosedDateUpgrade(className, methodName, executionMode);
            
            controller.showBatchRecurrenceButton(false);

            if (controller.prompt())
            {
                controller.runOperation();
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpgradeBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected CustVendSettlementIClosedUpgradeService getUpgradeBatch()
    {
        return CustSettlementClosedDateUpgradeService::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>