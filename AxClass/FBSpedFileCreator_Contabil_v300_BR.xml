<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Contabil_v300_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBSpedFileCreator_Contabil_v300_BR extends FBSpedFileCreator_Contabil_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block 0000 and its child blocks
    /// </summary>
    protected void createRecord0000()
    {
        FBSpedRecord_BR         spedRecord;
        LogisticsPostalAddress  fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

        spedRecord  = FBSpedRecord_BR::constructEmpty('0000');

        spedRecord.addFieldString                   ('LECD');                                                   // LECD
        spedRecord.addFieldDate                     (fromDate);                                                 // DT_INI
        spedRecord.addFieldDate                     (toDate);                                                   // DT_FIN
        spedRecord.addFieldString                   (fiscalEstablishment.Name);                                 // NOME
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);  // CNPJ
        spedRecord.addFieldString                   (fiscalEstablishmentAddress.State);                         // UF
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.IENum_BR));   // IE
        spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(fiscalEstablishmentAddress), 7);          // COD_MUN
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.CCMNum_BR));  // IM

        if (situationType)
        {
            spedRecord.addFieldNumeric              (situationType);                                            // IND_SIT_ESP
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // IND_SIT_ESP
        }

        spedRecord.addFieldNumeric                  (openingPeriodSituation);                                   // IND_SIT_INI_PER
        spedRecord.addFieldNumeric                  (fiscalEstablishment.NIRE ? 1 : 0);                         // IND_NIRE
        spedRecord.addFieldNumeric                  (fileType);                                                 // IND_FIN_ESC
        if (fileType == FBSPEDFileType_BR::Substitute)
        {
            spedRecord.addFieldString               (fileHash);                                                 // COD_HASH_SUB
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // COD_HASH_SUB
        }

        spedRecord.addFieldEmpty                    ();                                                         // NIRE_SUBST
        spedRecord.addFieldNumeric                  (fiscalOrganization.IsLargeCompany ? 1 : 0);                // IND_GRANDE_PORTE
        spedRecord.addFieldNumeric                  (fiscalOrganization.SCPType);                               // TIP_ECD

        if (fiscalOrganization.SCPType == FBSCPType_BR::SCP)
        {
            spedRecord.addFieldNumeric              (this.keepNumbers(fiscalOrganization.SCPCode));             // COD_SCP
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                         // COD_SCP
        }

        this.addRecord(spedRecord);

        this.createBlock0(spedRecord);
        this.createBlockI(spedRecord);
        this.createBlockJ(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0001</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block 0001 and its child blocks
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block 0001 belongs to
    /// </param>
    protected void createRecord0001(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('0001');

        spedRecord.addFieldNumeric(0);  // IND_DAD

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecord0007(spedRecord);
        this.createRecord0035(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0035</Name>
				<Source><![CDATA[
    protected void createRecord0035(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;
        FBRelatedSCP_BR relatedSCP;

        if (fiscalOrganization.SCPType == FBSCPType_BR::SCPPartner)
        {
            while select relatedSCP
            where relatedSCP.FiscalOrganization == fiscalOrganization.RecId
            {
                spedRecord = FBSpedRecord_BR::constructEmpty('0035');

                spedRecord.addFieldString   (relatedSCP.Code, 14);  // COD_SCP
                spedRecord.addFieldString   (relatedSCP.Name);      // NOME_SCP

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI030</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I030 and its child blocks
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I030 belongs to
    /// </param>
    protected void createRecordI030(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('I030');

        spedRecord.addFieldString                   ('TERMO DE ABERTURA');                                      // DNRC_ABERT
        spedRecord.addFieldNumeric                  (bookNumber);                                               // NUM_ORD
        spedRecord.addFieldString                   ('DIÁRIO GERAL');                                           // NAT_LIVR
        spedRecord.addFieldString                   ('%QTD_LINHA%');                                            // QTD_LIN
        spedRecord.addFieldString                   (fiscalEstablishment.Name);                                 // NOME
        spedRecord.addFieldString                   (fiscalEstablishment.NIRE);                                 // NIRE
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);  // CNPJ

        if (fiscalOrganization.ConstitutionArchiveDate)
        {
            spedRecord.addFieldDate                 (fiscalOrganization.ConstitutionArchiveDate);               // DT_ARQ
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // DT_ARQ
        }

        if (fiscalOrganization.ConversionArchiveDate)
        {
            spedRecord.addFieldDate                 (fiscalOrganization.ConversionArchiveDate);                 // DT_ARQ_CONV
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // DT_ARQ_CONV
        }

        spedRecord.addFieldString                   (fiscalEstablishment.postalAddress().City);                 // DESC_MUN
        spedRecord.addFieldEmpty                    ();                                                         // DT_EX_SOCIAL

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ900</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J900 and its child blocks
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J900 belongs to
    /// </param>
    protected void createRecordJ900(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('J900');

        spedRecord.addFieldString   ('TERMO DE ENCERRAMENTO');  // DNRC_ENCER
        spedRecord.addFieldNumeric  (bookNumber);               // NUM_ORD
        spedRecord.addFieldString   ('DIÁRIO GERAL');           // NAT_LIVRO
        spedRecord.addFieldString   (fiscalEstablishment.Name); // NOME
        spedRecord.addFieldString   ('%QTD_LINHA%');            // QTD_LIN
        spedRecord.addFieldDate     (fromDate);                 // DT_INI_ESCR
        spedRecord.addFieldDate     (toDate);                   // DT_FIN_ESCR

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecordJ930(spedRecord);
        this.createRecordJ935(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ930</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J930 and its child blocks
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J930 belongs to
    /// </param>
    protected void createRecordJ930(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR         spedRecord;
        LegalRepresentative_BR  legalRepresentative;

        while select legalRepresentative where legalRepresentative.FiscalOrganization   == fiscalOrganization.RecId
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('J930');

            spedRecord.addFieldString                   (legalRepresentative.Name);                                                                                 // IDENT_NOM
            spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(legalRepresentative.CPFNum), 11);                                                         // IDENT_CPF
            spedRecord.addFieldString                   (this.retrieveSignatoryIdentification(legalRepresentative.Type));                                           // IDENT_QUALIF
            spedRecord.addFieldString                   (this.retrieveSignatoryCode(legalRepresentative.Type));                                                     // COD_ASSIN
            spedRecord.addFieldString                   (this.keepAlphaWithoutAccents(legalRepresentative.CRCNum));                                                 // IND_CRC
            spedRecord.addFieldString                   (legalRepresentative.electronicAddress(LogisticsElectronicAddressMethodType::Email).Locator);               // EMAIL
            spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(legalRepresentative.electronicAddress(LogisticsElectronicAddressMethodType::Phone).Locator), 14);  // FONE
            spedRecord.addFieldString                   (legalRepresentative.CRCStateId);                                                                           // UF_CRC
            spedRecord.addFieldString                   (legalRepresentative.CRCStateId ? strFmt("%1/%2/%3", legalRepresentative.CRCStateId, year(toDate), '001') : '');    // NUM_SEQ_CRC
            spedRecord.addFieldDate                     (legalRepresentative.CRCExpirationDate);                                                                    // DT_CRC
            this.addFieldIndRespLegal(spedRecord, legalRepresentative);                                                                                             // IND_RESP_LEGAL

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ935</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J935.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J935 belongs to.
    /// </param>
    protected void createRecordJ935(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR     spedRecord;
        FBFiscalAuditor_BR  fiscalAuditor;

        while select fiscalAuditor where fiscalAuditor.FiscalOrganization == fiscalOrganization.RecId
        {
            spedRecord = FBSpedRecord_BR::constructEmpty('J935');

            spedRecord.addFieldString(fiscalAuditor.Name);
            spedRecord.addFieldString(fiscalAuditor.CVMNumber);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>