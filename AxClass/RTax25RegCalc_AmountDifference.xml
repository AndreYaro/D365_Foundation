<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_AmountDifference</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25RegCalc_AmountDifference extends RTax25RegCalc implements BatchRetryable
{
    AmountMST                   totalAmountDifGain, totalAmountDifLoss,
                                totalTypeAmountDifGain, totalTypeAmountDifLoss,
                                totalExchAdjGain, totalExchAdjLoss,
                                totalTypeExchAdjGain, totalTypeExchAdjLoss,
                                totalCTA, totalCTL,
                                totalTypeCTA, totalTypeCTL;
    CustVendSettlement          custVendSettlement;
    CustVendTrans               custVendTrans;
    CurrencyCode                standardCurrency;
    RecordSortedList            registerTransList;
    Counter                     transCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        RefRecId                lastProfitTableRecId;
        RTax25RegisterTrans_AmountDifference    regTrans;
        int                     i = 1;
        boolean                 loop;
        boolean                 firstIteration = false;
        ;

        try
        {
            ttsbegin;

            super();

            regQuery.addHeaderRecord(0, conNull(), 0, "", i);

            custVendTrans       = new DictTable(tablenum(CustTrans)).makeRecord();
            custVendSettlement  = new DictTable(tablenum(CustSettlement)).makeRecord();
            this.selectCustVendTrans();
            custVendTrans       = new DictTable(tablenum(VendTrans)).makeRecord();
            custVendSettlement  = new DictTable(tablenum(VendSettlement)).makeRecord();
            this.selectCustVendTrans();

            this.progressInit("", transCount);

            loop = registerTransList.first(regTrans);
            while (loop)
            {
                progress.setText(strfmt("@GLS111955", regTrans.ExpenseIncomeType));

                if (regTrans.RTax25ProfitTable != lastProfitTableRecId  || ! firstIteration)
                {
                    if (firstIteration)
                    {
                        i++;
                        regQuery.addFooterRecord(lastProfitTableRecId,
                                                 this.createFooter(),
                                                 0,
                                                 lastProfitTableRecId ? strFmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449",
                                                 i);
                        totalTypeAmountDifGain = 0; totalTypeAmountDifLoss = 0;
                        totalTypeExchAdjGain   = 0; totalTypeExchAdjLoss   = 0;
                        totalTypeCTA           = 0; totalTypeCTL           = 0;
                    }
                    i++;
                    lastProfitTableRecId = regTrans.rTax25ProfitTable;
                    regQuery.addHeaderRecord(regTrans.rTax25ProfitTable,
                                             conNull(),
                                             0,
                                             regTrans.rTax25ProfitTable ?
                                             strfmt("@GLS104112", RTax25ProfitTable::find(regTrans.rTax25ProfitTable).ProfitId) : "@GLS104447",
                                             i);
                    firstIteration = true;
                }
                i++;

                regTrans.LineNumber = -regTrans.LineNumber;
                if (regQuery.getSortedList().find(regTrans))
                {
                    regQuery.getSortedList().del(regTrans);
                    regTrans.LineNumber = i;
                    regQuery.getSortedList().ins(regTrans);
                }

                totalTypeAmountDifGain += regTrans.AmountDifferenceIncome;
                totalTypeAmountDifLoss += regTrans.AmountDifferenceExpense;
                totalTypeExchAdjGain   += regTrans.ExchangeAdjustmentIncome;
                totalTypeExchAdjLoss   += regTrans.ExchangeAdjustmentExpense;
                totalTypeCTA           += regTrans.CTAAmount;
                totalTypeCTL           += regTrans.CTLAmount;
                totalAmountDifGain     += regTrans.AmountDifferenceIncome;
                totalAmountDifLoss     += regTrans.AmountDifferenceExpense;
                totalExchAdjGain       += regTrans.ExchangeAdjustmentIncome;
                totalExchAdjLoss       += regTrans.ExchangeAdjustmentExpense;
                totalCTA               += regTrans.CTAAmount;
                totalCTL               += regTrans.CTLAmount;

                lastProfitTableRecId = regTrans.rTax25ProfitTable;

                loop = registerTransList.next(regTrans);

                progress.incCount();
            }

            if (firstIteration)
            {
                i++;
                regQuery.addFooterRecord(lastProfitTableRecId,
                                         this.createFooter(),
                                         0,
                                         lastProfitTableRecId ? strFmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449",
                                         i);
            }

            totalTypeAmountDifGain = totalAmountDifGain;
            totalTypeAmountDifLoss = totalAmountDifLoss;
            totalTypeExchAdjGain   = totalExchAdjGain;
            totalTypeExchAdjLoss   = totalExchAdjLoss;
            totalTypeCTA           = totalCTA;
            totalTypeCTL           = totalCTL;
            i++;
            regQuery.addFooterRecord(0, this.createFooter(), 0, "", i);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container createFooter()
    {
        return [dateNull(), "", "", dateNull(), totalTypeAmountDifGain, totalTypeCTA, totalTypeAmountDifLoss, totalTypeCTL, totalTypeExchAdjGain, totalTypeExchAdjLoss];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;

        registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_AmountDifference));
        registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_AmountDifference, rTax25ProfitTable), fieldnum(RTax25RegisterTrans_AmountDifference, LineNumber));
        standardCurrency = CompanyInfoHelper::standardCurrency();

        ret = super(_registerJournalTrans, _batch);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCustVendTrans</Name>
				<Source><![CDATA[
    #define.Coeff(10000)
    #define.ParameterCode1(1)
    private void selectCustVendTrans()
    {
        boolean                     isCust;
        RefRecId                    profitTableRecId;
        RTax25RegisterTrans_AmountDifference    regTrans;
        AmountMST                   amountDiffGain,    amountDiffLoss,
                                    exchAdjGain,       exchAdjLoss,
                                    amountDiffCTA,     amountDiffCTL,
                                    exchAdjCTA,        exchAdjCTL,
                                    ctA,               ctL;
        Tax                         tax;
        CustVendTrans               offsetCustVendTrans;
        CustVendSettlement          reverseSettlement;
        int                         sign;
        CustVendTransPostingLog_RU  postingLog;

        CustVendExchAdjParm_W       exchAdjParm;
        RTax25ExchAdjDimension      rTax25ExchAdjDimension;
        LedgerParameters            ledgerParameters = LedgerParameters::find();

        AmountMST                   amountDiffTax;
        CustVendTransPostingLog_RU  postingLogTax;
        LedgerCurrencyParameters_RU ledgerCurrencyParameters;
        boolean                     includeAdvances  = RTax25RegisterParameters::find(registerId, #ParameterCode1).Parameter == enum2str(NoYes::Yes);
        AgreementHeaderExt_RU       agreementHeaderExt;

        AmountMST exchAdjustment()
        {
            return (select sum(AmountMST) from custVendTransPostingLog_RU
                        where custVendTransPostingLog_RU.Voucher   == postingLog.Voucher &&
                              custVendTransPostingLog_RU.TransDate == postingLog.TransDate).AmountMST;
        }

        while select custVendTrans
            where custVendTrans.CurrencyCode == standardCurrency         &&
                  custVendTrans.TransType    == LedgerTransType::Payment &&
                 (includeAdvances                                        ||
                 !custVendTrans.Prepayment)
        join custVendSettlement
            where custVendSettlement.OffsetRecId == custVendTrans.RecId  &&
                  (custVendSettlement.CanBeReversed                      ||
                   custVendSettlement.ReversedRecId_RU)                  &&
                  (custVendSettlement.TransDate  >= dateFrom             &&
                   custVendSettlement.TransDate  <= dateTo)
        {
            offsetCustVendTrans = new DictTable(custVendTrans.TableId).makeRecord();
            reverseSettlement   = new DictTable(custVendSettlement.TableId).makeRecord();

            sign = 1;
            if (custVendSettlement.ReversedRecId_RU)
            {
                select firstonly TransDate from reverseSettlement
                    where reverseSettlement.RecId == custVendSettlement.ReversedRecId_RU;

                if (reverseSettlement.TransDate >= dateFrom &&
                    reverseSettlement.TransDate <= dateTo)
                {
                    continue;
                }

                if (custVendSettlement.ReverseTrans_RU)
                {
                    sign = -1;
                }
            }

            select firstonly offsetCustVendTrans
                where offsetCustVendTrans.RecId == custVendSettlement.TransRecId;

            if (! offsetCustVendTrans.RecId)
            {
                continue;
            }

            if (custVendTrans.TransDate >= AmountDiffCancelDate &&
                offsetCustVendTrans.TransDate >= AmountDiffCancelDate)
            {
                continue;
            }

            isCust = custVendTrans.TableId == tableNum(CustTrans);

            ledgerCurrencyParameters = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), offsetCustVendTrans.CurrencyCode);
            agreementHeaderExt       = AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension);

            if (ledgerCurrencyParameters.TaxAmountDifference ||
                agreementHeaderExt.TaxAmountDifference)
            {
                exchAdjParm             = CustVendExchAdjParm_W::newFromParm(offsetCustVendTrans,
                                                                                true,
                                                                                false,
                                                                                LedgerTransType::ExchAdjustment,
                                                                                custVendTrans.Prepayment);

                rTax25ExchAdjDimension  = exchAdjParm.rTax25ExchAdjDimension();

                tax = new Tax();

                select firstonly postingLog
                    where postingLog.RefTableId     == custVendTrans.TableId               &&
                          postingLog.TransDate      == custVendSettlement.reverseDate_RU() &&
                          postingLog.TransRecId     == custVendSettlement.TransRecId       &&
                          postingLog.OffSetRecId    == custVendSettlement.OffsetRecId      &&
                          postingLog.TransCompany   == custVendSettlement.TransCompany     &&
                          postingLog.OffsetCompany  == custVendSettlement.OffsetCompany    &&
                          postingLog.PostingLogType == CustVendTransPostingLogType_RU::ExchAdjustment;

                if (postingLog.Posting == LedgerPostingType::ExchRateGain)
                {
                    exchAdjGain      = abs(exchAdjustment());
                    exchAdjLoss      = 0;
                    profitTableRecId = ledgerCurrencyParameters.rTax25ProfitTableProfit;
                    exchAdjCTA       = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                                              custVendSettlement.TransDate,
                                                              standardCurrency,
                                                              exchAdjGain,
                                                              TaxModuleType::Voucher);
                    exchAdjCTL = 0;
                }
                else
                {
                    exchAdjLoss      = abs(exchAdjustment());
                    exchAdjGain      = 0;
                    profitTableRecId = ledgerCurrencyParameters.rTax25ProfitTableLoss;
                    exchAdjCTL       = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                                              custVendSettlement.TransDate,
                                                              standardCurrency,
                                                              exchAdjLoss,
                                                              TaxModuleType::Voucher);
                    exchAdjCTA = 0;
                }

                amountDiffGain = custVendSettlement.ExchAdjustment * (custVendTrans.TableId == tableNum(CustTrans) ? -1 : 1) * sign;

                if (! amountDiffGain)
                {
                    continue;
                }

                amountDiffTax = 0;
                if (!ledgerCurrencyParameters.TaxAmountDifferenceLoss)
                {
                    select sum(AmountMST) from postingLogTax
                        where postingLogTax.Voucher         == postingLog.Voucher
                           && postingLogTax.TransDate       == postingLog.TransDate
                           && postingLogTax.PostingLogType  == CustVendTransPostingLogType_RU::ExchAdjustment
                           && postingLogTax.IsTaxed;

                    amountDiffTax = postingLogTax.AmountMST;
                }

                tax = new Tax();

                if (exchAdjParm.postingType(- amountDiffGain) == LedgerPostingType::ExchRateGain)
                {
                    profitTableRecId = rTax25ExchAdjDimension.getProfitTableRecId(RTax25ExchAdjType::Gain);
                    amountDiffGain = abs(amountDiffGain);
                    amountDiffLoss = 0;
                    amountDiffCTL = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                                                custVendSettlement.TransDate,
                                                                standardCurrency,
                                                                amountDiffGain,
                                                                TaxModuleType::Voucher);
                    amountDiffCTA = 0;
                }
                else
                {
                    profitTableRecId = rTax25ExchAdjDimension.getProfitTableRecId(RTax25ExchAdjType::Loss);
                    amountDiffLoss = abs(amountDiffGain) - abs(amountDiffTax);
                    amountDiffGain = 0;
                    amountDiffCTA = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                                                custVendSettlement.TransDate,
                                                                standardCurrency,
                                                                amountDiffLoss,
                                                                TaxModuleType::Voucher);
                    amountDiffCTL = 0;
                }

                ctA = 0; ctL = 0;
                if (exchAdjCTA && amountDiffCTL)
                {
                    if (exchAdjGain > amountDiffGain)
                    {
                        ctA = abs(exchAdjCTA - amountDiffCTL);
                    }
                    else
                    {
                        ctL = abs(exchAdjCTA - amountDiffCTL);
                    }
                }
                else if (exchAdjCTL && amountDiffCTA)
                {
                    if (exchAdjLoss > amountDiffLoss)
                    {
                        ctL = abs(exchAdjCTL - amountDiffCTA);
                    }
                    else
                    {
                        ctA = abs(exchAdjCTL - amountDiffCTA);
                    }
                }
                else
                {
                    ctA = exchAdjCTA + amountDiffCTA;
                    ctL = exchAdjCTL + amountDiffCTL;
                }

                transCount++;
                regTrans = regQuery.addBodyRecord(profitTableRecId,
                                                             [custVendSettlement.TransDate,
                                                              RTax25ProfitTable::find(profitTableRecId).Description,
                                                              AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension).AgreementId,
                                                              custVendTrans.DocumentDate,
                                                              amountDiffGain * sign, ctA * sign,
                                                              amountDiffLoss * sign, ctL * sign,
                                                              exchAdjGain * sign, exchAdjLoss * sign],
                                                              custVendTrans.TableId,
                                                              custVendTrans.RecId,
                                                              "",
                                                              -(date2num(custVendSettlement.TransDate)*#Coeff + transCount));
                regTrans.LineNumber = -regTrans.LineNumber;
                registerTransList.ins(regTrans);
            }
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>