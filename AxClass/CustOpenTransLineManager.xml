<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOpenTransLineManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustOpenTransLineManager</c> class is used to interact with records in the
///    <c>CustTransMarkedOpenLine</c> table.
/// </summary>
public class CustOpenTransLineManager
{
    AmountCur markedTotalInPaymCur;
    Map markedTotalInPaymCurList;
    SpecTransManager specTransManager;
    CurrencyExchangeHelper localCurrencyHelper;
    CurrencyCode localCurrencyCode;
    CustTransOpen custTransOpen;
    CustTrans custTrans;
    CompanyId specCompany;
    tableId specTableId;
    RefRecId specRecId;
    SpecTrans specTrans;
    CashDiscAmount transCashDiscAmount;
    AmountCur totalAmountCur;
    CashDiscAmount totalCashDiscAmount;
    NoYes allowCashDiscPartialPayment;
    CashDiscAmount totalCashDiscAmountToTake;

    CashDiscAmount temptransCashDiscAmount;
    AmountCur temptotalAmountCur;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMarkedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the marked amount for the specified open line.
    /// </summary>
    /// <param name="_transOpenLineRecId">
    ///    The record ID of the <c>CustTransOpenLine</c> table.
    /// </param>
    /// <param name="_amountToAdd">
    ///    The marked amount to add.
    /// </param>
    private void addToMarkedTotal(RecId _transOpenLineRecId, AmountCur _amountToAdd)
    {
        if (markedTotalInPaymCurList.exists(_transOpenLineRecId))
        {
            markedTotalInPaymCurList.remove(_transOpenLineRecId);
        }

        markedTotalInPaymCurList.insert(_transOpenLineRecId, _amountToAdd);
        markedTotalInPaymCur += _amountToAdd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the discount is applicable.
    /// </summary>
    /// <param name="_totalAmount">
    ///    The total amount to settle on the invoice; optional.
    /// </param>
    /// <returns>
    ///    true if the discount is allowed; otherwise, false.
    /// </returns>
    public boolean allowCashDisc(AmountCur _totalAmount = 0)
    {
        boolean allowDiscOnLine;

        if (custTransOpen.UseCashDisc == UseCashDisc::Never)
        {
            allowDiscOnLine = false;
        }
        else if ((allowCashDiscPartialPayment == NoYes::Yes) || (custTransOpen.UseCashDisc == UseCashDisc::Always))
        {
            allowDiscOnLine = true;
        }
        else if ((allowCashDiscPartialPayment == NoYes::No) && (custTransOpen.UseCashDisc == UseCashDisc::Normal))
        {
            // Check for full payment
            AmountCur remainingOpenAmount = specTransManager.findUnmarkedAmountForRef(
                custTransOpen.AmountCur,
                custTransOpen.company(),
                tableNum(CustTransOpen),
                custTransOpen.RecId);

            if (remainingOpenAmount == _totalAmount)
            {
                allowDiscOnLine = true;
            }
        }

        return allowDiscOnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnmarkedLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the remaining unmarked amount for an open transaction line.
    /// </summary>
    /// <param name = "_custTransOpenLine">The open transaction line buffer.</param>
    /// <returns>The remaining unmarked amount for the open transaction line.</returns>
    public AmountCur findUnmarkedLineAmount(CustTransOpenLine _custTransOpenLine)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        select sum(AmountToSettle), sum(CashDiscLineToTake) from custTransMarkedOpenLine
            where custTransMarkedOpenLine.CustTransOpenLine == _custTransOpenLine.RecId
                && custTransMarkedOpenLine.SpecTrans != specTrans.RecId;

        return _custTransOpenLine.AmountCur - (custTransMarkedOpenLine.AmountToSettle + custTransMarkedOpenLine.CashDiscLineToTake);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cash discount amount on the marked invoice line.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    The open transaction line buffer.
    /// </param>
    /// <returns>
    ///    The total cash discount amount to take for the open transaction line.
    /// </returns>
    public CashDiscAmount getCashDiscAmount(CustTransOpenLine _custTransOpenLine)
    {
        return CustTransMarkedOpenLine::findByRefId(specTrans.RecId, _custTransOpenLine.RecId).CashDiscLineToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDiscountForTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total cash discount amount applicable for the transaction.
    /// </summary>
    /// <param name="_totalMarkedAmount">
    /// The total settlement amount on the invoice.
    /// </param>
    /// <returns>
    /// The total cash discount amount of the transaction.
    /// </returns>
    public CashDiscAmount findCashDiscountForTrans(AmountCur _totalMarkedAmount = 0)
    {
        CashDiscAmount discAmount;
        CashDiscAmount discAmountTrans;
        AmountCur remainingSettlementAmount;
        AmountCur totalSettlementAmount;

        // Get total cash discount for invoice
        discAmount = this.parmCashDiscAmountToTake();
        discAmount -= specTransManager.findCashDiscountMarkedToBeTaken(
            custTransOpen.company(),
            tableNum(CustTransOpen),
            custTransOpen.RecId);

        remainingSettlementAmount = specTransManager.findUnmarkedAmountForRef(
            custTransOpen.AmountCur,
            custTransOpen.company(),
            tableNum(CustTransOpen),
            custTransOpen.RecId);

        totalSettlementAmount = remainingSettlementAmount - discAmount;

        if (_totalMarkedAmount == 0)
        {
            _totalMarkedAmount = this.getMarkedTotal();
        }

        if (_totalMarkedAmount > totalSettlementAmount)
        {
            _totalMarkedAmount = totalSettlementAmount;
        }

        if (totalSettlementAmount > 0)
        {
            discAmountTrans = ((discAmount / totalSettlementAmount) * _totalMarkedAmount);
            discAmountTrans = CurrencyExchange::round(discAmountTrans, localCurrencyCode);
        }

        return discAmountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the invoice line.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    The <c>CustTransOpenLine</c> record.
    /// </param>
    /// <returns>
    ///    The description of the invoice line.
    /// </returns>
    public Description getLineDescription(CustTransOpenLine _custTransOpenLine)
    {
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        CustInvoiceTrans        custInvoiceTrans;
        CustInterestTrans       custInterestTrans;
        MarkupTrans             markupTrans;
        Description             lineDescription;

        custInvoiceLineIdRef = CustInvoiceLineIdRef::find(_custTransOpenLine.CustInvoiceLineIdRef);

        if (CustInvoiceLineType::Customer == custInvoiceLineIdRef.EntityType)
        {
            select firstonly custInvoiceTrans
                where   custInvoiceTrans.CustInvoiceLineIdRef == custInvoiceLineIdRef.RecId;

            if (custInvoiceTrans)
            {
                lineDescription = custInvoiceTrans.Name;
            }
        }
        else if (CustInvoiceLineType::InterestNote == custInvoiceLineIdRef.EntityType)
        {
            select firstonly custInterestTrans
                where   custInterestTrans.CustInvoiceLineIdRef == custInvoiceLineIdRef.RecId;

            if (custInterestTrans)
            {
                lineDescription = custInterestTrans.Txt;
            }
        }
        else if (CustInvoiceLineType::MarkupTrans == custInvoiceLineIdRef.EntityType)
        {
            select firstonly markupTrans
                where   markupTrans.CustInvoiceLineIdRef == custInvoiceLineIdRef.RecId
                   &&  !markupTrans.IsDeleted;

            if (markupTrans)
            {
                lineDescription = markupTrans.Txt;
            }
        }

        return lineDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total marked line amount.
    /// </summary>
    /// <returns>
    ///    The total marked line amount.
    /// </returns>
    public AmountCur getMarkedTotal()
    {
        return markedTotalInPaymCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the original invoice line amount based on the <c>EntityType</c> field of the
    ///    <c>CustInvoiceLineIdRef</c> record.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    A <c>CustTransOpenLine</c> record.
    /// </param>
    /// <returns>
    ///    The original invoice line amount.
    /// </returns>
    public AmountCur getOrigLineAmount(CustTransOpenLine _custTransOpenLine)
    {
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        CustInvoiceTrans        custInvoiceTrans;
        CustInterestTrans       custInterestTrans;
        MarkupTrans             markupTrans;
        AmountCur               lineAmount;

        custInvoiceLineIdRef = CustInvoiceLineIdRef::find(_custTransOpenLine.CustInvoiceLineIdRef);

        if (CustInvoiceLineType::Customer == custInvoiceLineIdRef.EntityType)
        {
            custInvoiceTrans = CustInvoiceTrans::findByCustInvoiceLineRefId(custInvoiceLineIdRef.RecId);
            if (custInvoiceTrans)
            {
                if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    lineAmount = CustOpenTransLineManager::calculateTotalAmountOfCustOpenTransLine(custInvoiceTrans);
                }
                else
                {
                    lineAmount = custInvoiceTrans.LineAmount + custInvoiceTrans.TaxAmount;
                }
            }
        }
        else if (CustInvoiceLineType::InterestNote == custInvoiceLineIdRef.EntityType)
        {
            custInterestTrans = CustInterestTrans::findByCustInvoiceLineRefId(custInvoiceLineIdRef.RecId);
            if (custInterestTrans)
            {
                lineAmount = custInterestTrans.InterestAmount;
            }
        }
        else if (CustInvoiceLineType::MarkupTrans == custInvoiceLineIdRef.EntityType)
        {
            markupTrans = MarkupTrans::findByCustInvoiceLineRefId(custInvoiceLineIdRef.RecId);
            if (markupTrans)
            {
                lineAmount = markupTrans.Value + markupTrans.TaxAmount;
            }
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the pending settlement for the specified open transaction line.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    The open transaction line.
    /// </param>
    /// <returns>
    ///    The amount for the settlement.
    /// </returns>
    /// <remarks>
    ///    This is in the scope of the current payment.
    /// </remarks>
    public AmountCur getSettleLineAmount(CustTransOpenLine _custTransOpenLine)
    {
        AmountCur settleAmount;

        CustTransMarkedOpenLine specTransLine = CustTransMarkedOpenLine::findByRefId(specTrans.RecId, _custTransOpenLine.RecId);

        if (!specTransLine)
        {
            settleAmount = 0;
        }
        else
        {
            settleAmount  = specTransLine.AmountToSettle;
        }

        return settleAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSettleAmountForTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the line amount to settle.
    /// </summary>
    /// <param name="_lineAmount">
    ///    The open invoice line amount.
    /// </param>
    /// <param name="_validatePartialChecking">
    ///    A Boolean value that indicates whether to enable the partial amount condition.
    /// </param>
    /// <returns>
    ///    The line amount to settle.
    /// </returns>
    public AmountCur determineSettleAmountForTransLine(AmountCur _lineAmount, boolean _validatePartialChecking = false)
    {
        AmountCur       lineAmountToSettle;
        DiscPct         lineDiscPct;
        CashDiscAmount  cashDiscAmount;

        cashDiscAmount = this.parmCashDiscAmountToTake();

        if (cashDiscAmount > 0)
        {
            if (this.allowCashDisc(totalAmountCur))
            {
                lineDiscPct = (cashDiscAmount / (custTransOpen.AmountCur + custTransOpen.getPrevSettledAmount()));
            }
        }
        else
        {
            lineDiscPct = 0;
        }

        lineAmountToSettle = ((_lineAmount) * (1 - lineDiscPct));
        lineAmountToSettle = CurrencyExchange::round(lineAmountToSettle, localCurrencyCode );

        return lineAmountToSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTotalCashDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the discount amount on the invoice.
    /// </summary>
    /// <returns>
    ///    The applicable discount on the invoice.
    /// </returns>
    public CashDiscAmount findTotalCashDiscountAmount()
    {
        CashDiscAmount discAmount;
        TransDate cashDiscDate;

        if (specTrans.SelectedDateUsedToCalcCashDisc)
        {
            cashDiscDate = specTrans.SelectedDateUsedToCalcCashDisc;
        }
        else
        {
            cashDiscDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        discAmount  = CustTransCashDisc::findByUseCashDisc(tableNum(CustTransOpen), custTransOpen.RecId, custTransOpen.UseCashDisc, cashDiscDate).CashDiscAmount;

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTotalCashDiscountAmountForTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total cash discount line amount for the specified <c>SpecTrans</c> record.
    /// </summary>
    /// <returns>
    ///    The sum of the cash discount marked line amount for the specified <c>SpecTrans</c> record.
    /// </returns>
    public CashDiscAmount findTotalCashDiscountAmountForTransLine()
    {
        CashDiscAmount totalCashDiscAmountOnLines;
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        select sum(CashDiscLineToTake) from custTransMarkedOpenLine
            where custTransMarkedOpenLine.SpecTrans == specTrans.RecId;

        totalCashDiscAmountOnLines = custTransMarkedOpenLine.CashDiscLineToTake;

        return totalCashDiscAmountOnLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForExistingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization for existing pending settlement lines.
    /// </summary>
    /// <param name="_custTransOpenRecId">
    ///    The open transaction record ID.
    /// </param>
    private void initForExistingTrans(RecId _custTransOpenRecId)
    {
        CustTransOpenLine transOpenLine;
        CustTransMarkedOpenLine markedOpenLine;

        this.initMarkedTotal();

        custTransOpen = CustTransOpen::find(_custTransOpenRecId);
        custTrans = custTransOpen.custTrans();
        specTrans = specTransManager.findByRef(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId);

        transCashDiscAmount = specTrans.CashDiscToTake;
        totalAmountCur = specTrans.CashDiscToTake + specTrans.Balance01;

        allowCashDiscPartialPayment = CustParameters::findByCompany(custTransOpen.company()).CashDiscForPartialPaym;

        localCurrencyCode = custTrans.CurrencyCode;

        localCurrencyHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(custTransOpen.company()).RecId));

        // Adding all the marked line amount
        while select AmountToSettle from markedOpenLine
            where markedOpenLine.SpecTrans == specTrans.RecId
            join RecId from transOpenLine
            order by RecId
            where transOpenLine.RecId == markedOpenLine.CustTransOpenLine
                && transOpenLine.CustTransOpen == _custTransOpenRecId
        {
            this.addToMarkedTotal(transOpenLine.RecId, markedOpenLine.AmountToSettle);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the marked total amount.
    /// </summary>
    private void initMarkedTotal()
    {
        markedTotalInPaymCur = 0.0;
        markedTotalInPaymCurList = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransFullySettled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether all lines are marked for the full amount.
    /// </summary>
    /// <returns>
    ///    true if all lines are marked for the full amount; otherwise, false.
    /// </returns>
    public boolean isTransFullySettled()
    {
        boolean isFullySettled;
        CustTransOpenLine custTransOpenLine;
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        specTrans specTransLocal;

        select firstonly RecId from custTransOpenLine
            where custTransOpenLine.CustTransOpen == custTransOpen.RecId
            notexists join custTransMarkedOpenLine
                where custTransMarkedOpenLine.CustTransOpenLine == custTransOpenLine.RecId;

        if (!custTransOpenLine)
        {
            select sum(AmountCur) from custTransOpenLine
                where custTransOpenLine.CustTransOpen == custTransOpen.RecId;

            select sum(AmountToSettle), sum(CashDiscLineToTake) from custTransMarkedOpenLine
                join specTransLocal
                where custTransMarkedOpenLine.SpecTrans == specTransLocal.RecId
                    && specTransLocal.RefRecId == custTransOpen.RecId;

            if (custTransOpenLine.AmountCur ==
                custTransMarkedOpenLine.AmountToSettle + custTransMarkedOpenLine.CashDiscLineToTake)
            {
                isFullySettled = true;
            }
        }

        return isFullySettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransMarkedLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line is marked.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    The <c>CustTransOpenLine</c> record.
    /// </param>
    /// <returns>
    ///    true if the transaction is marked; otherwise, false.
    /// </returns>
    public boolean isTransMarkedLine(CustTransOpenLine _custTransOpenLine)
    {
        boolean isMarked;

        if (_custTransOpenLine)
        {
            CustTransMarkedOpenLine specTransLine = CustTransMarkedOpenLine::findByRefId(specTrans.RecId, _custTransOpenLine.RecId);

            if (specTransLine)
            {
                isMarked = true;
            }
        }

        return isMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkedSpecTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the settlement amounts for the invoice line.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    The <c>CustTransOpenLine</c> record.
    /// </param>
    /// <param name="_custTransMarkedOpenLine">
    ///    The <c>CustTransMarkedOpenLine</c> record.
    /// </param>
    /// <param name="_openLineAmountCur">
    ///    The open line amount.
    /// </param>
    /// <param name="_discAmountToTake">
    ///    The total discount amount to take on the invoice.
    /// </param>
    /// <param name="_localCurrencyHelper">
    ///    An instance of the <c>CurrencyExchHelper</c> class.
    /// </param>
    /// <param name="_remainingTotalAmount">
    ///    The total amount that remains on the invoice.
    /// </param>
    /// <param name="_totalAmountCur">
    ///    The total amount on the invoice.
    /// </param>
    /// <param name="_remainingDiscToTake">
    ///    The total discount that remains on the invoice.
    /// </param>
    /// <param name="_remainingSettlementAmount">
    ///    The total amount to settle that remains on the invoice.
    /// </param>
    /// <returns>
    ///    The remaining amount, discount, and amount to settle on the invoice.
    /// </returns>
    private container updateMarkedSpecTransLine(
        CustTransOpenLine _custTransOpenLine,
        CustTransMarkedOpenLine _custTransMarkedOpenLine,
        AmountCur _openLineAmountCur,
        CashDiscAmount _discAmountToTake,
        CurrencyExchangeHelper _localCurrencyHelper,
        AmountCur _remainingTotalAmount,
        AmountCur _totalAmountCur,
        CashDiscAmount _remainingDiscToTake,
        AmountCur _remainingSettlementAmount)
    {
        AmountCur lineAmountCur;
        AmountCur lineAmountToSettle;
        AmountCur lineDiscAmount;

        if (_remainingTotalAmount >= (_custTransMarkedOpenLine.AmountToSettle + _custTransMarkedOpenLine.CashDiscLineToTake))
        {
            lineAmountCur = _custTransMarkedOpenLine.AmountToSettle + _custTransMarkedOpenLine.CashDiscLineToTake;
        }
        else
        {
            lineAmountCur = _remainingTotalAmount;
        }

        _remainingTotalAmount -= lineAmountCur;

        if (_remainingTotalAmount > 0)
        {
            CashDiscAmount remainingLineCashDiscountAmount = this.calculateTotalCashDiscountForLine(_custTransOpenLine);

            lineDiscAmount = CurrencyExchange::round((lineAmountCur / _totalAmountCur) * _discAmountToTake, localCurrencyCode);

            if (lineDiscAmount > remainingLineCashDiscountAmount)
            {
                lineDiscAmount = remainingLineCashDiscountAmount;
            }

            lineAmountToSettle = lineAmountCur - lineDiscAmount;
        }
        else
        {
            if (((_custTransMarkedOpenLine.AmountToSettle + _custTransMarkedOpenLine.CashDiscLineToTake) == _openLineAmountCur) &&
                ((_remainingDiscToTake + _remainingSettlementAmount) != _openLineAmountCur))
            {
                // Adjusting penny different on last marked line.
                _remainingDiscToTake = _openLineAmountCur - _remainingSettlementAmount;
                lineDiscAmount = _remainingDiscToTake;
                lineAmountToSettle = _remainingSettlementAmount;
            }
            else
            {
                if (_custTransMarkedOpenLine.AmountToSettle > (_remainingSettlementAmount + _remainingDiscToTake))
                {
                    lineAmountToSettle = _custTransMarkedOpenLine.AmountToSettle;
                    lineDiscAmount =  _custTransMarkedOpenLine.CashDiscLineToTake;
                }
                else
                {
                    lineAmountToSettle = _remainingSettlementAmount;
                    lineDiscAmount =  _remainingDiscToTake;
                }
            }
        }

        return [_remainingTotalAmount, lineAmountToSettle, lineDiscAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the specified open transaction line for settlement to the customer payment.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    The open transaction line record.
    /// </param>
    public void markTransLine(CustTransOpenLine _custTransOpenLine)
    {
        AmountCur amountToSettle;
        CashDiscAmount lineCashDiscAmount;

        ttsbegin;

        AmountCur remainingLineAmount = this.findUnmarkedLineAmount(_custTransOpenLine);

        if (this.allowCashDisc(totalAmountCur))
        {
            lineCashDiscAmount = this.calculateTotalCashDiscountForLine(_custTransOpenLine);
            lineCashDiscAmount = CurrencyExchange::round(lineCashDiscAmount, localCurrencyCode);

            amountToSettle = remainingLineAmount - lineCashDiscAmount;

            this.addToMarkedTotal(_custTransOpenLine.RecId, amountToSettle);
            transCashDiscAmount = this.findCashDiscountForTrans(this.getMarkedTotal());
            totalAmountCur = this.getMarkedTotal() + transCashDiscAmount;
        }
        else
        {
            lineCashDiscAmount = 0;

            amountToSettle = remainingLineAmount;

            this.addToMarkedTotal(_custTransOpenLine.RecId, amountToSettle);
            transCashDiscAmount = 0;
            totalAmountCur = this.getMarkedTotal();
        }

        specTransManager.insertLine(
            custTransOpen.company(),
            tableNum(CustTransOpen),
            custTransOpen.RecId,
            specTrans.RecId,
            _custTransOpenLine.RecId,
            amountToSettle,
            lineCashDiscAmount);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>CustOpenTransLineManager</c> class.
    /// </summary>
    /// <param name="common">
    ///    The common object.
    /// </param>
    protected void new(Common common)
    {
        specCompany = common.company();
        specTableId = common.TableId;
        specRecId = common.RecId;

        specTransManager = SpecTransManager::newFromSpec(common, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashDiscAmountToTake</Name>
				<Source><![CDATA[
    public CashDiscAmount parmCashDiscAmountToTake(CashDiscAmount _cashDiscAmountToTake = totalCashDiscAmountToTake)
    {
        if (totalCashDiscAmountToTake != _cashDiscAmountToTake)
        {
            totalCashDiscAmountToTake = _cashDiscAmountToTake;
        }

        return totalCashDiscAmountToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscountAmountMarkedToBeTaken</Name>
				<Source><![CDATA[
    public CashDiscAmount getCashDiscountAmountMarkedToBeTaken(CashDiscAmount _transCashDiscAmount = transCashDiscAmount)
    {
        if (transCashDiscAmount != _transCashDiscAmount)
        {
            transCashDiscAmount = _transCashDiscAmount;
        }

        return transCashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromMarkedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subtracts the marked amount for the specified open line.
    /// </summary>
    /// <param name="_custTransOpenLineRecId">
    ///    The open line record ID.
    /// </param>
    private void removeFromMarkedTotal(RecId _custTransOpenLineRecId)
    {
        AmountCur markedAmount;

        if (markedTotalInPaymCurList.exists(_custTransOpenLineRecId))
        {
            markedAmount = markedTotalInPaymCurList.lookup(_custTransOpenLineRecId);
            markedTotalInPaymCurList.remove(_custTransOpenLineRecId);
            markedTotalInPaymCur -= markedAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMarkedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the total line amount.
    /// </summary>
    /// <param name="_custTransOpenRecId">
    ///    The record ID of the <c>CustTransOpen</c> table that is used to obtain all open lines from the
    ///    <c>CustTransOpenLine</c> table.
    /// </param>
    public void resetMarkedTotals()
    {
        CustTransOpenLine custTransOpenLine;
        CustTransMarkedOpenLine markedOpenLine;

        localCurrencyCode = custTrans.CurrencyCode;

        while select AmountToSettle from markedOpenLine
            where markedOpenLine.SpecTrans == specTrans.RecId
            join RecId from custTransOpenLine
            where custTransOpenLine.RecId ==  markedOpenLine.CustTransOpenLine
                && custTransOpenLine.CustTransOpen == custTransOpen.RecId
        {
            this.removeFromMarkedTotal(custTransOpenLine.RecId);
            this.addToMarkedTotal(custTransOpenLine.RecId, markedOpenLine.AmountToSettle);
        }

        transCashDiscAmount = this.findTotalCashDiscountAmountForTransLine();
        totalAmountCur = transCashDiscAmount + this.getMarkedTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unmarks the specified open transaction line for settlement to the customer payment.
    /// </summary>
    /// <param name="_custTransOpenLine">
    ///    The open transaction line record.
    /// </param>
    public void unmarkTransLine(CustTransOpenLine _custTransOpenLine)
    {
        CustTransMarkedOpenLine markedOpenLine;

        ttsbegin;

        markedOpenLine = CustTransMarkedOpenLine::findByRefId(specTrans.RecId, _custTransOpenLine.RecId);

        if (markedOpenLine)
        {
            // Cannot unmark the invoice line if total amount to settle becomes is less than or equal to zero.
            if (this.getMarkedTotal() - markedOpenLine.AmountToSettle <= 0)
            {
                throw error("@SYS138837");
            }

            this.removeFromMarkedTotal(_custTransOpenLine.RecId);

            if (this.allowCashDisc())
            {
                transCashDiscAmount -= markedOpenLine.CashDiscLineToTake;
            }
            else
            {
                transCashDiscAmount = 0;
            }

            totalAmountCur -= (markedOpenLine.AmountToSettle + markedOpenLine.CashDiscLineToTake);

            specTransManager.deleteLine(specTrans, _custTransOpenLine.RecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscountOnTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Distributes the cash discount amount applicable on each invoice line.
    /// </summary>
    /// <param name="_custTransOpenLineRecId">
    ///    The record ID of the <c>CustTransOpenLine</c> table.
    /// </param>
    public void updateCashDiscountOnTransLines(RecId _custTransOpenLineRecId)
    {
        CustTransOpenLine custTransOpenLine;
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        CashDiscAmount lineDiscAmount;
        AmountCur lineAmountToSettle;
        AmountCur remainingTotalAmount;
        AmountCur remainingSettlementAmount;
        CashDiscAmount remainingDiscToTake;
        CashDiscAmount totalDiscToTake;

        remainingTotalAmount = totalAmountCur;

        if (this.allowCashDisc(totalAmountCur))
        {
            remainingDiscToTake = transCashDiscAmount;
            remainingSettlementAmount = this.getMarkedTotal();

            // Partial is off and marking is full.
            AmountCur unmarkedAmount = specTransManager.findUnmarkedAmountForRef(
                custTransOpen.AmountCur,
                custTransOpen.company(),
                tableNum(CustTransOpen),
                custTransOpen.RecId);

            if (remainingSettlementAmount == unmarkedAmount)
            {
                transCashDiscAmount =  this.parmCashDiscAmountToTake();
                remainingDiscToTake = transCashDiscAmount;
                remainingSettlementAmount -= remainingDiscToTake;
            }
        }
        else
        {
            remainingDiscToTake       = transCashDiscAmount;
            remainingSettlementAmount = totalAmountCur;
        }

        ttsbegin;

        // Calculate discount to take and amount to settle on negative lines
        while select RecId, AmountCur from custTransOpenLine
            where custTransOpenLine.CustTransOpen == custTransOpen.RecId
            join custTransMarkedOpenLine
                order by RecId asc
                where custTransMarkedOpenLine.CustTransOpenLine == custTransOpenLine.RecId
                    && custTransMarkedOpenLine.SpecTrans == specTrans.RecId
                    && custTransMarkedOpenLine.AmountToSettle < 0
        {
            AmountCur remainingLineAmount = this.findUnmarkedLineAmount(custTransOpenLine);

            if (remainingTotalAmount > 0 && remainingLineAmount != 0.0)
            {
                [remainingTotalAmount, lineAmountToSettle, lineDiscAmount] = this.updateMarkedSpecTransLine(
                    custTransOpenLine,
                    custTransMarkedOpenLine,
                    remainingLineAmount,
                    transCashDiscAmount,
                    localCurrencyHelper,
                    remainingTotalAmount,
                    totalAmountCur,
                    remainingDiscToTake,
                    remainingSettlementAmount);

                custTransMarkedOpenLine.CashDiscLineToTake = lineDiscAmount;
                custTransMarkedOpenLine.AmountToSettle = lineAmountToSettle;
                custTransMarkedOpenLine.selectForUpdate(true);
                custTransMarkedOpenLine.update();

                remainingSettlementAmount -= lineAmountToSettle;
                remainingDiscToTake -= lineDiscAmount;

                this.removeFromMarkedTotal(custTransOpenLine.RecId);
                this.addToMarkedTotal(custTransOpenLine.RecId, lineAmountToSettle);

                totalDiscToTake += lineDiscAmount;
            }
        }

        // Calculate discount to take and amount to settle on positve lines
        while select RecId, AmountCur from custTransOpenLine
            where custTransOpenLine.CustTransOpen == custTransOpen.RecId
            join custTransMarkedOpenLine
                order by RecId asc
                where custTransMarkedOpenLine.CustTransOpenLine == custTransOpenLine.RecId
                    && custTransMarkedOpenLine.SpecTrans == specTrans.RecId
                    && custTransMarkedOpenLine.AmountToSettle > 0
        {
            AmountCur remainingLineAmount = this.findUnmarkedLineAmount(custTransOpenLine);

            if (remainingTotalAmount > 0 && remainingLineAmount != 0.0)
            {
                [remainingTotalAmount, lineAmountToSettle, lineDiscAmount] = this.updateMarkedSpecTransLine(
                    custTransOpenLine,
                    custTransMarkedOpenLine,
                    remainingLineAmount,
                    transCashDiscAmount,
                    localCurrencyHelper,
                    remainingTotalAmount,
                    totalAmountCur,
                    remainingDiscToTake,
                    remainingSettlementAmount);

                custTransMarkedOpenLine.CashDiscLineToTake = lineDiscAmount;
                custTransMarkedOpenLine.AmountToSettle = lineAmountToSettle;
                custTransMarkedOpenLine.selectForUpdate(true);
                custTransMarkedOpenLine.update();

                remainingSettlementAmount -= lineAmountToSettle;
                remainingDiscToTake -= lineDiscAmount;

                this.removeFromMarkedTotal(custTransOpenLine.RecId);
                this.addToMarkedTotal(custTransOpenLine.RecId, lineAmountToSettle);

                totalDiscToTake += lineDiscAmount;
            }
        }

        ttscommit;

        transCashDiscAmount = totalDiscToTake;
        totalAmountCur = this.getMarkedTotal() + transCashDiscAmount;

        if (totalAmountCur <= 0)
        {
            transCashDiscAmount = temptransCashDiscAmount;
            totalAmountCur = temptotalAmountCur;

            throw error("@SYS138837");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlementLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the settlement amount of the line.
    /// </summary>
    /// <param name="_custTransOpenLineRecId">
    ///    The open transaction line.
    /// </param>
    /// <param name="newSettlementAmount">
    ///    The new settlement amount.
    /// </param>
    public void updateSettlementLineAmount(RecId _custTransOpenLineRecId, AmountCur newSettlementAmount)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        CustTransOpenLine       custTransOpenLine;
        CashDiscAmount          remDiscOnLines;
        AmountCur               amountToSettle;
        CashDiscAmount          lineCashDiscAmount;
        AmountCur               tempMarkLineAmount;

        temptransCashDiscAmount = transCashDiscAmount;
        temptotalAmountCur = totalAmountCur;

        custTransOpenLine   = CustTransOpenLine::find(_custTransOpenLineRecId);

        custTransMarkedOpenLine = CustTransMarkedOpenLine::findByRefId(specTrans.RecId, _custTransOpenLineRecId, true);
        tempMarkLineAmount = custTransMarkedOpenLine.AmountToSettle;

        if (custTransMarkedOpenLine.RecId != 0)
        {
            if (custTransMarkedOpenLine.AmountToSettle == newSettlementAmount)
            {
                throw Exception::Error;
            }

            if ((this.getMarkedTotal() - custTransMarkedOpenLine.AmountToSettle + newSettlementAmount) <= 0)
            {
                throw error("@SYS138837");
            }

            remDiscOnLines = transCashDiscAmount - custTransMarkedOpenLine.CashDiscLineToTake;

            ttsbegin;

            if (this.allowCashDisc())
            {
                // Partial discount is allowed
                amountToSettle = newSettlementAmount;

                this.removeFromMarkedTotal(custTransOpenLine.RecId);
                this.addToMarkedTotal(custTransOpenLine.RecId, amountToSettle);

                transCashDiscAmount = this.findCashDiscountForTrans(this.getMarkedTotal());

                lineCashDiscAmount = (amountToSettle / this.getMarkedTotal()) * transCashDiscAmount;
                lineCashDiscAmount = CurrencyExchange::round(lineCashDiscAmount, localCurrencyCode);

                CashDiscAmount availableCashDiscountForLine = this.calculateTotalCashDiscountForLine(custTransOpenLine);

                if (lineCashDiscAmount > availableCashDiscountForLine)
                {
                    lineCashDiscAmount = availableCashDiscountForLine;
                }

                custTransMarkedOpenLine.AmountToSettle = amountToSettle;
                custTransMarkedOpenLine.CashDiscLineToTake = lineCashDiscAmount;

                totalAmountCur = this.getMarkedTotal() + transCashDiscAmount;

                if (totalAmountCur > custTransOpen.AmountCur)
                {
                    totalAmountCur = custTransOpen.AmountCur;
                }
            }
            else
            {
                // Partial discount is not allowed
                this.removeFromMarkedTotal(custTransOpenLine.RecId);

                if (this.getMarkedTotal() + newSettlementAmount >= custTransOpen.AmountCur)
                {
                    newSettlementAmount = custTransOpenLine.AmountCur;
                }

                this.addToMarkedTotal(custTransOpenLine.RecId, newSettlementAmount);

                custTransMarkedOpenLine.AmountToSettle = newSettlementAmount;
                custTransMarkedOpenLine.CashDiscLineToTake = 0;

                transCashDiscAmount = 0;
                totalAmountCur =  this.getMarkedTotal() + remDiscOnLines;
            }

            if (totalAmountCur <= 0)
            {
                this.removeFromMarkedTotal(custTransOpenLine.RecId);
                this.addToMarkedTotal(custTransOpenLine.RecId, tempMarkLineAmount);

                transCashDiscAmount = temptransCashDiscAmount;
                totalAmountCur = temptotalAmountCur;

                throw error("@SYS138837");
            }

            custTransMarkedOpenLine.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalAmountOfCustOpenTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total amount of the <c>CustOpenTransLine</c> record.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record.
    /// </param>
    /// <returns>
    /// The total amount of the <c>CustOpenTransLine</c> record.
    /// </returns>
    public static Amount calculateTotalAmountOfCustOpenTransLine(CustInvoiceTrans   _custInvoiceTrans)
    {
        Amount      totalLineAmount;
        TaxTrans    taxTrans;
        MarkupTrans markupTrans;

        select sum(Value), sum(TaxAmount) from markupTrans
            where markupTrans.TransTableId == _custInvoiceTrans.TableId
            &&  markupTrans.TransRecId == _custInvoiceTrans.RecId
            &&  !markupTrans.IsDeleted;

        totalLineAmount = _custInvoiceTrans.LineAmount + markupTrans.Value;

        if (TaxParameters::find().TaxSpecifyLine == NoYes::Yes)
        {
            totalLineAmount += _custInvoiceTrans.TaxAmount + markupTrans.TaxAmount;
        }
        else
        {
            // Determine the tax amount for each free text invoice line.
            select sum(SourceRegulateAmountCur) from taxTrans
                where taxTrans.SourceTableId == _custInvoiceTrans.TableId
                && taxTrans.SourceRecId == _custInvoiceTrans.RecId;

            totalLineAmount -= taxTrans.SourceRegulateAmountCur;

            // Determine the tax amount of markup for each free text invoice line.
            select sum(SourceRegulateAmountCur) from taxTrans
                exists join markupTrans
                    where markupTrans.TransTableId == _custInvoiceTrans.TableId
                    &&  markupTrans.TransRecId == _custInvoiceTrans.RecId
                    &&  markupTrans.TableId == taxTrans.SourceTableId
                    &&  markupTrans.RecId == taxTrans.SourceRecId
                    &&  !markupTrans.IsDeleted;

            totalLineAmount -= taxTrans.SourceRegulateAmountCur;
        }

        return totalLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>CustOpenTransLineManager</c> class.
    /// </summary>
    /// <param name="_custOpenTransRecId">
    ///    The open transaction.
    /// </param>
    /// <param name="common">
    ///    The common object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>CustOpenTransLineManager</c> class.
    /// </returns>
    public static CustOpenTransLineManager construct(RecId _custOpenTransRecId, Common common)
    {
        CustOpenTransLineManager custOpenTransLineManager;

        custOpenTransLineManager = new CustOpenTransLineManager(common);
        custOpenTransLineManager.initForExistingTrans(_custOpenTransRecId);

        return custOpenTransLineManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTotalSettledLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total settled line amount.
    /// </summary>
    /// <param name="_specTrans">
    /// A <c>SpecTrans</c> record ID.
    /// </param>
    /// <returns>
    /// The sum of the settled amount by the specified <c>SpecTrans</c> record ID.
    /// </returns>
    public static AmountCur determineTotalSettledLineAmount(SpecTransRefRecId _specTransRefRecId)
    {
        AmountCur totalSettledAmount;
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        SpecTrans specTrans;

        if (_specTransRefRecId != 0)
        {
            select sum(AmountToSettle), sum(CashDiscLineToTake) from custTransMarkedOpenLine
                where custTransMarkedOpenLine.SpecTrans == _specTransRefRecId;

            totalSettledAmount = custTransMarkedOpenLine.AmountToSettle + custTransMarkedOpenLine.CashDiscLineToTake;
        }

        return totalSettledAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkInvoiceButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the mark invoice line button.
    /// </summary>
    /// <param name="_args">
    ///    The caller record.
    /// </param>
    /// <returns>
    ///    true if the mark invoice line button should be enabled; otherwise, false.
    /// </returns>
    public static boolean setMarkInvoiceButton(Args _args)
    {
        boolean canMarkInvoiceLines = true;
        LedgerJournalTrans ledgerJournalTrans;
        CustTransOpen custTransOpen;
        CustTransOpenLine custTransOpenLine;
        boolean hasSpecTrans;

        // Checking if parameter is enable in setup
        if (CustParameters::find().MarkOpenInvoiceLine == NoYes::No)
        {
            canMarkInvoiceLines = false;
        }

        // Checking from payment Lines
        switch (_args.dataset())
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = _args.record();

                // Checking for multiple or Interest note.
                if (canMarkInvoiceLines && ((ledgerJournalTrans.MarkedInvoice == '*') || (ledgerJournalTrans.MarkedInvoice == '') || (ledgerJournalTrans.AmountCurCredit <= 0.0) || (ledgerJournalTrans.AmountCurDebit != 0.0)))
                {
                    canMarkInvoiceLines = false;
                }

                // Checking invoice lines exist
                if (canMarkInvoiceLines
                    && !CustTransOpenLine::existByRefId(ledgerJournalTrans.MarkedInvoiceRecId))
                {
                    canMarkInvoiceLines = false;
                }
                break;

            case tableNum(CustTransOpen):
                custTransOpen = _args.record();

                if (canMarkInvoiceLines && (custTransOpen.AmountCur < 0))
                {
                    canMarkInvoiceLines = false;
                }

                // Invoice is marked for settlement
                if (canMarkInvoiceLines)
                {
                    hasSpecTrans = SpecTrans::existByRef(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId);

                    if (!hasSpecTrans)
                    {
                        canMarkInvoiceLines = false;
                    }
                }

                // Marked invoice contains lines
                if (canMarkInvoiceLines)
                {
                    select firstonly crossCompany RecId from custTransOpenLine
                        where custTransOpenLine.CustTransOpen == custTransOpen.RecId;

                    if (!custTransOpenLine)
                    {
                        canMarkInvoiceLines = false;
                    }
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return canMarkInvoiceLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalCashDiscountForLine</Name>
				<Source><![CDATA[
    private CashDiscAmount calculateTotalCashDiscountForLine(CustTransOpenLine _custTransOpenLine)
    {
        CashDiscAmount totalCashDiscountForLine = this.parmCashDiscAmountToTake() * (_custTransOpenLine.AmountCur / custTransOpen.AmountCur);
        totalCashDiscountForLine = CurrencyExchange::round(totalCashDiscountForLine, localCurrencyCode);

        CashDiscAmount cashDiscountMarkedToBeTaken = this.findCashDiscountAmountMarkedToBeTaken(_custTransOpenLine);

        return totalCashDiscountForLine - cashDiscountMarkedToBeTaken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDiscountAmountMarkedToBeTaken</Name>
				<Source><![CDATA[
    private CashDiscAmount findCashDiscountAmountMarkedToBeTaken(CustTransOpenLine _custTransOpenLine)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        select sum(CashDiscLineToTake) from custTransMarkedOpenLine
            where custTransMarkedOpenLine.CustTransOpenLine == _custTransOpenLine.RecId
                && custTransMarkedOpenLine.SpecTrans != specTrans.RecId;

        return custTransMarkedOpenLine.CashDiscLineToTake;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>