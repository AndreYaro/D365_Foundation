<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankModernReconciliationUpgradeWizardController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankModernReconciliationUpgradeWizardController</c> is the sysOperation controller class for the Bank Modern Reconciliation Wizard.
/// </summary>
internal final class BankModernReconciliationUpgradeWizardController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankModernReconciliationUpgradeWizardController construct()
    {
        BankModernReconciliationUpgradeWizardController controller = new BankModernReconciliationUpgradeWizardController(
            classStr(BankModernReconciliationUpgradeWizardProcessor),
            methodStr(BankModernReconciliationUpgradeWizardProcessor, processDataUpgrade));
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        BankModernReconciliationUpgradeWizardController controller = BankModernReconciliationUpgradeWizardController::construct();
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        BankModernReconciliationUpgradeWizardContract contract = this.getContract();
        if (contract.parmNeedsToBeSplitIntoTasks())
        {
            BatchHeader batchHeader = this.getOrCreateBatchHeader();
            batchHeader.parmCaption(this.caption());

            this.createTaskOfMatchingRule(batchHeader);
            this.splitTasksOnLegalEntity(batchHeader);
            batchHeader.save();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaskOfMatchingRule</Name>
				<Source><![CDATA[
    private void createTaskOfMatchingRule(BatchHeader _batchHeader)
    {
        BankModernReconciliationUpgradeWizardContract contract = this.getContract();
        BankModernReconciliationUpgradeWizardController taskController = BankModernReconciliationUpgradeWizardController::construct();
        BankModernReconciliationUpgradeWizardContract taskContract = taskController.getContract();
        taskContract.parmIsUpgradeGlobalMatchingRule(true);
        taskContract.parmNeedsToBeSplitIntoTasks(false);
        taskController.batchInfo().parmCaption("@Bank:BankModernReconciliationUpgradeWizardMatchingRuleTaskHeader");
        _batchHeader.addTask(taskController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTasksOnLegalEntity</Name>
				<Source><![CDATA[
    private void splitTasksOnLegalEntity(BatchHeader _batchHeader)
    {
        BankModernReconciliationUpgradeWizardContract contract = this.getContract();
        Set dataAreaToExecuteSet = contract.parmDataAreaToExecuteSet();

        SetEnumerator setEnumerator = dataAreaToExecuteSet.getEnumerator();
        while (setEnumerator.moveNext())
        {
            DataAreaId dataAreaId = setEnumerator.current();
            BankModernReconciliationUpgradeWizardController taskController = this.cloneForSubProcess(contract, dataAreaId, false);
            taskController.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            taskController.batchInfo().parmCaption(strFmt("@Bank:BankModernReconciliationUpgradeWizardTaskHeader", any2Str(dataAreaId)));
            _batchHeader.addTask(taskController);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneForSubProcess</Name>
				<Source><![CDATA[
    private BankModernReconciliationUpgradeWizardController cloneForSubProcess(BankModernReconciliationUpgradeWizardContract _contract, DataAreaId _dataAreaId, boolean _needToSplitIntoTask)
    {
        BankModernReconciliationUpgradeWizardController taskController = BankModernReconciliationUpgradeWizardController::construct();
        BankModernReconciliationUpgradeWizardContract taskContract = taskController.getContract();
        taskContract.parmUpgradeAfterDate(_contract.parmUpgradeAfterDate());
        taskContract.parmExecuteForDataAreaId(_dataAreaId);
        taskContract.parmNeedsToBeSplitIntoTasks(_needToSplitIntoTask);
        return taskController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateBatchHeader</Name>
				<Source><![CDATA[
    private BatchHeader getOrCreateBatchHeader()
    {
        Batchheader batchHeader = BatchHeader::getCurrentBatchHeader();

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@Bank:BankModernReconciliationUpgradeWizardHeader";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    internal BankModernReconciliationUpgradeWizardContract getContract()
    {
        return this.getDataContractObject() as BankModernReconciliationUpgradeWizardContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>