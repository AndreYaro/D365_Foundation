<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInAccountStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerInAccountStatement extends RunBase
{
    protected TotalTrans totalTrans;

    protected LedgerJournalTrans ledgerJournalTrans;

    protected NumberSeq numberSeq;
    protected Voucher voucher;
    protected LedgerJournalId ledgerJournalId;
    private RefRecId numberSeqId;

    private ImportMode importMode;

    protected Filename filename;
    private CompanyBankAccountId bankAccountId;
    private LedgerDimensionDefaultAccount interCompanyLedgerDimension;

    private DialogField dialogBankAccountId;
    private DialogField dialogInterCompanyLedgerDimension;

    protected DialogRunbase baseDialog;
    protected System.IO.Stream stream;
    private FileUpload fileUpload;
    protected TextStreamIo textFile;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        bankAccountId,
        interCompanyLedgerDimension,
        filename
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void createLedgerJournalTrans(LedgerJournalTransImport _ledgerJournalTransImport)
    {
        this.initLedgerJournalTrans(_ledgerJournalTransImport);
        ledgerJournalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransTotal</Name>
				<Source><![CDATA[
    protected void createLedgerJournalTransTotal(LedgerJournalTransImport _ledgerJournalTransImport)
    {
        ledgerJournalTrans.clear();
        this.loadVoucherNum();
        ledgerJournalTrans.JournalNum = ledgerJournalId;
        ledgerJournalTrans.Voucher = voucher;
        ledgerJournalTrans.LoadingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.TransDate = _ledgerJournalTransImport.transDate();
        ledgerJournalTrans.Company = curext();
        ledgerJournalTrans.OffsetCompany = curext();
        ledgerJournalTrans.parmAccount(bankAccountId, LedgerJournalACType::Bank);
        ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(interCompanyLedgerDimension);
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.CurrencyCode = _ledgerJournalTransImport.currencyCode();
        ledgerJournalTrans.AmountCurDebit = _ledgerJournalTransImport.amountCurDebit();
        ledgerJournalTrans.AmountCurCredit = _ledgerJournalTransImport.amountCurCredit();
        ledgerJournalTrans.Triangulation = Currency::triangulation(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        if (Ledger::reportingCurrency())
        {
            ExchangeRateCalculation exchangeRateCalculation= ExchangeRateCalculation::newExchangeDate(Ledger::reportingCurrencyExchangeRateType(),
                                                                                                ledgerJournalTrans.CurrencyCode,
                                                                                                Ledger::reportingCurrency(),
                                                                                                ledgerJournalTrans.TransDate);

            ledgerJournalTrans.ReportingCurrencyExchRate = exchangeRateCalculation.getExchangeRate1();
            ledgerJournalTrans.ReportingCurrencyExchRateSecondary = exchangeRateCalculation.getExchangeRate2();
        }
        ledgerJournalTrans.TaxItemGroup = TaxParameters::find().TaxItemGroup;

        ledgerJournalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        if (totalTrans == TotalTrans::Total)
        {
            baseDialog = new DialogRunbase("@SYS68260", this);

            dialogBankAccountId = baseDialog.addField(extendedTypeStr(CompanyBankAccountId));
            bankAccountId = LedgerImportMode::findBankAccountId(importMode);
            dialogBankAccountId.value(bankAccountId);
            dialogBankAccountId.active(false);
        }
        else
        {
            baseDialog = new DialogRunbase("@SYS68265", this);
        }

        dialogInterCompanyLedgerDimension = SegmentedEntryControlBuild::addToDialog(baseDialog, classstr(LedgerDimensionDefaultAccountController), extendedTypeStr(LedgerDimensionDefaultAccount), "@SYS21687", interCompanyLedgerDimension);

        interCompanyLedgerDimension = LedgerImportMode::findInterCoLedgerDimension(importMode);
        dialogInterCompanyLedgerDimension.value(interCompanyLedgerDimension);
        dialogInterCompanyLedgerDimension.active(false);

        this.addFileUploadControlToDialog(baseDialog);

        return baseDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFileUploadControlToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the file upload control to the dialog.
    /// </summary>
    /// <param name = "_dialog">Dialog to add the upload control to.</param>
    protected void addFileUploadControlToDialog(DialogRunbase _dialog)
    {
        DialogGroup dialogGroup = _dialog.addGroup("@SYS54759");
        FormBuildControl formBuildControl = _dialog.formBuildDesign().control(dialogGroup.name());
        FileUploadBuild dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), 'FileUpload');
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.fileTypesAccepted('text/plain');
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
        dialogFileUpload.fileNameLabel("@SYS308842");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the dialog Ok button until the file upload is complete.
    /// </summary>
    /// <param name="_dialog">The <c>Runbase</c> dialog object.</param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        fileUpload = _dialog.formRun().control(_dialog.formRun().controlId('FileUpload'));
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// After the file has been uploaded, the Ok button is enabled.
    /// </summary>
    public void uploadCompleted()
    {
        this.setDialogOkButtonEnabled(baseDialog, true);
        stream = fileUpload.getUploadedFile(true);
        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_dialog">The <c>Runbase</c> dialog object.</param>
    /// <param name = "_isEnabled">Indicates whether to enable or disable the Ok button.</param>
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = _dialog.formRun().control(_dialog.formRun().controlId('OkButton'));

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2JournalTotal</Name>
				<Source><![CDATA[
    protected void fromDisk2JournalTotal()
    {
         throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2JournalTrans</Name>
				<Source><![CDATA[
    protected void fromDisk2JournalTrans(boolean _printReport = true)
    {
         throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (totalTrans == TotalTrans::Total)
        {
            bankAccountId = dialogBankAccountId.value();
        }

        interCompanyLedgerDimension = dialogInterCompanyLedgerDimension.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void initLedgerJournalTrans(LedgerJournalTransImport _ledgerJournalTransImport)
    {
        ledgerJournalTrans.clear();
        this.loadVoucherNum();
        ledgerJournalTrans.JournalNum = ledgerJournalId;
        ledgerJournalTrans.Voucher = voucher;
        ledgerJournalTrans.LoadingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.TransDate = _ledgerJournalTransImport.transDate();
        ledgerJournalTrans.Company = curext();
        ledgerJournalTrans.OffsetCompany = curext();
        ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(interCompanyLedgerDimension);
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.CurrencyCode = _ledgerJournalTransImport.currencyCode();
        ledgerJournalTrans.AmountCurDebit = _ledgerJournalTransImport.amountCurDebit();
        ledgerJournalTrans.AmountCurCredit = _ledgerJournalTransImport.amountCurCredit();
        ledgerJournalTrans.Triangulation = Currency::triangulation(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        if (Ledger::reportingCurrency())
        {
            ExchangeRateCalculation exchangeRateCalculation= ExchangeRateCalculation::newExchangeDate(Ledger::reportingCurrencyExchangeRateType(),
                                                                                                ledgerJournalTrans.CurrencyCode,
                                                                                                Ledger::reportingCurrency(),
                                                                                                ledgerJournalTrans.TransDate);

            ledgerJournalTrans.ReportingCurrencyExchRate = exchangeRateCalculation.getExchangeRate1();
            ledgerJournalTrans.ReportingCurrencyExchRateSecondary = exchangeRateCalculation.getExchangeRate2();
        }
        ledgerJournalTrans.TaxItemGroup = TaxParameters::find().TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public className interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVoucherNum</Name>
				<Source><![CDATA[
    protected void loadVoucherNum()
    {
        ttsbegin;

        numberSeq = NumberSeq::newGetNumFromId(numberSeqId);
        voucher = numberSeq.num();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    protected boolean openFile()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(boolean _printReport = true)
    {
        this.openFile();

        if (totalTrans == TotalTrans::Total)
        {
            this.fromDisk2JournalTotal();
        }
        else
        {
            this.fromDisk2JournalTrans(_printReport);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImportMode</Name>
				<Source><![CDATA[
    public void setImportMode(ImportMode _importMode)
    {
        importMode = _importMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalNum</Name>
				<Source><![CDATA[
    public void setJournalNum(LedgerJournalId _ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberSeqId</Name>
				<Source><![CDATA[
    public void setNumberSeqId(RefRecId _numberSeqId)
    {
        numberSeqId = _numberSeqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalTrans</Name>
				<Source><![CDATA[
    public void setTotalTrans(TotalTrans _totalTrans)
    {
        totalTrans = _totalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (totalTrans == TotalTrans::Total)
        {
            bankAccountId = LedgerImportMode::findBankAccountId(importMode);

            if (!BankAccountTable::find(bankAccountId))
            {
                ok = checkFailed(strFmt("@SYS26720",bankAccountId));
            }
            else
            {
                ok = BankAccountTable::checkIsActive(bankAccountId);
            }
        }

        interCompanyLedgerDimension = LedgerImportMode::findInterCoLedgerDimension(importMode);

        if (!LedgerDimensionFacade::getMainAccountFromLedgerDimension(interCompanyLedgerDimension))
        {
            ok = checkFailed(strFmt("@SYS121791", LedgerDimensionFacade::getMainAccountFromLedgerDimension(interCompanyLedgerDimension).MainAccountId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Object construct(ImportMode _importMode)
    {
        DictClass dictClass;
        Object action;
        classId classId;
        Query infoActionQuery;

        classId = LedgerImportMode::find(_importMode).ClassId;

        if (!classId)
        {
            infoActionQuery = new Query();
            infoActionQuery.addDataSource(tableNum(LedgerImportMode)).addRange(fieldNum(LedgerImportMode,ImportMode)).value(_importMode);

            throw error(strFmt("@SYS63358", "@SYS66244", new DictType(extendedTypeNum(ImportMode)).label(), _importMode),
                SysHelpPath::applForm(formStr(LedgerImportMode)),
                SysInfoAction_FormrunQuery::newFormnameControlnameQuery(formStr(LedgerImportMode), 'actionClassName', infoActionQuery));
        }

        if (!SysDictClass::isSuperclass(classId,classNum(LedgerInAccountStatement)))
        {
            throw error(strFmt("@SYS63359",_importMode));
        }

        dictClass = new DictClass(classId);

        if (dictClass)
        {
            action = dictClass.makeObject();

            if (classId == classNum(LedgerInAccountStatementFI_BASIC))
            {
                LedgerInAccountStatement curObject = action;
                warning(strFmt("@LedgerTranslation:ImportModeObsoleteError", _importMode, curObject.interfaceName()));
            }
        }
        else
        {
            throw error("@LedgerTranslation:ImportModeWrongClassIdError");
        }

        return action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerInAccountStatement ledgerInAccountStatement;
        Dialog dialog;
        DialogField dialogImportMode;
        LedgerJournalTable ledgerJournalTable;
        TotalTrans totalTrans;

        totalTrans = args.parmEnum();

        if (totalTrans == TotalTrans::Total)
        {
            dialog = new Dialog("@SYS68260");
        }
        else
        {
            dialog = new Dialog("@SYS68265");
        }

        dialogImportMode = dialog.addField(extendedTypeStr(ImportMode));

        if (args.caller() is LedgerILedgerJournalEngineProvider)
        {
            LedgerILedgerJournalEngineProvider callerForm = args.caller() as LedgerILedgerJournalEngineProvider;
            ledgerJournalTable = callerForm.ledgerJournalEngine().ledgerJournalTable();
        }
        else
        {
            if (totalTrans == TotalTrans::Total)
            {
                throw error(strFmt("@SYS22828", "@SYS68260"));
            }
            else
            {
                throw error(strFmt("@SYS22828", "@SYS68265"));
            }
        }

        if (dialog.run())
        {
            ledgerInAccountStatement = LedgerInAccountStatement::construct(dialogImportMode.value());

            LedgerInAccountStatement::initLedgerInAccountStatement(args, ledgerInAccountStatement, ledgerJournalTable, dialogImportMode, totalTrans);

            if (ledgerInAccountStatement.prompt())
            {
                LedgerJournalTrans::deleteIfZeroAmount(ledgerJournalTable.JournalNum);
                ledgerInAccountStatement.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerInAccountStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>LedgerInAccountStatement</c> instance.
    /// </summary>
    /// <param name = "_args">The arguments for execution.</param>
    /// <param name = "_ledgerInAccountStatement">The constructed ledger import account statement.</param>
    /// <param name = "_ledgerJournalTable">The related journal header.</param>
    /// <param name = "_dialogImportMode">The import mode indicator.</param>
    /// <param name = "_totalTrans">The total transaction indicator.</param>
    protected static void initLedgerInAccountStatement(
        Args _args,
        LedgerInAccountStatement _ledgerInAccountStatement,
        LedgerJournalTable _ledgerJournalTable,
        DialogField _dialogImportMode,
        TotalTrans _totalTrans)
    {
        _ledgerInAccountStatement.setJournalNum(_ledgerJournalTable.JournalNum);
        _ledgerInAccountStatement.setNumberSeqId(_ledgerJournalTable.NumberSequenceTable);
        _ledgerInAccountStatement.setImportMode(_dialogImportMode.value());
        _ledgerInAccountStatement.setTotalTrans(_totalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a stream for reading from the uploaded file.
    /// </summary>
    /// <param name="_stream">
    /// The stream to open for read.
    /// </param>
    /// <returns>
    /// A <c>TextStreamIo</c> handle to the opened stream.
    /// </returns>
    public static TextStreamIo newFile(System.IO.Stream _stream)
    {
        return TextStreamIo::constructForRead(_stream);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerInAccountStatement</Name>
				<Source><![CDATA[
    public static LedgerInAccountStatement newLedgerInAccountStatement(LedgerImportMode _ledgerImportMode)
    {
        DictClass dictClass;
        LedgerInAccountStatement ledgerInAccountStatement;

        if (!_ledgerImportMode.ClassId
            || !SysDictClass::isSuperclass(_ledgerImportMode.ClassId,classNum(LedgerInAccountStatement)))
        {
            return null;
        }

        dictClass = new DictClass(_ledgerImportMode.ClassId);
        ledgerInAccountStatement = dictClass.makeObject();

        return ledgerInAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the file stream.
    /// </summary>
    /// <param name = "_stream">Stream to use.</param>
    public void setFileStream(System.IO.Stream _stream)
    {
        stream = _stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>