<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSMB</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventLogger = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// Customize UI(s) for Retail SMB.
/// </summary>
class RetailSMB
{
    // Static variable used to cache configuration key state
    private static int isRetailSMBEnabled = -1;
    private static UnknownNoYes isRetailProductSku = UnknownNoYes::Unknown;
    private static UnknownNoYes isCommerceProductSku = UnknownNoYes::Unknown;

    private static str RetailMetaDataKeyPath = @'SOFTWARE\Microsoft\Dynamics\7.0\Setup\Metadata';
    private static str RetailProductSkuKey = @'ProductSku';
    private static str RetailProductSkuValue_Retail = @'Dynamics365ForRetail';
    private static str RetailProductSkuValue_Commerce = @'Dynamics365Commerce';
    private static str RetailProductSkuValue_Operations = @'Dynamics365ForOperations';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRetailSMB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check retail SMB configuration key.
    /// </summary>
    /// <param name = "_checkRetailSMBResult">Retail SMB check result.</param>
    [SubscribesTo(classstr(RetailDelegates), delegatestr(RetailDelegates, checkRetailSMBDelegate))]
    public static void checkRetailSMB(EventHandlerResult _checkRetailSMBResult)
    {
        _checkRetailSMBResult.result(RetailSMB::IsRetailSMBEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEssentialsDashboardMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Essentials Dashboard menu item name.
    /// </summary>
    /// <param name = "_getEssentialsDashboardMenuItem">Essentials Dashboard menu item name </param>
    [SubscribesTo(classstr(RetailDelegates), delegatestr(RetailDelegates, getRetailSMBDashbaordMenuItemDelegate))]
    public static void getEssentialsDashboardMenuItem(EventHandlerResult _getEssentialsDashboardMenuItem)
    {
        _getEssentialsDashboardMenuItem.result(menuItemDisplayStr(Essentialsdashboard));
    }

]]></Source>
			</Method>
			<Method>
				<Name>constrainNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constrain navigation.
    /// </summary>
    /// <param name = "rootMenu">Root menu.</param>
    /// <param name = "subMenu">Sub menu.</param>
    /// <param name = "parameter">Parameters.</param>
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void constrainNavigation(SysDictMenu rootMenu, SysDictMenu subMenu, SysBoxedBoolean parameter)
    {
        str rootMenuName = rootMenu.name();
        str subMenuName = subMenu.name();
        boolean isRetailEssentialsEnabled = RetailSMB::IsRetailSMBEnabled();

        // Filter app links , NavPaneMenu
        if (rootMenuName == menustr(MainMenu) || rootMenuName == menustr(NavPaneMenu))
        {
            if (RetailSMB::IsRetailSMBEnabled())
            {
                if (RetailSMB::IsValidRetailSMBMenu(subMenuName))
                {
                    parameter.value = true;
                }
                else
                {
                    parameter.value = false;
                }
            }
            else
            {
                if (RetailSMB::IsRetailSMBOnlyMenu(subMenuName))
                {
                    parameter.value = false;
                }
                else
                {
                    parameter.value = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SystemParameters_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the <c>SystemExchangeRateType</c> field on the <c>SystemParameters</c> table to false if Retail SMB
    /// is enabled. Otherwise the visibility will be true.
    /// </summary>
    /// <param name="sender">The <c>SystemParameters</c> form data source.</param>
    /// <param name="e">A <c>FormDataSourceEventArgs</c> instance.</param>
    [FormDataSourceEventHandler(formDataSourceStr(SystemParameters, SystemParameters), FormDataSourceEventType::Initialized)]
    public static void SystemParameters_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (RetailSMB::IsRetailSMBEnabled())
        {
            sender.object(fieldNum(SystemParameters, SystemExchangeRateType)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsRetailSMBEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determin if the client is in Retail Essentials mode.
    /// </summary>
    /// <returns>
    /// Return true if Retail Essentials is enabled; otherwise return false.
    /// </returns>
    static boolean IsRetailSMBEnabled()
    {
        return isConfigurationKeyEnabled(configurationKeyNum(RetailEssentials)) || isConfigurationKeyEnabled(configurationKeyNum(RetailBasic));
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set controls' visibility for Retail SMB.
    /// </summary>
    /// <param name="form">
    /// The form that to be customized.
    /// </param>
    static void SetVisible(FormRun form)
    {
        switch (form.name())
        {
            // Sales Edit Lines
            case formStr(SalesEditLines):
                RetailSMB::setVisibleSalesEditLines(form);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetOnlineHelpLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct online help URL.
    /// </summary>
    /// <param name="topicId">
    /// Help topic id.
    /// </param>
    /// <returns>
    /// Online help URL for the topic.
    /// </returns>
    [SysObsolete("The method is deprecated because it isn't used.", true, 20\08\2020)]
    public static str GetOnlineHelpLink(str topicId)
    {
        SysOnLineDocumentHelpProvider   onlineHelpProvider;
        UserInfo                        userInfo;
        str                             helpLanguage;

        #define.UserDocumentation('UserDocumentation')

        select helplanguage from userInfo where userInfo.id == curuserid();

        helpLanguage = userInfo.helplanguage;
        if (!helpLanguage)
        {
            helpLanguage = 'en-us'; // Fallback language
        }

        onlineHelpProvider = new SysOnLineDocumentHelpProvider();

        return onlineHelpProvider.formatUrl(#UserDocumentation, topicId, helpLanguage, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetRetailSMBAreaPagesForAllCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy Retail Essentials NavPane settings to all companies.
    /// </summary>
    [SysObsolete("The method is deprecated because it isn't used.", true, 30\11\2017)]
    public static void SetRetailSMBAreaPagesForAllCompanies()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>IsValidRetailSMBMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determin if the menu items is used for SMB.
    /// </summary>
    /// <returns>
    /// Return true if Retail SMB needed otherwise return false.
    /// </returns>
    static boolean IsValidRetailSMBMenu(str itemName)
    {
        boolean isValid = false;

        switch (ItemName)
        {
            // check for Dashboard Links menu
            case
                'DashboardApplicationFoundation':
                isValid = true;
                break;

            default:
                isValid = false;
                break;
        }

        return isValid || RetailSMB::IsRetailSMBOnlyMenu(itemName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsRetailSMBOnlyMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determin if the menu items is used for SMB only.
    /// </summary>
    /// <returns>
    /// Return true if the menu item is Retail SMB only otherwise return false.
    /// </returns>
    static boolean IsRetailSMBOnlyMenu(str itemName)
    {
        switch (ItemName)
        {
            // check for AppLinks menu
            case
                'RetailSMB':
                return true;

            // check for NavPane menu
            case
                'NavPaneMenuRetailSMB':
                return true;

            // check for Dashboard Links menu
            case
                'MerchandisingRetailSMB',
                'ChannelManagementRetailSMB',
                'InventoryRetailSMB',
                'ITRetailSMB':

                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleSalesEditLines</Name>
				<Source><![CDATA[
    static private void setVisibleSalesEditLines(FormRun form)
    {
        Args args;
        Object caller;

        args = form.args();
        caller = args.caller();

        if (caller is SalesFormLetter_Confirm)
        {
            // Parameters => Print Options
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, UsePrintManagement))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, PrintCODLabel))));

            // Parameters => Lines
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_SalesCategory))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_PdsCWQtyCorrection))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_Scrap))));
            form.control(form.controlId(formControlStr(SalesEditLines, ButtonLineInventory))).visible(false);
            form.control(form.controlId(formControlStr(SalesEditLines, ButtonLineInventoryConfirmSMB))).visible(true);

            // Other
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, RespiteDate))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, groupSumSalesGroup))));

            // Tabs => Line Detail
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, PackingSlip_PdsCWRemainAfterInvent))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_PdsCWDeliverNow1))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_PdsCWRemainAfterInvent))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Delivery_ShipCarrierId))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Packagingmaterial))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, OrderLine_SalesCategory_Name))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Delivery_ShipCarrierAccount))));
        }

        if (caller is SalesFormLetter_PackingSlip)
        {
            // Parameters => Print Options
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, lateSelection))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, UsePrintManagement))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, PrintCODLabel))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, updateNow))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, PdsMRCDocHandle))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, ButtonSalesShippingLine))));

            // Other
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, RespiteDate))));

            // Tabs => Setup
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, ButtonSetupPaymFormat))));

            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Volume))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, GrossWeight))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, UnitWeight))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, CartonsQty))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, FreightZone))));

            // Tabs => Line Detail
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, PackingSlip_PdsCWRemainAfterInvent))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_PdsCWDeliverNow1))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_PdsCWRemainAfterInvent))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Delivery_ShipCarrierId))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Packagingmaterial))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, OrderLine_SalesCategory_Name))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Delivery_ShipCarrierAccount))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, Delivery_DlvTerm))));

            // Tabs => Line
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_SalesCategory))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_PdsCWQtyCorrection))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, SalesParmLine_Scrap))));
            RetailUtils::HideControl(form.control(form.controlId(formControlStr(SalesEditLines, PdsResetDispositionStatus))));
            form.control(form.controlId(formControlStr(SalesEditLines, ButtonLineInventory))).visible(false);
            form.control(form.controlId(formControlStr(SalesEditLines, ButtonLineInventoryPickingSMB))).visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetOfferingProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product name for the offering.
    /// </summary>
    /// <returns>Product name.</returns>
    public static str GetOfferingProductName()
    {
        str productName;

        if (RetailSMB::IsRetailProductSku())
        {
            productName = "@RetailOffering:ProductName";
        }
        else if (RetailSMB::IsCommerceProductSku())
        {
            productName = "@RetailOffering:CommerceProductName";
        }
        else
        {
            productName = xInfo::productRegisteredName();
        }

        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsRetailProductSku</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the client product sku is Retail.
    /// </summary>
    /// <returns>
    /// true if client product sku is Retail; otherwise, false.
    /// </returns>
    static boolean IsRetailProductSku()
    {
        str productSku;
        
        if (isRetailProductSku == UnknownNoYes::Unknown)
        {
            isRetailProductSku = UnknownNoYes::No;
            productSku = RetailSMB::ReadRegistryKey(RetailMetaDataKeyPath, RetailProductSkuKey);

            if (productSku == RetailProductSkuValue_Retail)
            {
                isRetailProductSku = UnknownNoYes::Yes;
            }
        }

        return (isRetailProductSku == UnknownNoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCommerceProductSku</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the client product sku is Commerce.
    /// </summary>
    /// <returns>
    /// true if client product sku is Commerce; otherwise, false.
    /// </returns>
    static boolean IsCommerceProductSku()
    {
        str productSku;

        if (isCommerceProductSku == UnknownNoYes::Unknown)
        {
            isCommerceProductSku = UnknownNoYes::No;
            productSku = RetailSMB::ReadRegistryKey(RetailMetaDataKeyPath, RetailProductSkuKey);

            if (productSku == RetailProductSkuValue_Commerce)
            {
                isCommerceProductSku = UnknownNoYes::Yes;
            }
        }

        return (isCommerceProductSku == UnknownNoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCommerceProductSkuFamily</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the client product sku is Commerce or Retail.
    /// </summary>
    /// <returns>
    /// true if client product sku is Commerce or Retail; otherwise, false.
    /// </returns>
    static boolean IsCommerceProductSkuFamily()
    {
        return RetailSMB::IsCommerceProductSku() || RetailSMB::IsRetailProductSku();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadRegistryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the values of a given registry key from the local machine(HKLM) registry hive.
    /// </summary>
    /// <param name = "registryKey">Target registry key path.</param>
    /// <param name = "keyName">Registry key name to read the value.</param>
    /// <returns>Reads a registry key name for a valid registry path; otherwise returns an empty string.</returns>
    private static str ReadRegistryKey(str registryKey, str keyName)
    {
        System.Exception exception;
        str result = '';

        try
        {
            // Read registry key value
            using (Microsoft.Win32.RegistryKey key = Microsoft.Win32.RegistryKey::OpenBaseKey(Microsoft.Win32.RegistryHive::LocalMachine, Microsoft.Win32.RegistryView::Registry64))
            {
                using (Microsoft.Win32.RegistryKey subKey = key.OpenSubKey(registryKey))
                {
                    if (subKey)
                    {
                        result = subKey.GetValue(keyName).ToString();
                    }
                }
            }
        }
        catch (exception)
        {
            EventLogger::EventWriteSelfServiceError('Exception raised while reading registry key.', exception.Message, exception.StackTrace);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>