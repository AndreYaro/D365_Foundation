<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableChangeReviewImpactedOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableChangeReviewImpactedOrder</c> represents an order which has been impacted by the PO change.
/// </summary>
internal abstract class PurchTableChangeReviewImpactedOrder
{
    protected InventTransRefId referenceId;
    protected PurchTableChangeReviewImpactedOrderReferenceType referenceType;
    protected RefRecId referenceRecId;
    protected PurchTableChangeReviewImpactedOrderType impactedOrderType;
    protected InventQty requiredQty;
    protected PurchLineDlvDate requiredOnDate;
    protected CustAccount customerAccount;
    protected List childImpactedOrders = new List(Types::Class);
    protected PurchTableChangeReviewImpactedOrder parentImpactOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>orderKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// A key which uniquely identifies the impacted order.
    /// </summary>
    /// <returns>Container which uniquely identifies the impacted order.</returns>
    public container orderKey()
    {
        return [impactedOrderType, referenceRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reference Id.
    /// </summary>
    /// <returns>Reference Id.</returns>
    public InventTransRefId parmReferenceId()
    {
        return referenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reference type.
    /// </summary>
    /// <returns>Reference type.</returns>
    public PurchTableChangeReviewImpactedOrderReferenceType parmReferenceType()
    {
        return referenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reference RecId.
    /// </summary>
    /// <returns>Reference RecId.</returns>
    public RefRecId parmReferenceRecId()
    {
        return referenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImpactedOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Impacted order type.
    /// </summary>
    /// <returns>Impacted order type.</returns>
    public PurchTableChangeReviewImpactedOrderType parmImpactedOrderType()
    {
        return impactedOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequiredQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Quantity being required by the order.
    /// </summary>
    /// <returns>Quantity being required by the order.</returns>
    public InventQty parmRequiredQty()
    {
        return requiredQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequiredOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Date when the inventory is required by the order.
    /// </summary>
    /// <returns>Date when the inventory is required by the order.</returns>
    public PurchLineDlvDate parmRequiredOnDate()
    {
        return requiredOnDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customer account of the impacted order.
    /// </summary>
    /// <returns>Customer account.</returns>
    public CustAccount parmCustomerAccount()
    {
        return customerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRootImpactOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if current impacted order is a "root" impacted order and is not a result of "chain effect" of other impacted order.
    /// </summary>
    /// <returns>true if impacted order is a root; false, otherwise.</returns>
    public boolean isRootImpactOrder()
    {
        return this.parmParentImpactOrder() == null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChildImpactedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a "child" impacted order. This is an order which is impacted by the current impacted order as "chain effect"
    /// </summary>
    public void addChildImpactedOrder(PurchTableChangeReviewImpactedOrder _childImpactOrder)
    {
        childImpactedOrders.addEnd(_childImpactOrder);
        _childImpactOrder.parmParentImpactOrder(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildImpactedOrdersEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get enumerator of the "child" impacted orders (those orders which are impacted by the current impacted order as "chain effect").
    /// </summary>
    /// <returns>Enumerator of the "child" impacted orders.</returns>
    public ListEnumerator getChildImpactedOrdersEnumerator()
    {
        return childImpactedOrders.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>impactDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes in text format an impact.
    /// </summary>
    /// <returns>A text explaining an impact.</returns>
    public abstract str impactDescription() { }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a form showing the impacted order.
    /// </summary>
    /// <param name = "_caller">Caller form.</param>
    public abstract void jumpRef(Object _caller) { }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentImpactOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the "parent" impact order. I.e. the order which caused current impacted order in the first place.
    /// </summary>
    /// <param name = "_parentImpactOrder">An impacted order.</param>
    /// <returns>An impacted order.</returns>
    protected PurchTableChangeReviewImpactedOrder parmParentImpactOrder(PurchTableChangeReviewImpactedOrder _parentImpactOrder = parentImpactOrder)
    {
        parentImpactOrder = _parentImpactOrder;
        return parentImpactOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>