<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsUpdateDispositionStatus_Quality</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Update batch disposition status code.
/// </summary>
/// <remarks>
/// The class will use either an active inventBatch record or the values used
/// in the last instance of the class.
/// </remarks>
class PdsUpdateDispositionStatus_Quality extends PdsUpdateDispositionStatus implements BatchRetryable
{
    InventQualityOrderTable inventQualityOrderTable;
    boolean                 toDelete;

    boolean dummy;

    #Define.CurrentVersion(1)
    #LocalMacro.CurrentListSysLastValue
        dummy
    #EndMacro

    #LocalMacro.CurrentListNewSession
        #CurrentListSysLastValue,
        inventQualityOrderTable
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOpenQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check for Open orders
    /// </summary>
    /// <returns>
    /// true, if there is an open quality order; otherwise false
    /// </returns>
    /// <remarks>
    /// The method will search for quality order that is open for the
    /// itemId
    /// </remarks>
    public boolean checkOpenQualityOrder()
    {
        InventQualityOrderTable orderTable;
        boolean                 ret = false;

        while select orderTable
            where orderTable.OrderStatus == InventTestOrderStatus::Open
                && orderTable.ItemId == inventQualityOrderTable.ItemId
                && orderTable.RecId != inventQualityOrderTable.RecId
        {
            if (orderTable.inventBatchId()
                == inventQualityOrderTable.inventBatchId())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOldDisposition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get and set the old disposition code.
    /// </summary>
    /// <remarks>
    /// The old disposition code, if found, will be set as the default new
    /// disposition code.
    /// </remarks>
    public void findOldDisposition()
    {
        PdsHistoryInventDisposition pdsHistoryInventDisposition;

        select firstonly OldDispositionCode
            from pdsHistoryInventDisposition
            where pdsHistoryInventDisposition.ItemId
                    == inventQualityOrderTable.ItemId
                && pdsHistoryInventDisposition.InventBatchId
                    == inventQualityOrderTable.inventBatchId()
                && pdsHistoryInventDisposition.NewDispositionCode
                    == inventQualityOrderTable.inventBatch().PdsDispositionCode;

        if (pdsHistoryInventDisposition.OldDispositionCode)
        {
            this.parmPdsNewDispositionCode(
                pdsHistoryInventDisposition.OldDispositionCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the query used by the class
    /// </summary>
    /// <remarks>
    /// The query initialized for InventBatch table with be keyed to search on the
    /// ItemId and InventBatchId.
    /// </remarks>
    public void initQuery()
    {
        super();

        queryRun.query().dataSourceTable(tablenum(InventBatch))
        .findRange(fieldnum(InventBatch, InventBatchId)).value(
            queryValue(inventQualityOrderTable.inventBatchId()));

        queryRun.query().dataSourceTable(tablenum(InventBatch))
        .findRange(fieldnum(InventBatch, ItemId)).value(
            queryValue(inventQualityOrderTable.ItemId));

    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        toDelete = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container ret;

        if (this.inGetSaveLast())
        {
            return [#CurrentVersion, #CurrentListSysLastValue, super()];
        }

        return [#CurrentVersion, #CurrentListNewSession, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsNewDispositionCode</Name>
				<Source><![CDATA[
    protected PdsDispositionCode parmPdsNewDispositionCode(
        PdsDispositionCode _new = pdsNewDispositionCode)
    {
        if (!prmisdefault(_new))
        {
            pdsNewDispositionCode = _new;
        }

        return pdsNewDispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQualityOrder</Name>
				<Source><![CDATA[
    public InventQualityOrderTable parmQualityOrder(
        InventQualityOrderTable _table = inventQualityOrderTable)
    {
        inventQualityOrderTable = _table;

        return inventQualityOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDelete</Name>
				<Source><![CDATA[
    protected boolean parmToDelete(
        boolean _toDelete = toDelete)
    {
        if (!prmisdefault(_toDelete))
        {
            toDelete = _toDelete;
        }

        return toDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the batch disposition status code.
    /// </summary>
    /// <remarks>
    /// The method will update the batch the value provided.
    /// </remarks>
    public void run()
    {
        this.initQuery();

        if (toDelete && inventQualityOrderTable.OrderStatus != InventTestOrderStatus::Open)
        {
            this.findOldDisposition();
        }
        else
        {
            if (this.checkOpenQualityOrder())
            {
                warning(strfmt("@PDS1166", inventQualityOrderTable.ItemId, inventQualityOrderTable.inventBatchId()));
            }
            else
            {
                this.updateDisposition();
            }
        }

        if (this.shouldUpdateDispositionCode())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the disposition codes should be updated.
    /// </summary>
    /// <returns>True if the disposition code should be updated; otherwise, false.</returns>
    protected boolean shouldUpdateDispositionCode()
    {
        boolean shouldUpdate;

        if (this.parmPdsNewDispositionCode())
        {
            shouldUpdate = true;
        }

        return shouldUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = false;
        var version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                container packedBase;
                if (this.inGetSaveLast())
                {
                    [version, #CurrentListSysLastValue, packedBase] = _packedClass;
                }
                else
                {
                    [version, #CurrentListNewSession, packedBase] = _packedClass;
                }
                ret = super(packedBase);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>InventBatch</c> record
    /// </summary>
    /// <param name="_inventBatch">
    /// InventBatch record which to update
    /// </param>
    /// <remarks>
    /// Complete the update of the <c>InventBatch</c> record passed in the
    /// parameters by-passing the standard update procedures .
    /// </remarks>
    protected void updateBatch(InventBatch _inventBatch)
    {
        _inventBatch.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispositionCodeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing a disposition code.
    /// </summary>
    /// <param name = "_inventQualityOrderTable">The quality order to provide the disposition code for.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> class where the disposition code can be provided.</param>
    delegate void dispositionCodeDelegate(InventQualityOrderTable _inventQualityOrderTable, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisposition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update PdsNewDispositionCode variable
    /// </summary>
    /// <remarks>
    /// PdsNewDispositionCode variable will be updated based on the value of the
    /// quality order order status.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Invalid order status
    /// </exception>
    protected void updateDisposition()
    {
        switch (inventQualityOrderTable.OrderStatus)
        {
            case InventTestOrderStatus::Pass :
                if (inventQualityOrderTable.PdsPassQualityDispositionCode
                    && inventQualityOrderTable.inventBatch().PdsDispositionCode
                        != inventQualityOrderTable.PdsPassQualityDispositionCode)
                {
                    this.parmPdsNewDispositionCode(
                        inventQualityOrderTable.PdsPassQualityDispositionCode);
                }
                break;

            case InventTestOrderStatus::Fail :
                if (inventQualityOrderTable.PdsFailedQualityDispositionCode
                    && inventQualityOrderTable.inventBatch().PdsDispositionCode
                        != inventQualityOrderTable.PdsFailedQualityDispositionCode)
                {
                    this.parmPdsNewDispositionCode(
                        inventQualityOrderTable.PdsFailedQualityDispositionCode);
                }
                break;

            case InventTestOrderStatus::Open :
                break;

            default :
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.dispositionCodeDelegate(inventQualityOrderTable, result);

                if (result.hasResult())
                {
                    this.parmPdsNewDispositionCode(result.result());
                }
                else
                {
                    throw error("@PDS1165");
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsUpdateDispositionStatus_Quality construct()
    {
        return new PdsUpdateDispositionStatus_Quality();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDeleteQuality</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of this <c>PdsUpdateDispositionStatus_Quality</c> class
    /// </summary>
    /// <param name="_table">
    /// <c>InventQualityOrderTable</c> record for which to create the instance
    /// </param>
    /// <returns>
    /// New instance of class <c>PdsUpdateDispositionStatus_Quality</c>
    /// </returns>
    /// <remarks>
    /// The method  will in addition to the creating a new instance it will also
    /// set the parameter value to delete
    /// </remarks>
    public static PdsUpdateDispositionStatus_Quality newDeleteQuality(
        InventQualityOrderTable _table)
    {
        PdsUpdateDispositionStatus_Quality pdsUpdateDispositionStatus_Quality
            = PdsUpdateDispositionStatus_Quality::newQuality(_table);

        pdsUpdateDispositionStatus_Quality.parmToDelete(true);

        return pdsUpdateDispositionStatus_Quality;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuality</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of this <c>PdsUpdateDispositionStatus_Quality</c> class
    /// </summary>
    /// <param name="_table">
    /// <c>InventQualityOrderTable</c> record for which to create the instance
    /// </param>
    /// <returns>
    /// New instance of class <c>PdsUpdateDispositionStatus_Quality</c>
    /// </returns>
    /// <remarks>
    /// The method  will create a new instance
    /// </remarks>
    public static PdsUpdateDispositionStatus_Quality newQuality(
        InventQualityOrderTable _table)
    {
        PdsUpdateDispositionStatus_Quality pdsUpdateDispositionStatus_Quality
            = PdsUpdateDispositionStatus_Quality::construct();

        pdsUpdateDispositionStatus_Quality.parmQualityOrder(_table);

        return pdsUpdateDispositionStatus_Quality;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>