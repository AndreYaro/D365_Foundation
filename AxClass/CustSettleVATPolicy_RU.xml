<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettleVATPolicy_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustSettleVATPolicy_RU extends CustSettleVATTransit_RU
{
    LedgerVoucherObject ledgerVoucherObjectReverse;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndPostTaxes</Name>
				<Source><![CDATA[
    public void calcAndPostTaxes(boolean _onPayment = false)
    {
        TaxAmount                     taxAmountTransaction;
        TaxAmount                     taxAmountAccounting;
        TaxAmount                     taxAmountReporting;
        TaxBase                       baseAmountTransaction;
        TaxBase                       baseAmountAccounting;

        CustVendCalcSettledAmounts_RU custVendCalcSettledAmounts;
        Map                           taxAmountsAccounting;
        Map                           taxAmountsTransaction;
        Map                           taxAmountsReporting;

        MapEnumerator                 me;
        BookStructSmallVATAmounts_RU  bookStructSmallVATAmounts;
        TaxModuleTypeId               source;
        TaxCode                       taxCode;
        DimensionDefault              defaultDimension;
        LedgerDimensionAccount        ledgerDimension, offsetLedgerDimension_RU;
        LedgerDimensionDefaultAccount debetDefaultAccount, creditDefaultAccount;
        InventTransId                 inventTransId;

        custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(custVendTrans,false);
        custVendCalcSettledAmounts.calcSettledAmounts();
        custVendCalcSettledAmounts.calcNewSettlement(settleAmountAccounting, settleAmountTransaction, settleAmountReporting);

        taxAmountsAccounting    = custVendCalcSettledAmounts.mapLastSettledAmountsMST();
        taxAmountsTransaction   = custVendCalcSettledAmounts.mapLastSettledAmountsCur();
        taxAmountsReporting     = custVendCalcSettledAmounts.mapLastSettledAmountsReporting();

        ttsbegin;
        me = taxAmountsAccounting.getEnumerator();
        while (me.moveNext())
        {
            [ taxCode, defaultDimension, inventTransId, ledgerDimension, offsetLedgerDimension_RU, source ] = me.currentKey();

            if (source == TaxModuleType::FreeTxtInvoice || source == TaxModuleType::Sales)
            {
                bookStructSmallVATAmounts = BookStructSmallVATAmounts_RU::create(me.currentValue());
                taxAmountAccounting  = bookStructSmallVATAmounts.taxAmountVAT();
                baseAmountAccounting = bookStructSmallVATAmounts.amountLiableToVAT();

                bookStructSmallVATAmounts = BookStructSmallVATAmounts_RU::create(taxAmountsTransaction.lookup(me.currentKey()));
                taxAmountTransaction  = bookStructSmallVATAmounts.taxAmountVAT();
                baseAmountTransaction = bookStructSmallVATAmounts.amountLiableToVAT();

                bookStructSmallVATAmounts = BookStructSmallVATAmounts_RU::create(taxAmountsReporting.lookup(me.currentKey()));
                taxAmountReporting = bookStructSmallVATAmounts.taxAmountVAT();

                if (taxAmountAccounting || taxAmountTransaction || taxAmountReporting)
                {
                    debetDefaultAccount  = _onPayment                                            ?
                                           TaxLedgerAccountGroup::taxDeferredLedgerDim_RU(taxCode) :
                                           TaxLedgerAccountGroup::taxOutgoingLedgerDimension_RU(taxCode);

                    creditDefaultAccount = _onPayment                                            ?
                                           TaxLedgerAccountGroup::taxOutgoingLedgerDimension_RU(taxCode) :
                                           TaxLedgerAccountGroup::taxDeferredLedgerDim_RU(taxCode);

                    this.post(LedgerDimensionFacade::serviceCreateLedgerDimension(debetDefaultAccount, defaultDimension),
                              offsetLedgerDimension_RU ? offsetLedgerDimension_RU :
                                                         LedgerDimensionFacade::serviceCreateLedgerDimension(creditDefaultAccount, defaultDimension),
                              custVendTrans.CurrencyCode,
                              baseAmountTransaction,
                              baseAmountAccounting,
                              taxAmountTransaction,
                              taxAmountAccounting,
                              taxAmountReporting,
                              taxCode,
                              null,
                              offsetLedgerDimension_RU ? ledgerVoucherObject : ledgerVoucherObjectReverse,
                              inventTransId);

                    if (offsetLedgerDimension_RU)
                    {
                        this.post(offsetLedgerDimension_RU,
                                  LedgerDimensionFacade::serviceCreateLedgerDimension(creditDefaultAccount, defaultDimension),
                                  custVendTrans.CurrencyCode,
                                  baseAmountTransaction,
                                  baseAmountAccounting,
                                  taxAmountTransaction,
                                  taxAmountAccounting,
                                  taxAmountReporting,
                                  taxCode,
                                  null,
                                  ledgerVoucherObjectReverse,
                                  inventTransId);
                    }
                    this.updateTaxTrans(creditDefaultAccount, taxCode);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePostingLog</Name>
				<Source><![CDATA[
    protected boolean mustCreatePostingLog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucherObjectReverse</Name>
				<Source><![CDATA[
    public LedgerVoucherObject parmLedgerVoucherObjectReverse(LedgerVoucherObject _ledgerVoucherObjectReverse = ledgerVoucherObjectReverse)
    {
        ledgerVoucherObjectReverse = _ledgerVoucherObjectReverse;
        return ledgerVoucherObjectReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTrans</Name>
				<Source><![CDATA[
    private void updateTaxTrans(LedgerDimensionDefaultAccount _defaultAccount,
                                TaxCode                       _taxCode)
    {
        TaxTrans taxTrans;
        TaxTransGeneralJournalAccountEntry entry;
        LedgerDimensionAccount ledgerDimension;
        LedgerDimensionAccount newLedgerDimension;

        while select forupdate taxTrans
            where taxTrans.TransDate == custVendTrans.TransDate &&
                  taxTrans.Voucher   == custVendTrans.Voucher   &&
                  taxTrans.TaxOrigin == TaxOrigin::Tax          &&
                  taxTrans.TaxCode   == _taxCode
        {
            ledgerDimension = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTrans.RecId);
            newLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(_defaultAccount, ledgerDimension);

            update_recordset entry setting LedgerDimension = newLedgerDimension,
                                           GeneralJournalAccountEntry = 0
                where entry.TaxTrans == taxTrans.RecId &&
                      entry.TaxTransRelationship == TaxTransRelationshipType::Tax;
            taxTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustSettleVATPolicy_RU construct()
    {
        return new CustSettleVATPolicy_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>