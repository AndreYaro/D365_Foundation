<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandCreateRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCommandCreateRule</c> class encapsulates the business logic around the
/// creation of a replenishment rule.
/// </summary>
class LeanCommandCreateRule extends LeanCommandBase
{
    LeanRuleData leanRuleData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes sure the <c>InventDim</c> buffer exists in the database.
    /// </summary>
    /// <returns>
    ///    true if the record is in the database; otherwise, false.
    /// </returns>
    protected boolean createInventDim()
    {
        InventDim       inventDim    = leanRuleData.parmInventDim();
        LeanCoverage    leanCoverage = leanRuleData.parmLeanCoverage();

        inventDim = leanCoverage.setInventDimId(inventDim);

        leanRuleData.parmLeanCoverage(leanCoverage);
        leanRuleData.parmInventDim(inventDim);

        return inventDim.RecId && leanCoverage.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes sure the <c>KanbanFlow</c> buffer is persisted in the database.
    /// </summary>
    /// <returns>
    ///    true if the operation was successful; otherwise, false.
    /// </returns>
    protected boolean createKanbanFlow()
    {
        KanbanRule          kanbanRule        = leanRuleData.parmKanbanRule();
        KanbanFlowWrapper   kanbanFlowWrapper = leanRuleData.parmKanbanFlowWrapper();
        boolean             result            = false;

        ttsbegin;
        // save the kanban flow
        result = kanbanFlowWrapper.save();
        ttscommit;

        // set the FK
        kanbanRule.initFromKanbanFlow(result ? kanbanFlowWrapper.parmKanbanFlow() : null);
        leanRuleData.parmKanbanRule(kanbanRule);

        return kanbanRule.KanbanFlow != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLeanCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes sure the <c>LeanCoverage</c> record is validated and is in the database.
    /// </summary>
    /// <returns>
    ///    true if the record is in the database; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Relies on already created and present foreign keys to <c>InventDim</c> and <c>ItemAllocation</c>
    ///    records.
    /// </remarks>
    protected boolean createLeanCoverage()
    {
        LeanCoverage            leanCoverage            = leanRuleData.parmLeanCoverage();
        LeanCoverageKanbanRule  leanCoverageKanbanRule  = leanRuleData.parmLeanCoverageKanbanRule();

        // Note: the case when we have an existing LeanCoverage record is whe we are
        //       creating a replacing rule (those share the LeanCoverage record)
        if (!leanCoverage.RecId && leanCoverage.validateWrite())
        {
            ttsbegin;
            // insert the record
            leanCoverage.insert();
            leanRuleData.parmLeanCoverage(leanCoverage);
            ttscommit;
        }

        // set the FK
        leanCoverageKanbanRule.Coverage = leanCoverage.RecId;
        leanRuleData.parmLeanCoverageKanbanRule(leanCoverageKanbanRule);

        return leanCoverage.RecId && leanCoverageKanbanRule.Coverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLeanCoverageKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>LeanCoverageKanbanRule</c> record in the database.
    /// </summary>
    /// <returns>
    ///    true if the record was created; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Relies on already created and preset foreign keys to KanbanRule and LeanCoverage records.
    /// </remarks>
    protected boolean createLeanCoverageKanbanRule()
    {
        LeanCoverageKanbanRule leanCoverageKanbanRule = leanRuleData.parmLeanCoverageKanbanRule();

        // validate and create the record
        if (leanCoverageKanbanRule.validateWrite())
        {
            ttsbegin;
            leanCoverageKanbanRule.insert();
            ttscommit;
        }

        return leanCoverageKanbanRule.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the rule hierarchy entities that correspond to the current rule type.
    /// </summary>
    /// <returns>
    /// true if the hierarchy was persisted; otherwise false.
    /// </returns>
    /// <remarks>
    /// Relies on already created and preset foreign keys to KanbanFlow table.
    /// </remarks>
    protected boolean createRule()
    {
        LeanRuleKanban          leanRuleKanban         = LeanRuleKanban::newLeanRuleData(leanRuleData);
        LeanCoverageKanbanRule  leanCoverageKanbanRule = leanRuleData.parmLeanCoverageKanbanRule();

        // initialize the rule
        leanRuleKanban.initializeContext(leanRuleData, null);

        // insert the needed rule records in the rules tables hierarchy
        if (leanRuleKanban.validateWrite())
        {
            ttsbegin;
            leanRuleKanban.insert();
            ttscommit;
        }

        // set the FK
        leanCoverageKanbanRule.KanbanRule = leanRuleData.parmKanbanRule().RecId;
        leanRuleData.parmLeanCoverageKanbanRule(leanCoverageKanbanRule);

        return leanCoverageKanbanRule.KanbanRule != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the rule creation logic.
    /// </summary>
    /// <returns>
    ///    true if the creation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed within a transaction scope provided by the <c>LeanRulesEngine</c> table.
    /// </remarks>
    protected boolean execute()
    {
        boolean result = true;

        // NOTE: the sequence below shouldn't be changed as those methods besides creating
        //       the required data are setting FKs for other entities and rely on such on
        //       their own
        result = result && this.createInventDim();
        result = result && this.createKanbanFlow();
        result = result && this.createRule();
        result = result && this.createLeanCoverage();
        result = result && this.createLeanCoverageKanbanRule();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleData</Name>
				<Source><![CDATA[
        public LeanRuleData parmLeanRuleData(LeanRuleData _leanRuleData = leanRuleData)
    {
        leanRuleData = _leanRuleData;

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static LeanCommandCreateRule construct()
    {
        return new LeanCommandCreateRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>LeanCommandCreateRule</c> class.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The rule state that is to be inserted in the database.
    /// </param>
    /// <returns>
    ///    A <c>LeanCommandCreateRule</c> instance.
    /// </returns>
    public static LeanCommandCreateRule newStandard(LeanRuleData _leanRuleData)
    {
        LeanCommandCreateRule leanCommandCreateRule = LeanCommandCreateRule::construct();

        leanCommandCreateRule.parmLeanRuleData(_leanRuleData);

        return leanCommandCreateRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>