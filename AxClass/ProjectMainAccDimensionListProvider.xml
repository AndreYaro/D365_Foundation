<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectMainAccDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjectMainAccDimensionListProvider</c> class is the main account dimension list provider
/// for documented monetary amounts that are allocated to a project.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Project)]
public class ProjectMainAccDimensionListProvider extends MainAccountDimensionListProvider
{
    ProjTable           projTable;
    ProjCategory        projCategory;
    ProjFundingSource   projFundingSource;
    ProjLineProperty    projLineProperty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the main account dimension list provider dimensions.
    /// </summary>
    protected void initValues()
    {
        SourceDocumentLineItem  topSourceDocumentLineItem;
        SourceDocumentLine      sourceDocumentLine;

        topSourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        sourceDocumentLine        = topSourceDocumentLineItem.parmSourceDocumentLine();

        if (sourceDocumentLine.ParentSourceDocumentLine)
        {
            topSourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(sourceDocumentLine.RecId);
        }

        if (ProjectSourceDocumentLineItemHelper::canProcessProject(topSourceDocumentLineItem))
        {
            projTable = ProjectSourceDocumentLineItemHelper::projTable(topSourceDocumentLineItem);
            projCategory = ProjectSourceDocumentLineItemHelper::projCategory(topSourceDocumentLineItem);
            projFundingSource = ProjectSourceDocumentLineItemHelper::projFundingSource(topSourceDocumentLineItem);
            projLineProperty = ProjectSourceDocumentLineItemHelper::projLineProperty(topSourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectLedgerDimensionForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the project ledger dimension.
    /// </summary>
    /// <param name = "_isIntercompany">
    ///     Whether the ledger dimension is for an intercompany transaction.
    /// </param>
    /// <returns>
    ///     The project ledger dimension.
    /// </returns>
    protected LedgerDimensionDefaultAccount getProjectLedgerDimensionForMainAccount(boolean _isIntercompany)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            ledgerDimensionDefaultAccount = ProjectPosting::getProjectLedgerDimensionWhenProjOpsIntegrationEnabled(projTable,
                                                                                              projCategory,
                                                                                              projFundingSource,
                                                                                              projLineProperty,
																							  accountingRule.parmSourceDocumentLineItem(),
                                                                                              _isIntercompany);
        }
		else
        {
            ledgerDimensionDefaultAccount = ProjectPosting::getProjectLedgerDimension(projTable,
                                                                                              projCategory,
                                                                                              projFundingSource,
                                                                                              projLineProperty,
                                                                                              _isIntercompany);
        }
	 

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        TsTimesheetTransSourceDocLineItem tsSourceDocLine;
        ProjPosting projPosting;
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        container cacheResult;
        boolean isIntercompany = false;
        container cacheKey;

        if (projTable)
        {
            if (AccountingRule.parmLedgerPostingType() == LedgerPostingType::IntercompanyCost)
            {
                isIntercompany = true;
            }
            // include current company context in cache key, SubledgerJournalizer has properly set company context
            // the cache key limit is 5, so concatenate intercompany flag with data area ID
            cacheKey = [curext() + int2str(isIntercompany), projTable.RecId, projCategory.RecId, projFundingSource.RecId, projLineProperty.RecId];
            cacheResult = LedgerCache::getValue(LedgerCacheScope::ProjectMainAccDimensionListProvider, cacheKey);

            if (cacheResult == conNull())
            {
                changecompany(projTable.company())
                {
                    ledgerDimensionDefaultAccount = this.getProjectLedgerDimensionForMainAccount(isIntercompany);
                }
                LedgerCache::insertValue(LedgerCacheScope::ProjectMainAccDimensionListProvider, cacheKey, [ledgerDimensionDefaultAccount]);
            }
            else
            {
                [ledgerDimensionDefaultAccount] = cacheResult;
            }

            if (!ledgerDimensionDefaultAccount)
            {
                throw error("@SYS67710");
            }

            this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
        }
        else if (accountingRule.parmSourceDocumentLineItem() is TsTimesheetTransSourceDocLineItem)
        {
            // This is the case where the TS line doesn't have a project, which happens for
            // intercompany scenario
            tsSourceDocLine = accountingRule.parmSourceDocumentLineItem();
            if (tsSourceDocLine.parmProjectLegalEntity() != tsSourceDocLine.parmLegalEntityRecId())
            {
                projPosting = this.getLedgerPostingSetupRecord();
                if (!projPosting)
                {
                    throw error(strFmt("@SYS25235", ProjAccountType::CostAccount));
                }
                else
                {
                    this.addToMainAccDimensionList(projPosting.LedgerDimension);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingSetupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the record from <c>ProjPosting</c> table.
    /// </summary>
    protected ProjPosting getLedgerPostingSetupRecord()
    {
        ProjPosting projPosting = ProjPosting::find(ProjAccountType::CostAccount,
            TableGroupAll::All,
            '',
            TableGroupAll::All,
            '');

        return projPosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>