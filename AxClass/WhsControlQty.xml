<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlQty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlQty</c> class is responsible for handling the quantity controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#Qty)]
public class WhsControlQty extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isQuantityToProcessValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quantity to process is valid.
    /// </summary>
    /// <param name = "_qty">The quantity value to process.</param>
    /// <returns>true if the quantity to process is valid.</returns>
    protected boolean isQuantityToProcessValid(Qty _qty)
    {
        return (_qty > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        Qty qty = WHSWorkExecuteDisplay::str2numDisplay(data);

        if (!this.isQuantityToProcessValid(qty))
        {
            return this.fail("@WAX1172");
        }

        if ((mode == WHSWorkExecuteMode::Movement && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
            || (mode == WHSWorkExecuteMode::WarehouseTransfer && controlData.parmInventoryStatusSelectedOnControl()))
        {
            controlData.parmFromInventStatusId(controlData.parmInventoryStatusSelectedOnControl());
        }
        else
        {
            WHSInventStatusId fromInventStatusId = this.retrieveDefaultInventStatusId();

            controlData.parmFromInventStatusId(fromInventStatusId);
        }

        if (mode == WHSWorkExecuteMode::Movement && data && qty == pass.parmQty() &&
            fieldValues.hasValue(#BatchId) &&
            fieldValues.exists(#SerialId) && fieldValues.parmSerialId() != pass.parmSerialId() &&
            InventTable::find(fieldValues.parmItemId()).isItemSerialNumberActivated() 
            )
        {
            this.setQtyWithBlankAsZero(controlData.getQty());
            return true;
        }

        if (!super())
        {
            return false;
        }

        if (mode == WHSWorkExecuteMode::WarehouseTransfer 
            && qty > controlData.getQty())
        {
            if (!WhsInvent::isNegativePhysicalInventoryAllowed(fieldValues.parmItemId(), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()))
            {
                return this.fail("@WAX:QtyCannotBeGreaterThanOnhand");
            }
        }

        if (mode == WHSWorkExecuteMode::Movement && fieldValues.exists(#Qty))
        {
            if (WHSWorkExecuteDisplayMovInventStatusQtyCheckFlight::instance().isEnabled()
                && qty != fieldValues.lookup(#Qty)
                && fieldValues.lookupStr(#InventoryStatus)
                && !pass.lookupStr(#InventoryStatus)
                && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
            {
                fieldValues.parmQty(qty ? data : '');
            }

            pass.parmQty(qty ? data : '');
        }
		// Must check available quantity against full dimensions for movement by template
		// as users can specify below location dimensions before work creation.
        else if (mode == WHSWorkExecuteMode::MovementByTemplate
             &&  fieldValues.lookupStr(#ItemId)
             &&  !this.isQuantityPhysicalAvailableOnDimensionForWork(qty))
        {
			// Remove the current quantity if it is not valid on the given dimensions.
            fieldValues.parmQty('');

            // If the tracking values are the same as before and the quantity is still invalid throw error.
            if (controlData.isTrackingDimFieldValuesEqualToPass())
            {
                return this.fail("@WAX1172");
            }

            return false;
        }
        else
        {
            fieldValues.parmQty(qty ? data : '');
        }

        if ((mode == WHSWorkExecuteMode::AdjustmentIn || mode == WHSWorkExecuteMode::AdjustmentOut)
            && numOfDec(qty) != 0
            && PdsGlobal::pdsIsCWItem(fieldValues.lookupStr(#ItemId)))
        {
            return this.fail(strFmt("@WAX:Error_CWAdjustQty", fieldValues.lookupStr(#ItemId)));
        }

        if (mode == WHSWorkExecuteMode::MixedLPReceiving)
        {
            InventTable inventTable = InventTable::find(fieldValues.parmItemId());

            if (qty != 1
                && this.isSerialNumberControlled(inventTable))
            {
                return this.fail(strFmt("@SYS68712", fieldValues.parmSerialId()));
            }
        }

        //When 'Display inventory status' flag is unchecked, need the logic for #FromInventoryStatus and #InventoryStatusId
        this.populateDataForMovementByTemplate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativePhysicalInventoryAllowed</Name>
				<Source><![CDATA[
    private boolean isNegativePhysicalInventoryAllowed(ItemId _itemId, WMSLocationId _locationId, InventLocationId _warehouseId)
    {
        return WMSLocation::find(_locationId, _warehouseId).whsLocationProfile().AllowNegative
                && (InventLocation::find(_warehouseId).RetailInventNegPhysical == NoYes::Yes
                    || InventTable::find(_itemId).whsAllowPhysNeg());
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDefaultInventStatusId</Name>
				<Source><![CDATA[
    private WHSInventStatusId retrieveDefaultInventStatusId()
    {
        WHSInventStatusId defaultInventStatusId;

        ItemId itemId = pass.lookupStr(#ItemId);

        if (itemId
            && mode == WHSWorkExecuteMode::Movement)
        {
            InventDim inventDim = pass.createInventDimFromPass();

            var statusRetriever = WHSItemAndDimensionsOnHandInventoryStatusRetriever::newFromItemIdAndInventDim(itemId, inventDim);

            // If the status can't be found or there are multiple statuses for the given dimensions, the retriever will return an empty value.
            defaultInventStatusId = statusRetriever.retrieveInventoryStatusId();
        }

        // As it is not allowed to have multiple statuses on the same license plate if all other dimensions are the same,
        // the retriever would usually return a single status and this if block will not be entered.
        // However, in same cases (e.g. if there given dimensions are not enough to uniquely identify a status) the returned value would be empty,
        // so we need to fallback to getting the status from the on-hand.
        if (!defaultInventStatusId)
        {
            defaultInventStatusId = controlData.getInventStatusId();
        }

        return defaultInventStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberControlled</Name>
				<Source><![CDATA[
    private boolean isSerialNumberControlled(InventTable _inventTable)
    {
        return _inventTable.isItemSerialNumberActivated()
               && fieldValues.parmSerialId()
               && InventDimGroupSetup::newItemId(_inventTable.ItemId).getFieldSetup(fieldNum(InventDim, InventSerialId)).isSerialNumberControlEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyWithBlankAsZero</Name>
				<Source><![CDATA[
    private void setQtyWithBlankAsZero(Qty _qty)
    {
        if (_qty)
        {
            fieldValues.parmQty(_qty);
        }
        else if (!controlData.qtyDefaultedFromScan)
        {
            fieldValues.parmQty('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        if (controlData.parmSaveQtyValue())
        {
            return;
        }

        WMSLocationId locationId = fieldValues.parmWMSLocationId();
        InventLocationId inventLocationId = fieldValues.parmInventLocationId();
        
        boolean resetToBlank = true;

        if (mode != WHSWorkExecuteMode::ReportAsFinished                    &&
            mode != WHSWorkExecuteMode::ReportAsFinishedAndLocate           &&
            mode != WHSWorkExecuteMode::ReportAsFinishedBySerial            &&
            mode != WHSWorkExecuteMode::KanbanPut                           &&
            mode != WHSWorkExecuteMode::KanbanPutAndLocate                  &&
            !WHSWorkExecutionMode::newFromMode(mode).isInboundOrderLineReceiving() &&
            mode != WHSWorkExecuteMode::LoadItemReceiving                   &&
            mode != WHSWorkExecuteMode::LoadItemReceivingAndLocate          &&
            WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(controlData.parmMenuItemName())) != WHSWorkExecuteMode::AdjustmentIn)
        {
            ItemId itemId = fieldValues.parmItemId();
            InventTable inventTable = InventTable::find(itemId);

            if (fieldValues.parmBatchId() ||
                !inventTable.whsBatchActive())
            {
                if (inventTable.isItemSerialNumberActivated())
                {
                    if (mode == WHSWorkExecuteMode::Quarantine
                        || fieldValues.parmSerialId()
                        || (mode == WHSWorkExecuteMode::Movement)
                        || !WMSLocation::find(locationId, inventLocationId).itemOnHandExistsWithSerialNumber(itemId))
                    {
                        this.setQtyWithBlankAsZero(controlData.getQty());
                    }
                }
                else
                {
                    this.setQtyWithBlankAsZero(controlData.getQty());
                }
            }
   
            if (controlData.parmContainerId()
				&& mode == WHSWorkExecuteMode::Movement)
			{
                fieldValues.parmQty(this.getContainerQuantity(controlData.parmContainerId()));
			}

            if (fieldValues.exists(#Qty))
            {
                resetToBlank = false;
            }
        }
            
        if (resetToBlank
		&&	!controlData.qtyDefaultedFromScan)
        {
            fieldValues.parmQty('');
        }

        if (controlData.parmDefaulting())
        {
            str defaultQty = WHSRFDefaultData::getDefaultValue(controlData.parmMenuItemName(),
                                                               WHSDefaultDataField::Qty,
                                                               pass.lookup(#UserId),
                                                               inventLocationId,
                                                               locationId);
            
            if (WHSWorkExecuteDisplay::str2numDisplay(defaultQty))
            {
                controlData.processControl(this.parmName(), defaultQty);
            }
        }
        //When 'Display inventory status' flag is unchecked, need the logic for #FromInventoryStatus and #InventoryStatusId
        this.populateDataForMovementByTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataForMovementByTemplate</Name>
				<Source><![CDATA[
    private void populateDataForMovementByTemplate()
    {
        if (mode == WHSWorkExecuteMode::MovementByTemplate)
        {
            if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
            {
                controlData.populateFromInventoryStatus();
                controlData.populateInventoryStatus();

                fieldValues.insert(#InventoryStatus, fieldValues.lookupStr(#FromInventoryStatus));
                fieldValues.insert(#SelectedValue, fieldValues.lookupStr(#SelectedFromValue));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityPhysicalAvailableOnDimensionForWork</Name>
				<Source><![CDATA[
    private boolean isQuantityPhysicalAvailableOnDimensionForWork(Qty _qty)
    {
        InventDim inventDim = fieldValues.createInventDimFromPass();

        if (!inventDim.InventStatusId)
        {
            if (pass.lookupStr(#FromInventoryStatus))
            {
                inventDim.InventStatusId = pass.lookup(#FromInventoryStatus);
            }
            else
            {
                inventDim.InventStatusId = controlData.getInventStatusId();
            }
        }

        inventDim = InventDim::findOrCreate(inventDim);

        ItemId    itemId = fieldValues.lookupStr(#ItemId);
        
        InventHandlingQty convertedQty = WHSCatchWeightHelper::convertInventQuantity(itemId, pass.lookupStr(#UOM), _qty, inventDim.InventDimId);

        InventHandlingQty inventHandlingQty = WHSInventOnHand::getWorkPhysicalAvailHandlingQtyByInventDim(itemId, inventDim, true);

        return convertedQty <= inventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the container quantity based on container id, shipment id, and item id
    /// </summary>
    /// <param name="_containerId">
    /// Container id to find the quantity associated to the container and item.
    /// </param>
    /// <returns>
    /// Qty found in the inventory unit
    /// </returns>
    private InventHandlingQty getContainerQuantity(WHSContainerId _containerId)
    {
        InventDim productInventDim = fieldValues.createProductInventDimFromPass();
		    
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_containerId);
    
        WHSContainerLine  containerLine;
        InventDim inventDim;
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(productInventDim);
  
        select firstOnly ItemId, UnitId, Qty, InventDimId from containerLine
            where containerLine.ContainerId == containerTable.ContainerId
				&& containerLine.ShipmentId == containerTable.ShipmentId 
                && containerLine.ItemId == fieldValues.parmItemId()
                #InventDimExistsJoin(containerLine.inventDimId, inventDim, productInventDim, inventDimParm);

        return WHSCatchWeightHelper::convertInventQuantity(containerLine.ItemId, containerLine.UnitId, containerLine.Qty, containerLine.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkScannedQuantityLimit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal boolean checkScannedQuantityLimit(WhsControlQty _control, str _value)
    {
        Qty qty = WHSWorkExecuteDisplay::str2numDisplay(_value);

        WHSScannedQtyLimit scannedQuantityLimit = WHSParameters::find().ScannedQtyLimit;

        if (qty > scannedQuantityLimit && scannedQuantityLimit != 0)
        {
            return _control.fail("@WAX2770");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>