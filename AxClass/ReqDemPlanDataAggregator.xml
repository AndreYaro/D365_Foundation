<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanDataAggregator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class is responsible for preaggregating historical and forecasted data.
/// </summary>
public class ReqDemPlanDataAggregator
{
    ReqDemPlanDateGranularity       granularity;
    ReqDemPlanForecastVersion       targetVersion;
    SqlSystem                       sqlSystem;
    ReqDemPlanDataProcessingHelper  dataHelper;
    ReqDemPlanTaskLoggerInterface   logger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Aggregates the data in the specified table.
    /// </summary>
    /// <param name="_tableToAggregate">
    ///     The table to be aggregated.
    /// </param>
    public void aggregate(TableId _tableToAggregate)
    {
        switch (_tableToAggregate)
        {
            case tableNum(ReqDemPlanCubeStagingTable):
                this.aggregateHistoricalData();
                break;

            case tableNum(ReqDemPlanForecast):
                this.aggregateForecastedData();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateForecastedData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Aggregates the <c>ReqDemPlanForecast</c> table.
    /// </summary>
    private void aggregateForecastedData()
    {
        ReqDemPlanForecast          record;
        ReqDemPlanForecast          destination;
        BIDateDimensionsViewPeriods datePeriods;
        boolean reqDataAggregatorIncludeStatusFlightEnabled = ReqDataAggregatorIncludeStatusFlight::instance().isEnabled();

        #localmacro.dimensionFields
            Site, Warehouse, Configuration, Color, Size, Style, ProductVersion
        #endmacro

        #localmacro.dimensionFieldsExtended
            #dimensionFields, StatusId
        #endmacro

        #localMacro.groupData
            insert_recordset destination
            (Qty, Version, ItemId, ModelId, AllocationKey, 
                #dimensionFields,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId, ForecastDate)
            select sum(Qty), targetVersion, ItemId, ModelId,AllocationKey, 
                #dimensionFields,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
            from record
                group by Version, AllocationKey, ItemId, ModelId,
                    #dimensionFields,
                    CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
                where record.Version == ReqDemPlanForecastVersion::Temporary
            join %1 from datePeriods
                group by %1
                where record.ForecastDate == datePeriods.DateKey;
        #endmacro

        #localMacro.groupDataExtended
            insert_recordset destination
            (Qty, Version, ItemId, ModelId, AllocationKey,
                #dimensionFieldsExtended,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId, ForecastDate)
            select sum(Qty), targetVersion, ItemId, ModelId,AllocationKey,
                #dimensionFieldsExtended,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
            from record
                group by Version, AllocationKey, ItemId, ModelId,
                    #dimensionFieldsExtended,
                    CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
                where record.Version == ReqDemPlanForecastVersion::Temporary
            join %1 from datePeriods
                group by %1
                where record.ForecastDate == datePeriods.DateKey;
        #endmacro

        logger.startMonitoredTask(ReqDemPlanTaskCodes::PreAggregateForecastedData, "@DMP1246", curext());
        dataHelper.skipAll(record);

        ttsBegin;
        // clean old temporary records
        ReqDemPlanForecast::cleanVersion(ReqDemPlanForecastVersion::Temporary, false);

        // convert target version to temporary version
        update_recordSet record
            setting Version = ReqDemPlanForecastVersion::Temporary
            where record.Version == targetVersion;

        // perform aggregation
        if (reqDataAggregatorIncludeStatusFlightEnabled)
        {
            switch (granularity)
            {
                case ReqDemPlanDateGranularity::Day:
                    #groupDataExtended(DateKey)
                    break;

                case ReqDemPlanDateGranularity::Week:
                    #groupDataExtended(CurrentWeekStart)
                    break;

                case ReqDemPlanDateGranularity::Month:
                    #groupDataExtended(CurrentMonthStart)
                    break;

                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            switch (granularity)
            {
                case ReqDemPlanDateGranularity::Day:
                    #groupData(DateKey)
                    break;

                case ReqDemPlanDateGranularity::Week:
                    #groupData(CurrentWeekStart)
                    break;

                case ReqDemPlanDateGranularity::Month:
                    #groupData(CurrentMonthStart)
                    break;

                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
        }

        ReqDemPlanForecast::cleanVersion(ReqDemPlanForecastVersion::Temporary, false);
        ttsCommit;

        new SkipAOSValidationPermission().assert();

        // log number of records after aggregation
        select count(RecId) from record
            where record.Version == targetVersion;

        logger.incrementTaskRecordsProcessed(record.RecId);
        logger.finishTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateHistoricalData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Aggregates the <c>ReqDemPlanCubeStagingTable</c> table.
    /// </summary>
    private void aggregateHistoricalData()
    {
        ReqDemPlanCubeStagingTable  destination;
        ReqDemPlanCubeStagingTable  record;
        BIDateDimensionsViewPeriods datePeriods;
        boolean reqDataAggregatorIncludeStatusFlightEnabled = ReqDataAggregatorIncludeStatusFlight::instance().isEnabled();

        #localmacro.dimensionFields
            Site, Warehouse, Configuration, Color, Size, Style, ProductVersion
        #endmacro

        #localmacro.dimensionFieldsExtended
            #dimensionFields, StatusId
        #endmacro

        #localMacro.groupData
            insert_recordset destination
            (TransactionQty, Version, ItemId, AllocationKey, TransactionType,
                #dimensionFields,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId,
                TransactionDate)
            select sum(TransactionQty), targetVersion, ItemId, AllocationKey, TransactionType,
                #dimensionFields,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
            from record
                group by Version, AllocationKey, TransactionType, ItemId,
                    #dimensionFields,
                    CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
                where record.Version == ReqDemPlanForecastVersion::Temporary
            join %1 from datePeriods
                group by %1
                where record.TransactionDate == datePeriods.DateKey;
        #endmacro

        #localMacro.groupDataExtended
            insert_recordset destination
            (TransactionQty, Version, ItemId, AllocationKey, TransactionType,
                #dimensionFieldsExtended,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId,
                TransactionDate)
            select sum(TransactionQty), targetVersion, ItemId, AllocationKey, TransactionType,
                #dimensionFieldsExtended,
                CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
            from record
                group by Version, AllocationKey, TransactionType, ItemId,
                    #dimensionFieldsExtended,
                    CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
                where record.Version == ReqDemPlanForecastVersion::Temporary
            join %1 from datePeriods
                group by %1
                where record.TransactionDate == datePeriods.DateKey;
        #endmacro

        logger.startMonitoredTask(ReqDemPlanTaskCodes::PreAggregateHistoricalData, "@DMP1247", curext());
        dataHelper.skipAll(record);

        ttsBegin;
        // clean old temporary records
        ReqDemPlanCubeStagingTable::cleanVersion(ReqDemPlanForecastVersion::Temporary, false);

        update_recordSet record
            setting Version = ReqDemPlanForecastVersion::Temporary
            where record.Version == targetVersion;

        // perform aggregation
        if (reqDataAggregatorIncludeStatusFlightEnabled)
        {
            switch (granularity)
            {
                case ReqDemPlanDateGranularity::Day:
                    #groupDataExtended(DateKey)
                    break;

                case ReqDemPlanDateGranularity::Week:
                    #groupDataExtended(CurrentWeekStart)
                    break;

                case ReqDemPlanDateGranularity::Month:
                    #groupDataExtended(CurrentMonthStart)
                    break;

                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            switch (granularity)
            {
                case ReqDemPlanDateGranularity::Day:
                    #groupData(DateKey)
                    break;

                case ReqDemPlanDateGranularity::Week:
                    #groupData(CurrentWeekStart)
                    break;

                case ReqDemPlanDateGranularity::Month:
                    #groupData(CurrentMonthStart)
                    break;

                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
        }
        // clean old temporary records
        ReqDemPlanCubeStagingTable::cleanVersion(ReqDemPlanForecastVersion::Temporary, false);
        ttsCommit;

        new SkipAOSValidationPermission().assert();

        // log number of records after aggregation
        select count(RecId) from record
            where record.Version == targetVersion;

        logger.incrementTaskRecordsProcessed(record.RecId);
        logger.finishTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the object.
    /// </summary>
    private void initialize()
    {
        sqlSystem = new SqlSystem();
        dataHelper = new ReqDemPlanDataProcessingHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGranularity</Name>
				<Source><![CDATA[
        public ReqDemPlanDateGranularity parmGranularity(ReqDemPlanDateGranularity _granularity = granularity)
    {
        granularity = _granularity;

        return granularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogger</Name>
				<Source><![CDATA[
        public ReqDemPlanTaskLoggerInterface parmLogger(ReqDemPlanTaskLoggerInterface _logger = logger)
    {
        logger = _logger;

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetVersion</Name>
				<Source><![CDATA[
        public ReqDemPlanForecastVersion parmTargetVersion(ReqDemPlanForecastVersion _targetVersion = targetVersion)
    {
        targetVersion = _targetVersion;

        return targetVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the input for the object to function properly.
    /// </summary>
    public void validate()
    {
        if (!logger)
        {
            throw error("@DMP1272");
        }

        if (targetVersion == ReqDemPlanForecastVersion::Temporary)
        {
            throw error("@DMP1273");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ReqDemPlanDataAggregator construct()
    {
        return new ReqDemPlanDataAggregator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Default constructor for the class.
    /// </summary>
    /// <param name="_logger">
    ///     The object used for logging.
    /// </param>
    /// <param name="_targetVersion">
    ///     The version to be used.
    /// </param>
    /// <param name="_granularity">
    ///     The granularity to be used for aggregation.
    /// </param>
    /// <returns>
    ///     An instance of the <c>ReqDemPlanDataAggregator</c> class.
    /// </returns>
    public static ReqDemPlanDataAggregator newStandard(
                                            ReqDemPlanTaskLoggerInterface _logger,
                                            ReqDemPlanForecastVersion _targetVersion,
                                            ReqDemPlanDateGranularity _granularity = ReqDemPlanDateGranularity::Day)
    {
        ReqDemPlanDataAggregator result = ReqDemPlanDataAggregator::construct();
        result.parmGranularity(_granularity);
        result.parmTargetVersion(_targetVersion);
        result.parmLogger(_logger);

        result.validate();
        result.initialize();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>