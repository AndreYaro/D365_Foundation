<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlCancel_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates and interprets the XML to be sent to the cancel web service.
/// </summary>
class EFDocMsgFormat_XmlCancel_BR extends EFDocMsgFormat_XmlBase_BR implements IEFDocMsgFormat
{
    IEFDocMsgStream_BR      stream;
    EFiscalDocument_BR      efDocument;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doFormat</Name>
				<Source><![CDATA[
        protected void doFormat()
    {
        XmlElement      cancNFeElement;
        XmlElement      infCancElement;
        str             signedElementAsString;

        cancNFeElement  = this.createElement('cancNFe');
        cancNFeElement.setAttribute('versao', this.version());

        infCancElement  = this.createElement('infCanc');
        infCancElement.setAttribute('Id', 'ID' + efdocument.accessKey());
        infCancElement.appendChild(this.createElementWithValue('tpAmb', efdocument.fiscalEstablishment().EFDocEnvironment == EFDocEnvironment_BR::Production ? '1' : '2' ));
        infCancElement.appendChild(this.createElementWithValue('xServ', 'CANCELAR'));
        infCancElement.appendChild(this.createElementWithValue('chNFe', efdocument.accessKey() ));
        infCancElement.appendChild(this.createElementWithValue('nProt', efdocument.protocolNumber()));
        infCancElement.appendChild(this.createElementWithValue('xJust', strfmt("@GLS62693",efdocument.fiscalDocument().FiscalDocumentNumber)));

        cancNFeElement.appendChild(infCancElement);

        signedElementAsString = this.signDocument(efDocument.keyVaultCertificateRef(), efDocument.digitalCertificateSubject(), cancNFeElement, 'infCanc');

        xmlDoc = XmlDocument::newXml(signedElementAsString);
        xmlDoc.insertBefore(xmlDoc.createXmlDeclaration('1.0', 'UTF-8', ''), xmlDoc.documentElement());

        stream.write(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the NF-e manual that this class adheres to.
    /// </summary>
    /// <returns>The version of the NF-e manual from <c>EFiscalDocVersion_BR</c> enumerator.</returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the XML returned by the cancel web service.
    /// </summary>
    /// <param name="_stream">The stream from which to read the XML.</param>
    /// <param name="_returnInfo">A parm object to fill the return information.</param>
    void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR

        str             returnCode;
        str             returnCodeDescription;
        str             returnProtocolNumber;
        str             returnDateTime;
        utcdatetime     dateTime;
        ;

        xmlDoc.loadXml(conpeek(_stream.read(),1));

        returnCode              = this.getNodeContent('/x:retCancNFe/x:infCanc/x:cStat');
        returnCodeDescription   = this.getNodeContent('/x:retCancNFe/x:infCanc/x:xMotivo');

        if (returnCode == #Cancelled)
        {
            returnDateTime          = this.getNodeContent('/x:retCancNFe/x:infCanc/x:dhRecbto');
            returnProtocolNumber    = this.getNodeContent('/x:retCancNFe/x:infCanc/x:nProt');
        }

        dateTime = DateTimeUtil::parse(returnDateTime);

        _returnInfo.parmReturnCodeStatus(returnCode);
        _returnInfo.parmReturnCodeDescription(returnCodeDescription);
        _returnInfo.parmProtocolNumber(returnProtocolNumber);
        _returnInfo.parmProcessDateTime(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the XML that this class creates and interprets.
    /// </summary>
    /// <returns>The XML version in string format.</returns>
    public str version()
    {
        return '2.00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>webService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves which web service this format is to be sent to.
    /// </summary>
    /// <returns>A web service from <c>EFDocWebService_BR</c> enumerator.</returns>
    EFDocWebService_BR webService()
    {
        return EFDocWebService_BR::Cancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML messages and sends it to the provided message stream.
    /// </summary>
    /// <param name="_stream">The stream to be used to send the messages</param>
    /// <param name="_documentList">A <c>EFiscalDocumentList_BR</c> list of documents to be sent.</param>
    public void write(IEFDocMsgStream_BR _stream, EFiscalDocumentList_BR _documentList)
    {
        stream = _stream;

        if (_documentList.moveNext())
        {
            efDocument = _documentList.current();

            this.doFormat();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocMsgFormat_XmlCancel_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocMsgFormat_XmlCancel_BR</c> object.</returns>
    public static EFDocMsgFormat_XmlCancel_BR construct()
    {
        return new EFDocMsgFormat_XmlCancel_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>