<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionLetterPost_ChronologicalNumber_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCollectionLetterPost_ChronologicalNumber_Extension</c> class extends the logic of collection letter posting
/// in order to support chronological numbering functionality.
/// </summary>
[ExtensionOf(classStr(CustCollectionLetterPost))]
public final class CustCollectionLetterPost_ChronologicalNumber_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateVoucher</Name>
				<Source><![CDATA[
    protected NumberSeq allocateVoucher(CustCollectionLetterJour _custCollectionLetterJour)
    {
        NumberSeq numberSeqLocGroup;

        if (_custCollectionLetterJour.NumberSequenceGroup != ''
            && FeatureStateProvider::isFeatureEnabled(ChronologicalNumberingFeature::instance()))
        {
            NumberSequenceDatatype voucherDatatype = NumberSequenceDatatype::find(CustParameters::numRefCollectionLetterVoucher().NumberSequenceDatatype);
            RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
            RefRecId voucherSeqId = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, _custCollectionLetterJour.NumberSequenceGroup).NumberSequenceId;

            if (voucherSeqId != 0)
            {
                numberSeqLocGroup = NumberSeq::newGetVoucherFromId(voucherSeqId);
            }
        }

        NumberSeq numberSeqLocRef = next allocateVoucher(_custCollectionLetterJour);

        return numberSeqLocGroup ? numberSeqLocGroup : numberSeqLocRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFee</Name>
				<Source><![CDATA[
    protected void updateFee(CustCollectionLetterJour _custCollectionLetterJour, LedgerDimensionDefaultAccount _feeLedgerDimension)
    {
        if (FeatureStateProvider::isFeatureEnabled(ChronologicalNumberingFeature::instance()))
        {
            ChronologicalNumberSequenceGroupEngine::applyChronologicalNumberSequenceGroup(_custCollectionLetterJour, this.parmPostingDate());
        }

        next updateFee(_custCollectionLetterJour, _feeLedgerDimension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>