<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetrievingSourceDocLineStateMainAccountDerivationEventHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events related to main account derivation.
/// </summary>
public class RetrievingSourceDocLineStateMainAccountDerivationEventHandler_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrievingSourceDocLineStateMainAccountDerivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event handler delegate for initalizing <c>AccountingDistribution</c> based on a <c>SourceDocumentLineItem</c>.
    /// </summary>
    /// <param name="_eventArgs">
    /// Event arguments for <c>AccountingDistribution</c> events. Contains a <c>SourceDocumentLineItem</c> reference.
    /// </param>
    [SubscribesTo(classstr(SourceDocumentLineItem), staticdelegatestr(SourceDocumentLineItem, retrievingSourceDocLineStateMainAccountDerivation))]
    public static void retrievingSourceDocLineStateMainAccountDerivation(SourceDocumentLineItem _sourceDocumentLineItem, container _state)
    {
        SourceDocumentLineItemITaxWithhold_IN   iWithholdTax;

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            if (_sourceDocumentLineItem is SourceDocumentLineItemITaxWithhold_IN)
            {
                iWithholdTax = _sourceDocumentLineItem as SourceDocumentLineItemITaxWithhold_IN;
                _state += [iWithholdTax.parmTaxWithholdCode()];
                _state += [iWithholdTax.parmTaxWithholdDirection()];
                _state += [iWithholdTax.parmTaxWithholdGroup()];
            }
            else
            {
                _state += [''];
                _state += [0];
                _state += [''];
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>