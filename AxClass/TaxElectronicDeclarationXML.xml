<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxElectronicDeclarationXML</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

[SysObsolete('This class is no longer used.', true, 01\12\2022)]
class TaxElectronicDeclarationXML
{
    userId          user;
    ProxyPassword   password;
    System.Text.Encoding HtmlEncoding;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    public void createXML(TaxPeriod            _taxPeriod,
                          TransDate            _fromDate,
                          NoYes                _docSubSep,
                          TaxReportInitialize  _taxReportInitialize)
    {
        TaxElectronicDeclaration      taxElectronicDeclaration;
        TaxElectronicDeclaration      oldTaxElectronicDeclaration;
        TaxElectronicDeclarationTrans taxElectronicDeclarationTrans;
        TaxPeriodValue                taxPeriodValue = this.taxPeriodValue(_taxPeriod,_fromDate);

        ttsbegin;

        oldTaxElectronicDeclaration = TaxElectronicDeclaration::findActive(taxPeriodValue,
                                                                           int2str(year(_fromDate)),
                                                                           true);
        if (oldTaxElectronicDeclaration.RecId)
        {
            oldTaxElectronicDeclaration.Inactive = NoYes::Yes;
            oldTaxElectronicDeclaration.update();
        }

        taxElectronicDeclaration.TaxPeriod      = _taxPeriod;
        taxElectronicDeclaration.FromDate       = _fromDate;
        taxElectronicDeclaration.Correction     = TaxElectronicDeclaration::isCorrection(taxPeriodValue,
                                                                                         int2str(year(_fromDate)));
        taxElectronicDeclaration.TaxPeriodValue = taxPeriodValue;
        taxElectronicDeclaration.TaxPeriodYear  = int2str(year(_fromDate));
        taxElectronicDeclaration.DateExecuted   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        taxElectronicDeclaration.Sent           = NoYes::No;
        taxElectronicDeclaration.Inactive       = NoYes::No;
        taxElectronicDeclaration.DocumentsSubmittedSeparately   = _docSubSep;

        taxElectronicDeclaration.insert();

        taxElectronicDeclaration.TaxElectronicDocument = this.generateXML(taxElectronicDeclaration, _taxReportInitialize);
        taxElectronicDeclaration.update();

        taxElectronicDeclarationTrans.TaxElectronicDeclarationId = taxElectronicDeclaration.RecId;
        taxElectronicDeclarationTrans.TransType = TaxElectronicTransType::Created;
        taxElectronicDeclarationTrans.insert();

        if (   classIdGet(_taxReportInitialize) == classNum(TaxReportInitializeDE)
            && taxElectronicDeclaration.TaxElectronicDocument)
        {
            System.Byte[] bytes = System.Text.Encoding::UTF8.GetBytes(taxElectronicDeclaration.TaxElectronicDocument);
            var streamToAttach = new System.IO.MemoryStream(bytes);
            Filename fileName = 'TaxElectronicDocument.xml';
            var mime = System.Web.MimeMapping::GetMimeMapping(fileName);
            DocumentManagement::attachFileToCommon(taxElectronicDeclaration, DocuType::typeFile(), streamToAttach, fileName, mime, fileName);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHTML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns HTML representation of declaration.
    /// </summary>
    /// <param name = "_xml">XML representation of declaration.</param>
    /// <returns>HTML representation of declaration.</returns>
    public str getHTML(XML _xml)
    {
        var stream = TaxElectronicDeclarationXML_Elster::getTransferHeaderVersion(_xml) == '11' ?
                     Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetResourceContentStream(resourceStr(TaxElectronicDeclarationXslUstva11)) :
                     Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetResourceContentStream(resourceStr(TaxElectronicDeclarationXslUstva));

        XML xmlWithoutNewNamespace = _xml;

        //we need to remove this namespace from the XML before the transform because our xsl files doesn't support it
        str stringToRemove = 'xmlns="http://finkonsens.de/elster/elsteranmeldung/ustva/v2021"';
        int stringToRemovePosition = strScan(_xml, stringToRemove, 1, strLen(_xml));
        if (stringToRemovePosition)
        {
            xmlWithoutNewNamespace = strDel(_xml, stringToRemovePosition, strLen(stringToRemove));
        }

        return this.applyTransformToXml(stream, xmlWithoutNewNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHtmlEncoding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encoding of HTML version of declaration.
    /// </summary>
    /// <returns>Encoding of HTML version of declaration.</returns>
    public System.Text.Encoding getHtmlEncoding()
    {
        return HtmlEncoding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTransformToXml</Name>
				<Source><![CDATA[
    private str applyTransformToXml(System.IO.Stream _xslResourceStream, str _xmlStringToTransform)
    {
        var stringBuilder = new System.Text.StringBuilder();

        var transform = new System.Xml.Xsl.XslCompiledTransform();

        using (var xslReader = System.Xml.XmlReader::Create(_xslResourceStream))
        {
            transform.Load(xslReader, null, TaxElectronicDeclarationXslResolver::createXmlResolver());

            using (var textReader = new System.IO.StringReader(_xmlStringToTransform))
            {
                using (var xmlReader = System.Xml.XmlReader::Create(textReader))
                {
                    using (var transformedXmlWriter = System.Xml.XmlWriter::Create(stringBuilder, transform.OutputSettings))
                    {
                        transform.Transform(xmlReader, transformedXmlWriter);
                    }
                }
            }

            var outputSettings = transform.OutputSettings;
            HtmlEncoding = outputSettings.Encoding;
        }

        return stringBuilder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates declaration XML.
    /// </summary>
    /// <param name = "_taxElectronicDeclaration">A <c>TaxElectronicDeclaration</c> record.</param>
    /// <param name = "_taxReportInitialize">Provides amounts for XML.</param>
    /// <returns>The declaration XML.</returns>
    protected XML generateXML(
        TaxElectronicDeclaration _taxElectronicDeclaration,
        TaxReportInitializeDE _taxReportInitialize)
    {
        ERFileDestinationMemory dest;

        dest = new ERFileDestinationMemory();
        ERObjectsFactory::createFormatMappingRunByFormatMappingId(TaxElectronicDeclarationSetup::find().ERFormatMappingID)
            .withFileDestination(dest)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addTemporaryTable(_taxReportInitialize.tmpTaxReportById())
                .addValue(tableNum(TaxElectronicDeclaration), fieldNum(TaxElectronicDeclaration, RecId), _taxElectronicDeclaration.RecId)
            ).run();

        var xmlStream = dest.getStream();
        xmlStream.Position = 0;

        var xmlDocument = new System.Xml.XmlDocument();
        xmlDocument.Load(xmlStream);
        TaxElectronicDeclarationXML::removeXmlDeclaration(xmlDocument);

        return xmlDocument.InnerXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeXmlDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes XML declaration from XML document.
    /// </summary>
    /// <param name = "_xmlDocument">XML document</param>
    public static void removeXmlDeclaration(System.Xml.XmlDocument _xmlDocument)
    {
        var firstChild = _xmlDocument.FirstChild;
        var nodeType = firstChild.NodeType;
        if (nodeType == System.Xml.XmlNodeType::XmlDeclaration)
        {
            _xmlDocument.RemoveChild(_xmlDocument.FirstChild);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>proxySetting</Name>
				<Source><![CDATA[
    public boolean proxySetting()
    {
        boolean         ret = false;
        DialogField     dialogUser;
        DialogField     dialogPassword;
        Dialog          dialog  = new Dialog("@SYS99826");

        dialogUser      = dialog.addField(extendedtypestr(userId),"@SYS4517","@SYS99827");
        dialogPassword  = dialog.addField(extendedtypestr(ProxyPassword),"@SYS65061","@SYS99828");
        dialogPassword.passwordStyle(true);

        if (dialog.run())
        {
            user          = dialogUser.value();
            password      = dialogPassword.value();
            ret           = true;
        }

        if (ret && !(user && password))
        {
            ret = checkFailed(strfmt("@SYS100273", "@SYS99796", "@SYS99798"));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendXML</Name>
				<Source><![CDATA[
    public TaxElectronicDeclaration sendXML(TaxElectronicDeclaration _taxElectronicDeclaration)
    {
        TaxElectronicDeclaration      taxElectronicDeclaration = _taxElectronicDeclaration;
        TaxElectronicDeclarationTrans taxElectronicDeclarationTrans;
        boolean                       transmit = true;

        if (taxElectronicDeclaration            &&
            !taxElectronicDeclaration.Sent      &&
            !taxElectronicDeclaration.Inactive)
        {
            if (TaxElectronicDeclarationSetup::find().ProxyServer == true && TaxElectronicDeclarationSetup::find().ProxyServerAuthenticationRequired == true)
            {
                transmit = this.proxySetting();
            }

            if (transmit)
            {
                ttsbegin;
                taxElectronicDeclarationTrans.TaxElectronicDeclarationId = taxElectronicDeclaration.RecId;
                taxElectronicDeclarationTrans.TransType                  = TaxElectronicTransType::Sent;

                // the XML document is transmitted and the fields ReceivedDocument, Error and TransferError
                // of the TaxElectronicDeclarationTrans record are filled
                taxElectronicDeclarationTrans = this.transmitXML(taxElectronicDeclaration,
                                                                 taxElectronicDeclarationTrans);

                taxElectronicDeclarationTrans.insert();
                ttscommit;

                if (taxElectronicDeclarationTrans.Error)
                {
                    error("@SYS99824");
                }
                else
                {
                    taxElectronicDeclaration.Sent = NoYes::Yes;
                    taxElectronicDeclaration.update();
                }
            }
        }
        return taxElectronicDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriodValue</Name>
				<Source><![CDATA[
    protected TaxPeriodValue taxPeriodValue(TaxPeriod _taxPeriod,
                                            TransDate _fromDate)
    {
        TaxPeriodValue taxPeriodValue;
        TaxPeriodHead  taxPeriodHead;
        boolean        quarterly;

        taxPeriodHead = TaxPeriodHead::find(_taxPeriod);
        if (taxPeriodHead.PeriodUnit == PeriodUnit::Month &&
            taxPeriodHead.QtyUnit    == 3)
        {
            quarterly = true;
        }
        else
        {
            quarterly = false;
        }

        if (quarterly)
        {
            switch (mthofyr(_fromDate))
            {
                case 1,2,3:
                    taxPeriodValue = '41';
                    break;
                case 4,5,6:
                    taxPeriodValue = '42';
                    break;
                case 7,8,9:
                    taxPeriodValue = '43';
                    break;
                case 10,11,12:
                    taxPeriodValue = '44';
                    break;
            }
        }
        else
        {
            switch (mthofyr(_fromDate))
            {
                case 1:
                    taxPeriodValue = '01';
                    break;
                case 2:
                    taxPeriodValue = '02';
                    break;
                case 3:
                    taxPeriodValue = '03';
                    break;
                case 4:
                    taxPeriodValue = '04';
                    break;
                case 5:
                    taxPeriodValue = '05';
                    break;
                case 6:
                    taxPeriodValue = '06';
                    break;
                case 7:
                    taxPeriodValue = '07';
                    break;
                case 8:
                    taxPeriodValue = '08';
                    break;
                case 9:
                    taxPeriodValue = '09';
                    break;
                case 10:
                    taxPeriodValue = '10';
                    break;
                case 11:
                    taxPeriodValue = '11';
                    break;
                case 12:
                    taxPeriodValue = '12';
                    break;
            }
        }
        return taxPeriodValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transmitXML</Name>
				<Source><![CDATA[
    // The transmission of the XML document should be implemented for each TaxReportLayout
    // by overriding this method in each derived class.
    protected TaxElectronicDeclarationTrans transmitXML(TaxElectronicDeclaration _taxElectronicDeclaration,
                                                        TaxElectronicDeclarationTrans _taxElectronicDeclarationTrans)
    {
        return _taxElectronicDeclarationTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxElectronicDeclarationXML construct(TaxReportLayout _taxReportLayout)
    {
        TaxElectronicDeclarationXML taxElectronicDeclarationXML;

        switch (_taxReportLayout)
        {
            case TaxReportLayout::Germany:
                taxElectronicDeclarationXML = TaxElectronicDeclarationXML_Elster::construct();
                break;
            default:
                taxElectronicDeclarationXML = new TaxElectronicDeclarationXML();
                break;
        }
        return taxElectronicDeclarationXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForTaxElectronicDeclaration</Name>
				<Source><![CDATA[
    public static TaxElectronicDeclarationXML constructForTaxElectronicDeclaration(TaxElectronicDeclaration _taxElectronicDeclaration)
    {
        var taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(_taxElectronicDeclaration.TaxPeriod).TaxAuthority).TaxReportLayout;
        return TaxElectronicDeclarationXML::construct(taxReportLayout);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>