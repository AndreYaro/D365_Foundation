<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBOMComparison_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class is used to take action for bom comparison logic.
/// </summary>
class InventBOMComparison_CN
{
    InventBOMComparisonTmp_CN           bomComparison;
    ModuleInventPurchSales              itemCostModuleType;
    InventBOMComparisonType_CN          compType;
    InventBOMComparisonCostType_CN      costType;
    Array                               bomIds;

    // Min number of BOM Version (BOM Id) for comparison
    #define.MinBOMVersionNum(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBOMVersionNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the number of valid BOM IDs (BOM Versions).
    /// </summary>
    /// <returns>
    ///     Returns the number of valid BOM IDs.
    /// </returns>
    public int checkBOMVersionNum()
    {
        int     i;
        int     num = 0;

        for (i = 1; i <= bomIds.lastIndex(); i++)
        {
            if (bomIds.value(i) != '')
            {
                num++;
            }
        }

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMVersions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks bom version ids.
    /// </summary>
    /// <returns>
    ///     Returns true if the bom version ids larger than 2 and not repeated bom version ids.
    /// </returns>
    public boolean checkBOMVersions()
    {
        boolean ret = true;

        if (this.checkBOMVersionNum() < #MinBOMVersionNum)
        {
            // You must select two or more BOM versions to compare.
            checkFailed("@GLS63211");
            ret = false;
        }

        if (this.checkExistRepeatedBOMVersion())
        {
            // The same BOM has been selected more than one times. Please correct it and try again.
            checkFailed("@GLS63212");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistRepeatedBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if there are some repeated BOM Ids.
    /// </summary>
    /// <returns>
    ///     If exists repeated BOM Ids, return true. Otherwise, return false.
    /// </returns>
    public boolean checkExistRepeatedBOMVersion()
    {
        int     i;
        int     valueCount;
        Set     bomIdSet = new Set(Types::String);

        for (i = 1; i <= bomIds.lastIndex(); i++)
        {
            if (bomIds.value(i))
            {
                bomIdSet.add(bomIds.value(i));
                valueCount++;
            }
        }

        return bomIdSet.elements() != valueCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doComparison</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Compares a set of BOMs in a specified comparison field.
    /// </summary>
    /// <param name="_progress">
    ///     The progress bar. Default is null
    /// </param>
    /// <returns>
    ///     A temporary table buffer with comparison result.
    /// </returns>
    public InventBOMComparisonTmp_CN doComparison(
        SysOperationProgress        _progress = null)
    {
        // Increase progress bar
        if (_progress)
        {
            _progress.incCount();
        }

        bomComparison.setTmp();
        bomComparison.setTmpData(
            InventBOMComparison_CN::generateBOMComparisonData(
                bomIds.pack(),
                compType,
                itemCostModuleType));

        // Increase progress bar
        if (_progress)
        {
            _progress.incCount();
        }

        return bomComparison;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initComparisonType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes comparison type, cost type and module type for bom comparison.
    /// </summary>
    /// <param name="_compType">
    ///     InventBOMComparisonType
    /// </param>
    /// <param name="_costType">
    ///     InventBOMComparisonCostType
    /// </param>
    /// <remarks>
    ///     Assigns itemCostModuelType according to cost type.
    /// </remarks>
    public void initComparisonType(
        InventBOMComparisonType_CN        _compType,
        InventBOMComparisonCostType_CN    _costType)
    {
        compType  = _compType;
        costType  = _costType;

        switch (costType)
        {
            case InventBOMComparisonCostType_CN::InventoryCost:
                itemCostModuleType = ModuleInventPurchSales::Invent;
                break;
            case InventBOMComparisonCostType_CN::PurchasePrice:
                itemCostModuleType = ModuleInventPurchSales::Purch;
                break;
            default:
                itemCostModuleType = ModuleInventPurchSales::Purch;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>InventBOMComparison_CN</c> class.
    /// </summary>
    /// <param name="_bomIds">
    /// The invent bom id.
    /// </param>
    protected void new(Array _bomIds)
    {
        bomIds = _bomIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>InventBOMComparison_CN</c> class.
    /// </summary>
    /// <param name="_bomIds">
    /// The bom id.
    /// </param>
    /// <returns>
    /// The instance of the <c>InventBOMComparison_CN</c> class.
    /// </returns>
    public static InventBOMComparison_CN construct(Array   _bomIds)
    {
        const str FeatureReference = 'CN-00022';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        InventBOMComparison_CN inventBOMComparison = new InventBOMComparison_CN(_bomIds);

        return inventBOMComparison;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBOMComparisonData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates bom comparison data and insert into temp table <c>InventBOMComparisonTmp_CN</c>
    /// </summary>
    /// <param name="_conBomIds">
    ///     Container for bom version ids
    /// </param>
    /// <param name="_compType">
    ///     Comparison type
    /// </param>
    /// <param name="_itemCostModuleType">
    ///     Item cost module type
    /// </param>
    /// <returns>
    ///     Instance about <c>InventBOMComparisonTmp_CN</c> temp table
    /// </returns>
    protected static InventBOMComparisonTmp_CN generateBOMComparisonData(
        container                   _conBomIds,
        InventBOMComparisonType_CN  _compType,
        ModuleInventPurchSales      _itemCostModuleType)
    {
        int                             i;
        BOM                             bom;
        Array                           bomIds = Array::create(_conBomIds);

        InventTable                     inventTable;
        InventTableModule               inventTableModule;
        EcoResProduct                   ecoResProduct;
        InventBOMComparisonTmp_CN       bomComparison;

        // init the bomIdSet
        Set bomIdSet = new Set(Types::String);
        for (i = 1; i <= bomIds.lastIndex(); i++)
        {
            if (bomIds.value(i))
            {
                bomIdSet.add(bomIds.value(i));
            }
        }

        // Get merged tmp bom. All items' unitId have been convert to theirs inventory module unitId
        bom.setTmp();
        bom.setTmpData(InventBOMComparison_CN::getMergedTmpBOMByIds(bomIdSet));

        bomComparison.setTmp();

        // get all item
        ttsbegin;
        while select ItemId, UnitId
            from bom
            group by ItemId, UnitId
        {
            bomComparison.ItemId    = bom.ItemId;
            bomComparison.Unit      = bom.UnitId;
            bomComparison.insert();
        }

        // update item info
        if (FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance())
            && EcoResProductParameters::find().UseFallbackTranslation)
        {
            EcoResProductTranslationFallbackView ecoResProductTranslationFallbackView;
            LanguageId currentUserLanguageId = currentUserLanguage();

            while select forupdate bomComparison
            join ItemId, BomUnitId, Product
                from inventTable
                where inventTable.ItemId == bomComparison.ItemId
            join Price, UnitId, PriceUnit, Markup, PriceQty, PriceDate, AllocateMarkup
                from inventTableModule
                where inventTable.ItemId == inventTableModule.ItemId
                    && inventTableModule.ModuleType == _itemCostModuleType
            join recId
                from ecoResProduct
                where inventTable.Product == EcoResProduct.RecId
            outer join Name
                from ecoResProductTranslationFallbackView
                where ecoResProductTranslationFallbackView.Product  == EcoResProduct.RecId
                    && ecoResProductTranslationFallbackView.LanguageId == currentUserLanguageId
            {
                InventBOMComparison_CN::updateComparisonData(bomComparison, inventTableModule, inventTable, ecoResProductTranslationFallbackView.Name);
            }
        }
        else
        {
            EcoResProductTranslation ecoResProductTranslation;
            SystemLanguageId systemLanguageId = SystemParameters::getSystemLanguageId();

            while select forupdate bomComparison
            join ItemId, BomUnitId, Product
                from inventTable
                where inventTable.ItemId == bomComparison.ItemId
            join Price, UnitId, PriceUnit, Markup, PriceQty, PriceDate, AllocateMarkup
                from inventTableModule
                where inventTable.ItemId            == inventTableModule.ItemId
                    && inventTableModule.ModuleType == _itemCostModuleType
            join recId
                from ecoResProduct
                where inventTable.Product           == EcoResProduct.RecId
            outer join Name
                from ecoResProductTranslation
                where ecoResProductTranslation.Product  == EcoResProduct.RecId
                    && ecoResProductTranslation.LanguageId == systemLanguageId
            {
                InventBOMComparison_CN::updateComparisonData(bomComparison, inventTableModule, inventTable, ecoResProductTranslation.Name);
            }
        }
        
        // get compare filed value of each item for each bom version
        for (i = 1; i <= bomIds.lastIndex(); i++)
        {
            if (bomIds.value(i))
            {
                InventBOMComparison_CN::updateComparisonField(bomComparison, bom, _compType, bomIds.value(i), i);
            }
        }
        ttscommit;

        return bomComparison;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateComparisonData</Name>
				<Source><![CDATA[
    protected static void updateComparisonData(InventBOMComparisonTmp_CN _bomComparison, InventTableModule _inventTableModule, InventTable _inventTable, EcoResProductName _productName)
    {
        _bomComparison.ItemName = _productName;
        // If the item's BOMUnitId is not setted, use its inventory module unit instead;
        _bomComparison.Unit = (_inventTable.bomUnitId == '') ? _bomComparison.Unit : _inventTable.bomUnitId;

        Qty convertQty = UnitOfMeasureConverter::convert(
                1,
                UnitOfMeasure::unitOfMeasureIdBySymbol(_inventTableModule.UnitId),
                UnitOfMeasure::unitOfMeasureIdBySymbol(_bomComparison.Unit),
                NoYes::No,
                _inventTable.Product,
                NoYes::No);
        _bomComparison.Cost = (convertQty > 0) ? _inventTableModule.InventPriceMap::price() / convertQty : 0;

        _bomComparison.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedTmpBOMByIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a set of BOMs' lines. The same item in same
    ///  BOM will be merged.
    /// </summary>
    /// <param name="_bomIds">
    ///     A set of BOM Ids.
    /// </param>
    /// <returns>
    ///     A temporary BOM table buffer contains the merged
    ///  result. Four fields are available: BOMId, ItemID,
    ///  UnitId, BOMQty. The BOMQty is merged grouped by BOMId,
    ///  ItemId, UnitId
    /// </returns>
    /// <remarks>
    ///     All items' unit are converted to their invent module unit.
    /// </remarks>
    protected static BOM getMergedTmpBOMByIds(Set _bomIds)
    {
        BOM                 tmpBom;
        BOM                 tmpMergedBom;
        InventTableModule   inventTableModule;

        tmpMergedBom.setTmp();

        // get boms with bom ids
        tmpBom.setTmp();
        tmpBom.setTmpData(InventBOMComparison_CN::getTmpBOMByIds(_bomIds));

        boolean convertUnitWithProductFlightEnabled = InventBOMComparisonConvertUnitWithProduct_CNFlight::instance().isEnabled();
        boolean skipUpdateMethodFlightEnabled = InventBOMComparisonSkipUpdateMethodOnTempTableFlight::instance().isEnabled();

        // convert all items' unit to their invent module unit
        ttsbegin;
        while select forupdate tmpBom
            join UnitId
                from inventTableModule
                where inventTableModule.ModuleType  == ModuleInventPurchSales::Invent
                    && tmpBom.ItemId                == inventTableModule.ItemId
        {
            tmpBom.bomQty = UnitOfMeasureConverter::convert(
                tmpBom.bomQty(),
                UnitOfMeasure::unitOfMeasureIdBySymbol(tmpBom.UnitId),
                UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId),
                NoYes::No,
                convertUnitWithProductFlightEnabled ? InventTable::itemProduct(tmpBom.ItemId) : 0,
                NoYes::No);
            tmpBom.UnitId = inventTableModule.UnitId;

            if (skipUpdateMethodFlightEnabled)
            {
                tmpBom.doUpdate();
            }
            else
            {
                tmpBom.update();
            }
        }

        RecordInsertList mergedBomList =
            new RecordInsertList(tableNum(BOM), true, true, true, true, true, tmpMergedBom);

        BOMLineCreationSequenceNumber localNumber = 0;
        BOMId bomIdLocal;

        // merge same item in the same bom
        while select bomId, ItemId, UnitId, sum(bomQty)
            from tmpBom
            group by bomId, ItemId, UnitId
        {
            if (localNumber == 0 || bomIdLocal != tmpBom.bomId)
            {
                bomIdLocal = tmpBom.bomId;
                localNumber = BOM::nextLineCreationSequenceNumber(tmpBom);
            }
            else
            {
                localNumber++;
            }
            tmpMergedBom.data(tmpBom.data());
            tmpMergedBom.LineCreationSequenceNumber = localNumber;
            mergedBomList.add(tmpMergedBom);
        }

        mergedBomList.insertDatabase();
        ttscommit;

        return tmpMergedBom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpBOMByIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a set of BOMs' lines.
    /// </summary>
    /// <param name="_bomIds">
    ///     Array of BOM Ids.
    /// </param>
    /// <returns>
    ///      A temporary BOM table buffer contains the result.
    ///  Four fields are available: BOMId, ItemID, UnitId, BOMQty.
    /// </returns>
    protected static BOM getTmpBOMByIds(Set _bomIds)
    {
        BOM                     tmpBom;
        str                     bomIdsStr;
        SetEnumerator           se      = _bomIds.getEnumerator();
        boolean                 isFirst = true;

        tmpBom.setTmp();

        // build range str for bomId list
        while (se.moveNext())
        {
            if (isFirst)
            {
                bomIdsStr   = se.current();
                isFirst     = false;
            }
            else
            {
                bomIdsStr += strfmt(',%1', se.current());
            }
        }

        // if _bomIds is empty, return an empty temporary BOM
        if (bomIdsStr != '')
        {
            // build query
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(BOM));
            QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldnum(BOM, bomId));
            queryBuildRange.value(bomIdsStr);
            QueryRun queryRun = new QueryRun(query);

            // fetch data

            RecordInsertList tmpBomList =
                new RecordInsertList(tableNum(BOM), true, true, true, true, true, tmpBom);

            ttsbegin;
            while (queryRun.next())
            {
                tmpBom.data(queryRun.get(tablenum(BOM)).data());
                tmpBomList.add(tmpBom);
            }

            tmpBomList.insertDatabase();
            ttscommit;
        }

        return tmpBom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateComparisonField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the specified comparison field with the value in its corresponding BOM Id.
    /// </summary>
    /// <param name="_bomComparison">
    ///     A comparison result which need to be unpdated.
    /// </param>
    /// <param name="_bom">
    ///     A temporary BOM table buffer which contains the BOM line details.
    /// </param>
    /// <param name="_compType">
    ///     Comparison field type.
    /// </param>
    /// <param name="_bomId">
    ///     BOM Id
    /// </param>
    /// <param name="_bomIndex">
    ///     The index of BOM Id. Also the index of comparison field in _compType type.
    /// </param>
    protected static void updateComparisonField(
        InventBOMComparisonTmp_CN   _bomComparison,
        BOM                         _bom,
        InventBOMComparisonType_CN  _compType,
        BOMId                       _bomId,
        int                         _bomIndex)
    {
        switch (_compType)
        {
            case InventBOMComparisonType_CN::Quantity:
                InventBOMComparison_CN::updateQtyField(
                    _bomComparison,
                    _bom,
                    _bomId,
                    _bomIndex);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the qty field with the value in its corresponding BOM Id.
    /// </summary>
    /// <param name="_bomComparison">
    ///     A comparison result which need to be unpdated.
    /// </param>
    /// <param name="_bom">
    ///     A temporary BOM table buffer which contains the BOM line details.
    /// </param>
    /// <param name="_bomId">
    ///     BOM Id
    /// </param>
    /// <param name="_bomIndex">
    ///     The index of BOM Id. Also the index of qty field in _compType type.
    /// </param>
    protected static void updateQtyField(
        InventBOMComparisonTmp_CN   _bomComparison,
        BOM                         _bom,
        BOMId                       _bomId,
        int                         _bomIndex)
    {
        BOMQty      convertQty;

        if (_bomIndex       > 0
            && _bomIndex    <= InventBOMComparisonTmp_CN::getMaxComparisonNum())
        {
            boolean convertUnitWithProductFlightEnabled = InventBOMComparisonConvertUnitWithProduct_CNFlight::instance().isEnabled();

            ttsbegin;
            while select forupdate _bomComparison
                outer join bomQty, UnitId
                    from _bom
                    where _bomComparison.ItemId == _bom.ItemId
                        && _bom.bomId           == _bomId
            {
                if (_bom.bomQty)
                {
                    convertQty = UnitOfMeasureConverter::convert(
                        _bom.bomQty,
                        UnitOfMeasure::unitOfMeasureIdBySymbol(_bom.UnitId),
                        UnitOfMeasure::unitOfMeasureIdBySymbol(_bomComparison.Unit),
                        NoYes::No,
                        convertUnitWithProductFlightEnabled ? InventTable::itemProduct(_bomComparison.ItemId) : 0,
                        NoYes::No);
                }
                else
                {
                    convertQty = 0.0;
                }

                switch (_bomIndex)
                {
                    case 1:
                        _bomComparison.bom1Qty = convertQty;
                        break;
                    case 2:
                        _bomComparison.bom2Qty = convertQty;
                        break;
                    case 3:
                        _bomComparison.bom3Qty = convertQty;
                        break;
                    case 4:
                        _bomComparison.bom4Qty = convertQty;
                        break;
                    case 5:
                        _bomComparison.bom5Qty = convertQty;
                        break;
                }

                _bomComparison.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the content of a BOM Version control. If its corresponding product
    ///  is selected, check if it is a BOM Id related to the product. If not selected,
    ///  check if it is a valid BOM Id.
    /// </summary>
    /// <param name="_bomId">
    ///     BOM version id
    /// </param>
    /// <param name="_relatedProdId">
    ///     Related procudtion id
    /// </param>
    /// <returns>
    ///     Returns true, if its content is valid.
    /// </returns>
    public static boolean validateBOMVersion(
        BOMId               _bomId,
        ItemIdProduction    _relatedProdId)
    {
        boolean             ret = false;

        if (_bomId == '')
        {
            ret = true;
        }
        else
        {
            if (_relatedProdId == '')
            {
                // check if the typed value is an existed BOM Id
                ret = BOMTable::checkExist(_bomId);
            }
            else
            {
                // check if the typed value is an existed BOM Id related to the selected product
                ret = BOMVersion::checkItemRelation(_bomId, _relatedProdId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the content of a Product control whether it is a
    ///  valid product ID.
    /// </summary>
    /// <param name="_itemId">
    ///     Product item id.
    /// </param>
    /// <returns>
    ///     Returns true, if its content is a valid product ID.
    /// </returns>
    public static boolean validateProduct(ItemIdProduction _itemId)
    {
        boolean ret = false;

        if (_itemId == '')
        {
            ret = true;
        }
        else
        {
            // check if the typed value is an existed item Id
            ret = InventTable::checkExist(_itemId);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>