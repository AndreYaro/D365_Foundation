<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVoucherJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendVoucherJournal extends VendVoucher
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copySpecTrans</Name>
				<Source><![CDATA[
    protected boolean copySpecTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans</Name>
				<Source><![CDATA[
    protected void initCustVendTrans(CustVendTrans custVendTrans, LedgerVoucher _ledgerPostingJournal, boolean _useSubLedger = false)
    {
        LedgerJournalTrans ledgerJournalTrans;
        VendTrans vendTrans;
        BankLCLineRefRecId bankLCLineRefRecId;
        #ISOCountryRegionCodes
        Tax1099BoxDetail localTax1099Detail;
        VendTrans_W vendTrans_W;

        super(custVendTrans, _ledgerPostingJournal, _useSubLedger);

        if (common.TableId == tablenum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;
            vendTrans = custVendTrans;

            //Copy reason code over to transaction history
            vendTrans.ReasonRefRecId = ReasonTableRef::checkCreateInCompany(ledgerJournalTrans.ReasonRefRecID, vendTrans.DataAreaId);

            vendTrans.PaymId = ledgerJournalTrans.PaymId;
            vendTrans.RemittanceLocation = ledgerJournalTrans.RemittanceLocation;
            vendTrans.RemittanceAddress = ledgerJournalTrans.RemittanceAddress;

            if (ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::PurchaseLedger)
            {
                vendTrans.JournalNum = ledgerJournalTrans.JournalNum;                
            }

            // We need the remittance ID set for transactions entered during remittance generation
            // or the reprinting of the control report will not work when ledger trans do not exist.
            if (ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
            {
                vendTrans.BankRemittanceFileId = ledgerJournalTrans.BankRemittanceFileId;
            }

            if (ledgerJournalTrans.AmountCurCredit > 0 && ledgerJournalTrans.BankAccountId)
            {
                vendTrans.CompanyBankAccountId = ledgerJournalTrans.BankAccountId;
            }

            if (ledgerJournalTrans.Tax1099Fields)
            {
                vendTrans.Tax1099Fields = ledgerJournalTrans.Tax1099Fields;

                // Make a copy of the ledger tax1099 detail record and reference to vendtrans record
                if (isConfigurationkeyEnabled(configurationKeyNum(Tax1099S)) || isConfigurationkeyEnabled(configurationKeyNum(Tax1099G)))
                {
                    if (ledgerJournalTrans.Tax1099RecId != 0)
                    {
                        Tax1099BoxDetail::findRecId(ledgerJournalTrans.Tax1099RecId).copyTo(localTax1099Detail);
                        localTax1099Detail.insert();
                        vendTrans.Tax1099RecId = localTax1099Detail.RecId;
                    }
                }

                if (ledgerJournalTrans.Tax1099Amount)
                {
                    vendTrans.Tax1099Amount = ledgerJournalTrans.Tax1099Amount;
                }
                else
                {
                    // Leave 1099 Amount as zero when S-2 and S-4 is checked (state amount always defaults)
                    if ((isConfigurationkeyEnabled(configurationKeyNum(Tax1099S)) || isConfigurationkeyEnabled(configurationKeyNum(Tax1099G)))
                            && vendTrans.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099S::grossProceeds())
                            && Tax1099BoxDetail::findRecId(vendTrans.Tax1099RecId).Tax1099PropertyOrServices == NoYes::Yes)
                    {
                        vendTrans.Tax1099Amount = 0;
                    }
                    else
                    {
                        vendTrans.Tax1099Amount = ledgerJournalTrans.amount();
                    }
                }

                if (ledgerJournalTrans.Tax1099State)
                {
                    vendTrans.Tax1099State = ledgerJournalTrans.Tax1099State;

                    if (ledgerJournalTrans.Tax1099StateAmount)
                    {
                        vendTrans.Tax1099StateAmount = ledgerJournalTrans.Tax1099StateAmount;
                    }
                    else
                    {
                        vendTrans.Tax1099StateAmount = ledgerJournalTrans.amount();
                    }
                }
            }

            custVendTrans = vendTrans;

            if (BankLCImportFeatureChecker::checkBankLCImportEnabled())
            {
                bankLCLineRefRecId = ledgerJournalTrans.getLedgerJournalTransBankLC().BankLCLine;
                if (bankLCLineRefRecId)
                {
                    custVendTrans.BankLCLine = bankLCLineRefRecId;
                }
            }

            if (ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::PurchaseLedger)
            {
                custVendTrans.Arrival = NoYes::Yes;

                LedgerDimensionDefaultAccount arrivalAccount = VendLedgerAccounts::purchasingLedgerDimension(custVendTrans.AccountNum, postingProfile);
                custVendTrans.ArrivalAccountId = MainAccount::findByLedgerDimension(arrivalAccount).MainAccountId;

                if (custVendTrans.Approved)
                {
                    LedgerDimensionDefaultAccount summaryAccount = VendLedgerAccounts::summaryLedgerDimension(custVendTrans.AccountNum, postingProfile);
                    custVendTrans.SummaryAccountId = MainAccount::findByLedgerDimension(summaryAccount).MainAccountId;
                }
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]))
            {
                vendTrans_W = vendTrans.vendTrans_W();
                vendTrans_W.PurchReceiptDate_W = ledgerJournalTrans.ReceiptDate_W;
                vendTrans.packVendTrans_W(vendTrans_W);
            }

            if (! ledgerJournalTrans.Invoice && VendTable::find(vendTrans.AccountNum).VATTaxAgent_RU)
            {
                vendTrans_W = vendTrans.vendTrans_W();
                vendTrans_W.VATPaymRefRecId_RU = ledgerJournalTrans.RecId;
                vendTrans.packVendTrans_W(vendTrans_W);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerPostingJournal,
                     CustVendTrans _vendTrans,
                     NoYes _approval = NoYes::No,
                     UnknownNoYes _euroTriangulation = Currency::noYes2UnknownNoYes(triangulation),
                     boolean _withHoldTaxType = false,
                     boolean _useSubLedger = false)
    {
        super(_ledgerPostingJournal, _vendTrans, _approval, _euroTriangulation, _withHoldTaxType, _useSubLedger);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>