<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCompensationReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendCompensationReportController</c> class is the helper class for the associated SSRS Report.
/// </summary>
class CustVendCompensationReportController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        super();
        this.reportDataSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        super();
        this.reportDataSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportDataSetup</Name>
				<Source><![CDATA[
    private void reportDataSetup()
    {
        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
        CustVendCompensationReportContract rdpContract = this.parmReportContract().parmRdpContract() as CustVendCompensationReportContract;
        Object caller = this.parmArgs().caller();
        LedgerJournalTrans ledgerJournalTrans;
        RecId ledgerCustRecId;
        RecId ledgerVendRecId;

        RecId getLedgerRecId(Voucher _voucher, LedgerJournalACType _type)
        {
            return (select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.Voucher == _voucher &&
                    ledgerJournalTrans.AccountType == _type).RecId;
        }

        void modifyQueryParameters(str _name, RecId _recId)
        {
            rdlContract.setValue(_name + '_SpecRecId', _recId);
            rdlContract.setValue(_name + '_SpecTableId', tableNum(LedgerJournalTrans));
            rdlContract.setValue(_name + '_SpecCompany', curext());
        }

        // Determine report contents based on calling form
        if (this.parmArgs().record() && this.parmArgs().record().TableId == tableNum(LedgerJournalTrans))
        {
            // Report was invoked from the LedgerJournalTransDaily form
            ledgerJournalTrans = this.parmArgs().record();

            ledgerCustRecId = getLedgerRecId(ledgerJournalTrans.Voucher, LedgerJournalACType::Cust);
            ledgerVendRecId = getLedgerRecId(ledgerJournalTrans.Voucher, LedgerJournalACType::Vend);
        }
        else
        {
            // Report was invoked from the CustVendCompensation form
            ledgerCustRecId = caller.parmLedgerCustRecId();
            ledgerVendRecId = caller.parmLedgerVendRecId();
        }

        // Update report parameters
        modifyQueryParameters('Cust', ledgerCustRecId);
        modifyQueryParameters('Vend', ledgerVendRecId);

        rdpContract.parmLedgerCustRecId(ledgerCustRecId);
        rdpContract.parmLedgerVendRecId(ledgerVendRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendCompensationReportController controller = new CustVendCompensationReportController();
        controller.parmReportName(ssrsReportStr(CustVendCompensation, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>