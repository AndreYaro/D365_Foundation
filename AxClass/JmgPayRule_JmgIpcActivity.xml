<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayRule_JmgIpcActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgPayRule_JmgIpcActivity</c> class represents the indirect activities pay rule.
/// </summary>
/// <remarks>
///    This class lets users delimit pay agreement lines by indirect activities.
/// </remarks>
class JmgPayRule_JmgIpcActivity extends JmgPayRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description of the indirect activities pay rule.
    /// </summary>
    /// <returns>
    ///    The description of the certificates pay rule.
    /// </returns>
    public JmgDescription description()
    {
        return "@SYS38378";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDesignTimeCustomDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the design time data source for the indirect activities pay rule.
    /// </summary>
    /// <returns>
    ///    An <c>ExpressionDataSource</c> object that contains the design time data source.
    /// </returns>
    /// <remarks>
    ///    The indirect activities pay rule adds a <c>JmgIpcCategoryId</c> field and a <c>JmgIpcActivityId</c>
    ///    field to the custom design data source.
    /// </remarks>
    protected ExpressionDataSource getDesignTimeCustomDataSource()
    {
        ExpressionDataSource ret;

        ret = super();
        this.addDesignTimeFieldToDataSource(ret, extendedtypestr(JmgIpcCategoryId));
        this.addDesignTimeFieldToDataSource(ret, extendedtypestr(JmgIpcActivityId));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJoinConditions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the expression with conditions for the Indirect activities pay rule.
    /// </summary>
    /// <returns>
    ///    The expression that has conditions for the Indirect activities pay rule.
    /// </returns>
    /// <remarks>
    ///    The Indirect activities pay rule adds two conditions: the <c>JmgIpcCategoryId</c> field equals the
    ///    <c>Query.Category</c> value, and the <c>JmgIpcActivityId</c> field equals the <c>Query.Activity</c>
    ///    value.
    /// </remarks>
    public Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionOrElement getJoinConditions()
    {
        Query q = this.getQuery();

        Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionProjection designTimeProjection =
            SysExpression::getDesignTimeProjectionModel(classstr(JmgPayRule_JmgIpcActivity), this.getDesignTimeCustomDataSources());

        Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionOrElement expressionDefinition =
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionOrElement::Create();

        Microsoft.Dynamics.AX.Framework.Expression.Model.Field jmgIpcCategoryField;
        Microsoft.Dynamics.AX.Framework.Expression.Model.Field transactionIpcCategoryField;
        Microsoft.Dynamics.AX.Framework.Expression.Model.Field jmgIpcActivityField;
        Microsoft.Dynamics.AX.Framework.Expression.Model.Field transactionIpcActivityField;

        Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionAndElement andElement =
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionAndElement::Create();

        jmgIpcCategoryField = designTimeProjection.GetField(q.dataSourceTable(tablenum(JmgIpcActivity)).name(), fieldstr(JmgIpcActivity, Category));
        transactionIpcCategoryField = designTimeProjection.GetField(#TransactionDataSourceId, extendedtypestr(JmgIpcCategoryId));

        jmgIpcActivityField = designTimeProjection.GetField(q.dataSourceTable(tablenum(JmgIpcActivity)).name(), fieldstr(JmgIpcActivity, Activity));
        transactionIpcActivityField = designTimeProjection.GetField(#TransactionDataSourceId, extendedtypestr(JmgIpcActivityId));

        andElement.AddDesignElement(
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionFieldStringElement::Create(
                jmgIpcCategoryField,
                Microsoft.Dynamics.AX.Framework.Expression.Model.StringOperator::Equals,
                transactionIpcCategoryField));

        andElement.AddDesignElement(
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionFieldStringElement::Create(
                jmgIpcActivityField,
                Microsoft.Dynamics.AX.Framework.Expression.Model.StringOperator::Equals,
                transactionIpcActivityField));

        expressionDefinition.AddAndElement(andElement);

        return expressionDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the <c>JmgPayRuleJmgIpcActivity</c> query.
    /// </summary>
    /// <returns>
    ///    The name of the <c>JmgPayRuleJmgIpcActivity</c> query.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(JmgPayRuleJmgIpcActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuntimeCustomDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the runtime custom time data source for the indirect activities pay rule.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    ///    The transaction where the values of the runtime fields are initialized.
    /// </param>
    /// <returns>
    ///    An <c>ExpressionDataSource</c> object that contains the run time data source for the indirect
    ///    activities pay rule.
    /// </returns>
    /// <remarks>
    ///    Adds two run time fields:
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             The <c>JmgIpcCategoryId</c> field that is initialized from the <c>JobRef</c> field of the
    ///             transaction.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>JmgIpcActivityId</c> field that is initialized from the <c>ActOprID</c> field of the
    ///             transaction.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    protected ExpressionDataSource getRuntimeCustomDataSource(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        ExpressionDataSource expressionDataSource;

        expressionDataSource = super(_jmgStampJournalTrans);
        this.addRunTimeFieldToDataSource(expressionDataSource, extendedtypestr(JmgIpcCategoryId), _jmgStampJournalTrans.JobRef);
        this.addRunTimeFieldToDataSource(expressionDataSource, extendedtypestr(JmgIpcActivityId), _jmgStampJournalTrans.ActOprID);
        return expressionDataSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>