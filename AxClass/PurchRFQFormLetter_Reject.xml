<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormLetter_Reject</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQFormLetter_Reject extends PurchRFQFormLetter implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    protected void chooseLines()
    {
        PurchRFQParmUpdate purchRFQParmUpdate = this.purchRFQParmUpdate();

        if (this.callerIsFormLetter()
            && this.parmCallerFormletter() is PurchRFQFormLetter_Accept)
        {
            // Post-Accept: Make default selection to be All in the business logic
            purchRFQParmUpdate.SpecQty = PurchRFQUpdate::All;
        }
        else
        {
            // Not post-Accept: Make default selection to be Marked in the business logic,
            purchRFQParmUpdate.SpecQty = PurchRFQUpdate::Marked;
        }

        this.purchRFQParmUpdate(purchRFQParmUpdate);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::RFQReject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postRequestForQuoteReject),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management document type for rejecting a request for quotes.
    /// </summary>
    /// <returns>
    ///    The print management document type for rejecting a request for quotes.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchRFQReject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    protected PurchRFQStatus purchRFQStatus()
    {
        return PurchRFQStatus::Rejected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    PurchRFQUpdateType purchRFQUpdateType()
    {
        return PurchRFQUpdateType::Rejected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer             version = conPeek(_packedClass,1);
        ParmId              parmId;
        PurchRFQParmUpdate  purchRFQParmUpdate;
        Printout            printout;
        NoYes               printFormletter;
        container           printerSettingsFormLetter;
        boolean             usePrintManagement;
        PurchRFQTable       purchRFQTable;
        container           datasourceRecordsPacked;

        #LOCALMACRO.ParmList_v3
            parmId,
            purchRFQParmUpdate,
            Printout,
            PrintFormletter,
            PrinterSettingsFormLetter,
            usePrintManagement,
            purchRFQTable,
            datasourceRecordsPacked
        #ENDMACRO

        switch (version)
        {
            case 3:
                [version, #ParmList_v3] = _packedClass;
                this.setNewContract(PurchRFQFormLetterRejectContract::construct());

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.purchRFQParmUpdate(purchRFQParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.usePrintManagement(usePrintManagement);
                this.purchRFQTable(purchRFQTable);
                break;

            default :
                return super(_packedClass);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuestionnaire</Name>
				<Source><![CDATA[
    public void validateQuestionnaire()
    {
        this.checkIfQuestionnaireComplete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQFormLetter_Reject construct(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postRequestForQuoteReject),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return new PurchRFQFormLetter_Reject(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS105876";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return PurchRFQFormLetter_Reject::description();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>