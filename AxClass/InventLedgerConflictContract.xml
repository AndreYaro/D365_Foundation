<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Handles the parameters for the inventory conflict report.
/// </summary>
[
DataContractAttribute,
SysOperationContractProcessingAttribute(classStr(InventLedgerConflictUIBuilder), SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract),
SysOperationGroupAttribute('MainAccount', "@SYS981", '2'),
SysOperationGroupAttribute('Excludes', "@SYS314042", '3'),
SysOperationGroupAttribute('Dimensions', "@SYS5951", '4')
]
public class InventLedgerConflictContract implements SysOperationValidatable
{
    InventCostDateCodeContract  inventCostDateCodeContract;
    boolean                     asteriskNote;

    DateCode                    dateCode;
    FromDate                    fromDate;
    ToDate                      toDate;
    MainAccountNum              filler1;
    NoYes                       excludePhysicalToLedger;
    NoYes                       excludeBlankDimensions;
    DimensionAttributeRecId     dimensionAttribute;
    Name                        dimensionAttributeName;
    RefRecId                    entityInstance;
    boolean                     includeBlankDimensions;
    DimensionValue              dimensionValue;
    Query                       query;
    container                   packedQuery;

    int                         mySessionId;
    guid                        reportId;
    utcdatetime                 reportDate;
    SRSPrintMediumType          srsPrintMediumType;
    container                   printSettings;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        dateCode,
        fromDate,
        toDate,
        filler1,
        excludePhysicalToLedger,
        excludeBlankDimensions,
        dimensionAttribute,
        dimensionAttributeName,
        entityInstance,
        dimensionValue,
        includeBlankDimensions,
        mySessionId,
        reportId,
        reportDate,
        packedQuery,
        srsPrintMediumType,
        printSettings
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSRSPrintSettings</Name>
				<Source><![CDATA[
    public container parmSRSPrintSettings(container _printSettings = printSettings)
    {
        printSettings = _printSettings;
        return printSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (query)
        {
            packedQuery = query.pack();
        }
        dateCode    = inventCostDateCodeContract.parmDateCode();
        fromDate    = inventCostDateCodeContract.parmFromDate();
        toDate      = inventCostDateCodeContract.parmToDate();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionAttribute</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('DimensionAttribute'),
    SysOperationDisplayOrderAttribute('1'),
    SysOperationGroupMemberAttribute('Dimensions')
    ]
    public DimensionAttributeRecId parmDimensionAttribute(DimensionAttributeRecId _dimensionAttribute = dimensionAttribute)
    {
        dimensionAttribute = _dimensionAttribute;

        return dimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionAttributeName</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('DimensionAttributeName')
    ]
    public Name parmDimensionAttributeName(Name _dimensionAttributeName = dimensionAttributeName)
    {
        dimensionAttributeName = _dimensionAttributeName;

        return dimensionAttributeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionValue</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('DimensionValue'),
    SysOperationDisplayOrderAttribute('2'),
    SysOperationGroupMemberAttribute('Dimensions')
    ]
    public DimensionValue parmDimensionValue(DimensionValue _dimensionValue = dimensionValue)
    {
        dimensionValue = _dimensionValue;

        return dimensionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityInstance</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('EntityInstance')
    ]
    public RefRecId parmEntityInstance(RefRecId _entityInstance = entityInstance)
    {
        entityInstance = _entityInstance;

        return entityInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeBlankDimensions</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ExcludeBlankDimensions'),
    SysOperationDisplayOrderAttribute('2'),
    SysOperationGroupMemberAttribute('Excludes'),
    SysOperationLabelAttribute(literalStr("@SYS332488"))
    ]
    public NoYes parmExcludeBlankDimensions(NoYes _excludeBlankDimensions = excludeBlankDimensions)
    {
        excludeBlankDimensions = _excludeBlankDimensions;

        return excludeBlankDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludePhysicalToLedger</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ExcludePhysicalToLedger'),
    SysOperationDisplayOrderAttribute('1'),
    SysOperationGroupMemberAttribute('Excludes'),
    SysOperationLabelAttribute(literalStr("@SYS314040"))
    ]
    public NoYes parmExcludePhysicalToLedger(NoYes _excludePhysicalToLedger = excludePhysicalToLedger)
    {
        excludePhysicalToLedger = _excludePhysicalToLedger;

        return excludePhysicalToLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeBlankDimensions</Name>
				<Source><![CDATA[
    public boolean parmIncludeBlankDimensions(boolean _includeBlankDimensions = includeBlankDimensions)
    {
        includeBlankDimensions = _includeBlankDimensions;

        return includeBlankDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostDateCodeContract</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('InventCostDateCodeContract'),
    SysOperationDisplayOrderAttribute('1')
    ]
    public InventCostDateCodeContract parmInventCostDateCodeContract(InventCostDateCodeContract _inventCostDateCodeContract = inventCostDateCodeContract)
    {
        inventCostDateCodeContract = _inventCostDateCodeContract;

        return inventCostDateCodeContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportCaption</Name>
				<Source><![CDATA[
    public str parmReportCaption()
    {
        return "@SYS314037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDate</Name>
				<Source><![CDATA[
    public utcdatetime parmReportDate(utcdatetime _reportDate = reportDate)
    {
        reportDate = _reportDate;

        return reportDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    public guid parmReportId(guid _reportId = reportId)
    {
        reportId = _reportId;

        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportIdString</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ReportId')
    ]
    public String50 parmReportIdString(String50 _reportId = guid2str(reportId))
    {
        reportId = str2guid(_reportId);

        return guid2str(reportId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    public str parmReportName()
    {
        return ssrsReportStr(InventLedgerConflict, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>SessionId</c> parameter.
    /// </summary>
    /// <param name="_sessionId">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>SessionId</c> parameter.
    /// </returns>
    [
    DataMemberAttribute('SessionId')
    ]
    public Integer parmSessionId(int _sessionId = mySessionId)
    {
        mySessionId = _sessionId;

        return mySessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSRSPrintMediumType</Name>
				<Source><![CDATA[
    public SRSPrintMediumType parmSRSPrintMediumType(SRSPrintMediumType _srsPrintMediumType = srsPrintMediumType)
    {
        srsPrintMediumType = _srsPrintMediumType;
        return srsPrintMediumType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = _packedClass;
                if (packedQuery)
                {
                    query = new Query(packedQuery);
                }
                inventCostDateCodeContract = InventCostDateCodeContract::construct();
                inventCostDateCodeContract.parmDateCode(dateCode);
                inventCostDateCodeContract.parmFromDate(fromDate);
                inventCostDateCodeContract.parmToDate(toDate);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates contract parameters.
    /// </summary>
    /// <returns>
    ///    true if the contract parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        isValid = inventCostDateCodeContract.validate();

        if (dimensionAttribute && dimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
        {
            isValid = checkFailed("@SYS332490");
        }

        if (inventCostDateCodeContract.parmDateCode())
        {
            if (!LedgerPeriodCode::checkExist(inventCostDateCodeContract.parmDateCode()))
            {
                isValid = false;
                inventCostDateCodeContract.parmDateCode('');
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventLedgerConflictContract construct()
    {
        return new InventLedgerConflictContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>