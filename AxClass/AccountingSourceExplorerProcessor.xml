<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingSourceExplorerProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Constructs the reference identities used to populate the <c>AccountingSourceExplorer</c> form.
/// </summary>
public class AccountingSourceExplorerProcessor
{
    AccountingSourceExplorerBalanceParameters   accountingSourceExplorerBalanceParameters;
    AccountingSourceExplorerTmp                 accountingSourceExplorerTmp;
    AccountingSourceExplorerIntercompanyTmp     accountingSourceExplorerIntercompanyTmp;
    AccountingSourceExplorerGeneralJournalAccountEntryTmp generalJournalAccountEntryTmp;
    UserConnection                              userConnection;
    boolean                                     isFiltered;
    DateCode                                    dateCode;
    date                                        startDate;
    date                                        endDate;
    MainAccountNum                              mainAccountNum;
    DimensionAttributeValueCombination          dimensionFocus;
    boolean                                     processUnProcessedDocuments;
    LedgerRecId                                 ledger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterByDimensionFocus</Name>
				<Source><![CDATA[
    private void filterByDimensionFocus(DimensionAttributeValueCombination _dimensionFocus)
    {
        select firstOnly RecId from generalJournalAccountEntryTmp;

        Query dimensionQuery = new Query(queryStr(AccountingSourceExplorerQuery));
        QueryBuildDataSource qbdsGeneralJournalEntry = dimensionQuery.dataSourceTable(tableNum(GeneralJournalEntry));

        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(
            SysQuery::range(
                accountingSourceExplorerBalanceParameters.parmStartDate(),
                accountingSourceExplorerBalanceParameters.parmEndDate()));

        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(SysQuery::value(ledger));

        QueryBuildDataSource qbdsGeneralJournalAccountEntry = dimensionQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        QueryBuildDataSource qbdsDimensionAttributeValueCombination = dimensionQuery.dataSourceTable(tableNum(DimensionAttributeValueCombination));
        qbdsDimensionAttributeValueCombination.joinMode(JoinMode::InnerJoin);

        DimensionAttributeLevelValue dimensionAttributeLevelValue;
        DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionAttribute dimensionAttribute;

        while select DimensionAttributeValueCombination, DimensionAttributeValueGroup from dimensionAttributeValueGroupCombination
            where dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _dimensionFocus.RecId
        join DimensionAttributeValue, DisplayValue from dimensionAttributeLevelValue
            where dimensionAttributeLevelValue.DimensionAttributeValueGroup == dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup
        join DimensionAttribute from dimensionAttributeValue
            where dimensionAttributeValue.RecId == dimensionAttributeLevelValue.DimensionAttributeValue
        {
            DimensionRefFieldName dimensionValueColumnName = DimensionAttribute::find(dimensionAttributeValue.DimensionAttribute).DimensionValueColumnName;
             
            QueryBuildRange qbr = qbdsDimensionAttributeValueCombination.addRange(fieldName2Id(tableNum(DimensionAttributeValueCombination), dimensionValueColumnName));
            qbr.value(dimensionAttributeLevelValue.DisplayValue);
        }

        dimensionQuery.clearAllFields();
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        Map fieldMapping = new Map(Types::String, Types::Container);
        fieldMapping.insert(
            fieldStr(AccountingSourceExplorerTmp, GeneralJournalAccountEntry),
            [qbdsGeneralJournalAccountEntry.uniqueId(), fieldStr(GeneralJournalAccountEntry, RecId)]);
        fieldMapping.insert(
            fieldStr(AccountingSourceExplorerTmp, LedgerDimension),
            [qbdsGeneralJournalAccountEntry.uniqueId(), fieldStr(GeneralJournalAccountEntry, LedgerDimension)]);

        Query::insert_recordset(generalJournalAccountEntryTmp, fieldMapping, dimensionQuery);

        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        update_recordset generalJournalAccountEntryTmp
        setting Voucher = subledgerVoucherGeneralJournalEntry.Voucher
        join generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == generalJournalAccountEntryTmp.GeneralJournalAccountEntry
        join generalJournalEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByReportingDimensions</Name>
				<Source><![CDATA[
    private void filterByReportingDimensions(GeneralLedgerBalanceReportingDimension _reportingDimensions)
    {
        select firstOnly RecId from generalJournalAccountEntryTmp;

        Query dimensionQuery = new Query(queryStr(AccountingSourceExplorerQuery));
        QueryBuildDataSource qbdsGeneralJournalEntry = dimensionQuery.dataSourceTable(tableNum(GeneralJournalEntry));

        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(
            SysQuery::range(
                accountingSourceExplorerBalanceParameters.parmStartDate(),
                accountingSourceExplorerBalanceParameters.parmEndDate()));

        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(SysQuery::value(ledger));

        QueryBuildDataSource qbdsGeneralJournalAccountEntry = dimensionQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));

        GeneralLedgerBalanceReportingDimensionDataSource::addLedgerDimensionReportingDimensionFilter(
            qbdsGeneralJournalAccountEntry,
            fieldNum(GeneralJournalAccountEntry, LedgerDimension),
            _reportingDimensions);

        dimensionQuery.clearAllFields();
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        Map fieldMapping = new Map(Types::String, Types::Container);
        fieldMapping.insert(
            fieldStr(AccountingSourceExplorerTmp, GeneralJournalAccountEntry),
            [qbdsGeneralJournalAccountEntry.uniqueId(), fieldStr(GeneralJournalAccountEntry, RecId)]);
        fieldMapping.insert(
            fieldStr(AccountingSourceExplorerTmp, LedgerDimension),
            [qbdsGeneralJournalAccountEntry.uniqueId(), fieldStr(GeneralJournalAccountEntry, LedgerDimension)]);

        Query::insert_recordset(generalJournalAccountEntryTmp, fieldMapping, dimensionQuery);

        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        update_recordset generalJournalAccountEntryTmp
        setting Voucher = subledgerVoucherGeneralJournalEntry.Voucher
        join generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == generalJournalAccountEntryTmp.GeneralJournalAccountEntry
        join generalJournalEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByMainAccount</Name>
				<Source><![CDATA[
    private void filterByMainAccount()
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        MainAccountLedgerDimensionView      mainAccountLedgerDimensionView;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        generalJournalEntry.skipPostLoad(true);

        insert_recordset generalJournalAccountEntryTmp (GeneralJournalAccountEntry, LedgerDimension, Voucher)
        select RecId, LedgerDimension from generalJournalAccountEntry
        join generalJournalEntry
            where generalJournalEntry.AccountingDate >= accountingSourceExplorerBalanceParameters.parmStartDate()
               && generalJournalEntry.AccountingDate <= accountingSourceExplorerBalanceParameters.parmEndDate()
               && generalJournalEntry.Ledger == ledger
               && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId
               && subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join mainAccountLedgerDimensionView
            where mainAccountLedgerDimensionView.MainAccount >= accountingSourceExplorerBalanceParameters.parmMainAccountNum()
               && mainAccountLedgerDimensionView.MainAccount <= accountingSourceExplorerBalanceParameters.parmMainAccountNumTo()
               && mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByMainAccountAndVoucher</Name>
				<Source><![CDATA[
    private void filterByMainAccountAndVoucher()
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        MainAccountLedgerDimensionView      mainAccountLedgerDimensionView;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        generalJournalEntry.skipPostLoad(true);

        insert_recordset generalJournalAccountEntryTmp (GeneralJournalAccountEntry, LedgerDimension, Voucher)
        select RecId, LedgerDimension from generalJournalAccountEntry
        join generalJournalEntry
            where generalJournalEntry.AccountingDate >= accountingSourceExplorerBalanceParameters.parmStartDate()
               && generalJournalEntry.AccountingDate <= accountingSourceExplorerBalanceParameters.parmEndDate()
               && generalJournalEntry.Ledger == ledger
               && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId
               && subledgerVoucherGeneralJournalEntry.Voucher >= accountingSourceExplorerBalanceParameters.parmVoucherFrom()
               && subledgerVoucherGeneralJournalEntry.Voucher <= accountingSourceExplorerBalanceParameters.parmVoucherTo()
               && subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join mainAccountLedgerDimensionView
            where mainAccountLedgerDimensionView.MainAccount >= accountingSourceExplorerBalanceParameters.parmMainAccountNum()
               && mainAccountLedgerDimensionView.MainAccount <= accountingSourceExplorerBalanceParameters.parmMainAccountNumTo()
               && mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByVoucher</Name>
				<Source><![CDATA[
    private void filterByVoucher()
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        generalJournalEntry.skipPostLoad(true);

        insert_recordset generalJournalAccountEntryTmp (GeneralJournalAccountEntry, LedgerDimension, Voucher)
        select RecId, LedgerDimension from generalJournalAccountEntry
        join generalJournalEntry
            where generalJournalEntry.AccountingDate >= accountingSourceExplorerBalanceParameters.parmStartDate()
               && generalJournalEntry.AccountingDate <= accountingSourceExplorerBalanceParameters.parmEndDate()
               && generalJournalEntry.Ledger == ledger
               && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId
               && subledgerVoucherGeneralJournalEntry.Voucher >= accountingSourceExplorerBalanceParameters.parmVoucherFrom()
               && subledgerVoucherGeneralJournalEntry.Voucher <= accountingSourceExplorerBalanceParameters.parmVoucherTo()
               && subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterBySysQuery</Name>
				<Source><![CDATA[
    private void filterBySysQuery()
    {
        generalJournalAccountEntryTmp = accountingSourceExplorerBalanceParameters.parmSysQueryGeneralJournalAccountEntryTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterEntries</Name>
				<Source><![CDATA[
    protected void filterEntries()
    {
        if (accountingSourceExplorerBalanceParameters.parmDimensionFocus())
        {
            isFiltered = true;
            this.filterByDimensionFocus(accountingSourceExplorerBalanceParameters.parmDimensionFocus());
            accountingSourceExplorerBalanceParameters.parmMainAccountNum('');
        }
        else if (Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()) && accountingSourceExplorerBalanceParameters.parmReportingDimensions())
        {
            isFiltered = true;
            this.filterByReportingDimensions(accountingSourceExplorerBalanceParameters.parmReportingDimensions());
            accountingSourceExplorerBalanceParameters.parmMainAccountNum('');
        }
        else if (accountingSourceExplorerBalanceParameters.parmMainAccountNum() && accountingSourceExplorerBalanceParameters.parmMainAccountNumTo()
            && accountingSourceExplorerBalanceParameters.parmVoucherFrom() && accountingSourceExplorerBalanceParameters.parmVoucherTo())
        {
            isFiltered = true;
            this.filterByMainAccountAndVoucher();
        }
        else if (accountingSourceExplorerBalanceParameters.parmMainAccountNum() && accountingSourceExplorerBalanceParameters.parmMainAccountNumTo())
        {
            isFiltered = true;
            this.filterByMainAccount();
        }
        else if (accountingSourceExplorerBalanceParameters.parmVoucherFrom() && accountingSourceExplorerBalanceParameters.parmVoucherTo())
        {
            isFiltered = true;
            this.filterByVoucher();
        }
        else if (FeatureStateProvider::isFeatureEnabled(AccountingSourceExplorerSysQueryFilterFeature::instance())
            && accountingSourceExplorerBalanceParameters.parmFilterUsingSysQuery())
        {
            isFiltered = true;
            this.filterBySysQuery();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalEntriesFiltered</Name>
				<Source><![CDATA[
    protected void addGeneralJournalEntriesFiltered()
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        MainAccount                         mainAccount;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        insert_recordset accountingSourceExplorerTmp(
            JournalNumber,
            AccountingDate,
            DocumentNumber,
            DocumentDate,
            JournalCategory,
            SubledgerVoucher,
            PostingType,
            Text,
            LedgerAccount,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            TransactionCurrencyAmount,
            TransactionCurrencyCode,
            LedgerDimension,
            GeneralJournalAccountEntry,
            IsCorrection,
            Quantity,
            MainAccountId,
            MainAccountName)
        select
            JournalNumber,
            AccountingDate,
            DocumentNumber,
            DocumentDate,
            JournalCategory
        from generalJournalEntry
            where generalJournalEntry.AccountingDate >= accountingSourceExplorerBalanceParameters.parmStartDate()
               && generalJournalEntry.AccountingDate <= accountingSourceExplorerBalanceParameters.parmEndDate()
               && generalJournalEntry.Ledger == ledger
               && generalJournalEntry.TransferId == 0
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join PostingType, Text, LedgerAccount, AccountingCurrencyAmount, ReportingCurrencyAmount, TransactionCurrencyAmount, TransactionCurrencyCode, LedgerDimension, RecId, IsCorrection, Quantity from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == generalJournalAccountEntry.MainAccount
        join generalJournalAccountEntryTmp
            where generalJournalAccountEntry.LedgerDimension == generalJournalAccountEntryTmp.LedgerDimension &&
                generalJournalAccountEntry.RecId == generalJournalAccountEntryTmp.GeneralJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalEntriesUnfiltered</Name>
				<Source><![CDATA[
    protected void addGeneralJournalEntriesUnfiltered()
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        MainAccount                         mainAccount;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        insert_recordset accountingSourceExplorerTmp(
            JournalNumber,
            AccountingDate,
            DocumentNumber,
            DocumentDate,
            JournalCategory,
            SubledgerVoucher,
            PostingType,
            Text,
            LedgerAccount,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            TransactionCurrencyAmount,
            TransactionCurrencyCode,
            LedgerDimension,
            GeneralJournalAccountEntry,
            IsCorrection,
            Quantity,
            MainAccountId,
            MainAccountName)
        select
            JournalNumber,
            AccountingDate,
            DocumentNumber,
            DocumentDate,
            JournalCategory
        from generalJournalEntry
            where generalJournalEntry.AccountingDate >= accountingSourceExplorerBalanceParameters.parmStartDate()
               && generalJournalEntry.AccountingDate <= accountingSourceExplorerBalanceParameters.parmEndDate()
               && generalJournalEntry.Ledger == ledger
               && generalJournalEntry.TransferId == 0
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join PostingType, Text, LedgerAccount, AccountingCurrencyAmount, ReportingCurrencyAmount, TransactionCurrencyAmount, TransactionCurrencyCode, LedgerDimension, RecId, IsCorrection , Quantity from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == generalJournalAccountEntry.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSourceDocJournalEntryFiltered</Name>
				<Source><![CDATA[
    protected void addSourceDocJournalEntryFiltered()
    {
        GeneralJournalEntry                         generalJournalEntry;
        SubledgerJournalAccountEntry                subledgerJournalAccountEntry;
        SubledgerJournalEntry                       subledgerJournalEntry;
        AccountingEvent                             accountingEvent;
        SourceDocumentHeader                        sourceDocumentHeader;
        SubledgerJournalAccountEntryDistribution    subledgerJournalAccountEntryDistribution;
        MainAccount                                 mainAccount;
        SubledgerVoucherGeneralJournalEntry         subledgerVoucherGeneralJournalEntry;
        DimensionAttributeValueCombination          davc;
        AccountingDistribution                      accountingDistribution;

        insert_recordset accountingSourceExplorerTmp(
            JournalNumber,
            DocumentNumber,
            DocumentDate,
            SubledgerVoucher,
            DestinationCompany,
            Text,
            AccountingDate,
            PostingType,
            TransactionCurrencyCode,
            LedgerDimension,
            GeneralJournalAccountEntry,
            IsCorrection,
            Side,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            TransactionCurrencyAmount,
            SubledgerJournalAccountEntryRecId,
            TypeEnumName,
            SourceDocumentRecId,
            SourceRelationType,
            LedgerAccount,
            MainAccountId,
            MainAccountName)
        select
            JournalNumber,
            DocumentNumber,
            DocumentDate,
            Voucher,
            VoucherDataAreaId,
            TransTxt
        from subledgerJournalEntry
            where subledgerJournalEntry.ledger == ledger &&
                subledgerJournalEntry.Status == SubledgerJournalEntryStatus::Transferred
        join AccountingDate from accountingEvent
            where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent &&
                accountingEvent.AccountingDate >= accountingSourceExplorerBalanceParameters.parmStartDate() &&
                accountingEvent.AccountingDate <= accountingSourceExplorerBalanceParameters.parmEndDate()
        join PostingType, TransactionCurrency, LedgerDimension, GeneralJournalAccountEntry, IsCorrection, Side, AccountingCurrencyAmount,
            ReportingCurrencyAmount, TransactionCurrencyAmount, RecId from subledgerJournalAccountEntry
            where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId &&
                subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer
        join TypeEnumName, RecId, SourceRelationType from sourceDocumentHeader
            where sourceDocumentHeader.RecId == accountingEvent.SourceDocumentHeader
        join DisplayValue from davc
            where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == davc.MainAccount
        exists join generalJournalAccountEntryTmp
            where generalJournalAccountEntryTmp.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension
              && generalJournalAccountEntryTmp.Voucher == subledgerJournalEntry.Voucher;

        //Populate the journal category from GL entry
        update_recordset accountingSourceExplorerTmp
        setting JournalCategory = generalJournalEntry.JournalCategory
        join subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.AccountingDate == accountingSourceExplorerTmp.AccountingDate &&
                subledgerVoucherGeneralJournalEntry.Voucher == accountingSourceExplorerTmp.SubledgerVoucher &&
                subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == accountingSourceExplorerTmp.DestinationCompany
        join JournalCategory from generalJournalEntry
            where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;

        //Get the source document details
        update_recordset accountingSourceExplorerTmp
        setting MonetaryAmount = accountingDistribution.MonetaryAmount,
            AccountingDistributionRecId = accountingDistribution.RecId
        join subledgerJournalAccountEntryDistribution
            where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == accountingSourceExplorerTmp.SubledgerJournalAccountEntryRecid
        join MonetaryAmount, RecId from accountingDistribution
            where accountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution &&
                accountingDistribution.SourceDocumentHeader == accountingSourceExplorerTmp.SourceDocumentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSourceDocJournalEntryUnfiltered</Name>
				<Source><![CDATA[
    protected void addSourceDocJournalEntryUnfiltered()
    {
        GeneralJournalEntry                         generalJournalEntry;
        SubledgerJournalAccountEntry                subledgerJournalAccountEntry;
        SubledgerJournalEntry                       subledgerJournalEntry;
        AccountingEvent                             accountingEvent;
        SourceDocumentHeader                        sourceDocumentHeader;
        SubledgerJournalAccountEntryDistribution    subledgerJournalAccountEntryDistribution;
        MainAccount                                 mainAccount;
        SubledgerVoucherGeneralJournalEntry         subledgerVoucherGeneralJournalEntry;
        DimensionAttributeValueCombination          davc;
        AccountingDistribution                      accountingDistribution;

        insert_recordset accountingSourceExplorerTmp(
            JournalNumber,
            DocumentNumber,
            DocumentDate,
            SubledgerVoucher,
            DestinationCompany,
            Text,
            AccountingDate,
            PostingType,
            TransactionCurrencyCode,
            LedgerDimension,
            GeneralJournalAccountEntry,
            IsCorrection,
            Side,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            TransactionCurrencyAmount,
            SubledgerJournalAccountEntryRecId,
            TypeEnumName,
            SourceDocumentRecId,
            SourceRelationType,
            LedgerAccount,
            MainAccountId,
            MainAccountName)
        select
            JournalNumber,
            DocumentNumber,
            DocumentDate,
            Voucher,
            VoucherDataAreaId,
            TransTxt
        from subledgerJournalEntry
            where subledgerJournalEntry.ledger == ledger &&
                subledgerJournalEntry.Status == SubledgerJournalEntryStatus::Transferred
        join AccountingDate from accountingEvent
            where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent &&
                accountingEvent.AccountingDate >= accountingSourceExplorerBalanceParameters.parmStartDate() &&
                accountingEvent.AccountingDate <= accountingSourceExplorerBalanceParameters.parmEndDate()
        join PostingType, TransactionCurrency, LedgerDimension, GeneralJournalAccountEntry, IsCorrection, Side, AccountingCurrencyAmount,
            ReportingCurrencyAmount, TransactionCurrencyAmount, RecId from subledgerJournalAccountEntry
            where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId &&
                subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer
        join TypeEnumName, RecId, SourceRelationType from sourceDocumentHeader
            where sourceDocumentHeader.RecId == accountingEvent.SourceDocumentHeader
        join DisplayValue from davc
            where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == davc.MainAccount;

        //Populate the journal category from GL entry
        update_recordset accountingSourceExplorerTmp
        setting JournalCategory = generalJournalEntry.JournalCategory
        join subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.AccountingDate == accountingSourceExplorerTmp.AccountingDate &&
                subledgerVoucherGeneralJournalEntry.Voucher == accountingSourceExplorerTmp.SubledgerVoucher &&
                subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == accountingSourceExplorerTmp.DestinationCompany
        join JournalCategory from generalJournalEntry
            where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;

        //Get the source document details 
        update_recordset accountingSourceExplorerTmp
        setting MonetaryAmount = accountingDistribution.MonetaryAmount,
            AccountingDistributionRecId = accountingDistribution.RecId
        join subledgerJournalAccountEntryDistribution
            where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == accountingSourceExplorerTmp.SubledgerJournalAccountEntryRecid
        join MonetaryAmount, RecId from accountingDistribution
            where accountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution &&
                accountingDistribution.SourceDocumentHeader == accountingSourceExplorerTmp.SourceDocumentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingSourceExplorerParms</Name>
				<Source><![CDATA[
    public AccountingSourceExplorerBalanceParameters parmAccountingSourceExplorerParms(
        AccountingSourceExplorerBalanceParameters _accountingSourceExplorerBalanceParameters)
    {
        accountingSourceExplorerBalanceParameters = _accountingSourceExplorerBalanceParameters;
        return accountingSourceExplorerBalanceParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingSourceExplorerTmp</Name>
				<Source><![CDATA[
    public AccountingSourceExplorerTmp parmAccountingSourceExplorerTmp(
        AccountingSourceExplorerTmp _accountingSourceExplorerTmp = accountingSourceExplorerTmp)
    {
        accountingSourceExplorerTmp.linkPhysicalTableInstance(_accountingSourceExplorerTmp);
        return accountingSourceExplorerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAccountingSourceExplorer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>AccountingSourceExplorerTmp</c> table for the grid on the accounting source explorer form.
    /// </summary>
    /// <param name = "_accountingSourceExplorerTmp">
    /// The instance of the <c>AccountingSourceExplorerTmp</c> table to populate.
    /// </param>
    /// <param name = "_accountingSourceExplorerBalanceParameters">
    /// The balance parameters used to filter the results of the accounting source explorer form.
    /// </param>
    protected void populateAccountingSourceExplorer(
        AccountingSourceExplorerTmp                 _accountingSourceExplorerTmp,
        AccountingSourceExplorerBalanceParameters   _accountingSourceExplorerBalanceParameters)
    {
        AccountingSourceExplorerProcessor           accSourceExplorerProcessor;

        accSourceExplorerProcessor = new AccountingSourceExplorerProcessor();
        accSourceExplorerProcessor.parmAccountingSourceExplorerParms(_accountingSourceExplorerBalanceParameters);
        accSourceExplorerProcessor.parmAccountingSourceExplorerTmp(_accountingSourceExplorerTmp);
        accSourceExplorerProcessor.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDataUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes post update logic at the end of the <c>run</c> method.
    /// </summary>
    [Hookable(true)]
    private void postDataUpdate()
    {
        this.updateTransactionCurrencyAmountSign();
        this.updateTypeEnumName();
        this.updateParty();
        this.updateDocumentInfoIfEmpty();
        this.updateTranslatedMainAccountName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTranslatedMainAccountName</Name>
				<Source><![CDATA[
    protected void updateTranslatedMainAccountName()
    {
        MainAccountTranslation mainAccountTranslation;
        MainAccount mainAccount;
        Ledger ledgerTable = Ledger::find(ledger);

        select firstonly mainAccountTranslation
            where mainAccountTranslation.LanguageId == currentUserLanguage();

        if (mainAccountTranslation.RecId != 0)
        {
            update_recordset accountingSourceExplorerTmp
            setting MainAccountName = mainAccountTranslation.Name
            join MainAccount
                where mainAccount.MainAccountId == accountingSourceExplorerTmp.MainAccountId
            join Name from mainAccountTranslation
                where mainAccountTranslation.MainAccount == mainAccount.RecId &&
                    mainAccountTranslation.LanguageId == currentUserLanguage() &&
                    ledgerTable.ChartOfAccounts == mainAccount.LedgerChartOfAccounts;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentInfoIfEmpty</Name>
				<Source><![CDATA[
    private void updateDocumentInfoIfEmpty()
    {
        this.updateDocumentInfoFromVendTrans();
        this.updateDocumentInfoFromCustTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentInfoFromVendTrans</Name>
				<Source><![CDATA[
    protected void updateDocumentInfoFromVendTrans()
    {
        VendTrans vendTrans;

        update_recordSet accountingSourceExplorerTmp
            setting DocumentNumber = vendTrans.Invoice
            where accountingSourceExplorerTmp.DocumentNumber == ''
        join Voucher, TransDate, Invoice, DocumentDate from vendTrans
            where vendTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
               && vendTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
               && vendTrans.Invoice != '';

        update_recordSet accountingSourceExplorerTmp
            setting DocumentDate = vendTrans.DocumentDate
            where accountingSourceExplorerTmp.DocumentDate == dateNull()
        join Voucher, TransDate, Invoice, DocumentDate from vendTrans
            where vendTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
               && vendTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
               && vendTrans.Invoice != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentInfoFromCustTrans</Name>
				<Source><![CDATA[
    protected void updateDocumentInfoFromCustTrans()
    {
        CustTrans custTrans;

        update_recordSet accountingSourceExplorerTmp
            setting DocumentNumber = custTrans.Invoice
            where accountingSourceExplorerTmp.DocumentNumber == ''
        join Voucher, TransDate, Invoice, DocumentDate from custTrans
            where custTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
               && custTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
               && custTrans.Invoice != '';

        update_recordSet accountingSourceExplorerTmp
            setting DocumentDate = custTrans.DocumentDate
            where accountingSourceExplorerTmp.DocumentDate == dateNull()
        join Voucher, TransDate, Invoice, DocumentDate from custTrans
            where custTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
               && custTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
               && custTrans.Invoice != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGeneralJournalEntries</Name>
				<Source><![CDATA[
    private void processGeneralJournalEntries()
    {
        if (isFiltered)
        {
            this.addGeneralJournalEntriesFiltered();
        }
        else
        {
            this.addGeneralJournalEntriesUnfiltered();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReferenceIdentityEntries</Name>
				<Source><![CDATA[
    protected void processReferenceIdentityEntries()
    {
        this.updateFromSDRIHeader();
        this.updateNonProjectFromSDRILines();
        this.updateProjectFromSDRILines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSubledgerJournalEntries</Name>
				<Source><![CDATA[
    private void processSubledgerJournalEntries()
    {
        if (isFiltered)
        {
            this.addSourceDocJournalEntryFiltered();
        }
        else
        {
            this.addSourceDocJournalEntryUnfiltered();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingSourceExplorerTmpRecordCount</Name>
				<Source><![CDATA[
    private str getAccountingSourceExplorerTmpRecordCount()
    {
        select count(RecId) from accountingSourceExplorerTmp;

        return int642Str(accountingSourceExplorerTmp.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForAccountingSourceExplorerRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForAccountingSourceExplorerRun()
    {
        var accSourceExplorerLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(AccountingSourceExplorerProcessor));
        var accSourceExplorerActivity = SysInstrumentationActivity::construct(
            SourceDocumentInstrumentationConstants::AccountingSourceExplorerRun,
            SourceDocumentInstrumentationConstants::InstrumentationNameSpace);
        SysInstrumentationActivityContext activityContext = accSourceExplorerLogger.activityContextWithCustomProperties(accSourceExplorerActivity);

        activityContext.addCustomProperty(
            SourceDocumentInstrumentationConstants::StartDate,
            date2Str(accountingSourceExplorerBalanceParameters.parmStartDate(),
            321,
            DateDay::Digits2,
            DateSeparator::Hyphen,
            DateMonth::Digits2,
            DateSeparator::Hyphen,
            DateYear::Digits4));

        activityContext.addCustomProperty(
            SourceDocumentInstrumentationConstants::EndDate,
            date2Str(accountingSourceExplorerBalanceParameters.parmEndDate(),
            321,
            DateDay::Digits2,
            DateSeparator::Hyphen,
            DateMonth::Digits2,
            DateSeparator::Hyphen,
            DateYear::Digits4));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the process.
    /// </summary>
    protected void run()
    {
        using(SysInstrumentationActivityContext activityContext = this.getActivityContextForAccountingSourceExplorerRun())
        {
            int64 startTime, curTime = 0;
            isFiltered = false;

            str aseTmpRecordCountPreRun = this.getAccountingSourceExplorerTmpRecordCount();

            var passedLedger = accountingSourceExplorerBalanceParameters.parmLedger();
            ledger = passedLedger ==  0 ? Ledger::current() : passedLedger;
   
            if (accountingSourceExplorerBalanceParameters.parmProcessPendingReferenceIdentities())
            {
                startTime = activityContext.getElapsedMilliseconds();
                AccountingSourceExplorerProcessor::processPendingReferenceIdentities(
                    accountingSourceExplorerBalanceParameters.parmStartDate(),
                    accountingSourceExplorerBalanceParameters.parmEndDate());
                curTime = activityContext.getElapsedMilliseconds();
                activityContext.addCustomProperty(
                    SourceDocumentInstrumentationConstants::RuntimeForProcessPendingReferenceIdentities,
                    int642Str(curTime-startTime));
            }

            startTime = activityContext.getElapsedMilliseconds();
            this.filterEntries();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::RuntimeForFilterEntries,
                int642Str(curTime-startTime));
            str aseTmpRecordCountPostFilterEntries = this.getAccountingSourceExplorerTmpRecordCount();

            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::isUsingSysQueryAdvancedFilter,
                any2Str(accountingSourceExplorerBalanceParameters.parmFilterUsingSysQuery()));

            startTime = activityContext.getElapsedMilliseconds();
            this.processGeneralJournalEntries();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::RuntimeForProcessGeneralJournalEntires,
                int642Str(curTime-startTime));
            str aseTmpRecordCountPostGeneralJournalEntries = this.getAccountingSourceExplorerTmpRecordCount();

            startTime = activityContext.getElapsedMilliseconds();
            this.updateProjIdForProjectLinkedEntries();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::RuntimeForUpdateProjIdForProjectLinkedEntries,
                int642Str(curTime-startTime));
            str aseTmpRecordCountPostProjectLinkedEntries = this.getAccountingSourceExplorerTmpRecordCount();

            startTime = activityContext.getElapsedMilliseconds();
            this.processSubledgerJournalEntries();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::RuntimeForProcessSubledgerJournalEntries,
                int642Str(curTime-startTime));
            str aseTmpRecordCountPostSubledgerJournalEntries = this.getAccountingSourceExplorerTmpRecordCount();
            
            str aseTmpRecordCountPostRun = this.getAccountingSourceExplorerTmpRecordCount();

            startTime = activityContext.getElapsedMilliseconds();
            this.processReferenceIdentityEntries();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::RuntimeForProcessReferenceIdentityEntries,
                int642Str(curTime-startTime));

            startTime = activityContext.getElapsedMilliseconds();
            this.updateSummaryMainFocusDescriptions();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::RuntimeForUpdateSummaryMainFocusDescriptions,
                int642Str(curTime-startTime));

            startTime = activityContext.getElapsedMilliseconds();
            this.postDataUpdate();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::RuntimeForPostDataUpdate,
                int642Str(curTime-startTime));

            AccountingSourceExplorerLoggerHelper accountingSourceExplorerLoggerHelper = new AccountingSourceExplorerLoggerHelper();
            accountingSourceExplorerLoggerHelper.logASETmpTableCounts(
                activityContext,
                aseTmpRecordCountPreRun,
                aseTmpRecordCountPostFilterEntries,
                aseTmpRecordCountPostGeneralJournalEntries,
                aseTmpRecordCountPostProjectLinkedEntries,
                aseTmpRecordCountPostSubledgerJournalEntries,
                aseTmpRecordCountPostRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromSDRIHeader</Name>
				<Source><![CDATA[
    private void updateFromSDRIHeader()
    {
        AccountingDistribution                      accountingDistribution;
        SourceDocumentAcctEventReferenceIdentity    referenceHeader;

        update_recordSet accountingSourceExplorerTmp
        setting PartyNumber = referenceHeader.PartyNumber,
            PartyName = referenceHeader.PartyName,
            DocumentText = referenceHeader.DocumentText,
            DocumentDescription = referenceHeader.DocumentDescription
        join referenceHeader
            where referenceHeader.SourceDocumentHeader == accountingSourceExplorerTmp.SourceDocumentRecId;

        update_recordSet accountingSourceExplorerTmp
        setting DocumentNumber = referenceHeader.DocumentNumber
        where accountingSourceExplorerTmp.DocumentNumber == ''
        join referenceHeader
            where referenceHeader.SourceDocumentHeader == accountingSourceExplorerTmp.SourceDocumentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNonProjectFromSDRILines</Name>
				<Source><![CDATA[
    private void updateNonProjectFromSDRILines()
    {
        AccountingDistribution                      accountingDistribution;
        SourceDocumentAcctEventReferenceIdentity    referenceHeader;
        SourceDocumentLineReferenceIdentity         referenceLine;
        ProjectAccountingDistribution               projectAccountingDistribution;

        update_recordSet accountingSourceExplorerTmp
        setting ProductNumber = referenceLine.ProductNumber,
            LineDocumentReference = referenceLine.LineDocumentReference,
            LineNumber = referenceLine.LineNumber,
            LineDate = referenceLine.LineDate,
            Location = referenceLine.Location,
            Quantity = referenceLine.Quantity,
            Unit = referenceLine.Unit,
            LineText = referenceLine.LineText,
            IsSDRILine = NoYes::Yes,
            LineDescription = referenceLine.LineDescription
        join referenceHeader
            where referenceHeader.SourceDocumentHeader == accountingSourceExplorerTmp.SourceDocumentRecId
        join accountingDistribution
            where accountingSourceExplorerTmp.AccountingDistributionRecId == accountingDistribution.RecId
                && referenceHeader.AccountingEvent == accountingDistribution.AccountingEvent
        join referenceLine
            where referenceLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
               && referenceLine.SourceDocumentAcctEventReferenceIdentity == referenceHeader.RecId
        notExists join projectAccountingDistribution
            where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectFromSDRILines</Name>
				<Source><![CDATA[
    private void updateProjectFromSDRILines()
    {
        AccountingDistribution                      accountingDistribution;
        SourceDocumentAcctEventReferenceIdentity    referenceHeader;
        SourceDocumentLineReferenceIdentity         referenceLine;
        ProjectAccountingDistribution               projectAccountingDistribution;
        ProjTable                                   projTable;
        smmActivities                               salesMarketingManagementActivites;
        ProjCategory                                projCategory;
        ProjLineProperty                            projLineProperty;

        var passedLedger = accountingSourceExplorerBalanceParameters.parmLedger();
        var company = passedLedger == 0 ? curext() : CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(passedLedger));

        changecompany(company)
        {
            update_recordSet accountingSourceExplorerTmp
            setting ProductNumber = referenceLine.ProductNumber,
                LineDocumentReference = referenceLine.LineDocumentReference,
                LineNumber = referenceLine.LineNumber,
                LineDate = referenceLine.LineDate,
                Location = referenceLine.Location,
                Quantity = referenceLine.Quantity,
                Unit = referenceLine.Unit,
                LineText = referenceLine.LineText,
                ProjectId = projTable.ProjId,
                ProjectActivityNumber = salesMarketingManagementActivites.ActivityNumber,
                ProjectCategoryId = projCategory.Name,
                ProjectLinePropertyId = projLineProperty.LinePropertyId,
                IsSDRILine = NoYes::Yes,
                LineDescription = referenceLine.LineDescription
            join referenceHeader
                where referenceHeader.SourceDocumentHeader == accountingSourceExplorerTmp.SourceDocumentRecId
            join accountingDistribution
                where accountingSourceExplorerTmp.AccountingDistributionRecId == accountingDistribution.RecId
                    && referenceHeader.AccountingEvent == accountingDistribution.AccountingEvent
            join referenceLine
                where referenceLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                   && referenceLine.SourceDocumentAcctEventReferenceIdentity == referenceHeader.RecId
            join projectAccountingDistribution
                where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
            outer join projTable
                where ProjTable.RecId == projectAccountingDistribution.ProjTable
            outer join salesMarketingManagementActivites
                where salesMarketingManagementActivites.RecId == projectAccountingDistribution.smmActivities
            outer join projCategory
                where projCategory.RecId == projectAccountingDistribution.ProjCategory
            outer join projLineProperty
                where projLineProperty.RecId == projectAccountingDistribution.ProjLineProperty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSummaryMainFocusDescriptions</Name>
				<Source><![CDATA[
    private void updateSummaryMainFocusDescriptions()
    {
        DimensionFocusNameTmp        dimNameTmpDesc;
        DimensionHierarchy           primaryDimensionSet;
        GeneralJournalEntry          generalJournalEntry;
        GeneralJournalAccountEntry   generalJournalAccountEntry;

        primaryDimensionSet = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, accountingSourceExplorerBalanceParameters.parmDimensionHierarchy().Name);

        insert_recordset dimNameTmpDesc (LedgerDimension)
            select LedgerDimension from accountingSourceExplorerTmp
                group by accountingSourceExplorerTmp.LedgerDimension;

        DimensionFocusNameTmp::generateFocusDescriptions(dimNameTmpDesc, primaryDimensionSet.Name, new Connection());

        // Update accountingSourceExplorerTmp with the main focus descriptions
        update_recordset accountingSourceExplorerTmp
        setting DimensionValues[1] = dimNameTmpDesc.DimValue1,
            DimensionValues[2] = dimNameTmpDesc.DimValue2,
            DimensionValues[3] = dimNameTmpDesc.DimValue3,
            DimensionValues[4] = dimNameTmpDesc.DimValue4,
            DimensionValues[5] = dimNameTmpDesc.DimValue5,
            DimensionValues[6] = dimNameTmpDesc.DimValue6,
            DimensionValues[7] = dimNameTmpDesc.DimValue7,
            DimensionValues[8] = dimNameTmpDesc.DimValue8,
            DimensionValues[9] = dimNameTmpDesc.DimValue9,
            DimensionValues[10] = dimNameTmpDesc.DimValue10,
            DimensionValues[11] = dimNameTmpDesc.DimValue11
            join dimNameTmpDesc
                where dimNameTmpDesc.LedgerDimension == accountingSourceExplorerTmp.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionCurrencyAmountSign</Name>
				<Source><![CDATA[
    private void updateTransactionCurrencyAmountSign()
    {
        select firstOnly RecId from accountingSourceExplorerTmp;

        // correct the amount sign shown for transaction currency amount
        update_recordSet accountingSourceExplorerTmp
        setting TransactionCurrencyAmount = -1 * accountingSourceExplorerTmp.TransactionCurrencyAmount
            where (accountingSourceExplorerTmp.TransactionCurrencyAmount > 0 &&
                   accountingSourceExplorerTmp.AccountingCurrencyAmount < 0 ) ||
                   (accountingSourceExplorerTmp.TransactionCurrencyAmount < 0 &&
                   accountingSourceExplorerTmp.AccountingCurrencyAmount > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTypeEnumName</Name>
				<Source><![CDATA[
    private void updateTypeEnumName()
    {
        SourceDocumentReferenceIdentityEnumTmp sourceDocumentReferenceIdentityEnumTmp;

        sourceDocumentReferenceIdentityEnumTmp =
            SourceDocumentReferenceIdentityEnumProvider::generateSourceDocumentNameEnums();

        update_recordset accountingSourceExplorerTmp
            setting TypeEnumName = sourceDocumentReferenceIdentityEnumTmp.EnumString
        join sourceDocumentReferenceIdentityEnumTmp
            where accountingSourceExplorerTmp.TypeEnumName == sourceDocumentReferenceIdentityEnumTmp.EnumName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the balances for Accounting source explorer.
    /// </summary>
    /// <param name="_temp">
    /// The <c>AccountingSourceExplorerTmp</c> instance where the balances are inserted.
    /// </param>
    /// <param name="_parms">
    /// An instance of <c>AccountingSourceExplorerBalanceParameters</c>.
    /// </param>
    public static void constructBalances(
        AccountingSourceExplorerTmp                 _accountingSourceExplorerTmp,
        AccountingSourceExplorerBalanceParameters   _accountingSourceExplorerBalanceParameters)
    {
        AccountingSourceExplorerProcessor   accSourceExplorerProcessor;

        accSourceExplorerProcessor = new AccountingSourceExplorerProcessor();

        accSourceExplorerProcessor.populateAccountingSourceExplorer(_accountingSourceExplorerTmp, _accountingSourceExplorerBalanceParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQueryTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the specified query.
    /// </summary>
    /// <param name = "_queryOriginal">The query. Should not be modified.</param>
    /// <param name = "_cursor">The cursor for the data source.</param>
    /// <returns>The total summed amount of the query.</returns>
    public static AmountMSTDebCred calculateQueryTotals(Query _queryOriginal, AccountingSourceExplorerTmp  _cursor)
    {
        if (!_queryOriginal || !_queryOriginal.dataSourceTable(tableNum(AccountingSourceExplorerTmp)))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = new Query(_queryOriginal);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(AccountingSourceExplorerTmp));
        qbds.addSelectionField(fieldNum(AccountingSourceExplorerTmp,AccountingCurrencyAmount), SelectionField::Sum);
        QueryRun queryRun = new QueryRun(query);

        AccountingSourceExplorerTmp aseTmp;
        aseTmp.linkPhysicalTableInstance(_cursor);
        queryRun.setCursor(aseTmp);

        queryRun.next();
        aseTmp = queryRun.get(tablenum(AccountingSourceExplorerTmp));

        return aseTmp.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQueryReportingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the specified query for reporting currency.
    /// </summary>
    /// <param name = "_queryOriginal">The query. Should not be modified.</param>
    /// <param name = "_cursor">The cursor for <c> AccountingSourceExplorerTmp </c> the data source.</param>
    /// <returns>The total summed reporting currency amount of the query.</returns>
    public static AmountMSTDebCred calculateQueryReportingTotals(Query _queryOriginal, AccountingSourceExplorerTmp  _cursor)
    {
        if (!_queryOriginal || !_queryOriginal.dataSourceTable(tableNum(AccountingSourceExplorerTmp)))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = new Query(_queryOriginal);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(AccountingSourceExplorerTmp));
        qbds.addSelectionField(fieldNum(AccountingSourceExplorerTmp,ReportingCurrencyAmount), SelectionField::Sum);
        QueryRun queryRun = new QueryRun(query);

        AccountingSourceExplorerTmp aseTmp;
        aseTmp.linkPhysicalTableInstance(_cursor);
        queryRun.setCursor(aseTmp);

        queryRun.next();
        aseTmp = queryRun.get(tablenum(AccountingSourceExplorerTmp));

        return aseTmp.ReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPendingReferenceIdentities</Name>
				<Source><![CDATA[
    private static void processPendingReferenceIdentities(TransDate _startDate, TransDate _endDate)
    {
        SourceDocumentTmpTypeInformation extensionTypeInformation =
            SourceDocumentExtensionFactory::getExtensionTypeInformation(classNum(SourceDocReferenceIdentitiesProvider));

        while select ClassId from extensionTypeInformation
        {
            container containerEnumValues;

            List listEnumsFromAttributes = SourceDocumentExtensionUtil::getEnumValuesFromAttributes(classId2Name(extensionTypeInformation.ClassId));
            ListEnumerator listEnumsFromAttributesEnumerator = listEnumsFromAttributes.getEnumerator();
            if (listEnumsFromAttributesEnumerator.moveNext())
            {
                containerEnumValues = listEnumsFromAttributesEnumerator.current();
            }

            if (containerEnumValues != conNull())
            {
                new SourceDocReferenceIdentitiesProcess().loadReferenceIdentitiesByDateRange(
                    enumId2Name(conPeek(containerEnumValues, 1)), // extension key type enum name
                conPeek(containerEnumValues, 2), // extension key type enum value
                _startDate,
                    _endDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjIdForProjectLinkedEntries</Name>
				<Source><![CDATA[
    private void updateProjIdForProjectLinkedEntries()
    {
        ProjTransPosting projTransPosting;

        update_recordSet accountingSourceExplorerTmp
            setting ProjectId = projTransPosting.ProjId
        join ProjId from projTransPosting
            where projTransPosting.Voucher == accountingSourceExplorerTmp.SubledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParty</Name>
				<Source><![CDATA[
    private void updateParty()
    {
        this.updateFromVendTrans();
        this.updateFromCustTrans();
        this.processIntercompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromVendTrans</Name>
				<Source><![CDATA[
    private void updateFromVendTrans()
    {
        VendTrans vendTrans;
        VendTable vendTable;
        DirPartyTable dirPartyTable;

        update_recordSet accountingSourceExplorerTmp
            setting PartyNumber = vendTrans.AccountNum,
                PartyName = dirPartyTable.Name
            where accountingSourceExplorerTmp.PartyNumber == ''
            join AccountNum from vendTrans
                where vendTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
                   && vendTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
            join Party from vendTable
                where vendTable.AccountNum == vendTrans.AccountNum
            join Name from dirPartyTable
                where dirPartyTable.RecId == vendTable.Party;

        update_recordSet accountingSourceExplorerTmp
            setting DocumentNumber = vendTrans.DocumentNum
            where accountingSourceExplorerTmp.DocumentNumber == ''
            join DocumentNum from vendTrans
                where vendTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
                 && vendTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
            join Party from vendTable
                where vendTable.AccountNum == vendTrans.AccountNum
            join Name from dirPartyTable
                 where dirPartyTable.RecId == vendTable.Party;
        VendTransVoucherMapToLedgerVoucherTmp voucherMap;

        insert_recordset voucherMap(LedgerVoucher, AccountingDate)
            select SubledgerVoucher, AccountingDate
            from accountingSourceExplorerTmp
            group by SubledgerVoucher, AccountingDate
            where accountingSourceExplorerTmp.JournalCategory == LedgerTransType::Vend
                && (accountingSourceExplorerTmp.PartyNumber == '' || accountingSourceExplorerTmp.DocumentNumber == '');

        VendTrans::findVendTransVoucherByLedgerVoucher(voucherMap);

        update_recordSet accountingSourceExplorerTmp
            setting PartyNumber = vendTrans.AccountNum,
                PartyName = dirPartyTable.Name
            where accountingSourceExplorerTmp.PartyNumber == ''
               && accountingSourceExplorerTmp.JournalCategory == LedgerTransType::Vend
            join Voucher, TransDate from voucherMap
                where voucherMap.LedgerVoucher == accountingSourceExplorerTmp.SubledgerVoucher
                   && voucherMap.AccountingDate == accountingSourceExplorerTmp.AccountingDate
                   && voucherMap.Voucher != ''
                   && voucherMap.TransDate != dateNull()
            join AccountNum from vendTrans
                where vendTrans.Voucher == voucherMap.Voucher
                   && vendTrans.TransDate == voucherMap.TransDate
            join Party from vendTable
                where vendTable.AccountNum == vendTrans.AccountNum
            join Name from dirPartyTable
                where dirPartyTable.RecId == vendTable.Party;

        update_recordSet accountingSourceExplorerTmp
            setting DocumentNumber = vendTrans.DocumentNum
            where accountingSourceExplorerTmp.DocumentNumber == ''
               && accountingSourceExplorerTmp.JournalCategory == LedgerTransType::Vend
            join Voucher, TransDate from voucherMap
                where voucherMap.LedgerVoucher == accountingSourceExplorerTmp.SubledgerVoucher
                   && voucherMap.AccountingDate == accountingSourceExplorerTmp.AccountingDate
                   && voucherMap.Voucher != ''
                   && voucherMap.TransDate != dateNull()
            join DocumentNum from vendTrans
                where vendTrans.Voucher == voucherMap.Voucher
                   && vendTrans.TransDate == voucherMap.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCustTrans</Name>
				<Source><![CDATA[
    private void updateFromCustTrans()
    {
        CustTrans custTrans;
        CustTable custTable;
        DirPartyTable dirPartyTable;

        update_recordSet accountingSourceExplorerTmp
            setting PartyNumber = custTrans.AccountNum,
                PartyName = dirPartyTable.Name
            where accountingSourceExplorerTmp.PartyNumber == ''
        join custTrans
            where custTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
               && custTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
        join custTable
            where custTable.AccountNum == custTrans.AccountNum
        join Name from dirPartyTable
            where dirPartyTable.RecId == custTable.Party;

        update_recordSet accountingSourceExplorerTmp
            setting DocumentNumber = custTrans.DocumentNum
            where accountingSourceExplorerTmp.DocumentNumber == ''
        join custTrans
            where custTrans.Voucher == accountingSourceExplorerTmp.SubledgerVoucher
               && custTrans.TransDate == accountingSourceExplorerTmp.AccountingDate
        join custTable
            where custTable.AccountNum == custTrans.AccountNum
        join Name from dirPartyTable
            where dirPartyTable.RecId == custTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processIntercompany</Name>
				<Source><![CDATA[
    private void processIntercompany()
    {
        this.insertIntercompanyTmp();
        this.updatePartyNumberForIntercompanyTransactions();
        this.updateAccountingSourceExplorerTmpFromIntercompanyTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntercompanyTmp</Name>
				<Source><![CDATA[
    private void insertIntercompanyTmp()
    {
        LedgerTransVoucherLink link;

        SelectableDataArea currentCompany = curExt();

        insert_recordset accountingSourceExplorerIntercompanyTmp (AccountingDate, SubledgerVoucherCurrentCompany, VoucherLinkGroupId, CompanyCurrent)
            select AccountingDate, SubledgerVoucher from accountingSourceExplorerTmp
                where accountingSourceExplorerTmp.PartyNumber == ''
            join VoucherGroupId, currentCompany from link
                where link.Voucher == accountingSourceExplorerTmp.SubledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePartyNumberForIntercompanyTransactions</Name>
				<Source><![CDATA[
    private void updatePartyNumberForIntercompanyTransactions()
    {
        LedgerTransVoucherLink link;

        while select crosscompany accountingSourceExplorerIntercompanyTmp
            group by link.DataAreaId
            join link
                where link.VoucherGroupId == accountingSourceExplorerIntercompanyTmp.VoucherLinkGroupId
                   && link.DataAreaId != curExt()
        {
            changecompany (link.DataAreaId)
            {
                // Vendor
                this.updatePartyNumberForIntercompanyTransactionsVendor();

                // Customer
                this.updatePartyNumberForIntercompanyTransactionsCustomer();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePartyNumberForIntercompanyTransactionsVendor</Name>
				<Source><![CDATA[
    private void updatePartyNumberForIntercompanyTransactionsVendor()
    {
        VendTrans vendTrans;
        VendTable vendTable;

        LedgerTransVoucherLink destinationCompanyLink;
        DirPartyTable dirPartyTable;

        AccountingSourceExplorerIntercompanyTmp accountingSourceExplorerIntercompanyTmpLocal;
        accountingSourceExplorerIntercompanyTmpLocal.linkPhysicalTableInstance(accountingSourceExplorerIntercompanyTmp);

        update_recordset accountingSourceExplorerIntercompanyTmpLocal
            setting CompanyDestination = destinationCompanyLink.DataAreaId,
                    SubledgerVoucherDestinationCompany = destinationCompanyLink.Voucher,
                    PartyName = DirPartyTable.Name,
                    PartyNumber = vendTrans.AccountNum,
                    DocumentDate = vendTrans.DocumentDate,
                    DocumentNumber = vendTrans.DocumentNum
            join destinationCompanyLink
                where destinationCompanyLink.VoucherGroupId == accountingSourceExplorerIntercompanyTmpLocal.VoucherLinkGroupId
            join vendTrans
                where vendTrans.Voucher == destinationCompanyLink.Voucher
                   && vendTrans.TransDate == accountingSourceExplorerIntercompanyTmpLocal.AccountingDate
            join firstonly vendTable
                where vendTable.AccountNum == vendTrans.AccountNum
            join firstonly Name from dirPartyTable
                where dirPartyTable.RecId == vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePartyNumberForIntercompanyTransactionsCustomer</Name>
				<Source><![CDATA[
    private void updatePartyNumberForIntercompanyTransactionsCustomer()
    {
        CustTrans custTrans;
        CustTable custTable;

        LedgerTransVoucherLink destinationCompanyLink;
        DirPartyTable dirPartyTable;

        AccountingSourceExplorerIntercompanyTmp accountingSourceExplorerIntercompanyTmpLocal;
        accountingSourceExplorerIntercompanyTmpLocal.linkPhysicalTableInstance(accountingSourceExplorerIntercompanyTmp);

        update_recordset accountingSourceExplorerIntercompanyTmpLocal
            setting CompanyDestination = destinationCompanyLink.DataAreaId,
                    SubledgerVoucherDestinationCompany = destinationCompanyLink.Voucher,
                    PartyName = DirPartyTable.Name,
                    PartyNumber = custTrans.AccountNum,
                    DocumentDate = custTrans.DocumentDate,
                    DocumentNumber = custTrans.DocumentNum
            join destinationCompanyLink
                where destinationCompanyLink.VoucherGroupId == accountingSourceExplorerIntercompanyTmpLocal.VoucherLinkGroupId
            join custTrans
                where custTrans.Voucher == destinationCompanyLink.Voucher
                   && custTrans.TransDate == accountingSourceExplorerIntercompanyTmpLocal.AccountingDate
            join firstonly custTable
                where custTable.AccountNum == custTrans.AccountNum
            join firstonly Name from dirPartyTable
                where dirPartyTable.RecId == custTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountingSourceExplorerTmpFromIntercompanyTmp</Name>
				<Source><![CDATA[
    private void updateAccountingSourceExplorerTmpFromIntercompanyTmp()
    {
        update_recordset accountingSourceExplorerTmp
            setting PartyNumber = AccountingSourceExplorerIntercompanyTmp.PartyNumber,
                    PartyName = AccountingSourceExplorerIntercompanyTmp.PartyName
            join AccountingSourceExplorerIntercompanyTmp
                where AccountingSourceExplorerIntercompanyTmp.SubledgerVoucherCurrentCompany == accountingSourceExplorerTmp.SubledgerVoucher;

        update_recordset accountingSourceExplorerTmp
            setting DocumentNumber = AccountingSourceExplorerIntercompanyTmp.DocumentNumber
            where accountingSourceExplorerTmp.DocumentNumber == ''
            join AccountingSourceExplorerIntercompanyTmp
                where AccountingSourceExplorerIntercompanyTmp.SubledgerVoucherCurrentCompany == accountingSourceExplorerTmp.SubledgerVoucher;

        update_recordset accountingSourceExplorerTmp
            setting DocumentDate = AccountingSourceExplorerIntercompanyTmp.DocumentDate
            where accountingSourceExplorerTmp.DocumentDate == dateNull()
            join AccountingSourceExplorerIntercompanyTmp
                where AccountingSourceExplorerIntercompanyTmp.SubledgerVoucherCurrentCompany == accountingSourceExplorerTmp.SubledgerVoucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>