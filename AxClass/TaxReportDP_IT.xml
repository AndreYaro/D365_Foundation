<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportDP_IT</c> class is the Report Data Provider class for the <c>TaxReport_IT</c>
///    report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(TaxReportContract_IT))
]
class TaxReportDP_IT extends SrsReportDataProviderPreProcessTempDB
{
    internal const int TransRowsPerPage = 10;

    TaxReportTmp_IT         taxReportTmp_IT;
    RecId                   tmpTableDataRecId;
    private TaxReport_IT taxReport_IT;
    private TaxReportContract_IT contract;
    private TmpTaxReport_IT tmpTaxReport_IT;
    private TmpTaxReport_ITSummary tmpTaxReport_ITSummary;

    public boolean printPlafond_IT;
    private TaxReportPeriod taxReportPeriod;
    private PageNo firstPageNo;
    private boolean printEndSections;
    private TaxBookId taxBookId;
    private TaxBookSection taxBookSection;

    private Name companyName;
    private CompanyCoRegNum companyVATNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxReportTmp_IT</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxReportTmp_IT</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('TaxReportTmp_IT')
    ]
    public TaxReportTmp_IT getTaxReportTmp_IT()
    {
        select taxReportTmp_IT;
        return taxReportTmp_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data into the <c>TaxReportTmp_IT</c> temporary table.
    /// </summary>
    public void processReport()
    {
        SrsReportRunPermission permission;
        contract = this.parmDataContract() as TaxReportContract_IT;
        taxReportPeriod = TaxReportPeriod::find(contract.parmTaxPeriod(), contract.parmFromDate());

        taxReport_IT = new TaxReport_IT();
        container packedClass = SysOperationHelper::base64Decode(contract.parmTaxReport_IT());
        taxReport_IT.unpack(packedClass);

        permission = new SrsReportRunPermission();
        permission.assert();

        this.init();
        this.fetch();

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    private void fetch()
    {
        TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::current();

        if (!taxReportERContext || !taxReportERContext.parmTaxReportERContract_IT().parmIsVariativePeriod())
        {
            taxReport_IT.initTaxReportPayment();
        }

        if (contract.parmPrintVATBooks() || contract.parmPrintVATSummary())
        {
            using (TaxReportContext_IT taxReportContext = TaxReportContext_IT::instance())
            {
                taxReportContext.parmDeleteZeroLines(!contract.parmIncludeZeroLines());
                taxReportContext.parmExcludeReverseTrans(!contract.parmIncludeReverseTrans());

                if (tmpTaxReport_IT.create(
                    taxReport_IT.parmTaxPeriod(),
                    taxReport_IT.parmFromDate(),
                    taxReport_IT.parmToDate(),
                    contract.parmTaxBookTypeJournal(),
                    TaxBook::find(contract.parmFromTaxBookRecId()).TaxBookId,
                    TaxBook::find(contract.parmToTaxBookRecId()).TaxBookId))
                {
                    if (contract.parmPrintVATBooks())
                    {
                        this.printVATBooks();
                    }
                    else
                    {
                        if (taxReportERContext
                            && (contract.parmPrintVATSummary() || contract.parmPrintVATPayment())
                            && !TaxAuthorityAddress::find(TaxPeriodHead::find(taxReport_IT.parmTaxPeriod()).TaxAuthority).SeparateTaxSummary)
                        {
                            TaxBookSection taxBookSectionLocal;
                            TaxBook taxBookLocal;

                            select firstonly taxBookSectionLocal
                                join taxBookLocal
                                    where taxBookLocal.RecId == taxBookSectionLocal.TaxBook
                                        && taxBookLocal.TaxPeriod == taxReport_IT.parmTaxPeriod()
                                        && taxBookLocal.PrintEndSections;

                            if (TmpTaxReport_ITSummary::isTaxBookIncluded(
                                taxBookLocal,
                                taxReport_IT.parmTaxPeriod(),
                                taxReport_IT.parmFromDate(),
                                taxReport_IT.parmToDate(),
                                contract.parmTaxBookTypeJournal(),
                                TaxBook::find(contract.parmFromTaxBookRecId()).TaxBookId,
                                TaxBook::find(contract.parmToTaxBookRecId()).TaxBookId))
                            {
                                this.insertVATBookDetailsFiller(taxBookLocal, taxBookSectionLocal, true);
                            }
                        }
                    }
                }
            }
        }

        if (contract.parmPrintVATSummary())
        {
            if (tmpTaxReport_ITSummary.create(
                    tmpTaxReport_IT,
                    taxReport_IT.parmTaxPeriod(),
                    taxReport_IT.parmFromDate(),
                    taxReport_IT.parmToDate(),
                    contract.parmTaxBookTypeJournal(),
                    TaxBook::find(contract.parmFromTaxBookRecId()).TaxBookId,
                    TaxBook::find(contract.parmToTaxBookRecId()).TaxBookId))
            {
                this.printVATSummary();
            }
        }

        if (contract.parmPrintVATPayment())
        {
            this.printVATPayment();

            if (taxReportERContext
                && !contract.parmPrintVATBooks()
                && !contract.parmPrintVATSummary()
                && !TaxAuthorityAddress::find(TaxPeriodHead::find(taxReport_IT.parmTaxPeriod()).TaxAuthority).SeparateTaxSummary)
            {
                TaxBookSection taxBookSectionLocal;
                TaxBook taxBookLocal;

                select firstonly taxBookSectionLocal
                    join taxBookLocal
                        where taxBookLocal.RecId == taxBookSectionLocal.TaxBook
                            && taxBookLocal.TaxPeriod == taxReport_IT.parmTaxPeriod()
                            && taxBookLocal.PrintEndSections;

                this.insertVATBookDetailsFiller(taxBookLocal, taxBookSectionLocal, true);
            }
        }

        if (contract.parmPrintPlafond_IT() && FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            this.printPlafond_IT();
        }

        this.paginateTaxBookSections();

        if (contract.parmUpdateNow() && !taxReportERContext)
        {
            // in case of taxReportERContext, page numbers are updated in TaxReportERDestination_IT.saveFile() method
            this.updateLastPageNo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPlafond_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets plafond variables to show plafond information on document.
    /// </summary>
    public void printPlafond_IT()
    {
        PlafondPeriodTrans_IT plafondPeriodTrans;

        printPlafond_IT = true;
        taxReportTmp_IT.clear();
        taxReportTmp_IT.ReportName = "@ExtendedItallianLocalization:Plafond";

        taxReportTmp_IT.CompanyName = companyName;
        taxReportTmp_IT.CompanyVATNum = companyVATNum;
        taxReportTmp_IT.VATPeriod = strfmt(
            '%1 - %2',
            date2str(
                taxReport_IT.parmFromDate(),
                123,
                DateDay::Digits2,
                DateSeparator::Hyphen,
                DateMonth::Digits2,
                DateSeparator::Hyphen,
                DateYear::Digits4,
                DateFlags::None),
            date2str(
                taxReport_IT.parmToDate(),
                123,
                DateDay::Digits2,
                DateSeparator::Hyphen,
                DateMonth::Digits2,
                DateSeparator::Hyphen,
                DateYear::Digits4,
                DateFlags::None));

        Plafond_IT plafond = Plafond_IT::findPlafondInPeriod(taxReport_IT.parmFromDate(), taxReport_IT.parmToDate(), taxReport_IT.parmTaxPeriod());

        if (plafond)
        {
            PlafondUpdate_IT plafondUpdate = new plafondUpdate_IT(plafond);
            Map plafondPrevBalances = plafondUpdate.getPreviousBalances();
            Map plafondEndBalances = plafondUpdate.getEndBalances();

            plafondPeriodTrans.setTmp();
            plafondPeriodTrans.setTmpData(plafondUpdate.getTmpPlafondPeriodTrans());

            select firstonly plafondPeriodTrans
                where plafondPeriodTrans.FromDate == taxReport_IT.parmFromDate()
                   && plafondPeriodTrans.ToDate == taxReport_IT.parmToDate()
                   && plafondPeriodTrans.TaxPeriod == taxReport_IT.parmTaxPeriod();

            if (plafondPeriodTrans)
            {
                str key = plafondPeriodTrans.makeKey();
                taxReportTmp_IT.Plafond_PlafondId_IT = plafond.PlafondId;
                taxReportTmp_IT.Plafond_FromDate_IT = plafond.FromDate;
                taxReportTmp_IT.Plafond_ToDate_IT = plafond.ToDate;
                taxReportTmp_IT.Plafond_InitialAmount_IT = plafond.InitialAmount;
                taxReportTmp_IT.Plafond_ClosedDate_IT = plafond.ClosedDate;
                taxReportTmp_IT.Plafond_Status_IT = plafond.Status;

                taxReportTmp_IT.PlafondPeriod_FromDate_IT = plafondPeriodTrans.FromDate;
                taxReportTmp_IT.PlafondPeriod_PlafondAmount_IT = plafondPeriodTrans.PlafondAmount;
                taxReportTmp_IT.PlafondPeriod_PrevPlafondAmount_IT = plafondPrevBalances.exists(key) ? any2real(plafondPrevBalances.lookUp(key)) : 0;
                taxReportTmp_IT.PlafondPeriod_ToDate_IT = plafondPeriodTrans.ToDate;
                taxReportTmp_IT.PlafondPeriod_Balance_IT = plafondEndBalances.exists(key) ? any2real(plafondEndBalances.lookUp(key)) : 0;
                taxReportTmp_IT.PlafondVisibility_IT = 'True';

                taxReportTmp_IT.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printVATBooks</Name>
				<Source><![CDATA[
    private void printVATBooks()
    {
        TaxBook         taxBook;
        TaxBookSection  taxBookSectionLocal;
        boolean         printBlankPage = TaxAuthorityAddress::find(TaxPeriodHead::find(taxReport_IT.parmTaxPeriod()).TaxAuthority).PrintBlankPage;

        while select taxBook
            order by TaxBookType desc, PrintEndSections, TaxBookId
            where taxBook.TaxPeriod == taxReportPeriod.TaxPeriod
        {
            firstPageNo = TaxBookStatus::getFirstPageNo(
                taxReportPeriod,
                taxBook.TaxBookId,
                taxReport_IT.update());

            printEndSections = taxBook.PrintEndSections;
            taxBookId = taxBook.TaxBookId;

            TransDate curTransDate;
            Voucher curVoucher;
            boolean isFirstInvoiceLine;

            while select tmpTaxReport_IT
                    order by TaxBookSection, TransDate, Voucher, TaxCode, TaxBook
                    where tmpTaxReport_IT.TaxBook == taxBook.RecId
                       && (tmpTaxReport_IT.TaxAmount || tmpTaxReport_IT.TaxBaseAmount || tmpTaxReport_IT.InvoiceAmount || tmpTaxReport_IT.Voucher)
                join taxBookSection
                    where taxBookSection.RecId == tmpTaxReport_IT.TaxBookSection
            {
                if (tmpTaxReport_IT.TransDate != curTransDate || tmpTaxReport_IT.Voucher != curVoucher)
                {
                    isFirstInvoiceLine = true;
                    curTransDate = tmpTaxReport_IT.TransDate;
                    curVoucher = tmpTaxReport_IT.Voucher;
                }
                else
                {
                    isFirstInvoiceLine = false;
                }

                this.createTaxReportTmp_IT(tmpTaxReport_IT, isFirstInvoiceLine);
            }

            if (TmpTaxReport_ITSummary::isTaxBookIncluded(
                    taxBook,
                    taxReport_IT.parmTaxPeriod(),
                    taxReport_IT.parmFromDate(),
                    taxReport_IT.parmToDate(),
                    contract.parmTaxBookTypeJournal(),
                    TaxBook::find(contract.parmFromTaxBookRecId()).TaxBookId,
                    TaxBook::find(contract.parmToTaxBookRecId()).TaxBookId))
            {
                while select taxBookSectionLocal
                    where taxBookSectionLocal.TaxBook == taxBook.RecId
                {
                    this.insertVATBookDetailsFiller(taxBook, taxBookSectionLocal, printBlankPage);
                }

                this.insertVATBookDetailsFillerEUSales(taxBook, printBlankPage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printVATPayment</Name>
				<Source><![CDATA[
    private void printVATPayment()
    {
        TaxReportTmp_IT localTaxReportTmp;

        localTaxReportTmp.takeOwnershipOfTempDBTable(true);
        localTaxReportTmp.linkPhysicalTableInstance(this.fillVATPaymentLines());
        while select localTaxReportTmp
        {
            this.createTaxReportTmp_IT(localTaxReportTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printVATSummary</Name>
				<Source><![CDATA[
    private void printVATSummary()
    {
        while select tmpTaxReport_ITSummary
            order by TaxBookType desc, TaxBook, TaxBookSection, TaxCode
        {
            this.createTaxReportTmp_IT(tmpTaxReport_ITSummary);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paginateTaxBookSections</Name>
				<Source><![CDATA[
    private void paginateTaxBookSections()
    {
        TaxReportTmp_IT taxReportTmpLocInsert;

        while select taxReportTmp_IT
            group by TaxBookId, TaxBookSectionId
            where taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
        {
            taxReportTmpLocInsert.TaxBookId = taxReportTmp_IT.TaxBookId;
            taxReportTmpLocInsert.TaxBookSectionId = taxReportTmp_IT.TaxBookSectionId;
            taxReportTmpLocInsert.insert();
        }

        if (TaxReportSkipReportTransactionFlight_IT::instance().isEnabled())
        {
            taxReportTmp_IT.skipTTSCheck(true);

            while select taxReportTmpLocInsert
            {
                PageNo pageNo = 1;
                int rowNo = 0;

                while select taxReportTmp_IT
                    order by IsFillerRow, TransDate, RelatedVoucher, SplitPaymReverse
                    where taxReportTmp_IT.TaxBookId == taxReportTmpLocInsert.TaxBookId
                        && taxReportTmp_IT.TaxBookSectionId == taxReportTmpLocInsert.TaxBookSectionId
                        && taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
                        && taxReportTmp_IT.IsFillerRow == NoYes::No
                        && taxReportTmp_IT.CompetencePeriod != TaxReportCompetencePeriod_IT::Actual
                {
                    rowNo++;
                    pageNo = roundUp(rowNo / TransRowsPerPage, 1);
                    taxReportTmp_IT.TaxBookSectionPageNo = pageNo;
                    taxReportTmp_IT.update();
                }

                while select taxReportTmp_IT
                    where taxReportTmp_IT.TaxBookId == taxReportTmpLocInsert.TaxBookId
                        && taxReportTmp_IT.TaxBookSectionId == taxReportTmpLocInsert.TaxBookSectionId
                        && taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
                        && taxReportTmp_IT.IsFillerRow == NoYes::No
                        && taxReportTmp_IT.CompetencePeriod == TaxReportCompetencePeriod_IT::Actual
                {
                    taxReportTmp_IT.TaxBookSectionPageNo = pageNo;
                    taxReportTmp_IT.update();
                }
            }
        }
        else
        {
            while select taxReportTmpLocInsert
            {
                PageNo pageNo = 1;
                int rowNo = 0;

                while select forupdate taxReportTmp_IT
                    order by IsFillerRow, TransDate, RelatedVoucher, SplitPaymReverse
                    where taxReportTmp_IT.TaxBookId == taxReportTmpLocInsert.TaxBookId
                        && taxReportTmp_IT.TaxBookSectionId == taxReportTmpLocInsert.TaxBookSectionId
                        && taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
                        && taxReportTmp_IT.IsFillerRow == NoYes::No
                        && taxReportTmp_IT.CompetencePeriod != TaxReportCompetencePeriod_IT::Actual
                {
                    rowNo++;
                    pageNo = roundUp(rowNo / TransRowsPerPage, 1);
                    taxReportTmp_IT.TaxBookSectionPageNo = pageNo;
                    taxReportTmp_IT.update();
                }

                while select forupdate taxReportTmp_IT
                    where taxReportTmp_IT.TaxBookId == taxReportTmpLocInsert.TaxBookId
                        && taxReportTmp_IT.TaxBookSectionId == taxReportTmpLocInsert.TaxBookSectionId
                        && taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
                        && taxReportTmp_IT.IsFillerRow == NoYes::No
                        && taxReportTmp_IT.CompetencePeriod == TaxReportCompetencePeriod_IT::Actual
                {
                    taxReportTmp_IT.TaxBookSectionPageNo = pageNo;
                    taxReportTmp_IT.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastPageNo</Name>
				<Source><![CDATA[
    private void updateLastPageNo()
    {
        TaxBookType currentTaxBookType;
        TaxBookId currentTaxBookId;
        TaxBookSectionId currentTaxBookSectionId;
        PageNo pageQty;
        Set taxCodeSet = new Set(Types::Container);
        const int SectionTotalRowsPerPage = 31;
        const int BookTotalRowsPerPage = 30;
        const int SummaryRowsPerPage = 20;
        int sectionTotalExtraRowsQty = TaxParameters::reportUseVatDueDate_W() ? 7 : 2;
        int bookTotalExtraRowsQty = TaxParameters::reportUseVatDueDate_W() ? 7 : 2;
        int bookTypeTotalExtraRowsQty = TaxParameters::reportUseVatDueDate_W() ? 5 : 1;
        int extraFilledRow = TaxParameters::reportUseVatDueDate_W() ? 3 : 1;
        TaxReportTmp_IT taxReportTmpTaxCode;

        ttsbegin;

        Map taxReportHidden = new Map(Types::Container, Types::Integer);

        while select count(RecId)
            from taxReportTmp_IT
            group TaxBookType, TaxBookId, TaxBookSectionId
            where taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
                && (taxReportTmp_IT.IsFillerRow == NoYes::Yes
                    || taxReportTmp_IT.CompetencePeriod == TaxReportCompetencePeriod_IT::Actual)
        {
            taxReportHidden.insert([taxReportTmp_IT.TaxBookType, taxReportTmp_IT.TaxBookId, taxReportTmp_IT.TaxBookSectionId], taxReportTmp_IT.RecId);
        }

        while select taxReportTmp_IT
            group by CompetencePeriod, TaxCode, TaxBookType, TaxBookId, TaxBookSectionId
            where taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
        {
            taxReportTmpTaxCode.TaxBookType = taxReportTmp_IT.TaxBookType;
            taxReportTmpTaxCode.TaxBookId = taxReportTmp_IT.TaxBookId;
            taxReportTmpTaxCode.TaxBookSectionId = taxReportTmp_IT.TaxBookSectionId;
            taxReportTmpTaxCode.CompetencePeriod = taxReportTmp_IT.CompetencePeriod;
            taxReportTmpTaxCode.TaxCode = taxReportTmp_IT.TaxCode;
            taxReportTmpTaxCode.insert();
        }

        RecId taxBookRecIdSummary = contract.parmTaxBookRecIdSummary();
        PageNo taxBookSummaryLastPage;
        if (taxBookRecIdSummary)
        {
            TaxBookStatus locTaxBookStatus = TaxBookStatus::findByPeriodDateBookId(
                taxReportPeriod.TaxPeriod,
                taxReportPeriod.FromDate,
                taxReportPeriod.ToDate,
                taxBookRecIdSummary);
            taxBookSummaryLastPage = locTaxBookStatus.LastPageNo;
        }

        while select count(RecId) from taxReportTmp_IT
            group by TaxBookType, TaxBookId, TaxBookSectionId
            where taxReportTmp_IT.VATBookVisibilityNoYes == NoYes::Yes
        {
            if (currentTaxBookId && taxReportTmp_IT.TaxBookId != currentTaxBookId)
            {
                int bookTotalRowsQty = taxCodeSet.elements() + bookTotalExtraRowsQty - extraFilledRow;

                if (currentTaxBookType != taxReportTmp_IT.TaxBookType)
                {
                    bookTotalRowsQty += bookTypeTotalExtraRowsQty;
                }

                pageQty += max(1, roundUp(bookTotalRowsQty / BookTotalRowsPerPage, 1));
                TaxBookStatus::calcAndSetLastPageNo(taxReportPeriod, currentTaxBookId, pageQty);
                pageQty = 0;
                taxCodeSet = new Set(Types::Container);
            }

            currentTaxBookType = taxReportTmp_IT.TaxBookType;
            currentTaxBookId = taxReportTmp_IT.TaxBookId;
            currentTaxBookSectionId = taxReportTmp_IT.TaxBookSectionId;

            int taxReportHiddenCount;
            if (taxReportHidden.exists([taxReportTmp_IT.TaxBookType, taxReportTmp_IT.TaxBookId, taxReportTmp_IT.TaxBookSectionId]))
            {
                taxReportHiddenCount = taxReportHidden.lookup([taxReportTmp_IT.TaxBookType, taxReportTmp_IT.TaxBookId, taxReportTmp_IT.TaxBookSectionId]);
            }

            int transSectionQty = max(1, roundUp((taxReportTmp_IT.RecId - taxReportHiddenCount) / TransRowsPerPage, 1));
            
            pageQty += transSectionQty;

            int sectionTaxCodeCounter = 0;

            while select CompetencePeriod, TaxCode from taxReportTmpTaxCode
                where taxReportTmpTaxCode.TaxBookId == taxReportTmp_IT.TaxBookId
                    && taxReportTmpTaxCode.TaxBookType == taxReportTmp_IT.TaxBookType
                    && taxReportTmpTaxCode.TaxBookSectionId == taxReportTmp_IT.TaxBookSectionId
            {
                sectionTaxCodeCounter++;
                taxCodeSet.add([taxReportTmpTaxCode.CompetencePeriod, taxReportTmpTaxCode.TaxCode]);
            }

            // section total
            pageQty += max(1, roundUp((sectionTaxCodeCounter + sectionTotalExtraRowsQty - extraFilledRow) / SectionTotalRowsPerPage, 1));
        }

        pageQty += max(1, roundUp((taxCodeSet.elements() + bookTotalExtraRowsQty + bookTypeTotalExtraRowsQty - extraFilledRow) / BookTotalRowsPerPage, 1));
        TaxBookStatus::calcAndSetLastPageNo(taxReportPeriod, currentTaxBookId, pageQty);

        PageNo summaryPartPageQty;

        while select count(RecId) from taxReportTmp_IT
            group by ITSummary_CompetencePeriod, ITSummary_TaxBook
            where taxReportTmp_IT.VATSummaryVisibilityNoYes == NoYes::Yes
        {
            summaryPartPageQty += roundUp((taxReportTmp_IT.RecId) / SummaryRowsPerPage, 1);
        }

        summaryPartPageQty += 1; // payment page

        if (taxBookRecIdSummary)
        {
            TaxBookStatus locTaxBookStatus = TaxBookStatus::findByPeriodDateBookId(
                taxReportPeriod.TaxPeriod,
                taxReportPeriod.FromDate,
                taxReportPeriod.ToDate,
                taxBookRecIdSummary,
                true);

            if (taxBookSummaryLastPage != locTaxBookStatus.LastPageNo)
            {
                locTaxBookStatus.LastPageNo += summaryPartPageQty;
                locTaxBookStatus.update();
            }
            else
            {
                TaxBookStatus::calcAndSetLastPageNo(taxReportPeriod, TaxBook::find(taxBookRecIdSummary).TaxBookId, summaryPartPageQty);
            }
        }
        else
        {
            TaxBookStatus::calcAndSetLastPageNo(taxReportPeriod, '', summaryPartPageQty);
        }

        TaxBookStatus::updatePageNumbers(taxReportPeriod);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVATPaymentLines</Name>
				<Source><![CDATA[
    private TaxReportTmp_IT fillVATPaymentLines()
    {
        const int PrintEmptyLine = 0;
        const int PrintAmount1 = 1;
        const int PrintAmount1WithLineBelow = 2;
        const int PrintAmount2 = 3;
        const int PrintAmount2WithLineBelow = 4;
        const int PrintAmount2WithLineAboveAndBelow = 5;

        TaxReportTmp_IT localTaxReportTmp;
        localTaxReportTmp.takeOwnershipOfTempDBTable(true);

        TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::current();
        InstalledLanguageId languageId = taxReportERContext ? taxReportERContext.parmTaxReportERContract_IT().parmLanguageId() : '';

        void createLine(
            int         _typeOfOutput,
            str         _vatPaymentTextLabel,
            str         _vatPaymentText,
            AmountMST   _vatPaymentAmount1,
            AmountMST   _vatPaymentAmount2,
            Str60       _vatPaymentSuffix)
        {
            localTaxReportTmp.clear();
            localTaxReportTmp.VATPaymentText    = languageId ? SysLabel::labelId2String(_vatPaymentTextLabel, languageId) : _vatPaymentText;
            localTaxReportTmp.VATPaymentAmount1 = _vatPaymentAmount1;
            localTaxReportTmp.VATPaymentAmount2 = _vatPaymentAmount2;
            localTaxReportTmp.VATPaymentSuffix  = _vatPaymentSuffix;

            switch (_typeOfOutput)
            {
                case PrintEmptyLine:
                case PrintAmount1:
                    localTaxReportTmp.VATPaymentAmount1ShowZeroNoYes = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount2ShowZeroNoYes = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount1LineBelowSolid = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2LineBelowSolid = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2LineAboveSolid = NoYes::No;

                case PrintAmount1WithLineBelow:
                    localTaxReportTmp.VATPaymentAmount1ShowZeroNoYes = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount2ShowZeroNoYes = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount1LineBelowSolid = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount2LineBelowSolid = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2LineAboveSolid = NoYes::No;
                    break;

                case PrintAmount2:
                    localTaxReportTmp.VATPaymentAmount1ShowZeroNoYes = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2ShowZeroNoYes = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount1LineBelowSolid = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2LineBelowSolid = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2LineAboveSolid = NoYes::No;
                    break;

                case PrintAmount2WithLineBelow:
                    localTaxReportTmp.VATPaymentAmount1ShowZeroNoYes = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2ShowZeroNoYes = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount1LineBelowSolid = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2LineBelowSolid = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount2LineAboveSolid = NoYes::No;
                    break;

                case PrintAmount2WithLineAboveAndBelow:
                    localTaxReportTmp.VATPaymentAmount1ShowZeroNoYes = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2ShowZeroNoYes = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount1LineBelowSolid = NoYes::No;
                    localTaxReportTmp.VATPaymentAmount2LineBelowSolid = NoYes::Yes;
                    localTaxReportTmp.VATPaymentAmount2LineAboveSolid = NoYes::Yes;
                    break;
            }

            localTaxReportTmp.insert();
        }

        createLine(PrintAmount1, literalStr("@SYS75133"), "@SYS75133", taxReport_IT.salesVAT(), 0, '');

        createLine(PrintAmount1WithLineBelow, literalStr("@ApplicationSuite_Localization:TaxOnEUPurchase"), "@ApplicationSuite_Localization:TaxOnEUPurchase", taxReport_IT.salesVATOnEUPurchase(), 0, '');

        createLine(PrintAmount1, literalStr("@SYS75135"), "@SYS75135", taxReport_IT.salesVATTotal(), 0, '');

        createLine(PrintAmount2, literalStr("@SYS75136"), "@SYS75136", 0, taxReport_IT.salesVATRounded(), '(+)');

        createLine(PrintEmptyLine, '', '', 0, 0,' ');

        createLine(PrintAmount1, literalStr("@SYS75137"), "@SYS75137", taxReport_IT.purchaseVAT(), 0, '');

        createLine(PrintAmount1WithLineBelow, literalStr("@ApplicationSuite_Localization:TaxOnEUPurchase"), "@ApplicationSuite_Localization:TaxOnEUPurchase", taxReport_IT.purchaseVATOnEUPurchase(), 0, '');

        createLine(PrintAmount1, literalStr("@SYS75138"), "@SYS75138", taxReport_IT.purchaseVATTotal(), 0, '');

        createLine(PrintAmount2WithLineBelow, literalStr("@SYS75139"), "@SYS75139", 0, taxReport_IT.purchaseVATRounded(), '(-)');

        createLine(PrintEmptyLine, '', '', 0, 0, '');

        if (taxReport_IT.salesVATRounded() >= taxReport_IT.purchaseVATRounded())
        {
            createLine(PrintAmount2, literalStr("@SYS75145"), "@SYS75145", 0, abs(taxReport_IT.salesVATRounded() - taxReport_IT.purchaseVATRounded()), '');
        }
        else
        {
            createLine(PrintAmount2, literalStr("@SYS75146"), "@SYS75146", 0, abs(taxReport_IT.salesVATRounded() - taxReport_IT.purchaseVATRounded()), '');
        }

        createLine(PrintEmptyLine, '', '', 0, 0, '');

        if (taxReport_IT.parmPrevVATCredit())
        {
            createLine(PrintAmount2, literalStr("@SYS75140"), "@SYS75140", 0, taxReport_IT.parmPrevVATCredit(), '(-)');
        }

        if (taxReport_IT.parmPrevVATDebit())
        {
            createLine(PrintAmount2, literalStr("@SYS75141"), "@SYS75141", 0, taxReport_IT.parmPrevVATDebit(), '(+)');
        }

        if (taxReport_IT.parmVATCompensation())
        {
            createLine(PrintAmount2, literalStr("@SYS75102"), "@SYS75102", 0, taxReport_IT.parmVATCompensation(), '(-)');
        }

        if (taxReport_IT.parmVATPrePayment())
        {
            createLine(PrintAmount2, literalStr("@SYS75103"), "@SYS75103", 0, taxReport_IT.parmVATPrePayment(), '(-)');
        }

        createLine(PrintEmptyLine, '', '',0, 0, '');

        createLine(PrintAmount2WithLineAboveAndBelow, literalStr("@SYS75142"), "@SYS75142", 0, taxReport_IT.vatBalance(), '');

        createLine(PrintEmptyLine, '', '', 0, 0,'');

        this.fillVATPaymentLinesExtendedUpdate(localTaxReportTmp, taxReport_IT);

        return localTaxReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVATPaymentLinesExtendedUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Used as an extensibility point for additional entries or updates in the localTaxReportTmp table in addition to the
    ///     standard entries provided in the fillVATPaymentLines method.
    /// </summary>
    /// <param name = "_localTaxReportTmp">
    ///     The temporary table that holds each of the newly created lines in the fillVATPaymentLines method.
    /// </param>
    /// <param name = "_report">
    ///     A private class member that is used to access different tax rates that are used to create or update line entries.
    /// </param>
    protected void fillVATPaymentLinesExtendedUpdate(TaxReportTmp_IT _localTaxReportTmp, TaxReport_IT _report)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxReportTmp_IT</Name>
				<Source><![CDATA[
    private void createTaxReportTmp_IT(Common _common, boolean _isFistInvoiceLine = false)
    {
        const int SalesTaxReportSection = 1;
        const int SalesTaxSummarySection = 2;
        const int SalesTaxPaymentSection =3;

        taxReportTmp_IT.clear();
        taxReportTmp_IT.CompanyName     = companyName;
        taxReportTmp_IT.CompanyVATNum   = companyVATNum;
        taxReportTmp_IT.VATPeriod       = strFmt(
            '%1 - %2',
            date2str(taxReport_IT.parmFromDate(), 123, 2, 2, 2, 2, 4, DateFlags::None),
            date2str(taxReport_IT.parmToDate(), 123, 2, 2, 2, 2, 4, DateFlags::None));
        taxReportTmp_IT.IsFirstInvoiceLine = _isFistInvoiceLine;

        switch (_common.TableId)
        {
            case tableNum(TmpTaxReport_IT):
                taxReportTmp_IT.initFromTmpTaxReport_IT(_common);
                taxReportTmp_IT.TableVisibility     = SalesTaxReportSection;
                taxReportTmp_IT.TaxBookId           = taxBookId;
                taxReportTmp_IT.TaxBookSectionId    = taxBookSection.TaxBookSectionId;
                taxReportTmp_IT.ReportName          = strFmt("@SYS75121", taxBookId);
                taxReportTmp_IT.VATBookVisibilityNoYes  = NoYes::Yes;
                taxReportTmp_IT.IsFillerRow         = false;
                taxReportTmp_IT.TaxBookFirstPage    = firstPageNo;
                taxReportTmp_IT.PrintEndSections    = printEndSections;
                break;
            case tableNum(TmpTaxReport_ITSummary):
                taxReportTmp_IT.initFromTmpTaxReport_ITSummary(_common);
                taxReportTmp_IT.TableVisibility     = SalesTaxSummarySection;
                taxReportTmp_IT.ReportName          = strFmt("@SYS75125");
                taxReportTmp_IT.TaxBookId           = taxBookId;
                taxReportTmp_IT.VATSummaryVisibilityNoYes   = NoYes::Yes;
                break;
            case tableNum(TaxReportTmp_IT):
                taxReportTmp_IT.initFromTaxReportTmp_IT(_common);
                taxReportTmp_IT.TableVisibility         = SalesTaxPaymentSection;
                taxReportTmp_IT.TaxPeriodName           = TaxPeriodHead::find(taxReport_IT.parmTaxPeriod()).Name;
                taxReportTmp_IT.FromDate                = taxReport_IT.parmFromDate();
                taxReportTmp_IT.ToDate                  = taxReport_IT.parmToDate();
                taxReportTmp_IT.VATPaymentAmount        = taxReport_IT.parmVATPaymentAmount();
                taxReportTmp_IT.VATPaymentDate          = taxReport_IT.parmPaymentDate();
                taxReportTmp_IT.VATPaymentBankReference = strFmt(
                    '%1/%2',
                    taxReport_IT.parmBankRef1(),
                    taxReport_IT.parmBankRef2());
                taxReportTmp_IT.ReportName                = strFmt("@SYS75093");
                taxReportTmp_IT.VATPaymentVisibilityNoYes = NoYes::Yes;
                break;
        }

        taxReportTmp_IT.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVATBookDetailsFiller</Name>
				<Source><![CDATA[
    private void insertVATBookDetailsFiller(TaxBook _taxBook, TaxBookSection _taxBookSection, boolean _printBlankPage)
    {
        if (!_printBlankPage)
        {
            select firstOnly taxReportTmp_IT
                where taxReportTmp_IT.TaxBookId        == _taxBook.TaxBookId
                   && taxReportTmp_IT.TaxBookSectionId == _taxBookSection.TaxBookSectionId
                   && taxReportTmp_IT.IsFillerRow      == false;

            if (!taxReportTmp_IT)
                return;
        }

        taxReportTmp_IT.clear();

        taxReportTmp_IT.CompanyName = companyName;
        taxReportTmp_IT.CompanyVATNum = companyVATNum;
        taxReportTmp_IT.vatPeriod = strFmt(
            '%1 - %2',
            date2str(taxReport_IT.parmFromDate(), 123, 2, 2, 2, 2, 4, DateFlags::None),
            date2str(taxReport_IT.parmToDate(), 123, 2, 2, 2, 2, 4, DateFlags::None));

        taxReportTmp_IT.ReportName                      = strFmt("@SYS75121", _taxBook.TaxBookId);
        taxReportTmp_IT.TaxBookSection                  = _taxBookSection.RecId;
        taxReportTmp_IT.vatBookSectionName              = _taxBookSection.Name;
        taxReportTmp_IT.TableVisibility                 = 1;
        taxReportTmp_IT.IsFillerRow                     = true;
        taxReportTmp_IT.TaxBookType                     = _taxBook.TaxBookType;
        taxReportTmp_IT.TaxBook                         = _taxBook.RecId;
        taxReportTmp_IT.TaxBookId                       = _taxBook.TaxBookId;
        taxReportTmp_IT.TaxBookSectionId                = _taxBookSection.TaxBookSectionId;
        taxReportTmp_IT.VATBookVisibilityNoYes          = NoYes::Yes;
        taxReportTmp_IT.TaxBookFirstPage                = firstPageNo;
        taxReportTmp_IT.PrintEndSections                = printEndSections;
        taxReportTmp_IT.TaxBookSectionPageNo            = 1;

        container competencePeriodsCon = TaxReportERHelper_IT::useCompetencePeriod() ?
                    [TaxReportCompetencePeriod_IT::Default, TaxReportCompetencePeriod_IT::Previous, TaxReportCompetencePeriod_IT::Actual] :
                    [TaxReportCompetencePeriod_IT::Default];

        for (int i = 1; i <= conLen(competencePeriodsCon); i++)
        {
            taxReportTmp_IT.CompetencePeriod = conPeek(competencePeriodsCon,i);
            taxReportTmp_IT.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVATBookDetailsFillerEUSales</Name>
				<Source><![CDATA[
    private void insertVATBookDetailsFillerEUSales(TaxBook _taxBook, boolean _printBlankPage)
    {
        TaxBook taxBookLocal;
        TaxBookSection taxBookSectionLocal;

        while select taxbookLocal
            order by TaxBookType desc, PrintEndSections, TaxBookId
            join taxBookSectionLocal
            where taxBookLocal.TaxPeriod == taxReportPeriod.TaxPeriod
                && taxBookLocal.SalesTaxBookId == _taxBook.TaxBookId
                && taxBookLocal.RecId == taxBookSectionLocal.TaxBook
        {
            this.insertVATBookDetailsFiller(_taxBook, taxBookSectionLocal, _printBlankPage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations())
        {
            TaxRegistration taxRegistration = TaxRegistration::find(
                MultipleTaxIdReportingHelper::getTaxRegistrationRecIdFromTaxPeriod(taxReportPeriod.TaxPeriod));
            LogisticsLocation logisticsLocation = LogisticsLocation::find(
                DirPartyLocation::findRec(taxRegistration.DirPartyLocation).Location);

            companyName = logisticsLocation.Description;
            companyVATNum = taxRegistration.RegistrationNumber;
        }
        else
        {
            CompanyInfo companyInfo = CompanyInfo::find();

            companyName = companyInfo.name();
            companyVATNum = companyInfo.CoRegNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (TaxReportSkipReportTransactionFlight_IT::instance().isEnabled())
        {
            skipReportTransaction = true;
        }

        return skipReportTransaction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>