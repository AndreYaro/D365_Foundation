<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobPeggingTreePlanEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobPeggingTreePlanEvent</c> class is used to plan a pegging tree of a kanban job.
/// </summary>
public class KanbanJobPeggingTreePlanEvent
{
    List        kanbanList;
    KanbanJob   kanbanJob;
    boolean     planCurrentKanban;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the planning result from a specified <c>KanbanJobAutoPlan</c> object.
    /// </summary>
    /// <param name="_kanbanJobAutoPlan">
    /// The <c>KanbanJobAutoPlan</c> object.
    /// </param>
    /// <param name="_kanban">
    /// The <c>Kanban</c> record.
    /// </param>
    /// <param name="_kanbanJobRecId">
    /// The <c>KanbanJob</c> record ID; optional.
    /// </param>
    /// <returns>
    /// true if all jobs are planned; otherwise, false.
    /// </returns>
    private boolean getResults(
        KanbanJobAutoPlan _kanbanJobAutoPlan,
        Kanban            _kanban,
        KanbanJobRefRecId _kanbanJobRecId = 0)
    {
        Kanban                          kanbanLocal;
        KanbanJob                       kanbanJobLocal;
        KanbanJobPlanStatus             kanbanJobPlanStatus;
        KanbanJobSchedulePlannedPeriod  plannedPeriod;
        boolean                         result = true;

        // retrieve planning results
        Map mapKanbanJobsPlanStatus = Map::create(_kanbanJobAutoPlan.mapKanbanJobsPlanStatus());

        // add still unplanned jobs to result list (may have not been considered at all by auto planning because of rule setup)
        while select Sequence, PlanActivityName, DueDateTime from kanbanJobLocal
            where kanbanJobLocal.Kanban    == _kanban.RecId
               && kanbanJobLocal.Status    == LeanKanbanJobStatus::NotPlanned
               && kanbanJobLocal.Type      == LeanKanbanJobType::Process
               && (kanbanJobLocal.RecId    == _kanbanJobRecId
               ||  !_kanbanJobRecId)
        {
            if (!mapKanbanJobsPlanStatus.exists([_kanban.KanbanId,kanbanJobLocal.Sequence]))
            {
                mapKanbanJobsPlanStatus.insert([_kanban.KanbanId,kanbanJobLocal.Sequence],
                                                [KanbanJobPlanStatus::Failed,kanbanJobLocal,_kanban,dateNull()]);
            }
        }

        MapEnumerator me = mapKanbanJobsPlanStatus.getEnumerator();
        while (me.moveNext())
        {
            [kanbanJobPlanStatus,kanbanJobLocal,kanbanLocal,plannedPeriod] = me.currentValue();
            if (kanbanJobPlanStatus == KanbanJobPlanStatus::Planned)
            {
                info(strfmt("@SYS329646",
                        kanbanLocal.KanbanId,
                        kanbanLocal.ItemId,
                        kanbanJobLocal.PlanActivityName,
                        plannedPeriod,
                        DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(kanbanJobLocal.DueDateTime,DateTimeUtil::getCompanyTimeZone()))));
            }
            else
            {
                result = false;
                error(strfmt("@SYS329647",
                        kanbanLocal.KanbanId,
                        kanbanLocal.ItemId,
                        kanbanJobLocal.PlanActivityName,
                        DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(kanbanJobLocal.DueDateTime,DateTimeUtil::getCompanyTimeZone()))));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
    public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanList</Name>
				<Source><![CDATA[
    public List parmKanbanList(List _kanbanList = kanbanList)
    {
        kanbanList = _kanbanList;
        return kanbanList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanCurrentKanban</Name>
				<Source><![CDATA[
    public boolean parmPlanCurrentKanban(boolean _planCurrentKanban = planCurrentKanban)
    {
        planCurrentKanban = _planCurrentKanban;
        return planCurrentKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planPeggingTreeFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Plans the pegging tree of the kanban to which the kanban job belongs.
    /// </summary>
    /// <param name="_kanban">
    /// A <c>Kanban</c> table buffer.
    /// </param>
    /// <param name="_planCurrentKanban">
    /// A Boolean value that indicates whether the kanban jobs that are contained in the current kanban
    /// should also be planned.
    /// </param>
    /// <returns>
    /// true if the planning operation was successful; otherwise, false.
    /// </returns>
    private boolean planPeggingTreeFromKanban(
        Kanban  _kanban,
        boolean _planCurrentKanban)
    {
        boolean                         ok = _kanban.checkValid(_kanban.RecId);

        if (ok)
        {
            // We will usually skip the top kanban that starts the call
            if (_planCurrentKanban)
            {
                KanbanJobAutoPlan kanbanJobAutoPlan = KanbanJobAutoPlan::newKanban(_kanban, true);
                kanbanJobAutoPlan.run();
                this.getResults(kanbanJobAutoPlan,_kanban);
            }

            // Explore the pegging tree child nodes (Kanban -> KanbanJobPickingList or KanbanJobIssue)
            ReqPeggingTreeNode treeNode = ReqPeggingTreeNode::newStandard(_kanban);
            List children = treeNode.listChildren();
            ListEnumerator le = children.getEnumerator();
            while (   ok
                   && le.moveNext())
            {
                ok = this.planPeggingTreeFromPickingOrIssue(le.current());
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planPeggingTreeFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Plans a specified kanban job and all the upstream jobs of the same kanban.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record to plan.
    /// </param>
    /// <returns>
    /// true if the planning operation is successful; otherwise, false.
    /// </returns>
    private boolean planPeggingTreeFromKanbanJob(KanbanJob _kanbanJob)
    {
        KanbanJob                       kanbanJobLocal;
        boolean                         ok = _kanbanJob.checkValid(_kanbanJob.RecId);

        if (ok)
        {
            Kanban kanbanLocal = _kanbanJob.kanban();

            // plan specified and upstream jobs of same kanban
            while select kanbanJobLocal
                order by Sequence desc
                where kanbanJobLocal.Kanban    == kanbanLocal.RecId
                    && kanbanJobLocal.Status   == LeanKanbanJobStatus::NotPlanned
                    && kanbanJobLocal.Type     == LeanKanbanJobType::Process
                    && kanbanJobLocal.Sequence <= _kanbanJob.Sequence
            {
                KanbanJobAutoPlan kanbanJobAutoPlan = KanbanJobAutoPlan::newKanbanJob(kanbanJobLocal,true);
                kanbanJobAutoPlan.run();
                ok = this.getResults(kanbanJobAutoPlan,kanbanLocal,kanbanJobLocal.RecId);
                if (!ok)
                {
                    break;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planPeggingTreeFromPickingOrIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Plans the pegging tree of a kanban job picking list or kanban job issue.
    /// </summary>
    /// <param name="_common">
    /// A record buffer of a kanban children pegging tree node.
    /// </param>
    /// <returns>
    /// true if the planning operation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// <c>KanbanJobPickingList</c> records and <c>KanbanJobIssue</c> records are kanban children pegging
    /// tree nodes.A failure when planning any branch of the tree will stop the planning of the rest of the
    /// tree.
    /// </remarks>
    private boolean planPeggingTreeFromPickingOrIssue(Common _common)
    {
        boolean                 ok = true;

        if (   _common.TableId != tablenum(KanbanJobPickingList)
            && _common.TableId != tablenum(KanbanJobIssue))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Explore the pegging tree child nodes (KanbanJobPickingList or KanbanJobIssue -> Kanban)
        ReqPeggingTreeNode treeNode = ReqPeggingTreeNode::newStandard(_common);
        List               children = treeNode.listChildren();
        ListEnumerator     le       = children.getEnumerator();
        while (ok && le.moveNext())
        {
            Common childBuffer = le.current();
            ok = this.planPeggingTreeFromKanban(childBuffer, true);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the planning of the event kanbans in a pegging tree.
    /// </summary>
    /// <returns>
    /// true if the planning operation was successful; otherwise, false.
    /// </returns>
    public boolean run()
    {
        boolean         ok = true;

        if (kanbanJob)
        {
            try
            {
                // plan job and upstream jobs of the kanban first
                ok = this.planPeggingTreeFromKanbanJob(kanbanJob) && ok;
            }
            catch
            {
                ok = false;
            }
        }

        if (   ok
            && kanbanList)
        {
            ListEnumerator le = kanbanList.getEnumerator();

            while (le.moveNext())
            {
                Kanban kanban = le.current();
                try
                {
                    // plan the kanbans separately (not as part of the same transaction)
                    ok = this.planPeggingTreeFromKanban(kanban, planCurrentKanban) && ok;
                }
                catch
                {
                    ok = false;
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanJobPeggingTreePlanEvent construct()
    {
        return new KanbanJobPeggingTreePlanEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        KanbanJobPeggingTreePlanEvent   kanbanJobPeggingTreePlanEvent = KanbanJobPeggingTreePlanEvent::construct();
        List                            kanbanList                    = _args.object();
        boolean                         planCurrentKanban             = false;

        // Obtain the 'Plan current kanban' parameter
        if (   _args.parmEnumType() == enumnum(NoYes)
            && _args.parmEnum()     == NoYes::Yes)
        {
            planCurrentKanban = true;
        }

        kanbanJobPeggingTreePlanEvent.parmPlanCurrentKanban(planCurrentKanban);
        kanbanJobPeggingTreePlanEvent.parmKanbanList(kanbanList);
        kanbanJobPeggingTreePlanEvent.parmKanbanJob(null);
        kanbanJobPeggingTreePlanEvent.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>KanbanJobPeggingTreePlanEvent</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A buffer of the <c>KanbanJob</c> table.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanJobPeggingTreePlanEvent</c> class.
    /// </returns>
    public static KanbanJobPeggingTreePlanEvent newKanbanJob(KanbanJob _kanbanJob)
    {
        KanbanJobPeggingTreePlanEvent   kanbanJobPeggingTreePlanEvent = KanbanJobPeggingTreePlanEvent::construct();
        List                            listKanban                    = new List(Types::Record);

        listKanban.addEnd(_kanbanJob.kanban());
        kanbanJobPeggingTreePlanEvent.parmKanbanJob(_kanbanJob);
        kanbanJobPeggingTreePlanEvent.parmKanbanList(listKanban);
        kanbanJobPeggingTreePlanEvent.parmPlanCurrentKanban(false);

        return kanbanJobPeggingTreePlanEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
