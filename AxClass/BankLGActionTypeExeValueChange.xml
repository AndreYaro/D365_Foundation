<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGActionTypeExeValueChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGActionTypeExeValueChange</c> class is used to execute the increase value action and
///    the decrease value action in the letter of guarantee (LG).
/// </summary>
class BankLGActionTypeExeValueChange extends BankLGActionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Does the execution action "Increase value" / "Decrease value" based on the parameters.
    /// </summary>
    protected void doAction()
    {
        BankLGLedgerJournalPost                 bankLGLedgerJournalPost;
        BankDocumentFacilityAgreementLineType   bankDocumentFacilityAgreementLineType;

        ttsbegin;

        // Update facility agreement
        bankDocumentFacilityAgreementLineType = BankDocumentFacilityAgreementLineType::construct(
            bankLGGuarantee.FacilityAgreementLine,
            true,
            true);

        switch (actionParms.getActionType())
        {
            case BankLGAllActionType::ExecuteIncreaseValue:
                bankDocumentFacilityAgreementLineType.withdrawAmount(bankLGAction.BankAccountCurrencyGuaranteeAmount - bankLGGuarantee.BankAccountCurrencyGuaranteeAmount);
                break;
            case BankLGAllActionType::ExecuteDecreaseValue:
                bankDocumentFacilityAgreementLineType.releaseAmount(bankLGGuarantee.BankAccountCurrencyGuaranteeAmount - bankLGAction.BankAccountCurrencyGuaranteeAmount);
                break;
        }

        // Update LG
        bankLGGuarantee.BankAccountCurrencyGuaranteeAmount  =  bankLGAction.BankAccountCurrencyGuaranteeAmount;
        bankLGGuarantee.BankAccountCurrencyExpenseAmount    += actionParms.parmExpenseCur();
        switch (actionParms.getActionType())
        {
            case BankLGAllActionType::ExecuteIncreaseValue:
                bankLGGuarantee.BankAccountCurrencyMarginAmount += actionParms.parmMarginCur();
                break;
            case BankLGAllActionType::ExecuteDecreaseValue:
                bankLGGuarantee.BankAccountCurrencyMarginAmount -= actionParms.parmMarginCur();
                break;
        }
        bankLGGuarantee.updateStatus(actionParms.getActionType());
        bankLGGuarantee.update();

        // Post
        if (actionParms.parmExpenseCur()    != 0.0
            || actionParms.parmMarginCur()  != 0.0)
        {
            bankLGLedgerJournalPost = BankLGLedgerJournalPost::constructFromLG(bankLGGuarantee);

            switch (actionParms.getActionType())
            {
                case BankLGAllActionType::ExecuteIncreaseValue:
                    // Increase value commission
                    bankLGLedgerJournalPost.addExpenseTrans(
                        actionParms.parmExpenseCur(),
                        "@SYS314680");
                    // Margin
                    bankLGLedgerJournalPost.addMarginTrans(
                        actionParms.parmMarginCur(),
                        "@SYS5446");
                    break;
                case BankLGAllActionType::ExecuteDecreaseValue:
                    // Decrease value commission
                    bankLGLedgerJournalPost.addExpenseTrans(
                        actionParms.parmExpenseCur(),
                        "@SYS314681");
                    // Margin
                    bankLGLedgerJournalPost.addMarginTrans(
                        -actionParms.parmMarginCur(),
                        "@SYS5446");
                    break;
            }

            bankLGLedgerJournalPost.run();
        }

        // Update LG action
        bankLGAction.ExecutionAction                    = BankLGType::actionToExecutionAction(actionParms.getActionType());
        bankLGAction.ExecutionDateTime                  = DateTimeUtil::getSystemDateTime();
        bankLGAction.BankAccountCurrencyMarginAmount    = actionParms.parmMarginCur();
        bankLGAction.BankAccountCurrencyExpenseAmount   = actionParms.parmExpenseCur();
        if (bankLGLedgerJournalPost)
        {
            bankLGAction.LedgerJournalTable = bankLGLedgerJournalPost.getLedgerJournalTable().JournalNum;
        }
        bankLGAction.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the action parameters.
    /// </summary>
    /// <returns>
    ///     True if all parameters are valid; otherwise, false.
    /// </returns>
    protected boolean validateActionParms()
    {
        boolean ret = super();

        if (ret)
        {
            switch (actionParms.getActionType())
            {
                case BankLGAllActionType::ExecuteIncreaseValue:
                    if (actionParms.parmMarginCur()     < 0.0
                        || actionParms.parmExpenseCur() < 0.0)
                    {
                        ret = false;
                    }
                    break;

                case BankLGAllActionType::ExecuteDecreaseValue:
                    if (actionParms.parmMarginCur()     < 0.0
                        || actionParms.parmMarginCur()  > bankLGGuarantee.BankAccountCurrencyMarginAmount
                        || actionParms.parmExpenseCur() < 0.0)
                    {
                        ret = false;
                    }
                    break;

                default:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>