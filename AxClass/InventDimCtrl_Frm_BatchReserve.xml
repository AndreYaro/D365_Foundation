<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_BatchReserve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class for inventDimCtrl for batch reserve
/// controls dimensions on grid
/// </summary>
class InventDimCtrl_Frm_BatchReserve extends InventDimCtrl_Frm_OnHand
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initDimParmEnabled</Name>
				<Source><![CDATA[
        public InventDimParm initDimParmEnabled()
    {
        InventDimParm ret = super();

        ret.InventBatchIdFlag   = true;
        ret.setAllProductDimensions();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// initlizes the class from calling object recordset
    /// </summary>
    public void initFromCaller()
    {
        InventDimParm           lclDimParmVisibleGrid;
        str                     callingElementName = callingElement.name();
        boolean                 overrideSetup = false;

        movement = null;
        lclDimParmVisibleGrid.ItemIdFlag    = true;

        if (this.movement())
        {
            this.setUnits('',this.movement());

            dimParmLockedRightClick.initConsistentDimensionsGeneral();

            dimParmLockedRightClick.InventBatchIdFlag   = true;
            dimParmLockedRightClick.setAllProductDimensions();

            this.movement().inventDimGroupSetup().inventDimParmActivePrimaryDimension(lclDimParmVisibleGrid);

            if (this.sysLastValueExist())
            {
                overrideSetup = true;
                lclDimParmVisibleGrid = InventDimParm::orParms(dimParmVisibleGrid, lclDimParmVisibleGrid);
            }

            lclDimParmVisibleGrid.ItemIdFlag            = false;
            lclDimParmVisibleGrid.InventBatchIdFlag     = true;
            lclDimParmVisibleGrid.ClosedQtyFlag         = true;
        }

        this.parmDimParmVisibleGrid(lclDimParmVisibleGrid, overrideSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// intializes the query
    /// </summary>
    /// <param name="_inventSum_DS">Form datasource</param>
    public void initQueryInventSum(FormDataSource _inventSum_DS)
    {
        InventSum::queryAddSumFields(_inventSum_DS.query().
            dataSourceTable(tablenum(InventSum)));

        InventReservationCriteriaBuilder criteriaBuilder = InventReservationCriteriaBuilder::newMovement(this.movement());
        criteriaBuilder.parmIgnoreBatchAttributes(true);
        criteriaBuilder.buildCriteria().applyToOnHand(_inventSum_DS.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryTmpBatchSel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update InventDim form control query.
    /// </summary>
    /// <param name="_inventSum_DS">
    /// InventSum for which to update query
    /// </param>
    /// <param name="_inventDim_DS">
    /// InventDim for which to update query
    /// </param>
    /// <param name="_inventLocId">
    /// InventLocationId for which to update query
    /// </param>
    /// <remarks>
    /// Update the inventDim as it effects the form
    /// TmpPdsBatchAttriSelect datasources
    /// </remarks>
    public void modifyQueryTmpBatchSel(
        FormDataSource      _inventSum_DS,
        FormDataSource      _inventDim_DS,
        InventLocationId    _inventLocId = ''
        )
    {
        boolean                 doHint;
        InventDimParm           inventDimParmRange;

        #COSNumbers

        QueryBuildDataSource qbsSum = _inventSum_DS.query().dataSourceName(_inventSum_DS.name());

        qbsSum.sortClear();

        QueryBuildRange criteriaClosed = SysQuery::findOrCreateRange(
                                            qbsSum,
                                            fieldnum(InventSum,Closed));
        if (dimParmVisibleGrid.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        QueryBuildRange criteriaClosedQty = SysQuery::findOrCreateRange(
                                                qbsSum,
                                                fieldnum(InventSum,ClosedQty));

        if (dimParmVisibleGrid.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        QueryBuildDataSource qbsDim = _inventDim_DS.query().dataSourceName(_inventDim_DS.name());

        if (_inventLocId != '')
        {
            QueryBuildRange criteriaWH = SysQuery::findOrCreateRange(
                                            qbsDim,
                                            fieldnum(InventDim, InventLocationId));

            criteriaWH.value(queryValue(_inventLocId));
        }
        qbsDim.sortClear();

        doHint = InventDim::queryAddHintFromCaller(qbsDim,callingElement.args())
                    && doHint;

        qbsSum.orderMode(OrderMode::GroupBy);
        qbsSum.addSortField(fieldnum(InventSum,ItemId));

        dimParmLockedRightClick.queryAddSortField(qbsDim);
        if (!dimParmVisibleGrid.queryAddSortField(qbsDim))
        {
            qbsDim.addSortField(fieldnum(InventDim, TableId));
            qbsDim.orderMode(OrderMode::GroupBy);
        }

        if (!doHint
            && ! inventDimParmRange.isFlagSelective()
            && ! dimParmVisibleGrid.ClosedFlag)
        {
            qbsSum.addSortIndex(indexnum(InventSum,ClosedItemDimIdx));
            qbsSum.indexIsHint(true);

            qbsDim.addSortIndex(indexnum(InventDim,DimIdIdx));
            qbsDim.indexIsHint(true);

            doHint = true;
        }

        if (doHint)
        {
            _inventDim_DS.query().literals(#2);
        }
        else
        {
            _inventDim_DS.query().literals(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static InventDimCtrl_Frm_BatchReserve construct()
    {
        return new InventDimCtrl_Frm_BatchReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class, expects a formrun of the form calling
    /// </summary>
    /// <param name="_formRun">Form Run of form calling</param>
    /// <returns>returns instance</returns>
    public static InventDimCtrl_Frm_BatchReserve newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_OnHand  inventDimCtrl =
            InventDimCtrl_Frm_BatchReserve::construct();
        InventDimAxFormAdapter adapter =
            InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
