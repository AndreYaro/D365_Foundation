<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatAmountCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates Intrastat amounts.
/// </summary>
/// <remarks>
/// Calculation method is defined by the enum <c>IntrastatAmountCalcMethod</c> value.
/// </remarks>
abstract class IntrastatAmountCalc
{
    AmountMST accountingCurrencyAmount;
    AmountCur transactionCurrencyAmount;

    CurrencyCode transactionCurrency;

    boolean isLegalEntityInEEU;
    boolean useFulfillmentDate;
    IntrastatCalcAmountMSTByExchType calcByExchType;
    str exchRateErrorMessage;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates amounts from source header and line.
    /// </summary>
    /// <param name="_headerSource">
    /// <c>CustVendInvoiceJour</c> buffer.
    /// </param>
    /// <param name="_lineSource">
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws exception if source is not customer, vendor or project invoice or packing slip.
    /// </exception>
    public void calc(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        switch (_headerSource.TableId)
        {
            case tableNum(CustInvoiceJour):
            case tableNum(VendInvoiceJour):
            case tableNum(ProjInvoiceJour):
                this.calcInvoiceAmount(_headerSource, _lineSource);
                break;

            case tableNum(CustPackingSlipJour):
            case tableNum(VendPackingSlipJour):
                this.calcPackingSlipAmount(_headerSource, _lineSource);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts class instance to the string format.
    /// </summary>
    /// <returns>
    /// Class instance in the string format.
    /// </returns>
    public str toString()
    {
        const str Prefix = '\%1 = \%2';

        str toString =
            strFmt(Prefix, methodStr(IntrastatAmountCalc, parmAccountingCurrencyAmount), this.parmAccountingCurrencyAmount()) +
            ' ' +
            strFmt(Prefix, methodStr(IntrastatAmountCalc, parmTransactionCurrency), this.parmTransactionCurrency()) +
            ' ' +
            strFmt(prefix, methodStr(IntrastatAmountCalc, parmTransactionCurrencyAmount), this.parmTransactionCurrencyAmount());

        if (isLegalEntityInEEU)
        {
            toString += ' ' + strFmt(Prefix, methodStr(IntrastatAmountCalc, parmExchRateErrorMessage), this.parmExchRateErrorMessage());
        }

        return toString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTransImplFromSourceDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>CustVendInvoiceTrans</c> implementation from source document line.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// <c>SourceDocumentLine</c> buffer.
    /// </param>
    /// <returns>
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </returns>
    public static CustVendInvoiceTrans getInvoiceTransImplFromSourceDocLine(SourceDocumentLine _sourceDocumentLine)
    {
        CustVendInvoiceTrans invoiceTrans;

        if (_sourceDocumentLine.TypeEnumName == enumStr(SourceDocumentLine_CustomerInvoice) && _sourceDocumentLine.TypeEnumValue == SourceDocumentLine_CustomerInvoice::CustomerInvoiceLine)
        {
            invoiceTrans = new DictTable(tableNum(CustInvoiceTrans)).makeRecord();
        }
        else if (_sourceDocumentLine.TypeEnumName == enumStr(SourceDocumentLine_VendorInvoice) && _sourceDocumentLine.TypeEnumValue == SourceDocumentLine_VendorInvoice::VendorInvoiceLine)
        {
            invoiceTrans = new DictTable(tableNum(VendInvoiceTrans)).makeRecord();
        }

        return invoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountMST parmAccountingCurrencyAmount(AmountMST _accountingCurrencyAmount = accountingCurrencyAmount)
    {
        accountingCurrencyAmount = _accountingCurrencyAmount;
        return accountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRateErrorMessage</Name>
				<Source><![CDATA[
    public str parmExchRateErrorMessage(str _exchRateErrorMessage = exchRateErrorMessage)
    {
        exchRateErrorMessage = _exchRateErrorMessage;
        return exchRateErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrency(CurrencyCode _transactionCurrency = transactionCurrency)
    {
        transactionCurrency = _transactionCurrency;
        return transactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountCur parmTransactionCurrencyAmount(AmountCur _transactionCurrencyAmount = transactionCurrencyAmount)
    {
        transactionCurrencyAmount = _transactionCurrencyAmount;
        return transactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcByExchType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates amount in the accounting currency using exchange rate type.
    /// </summary>
    /// <param name="_amountCur">
    /// Amount in the transaction currency.
    /// </param>
    /// <param name="_lineSource">
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Amount in the accounting currency.
    /// </returns>
    protected AmountMST calcByExchType(AmountCur _amountCur, CustVendInvoiceTrans _lineSource)
    {
        TransDate transDate;
        AmountMST amount;

        if (useFulfillmentDate && _lineSource.IntrastatFulfillmentDate_HU)
        {
            transDate = _lineSource.IntrastatFulfillmentDate_HU;
        }
        else
        {
            transDate = _lineSource.InvoiceDate;
        }

        amount = calcByExchType.calc(_amountCur, _lineSource.CurrencyCode, transDate);

        if (!exchRateErrorMessage)
        {
            exchRateErrorMessage = calcByExchType.exchRateErrorMessage();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates invoice amount in the accounting currency.
    /// </summary>
    /// <param name="_headerSource">
    /// <c>CustVendInvoiceJour</c> buffer.
    /// </param>
    /// <param name="_lineSource">
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Invoice amount in the accounting currency.
    /// </returns>
    abstract protected AmountMST calcInvoiceAccountingAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates invoice amount in the transaction currency.
    /// </summary>
    /// <param name="_headerSource">
    /// <c>CustVendInvoiceJour</c> buffer.
    /// </param>
    /// <param name="_lineSource">
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Invoice amount in the transaction currency.
    /// </returns>
    abstract protected AmountCur calcInvoiceTransactionAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingSlipAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates packing slip amount in the accounting currency.
    /// </summary>
    /// <param name="_headerSource">
    /// <c>CustVendInvoiceJour</c> buffer.
    /// </param>
    /// <param name="_lineSource">
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Packing slip amount in the accounting currency.
    /// </returns>
    abstract protected AmountMST calcPackingSlipAccountingAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingSlipTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates packing slip amount in the transaction currency.
    /// </summary>
    /// <param name="_headerSource">
    /// <c>CustVendInvoiceJour</c> buffer.
    /// </param>
    /// <param name="_lineSource">
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Packing slip amount in the transaction currency.
    /// </returns>
    abstract protected AmountCur calcPackingSlipTransactionAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedValue</Name>
				<Source><![CDATA[
    protected container getCachedValue(container _key)
    {
        return classFactory.globalObjectCache().find(this.cacheScope(), _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        IntrastatParameters intrastatParm = IntrastatParameters::find();
        isLegalEntityInEEU = IntrastatParameters::isLegalEntityInEEU();

        if (isLegalEntityInEEU && intrastatParm.IntrastatExchRateType)
        {
            useFulfillmentDate = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU])
                && intrastatParm.IntrastatCalcMethod_HU == IntrastatCalcMethod_HU::FulfillmentOfContract;

            calcByExchType = IntrastatCalcAmountMSTByExchType::newFromParameters(intrastatParm.IntrastatExchRateType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCachedValue</Name>
				<Source><![CDATA[
    protected void setCachedValue(container _key, container _value)
    {
        classFactory.globalObjectCache().insert(this.cacheScope(), _key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceTransactionCurrency</Name>
				<Source><![CDATA[
    private void initInvoiceTransactionCurrency(CustVendInvoiceTrans _lineSource)
    {
        transactionCurrency = _lineSource.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPackingSlipTransactionCurrency</Name>
				<Source><![CDATA[
    private void initPackingSlipTransactionCurrency(CustVendInvoiceTrans _lineSource)
    {
        CustPackingSlipTrans custPackingSlipTrans;
        VendPackingSlipTrans vendPackingSlipTrans;

        if (isLegalEntityInEEU)
        {
            transactionCurrency = _lineSource.CurrencyCode;
        }
        else
        {
            if (_lineSource.StockedProduct)
            {
                transactionCurrency = InventTransReference::newFromInventTrans(
                            InventTrans::findTransId(_lineSource.InventTransId)).currencyCode();
            }
            else
            {
                if (_lineSource.TableId == tableNum(CustPackingSlipTrans))
                {
                    custPackingSlipTrans = _lineSource;
                    transactionCurrency = custPackingSlipTrans.salesLine().CurrencyCode;
                }
                else
                {
                    vendPackingSlipTrans = _lineSource;
                    transactionCurrency = vendPackingSlipTrans.purchLine().CurrencyCode;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private GlobalObjectCacheScope cacheScope()
    {
        return classId2Name(classIdGet(this)) + '_' + curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceAmount</Name>
				<Source><![CDATA[
    private void calcInvoiceAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        this.initInvoiceTransactionCurrency(_lineSource);

        transactionCurrencyAmount = this.calcInvoiceTransactionAmount(_headerSource, _lineSource);
        accountingCurrencyAmount = this.calcInvoiceAccountingAmount(_headerSource, _lineSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingSlipAmount</Name>
				<Source><![CDATA[
    private void calcPackingSlipAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        CustInvoicePackingSlipQuantityMatch custInvoicePackingSlipQuantityMatch;
        VendInvoicePackingSlipQuantityMatch vendInvoicePackingSlipQuantityMatch;

        Qty totalQtyMatched;
        Qty totalQtyDeliveredWithoutInvoice;
        Qty lineSourceQty;

        AmountCur totalTransAmountInvoiced;
        AmountMST totalAccAmountInvoiced;

        AmountCur totalTransAmountDeliveredWithoutInvoice;
        AmountMST totalAccAmountDeliveredWithoutInvoice;

        void calcAmountInvoiced(SourceDocumentLine _sourceDocumentLine, Qty _qtyMatched)
        {
            transactionCurrencyAmount = 0;
            accountingCurrencyAmount = 0;            

            CustVendInvoiceTrans invoiceTrans = IntrastatAmountCalc::getInvoiceTransImplFromSourceDocLine(_sourceDocumentLine);

            if (invoiceTrans.TableId == tableNum(CustVendInvoiceTrans))
            {
                return;
            }

            Qty qtyInvoiced;

            while select invoiceTrans
                where invoiceTrans.SourceDocumentLine == _sourceDocumentLine.RecId
            {
                if (!transactionCurrency)
                {
                    transactionCurrency = invoiceTrans.CurrencyCode;
                }

                CustVendInvoiceJour invoiceJour = invoiceTrans.CustVendInvoiceTrans::custVendInvoiceJour();

                qtyInvoiced += invoiceTrans.StockedProduct ? invoiceTrans.InventQty : invoiceTrans.Qty;

                transactionCurrencyAmount += this.calcInvoiceTransactionAmount(invoiceJour, invoiceTrans);
                accountingCurrencyAmount += this.calcInvoiceAccountingAmount(invoiceJour, invoiceTrans);
            }

            if (qtyInvoiced)
            {
                totalTransAmountInvoiced += (transactionCurrencyAmount / qtyInvoiced) * _qtyMatched;
                totalAccAmountInvoiced += (accountingCurrencyAmount / qtyInvoiced) * _qtyMatched;
            }

            totalQtyMatched += _qtyMatched;
        }

        this.initPackingSlipTransactionCurrency(_lineSource);

        if (_lineSource.TableId == tableNum(CustPackingSlipTrans))
        {
            SourceDocumentLine sourceDocumentLine;

            sourceDocumentLine.TypeEnumName = enumStr(SourceDocumentLine_CustomerInvoice);
            sourceDocumentLine.TypeEnumValue = SourceDocumentLine_CustomerInvoice::CustomerInvoiceLine;

            while select InvoiceSourceDocumentLine, InventQuantity, Quantity from custInvoicePackingSlipQuantityMatch
                where custInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine == _lineSource.SourceDocumentLine
            {
                sourceDocumentLine.RecId = custInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine;
                calcAmountInvoiced(
                    sourceDocumentLine,
                    _lineSource.StockedProduct ? custInvoicePackingSlipQuantityMatch.InventQuantity : custInvoicePackingSlipQuantityMatch.Quantity);
            }
        }
        else
        {
            while select InvoiceSourceDocumentLine, InventQuantity, Quantity from vendInvoicePackingSlipQuantityMatch
                where vendInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine == _lineSource.SourceDocumentLine
            {
                calcAmountInvoiced(
                    SourceDocumentLine::find(vendInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine),
                    _lineSource.StockedProduct ? vendInvoicePackingSlipQuantityMatch.InventQuantity : vendInvoicePackingSlipQuantityMatch.Quantity);
            }
        }

        lineSourceQty = _lineSource.StockedProduct ? _lineSource.InventQty :_lineSource.Qty;

        totalQtyDeliveredWithoutInvoice = lineSourceQty - totalQtyMatched;

        if (totalQtyDeliveredWithoutInvoice && lineSourceQty)
        {
            transactionCurrencyAmount = this.calcPackingSlipTransactionAmount(_headerSource, _lineSource);
            accountingCurrencyAmount = this.calcPackingSlipAccountingAmount(_headerSource, _lineSource);

            totalTransAmountDeliveredWithoutInvoice = (transactionCurrencyAmount / lineSourceQty) * totalQtyDeliveredWithoutInvoice;
            totalAccAmountDeliveredWithoutInvoice = (accountingCurrencyAmount / lineSourceQty) * totalQtyDeliveredWithoutInvoice;
        }

        transactionCurrencyAmount = totalTransAmountDeliveredWithoutInvoice + totalTransAmountInvoiced;
        accountingCurrencyAmount = totalAccAmountDeliveredWithoutInvoice + totalAccAmountInvoiced;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>