<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementExchRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementExchRate</c> class represents exchange rates during settlement.
/// All rates are calculated based on the date of the credit transaction.
/// </summary>
public class SettlementExchRate
{
    // Calculation is based upon those variables
    private DataAreaId debitCompany;
    private CurrencyCode debitCompanyCurrency;
    private CurrencyCode transDebitCurrency;
    private CrossExchRate specTransDebitCrossRate;
    private DataAreaId creditCompany;
    private CurrencyCode creditCompanyCurrency;
    private CurrencyCode transCreditCurrency;
    private TransDate transCreditDate;
    private ExchRate creditTransExchRateCurToMst;
    private ExchRate creditTransExchRateCurToReporting;
    private CurrencyCode debitReportingCurrency;
    private CurrencyCode creditReportingCurrency;

    // Result of the calculation
    private ExchRate paymentToInvoice;
    private ExchRate debitCurToDebitMstPrimary;
    private ExchRate debitCurToDebitMstSecond;
    private ExchRate creditMstToDebitMst;
    private ExchRate creditReportingToDebitReporting;
    private ExchRate debitCurToDebitMstCombined;
    private ExchRate debitCurToReporting;
    private boolean isCreditExchRateCurToMstAlwaysUsed;
    private boolean isCreditExchRateCurToReportingAlwaysUsed;

    // Lazy loading state
    private boolean isDebitExchRateCurToReportingCalculated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDebitCompany</Name>
				<Source><![CDATA[
    public DataAreaId getDebitCompany()
    {
        return debitCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCompany</Name>
				<Source><![CDATA[
    public DataAreaId getCreditCompany()
    {
        return creditCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCompanyCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getDebitCompanyCurrency()
    {
        return debitCompanyCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCompanyCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getCreditCompanyCurrency()
    {
        return creditCompanyCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDebitCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getTransDebitCurrency()
    {
        return transDebitCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransCreditCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getTransCreditCurrency()
    {
        return transCreditCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentToInvoice</Name>
				<Source><![CDATA[
    public ExchRate getPaymentToInvoice()
    {
        return paymentToInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCurToDebitMstPrimary</Name>
				<Source><![CDATA[
    public ExchRate getDebitCurToDebitMstPrimary()
    {
        return debitCurToDebitMstPrimary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCurToDebitMstSecond</Name>
				<Source><![CDATA[
    public ExchRate getDebitCurToDebitMstSecond()
    {
        return debitCurToDebitMstSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditMstToDebitMst</Name>
				<Source><![CDATA[
    public ExchRate getCreditMstToDebitMst()
    {
        return creditMstToDebitMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditReportingToDebitReporting</Name>
				<Source><![CDATA[
    internal ExchRate getCreditReportingToDebitReporting()
    {
        return creditReportingToDebitReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCurToDebitMstCombined</Name>
				<Source><![CDATA[
    public ExchRate getDebitCurToDebitMstCombined()
    {
        return debitCurToDebitMstCombined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitReportingToMst</Name>
				<Source><![CDATA[
    [SysObsolete('Reporting currency calculates directly from transaction currency. Please use the getDebitCurToReporting() method instead.', false, 3\3\2020)]
    public ExchRate getDebitReportingToMst()
    {
        if (!isDebitExchRateCurToReportingCalculated)
        {
            debitCurToReporting = this.calculateDebitCurToReporting();
            isDebitExchRateCurToReportingCalculated = true;
        }

        return debitCurToReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCurToReporting</Name>
				<Source><![CDATA[
    public ExchRate getDebitCurToReporting()
    {
        return this.getDebitReportingToMst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditExchRateCurToMstAlwaysUsed</Name>
				<Source><![CDATA[
    internal boolean isCreditExchRateCurToMstAlwaysUsed()
    {
        return isCreditExchRateCurToMstAlwaysUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditExchRateCurToReportingAlwaysUsed</Name>
				<Source><![CDATA[
    internal boolean isCreditExchRateCurToReportingAlwaysUsed()
    {
        return isCreditExchRateCurToReportingAlwaysUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>SettlementExchRate</c> class.
    /// </summary>
    /// <param name = "_debitCompany">A company where debit transaction is recorded.</param>
    /// <param name = "_debitCompanyCurrency">The currency of the debit company.</param>
    /// <param name = "_transDebitCurrency">The currency of the debit transaction.</param>
    /// <param name = "_specTransDebitCrossRate">A cross rate.</param>
    /// <param name = "_creditCompany">A company where credit transaction is recorded.</param>
    /// <param name = "_creditCompanyCurrency">The currency of the credit company.</param>
    /// <param name = "_transCreditCurrency">The currency of the credit transaction.</param>
    /// <param name = "_transCreditDate">The date of the creadit transaction used to determine exchange rates.</param>
    /// <param name = "_creditTransExchRateCurToMst">An exchange rate (trasaction to accounting) from the credit transaction.</param>
    /// <param name = "_creditTransReportingToMst">An exchange rate (transaction to reporting) from the credit transaction.</param>
    /// <returns>A newly created instance of the <c>SettlementExchRate</c> class.</returns>
    [SysObsolete('Reporting currency calculates directly from transaction currency. Please use the constructV2() method instead.', false, 3\3\2020)]
    public static SettlementExchRate construct(
        DataAreaId _debitCompany,
        CurrencyCode _debitCompanyCurrency,
        CurrencyCode _transDebitCurrency,
        CrossExchRate _specTransDebitCrossRate,
        DataAreaId _creditCompany,
        CurrencyCode _creditCompanyCurrency,
        CurrencyCode _transCreditCurrency,
        TransDate _transCreditDate,
        ExchRate _creditTransExchRateCurToMst,
        ExchRate _creditTransReportingToMst)
    {
        SettlementExchRate instance = new SettlementExchRate();

        instance.init(
            _debitCompany,
            _debitCompanyCurrency,
            _transDebitCurrency,
            _specTransDebitCrossRate,
            _creditCompany,
            _creditCompanyCurrency,
            _transCreditCurrency,
            _transCreditDate,
            _creditTransExchRateCurToMst,
            _creditTransReportingToMst);

        instance.calculate();

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>SettlementExchRate</c> class.
    /// </summary>
    /// <param name = "_debitCompany">A company where debit transaction is recorded.</param>
    /// <param name = "_debitCompanyCurrency">The currency of the debit company.</param>
    /// <param name = "_transDebitCurrency">The currency of the debit transaction.</param>
    /// <param name = "_specTransDebitCrossRate">A cross rate.</param>
    /// <param name = "_creditCompany">A company where credit transaction is recorded.</param>
    /// <param name = "_creditCompanyCurrency">The currency of the credit company.</param>
    /// <param name = "_transCreditCurrency">The currency of the credit transaction.</param>
    /// <param name = "_transCreditDate">The date of the creadit transaction used to determine exchange rates.</param>
    /// <param name = "_creditTransExchRateCurToMst">An exchange rate (trasaction to accounting) from the credit transaction.</param>
    /// <param name = "_creditTransExchRateCurToReporting">An exchange rate (transaction to reporting) from the credit transaction.</param>
    /// <returns>A newly created instance of the <c>SettlementExchRate</c> class.</returns>
    public static SettlementExchRate constructV2(
        DataAreaId _debitCompany,
        CurrencyCode _debitCompanyCurrency,
        CurrencyCode _transDebitCurrency,
        CrossExchRate _specTransDebitCrossRate,
        DataAreaId _creditCompany,
        CurrencyCode _creditCompanyCurrency,
        CurrencyCode _transCreditCurrency,
        TransDate _transCreditDate,
        ExchRate _creditTransExchRateCurToMst,
        ExchRate _creditTransExchRateCurToReporting)
    {
        return SettlementExchRate::construct(
            _debitCompany,
            _debitCompanyCurrency,
            _transDebitCurrency,
            _specTransDebitCrossRate,
            _creditCompany,
            _creditCompanyCurrency,
            _transCreditCurrency,
            _transCreditDate,
            _creditTransExchRateCurToMst,
            _creditTransExchRateCurToReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(
        DataAreaId _debitCompany,
        CurrencyCode _debitCompanyCurrency,
        CurrencyCode _transDebitCurrency,
        CrossExchRate _specTransDebitCrossRate,
        DataAreaId _creditCompany,
        CurrencyCode _creditCompanyCurrency,
        CurrencyCode _transCreditCurrency,
        TransDate _transCreditDate,
        ExchRate _creditTransExchRateCurToMst,
        ExchRate _creditTransExchRateCurToReporting)
    {
        debitCompany = _debitCompany;
        debitCompanyCurrency = _debitCompanyCurrency;
        transDebitCurrency = _transDebitCurrency;
        specTransDebitCrossRate = _specTransDebitCrossRate;
        creditCompany = _creditCompany;
        creditCompanyCurrency = _creditCompanyCurrency;
        transCreditCurrency = _transCreditCurrency;
        transCreditDate = _transCreditDate;
        creditTransExchRateCurToMst = _creditTransExchRateCurToMst;
        creditTransExchRateCurToReporting = _creditTransExchRateCurToReporting;

        isDebitExchRateCurToReportingCalculated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    private void calculate()
    {
        this.initReportingCurrencies();

        this.initIsCreditExchRateCurToMstAlwaysUsed();
        this.initIsCreditExchRateCurToReportingAlwaysUsed();

        this.calculateDebitCurToDebitMSTRates();

        this.calculateCreditMstToDebitMst();

        this.calculatePaymentToInvoice();

        this.calculateCreditReportingToDebitReporting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDebitCurToDebitMSTRates</Name>
				<Source><![CDATA[
    private ExchRate calculateDebitCurToDebitMSTRates()
    {
        // Get the exchange rate from debit transaction currency to debit mst currency.
        if (transDebitCurrency == debitCompanyCurrency)
        {
            debitCurToDebitMstCombined = 100.0;
            debitCurToDebitMstPrimary = 100.0;
            debitCurToDebitMstSecond = 0.0;
        }
        else
        {
            // Use the payment date and exchange rates from the invoice company.
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(debitCompany).RecId), transDebitCurrency,  transCreditDate);

            debitCurToDebitMstPrimary = exchangeRateHelper.getExchangeRate1();
            debitCurToDebitMstSecond  = exchangeRateHelper.getExchangeRate2();

            if (this.shouldSpecTransDebitCrossRateBeUsed(specTransDebitCrossRate))
            {
                debitCurToDebitMstCombined = specTransDebitCrossRate;
            }
            else if (isCreditExchRateCurToMstAlwaysUsed)
            {
                debitCurToDebitMstCombined = creditTransExchRateCurToMst;
            }
            else if (debitCurToDebitMstPrimary == 0.0)
            {
                debitCurToDebitMstCombined = 100.0;
            }
            else if (debitCurToDebitMstSecond == 0.0)
            {
                // There is no triangulation when the second exchange rate is zero, in this case
                // use the primary exchange rate.
                debitCurToDebitMstCombined = debitCurToDebitMstPrimary;
            }
            else
            {
                // Include triangulation
                debitCurToDebitMstCombined = (debitCurToDebitMstSecond / debitCurToDebitMstPrimary) * 100.0;
            }
        }

        return debitCurToDebitMstCombined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCreditMstToDebitMst</Name>
				<Source><![CDATA[
    private ExchRate calculateCreditMstToDebitMst()
    {
        if (debitCompanyCurrency == creditCompanyCurrency)
        {
            creditMstToDebitMst = 100.0;
        }
        else
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(debitCompany).RecId), creditCompanyCurrency, transCreditDate);

            ExchRate primaryExchRate = exchangeRateHelper.getExchangeRate1();
            ExchRate secondExchRate  = exchangeRateHelper.getExchangeRate2();

            if (primaryExchRate == 0.0)
            {
                creditMstToDebitMst = 100.0;
            }
            else if (secondExchRate == 0.0)
            {
                creditMstToDebitMst = primaryExchRate;
            }
            else
            {
                creditMstToDebitMst = (secondExchRate / primaryExchRate) * 100.0;
            }
        }

        return creditMstToDebitMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePaymentToInvoice</Name>
				<Source><![CDATA[
    private ExchRate calculatePaymentToInvoice()
    {
        ExchRate creditCurToCreditMst;

        // the exchange rate on the credit transaction is the exchange rate from credit transaction currency to credit mst currency
        if (creditCompanyCurrency == transCreditCurrency || creditTransExchRateCurToMst == 0.0)
        {
            creditCurToCreditMst = 100.0;
        }
        else
        {
            creditCurToCreditMst = creditTransExchRateCurToMst;
        }

        // calculate the credit to debit exchange rate
        if (specTransDebitCrossRate != 0.0)
        {
            paymentToInvoice = 100.0 / specTransDebitCrossRate;
        }
        else if (transDebitCurrency == transCreditCurrency)
        {
            // Transaction have the same currency so the rate is one.
            paymentToInvoice = 1.0;
        }
        else
        {
            paymentToInvoice = ((creditCurToCreditMst * creditMstToDebitMst) / debitCurToDebitMstCombined) / 100.0;
        }

        return paymentToInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportingCurrencies</Name>
				<Source><![CDATA[
    private void initReportingCurrencies()
    {
        LedgerRecId debitLedgerRecId = Ledger::primaryLedger(CompanyInfo::current(debitCompany));
        LedgerRecId creditLedgerRecId = Ledger::primaryLedger(CompanyInfo::current(creditCompany));

        debitReportingCurrency = Ledger::reportingCurrencyByLedger(debitLedgerRecId);
        creditReportingCurrency = Ledger::reportingCurrencyByLedger(creditLedgerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsCreditExchRateCurToMstAlwaysUsed</Name>
				<Source><![CDATA[
    private void initIsCreditExchRateCurToMstAlwaysUsed()
    {
        isCreditExchRateCurToMstAlwaysUsed = transDebitCurrency == transCreditCurrency
            && debitCompanyCurrency == creditCompanyCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsCreditExchRateCurToReportingAlwaysUsed</Name>
				<Source><![CDATA[
    private void initIsCreditExchRateCurToReportingAlwaysUsed()
    {
        isCreditExchRateCurToReportingAlwaysUsed = transDebitCurrency == transCreditCurrency
            && debitReportingCurrency == creditReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCreditReportingToDebitReporting</Name>
				<Source><![CDATA[
    private ExchRate calculateCreditReportingToDebitReporting()
    {
        if (debitReportingCurrency == '' || creditReportingCurrency == '')
        {
            creditReportingToDebitReporting = 0.0;
        }
        else if (debitReportingCurrency == creditReportingCurrency)
        {
            creditReportingToDebitReporting = 100.0;
        }
        else
        {
            CompanyInfoRecId debitCompanyInfo = CompanyInfo::current(debitCompany);
            LedgerRecId debitCompanyPrimaryLedger = Ledger::primaryLedger(debitCompanyInfo);

            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(debitCompanyPrimaryLedger, creditReportingCurrency, transCreditDate);
            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType(debitCompanyInfo));
            exchangeRateHelper.parmToCurrency(debitReportingCurrency);

            ExchRate primaryExchRate = exchangeRateHelper.getExchangeRate1();
            ExchRate secondExchRate  = exchangeRateHelper.getExchangeRate2();

            if (primaryExchRate == 0.0)
            {
                creditReportingToDebitReporting = 100.0;
            }
            else if (secondExchRate == 0.0)
            {
                creditReportingToDebitReporting = primaryExchRate;
            }
            else
            {
                creditReportingToDebitReporting = (secondExchRate / primaryExchRate) * 100.0;
            }
        }

        return creditReportingToDebitReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDebitCurToMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the transaction currency amount to the accounting currency on the date of the credit transaction.
    /// </summary>
    /// <param name = "_amountCur">The amount in transaction currency.</param>
    /// <param name = "_roundResult">A boolean value, specifying whether the result should be rounded.</param>
    /// <returns>The converted amount in the accounting currency.</returns>
    public AmountMST convertDebitCurToMst(AmountCur _amountCur, boolean _roundResult)
    {
        AmountMST convertedAmount;
        ExchRate exchRateOnCreditDate;

        exchRateOnCreditDate = this.getDebitCurToDebitMstCombined();

        convertedAmount = CurrencyExchange::calculateAmount(_amountCur, exchRateOnCreditDate);

        if (_roundResult)
        {
            convertedAmount = CurrencyExchange::round(
                convertedAmount,
                Ledger::accountingCurrency(CompanyInfo::current(debitCompany)));
        }

        return convertedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDebitCurToReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the debit transaction currency amount to the reporting currency on the date of the credit transaction.
    /// </summary>
    /// <param name = "_amountCur">The amount in transaction currency.</param>
    /// <returns>The converted amount in the reporting currency.</returns>
    public AmountMSTSecondary convertDebitCurToReporting(AmountCur _amountCur)
    {
        ExchRate reportingExchRateOnCreditDate = this.getDebitCurToReporting();

        CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::current(debitCompany)),
            transCreditDate);

        currencyHelper.parmReportingExchangeRate1(reportingExchRateOnCreditDate);

        AmountMSTSecondary convertedAmount = currencyHelper.calculateTransactionCurrencyToReportingCurrency(transDebitCurrency, _amountCur);

        return convertedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCreditCurToReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the credit transaction currency amount to the reporting currency on the date of the credit transaction.
    /// </summary>
    /// <param name = "_amountCur">The amount in transaction currency.</param>
    /// <returns>The converted amount in the reporting currency.</returns>
    public AmountMSTSecondary convertCreditCurToReporting(AmountCur _amountCur)
    {
        ExchRate reportingExchRateOnCreditDate = creditTransExchRateCurToReporting;

        CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::current(creditCompany)),
            transCreditDate);

        currencyHelper.parmReportingExchangeRate1(reportingExchRateOnCreditDate);

        AmountMSTSecondary convertedAmount = currencyHelper.calculateTransactionCurrencyToReportingCurrency(transCreditCurrency, _amountCur);

        return convertedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSpecTransDebitCrossRateBeUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cross rate from debit transaction should be used.
    /// </summary>
    /// <param name = "_specTransDebitCrossRate">The cross exchange rate of debit spec transaction.</param>
    /// <returns>true if the cross rate from debit transaction should be used; otherwise, false.</returns>
    /// <remarks>This method is extended in the <c>SettlementExchRate_ApplicationSuite_Extension</c> class.</remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnly]
    protected boolean shouldSpecTransDebitCrossRateBeUsed(CrossExchRate _specTransDebitCrossRate)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDebitCurToReporting</Name>
				<Source><![CDATA[
    private ExchRate calculateDebitCurToReporting()
    {
        ExchRate exchRateOnCreditDate;

        if (isCreditExchRateCurToReportingAlwaysUsed)
        {
            exchRateOnCreditDate = creditTransExchRateCurToReporting;
        }
        else if (debitReportingCurrency != '')
        {
            CompanyInfoRecId debitCompanyInfo = CompanyInfo::current(debitCompany);
            LedgerRecId debitLedgerRecId = Ledger::primaryLedger(debitCompanyInfo);

            // Get the exchange rate for the debit transaction reporting currency code on the credit transaction date
            ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(debitLedgerRecId, transDebitCurrency, transCreditDate);
            helper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType(debitCompanyInfo));
            helper.parmToCurrency(debitReportingCurrency);
            exchRateOnCreditDate = helper.getCrossRate();
        }

        return exchRateOnCreditDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>