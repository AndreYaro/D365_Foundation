<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnitOfMeasureProductMasterCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class UnitOfMeasureProductMasterCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>UnitOfMeasureConversion_onValidatingWrite</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(UnitOfMeasureConversion), DataEventType::ValidatingWrite)]
    public static void UnitOfMeasureConversion_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        ValidateEventArgs ve = _e;

        if (ve.parmValidateResult())
        {
            UnitOfMeasureConversion conversion = _sender;
            if (conversion.Product != 0)
            {
                if (!EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled() && EcoResProductMaster::find(conversion.Product).IsProductVariantUnitConversionEnabled)
                {
                    ve.parmValidateResult(checkFailed("@SYP5070002"));
                }
                else
                {
                    EcoResDistinctProductVariant productVariant = EcoResDistinctProductVariant::find(conversion.Product);
                    if (productVariant
                  && !EcoResProductMaster::find(productVariant.ProductMaster).IsProductVariantUnitConversionEnabled)
                    {
                        ve.parmValidateResult(checkFailed("@SYP5070003"));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWithException</Name>
				<Source><![CDATA[
    public void validateWithException(EcoResProductRecId _productRecId)
    {
        EcoResProduct                   product;
        EcoResDistinctProductVariant    productVariant;
        EcoResProductMaster             productMaster;

        if (_productRecId)
        {
            product = EcoResProduct::find(_productRecId);

            if (!product.isDistinctProduct())
            {
                if (product.isDistinctProductVariant())
                {
                    productVariant  = product as EcoResDistinctProductVariant;

                    productMaster   = EcoResProductMaster::find(productVariant.ProductMaster);

                    if (!productMaster.IsProductVariantUnitConversionEnabled)
                    {
                        throw error(strFmt("@SYP4986002", productMaster.displayProductName()));
                    }

                }
                else
                {
                    productMaster = EcoResProductMaster::find(product.RecId);

                    if (productMaster.IsProductVariantUnitConversionEnabled && !EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
                    {
                        throw error(strFmt("@SYP4986002", productMaster.displayProductName()));
                    }

                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static UnitOfMeasureProductMasterCheck construct()
    {
        return new UnitOfMeasureProductMasterCheck();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>