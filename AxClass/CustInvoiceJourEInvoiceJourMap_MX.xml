<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourEInvoiceJourMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceJourEInvoiceJourMap_MX</c> class extends the <c>EInvoiceJourBaseMap_MX</c> class
/// to implement the source data from between the <c>CustInvoiceJour</c> table and the
/// <c>EInvoiceJour_MX</c> table.
/// </summary>
public class CustInvoiceJourEInvoiceJourMap_MX extends EInvoiceJourBaseMap_MX
{
    CustInvoiceJour         custInvoiceJour;
    EInvoiceJourBaseMap_MX  originalEInvoiceJour;
    EInvoiceCFDIReferenceType_MX originalEInvoiceReferenceType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the currency code, used in the current CustInvoiceJour
    /// </summary>
    /// <returns>Invoice transaction currency code.</returns>
    public CurrencyCode currencyCode()
    {
        return custInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the discount that is given in the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The discount amount that is given in the current <c>CustInvoiceJour</c> record.</returns>
    public SalesEndDiscAmount endDiscMST()
    {
        return custInvoiceJour.EndDiscMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the header discount that is given in the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The header discount amount that is given in the current <c>CustInvoiceJour</c> record.</returns>
    public SalesEndDiscAmount endDisc()
    {
        return this.isPrintInMST()
            ? custInvoiceJour.EndDiscMST
            : custInvoiceJour.EndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum amount of lines amount
    /// </summary>
    /// <returns>The sum amount of the lines amount without discount and taxes</returns>
    public Amount salesBalance()
    {
        return this.isPrintInMST()
            ? custInvoiceJour.SalesBalanceMST
            : custInvoiceJour.SalesBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate of the transaction currency code and the company currency code that are used
    /// in the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The exchange rate of the transaction currency code and the company currency code.</returns>
    public ExchRate exchangeRate()
    {
        return custInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        EInvoiceCFDIReference_MX  origReference;

        select firstonly CFDIUUID, ReferenceType from origReference
            where origReference.eInvoiceJour_MX == eInvoiceJour.RecId
               && (origReference.ReferenceType == EInvoiceCFDIReferenceType_MX::CreditNote
                || origReference.ReferenceType == EInvoiceCFDIReferenceType_MX::DebitNote
                || origReference.ReferenceType == EInvoiceCFDIReferenceType_MX::GoodsReturn
                || origReference.ReferenceType == EInvoiceCFDIReferenceType_MX::Substitution);

        if (origReference)
        {
            originalEInvoiceReferenceType = origReference.ReferenceType;
            EInvoiceJour_MX eInvoiceJourOrig = EInvoiceJour_MX::findByUUID(origReference.CFDIUUID);

            if (eInvoiceJourOrig)
            {
                originalEInvoiceJour = EInvoiceJourBaseMap_MX::construct(eInvoiceJourOrig.invoiceJour());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>methodOfPayment</Name>
				<Source><![CDATA[
    public Description methodOfPayment()
    {
        Description ret;
        
        if (originalEInvoiceJour
            && originalEInvoiceReferenceType != EInvoiceCFDIReferenceType_MX::CreditNote
            && originalEInvoiceReferenceType != EInvoiceCFDIReferenceType_MX::GoodsReturn
            && originalEInvoiceReferenceType != EInvoiceCFDIReferenceType_MX::Substitution)
        {
            ret = originalEInvoiceJour.methodOfPayment();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderOfPayment</Name>
				<Source><![CDATA[
    public EInvoiceExtCodeId_MX orderOfPayment()
    {
        EInvoiceExtCodeId_MX ret;

        if (originalEInvoiceJour
            && originalEInvoiceReferenceType != EInvoiceCFDIReferenceType_MX::CreditNote
            && originalEInvoiceReferenceType != EInvoiceCFDIReferenceType_MX::GoodsReturn
            && originalEInvoiceReferenceType != EInvoiceCFDIReferenceType_MX::Substitution)
        {
            ret = originalEInvoiceJour.orderOfPayment();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance variables.
    /// </summary>
    /// <param name="_custInvoiceJour">The <c>CustInvoiceJour</c> record that is used.</param>
    protected void initCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the delivery address.
    /// </summary>
    /// <returns>
    /// The rec id of the logistics postal address of the delivery address.
    /// </returns>
    protected LogisticsPostalAddressRecId deliveryPostalAddressRecId()
    {
        return custInvoiceJour.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the invoice address.
    /// </summary>
    /// <returns>
    /// The rec id of the logistics postal address of the invoice address.
    /// </returns>
    protected LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
        return custInvoiceJour.InvoicePostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account that is being invoiced.
    /// </summary>
    /// <returns>The customer invoiced account.</returns>
    /// <remarks>
    /// The customer account that is being invoice is related to the current <c>CustInvoiceJour</c> record.
    /// </remarks>
    public CustVendAC invoiceAccount()
    {
        return custInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the order account that is being invoiced.
    /// </summary>
    /// <returns>The order invoiced account.</returns>
    /// <remarks>
    /// The order account that is being invoice is related to the current <c>CustInvoiceJour</c> record.
    /// </remarks>
    [Hookable(false)]
    public CustVendAC orderAccount()
    {
        return custInvoiceJour.OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date of the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The transaction date of the current <c>CustInvoiceJour</c> record.</returns>
    public Date invoiceDate()
    {
        return custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The invoice ID of the current <c>CustInvoiceJour</c> record.</returns>
    public InvoiceId invoiceId()
    {
        return custInvoiceJour.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer name preset on the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The customer invoiced name.</returns>
    public SATRegistrationName_MX invoicingName()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of original document lines to be mapped.
    /// </summary>
    /// <returns>A list of records.</returns>
    /// <remarks>
    /// The list is a list of records of the table that will be mapped in the
    /// <c>EInvoiceTransBaseMap_MX</c> concrete class.
    /// </remarks>
    protected List journalLines()
    {
        CustInvoiceTrans    custInvoiceTrans;
        List                journalLines = new List(Types::Record);

        while select custInvoiceTrans
            order by LineNum
            where custInvoiceTrans.InvoiceId        == custInvoiceJour.InvoiceId
               && custInvoiceTrans.SalesId          == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceDate      == custInvoiceJour.InvoiceDate
        {
            journalLines.addEnd(custInvoiceTrans);
        }

        return journalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RefNum
    /// </summary>
    /// <returns>
    /// The RefNum.
    /// </returns>
    public RefNum refNum()
    {
        return custInvoiceJour.RefNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID of the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>
    /// The record ID of the invoice document.
    /// </returns>
    public RefRecId refRecId()
    {
        return custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the invoice document.
    /// </summary>
    /// <returns>The table ID of the invoice document.</returns>
    public tableId refTableId()
    {
        return custInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales type of the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>A <c>SalesType</c> enumeration value that represents the sales type of the current
    /// <c>CustInvoiceJour</c> record.</returns>
    public SalesType salesType()
    {
        return custInvoiceJour.SalesType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the sum ((quanity * price) + misc charges). No taxes and discounts are included
    /// </summary>
    /// <returns>Represents the sum ((quanity * price) + misc charges). No taxes and discounts are included.</returns>
    public Amount subTotal()
    {
        return this.isPrintInMST() ?
           custInvoiceJour.SalesBalanceMST + custInvoiceJour.SumLineDiscMST + custInvoiceJour.SumMarkupMST :
           custInvoiceJour.SalesBalance    + custInvoiceJour.SumLineDisc    + custInvoiceJour.SumMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumLineDiscMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// The sum of the discount given in the current custinvoicejour lines.
    /// </summary>
    /// <returns>The discount amount given at fiscal current custinvoicejour line, summed.</returns>
    protected SalesSumLineDiscAmount sumLineDiscMST()
    {
        return custInvoiceJour.SumLineDiscMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>termOfPaymDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the terms of payment description that is used by the posted invoice.
    /// </summary>
    /// <returns>The terms of payment description that is used by the posted invoice.</returns>
    public Description termOfPaymDesc()
    {
        return PaymTerm::find(custInvoiceJour.Payment).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total amount of the original transaction.
    /// </summary>
    /// <returns>Source transaction total amount, not including discounts.</returns>
    public AmountCur totalAmount()
    {
        return this.IsPrintInMST() ?
            custInvoiceJour.InvoiceAmountMST :
            custInvoiceJour.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total discont amount of the current custinvoicejour
    /// </summary>
    /// <returns>
    /// The invoice total discount amount.
    /// </returns>
    /// <remarks>
    /// header discount + discount given on the lines.
    /// </remarks>
    public DiscAmount totalDiscountAmount()
    {
        return this.IsPrintInMST() ?
           custInvoiceJour.EndDiscMST + custInvoiceJour.SumLineDiscMST :
           custInvoiceJour.EndDisc    + custInvoiceJour.SumLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total discount amount of the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The total discount amount.</returns>
    /// <remarks>
    /// The quantity that is returned is the sum of the header discount and the discount that is given on
    /// the current <c>CustInvoiceJour</c> lines.
    /// </remarks>
    public DiscAmount totalDiscountAmountMST()
    {
        return this.endDiscMST() + this.sumLineDiscMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it's necessary to create a Complemento node.
    /// </summary>
    /// <returns>
    /// True if it is a Foreign trade; otherwise false.
    /// </returns>
    public boolean isForeignTrade()
    {
        return eInvoiceJour.CFDIForeignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemporaryExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it is a temporary export.
    /// </summary>
    /// <returns>
    /// true if it is a temporary export; otherwise, false.
    /// </returns>
    public boolean isTemporaryExport()
    {
        return eInvoiceJour.CFDITemporaryExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the invoice transaction for foreign trade.
    /// </summary>
    /// <returns>
    /// The invoice transaction total amount for foreign trade.
    /// </returns>
    public Amount totalAmountForeignTrade()
    {
        const SysFlightName OverrideCFDIForeignTradeTotalAmountContainingCharges = 'OverrideCFDIForeignTradeTotalAmountContainingCharges';
        AmountCur totalAmountForeignTrade;

        if (isFlightEnabled(OverrideCFDIForeignTradeTotalAmountContainingCharges))
        {
            totalAmountForeignTrade = custInvoiceJour.SalesBalance;
        }
        else
        {
            totalAmountForeignTrade = custInvoiceJour.SalesBalance + custInvoiceJour.SumMarkup;
        }

        if (CDFIForeignAmountsWithDiscountFlight::instance().isEnabled())
        {
            totalAmountForeignTrade += custInvoiceJour.SumLineDisc;
        }

        const SysFlightName OverrideCFDIForeignTradeTotalAmountWithAmountMST = 'OverrideCFDIForeignTradeTotalAmountWithAmountMST';

        if (!isFlightEnabled(OverrideCFDIForeignTradeTotalAmountWithAmountMST))
        {
            totalAmountForeignTrade = CurrencyExchangeHelper::amountCur2MST(
                totalAmountForeignTrade,
                custInvoiceJour.CurrencyCode,
                custInvoiceJour.ExchRate);
        }

        return totalAmountForeignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher number that is used for the current <c>CustInvoiceJour</c> record in the ledger
    /// post.
    /// </summary>
    /// <returns>The invoice voucher number.</returns>
    public Voucher voucher()
    {
        return custInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>EInvoiceJourBaseMap_MX</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">The <c>CustInvoiceJour</c> record that will be used as the data source.</param>
    /// <returns>A new instance of <c>CustInvoiceJourEInvoiceJourMap_MX</c>.</returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the
    ///  <c>
    ///  EInvoiceJourBaseMap_MX
    ///  </c>
    ///   class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>EInvoiceJourBaseMap_MX</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on the <c>EInvoiceJourBaseMap_MX</c> class so that it returns
    ///    an instance of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>EInvoiceJourBaseMap_MX</c> class that you want to customize or
    ///    extend in your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///   This procedure helps to ensure that your customizations are maintained if the base version of the
    ///  <c>
    ///  EInvoiceJourBaseMap_MX
    ///  </c>
    ///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for static construct Methods" />
    ///  .
    /// </remarks>
    public static CustInvoiceJourEInvoiceJourMap_MX construct(CustInvoiceJour _custInvoiceJour)
    {
        CustInvoiceJourEInvoiceJourMap_MX   invoiceMap;
        EInvoiceJour_MX                     eInvoiceJour;

        eInvoiceJour = eInvoiceJour_MX::findByRef(_custInvoiceJour.TableId, _custInvoiceJour.RecId);

        if (eInvoiceJour.CFDI)
        {
            switch (eInvoiceJour.CFDIVersion)
            {
                case EInvoiceCFDIVersion_MX::V3_2:
                case EInvoiceCFDIVersion_MX::V3_3:
                case EInvoiceCFDIVersion_MX::V4:
                    invoiceMap = new CustInvoiceJourEInvoiceJourMap_MX();
                    break;

                default:
                    throw error("@SYS341183");
            }
        }
        else
        {
            throw error("@SYS341183");
        }

        invoiceMap.initCustInvoiceJour(_custInvoiceJour);
        invoiceMap.initEInvoice(EInvoiceJour_MX::findByRef(_custInvoiceJour.TableId, _custInvoiceJour.RecId));

        return invoiceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress emitentPostalAddress()
    {
        LogisticsPostalAddress postalAddress = this.emitentPostalAddressFromInventSite();

        return postalAddress ? postalAddress : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSiteQuery</Name>
				<Source><![CDATA[
    internal Query initInventSiteQuery()
    {
        Query query = super();

        QueryBuildDataSource qbdsInventDim = query.dataSourceTable(tableNum(InventDim));
        QueryBuildDataSource qbdsCustInvoiceTrans = qbdsInventDim.addDataSource(tableNum(CustInvoiceTrans));
        qbdsCustInvoiceTrans.relations(true);
        qbdsCustInvoiceTrans.joinMode(JoinMode::ExistsJoin);
        qbdsCustInvoiceTrans.addRange(fieldNum(CustInvoiceTrans, InvoiceId)).value(queryValue(custInvoiceJour.InvoiceId));
        qbdsCustInvoiceTrans.addRange(fieldNum(CustInvoiceTrans, SalesId)).value(queryValue(custInvoiceJour.SalesId));
        qbdsCustInvoiceTrans.addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(queryValue(custInvoiceJour.InvoiceDate));
        qbdsCustInvoiceTrans.addRange(fieldNum(CustInvoiceTrans, numberSequenceGroup)).value(queryValue(custInvoiceJour.numberSequenceGroup));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>