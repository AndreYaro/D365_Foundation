<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrintOutInvoiceJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Class CustPrintOutInvoiceJob is no longer supported after 10.0.26', true, 16\2\2022)]
public class CustPrintOutInvoiceJob extends RunBaseBatchPrintable implements BatchRetryable
{
    QueryRun queryRun;
    DialogRunbase dialog;

    // <GEERU>
    DialogField dialogPrintInMST;
    PrintInMST_RU printInMST;

    // </GEERU>
    // <GEERU>
    #DEFINE.CurrentVersion(4)
    // </GEERU>

    #LOCALMACRO.CurrentList
        // <GEERU>
        printInMST
        // </GEERU>
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> method
    ///    returns false, this method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public Object dialog(DialogRunbase _dialog = null,
                         boolean _forceOnClient = false)
    {
        dialog = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            dialogPrintInMST = dialog.addFieldValue(extendedtypestr(PrintInMST_RU), printInMST);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        anytype anyNo = NoYes::No;
        printInMST = dialogPrintInMST ? dialogPrintInMST.value() : anyNo;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        queryRun = new QueryRun(querystr(CustInvoice));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // <GEERU>
        return [#CurrentVersion, #CurrentList, super(), queryRun.pack()];
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        Counter progressTotal;
        Counter progressCounter;
        CustPrintOutInvoice custPrintOutInvoice;
        NoYes proforma;
        CustInvoiceTable custInvoiceTable;
        RecordSortedList recordSortedList = new RecordSortedList(tablenum(CustInvoiceTable));

        recordSortedList.sortOrder(fieldnum(CustInvoiceJour,RecId));

        progressTotal = QueryRun::getQueryRowCount(queryRun.query(), intMax());
        if (progressTotal)
        {
            this.progressInit("@SYS920", progressTotal, #AviFormLetter);
            progress.setText("@SYS26577");

            custPrintOutInvoice = CustPrintOutInvoice::construct();
            // dlothspe this class will be removed shortly
            // custPrintOutInvoice.parmPrintJobSettings(printJobSettings);

            queryRun.query().dataSourceTable(tablenum(CustInvoiceTable)).update(true);
            queryRun.query().dataSourceTable(tablenum(CustInvoiceTable)).concurrencyModel(ConcurrencyModel::Optimistic);

            while (queryRun.next())
            {
                custInvoiceTable = queryRun.get(tablenum(CustInvoiceTable));

                ttsbegin;

                if (!custInvoiceTable.Posted)
                    proforma = NoYes::Yes;

                setprefix(#PreFixField( CustInvoiceTable, InvoiceAccount));

                progressCounter++;
                progress.setCount(progressCounter);
                progress.setText(strfmt("@SYS21352",custInvoiceTable.InvoiceId));

                recordSortedList.ins(custInvoiceTable);

                ttscommit;
            }

            // <GEERU>
            custPrintOutInvoice.parmPrintInMST_RU(printInMST);
            custPrintOutInvoice.parmPrintFormLetter_RU(NoYes::Yes);
            // </GEERU>

            custPrintOutInvoice.printOut(proforma,recordSortedList,NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c>
    ///    method and return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);
        container packedSuper;
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion:

                // <GEERU>
                [version,#CurrentList,packedSuper,packedQuery] = packedClass;
                // </GEERU>
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                if (packedSuper)
                    return super(packedSuper);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    void updateQueryBuild(CustInvoiceTable _custInvoiceTable)
    {
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRangeInvoiceAccount;
        QueryBuildRange queryBuildRangeInvoiceDate;
        QueryBuildRange queryBuildRangePosted;
        queryBuildDataSource = SysQuery::findOrCreateDataSource(queryRun.query(), tablenum(CustInvoiceTable));
        queryBuildRangeInvoiceAccount = SysQuery::findOrCreateRange(queryBuildDataSource,fieldnum(CustInvoiceTable,InvoiceAccount));
        queryBuildRangeInvoiceDate = SysQuery::findOrCreateRange(queryBuildDataSource,fieldnum(CustInvoiceTable,InvoiceDate));
        queryBuildRangePosted = SysQuery::findOrCreateRange(queryBuildDataSource,fieldnum(CustInvoiceTable,Posted));

        if (_custInvoiceTable.InvoiceAccount)
        {
            queryBuildRangeInvoiceAccount.value(queryValue(_custInvoiceTable.InvoiceAccount));
            queryBuildRangeInvoiceDate.value(queryValue(_custInvoiceTable.InvoiceDate));
        }
        else
        {
            queryBuildRangeInvoiceAccount.value(SysQuery::valueUnlimited());
            queryBuildRangeInvoiceDate.value(SysQuery::valueUnlimited());
        }
        queryBuildRangePosted.status(RangeStatus::Locked);
        queryBuildRangePosted.value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS23028";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        CustPrintOutInvoiceJob custPrintOutInvoiceJob = new CustPrintOutInvoiceJob();
        CustInvoiceTable custInvoiceTable;

        if (args && args.record())
        {
            custInvoiceTable = args.record();
            custPrintOutInvoiceJob.getLast();
        }

        custPrintOutInvoiceJob.updateQueryBuild(custInvoiceTable);
        custPrintOutInvoiceJob.queryRun();

        if (custPrintOutInvoiceJob.prompt())
            custPrintOutInvoiceJob.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>