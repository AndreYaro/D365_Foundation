<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventoryTransactionQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventoryTransactionQuery</c> class is a facade for the queries around inventory changes done by the given warehouse work.
/// </summary>
public final class WHSWorkInventoryTransactionQuery
{
    private WHSWorkId workId;
    private WHSWorkInventoryTransactionIQuery implementation;

    private WhsInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registeredIssueByWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information about inventory being picked (registered issue) by the given work line.
    /// </summary>
    /// <param name = "_lineNum">A line number of the work to query.</param>
    /// <param name = "_queryParameters">The query parameters.</param>
    /// <returns>An instance of the <c>WHSWorkInventoryTransactionDescriptor</c> class which describes the inventory on-hand change.</returns>
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredIssueByWorkLine(LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        using (var activityContext = this.instrumentationLogger().inventoryTransactionQueriesActivities().getRegisteredIssueByWorkLine())
        {
            var transactionDescriptor = implementation.registeredIssueByWorkLine(this.workId, _lineNum, _queryParameters);

            this.instrumentationLogger().inventoryTransactionQueriesActivities().logNumberOfElements(
                    activityContext,
                    transactionDescriptor.elementCount());

            return transactionDescriptor;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredReceiptByWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information about inventory being put (registered receipt) by the given work line.
    /// </summary>
    /// <param name = "_lineNum">A line number of the work to query.</param>
    /// <param name = "_queryParameters">The query parameters.</param>
    /// <returns>An instance of the <c>WHSWorkInventoryTransactionDescriptor</c> class which describes the inventory on-hand change.</returns>
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredReceiptByWorkLine(LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        using (var activityContext = this.instrumentationLogger().inventoryTransactionQueriesActivities().getRegisteredReceiptByWorkLine())
        {
            var transactionDescriptor = implementation.registeredReceiptByWorkLine(this.workId, _lineNum, _queryParameters);

            this.instrumentationLogger().inventoryTransactionQueriesActivities().logNumberOfElements(
                    activityContext,
                    transactionDescriptor.elementCount());

            return transactionDescriptor;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>WHSWorkInventoryTransactionQuery</c> class.
    /// </summary>
    /// <param name = "_workId">An id of the warehouse work. This is the warehouse work for which we are performing an inventory transaction query.</param>
    /// <returns>An instance of the <c>WHSWorkInventoryTransactionQuery</c> class.</returns>
    [Hookable(false)]
    public static WHSWorkInventoryTransactionQuery newFromWorkId(WHSWorkId _workId)
    {
        Debug::assert(_workId != '');

        WHSWorkInventoryTransactionQuery query = new WHSWorkInventoryTransactionQuery();

        query.workId = _workId;

        // Substitute another implementation based on flights, etc. Maybe the choice should be made per-work.
        if (WHSWorkInventoryTransactionQueryEnforceUseOfUserActionsFlight::instance().isEnabled())
        {
            // This branch is reachable when WHSWorkInventoryTransactionQueryEnforceUseOfUserActionsFlight flight is active.
            // It can be used both with the new or old stack - it is agnostic to the way trasactions are represented.
            // It is more experimental in nature.
            query.implementation = WHSWorkInventoryTransactionQueryByUserActions::construct();
        }
        else if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(_workId))
        {
            // This branch is reachable as soon as Warehouse Inventory Transactions are activated.
            // When activated, system is forced to use the read API.
            // In this case the read API is based on the new warehouse inventory transcations.
            query.implementation = WHSWorkInventoryTransactionQueryByWarehouseInventoryTransactions::construct();
        }
        else if (WHSWorkInventoryTransactionQueryRemoveLegacyQueryImplementationFlight::instance().isEnabled())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        else
        {
            // We should never reach this branch
            Debug::assert(WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(_workId));

            // It allows to use the read API on the old stack and still read the InventTrans records - as before.
            query.implementation = WHSWorkInventoryTransactionQueryByInventTrans::construct();
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>