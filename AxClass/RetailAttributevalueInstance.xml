<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAttributevalueInstance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It covers the functionality of <c>RetailInstanceAttributevalue</c> form while creating the call center sales order.
/// </summary>
class RetailAttributevalueInstance
{
    private Map attributeDefinitions;
    private RefRecId instanceRecId;
    private RefRecId currentAttrDefinitionRecId;
    private RefRecId currentAttributeValueRecId;
    private str currentAttributeName;
    private AttributeDataType currentAttributeDataType;
    private str currentUoMSymbol;
    private RefRecId currentUoMRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailAttributevalueInstance obj = new RetailAttributevalueInstance();
        obj.initCaller(_args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCaller</Name>
				<Source><![CDATA[
    private void initCaller(Common commonTable)
    {

        if (!isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            return;
        }

        switch (commonTable.TableId)
        {
            case tableNum(SalesTable):
                if (RetailSalesOrderAttributesFetchesFromCallCenterChannelToggle::instance().IsEnabled())
                {
                    this.initSalesOrderAttributesFromSalesChannel(commonTable);
                }
                else
                {
                    this.initSalesOrderAttributes(commonTable);
                }
                break;
            case tableNum(SalesLine):
                if (RetailSalesOrderAttributesFetchesFromCallCenterChannelToggle::instance().IsEnabled())
                {
                    this.initSalesLineAttributesFromSalesChannel(commonTable);
                }
                else
                {
                    this.initSalesLineAttributes(commonTable);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesOrderAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate attributes on a sales order.
    /// This method is kept for backward compatibility and the initSalesOrderAttributesFromSalesChannel method should be used.
    /// </summary>
    /// <param name = "_salesTable">The row of the SalesTable table.</param>
    private void initSalesOrderAttributes(SalesTable _salesTable)
    {
        RetailSalesTableInstanceValue rstiv;
        RetailChannelAttributeGroup rcag;
        RetailChannelTable rct;
        Set channelAttrGroupSet = new Set(Types::Int64);

        // Get the sales table instance value
        rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesTable.SalesId, _salesTable.DataAreaId);

        // Get the attribute group identifiers associated with
        // sales table InventLocationId.
        while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                && rct.InventLocation == _salesTable.InventLocationId
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (
                    rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Header
                )
        {
            if (!channelAttrGroupSet.in(rcag.AttributeGroup))
            {
                // Check for duplicate item before inserting to Set collection.
                channelAttrGroupSet.add(rcag.AttributeGroup);
            }
        }

        this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLineAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize attributes on sales lines.
    /// This method is kept for backward compatibility and the initSalesLineAttributesFromSalesChannel method should be used.
    /// </summary>
    /// <param name = "_salesLine">The sales line record.</param>
    private void initSalesLineAttributes(SalesLine _salesLine)
    {
        RetailSalesTableInstanceValue rstiv;
        RetailChannelAttributeGroup rcag;
        RetailChannelTable rct;
        InventDim inventDim;
        Set channelAttrGroupSet = new Set(Types::Int64);

        // Get the sales table instance value
        rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesLine.SalesId, _salesLine.DataAreaId, _salesLine.LineNum);

        // Get the attribute group identifiers associated with
        // sales table InventLocationId.
        while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                join inventDim
                where inventDim.inventDimId == _salesLine.InventDimId
                && rct.InventLocation == inventDim.InventLocationId
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (
                    rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Lines
                )
        {
            if (!channelAttrGroupSet.in(rcag.AttributeGroup))
            {
                // Check for duplicate attribute group before inserting to collection.
                channelAttrGroupSet.add(rcag.AttributeGroup);
            }
        }

        this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesOrderAttributesFromSalesChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate attributes on a sales order.
    /// </summary>
    /// <param name = "_salesTable">The row of the SalesTable table.</param>
    private void initSalesOrderAttributesFromSalesChannel(SalesTable _salesTable)
    {
        RetailSalesTableInstanceValue rstiv;
        RetailChannelAttributeGroup rcag;
        RetailChannelTable rct;
        Set channelAttrGroupSet = new Set(Types::Int64);

        // Get the sales table instance value
        rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesTable.SalesId, _salesTable.DataAreaId);

        // Get the attribute group identifiers associated with
        // sales table Retail channel.
        while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                && rct.RecId == _salesTable.RetailChannelTable
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Header)
        {
            if (!channelAttrGroupSet.in(rcag.AttributeGroup))
            {
                // Check for duplicate item before inserting to Set collection.
                channelAttrGroupSet.add(rcag.AttributeGroup);
            }
        }

        this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLineAttributesFromSalesChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize attributes on sales lines.
    /// </summary>
    /// <param name = "_salesLine">The sales line record.</param>
    private void initSalesLineAttributesFromSalesChannel(SalesLine _salesLine)
    {
        RetailSalesTableInstanceValue rstiv;
        RetailChannelAttributeGroup rcag;
        RetailChannelTable rct;
        Set channelAttrGroupSet = new Set(Types::Int64);

        // Get the sales table instance value
        rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesLine.SalesId, _salesLine.DataAreaId, _salesLine.LineNum);

        // Get the attribute group identifiers associated with
        // sales table Retail channel.
        while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                && rct.RecId == _salesLine.salesTable().RetailChannelTable
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Lines)
        {
            if (!channelAttrGroupSet.in(rcag.AttributeGroup))
            {
                // Check for duplicate attribute group before inserting to collection.
                channelAttrGroupSet.add(rcag.AttributeGroup);
            }
        }

        this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate list of attribute definitions and atttribute values.
    /// </summary>
    /// <param name = "_attributeGroupSet">Collection of attribute group identifiers.</param>
    /// <param name = "_instanceRecId">Record identifier of instance value.</param>
    private void initAttributeValues(Set _attributeGroupSet, RefRecId _instanceRecId)
    {
        SetEnumerator attrGroupSetEnumerator = _attributeGroupSet.getEnumerator();
        instanceRecId = _instanceRecId;
        RefRecId attrDefinitionRecId;

        // Get list of attribute definitions.
        attributeDefinitions = RetailAttributeHelper::getAttributeDefinitionsByAttributeGroups(_attributeGroupSet);

        // Instantiate the form table to fill attribute definitions and attribute values.
        RetailInstanceAttributeValuesTmp::initAttributeValues(attributeDefinitions, _instanceRecId);
        this.populateValueOnUnassignedRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateValueOnUnassignedRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate existing value (if any) on the unassigned row.
    /// </summary>
    private void populateValueOnUnassignedRow()
    {
        MapEnumerator attrDefinitionEnumerator = attributeDefinitions.getEnumerator();

        RefRecId currentAttrDefinitionRecIdCopy = currentAttrDefinitionRecId;
        while (attrDefinitionEnumerator.moveNext())
        {
            Map attributeDefinitionDetails = attributeDefinitions.lookup(attrDefinitionEnumerator.currentKey());
            RefRecId attrDefinitionRecId = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionRecIdKey);
            RetailInstanceAttributeValuesTmp riav;

            if (RetailAttributevalueInstanceUnassignedRowReWriteQueryFlight::instance().isEnabled())
            {
                RetailInstanceAttributeValuesTmp riavRecId;

                select firstonly RecId from riavRecId
                    where riavRecId.AttributeRecId == attrDefinitionRecId;

                select riav
                    where riav.RecId == riavRecId.RecId;
            }
            else
            {
                select firstonly riav
                    where riav.AttributeRecId == attrDefinitionRecId;
            }

            if (riav)
            {
                this.populateValueOnSelectedRow(riav.AttributeRecId);
            }
        }
        currentAttrDefinitionRecId = currentAttrDefinitionRecIdCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateValueOnSelectedRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate existing value (if any) on the selected row or the specified row.
    /// </summary>
    /// <param name = "_specifyAttrDefinitionRecId">The specified row RecId.</param>
    private void populateValueOnSelectedRow(RefRecId _specifyAttrDefinitionRecId = 0)
    {
        EcoResAttributeValue erav;
        EcoResValue ecoResValue;
        Map attributeDefinitionDetails;
        anytype defaultValue;
        RefRecId tempCurrentAttrDefinitionRecId;

        if (attributeDefinitions.elements() == 0)
        {
            // No need to populate anything if there is no attributes associated with the attribute group.
            return;
        }

        currentAttrDefinitionRecId = _specifyAttrDefinitionRecId ;
        attributeDefinitionDetails = attributeDefinitions.lookup(currentAttrDefinitionRecId);
        currentAttributeDataType = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionTypeKey);
        currentUoMRecId = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionUoMRecIdKey);

        //Get the attribute's rec id which is imported through DMF
        //Retail attributes form should display imported attribute values if there are any
        //else display attribute definition values/user setup values
        tempCurrentAttrDefinitionRecId = RetailInstanceAttributeValuesTmp::getImportedAttribRecId(currentAttrDefinitionRecId,instanceRecId);
        currentAttrDefinitionRecId = tempCurrentAttrDefinitionRecId ? tempCurrentAttrDefinitionRecId :currentAttrDefinitionRecId;

        ecoResValue.disableCache(true);  // Disable cache to avoid issues where table is updated via Data Entity.
        select firstonly RecId from ecoResValue
            order by ecoResValue.RecId
            join erav
        where ecoResValue.RecId == erav.Value
        && erav.Attribute == currentAttrDefinitionRecId
        && erav.InstanceValue == instanceRecId;

        currentAttributeValueRecId = ecoResValue.RecId;

        // Autosave nonexisting value / value not yet saved on table,
        // if they have default value.
        if (ecoResValue.RecId == 0)
        {
            this.saveAttributeValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the attribute value.
    /// </summary>
    public void saveAttributeValue()
    {
        // No need to save if there is no current attribute definition record identifier.
        if (currentAttrDefinitionRecId == 0)
        {
            return;
        }

        // Attribute value record identifier is not found, save value by inserting new record identifier.
        this.insertAttributeValue();

        // update the attribute values grid form
        RetailInstanceAttributeValuesTmp::refreshAttributeValue(currentAttrDefinitionRecId, instanceRecId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save new attribute value to the database.
    /// This value is not exists so a new row will be inserted to the attribute value table.
    /// </summary>
    protected void insertAttributeValue()
    {
        EcoResTextValue ecoResTextValue;
        EcoResBooleanValue ecoResBooleanValue;
        EcoResIntValue ecoResIntValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResAttributeValue ecoResAttributeValue;
        RefRecId attrValueRecId;

        ttsbegin;

        switch (currentAttributeDataType)
        {
            case AttributeDataType::Text:
                ecoResTextValue.initValue();

                ecoResTextValue.insert();
                attrValueRecId = ecoResTextValue.RecId;
                break;
            case AttributeDataType::Integer:
                ecoResIntValue.initValue();
                ecoResIntValue.IntUnitOfMeasure = currentUoMRecId;
                ecoResIntValue.insert();
                attrValueRecId = ecoResIntValue.RecId;
                break;
            case AttributeDataType::Decimal:
                ecoResFloatValue.initValue();
                ecoResFloatValue.FloatUnitOfMeasure = currentUoMRecId;
                ecoResFloatValue.insert();
                attrValueRecId = ecoResFloatValue.RecId;
                break;
            case AttributeDataType::DateTime:
                ecoResDateTimeValue.initValue();
                ecoResDateTimeValue.insert();
                attrValueRecId = ecoResDateTimeValue.RecId;
                break;
            case AttributeDataType::TrueFalse:
                ecoResBooleanValue.initValue();
                ecoResBooleanValue.insert();
                attrValueRecId = ecoResBooleanValue.RecId;
                break;
        }

        // insert data to EcoResAttributeValue table.
        ecoResAttributeValue.initValue();
        ecoResAttributeValue.InstanceValue = instanceRecId;
        ecoResAttributeValue.Attribute = currentAttrDefinitionRecId;
        ecoResAttributeValue.Value = attrValueRecId;
        ecoResAttributeValue.insert();

        ttscommit;

        // Save the newly created value record identifier.
        currentAttributeValueRecId = attrValueRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>