<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgCleanupTermReg</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgCleanupTermReg</c> class cleans up the <c>JmgTermReg</c> table.
/// </summary>
/// <remarks>
///  Records are removed from the
///  <c>
///  JmgTermReg
///  </c>
///   table and can be either saved into the
///  <c>
///  JmgTermRegArchive
///  </c>
///   table, inserted into a file, or deleted. The class also handles clean-up of the
///  <c>
///  JmgTermRegArchive
///  </c>
///   table. Records can be saved in a file or deleted. To handle this, two subclasses exist:
///  <list type="bullet">
///   <item>
///    <description>
///    The <c>JmgCleanupTermReg_TermReg</c> class to handle clean-up of the <c>JmgTermReg</c> table.
///    </description>
///   </item>
///   <item>
///    <description>
///    The <c>JmgCleanupTermReg_Archive</c> class to handle clean-up of the <c>JmgTermRegArchive</c> table.
///    </description>
///   </item>
///  </list>
/// </remarks>
abstract class JmgCleanupTermReg extends RunBaseBatch
{
    private static boolean isJmgTermRegArchiveInitExtensibilityFlightEnabled = JmgTermRegArchiveInitExtensibilityFlight::instance().isEnabled();

    JmgTermRegCleanupMode   cleanupMode;
    JmgDays                 maxAge;

    DialogField             dfCleanupMode;
    DialogField             dfMaxAge;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        cleanupMode,
        maxAge
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>archiveToFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Archives records from the <c>JmgTermReg</c> table or the <c>JmgTermRegArchive</c> table to a file.
    ///    The records are fetched from the specified query run, and loaded into the
    ///    <c>JmgTermRegArchiveMap</c> map.
    /// </summary>
    /// <param name="_queryRun">
    ///    <c>QueryRun</c> referencing either the <c>JmgTermReg</c> records, or <c>JmgTermRegArchive</c>
    ///    records which should be archived to a file.
    /// </param>
    /// <remarks>
    ///    For a description of the file format, see <see cref="M:JmgCleanupTermReg::termReg2Container" />.
    /// </remarks>
    private void archiveToFile(QueryRun _queryRun)
    {
        JmgTermRegArchiveMap    input;

        int noOfRecords = 0;

        CommaStreamIo fileHandle = this.initFileHandle();

        fileHandle.writeExp(this.getHeader());

        while (_queryRun.next())
        {
            input = _queryRun.getNo(1);

            fileHandle.writeExp(JmgCleanupTermReg::termReg2Container(input));

            input.selectForUpdate(true);
            input.doDelete();
            noOfRecords++;
            progress.setCount(noOfRecords);
        }

        File::SendFileToUser(fileHandle.getStream(), JmgCleanupTermReg::getArchiveExportFileName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArchiveExportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a file name for exported terminal registration archive records.
    /// </summary>
    /// <returns>File name.</returns>
    private static str getArchiveExportFileName()
    {
        System.DateTime exportDate = System.DateTime::UtcNow;

        str exportFileName = strfmt('TerminalRegistrationRecordsArchive_%1.csv', exportDate.ToString('yyyyMMdd'));

        return exportFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveToTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Archives records from the <see cref="T:JmgTermReg" /> table to the <c>JmgTermRegArchive</c> table.
    /// The records are fetched from the specified query run.
    /// </summary>
    /// <param name="_queryRun">
    /// <c>QueryRun</c> referencing the <c>JmgTermReg</c> records, which should be archived to the
    /// <c>JmgTermRegArchive</c> table.
    /// </param>
    private void archiveToTable(QueryRun _queryRun)
    {
        JmgTermReg          input;
        JmgTermRegArchive   archive;

        int noOfRecords = 0;

        while (_queryRun.next())
        {
            input = _queryRun.getNo(1);
            this.initializeArchive(archive, input);
            archive.insert();

            input.selectForUpdate(true);
            input.doDelete();
            noOfRecords++;
            progress.setCount(noOfRecords);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the specified archive record based on the specific input registration.
    /// </summary>
    /// <param name = "_archive">The archive record to initialize.</param>
    /// <param name = "_input">The registration to initialize the archive from.</param>
    protected void initializeArchive(JmgTermRegArchive _archive, JmgTermReg _input)
    {
        if (isJmgTermRegArchiveInitExtensibilityFlightEnabled)
        {
            JmgTermRegArchive archive = JmgTermRegArchive::initFromJmgTermReg(_input);
            archive.Description = strFmt("@SYS40026", JmgProfileSeconds::getSysDate());
            _archive.data(archive);
        }
        else
        {
            JmgTermRegArchiveMap map;
            map.data(_input);

            _archive.data(map);
            _archive.Description = strFmt("@SYS40026", JmgProfileSeconds::getSysDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the <c>JmgTermReg</c> table or the <c>JmgTermRegArchive</c> table fetched from
    /// the specified query run.
    /// </summary>
    /// <param name="_queryRun">
    /// The instance of the <c>QueryRun</c> class that references either the <c>JmgTermReg</c> or
    /// <c>JmgTermRegArchive</c> records that should be deleted.
    /// </param>
    /// <remarks>
    /// The records are deleted by using the doDelete table method.
    /// </remarks>
    private void delete(QueryRun _queryRun)
    {
        JmgTermRegArchiveMap    input;
        int                     noOfRecords;
        noOfRecords = 0;
        while (_queryRun.next())
        {
            input = _queryRun.getNo(1);
            input.doDelete();
            noOfRecords++;
            progress.setCount(noOfRecords);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a class that contains the methods described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <param name="dialog">
    /// An already initialized dialog.
    /// </param>
    /// <param name="forceOnClient">
    /// A Boolean value that specifies whether the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    /// An instance of the <c>RunbaseDialogable</c> class.
    /// </returns>
    /// <remarks>
    /// The <c>JmgCleanupTermReg</c> class adds following fields to the dialog: cleanup mode and maximum age.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret;

        ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS39821");
        dfCleanupMode       = ret.addField(enumStr(JmgTermRegCleanupMode));
        dfMaxAge            = ret.addField(extendedTypeStr(JmgDays), "@SYS39823", "@SYS39824");

        dfCleanupMode.value(cleanupMode);
        if (maxAge < 30)
        {
            maxAge = 30;
        }
        dfMaxAge.value(maxAge);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the dialog values to the internal variables after the dialog is closed.
    /// </summary>
    /// <returns>
    ///    true if user input is successfully validated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>JmgCleanupTermReg</c> retrieves value from cleanup mode and maximum age
    ///    dialog fields. It is checked that maximum age is greater than or equal to 30.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        cleanupMode     = dfCleanupMode.value();
        maxAge          = dfMaxAge.value();

        if (maxAge < 30)
        {
            ret = checkFailed("@SYS39825");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container that contains headers for the archive file.
    /// </summary>
    /// <returns>
    /// A container of header values.
    /// </returns>
    protected container getHeader()
    {
        container   ret;
        int         counter;

        void addField(fieldId _fieldId)
        {
            SysDictField    field;
            field = new SysDictField(tablenum(JmgTermReg), _fieldId);
            counter++;
            ret = conins(ret, conlen(ret) + 1, field.label());
        }
        counter = 0;
        ret     = connull();

        addField(fieldnum(JmgTermReg, Worker));
        addField(fieldnum(JmgTermReg, RegType));
        addField(fieldnum(JmgTermReg, RegDateTime));
        addField(fieldnum(JmgTermReg, JobId));
        addField(fieldnum(JmgTermReg, JobIdAbs));
        addField(fieldnum(JmgTermReg, WorkerPilot));
        addField(fieldnum(JmgTermReg, JobActive));
        addField(fieldnum(JmgTermReg, ResNo));
        addField(fieldnum(JmgTermReg, StartItems));
        addField(fieldnum(JmgTermReg, GoodItems));
        addField(fieldnum(JmgTermReg, FinishedCode));
        addField(fieldnum(JmgTermReg, ErrorSpecification));
        addField(fieldnum(JmgTermReg, CostCategory));
        addField(fieldnum(JmgTermReg, OnCallActivity));
        addField(fieldnum(JmgTermReg, RecId));
        addField(fieldnum(JmgTermReg, MatchRecIdStartStop));
        addField(fieldnum(JmgTermReg, TerminalId));
        addField(fieldnum(JmgTermReg, PdsCWStartItems));
        addField(fieldnum(JmgTermReg, PdsCWGoodItems));
        addField(fieldnum(JmgTermReg, ProfileDate));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFileHandle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CommaStreamIo</c> and sets the field
    /// delimiter to a comma and the record delimiter to a carriage return and a newline character.
    /// </summary>
    /// <returns>
    /// A <c>CommaStreamIo</c> instance
    /// </returns>
    private CommaStreamIo initFileHandle()
    {
        CommaStreamIo fileHandle = CommaStreamIo::constructForWrite();
        fileHandle.outFieldDelimiter(',');
        fileHandle.outRecordDelimiter('\r\n');

        return fileHandle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>QueryRun</c> object, which is used to fetch the records to be cleaned up.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> object that references the records to be cleaned up.
    /// </returns>
    /// <remarks>
    /// This method is declared abstract. It should return a <c>QueryRun</c> object that has a query that
    /// contains one data source, which can be mapped to the <c>JmgTermRegArchiveMap</c> map.
    /// </remarks>
    protected abstract QueryRun initQueryRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>JmgCleanupTermReg</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>JmgCleanupTermReg</c> class.
    /// </returns>
    /// <remarks>
    ///    When <see cref="M:RunBase.isSwappingPrompt" /> returns true it might be necessary to pack some
    ///    prompt-related variables as well.
    /// </remarks>
    public container pack()
    {
        container ret;

        ret = [#CurrentVersion, #CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method must contain the code that does the actual job of the class. Initializes the query, and
    /// executes the cleanup of <c>JmgTermReg</c> or <c>JmgTermRegArchive</c> table.
    /// </summary>
    public void run()
    {
        #AviFiles

        super();

        ttsbegin;

        QueryRun qr = this.initQueryRun();
        this.progressInit("@SYS39821", SysQuery::countLoops(qr), #AviFileMove);

        switch (cleanupMode)
        {
            case JmgTermRegCleanupMode::ToTable:
                this.archiveToTable(qr);
                break;
            case JmgTermRegCleanupMode::ToFile:
                this.archiveToFile(qr);
                break;
            case JmgTermRegCleanupMode::Delete:
                this.delete(qr);
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="packedClass" /> parameter value to an instance of the
    ///    <c>JmgCleanupTermReg</c> class.
    /// </summary>
    /// <param name="packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When <see cref="M:RunBase.isSwappingPrompt" /> returns true, it may be necessary to unpack some
    ///    prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        boolean ret;
        int     version;
        version = conPeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>container2TermReg</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a container to a <c>JmgTermRegArchive</c> record. The container must have the format returned by the <see cref="JmgCleanupTermReg::termReg2Container Method" />
    /// </summary>
    /// <param name="_input">
    ///    Container with values that should be converted to a record from <c>JmgTermRegArchive</c> table.
    /// </param>
    /// <returns>
    ///    <c>JmgTermRegArchiveMap</c>: A <c>JmgTermRegArchive</c> record, based on the input container.
    /// </returns>
    /// <remarks>
    ///    This method should be used to import records from an archive file to the <c>JmgTermRegArchive</c> table. The expected file format is returned by the <see cref="JmgCleanupTermReg::termReg2Container
    ///    Method" />
    /// </remarks>
    public static JmgTermRegArchiveMap container2TermReg(container _input)
    {
        JmgTermRegArchiveMap    ret;
        JmgTermRegType          regType;
        ret.Worker              = conpeek(_input, 1);
        ret.RegType             = str2enum(regType, conpeek(_input, 2));
        ret.RegDateTime         = DateTimeUtil::parse(conpeek(_input, 3));
        ret.JobId               = conpeek(_input, 4);
        ret.JobIdAbs            = conpeek(_input, 5);
        ret.WorkerPilot         = conpeek(_input, 6);
        ret.JobActive           = conpeek(_input, 7);
        ret.ResNo               = conpeek(_input, 8);
        ret.StartItems          = conpeek(_input, 9);
        ret.GoodItems           = conpeek(_input, 10);
        ret.FinishedCode        = conpeek(_input, 11);
        ret.ErrorSpecification  = conpeek(_input, 12);
        ret.CostCategory        = conpeek(_input, 13);
        ret.OnCallActivity      = conpeek(_input, 14);
        ret.TermRegRecId        = conpeek(_input, 15);
        ret.MatchRecIdStartStop = conpeek(_input, 16);
        ret.TerminalId          = conpeek(_input, 17);
        ret.PdsCWStartItems     = conpeek(_input, 18);
        ret.PdsCWGoodItems      = conpeek(_input, 19);
        ret.ProfileDate         = conpeek(_input, 20);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgCleanupTermReg   jmgCleanupTermReg;
        FormRun             caller;
        if (_args)
        {
            caller = _args.caller();
        }

        if (caller && caller.name() == formStr(JmgTermRegArchive))
        {
            jmgCleanupTermReg = new JmgCleanupTermReg_Archive();
        }
        else
        {
            jmgCleanupTermReg = new JmgCleanupTermReg_TermReg();
        }

        if (jmgCleanupTermReg.prompt())
        {
            jmgCleanupTermReg.runOperation();
            if (caller)
            {
                caller.dataSource().research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>termReg2Container</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>JmgTermRegArchiveMap</c> record to a container.
    /// </summary>
    /// <param name="_input">
    /// A <c>JmgTermRegArchiveMap</c> record that should be converted to a container of values.
    /// </param>
    /// <returns>
    /// A container that contains values from the <c>JmgTermRegArchiveMap</c> map.
    /// </returns>
    public static container termReg2Container(JmgTermRegArchiveMap _input)
    {
        return [int642str(_input.Worker),
                enum2str(_input.RegType),
                DateTimeUtil::toStr(_input.RegDateTime),
                _input.JobId,
                _input.JobIdAbs,
                int642str(_input.WorkerPilot),
                _input.JobActive,
                _input.ResNo,
                _input.StartItems,
                _input.GoodItems,
                _input.FinishedCode,
                _input.ErrorSpecification,
                _input.CostCategory,
                _input.OnCallActivity,
                _input.TermRegRecId,
                _input.MatchRecIdStartStop,
                _input.TerminalId
                ,_input.PdsCWStartItems
                ,_input.PdsCWGoodItems
                ,_input.ProfileDate
                ];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>