<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProServiceClientBase_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System.Net.Http.Headers;

/// <summary>
/// A base service client for Chorus Pro integration.
/// </summary>
internal abstract class BusinessDocChorusProServiceClientBase_FR
{
    protected const int64 REQUEST_TIMEOUT_SECONDS = 60;

    protected str endpointURL;
    protected BusinessDocChorusProIParameters parameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndpointURL</Name>
				<Source><![CDATA[
    protected void setEndpointURL(str _endpointURL)
    {
        endpointURL = _endpointURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    protected void setParameters(BusinessDocChorusProIParameters _parameters)
    {
        parameters = _parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestChorusPro</Name>
				<Source><![CDATA[
    protected JObject requestChorusPro(
        str _endpointURL,
        str _apiRoute,
        str _action,
        str _method = BusinessDocumentWebHelperBase::HttpPost,
        str _jsonBody = '',
        str _contentType = BusinessDocumentWebHelperBase::JsonContentType,
        Map _queryParameters = null)
    {
        boolean isSuccess;
        JObject response;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocInvoiceServiceCodeProvider_FR));
        using (var activityContext = activities.requestWebServiceForJson())
        {
            try
            {
                str responseText;
                boolean exception;
                using (var webHelper = this.createWebHelper(_endpointURL, _apiRoute))
                {
                    [exception, responseText] = webHelper.callWebServiceBase(_method, '', _action, _jsonBody, _contentType, _queryParameters);
                }

                try
                {
                    if (strStartsWith(responseText, '{'))
                    {
                        response = Newtonsoft.Json.JsonConvert::DeserializeObject(responseText);
                    }
                }
                catch
                {
                }

                isSuccess = (exception == false && response != null);
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }
        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestHeaders</Name>
				<Source><![CDATA[
    protected abstract void addRequestHeaders(HttpRequestMessage _request)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAuthorizationHeader</Name>
				<Source><![CDATA[
    protected abstract void addAuthorizationHeader(HttpRequestMessage _request)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebHelper</Name>
				<Source><![CDATA[
    private BusinessDocumentWebHelperBase createWebHelper(str _endpointURL, str _apiRoute = '')
    {
        var ret = new BusinessDocumentWebHelperBase(_endpointURL, _apiRoute);

        ret.addHttpRequestHeadersHandler += eventhandler(this.addRequestHeaders);
        ret.addHttpRequestAuthorizationHeadersHandler += eventhandler(this.addAuthorizationHeader);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>