<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkTransDP</c> class is the data provider class for the <c>WHSWorkTrans</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(WHSWorkTransContract)),
    SRSReportQueryAttribute(queryStr(WHSWorkTrans))
]
public class WHSWorkTransDP extends SRSReportDataProviderPreProcessTempDB
{
    protected WHSWorkTransTmp workTransTmp;
    protected WHSWorkTrans    workTrans;
    protected WHSWorkLine     workLine;
    protected FromDateTime    fromDateTime;
    protected ToDateTime      toDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query that is used to pull the records for the report.
    /// </summary>
    /// <param name="_query">
    /// The report query object to modify.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from datetime range parameter of the report.
    /// </param>
    /// <param name="_toDateTime">
    /// The to datetime  range parameter of the report.
    /// </param>
    /// <returns>
    /// The modified query object to use to pull records for the report.
    /// </returns>
    private Query buildQuery(
        Query           _query,
        FromDateTime    _fromDateTime,
        ToDateTime      _toDateTime)
    {
        // Add the datetime range on <c>WHSWorkTrans</c> TransDateTime field to allow SQL to restrict the records as much as possible prior to processing
        _query.dataSourceTable(tableNum(WHSWorkTrans)).addRange(fieldNum(WHSWorkTrans, TransDateTime)).value(queryRange(_fromDateTime, _toDateTime));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the report parameters from data contract to member variables.
    /// </summary>
    private void getReportParameters()
    {
        WHSWorkTransContract    contract = this.parmDataContract();

        if (contract) 
        {
            fromDateTime = contract.parmFromDateTime();
            toDateTime = contract.parmToDateTime();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>WHSWorkTransTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(WHSWorkTransTmp))
    ]
    public WHSWorkTransTmp getWorkTransTmp()
    {
        select  workTransTmp;
        return  workTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWorkTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>WHSWorkTransTmp</c> temporary table, which will be used by the report.
    /// </summary>
    private void insertWorkTransTmp()
    {
        workTransTmp.clear();

        workTransTmp.WorkId               = workTrans.WorkId;
        workTransTmp.WorkTransId          = workTrans.WorkTransId;
        workTransTmp.LineNum              = workTrans.LineNum;
        workTransTmp.TransDateTime        = workTrans.TransDateTime;
        workTransTmp.UserId               = workTrans.UserId;
        workTransTmp.UserName             = workTrans.displayWHSUserName();
        workTransTmp.ItemId               = workTrans.ItemId;
        workTransTmp.ProductName          = InventTable::name(workLine.ItemId, workLine.inventDim());
        workTransTmp.Qty                  = workTrans.Qty;
        workTransTmp.UOM                  = workTrans.UOM;
        workTransTmp.TargetLicensePlateId = workTrans.TargetLicensePlateId;
        workTransTmp.WorkType             = workLine.WorkType;

        workTransTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        this.getReportParameters();

        QueryRun queryRun = new QueryRun(this.buildQuery(this.parmQuery(), fromDateTime, toDateTime));

        while (queryRun.next())
        {
            workTrans = queryRun.get(tableNum(WHSWorkTrans));
            workLine  = queryRun.get(tableNum(WHSWorkLine));

            this.insertWorkTransTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkTransDP construct()
    {
        return new WHSWorkTransDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>