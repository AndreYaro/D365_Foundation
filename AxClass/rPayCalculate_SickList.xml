<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_SickList</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayCalculate_SickList extends RPayCalculate
{
    RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
    RPayAverageEarnEmplPeriodTable  recalcAverageEarnEmplPeriodTable;
    RPayAverageEarnValue           rPayAverageEarnValue;
    RPayDayHour                    payDayHour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_SickCurrent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_SickCurrent()
    {
        RPayAmount amount;
        RPaySickWageType    wageType = this.numFrom2WageType();
        ;

        if (((rPayAverageEarnEmplPeriodTable.RecalcSickListId                               &&
              rPayAverageEarnValue.PayPeriod == recalcAverageEarnEmplPeriodTable.PayPeriod) ||
             (! rPayAverageEarnEmplPeriodTable.RecalcSickListId                             &&
              rPayAverageEarnValue.PayPeriod == payPeriod))                                 &&
            rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund &&
            (wageType == rPayAverageEarnValue.SickWageType                                  ||
             wageType == RPaySickWageType::None)                                            &&
            ! rPayAverageEarnValue.IsSourceLine)
        {
             amount = rPayAverageEarnValue.Amount;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SickCurrentOther</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_SickCurrentOther()
    {
        RPayAmount amount;
        ;

        if (((rPayAverageEarnEmplPeriodTable.RecalcSickListId                               &&
              rPayAverageEarnValue.PayPeriod == recalcAverageEarnEmplPeriodTable.PayPeriod) ||
             (! rPayAverageEarnEmplPeriodTable.RecalcSickListId                             &&
              rPayAverageEarnValue.PayPeriod == payPeriod))                                 &&
            rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::OtherFund   &&
            ! rPayAverageEarnValue.IsSourceLine)
        {
             amount = rPayAverageEarnValue.Amount;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SickNext</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_SickNext()
    {
        RPayAmount amount;
        RPaySickWageType    wageType = this.numFrom2WageType();
        ;
        if (((rPayAverageEarnEmplPeriodTable.RecalcSickListId                                           &&
              rPayAverageEarnValue.PayPeriod > recalcAverageEarnEmplPeriodTable.PayPeriod)  ||
             (! rPayAverageEarnEmplPeriodTable.RecalcSickListId                                         &&
              rPayAverageEarnValue.PayPeriod > payPeriod))                                              &&
            rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund &&
            (wageType == rPayAverageEarnValue.SickWageType                                              ||
             wageType == RPaySickWageType::None)                                                        &&
            ! rPayAverageEarnValue.IsSourceLine)
        {
            amount = rPayAverageEarnValue.Amount;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SickNextOther</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_SickNextOther()
    {
        RPayAmount amount;
        ;

        if (((rPayAverageEarnEmplPeriodTable.RecalcSickListId                               &&
              rPayAverageEarnValue.PayPeriod > recalcAverageEarnEmplPeriodTable.PayPeriod)  ||
             (! rPayAverageEarnEmplPeriodTable.RecalcSickListId                             &&
              rPayAverageEarnValue.PayPeriod > payPeriod))                                  &&
            rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::OtherFund   &&
            ! rPayAverageEarnValue.IsSourceLine)
        {
            amount = rPayAverageEarnValue.Amount;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SickPrev</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_SickPrev()
    {
        RPayAmount amount;
        RPaySickWageType    wageType = this.numFrom2WageType();
        ;

        if (((rPayAverageEarnEmplPeriodTable.RecalcSickListId                               &&
              rPayAverageEarnValue.PayPeriod < recalcAverageEarnEmplPeriodTable.PayPeriod)  ||
             (! rPayAverageEarnEmplPeriodTable.RecalcSickListId                             &&
              rPayAverageEarnValue.PayPeriod < payPeriod))                                  &&
            rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund &&
            (wageType == rPayAverageEarnValue.SickWageType                                  ||
             wageType == RPaySickWageType::None)                                            &&
            ! rPayAverageEarnValue.IsSourceLine)
        {
            amount = rPayAverageEarnValue.Amount;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SickPrevOther</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_SickPrevOther()
    {
        RPayAmount amount;
        ;

        if (((rPayAverageEarnEmplPeriodTable.RecalcSickListId                               &&
              rPayAverageEarnValue.PayPeriod < recalcAverageEarnEmplPeriodTable.PayPeriod)  ||
             (! rPayAverageEarnEmplPeriodTable.RecalcSickListId                             &&
              rPayAverageEarnValue.PayPeriod < payPeriod))                                  &&
            rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::OtherFund   &&
            ! rPayAverageEarnValue.IsSourceLine)
        {
            amount = rPayAverageEarnValue.Amount;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    public void calcCommon(RPaySequence _paySequence  = 0,
                           NoYes        _errorMessage = NoYes::No)
    {
        RPaySickIllParameters paySickIllParameters;
        boolean               checkDismissal = true;
        ;
        rPayAverageEarnEmplPeriodTable = sourceTable;
        if (needCheckModuleCalculate)
        {
            if (! this.canModuleCalculate())
            {
                throw info("@RUP387");
            }
        }

        this.checkPostingProfiles(true);

        paySickIllParameters = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);

        if (paySickIllParameters.ApplySeniorityRestriction &&
            paySickIllParameters.DismissalSeniorityRestriction)
        {
            checkDismissal = false;
        }

        if (emplTable.checkEmplBeforeCalc(payPeriod, _errorMessage, false, checkDismissal))
        {
            this.initTransDate(emplTable.EmployeeId);

            while select paySeqTable
                where paySeqTable.PayModuleCode == payModuleTable.PayModuleCode &&
                     (paySeqTable.Scanning      == _paySequence ||
                     (_paySequence ? false : true))
            exists join paySickIllParameters
                where paySickIllParameters.PayIllType  == rPayAverageEarnEmplPeriodTable.RpayIllType &&
                      paySickIllParameters.PaySequence == paySeqTable.Scanning
            {
                while select rPayAverageEarnValue
                    where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
                {
                    sourceTable = rPayAverageEarnValue;
                    this.calcSequence();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    public void calcEmpl(RHRMEmplId         _emplId,
                         RPaySequence       _paySequence=0)
    {
        QueryBuildDataSource           qbd, qbds2;
        QueryBuildRange                qbr;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTableLocal;
        int                            i;
        int                            dsCount = queryRun.query().dataSourceCount();
        ;

        setPrefix(payModuleTable.PayModuleName);
        needCheckModuleCalculate = false;

        this.payPeriod(RPayParameters::payPeriod(_emplId));
        payPeriodVirtual = this.payPeriod();

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            this.deletePayTrans(_emplId);

            ttscommit;
        }

        for (i = 1; i <= dsCount ; i ++)
        {
           queryRun.query().dataSourceNo(i).clearRanges();
        }

        qbd = queryRun.query().dataSourceTable(tableNum(RPayAverageEarnEmplPeriodTable));
        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod));
        qbr.value(queryValue(payPeriod));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,EmplId));
        qbr.value(queryValue(_emplId));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,Included));
        qbr.value(queryValue(NoYes::Yes));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,RpayIllType));
        qbr.value(SysQuery::valueNot(RPayIllType::ChildVacation));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
        qbr.value(queryValue(RPayAverageEarnCodeType::SickList));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, CorrectedSickListId));
        qbr.value(SysQuery::valueEmptyString());
        qbr.status(RangeStatus::Locked);

        qbds2 = qbd.addDataSource(tableNum(TransLink_RU));
        qbds2.joinMode(JoinMode::NoExistsJoin);
        qbds2.addLink(fieldNum(RPayAverageEarnEmplPeriodTable, TableId), fieldNum(TransLink_RU, RefTableId));
        qbds2.addLink(fieldNum(RPayAverageEarnEmplPeriodTable, RecId),   fieldNum(TransLink_RU, RefSec));
        qbds2.fetchMode(QueryFetchMode::One2One);
        qbds2.addRange(fieldNum(TransLink_RU, Reversed)).value(queryValue(NoYes::Yes));

        while (queryRun.next())
        {
            rPayAverageEarnEmplPeriodTableLocal = queryRun.get(tableNum(RPayAverageEarnEmplPeriodTable));
            if (rPayAverageEarnEmplPeriodTableLocal.EmplId)
            {
                this.setSourceTable(rPayAverageEarnEmplPeriodTableLocal);
                this.calcCommon(_paySequence,NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuery</Name>
				<Source><![CDATA[
    public void calcQuery(RPaySequence _paySequence=0)
    {
        QueryBuildDataSource qbd, qbds2;
        QueryBuildRange      qbrPeriod,
                             qbrCodeType,
                             qbrSost,
                             qbrIllType;
        int                  current;
        int                  dsCount = queryRun.query().dataSourceCount();
        ;

        qbd = queryRun.query().dataSourceTable(tableNum(RPayAverageEarnEmplPeriodTable));
        if (queryRun.interactive())
        {
            qbrPeriod   = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod));
            qbrPeriod.status(RangeStatus::Locked);
            qbrSost     = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable,Included));
            qbrSost.status(RangeStatus::Locked);
            qbrCodeType = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
            qbrCodeType.status(RangeStatus::Hidden);
        }
        else
        {
            for (current = 1; current <= dsCount ; current ++)
            {
                queryRun.query().dataSourceNo(current).clearRanges();
            }
            current = 0;
            qbrPeriod   = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod));
            qbrSost     = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,Included));
            qbrCodeType = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
        }

        qbrIllType = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,RpayIllType));
        qbrIllType.status(RangeStatus::Hidden);
        qbrIllType.value(SysQuery::valueNot(RPayIllType::ChildVacation));

        qbrPeriod.value(queryValue(payPeriod));
        qbrSost.value(queryValue(NoYes::Yes));
        qbrCodeType.value(queryValue(RPayAverageEarnCodeType::SickList));

        qbrCodeType = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, CorrectedSickListId));
        qbrCodeType.value(SysQuery::valueEmptyString());
        qbrCodeType.status(RangeStatus::Locked);

        qbds2 = qbd.addDataSource(tableNum(TransLink_RU));
        qbds2.joinMode(JoinMode::NoExistsJoin);
        qbds2.addLink(fieldNum(RPayAverageEarnEmplPeriodTable, TableId), fieldNum(TransLink_RU, RefTableId));
        qbds2.addLink(fieldNum(RPayAverageEarnEmplPeriodTable, RecId),   fieldNum(TransLink_RU, RefSec));
        qbds2.fetchMode(QueryFetchMode::One2One);
        qbds2.addRange(fieldNum(TransLink_RU, Reversed)).value(queryValue(NoYes::Yes));

        super(_paySequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePayTrans</Name>
				<Source><![CDATA[
    protected void deletePayTrans(RHRMEmplId _emplId = '')
    {
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTableLocal;
        TransLink_RU                    transLink;
        RPayAverageEarnValue            rPayAverageEarnValueLocal;
        RPayEmplParameters              emplParameters;

        if (_emplId)
        {
            while select forupdate payTrans
                where payTrans.PayPeriod                            == payPeriod                    &&
                      payTrans.PayModuleCode                        == payModuleTable.PayModuleCode &&
                      payTrans.SourceTableId                                                        &&
                      payTrans.SourceRecId                                                          &&
                      payTrans.Emplid                               == _emplId
                exists join RecId from rPayAverageEarnValueLocal
                    where rPayAverageEarnValueLocal.RecId           == payTrans.SourceRecId
                exists join RecId from rPayAverageEarnEmplPeriodTableLocal
                    where rPayAverageEarnEmplPeriodTableLocal.RecId == rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid
                       && ! rPayAverageEarnEmplPeriodTableLocal.CorrectedSickListId
                notexists join transLink
                    where transLink.RefTableId      == rPayAverageEarnEmplPeriodTableLocal.TableId &&
                          transLink.RefSec          == rPayAverageEarnEmplPeriodTableLocal.RecId   &&
                          transLink.TransLinkType   == TransLinkType_RU::Original                  &&
                          transLink.Reversed
            {
                payTrans.delete();
            }
        }
        else
        {
            while select forupdate payTrans
                    where payTrans.PayPeriod                        == payPeriod                    &&
                          payTrans.PayModuleCode                    == payModuleTable.PayModuleCode &&
                          payTrans.SourceTableId                                                    &&
                          payTrans.SourceRecId
                exists join RecId from rPayAverageEarnValueLocal
                    where rPayAverageEarnValueLocal.RecId           == payTrans.SourceRecId
                exists join RecId from rPayAverageEarnEmplPeriodTableLocal
                    where rPayAverageEarnEmplPeriodTableLocal.RecId == rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid
                       && ! rPayAverageEarnEmplPeriodTableLocal.CorrectedSickListId
                notexists join transLink
                    where transLink.RefTableId      == rPayAverageEarnEmplPeriodTableLocal.TableId &&
                          transLink.RefSec          == rPayAverageEarnEmplPeriodTableLocal.RecId   &&
                          transLink.TransLinkType   == TransLinkType_RU::Original                  &&
                          transLink.Reversed
                notexists join emplParameters
                    where emplParameters.EmplId                     == payTrans.Emplid
            {
                payTrans.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    public void initPayTransValue()
    {
        ;
        transDate = rPayAverageEarnEmplPeriodTable.StartDate;

        super();

        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
        {
             payTrans.QtyDay  = rPayAverageEarnValue.PayDayHour;
        }
        else
        {
             payTrans.QtyHour = rPayAverageEarnValue.PayDayHour;
        }
        payTrans.SourceDate = rPayAverageEarnValue.PayPeriod;

        if (recalcAverageEarnEmplPeriodTable)
        {
            payTrans.CorrectedPeriod = recalcAverageEarnEmplPeriodTable.PayPeriod;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numFrom2WageType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPaySickWageType numFrom2WageType()
    {
        SysDictEnum      dictEnum = new SysDictEnum(enumNum(RPaySickWageType));
        RPaySickWageType ret;
        int              val;

        val = str2int(payCounterCalcTable.NumFrom);

        if (val)
        {
            if (dictEnum.index2Name(val))
            {
                ret = dictEnum.index2Value(val);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplTable</Name>
				<Source><![CDATA[
    protected void setEmplTable(Common _common)
    {
        emplTable = RHRMEmplTable::find(_common.(fieldNum(RPayAverageEarnEmplPeriodTable,EmplId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceTable</Name>
				<Source><![CDATA[
    public Common setSourceTable(Common _common = sourceTable)
    {
        Common ret;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTableLocal = _common;

        ret = super(_common);

        recalcAverageEarnEmplPeriodTable = null;

        if (ret)
        {
            if (averageEarnEmplPeriodTableLocal.RecalcSickListId &&
                ! averageEarnEmplPeriodTableLocal.CorrectedSickListId)
            {
                recalcAverageEarnEmplPeriodTable = averageEarnEmplPeriodTableLocal.recalcSickList();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateStart</Name>
				<Source><![CDATA[
    protected TransDate transDateStart(TransDate _transDate = transDate)
    {
        TransDate ret;

        transDate = rPayAverageEarnEmplPeriodTable.StartDate;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>