<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceJourDueDateCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendInvoiceJourDueDateCalculator</c> class provides business logic to calculate the due date
/// for an instance of the <c>CustVendInvoiceJour</c> class.
/// </summary>
internal final class CustVendInvoiceJourDueDateCalculator
{
    private CustVendInvoiceJour custVendInvoiceJour;

    private DueDate originalDueDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDueDate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Calculates the <c>CustVendInvoiceJour</c> due date, accounting for any holiday/business day offsets if applicable.
    /// </summary>
    /// <returns>The due date for the <c>CustVendInvoiceJour</c>.</returns>
    internal DueDate calcDueDate()
    {
        DueDate dueDate;

        // Use the DueDate if it was already calculated on the custVendInvoiceJour, otherwise need to re-calculate.
		if (custVendInvoiceJour.DueDate != dateNull())
        {
            dueDate = custVendInvoiceJour.DueDate;
        }
        else
        {
            dueDate = this.calcOriginalDueDate();

            if (this.isBusinessDayOffsetAllowed())
            {
                dueDate = this.applyBusinessDayOffset(dueDate);
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOriginalDueDate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Calculates the <c>CustVendInvoiceJour</c> due date, without accounting for any holiday/business day offsets.
    /// </summary>
    /// <returns>The due date for the <c>CustVendInvoiceJour</c>.</returns>
    internal DueDate calcOriginalDueDate()
    {
        DueDate dueDate;

        if (this.isOriginalDueDateCached())
        {
            dueDate = this.getOriginalDueDateFromCache();
        }
        else
        {
            if (this.isCalculationMethodConsolidatedInvoice())
            {
                dueDate = this.calcDueDateConsolidateInvoice();
            }
            else if (this.isCalculationMethodFixedDueDate())
            {
                dueDate = this.calcDueDateFixedDueDate();
            }
            else if (this.isCalculationMethodCopyPrecisely())
            {
                dueDate = this.calcDueDateCopyPrecisely();
            }
            else
            {
                dueDate = this.calcDueDateDefault();
            }

            this.cacheOriginalDueDate(dueDate);
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginalDueDateCached</Name>
				<Source><![CDATA[
    private boolean isOriginalDueDateCached()
    {
        return this.originalDueDate != dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalDueDateFromCache</Name>
				<Source><![CDATA[
    private DueDate getOriginalDueDateFromCache()
    {
        return this.originalDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheOriginalDueDate</Name>
				<Source><![CDATA[
    private void cacheOriginalDueDate(DueDate dueDate)
    {
        this.originalDueDate = dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalculationMethodConsolidatedInvoice</Name>
				<Source><![CDATA[
    private boolean isCalculationMethodConsolidatedInvoice()
    {
        boolean isCalculationMethodConsolidatedInvoice = false;
		CustVendConsRefRecId_JP consFK;
        
        #isoCountryRegionCodes

        if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            if (custVendInvoiceJour.TableId == tableNum(CustInvoiceJour) && CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
            {
                consFK = custVendInvoiceJour.CustVendInvoiceJour::getConsInvoice_JP();

                if (consFK && custVendInvoiceJour.module() == SysModule::Cust)
                {
                    isCalculationMethodConsolidatedInvoice = true;
                }
            }
            else if (custVendInvoiceJour.TableId == tableNum(VendInvoiceJour) && VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
            {
                consFK = custVendInvoiceJour.CustVendInvoiceJour::getConsInvoice_JP();

                if (consFK && custVendInvoiceJour.module() == SysModule::Vend)
                {
                    isCalculationMethodConsolidatedInvoice = true;
                }
            }
        }

        return isCalculationMethodConsolidatedInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateConsolidateInvoice</Name>
				<Source><![CDATA[
    private DueDate calcDueDateConsolidateInvoice()
    {
        CustVendConsRefRecId_JP consFK;
        DueDate dueDate;

        consFK = custVendInvoiceJour.CustVendInvoiceJour::getConsInvoice_JP();

        switch (custVendInvoiceJour.TableId)
        {
            case tableNum(CustInvoiceJour) :
                dueDate = CustConsInvoice_JP::find(consFK).CustVendConsInvoice_JP::calcDueDate();
                break;

            case tableNum(VendInvoiceJour) :
                dueDate = VendConsInvoice_JP::find(consFK).CustVendConsInvoice_JP::calcDueDate();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalculationMethodFixedDueDate</Name>
				<Source><![CDATA[
    private boolean isCalculationMethodFixedDueDate()
    {
        boolean isCalculationMethodFixedDueDate = false;

        if ((custVendInvoiceJour.TableId == tableNum(CustInvoiceJour)
                || custVendInvoiceJour.TableId == tableNum(VendInvoiceJour)) 
                && custVendInvoiceJour.FixedDueDate != dateNull())
        {
            isCalculationMethodFixedDueDate = true;
        }

        return isCalculationMethodFixedDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateFixedDueDate</Name>
				<Source><![CDATA[
    private DueDate calcDueDateFixedDueDate()
    {
        return custVendInvoiceJour.FixedDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalculationMethodCopyPrecisely</Name>
				<Source><![CDATA[
    private boolean isCalculationMethodCopyPrecisely()
    {
        boolean isCalculationMethodCopyPrecisely = false;

        if (custVendInvoiceJour.PaymentSched != '')
        {
            if (custVendInvoiceJour.TableId == tableNum(CustInvoiceJour))
            {
                SalesTable salesTable;

                select firstonly RecId from salesTable
                        where salesTable.SalesId == custVendInvoiceJour.Num;

                CustPaymSched custPaymSched = CustPaymSched::find(salesTable.TableId, salesTable.RecId);

                if (custPaymSched && custPaymSched.CopyPreciselyToInvoice)
                {
                    isCalculationMethodCopyPrecisely = true;
                }
            }
            else if (custVendInvoiceJour.TableId == tableNum(VendInvoiceJour))
            {
                PurchTable purchTable;

                select firstonly RecId from purchTable
                        where purchTable.PurchId == custVendInvoiceJour.Num;

                VendPaymSched vendPaymSched = VendPaymSched::find(purchTable.TableId, purchTable.RecId);

                if (vendPaymSched && vendPaymSched.CopyPreciselyToInvoice)
                {
                    isCalculationMethodCopyPrecisely = true;
                }
            }
        }

        return isCalculationMethodCopyPrecisely;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateCopyPrecisely</Name>
				<Source><![CDATA[
    private DueDate calcDueDateCopyPrecisely()
    {
        DueDate dueDate;

        if (custVendInvoiceJour.TableId == tableNum(CustInvoiceJour))
        {
            SalesTable salesTable;

            select firstonly RecId from salesTable
                        where salesTable.SalesId == custVendInvoiceJour.Num;

            CustPaymSched custPaymSched = CustPaymSched::find(salesTable.TableId, salesTable.RecId);

            dueDate = custPaymSched.paymScheduleDueDate();
        }
        else 
        {
            PurchTable purchTable;

            select firstonly RecId from purchTable
                        where purchTable.PurchId == custVendInvoiceJour.Num;

            VendPaymSched vendPaymSched = VendPaymSched::find(purchTable.TableId, purchTable.RecId);

            dueDate = vendPaymSched.paymScheduleDueDate();
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateDefault</Name>
				<Source><![CDATA[
    private DueDate calcDueDateDefault()
    {
        #ISOCountryRegionCodes

        DueDate dueDate;
        TransDate transDate;
        PaymTerm paymTerm = PaymTerm::find(custVendInvoiceJour.Payment);

        if (custVendInvoiceJour.TableId == tableNum(CustInvoiceJour) && custVendInvoiceJour.CashDiscBaseDate)
        {
            transDate = custVendInvoiceJour.CashDiscBaseDate;
        }
        else if (paymTerm.UseDeliveryDateForDueDate_ES &&
            (custVendInvoiceJour.TableId == tablenum(CustInvoiceJour) ||
            custVendInvoiceJour.TableId == tablenum(VendInvoiceJour)))
        {
            transDate = custVendInvoiceJour.DeliveryDate_ES;
        }
        else
        {
            transDate = custVendInvoiceJour.DocumentDate ? custVendInvoiceJour.DocumentDate : custVendInvoiceJour.InvoiceDate;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            PaymDueDateLimit_ES dueDateLimit = custVendInvoiceJour.calcDueDateLimit_ES(paymTerm, transDate);
            dueDate = paymTerm.due(transDate, custVendInvoiceJour.PaymDayId, false, dueDateLimit, custVendInvoiceJour.TableId);
        }
        else
        {
            dueDate = paymTerm.due(transDate, custVendInvoiceJour.PaymDayId);
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBusinessDayOffsetAllowed</Name>
				<Source><![CDATA[
    private boolean isBusinessDayOffsetAllowed()
    {
        return (!this.isCalculationMethodConsolidatedInvoice()
				&& !this.isCalculationMethodFixedDueDate()
				&& !this.isCalculationMethodCopyPrecisely());
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBusinessDayOffset</Name>
				<Source><![CDATA[
	private DueDate applyBusinessDayOffset(DueDate _baseDueDate)
    {
        DueDate dueDate = _baseDueDate;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymTerm paymTerm = PaymTerm::find(custVendInvoiceJour.Payment);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            if (custVendInvoiceJour.TableId == tableNum(CustInvoiceJour))
            {
                if (paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                {
                    paymCalendarProcessor = PaymCalendarProcessor::construct();
                    PaymCalendarSourceCustInvoiceJournal paymCalendarSourceCustInvoiceJournal = PaymCalendarSourceCustInvoiceJournal::newCalendarSource(custVendInvoiceJour);
                    dueDate = paymCalendarProcessor.adjustDate(dueDate, paymTerm.CustomerUpdateDueDate, paymCalendarSourceCustInvoiceJournal);
                }
            }
            else if (custVendInvoiceJour.TableId == tableNum(VendInvoiceJour))
            {
                if (paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                {
                    paymCalendarProcessor = PaymCalendarProcessor::construct();
                    PaymCalendarSourceVendInvoiceJournal paymCalendarSourceVendInvoiceJournal = PaymCalendarSourceVendInvoiceJournal::newCalendarSource(custVendInvoiceJour);
                    dueDate = paymCalendarProcessor.adjustDate(dueDate, paymTerm.VendorUpdateDueDate, paymCalendarSourceVendInvoiceJournal);
                }
            }
            else if (custVendInvoiceJour.TableId == tableNum(ProjProposalJour))
            {
                if (paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                {
                    paymCalendarProcessor = PaymCalendarProcessor::construct();
                    PaymCalendarSourceCustInvoiceJournal_Proj paymCalendarSourceCustInvoiceJournal_Proj = PaymCalendarSourceCustInvoiceJournal_Proj::newCalendarSource(custVendInvoiceJour);
                    dueDate = paymCalendarProcessor.adjustDate(dueDate, paymTerm.CustomerUpdateDueDate, paymCalendarSourceCustInvoiceJournal_Proj);
                }
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(CustVendInvoiceJour _custVendInvoiceJour)
    {
        custVendInvoiceJour = _custVendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustVendInvoiceJourDueDateCalculator construct(CustVendInvoiceJour _custVendInvoiceJour)
    {
        return new CustVendInvoiceJourDueDateCalculator(_custVendInvoiceJour);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>