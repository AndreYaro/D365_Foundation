<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantDimValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductVariantDimValue</c> class is used to search for product dimension values.
/// </summary>
/// <remarks>
///    The <c>EcoResProductVariantDimValue</c> class provides the main interface for different dimension
///    types.
/// </remarks>
public class EcoResProductVariantDimValue
{
    RefRecId    ecoResProductDimensionAttribute;
    str         dimTableLabel;
    FieldId         dimFieldId;
    TableId     dimTableId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDimValuesFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the specified <c>QueryBuildDataSource</c> in order to provide the complete list of
    ///    dimension values.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_qbds">
    ///    The <c>QueryBuildDataSource</c> of the dimension table.
    /// </param>
    protected void buildDimValuesFromQuery(RefRecId _product, QueryBuildDataSource _qbds)
    {
        TableId productVariantDimensionTableId = EcoResProductDimensionAttribute::find(this.parmEcoResProductDimensionAttribute()).getVariantDimensionTableId();

        QueryBuildDataSource ecoResProductVariantDimensionQbds = _qbds.addDataSource(productVariantDimensionTableId);
        ecoResProductVariantDimensionQbds.joinMode(JoinMode::ExistsJoin);
        ecoResProductVariantDimensionQbds.relations(true);
        QueryBuildRange ecoResProductVariantDimensionRange = ecoResProductVariantDimensionQbds.addRange(fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute));
        ecoResProductVariantDimensionRange.status(RangeStatus::Hidden);
        ecoResProductVariantDimensionRange.value(queryValue(this.parmEcoResProductDimensionAttribute()));

        this.queryAdjustByDimensionAttribute(
            ecoResProductVariantDimensionQbds,
            _product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimValuesList</Name>
				<Source><![CDATA[
    protected List buildDimValuesList(RefRecId _product, Set _dimValues)
    {
        Types findFieldidType(TableId _tableId, FieldId    _fieldId)
        {
            SysDictField    sysDictField = new SysDictField(_tableId, _fieldId);

            if (!sysDictField)
            {
                throw error("@SYS135714");
            }

            return sysDictField.baseType();
        }

        TableId dimTable = this.getDimTable();
        FieldId dimTablePK = this.getDimTableNaturalKeyFieldId();

        Query    query    = this.buildDimValuesQuery(_product, _dimValues);
        QueryRun queryRun = new QueryRun(query);
        List     list     = new List(findFieldidType(dimTable, dimTablePK));

        while (queryRun.next())
        {
            Common dimTableBuffer = queryRun.get(dimTable);
            list.addEnd(dimTableBuffer.(dimTablePK));
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimValuesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the query which contains dimension values. The filter by the specified dimension value can be applied.
    /// </summary>
    /// <param name="_product">
    /// The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_dimValues">
    /// The <c>Set</c> contains dimension value.
    /// </param>
    /// <returns>
    /// The <c>Query</c> class which contains contains dimension values.
    /// </returns>
    protected Query buildDimValuesQuery(RefRecId _product, Set _dimValues)
    {
        TableId productVariantDimensionTableId = EcoResProductDimensionAttribute::find(this.parmEcoResProductDimensionAttribute()).getVariantDimensionTableId();
        Query query = new Query();
        FieldId dimTableNK = this.getDimTableNaturalKeyFieldId();
        QueryBuildDataSource dimTableQbds = query.addDataSource(this.getDimTable());

        // Apply filter by DimensionValues
        if (_dimValues)
        {
            SetEnumerator se = _dimValues.getEnumerator();

            while (se.moveNext())
            {
                dimTableQbds.addRange(dimTableNK).value(queryValue(se.current()));
            }
        }

        QueryBuildDataSource ecoResProductVariantDimensionQbds = dimTableQbds.addDataSource(productVariantDimensionTableId);
        ecoResProductVariantDimensionQbds.joinMode(JoinMode::ExistsJoin);
        ecoResProductVariantDimensionQbds.relations(true);
        ecoResProductVariantDimensionQbds.addRange(fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute)).value(queryValue(this.parmEcoResProductDimensionAttribute()));

        this.queryAdjustByDimensionAttribute(
            ecoResProductVariantDimensionQbds,
            _product);

        // RLS is implicitly enabled when executing dynamically-built queries. RLS adds a filter to only return records
        // for the sub types that the user has access to. In this place we don't want a filtered result, so we need to disable RLS.
        query.recordLevelSecurity(false);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified dimension value exists in the specified product.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_value">
    ///    The product dimension value.
    /// </param>
    /// <param name="_silence">
    ///    A <c>Boolean</c> value that determines whether to write a warning to the infolog
    ///    if the dimension value does not exist; optional.  If true, no warning will be written.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, displays a warning message to the user.
    /// </returns>
    public  boolean checkExist(
        RefRecId    _product,
        Name        _value,
        boolean     _silence = false)

    {
        if (_product && _value && !this.exist(_product, _value))
        {
            if (_silence)
            {
                return false;
            }

            return checkFailed(EcoResProductMasterDimensionValue::txtNotExist(
                        dimTableLabel,
                        _value,
                        EcoResProductTranslation::findByProductLanguage(_product, SystemParameters::getSystemLanguageId()).Name));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified dimension value exists for a specified product.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_value">
    ///    The product dimension value.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public boolean exist(RefRecId _product, Name _value)
    {
        return EcoResProductVariantDimValue::existOnServer(_product, _value, this.parmEcoResProductDimensionAttribute());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the dimension value for the specified <c>EcoResDistinctProductVariantRecId</c> value of the
    ///    product variant.
    /// </summary>
    /// <param name="_productVariantRecId">
    ///    A specified <c>EcoResDistinctProductVariantRecId</c> value.
    /// </param>
    /// <returns>
    ///    The dimension value for the specified product variant.
    /// </returns>
    public anytype findByProductVariant(EcoResDistinctProductVariantRecId _productVariantRecId)
    {
        TableId productVariantDimensionTableId = EcoResProductDimensionAttribute::find(this.parmEcoResProductDimensionAttribute()).getVariantDimensionTableId();
        FieldId dimTableNK = this.getDimTableNaturalKeyFieldId();

        Query query = new Query();
        QueryBuildDataSource dimTableQbds = query.addDataSource(dimTableId);

        QueryBuildDataSource ecoResProductVariantDimensionQbds = dimTableQbds.addDataSource(productVariantDimensionTableId);
        ecoResProductVariantDimensionQbds.joinMode(JoinMode::ExistsJoin);
        ecoResProductVariantDimensionQbds.relations(true);
        ecoResProductVariantDimensionQbds.addRange(fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute)).value(queryValue(this.parmEcoResProductDimensionAttribute()));
        ecoResProductVariantDimensionQbds.addRange(fieldNum(EcoResProductVariantDimensionValue, DistinctProductVariant)).value(queryValue(_productVariantRecId));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            Common dimTableBuffer = queryRun.get(this.getDimTable());
            return dimTableBuffer.(dimTableNK);
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimTable</Name>
				<Source><![CDATA[
    protected TableId getDimTable()
    {
        if (!dimTableId)
        {
            dimTableId = EcoResProductDimensionAttribute::find(this.parmEcoResProductDimensionAttribute()).getDimensionTableId();
        }

        return dimTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimTableNaturalKeyFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimTableNaturalKeyFieldId()
    {
        return EcoResProductDimensionAttribute::getDimensionTableNaturalKeyFieldId(this.getDimTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the complete list of the dimension value records for the specified product.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_set">
    ///    A set of the dimension values.
    /// </param>
    /// <returns>
    ///    A list of the dimension value records.
    /// </returns>
    public List getDimValues(RefRecId _product, Set _set = null)
    {
        return this.buildDimValuesList(_product, _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimValuesCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the count of the dimension value records for the specified product.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <returns>
    ///    The count of the dimension value records.
    /// </returns>
    public int getDimValuesCount(RefRecId _product)
    {
        TableId dimTable = this.getDimTable();
        FieldId dimTablePK = this.getDimTableNaturalKeyFieldId();

        // apply count filter by RecId field on the dimension table
        Query query = this.buildDimValuesQuery(_product, null);
        QueryBuildDataSource qbds = query.dataSourceTable(dimTable);
        qbds.addSelectionField(fieldNum(Common,RecId),SelectionField::Count);

        QueryRun queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            Common dimTableBuffer = queryRun.get(dimTable);
            return dimTableBuffer.(fieldNum(Common,RecId));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimValuesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the complete list of the dimension value records for the specified product.
    /// </summary>
    /// <param name="_product">
    ///    The product ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_set">
    ///    A set of the dimension values.
    /// </param>
    /// <returns>
    ///    The <c>Query</c> class that contains dimension values.
    /// </returns>
    public Query getDimValuesQuery(RefRecId _product, Set _set = null)
    {
        return this.buildDimValuesQuery(_product, _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimValueSimple</Name>
				<Source><![CDATA[
    protected void lookupDimValueSimple(FormStringControl           _ctrl,
                                        RefRecId                    _product)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(this.getDimTable(), _ctrl);
        sysTableLookup.addLookupfield(this.getDimTableNaturalKeyFieldId());

        if (_product)
        {
            Query query = this.buildDimValuesQuery(_product, null);
            sysTableLookup.parmQuery(query);
        }

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimTableLabel</Name>
				<Source><![CDATA[
    public str parmDimTableLabel(str _dimTableLabel = dimTableLabel)
    {
        dimTableLabel = _dimTableLabel;

        return dimTableLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimFieldId</Name>
				<Source><![CDATA[
	/// <summary>
    /// To get the fieldId.
    /// </summary>
    /// <param name = "_fieldId">
    /// The <c>fieldId</c> value to select the correct <c>EcoResProductVariantDimValue</c> class to be retrieved.
	/// </param>
    /// <returns></returns>
    public FieldId parmDimFieldId(FieldId  _fieldId = dimFieldId)
    {
        dimFieldId = _fieldId;

        return dimFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResProductDimensionAttribute</Name>
				<Source><![CDATA[
    protected RefRecId parmEcoResProductDimensionAttribute(RefRecId _ecoResProductDimensionAttribute = ecoResProductDimensionAttribute)
    {
        ecoResProductDimensionAttribute = _ecoResProductDimensionAttribute;

        return ecoResProductDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddProductDimValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the specified <c>QueryBuildDataSource</c> in order to provide the complete list of
    ///    dimension values.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_qbds">
    ///    The <c>QueryBuildDataSource</c> of dimension table.
    /// </param>
    public void queryAddProductDimValues(RefRecId _product, QueryBuildDataSource _qbds)
    {
        this.buildDimValuesFromQuery(_product, _qbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAdjustByDimensionAttribute</Name>
				<Source><![CDATA[
    protected void queryAdjustByDimensionAttribute(
        QueryBuildDataSource    _qbds,
        RefRecId                _productOrigin)
    {
        RefRecId product = _productOrigin;
        QueryBuildDataSource mainQdbs = _qbds;

        QueryBuildDataSource ecoResDistinctProductVariantQbds = mainQdbs.addDataSource(tableNum(EcoResDistinctProductVariant));
        ecoResDistinctProductVariantQbds.joinMode(JoinMode::ExistsJoin);
        ecoResDistinctProductVariantQbds.relations(true);
        QueryBuildRange ecoResDistinctProductVariantRange = ecoResDistinctProductVariantQbds.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster));
        ecoResDistinctProductVariantRange.status(RangeStatus::Hidden);
        ecoResDistinctProductVariantRange.value(queryValue(product));

        QueryBuildDataSource inventDimCombinationQbds = ecoResDistinctProductVariantQbds.addDataSource(tableNum(InventDimCombination));
        inventDimCombinationQbds.joinMode(JoinMode::ExistsJoin);
        inventDimCombinationQbds.relations(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static EcoResProductVariantDimValue construct()
    {
        return new EcoResProductVariantDimValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified dimension value exists for a specified product.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_value">
    ///    The product dimension value.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The value of the product dimension attribute.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existOnServer(RefRecId _product, Name _value, RefRecId  _productDimensionAttribute)
    {
        Set                             set = new Set(Types::String);

        // add product dimension value to the set
        set.add(_value);

        // construct server based class and set product dimension attribute
        EcoResProductVariantDimValue ecoResProductVariantDimValue = EcoResProductVariantDimValue::construct();
        ecoResProductVariantDimValue.parmEcoResProductDimensionAttribute(_productDimensionAttribute);

        // create and execute the query to check if specified dimension value exists
        Query query = ecoResProductVariantDimValue.buildDimValuesQuery(_product, set);
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionContainerByProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the container that contains all product dimensions for the specified product variant.
    /// </summary>
    /// <param name="_product">
    ///    The specified <c>EcoResProductRecId</c> value.
    /// </param>
    /// <returns>
    ///    The container that holds all product dimensions for the specified product variant
    /// </returns>
    public static container getDimensionContainerByProductVariant(EcoResProductRecId _product)
    {
        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        
        InventDim inventDim;
        while (enum.moveNext())
        {
            FieldId inventDimFieldId = enum.currentInventDimFieldId();
            inventDim.(inventDimFieldId) = EcoResProductVariantDimValue::newEcoResProductVariantDimValue(inventDimFieldId).findByProductVariant(_product);
        }

        return EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValuesContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the container that contains product dimension values with the product dimension attributes
    ///    that correspond.
    /// </summary>
    /// <param name="_config">
    ///    The <c>EcoResConfigurationName</c> value.
    /// </param>
    /// <param name="_size">
    ///    The <c>EcoResSizeName</c> value.
    /// </param>
    /// <param name="_color">
    ///    The <c>EcoResColorName</c> value.
    /// </param>
    /// <param name="_style">
    ///    The <c>EcoResStyleName</c> value.
    /// </param>
    /// <returns>
    ///    A container that contains product dimension values with the product dimension attributes that
    ///    correspond.
    /// </returns>
    [SysObsolete('Use getDimensionValuesContainerByInventDim() or getDimensionValuesContainerForConfiguration() instead', false, 30\11\2017)]
    public static container getDimensionValuesContainer(
        EcoResConfigurationName _config = '',
        EcoResSizeName          _size = '',
        EcoResColorName         _color = '',
        EcoResStyleName         _style = ''
        )
    {
        InventDim inventDim;

        if (_color)
        {
            inventDim.InventColorId = _color;
        }

        if (_size)
        {
            inventDim.InventSizeId = _size;
        }

        if (_config)
        {
            inventDim.ConfigId = _config;
        }

        if (_style)
        {
            inventDim.InventStyleId = _style;
        }

        return EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValuesContainerForConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the container that contains product dimension values with the product dimension attributes
    ///    that correspond.
    /// </summary>
    /// <param name="_config">
    ///    The <c>EcoResConfigurationName</c> value.
    /// </param>
    /// <returns>
    ///    A container that contains product dimension values with the product dimension attributes that
    ///    correspond.
    /// </returns>
    public static container getDimensionValuesContainerForConfiguration(EcoResConfigurationName _config)
    {
        InventDim inventDim;
        inventDim.ConfigId = _config;
        return EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValuesContainerByInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the container that contains product dimension values with the product dimension attributes
    ///    that correspond.
    /// </summary>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> value with the product dimensions.
    /// </param>
    /// <returns>
    ///    A container that contains product dimension values with the product dimension attributes that
    ///    correspond.
    /// </returns>
    public static container getDimensionValuesContainerByInventDim(InventDim _inventDim)
    {
        container               productDimensions;

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();
            FieldId fieldId = productDim.parmInventDimFieldId();
            if (_inventDim.(fieldId))
            {
                RefRecId dimensionTableRecId             =   productDim.findDimensionByNaturalKey(_inventDim.(fieldId)).RecId;
                RefRecId productDimensionAttributeRecId  =   EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldId);
                productDimensions                        +=  [[productDimensionAttributeRecId, dimensionTableRecId]];
            }
        }

        return productDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSimpleConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides lookup functionality to obtain all the released product variant configuration dimension
    ///    values.
    /// </summary>
    /// <param name="_ctrl">
    ///    The <c>FormStringControl</c> object that will be used to create lookup control.
    /// </param>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    public static void lookupSimpleConfigId(FormStringControl   _ctrl,
                                                   RefRecId            _product)
    {
        EcoResProductVariantDimValue::newProductVariantDim_ConfigId().lookupDimValueSimple(
            _ctrl,
            _product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSimpleInventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides lookup functionality to obtain all the released product variant color dimension values.
    /// </summary>
    /// <param name="_ctrl">
    ///    The <c>FormStringControl</c> object that will be used to create lookup control.
    /// </param>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    public static void lookupSimpleInventColorId(FormStringControl   _ctrl,
                                                        RefRecId            _product)
    {
        EcoResProductVariantDimValue::newProductVariantDim_InventColorId().lookupDimValueSimple(
            _ctrl,
            _product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSimpleInventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides lookup functionality to obtain all the released product variant size dimension values.
    /// </summary>
    /// <param name="_ctrl">
    ///    The <c>FormStringControl</c> object which will be used to create lookup control.
    /// </param>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    public static void lookupSimpleInventSizeId(
        FormStringControl   _ctrl,
        RefRecId            _product)
    {
        EcoResProductVariantDimValue::newProductVariantDim_InventSizeId().lookupDimValueSimple(
            _ctrl,
            _product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSimpleInventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides lookup functionality to obtain all the released product variant style dimension values.
    /// </summary>
    /// <param name="_ctrl">
    ///    The <c>FormStringControl</c> object that will be used to create lookup control.
    /// </param>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    public static void lookupSimpleInventStyleId(
        FormStringControl   _ctrl,
        RefRecId            _product)
    {
        EcoResProductVariantDimValue::newProductVariantDim_InventStyleId().lookupDimValueSimple(
            _ctrl,
            _product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSimpleInventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides lookup functionality to obtain all the released product variant version dimension values.
    /// </summary>
    /// <param name="_ctrl">
    ///    The <c>FormStringControl</c> object that will be used to create lookup control.
    /// </param>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record.
    /// </param>
    public static void lookupSimpleInventVersionId(
        FormStringControl   _ctrl,
        RefRecId            _product)
    {
        EcoResProductVariantDimValue::newProductVariantDim_InventVersionId().lookupDimValueSimple(
            _ctrl,
            _product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEcoResProductVariantDimValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductVariantDimValue</c> classes.
    /// </summary>
    /// <param name="_fieldId">
    ///    The <c>fieldId</c> value to select the correct <c>EcoResProductVariantDimValue</c> class to be
    ///    retrieved.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResProductVariantDimValue</c> class.
    /// </returns>
    public static EcoResProductVariantDimValue newEcoResProductVariantDimValue(FieldId  _fieldId)
    {
        InventProductDimension productDimension = InventDimension::singletonFromInventDimFieldId(_fieldId) as InventProductDimension;

        if (productDimension)
        {
            EcoResProductVariantDimValue ecoResProductVariantDimValue = EcoResProductVariantDimValue::construct();
            ecoResProductVariantDimValue.parmEcoResProductDimensionAttribute(EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(_fieldId));
            ecoResProductVariantDimValue.parmDimTableLabel(productDimension.label());
            ecoResProductVariantDimValue.parmDimFieldId(_fieldId);

            return ecoResProductVariantDimValue;
        }

        throw error("@SYS111577");
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProductVariantDim_ConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductVariantDimValue</c> class for the product configuration
    ///    dimension.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>EcoResProductVariantDimValue</c> class.
    /// </returns>
    public static EcoResProductVariantDimValue newProductVariantDim_ConfigId()
    {
        return EcoResProductVariantDimValue::newEcoResProductVariantDimValue(fieldNum(InventDim, ConfigId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProductVariantDim_InventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductVariantDimValue</c> class for the product color
    ///    dimension.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>EcoResProductVariantDimValue</c> class.
    /// </returns>
    public static EcoResProductVariantDimValue newProductVariantDim_InventColorId()
    {
        return EcoResProductVariantDimValue::newEcoResProductVariantDimValue(fieldNum(InventDim, InventColorId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProductVariantDim_InventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductVariantDimValue</c> class for the product size dimension.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>EcoResProductVariantDimValue</c> class.
    /// </returns>
    public static EcoResProductVariantDimValue newProductVariantDim_InventSizeId()
    {
        return EcoResProductVariantDimValue::newEcoResProductVariantDimValue(fieldNum(InventDim, InventSizeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProductVariantDim_InventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductVariantDimValue</c> class for the product style
    ///    dimension.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>EcoResProductVariantDimValue</c> class.
    /// </returns>
    public static EcoResProductVariantDimValue newProductVariantDim_InventStyleId()
    {
        return EcoResProductVariantDimValue::newEcoResProductVariantDimValue(fieldNum(InventDim, InventStyleId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProductVariantDim_InventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductVariantDimValue</c> class for the product version
    ///    dimension.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>EcoResProductVariantDimValue</c> class.
    /// </returns>
    public static EcoResProductVariantDimValue newProductVariantDim_InventVersionId()
    {
        return EcoResProductVariantDimValue::newEcoResProductVariantDimValue(fieldNum(InventDim, InventVersionId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
