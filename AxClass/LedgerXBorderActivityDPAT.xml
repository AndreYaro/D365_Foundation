<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerXBorderActivityDPAT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerXBorderActivityDPAT</c> report provides data for the <c>LedgerXBorderActivityAT</c>
///    report.
/// </summary>
[SRSReportQuery(queryStr(LedgerXBorderActivityAT)), SRSReportParameterAttribute(classStr(LedgerXBorderActivityContractAT))]
public class LedgerXBorderActivityDPAT extends SrsReportDataProviderPreProcessTempDB
{
    private LedgerXBorderActivityTmpAT ledgerXBorderActivityTmpAT;
    private ServiceCountry serviceCountry;
    private FromDate fromDate;
    private ToDate toDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchCountry</Name>
				<Source><![CDATA[
    private void fetchCountry()
    {
        MainAccountLegalEntity  mainAccountLegalEntity;
        MainAccount mainAccountCountry;
        TmpAccountSum tmpAccountSum;
        TaxGroupHeading taxGroupCountry;
        TaxTrans taxTransCountry;

        Query query = this.parmQuery();
        query.dataSourceTable(tablenum(TaxTrans)).addRange(fieldnum(TaxTrans, TransDate)).value(SysQuery::range(fromDate, toDate));
        query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, SubledgerVoucherDataAreaId)).value(curExt());

        QueryRun qr = new QueryRun(query);

        ttsbegin;

        while (qr.next())
        {
            if (SysReportRun::changed(qr,tablenum(TaxTrans))
                || SysReportRun::changed(qr,tablenum(MainAccount)))
            {
                mainAccountCountry = qr.get(tablenum(MainAccount));
                mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccountCountry.RecId, CompanyInfo::findDataArea(curext()).RecId);

                taxGroupCountry = qr.get(tablenum(TaxGroupHeading));
                taxTransCountry = qr.get(tablenum(TaxTrans));

                select firstonly forupdate tmpAccountSum
                index AccountDimensionCurTax
                where tmpAccountSum.AccountNum == mainAccountCountry.MainAccountId
                    && tmpAccountSum.Txt == taxGroupCountry.SearchField1;

                switch (mainAccountLegalEntity.TaxDirection)
                {
                    case SalesPurch::Sales:
                        tmpAccountSum.Balance01 -= taxTransCountry.TaxBaseAmount;
                        break;
                    case SalesPurch::Purch:
                        tmpAccountSum.Balance02 += taxTransCountry.TaxBaseAmount;
                        break;
                }

                if (tmpAccountSum.RecId)
                {
                    tmpAccountSum.update();
                }
                else
                {
                    tmpAccountSum.AccountNum = mainAccountCountry.MainAccountId;
                    tmpAccountSum.Txt = taxGroupCountry.SearchField1;
                    tmpAccountSum.insert();
                }
            }
        }

        ttscommit;

        while select tmpAccountSum order by Txt, AccountNum
        {
            ledgerXBorderActivityTmpAT.clear();
            ledgerXBorderActivityTmpAT.CountryId = tmpAccountSum.Txt;
            ledgerXBorderActivityTmpAT.CountryName = LogisticsAddressCountryRegion::name(tmpAccountSum.Txt);
            ledgerXBorderActivityTmpAT.AccountNum = tmpAccountSum.AccountNum;
            ledgerXBorderActivityTmpAT.AccountName = MainAccount::findByMainAccountId(tmpAccountSum.AccountNum).Name;
            ledgerXBorderActivityTmpAT.Balance01 = tmpAccountSum.Balance01;
            ledgerXBorderActivityTmpAT.Balance02 = tmpAccountSum.Balance02;
            ledgerXBorderActivityTmpAT.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchService</Name>
				<Source><![CDATA[
    private void fetchService()
    {
        MainAccountLegalEntity mainAccountLegalEntity;
        MainAccount mainAccountServices;
        TaxTrans taxTransServices;

        Query query = this.parmQuery();
        query.dataSourceTable(tablenum(TaxTrans)).addRange(fieldnum(TaxTrans, TransDate)).value(SysQuery::range(fromDate, toDate));
        query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, SubledgerVoucherDataAreaId)).value(curExt());

        QueryRun qr = new QueryRun(query);

        while (qr.next())
        {
            if (SysReportRun::changed(qr,tablenum(MainAccount)))
            {
                if (mainAccountServices)
                {
                    ledgerXBorderActivityTmpAT.insert();
                    ledgerXBorderActivityTmpAT.clear();
                }
                mainAccountServices = qr.get(tablenum(MainAccount));
                mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccountServices.RecId, CompanyInfo::findDataArea(curext()).RecId);

                ledgerXBorderActivityTmpAT.AccountNum = mainAccountServices.MainAccountId;
                ledgerXBorderActivityTmpAT.AccountName = mainAccountServices.localizedName();
            }

            if (SysReportRun::changed(qr,tablenum(TaxTrans))
                || SysReportRun::changed(qr,tablenum(MainAccount)))
            {
                taxTransServices = qr.get(tablenum(TaxTrans));

                switch (mainAccountLegalEntity.TaxDirection)
                {
                    case SalesPurch::Sales:
                        ledgerXBorderActivityTmpAT.SalesAmount -= taxTransServices.TaxBaseAmount;
                        break;
                    case SalesPurch::Purch:
                        ledgerXBorderActivityTmpAT.PurchaseAmount += taxTransServices.TaxBaseAmount;
                        break;
                }
            }
        }
        ledgerXBorderActivityTmpAT.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerXBorderActivityTmpAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>LedgerXBorderActivityTmpAT</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>LedgerXBorderActivityTmpAT</c> temporary table.
    /// </returns>
    [SRSReportDataSet(tableStr(LedgerXBorderActivityTmpAT)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerXBorderActivityTmpAT getLedgerXBorderActivityTmpAT()
    {
        select ledgerXBorderActivityTmpAT;
        return ledgerXBorderActivityTmpAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the  report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SSRS at
    /// run time. The method should compute data and populate the data tables that will be returned to
    /// SSRS.
    /// </remarks>
    public void processReport()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoAT, GlobalizationConstants::FeatureReferenceAT00002] ],
            funcName()
        );

        LedgerXBorderActivityContractAT contract = this.parmDataContract() as LedgerXBorderActivityContractAT;

        serviceCountry = contract.parmServiceCountry();
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();

        if (serviceCountry == ServiceCountry::Service)
        {
            this.fetchService();
        }
        else
        {
            this.fetchCountry();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>