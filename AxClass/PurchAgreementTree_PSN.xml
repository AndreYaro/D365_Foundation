<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementTree_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementTree_PSN</c> class is used to create tree view structure for the purchase
/// agreement hierarchy.
/// </summary>
class PurchAgreementTree_PSN
{
    #resAppl

    ImageListAppl_Proj  imageList;

    FormTreeControl     tree;
    FormTreeItem        item;

    Integer             master;

    Map                 treeTreeId;
    Map                 treeRecId ;
    Map                 treeActive;

    boolean             createMaster;

    Integer             id;
    recId               parentPurchAgreementId;

    #localMacro.fieldList
        PurchNumberSequence,
        DocumentTitle,
        DefaultAgreementLineEffectiveDate,
        DefaultAgreementLineExpirationDate,
        VendAccount,
        recId,
        BuyingLegalEntity,
        Purpose_PSN,
        ProcurementClassification_PSN
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildtree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the tree by adding the nodes for parent and child, by traversing each record of
    /// the <c>PurchAgreementHeader</c> table.
    /// </summary>
    protected void buildtree()
    {
        PurchAgreementHeader        purchAgreementHeaderParent;
        PurchAgreementHeader        purchAgreementHeaderchild;
        boolean                     children;

        if (this.parmCreateMaster())
        {
            this.createMaster();
        }

        purchAgreementHeaderchild.recordLevelSecurity(true);
        purchAgreementHeaderParent.recordLevelSecurity(true);

        while select #fieldList from purchAgreementHeaderParent
            order by RecId desc
            where (!parentPurchAgreementId && purchAgreementHeaderParent.ParentPurchAgreementID_PSN == 0) || (parentPurchAgreementId && purchAgreementHeaderParent.ParentPurchAgreementID_PSN == parentPurchAgreementId)
        {
            select RecId from purchAgreementHeaderchild
                where purchAgreementHeaderchild.ParentPurchAgreementID_PSN == purchAgreementHeaderParent.RecId;

            this.createNode(purchAgreementHeaderParent, purchAgreementHeaderchild ? true : false, master);

            children = purchAgreementHeaderchild.RecId != 0;

            this.createNode(purchAgreementHeaderParent, children, master);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the parent nodes in the tree.
    /// </summary>
    protected void createMaster()
    {
        PurchAgreementHeader   purchAgreementHeader = PurchAgreementHeader::find(parentPurchAgreementId);
        PurchAgreementHeader   purchAgreementHeaderExist;

        item = new FormTreeItem();

        item.text(this.text(purchAgreementHeader));

        select firstonly purchAgreementHeaderExist;

        item.children(purchAgreementHeaderExist ? true : false);
        item.data(parentPurchAgreementId);

        item.image(imageList.image(purchAgreementHeader.image()));
        item.selectedImage(imageList.image(purchAgreementHeader.image()));

        master  = tree.addItem(0, 0, item);

        treeTreeId.insert(master, purchAgreementHeader.RecId);
        treeRecId.insert(purchAgreementHeader.RecId, master);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a node in the tree for the purchase agreement record.
    /// </summary>
    /// <param name="_common">
    /// A buffer containing a record of the <c>PurchAgreementHeader</c> table.
    /// </param>
    /// <param name="_child">
    /// A Boolean value indicating the type of the node.
    /// </param>
    /// <param name="_parent">
    /// An integer value indicating the parent of the node to be created.
    /// </param>
    public void createNode(
        Common  _common,
        boolean _child,
        int     _parent)
    {
        Integer                     insertAfterIdx = 0;
        PurchAgreementHeader        purchAgreementHeader;

        if (!treeRecId.exists(_common.RecId))
        {
            purchAgreementHeader = _common;

            item = new FormTreeItem();

            item.text(this.text(purchAgreementHeader));

            item.children(_child);

            item.data(purchAgreementHeader.RecId);

            item.image(imageList.image(purchAgreementHeader.image()));
            item.selectedImage(imageList.image(purchAgreementHeader.image()));

            id  = tree.addItem(_parent, 1, item);

            treeTreeId.insert(id, purchAgreementHeader.RecId);
            treeRecId.insert(purchAgreementHeader.RecId,id);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a node from the tree.
    /// </summary>
    /// <param name="_recId">
    /// The record ID associated with the node that is to be deleted.
    /// </param>
    public void deleteNode(recId _recId)
    {
        tree.delete(treeRecId.lookup(_recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>expanding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands the tree from the selected node to display all the children of the selected node.
    /// </summary>
    /// <param name="_idx">
    /// An integer value specifying the node to be selected and expanded.
    /// </param>
    /// <param name="_action">
    /// An enumeration value that consists of actions applied on a tree.
    /// </param>
    /// <param name="_data">
    /// A value of type anytype.
    /// </param>
    /// <returns>
    /// A Boolean value.
    /// </returns>
    public boolean expanding(
        int             _idx,
        FormTreeExpand  _action,
        anytype         _data)
    {
        boolean                 ret    = false;
        boolean                 children;

        recId                   purchAgreementHeaderIdExpand;

        PurchAgreementHeader    purchAgreementHeaderParent;
        PurchAgreementHeader    purchAgreementHeaderSibling;

        item = tree.getItem(_idx);

        purchAgreementHeaderIdExpand = PurchAgreementHeader::find(item.data()).RecId;

        if (_action == FormTreeExpand::Expand && purchAgreementHeaderIdExpand && ! item.stateExpandedOnce())
        {
            while select #fieldList from purchAgreementHeaderParent
                order by RecId
                where purchAgreementHeaderParent.ParentPurchAgreementID_PSN == purchAgreementHeaderIdExpand
            {
                select RecId from purchAgreementHeaderSibling
                    where purchAgreementHeaderSibling.ParentPurchAgreementID_PSN  == purchAgreementHeaderParent.RecId;

                children = purchAgreementHeaderSibling.RecId != 0;
                this.createNode(purchAgreementHeaderParent, children, _idx);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a node in the tree.
    /// </summary>
    /// <param name="_purchAgreementId">
    /// The record ID of the <c>PurchAgreementHeader</c> table record.
    /// </param>
    /// <returns>
    /// An object of the <c>FormTreeItem</c> class.
    /// </returns>
    public FormTreeItem findNode(recId _purchAgreementId)
    {
        recId           purchAgreementHeaderRecId;
        FormTreeItem    formTreeItem;

        purchAgreementHeaderRecId = PurchAgreementHeader::find(_purchAgreementId).RecId;

        if (treeRecId.exists(purchAgreementHeaderRecId))
        {
            formTreeItem = tree.getItem(treeRecId.lookup(purchAgreementHeaderRecId));
        }

        return formTreeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID of the <c>PurchAgreementHeader</c> record associated with the selected node.
    /// </summary>
    /// <returns>
    /// Returns the record ID of the <c>PurchAgreementHeader</c> record.
    /// </returns>
    public recId getSelection()
    {
        if (tree.getSelection())
        {
            return (select purchAgreementHeader
                        where purchAgreementHeader.RecId == treeTreeId.lookup(tree.getSelection())).RecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes various objects used to create the tree view structure.
    /// </summary>
    /// <param name="_formTree">
    /// An object of <c>FormTreeControl</c> class.
    /// </param>
    /// <param name="_parentPurchAgreementId">
    /// The record ID of the <c>PurchAgreementHeader</c> table record.
    /// </param>
    public void new(FormTreeControl _formTree, recId  _parentPurchAgreementId = 0)
    {
        tree = _formTree;
        parentPurchAgreementId = _parentPurchAgreementId;

        imageList   = new ImageListAppl_Proj();

        treeTreeId  = new Map(Types::Integer, Types::Int64);
        treeRecId   = new Map(Types::Int64, Types::Integer);
        treeActive  = new Map(Types::Integer, Types::Int64);

        tree.setImagelist(imageList.imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateMaster</Name>
				<Source><![CDATA[
    public boolean parmCreateMaster(boolean _createMaster = createMaster)
    {
        createMaster    = _createMaster;

        return createMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select a given node in the purchase agreement hierarchy tree.
    /// </summary>
    /// <param name="_purchAgreementId">
    /// The purchase agreement ID to be selected.
    /// </param>
    /// <remarks>
    /// If the corresponding node for the purchase agreement ID to be selected has a parent, the parent node is first expanded.
    /// </remarks>
    public void selectNode(recId   _purchAgreementId)
    {
        recId                   localParentPurchAgreementId;

        PurchAgreementHeader    localPurchAgreemetHeader;

        List                    listPurchAgreementHeaderId;
        ListEnumerator          listEnumerator;

        FormTreeItem            formTreeItem;

        localPurchAgreemetHeader = PurchAgreementHeader::find(_purchAgreementId);

        listPurchAgreementHeaderId = new List(Types::Int64);

        listPurchAgreementHeaderId.addStart(localPurchAgreemetHeader.RecId);

        localParentPurchAgreementId = localPurchAgreemetHeader.ParentPurchAgreementID_PSN;

        while (localParentPurchAgreementId)
        {
            listPurchAgreementHeaderId.addStart(localParentPurchAgreementId);
            localPurchAgreemetHeader = PurchAgreementHeader::find(localParentPurchAgreementId);
            localParentPurchAgreementId = localPurchAgreemetHeader.ParentPurchAgreementID_PSN;
        }

        // If the selected purchase agreement has a parent, we need to expand the parent to expose the child.
        // We need to store the entire hierarchy to expand the tree completely.
        if (listPurchAgreementHeaderId)
        {
            listEnumerator = listPurchAgreementHeaderId.getEnumerator();
            while (listEnumerator.moveNext())
            {
                formTreeItem = this.findNode(listEnumerator.current());
                if (formTreeItem)
                {
                    tree.expand(formTreeItem.idx(), FormTreeExpand::Expand);
                }
            }
        }
        else
        {
            formTreeItem = this.findNode(localPurchAgreemetHeader.RecId);
        }

        if (formTreeItem)
        {
            tree.select(formTreeItem.idx());
            tree.selectionChanged(formTreeItem,formTreeItem,FormTreeSelect::Unknown);
            tree.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupChart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the purchase agreement hierarchy tree.
    /// </summary>
    public void setupChart()
    {
        tree.lock();

        this.buildtree();

        tree.select(tree.getRoot());
        tree.setFocus();

        tree.update();
        tree.unLock(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the text for each node in the tree.
    /// </summary>
    /// <param name="_purchAgreementHeader">
    /// A buffer containing a record of the <c>PurchAgreementHeader</c> table.
    /// </param>
    /// <returns>
    /// A string containing the text to be set for a node in the tree.
    /// </returns>
    public str text(PurchAgreementHeader _purchAgreementHeader)
    {
        return (strFmt("@SYS191501", _purchAgreementHeader.PurchNumberSequence,  _purchAgreementHeader.VendAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the index of the node in the tree for the specified value of the purchase agreement record ID.
    /// </summary>
    /// <param name="_purchAgreementId">
    /// The record ID of the <c>PurchAgreementHeader</c> table record.
    /// </param>
    /// <returns>
    /// An integer value spcifying the index of a node in the tree.
    /// </returns>
    public Integer treeNode(recId _purchAgreementId)
    {
        if (_purchAgreementId)
        {
            return treeRecId.lookup(PurchAgreementHeader::find(_purchAgreementId).RecId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class based on the specified parameter.
    /// </summary>
    /// <param name="_formTree">
    /// An object of the <c>FormTreeControl</c> class.
    /// </param>
    /// <param name="_parentPurchAgreementId">
    /// The record ID of the <c>PurchAgreementHeader</c> table record.
    /// </param>
    /// <returns>
    /// The instance of the class specific based on the <paramref
    /// name="_formTree" /> and <paramref name="_parentPurchAgreementId" /> parameters.
    /// </returns>
    public static PurchAgreementTree_PSN construct (FormTreeControl     _formTree, recId    _parentPurchAgreementId = 0)
    {
        PurchAgreementTree_PSN  purchAgreementTree_PSN;

        purchAgreementTree_PSN = new PurchAgreementTree_PSN(_formTree, _parentPurchAgreementId);

        return purchAgreementTree_PSN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>