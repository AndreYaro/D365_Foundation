<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResExtendFulfillmentManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to execute extend fulfillment manager operations.
/// </summary>
class ResExtendFulfillmentManager
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertExtendFulfillment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the proposed extend fulfillment records to various extend fulfillment table.
    /// </summary>
    /// <param name = "_specifyResourceHoursTable">Temp table which contains the fulfillment data to be extended.</param>
    /// <param name = "_staffedActivityResource">The proposed project staffed activity resource record identifier.</param>
    /// <param name = "_staffedResource">The proposed project resource record identifier.</param>
    /// <param name = "_resourceCategory">The role record identifier for this fulfillment.</param>
    /// <param name = "_extendFulfillmentMemo">The proposed extend fulfillment memo.</param>
    /// <param name = "_addToTeamByFulfillment">Whether this proposed resource is added by the team by this proposed extend fulfillment process.</param>
    /// <param name = "_resBookingCreationStartDateTime">System start date time used to identifer the reocrds in <c>ResBooking</c> table which added by this proposed extend fulfillment process.</param>
    /// <param name = "_resBookingCreationEndDateTime">System end date time used to identifer the reocrds in <c>ResBooking</c> table which added by this proposed extend fulfillment process.</param>
    /// <param name = "_rootActivity">Project root activity record identifier.</param>
    /// <param name = "_sendEmail">true to send email; otherwise, false.</param>
    /// <param name = "_projectManagerEmailAddress">Project manager email address.</param>
    public static void insertExtendFulfillment(ResTmpSpecifyResourceHours _specifyResourceHoursTable,
        ActivityRecId _staffedActivityResource, ResourceRecId _staffedResource, ResourceCategoryRecId _resourceCategory,
        ResExtendFulfillmentNotification _extendFulfillmentMemo, ResAddedToTeamByFulfillment _addToTeamByFulfillment,
        utcdatetime _resBookingCreationStartDateTime, utcdatetime _resBookingCreationEndDateTime,
        ActivityRecId _rootActivity, boolean _sendEmail = false, LogisticsElectronicAddressLocator _projectManagerEmailAddress = '')
    {
        HcmWorkerRecId fulfillByWorker = HcmWorkerLookup::currentWorker();
        
        ttsbegin;
        ResExtendFulfillmentTable fulfillmentTable;
        fulfillmentTable.RootActivity = _rootActivity;
        fulfillmentTable.ActivityResource = _staffedActivityResource;
        fulfillmentTable.Resource = _staffedResource;
        fulfillmentTable.ResourceCategory = _resourceCategory;
        fulfillmentTable.AddedToTeamByFulfillment = _addToTeamByFulfillment;
        fulfillmentTable.ExtendFulfillmentMemo = _extendFulfillmentMemo;
        fulfillmentTable.FulfillByWorker = fulfillByWorker;
        fulfillmentTable.insert();

        RefRecId fulfillmentTableRecId = fulfillmentTable.RecId;

        ResExtendFulfillmentLine fulfillmentLine;
        insert_recordset fulfillmentLine (FulfillmentStartDateTime, FulfillmentEndDateTime,
            RequestStartDateTime, RequestEndDateTime, FulfilledHours, RequestedHours, CommitType,
            ReservationType, Activity, ResExtendFulfillmentTableRefRecId)
            select ActualStartDateTime, ActualEndDateTime,
                RequestStartDateTime, RequestEndDateTime, ReservedHours, RequestedHours, CommitType,
                ReservationType, Activity, fulfillmentTableRecId
                from _specifyResourceHoursTable
                where _specifyResourceHoursTable.ExtendFulfillment == ResExtendFulfillment::Yes;

        ResExtendFulfillmentRollBack fulfillmentRollback;
        ResBooking resBooking;
        insert_recordset fulfillmentRollback (ResExtendFulfillmentTableRefRecId, ResBookingRefRecId)
            select fulfillmentTableRecId, RecId
                from resBooking
                where resBooking.Activity == _rootActivity
                    && resBooking.ActivityResource == _staffedActivityResource
                    && resBooking.CreatedDateTime >= _resBookingCreationStartDateTime
                    && resBooking.CreatedDateTime <= _resBookingCreationEndDateTime;
                    
        ttscommit;

        if (_sendEmail && _projectmanagerEmailAddress)
        {
            ResExtendFulfillmentManager::sendEmail(fulfillByWorker, _rootActivity, _staffedResource, _resourceCategory, _extendFulfillmentMemo, _projectManagerEmailAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptExtendFulfillment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accept and reserve extend fulfillment for assignment type reservation.
    /// </summary>
    /// <param name = "_extendFulfillmentView">The specified <c>ResExtendFulfillmentView</c> buffer.</param>
    public static void acceptExtendFulfillment(ResExtendFulfillmentView _extendFulfillmentView)
    {
        ResExtendFulfillmentLine extendFulfillmentLine;

        List schedules = new List(Types::Class);

        while select extendFulfillmentLine
            where extendFulfillmentLine.ResExtendFulfillmentTableRefRecId == _extendFulfillmentView.ResExtendFulfillmentTableRecId
                && extendFulfillmentLine.ReservationType == ResReservationType::Assignment
                && extendFulfillmentLine.FulfilledHours != 0
        {
            ResIReservationSchedule schedule = ResReservationSchedule::construct();
            schedule.start(extendFulfillmentLine.FulfillmentStartDateTime);
            schedule.end(extendFulfillmentLine.FulfillmentEndDateTime);
            schedule.capacity(extendFulfillmentLine.FulfilledHours * #SecondsPerHour);
            schedule.commitment(extendFulfillmentLine.CommitType);
            schedule.ReservationType(extendFulfillmentLine.ReservationType);
            schedule.Activity(extendFulfillmentLine.Activity);
            schedule.ResourceCategory(_extendFulfillmentView.ResourceCategory);
            schedule.parmIsExistingTeamMember(true);
            schedule.ActivityResource(_extendFulfillmentView.ActivityResource);
            schedules.addEnd(schedule);
        }

        if (!schedules.empty())
        {
            ResIResourceManager resourceManager = ResResourceManager::construct();
            resourceManager.ReserveProcessor(ResReserveProcessor::getProcessor(ResBookingType::Manual));
            resourceManager.Schedules(schedules);
            resourceManager.ExecuteRollUp(true);
            resourceManager.ReservationType(ResReservationType::Assignment);
            resourceManager.Reserve();
        }

        // Since user has taken the action to accept it, the associated notification record can be removed from ResExtendFulfillmentTable.
        ResExtendFulfillmentTable extendFulfillment;
        delete_from extendFulfillment
            where extendFulfillment.RecId == _extendFulfillmentView.ResExtendFulfillmentTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectExtendFulfillment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reject and remove extend fulfillemtn for booking type reservation.
    /// </summary>
    /// <param name = "_extendFulfillmentView">The specified <c>ResExtendFulfillmentView</c> buffer.</param>
    public static void rejectExtendFulfillment(ResExtendFulfillmentView _extendFulfillmentView)
    {
        ttsbegin;
        ResBooking resBooking;
        ResAssignment resassignment;
        ResExtendFulfillmentRollBack fulfillmentRollBack;

        ResUtil::skipDatabaseLogAndEvent(resBooking);

        // Only remove booking type reservation if the booking reservation is not supporting any assignment.
        delete_from resBooking
            exists join fulfillmentRollBack
                where fulfillmentRollBack.ResExtendFulfillmentTableRefRecId == _extendFulfillmentView.ResExtendFulfillmentTableRecId
                    && fulfillmentRollBack.ResBookingRefRecId == resBooking.RecId
            notexists join resAssignment
                where resBooking.ActivityResource == resAssignment.ActivityResource
                    && resBooking.CommitType == resAssignment.CommitType
                    && resBooking.Hour == resAssignment.Hour;

        // Since user has taken the action to reject it, the associated notification record can be removed from ResExtendFulfillmentTable.
        ResExtendFulfillmentTable extendFulfillment;
        delete_from extendFulfillment
            where extendFulfillment.RecId == _extendFulfillmentView.ResExtendFulfillmentTableRecId;

        ttscommit;

        if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
        {
            // Get start and end rollup dates from the specify resource hours table.
            utcdateTime rollupStart =  AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(_extendFulfillmentView.FulfillmentStartDate, 0), AVTimeframeType::Month).start();
            utcdateTime rollupEnd =  AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(_extendFulfillmentView.FulfillmentEndDate, 0), AVTimeframeType::Month).end();

            // Update roll-ups for the staffed resource
            ActivityResourceId staffedActivityResourceId = strFmt(ResUtil::activityResourceIdStrFormat,
                int642Str(_extendFulfillmentView.RootActivity), int642Str(_extendFulfillmentView.Resource), int642Str(_extendFulfillmentView.ActivityResource));

            container staffedActivityResourceRollUpArguments = [staffedActivityResourceId, rollupStart, rollupEnd];
            Global::runAsync(classNum(ResRollUpWriter),
                staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), staffedActivityResourceRollUpArguments);
        }

        if ((_extendFulfillmentView.AddedToTeamByFulfillment == ResAddedToTeamByFulfillment::Yes) 
            && (!ActivityResourceFacade::hasReservation(_extendFulfillmentView.ActivityResource)))
        {
            // remove the planned resource and roll-ups
            PSAProjSchedRole teamTable;
            delete_from teamTable
                where teamTable.RecId == _extendFulfillmentView.ActivityResource;
        }
        
        // Update activity scheduling status.
        ProjActivityCapacity::updateScheduleStatusByActivity(_extendFulfillmentView.RootActivity);
        
        // Update validation group and project status
        ResUtil::updateTeamInfo(_extendFulfillmentView.RootActivity);
      
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerEmailAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get email address by the specific worker record identifier.
    /// </summary>
    /// <param name = "_worker">Worker record identifier.</param>
    /// <returns>Email address of the specific worker.</returns>
    public static LogisticsElectronicAddressLocator getWorkerEmailAddress(HcmWorkerRecId _worker)
    {
        LogisticsElectronicAddressLocator emailAddress;

        if (_worker)
        {
            emailAddress = LogisticsElectronicAddress::findRecId(DirPerson::find(HcmWorker::find(_worker).Person).PrimaryContactEmail).Locator;
        }

        return emailAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailSubject</Name>
				<Source><![CDATA[
    private static SysEmailSubject getEmailSubject(ProjTable _projTable, ResourceCategoryRecId _resourceCategory)
    {
        ProjId projectId = _projTable.ProjId;
        ProjName projectName = _projTable.Name;
        ResourceCategoryName roleName = ResourceCategoryFacade::getName(_resourceCategory);
        
        SysEmailSubject emailSubject = strFmt("@Res:ExtendFulfillEmailSubject", projectId, projectName, roleName);

        return emailSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailBody</Name>
				<Source><![CDATA[
    private static SysEmailContents getEmailBody(HcmWorkerName _projectManagerName, HcmWorkerName _currentUserName, ResourceRecId _staffedResource,
        ResourceCategoryRecId _resourceCategory, ProjTable _projTable, ResExtendFulfillmentNotification _extendFulfillmentMemo)
    {
        ResResourceName staffedResourceName = ResourceFacade::getName(_staffedResource);
        ResourceCategoryName roleName = ResourceCategoryFacade::getName(_resourceCategory); 
        ProjId projectId = _projTable.ProjId;
        ProjName projectName = _projTable.Name;
        
        SysEmailContents emailBody = strFmt("@Res:ExtendFulfillEmailBody", _projectManagerName, _currentUserName, staffedResourceName, roleName, projectId, projectName, curext());

        if (_extendFulfillmentMemo)
        {
            emailBody += strFmt("@Res:ExtendFulfillEmailMemo", _currentUserName, _extendFulfillmentMemo);
        }

        return emailBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send email message by the current user to the project's project manager email address.
    /// </summary>
    /// <param name = "_curUserWorker">Current user worker record identifier.</param>
    /// <param name = "_rootActivity">Project root activity record identifier.</param>
    /// <param name = "_staffedResource">The proposed project resource record identifier.</param>
    /// <param name = "_resourceCategory">The role record identifier for this fulfillment.</param>
    /// <param name = "_extendFulfillmentMemo">The proposed extend fulfillment memo.</param>
    /// <param name = "_projectManagerEmailAddress">Project manager email address.</param>
    private static void sendEmail(HcmWorkerRecId _curUserWorker, ActivityRecId _rootActivity, ResourceRecId _staffedResource,
        ResourceCategoryRecId _resourceCategory, ResExtendFulfillmentNotification _extendFulfillmentMemo,
        LogisticsElectronicAddressLocator _projectManagerEmailAddress)
    {
        // Get the sender and receiver email addresses.
        if (_curUserWorker && _rootActivity && _projectManagerEmailAddress)
        {
            LogisticsElectronicAddressLocator curUsrEmailAddress = ResExtendFulfillmentManager::getWorkerEmailAddress(_curUserWorker);

            if (curUsrEmailAddress)
            {
                ProjTable projectTable = ProjTable::find(ActivityFacade::getProjId(_rootActivity));
                HcmWorkerName projectManagerName = HcmWorker::find(projectTable.WorkerResponsible).name();
                HcmWorkerName currentUserName = HcmWorker::find(_curUserWorker).name();
                
                SysMailerMessageBuilder messageBuilder = new SysMailerMessageBuilder();                
                messageBuilder.setFrom(curUsrEmailAddress, currentUserName);
                messageBuilder.addTo(_projectManagerEmailAddress, projectManagerName);
                messageBuilder.setSubject(ResExtendFulfillmentManager::getEmailSubject(projectTable, _resourceCategory));
                messageBuilder.setBody(ResExtendFulfillmentManager::getEmailBody(
                    projectManagerName, currentUserName, _staffedResource, _resourceCategory, projectTable, _extendFulfillmentMemo));

                try
                {
                    SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());
                }
                catch
                {
                    warning("@Res:NotificationEmailNotSent");
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>