<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdRemoveOrphSDLRelatedUncommittedTask_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data maintenance task to detect TaxWithholdUncommitted_IN record that are orphan in source document line and delete related SouceDocumentLine and AccountingDistribution.
/// </summary>
internal final class TaxWithholdRemoveOrphSDLRelatedUncommittedTask_IN implements IDataMaintenanceTask
{
    private const int MaxRecordsToDelete = 100; // Limite to 100, since X++ supports developer in selecting firstOnly1/firstOnly10/firstOnly100/firstOnly1000 only.

    private SourceDocumentLine sourceDocumentLine;
    private AccountingDistribution accountingDistributionTempDB; // A temp table buffer to store recId of SourceDocumentHeader and SourceDocumentLine.
    private TaxWithholdUncommitted_IN taxWithholdUncommitted;
    private int countOfOrphanSDLRecords;

    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TaxWithholdRemoveOrphSDLRelatedUncommittedTask_IN));

    #LOCALMACRO.SourceDocumentLineWhereClause
        sourceDocumentLine.SourceRelationType == tableNum(TaxWithholdUncommitted_IN)
            && sourceDocumentLine.AccountingStatus < SourceDocumentLineAccountingStatus::Completed
        notexists join RecId from taxWithholdUncommitted
            where taxWithholdUncommitted.SourceDocumentLine == sourceDocumentLine.RecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@TaxWithholdUncommitted_IN:WHTRemoveOrphSDLRelatedUncommittedTaskCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        DataMaintenanceTaskResult taskResult = DataMaintenanceTaskResult::construct();

        accountingDistributionTempDB.setTempDB();

        using (var activity = instrumentationLogger.activityContext(methodStr(TaxWithholdRemoveOrphSDLRelatedUncommittedTask_IN, run), TaxWithholdTaxIntrumentationLogConstants::WHTRemoveOrphSDLTaskLoggerNamespace))
        {
            container recordsToDelete;
            str sourceDocumentHeaderRecIdStr = fieldStr(AccountingDistribution, SourceDocumentHeader) + ' : ';

            countOfOrphanSDLRecords = this.countOfOrphanSDLRecords();
            recordsToDelete = this.getRecordsToDelete();

            this.deleteAccoutingDistribution();
            this.deleteSourceDocumentLine();

            taskResult.addMessage(DataMaintenanceMessageContract::constructForLabel(Exception::Info,
                literalStr("@TaxWithholdUncommitted_IN:WHTTotalRemovedOrphSDLRelatedUncommitted"),
                [
                    int2Str(conPeek(recordsToDelete, 1)),
                    int2Str(conPeek(recordsToDelete, 2))
                ]));

            while select SourceDocumentHeader from accountingDistributionTempDB
                group by accountingDistributionTempDB.SourceDocumentHeader
            {
                sourceDocumentHeaderRecIdStr += int642Str(accountingDistributionTempDB.SourceDocumentHeader) + ';';
            }

            instrumentationLogger.logInformation(sourceDocumentHeaderRecIdStr);
        }

        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the orphan records number <c>SourceDocumentline</c> and <c>AccountingDistribution</c> that need to be deleted.
    /// </summary>
    /// <returns>A container, the first value is <c>AccoutningDistribution</c> records need to be deleted, the second value is <c>SourceDocumentLine</c> records.</returns>.
    private container getRecordsToDelete()
    {
        int recordsToDeleteOfSDL;
        int recordsToDeleteOfAD;
        AccountingDistribution accountingDistribution;

        accountingDistributionTempDB.setTempDB();
        this.callInsertUpdateRelatedSkipMethods(accountingDistributionTempDB);

        insert_recordset accountingDistributionTempDB (SourceDocumentHeader, SourceDocumentLine)
            select firstonly100 crosscompany SourceDocumentHeader, RecId from sourceDocumentLine
                where sourceDocumentLine.SourceRelationType == tableNum(TaxWithholdUncommitted_IN)
                    && sourceDocumentLine.AccountingStatus < SourceDocumentLineAccountingStatus::Completed
                notexists join taxWithholdUncommitted
                    where taxWithholdUncommitted.SourceDocumentLine == sourceDocumentLine.RecId;

        if (countOfOrphanSDLRecords > MaxRecordsToDelete)
        {
            recordsToDeleteOfSDL = MaxRecordsToDelete;

            select crosscompany count(RecId) from accountingDistribution
                join RecId from accountingDistributionTempDB
                    where accountingDistributionTempDB.SourceDocumentHeader == accountingDistribution.SourceDocumentHeader
                        && accountingDistributionTempDB.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                join RecId from sourceDocumentLine
                    where sourceDocumentLine.RecId == accountingDistributionTempDB.SourceDocumentLine
                        && #SourceDocumentLineWhereClause;
        }
        else
        {
            recordsToDeleteOfSDL = countOfOrphanSDLRecords;

            select crosscompany count(RecId) from accountingDistribution
                join RecId from sourceDocumentLine
                    where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
                        && #SourceDocumentLineWhereClause;
        }

        recordsToDeleteOfAD = accountingDistribution.RecId;

        return [recordsToDeleteOfAD, recordsToDeleteOfSDL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>countOfOrphanSDLRecords</Name>
				<Source><![CDATA[
    private int countOfOrphanSDLRecords()
    {
        select crosscompany count(RecId) from sourceDocumentLine
            where #SourceDocumentLineWhereClause;

        return sourceDocumentLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAccoutingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>AccountingDistribution</c> that are orphan in <c>TaxWithholdUncommitted_IN</c>.
    /// </summary>
    private void deleteAccoutingDistribution()
    {
        AccountingDistribution accountingDistribution;

        this.callInsertUpdateRelatedSkipMethods(accountingDistribution);
        this.skipDatabaseDeleteAction(accountingDistribution);

        if (countOfOrphanSDLRecords > MaxRecordsToDelete)
        {
            delete_from crosscompany accountingDistribution
                exists join RecId from accountingDistributionTempDB
                    where accountingDistributionTempDB.SourceDocumentHeader == accountingDistribution.SourceDocumentHeader
                        && accountingDistributionTempDB.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                exists join RecId from sourceDocumentLine
                    where sourceDocumentLine.RecId == accountingDistributionTempDB.SourceDocumentLine
                        && #SourceDocumentLineWhereClause;
        }
        else
        {
            delete_from crosscompany accountingDistribution
                exists join RecId from sourceDocumentLine
                    where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
                        && #SourceDocumentLineWhereClause;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>SourceDocumentLine</c> that are orphan in <c>TaxWithholdUncommitted_IN</c>.
    /// </summary>
    private void deleteSourceDocumentLine()
    {
        this.callInsertUpdateRelatedSkipMethods(sourceDocumentLine);
        this.skipDatabaseDeleteAction(sourceDocumentLine);

        if (countOfOrphanSDLRecords > MaxRecordsToDelete)
        {
            delete_from crosscompany sourceDocumentLine
                exists join RecId from accountingDistributionTempDB
                    where accountingDistributionTempDB.SourceDocumentHeader == sourceDocumentLine.SourceDocumentHeader
                        && accountingDistributionTempDB.SourceDocumentLine == sourceDocumentLine.RecId
                        && #SourceDocumentLineWhereClause;
        }
        else
        {
            delete_from crosscompany sourceDocumentLine
                where #SourceDocumentLineWhereClause;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callInsertUpdateRelatedSkipMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the skip methods that are relevant when doing inserts and updates.
    /// </summary>
    /// <param name="_buffer">
    /// The buffer on which to call the methods.
    /// </param>
    private void callInsertUpdateRelatedSkipMethods(Common _buffer)
    {
        _buffer.skipAosValidation(true);
        _buffer.skipDatabaseLog(true);
        _buffer.skipDataMethods(true);
        _buffer.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseDeleteAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip database delete actions.
    /// </summary>
    /// <param name = "_table">The specified table buffer.</param>
    private void skipDatabaseDeleteAction(Common _buffer)
    {
        _buffer.skipDeleteActions(true);
        _buffer.skipDeleteMethod(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>