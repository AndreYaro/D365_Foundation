<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SCTTracingTransactionContract_ProdPickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
internal final class SCTTracingTransactionContract_ProdPickingList extends SCTTracingTransactionContract
{
    private VendAccount     vendorAccount;
    private InventDirection direction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [DataMember('ItemId')]
    internal ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchId</Name>
				<Source><![CDATA[
    [DataMember('InventBatchId')]
    internal InventBatchId parmInventBatchId(InventBatchId _inventBatchId = inventBatchId)
    {
        inventBatchId = _inventBatchId;

        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSerialId</Name>
				<Source><![CDATA[
    [DataMember('InventSerialId')]
    internal InventSerialId parmInventSerialId(InventSerialId _inventSerialId = inventSerialId)
    {
        inventSerialId = _inventSerialId;

        return inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    [DataMember('InventQty')]
    internal InventQty parmInventQty(InventQty _quantity = quantity)
    {
        quantity = _quantity;

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUom</Name>
				<Source><![CDATA[
    [DataMember('Unit')]
    internal UnitOfMeasureSymbol parmUom(UnitOfMeasureSymbol _uom = uom)
    {
        uom = _uom;

        return uom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorAccount</Name>
				<Source><![CDATA[
    [DataMember('Vendor')]
    internal VendAccount parmVendorAccount(VendAccount _vendorAccount = vendorAccount)
    {
        vendorAccount = _vendorAccount;

        return vendorAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirection</Name>
				<Source><![CDATA[
    [DataMember('Direction')]
    internal InventDirection parmDirection(InventDirection _direction = direction)
    {
        direction = _direction;

        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetails</Name>
				<Source><![CDATA[
    [DataMember('Details')]
    internal SCTTracingDataCollection parmDetails(SCTTracingDataCollection _details = details)
    {
        details = _details;

        return details;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SCTTracingTransactionContract_ProdPickingList construct()
    {
        return new SCTTracingTransactionContract_ProdPickingList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromComponentLotAssociation</Name>
				<Source><![CDATA[
    internal static SCTTracingTransactionContract_ProdPickingList newFromComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociation _componentLotAssociation)
    {
        var tracingTransactionContract = SCTTracingTransactionContract_ProdPickingList::construct();
        var inventDim = _componentLotAssociation.inventDim();

        tracingTransactionContract.parmItemId(_componentLotAssociation.ItemId);
        tracingTransactionContract.parmInventBatchId(inventDim.InventBatchId);
        tracingTransactionContract.parmInventSerialId(inventDim.InventSerialId);
        tracingTransactionContract.parmInventQty(_componentLotAssociation.InventConsumptionQty);    // SCT requirement: InventQty in consumerTransactions should be positive
        tracingTransactionContract.parmDirection(_componentLotAssociation.InventConsumptionQty > 0 ? InventDirection::Issue : InventDirection::Receipt);
        tracingTransactionContract.parmUom(_componentLotAssociation.InventUnitId);
        tracingTransactionContract.parmVendorAccount(_componentLotAssociation.VendorId);
        tracingTransactionContract.parmDetails(SCTTracingTransactionContract::getDetails(inventDim));

        return tracingTransactionContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>