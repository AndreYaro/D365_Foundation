<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChannelProdAttrMetaHandlerFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailChannelProdAttrMetaHandlerFactory</c> is used to create a product attribute metadata handler
/// </summary>
class RetailChannelProdAttrMetaHandlerFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a product attribute metadata handler based on a given channel
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id
    /// </param>
    /// <returns>
    /// Product attribute metadata handler
    /// </returns>
    public static RetailChannelProdAttrMetadataHandler create(RefRecId _channelId)
    {
        RetailChannelTable retailChannelTable;
        retailChannelTable = RetailChannelTable::findByRecId(_channelId);
        RetailChannelProdAttrMetadataHandler metadataHandler = null;

        if (retailChannelTable.RecId > 0)
        {
            switch (retailChannelTable.ChannelType)
            {
                case RetailChannelType::RetailStore:
                    metadataHandler = new RetailStoreProdAttrMetadataHandler();

                case RetailChannelType::SharePointOnlineStore:
                    metadataHandler = new RetailSPChannelProdAttrMetadataHandler();

                default:
                    EventHandlerResult result = new EventHandlerResult();
                    RetailChannelProdAttrMetaHandlerFactory::createMetadataHandlerDelegate(retailChannelTable.ChannelType, result);
                    // if the delegate returns a result, use the metadata handler instance returned from the delegate.
                    if (result.hasResult()) 
                    {
                        metadataHandler = result.result();
                    }
            }
        }

        return metadataHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMetadataHandlerDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for creating a product attribute metadata handler based on a given channel type
    /// </summary>
    /// <param name="_channelType">
    /// The channel type.
    /// </param>
    /// <param name="_result">
    /// Subscribers should use this object to return an instance of the metadata handler 
    /// class of subtype <c>RetailChannelProdAttrMetadataHandler</c> for the specified channel type.
    /// </param>
    static delegate void createMetadataHandlerDelegate(RetailChannelType _channelType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>