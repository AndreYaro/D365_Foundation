<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoMarkChangeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransPoMarkChangeType extends ReqTransPoMark implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    ReqRefType              refType;

    DialogField             dialogFromInventLocationId;
    InventLocationIdFrom    fromInventLocationId;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        refType,
        fromInventLocationId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        switch (refType)
        {
            case ReqRefType::ItemPlannedOrder       :
                return "@SYS69987";
            case ReqRefType::BOMPlannedOrder        :
                return "@SYS69989";
            case ReqRefType::TransferPlannedOrder   :
                return "@SYS69991";
            case ReqRefType::PmfPlannedProdBatch :
                return "@PRO2371";
            case ReqRefType::PlannedKanban          :
                return "@SYS301772";
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        this.dialogAddDefaultFields(dialog,true,false);

        if (refType == ReqRefType::TransferPlannedOrder)
        {
            dialogFromInventLocationId  = dialog.addFieldValue(extendedTypeStr(InventLocationIdFrom),fromInventLocationId);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (dialogFromInventLocationId)
        {
            if (dialogFromInventLocationId.value())
            {
                if (InventLocation::exist(dialogFromInventLocationId.value()))
                {
                    fromInventLocationId = dialogFromInventLocationId.value();
                }
                else
                {
                    ret = checkFailed(strFmt("@SYS55265",
                                      dialogFromInventLocationId.value(),
                                      extendedTypeId2pname(extendedTypeNum(InventLocationIdFrom)),
                                      tablePName(InventLocation)));
                }
            }
            else
            {
                ret = this.countMarkedElements()
                            ? checkFailed(strFmt("@SYS26332",
                                          extendedTypeId2pname(extendedTypeNum(InventLocationIdFrom))))
                            : true;
            }
        }
        else
        {
            fromInventLocationId = '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were marked.
    /// </summary>
    /// <param name="_countMarkedElements">
    ///    The number of marked records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    protected str labelDialogMarkedElements(int _countMarkedElements)
    {
        str text;

        switch (_countMarkedElements)
        {
            case 0:
                text = "@SYS345110";
                break;
            case 1:
                text = strFmt("@SYS70003",refType);
                break;
            default:
                text = strFmt("@SYS70004",_countMarkedElements,refType);
                break;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,super(),#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqRefType</Name>
				<Source><![CDATA[
    public ReqRefType parmReqRefType(ReqRefType _refType = refType)
    {
        refType = _refType;
        return refType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        setPrefix(ReqTransPoMarkChangeType::description());

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            super();

            try
            {
                ttsBegin;

                if (!this.validate())
                {
                    throw error("@SYS18447");
                }

                this.updateType();

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,#CurrentList] = _packedClass;
                super(base);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateType</Name>
				<Source><![CDATA[
    protected void updateType()
    {
        MapEnumerator       me;
        ReqTrans            reqTransMark;
        ReqTrans            reqTrans;
        ReqPO               reqPO;

        this.mapReqTransMark();

        if (   mapReqTransMark
            && mapReqTransMark.elements())
        {
            me = mapReqTransMark.getEnumerator();

            while (me.moveNext())
            {
                reqTransMark = me.currentValue();

                reqPO = reqTransMark.reqPo(true);

                if (!reqPO.RecId)
                {
                    reqPO.insertFromReqTrans(reqTransMark);
                }
                reqTrans = reqPO.reqTrans(true);

                setPrefix(#prefixField(reqTrans,refId));

                if (!reqTrans.RecId)
                {
                    throw error(strFmt("@SYS24774",reqTransMark.RefId));
                }
                if (!reqTrans.isPlannedOrder())
                {
                    throw error("@SYS69936");
                }

                if (this.mustUpdatePlannedOrder(reqPO, reqTrans))
                {
                    reqPO.RefType = refType;
                    reqPO.update(null, reqTrans, fromInventLocationId);
                    
                    mapReqTransDeleted.insert(reqTrans.RecId, reqTrans);
                    mapReqPoDeleted.insert(reqPO.RecId, reqPO);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePlannedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the planned order must be updated.
    /// </summary>
    /// <param name="_reqPO">
    /// The planned order record which is to be validated.
    /// </param>
    /// <param name="_reqTrans">
    /// The net requirement record which is to be validated.
    /// </param>
    /// <returns>
    /// true if the planned order must be updated; otherwise, false.
    /// </returns>
    protected boolean mustUpdatePlannedOrder(ReqPO _reqPO, ReqTrans _reqTrans)
    {
        return _reqPO.RefType != refType
               && _reqPO.reqSetupDim().checkPlannedOrderType(ReqPO::reqRefType2ReqPoType(refType), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqTransPoMarkChangeType construct()
    {
        return new ReqTransPoMarkChangeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS69986";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqTransPoMarkChangeType reqTransPoMarkChangeType =  ReqTransPoMarkChangeType::newForm(_args);

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(reqTransPoMarkChangeType))
        {
            reqTransPoMarkChangeType.executeAction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static ReqTransPoMarkChangeType newForm(Args _args)
    {
        ReqTransPoMarkChangeType    reqTransPoMarkChangeType = ReqTransPoMarkChangeType::construct();

        reqTransPoMarkChangeType.getLast();
        reqTransPoMarkChangeType.initFromArgs(_args);
        reqTransPoMarkChangeType.parmReqRefType(_args.parmEnum());

        return reqTransPoMarkChangeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(ReqTransPo), classStr(ReqTransPoMarkChangeType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return classStr(ReqTransPoMarkChangeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>