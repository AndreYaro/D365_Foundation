<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetRevisionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjBudgetRevisionManager
{
    #Define.RetryNum(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNewRevisionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates revision allocation lines.
    /// </summary>
    /// <param name="_revLines">
    /// A buffer of a temporary table for cost type lines.
    /// </param>
    public static void allocateNewRevisionLines(TmpProjBudgetRevisionLine _revLines)
    {
        ProjBudgetRevisionLine      revisionLine;
        ProjBudgetAllocationLine    allocationLine;
        ProjBudgetRevLineAllocation revAllocationLine;
        TmpProjBudgetRevisionLine   revLines = _revLines;

        while select revLines where revLines.Marked==NoYes::Yes && revLines.ProjBudgetRevisionLine==0
        {
            insert_recordset revAllocationLine (ProjBudgetRevisionLine, ProjBudgetAllocationLine)
            select RecId from revisionLine where revisionLine.ProjBudgetRevision == revLines.ProjBudgetRevision && revisionLine.ProjBudgetLine == revLines.ProjBudgetLine
            join RecId from allocationLine where allocationLine.ProjBudgetLine == revisionLine.ProjBudgetLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions when a revision is committed.
    /// </summary>
    /// <param name="projBudgetRevision">
    /// The <c>ProjBudgetRevision</c> record that is being committed.
    /// </param>
    /// <remarks>
    /// Updates fields from a revision line, budget line, and budget allocation line tables.Also updates
    /// budget state from the budget table.
    /// </remarks>
    public static void commitRevision(ProjBudgetRevision projBudgetRevision)
    {
        ProjBudget                  projBudget;
        ProjBudgetManager           projBudgetManager = new ProjBudgetManager();

        projBudget = ProjBudget::find(projBudgetRevision.ProjBudget);

    /*
        while select TotalBudget from projBudgetLine
            join forupdate projBudgetRevisionLine
                where projBudgetRevisionLine.ProjBudgetLine == projBudgetLine.RecId &&
                      projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevisionRecId
        {
            projBudgetRevisionLine.PreviousApprovedBudget = projBudgetLine.TotalBudget;
            projBudgetRevisionLine.NewTotalBudget         = projBudgetRevisionLine.RevisionAmount +
                                                            projBudgetRevisionLine.PreviousApprovedBudget;
            projBudgetRevisionLine.update();
        }

        while select forupdate projBudgetAllocationLine
            exists join projBudgetLine
                where projBudgetLine.RecId == projBudgetAllocationLine.ProjBudgetLine
                    exists join projBudgetRevisionLine
                        where projBudgetRevisionLine.ProjBudgetLine == projBudgetLine.RecId &&
                              projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevisionRecId
        {
            projBudgetAllocationLine.CommittedRevisions    += projBudgetAllocationLine.UncommittedRevisions;
            projBudgetAllocationLine.TotalAllocationAmount += projBudgetAllocationLine.UncommittedRevisions;
            projBudgetAllocationLine.UncommittedRevisions   = 0;
            projBudgetAllocationLine.update();
        }

        while select forupdate projBudgetLine
            join projBudgetRevisionLine
                where projBudgetRevisionLine.ProjBudgetLine == projBudgetLine.RecId &&
                      projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevisionRecId
        {
            projBudgetLine.CommittedRevisions   += projBudgetRevisionLine.RevisionAmount;
            projBudgetLine.TotalBudget          += projBudgetRevisionLine.RevisionAmount;
            projBudgetLine.UncommittedRevisions -= projBudgetRevisionLine.RevisionAmount;
            projBudgetLine.update();
        }
    */

        if (projBudget.BudgetState != ProjBudgetState::Amendment)
        {
            projBudget.selectForUpdate(true);
            projBudget.setProjBudgetState(ProjBudgetState::Amendment);
        }

        ProjBudgetManager::commitBudget(projBudget.RecId, projBudgetRevision.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProjBudgetLineBeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for budgetline creation.
    /// </summary>
    /// <param name = "_tmpRevisionLine">
    /// A temporary table that contains the revision lines.
    /// </param>
    /// <returns>
    /// True if the budget line to be created; otherwise, false.
    /// </returns>
    protected static boolean shouldProjBudgetLineBeCreated(TmpProjBudgetRevisionLine _tmpRevisionLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts budget lines for newly created revision lines.
    /// </summary>
    /// <param name="tmpRevisionLine">
    /// A temporary table that contains the revision lines.
    /// </param>
    /// <remarks>
    /// For each new revision line, a budget line is inserted.
    /// </remarks>
    static void createBudgetLines(TmpProjBudgetRevisionLine tmpRevisionLine)
    {
        ProjBudgetLine newBudgetLine;
        ProjBudgetLine budgetLine;
        ProjBudgetManager projBudgetManager = new ProjBudgetManager();

        while select forupdate tmpRevisionLine
        where tmpRevisionLine.Marked == NoYes::Yes && tmpRevisionLine.ProjBudgetLine == 0
        {
            if (ProjBudgetRevisionManager::shouldProjBudgetLineBeCreated(tmpRevisionLine))
            {
                newBudgetLine.clear();
                newBudgetLine.ProjId                = tmpRevisionLine.ProjId;
                newBudgetLine.ActivityNumber        = tmpRevisionLine.ActivityNumber;
                newBudgetLine.ProjTransType         = tmpRevisionLine.ProjTransType;
                newBudgetLine.CategoryId            = tmpRevisionLine.CategoryId;
                newBudgetLine.ProjBudgetLineType    = tmpRevisionLine.ProjBudgetLineType;
                newBudgetLine.ProjBudget            = ProjBudgetRevision::find(tmpRevisionLine.ProjBudgetRevision).ProjBudget;
                newBudgetLine.UncommittedRevisions  = tmpRevisionLine.IncrementalChange;

                select firstonly ProjAllocationMethod from budgetLine
                where budgetLine.ProjBudget         == newBudgetLine.ProjBudget &&
                      budgetLine.ProjTransType      == newBudgetLine.ProjTransType &&
                      budgetLine.ProjBudgetLineType == newBudgetLine.ProjBudgetLineType;

                //if cannot find a budgetline with the same transaction type - search for a line based on ProjBudget and Line Type
                if (!budgetLine)
                {
                    select firstonly ProjAllocationMethod from budgetLine
                        where budgetLine.ProjBudget         == newBudgetLine.ProjBudget &&
                                budgetLine.ProjBudgetLineType == newBudgetLine.ProjBudgetLineType;
                }

                //if cannot find a budgetline with the same budget line type - search for a line based on ProjBudget
                if (!budgetLine)
                {
                    select firstonly ProjAllocationMethod from budgetLine
                        where budgetLine.ProjBudget         == newBudgetLine.ProjBudget;
                }

                newBudgetLine.ProjAllocationMethod   = budgetLine.ProjAllocationMethod;
                newBudgetLine.insert();

                projBudgetManager.createDefaultAllocation(newBudgetLine, ProjBudgetState::Created); // new budget line

                tmpRevisionLine.ProjBudgetLine = newBudgetLine.RecId;
                tmpRevisionLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisionCostLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs when the revision form is initialized or the Save button on the form is clicked.
    /// </summary>
    /// <param name="_action">
    /// A <c>ProjBudgetRevisionManagerActionType</c> enumeration value. Possible values are the <c>New
    /// Revision</c>, <c>Edit Revision</c> and <c>View Revision</c> values.
    /// </param>
    /// <param name="_projBudget">
    /// The record ID of the project budget for which the revision is made.
    /// </param>
    /// <param name="_projBudgetRevision">
    /// The record ID of the current project budget revision.
    /// </param>
    /// <returns>
    /// A <c>TmpProjBudgetRevisionLine</c> temporary table
    /// </returns>
    public static TmpProjBudgetRevisionLine getRevisionCostLines(ProjBudgetRevisionManagerActionType _action, RecId _projBudget, RecId _projBudgetRevision)
    {
        TmpProjBudgetRevisionLine   tmpRevLine;
        ProjBudgetLine              projBudgetLine;
        ProjBudgetRevisionLine      projBudgetRevisionLine;

        switch (_action)
        {
            case ProjBudgetRevisionManagerActionType::NewRevision :

                insert_recordset tmpRevLine(ProjId, ActivityNumber, ProjTransType, CategoryId, ApprovedBudget, ProjBudgetLineType, ProjBudgetLine, ProjBudgetRevision)
                select ProjId, ActivityNumber, ProjTransType, CategoryId, TotalBudget, ProjBudgetLineType, RecId, _projBudgetRevision
                from projBudgetLine
                where projBudgetLine.ProjBudget         == _projBudget &&
                      projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Cost;

                break;

            case ProjBudgetRevisionManagerActionType::EditRevision :

                insert_recordset tmpRevLine(ProjId, ActivityNumber, ProjTransType, CategoryId, ApprovedBudget, ProjBudgetLineType, ProjBudgetLine, ProjBudgetRevision)
                select ProjId, ActivityNumber, ProjTransType, CategoryId, TotalBudget, ProjBudgetLineType, RecId, _projBudgetRevision
                from projBudgetLine
                where projBudgetLine.ProjBudget         == _projBudget &&
                      projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Cost;

                update_recordset tmpRevLine
                    setting IncrementalChange      = projBudgetRevisionLine.RevisionAmount,
                            NewBudget              = tmpRevLine.ApprovedBudget + projBudgetRevisionLine.RevisionAmount,
                            ProjBudgetRevisionLine = projBudgetRevisionLine.RecId
                    join projBudgetRevisionLine
                    where projBudgetRevisionLine.ProjBudgetLine     == tmpRevLine.ProjBudgetLine &&
                          projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevision;

                break;

            case ProjBudgetRevisionManagerActionType::ViewRevision :

                insert_recordset tmpRevLine(ProjId, ActivityNumber, ProjTransType, CategoryId, ProjBudgetLineType, ProjBudgetLine, ProjBudgetRevision)
                select ProjId, ActivityNumber, ProjTransType, CategoryId, ProjBudgetLineType, RecId, _projBudgetRevision
                from projBudgetLine
                where projBudgetLine.ProjBudget         == _projBudget &&
                      projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Cost
                    exists join projBudgetRevisionLine
                    where projBudgetRevisionLine.ProjBudgetLine     == projBudgetLine.RecId &&
                          projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevision;

                update_recordset tmpRevLine
                    setting ApprovedBudget         = projBudgetRevisionLine.PreviousApprovedBudget,
                            IncrementalChange      = projBudgetRevisionLine.RevisionAmount,
                            NewBudget              = projBudgetRevisionLine.NewTotalBudget,
                            ProjBudgetRevisionLine = projBudgetRevisionLine.RecId
                    join projBudgetRevisionLine
                    where projBudgetRevisionLine.ProjBudgetLine     == tmpRevLine.ProjBudgetLine &&
                          projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevision;

                break;
        }

        return tmpRevLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisionRevenueLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is called when revision form is initialized or the Save button on the form is clicked.
    /// </summary>
    /// <param name="_action">
    /// ProjBudgetRevisionManagerActionType enum parameter with: New Revision, Edit Revision and View Revision possible values
    /// </param>
    /// <param name="_projBudget">
    /// Rec Id of the project budget for which the revision is made
    /// </param>
    /// <param name="_projBudgetRevision">
    /// Rec Id of the current project budget revision
    /// </param>
    /// <returns>
    /// Temporary table TmpProjBudgetRevisionLine
    /// </returns>
    public static TmpProjBudgetRevisionLine getRevisionRevenueLines(ProjBudgetRevisionManagerActionType _action, RecId _projBudget, RecId _projBudgetRevision)
    {
        TmpProjBudgetRevisionLine   tmpRevLine;
        ProjBudgetLine              projBudgetLine;
        ProjBudgetRevisionLine      projBudgetRevisionLine;

        switch (_action)
        {
            case ProjBudgetRevisionManagerActionType::NewRevision :

                insert_recordset tmpRevLine(ProjId, ActivityNumber, ProjTransType, CategoryId, ApprovedBudget, ProjBudgetLineType, ProjBudgetLine, ProjBudgetRevision)
                select ProjId, ActivityNumber, ProjTransType, CategoryId, TotalBudget, ProjBudgetLineType, RecId, _projBudgetRevision
                from projBudgetLine
                where projBudgetLine.ProjBudget         == _projBudget &&
                      projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Revenue &&
                      projBudgetLine.CategoryId         != '';

                break;

            case ProjBudgetRevisionManagerActionType::EditRevision :

                insert_recordset tmpRevLine(ProjId, ActivityNumber, ProjTransType, CategoryId, ApprovedBudget, ProjBudgetLineType, ProjBudgetLine, ProjBudgetRevision)
                select ProjId, ActivityNumber, ProjTransType, CategoryId, TotalBudget, ProjBudgetLineType, RecId, _projBudgetRevision
                from projBudgetLine
                where projBudgetLine.ProjBudget         == _projBudget &&
                      projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Revenue &&
                      projBudgetLine.CategoryId         != '';

                update_recordset tmpRevLine
                    setting IncrementalChange      = projBudgetRevisionLine.RevisionAmount,
                            NewBudget              = tmpRevLine.ApprovedBudget + projBudgetRevisionLine.RevisionAmount,
                            ProjBudgetRevisionLine = projBudgetRevisionLine.RecId
                    join projBudgetRevisionLine
                    where projBudgetRevisionLine.ProjBudgetLine     == tmpRevLine.ProjBudgetLine &&
                          projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevision;

                break;

            case ProjBudgetRevisionManagerActionType::ViewRevision :

                insert_recordset tmpRevLine(ProjId, ActivityNumber, ProjTransType, CategoryId, ProjBudgetLineType, ProjBudgetLine, ProjBudgetRevision)
                select ProjId, ActivityNumber, ProjTransType, CategoryId, ProjBudgetLineType, RecId, _projBudgetRevision
                from projBudgetLine
                where projBudgetLine.ProjBudget         == _projBudget &&
                      projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Revenue &&
                      projBudgetLine.CategoryId         != ''
                    exists join projBudgetRevisionLine
                    where projBudgetRevisionLine.ProjBudgetLine     == projBudgetLine.RecId &&
                          projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevision;

                update_recordset tmpRevLine
                    setting ApprovedBudget         = projBudgetRevisionLine.PreviousApprovedBudget,
                            IncrementalChange      = projBudgetRevisionLine.RevisionAmount,
                            NewBudget              = projBudgetRevisionLine.NewTotalBudget,
                            ProjBudgetRevisionLine = projBudgetRevisionLine.RecId
                    join projBudgetRevisionLine
                    where projBudgetRevisionLine.ProjBudgetLine     == tmpRevLine.ProjBudgetLine &&
                          projBudgetRevisionLine.ProjBudgetRevision == _projBudgetRevision;

                break;
        }

        return tmpRevLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryOfRevisionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of revision lines amounts.
    /// </summary>
    /// <param name="_tmpProjBudgetRevisionLine">
    /// A temporary table for the revision lines.
    /// </param>
    /// <param name="_selectedProjId">
    /// A project ID for which to calculate the amounts.
    /// </param>
    /// <returns>
    /// A container with the amounts for the already approved budget and the totals for the current
    /// revision.
    /// </returns>
    public static container getSummaryOfRevisionLine(TmpProjBudgetRevisionLine _tmpProjBudgetRevisionLine, ProjId _selectedProjId)
    {
        TmpProjBudgetRevisionLine tmpProjBudgetRevisionLine;
        AmountCur approved;
        AmountCur revision;
        #Define.Star('*')

        tmpProjBudgetRevisionLine.setTmpData(_tmpProjBudgetRevisionLine);

        while select tmpProjBudgetRevisionLine
        where tmpProjBudgetRevisionLine.ProjId like _selectedProjId + #Star
        {
            approved += tmpProjBudgetRevisionLine.ApprovedBudget;
            revision += tmpProjBudgetRevisionLine.IncrementalChange;
        }

        return [approved, revision];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateProjAllocationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates the records of the <c>ProjBudgetRevLineAllocation</c> table.
    /// </summary>
    /// <param name="_allocationAmount">
    /// A <c>AmountCur</c> data type value that indicates the amount of the allocation.
    /// </param>
    /// <param name="_projAllocationMethod">
    /// A <c>ProjAllocationMethod</c> data type value that indicates the allocation method.
    /// </param>
    /// <param name="_common">
    /// A <c>Common</c> table buffer that specifies the allocation period or year record ID.
    /// </param>
    /// <param name="_projBudgetRevLineId">
    /// The record ID of the project budget line.
    /// </param>
    /// <remarks>
    /// For each revision line and for each period the method looks first if a budget allocation line exists.
    /// If not, it creates a budget allocation line with amount 0 and the appropriate periods set.
    /// This is the support for the budget revision allocation line to be created.
    /// After making sure that a budget allocation line exists the method searches for a budget revision allocation line.
    /// If this record is found it is updated with the new allocation amounts.
    /// If not, it is created with new allocation amounts and with reference to the revision line and to the budget allocation line.
    /// </remarks>
    static void insertOrUpdateProjAllocationLines(AmountCur _allocationAmount,
                                           ProjAllocationMethod _projAllocationMethod,
                                           Common _common ,
                                           RecId _projBudgetRevLineId)
    {
        ProjBudgetRevisionLine          projBudgetRevisionLine = ProjBudgetRevisionLine::find(_projBudgetRevLineId);
        ProjBudgetAllocationLine        projBudgetAllocationLine;
        ProjBudgetRevLineAllocation     projBudgetRevLineAllocation;
        FiscalCalendarYear              fiscalCalendarYear;
        FiscalCalendarPeriod            fiscalCalendarPeriod;

        void setRevisionAllocationAmount()
        {
            projBudgetRevLineAllocation.RevisionAllocationAmount = _allocationAmount;
        }

        void setBudgetAllocationAmount()
        {
            projBudgetAllocationLine.UncommittedRevisions = _allocationAmount;
        }

        void initProjBudgetRevisionAllocation()
        {
            projBudgetRevLineAllocation.clear();
            projBudgetRevLineAllocation.ProjBudgetRevisionLine = _projBudgetRevLineId;
            projBudgetRevLineAllocation.ProjBudgetAllocationLine = projBudgetAllocationLine.RecId;
        }

        void initProjBudgetAllocation()
        {
            projBudgetAllocationLine.clear();
            projBudgetAllocationLine.ProjBudgetLine = projBudgetRevisionLine.ProjBudgetLine;
        }

        switch (_projAllocationMethod)
        {
            case ProjAllocationMethod::Yearly :

                fiscalCalendarYear = _common;

                projBudgetAllocationLine = ProjBudgetAllocationLine::findbyFiscalYear(fiscalCalendarYear.RecId, projBudgetRevisionLine.ProjBudgetLine, true);
                projBudgetRevLineAllocation = ProjBudgetRevLineAllocation::findByBudgetAllocationLine(projBudgetAllocationLine.RecId, _projBudgetRevLineId, true);

                if (projBudgetAllocationLine)
                {
                    setbudgetAllocationAmount();
                    projBudgetAllocationLine.update();
                }
                else
                {
                    initProjBudgetAllocation();
                    setBudgetAllocationAmount();
                    projBudgetAllocationLine.FiscalCalendarYear = fiscalCalendarYear.RecId;
                    projBudgetAllocationLine.insert();
                }

                if (projBudgetRevLineAllocation)
                {
                    setRevisionAllocationAmount();
                    projBudgetRevLineAllocation.update();
                }
                else
                {
                    initProjBudgetRevisionAllocation();
                    setRevisionAllocationAmount();
                    projBudgetRevLineAllocation.insert();
                }
                break;

            case ProjAllocationMethod::Quarter :

                fiscalCalendarPeriod  = _common;

                projBudgetAllocationLine = ProjBudgetAllocationLine::findbyFiscalQuarter(fiscalCalendarPeriod.FiscalCalendarYear, fiscalCalendarPeriod.Quarter, projBudgetRevisionLine.ProjBudgetLine, true);
                projBudgetRevLineAllocation = ProjBudgetRevLineAllocation::findByBudgetAllocationLine(projBudgetAllocationLine.RecId, _projBudgetRevLineId, true);

                if (projBudgetAllocationLine)
                {
                    setBudgetAllocationAmount();
                    projBudgetAllocationLine.update();
                }
                else
                {
                    initProjBudgetAllocation();
                    setBudgetAllocationAmount();
                    projBudgetAllocationLine.FiscalCalendarYear = fiscalCalendarPeriod.FiscalCalendarYear;
                    projBudgetAllocationLine.Quarter = fiscalCalendarPeriod.Quarter;
                    projBudgetAllocationLine.insert();
                }

                if (projBudgetRevLineAllocation)
                {
                    setRevisionAllocationAmount();
                    projBudgetRevLineAllocation.update();
                }
                else
                {
                    initProjBudgetRevisionAllocation();
                    setRevisionAllocationAmount();
                    projBudgetRevLineAllocation.insert();
                }
                break;

            case ProjAllocationMethod::Periods :

                fiscalCalendarPeriod = _common;

                projBudgetAllocationLine = ProjBudgetAllocationLine::findbyFiscalPeriod(fiscalCalendarPeriod.RecId, projBudgetRevisionLine.ProjBudgetLine, true);
                projBudgetRevLineAllocation = ProjBudgetRevLineAllocation::findByBudgetAllocationLine(projBudgetAllocationLine.RecId, _projBudgetRevLineId, true);

                if (projBudgetAllocationLine)
                {
                    setBudgetAllocationAmount();
                    projBudgetAllocationLine.update();
                }
                else
                {
                    initProjBudgetAllocation();
                    setBudgetAllocationAmount();
                    projBudgetAllocationLine.FiscalCalendarPeriod = fiscalCalendarPeriod.RecId;

                    ProjBudgetReductionHistory projBudgetReductionHistory;
                    ProjPostTransView projPostTransView;
                    ProjBudgetLine projBudgetLine = ProjBudgetLine::find(projBudgetAllocationLine.ProjBudgetLine);

                    select sum(CostAmountReduced) from projBudgetReductionHistory
                        where projBudgetReductionHistory.ProjBudgetAllocationLineIdCost == 0
                            && projBudgetReductionHistory.ProjIdOrig == projBudgetLine.ProjId
                        exists join projPostTransView
                        where projPostTransView.TransId == projBudgetReductionHistory.ProjTransId
                            && projPostTransView.TransDate >= fiscalCalendarPeriod.StartDate
                            && projPostTransView.TransDate <= fiscalCalendarPeriod.EndDate;

                    projBudgetAllocationLine.ReductionAmount = projBudgetReductionHistory.CostAmountReduced;
                    projBudgetAllocationLine.insert();

                    if (projBudgetReductionHistory.CostAmountReduced)
                    {
                        update_recordset projBudgetReductionHistory
                        setting
                            ProjBudgetAllocationLineIdCost = projBudgetAllocationLine.RecId
                        where projBudgetReductionHistory.ProjBudgetAllocationLineIdCost == 0
                            && projBudgetReductionHistory.ProjIdOrig == projBudgetLine.ProjId
                        join projPostTransView
                            where projPostTransView.TransId == projBudgetReductionHistory.ProjTransId
                                && projPostTransView.TransDate >= fiscalCalendarPeriod.StartDate
                                && projPostTransView.TransDate <= fiscalCalendarPeriod.EndDate;
                    }
                }

                if (projBudgetRevLineAllocation)
                {
                    setRevisionAllocationAmount();
                    projBudgetRevLineAllocation.update();
                }
                else
                {
                    initProjBudgetRevisionAllocation();
                    setRevisionAllocationAmount();
                    projBudgetRevLineAllocation.insert();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ProjBudgetRevision  projBudgetRevision;
        #Define.RetryNum(5)

        projBudgetRevision = args.record();

        if (!projBudgetRevision.RecId)
        {
            throw error(Error::missingRecord("@SYS315536"));
        }

        try
        {
            ttsbegin;
            ProjBudgetRevisionManager::commitRevision(projBudgetRevision);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ttsabort;
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>revisionLineDeletionHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the revision line and corresponding proj budget line
    /// </summary>
    /// <param name="_projBudgetRevisionLine">
    /// RecId of proj budget revision line for which deletion need to occur
    /// </param>
    /// <param name="_projBudgetLine">
    /// RecId for proj budget line for which deletion need to occur
    /// </param>
    public static void revisionLineDeletionHelper(RecId _projBudgetRevisionLine, RecId _projBudgetLine)
    {
        ProjBudgetRevisionLine  projBudgetRevisionLine;
        ProjBudgetRevision      projBudgetRevision;
        ProjBudgetLine          projBudgetLine;

        ProjBudgetLineDetail    projBudgetLineDetail;
        ttsbegin;

        //find a projbudgetrevision line and it's corresponding
        //projbudgetline based on the recIds passed as argument and
        //having a revision that is not submitted nor approved (or no revision if none exists)
        //does the following:
        //1. reset projBudgetLineDetail.projBudgetRevisionLine pointer
        //2. subtract revision amount from projbudgetline's revision amount
        //3. delete revision line
        //4. delete budget line if of it's has uncommited/commited revision amount as well as
        //      well as it's original approved budget is zero. else update the revision amount
        select firstonly forupdate projBudgetRevisionLine
            join forupdate projBudgetLine
                where projBudgetRevisionLine.RecId                  == _projBudgetRevisionLine
                    && projBudgetRevisionLine.ProjBudgetLine        == _projBudgetLine
                    && projBudgetLine.RecId                         == projBudgetRevisionLine.ProjBudgetLine;

        if (projBudgetRevisionLine.RecId)
        {
            projBudgetRevision = ProjBudgetRevision::find(projBudgetRevisionLine.ProjBudgetRevision);

            if (!projBudgetRevision.RecId || (projBudgetRevision.RevisionWorkflowStatus != ProjBudgetRevisionWFStatus::Submitted
                                                && projBudgetRevision.RevisionWorkflowStatus != ProjBudgetRevisionWFStatus::Approved))
            {
                update_recordset projBudgetLineDetail
                    setting ProjBudgetRevisionLine = 0
                    where projBudgetLineDetail.ProjBudgetRevisionLine == projBudgetRevisionLine.RecId;

                projBudgetLine.UncommittedRevisions -= projBudgetRevisionLine.RevisionAmount;

                projBudgetRevisionLine.doDelete();

                if (projBudgetLine.UncommittedRevisions == 0
                    && projBudgetLine.CommittedRevisions == 0
                    && projBudgetLine.OriginalBudget == 0)
                {
                    projBudgetLine.delete();
                }
                else
                {
                    projBudgetLine.update();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRevisionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates the budget and revision lines.
    /// </summary>
    /// <param name="_action">
    /// A <c>ProjBudgetRevisionManagerActionType</c> enumeration value.
    /// </param>
    /// <param name="_revLines">
    /// The temporary table for cost revision lines.
    /// </param>
    public static void saveRevisionLines(ProjBudgetRevisionManagerActionType _action, TmpProjBudgetRevisionLine _revLines)
    {
        ProjBudgetRevisionLine      revLine;
        //ProjBudgetLine              budgetLine;
        TmpProjBudgetRevisionLine   revLines = _revLines;
        RefRecId                    projBudgetRevision = revLines.ProjBudgetRevision;

        ttsbegin;

        ProjBudgetRevisionManager::createBudgetLines(revLines);

        //insert any revision lines that do not already exist
        insert_recordset revLine(RevisionAmount, ProjBudgetLine, ProjBudgetRevision)
        select IncrementalChange, ProjBudgetLine, ProjBudgetRevision
        from revLines
        where revLines.Marked == NoYes::Yes && revLines.ProjBudgetRevisionLine == 0;

        //insert revision allocation lines for revision lines inserted above (does not insert revision allocation amount)
        ProjBudgetRevisionManager::allocateNewRevisionLines(revLines);

        //update existing revision lines
        if (_action == ProjBudgetRevisionManagerActionType::EditRevision)
        {
            update_recordset revLine
                setting RevisionAmount = revLines.IncrementalChange
            join revLines
            where revLines.Marked == NoYes::Yes && revLine.RecId == revLines.ProjBudgetRevisionLine;
        }

        ProjBudgetRevisionManager::updateRevisionAllocationLines(projBudgetRevision);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRevisionAllocationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the revision allocation lines.
    /// </summary>
    /// <param name="_revision">
    /// A record ID of the revision for which the allocation is made.
    /// </param>
    public static void updateRevisionAllocationLines(RecId _revision)
    {
        ProjBudgetRevisionLine      revisionLine;
        ProjBudgetRevLineAllocation revAllocationLine;
        ProjBudgetRevisionLine      revisionLineLocal;
        ProjBudgetRevLineAllocation revAllocationLineLocal;
        ProjBudgetRevLineAllocation totalAmountCurrentAllocation;

        int     counter;
        int64   totalPeriods;
        //recId   revisionLineId;

        AmountCur   revisionAllocation;

        ttsbegin;

        while select ProjBudgetRevisionLine, count(RecId)
        from revAllocationLineLocal
            group by ProjBudgetRevisionLine
                join ProjBudgetRevision, RevisionAmount, RecId from revisionLineLocal
                where revAllocationLineLocal.ProjBudgetRevisionLine == revisionLineLocal.RecId &&
                      revisionLineLocal.ProjBudgetRevision == _revision
        {
            totalPeriods = revAllocationLineLocal.RecId;
            counter = 0;
            Debug::assert(totalPeriods > 0);

            select RevisionAmount from revisionLine
                where revisionLine.RecId ==  revAllocationLineLocal.ProjBudgetRevisionLine;

            select sum(RevisionAllocationAmount) from totalAmountCurrentAllocation
                where totalAmountCurrentAllocation.ProjBudgetRevisionLine ==  revAllocationLineLocal.ProjBudgetRevisionLine;

            // Reallocate when total revision from allocation is not the same with the existing revision amount
            if (revisionLine.RevisionAmount != totalAmountCurrentAllocation.RevisionAllocationAmount)
            {
                while select forupdate revAllocationLine
                    where
                        revAllocationLine.ProjBudgetRevisionLine == revAllocationLineLocal.ProjBudgetRevisionLine

                {
                    counter++;

                    revisionAllocation = CurrencyExchangeHelper::amount(revisionLine.RevisionAmount / totalPeriods);

                    if (counter==totalPeriods)
                    {
                        revisionAllocation = CurrencyExchangeHelper::amount(revisionLine.RevisionAmount - revisionAllocation * (totalPeriods - 1));
                    }

                    revAllocationLine.RevisionAllocationAmount = revisionAllocation;
                    revAllocationLine.update();
                }
            }
        }

        ProjBudgetRevisionManager::updateUncommitedRevisions(_revision);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUncommitedRevisions</Name>
				<Source><![CDATA[
    public static void updateUncommitedRevisions(RefRecId _projBudgetRevisionRecId)
    {
        ProjBudgetRevision projBudgetRevision;
        ProjBudgetRevision projRevisionActive;
        ProjBudgetLine budgetLine;
        ProjBudgetRevisionLine revisionLine;
        ProjBudgetAllocationLine allocationLine;
        ProjBudgetRevLineAllocation revAllocationLine;

        AmountCur   totalUncommitedAllocationRevision;

        // Update UncommittedRevision for Budget Line and Budget Line Allocation, need to get all UNAPPROVED Revision Lines and get the sum of the Revision Amount
        // This will get the exact Uncommitted Revisions since

        select ProjBudget from projBudgetRevision where projBudgetRevision.RecId == _projBudgetRevisionRecId;

        while select forupdate UncommittedRevisions, RecId from budgetLine where budgetLine.ProjBudget == projBudgetRevision.ProjBudget
        {
            select sum(RevisionAmount) from revisionLine
                        where revisionLine.ProjBudgetLine == budgetLine.RecId
                    join RecId, RevisionWorkflowStatus from projRevisionActive
                        where projRevisionActive.RecId == revisionLine.ProjBudgetRevision &&
                              projRevisionActive.ProjBudget == projBudgetRevision.ProjBudget &&
                              (projRevisionActive.RevisionWorkflowStatus != ProjBudgetRevisionWFStatus::Approved &&
                               projRevisionActive.RevisionWorkflowStatus != ProjBudgetRevisionWFStatus::Cancelled);

            if (revisionLine.RevisionAmount != budgetLine.UncommittedRevisions)
            {
                budgetLine.UncommittedRevisions = revisionLine.RevisionAmount;
                budgetLine.doUpdate();
            }

            while select forupdate UncommittedRevisions,RecId from allocationLine where allocationLine.ProjBudgetLine == budgetLine.RecId
            {
                totalUncommitedAllocationRevision = 0;

                while select RevisionAllocationAmount,ProjBudgetRevisionLine from revAllocationLine where revAllocationLine.ProjBudgetAllocationLine == allocationLine.RecId
                {
                    revisionLine.clear();

                    select RecId from revisionLine where revisionLine.RecId == revAllocationLine.ProjBudgetRevisionLine
                            join RecId, RevisionWorkflowStatus from projRevisionActive
                                where projRevisionActive.RecId == revisionLine.ProjBudgetRevision &&
                                      projRevisionActive.ProjBudget == projBudgetRevision.ProjBudget &&
                                      projRevisionActive.RevisionWorkflowStatus != ProjBudgetRevisionWFStatus::Approved;

                    // if the related revision is Pending, then add the revision allocation amount
                    if (revisionLine.RecId != 0)
                    {
                        totalUncommitedAllocationRevision += revAllocationLine.RevisionAllocationAmount;
                    }
                }

                if (totalUncommitedAllocationRevision != allocationLine.UncommittedRevisions)
                {
                    allocationLine.UncommittedRevisions = totalUncommitedAllocationRevision;
                    allocationLine.doUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>