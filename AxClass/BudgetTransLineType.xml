<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransLineType</c> class provides the defaulting and validation functions of the
///    <c>BudgetTransactionLine</c> table.
/// </summary>
public class BudgetTransLineType
{
    boolean                 isCreate;
    boolean                 isInteractiveContext;

    BudgetTransactionHeader budgetTransactionHeader;
    BudgetTransactionLine   budgetTransactionLine;

    #BudgetFaults

    #define.default('default')
    #define.validate('validate')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInteractiveContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the consumer state is interactive.
    /// </summary>
    /// <returns>
    ///    true if the consumer state is interactive; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When this class is used in the context of an entity, the consumer state is not interactive. When this
    ///    class is used in the context of a client form, the consumer state is not interactive. It is sometimes
    ///    important to understand these contexts because logic that is used to provide default values can be
    ///    different.
    /// </remarks>
    public boolean isInteractiveContext()
    {
        return isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>AccountingCurrencyAmount</c> field of the
    ///    <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultAccountingCurrencyAmount()
    {
        // Default the accounting currency amount only for the service.
        if (!this.isInteractiveContext())
        {
            // The accounting currency amount is always calculated based on other values in the transaction.
            // Suppress error messages during the defaulting since validation will be done later in the processing.
            budgetTransactionLine.AccountingCurrencyAmount = budgetTransactionLine.calculateTransAmountToAccountingAmount(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>Date</c> field of the <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultDate()
    {
        if (!budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, Date))
            && isCreate)
        {
            this.initializeBudgetTransactionHeader();

            if (budgetTransactionHeader)
            {
                // Set the date on the budget line to the date on its budget header.
                budgetTransactionLine.Date = budgetTransactionHeader.Date;
            }
            else
            {
                budgetTransactionLine.Date = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default values for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier that corresponds with the field that is being to the default value.
    /// </param>
    public void defaultField(fieldId _fieldId)
    {
        str               fieldName;
        str               methodName;
        SysDictClass      sysDictClass;
        ExecutePermission permission;

        fieldName = fieldid2name(tablenum(BudgetTransactionLine), _fieldId);
        methodName = #default + fieldName;
        sysDictClass = new SysDictClass(classidget(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();

            // Grant permission to execute the DictClass.callObject method.
            permission.assert();
            sysDictClass.callObject(methodName, this);

            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIncludeInCashFlowForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>IncludeInCashFlowForecast</c> field in the <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultIncludeInCashFlowForecast()
    {
        if (!this.isInteractiveContext() && isCreate)
        {
            if (!budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, IncludeInCashFlowForecast)))
            {
                budgetTransactionLine.IncludeInCashFlowForecast = this.determineIncludeInCashFlowForecast();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>LineNumber</c> field in the <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultLineNumber()
    {
        LineNum lineNum;

        if (!this.isInteractiveContext() && isCreate)
        {
            if (!budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, LineNumber)))
            {
                budgetTransactionLine.LineNumber = this.determineDefaultLineNumber();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>Price</c> field of the <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultPrice()
    {
        if (!this.isInteractiveContext())
        {
            if (budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, Price)) &&
                !budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, TransactionCurrencyAmount)))
            {
                budgetTransactionLine.Price = budgetTransactionLine.editPrice(true, budgetTransactionLine.Price);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>Quantity</c> field of the <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultQuantity()
    {
        if (!this.isInteractiveContext())
        {
            if (budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, Quantity)) &&
               !budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, TransactionCurrencyAmount)))
            {
                budgetTransactionLine.Quantity = budgetTransactionLine.editQuantity(true, budgetTransactionLine.Quantity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default field values for a <c>BudgetTransactionLine</c> record.
    /// </summary>
    public void defaultRow()
    {
        this.defaultDate();
        this.defaultLineNumber();
        this.defaultWorkflowStatus();
        this.defaultPrice();
        this.defaultQuantity();
        this.defaultTransactionCurrency();
        this.defaultTransactionCurrencyAmount();
        this.defaultAccountingCurrencyAmount();
        this.defaultIncludeInCashFlowForecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>TransactionCurrency</c> field of the
    ///    <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultTransactionCurrency()
    {
        if (!budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, TransactionCurrency))
            && isCreate)
        {
            // Set the transaction currency on the line to the ledger's accounting currency.
            budgetTransactionLine.TransactionCurrency = Ledger::accountingCurrency();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>TransactionCurrencyAmount</c> field of the
    ///    <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void defaultTransactionCurrencyAmount()
    {
        // Default the transaction currency amount only for the service.
        if (!this.isInteractiveContext())
        {
            if (budgetTransactionLine.isFieldSet(fieldnum(BudgetTransactionLine, TransactionCurrencyAmount)))
            {
                // The amount was set; use the method on the table to set the value so that all the proper fields get updated.
                // Don't calculate the account currency amount at this point.
                budgetTransactionLine.setTransactionCurrencyAmount(true, budgetTransactionLine.TransactionCurrencyAmount, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>WorkflowStatus</c> field in the <c>BudgetTransactionLine</c>
    ///    table.
    /// </summary>
    protected void defaultWorkflowStatus()
    {
        BudgetTransactionWorkflowStatus headerWorkflowStatus;

        if (!this.isInteractiveContext())
        {
            if (budgetTransactionLine.RecId != 0)
            {
                headerWorkflowStatus = this.determineWorkflowStatus();

                if (headerWorkflowStatus == BudgetTransactionWorkflowStatus::None
                    || headerWorkflowStatus == BudgetTransactionWorkflowStatus::NotSubmitted)
                {
                    // The existing line must stay in sync with the updated header workflow status.
                    budgetTransactionLine.WorkflowStatus = headerWorkflowStatus;
                }
            }
            else
            {
                // This is a new line.  Set the workflow status to the header's value.
                budgetTransactionLine.WorkflowStatus = this.determineWorkflowStatus();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the line number value for the <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <returns>
    ///    The next line number of the <c>BudgetTransactionHeader</c> table for the
    ///    <c>BudgetTransactionLine</c> record. .
    /// </returns>
    protected LineNum determineDefaultLineNumber()
    {
        this.initializeBudgetTransactionHeader();

        return budgetTransactionHeader.maxLineNumber() + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIncludeInCashFlowForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the include in cash flow forecast value for the <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <returns>
    ///    The include in cash flow forecast value of the budget model for the <c>BudgetTransactionLine</c> record.
    /// </returns>
    protected NoYes determineIncludeInCashFlowForecast()
    {
        this.initializeBudgetTransactionHeader();

        return budgetTransactionHeader.isBudgetModelIncludedInCashFlowForecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>BudgetTransactionWorkflowStatus</c> enumeration value for the
    ///    <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <returns>
    ///    The <c>BudgetTransactionWorkflowStatus</c> enumeration value for the <c>BudgetTransactionHeader</c>
    ///    record of this <c>BudgetTransactionLine</c> record.
    /// </returns>
    protected BudgetTransactionWorkflowStatus determineWorkflowStatus()
    {
        this.initializeBudgetTransactionHeader();

        return budgetTransactionHeader.WorkflowStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetTransactionHeader</c> record for the current <c>BudgetTransactionLine</c> record.
    /// </summary>
    protected void initializeBudgetTransactionHeader()
    {
        if (!budgetTransactionHeader)
        {
            budgetTransactionHeader = budgetTransactionLine.getBudgetTransactionHeader();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BudgetTransLineType</c> class.
    /// </summary>
    /// <param name="_axBudgetTransactionLine">
    /// An instance of the <c>AxBudgetTransactionLine</c> class that represents the data that is
    /// defaulted and validated.
    /// </param>
    /// <param name="_isInteractiveContext">
    /// A Boolean value that indicates the caller context.
    /// </param>
    /// <param name="_isCreate">
    /// A Boolean value that indicates if a transaction is being created or updated.
    /// </param>
    protected void new(BudgetTransactionLine _line, boolean _isInteractiveContext, boolean _isCreate)
    {
        budgetTransactionLine = _line;

        isInteractiveContext = _isInteractiveContext;

        isCreate = _isCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BudgetType</c> field of the <c>BudgetTransactionLine</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>BudgetType</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetType()
    {
        boolean isValid = true;

        this.initializeBudgetTransactionHeader();

        if (budgetTransactionLine.BudgetType == BudgetType::Revenue &&
            (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Encumbrance ||
             budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::PreEncumbrance))
        {
            checkFailed("@SYS318774");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the value of the specified field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldId)
    {
        str fieldName;
        str methodName;
        SysDictClass sysDictClass;
        boolean isValid = true;
        ExecutePermission permission;

        fieldName = fieldid2name(tablenum(BudgetTransactionLine), _fieldId);
        methodName = #validate + fieldName;

        sysDictClass = new SysDictClass(classidget(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();

            // Grant permission to execute the DictClass.callObject method.
            permission.assert();
            isValid = sysDictClass.callObject(methodName, this);

            CodeAccessPermission::revertAssert();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>LedgerDimension</c> field of the <c>BudgetTransactionLine</c> table is
    ///    valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>LedgerDimension</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateLedgerDimension()
    {
        boolean isValid = true;

        if (!this.isInteractiveContext() && budgetTransactionLine.LedgerDimension)
        {
            // Service validation only.  The budget entry control will validate this in the AX form scenario.
            isValid = BudgetTransactionManager::validateLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.Date);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>TaxGroup</c> field of the <c>BudgetTransactionLine</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>TaxGroup</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateTaxGroup()
    {
        boolean isValid = true;

        if (budgetTransactionLine.TaxGroup && !TaxGroupHeading::exist(budgetTransactionLine.TaxGroup))
        {
            // "Sales tax group %1 does not exist."
            isValid = AifFault::checkFailedLogFault(strfmt("@SYS21970", budgetTransactionLine.TaxGroup), #SalesTaxGroupDoesNotExist);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>TransactionCurrency</c> field of the <c>BudgetTransactionLine</c> table
    ///    is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>TransactionCurrency</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateTransactionCurrency()
    {
        return BudgetTransactionManager::validateCurrency(budgetTransactionLine.TransactionCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetTransLineType</c> class.
    /// </summary>
    /// <param name="_axBudgetTransactionLine">
    ///    An instance of the <c>AxBudgetTransactionLine</c> class that represents the data that is being
    ///    validated and changed to the default value.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetTransLineType</c> class.
    /// </returns>
    public static BudgetTransLineType construct(BudgetTransactionLine _line)
    {
        boolean isCreate = (_line.RecId == 0);

        boolean isInteractiveContext = FormDataUtil::isFormDataSource(_line);

        return new BudgetTransLineType(_line, isInteractiveContext, isCreate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>