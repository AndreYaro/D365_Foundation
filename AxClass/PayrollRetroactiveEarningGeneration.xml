<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollRetroactiveEarningGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollRetroactiveEarningGeneration</c> class is a RunBaseBatch class which provides UI and function for retroactive earning processing.
/// </summary>
class PayrollRetroactiveEarningGeneration extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase           dialog;
    QueryRun                queryRun;
    QueryRun                queryRunEarningLine;

    PayrollPayCycleRecId    payCycleRecId;
    date                    fromRetroDate;
    date                    toRetroDate;
    date                    fromDate;
    date                    toDate;
    date                    accountingDate;
    int                     workerCount, earningLinesCreatedCount;

    BatchHeader             batchHeader;
    PayrollParameters       parameters;

    RunBaseBatch            task;

    FormReferenceGroupControl           payCycleReferenceControl;
    FormBuildReferenceGroupControl      payCycleBuildReferenceControl;
    FormDateControl                     fromRetroDateControl;
    FormBuildDateControl                fromRetroDateBuildControl;
    FormDateControl                     toRetroDateControl;
    FormBuildDateControl                toRetroDateBuildControl;
    FormDateControl                     accountingDateControl;
    FormBuildDateControl                accountingDateBuildControl;

    #DEFINE.PayCycleControl('PayCycleControl')
    #DEFINE.FromRetroDateControl('FromRetroDateControl')
    #DEFINE.ToRetroDateControl('ToRetroDateControl')
    #DEFINE.AccountingDateControl('AccountingDateControl')

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        payCycleRecId,
        fromRetroDate,
        toRetroDate,
        accountingDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Payroll:GenerateRetroactiveEarnings";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the pay cycle and dates controls in the dialog.
    /// </summary>
    /// <returns>
    /// The instance of a DialogRunbase class with the customized controls.
    /// </returns>
    public Object dialog()
    {
        dialog = super();

        dialog.caption("@Payroll:GenerateRetroactiveEarnings");

        payCycleBuildReferenceControl = dialog.curFormBuildGroup().addControl(FormControlType::ReferenceGroup, #PayCycleControl);
        payCycleBuildReferenceControl.extendedDataType(extendedTypeNum(PayrollPayCycleRecId));
        payCycleBuildReferenceControl.mandatory(NoYes::Yes);
        payCycleBuildReferenceControl.helpText("@Payroll:ThePayCycleToGenerateRetroactiveEarningsFor");

        fromRetroDateBuildControl = dialog.curFormBuildGroup().addControl(FormControlType::Date, #FromRetroDateControl);
        fromRetroDateBuildControl.mandatory(NoYes::Yes);
        fromRetroDateBuildControl.allowEdit(true);
        fromRetroDateBuildControl.extendedDataType(extendedTypeNum(TransDate));
        fromRetroDateBuildControl.label("@Payroll:StartDate");
        fromRetroDateBuildControl.helpText("@Payroll:ThisDateDeterminesWhichEarningStatementLinesWillBeEvaluatedF");

        toRetroDateBuildControl = dialog.curFormBuildGroup().addControl(FormControlType::Date, #ToRetroDateControl);
        toRetroDateBuildControl.mandatory(NoYes::Yes);
        toRetroDateBuildControl.allowEdit(true);
        toRetroDateBuildControl.extendedDataType(extendedTypeNum(TransDate));
        toRetroDateBuildControl.label("@Payroll:EndDate");
        toRetroDateBuildControl.helpText("@Payroll:ThisDateDeterminesWhichEarningStatementLinesWillBeEvaluatedF1");

        accountingDateBuildControl = dialog.curFormBuildGroup().addControl(FormControlType::Date, #AccountingDateControl);
        accountingDateBuildControl.mandatory(NoYes::Yes);
        accountingDateBuildControl.allowEdit(true);
        accountingDateBuildControl.extendedDataType(extendedTypeNum(AccountingDate));
        accountingDateBuildControl.label("@SYS4000459");
        accountingDateBuildControl.helpText("@Payroll:TheDateThatWillBeAssignedToTheRetroactiveEarningLinesThatAre");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the input from the dialog which contains user selection for the process.
    /// </summary>
    /// <param name="_dialog">
    /// The instance of the dialog which contains user input for the process.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
        payCycleReferenceControl = _dialog.dialogForm().formRun().control(payCycleBuildReferenceControl.id());
        fromRetroDateControl = _dialog.dialogForm().formRun().control(fromRetroDateBuildControl.id());
        toRetroDateControl = _dialog.dialogForm().formRun().control(toRetroDateBuildControl.id());
        accountingDateControl = _dialog.dialogForm().formRun().control(accountingDateBuildControl.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the pay cycle and dates from the dialog and modify the query according to the user selections.
    /// </summary>
    /// <returns>
    /// Return true if the operation succeeds.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        payCycleRecId   = payCycleReferenceControl.value();
        fromRetroDate = fromRetroDateControl.dateValue();
        toRetroDate = toRetroDateControl.dateValue();
        accountingDate = accountingDateControl.dateValue();

        this.setRange();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the <c>PayrollRetroactiveEarningGenerationTask</c> class for earning processing.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// The list of earning lines with worker, position, pay period for the <c>PayrollRetroactiveEarningGenerationTask</c> class to generate retroactive earnings.
    /// </param>
    /// <returns>
    /// The <c>PayrollRetroactiveEarningGenerationTask</c> class.
    /// </returns>
    public RunBaseBatch initializeTask(container _batchTaskGroupList)
    {
        PayrollRetroactiveEarningGenerationTask retroEarningGenerationTask;

        retroEarningGenerationTask = PayrollRetroactiveEarningGenerationTask::construct();
        retroEarningGenerationTask.parmBatchTaskGroupList(_batchTaskGroupList);
        retroEarningGenerationTask.parmFromRetroDate(fromRetroDate);
        retroEarningGenerationTask.parmToRetroDate(toRetroDate);
        retroEarningGenerationTask.parmAccountingDate(accountingDate);

        return retroEarningGenerationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the QueryRun object using PayrollRetroEarningGenerationQuery Query.
    /// </summary>
    void initQuery()
    {
        queryRun = new QueryRun(queryStr(PayrollRetroactiveEarningGenerationQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the actual retroactive earning generation process for the earning lines
    /// which are qualified for retroactive earnings for the selected pay cycle within the given time frame.
    /// Other conditions in the query selection also apply to the selection of the earning lines.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        #PayrollConstants
        container                               batchTaskGroupList, batchTaskItem;
        Set                                     workerSet;
        int                                     taskGroupingCount,
                                                processedEarningLineCount;
        PayrollRetroactiveEarningGenerationView retroEarningLineView;

        parameters = PayrollParameters::find();

        // Determine how many statements to process within a single task/batch
        if (parameters.PaymentTaskGroupingCount)
        {
            taskGroupingCount = parameters.PaymentTaskGroupingCount;
        }
        else
        {
            // Default to a single worker per batch job task
            taskGroupingCount = 1;
        }

        queryRunEarningLine = new QueryRun(queryRun.query());
        this.setRangeFromDialog();

        batchTaskGroupList = conNull();
        processedEarningLineCount = 0;
        workerCount = 0;
        earningLinesCreatedCount = 0;
        workerSet = new Set(Types::Int64);

        while (queryRunEarningLine.next())
        {
            retroEarningLineView = queryRunEarningLine.get(tableNum(PayrollRetroactiveEarningGenerationView));

            if (retroEarningLineView.PaymentStatus == PayrollPaymentProcessingStatus::Processed && retroEarningLineView.GenerationSource != PayrollGenerationSource::Salary)
            {
                batchTaskItem = conNull();
                batchTaskItem += retroEarningLineView.EarningLineRecId;
                batchTaskItem += retroEarningLineView.Worker;
                batchTaskItem += retroEarningLineView.Position;
                batchTaskItem += retroEarningLineView.PayPeriod;

                batchTaskGroupList += [batchTaskItem];
                workerSet.add(retroEarningLineView.Worker);
                processedEarningLineCount++;
            }

            if (retroEarningLineView.GenerationSource == PayrollGenerationSource::Salary)
            {
                batchTaskItem = conNull();
                batchTaskItem += 0;
                batchTaskItem += retroEarningLineView.Worker;
                batchTaskItem += retroEarningLineView.Position;
                batchTaskItem += retroEarningLineView.PayPeriod;

                batchTaskGroupList += [batchTaskItem];
                workerSet.add(retroEarningLineView.Worker);
                processedEarningLineCount++;
            }

            if (this.isInBatch() && (workerSet.elements() == taskGroupingCount) && conLen(batchTaskGroupList) > 0)
            {
                // If the threshold for grouping payments into a task has been reached, schedule the task.
                this.runScheduleJob(batchTaskGroupList);

                // Reinitialize the container for the next group of payments to schedule
                batchTaskGroupList = conNull();
                workerSet = new Set(Types::Int64);
            }
        }

        // run the rest of the jobs
        if (processedEarningLineCount != 0 && conLen(batchTaskGroupList) > 0)
        {
            this.runScheduleJob(batchTaskGroupList);
        }

        //show this message when not calling from Worker/Position form and there is no worker in the query list
        if (processedEarningLineCount == 0)
        {
            // "The selection criteria that you entered did not result in the %1"
            info("@Payroll:TheSelectionCriteriaDidNotReturnAnyResults");
        }

        if (!this.isInBatch() && processedEarningLineCount != 0)
        {
            //Show the number of earning lines are processed for retroactive pay by the process
            info (strFmt("@Payroll:Num_1WorkersReceivedRetroactiveEarnings", workerCount));
            info (strFmt("@Payroll:Num_1EarningLinesWereCreatedOrUpdated", earningLinesCreatedCount));

            // Only give the process is complete message if the process isn't running as a batch and there are workers in the list that have been processed
            info("@Payroll:TheProcessIsComplete");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the document process for running in the context of a batch job or running without a batch.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// A container listing the earning lines and workers for the retroactive earning process.
    /// </param>
    /// <remarks>
    /// If not running under a batch job the process runs immediately.
    /// </remarks>
    public void runScheduleJob(container _batchTaskGroupList)
    {
        PayrollRetroactiveEarningGenerationTask retroEarningGenerationTask;
        HcmWorkerRecId  firstWorkerRecId,
                        lastWorkerRecId;
        str             taskWorkerRange;
        container       contentContainer;

        task = this.initializeTask(_batchTaskGroupList);

        if (this.isInBatch())
        {
            // Get the first (and possibly only) worker from the container
            contentContainer = conpeek(_batchTaskGroupList, 1);
            firstWorkerRecId = conPeek(contentContainer, 2);
            taskWorkerRange = HcmWorker::find(firstWorkerRecId).PersonnelNumber;

            // Determine the proper task has more than 1 earning lines to process
            if (conLen(_batchTaskGroupList) > 1)
            {
                // Get the last worker in the _batchTaskGroupList
                contentContainer = conPeek(_batchTaskGroupList, conLen(_batchTaskGroupList));
                lastWorkerRecId = conPeek(contentContainer, 2);
                if (lastWorkerRecId != firstWorkerRecId)
                {
                    taskWorkerRange = strFmt("@Payroll:Num_1To2", taskWorkerRange, HcmWorker::find(lastWorkerRecId).PersonnelNumber);
                }
            }

            // Assign the description for the task
            task.batchInfo().parmCaption(strFmt("@Payroll:Worker1", taskWorkerRange));

            // Schedule for later run
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            // Add the subtask to the batch job
            batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);
            batchHeader.save();
        }
        else
        {
            task.runOperation();

            // Cast the task to an earnings-specific version so that the count can be determined
            retroEarningGenerationTask = task as PayrollRetroactiveEarningGenerationTask;

            workerCount += retroEarningGenerationTask.getWorkerCount();
            earningLinesCreatedCount += retroEarningGenerationTask.getEarningLineCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify the JoinType in the query on the <c>HcmPositionUnionAgreement</c> table to OuterJoin when no union agreement is specified since it is not mandatory
    /// Modify the JoinType in the query on the <c>PayrollEarningCodeGroupCode</c> table to OuterJoin when no union agreement is specified since it is not mandatory
    /// </summary>
    void setRange()
    {
        QueryBuildDataSource    qbdsPositionUnionAgreement, qbdsEarningCodeGroupCode;

        qbdsPositionUnionAgreement = queryRun.query().dataSourceTable(tableNum(HcmPositionUnionAgreement));
        if (qbdsPositionUnionAgreement.findRange(fieldNum(HcmPositionUnionAgreement, UnionAgreement)).value() == '')
        {
            qbdsPositionUnionAgreement.joinMode(JoinMode::OuterJoin);
        }

        qbdsEarningCodeGroupCode = queryRun.query().dataSourceTable(tableNum(PayrollEarningCodeGroupCode));
        if (qbdsEarningCodeGroupCode.findRange(fieldNum(PayrollEarningCodeGroupCode, EarningCodeGroup)).value() == '')
        {
            qbdsEarningCodeGroupCode.joinMode(JoinMode::OuterJoin);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the pay cycle and paid by legal entity restriction to the <c>PayrollPositionDetail</c> table in the query.
    /// </summary>
    private void setRangeFromDialog()
    {
        QueryBuildDataSource    qbdsRetroGenerationView;
        PayrollPayPeriod        payPeriod;

        //
        // The range is adjusted as pay periods start date and end date according to the range the user specified
        // to include the salary lines with earning date set to the ends of the pay period.
        // The user specified range is used in the retroactive earning calculation
        //
        payPeriod = PayrollPayPeriod::findByPayCycleAndDateRange(payCycleRecId, fromRetroDate);
        fromDate = payPeriod.PeriodStartDate;
        payPeriod = PayrollPayPeriod::findByPayCycleAndDateRange(payCycleRecId, toRetroDate);
        toDate = payPeriod.PeriodEndDate;

        qbdsRetroGenerationView = queryRunEarningLine.query().dataSourceTable(tableNum(PayrollRetroactiveEarningGenerationView));
        qbdsRetroGenerationView.addRange(fieldNum(PayrollRetroactiveEarningGenerationView, PayCycle)).value(queryValue(payCycleRecId));
        qbdsRetroGenerationView.addRange(fieldNum(PayrollRetroactiveEarningGenerationView, EarningDate)).value(QueryValue(fromDate) + '..' + queryValue(toDate));

        qbdsRetroGenerationView.addOrderByField(fieldNum(PayrollRetroactiveEarningGenerationView, Worker));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;
        PayrollPayCycleRecId payCycleRecIdLast;
        date    fromRetroDateLast;
        date    toRetroDateLast;
        date    accountingDateLast;

        #LOCALMACRO.SaveLastList
            payCycleRecIdLast,
            fromRetroDateLast,
            toRetroDateLast,
            accountingDateLast
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, queryCon] = packedClass;
                }
                else
                {
                    [version, #CurrentList, queryCon] = packedClass;
                }

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate both the pay cycle and dates controls in the dialog has value before the processing starts.
    /// </summary>
    /// <param name="calledFrom">
    /// The object called the validate method.
    /// </param>
    /// <returns>
    /// Return true if the required parameters of dialog are set.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean                     ret;

        ret = super(calledFrom);
        if (!payCycleRecId)
        {
            ret = checkFailed(strFmt("@Payroll:The1FieldCanTBeBlank", "@Payroll:PayCycle1"));
        }

        if (!fromRetroDate)
        {
            ret = checkFailed(strFmt("@Payroll:The1FieldCanTBeBlank", "@Payroll:StartDate"));
        }

        if (!toRetroDate)
        {
            ret = checkFailed(strFmt("@Payroll:The1FieldCanTBeBlank", "@Payroll:EndDate"));
        }

        if (fromRetroDate > toRetroDate)
        {
            ret = checkFailed("@Payroll:TheEndDateMustBeEqualToOrAfterTheStartDate");
        }

        if (!accountingDate)
        {
            ret = checkFailed(strFmt("@Payroll:The1FieldCanTBeBlank", "@SYS4000459"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of the process class on server.
    /// </summary>
    /// <returns>
    /// An instance of the process class on server.
    /// </returns>
    public static PayrollRetroactiveEarningGeneration construct()
    {
        return new PayrollRetroactiveEarningGeneration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PayrollRetroactiveEarningGeneration retroEarningGeneration;

        retroEarningGeneration = PayrollRetroactiveEarningGeneration::construct();

        if (retroEarningGeneration.prompt())
        {
            retroEarningGeneration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>