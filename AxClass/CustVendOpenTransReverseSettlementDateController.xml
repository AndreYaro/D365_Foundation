<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOpenTransReverseSettlementDateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendOpenTransReverseSettlementDateController
{
    private CustVendOpenTransReverseSettlementDateContract contract;
    private TransDate toDateInitialValue = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    private QueryBuildRange qbrSettlementDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    internal static CustVendOpenTransReverseSettlementDateController newFromContract(CustVendOpenTransReverseSettlementDateContract _contract)
    {
        CustVendOpenTransReverseSettlementDateController controller = new CustVendOpenTransReverseSettlementDateController();

        controller.contract = _contract;

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    internal void init()
    {
        contract.parmSettlementDateRangeGroup().visible(true);
        contract.parmFromDate().visible(true);
        contract.parmToDate().visible(true);
        contract.parmSettlementDate().visible(true);

        contract.parmSettlementDateRangeGroup().enabled(true);
        contract.parmFromDate().enabled(true);
        contract.parmToDate().enabled(true);
        contract.parmSettlementDate().enabled(true);

        contract.parmFromDate().dateValue(dateMthFwd(toDateInitialValue, -2));
        contract.parmToDate().dateValue(toDateInitialValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRange</Name>
				<Source><![CDATA[
    internal void applyRange()
    {
        TransDate toDateRangeValue = contract.parmToDate().dateValue();
        if (contract.parmToDate().dateValue() == dateNull())
        {
            toDateRangeValue = toDateInitialValue;
        }

        qbrSettlementDate.value(SysQueryRangeUtil::dateRange(DateTimeUtil::date(contract.parmFromDate().dateValue()), DateTimeUtil::date(toDateRangeValue)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
    internal void addRange()
    {
        qbrSettlementDate = contract.parmCustVendSettlementDataSource().addRange(contract.parmCustVendSettlementTransDateFieldNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSortField</Name>
				<Source><![CDATA[
    internal void addSortField()
    {
        contract.parmCustVendSettlementDataSource().addSortField(contract.parmCustVendSettlementTransDateFieldNum(), SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromDate</Name>
				<Source><![CDATA[
    internal boolean validateFromDate(boolean _isValid)
    {
        boolean isValid = _isValid;
  
        if (contract.parmToDate().dateValue() != DateTimeUtil::date(DateTimeUtil::minValue())
            && contract.parmFromDate().dateValue() > contract.parmToDate().dateValue())
        {
            isValid = checkFailed(strFmt("@SYS107147", contract.parmFromDate().dateValue()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFromDate</Name>
				<Source><![CDATA[
    internal boolean modifiedFromDate(boolean _isModified)
    {
        boolean isModified = _isModified;

        contract.parmFromDate().enabled(false);
        contract.parmToDate().enabled(false);
        this.applyRange();

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToDate</Name>
				<Source><![CDATA[
    internal boolean validateToDate(boolean _isValid)
    {
        boolean isValid = _isValid;

        if (contract.parmToDate().dateValue() != DateTimeUtil::date(DateTimeUtil::minValue())
            && contract.parmToDate().dateValue() < contract.parmFromDate().dateValue())
        {
            isValid = checkFailed(strFmt("@CashManagement:InvalidDateRange", contract.parmToDate().dateValue()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedToDate</Name>
				<Source><![CDATA[
    internal boolean modifiedToDate(boolean _isModified)
    {
        boolean isModified = _isModified;

        contract.parmFromDate().enabled(false);
        contract.parmToDate().enabled(false);
        this.applyRange();

        return isModified;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>