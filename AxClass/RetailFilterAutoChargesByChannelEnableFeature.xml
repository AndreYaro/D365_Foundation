<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFilterAutoChargesByChannelEnableFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailFilterAutoChargesByChannelEnableFeature</c> class defines the filtering auto charges by channel feature.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
internal final class RetailFilterAutoChargesByChannelEnableFeature implements IFeatureMetadata
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private static RetailFilterAutoChargesByChannelEnableFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new RetailFilterAutoChargesByChannelEnableFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>RetailFilterAutoChargesByChannelEnableFeature</c> instance.</returns>
    [Hookable(false)]
    public static RetailFilterAutoChargesByChannelEnableFeature instance()
    {
        return RetailFilterAutoChargesByChannelEnableFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@RetailAutoCharge:EnableFilterAutoChargesByChannelLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@RetailAutoCharge:EnableFilterAutoChargesByChannelHelpText");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://docs.microsoft.com/en-us/dynamics365/commerce/auto-charges-by-channel';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        RetailFilterAutoChargesByChannelEnableFeature::updateMarkupAutoTableToTargetValueIfNotExist(
            TableGroupAll::All,
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        RetailFilterAutoChargesByChannelEnableFeature::updateMarkupAutoTableToTargetValueIfNotExist(
            TableGroupAll::Table,
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureManagementState_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates MarkupAutoTable when this feature is turned on or off.
    /// </summary>
    /// <param name = "_sender">The <c>FeatureManagementState</c> record to be written.</param>
    /// <param name = "_args">The event arguments.</param>
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::Updating)]
    public static void FeatureManagementState_onUpdating(Common _sender, DataEventArgs _args)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == Dynamics.AX.Application.FeatureStateProvider::featureName(RetailFilterAutoChargesByChannelEnableFeature::instance()))
        {
            // On enabling, make auto charges apply to all channels by default.
            // On disabling, clear all auto charge configurations related to this feature to return to the backwards compatibility state.
            RetailChannelRelation newRetailChannelRelation;
            RetailChannelCode newRetailChannelCode;

            if (featureManagementState.IsEnabled)
            {
                newRetailChannelRelation = '';
                newRetailChannelCode = TableGroupAll::All;
            }
            else
            {
                newRetailChannelRelation = '';
                newRetailChannelCode = TableGroupAll::Table;
            }

            RetailFilterAutoChargesByChannelEnableFeature::updateMarkupAutoTableToTargetValueIfNotExist(
                newRetailChannelCode,
                newRetailChannelRelation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupAutoTableToTargetValueIfNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update MarkupAutoTable to target channel code and channel relation if it does not exist already (to avoid duplicate key error).
    /// </summary>
    /// <param name = "_targetRetailChannelCode">Value of RetailChannelCode field current MarkupAutoTable record will be updated to.</param>
    /// <param name = "_targetRetailChannelRelation">Value of RetailChannelRelation field current MarkupAutoTable record will be updated to.</param>
    private static void updateMarkupAutoTableToTargetValueIfNotExist(
        RetailChannelCode _targetRetailChannelCode,
        RetailChannelRelation _targetRetailChannelRelation)
    {
        ttsbegin;

        MarkupAutoTable markupAutoTable;

        if (RetailChargeUpdateMarkupAutoTableForVendFlight::instance().isEnabled())
        {
            while select forupdate crosscompany markupAutoTable
            {
                RetailFilterAutoChargesByChannelEnableFeature::updateMarkupAutoTableToTargetValue(
                    markupAutoTable,
                    _targetRetailChannelCode,
                    _targetRetailChannelRelation);
            }
        }
        else
        {
            while select forupdate crosscompany markupAutoTable
                where markupAutoTable.ModuleType != MarkupModuleType::Vend
            {
                RetailFilterAutoChargesByChannelEnableFeature::updateMarkupAutoTableToTargetValue(
                    markupAutoTable,
                    _targetRetailChannelCode,
                    _targetRetailChannelRelation);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupAutoTableToTargetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update MarkupAutoTable to target channel code and channel relation.
    /// </summary>
    /// <param name = "_markupAutoTableToUpdate">MarkupAutoTable record to be updated.</param>
    /// <param name = "_targetRetailChannelCode">Value of RetailChannelCode field current MarkupAutoTable record will be updated to.</param>
    /// <param name = "_targetRetailChannelRelation">Value of RetailChannelRelation field current MarkupAutoTable record will be updated to.</param>
    private static void updateMarkupAutoTableToTargetValue(
        MarkupAutoTable _markupAutoTableToUpdate,
        RetailChannelCode _targetRetailChannelCode,
        RetailChannelRelation _targetRetailChannelRelation)
    {
        changecompany(_markupAutoTableToUpdate.DataAreaId)
        {
            if (!RetailFilterAutoChargesByChannelEnableFeature::existsTargetMarkupAutoTable(
                _markupAutoTableToUpdate,
                _targetRetailChannelCode,
                _targetRetailChannelRelation))
            {
                _markupAutoTableToUpdate.RetailChannelRelation = _targetRetailChannelRelation;
                _markupAutoTableToUpdate.RetailChannelCode = _targetRetailChannelCode;
                _markupAutoTableToUpdate.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTargetMarkupAutoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether there already exists a MarkupAutoTable record which is the same as current MarkupAutoTable record will be updated to.
    /// </summary>
    /// <param name = "_markupAutoTable">current MarkupAutoTable record.</param>
    /// <param name = "_targetRetailChannelCode">Value of RetailChannelCode field current MarkupAutoTable record will be updated to.</param>
    /// <param name = "_targetRetailChannelRelation">Value of RetailChannelRelation field current MarkupAutoTable record will be updated to.</param>
    /// <returns>True if there already exists a MarkupAutoTable record which is the same as current MarkupAutoTable record will be updated to; otherwise, false.</returns>
    private static boolean existsTargetMarkupAutoTable(
        MarkupAutoTable _markupAutoTable,
        RetailChannelCode _targetRetailChannelCode,
        RetailChannelRelation _targetRetailChannelRelation)
    {
        MarkupAutoTable markupAutoTableTarget;

        select firstonly RecId from markupAutoTableTarget
            index hint MarkupIdx
            where markupAutoTableTarget.ModuleCategory == _markupAutoTable.ModuleCategory
                    && markupAutoTableTarget.ModuleType == _markupAutoTable.ModuleType
                    && markupAutoTableTarget.AccountCode == _markupAutoTable.AccountCode
                    && markupAutoTableTarget.AccountRelation == _markupAutoTable.AccountRelation
                    && markupAutoTableTarget.ItemCode == _markupAutoTable.ItemCode
                    && markupAutoTableTarget.ItemRelation == _markupAutoTable.ItemRelation
                    && markupAutoTableTarget.MarkupReturn == _markupAutoTable.MarkupReturn
                    && markupAutoTableTarget.DlvModeCode == _markupAutoTable.DlvModeCode
                    && markupAutoTableTarget.DlvModeRelation == _markupAutoTable.DlvModeRelation
                    && markupAutoTableTarget.RetailChannelCode == _targetRetailChannelCode
                    && markupAutoTableTarget.RetailChannelRelation == _targetRetailChannelRelation
                    && markupAutoTableTarget.ReturnRelation == _markupAutoTable.ReturnRelation;

        return markupAutoTableTarget.RecId > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>