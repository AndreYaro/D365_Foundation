<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationInvoicePredictionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>>CustAutomationInvoicePredictionBuilder</c> builds the list of invoices to generate payment prediction activities.
/// </summary>
internal final class CustAutomationInvoicePredictionBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populatePredictionInvoices</Name>
				<Source><![CDATA[
    internal static void populatePredictionInvoices(CustAutomationContract _contract, CustAutomationAssignmentTmp _custAssignment)
    {
        CustAutomationInvoicePredictionBuilder builder = new CustAutomationInvoicePredictionBuilder();
        builder.buildPredictionInvoices(_contract, _custAssignment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPredictionInvoices</Name>
				<Source><![CDATA[
    private void buildPredictionInvoices(CustAutomationContract _contract, CustAutomationAssignmentTmp _custAssignment)
    {
        CustAutomationInvoice invoiceInsert;
        CustAutomationInvoice invoiceLocal;
        CustTrans custTrans;
        CustTransOpen transOpen;
        PayPredPredictionResult predictionResult;
        CustAutomationStrategyName strategyName = _contract.parmCustAutomationStrategy().StrategyName;
        ProcessExecutionId executionId = _contract.parmExecutionId();
        NoYes prediction = NoYes::Yes;
        NoYes predunning = NoYes::No;
        CustAutomationRecipient recipient = CustAutomationRecipient::None;
        CustAutomationActionType actionType = CustAutomationActionType::Activity;
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        RefRecId processScheduleOccurrenceId = _contract.parmProcessScheduleOccurrenceRecId();
        const LabelString veryLate = "@CustAutomation:CustAutomationMultipleVeryLate";
        const LabelString late = "@CustAutomation:CustAutomationMultipleLate";
        
        CustAutomationParameters param;
        select * from param;
        real lateScore = this.adjustBenchmark(param.PredictionLateBenchmark);
        real veryLateScore = this.adjustBenchmark(param.PredictionVeryLateBenchmark);
        CustAutomationStrategyBusinessDocument businessDocumentLate = param.PredictionLateBusinessDocument;
        CustAutomationStrategyBusinessDocument businessDocumenVeryLate = param.PredictionVeryLateBusinessDocument;

        // Insert invoices predicted very late.
        // The bucket scores in PayPredPredictionResult need to be multiplied by 100 to convert to percentage values.
        insert_recordset invoiceInsert (AccountNum, Invoice, StrategyName, ExecutionId, Predunning, ExecutionDate, ProcessScheduleOccurrenceId, ActionType, BusinessDocument, Prediction, Recipient)
            select
                AccountNum,
                veryLate,
                strategyName,
                executionId,
                predunning,
                currentDate,
                processScheduleOccurrenceId,
                actionType,
                businessDocumenVeryLate,
                prediction,
                recipient
            from custTrans group by AccountNum
                where custTrans.CustAutomationPredictionSent == NoYes::No
                    && custTrans.DueDate > currentDate
            exists join transOpen
                where custTrans.RecId == transOpen.RefRecId
                    && custTrans.AccountNum == transOpen.AccountNum
            exists join predictionResult
                where predictionResult.SourceRecId == transOpen.RecId
                    && predictionResult.BucketLate2Score * 100 >= veryLateScore
            exists join _custAssignment
                where custTrans.AccountNum == _custAssignment.AccountNum;

        // Insert invoices predicted late.
        // The bucket scores in PayPredPredictionResult need to be multiplied by 100 to convert to percentage values.
        insert_recordset invoiceInsert (AccountNum, Invoice, StrategyName, ExecutionId, Predunning, ExecutionDate, ProcessScheduleOccurrenceId, ActionType, BusinessDocument, Prediction, Recipient)
            select
                AccountNum,
                late,
                strategyName,
                executionId,
                predunning,
                currentDate,
                processScheduleOccurrenceId,
                actionType,
                businessDocumentLate,
                prediction,
                recipient
            from custTrans group by AccountNum
                where custTrans.CustAutomationPredictionSent == NoYes::No
                    && custTrans.DueDate > currentDate
            exists join transOpen
                where custTrans.RecId == transOpen.RefRecId
                    && custTrans.AccountNum == transOpen.AccountNum
            exists join predictionResult
                where predictionResult.SourceRecId == transOpen.RecId
                    && predictionResult.BucketLate2Score * 100 < veryLateScore
                    && (predictionResult.BucketLate1Score * 100) + (predictionResult.BucketLate2Score * 100) >= lateScore
            exists join _custAssignment
                where custTrans.AccountNum == _custAssignment.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBenchmark</Name>
				<Source><![CDATA[
    private real adjustBenchmark(real _benchmark)
    {
        if (decRound(_benchmark, 0) >= _benchmark)
        {
            return decRound(_benchmark, 0) - 0.5;
        }
        else
        {
            return decRound(_benchmark, 0) + 0.5;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>