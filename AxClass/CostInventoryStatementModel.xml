<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryStatementModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CostInventoryStatementModel</c> models the inventory statement.
/// </summary>
public class CostInventoryStatementModel extends CostStatementModel
{
    private const Level     total = 0;
    private const Level     subtotal = 1;
    private const Level     line = 2;

    CostAmount              endingBalance,
                            beginningBalance,
                            soldAmount,
                            consumedAmount,
                            disposedAmountFromCounting;

    ItemId                  itemId;
    InventDim               inventDim,
                            inventDimBlank;

    Query                   query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSelectionAndGroupByFieldsForCostStatementToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds selection and group by fields for the <c>CostStatementCache</c> table to the data source.
    /// </summary>
    /// <param name = "_dataSource">
    /// The data source to add the selection and group by fields to.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addSelectionAndGroupByFieldsForCostStatementToDataSource(QueryBuildDataSource _dataSource)
    {
        _dataSource.addSelectionField(fieldNum(CostStatementCache, Amount), SelectionField::Sum);
        _dataSource.addSelectionField(fieldNum(CostStatementCache, TransDate), SelectionField::Max);
        _dataSource.addGroupByField(fieldNum(CostStatementCache, StatementType));
        _dataSource.addGroupByField(fieldNum(CostStatementCache, StatementLineCategoryLevel1));
        _dataSource.addGroupByField(fieldNum(CostStatementCache, StatementLineCategoryLevel2));
        _dataSource.addGroupByField(fieldNum(CostStatementCache, StatementLineCategoryLevel3));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryUsingInventoryStatementCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the statement that uses the cost statement cache.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class with the query for the statement.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void buildQueryUsingInventoryStatementCache()
    {
        query = new Query();

        query.queryType(QueryType::Union);

        var statementCachePeriodDataSource = query.addDataSource(tableNum(CostStatementCache));
        this.addSelectionAndGroupByFieldsForCostStatementToDataSource(statementCachePeriodDataSource);
        statementCachePeriodDataSource.addRange(fieldNum(CostStatementCache, TransDate)).value(queryRange(fromDate, toDate));
        statementCachePeriodDataSource.addRange(fieldNum(CostStatementCache, StatementType)).value(queryValue(CostStatementType::Inventory));

        var statementCacheBeginningBalanceDataSource = query.addDataSource(tableNum(CostStatementCache));
        statementCacheBeginningBalanceDataSource.unionType(UnionType::UnionAll);
        this.addSelectionAndGroupByFieldsForCostStatementToDataSource(statementCacheBeginningBalanceDataSource);
        statementCacheBeginningBalanceDataSource.addRange(fieldNum(CostStatementCache, TransDate)).value(queryRange(dateNull(), fromDate - 1));
        statementCacheBeginningBalanceDataSource.addRange(fieldNum(CostStatementCache, StatementType)).value(queryValue(CostStatementType::Inventory));

        var statementCachePeriodVarianceDataSource = query.addDataSource(tableNum(CostStatementCache));
        statementCachePeriodVarianceDataSource.unionType(UnionType::UnionAll);
        this.addSelectionAndGroupByFieldsForCostStatementToDataSource(statementCachePeriodVarianceDataSource);
        statementCachePeriodVarianceDataSource.addRange(fieldNum(CostStatementCache, TransDate)).value(queryRange(fromDate, toDate));
        statementCachePeriodVarianceDataSource.addRange(fieldNum(CostStatementCache, StatementType)).value(queryValue(CostStatementType::Variance));
        statementCachePeriodVarianceDataSource.addRange(fieldNum(CostStatementCache, StatementLineCategoryLevel2)).value(queryValue(CostStatementLineCategoryLevel2::Procured));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the statement.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class with the query for the statement.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void buildQuery()
    {
        query = new Query();

        this.addInventTransValueQuery();
        this.addInventCostTransVarianceQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransValueQuery</Name>
				<Source><![CDATA[
    private void addInventTransValueQuery()
    {
        var qbdsInventValue = query.addDataSource(tableNum(InventValueReportView));
        qbdsInventValue.addSelectionField(fieldNum(InventValueReportView, Amount), SelectionField::Sum);
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, TransDate));
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, StatementLineCategoryLevel1));
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, StatementLineCategoryLevel2));
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, StatementLineCategoryLevel3));
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, StatementType));
        qbdsInventValue.addRange(fieldNum(InventValueReportView, TransDate)).value(queryRange(fromDate, dateMax()));

        if (itemId)
        {
            qbdsInventValue.addSelectionField(fieldNum(InventValueReportView, Qty), SelectionField::Sum);
            qbdsInventValue.addRange(fieldNum(InventValueReportView, ItemId)).value(itemId);
        }

        var qbdsInventTable = qbdsInventValue.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(InventValueReportView, ItemId), fieldNum(InventTable, ItemId));
        qbdsInventTable.addGroupByField(fieldNum(InventTable, TableId));
        qbdsInventTable.addRange(fieldNum(InventTable, ItemType)).value(queryValue(ItemType::Item));

        if (!InventDim::isInventDimEqual(inventDim, inventDimBlank, inventDim::dimFieldsList()))
        {
            var qbdsInventDim = qbdsInventTable.addDataSource(tableNum(InventDim));
            qbdsInventDim.addLink(fieldNum(InventValueReportView, InventDimId), fieldNum(InventDim, InventDimId), qbdsInventValue.name());
            qbdsInventTable.addGroupByField(fieldNum(InventDim, TableId));
            InventDim::queryAddRange(qbdsInventDim, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventCostTransVarianceQuery</Name>
				<Source><![CDATA[
    private void addInventCostTransVarianceQuery()
    {
        var qbdsInventCostTransVarianceView = query.addDataSource(tableNum(InventCostTransVarianceView));
        qbdsInventCostTransVarianceView.unionType(UnionType::UnionAll);
        qbdsInventCostTransVarianceView.addSelectionField(fieldNum(InventCostTransVarianceView, CostAmountPosted), SelectionField::Sum);
        qbdsInventCostTransVarianceView.addGroupByField(fieldNum(InventCostTransVarianceView, TransDate));
        qbdsInventCostTransVarianceView.addGroupByField(fieldNum(InventCostTransVarianceView, CostTransRefType));
        qbdsInventCostTransVarianceView.addRange(fieldNum(InventCostTransVarianceView, TransDate)).value(queryRange(fromDate, toDate));
        qbdsInventCostTransVarianceView.addRange(fieldNum(InventCostTransVarianceView, IsPosted)).value(queryValue(NoYes::Yes));

        if (itemId)
        {
            qbdsInventCostTransVarianceView.addRange(fieldNum(InventCostTransVarianceView, ItemId)).value(itemId);
        }

        var qbdsInventTable = qbdsInventCostTransVarianceView.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(InventCostTransVarianceView, ItemId), fieldNum(InventTable, ItemId));
        qbdsInventTable.addGroupByField(fieldNum(InventTable, TableId));
        qbdsInventTable.addRange(fieldNum(InventTable, ItemType)).value(queryValue(ItemType::Item));

        if (!InventDim::isInventDimEqual(inventDim, inventDimBlank, inventDim::dimFieldsList()))
        {
            var qbdsInventDim = qbdsInventTable.addDataSource(tableNum(InventDim));
            qbdsInventDim.addLink(fieldNum(InventCostTransVarianceView, FinancialInventDimId), fieldNum(InventDim, InventDimId), qbdsInventCostTransVarianceView.name());
            qbdsInventTable.addGroupByField(fieldNum(InventDim, TableId));
            InventDim::queryAddRange(qbdsInventDim, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    protected void create()
    {
        boolean useCache = (ItemId == '');

        if (useCache)
        {
            this.buildQueryUsingInventoryStatementCache();
        }
        else
        {
            this.buildQuery();
        }
        var queryRun = new QueryRun(query);

        var mapQuery = CostInventoryStatementCmdMapQuery::newFromQueryRun(queryRun);
        var aggregator = CostInventoryStatementCmdAggregate::newFromParameters(mapQuery);
        aggregator.parmFromDate(fromDate);
        aggregator.parmToDate(toDate);
        aggregator.parmUseCurrentBalance(!useCache);

        var commandList = InventAgingCmdList::construct().add(mapQuery).add(aggregator);

        InventAgingQueryProcessor::newFromParameters(queryRun, commandList).execute();

        this.addLine(total,
                     "@SCM:CostStatementBeginningBalance",
                     aggregator.parmBeginningBalanceQuantity(),
                     aggregator.parmBeginningBalanceAmount());
        this.addLine(subtotal,
                     "@SCM:CostStatementNetSourcing",
                     aggregator.parmNetSourcingQuantity(),
                     aggregator.parmNetSourcingAmount());
        this.addLine(line,
                     "@SCM:CostStatementProcured",
                     aggregator.parmProcuredQuantity(),
                     aggregator.parmProcuredAmount());
        this.addLine(line,
                     "@SCM:CostStatementManufacturedCost",
                     aggregator.parmManufacturedQuantity(),
                     aggregator.parmManufacturedAmount());
        this.addLine(subtotal,
                     "@SCM:CostStatementNetUsage",
                     aggregator.parmNetUsageQuantity(),
                     aggregator.parmNetUsageAmount());
        this.addLine(line,
                     "@SCM:CostStatementDisposed",
                     aggregator.parmDisposedQuantity(),
                     aggregator.parmDisposedAmount());
        this.addLine(line,
                     "@SCM:CostStatementConsumedMaterialCost",
                     aggregator.parmConsumedQuantity(),
                     aggregator.parmConsumedAmount());
        this.addLine(line,
                     "@SCM:CostStatementTransferred",
                     aggregator.parmTransferredQuantity(),
                     aggregator.parmTransferredAmount());
        this.addLine(line,
                     "@SCM:CostStatementSold",
                     aggregator.parmSoldQuantity(),
                     aggregator.parmSoldAmount());
        this.addLine(total,
                     "@SCM:CostStatementEndingBalance",
                     aggregator.parmEndingBalanceQuantity(),
                     aggregator.parmEndingBalanceAmount());
        this.addLine(total,
                     "@SCM:CostStatementVariances",
                     0.0,
                     aggregator.parmVarianceAmount());

        endingBalance = aggregator.parmEndingBalanceAmount();
        beginningBalance = aggregator.parmBeginningBalanceAmount();
        soldAmount = aggregator.parmSoldAmount();
        consumedAmount = aggregator.parmConsumedAmount();
        disposedAmountFromCounting = aggregator.parmDisposedAmountFromCounting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CostInventoryStatementModel construct()
    {
        return new CostInventoryStatementModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndingBalance</Name>
				<Source><![CDATA[
    public CostAmount parmEndingBalance()
    {
        return endingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBeginningBalance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CostAmount parmBeginningBalance()
    {
        return beginningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CostAmount parmConsumedAmount()
    {
        return consumedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSoldAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CostAmount parmSoldAmount()
    {
        return soldAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisposedAmountFromCounting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CostAmount parmDisposedAmountFromCounting()
    {
        return disposedAmountFromCounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public str description()
    {
        return '@SCM:OnHandInventory';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>