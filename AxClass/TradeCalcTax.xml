<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class TradeCalcTax
{
    tax tax;
    TaxAmountCur        returnTaxTotal;
    TradeTotalsEnumerableFactory    enumerableFactory;
    // <GEERU>
    GoodsInRouteId_RU           goodsInRouteId;
    SalesInvoicePostingType_RU  invoicePostingType;
    // </GEERU>

    // <GIN>
    TaxWithholdCalculation_IN   taxWithholdCalculation;
    // </GIN>

    private TaxWithholdCalculation taxWithholdCalc;

    boolean                     skipLineMarkup;
    boolean                     skipTableMarkup;
    private ReasonTableRefRecId lineReasonTableRef, headerReasonTableRef;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHeaderReasonTableRefRecId</Name>
				<Source><![CDATA[
    internal ReasonTableRefRecId getHeaderReasonTableRefRecId()
    {
        return headerReasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineReasonTableRefRecId</Name>
				<Source><![CDATA[
    internal ReasonTableRefRecId getLineReasonTableRefRecId()
    {
        return lineReasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderReasonTableRefRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void setHeaderReasonTableRefRecId(ReasonTableRefRecId _headerReasonTableRef)
    {
        headerReasonTableRef = _headerReasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineReasonTableRefRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void setLineReasonTableRefRecId(ReasonTableRefRecId _lineReasonTableRef)
    {
        lineReasonTableRef = _lineReasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction supports adjusting a single line.
    /// </summary>
    /// <returns>
    /// true if adjusting a single line is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    public TaxAmountCur calcTax(TradeTotalsBase _tradeTotals)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withhold tax.
    /// </summary>
    /// <param name="_tradeTotals">
    /// The trade totals.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    public TaxAmountCur calcWithholdTax_IN(TradeTotalsBase _tradeTotals)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withhold tax.
    /// </summary>
    /// <param name="_tradeTotals">
    /// The trade totals.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    internal TaxAmountCur calcWithholdTax(TradeTotalsBase _tradeTotals)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEnumerableFactory</Name>
				<Source><![CDATA[
    protected TradeTotalsEnumerableFactory createEnumerableFactory()
    {
        return TradeTotalsEnumerableFactory::newFromContract(this.parmContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a value that indicates if a tax group exists for on any line of the document.
    /// </summary>
    /// <returns>
    ///   true if a tax group exists for any line; otherwise, false.
    /// </returns>
    public boolean doTaxGroupExistsForDocument()
    {
        // Default is true to force the tax engine to calculate taxes.
        // Specific documents will override and return results as needed.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription taxAdjustmentDetailDescription;

        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference taxAdjustmentDetailReference;

        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The type of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailType taxAdjustmentDetailType;

        return taxAdjustmentDetailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    public TransDate  invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetReturnTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the tax total related to the return portion of the order.
    /// </summary>
    /// <returns>
    ///     The tax total related to the return portion of the order.
    /// </returns>
    public TaxAmountCur mcrGetReturnTaxTotal()
    {
        return returnTaxTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract parmContract()
    {
        TradeTotalsIContract contract = null;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnumerableFactory</Name>
				<Source><![CDATA[
    protected TradeTotalsEnumerableFactory parmEnumerableFactory(TradeTotalsEnumerableFactory _enumerableFactory = enumerableFactory)
    {
        enumerableFactory = _enumerableFactory;

        if (!enumerableFactory)
        {
            enumerableFactory = this.createEnumerableFactory();
        }
        return enumerableFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsInRouteId_RU</Name>
				<Source><![CDATA[
    public GoodsInRouteId_RU parmGoodsInRouteId_RU(GoodsInRouteId_RU _goodsInRouteId = goodsInRouteId)
    {
        goodsInRouteId = _goodsInRouteId;
        return goodsInRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoicePostingType_RU</Name>
				<Source><![CDATA[
    public SalesInvoicePostingType_RU parmInvoicePostingType_RU(SalesInvoicePostingType_RU _invoicePostingType = invoicePostingType)
    {
        invoicePostingType = _invoicePostingType;
        return invoicePostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipLineMarkup</Name>
				<Source><![CDATA[
    public boolean parmSkipLineMarkup(boolean _skipLineMarkup = skipLineMarkup)
    {
        skipLineMarkup = _skipLineMarkup;
        return skipLineMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipTableMarkup</Name>
				<Source><![CDATA[
    public boolean parmSkipTableMarkup(boolean _skipTableMarkup = skipTableMarkup)
    {
        skipTableMarkup = _skipTableMarkup;
        return skipTableMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts tax for the current document.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The voucher for the document.
    /// </param>
    /// <param name="_post">
    /// true if we are posting tax; otherwise, false.
    /// </param>
    /// <remarks>
    /// Set _post to false when confirming an order.
    /// </remarks>
    public void  post(LedgerVoucher    _ledgerVoucher,
                      NoYes            _post   = NoYes::Yes)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    public Tax tax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCalculation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets TaxWithholdCalculation_IN instance.
    /// </summary>
    /// <param name="_taxWithholdCalculation">
    /// TaxWithholdCalculation_IN object instance.
    /// </param>
    /// <returns>
    /// TaxWithholdCalculation_IN object instance.
    /// </returns>

    public TaxWithholdCalculation_IN taxWithholdCalculation_IN(TaxWithholdCalculation_IN _taxWithholdCalculation = taxWithholdCalculation)
    {
        taxWithholdCalculation = _taxWithholdCalculation;
        return taxWithholdCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parms TaxWithholdCalculation instance.
    /// </summary>
    /// <param name = "_taxWithholdCalc">The <c>TaxWithholdCalculation</c> object instance.</param>
    /// <returns>The <c>TaxWithholdCalculation</c> object instance.</returns>
    internal TaxWithholdCalculation parmTaxWithholdCalculation(TaxWithholdCalculation _taxWithholdCalc = taxWithholdCalc)
    {
        taxWithholdCalc = _taxWithholdCalc;
        return taxWithholdCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountBySign_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   This method returns the actual tax amount.
    /// </summary>
    /// <param name="_includeUseTax">
    ///    A flag that indicates whether use tax should be included in the tax total.
    /// </param>
    /// <returns>
    ///   The actual tax amount in transactional currency.
    /// </returns>
    public container totalTaxAmountBySign_RU(boolean _includeUseTax = false)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferEnumerableFactory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers a <c>TradeTotalsEnumerableFactory</c> object into this class to use caches that are built
    /// up in the calling class.
    /// </summary>
    /// <param name="_enumerableFactory">
    /// A <c>TradeTotalsEnumerableFactory</c> object.
    /// </param>
    /// <returns>
    /// true if the transferred object is accepted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>TradeTotalsEnumerableFactory</c> object will only be accepted if the type of the transferred
    /// object is equal to the type of the <c>TradeTotalsEnumerableFactory</c> that would otherwise be
    /// initialized by the <c>TradeCalcTax</c> class.
    /// </remarks>
    public boolean transferEnumerableFactory(TradeTotalsEnumerableFactory _enumerableFactory)
    {
        boolean isAccepted = false;

        if (classIdGet(_enumerableFactory) == classIdGet(this.parmEnumerableFactory()))
        {
            this.parmEnumerableFactory(_enumerableFactory);
            isAccepted = true;
        }
        return isAccepted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDetailsSalesTaxAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether tax calculation uses detailed level sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the tax calculation uses detailed level sales tax adjustments; otherwise, false.
    /// </returns>
    public boolean useDetailsSalesTaxAdjustmentType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether tax is included in the price.
    /// </summary>
    /// <returns>
    /// true if the tax is included; otherwise, false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the end discount amount for a line.
    /// </summary>
    /// <param name="baseAmount">
    /// The base amount for the discount calculation.
    /// </param>
    /// <returns>
    /// The end discount amount.
    /// </returns>
    public DiscAmount lineEndDiscAmount(TaxBaseCur baseAmount)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if can recalculate tax.
    /// </summary>
    /// <returns>Returns true if tax can be recalculated; otherwise, returns false.</returns>
    public boolean canRecalculateTax()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>