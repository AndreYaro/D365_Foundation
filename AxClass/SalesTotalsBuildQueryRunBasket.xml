<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotalsBuildQueryRunBasket</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTotalsBuildQueryRunBasket</c> class provides <c>QueryRun</c> objects to be used by the
/// <c>SalesTotals_Basket</c> class and the <c>SalesCalcTax_Basket</c> class for iterating
/// <c>SalesLine</c> records.
/// </summary>
class SalesTotalsBuildQueryRunBasket extends TradeTotalsBuildQueryRun implements TradeTotalsIBuildQueryRun
{
    QueryRun   salesBasketLineQueryRun;
    QueryBuildDataSource    salesBasketLineDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLineQueryRun</Name>
				<Source><![CDATA[
        public QueryRun buildLineQueryRun()
    {
        if (!salesBasketLineQueryRun)
        {
            salesBasketLineQueryRun = this.createSalesBasketLineQueryRun();
        }

        return salesBasketLineQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesBasketLineQueryRun</Name>
				<Source><![CDATA[
        protected QueryRun createSalesBasketLineQueryRun()
    {
        QueryRun queryRun = new QueryRun(queryStr(SalesBasketLine));
        queryRun.query().dataSourceTable(tableNum(SalesBasketLine)).rangeField(fieldNum(SalesBasketLine,SalesBasketId)).value(queryValue(this.parmSalesBasketTable().SalesBasketId));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainLineDataSourceNumber</Name>
				<Source><![CDATA[
        public DataSourceNumber   mainLineDataSourceNumber()
    {
        if (!salesBasketLineDataSource)
        {
            salesBasketLineDataSource = this.buildLineQueryRun().query().dataSourceTable(tableNum(SalesBasketLine));
        }

        return salesBasketLineDataSource.id();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesBasketContract</Name>
				<Source><![CDATA[
        protected SalesTotalsBasketContract parmSalesBasketContract()
    {
        return this.parmContract() as SalesTotalsBasketContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesBasketTable</Name>
				<Source><![CDATA[
        protected SalesBasket parmSalesBasketTable()
    {
        return this.parmSalesBasketContract().parmSalesBasket();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static SalesTotalsBuildQueryRunBasket construct()
    {
        return new SalesTotalsBuildQueryRunBasket();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesBasket</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTotalsBuildQueryRunBasket</c> class.
    /// </summary>
    /// <param name="_salesBasket">
    /// The <c>SalesBasket</c> record that is used to filter the <c>SalesBasketLine</c> records.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesTotalsBuildQueryRunBasket</c> class.
    /// </returns>
    public static SalesTotalsBuildQueryRunBasket newFromSalesBasket(
        SalesBasket     _salesBasket)
    {
        SalesTotalsBuildQueryRunBasket salesTotalsBuildQueryRunBasket = SalesTotalsBuildQueryRunBasket::newFromSalesBasketContract(
            SalesTotalsBasketContract::newFromSalesBasket(_salesBasket));

        return salesTotalsBuildQueryRunBasket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesBasketContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTotalsBuildQueryRunBasket</c> class.
    /// </summary>
    /// <param name="_contract">
    /// The <c>SalesTotalsBasketContract</c> object that is used to filter the <c>SalesBasketLine</c>
    /// records.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesTotalsBuildQueryRunBasket</c> class.
    /// </returns>
    public static SalesTotalsBuildQueryRunBasket newFromSalesBasketContract(
        SalesTotalsBasketContract   _contract)
    {
        SalesTotalsBuildQueryRunBasket salesTotalsBuildQueryRunBasket = SalesTotalsBuildQueryRunBasket::construct();

        salesTotalsBuildQueryRunBasket.parmContract(_contract);

        return salesTotalsBuildQueryRunBasket;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
