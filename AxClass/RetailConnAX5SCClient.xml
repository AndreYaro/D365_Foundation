<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConnAX5SCClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailConnAX5SCClient</c> class is used to create connection to store connect, add fields and set jobs for AX5.
/// </summary>
class RetailConnAX5SCClient implements RetailConnSCClient
{
    COM  dataDirectorClient;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFieldEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds field to data director client.
    /// </summary>
    /// <param name="_field">
    /// The field to be added to data director client.
    /// </param>
    /// <param name="_dataType">
    /// Data type of the field.
    /// </param>
    /// <param name="_convType">
    /// Conversion type used by the field.
    /// </param>
    /// <param name="_convValue">
    /// Conversion value used by the field.
    /// </param>
    void addFieldEx(str _field, int _dataType, int _convType, str _convValue)
    {
        dataDirectorClient.addFieldEx(_field, _dataType, _convType, _convValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParam</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds parameter to data director client.
    /// </summary>
    /// <param name="_param">
    /// Parameter that needs to be added to the Data Director Client.
    /// </param>
    void addParam(int _param)
    {
        COMVariant parameter;
        parameter = new COMVariant(COMVariantInOut::In, COMVariantType::VT_I4);
        parameter.int(_param);
        dataDirectorClient.addParam(parameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParamField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds parameter field to the data director client.
    /// </summary>
    /// <param name="_fieldName">
    /// Name of a field.
    /// </param>
    /// <param name="_dataType">
    /// Data type of the field.
    /// </param>
    /// <param name="_operator">
    /// Operator used by the parameter field.
    /// </param>
    void addParamField(str _fieldName, int _dataType, int _operator)
    {
        if (_dataType == 7)
        {
            _dataType = 6;
        }

        dataDirectorClient.addParamField(_fieldName, _dataType, _operator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddReceiver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds receiver to data director client.
    /// </summary>
    /// <param name="_serviceName">
    /// Name of the service used by the receiver.
    /// </param>
    /// <param name="_serverName">
    /// Name of the server to be connected by the receiver.
    /// </param>
    /// <param name="_port">
    /// Port to be used for receiving.
    /// </param>
    /// <param name="_connectionString">
    /// Connection string used for establishing connection to the server.
    /// </param>
    public void AddReceiver(str _serviceName, str _serverName, int _port, str _connectionString)
    {
        dataDirectorClient.addReceiver(_serviceName, _serverName, _port, _connectionString, "", 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates connection for data director client.
    /// </summary>
    /// <param name="_serverName">
    /// Name of the server that needs to be connected.
    /// </param>
    /// <param name="_port">
    /// Port used for establishing connection with the Server.
    /// </param>
    /// <param name="_connectionString">
    /// Connection String used for connecting to the server.
    /// </param>
    /// <param name="_interactive">
    /// Checks whether the interactive is enabled.
    /// </param>
    /// <param name="_ipsec">
    /// Checks whether the ip sec is enabled.
    /// </param>
    /// <param name="_preferIPv6">
    /// Checks whether the _preferIPv6 is enabled.
    /// </param>
    /// <param name="_messageGuid">
    /// GUID of the message.
    /// </param>
    public void createConnection(
                str _serverName,
                int _port,
                str _connectionString,
                boolean _interactive,
                boolean _ipsec,
                boolean _preferIPv6,
                guid _messageGuid)
    {
        dataDirectorClient.createConnection(_serverName, _port, _connectionString, _interactive, _ipsec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disconnect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disconnects the data director client.
    /// </summary>
    public void disconnect()
    {
        dataDirectorClient.disconnect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endParamValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends sending parameter values to the data director client.
    /// </summary>
    void endParamValues()
    {
        dataDirectorClient.endParamValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends sending request to client.
    /// </summary>
    void endRequest()
    {
        dataDirectorClient.endRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the last error.
    /// </summary>
    /// <returns>
    /// The last error number.
    /// </returns>
    public int getLastError()
    {
        return dataDirectorClient.getLastError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPkgNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the package number.
    /// </summary>
    /// <returns>
    /// The package number.
    /// </returns>
    public int getPkgNo()
    {
        return dataDirectorClient.getPkgNo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize Store connect client, it set AX62 SC client by default.
    /// </summary>
    void new()
    {
        #RetailConn

        dataDirectorClient = new COM(#TransAutoClientControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send request to the data director client.
    /// </summary>
    /// <param name="_workingDirectoryPath">
    /// Working directory path to store RECID data files
    /// </param>
    /// <returns>
    /// True if the request is sent succesfully; otherwise false.
    /// </returns>
    public boolean send(
                str _workingDirectoryPath)
    {
        return dataDirectorClient.send();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the job Id that needs to be run by data director client.
    /// </summary>
    /// <param name="_jobId">
    /// The Job Id value.
    /// </param>
    public void setJobId(str _jobId)
    {
        dataDirectorClient.setJobId(_jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMsgId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the message id of data director client.
    /// </summary>
    /// <param name="_msgId">
    /// A message to be set.
    /// </param>
    public void setMsgId(str _msgId)
    {
        dataDirectorClient.setMsgId(_msgId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the request type of data director client.
    /// </summary>
    /// <param name="_requestType">
    /// Request type to be set.
    /// </param>
    void setRequestType(int _requestType)
    {
        dataDirectorClient.setRequestType(_requestType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResultTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the table name for result.
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table.
    /// </param>
    void setResultTable(str _tableName)
    {
        dataDirectorClient.setResultTable(_tableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResultTypeEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the result type of data director client.
    /// </summary>
    /// <param name="_resType">
    /// Result type.
    /// </param>
    /// <param name="_modType">
    /// Modified type.
    /// </param>
    void setResultTypeEx(int _resType, int _modType)
    {
        dataDirectorClient.setResultTypeEx(_resType, _modType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the table name.
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table.
    /// </param>
    void setTable(str _tableName)
    {
        dataDirectorClient.setTable(_tableName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>