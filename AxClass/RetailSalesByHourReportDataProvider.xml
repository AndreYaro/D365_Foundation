<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesByHourReportDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;

/// <summary>
/// Report data provider class for retail sales by hour SSRS report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailReportParametersDataContract))]
class RetailSalesByHourReportDataProvider extends RetailSrsReportDataProviderBase
{
    RetailSalesByHourReportTable t;
    RetailReportParametersDataContract dc;
    ACM.DynamicMeasureDefinition amount;
    ACM.DynamicMeasureDefinition numberOfTransactions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize measure definitions.
    /// </summary>
    public void new()
    {
        super();

        amount = new ACM.DynamicMeasureDefinition(
                    tableStr(RetailSalesByHourView),
                    fieldStr( RetailSalesByHourView, grossAmount),
                    ACM.Aggregation::Sum
                );

        numberOfTransactions = new ACM.DynamicMeasureDefinition(
                    tableStr(RetailSalesByHourView),
                    fieldStr( RetailSalesByHourView, TransactionRecId),
                    ACM.Aggregation::Count
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the SSRS framework to bring back data. It gets called after processReport.
    /// </summary>
    /// <returns>table buffer</returns>
    [SRSReportDataSetAttribute(tableStr(RetailSalesByHourReportTable))]
    public RetailSalesByHourReportTable getTable()
    {
        select t;
        return t;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the report.
    /// </summary>
    public void processReport()
    {
        dc = this.parmDataContract();
        this.populateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    private void populateData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());
            Query q = new Query();
            QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailSalesByHourView));

            // Add fields.
            qds.addSelectionFieldWithAlias('HourOfDayName', fieldNum(RetailSalesByHourView, Name));
            qds.addSelectionFieldWithAlias('RetailHourOfDay', fieldNum(RetailSalesByHourView, RetailHourOfDay));
            qds.addCalculationField(amount, 'Amount' );
            qds.addCalculationField(numberOfTransactions,'NumberOfTransactions');
            qds.addGroupByField(fieldNum(RetailSalesByHourView, Name));
            qds.addGroupByField(fieldNum(RetailSalesByHourView, RetailHourOfDay));

            //Add ranges.
            QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailSalesByHourView, transDate));
            dateTimeRange.value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailSalesByHourView, transDate)));

            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(qds, fieldNum(RetailSalesByHourView, Channel));

            //Build Mappings
            Map m = this.getMappings();

            // run the query and insert the query results into the form datasource
            QueryRun::runAndPopulate(q, t, m);

            this.ClearChannelFilterTable();
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMappings</Name>
				<Source><![CDATA[
    private Map getMappings()
    {
        Map m = new Map(Types::String, Types::String);
        m.insert('HourOfDayName', fieldStr(RetailSalesByHourReportTable, HourOfDayName ));
        m.insert('RetailHourOfDay', fieldStr(RetailSalesByHourReportTable, HourOfDay));
        m.insert('Amount', fieldStr(RetailSalesByHourReportTable, Amount));
        m.insert('NumberOfTransactions', fieldStr(RetailSalesByHourReportTable, NumberOfTransactions));

        return m;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>