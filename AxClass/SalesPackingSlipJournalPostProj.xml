<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPackingSlipJournalPostProj</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::ProjectPackingSlip)]
class SalesPackingSlipJournalPostProj extends SalesPackingSlipJournalPost
{
    SalesQty        projQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createScrapOnInventory</Name>
				<Source><![CDATA[
    protected void createScrapOnInventory()
    {
        SalesLine               localSalesLine = this.sourceLine();
        CustPackingSlipTrans    localTrans = this.journalLine();

        if (!localSalesLine.Scrap)
        {
            return;
        }

        InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this.sourceLine()));
        estimated.parmTransEstimated(-localTrans.InventQty);
        estimated.parmEstimated(-localTrans.InventQty);
        estimated.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus  documentStatus()
    {
        return DocumentStatus::ProjectPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    protected void postInventory()
    {
        this.createScrapOnInventory();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNotStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs posting routines for order lines that cannot be posted to inventory.
    /// </summary>
    protected void postNotStocked()
    {
        super();

        projQty = custPackingSlipTrans.Qty;
        inventMovement = InventMovement::construct(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnProforma</Name>
				<Source><![CDATA[
    protected boolean postTaxOnProforma()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TransTxt</c> object.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TransTxt</c> object.
    /// </returns>
    protected TransTxt transactionLogTxt()
    {
        return "@SYS10555";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    protected void updateInventory(InventMovement _inventMovement)
    {
        SalesLine locSalesLine = _inventMovement.buffer();
        
        _inventMovement.parmSalesPackingSlipJournalPostProj(true);
        
        if (locSalesLine.isLinkedToProdConsumed())
        {
            this.processItemReqLinkedToProdOrder(_inventMovement);
        }
        else
        {
            if (_inventMovement.canItemReqBeCancelled())
            {
                super(_inventMovement);
                
                projQty = custPackingSlipTrans.Qty;
            }
            else
            {
                if (this.checkSalesType(_inventMovement, locSalesLine))
                {
                    super(_inventMovement);
                }
                else
                {
                    this.updateFinancialSalesPackingSlipProject(_inventMovement);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processItemReqLinkedToProdOrder</Name>
				<Source><![CDATA[
    private void processItemReqLinkedToProdOrder(InventMovement _inventMovement)
    {
        InventQty                           addQty = custPackingSlipTrans.Qty;
        SalesQty                            deliverNow;
        SalesLine                           locSalesLine = _inventMovement.buffer();
        InventTrans                         inventTransProdTable;
        InventTransPosting                  inventTransPostingProdTableFinancial;

        ListIterator it = locSalesLine.prodConsumedInventTransOriginIds(NoYesCombo::Yes);
        while (it.more())
        {
            InventTransIdSum_MarkingRef inventTransIdSum = InventTransIdSum_MarkingRef::newMarkingRef(_inventMovement.inventTransOriginId(), it.value());

            InventQty markedInventQuantity = inventTransIdSum.reserved() ? inventTransIdSum.reserved() : inventTransIdSum.picked();

            if (markedInventQuantity)
            {
                if (addQty > -markedInventQuantity)
                {
                    deliverNow = -markedInventQuantity;
                }
                else
                {
                    deliverNow = addQty;
                }

                SalesQty remainAfter = addQty - deliverNow + custPackingSlipTrans.Remain;

                //Item requirement inventory transaction is marked up with a production order inventory transaction with a project posting type Consumed/Linked to order.
                if (deliverNow)
                {
                    InventMov_Sales locInventMovement = InventMovement::construct(locSalesLine);

                    select firstonly RecId from inventTransProdTable
                            where inventTransProdTable.InventTransOrigin == it.value()
                            join RecId from inventTransPostingProdTableFinancial
                                where inventTransPostingProdTableFinancial.InventTransPostingType == InventTransPostingType::Financial &&
                                    inventTransPostingProdTableFinancial.InventTransOrigin == inventTransProdTable.InventTransOrigin &&
                                    inventTransPostingProdTableFinancial.Voucher == inventTransProdTable.Voucher &&
                                    inventTransPostingProdTableFinancial.TransDate == inventTransProdTable.DateFinancial &&
                                    inventTransPostingProdTableFinancial.PostingTypeOffset == LedgerPostingType::ProdReceipt;

                    if (inventTransPostingProdTableFinancial)
                    {
                        //Operations and Balance Sheet posting should cancel out.
                        locInventMovement.parmAccountOperations(locInventMovement.accountBalanceSheet());
                        locInventMovement.parmPostingOperations(locInventMovement.postingBalanceSheet());
                    }
                    else
                    {
                        locInventMovement.parmAccountOperations(
                                InventPosting::accountItemLedgerDimensionFromParameters(
                                    InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                                        locSalesLine,
                                        InventAccountType::SalesConsump,
                                        locSalesLine.inventTable().itemGroupId())));
                        locInventMovement.parmPostingOperations(LedgerPostingType::SalesConsump);
                    }

                    //Don't update committed cost
                    locInventMovement.parmCanCommittedCostBeReversed(UnknownNoYes::No);

                    InventUpd_Financial inventUpd_FinancialRef = InventUpd_Financial::newSalesPackingSlipProjectProd(locInventMovement,
                                                                                                                  ledgerVoucher,
                                                                                                                  custPackingSlipJour.PackingSlipId,
                                                                                                                  custPackingSlipTrans.Scrap,
                                                                                                                  deliverNow,
                                                                                                                  remainAfter,
                                                                                                                  salesParmLine.physicalReduction(this.parmReduceOnHand()),
                                                                                                                  it.value());
                    inventUpd_FinancialRef.updateNow();

                    updateNow = -inventUpd_FinancialRef.updFinancialUnit();
                    updateNowInvent = -inventUpd_FinancialRef.updFinancial();
                }

                addQty -= deliverNow;

                if (! addQty)
                {
                    break;
                }
            }
            it.next();
        }

        //Item requirement inventory transaction is not marked up with a production order inventory transaction with a project posting type Consumed/Linked to order.
        if (addQty)
        {
            this.updateFinancialSalesPackingSlipProjectProd(_inventMovement, addQty);
        }

        this.updateUnderconsumption(locSalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialSalesPackingSlipProjectProd</Name>
				<Source><![CDATA[
    protected void updateFinancialSalesPackingSlipProjectProd(InventMovement _inventMovement, InventQty _addQty)
    {
        projQty = _addQty;

        InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newSalesPackingSlipProjectProd(_inventMovement,
                                                                                      ledgerVoucher,
                                                                                      custPackingSlipJour.PackingSlipId,
                                                                                      custPackingSlipTrans.Scrap,
                                                                                      _addQty,
                                                                                      custPackingSlipTrans.Remain,
                                                                                      salesParmLine.physicalReduction(this.parmReduceOnHand()));
        inventUpd_Financial.updateNow();

        updateNow = -inventUpd_Financial.updFinancialUnit();
        updateNowInvent = -inventUpd_Financial.updFinancial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialSalesPackingSlipProject</Name>
				<Source><![CDATA[
    [Replaceable]
    protected void updateFinancialSalesPackingSlipProject(InventMovement _inventMovement)
    {
        InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newSalesPackingSlipProject(_inventMovement,
                                                                                  ledgerVoucher,
                                                                                  custPackingSlipJour.PackingSlipId,
                                                                                  custPackingSlipTrans,
                                                                                  salesParmLine.physicalReduction(this.parmReduceOnHand()));

        using (ProjInventOrderIssueListForQuarantineContext context = ProjInventOrderIssueListForQuarantineContext::construct())
        {
            if (this.isSeverStockedItemRefByPO(_inventMovement))
            {
                // If the sales order has a reference to purchase order and sales order item is service stocked-item.
                // Posting product recipt with closed for receipt and item consumption enabled in project parameters form,
                // set the context parmRefInventTransOrigin to the markingrefInventTransOrigin of the itemrequirement posted qty InventTrans record.
                // This value is then used while creating InventTransIssue list in correct order.

                PurchLine purchLine;
                PurchParmLine purchParmLine;
                PurchParmTable purchParmTable;

                select firstOnly RecId from purchLine
                where purchLine.InventRefId == salesLine.SalesId &&
                    purchLine.InventRefTransId == salesLine.InventTransId &&
                    purchLine.ProjId != ''
                join RecId from purchParmLine
                    where purchParmLine.PurchLineRecId == purchline.RecId &&
                    purchParmLine.closed == NoYes::Yes
                exists join purchParmTable
                    where purchParmTable.ParmId == purchParmLine.ParmId &&
                        purchParmTable.TableRefId == purchParmLine.TableRefId &&
                        purchParmTable.ParmJobStatus == ParmJobStatus::Executed;

                if (purchLine.RecId)
                {
                    context.parmRefInventTransOrigin(_inventMovement.markingRefInventTransOrigin());
                }
            }

            inventUpd_Financial.updateNow();
        }

        updateNow = -inventUpd_Financial.updFinancialUnit();
        updateNowInvent = -inventUpd_Financial.updFinancial();
        projQty = -inventUpd_Financial.updFinancialUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSeverStockedItemRefByPO</Name>
				<Source><![CDATA[
    private boolean isSeverStockedItemRefByPO(InventMovement _inventMovement)
    {
        return custPackingSlipTrans.InventRefType == InventRefType::Purch &&
            _inventMovement.markingRefInventTransOrigin() &&
            _inventMovement.inventModelGroup().StockedProduct &&
            _inventMovement.inventTable().inventItemType().isServiceItem() &&
            ProjParameters::find().AutomaticItemConsumption == NoYes::Yes &&
            ProjInventOrderIssueListForItemRequirementFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks sales line sales type.
    /// </summary>
    /// <param name = "_inventMovement">The invent movement instance for the update.</param>
    /// <param name = "_salesLine">The sales line buffer for this inventory update.</param>
    /// <returns>
    /// true if the sales type is Sales; otherwise, false.
    /// </returns>
    protected boolean checkSalesType(InventMovement _inventMovement, SalesLine _salesLine)
    {
        return _salesLine.SalesType == SalesType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the customer packing slip journal line.
    /// </summary>
    /// <remarks>
    /// The update of the journal line is only for stocked order lines, because inventory can reduce
    /// updated quantity to on-hand quantity for the item.
    /// </remarks>
    protected void updateJournalLine()
    {
        PurchLine       purchLine;
        PurchParmLine   purchParmLine;

        super();
        this.writeProjTrans(inventMovement);

        if (inventMovement &&
            salesLine.SalesType == SalesType::ItemReq   &&
            ProjParameters::find().CreateItemReqForPO == NoYes::Yes)
        {
            PurchParmTable  purchParmTable;
            //To get the <c>PurchLine</c> which has the posted product receipt without errors and with 'Closed for receipt' is enable.
            select firstOnly RecId from purchLine
                where purchLine.InventRefId == salesLine.SalesId            &&
                    purchLine.InventRefTransId == salesLine.InventTransId   &&
                    purchLine.ProjId
                join RecId from purchParmLine
                    where purchParmLine.PurchLineRecId == purchline.RecId   &&
                        purchParmLine.closed
                exists join purchParmTable
                    where purchParmTable.ParmId == purchParmLine.ParmId &&
                        purchParmTable.TableRefId == purchParmLine.TableRefId &&
                        purchParmTable.ParmJobStatus == ParmJobStatus::Executed;

            if (purchLine.RecId)
            {
                inventMovement.setRemainPhysicalUnit(0);
                inventMovement.setRemainPhysical(0);
                inventMovement.updateBuffer();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnderconsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates inventory transactions when item requirement under-consumes their production order items.
    /// </summary>
    /// <param name="_salesLine">
    /// The item requirement that under-consumes its production order items.
    /// </param>
    /// <remarks>
    /// The method will handle the scenario when an item requirement under-consumes its production order items.
    /// Two inventory transactions will be created.  The first inventory transaction will consume the under-consumed production order items.
    /// The second inventory transaction will post an income to project.  Both inventory transactions are returned marked against each other.
    /// </remarks>
    protected void updateUnderconsumption(SalesLine _salesLine)
    {
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
        if (inventTransIdSum.estimated())
        {
            return;
        }

        ListIterator it = _salesLine.prodConsumedInventTransOriginIds();
        while (it.more())
        {
            InventTransOriginId prodInventTransOriginId = it.value();
            InventTransIdSum inventTransIdSumProd = InventTransIdSum::newTransOriginId(prodInventTransOriginId);
            InventTransIdSum_MarkingRef inventTransIdSumProdRef = InventTransIdSum_MarkingRef::newMarkingRef(prodInventTransOriginId, InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));

            InventQty qtyUnderconsumed = -(inventTransIdSumProd.financial() - inventTransIdSumProdRef.financial());
            if (qtyUnderconsumed)
            {
                //Financial update to consume the production order items that were under-consumed by the item requirement.
                InventMovement movement = InventMov_Virtuel::newItemReqUnderconsume(
                                                                   _salesLine,
                                                                   prodInventTransOriginId,
                                                                   ledgerVoucher.lastTransDate(),
                                                                   qtyUnderconsumed);

                InventUpd_Financial financial = InventUpd_Financial::newItemReqUnderconsume(
                                                                        movement,
                                                                        qtyUnderconsumed,
                                                                        salesLine.calcCostAmount(qtyUnderconsumed),
                                                                        ledgerVoucher,
                                                                        ledgerVoucher.lastVoucher());
                financial.updateNow();

                //Financial update to post an income to the project for the under-consumption.
                InventMovement movementIncome = InventMov_Virtuel::newItemReqUnderconsumeProjIncome(
                                                                           _salesLine,
                                                                           movement.inventTransOriginId(),
                                                                           ledgerVoucher.lastTransDate(),
                                                                           -qtyUnderconsumed);

                InventUpd_Financial financialIncome = InventUpd_Financial::newItemReqUnderconsume(
                                                                                movementIncome,
                                                                                -qtyUnderconsumed,
                                                                                -financial.updCostAmountLedger(),
                                                                                // <GEERU>
                                                                                ledgerVoucher,
                                                                                '',
                                                                                -financial.updCostAmountSecCurLedger_RU());
                // </GEERU>

                financialIncome.updateNow();

                ProdTable prodTableRef = InventTransOriginProdTable::prodTable(prodInventTransOriginId);

                ProjInventJournalTransMapForm::updateOrCreateProdTableProj(prodTableRef, ProjItemTypeProdTable::Underconsumed, ledgerVoucher.lastTransDate(), qtyUnderconsumed);
                ProdTableProj prodTableProj = prodTableRef.prodTableProj(ProjItemTypeProdTable::Underconsumed, true);

                if (!ProjPost::newCheckTrans(prodTableProj).checkTrans())
                {
                    throw Exception::Error;
                }

                ProjPost::newCreateProjTransItem(prodTableProj,
                                                 ledgerVoucher,
                                                 financialIncome.movement().projAdjustRefId(),
                                                 false,
                                                 movementIncome.transId()).postTrans();
            }
            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjTransItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of <c>ProjPost</c> for posting an item transaction to ledger entries.
    /// </summary>
    /// <param name = "_buffer">
    ///    The table for the transaction type.
    /// </param>
    /// <param name = "_ledgerVoucher">
    ///    The ledger items for posting.
    /// </param>
    /// <param name = "_projAdjustRefId">
    ///    The project identifier for transaction item posting. The default value is an empty string; optional.
    /// </param>
    /// <param name = "_notReduceForecast">
    ///     A boolean value that indicates whether the project forecast should be reduced or not.
    /// </param>
    /// <param name = "_inventTransId">
    ///     The inventory transaction identifier. The default value is an empty string; optional.
    /// </param>
    /// <param name = "_salesQty">
    ///     The sales quantity.
    /// </param>
    /// <returns>
    ///     A new <c>ProjPost</c> object for creating project item transactions.
    /// </returns>
    protected ProjPost createProjTransItem(
        Common          _buffer,
        LedgerVoucher   _ledgerVoucher,
        ProjAdjustRefId _projAdjustRefId    = '',
        NoYes           _notReduceForecast  = false,
        InventTransId   _inventTransId      = '',
        SalesQty        _salesQty           = 0
        )
    {
        return ProjPost::newCreateProjTransItem(_buffer, _ledgerVoucher, _projAdjustRefId, _notReduceForecast, _inventTransId, _salesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProjTrans</Name>
				<Source><![CDATA[
    protected void writeProjTrans(InventMov_Sales _inventMovement)
    {
        ProjAdjustRefId projAdjustRefId;
        NoYes           mustNotReduceForecast;

        if (projQty)
        {
            if (salesLine.isStocked())
            {
                projAdjustRefId = _inventMovement.projAdjustRefId();
                mustNotReduceForecast = _inventMovement.parmMustNotReduceForecast();
            }
            else
            {
                projAdjustRefId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
                mustNotReduceForecast = false;
            }

            this.updateRevenueBudget(_inventMovement, ledgerVoucher);

            ProjPost projTransItem = this.createProjTransItem(custPackingSlipTrans, ledgerVoucher, projAdjustRefId, mustNotReduceForecast, '', projQty);
            if (_inventMovement.canItemReqBeCancelled() && salesLine.isStocked())
            {
                projTransItem.parmPostItemPhysically(true);
            }
            projTransItem.postTrans();
        }
        else if (_inventMovement.canItemReqBeCancelled()
            && custPackingSlipJour.isCanceled())
        {
            this.updateRevenueBudget(_inventMovement, ledgerVoucher);

            this.processItemReqPackingSlipCancellation(_inventMovement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processItemReqPackingSlipCancellation</Name>
				<Source><![CDATA[
    private void processItemReqPackingSlipCancellation(InventMov_Sales _inventMovement)
    {
        ProjAdjustRefId projAdjRef = this.getOrComputeProjAdjustRefId();
        NoYes mustNotReduceForecast = false;

        if (salesLine.isStocked())
        {
            mustNotReduceForecast = _inventMovement.parmMustNotReduceForecast();
        }

        ProjItemTrans projItemTrans = this.createReverseProjectSubledgerTransactions(projAdjRef);

        //Create new line from original line and post
        ProjPost projTransItemCancel = ProjPost::newCreateProjTransItemCancel(projItemTrans, ledgerVoucher, projAdjRef, salesLine, mustNotReduceForecast);
        projTransItemCancel.postTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrComputeProjAdjustRefId</Name>
				<Source><![CDATA[
    private ProjAdjustRefId getOrComputeProjAdjustRefId()
    {
        ProjAdjustRefId projAdjRef = "";
        if (salesLine.isStocked())
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;

            if (salesLine.SalesQty > 0)
            {
                select firstonly RecId from inventTransOrigin
                    where inventTransOrigin.InventTransId == custPackingSlipTrans.InventTransId
                join ProjAdjustRefId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.PackingSlipId == custPackingSlipTrans.PackingSlipId
                        && inventTrans.StatusIssue == StatusIssue::None
                        && inventTrans.StatusReceipt == StatusReceipt::Purchased;
            }
            else
            {
                select firstonly RecId from inventTransOrigin
                    where inventTransOrigin.InventTransId == custPackingSlipTrans.InventTransId
                join ProjAdjustRefId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.PackingSlipId == custPackingSlipTrans.PackingSlipId
                        && inventTrans.StatusIssue == StatusIssue::Sold
                        && inventTrans.StatusReceipt == StatusReceipt::None;
            }

            projAdjRef = inventTrans.ProjAdjustRefId;
        }
        else
        {
            projAdjRef = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }

        if (!projAdjRef)
        {
            throw error(strFmt("@Proj:ProjProjAdjustRefIdNotFoundError", salesLine.InventTransId));
        }

        return projAdjRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseProjectSubledgerTransactions</Name>
				<Source><![CDATA[
    private ProjItemTrans createReverseProjectSubledgerTransactions(ProjAdjustRefId _projAdjRefId)
    {
        ProjItemTrans projItemTrans;
        ProjTransIdPackSlip projTransIdPackSlip = strFmt(ProjConstants::ItemReqPackingSlipIdFormat, custPackingSlipTrans.PackingSlipId, real2int(SalesLine.LineNum));

        select firstonly projItemTrans
            where projItemTrans.TransIdPackSlip == projTransIdPackSlip
                && projItemTrans.InventTransId == salesLine.InventTransId;
        
        if (!projItemTrans.RecId)
        {
            throw error(strFmt("@Proj:ProjOrigProjItemTransNotFound", custPackingSlipTrans.PackingSlipId, custPackingSlipTrans.InventTransId));
        }

        ProjItemTrans projItemTransNew = this.createReverseProjItemTrans(projItemTrans, _projAdjRefId);

        // Cost transactions for stocked items are inserted in ProjLedgerUpdate using the voucher created from inventory postings
        if (!salesLine.isStocked())
        {
            this.createReverseProjItemTransCost(projItemTrans.ProjAdjustRefId, _projAdjRefId);
        }
        
        this.createReverseProjItemTransSale(projItemTrans.ProjTransId, projItemTransNew.ProjTransId);

        // The ProjItemTrans record gets updated after cost and sales records are inserted
        projItemTransNew.reread();

        // TotalCostAmountCur is not updated to the correct value if cost transaction is not created
        // Setting the TotalCostAmountCur value for the new buffer
        projItemTransNew.TotalCostAmountCur = -projItemTrans.TotalCostAmountCur;
        return projItemTransNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseProjItemTrans</Name>
				<Source><![CDATA[
    public ProjItemTrans createReverseProjItemTrans(ProjItemTrans _projItemTrans, ProjAdjustRefId _projAdjRefId)
    {
        ProjItemTrans projItemTransLoc;
        projItemTransLoc.data(_projItemTrans);
        projItemTransLoc.ProjTransId = ProjParameters::newTransId();
        projItemTransLoc.TotalCostAmountCur = 0;
        projItemTransLoc.TotalSalesAmountCur = 0;
        projItemTransLoc.Qty = -projItemTransLoc.Qty;
        projItemTransLoc.VoucherPackingSlip = ledgerVoucher.lastVoucher();
        projItemTransLoc.ProjAdjustRefId = _projAdjRefId;

        if (!projItemTransLoc.validateWrite())
        {
            throw error("@SYS21628");
        }

        projItemTransLoc.insert();

        return projItemTransLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseProjItemTransSale</Name>
				<Source><![CDATA[
    public void createReverseProjItemTransSale(ProjTransIdBase _projTransId, ProjTransIdBase _projTransIdNew)
    {
        ProjItemTransSale projItemTransSale;
        ProjItemTransSale projItemTransSaleNew;

        while select projItemTransSale
            where projItemTransSale.ProjTransId == _projTransId
        {
            projItemTransSaleNew.data(projItemTransSale);
            projItemTransSaleNew.LedgerSalesAmount = -projItemTransSale.LedgerSalesAmount;
            projItemTransSaleNew.LineAmount = -projItemTransSale.LineAmount;
            projItemTransSaleNew.ProjTransId = _projTransIdNew;
            projItemTransSaleNew.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseProjItemTransCost</Name>
				<Source><![CDATA[
    public void createReverseProjItemTransCost(ProjAdjustRefId _projAdjustRefId, ProjAdjustRefId _projAdjustRefIdNew)
    {
        ProjItemTransCost projItemTransCost;
        ProjItemTransCost projItemTransCostNew;

        while select projItemTransCost
            where projItemTransCost.InventTransId == salesLine.InventTransId
            && projItemTransCost.ProjAdjustRefId == _projAdjustRefId
        {
            projItemTransCostNew.data(projItemTransCost);
            projItemTransCostNew.AmountMST = -projItemTransCost.AmountMST;
            projItemTransCostNew.LineAmount = -projItemTransCost.LineAmount;
            projItemTransCostNew.LedgerCostAmountMST = -projItemTransCost.LedgerCostAmountMST;
            projItemTransCostNew.Voucher = ledgerVoucher.lastVoucher();
            projItemTransCostNew.ProjAdjustRefId = _projAdjustRefIdNew;
            projItemTransCostNew.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesPackingSlipJournalPostProj construct()
    {
        return new SalesPackingSlipJournalPostProj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRevenueBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the Committed budget of project Item Requirement of non-stocked item.
    /// Post the Committed budget of project Item Requirement of stocked items when cancellation feature is on.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMov_Sales</c> object.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object.
    /// </param>
    private void updateRevenueBudget(InventMov_Sales _inventMovement, LedgerVoucher _ledgerVoucher)
    {
        if (_inventMovement.mustBeCostControlled() && _inventMovement.canCommittedCostBeReversed())
        {
            if (!salesLine.isStocked() || _inventMovement.canItemReqBeCancelled())
            {
                CostControlPostingItem costControlPostingItem = CostControlPosting::newCostControlPostingItem(_inventMovement);
                costControlPostingItem.parmLedgerVoucher(_ledgerVoucher);
                costControlPostingItem.parmSalesParmLine(salesParmLine);
                costControlPostingItem.run(ProjCommittedCostUpdateAction::Post);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>