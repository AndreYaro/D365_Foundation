<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTable2LineField</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchTable2LineField extends SalesPurchTableToLineField
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findParametersTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record in the <c>PurchTable2LineParameters</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// The key field for the <c>PurchTable2LineParameters</c> table.
    /// </param>
    /// <param name="_update">
    /// true if the record will be updated or deleted; otherwise, false
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesPurchTableToLineParameters</c> map that represents a record in the
    /// <c>PurchTable2LineParameters</c> table.
    /// </returns>
    protected SalesPurchTableToLineParameters findParametersTable(fieldId _fieldId, boolean _update = false)
    {
        return PurchTable2LineParameters::find(_fieldId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a user friendly description of a field that is used in the header to lines update.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that is used in the header to lines update.
    /// </param>
    /// <returns>
    /// A user friendly description of the field that is used in the header to lines update.
    /// </returns>
    protected FieldLabel getFieldDescription(FieldId _fieldId)
    {
        FieldLabel      description;
        PriceParameters priceParameters;
        // <GIN>
        #ISOCountryRegionCodes
        TaxWithholdParameters_IN    taxWithholdParameters;
        boolean                     countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
        TableId         tableId     = PurchTable::internalFieldIdToTableId_W(_fieldId);
        FieldId         realFieldId = PurchTable::internalFieldIdToFieldId_W(_fieldId);

        _fieldId = fieldExt2Id(_fieldId);

        // <GIN>
        if (countryRegion_IN)
        {
            taxWithholdParameters = TaxWithholdParameters_IN::find();
        }
        // </GIN>

        if (tableId == tableNum(PurchTable_W))
        {
            switch (realFieldId)
            {
                case fieldnum(PurchTable_W, tdsGroup_IN)      :
                    if (countryRegion_IN
                        && taxWithholdParameters.tdsActivate)
                    {
                        return fieldid2pname(tablenum(PurchLine_IN), fieldnum(PurchLine_IN, tdsGroup));
                    }
                    break;

                case fieldnum(PurchTable_W, tcsGroup_IN)      :
                    if (countryRegion_IN
                        && taxWithholdParameters.tcsActivate)
                    {
                        return fieldid2pname(tablenum(PurchLine_IN), fieldnum(PurchLine_IN, tcsGroup));
                    }
                    break;
            }

        }
        // <GEERU>
        else if (tableId == tableNum(PurchTable_RU))
        {
            switch (realFieldId)
            {
                case fieldnum(PurchTable_RU, InventProfileId_RU)          :
                    return fieldid2pname(tablenum(PurchTable_RU), fieldnum(PurchTable_RU, InventProfileId_RU));

                case fieldNum(PurchTable_RU, PriceAgreementDate_RU) :
                    return fieldid2pname(tablenum(PurchTable_RU), fieldnum(PurchTable_RU, PriceAgreementDate_RU));
            }
        }
        // </GEERU>
        switch (_fieldId)
        {
            case fieldnum(PurchTable, OrderAccount)       :
                priceParameters = PriceParameters::find();
                if (priceParameters.isPurchPriceVendAccountActive())
                {
                    description = strfmt("@SYS26868", fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, PurchPrice)),
                                                                fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, DeliveryDate)));
                }
                if (priceParameters.isPurchLineDiscVendAccountActive())
                {
                    if (description)
                    {
                        description = strfmt("@SYS26868", description,
                                                strfmt("@SYS26868", fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, LineDisc)),
                                                                    fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, LinePercent))));
                    }
                    else
                    {
                        description = strfmt("@SYS26868", fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, LineDisc)),
                                                                    fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, LinePercent)));
                    }
                }
                if (description)
                {
                    description = strfmt("@SYS26868", description, tableid2pname(tablenum(MarkupTable)));
                }
                else
                {
                    description = tableid2pname(tablenum(MarkupTable));
                }

                return strfmt("@SYS62815", description, fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, ExternalItemId)));

            case fieldnum(PurchTable, TaxGroup)         :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, TaxGroup));

            case fieldnum(PurchTable, OverrideSalesTax):
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, OverrideSalesTax));

            case fieldnum(PurchTable, DefaultDimension)        :
                return "@SYS14926";

            case fieldnum(PurchTable, AccountingDistributionTemplate) :
                return "@SYS30829";

            case fieldnum(PurchTable, InventLocationId) :
                return "@SYS108782";

            case fieldnum(PurchTable, TransactionCode)  :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, TransactionCode));

            case fieldnum(PurchTable, Transport)        :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, Transport));

            case fieldnum(PurchTable, Port)             :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, Port));

            case fieldnum(PurchTable, StatProcId)       :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, StatProcId));

            case fieldnum(PurchTable, PriceGroupId)     :
                return strfmt("@SYS62815", fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, PurchPrice)),
                                                             fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, DeliveryDate)));

            case fieldnum(PurchTable, LineDisc)         :
                return strfmt("@SYS62815", fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, LineDisc)),
                                                             fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, LinePercent)));

            case fieldnum(PurchTable, MarkupGroup)      :
                return tableid2pname(tablenum(MarkupTable));

            case fieldnum(PurchTable, DeliveryDate)     :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, DeliveryDate));

            case fieldnum(PurchTable, LanguageId)       :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, Name));

            case fieldnum(PurchTable, ConfirmedDlv)     :
                return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, ConfirmedDlv));

            // <GEEHU>
            case fieldnum(PurchTable, IntrastatFulfillmentDate_HU)          :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, IntrastatFulfillmentDate_HU));
                }
                return '';
            // </GEEHU>
        }
        
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            switch (_fieldId)
            {
                case fieldnum(PurchTable, RequestedShipDate):
                    return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, RequestedShipDate));
                case fieldnum(PurchTable, ConfirmedShipDate):
                    return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, ConfirmedShipDate));
                case fieldnum(PurchTable, ShipCalendarId):
                    return fieldid2pname(tablenum(PurchLine), fieldnum(PurchLine, ShipCalendarId));
            }
        }

        EventhandlerResult result = EventHandlerResult::newSingleResponse();
        this.getFieldDescriptionDelegate(_fieldId, result);

        if (result.hasResult())
        {
            return result.result();
        }

        throw error(strfmt("@SYS19306",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDescriptionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for retrieving a user friendly description of a field that is used in the header to lines update..
    /// </summary>
    /// <param name = "_fieldId">The field ID of the field that is used in the header to lines update.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object to return the user friendly description of the field that is used in the header to lines update.</param>
    delegate void getFieldDescriptionDelegate(FieldId _fieldId, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the header table for the document.
    /// </summary>
    /// <returns>
    /// The table ID of the header table for the document.
    /// </returns>
    public tableId tableId()
    {
        return PurchTable::internalFieldIdToTableId_W(fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public PurchTable2LineField construct(fieldId _fieldId)
    {
        PurchTable2LineField    purchTable2LineField;

        purchTable2LineField    = new PurchTable2LineField();
        purchTable2LineField.initFieldId(_fieldId);
        return purchTable2LineField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    static public PurchTable2LineField create(container packedClass)
    {
        PurchTable2LineField purchTable2LineField = new PurchTable2LineField();

        purchTable2LineField.unpack(packedClass);

        return purchTable2LineField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>