<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Asset_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(RAssetPurchTrans))]
final class InventMov_Asset_RU extends InventMovement
{
    InventTrans         inventTransOrig;
    InventTransId       inventTransId;
    InventQty           transQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
            }
        }
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
            }
        }
        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheAccountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount cacheAccountBalanceSheet(LedgerDimensionDefaultAccount _cacheAccountBalanceSheet = cacheAccountBalanceSheet)
    {
        cacheAccountBalanceSheet = _cacheAccountBalanceSheet;
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheAccountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount cacheAccountOperations(LedgerDimensionDefaultAccount _cacheAccountOperations = cacheAccountOperations)
    {
        cacheAccountOperations = _cacheAccountOperations;
        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    public boolean  canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotOverDelivery</Name>
				<Source><![CDATA[
    public boolean checkNotOverDelivery(InventQty _physicalNow, boolean _isPhysicalUpdate
        , PdsCWInventQty _cwQty = 0.0
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotSubDelivery</Name>
				<Source><![CDATA[
    public boolean checkNotSubDelivery(InventQty _physicalNow, InventQty _remainPhysicalNow, boolean _isPhysicalUpdate
        , PdsCWInventQty _cwQtyNow = 0.0
        , PdsCWInventQty _cwRemainPhysical = 0.0
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(InventUpd_Estimated    _updateNow,
                                        InventMovement         _this_Orig)
    {
        return super(_updateNow, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the set of financial dimensions to use when you post the asset.
    /// </summary>
    /// <returns>
    /// The set of financial dimensions.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        return inventTransOrig.dimensionFinancialDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return inventTransOrig.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId()
    {
        return  inventTransOrig.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>inventMovement</c> object must be auto-reserved.
    /// </summary>
    /// <returns>
    /// true if the <c>inventMovement</c> object must be auto-reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is often called together with the <c>canBeReserved</c> method, which returns a default
    /// Boolean value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean  mustBeAutoReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedFinancially()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RAssetPurchTrans  _assetPurchTrans,
                    InventType        _inventType = new InventType(_assetPurchTrans))
    {
        InventTransId    inventTransIdOrig = RAssetTable::find(_assetPurchTrans.AssetId).InventTransId;

        inventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        select firstonly inventTransOrig
            where inventTransOrig.InventTransOrigin == InventTransOriginPurchLine::findInventTransOriginId(_assetPurchTrans.DataAreaId, inventTransIdOrig)
               && inventTransOrig.StatusIssue       == StatusIssue::None
               && inventTransOrig.StatusReceipt     == StatusReceipt::Purchased;

        if (! inventTransOrig)
        {
            throw error("@SYS7229");
        }

        super(_assetPurchTrans, _inventType);
        transQty = -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventReceipt;
        }
        else
        {
            return LedgerPostingType::InventIssue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
            return LedgerPostingType::InventProfit;

        return LedgerPostingType::InventLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty   remainPhysical()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty   transQty(InventQty _transQty = transQty)
    {
        transQty = _transQty;
        return transQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::FixedAssets_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerAdjustSecCur_RU</Name>
				<Source><![CDATA[
    #define.BondLogLength(2)
    public void updateLedgerAdjustSecCur_RU(
        LedgerVoucher         _ledgerVoucher,
        InventUpd_Financial   _updateNow,
        CostAmountSecCur_RU   _costAmount,
        ProjAdjustRefId       _projAdjustRefId = '',
        ProjTransDate         _projTransDate  = dateNull())
    {
        if (!this.checkInventSiteDimension(this.inventdim()))
        {
            throw error("@SYS18447");
        }

        if (! _costAmount || !this.mustBeBookedOnhandSecCur_RU())
        {
            return;
        }

        if (!isTelemetryForSecCurSent)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00111, funcName());
            isTelemetryForSecCurSent = true;
        }

        LedgerVoucherObject voucherObjectSecCur = _ledgerVoucher.findOrCreateReferenceSecCur_RU();
        LedgerBondClient_RU ledgerBondClient = voucherObjectSecCur.ledgerBondClient_RU();

        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }

        if (this.mustBeBookedBalanceSheet())
        {
            voucherObjectSecCur.addTrans(
                LedgerVoucherTransObject::newBasicSecondary_RU(
                    voucherObjectSecCur,
                    this.postingBalanceSheet(),
                    LedgerDimensionFacade::serviceCreateLedgerDimension(this.accountBalanceSheet(), this.defaultDimension()),
                    CompanyInfoHelper::standardCurrency(),
                    _costAmount,
                    NoYes::No));
        }

        if (this.mustBeBookedOperations())
        {
            LedgerVoucherTransObject trans = LedgerVoucherTransObject::newBasicSecondary_RU(
                        voucherObjectSecCur,
                        this.postingOperations(),
                        LedgerDimensionFacade::serviceCreateLedgerDimension(this.accountOperations(), this.defaultDimension()),
                        CompanyInfoHelper::standardCurrency(),
                        -_costAmount,
                        NoYes::No);

            trans.parmProjLedger(
                ProjLedger::newInventCost(
                    this.projId(),
                    this.activityNumber(),
                    this.projCategoryId(),
                    this.transId(),
                    _projAdjustRefId,
                    this.projTransactionOrigin(),
                    this.projLedgerOrigin(),
                    this.itemId(),
                    false,
                    _projTransDate,
                    ProjItemTransCostType::Cost));

            voucherObjectSecCur.addTrans(trans);
        }

        if (ledgerBondClient)
        {
            if (ledgerBondClient.currentLogLength() == #BondLogLength)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
            }

            ledgerBondClient.removeCurrentLogObject();
        }

        _ledgerVoucher.restoreReferenceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRAssetPurchTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventMov_Asset_ru</c> class that is based on the specified
    /// record.
    /// </summary>
    /// <param name="_rAssetPurchTrans">
    /// The <c>RAssetPurchTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventMov_Asset_ru</c> class.
    /// </returns>
    public static InventMov_Asset_ru newFromRAssetPurchTrans(RAssetPurchTrans _rAssetPurchTrans)
    {
        return new InventMov_Asset_ru(_rAssetPurchTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>