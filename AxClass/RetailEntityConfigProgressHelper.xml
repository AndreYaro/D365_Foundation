<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEntityConfigProgressHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>RetailEntityConfigProgressHelper</c> provides helper methods to enable scenarios
/// associated with entity configuration validation and progress status.
/// </summary>
class RetailEntityConfigProgressHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTemplateDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container containing TemplateId of the template used for validation,
    /// and DMFEntityName of the entity which determines the instance type.
    /// Both are used by entity configuration validation framework to get the dependencies,
    /// which are validated for the RecId provided for instance.
    /// </summary>
    /// <Param name = "_aotEntityName">AOT name of entity</args>
    /// <returns>Container containing TemplateId and DMFEntityName in that order.</returns>
    public static Container getTemplateDetails(TableName _aotEntityName)
    {
        DMFDefinitionGroupName templateId = RetailSharedParameters::getEntityValidationTemplate();
        DMFEntityName dmfEntityName = DMFDefinitionGroupTemplateSourceEntity::getDMFEntityName(templateId, _aotEntityName);;

        return [templateId, dmfEntityName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParametersAsString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the DMFDGTemplateSourceEntityConfigProgressParameters, packs them and converts to string. This allows
    /// the parameters to be passed in as menu item parameter field.
    /// </summary>
    /// <param name = "_aotEntityName">AOT name of entity.</param>
    /// <param name = "_displayName">The display name for record that will be shown on the configuration progress forms.</param>
    /// <returns>Parameters packed as string.</returns>
    public static str getParametersAsString(TableName _aotEntityName, str _displayName = '')
    {
        DMFDGTemplateSourceEntityConfigProgressParameters parameters = DMFDGTemplateSourceEntityConfigProgressParameters::construct();

        DMFDefinitionGroupName templateId = RetailSharedParameters::getEntityValidationTemplate();
        parameters.paramTemplateId(templateId);

        DMFEntityName dmfEntityName = DMFDefinitionGroupTemplateSourceEntity::getDMFEntityName(templateId, _aotEntityName);;
        parameters.paramDMFEntityName(dmfEntityName);

        parameters.paramDisplayName(_displayName);

        return parameters.packToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs configuration validation for all instances of the entity.
    /// </summary>
    /// <param name = "_aotEntityName">AOT name of entity.</param>
    public static void refreshAll(TableName _aotEntityName)
    {
        DMFDefinitionGroupName templateId = RetailSharedParameters::getEntityValidationTemplate();
        DMFEntityName dmfEntityName = DMFDefinitionGroupTemplateSourceEntity::getDMFEntityName(templateId, _aotEntityName);;

        DMFDGTemplateSourceEntityConfigProgress::refresh(templateId, dmfEntityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntityValidationTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates entity validation template.
    /// </summary>
    /// <param name = "_templateId">Entity validation template id.</param>
    public static void createEntityValidationTemplate(DMFDefinitionGroupName _templateId)
    {
        DMFDefinitionGroupTemplate template;

        // Find defination group template.
        select firstonly template where template.TemplateId == _templateId;
        if (template.TemplateId)
        {
            //RetailVal template was not created since it already exists.
            //If the existing template needs to be reset, delete the existing template and reinitialize from the Retail parameters form.
            info ("@Retail:RetailEntityTemplateValidationMessage");

            return;
        }

        // Find AOT resource.
        ResourceNode resourceNode = SysResource::getResourceNode(resourceStr(RetailEntityValidationTemplate));

        if (resourceNode)
        {
            str tempFilePath;

            try
            {
                // Save the resource to a temporary file location.
                tempFilePath = SysResource::saveToTempFile(resourceNode);

                // Force initialize DMFParameters so that DMF default data are populated.
                DMFParameters::find(false, true, false);
                DMFDataPopulation::createDefaultData(true, true);  // Initialize and run async by default

                // Import the resource package for the template.
                DMFTemplatePackageImporter templateImporter = new DMFTemplatePackageImporter();
                templateImporter.importFromPackage(tempFilePath, _templateId);
                info("@Retail:DefaultTemplateImportedSuccessfully");
            }
            catch(Exception::CLRError)
            {
                throw error(strfmt("@Retail:DefaultTemplateImportFailed",AifUtil::getClrErrorMessage()));
            }
            finally
            {
                // delete the temporary file.
                if (tempFilePath)
                {
                    System.IO.File::Delete(tempFilePath);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>