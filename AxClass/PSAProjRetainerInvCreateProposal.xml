<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaProjRetainerInvCreateProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class creates invoice proposal for retention amount.
/// </summary>
class PsaProjRetainerInvCreateProposal
{
    ProjProposalJour            m_projProposalJour;
    PSATmpProjProposalTrans     m_tTmpProjProposalTrans;
    TransDate                   m_OnAccDate;
    ProjFundingSourceRefId      m_FundingSourceRefId;
    ProjId                      m_projId;

    int                         numOfProposalsCreated;
    List                        projProposalIdList;
    #ISOCountryRegionCodes
    private boolean             countryRegion_PL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProjProposalIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of proposal ID's created.
    /// </summary>
    /// <returns>
    /// A list of proposal ID's created.
    /// </returns>
    public List getProjProposalIdList()
    {
        return projProposalIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpProjProposal</Name>
				<Source><![CDATA[
    public PSATmpProjProposalTrans parmTmpProjProposal(PSATmpProjProposalTrans _tTmpProjProposalTrans = m_tTmpProjProposalTrans)
    {
        m_tTmpProjProposalTrans = _tTmpProjProposalTrans;

        return m_tTmpProjProposalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnAccDate</Name>
				<Source><![CDATA[
    public TransDate parmOnAccDate(TransDate _tOnAccDate = m_OnAccDate)
    {
        m_OnAccDate = _tOnAccDate;

        return m_OnAccDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingSourceRefId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmFundingSourceRefId(ProjFundingSourceRefId _tFundingSourceRefId = m_FundingSourceRefId)
    {
        m_FundingSourceRefId = _tFundingSourceRefId;

        return m_FundingSourceRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjOnAccTrans</c> record.
    /// </summary>
    /// <param name = "_tmpProjProposalTrans">
    /// An instance of <c>_tmpProjProposalTrans</c>.
    /// </param>
    /// <returns>
    /// The <c>ProjOnAccTrans</c> table buffer.
    /// </returns>
    protected ProjOnAccTrans initializeProjOnAccTrans(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        #ISOCountryRegionCodes

        ProjOnAccTrans projOnAccTrans;
        projOnAccTrans.initValue();
        projOnAccTrans.ProjID = _tmpProjProposalTrans.ProjId;
        projOnAccTrans.initFromProjTable(projOnAccTrans.ProjID);
        projOnAccTrans.ActivityNumber = _tmpProjProposalTrans.ActivityNumber;
        projOnAccTrans.TransDate = m_OnAccDate;
        projOnAccTrans.Description = _tmpProjProposalTrans.Txt;
        projOnAccTrans.TaxGroupId = _tmpProjProposalTrans.TaxGroupId;
        projOnAccTrans.TaxItemGroupId = _tmpProjProposalTrans.TaxItemGroupId;
        projOnAccTrans.psaRefRecIdBudgetTrans = _tmpProjProposalTrans.RefRecIdTrans;
        projOnAccTrans.psaRefTableIdBudgetTrans = _tmpProjProposalTrans.RefTableId;
        projOnAccTrans.TransactionOrigin = ProjOrigin::Prepayment;
        projOnAccTrans.psaIsOnAccount = NoYes::Yes;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ProjOnAccTransTaxExtensionIN projOnAccTransTaxExtensionIN = projOnAccTrans.projOnAccTransTaxExtensionIN();
            projOnAccTransTaxExtensionIN.AssessableValueTransactionCurrency = _tmpProjProposalTrans.InvoiceNow;

            projOnAccTrans.packProjOnAccTrans_IN(projOnAccTransTaxExtensionIN);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            projOnAccTrans.TaxServiceCodeId_BR = _tmpProjProposalTrans.TaxServiceCodeId_BR;
        }

        return projOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjOnAccTransDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjOnAccTrans</c> record used to track Prepayment deductions.
    /// </summary>
    /// <param name = "_tmpProjProposalTrans">
    /// An instance of <c>_tmpProjProposalTrans</c>.
    /// </param>
    /// <param name = "_prepaymentOnAccTransRefId">
    /// A reference to the prepayment <c>ProjOnAccTrans</c> record.
    /// </param>
    /// <returns>
    /// The <c>ProjOnAccTrans</c> table buffer.
    /// </returns>
    protected ProjOnAccTrans initializeProjOnAccTransDeduction(PSATmpProjProposalTrans _tmpProjProposalTrans, ProjOnAccTransRefRecId _prepaymentOnAccTransRefId)
    {
        ProjOnAccTrans projOnAccTrans;
        projOnAccTrans.initValue();
        projOnAccTrans.ProjID = _tmpProjProposalTrans.ProjId;
        projOnAccTrans.initFromProjTable(_tmpProjProposalTrans.ProjID);
        projOnAccTrans.ActivityNumber = _tmpProjProposalTrans.ActivityNumber;
        projOnAccTrans.TransDate = m_OnAccDate;
        projOnAccTrans.Description = _tmpProjProposalTrans.Txt;
        projOnAccTrans.psaRefRecIdBudgetTrans = _tmpProjProposalTrans.RefRecIdTrans;
        projOnAccTrans.psaRefTableIdBudgetTrans = _tmpProjProposalTrans.RefTableId;
        projOnAccTrans.TransactionOrigin = ProjOrigin::Deduction;
        projOnAccTrans.psaIsOnAccount = NoYes::Yes;
        projOnAccTrans.psaRefRecId = _prepaymentOnAccTransRefId;

        return projOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdvanceInvoice</Name>
				<Source><![CDATA[
    private void setAdvanceInvoice(ProjOnAccTrans _onAccTrans)
    {
        ProjAdvancesSettle settle = ProjAdvancesSettle::find(_onAccTrans.RecId);

        if (!settle)
        {
            ProjAdvancesSettle::createForOnAccTrans(_onAccTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOnAccTrans_insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in <c>ProjOnAccTrans</c> table.
    /// </summary>
    /// <param name="_tmpProjProposalTrans">
    /// A record in <c>_tmpProjProposalTrans</c> table.
    /// </param>
    /// <returns>
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </returns>
    public ProjOnAccTrans projOnAccTrans_insert(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        #ISOCountryRegionCodes

        ProjOnAccTrans projOnAccTrans = this.initializeProjOnAccTrans(_tmpProjProposalTrans);
        ProjOnAccTrans::createOnAccTrans(projOnAccTrans, _tmpProjProposalTrans.InvoiceNow, false, m_FundingSourceRefId, false, false);
        
        if (countryRegion_PL)
        {
            this.setAdvanceInvoice(projOnAccTrans);
        }

        ProjOnAccTrans projOnAccTransDeduction = this.initializeProjOnAccTransDeduction(_tmpProjProposalTrans, projOnAccTrans.RecId);
        projOnAccTransDeduction.selectForUpdate(true);
        projOnAccTransDeduction.insert();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ProjOnAccTransTaxExtensionIN projOnAccTransTaxExtensionIN;

            ttsbegin;
            projOnAccTransTaxExtensionIN = ProjOnAccTransTaxExtensionIN::findByProjOnAccTrans(projOnAccTransDeduction.RecId, true);
            if (projOnAccTransTaxExtensionIN)
            {
                projOnAccTransTaxExtensionIN.AssessableValueTransactionCurrency = -_tmpProjProposalTrans.InvoiceNow;
                projOnAccTransTaxExtensionIN.update();
            }
            else
            {
                projOnAccTransTaxExtensionIN.AssessableValueTransactionCurrency = -_tmpProjProposalTrans.InvoiceNow;
                projOnAccTransTaxExtensionIN.ProjOnAccTrans = projOnAccTransDeduction.RecId;
                projOnAccTransTaxExtensionIN.insert();
            }
            ttscommit;
        }
        // </GIN>

        ProjOnAccTransSale projOnAccTransSale;
        while select projOnAccTransSale
            where projOnAccTransSale.TransId == projOnAccTrans.TransId
        {
            ProjOnAccTransSale projOnAccTransSaleLoc;
            projOnAccTransSaleLoc.data(projOnAccTransSale);
            projOnAccTransSaleLoc.TransId = projOnAccTransDeduction.TransId;
            projOnAccTransSaleLoc.Amount = -projOnAccTransSale.Amount;
            projOnAccTransSaleLoc.LedgerSalesAmount = -projOnAccTransSale.LedgerSalesAmount;
            projOnAccTransSaleLoc.insert();
        }

        return projOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is the entry point for creating retention related invoice proposal.
    /// </summary>
    /// <returns>
    /// An integer value indicating the numbr of proposals created.
    /// </returns>
    public int run()
    {
        ProjInvoiceProposalCreateLines          createLines;
        ProjInvoiceProposalInsertLines          insertLines;
        ProjInvoiceProposalCreateLinesParams    lineParam;
        ProjOnAccTrans                          projOnAccTrans;
        ProjOnAccTransSale                      projOnAccTransSale;
        PSATmpProjProposalTrans                 tmpProposalTransLocal;

        while select m_tTmpProjProposalTrans
        {
            if (m_tTmpProjProposalTrans.InvoiceNow)
            {
                if (!ProjControlDeductionCalculationFlight::instance().isEnabled() && ProjTable::find(m_tTmpProjProposalTrans.ProjId).type == ProjType::FixedPrice)
                {
                    throw error("@Proj:FixedPriceNoAdvance");
                }
                projOnAccTrans = this.projOnAccTrans_insert( m_tTmpProjProposalTrans);
                m_tTmpProjProposalTrans.RefRecIdTrans = projOnAccTrans.RecId;
                m_tTmpProjProposalTrans.RefTableId    = projOnAccTrans.TableId;
                m_tTmpProjProposalTrans.update();
                while select FundingSource, RecId from projOnAccTransSale where projOnAccTransSale.TransId == projOnAccTrans.TransId
                {
                    if (ProjFundingSource::isExternalFunding(projOnAccTransSale.FundingSource))
                    {
                        tmpProposalTransLocal.initFromProjOnAccTrans(projOnAccTrans);
                        tmpProposalTransLocal.FundingSourceRefId = projOnAccTransSale.FundingSource;
                        tmpProposalTransLocal.RefTableId         = projOnAccTransSale.TableId;
                        tmpProposalTransLocal.RefRecId           = projOnAccTransSale.RecId;
                        tmpProposalTransLocal.insert();

                        numOfProposalsCreated++;
                    }
                }
            }
        }

        lineParam   = ProjInvoiceProposalCreateLinesParams::construct();
        lineParam.parmInvoiceDate(m_OnAccDate);

        createLines = ProjInvoiceProposalCreateLines::newStandard(lineParam.pack());
        createLines.parmProposalTransCreate(tmpProposalTransLocal);

        insertLines = new ProjInvoiceProposalInsertLines(createLines, false);

        if (countryRegion_PL)
        {
            insertLines.parmAdvanceInvoicePosting(NoYes::Yes);
        }

        insertLines.runOperation();
        projProposalIdList = insertLines.getProposalIdList();

        return numOfProposalsCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@PSA920";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>