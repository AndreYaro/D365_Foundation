<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOutPaymReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustVendOutPaymReport_RU extends RunBaseBatch implements BatchRetryable
{
    Common                  callerRecord;
    BankPaymentOrderJour_RU paymentOrderJour;
    CustVendOutPaym         custVendOutPaym;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerRecord</Name>
				<Source><![CDATA[
    public Common parmCallerRecord(Common _callerRecord = callerRecord)
    {
        callerRecord = _callerRecord;
        return callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendOutPaym</Name>
				<Source><![CDATA[
    public CustVendOutPaym parmCustVendOutPaym(CustVendOutPaym _custVendOutPaym = custVendOutPaym)
    {
        custVendOutPaym = _custVendOutPaym;
        return custVendOutPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentOrderJour</Name>
				<Source><![CDATA[
    public BankPaymentOrderJour_RU parmPaymentOrderJour(BankPaymentOrderJour_RU _paymentOrderJour = paymentOrderJour)
    {
        paymentOrderJour = _paymentOrderJour;
        return paymentOrderJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BankAccountTrans         bankAccountTrans;
        LedgerJournalTrans       ledgerJournalTrans;
        ListEnumerator           enumOutPaymRecords;
        CustVendOutPaymRecord    outPaymRecord;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00036, funcName());
        if (custVendOutPaym)
        {
            enumOutPaymRecords = custVendOutPaym.getOutPaymRecords().getEnumerator();
            if (enumOutPaymRecords.moveNext())
            {
                outPaymRecord      = enumOutPaymRecords.current();
                ledgerJournalTrans = outPaymRecord.parmCustVendPaym().ledgerJournalTrans();
                ledgerJournalTrans.reread();
                paymentOrderJour   = ledgerJournalTrans.bankPaymentOrderJour_RU();
            }
        }
        else
        {
            switch (callerRecord.TableId)
            {
                case tableNum(BankAccountTrans) :
                    bankAccountTrans = callerRecord;

                    select firstonly paymentOrderJour
                        where paymentOrderJour.PaymentOrderNum == bankAccountTrans.PaymReference &&
                              paymentOrderJour.Voucher         == bankAccountTrans.Voucher;
                    break;

                case tableNum(BankPaymentOrderJour_RU) :
                    paymentOrderJour = callerRecord;
                    break;

                case tableNum(LedgerJournalTrans) :
                    ledgerJournalTrans = callerRecord;
                    paymentOrderJour   = ledgerJournalTrans.bankPaymentOrderJour_RU();
                    break;
            }
        }

        if (! paymentOrderJour)
            throw error(strFmt("@GLS102329", ledgerJournalTrans.Voucher));

        switch (paymentOrderJour.PaymOrderType)
        {
            case PaymOrderType_RU::MST:
                CustVendOutPaymWord_MST_RU::construct(this).run();
                break;

            case PaymOrderType_RU::Cur:
                new CustVendOutPaymWord_RU(this).run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS54166";
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str reportName()
    {
        return 'PaymentOrderReport';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendOutPaymReport_RU    custVendOutPaymReport;

        custVendOutPaymReport = new CustVendOutPaymReport_RU();
        custVendOutPaymReport.getLast();

        if (_args.record())
        {
            switch (_args.dataset())
            {
                case tableNum(LedgerJournalTrans):
                case tableNum(BankAccountTrans):
                case tableNum(BankPaymentOrderJour_RU):
                    custVendOutPaymReport.parmCallerRecord(_args.record());
                    break;

                default :
                    throw error(strFmt("@SYS25538", classId2Name(classIdGet(custVendOutPaymReport))));
            }
        }
        else
        {
            custVendOutPaymReport.parmCustVendOutPaym(_args.caller());
        }

        custVendOutPaymReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>