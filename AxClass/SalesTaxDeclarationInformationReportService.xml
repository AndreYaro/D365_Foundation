<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTaxDeclarationInformationReportService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>SalesTaxDeclarationInformationReportService</c> class is the report data provider for the <c>SalesTaxDeclarationInformation</c> report.
/// </summary>
public class SalesTaxDeclarationInformationReportService
{
    TmpTaxReport_HU     tmpTaxReport;
    ReportMode_W        reportMode;
    TaxReportJournal_W  taxReportJournal;
    boolean             includeUseTax;
    boolean             isReportApproved;
    Set                 relatedTaxTransSet;
    Set                 processedTaxTransSet, processedSourceSet;
    TaxParameters       taxParameters;
    SalesTaxDeclarationInfoReportContract dataContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findTmpTaxReportForUpdate</Name>
				<Source><![CDATA[
    private TmpTaxReport_HU findTmpTaxReportForUpdate(
        TaxCode _taxCode,
        TaxDirection _taxDirection,
        VATDueDate_W _vatDueDate,
        Voucher _voucher)
    {
        boolean isVatDueDateInPeriod = (_vatDueDate >= taxReportJournal.FromDate) ? true : false;

        select forupdate firstonly tmpTaxReport
            where (tmpTaxReport.TaxCode == _taxCode || taxParameters.ItemizedVATStatement_HU) &&
                (((_taxDirection == TaxDirection::IncomingTax_W || _taxDirection == TaxDirection::IncomingTax) &&
                        tmpTaxReport.TaxDirection == TaxDirection::IncomingTax) ||
                    ((_taxDirection == TaxDirection::OutgoingTax_W || _taxDirection == TaxDirection::OutgoingTax) &&
                        tmpTaxReport.TaxDirection == TaxDirection::OutgoingTax) ||
                    tmpTaxReport.TaxDirection == _taxDirection) &&
                tmpTaxReport.Transfer ==  isVatDueDateInPeriod &&
                tmpTaxReport.Voucher == _voucher;

        return tmpTaxReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesTaxDeclarationInformation</c> report data in the <c>TmpTaxReport_HU</c> table data set.
    /// </summary>
    /// <returns>
    /// The <c>TmpTaxReport_HU</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpTaxReport_HU getTmpTaxReport()
    {
        select tmpTaxReport;

        return tmpTaxReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxReport</Name>
				<Source><![CDATA[
    private void insertTmpTaxReport(TaxTrans _taxTrans, boolean  _searchRelatedTaxTrans = true)
    {
        Set relatedTaxTransSetLocal = tmpTaxReport.initFromTaxTrans(
                                                        _taxTrans,
                                                        taxReportJournal.FromDate,
                                                        taxParameters.ItemizedVATStatement_HU ? taxReportJournal.ToDate : taxReportJournal.ReportedDate,
                                                        reportMode,
                                                        _searchRelatedTaxTrans,
                                                        !dataContract.parmIncludeForeignTrade());

        if (taxParameters.ItemizedVATStatement_HU)
        {
            relatedTaxTransSet = Set::union(relatedTaxTransSet, relatedTaxTransSetLocal);
            processedSourceSet.add([_taxTrans.SourceTableId, _taxTrans.SourceRecId]);
        }

        tmpTaxReport.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxReportForVATTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts another tax amount with the opposite sign so that the tax amount would be zero for value-added tax.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertTmpTaxReportForVATTaxAmount()
    {
        NoYes applyUSTaxationRules = taxParameters.PurchTaxOnOperations;

        if (tmpTaxReport.TaxDirection == TaxDirection::UseTax && !applyUSTaxationRules)
        {
            tmpTaxReport.TaxAmount = -tmpTaxReport.TaxAmount;
            tmpTaxReport.TaxBaseAmount = 0;
            tmpTaxReport.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxLineReportingRequired</Name>
				<Source><![CDATA[
    private boolean isTaxLineReportingRequired(TaxTrans _taxTrans)
    {
        boolean                 isTaxLineReportingRequired;

        if (_taxTrans.netTaxAmountMST())
        {
            TaxTransRefundableVAT taxTransRefundableVAT = TaxTransRefundableVAT::findByTaxTrans(_taxTrans.RecId);

            if (taxTransRefundableVAT)
            {
                if (taxTransRefundableVAT.ReportingDate)
                {
                    // Check whether the tax line reported date is the same as the current tax report journal reporting date.
                    isTaxLineReportingRequired = taxReportJournal.Updated &&
                        (taxTransRefundableVAT.ReportingDate == taxReportJournal.ReportedDate);
                }
                else
                {
                    // The tax line has not been reported or has been reported but not yet approved.
                    if (_taxTrans.taxTrans_W().VatDueDate_W >= taxReportJournal.FromDate)
                    {
                        isTaxLineReportingRequired = true;
                    }
                    else
                    {
                        if (taxTransRefundableVAT.SettleDate &&
                            taxTransRefundableVAT.SettleDate <= taxReportJournal.ReportedDate &&
                            ((includeUseTax && _taxTrans.TaxDirection == TaxDirection::UseTax) ||
                                _taxTrans.TaxDirection == TaxDirection::IncomingTax ||
                                _taxTrans.TaxDirection == TaxDirection::IncomingTax_W))
                        {
                            isTaxLineReportingRequired = true;
                        }
                    }
                }
            }
        }

        return isTaxLineReportingRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    public void new()
    {
        super();
        taxParameters = TaxParameters::find();
        processedSourceSet = new Set(Types::Container); // this set contains sourceTableId and sourceRecId from processed TaxTrans.
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFillTmpTableItemized</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to add tax transactions which were not included in the query to the temporary table in case of itemized VAT statement is chosen in the tax parameters.
    /// </summary>
    private void postFillTmpTableItemized()
    {
        TmpTaxReport_HU     tmpTaxReport1, tmpTaxReport2;
        Set                 taxTransToAddSet, dirPartyToDelSet;
        TaxTrans            taxTrans;

        str CurrencyCode = 'HUF';
        AmountMST itemizedVATStatementLimit;

        // removing from the relatedTaxTransSet transactions which were already included in the query and therefore processed.
        taxTransToAddSet = Set::difference(relatedTaxTransSet, processedTaxTransSet);
        SetEnumerator se = taxTransToAddSet.getEnumerator();

        // adding missing related transactions to the temporary table, because they have to be shown in spite of they are not in the query
        while (se.moveNext())
        {
            select firstonly taxTrans
                where taxTrans.RecId == se.current();

            tmpTaxReport = this.findTmpTaxReportForUpdate(taxTrans.TaxCode, taxTrans.TaxDirection, taxTrans.taxTrans_W().VatDueDate_W, taxTrans.Voucher);

            if (tmpTaxReport)
            {
                this.updateTmpTaxReport(tmpTaxReport, taxTrans, false);
            }
            else
            {
                this.insertTmpTaxReport(taxTrans, false);
            }
        }

        tmpTaxReport1.setTmpData(tmpTaxReport);
        tmpTaxReport2.setTmpData(tmpTaxReport);

        // determining if the tax amount exceeds the limit before or after the correction.
        // setting the sign 'ExceedsTheLimit' for the original transaction and all related transactions because they have to be shown on the same page.
        while select tmpTaxReport
            where tmpTaxReport.ExceedsTheLimit == NoYes::No
               && tmpTaxReport.IsOriginal
        {
            select sum(TaxAmount) from tmpTaxReport1
                where tmpTaxReport1.OriginalInvoiceRefRecId == tmpTaxReport.InvoiceRefRecId
                   && tmpTaxReport1.TaxDirection            == tmpTaxReport.TaxDirection
                   && tmpTaxReport1.RecId                   != tmpTaxReport.RecId;

            if (taxParameters.ItemizedVATStatementLimit_HU && tmpTaxReport.SourceCurrencyCode != CurrencyCode)
            {
                itemizedVATStatementLimit = CurrencyExchangeHelper::curAmount2CurAmount(taxParameters.ItemizedVATStatementLimit_HU, CurrencyCode, tmpTaxReport.SourceCurrencyCode, tmpTaxReport.TransDate);
            }
            else
            {
                itemizedVATStatementLimit = taxParameters.ItemizedVATStatementLimit_HU;
            }

            if (   (abs(tmpTaxReport.TaxAmount) >= itemizedVATStatementLimit)
                || (abs(tmpTaxReport.TaxAmount + tmpTaxReport1.TaxAmount) >= itemizedVATStatementLimit))
            {
                tmpTaxReport.ExceedsTheLimit = NoYes::Yes;
                tmpTaxReport.update();

                while select tmpTaxReport1
                    where tmpTaxReport1.OriginalInvoiceRefRecId == tmpTaxReport.InvoiceRefRecId
                       && tmpTaxReport1.TaxDirection            == tmpTaxReport.TaxDirection
                       && tmpTaxReport1.RecId                   != tmpTaxReport.RecId
                {
                    tmpTaxReport1.ExceedsTheLimit   = NoYes::Yes;
                    tmpTaxReport1.ExcludeFromTotals = tmpTaxReport1.TransDate < taxReportJournal.FromDate ? NoYes::Yes : NoYes::No;
                    tmpTaxReport1.update();
                }
            }
        }

        dirPartyToDelSet = new Set(Types::Int64);

        // removing invoice accounts if total amount before and after correction is less than the limit.
        while select tmpTaxReport
            group by DirPartyRecId
        {
            select firstonly tmpTaxReport1
                where tmpTaxReport1.DirPartyRecId == tmpTaxReport.DirPartyRecId
                   && tmpTaxReport1.ExceedsTheLimit;

            if (! tmpTaxReport1)
            {
                select sum(TaxAmount) from tmpTaxReport1
                    where tmpTaxReport1.DirPartyRecId           == tmpTaxReport.DirPartyRecId
                       && tmpTaxReport1.OriginalInvoiceRefRecId == tmpTaxReport1.InvoiceRefRecId
                       && tmpTaxReport1.TaxDirection            == TaxDirection::IncomingTax;

                select sum(TaxAmount) from tmpTaxReport2
                    where tmpTaxReport2.DirPartyRecId           == tmpTaxReport.DirPartyRecId
                       && tmpTaxReport2.OriginalInvoiceRefRecId != tmpTaxReport2.InvoiceRefRecId
                       && tmpTaxReport2.TaxDirection            == TaxDirection::IncomingTax;

                if (   (abs(tmpTaxReport1.TaxAmount) < taxParameters.ItemizedVATStatementLimit_HU)
                    && (abs(tmpTaxReport1.TaxAmount + tmpTaxReport2.TaxAmount) < taxParameters.ItemizedVATStatementLimit_HU))
                {
                    dirPartyToDelSet.add(tmpTaxReport.DirPartyRecId);
                }
            }
        }

        se = dirPartyToDelSet.getEnumerator();

        while (se.moveNext())
        {
            delete_from tmpTaxReport
                where tmpTaxReport.DirPartyRecId == se.current();
        }

        // if the original invoice is shown in the correction section (#2 or #4) it has to be shown also in the non-correction section (#1 or #3 correspondingly).
        while select tmpTaxReport
            where tmpTaxReport.IsOriginal
              && (tmpTaxReport.SectionNo == 2 || tmpTaxReport.SectionNo == 4)
        {
            if (tmpTaxReport.TransDate >= taxReportJournal.FromDate)
            {
                tmpTaxReport1.clear();
                buf2buf(tmpTaxReport, tmpTaxReport1);
                tmpTaxReport1.SectionNo -= 1;
                tmpTaxReport1.insert();
            }

            // original invoices in the correction sections should not be added to totals.
            tmpTaxReport.ExcludeFromTotals = NoYes::Yes;
            tmpTaxReport.update();
        }

        // if the total sum of sections 3 and 4 of the current period is less than the limit, we should not show purchase invoices not exceeding the limit
        while select tmpTaxReport
            group by DirPartyRecId
        {
            select sum(TaxAmount) from tmpTaxReport1
                where tmpTaxReport1.DirPartyRecId == tmpTaxReport.DirPartyRecId
                 && ( tmpTaxReport1.SectionNo     == 3
                   || tmpTaxReport1.SectionNo     == 4)
                 && tmpTaxReport1.TransDate       >= taxReportJournal.FromDate
                 && tmpTaxReport1.ExcludeFromTotals == NoYes::No;

            if (abs(tmpTaxReport1.TaxAmount) < taxParameters.ItemizedVATStatementLimit_HU)
            {
                delete_from tmpTaxReport1
                    where tmpTaxReport1.DirPartyRecId == tmpTaxReport.DirPartyRecId
                     && ( tmpTaxReport1.SectionNo     == 3
                       || tmpTaxReport1.SectionNo     == 4)
                     && tmpTaxReport1.ExceedsTheLimit   == NoYes::No
                     && tmpTaxReport1.ExcludeFromTotals == NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportQuery</Name>
				<Source><![CDATA[
    private Query prepareReportQuery()
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(TaxTrans));
        queryBuildDataSource.addRange(fieldnum(TaxTrans, TaxPeriod)).value(SysQuery::value(taxReportJournal.TaxPeriod));
        queryBuildDataSource.addRange(fieldnum(TaxTrans, TaxDirection)).value(SysQuery::value(TaxDirection::IncomingTax));
        queryBuildDataSource.addRange(fieldnum(TaxTrans, TaxDirection)).value(SysQuery::value(TaxDirection::OutgoingTax));
        queryBuildDataSource.addRange(fieldNum(TaxTrans, TaxOrigin)).value(SysQuery::valueNot(TaxOrigin::TaxReporting));

        if (includeUseTax)
        {
            queryBuildDataSource.addRange(fieldnum(TaxTrans, TaxDirection)).value(SysQuery::value(TaxDirection::UseTax));
        }

        if (reportMode == ReportMode_W::Reporting)
        {
            queryBuildDataSource.addRange(fieldnum(TaxTrans, TaxDirection)).value(SysQuery::value(TaxDirection::IncomingTax_W));
            queryBuildDataSource.addRange(fieldnum(TaxTrans, TaxDirection)).value(SysQuery::value(TaxDirection::OutgoingTax_W));
        }

        queryBuildDataSource = TaxTrans::addDataSource(queryBuildDataSource, tableNum(TaxTrans_W));
        queryBuildDataSource.addRange(fieldNum(TaxTrans_W, VatDueDate_W)).value(SysQuery::range(taxReportJournal.FromDate, taxReportJournal.ToDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processReport()
    {
        if (dataContract && dataContract.parmTaxReportJournalId())
        {
            taxReportJournal = TaxReportJournal_W::find(dataContract.parmTaxReportJournalId());
            isReportApproved = dataContract.parmIsApproved();
            includeUseTax = dataContract.parmIncludeUseTax();
            reportMode = dataContract.parmReportMode();

            Query query = this.prepareReportQuery();
            QueryRun queryRun = new QueryRun(query);

            ttsBegin;

            if (taxParameters.ItemizedVATStatement_HU)
            {
                processedTaxTransSet    = new Set(Types::Int64);
                relatedTaxTransSet      = new Set(Types::Int64);
            }

            boolean isAnyTaxLineReportingRequired;
            while (queryRun.next())
            {
                TaxTrans taxTrans = queryRun.get(tablenum(TaxTrans));

                if (this.isTaxLineReportingRequired(taxTrans))
                {
                    isAnyTaxLineReportingRequired = true;
                    if (taxParameters.ItemizedVATStatement_HU)
                    {
                        // remembering all processed tax transactions gotten from the query.
                        processedTaxTransSet.add(taxTrans.RecId);
                    }

                    tmpTaxReport = this.findTmpTaxReportForUpdate(taxTrans.TaxCode, taxTrans.TaxDirection, taxTrans.taxTrans_W().VatDueDate_W, taxTrans.Voucher);

                    if (tmpTaxReport)
                    {
                        this.updateTmpTaxReport(tmpTaxReport, taxTrans);
                    }
                    else
                    {
                        this.insertTmpTaxReport(taxTrans);
                    }

                    this.updateReportingDateForTaxLine(taxTrans);

                    this.insertTmpTaxReportForVATTaxAmount();
                }
            }

            if (isAnyTaxLineReportingRequired)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00007, funcName());
            }

            if (taxParameters.ItemizedVATStatement_HU)
            {
                this.postFillTmpTableItemized();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingDateForTaxLine</Name>
				<Source><![CDATA[
    private void updateReportingDateForTaxLine(TaxTrans _taxTrans)
    {
        TaxTransRefundableVAT   taxTransRefundableVAT;

        if (isReportApproved)
        {
            update_recordSet taxTransRefundableVAT
                setting ReportingDate = taxReportJournal.ReportedDate
                where taxTransRefundableVAT.TaxTrans == _taxTrans.RecId &&
                    taxTransRefundableVAT.SettleDate &&
                    taxTransRefundableVAT.SettleDate <= taxReportJournal.ReportedDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmpTaxReport</Name>
				<Source><![CDATA[
    private void updateTmpTaxReport(TmpTaxReport_HU _tmpTaxReport, TaxTrans _taxTrans, boolean  _searchRelatedTaxTrans = true)
    {
        TmpTaxReport_HU tmpTaxReportLocal;
        if (taxParameters.ItemizedVATStatement_HU)
        {
            Set corrTaxTransSetLocal = tmpTaxReportLocal.initFromTaxTrans(
                                                                _taxTrans,
                                                                taxReportJournal.FromDate,
                                                                taxParameters.ItemizedVATStatement_HU ? taxReportJournal.ToDate : taxReportJournal.ReportedDate,
                                                                reportMode,
                                                                _searchRelatedTaxTrans);

            relatedTaxTransSet = Set::union(relatedTaxTransSet, corrTaxTransSetLocal);

            if (!processedSourceSet.in([_taxTrans.SourceTableId, _taxTrans.SourceRecId]))
            // if there are several TaxTrans records binded to one source we have to increase TaxBaseAmount only once.
            {
                _tmpTaxReport.TaxBaseAmount += tmpTaxReportLocal.TaxBaseAmount;
                processedSourceSet.add([_taxTrans.SourceTableId, _taxTrans.SourceRecId]);
            }
            _tmpTaxReport.TaxAmount += tmpTaxReportLocal.TaxAmount;
            // Use the sales tax exchange rate type exchange rate for reporting amounts in company currency for sales tax reporting.
            _tmpTaxReport.ExchRate = tmpTaxReportLocal.ExchRate;
            _tmpTaxReport.SectionNo = max(tmpTaxReport.SectionNo, tmpTaxReportLocal.SectionNo);
        }
        else
        if (_taxTrans.TaxDirection == TaxDirection::IncomingTax_W ||
            _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W)
        {
            tmpTaxReport.initFromTaxTrans(
                _taxTrans,
                taxReportJournal.FromDate,
                taxReportJournal.ReportedDate,
                reportMode);

            _tmpTaxReport.TaxBaseAmount += tmpTaxReport.TaxBaseAmount;
            _tmpTaxReport.TaxAmount += tmpTaxReport.TaxAmount;
            // Use the sales tax exchange rate type exchange rate for reporting amounts in company currency for sales tax reporting.
            _tmpTaxReport.ExchRate = tmpTaxReport.ExchRate;
        }
        else
        {
            container taxAmounts = TmpTaxReport_HU::getTaxAmounts(_taxTrans, reportMode, false, 0);

            _tmpTaxReport.TaxBaseAmount  += conPeek(taxAmounts, 1);
            _tmpTaxReport.TaxAmount      += conPeek(taxAmounts, 2);
        }

        _tmpTaxReport.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesTaxDeclarationInfoReportContract parmContract(SalesTaxDeclarationInfoReportContract _contract = dataContract)
    {
        dataContract = _contract;
        return dataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by service controller.
    /// </summary>
    /// <param name = "_dataContract">The report parameters.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run(SalesTaxDeclarationInfoReportContract _dataContract)
    {
        dataContract = _dataContract;

        this.processReport();

        this.runER();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by service controller.
    /// </summary>
    private void runER()
    {
        ERIModelDefinitionParamsAction parameters = new ERModelDefinitionParamsUIActionComposite()
                    .add(
                        new ERModelDefinitionDatabaseContext()
                            .addTemporaryTable(this.getTmpTaxReport()))
                    .add(
                        new ERModelDefinitionDatabaseContext()
                            .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()))
                   .add(
                        new ERModelDefinitionInputParametersAction()
                            .addParameter('ParameterReportMode', dataContract.parmReportMode()))
                    .add(
                        new ERModelDefinitionInputParametersAction()
                            .addParameter('model/ParameterFromDateRange',dataContract.parmTaxReportPeriodFromDate()))
                   .add(
                        new ERModelDefinitionInputParametersAction()
                            .addParameter('model/ParameterToDateRange', dataContract.parmTaxReportPeriodToDate()));

        // Call ER to generate the report.
        ERFormatMappingTable eRFormatMappingTable;
        select RecId from eRFormatMappingTable where eRFormatMappingTable.Name == "Sales tax declaration info report for HU";
        ERFormatMappingId formatMapping = eRFormatMappingTable.RecId;

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMapping)
            .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .withParameter(parameters)
                        .withCreatingObjectParameter(SalesTaxDeclarationInfoReportContract::parmERModelname(),
                                                     classStr(SalesTaxDeclarationInfoReportContract),
                                                     dataContract).run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>