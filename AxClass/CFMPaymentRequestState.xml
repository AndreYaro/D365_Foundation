<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides API to handle operations and statuses of payment requests.
/// This class is implementation of State pattern where each successor is implementation concrete status.
/// </summary>
/// <remarks>
/// Each class inherited from <c>CfmPaymentRequestState</c> is described concrete status. The initial state is constructed based on <c>CFMPaymentRequestTable</c> record.
/// There are two ways to use this class:
/// 1. call getNext method based on operation and get next available state or catch exception.
/// 2. validate that operation is allowed and then get next state; in this case if operation is not allowed class has method getValidationResultTxt which returns description of error.
/// </remarks>
abstract class CFMPaymentRequestState
{
    CFMPaymentRequestTable paymentRequestTable;
    str validationResulTxt;

    /// <summary>
    /// Instantiates state according to status of the payment request.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// Payment request record.
    /// </param>
    /// <param name="_status">
    /// Status that is used to define state. In most cases it is equal to status of passed payment request.
    /// </param>
    /// <returns>
    /// Instance of successor of <c>CFMPaymentRequestState</c>
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMPaymentRequestState construct(CFMPaymentRequestTable _paymentRequestTable, CFMPaymentRequestStatus _status)
    {
        CFMPaymentRequestState state = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPaymentRequestState), new CFMPaymentRequestStateAttribute(_status));

        state.init(_paymentRequestTable);

        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains logic to define next status of payment request based on operation.
    /// </summary>
    /// <param name="_operation">
    /// Operation on payment request.
    /// </param>
    /// <returns>
    /// Returns the next status of payment request.
    /// </returns>

    abstract protected CFMPaymentRequestStatus findNextStatus(CFMPaymentRequestStatusOperation _operation)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns new instance of successor of <c>CFMPaymentRequestState</c> class as new state as a result applying operation to the current state.
    /// </summary>
    /// <param name="_operation">
    /// Operation to be applied to the current state.
    /// </param>
    /// <returns>
    /// New state based on operation.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error exception if operation is not allowed.
    /// </exception>

    public CFMPaymentRequestState getNext(CFMPaymentRequestStatusOperation _operation)
    {
        CFMPaymentRequestStatus paymentRequestNewStatus;

        if (this.validateOperation(_operation))
        {
            paymentRequestNewStatus = this.findNextStatus(_operation);
        }
        else
        {
            throw error(validationResulTxt);
        }

        return CFMPaymentRequestState::construct(paymentRequestTable, paymentRequestNewStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationResultTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns text of error if validation fails.
    /// </summary>
    /// <returns>
    /// Text of error or empty string if there is no error.
    /// </returns>

    public str getValidationResultTxt()
    {
        return validationResulTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inititalizes state based on payment request.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// Payment request.
    /// </param>

    protected void init(CFMPaymentRequestTable _paymentRequestTable)
    {
        paymentRequestTable = _paymentRequestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperationApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether operation applicable to state or not.
    /// </summary>
    /// <param name="_operation">
    /// Operation to be applied.
    /// </param>
    /// <returns>
    /// Returns <c>True</c> if operation is allowed otherwise <c>False</c>.
    /// </returns>

    abstract protected boolean isOperationApplicable(CFMPaymentRequestStatusOperation _operation)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines status for the concrete instance of the successor of <c>CFMPaymentRequestState</c>
    /// </summary>
    /// <returns>
    /// Returns status of the payment request.
    /// </returns>

    abstract public CFMPaymentRequestStatus paymentRequestStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateOperationFailedTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines default error description for the state if operation is not allowed.
    /// </summary>
    /// <param name="_operation">
    /// Operation to be applied.
    /// </param>
    /// <returns>
    /// Text of error.
    /// </returns>

    protected str stateOperationFailedTxt(CFMPaymentRequestStatusOperation _operation)
    {
        return strFmt("@CashFlowManagement:OperationNotAllowForPaymentRequest", _operation, paymentRequestTable.PaymentRequestId, paymentRequestTable.Status, paymentRequestTable.WorkflowStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates operation to be applied to the current state.
    /// </summary>
    /// <param name="_operation">
    /// Operation to be applied to the current state.
    /// </param>
    /// <returns>
    /// <c>true</c> if operation is allowed to apply to this state, otherwise <c>false</c>
    /// </returns>
    /// <remarks>
    /// If method returns <c>False</c> the description of error is set up.
    /// </remarks>

    public boolean validateOperation(CFMPaymentRequestStatusOperation _operation)
    {
        boolean ret;
        validationResulTxt = "";

        ret = this.isOperationApplicable(_operation);

        if (!ret && strLen(validationResulTxt) == 0)
        {
            validationResulTxt = this.stateOperationFailedTxt(_operation);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>