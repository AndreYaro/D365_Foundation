<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSolutionConfigurationsExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class TaxSolutionConfigurationsExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GSTRTaxSolutionReportConfigurationsActiveModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(TaxSolutionConfigurations,TaxSolutionReportConfigurations, Active), FormDataFieldEventType::Modified)]
    public static void GSTRTaxSolutionReportConfigurationsActiveModified(FormDataObject dataField, FormDataFieldEventArgs e)
    {
        FormDataSource taxSolutionReportConfigurations_ds = dataField.dataSource();
        TaxSolutionReportConfigurations table = taxSolutionReportConfigurations_ds.cursor();
        taxSolutionReportConfigurations_ds.object(fieldNum(TaxSolutionReportConfigurations, ReportController)).enabled(table.Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxSolutionReportConfigurations_OnActivated</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(TaxSolutionConfigurations, TaxSolutionReportConfigurations), FormDataSourceEventType::Activated)]
    public static void TaxSolutionReportConfigurations_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        TaxSolutionReportConfigurations table = sender.cursor();
        sender.object(fieldNum(TaxSolutionReportConfigurations, ReportController)).enabled(table.Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxSolutionConfigurations_Post_init</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(TaxSolutionConfigurations), formMethodStr(TaxSolutionConfigurations, init))]
    public static void TaxSolutionConfigurations_Post_init(XppPrePostArgs args)
    {
        DictClass dictClass = new DictClass(classNum(TaxGSTRReportControllerBase_IN));
        List reportDateProvidersList = dictClass.extendedBy();
        ListEnumerator listEnumerator = reportDateProvidersList.getEnumerator();

        while (listEnumerator.moveNext())
        {
            DictClass dictClassDP = new DictClass(listEnumerator.current());

            TaxGSTRReportingControllerName_IN controllerName = dictClassDP.callObject(methodStr(TaxGSTRReportControllerBase_IN, getControllerName), dictClassDP.makeObject());
            TaxGSTRReportingControllers_IN reportControllers = TaxGSTRReportingControllers_IN::find(controllerName);
            if (!reportControllers)
            {
                reportControllers.ReportController = controllerName;
                reportControllers.ReportControllerClassID = listEnumerator.current();
                reportControllers.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxSolutionReportConfigurations_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add query for data source TaxSolutionReportConfigurations.
    /// </summary>
    /// <param name = "sender">The form data source.</param>
    /// <param name = "e">The form data source event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(TaxSolutionConfigurations, TaxSolutionReportConfigurations), FormDataSourceEventType::Initialized)]
    public static void TaxSolutionReportConfigurations_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        TaxSolutionScope taxSolutionScope;

        FormRun formRun = sender.formRun().args().caller();

        if (formRun)
        {
            List dsList = formRun.rootFormDataSources();

            if (dsList && dsList.elements() > 0)
            {
                ListEnumerator dsListEnumerator = dsList.getEnumerator();

                while (dsListEnumerator.moveNext())
                {
                    FormDataSource formDS = dsListEnumerator.current();
                    if (formDS.table() == tableNum(TaxSolutionScope))
                    {
                        taxSolutionScope = formDS.cursor();
                        break;
                    }
                }
            }
        }

        sender.query()
            .dataSourceTable(tableNum(TaxSolutionReportConfigurations))
            .addRange(fieldnum(TaxSolutionReportConfigurations, TaxSolutionScope))
            .value(queryValue(taxSolutionScope.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ERSolutionTable_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(TaxSolutionConfigurations, ERSolutionTable), FormDataSourceEventType::Initialized)]
    public static void ERSolutionTable_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        const str GSTRModelName = 'GST Returns model';
        const str GSTRModelGovName = 'GST Returns govt. model';

        container recIdCon = [0];

        System.Collections.Stack stack = new System.Collections.Stack();

        ERFormatMappingTable formatMappingTable;
        ERSolutionVersionTable solutionVersionTable, solutionVersionTableBase;
        ERSolutionTable solutionTable, solutionTableBase, solutionTableDerived;

        while select solutionTable
            exists join solutionVersionTable
                where solutionVersionTable.Solution == solutionTable.RecId
                    && (solutionVersionTable.Status == ERSolutionVersionStatus::Completed
                        || solutionVersionTable.Status == ERSolutionVersionStatus::Shared)
            exists join solutionVersionTableBase
                where solutionVersionTableBase.RecId == solutionTable.Base
                    && (solutionVersionTableBase.Status == ERSolutionVersionStatus::Completed
                        || solutionVersionTableBase.Status == ERSolutionVersionStatus::Shared)
            exists join solutionTableBase
                where solutionTableBase.RecId == solutionVersionTableBase.Solution
                    && (solutionTableBase.Name == GSTRModelName
                      || solutionTableBase.Name == GSTRModelGovName)
        {
            stack.Push(solutionTable.buf2con());
        }

        
        while (stack.Count != 0)
        {
            solutionTable = con2buf(stack.Pop());
            
            if (solutionTable)
            {
                while select solutionTableDerived
                    exists join solutionVersionTable
                        where solutionVersionTable.Solution == solutionTableDerived.RecId
                            && (solutionVersionTable.Status == ERSolutionVersionStatus::Completed
                                || solutionVersionTable.Status == ERSolutionVersionStatus::Shared)
                    exists join solutionVersionTableBase
                        where solutionVersionTableBase.RecId == solutionTableDerived.Base
                            && solutionVersionTableBase.Solution == solutionTable.RecId
                            && (solutionVersionTableBase.Status == ERSolutionVersionStatus::Completed
                                || solutionVersionTableBase.Status == ERSolutionVersionStatus::Shared)
                {
                    stack.Push(solutionTableDerived.buf2con());
                }
                
                select firstonly formatMappingTable
                    where formatMappingTable.Solution == solutionTable.RecId;

                if (formatMappingTable)
                {
                    recIdCon += queryValue(solutionTable.RecId);
                }
            }
        }

        sender.query()
            .dataSourceTable(tableNum(ERSolutionTable))
            .addRange(fieldnum(ERSolutionTable, RecId))
            .value(con2str(recIdCon, ','));
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxSolutionReportConfigurations_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(TaxSolutionConfigurations, TaxSolutionReportConfigurations), FormDataSourceEventType::SelectionChanged)]
    public static void TaxSolutionReportConfigurations_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (!sender.cursor().RecId)
        {
            TaxSolutionScope taxSolutionScope;

            FormRun formRun = sender.formRun().args().caller();

            if (formRun)
            {
                List dsList = formRun.rootFormDataSources();

                if (dsList && dsList.elements() > 0)
                {
                    ListEnumerator dsListEnumerator = dsList.getEnumerator();

                    while (dsListEnumerator.moveNext())
                    {
                        FormDataSource formDS = dsListEnumerator.current();
                        if (formDS.table() == tableNum(TaxSolutionScope))
                        {
                            taxSolutionScope = formDS.cursor();
                            break;
                        }
                    }
                }
            }

            for (int idx = 1; idx <= sender.formRun().dataSourceCount(); idx++)
            {
                FormDataSource dataSource = sender.formRun().dataSource(idx);
                str a = dataSource.name();

                if (dataSource.name() == identifierStr(ERSolutionTable)
                    && dataSource.table() == tableNum(ERSolutionTable))
                {
                    TaxSolutionReportConfigurations taxSolutionReportConfigurations = sender.cursor();
                    taxSolutionReportConfigurations.ERSolutionTable = dataSource.cursor().RecId;
                    taxSolutionReportConfigurations.TaxSolutionScope = taxSolutionScope.RecId;
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>