<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransSum</c> class is used to calculate quantities for each different status value for
/// a specified inventory movement.
/// </summary>
class InventTransSum
{
    List                    dimFieldList;

    InventTransOriginId     transOriginId;
    InventTransChildType    transChildType;
    InventTransChildRefId   transChildRefId;
    InventLocationId        inventLocationId;
    InventDim               inventDimCriteria;
    InventDimParm           inventDimParm;

    InventSum               inventSum;

    InventQty               inventPurchased;
    InventQty               inventSold;

    InventQty               inventReceiptInTotal;
    InventQty               inventIssueInTotal;

    InventQty               inventReceiptFinOpen;
    InventQty               inventIssueFinOpen;

    boolean                 perChildType;
    boolean                 perInventDim;
    boolean                 exclPackingSlipReturned;
    boolean                 cwItem;

    InventQty               cwInventPurchased;
    InventQty               cwInventSold;

    InventQty               cwInventReceiptInTotal;
    InventQty               cwInventIssueInTotal;

    InventQty               cwInventReceiptFinOpen;
    InventQty               cwInventIssueFinOpen;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an <c>InventTrans</c> record to the internal counters.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to add.
    /// </param>
    protected void addInventTrans(InventTrans _inventTrans)
    {
        if (_inventTrans.StatusIssue== StatusIssue::None)
        {
            if (_inventTrans.StatusReceipt ==StatusReceipt::Purchased)
            {
                inventPurchased    += _inventTrans.Qty;
                cwInventPurchased  += _inventTrans.PdsCWQty;
            }
            else
            {
                inventSum.addInventTransQtyOnSum(_inventTrans);
            }

            inventReceiptInTotal    += _inventTrans.Qty;
            inventReceiptFinOpen    += _inventTrans.financialOpenQty();

            cwInventReceiptInTotal  += _inventTrans.PdsCWQty;
            cwInventReceiptFinOpen  += _inventTrans.pdsCWFinancialOpenQty();
        }
        else
        {
            if (_inventTrans.StatusIssue == StatusIssue::Sold)
            {
                inventSold         += _inventTrans.Qty;
                cwInventSold       += _inventTrans.PdsCWQty;
            }
            else
            {
                inventSum.addInventTransQtyOnSum(_inventTrans);
            }

            inventIssueInTotal      += _inventTrans.Qty;
            inventIssueFinOpen      += _inventTrans.financialOpenQty();

            cwInventIssueInTotal    += _inventTrans.PdsCWQty;
            cwInventIssueFinOpen    += _inventTrans.pdsCWFinancialOpenQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>equalCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified set of parameters matches the parameters that are used when last
    ///    calculating values.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    true if the parameters match; otherwise, false.
    /// </returns>
    public boolean equalCriteria(
        InventTransOriginId       _transOriginId,
        InventTransChildType      _childType          = InventTransChildType::None,
        InventTransChildRefId     _childRefId         = '',
        InventDim                 _inventDimCriteria  = null,
        InventDimParm             _inventDimParm      = null)
    {
        if (transOriginId != _transOriginId)
        {
            return false;
        }

        if (perChildType        &&  (transChildRefId != _childRefId || transChildType != _childType))
        {
            return false;
        }

        if (perInventDim        && ! InventDim::isInventDimEqual(_inventDimCriteria,inventDimCriteria,dimFieldList))
        {
            return false;
        }

        if (perInventDim        && ! InventDimParm::isInventDimParmEqual(_inventDimParm,inventDimParm,dimFieldList))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>idCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantities for a specified set of parameters and stores them in internal variables.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type of the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference ID of the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimensions to include in the search.
    /// </param>
    public void idCalc(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        InventTrans         inventTrans;
        InventDim           inventDim;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDimCriteria.checkInvalidFieldAccess(false);

        if (this.equalCriteria(_transOriginId, _childType, _childRefId, _inventDimCriteria, _inventDimParm))
        {
            return;
        }

        this.reset();

        if (_transOriginId)
        {
            if (! exclPackingSlipReturned && ! perChildType && ! perInventDim)
            {
                while select sum(Qty),sum(QtySettled)
                    , sum(PdsCWQty), sum(PdsCWSettled)
                    from inventTrans
                    group by ValueOpen,StatusIssue,StatusReceipt
                    where inventTrans.InventTransOrigin == _transOriginId
                {
                    this.addInventTrans(inventTrans);
                }
            }
            else
            if (! exclPackingSlipReturned && ! perChildType && perInventDim)
            {
                if (! _inventDimParm.isFlagSelective())
                {
                    while select forceplaceholders sum(Qty),sum(QtySettled)
                        , sum(PdsCWQty), sum(PdsCWSettled)
                        from inventTrans
                        group by ValueOpen,StatusIssue,StatusReceipt
                        where inventTrans.InventTransOrigin == _transOriginId
                        #InventDimExistsJoin(InventTrans.inventDimId, InventDim, _inventDimCriteria, _InventDimParm)
                    {
                        this.addInventTrans(inventTrans);
                    }
                }
                else
                if (_inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
                {
                    while #inventDimSelect(inventDim, _inventDimCriteria, _inventDimParm, forcePlaceHolders tableId from, serialIdIdx)
                    join sum(Qty),sum(QtySettled)
                        , sum(PdsCWQty), sum(PdsCWSettled)
                        from inventTrans
                        group by ValueOpen,StatusIssue,StatusReceipt
                        where inventTrans.InventTransOrigin == _transOriginId
                           && inventTrans.InventDimId       == inventDim.InventDimId
                    {
                        this.addInventTrans(inventTrans);
                    }
                }
                else
                {
                    while select sum(Qty),sum(QtySettled)
                    , sum(PdsCWQty), sum(PdsCWSettled)
                    from inventTrans
                        group by ValueOpen,StatusIssue,StatusReceipt
                        where inventTrans.InventTransOrigin == _transOriginId
                        #InventDimExistsJoin(InventTrans.inventDimId, InventDim, _inventDimCriteria, _InventDimParm)
                    {
                        this.addInventTrans(inventTrans);
                    }
                }
            }
            else
            if (! exclPackingSlipReturned && perChildType && ! perInventDim)
            {
                while select sum(Qty),sum(QtySettled)
                    , sum(PdsCWQty), sum(PdsCWSettled)
                    from inventTrans
                    group by ValueOpen,StatusIssue,StatusReceipt
                    where inventTrans.InventTransOrigin == _transOriginId
                       && inventTrans.TransChildType    == _childType
                       && inventTrans.TransChildRefId   == _childRefId
                {
                    this.addInventTrans(inventTrans);
                }
            }
            else
            if (exclPackingSlipReturned && ! perChildType && ! perInventDim)
            {
                while select sum(Qty),sum(QtySettled)
                    , sum(PdsCWQty), sum(PdsCWSettled)
                    from inventTrans
                    group by ValueOpen,StatusIssue,StatusReceipt
                    where inventTrans.InventTransOrigin     == _transOriginId
                       && inventTrans.PackingSlipReturned   ==  NoYes::No
                {
                    this.addInventTrans(inventTrans);
                }
            }
            else
            if (! exclPackingSlipReturned && perChildType && perInventDim)
            {
                while select sum(Qty),sum(QtySettled)
                    , sum(PdsCWQty), sum(PdsCWSettled)
                    from inventTrans
                    group by ValueOpen,StatusIssue,StatusReceipt
                    where inventTrans.InventTransOrigin == _transOriginId
                       && inventTrans.TransChildType    == _childType
                       && inventTrans.TransChildRefId   == _childRefId
                    #InventDimExistsJoin(InventTrans.inventDimId, InventDim, _inventDimCriteria, _InventDimParm)
                {
                    this.addInventTrans(inventTrans);
                }
            }
            else
            if (exclPackingSlipReturned && perChildType && perInventDim)
            {
                while select sum(Qty),sum(QtySettled)
                    , sum(PdsCWQty), sum(PdsCWSettled)
                    from inventTrans
                    group by ValueOpen,StatusIssue,StatusReceipt
                    where inventTrans.InventTransOrigin == _transOriginId
                       && inventTrans.PackingSlipReturned   ==  NoYes::No
                       && inventTrans.TransChildType        == _childType
                       && inventTrans.TransChildRefId       == _childRefId
                    #InventDimExistsJoin(InventTrans.inventDimId, InventDim, _inventDimCriteria, _InventDimParm)
                {
                    this.addInventTrans(inventTrans);
                }
            }
            else
            {
                while select sum(Qty),sum(QtySettled)
                    , sum(PdsCWQty), sum(PdsCWSettled)
                    from inventTrans
                    group by ValueOpen,StatusIssue,StatusReceipt
                    where  inventTrans.InventTransOrigin == _transOriginId
                       && (inventTrans.PackingSlipReturned  ==  NoYes::No           || exclPackingSlipReturned == false)
                      && ((inventTrans.TransChildType       == _childType
                      &&   inventTrans.TransChildRefId      == _childRefId)         || perChildType == false)
                    #InventDimExistsJoin(InventTrans.inventDimId, InventDim, _inventDimCriteria, _InventDimParm) || perInventDim == false
                {
                    this.addInventTrans(inventTrans);
                }
            }
        }

        transOriginId       = _transOriginId;
        transChildType      = _childType;
        transChildRefId     = _childRefId;

        if (perInventDim)
        {
            inventDimCriteria = _inventDimCriteria.data();
            inventDimParm     = _inventDimParm.data();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        dimFieldList = InventDim::dimFieldsList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>originArrived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the arrived quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyArrived originArrived(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventSum.Arrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originDeducted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the deducted quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyDeducted originDeducted(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return -inventSum.Deducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originIssueFinOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the financially open issue quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty originIssueFinOpen(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventIssueFinOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originIssueInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the total issue quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty originIssueInTotal(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventIssueInTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the on order quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyOnOrder originOnOrder(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return -inventSum.OnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ordered quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyOrdered originOrdered(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventSum.Ordered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originPicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the picked quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyPicked originPicked(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return -inventSum.Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originPurchased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the purchased quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyPosted originPurchased(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventPurchased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originQuotationIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quotation issue quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyQuotationIssue originQuotationIssue(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return -inventSum.QuotationIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originQuotationReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quotation receipt quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyQuotationReceipt originQuotationReceipt(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventSum.QuotationReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originReceiptFinOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the financially open receiving quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty originReceiptFinOpen(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventReceiptFinOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originReceiptInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the receiving quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty originReceiptInTotal(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventReceiptInTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originReceived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the received quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyReceived originReceived(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventSum.Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the registered quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyRegistered originRegistered(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventSum.Registered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the remaining physical quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty originRemainPhysical(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventSum.Ordered + inventSum.Arrived + inventSum.Registered
              -inventSum.ReservPhysical  - inventSum.ReservOrdered - inventSum.OnOrder - inventSum.Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the total reserved quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty originReserved(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return -inventSum.ReservPhysical  - inventSum.ReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originReservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the reserved ordered quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyReservOrdered originReservOrdered(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return -inventSum.ReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the reserved physical quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transcations.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyReservPhysical originReservPhysical(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return -inventSum.ReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originSold</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sold quantity for the specified set of parameters.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    ///    The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    ///    The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQtyPosted originSold(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(_transOriginId,_childType,_childRefId,_inventDimCriteria,_inventDimParm);

        return inventSold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExclPackingSlipReturned</Name>
				<Source><![CDATA[
        protected boolean parmExclPackingSlipReturned(boolean _exclPackingSlipReturned = exclPackingSlipReturned)
    {
        exclPackingSlipReturned = _exclPackingSlipReturned;

        return exclPackingSlipReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerChildType</Name>
				<Source><![CDATA[
        protected boolean parmPerChildType(boolean _perChildType = perChildType)
    {
        perChildType = _perChildType;

        return perChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerInventDim</Name>
				<Source><![CDATA[
        protected boolean parmPerInventDim(boolean _perInventDim = perInventDim)
    {
        perInventDim = _perInventDim;

        return perInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidArrived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity by using the arrived status.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The required child type on the inventory transactions.
    /// </param>
    /// <param name="_childRefId">
    /// The required child reference ID on the inventory transactions.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The specification of the inventory dimensions to include in the search.
    /// </param>
    /// <param name="_inventDimParm">
    /// The specification of which inventory dimensions to include in the search.
    /// </param>
    /// <returns>
    /// The catch weight quantity arrived value.
    /// </returns>
    public PdsCWArrived pdsCWidArrived(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return inventSum.PdsCWArrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidDeducted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity by using the deducted status.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight deducted quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight deducted quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight deducted quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight deducted quantity.
    /// </param>
    /// <returns>
    /// The catch weight quantity deducted value.
    /// </returns>
    public PdsCWDeducted   pdsCWidDeducted(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return -inventSum.PdsCWDeducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidIssueFinOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight financial open quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight financial open quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight financial open quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight financial open quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight financial open
    /// quantity.
    /// </param>
    /// <returns>
    /// The catch weight financial open quantity.
    /// </returns>
    public PdsCWInventQty  pdsCWidIssueFinOpen(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return cwInventIssueFinOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidIssueInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and retrieves the catch weight issued quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight issued quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight issued quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight issued quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight issued quantity.
    /// </param>
    /// <returns>
    /// The issued catch weight quantity.
    /// </returns>
    public PdsCWInventQty  pdsCWidIssueInTotal(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return cwInventIssueInTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight on order quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight on order quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight on order quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight on order quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight on order quantity.
    /// </param>
    /// <returns>
    /// The catch weight On Order quantity.
    /// </returns>
    public PdsCWOnOrder pdsCWidOnOrder(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return -inventSum.PdsCWOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight ordered quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight ordered quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight ordered quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight ordered quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight ordered quantity.
    /// </param>
    /// <returns>
    /// The catch weight ordered quantity.
    /// </returns>
    public PdsCWOrdered pdsCWidOrdered(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return inventSum.PdsCWOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight picked quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight picked quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight picked quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight picked quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight picked quantity.
    /// </param>
    /// <returns>
    /// The catch weight picked quantity.
    /// </returns>
    public PdsCWPicked  pdsCWidPicked(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return -inventSum.PdsCWPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidPurchased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight purchased quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight purchased quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight purchased quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight purchased quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight purchased quantity.
    /// </param>
    /// <returns>
    /// The catch weight purchased quantity.
    /// </returns>
    public PdsCWInventQty pdsCWidPurchased(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return cwInventPurchased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidQuotationIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quotation issue quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quotation issue quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quotation issue quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quotation issue quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quotation issue
    /// quantity.
    /// </param>
    /// <returns>
    /// The catch weight quotation issue quantity.
    /// </returns>
    public PdsCWQuotationIssue pdsCWidQuotationIssue(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return -inventSum.PdsCWQuotationIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidQuotationReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quotation receipt quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quotation receipt quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quotation receipt quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quotation receipt
    /// quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quotation receipt
    /// quantity.
    /// </param>
    /// <returns>
    /// The catch weight quotation receipt quantity.
    /// </returns>
    public PdsCWQuotationReceipt pdsCWidQuotationReceipt(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return inventSum.PdsCWQuotationReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidReceiptFinOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight financial open quantity of received material.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight financial open quantity of received
    /// material.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight financial open quantity of
    /// received material.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight financial open quantity
    /// of received material.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight financial open
    /// quantity of received material.
    /// </param>
    /// <returns>
    /// The catch weight quantity of open financial received material.
    /// </returns>
    public PdsCWInventQty pdsCWidReceiptFinOpen(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return cwInventReceiptFinOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidReceiptInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity of received material.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quantity of received material.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quantity of received
    /// material.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quantity of received
    /// material.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quantity of received
    /// material.
    /// </param>
    /// <returns>
    /// The catch weight quantity of received material.
    /// </returns>
    public PdsCWInventQty  pdsCWidReceiptInTotal(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return cwInventReceiptInTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity of received material.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quantity of received material.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quantity of received
    /// material.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quantity of received
    /// material.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quantity of received
    /// material.
    /// </param>
    /// <returns>
    /// The catch weight quantity of received material.
    /// </returns>
    public PdsCWReceived  pdsCWidReceived(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return inventSum.PdsCWReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity of registered material.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quantity of registered material.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quantity of registered
    /// material.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quantity of registered
    /// material.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quantity of registered
    /// material.
    /// </param>
    /// <returns>
    /// The catch weight quantity of registered material.
    /// </returns>
    public PdsCWRegistered pdsCWidRegistered(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return inventSum.PdsCWRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight remaining physical inventory quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight remaining physical inventory quantity.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight remaining physical
    /// inventory quantity.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight remaining physical
    /// inventory quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight remaining physical
    /// inventory quantity.
    /// </param>
    /// <returns>
    /// The catch weight quantity of remaining physical material.
    /// </returns>
    public PdsCWInventQty pdsCWidRemainPhysical(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return inventSum.PdsCWOrdered + inventSum.PdsCWArrived
            + inventSum.PdsCWRegistered
            - inventSum.PdsCWReservPhysical  - inventSum.PdsCWReservOrdered
            - inventSum.PdsCWOnOrder - inventSum.PdsCWPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the total reserve catch weight quantity.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the total catch weight quantity of reserved material.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the total catch weight quantity of reserved
    /// material.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the total catch weight quantity of
    /// reserved material.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the total catch weight quantity of
    /// reserved material.
    /// </param>
    /// <returns>
    /// The catch weight quantity of total reserved material.
    /// </returns>
    public PdsCWInventQty pdsCWidReserved(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return -inventSum.PdsCWReservPhysical  - inventSum.PdsCWReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidReservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity of reserved of ordered material.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quantity of reserved of ordered material.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quantity of reserved of
    /// ordered material.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quantity of reserved of
    /// ordered material.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quantity of reserved
    /// of ordered material.
    /// </param>
    /// <returns>
    /// The catch weight quantity of ordered reserved material.
    /// </returns>
    public PdsCWReservOrdered pdsCWidReservOrdered(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return -inventSum.PdsCWReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity of reserved physical inventory.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quantity of reserved physical inventory.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quantity of reserved
    /// physical inventory.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quantity of reserved
    /// physical inventory.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quantity of reserved
    /// physical inventory.
    /// </param>
    /// <returns>
    /// The catch weight quantity of reserved physical inventory.
    /// </returns>
    public PdsCWReservPhysical pdsCWidReservPhysical(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return -inventSum.PdsCWReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWidSold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and obtains the catch weight quantity sold.
    /// </summary>
    /// <param name="_transOriginId">
    /// The ID of the inventory transaction origin.
    /// </param>
    /// <param name="_childType">
    /// The child type that is used to calculate the catch weight quantity sold.
    /// </param>
    /// <param name="_childRefId">
    /// The child reference record ID that is used to calculate the catch weight quantity sold.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The <c>InventDim</c> criteria that are used to calculate the catch weight quantity sold.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventory dimension parameter that is used to calculate the catch weight quantity sold.
    /// </param>
    /// <returns>
    /// The catch weight quantity of sold material.
    /// </returns>
    public PdsCWInventQty  pdsCWidSold(
        InventTransOriginId     _transOriginId,
        InventTransChildType    _childType          = InventTransChildType::None,
        InventTransChildRefId   _childRefId         = '',
        InventDim               _inventDimCriteria  = null,
        InventDimParm           _inventDimParm      = null)
    {
        this.idCalc(
            _transOriginId,
            _childType,
            _childRefId,
            _inventDimCriteria,
            _inventDimParm);

        return cwInventSold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the value of the internal variables.
    /// </summary>
    public void reset()
    {
        inventPurchased             = 0;
        inventSold                  = 0;

        cwInventPurchased            = 0;
        cwInventSold                 = 0;
        inventSum.clear();

        inventReceiptInTotal        = 0;
        inventIssueInTotal          = 0;
        inventReceiptFinOpen        = 0;
        inventIssueFinOpen          = 0;

        transOriginId               = 0;

        cwInventPurchased            = 0;
        cwInventSold                 = 0;
        cwInventReceiptInTotal       = 0;
        cwInventIssueInTotal         = 0;
        cwInventReceiptFinOpen       = 0;
        cwInventIssueFinOpen         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventTransSum construct()
    {
        return new InventTransSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChildType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransSum</c> class that only includes the specified child
    ///    type.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventTransSum</c> class.
    /// </returns>
    static public InventTransSum newChildType()
    {
        InventTransSum  inventTransSum = InventTransSum::construct();

        inventTransSum.parmPerChildType(true);

        return inventTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChildTypeInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransSum</c> class that only includes the specified child
    ///    type and inventory dimensions.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventTransSum</c> class.
    /// </returns>
    static public InventTransSum newChildTypeInventDim()
    {
        InventTransSum  inventTransSum = InventTransSum::construct();

        inventTransSum.parmPerChildType(true);
        inventTransSum.parmPerInventDim(true);

        return inventTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChildTypeInventDimExclReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransSum</c> class that only includes the specified child
    ///    type and inventory dimensions.It also excludes packing slip returned transactions.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventTransSum</c> class.
    /// </returns>
    static public InventTransSum newChildTypeInventDimExclReturned()
    {
        InventTransSum  inventTransSum = InventTransSum::construct();

        inventTransSum.parmPerChildType(true);
        inventTransSum.parmPerInventDim(true);
        inventTransSum.parmExclPackingSlipReturned(true);

        return inventTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExclReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransSum</c> class that only excludes packing slip returned
    ///    transactions.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventTransSum</c> class.
    /// </returns>
    static public InventTransSum newExclReturned()
    {
        InventTransSum  inventTransSum = InventTransSum::construct();

        inventTransSum.parmExclPackingSlipReturned(true);

        return inventTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransSum</c> class that only includes the specified
    ///    inventory dimensions.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventTransSum</c> class.
    /// </returns>
    static public InventTransSum newInventDim()
    {
        InventTransSum  inventTransSum = InventTransSum::construct();

        inventTransSum.parmPerInventDim(true);

        return inventTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransSum</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventTransSum</c> class.
    /// </returns>
    static public InventTransSum newStandard()
    {
        InventTransSum  inventTransSum = InventTransSum::construct();

        return inventTransSum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>