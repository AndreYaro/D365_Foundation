<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPackingStructureCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPackingStructureCreator</c> class is responsible for creation packing structures.
/// </summary>
public class WHSPackingStructureCreator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createASNItem</Name>
				<Source><![CDATA[
    private void createASNItem(
        WHSUOMStructure     _whsUOMStructureCase,
        WHSLoadLine         _wmsLoadLine,
        Qty                 _qty,
        UnitOfMeasureSymbol _unitQty)
    {
        WHSASNItem whsASNItem;

        whsASNItem.ShipmentId       = _whsUOMStructureCase.ShipmentId;
        whsASNItem.LicensePlateId   = _whsUOMStructureCase.LicensePlateId;
        whsASNItem.LoadId           = _whsUOMStructureCase.LoadId;
        whsASNItem.Module           = _whsUOMStructureCase.Module;

        whsASNItem.InventDimId      = _wmsLoadLine.InventDimId;
        whsASNItem.ItemId           = _wmsLoadLine.ItemId;
        whsASNItem.LoadLineRefRecId = _wmsLoadLine.recId;
        whsASNItem.PurchId          = _wmsLoadLine.OrderNum;
        whsASNItem.UOM              = _wmsLoadLine.UOM;

        whsASNItem.Qty              = EcoResReleasedProductUnitConverter::construct().convert(
            _qty,
            UnitOfMeasure::findBySymbol(_unitQty).RecId,
            UnitOfMeasure::findBySymbol(whsASNItem.UOM).RecId,
            NoYes::No,
            whsASNItem.ItemId,
            whsASNItem.InventDimId);

        whsASNItem.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackingStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a packing structure for a load.
    /// </summary>
    /// <param name="_whsLoadID">
    /// The ID of the load.
    /// </param>
    /// <returns>
    /// The <c>WHSLicensePlateId</c> license plate ID of the packing structure.
    /// </returns>
    /// <remarks>
    /// If no packing structure is created the empty string will be returned.
    /// </remarks>
    public WHSLicensePlateId createPackingStructure(WHSLoadId _whsLoadID)
    {
        WHSLoadLine                         whsLoadLine;
        PurchLine                           purchLine;
        RetailBuyersPushLine                retailBuyersPushLine;
        RetailBuyersPushLineQty             retailBuyersPushLineQty;
        RetailPackagePurch                  retailPackagePurch;
        WHSUOMStructure                     whsUOMStructureCase, whsUOMStructureParent;
        InventTransferRequestedLicensePlate inventTransferRequestedLicensePlate;
        InventTransferLine                  inventTransferLine;

        if (this.doesPackingStructureExist(_whsLoadID))
        {
            throw error(strFmt("@SYP5070005", _whsLoadId));
        }

        ttsBegin;

        // We are finding all the licenseplates for the transfer lines that are being crossdocked and was being created based on PO packages for this load and builds the package structure based on them.
        while select RequestedLicensePlateID  from inventTransferRequestedLicensePlate
        join tableId from inventTransferLine
            where inventTransferLine.CombinedTransferOrderLineDelivery == InventTransferRequestedLicensePlate.CombinedTransferOrderLineDelivery
        join Qty from RetailBuyersPushLineQty
            where RetailBuyersPushLineQty.RecId     == inventTransferLine.RetailReplenishRefRecId
            &&    RetailBuyersPushLineQty.tableId   == inventTransferLine.RetailReplenishRefTableId
        join UnitId from RetailBuyersPushLine
            where RetailBuyersPushLine.BuyersPushId == RetailBuyersPushLineQty.BuyersPushId
            &&    RetailBuyersPushLine.LineNum      == RetailBuyersPushLineQty.LineNum
        join PurchQty, PurchUnit, RetailPackageId from purchLine
            where purchLine.RecId       == RetailBuyersPushLine.RefRecId
            &&    purchLine.PurchQty    > 0
        join Qty from RetailPackagePurch
            where RetailPackagePurch.LineNum    == purchLine.RBOPackageLineNum
            && RetailPackagePurch.PurchId       == purchLine.PurchId
            && RetailPackagePurch.PackageId     == purchLine.RetailPackageId
            && RetailPackagePurch.Qty           > 0
        join whsLoadLine
            where whsLoadLine.LoadId            == _whsLoadID
            &&    whsLoadLine.InventTransId     == purchLine.InventTransId
            &&    whsLoadLine.InventTransType   == InventTransType::Purch
        {
            //if the unit on the purchLine is different than the unit used to push we have no real way of calculating how much a package contained so we are ex
            if (purchLine.PurchUnit != RetailBuyersPushLine.UnitID)
            {
                throw error(strFmt("%1",
                        strFmt("@SYP4881245", whsLoadLine.ItemId, purchLine.RetailPackageId, tableId2name(tableNum(RetailBuyersPushLine)), tableId2name(tableNum(PurchLine)))));
            }

            if (!whsUOMStructureParent.RecId)
            {
                //create the parent structure
                whsUOMStructureParent = this.createParentLicensePlateStructure(_whsLoadID);
            }

            //the first time we iterate for a transfer line that is part of a package we need to create the case structure
            WHSUOMStructureCase = this.findorCreateUOMStructureChild(InventTransferRequestedLicensePlate.RequestedLicensePlateID, whsUOMStructureParent);

            //for each line we need to distribute the quantity for one package on the licenseplate
            Qty itemQtyPerLP = purchLine.PurchQty/ RetailPackagePurch.Qty;

            this.createASNItem(WHSUOMStructureCase, whsLoadLine, itemQtyPerLP, purchLine.PurchUnit);
        }

        if (whsUOMStructureParent.RecId)
        {
            //update the fields on the different cases since these are dependent on the ASNItems being added
            this.updateChildWHSUOMStructures(whsUOMStructureParent.licensePlateId);

            //update the parent structure since that is dependt in child structures
            this.updateUOMStructureFields(whsUOMStructureParent);
        }

        ttsCommit;

        return whsUOMStructureParent.LicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParentLicensePlateStructure</Name>
				<Source><![CDATA[
    private WHSUOMStructure createParentLicensePlateStructure(whsLoadId _whsLoadId)
    {
        WHSUOMStructure whsUOMStructureParentLocal;

        whsUOMStructureParentLocal.LoadId                   = _whsLoadId;
        whsUOMStructureParentLocal.HasPacks                 = NoYes::Yes;
        whsUOMStructureParentLocal.ShipmentId               = this.getShipmentId(_whsLoadId);
        whsUOMStructureParentLocal.LicensePlateParent       = '';
        whsUOMStructureParentLocal.LicensePlateId           = this.getNewParentLicensePlateID();
        whsUOMStructureParentLocal.Module                   = WHSModule::Purch;
        whsUOMStructureParentLocal.insert();

        return whsUOMStructureParentLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPackingStructureExist</Name>
				<Source><![CDATA[
    private boolean doesPackingStructureExist(WHSLoadId _whsLoadId)
    {
        WHSUOMStructure whsUOMStructure;

        select firstOnly RecId from whsUOMStructure
            where whsUOMStructure.LoadId == _whsLoadId;

        return (whsUOMStructure.recId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateUOMStructureChild</Name>
				<Source><![CDATA[
    private WHSUOMStructure findOrCreateUOMStructureChild(
        WHSLicensePlateId   _licensePlateId,
        WHSUOMStructure     _whsUOMStructureParent)
    {
        WHSUOMStructure whsUOMStructureChild = WHSUOMStructure::find(_licensePlateId, _whsUOMStructureParent.Module, _whsUOMStructureParent.ShipmentId);

        if (!whsUOMStructureChild.recId)
        {
            this.initUOMCaseFromUOMParent(_whsUOMStructureParent, whsUOMStructureChild);
            whsUOMStructureChild.LicensePlateId  = _licensePlateId;
            whsUOMStructureChild.insert();
        }

        return whsUOMStructureChild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewParentLicensePlateID</Name>
				<Source><![CDATA[
    private WHSLicensePlateId getNewParentLicensePlateID()
    {
        return WHSNumberSeqExt::newGetNum(WHSParameters::numRefWHSLicensePlateId()).num(WHSNumberSeqExtParameters::emptyParameters());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentId</Name>
				<Source><![CDATA[
    private WHSSHipmentId getShipmentId(whsLoadId _whsLoadId)
    {
        return WHSLoadTable::find(_whsLoadId).displayShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUOMCaseFromUOMParent</Name>
				<Source><![CDATA[
    private void initUOMCaseFromUOMParent(
        WHSUOMStructure _whsUOMStructureParent,
        WHSUOMStructure _whsUOMStructurCase)
    {
        _whsUOMStructurCase.LicensePlateParent = _whsUOMStructureParent.LicensePlateId;
        _whsUOMStructurCase.LoadId             = _whsUOMStructureParent.LoadId;
        _whsUOMStructurCase.ShipmentId         = _whsUOMStructureParent.ShipmentId;
        _whsUOMStructurCase.Module             = _whsUOMStructureParent.Module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChildWHSUOMStructures</Name>
				<Source><![CDATA[
    protected void updateChildWHSUOMStructures(WHSLicensePlateId _parentLicensePlateId)
    {
        WHSUOMStructure whsUOMStructureChild;

        while select forUpdate whsUOMStructureChild
            where whsUOMStructureChild.LicensePlateParent == _parentLicensePlateId
        {
            this.updateUOMStructureFields(whsUOMStructureChild);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUOMStructureFields</Name>
				<Source><![CDATA[
    protected void updateUOMStructureFields(WHSUOMStructure _whsUOMStructure)
    {
        _whsUOMStructure.ItemId = _whsUOMStructure.calcItem();
        
        WHSUOMStructure::initializeUOMStructure(_whsUOMStructure);

        _whsUOMStructure.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSPackingStructureCreator construct()
    {
        return new WHSPackingStructureCreator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>