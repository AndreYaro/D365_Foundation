<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPackingSlipDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesPackingSlipDP</c> class is the report Data Provider class for the
/// <c>SalesPackingSlip</c>Microsoft SQL Server Reporting Services report.
/// </summary>
[SRSReportParameterAttribute(classStr(SalesPackingSlipContract))]
public class SalesPackingSlipDP extends SrsReportDataProviderPreProcess
{
    private container                   inventDimSetup;
    private container                   inventDimProductSetup;
    private InventDimCtrl_Rep_Sales     inventDimReport;
    private boolean                     insertInventDim;

    private CustFormletterDocument      custFormletterDocument;
    private CustFormletterParameters    custFormletterParameters;
    
    private str                         lineHeaderPrinted[];
    private int                         lineHeaderPrintedCount;

    private boolean                             isUnrealizedVATEnabled;
    private ItemType                            itemType;
    private TaxUnrealizedDocuProdType           prodType;
    private TaxUnrealizedDocuPrintHeader        printHeader;

    private CustPackingSlipVersion      custPackingSlipVersion;
    private CustPackingSlipJour         custPackingSlipJour;

    private KittingSrsReportDataProviderPreProcess kittingReportHandler;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>kittingSetReportHandler</Name>
				<Source><![CDATA[
    public void kittingSetReportHandler(KittingSrsReportDataProviderPreProcess _kittingReportHandler)
    {
        kittingReportHandler = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()) ? _kittingReportHandler : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingReportHandler</Name>
				<Source><![CDATA[
    public KittingSrsReportDataProviderPreProcess kittingReportHandler()
    {
        return kittingReportHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLineHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the line header on the report.
    /// </summary>
    /// <param name = "_custPackingSlipTrans">
    /// A <c>CustPackingSlipTrans</c> record which is the sales packing slip line should be initialized from.
    /// </param>
    /// <returns>
    /// true if the line header is to be printed; false, otherwise.
    /// </returns>
    protected boolean checkPrintLineHeader(CustPackingSlipTrans _custPackingSlipTrans)
    {
        int         counter;
        boolean     lineHeaderPrint = true;

        boolean printLineHeader             = false;

        if (this.parmCustPackingSlipJour().isSummaryUpdated())
        {
            str lineHeaderOrig = _custPackingSlipTrans.LineHeader;

            for (counter=1;counter<=lineHeaderPrintedCount;counter++)
            {
                if (lineHeaderPrinted[counter] == lineHeaderOrig)
                {
                    printLineHeader = false;
                    lineHeaderPrint = false;
                    break;
                }
                else if (lineHeaderPrinted[counter] == subStr(lineHeaderOrig,1,strLen(lineHeaderPrinted[counter])))
                {
                    _custPackingSlipTrans.LineHeader = strLTrim(subStr(_custPackingSlipTrans.LineHeader,strLen(lineHeaderPrinted[counter])+1,255));
                }
            }

            if (_custPackingSlipTrans.LineHeader && lineHeaderPrint)
            {
                printLineHeader = true;
                lineHeaderPrintedCount++;
                lineHeaderPrinted[lineHeaderPrintedCount] = lineHeaderOrig;
            }
        }

        return printLineHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name="_contract">
    /// An instance of <c>SalesPackingSlipContract</c> report contract class.
    /// </param>
    public void createData(SalesPackingSlipContract _contract)
    {
        this.parmDataContract(_contract);

        this.createReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data for the sales packing slip document.
    /// </summary>
    /// <returns>
    /// The <c>SalesPackingSlipHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected SalesPackingSlipHeaderTmp createReportData()
    {
        this.initializeReportData();

        custPackingSlipVersion  = custPackingSlipVersion::find(this.parmPackingSlipContract().parmRecordId());
        custPackingSlipJour     = custPackingSlipJour::findRecId(custPackingSlipVersion.custPackingSlipJour);
        
        return this.createSalesPackingSlip();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustPackingSlipVersion</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public CustPackingSlipVersion parmCustPackingSlipVersion()
    {
        return custPackingSlipVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustPackingSlipJour</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public CustPackingSlipJour parmCustPackingSlipJour()
    {
        return custPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    protected void initializeReportData()
    {
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            SalesPackingSlipContract salesPackingSlipContract = this.parmPackingSlipContract();

            isUnrealizedVATEnabled  = true;
            prodType                = salesPackingSlipContract.parmProdType();
            printHeader             = salesPackingSlipContract.parmPrintHeader();
            if (prodType != TaxUnrealizedDocuProdType::All)
            {
                this.initItemTypeByProdType(prodType);
            }
        }

        this.initializeInventDimReportSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes inventory dimension report setup.
    /// </summary>
    protected void initializeInventDimReportSetup()
    {
        inventDimReport             = this.instantiateInventDimReportSetup();
        inventDimReport.parmDocumentStatus(DocumentStatus::PackingSlip);
        inventDimReport.initDimParmVisible();
        inventDimSetup              = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup       = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        insertInventDim = inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventDimReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates <c>InventDimCtrl_Rep_Sales</c> class.
    /// </summary>
    /// <returns>
    /// An <c>InventDimCtrl_Rep_Sales</c> class instance.
    /// </returns>
    protected InventDimCtrl_Rep_Sales instantiateInventDimReportSetup()
    {
        return InventDimCtrl_Rep_Sales::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales packing slip document.
    /// </summary>
    /// <returns>
    /// The <c>SalesConfirmHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected SalesPackingSlipHeaderTmp createSalesPackingSlip()
    {
        if (!this.parmUserConnection() && SalesPackingSlipDPDBInteractionInUsrConnectionFlight::instance().isEnabled())
        {
            #OCCRetryCount
            SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp;
        
            try
            {
                uc = new UserConnection();
                uc.ttsbegin();
                this.parmUserConnection(uc);
                salesPackingSlipHeaderTmp = this.createSalesPackingSlipHeader();
                this.createSalesPackingSlipLines(salesPackingSlipHeaderTmp);
                uc.ttscommit();
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            finally
            {
                uc.finalize();
            }

            return salesPackingSlipHeaderTmp;
        }
        else
        {
            SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp = this.createSalesPackingSlipHeader();
            this.createSalesPackingSlipLines(salesPackingSlipHeaderTmp);
            return salesPackingSlipHeaderTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales packing slip header.
    /// </summary>
    /// <returns>
    /// The created <c>SalesPackingSlipHeaderTmp</c> sales packing slip header record.
    /// </returns>
    protected SalesPackingSlipHeaderTmp createSalesPackingSlipHeader()
    {
        SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp = this.initializeSalesPackingSlipHeader();

        this.insertSalesPackingSlipHeader(salesPackingSlipHeaderTmp);

        return salesPackingSlipHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesPackingSlipHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales packing slip header.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> sales packing slip header record to insert.
    /// </param>
    protected void insertSalesPackingSlipHeader(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp )
    {
        _salesPackingSlipHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales packing slip lines
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the sales packing slip header.
    /// </param>
    protected void createSalesPackingSlipLines(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        Enumerator enumerator = SalesPackingSlipDPPackingSlipLineQuery::newQuery(this).getEnumerator();

        while (enumerator.moveNext())
        {
            SalesPackingSlipDPPackingSlipLineQuerySelection packingSlipLineSelection = enumerator.current() as SalesPackingSlipDPPackingSlipLineQuerySelection;

            if (this.mustCreateSalesPackingSlipLine(_salesPackingSlipHeaderTmp, packingSlipLineSelection))
            {
                this.createSalesPackingSlipLine(_salesPackingSlipHeaderTmp, packingSlipLineSelection);
            }
        }

        if (this.parmCustFormletterParameters().ShippingDetailsOnPackingSlip && ! this.parmCustFormletterParameters().ShowOnlyOneShippingLineOnPackingSlip)
        {
            this.createSalesPackingSlipShippingLines();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.createSalesPackingSlipPackageLines();
        }

        if (this.parmCustFormletterParameters().TrackBackorderPackingSlip != BackorderTracking::NoTracking)
        {
           this.createSalesPackingSlipBackOrderLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSalesPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales packing slip line must be created.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the sales packing slip header.
    /// </param>
    /// <param name = "_packingSlipLineSelection">
    /// A <c>SalesPackingSlipDPPackingSlipLineQuerySelection</c> object which the sales packing slip line should be created for.
    /// </param>
    /// <returns>
    /// true, if the sales packing slip line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateSalesPackingSlipLine(
        SalesPackingSlipHeaderTmp                       _salesPackingSlipHeaderTmp, 
        SalesPackingSlipDPPackingSlipLineQuerySelection _packingSlipLineSelection)
    {
        if (isUnrealizedVATEnabled && printHeader)
        {
            if (prodType != TaxUnrealizedDocuProdType::All
                    && InventTable::find(_packingSlipLineSelection.parmCustPackingSlipTrans().ItemId).ItemType != itemType)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales packing slip line.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the sales packing slip header.
    /// </param>
    /// <param name = "_packingSlipLineSelection">
    /// A <c>SalesPackingSlipDPPackingSlipLineQuerySelection</c> object which the sales packing slip line should be created for.
    /// </param>
    /// <returns>
    /// The created <c>SalesPackingSlipDetailsTmp</c> sales packing slip line record.
    /// </returns>
    protected SalesPackingSlipDetailsTmp createSalesPackingSlipLine(
        SalesPackingSlipHeaderTmp                       _salesPackingSlipHeaderTmp,
        SalesPackingSlipDPPackingSlipLineQuerySelection _packingSlipLineSelection)
    {
        SalesPackingSlipDetailsTmp salesPackingSlipDetailsTmp = this.initializeSalesPackingSlipLine(_salesPackingSlipHeaderTmp, _packingSlipLineSelection);

        this.insertSalesPackingSlipLine(salesPackingSlipDetailsTmp);

        return salesPackingSlipDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales packing slip line.
    /// </summary>
    /// <param name = "_salesPackingSlipDetailsTmp">
    /// A <c>SalesPackingSlipDetailsTmp</c> sales packing slip line record to insert.
    /// </param>
    protected void insertSalesPackingSlipLine(SalesPackingSlipDetailsTmp _salesPackingSlipDetailsTmp)
    {
        _salesPackingSlipDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipShippingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales packing slip shipping lines
    /// </summary>
    protected void createSalesPackingSlipShippingLines()
    {
        SalesShippingStat salesShippingStat;
        if (this.parmCustPackingSlipVersion().isArchived())
        {
            VersioningTimeStamp         versionTimeStamp = this.parmCustPackingSlipVersion().VersionDateTime;
            SalesShippingStatHistory    salesShippingStatHistory;
            while select validTimeState(versionTimeStamp) salesShippingStatHistory
                        exists join salesShippingStat
                        where salesShippingStat.RecId         == salesShippingStatHistory.SalesShippingStat
                           && salesShippingStat.SalesId       == this.parmCustPackingSlipJour().SalesId
                           && salesShippingStat.PackingSlipId == this.parmCustPackingSlipJour().PackingSlipId
                           && salesShippingStat.DeliveryDate  == this.parmCustPackingSlipJour().DeliveryDate
            {
                salesShippingStat.initFromSalesShippingStatHistory(salesShippingStatHistory);

                if (this.mustCreateSalesPackingSlipShippingLine(salesShippingStat))
                {
                    this.createSalesPackingSlipShippingLine(salesShippingStat);
                }
            }
        }
        else
        {
            while select salesShippingStat
                        where salesShippingStat.SalesId       == this.parmCustPackingSlipJour().SalesId
                           && salesShippingStat.PackingSlipId == this.parmCustPackingSlipJour().PackingSlipId
                           && salesShippingStat.DeliveryDate  == this.parmCustPackingSlipJour().DeliveryDate
            {
                if (this.mustCreateSalesPackingSlipShippingLine(salesShippingStat))
                {
                    this.createSalesPackingSlipShippingLine(salesShippingStat);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSalesPackingSlipShippingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales packing slip shipping line must be created.
    /// </summary>
    /// <param name = "_salesShippingStat">
    /// A <c>SalesShippingStat</c> record which the sales packing slip shipping line should be cretaed for.
    /// </param>
    /// <returns>
    /// true, if the sales packing slip shipping line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateSalesPackingSlipShippingLine(SalesShippingStat _salesShippingStat)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipShippingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales packing slip shipping line.
    /// </summary>
    /// <param name = "_salesShippingStat">
    /// A <c>SalesShippingStat</c> record which the sales packing slip shipping line should be cretaed for.
    /// </param>
    /// <returns>
    /// The created <c>SalesPackingSlipDetailsTmp</c> sales packing slip shipping line record.
    /// </returns>
    protected SalesPackingSlipDetailsTmp createSalesPackingSlipShippingLine(SalesShippingStat _salesShippingStat)
    {
        SalesPackingSlipDetailsTmp salesPackingSlipDetailsTmp = this.initializeSalesPackingSlipShippingLine(_salesShippingStat);

        this.insertSalesPackingSlipShippingLine(salesPackingSlipDetailsTmp);

        return salesPackingSlipDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesPackingSlipShippingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales packing slip shipping line.
    /// </summary>
    /// <param name = "_salesPackingSlipDetailsTmp">
    /// A <c>SalesPackingSlipDetailsTmp</c> sales packing slip shipping line record to insert.
    /// </param>
    protected void insertSalesPackingSlipShippingLine(SalesPackingSlipDetailsTmp _salesPackingSlipDetailsTmp)
    {
        _salesPackingSlipDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPackingSlipDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SalesPackingSlipDetailsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesPackingSlipDetailsTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesPackingSlipDetailsTmp))]
    public SalesPackingSlipDetailsTmp getSalesPackingSlipDetailsTmp()
    {
        SalesPackingSlipDetailsTmp salesPackingSlipTmp;

        this.setTransactionConnection(salesPackingSlipTmp);

        select salesPackingSlipTmp;

        return salesPackingSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPackingSlipHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SalesPackingSlipHeaderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesPackingSlipHeaderTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesPackingSlipHeaderTmp))]
    public SalesPackingSlipHeaderTmp getSalesPackingSlipHeaderTmp()
    {
        SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp;

        this.setTransactionConnection(salesPackingSlipHeaderTmp);

        select salesPackingSlipHeaderTmp;

        return salesPackingSlipHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        SysDocuBrandDetailsRegular docuBrandDetails;

        this.setTransactionConnection(docuBrandDetails);

        select docuBrandDetails;
        
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPackingSlipPackageDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the full data from the <c>SalesPackingSlipPackageDetailTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesPackingSlipPackageDetailTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesPackingSlipPackageDetailTmp))]
    public SalesPackingSlipPackageDetailTmp getSalesPackingSlipPackageDetailTmp()
    {
        SalesPackingSlipPackageDetailTmp salesPackingSlipPackageDetailTmp;

        this.setTransactionConnection(salesPackingSlipPackageDetailTmp);

        select salesPackingSlipPackageDetailTmp;

        return salesPackingSlipPackageDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemTypeByProdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes item type by given product type.
    /// </summary>
    /// <param name="_prodType">
    /// The given product type.
    /// </param>
    private void initItemTypeByProdType(TaxUnrealizedDocuProdType _prodType)
    {
        if (_prodType == TaxUnrealizedDocuProdType::Item)
        {
            itemType = ItemType::Item;
        }
        else
        {
            itemType = ItemType::Service;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item ID for the transaction.
    /// </summary>
    /// <param name = "_packingSlipLineSelection">
    /// A <c>SalesPackingSlipDPPackingSlipLineQuerySelection</c> object which the sales packing slip line should be created for.
    /// </param>
    /// <returns>
    /// The item number from the transaction.
    /// </returns>
    protected ItemId itemId(SalesPackingSlipDPPackingSlipLineQuerySelection _packingSlipLineSelection)
    {
        ItemId itemIdLocal = FormLetter::journalItemId(ModuleInventPurchSales::Sales, _packingSlipLineSelection.parmCustPackingSlipTrans().ItemId, _packingSlipLineSelection.parmCustPackingSlipTrans().ExternalItemId);

        if (inventDimReport.isInventDimItemId())
        {
            itemIdLocal += inventDimReport.reportStrItemId(_packingSlipLineSelection.parmCustPackingSlipTransInventDim());
        }

        return itemIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipBackOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales packing slip back order lines
    /// </summary>
    protected void createSalesPackingSlipBackOrderLines()
    {
        boolean                             ok;
        CustPackingSlipBackorderLineHistory custPackingSlipBackorderLineHistory;
        CustPackingSlipBackorderLine        custPackingSlipBackorderLine;
        
        custPackingSlipBackorderLine.recordLevelSecurity(true);

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler = new KittingSrsReportDataProviderPreProcess();
            QueryRun kittingTradeLoopTrans = kittingReportHandler.kittingCreateQueryRun(custPackingSlipJour, custPackingSlipVersion);
            while (kittingTradeLoopTrans.next())
            {
                custPackingSlipBackorderLine = kittingTradeLoopTrans.get(tableNum(CustPackingSlipBackorderLine));
                custPackingSlipBackorderLineHistory = kittingTradeLoopTrans.get(tableNum(CustPackingSlipBackorderLineHistory));
                this.createSalesPackingSlipBackOrderLinesHelper(custPackingSlipBackorderLine, custPackingSlipBackorderLineHistory);
            }
        }
        else
        {
            while select custPackingSlipBackorderLine
                where custPackingSlipBackorderLine.SalesId              == this.parmCustPackingSlipJour().SalesId
                   && custPackingSlipBackorderLine.PackingSlipId        == this.parmCustPackingSlipJour().PackingSlipId
                   && custPackingSlipBackorderLine.DeliveryDate         == this.parmCustPackingSlipJour().DeliveryDate
              outer join QtyBackorderSales from custPackingSlipBackorderLineHistory
                where custPackingSlipBackorderLineHistory.CustPackingSlipBackorderLine == custPackingSlipBackorderLine.RecId
                   && custPackingSlipBackorderLineHistory.ValidFrom <= this.parmCustPackingSlipVersion().VersionDateTime
                   && custPackingSlipBackorderLineHistory.ValidTo   >= this.parmCustPackingSlipVersion().VersionDateTime
            {
                this.createSalesPackingSlipBackOrderLinesHelper(custPackingSlipBackorderLine, custPackingSlipBackorderLineHistory);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipBackOrderLinesHelper</Name>
				<Source><![CDATA[
    private void createSalesPackingSlipBackOrderLinesHelper(CustPackingSlipBackorderLine custPackingSlipBackorderLine, CustPackingSlipBackorderLineHistory custPackingSlipBackorderLineHistory)
    {
        if (this.mustCreateSalesPackingSlipBackOrderLine(custPackingSlipBackorderLine))
        {
            if (this.parmCustPackingSlipVersion().isArchived())
            {
                custPackingSlipBackorderLine.QtyBackorderSales = custPackingSlipBackorderLineHistory.QtyBackorderSales;
            }

            this.createSalesPackingSlipBackOrderLine(custPackingSlipBackorderLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSalesPackingSlipBackOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales packing slip back order line must be created.
    /// </summary>
    /// <param name = "_custPackingSlipBackorderLine">
    /// A <c>CustPackingSlipBackorderLine</c> record which is the sales packing slip back order line.
    /// </param>
    /// <returns>
    /// true, if the sales packing slip back order line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateSalesPackingSlipBackOrderLine(CustPackingSlipBackorderLine _custPackingSlipBackorderLine)
    {
        boolean ok = false;

        if (this.parmCustFormletterParameters().TrackBackorderPackingSlip  == BackorderTracking::OnlyBackorders
            &&  _custPackingSlipBackorderLine.ConfirmedDlv                 <= this.parmCustPackingSlipJour().DeliveryDate)
        {
            ok = true;
        }

        if (this.parmCustFormletterParameters().TrackBackorderPackingSlip  == BackorderTracking::NotDelivered)
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipBackOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales packing slip back order line.
    /// </summary>
    /// <param name = "_custPackingSlipBackorderLine">
    /// A <c>CustPackingSlipBackorderLine</c> record which the sales packing slip back order line.
    /// </param>
    /// <returns>
    /// The created <c>SalesPackingSlipDetailsTmp</c> sales packing slip back order line record.
    /// </returns>
    protected SalesPackingSlipDetailsTmp createSalesPackingSlipBackOrderLine(CustPackingSlipBackorderLine _custPackingSlipBackorderLine)
    {
        SalesPackingSlipDetailsTmp salesPackingSlipDetailsTmp = this.initializeSalesPackingSlipBackOrderLine(_custPackingSlipBackorderLine);

        this.insertSalesPackingSlipBackOrderLine(salesPackingSlipDetailsTmp);

        return salesPackingSlipDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesPackingSlipBackOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales packing slip back order line.
    /// </summary>
    /// <param name = "_salesPackingSlipDetailsTmp">
    /// A <c>SalesPackingSlipDetailsTmp</c> sales packing slip back order line record to insert.
    /// </param>
    protected void insertSalesPackingSlipBackOrderLine(SalesPackingSlipDetailsTmp _salesPackingSlipDetailsTmp)
    {
        _salesPackingSlipDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the storage Dimension and the data to be enetered to temporary table.
    /// </summary>
    /// <param name = "_packingSlipLineSelection">
    /// A <c>SalesPackingSlipDPPackingSlipLineQuerySelection</c> object which the sales packing slip line is created for.
    /// </param>
    /// <returns>
    /// The string with the inventory dimensions.
    /// </returns>
    private str printDimHistory(SalesPackingSlipDPPackingSlipLineQuerySelection _packingSlipLineSelection)
    {
        SalesPackingSlipDPDimHistoryBuilder dimHistory = SalesPackingSlipDPDimHistoryBuilder::construct();

        dimHistory.parmCustPackingSlipJour(this.parmCustPackingSlipJour());
        dimHistory.parmCustPackingSlipTrans(_packingSlipLineSelection.parmCustPackingSlipTrans());
        dimHistory.parmCustPackingSlipVersion(this.parmCustPackingSlipVersion());
        dimHistory.parmInventDimSetup(inventDimSetup);
        dimHistory.parmDefaultInventDim(_packingSlipLineSelection.parmCustPackingSlipTransInventDim());

        return dimHistory.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic and calls helper methods and inserts data to temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        SalesPackingSlipContract    salesPackingSlipContract = this.parmPackingSlipContract();
        CustPackingSlipJourRecId    journalRecId = this.retrieveJournalRecId(salesPackingSlipContract);

        if (journalRecId)
        {
            SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp = SalesPackingSlipHeaderTmp::findJourRecId(journalRecId);

            if (   salesPackingSlipHeaderTmp.RecId 
                && !this.isPrintDocumentSet(salesPackingSlipContract)
                && salesPackingSlipHeaderTmp.IsProForma)
            {
                //the report data is already created so use it. this is the proforma scenario.
                this.copyReportData(salesPackingSlipHeaderTmp);
            }
            else
            {
                this.createReportData();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveJournalRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record Identifier from the sales packing slip document.
    /// </summary>
    /// <param name = "_salesPackingSlipContract">The sales packing slip document.</param>
    /// <returns>The record identifier</returns>
    protected CustPackingSlipJourRecId retrieveJournalRecId(SalesPackingSlipContract _salesPackingSlipContract)
    {
        RecId                       recId = _salesPackingSlipContract.parmRecordId();
        CustPackingSlipJourRecId    journalRecId;

        if (_salesPackingSlipContract.parmTableId() == tableNum(CustPackingSlipJour))
        {
            journalRecId = recId;
        }
        else if (_salesPackingSlipContract.parmTableId() == tableNum(CustPackingSlipVersion))
        {
            journalRecId = CustPackingSlipVersion::find(recId).CustPackingSlipJour;
        }
        
        return journalRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintDocumentSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the print document is set.
    /// </summary>
    /// <param name = "_salesPackingSlipContract">The data contract of the sales packing slip document.</param>
    /// <returns>true if the print document is set, otherwise; false.</returns>
    protected boolean isPrintDocumentSet(SalesPackingSlipContract _salesPackingSlipContract)
    {
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            TaxUnrealizedDocuSetLine taxUnrealizedDocuSetLine;
            select firstonly recId from taxUnrealizedDocuSetLine
                where taxUnrealizedDocuSetLine.PrintHeader == _salesPackingSlipContract.parmPrintHeader();

            return (taxUnrealizedDocuSetLine.RecId != 0);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report data for a sales packing slip document.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the sales packing slip to be copied.
    /// </param>
    protected void copyReportData(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        this.copyHeader(_salesPackingSlipHeaderTmp);
        this.copyLines(_salesPackingSlipHeaderTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the sales packing slip header.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record to copy.
    /// </param>
    protected void copyHeader(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        if (SalesPackingSlipDPDBInteractionInUsrConnectionFlight::instance().isEnabled())
        {
            this.setTransactionConnection(_salesPackingSlipHeaderTmp);
        }

        RecordSortedList recordList = new RecordSortedList(tableNum(SalesPackingSlipHeaderTmp));
        recordList.sortOrder(fieldNum(SalesPackingSlipHeaderTmp, RecId));
        recordList.ins(_salesPackingSlipHeaderTmp);

        //the created data is copied so it should be deleted.
        this.deleteCopiedHeader(_salesPackingSlipHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied sales packing slip header.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the copied sales packing slip.
    /// </param>
    protected void deleteCopiedHeader(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp;

        if (SalesPackingSlipDPDBInteractionInUsrConnectionFlight::instance().isEnabled())
        {
            this.setTransactionConnection(salesPackingSlipHeaderTmp);
        }

        delete_from salesPackingSlipHeaderTmp
            where salesPackingSlipHeaderTmp.RecId == _salesPackingSlipHeaderTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies sales packing slip lines.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the sales packing slip header for the lines to copy.
    /// </param>
    protected void copyLines(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(SalesPackingSlipDetailsTmp));
        recordList.sortOrder(fieldNum(SalesPackingSlipDetailsTmp, RecId));

        SalesPackingSlipDetailsTmp salesPackingSlipDetailsTmp;

        if (SalesPackingSlipDPDBInteractionInUsrConnectionFlight::instance().isEnabled())
        {
            this.setTransactionConnection(salesPackingSlipDetailsTmp);
        }

        while select salesPackingSlipDetailsTmp
            where salesPackingSlipDetailsTmp.CreatedTransactionId == _salesPackingSlipHeaderTmp.CreatedTransactionId
        {
            recordList.ins(salesPackingSlipDetailsTmp);
        }

        //the created data is copied so it should be deleted.
        this.deleteCopiedLines(_salesPackingSlipHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.copyPackageLines(_salesPackingSlipHeaderTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied sales packing slip lines.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the copied sales packing slip.
    /// </param>
    protected void deleteCopiedLines(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        SalesPackingSlipDetailsTmp salesPackingSlipDetailsTmp;

        if (SalesPackingSlipDPDBInteractionInUsrConnectionFlight::instance().isEnabled())
        {
            this.setTransactionConnection(salesPackingSlipDetailsTmp);
        }

        delete_from salesPackingSlipDetailsTmp
            where salesPackingSlipDetailsTmp.CreatedTransactionId == _salesPackingSlipHeaderTmp.CreatedTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPackageLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies sales packing slip package lines.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the sales packing slip header for the lines to copy.
    /// </param>
    protected void copyPackageLines(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(SalesPackingSlipPackageDetailTmp));
        recordList.sortOrder(fieldNum(SalesPackingSlipPackageDetailTmp, RecId));

        SalesPackingSlipPackageDetailTmp salesPackingSlipPackageDetailTmp;
        while select salesPackingSlipPackageDetailTmp
			where salesPackingSlipPackageDetailTmp.JournalRecId == _salesPackingSlipHeaderTmp.JournalRecId
        {
            recordList.ins(salesPackingSlipPackageDetailTmp);
        }

        //the created data is copied so it should be deleted.
        this.deleteCopiedPackageLines(_salesPackingSlipHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedPackageLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied sales packing slip package lines.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the copied sales packing slip.
    /// </param>
    protected void deleteCopiedPackageLines(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        SalesPackingSlipPackageDetailTmp salesPackingSlipPackageDetailTmp;
     
        delete_from salesPackingSlipPackageDetailTmp
        where salesPackingSlipPackageDetailTmp.JournalRecId == _salesPackingSlipHeaderTmp.JournalRecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing slip line.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// A <c>SalesPackingSlipHeaderTmp</c> record which is the sales packing slip header.
    /// </param>
    /// <param name = "_packingSlipLineSelection">
    /// A <c>SalesPackingSlipDPPackingSlipLineQuerySelection</c> object which the sales packing slip line should be initialized from.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesPackingSlipDetailsTmp</c> sales packing slip line record.
    /// </returns>
    protected SalesPackingSlipDetailsTmp initializeSalesPackingSlipLine(
        SalesPackingSlipHeaderTmp                       _salesPackingSlipHeaderTmp,
        SalesPackingSlipDPPackingSlipLineQuerySelection _packingSlipLineSelection)
    {
        const RefTableId CustPackingSlipTransTable = 1;

        SalesPackingSlipDetailsTmp salesPackingSlipTmp;

        this.setTransactionConnection(salesPackingSlipTmp);

        salesPackingSlipTmp.clear();

        salesPackingSlipTmp.JournalRecId                = this.parmCustPackingSlipJour().RecId;
        salesPackingSlipTmp.CustPackingSlipTrans        = _packingSlipLineSelection.parmCustPackingSlipTrans().RecId;

        if (this.checkPrintLineHeader(_packingSlipLineSelection.parmCustPackingSlipTrans()))
        {
            salesPackingSlipTmp.LineHeader              = _packingSlipLineSelection.parmCustPackingSlipTrans().LineHeader;
        }
        salesPackingSlipTmp.ItemId                      = this.itemId(_packingSlipLineSelection);

        salesPackingSlipTmp.Name                        = _packingSlipLineSelection.parmCustPackingSlipTrans().Name;
        salesPackingSlipTmp.Ordered                     = _packingSlipLineSelection.parmCustPackingSlipTrans().Ordered;
        salesPackingSlipTmp.SalesUnitTxt                = _packingSlipLineSelection.parmCustPackingSlipTrans().salesUnitTxt();
        salesPackingSlipTmp.Qty                         = _packingSlipLineSelection.parmCustPackingSlipTrans().Qty;
        salesPackingSlipTmp.Remain                      = _packingSlipLineSelection.parmCustPackingSlipTrans().Remain;
        salesPackingSlipTmp.ExternalItemId              = FormLetter::journalExternalItemId(ModuleInventPurchSales::Sales, _packingSlipLineSelection.parmCustPackingSlipTrans().ExternalItemId);
        salesPackingSlipTmp.ValueMST                    = _packingSlipLineSelection.parmCustPackingSlipTrans().ValueMST;

        if (_salesPackingSlipHeaderTmp.PdsEnabled)
        {
            salesPackingSlipTmp.PdsCWUnitId                 = _packingSlipLineSelection.parmCustPackingSlipTrans().pdsCWUnitId();
            salesPackingSlipTmp.PdsCWQtyDelivered           = _packingSlipLineSelection.parmCustPackingSlipTrans().PdsCWQty;
        }
        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            salesPackingSlipTmp.GrossWeight             = _packingSlipLineSelection.parmCustPackingSlipTrans().Qty * InventTable::find(_packingSlipLineSelection.parmCustPackingSlipTrans().ItemId).grossWeight();
        }
        // </GEELT>

        this.initializeSalesPackingSlipLineInventoryDimension(salesPackingSlipTmp, _packingSlipLineSelection);

        if ((this.parmCustFormletterDocument().DocuOnPackingSlip == DocuOnFormular::Line)
            || (this.parmCustFormletterDocument().DocuOnPackingSlip == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_packingSlipLineSelection.parmCustPackingSlipTrans(),this.parmCustFormletterDocument().DocuTypePackingSlip,DocuRestriction::External);
            salesPackingSlipTmp.Notes                   = Docu::concatDocuRefNotes(docuRefSearch);
        }

        salesPackingSlipTmp.TableNum                    = custPackingSlipTransTable;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler.setkitFields(salesPackingSlipTmp, _packingSlipLineSelection.parmCustPackingSlipTrans());
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
        {
            SalesLine salesLine =  _packingSlipLineSelection.parmCustPackingSlipTrans().salesLine();
            salesPackingSlipTmp.DualUseCertificate = COODualUseCertificate::certificateReportStr(salesLine.ItemId, salesLine.ShippingDateConfirmed, salesLine.DeliveryAddress().CountryRegionId, COOPrintOnDocumentType::PackingSlip);
        }

        return salesPackingSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesPackingSlipLineInventoryDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing slip shipping line inventory dimension.
    /// </summary>
    /// <param name = "_salesPackingSlipTmp">
    /// A <c>SalesPackingSlipDetailsTmp</c> object which is the sales packing slip line record.
    /// </param>
    /// <param name = "_packingSlipLineSelection">
    /// A <c>SalesPackingSlipDPPackingSlipLineQuerySelection</c> object which the sales packing slip line should be initialized from.
    /// </param>
    protected void initializeSalesPackingSlipLineInventoryDimension(SalesPackingSlipDetailsTmp _salesPackingSlipTmp,
           SalesPackingSlipDPPackingSlipLineQuerySelection _packingSlipLineSelection)
    {
        _salesPackingSlipTmp.InventDimPrint = this.printDimHistory(_packingSlipLineSelection);
        
        if (insertInventDim)
        {
            _salesPackingSlipTmp.InventDimProduct = FormLetter::inventDimReport(_packingSlipLineSelection.parmCustPackingSlipTransInventDim(), inventDimProductSetup, this.parmCustPackingSlipJour().LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesPackingSlipShippingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing slip shipping line.
    /// </summary>
    /// <param name = "_salesShippingStat">
    /// A <c>SalesShippingStat</c> record which is sued to initialize the sales packing slip shipping line.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesPackingSlipDetailsTmp</c> sales packing slip shipping line record.
    /// </returns>
    protected SalesPackingSlipDetailsTmp initializeSalesPackingSlipShippingLine(SalesShippingStat _salesShippingStat)
    {
        const RefTableId SalesShippingStatTable = 2;

        SalesPackingSlipDetailsTmp salesPackingSlipTmp;

        this.setTransactionConnection(salesPackingSlipTmp);

        salesPackingSlipTmp.clear();

        salesPackingSlipTmp.JournalRecId                = this.parmCustPackingSlipJour().RecId;

        salesPackingSlipTmp.NetWeight                   = _salesShippingStat.NetWeight;
        salesPackingSlipTmp.GrossWeight                 = _salesShippingStat.GrossWeight;
        salesPackingSlipTmp.CartonsQty                  = _salesShippingStat.CartonsQty;
        salesPackingSlipTmp.TableNum                    = SalesShippingStatTable;

        return salesPackingSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimSetup</Name>
				<Source><![CDATA[
    protected container getInventDimSetup()
    {
        return inventDimSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimProductSetup</Name>
				<Source><![CDATA[
    protected container getInventDimProductSetup()
    {
        return inventDimProductSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimReport</Name>
				<Source><![CDATA[
    protected InventDimCtrl_Rep_Sales getInventDimReport()
    {
        return inventDimReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesPackingSlipBackOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing slip back order line.
    /// </summary>
    /// <param name = "_custPackingSlipBackorderLine">
    /// A <c>CustPackingSlipBackorderLine</c> record which is sued to initialize the sales packing slip back order line.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesPackingSlipDetailsTmp</c> sales packing slip back order line record.
    /// </returns>
    protected SalesPackingSlipDetailsTmp initializeSalesPackingSlipBackOrderLine(CustPackingSlipBackorderLine _custPackingSlipBackorderLine)
    {
        const RefTableId CustPackingSlipBackorderLineTable = 3;

        SalesPackingSlipDetailsTmp salesPackingSlipTmp;

        this.setTransactionConnection(salesPackingSlipTmp);

        salesPackingSlipTmp.clear();

        salesPackingSlipTmp.JournalRecId                = this.parmCustPackingSlipJour().RecId;

        salesPackingSlipTmp.BackOrderItemId             = _custPackingSlipBackorderLine.ItemId;
        salesPackingSlipTmp.BackOrderName               = _custPackingSlipBackorderLine.Name;
        salesPackingSlipTmp.BackOrderQtyBackOrderSales  = _custPackingSlipBackorderLine.QtyBackorderSales;
        salesPackingSlipTmp.BackOrderConfirmedDlv       = _custPackingSlipBackorderLine.ConfirmedDlv;
        salesPackingSlipTmp.TableNum                    = CustPackingSlipBackorderLineTable;
        
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            CustPackingSlipTrans custPackingSlipTrans;
            kittingReportHandler.setkitFields(salesPackingSlipTmp, custPackingSlipTrans);
        }

        return salesPackingSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesPackingSlipHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing slip header.
    /// </summary>
    /// <returns>
    /// The initialized <c>SalesPackingSlipHeaderTmp</c> sales packing slip header record.
    /// </returns>
    protected SalesPackingSlipHeaderTmp initializeSalesPackingSlipHeader()
    {
        CompanyInfo                             companyInfo = CompanyInfo::find();
        #TransportationDocument

        LogisticsAddressCountryRegionISOCode isoCountryCode     = SysCountryRegionCode::countryInfo();

        SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp;

        this.setTransactionConnection(salesPackingSlipHeaderTmp);

        salesPackingSlipHeaderTmp.JournalRecId                  = this.parmCustPackingSlipJour().RecId;

        salesPackingSlipHeaderTmp.PdsEnabled                    = #PdsCatchWeightEnabled;

        salesPackingSlipHeaderTmp.PrintLogo                     = NoYes::No;
        if (this.parmCustFormletterParameters().PrePrintLevelPackingSlip == PrePrintLevel::BlankPaper
         && this.parmCustPackingSlipJour().ShipCarrierBlindShipment      == NoYes::No)
        {
            salesPackingSlipHeaderTmp.CompanyName               = companyInfo.name();
            salesPackingSlipHeaderTmp.CompanyAddress            = DirUtility::replaceAddressTokenLanguage(companyInfo.postalAddress(), this.parmCustPackingSlipJour().LanguageId);
            salesPackingSlipHeaderTmp.CompanyPhone              = companyInfo.phone();
            salesPackingSlipHeaderTmp.CompanyTeleFax            = companyInfo.teleFax();
            salesPackingSlipHeaderTmp.CompanyGiro               = companyInfo.Giro;
            salesPackingSlipHeaderTmp.CompanyCoRegNum           = companyInfo.CoRegNum;
            salesPackingSlipHeaderTmp.CompanyEnterpriseNumber   = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmCustPackingSlipJour().DocumentDate);
            salesPackingSlipHeaderTmp.CompanyLogo               = FormLetter::companyLogo();
            salesPackingSlipHeaderTmp.ShowCompanyVATNum         = this.parmCustFormletterParameters().PrintSalesPackingSlipVATNum;
            
            var custPackingSlipJourTable = this.parmCustPackingSlipJour();
            salesPackingSlipHeaderTmp.CompanyVATNum             = TaxTransactionTaxIDHelper::getTaxID(
                custPackingSlipJourTable.TableId,
                custPackingSlipJourTable.RecId,
                custPackingSlipJourTable.DeliveryDate).getLegalEntityTaxID();

            if (conLen(salesPackingSlipHeaderTmp.CompanyLogo) > 0)
            {
                salesPackingSlipHeaderTmp.PrintLogo             = NoYes::Yes;
            }

            if (companyInfo.PrintEnterpriseregister_NO)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
                salesPackingSlipHeaderTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"), this.parmCustPackingSlipJour().LanguageId);
            }
        }
        salesPackingSlipHeaderTmp.DeliveryName                  = this.parmCustPackingSlipJour().DeliveryName;
        salesPackingSlipHeaderTmp.DeliveryAddress               = this.parmCustPackingSlipJour().deliveryAddress();
        salesPackingSlipHeaderTmp.InvoicingName                 = this.parmCustPackingSlipJour().InvoicingName;
        salesPackingSlipHeaderTmp.InvoicingAddress              = this.parmCustPackingSlipJour().invoicingAddress();
        salesPackingSlipHeaderTmp.PackingSlipId                 = this.parmCustPackingSlipJour().PackingSlipId;

        if (!this.parmCustPackingSlipJour().isProforma())
        {
            salesPackingSlipHeaderTmp.InternalPackingSlipId     = this.parmCustPackingSlipVersion().InternalPackingSlipId;
        }
        else
        {
            salesPackingSlipHeaderTmp.IsProForma = NoYes::Yes;
        }

        salesPackingSlipHeaderTmp.DeliveryDate                  = this.parmCustPackingSlipJour().DeliveryDate;
        salesPackingSlipHeaderTmp.SalesId                       = this.parmCustPackingSlipJour().SalesId;
        salesPackingSlipHeaderTmp.PurchaseOrder                 = this.parmCustPackingSlipJour().PurchaseOrder;
        salesPackingSlipHeaderTmp.CustomerRef                   = this.parmCustPackingSlipJour().CustomerRef;
        salesPackingSlipHeaderTmp.OrderAccount                  = this.parmCustPackingSlipJour().OrderAccount;
        salesPackingSlipHeaderTmp.SalesAdministrator            = HcmWorker::find(this.parmCustPackingSlipJour().WorkerSalesTaker).PersonnelNumber;
        salesPackingSlipHeaderTmp.DlvMode                       = this.parmCustPackingSlipJour().deliveryMode();
        salesPackingSlipHeaderTmp.DlvTerms                      = this.parmCustPackingSlipJour().deliveryTerms();
        salesPackingSlipHeaderTmp.bolFreightedBy                = this.parmCustPackingSlipJour().bolFreightedBy;

        if ((this.parmCustFormletterDocument().DocuOnPackingSlip == DocuOnFormular::Head)
         || (this.parmCustFormletterDocument().DocuOnPackingSlip == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(this.parmCustPackingSlipJour(),this.parmCustFormletterDocument().DocuTypePackingSlip,DocuRestriction::External);
            salesPackingSlipHeaderTmp.MainNotes                 = Docu::concatDocuRefNotes(docuRefSearch);
        }

        FormLetterRemarks formLetterRemarks = FormLetterRemarks::find(this.parmCustPackingSlipJour().LanguageId,FormTextType::SalesPackingSlip);
        salesPackingSlipHeaderTmp.FormLetterRemarks             = formLetterRemarks.Txt;
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            salesPackingSlipHeaderTmp.MCRExpedite               = this.parmCustPackingSlipJour().MCRHasExpeditedLines() ? "@MCR22070" : '';
        }

        str shippingInfo = this.shippingInfo();

        salesPackingSlipHeaderTmp.ShippingInfo                  = shippingInfo;
        salesPackingSlipHeaderTmp.bolCarrierName                = this.parmCustPackingSlipJour().bolCarrierName;
        salesPackingSlipHeaderTmp.bolAddress                    = this.parmCustPackingSlipJour().bolAddress;
        salesPackingSlipHeaderTmp.DeliveryReason                = this.parmCustPackingSlipJour().deliveryReason();

        salesPackingSlipHeaderTmp.PrintTransportationDocument   = NoYes::No;
        if (isoCountryCode == #isoIT && this.parmCustFormletterParameters().TransportationDocumentOnPackingSlip)
        {
            salesPackingSlipHeaderTmp.TransportationCompilerName        = HcmWorker::find(this.parmCustPackingSlipJour().Compiler).name();
            TransportationDeliveryParty transportationDeliveryParty     = TransportationDeliveryParty::find(this.parmCustPackingSlipJour().TransportationDeliveryContractor);
            salesPackingSlipHeaderTmp.TransportationContractorName      = transportationDeliveryParty.name();
            salesPackingSlipHeaderTmp.TransportationContractorAddress   = transportationDeliveryParty.address();

            transportationDeliveryParty                                 = TransportationDeliveryParty::find(this.parmCustPackingSlipJour().TransportationDeliveryLoader);
            salesPackingSlipHeaderTmp.TransportationLoaderName          = transportationDeliveryParty.name();
            salesPackingSlipHeaderTmp.TransportationLoaderAddress       = transportationDeliveryParty.address();

            transportationDeliveryParty                                 = TransportationDeliveryParty::find(this.parmCustPackingSlipJour().TransportationDeliveryOwner);
            salesPackingSlipHeaderTmp.TransportationOwnerName           = transportationDeliveryParty.name();
            salesPackingSlipHeaderTmp.TransportationOwnerAddress        = transportationDeliveryParty.address();

            salesPackingSlipHeaderTmp.AdditionalDeclarations            = Docu::concatDocuRefNotes(DocuRefSearch::newTypeIdAndRestriction(this.parmCustPackingSlipJour(), #AdditionalDeclarations, DocuRestriction::Internal));
            salesPackingSlipHeaderTmp.AdditionalNotes                   = Docu::concatDocuRefNotes(DocuRefSearch::newTypeIdAndRestriction(this.parmCustPackingSlipJour(), #AdditionalNotes,        DocuRestriction::Internal));
            salesPackingSlipHeaderTmp.AdditionalInstructions            = Docu::concatDocuRefNotes(DocuRefSearch::newTypeIdAndRestriction(this.parmCustPackingSlipJour(), #AdditionalInstructions, DocuRestriction::Internal));

            salesPackingSlipHeaderTmp.PrintTransportationDocument       =  this.parmCustFormletterParameters().TransportationDocumentOnPackingSlip;
        }

        salesPackingSlipHeaderTmp.PrePrintLevel                 = this.parmCustFormletterParameters().PrePrintLevelPackingSlip;

        salesPackingSlipHeaderTmp.PrintShippment                =  (this.parmCustFormletterParameters().ShippingDetailsOnPackingSlip == NoYes::Yes)
                                                                && (this.parmCustPackingSlipJour().deliveryReason() || this.parmCustPackingSlipJour().bolCarrierName || shippingInfo);
        salesPackingSlipHeaderTmp.ShipCarrierBlindShipment      = this.parmCustPackingSlipJour().ShipCarrierBlindShipment;

        // <GEELT>
        if (isoCountryCode == #isoLT)
        {
            CustTable custTable = CustTable::find(this.parmCustPackingSlipJour().OrderAccount);
            salesPackingSlipHeaderTmp.OrderAccountEnterpriseCode = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmCustPackingSlipJour().DeliveryDate);

            salesPackingSlipHeaderTmp.CompanyEnterpriseCode = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmCustPackingSlipJour().DeliveryDate);;
        }
        // </GEELT>

        if (IntrastatCountryRegionParameters::isInEUByIsoCode() && this.parmCustPackingSlipJour().TransportationDocument)
        {
            TransportationDocument transportationDocument = TransportationDocument::find(this.parmCustPackingSlipJour().TransportationDocument);

            salesPackingSlipHeaderTmp.PrintTransportationDocument = transportationDocument.DoPrintTransportationDocument;

            if (salesPackingSlipHeaderTmp.PrintTransportationDocument)
            {
                UserId      postedUserId    = SalesParmTable::findSalesId(this.parmCustPackingSlipJour().SalesId, this.parmCustPackingSlipJour().ParmId).createdBy;
                HcmWorker   postedHcmWorker = HcmWorker::find(HcmWorker::userId2Worker(postedUserId));

                // Set values from transportation document.
                salesPackingSlipHeaderTmp.TransportationContactPersonName       = postedHcmWorker.name();
                salesPackingSlipHeaderTmp.TransportationContactPersonTitle      = postedHcmWorker.title();

                salesPackingSlipHeaderTmp.TransportationContractorAddress       = transportationDocument.carrierAddress();
                salesPackingSlipHeaderTmp.TransportationContractorName          = transportationDocument.carrierName();

                salesPackingSlipHeaderTmp.TransportationIssuedByName            = transportationDocument.issuedByName();
                salesPackingSlipHeaderTmp.TransportationIssuedByTitle           = transportationDocument.issuedByTitle();

                salesPackingSlipHeaderTmp.TransportationLoadedDateTime          = transportationDocument.LoadedDateTime;
                salesPackingSlipHeaderTmp.TransportationLoaderAddress           = transportationDocument.displayLoadedPostalAddressing();
                salesPackingSlipHeaderTmp.TransportationLoaderName              = transportationDocument.LoadedAddressName;

                salesPackingSlipHeaderTmp.TransportationPackageDangerDegree     = transportationDocument.PackageDangerDegree;
                salesPackingSlipHeaderTmp.TransportationPackageDescription      = transportationDocument.PackageDescription;

                // Set values from transportation vehicle.
                TransportationVehicle transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);

                if (transportationVehicle)
                {
                    salesPackingSlipHeaderTmp.TransportationVehicleDescription      = transportationVehicle.modelDescription();
                    salesPackingSlipHeaderTmp.TransportationVehicleDriverName       = transportationVehicle.DriverName;
                    salesPackingSlipHeaderTmp.TransportationVehiclePlateNumber      = transportationVehicle.PlateNumber;
                    salesPackingSlipHeaderTmp.TransportationVehicleTrailerNumber    = transportationVehicle.TrailerNumber;
                }
            }
        }

        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            salesPackingSlipHeaderTmp.CompanyRegNum                         = companyInfo.RegNum;
            salesPackingSlipHeaderTmp.CompanyEmail                          = companyInfo.email();

            salesPackingSlipHeaderTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, this.parmCustPackingSlipJour().DocumentDate);

            BankAccountTable bankAccountTable = BankAccountTable::find(companyInfo.Bank);

            salesPackingSlipHeaderTmp.CompanyBankAccountName    = bankAccountTable.Name;
            salesPackingSlipHeaderTmp.CompanyBankAccountNum     = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
																	bankAccountTable.AccountNum : "@AccountsReceivable:FiveAsterisk";
            salesPackingSlipHeaderTmp.CompanyBankAccountRegNum  = bankAccountTable.RegistrationNum;

            CustTable custTable = CustTable::find(this.parmCustPackingSlipJour().OrderAccount);

            salesPackingSlipHeaderTmp.OrderAccountRegNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmCustPackingSlipJour().DocumentDate);
            
            var custPackingSlipJourTable = this.parmCustPackingSlipJour();
            salesPackingSlipHeaderTmp.OrderAccountVATNum = TaxTransactionTaxIDHelper::getTaxID(
                custPackingSlipJourTable.TableId,
                custPackingSlipJourTable.RecId,
                custPackingSlipJourTable.DocumentDate).getCounterPartyTaxID();
        }
        // </GEECZ>

        // set Document Branding Header;
        this.createSysDocuBrandDetails(salesPackingSlipHeaderTmp);

        return salesPackingSlipHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// The <c>SalesPackingSlipHeaderTmp</c> record which is the header for the report data.
    /// </param>
    /// <returns>
    /// The created <c>SysDocuBrandDetailsRegular</c> record which contains the header details.
    /// </returns>
    protected SysDocuBrandDetailsRegular createSysDocuBrandDetails(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        SysDocuBrandDetailsRegular docuBrandDetails = this.initializeSysDocuBrandDetails(_salesPackingSlipHeaderTmp);

        this.insertSysDocuBrandDetails(docuBrandDetails);

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SysDocuBrandDetailsRegular</c> record with header details.
    /// </summary>
    /// <param name = "_salesPackingSlipHeaderTmp">
    /// The <c>SalesPackingSlipHeaderTmp</c> record which is the header for the report data.
    /// </param>
    /// <returns>
    /// The initialized <c>SysDocuBrandDetailsRegular</c> record which contains the header details.
    /// </returns>
    protected SysDocuBrandDetailsRegular initializeSysDocuBrandDetails(SalesPackingSlipHeaderTmp _salesPackingSlipHeaderTmp)
    {
        SysDocuBrandDetailsRegular  bufferTable     = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        
        SysDocuBrandDetailsRegular  docuBrandDetails;

        this.setTransactionConnection(docuBrandDetails);

        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>SysDocuBrandDetailsRegular</c> record.
    /// </summary>
    /// <param name = "_sysDocuBrandDetailsRegular">The initialized <c>SysDocuBrandDetailsRegular</c> record which contains the header details.</param>
    protected void insertSysDocuBrandDetails(SysDocuBrandDetailsRegular _sysDocuBrandDetailsRegular)
    {
        _sysDocuBrandDetailsRegular.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipPackageLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales packing slip package lines.
    /// </summary>
    protected void createSalesPackingSlipPackageLines()
    {
        PlInventPackageTrans inventPackageTrans;
        PlInventPackageTable inventPackageTable;
        RecId                journalRecId = this.parmCustPackingSlipJour().RecId;

        SalesPackingSlipPackageDetailTmp salesPackingSlipPackageDetailTmp;

        this.setTransactionConnection(salesPackingSlipPackageDetailTmp);

        insert_recordset salesPackingSlipPackageDetailTmp (JournalRecId, PackageId, Quantity, Description)
            select journalRecId, PackageId, sum(Qty) from inventPackageTrans
                group by PackageId
                where   inventPackageTrans.SalesId      == this.parmCustPackingSlipJour().SalesId &&
                        inventPackageTrans.InvoiceId    == this.parmCustPackingSlipJour().PackingSlipId &&
                        inventPackageTrans.InvoiceDate  == this.parmCustPackingSlipJour().DeliveryDate &&
                        !inventPackageTrans.TransDate
            outer join Description from inventPackageTable
                group by Description
                where   inventPackageTable.PackageId    == inventPackageTrans.PackageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipping information.
    /// </summary>
    /// <returns>
    /// The shipping information string.
    /// </returns>
    private str shippingInfo()
    {
        SalesShippingStat   salesShipping;
        LanguageId          designLang = this.parmCustPackingSlipJour().LanguageId;

        if (this.parmCustFormletterParameters().ShowOnlyOneShippingLineOnPackingSlip)
        {
            select firstonly sum(NetWeight), sum(GrossWeight), sum(CartonsQty) from salesShipping
                group by SalesId, PackingSlipId, DeliveryDate
                where salesShipping.SalesId       == this.parmCustPackingSlipJour().SalesId &&
                      salesShipping.PackingSlipId == this.parmCustPackingSlipJour().PackingSlipId &&
                      salesShipping.DeliveryDate  == this.parmCustPackingSlipJour().DeliveryDate;
        }

        str txt = salesShipping.NetWeight                  ? strFmt("%1 : %2  ", SysLabel::labelId2String(literalStr("@SYS23743"),designLang), salesShipping.NetWeight)    : '';
        txt += salesShipping.GrossWeight                ? strFmt("%1 : %2  ", SysLabel::labelId2String(literalStr("@SYS53799"),designLang), salesShipping.GrossWeight)  : '';
        txt += this.parmCustPackingSlipJour().bolPackageAppearance ? strFmt("%1 : %2  ", SysLabel::labelId2String(literalStr("@SYS74097"),designLang), SalesPackageAppearance::txt(this.parmCustPackingSlipJour().bolPackageAppearance, this.parmCustPackingSlipJour().LanguageId)) : '';
        txt += salesShipping.CartonsQty                 ? strFmt("%1 : %2  ", SysLabel::labelId2String(literalStr("@SYS50776"),designLang), salesShipping.CartonsQty)   : '';

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipContract</Name>
				<Source><![CDATA[
    public SalesPackingSlipContract parmPackingSlipContract()
    {
        return this.parmDataContract() as SalesPackingSlipContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustFormletterParameters</Name>
				<Source><![CDATA[
    public CustFormletterParameters parmCustFormletterParameters()
    {
        if (!custFormletterParameters.RecId)
        {
            custFormletterParameters = CustFormletterParameters::find();
        }

        return custFormletterParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustFormletterDocument</Name>
				<Source><![CDATA[
    public CustFormletterDocument parmCustFormletterDocument()
    {
        if (!custFormletterDocument.RecId)
        {
            custFormletterDocument = CustFormletterDocument::find();
        }

        return custFormletterDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the database transaction connection for a record from the connection associated with the report.
    /// </summary>
    /// <param name = "_reportRecord">
    /// A record to set database transaction for.
    /// </param>
    final protected void setTransactionConnection(Common _reportRecord)
    {
        var connection = this.parmUserConnection();

        if (connection)
        {
            _reportRecord.setConnection(connection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>