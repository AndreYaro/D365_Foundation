<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRuleAutoBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationMatchRuleAutoBatch</c> provides the interface to run matching rule/rule set automation.
/// </summary>
class BankReconciliationMatchRuleAutoBatch extends RunBaseBatch implements BatchRetryable
{
    BankReconciliationHeader header;
    container headerContainer;

    BankReconciliationMatchRuleSetId matchRuleSetId;
    BankReconciliationMatchRuleId matchRuleId;

    DialogGroup groupMatchRule;

    DialogField dialogMatchRuleSet;
    DialogField dialogMatchRule;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        matchRuleSetId,
        matchRuleId,
        headerContainer
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@Bank:BankReconciliationMatchingRuleCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        groupMatchRule = dialog.addGroup("@GLS222267");

        dialogMatchRuleSet = dialog.addFieldValue(extendedTypeStr(BankReconciliationMatchRuleSetId), matchRuleSetId);
        dialogMatchRuleSet.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(BankReconciliationMatchRuleAutoBatch, modifiedMatchRuleSet),
            this);

        dialogMatchRule = dialog.addFieldValue(extendedTypeStr(BankReconciliationMatchRuleId), matchRuleId);
        dialogMatchRule.registerOverrideMethod(
            methodStr(FormStringControl, Lookup),
            methodStr(BankReconciliationMatchRuleAutoBatch, lookupActiveMatchingRule),
            this);

        this.setControlsStatus();
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from dialog.
    /// </summary>
    /// <returns>
    /// Returns true if the operation succeed.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        matchRuleSetId = dialogMatchRuleSet.value();
        matchRuleId = dialogMatchRule.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedMatchRuleSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the modified method for control matching rule set.
    /// </summary>
    /// <param name="_control">
    /// Control for matching rule set.
    /// </param>
    /// <returns>
    /// True if control value is modified; otherwise, false.
    /// </returns>
    public boolean modifiedMatchRuleSet(Object _control)
    {
        this.setControlsStatus();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        headerContainer = buf2Con(header);

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconciliationHeader</Name>
				<Source><![CDATA[
    public BankReconciliationHeader parmBankReconciliationHeader(BankReconciliationHeader _header = header)
    {
        header = _header;

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (BankAdvancedReconciliationLockFlight::instance().isEnabled())
        {
            BankAdvancedReconciliationLock lock = new BankAdvancedReconciliationLock(header.AccountId);
            SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(BankInstrumentationConstants::AdvancedBankReconciliationLock, BankInstrumentationConstants::BankNamespace);

            try
            {
                using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BankInstrumentationConstants::AdvancedBankReconciliationEnterLock))
                {
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationBankAccountTableRecId, int642Str(BankAccountTable::find(header.AccountId).RecId));
                    lock.enterLock(this.parmCurrentBatch().BatchJobId);
                }

                if (lock.isLockAcquired())
                {
                    header.reread();
                    if (header && !header.isReconciled())
                    {
                        if (matchRuleSetId)
                        {
                            BankReconMatchingRuleAutoProcessor::processMatchRuleSet(
                                header.RecId,
                                BankReconciliationMatchRuleSet::findBySetId(matchRuleSetId).RecId);
                        }
                        else if (matchRuleId)
                        {
                            BankReconMatchingRuleAutoProcessor::processMatchRule(
                                header.RecId,
                                BankReconciliationMatchRule::findByRuleId(matchRuleId).RecId);
                        }
                    }
                }
            }
            finally
            {
                using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BankInstrumentationConstants::AdvancedBankReconciliationExitLock))
                {
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationBankAccountTableRecId, int642Str(BankAccountTable::find(header.AccountId).RecId));
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationLockAcquired, strFmt("%1", lock.isLockAcquired()));
                    lock.exitLock();
                }
            }
        }
        else
        {
            if (header)
            {
                try
                {

                    BankAccountTable::updateIsRunMatchingRule(header.AccountId, true);

                    if (matchRuleSetId)
                    {
                        BankReconMatchingRuleAutoProcessor::processMatchRuleSet(
                            header.RecId,
                            BankReconciliationMatchRuleSet::findBySetId(matchRuleSetId).RecId);
                    }
                    else if (matchRuleId)
                    {
                        BankReconMatchingRuleAutoProcessor::processMatchRule(
                            header.RecId,
                            BankReconciliationMatchRule::findByRuleId(matchRuleId).RecId);
                    }
                }
                finally
                {
                    BankAccountTable::updateIsRunMatchingRule(header.AccountId, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets matching rule control editable only when matching rule set is not input.
    /// </summary>
    private void setControlsStatus()
    {
        if (dialogMatchRuleSet.value())
        {
            dialogMatchRule.value('');
            dialogMatchRule.enabled(false);
        }
        else
        {
            dialogMatchRule.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        if (!header)
        {
            header = con2Buf(headerContainer);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArgsFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Throws the exception for the failure of the parameter validation.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     The error of the parameter validation.
    /// </exception>
    private static void checkArgsFailed()
    {
        throw error("@GLS221621");
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankReconciliationMatchRuleAutoBatch autoBatch = new BankReconciliationMatchRuleAutoBatch();

        if (!_args)
        {
            BankReconciliationMatchRuleAutoBatch::checkArgsFailed();
        }

        Common record = _args.record();
        if (!record
            || record.RecId == 0
            || record.TableId != tableNum(BankReconciliationHeader))
        {
            BankReconciliationMatchRuleAutoBatch::checkArgsFailed();
        }

        autoBatch.parmBankReconciliationHeader(record);

        autoBatch.setRetryCount(0);
        
        if (autoBatch.prompt())
        {
            autoBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupActiveMatchingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the Lookup method for control matching rule.
    /// </summary>
    /// <param name = "_control">
    /// Control for matching rule.
    /// </param>
    public void lookupActiveMatchingRule(Object _control)
    {
        Query query = new Query();
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(BankReconciliationMatchRule), _control);

        // Add fields to be shown.
        sysTableLookup.addLookupfield(fieldnum(BankReconciliationMatchRule, RuleId));

        // Limit and arrange the data selection.
        QueryBuildDataSource qbds = query.addDataSource(tablenum(BankReconciliationMatchRule));
        qbds.addRange(fieldNum(BankReconciliationMatchRule, IsActive)).value(queryvalue(NoYes::Yes));

        if (!FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            BankReconciliationMatchRuleProcessor::excludeModernBankReconciliationActionsFromQueryRange(qbds);
        }
        else
        {
            BankReconciliationMatchRuleProcessor::excludeMarkAsNewActionFromQueryRange(qbds);
        }

        sysTableLookup.parmQuery(query);

        // Perform the lookup.
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!matchRuleSetId && !matchRuleId)
        {
            // Please select a matching rule or matching rule set
            ret = checkFailed("@CashManagement:MatchingRuleAndMatchingRuleSetAreEmpty");
        }

        BankReconciliationMatchRule bankReconciliationMatchRule;
        select firstOnly bankReconciliationMatchRule
            where bankReconciliationMatchRule.RuleId == matchRuleId
                && bankReconciliationMatchRule.IsActive == NoYes::Yes;

        if (!bankReconciliationMatchRule && matchRuleId)
        {
            ret = false;
            // Please select an active matching rule
            error("@CashManagement:MatchingRuleIsInactive");
        }

        if (BankAccountTable::find(header.AccountId).IsRunMatchingRule)
        {
            ret = checkFailed(strFmt("@CashManagement:BankRunMatchingRuleConflict", header.AccountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetryCount</Name>
				<Source><![CDATA[
    private void setRetryCount(int _retryCount)
    {
        this.batchInfo().parmBatchHeader().parmRetriesOnFailure(_retryCount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>