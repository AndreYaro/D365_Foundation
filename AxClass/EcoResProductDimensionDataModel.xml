<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimensionDataModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductDimensionDataModel</c> class describes the relationships between the product dimension entities in EcoRes.
/// </summary>
public class EcoResProductDimensionDataModel
{
    private Map dimension2Master = new Map(Types::Integer, Types::Integer);
    private Map dimension2Variant = new Map(Types::Integer, Types::Integer);
    private Map dimension2DimFieldId = new Map(Types::Integer, Types::Integer);
    private Map dimFieldId2Dimension = new Map(Types::Integer, Types::Integer);
    private Map master2dimension = new Map(Types::Integer, Types::Integer);
    private Map master2DimFieldId = new Map(Types::Integer, Types::Integer);
    private Map variant2dimension = new Map(Types::Integer, Types::Integer);
    private Map variant2DimFieldId = new Map(Types::Integer, Types::Integer);
    private Map dimFieldId2Variant = new Map(Types::Integer, Types::Integer);

    private static EcoResProductDimensionDataModel instance = new EcoResProductDimensionDataModel();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEntry</Name>
				<Source><![CDATA[
    final protected void addEntry(FieldId _invendDimFieldId, TableId _dimensionTableId, TableId _masterDimensionTableId, TableId _variantDimensionTableId)
    {
        dimension2Master.insert(_dimensionTableId, _masterDimensionTableId);
        dimension2Variant.insert(_dimensionTableId, _variantDimensionTableId);
        dimension2DimFieldId.insert(_dimensionTableId, _invendDimFieldId);

        dimFieldId2Dimension.insert(_invendDimFieldId, _dimensionTableId);
        master2Dimension.insert(_masterDimensionTableId, _dimensionTableId);
        variant2dimension.insert(_variantDimensionTableId, _dimensionTableId);

        master2DimFieldId.insert(_masterDimensionTableId, _invendDimFieldId);
        variant2DimFieldId.insert(_variantDimensionTableId, _invendDimFieldId);
        dimFieldId2Variant.insert(_invendDimFieldId, _variantDimensionTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a collection of the table IDs for the dimension value tables.
    /// </summary>
    /// <returns>
    ///    A collection of table IDs.
    /// </returns>
    public Set dimensionTables()
    {
        return dimension2Master.domainSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>variantDimensionTableId2DimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the table ID of the instance of the dimension value table that corresponds to the product variant
    ///    dimension attribute value table.
    /// </summary>
    /// <param name = "_variantDimensionTableId">The table ID of the instance of the variant dimension value table.</param>
    /// <returns>
    ///    The table ID of the instance of the dimension value table.
    /// </returns>
    public TableId variantDimensionTableId2DimensionTableId(TableId _variantDimensionTableId)
    {
        if (variant2Dimension.exists(_variantDimensionTableId))
        {
            return variant2Dimension.lookup(_variantDimensionTableId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>masterDimensionTableId2DimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the table ID of the instance of the dimension value table that corresponds to the product master 
    ///    dimension attribute value table.
    /// </summary>
    /// <param name = "_masterDimensionTableId">The table ID of the instance of the product master dimension value table.</param>
    /// <returns>
    ///    The table ID of the instance of the dimension value table.
    /// </returns>
    public TableId masterDimensionTableId2DimensionTableId(TableId _masterDimensionTableId)
    {
        if (master2Dimension.exists(_masterDimensionTableId))
        {
            return master2Dimension.lookup(_masterDimensionTableId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>masterDimensionTableId2InventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the field ID of the dimension in the <c>InventDim</c> table that corresponds to the product master
    ///    dimension attribute value table.
    /// </summary>
    /// <param name = "_dimensionTableId">The table ID of the instance of the dimension value table.</param>
    /// <returns>
    ///    The field ID of the dimension in the <c>InventDim</c> table.
    /// </returns>
    public FieldId masterDimensionTableId2InventDimFieldId(TableId _masterDimensionTableId)
    {
        if (master2DimFieldId.exists(_masterDimensionTableId))
        {
            return master2DimFieldId.lookup(_masterDimensionTableId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>variantDimensionTableId2InventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the field ID of the dimension in the <c>InventDim</c> table that corresponds to the product variant
    ///    dimension attribute value table.
    /// </summary>
    /// <param name = "_dimensionTableId">The table ID of the instance of the dimension value table.</param>
    /// <returns>
    ///    The field ID of the dimension in the <c>InventDim</c> table.
    /// </returns>
    public FieldId variantDimensionTableId2InventDimFieldId(TableId _variantDimensionTableId)
    {
        if (variant2DimFieldId.exists(_variantDimensionTableId))
        {
            return variant2DimFieldId.lookup(_variantDimensionTableId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFieldId2VariantDimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the table ID of the dimension attribute of the product variant that corresponds to the field ID in the <c>InventDim</c> table.
    /// </summary>
    /// <param name = "_invendDimFieldId">The field ID of the dimension in the <c>InventDim</c> table.</param>
    /// <returns>
    ///    The table ID of the instance of the dimension value table.
    /// </returns>
    public TableId inventDimFieldId2VariantDimensionTableId(FieldId _invendDimFieldId)
    {
        if (dimFieldId2Variant.exists(_invendDimFieldId))
        {
            return dimFieldId2Variant.lookup(_invendDimFieldId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionTableId2MasterDimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the table ID of the product master dimension attribute value table that corresponds to the
    ///    instance of the dimension value table.
    /// </summary>
    /// <param name = "_dimensionTableId">The table ID of the instance of the dimension value table.</param>
    /// <returns>
    ///    The table ID of the dimension attribute of the product master that corresponds to the dimension value.
    /// </returns>
    public TableId dimensionTableId2MasterDimensionTableId(TableId _dimensionTableId)
    {
        if (dimension2Master.exists(_dimensionTableId))
        {
            return dimension2Master.lookup(_dimensionTableId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionTableId2VariantDimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the table ID of the product variant dimension attribute value table that corresponds to the
    ///    instance of the dimension value table.
    /// </summary>
    /// <param name = "_dimensionTableId">The table ID of the instance of the dimension value table.</param>
    /// <returns>
    ///    The table ID of the dimension attribute of the product variant that corresponds to the dimension value.
    /// </returns>
    public TableId dimensionTableId2VariantDimensionTableId(TableId _dimensionTableId)
    {
        if (dimension2Variant.exists(_dimensionTableId))
        {
            return dimension2Variant.lookup(_dimensionTableId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionTableId2InventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the field ID of the product dimension on the <c>InventDim</c> table that corresponds to the
    ///    instance of the dimension value table.
    /// </summary>
    /// <param name = "_dimensionTableId">The table ID of the instance of the dimension value table.</param>
    /// <returns>
    ///    The field ID of the dimension in the <c>InventDim</c> table.
    /// </returns>
    public FieldId dimensionTableId2InventDimFieldId(TableId _dimensionTableId)
    {
        if (dimension2DimFieldId.exists(_dimensionTableId))
        {
            return dimension2DimFieldId.lookup(_dimensionTableId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFieldId2DimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the table ID for the  instance of the dimension value table that corresponds to a field ID of the product dimension on the <c>InventDim</c> table.
    /// </summary>
    /// <param name = "_dimensionTableId">The table ID of the instance of the dimension value table.</param>
    /// <returns>
    ///    The table ID of the dimension attribute of the product variant that corresponds to the dimension value.
    /// </returns>
    public TableId inventDimFieldId2DimensionTableId(FieldId _invendDimFieldId)
    {
        if (dimFieldId2Dimension.exists(_invendDimFieldId))
        {
            return dimFieldId2Dimension.lookup(_invendDimFieldId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        this.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    protected void build()
    {
        this.addEntry(fieldNum(InventDim, InventColorId), tableNum(EcoResColor), tableNum(EcoResProductMasterColor), tableNum(EcoResProductVariantColor));
        this.addEntry(fieldNum(InventDim, InventSizeId), tableNum(EcoResSize), tableNum(EcoResProductMasterSize), tableNum(EcoResProductVariantSize));
        this.addEntry(fieldNum(InventDim, InventStyleId), tableNum(EcoResStyle), tableNum(EcoResProductMasterStyle), tableNum(EcoResProductVariantStyle));
        this.addEntry(fieldNum(InventDim, ConfigId), tableNum(EcoResConfiguration), tableNum(EcoResProductMasterConfiguration), tableNum(EcoResProductVariantConfiguration));
        this.addEntry(fieldNum(InventDim, InventVersionId), tableNum(EcoResVersion), tableNum(EcoResProductMasterVersion), tableNum(EcoResProductVariantVersion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the singleton instance of the data model.
    /// </summary>
    public static EcoResProductDimensionDataModel getInstance()
    {
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>