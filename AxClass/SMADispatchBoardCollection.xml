<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMADispatchBoardCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SMADispatchBoardCollection extends AVCollectionController implements IAVCollectionController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of all workers
    /// </summary>
    /// <param name = "_start">Starting position of the collection page data</param>
    /// <param name = "_end">Ending position of the collection page data</param>
    /// <returns>Instance of AvailabilityView Collection data contract</returns>
    public AvailabilityViewCollectionDataContract getCollection(int _start, int _end)
    {
        str searchString;

        ResAvailabilityViewContext context = this.control().controlContext();

        if (context)
        {
            searchString = context.SearchString();
        }

        Query query;
        query = this.getCollectionQuery();

        QueryRun queryRun = new QueryRun(query);
        queryRun.enablePositionPaging(true);
        queryRun.addPageRange(_start + 1, _end + 1);

        SMADispatchResourceView entity;
        List cItems = new List(Types::Class);
        CollectionItemDataContract cItem;
        TableId viewId = tablenum(SMADispatchResourceView);

        while (queryRun.next())
        {
            entity = queryRun.get(viewId);
            cItem = this.resolveEntity(entity);
            cItems.addEnd(cItem);
        }

        AvailabilityViewCollectionDataContract collection;
        collection = AvailabilityViewCollectionDataContract::construct();
        collection.Items(cItems);
        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCompanyResourceQuery</Name>
				<Source><![CDATA[
    protected void buildCompanyResourceQuery(QueryBuildDataSource _qDS, ResAvailabilityViewContext _context)
    {
        _qDS.range(1).value(queryValue(SysQuery::valueNotEmptyString()));
        _qDS.range(2).value(queryValue(curext()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEntity</Name>
				<Source><![CDATA[
    public CollectionItemDataContract resolveEntity(Common entity)
    {
        List properties = new List(Types::Class);
        EntityFieldDataContract kvPair;

        kvPair = EntityFieldDataContract::construct("Name", entity.getFieldValue("Name"));
        properties.addEnd(kvPair);
        kvPair = EntityFieldDataContract::construct("Role", entity.getFieldValue("Description"));
        properties.addEnd(kvPair);

        CollectionItemDataContract resource;
        resource = CollectionItemDataContract::construct();
        resource.CollectionKey(strfmt("%1", entity.getFieldValue("WorkerId")));
        resource.Properties(properties);
        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionQuery</Name>
				<Source><![CDATA[
    public Query getCollectionQuery()
    {
        Query query = new Query(querystr(SMADispatchBoardResourceQuery));
        QueryBuildDataSource qDS = query.dataSourceNo(1);

        qDS.range(1).value(SysQuery::valueNotEmptyString());
        qDS.range(2).value(queryValue(curext()));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IAVCollectionController construct()
    {
        IAVCollectionController controller = new SMADispatchBoardCollection();
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>