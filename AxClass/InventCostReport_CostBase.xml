<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostReport_CostBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostReport_CostBase</c> class is used when the <c>InventCostVariance</c> and
///    <c>InventCostValue</c> reports are generated.
/// </summary>
/// <remarks>
///    This class is abstract and contains common functionality for both reports.This class is only
///    relevant for generating <c>InventCostVariance</c> and <c>InventCostValue</c> reports.
/// </remarks>
abstract class InventCostReport_CostBase
{
    FromDate            fromDate;
    ToDate              toDate;
    InventCostLevel     level;
    InventCostAxis      axis;
    InventCostDetail    detail;
    NoYes               includeBeginning;

    Query               query;
    UserConnection      userConnection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAxis</Name>
				<Source><![CDATA[
        protected InventCostAxis parmAxis(InventCostAxis _axis = axis)
    {
        axis = _axis;

        return axis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>InventCostDetail</c> parameter.
    /// </summary>
    /// <param name="_detail">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>InventCostDetail</c> parameter.
    /// </returns>
    protected InventCostDetail parmDetail(InventCostDetail _detail = detail)
    {
        detail = _detail;

        return detail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the value of the <paramref name="_fromDate" /> parameter.
    /// </summary>
    /// <param name="_fromDate">
    ///    The date on which inventory cost transactions start; optional.
    /// </param>
    /// <returns>
    ///    The <paramref name="_fromDate" /> parameter.
    /// </returns>
    protected FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeBeginning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>IncludeBeginning</c> parameter.
    /// </summary>
    /// <param name="_includeBeginning">
    ///    The parameter that is used to determine whether the beginning inventory is included in the quantity
    ///    and amounts; optional.
    /// </param>
    /// <returns>
    ///    The <c>IncludeBeginning</c> parameter.
    /// </returns>
    protected NoYes parmIncludeBeginning(NoYes _includeBeginning = includeBeginning)
    {
        includeBeginning = _includeBeginning;

        return includeBeginning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>InventCostLevel</c> parameter.
    /// </summary>
    /// <param name="_level">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>InventCostLevel</c> parameter.
    /// </returns>
    protected InventCostLevel parmLevel(InventCostLevel _level = level)
    {
        level = _level;

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ReportRun</c> parameter.
    /// </summary>
    /// <param name="_query">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>ReportRun</c> parameter.
    /// </returns>
    protected Query parmQuery(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the value of the <paramref name="_toDate" /> parameter.
    /// </summary>
    /// <param name="_toDate">
    ///    The date on which the inventory cost transactions end; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_toDate" /> parameter.
    /// </returns>
    protected ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an <c>InventCostValue</c> report that is an <c>Item</c>, <c>Origin</c>, or <c>CostGroup</c>
    ///    report.
    /// </summary>
    /// <returns>
    ///    A temporary table buffer with collected data.
    /// </returns>
    /// <remarks>
    ///    Needs implementations on concrete sub classes.
    /// </remarks>
    public abstract InventCostTmpTransBreakdown run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmountBasedOnCostGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified amount to an appropriate total amount, which is given in a set of amounts.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to add, based on cost group.
    /// </param>
    /// <param name="_amounts">
    ///    The set of amounts to which to add the specified amount.
    /// </param>
    /// <param name="_bomCostGroup">
    ///    The specified amount is added to or stored in an amount depending on the <c>CostGroupBehavior</c>
    ///    or <c>CostGroupType</c> values from this record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <c>CostGroupType</c> is unknown.
    /// </exception>
    public static void addAmountBasedOnCostGroup(
        AmountMST                   _amount,
        InventCostAmountHandler     _amounts,
        BOMCostGroup                _bomCostGroup
        )
    {
        if (_amounts)
        {
            _amounts.addAmount(_amount, InventCostAmountType::Variance);

            if (_bomCostGroup)
            {
                switch (_bomCostGroup.CostGroupBehavior)
                {
                    case CostGroupBehavior::Fixed:
                        _amounts.addAmount(_amount, InventCostAmountType::Fixed);
                        break;
                    case CostGroupBehavior::Variable,
                         CostGroupBehavior::Undefined:
                        _amounts.addAmount(_amount, InventCostAmountType::Variable);
                        break;
                }

                switch (_bomCostGroup.CostGroupType)
                {
                    case CostGroupType::Undefined:
                        _amounts.addAmount(_amount, InventCostAmountType::Undefined);
                        break;
                    case CostGroupType::DirectMaterials:
                        _amounts.addAmount(_amount, InventCostAmountType::DirectMaterials);
                        break;
                    // Direct outsourcing is added to direct manufacturing on purpose
                    case CostGroupType::DirectManufacturing,
                         CostGroupType::DirectOutsourcing:
                        _amounts.addAmount(_amount, InventCostAmountType::DirectManufacturing);
                        break;
                    case CostGroupType::Indirect:
                        _amounts.addAmount(_amount, InventCostAmountType::Indirect);
                        break;
                    default:
                        throw error(strFmt("@SYS22828", funcName()));
                }
            }
            else
            {
                // If no cost group is given, the amount is classified as "Undefined"
                _amounts.addAmount(_amount, InventCostAmountType::Undefined);
                _amounts.addAmount(_amount, InventCostAmountType::Variable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmountsToTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds amounts from an <c>InventCostTmpTransBreakdown</c> record to a set of totals.
    /// </summary>
    /// <param name="_inventCostTmpTransBreakdown">
    ///    The amounts from this <c>InventCostTmpTransBreakdown</c> record are added to the given set of
    ///    totals.
    /// </param>
    /// <param name="_totals">
    ///    The amounts from the <c>InventCostTmpTransBreakdown</c> record are added to this set of totals.
    /// </param>
    /// <remarks>
    ///    The input parameter <paramref name="_totals" /> contains a set of amounts that are updated in this
    ///    method.
    /// </remarks>
    public static void addAmountsToTotals(
        InventCostTmpTransBreakdown _inventCostTmpTransBreakdown,
        InventCostAmountHandler     _totals
        )
    {
        if (_totals)
        {
            _totals.addAmount(_inventCostTmpTransBreakdown.VariableAmount, InventCostAmountType::Variable);
            _totals.addAmount(_inventCostTmpTransBreakdown.FixedAmount, InventCostAmountType::Fixed);
            _totals.addAmount(_inventCostTmpTransBreakdown.UndefinedAmount, InventCostAmountType::Undefined);
            _totals.addAmount(_inventCostTmpTransBreakdown.MaterialsAmount, InventCostAmountType::DirectMaterials);
            _totals.addAmount(_inventCostTmpTransBreakdown.ManufacturingAmount, InventCostAmountType::DirectManufacturing);
            _totals.addAmount(_inventCostTmpTransBreakdown.IndirectAmount, InventCostAmountType::Indirect);
            _totals.addAmount(_inventCostTmpTransBreakdown.OnHandAmount, InventCostAmountType::OnHand);
            _totals.addAmount(_inventCostTmpTransBreakdown.wipAmount, InventCostAmountType::WIP);
            _totals.addAmount(_inventCostTmpTransBreakdown.DeferredAmount, InventCostAmountType::Deferred);
            _totals.addAmount(_inventCostTmpTransBreakdown.cogsAmount, InventCostAmountType::COGS);
            _totals.addAmount(_inventCostTmpTransBreakdown.VarianceAmount, InventCostAmountType::Variance);
            _totals.addAmount(_inventCostTmpTransBreakdown.Cost, InventCostAmountType::Cost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLevelAndSplitRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges for <c>Level</c>, <c>Split</c> and <c>TotalTrans</c> depending on
    ///    <c>InventCostLevel</c> and <c>InventCostDetail</c>.
    /// </summary>
    /// <param name="_datasource">
    ///    The data source to add the range to.
    /// </param>
    /// <param name="_level">
    ///    The level records to include in the report.
    /// </param>
    /// <param name="_detail">
    ///    The selection of which kind of transactions to print on the report.
    /// </param>
    /// <param name="_levelFieldNum">
    ///    The <c>fieldnum</c> of the level field.
    /// </param>
    /// <param name="_splitFieldNum">
    ///    The <c>fieldnum</c> of the split field.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    An exception is thrown if the <c>InventCostLevel</c> is unknown.
    /// </exception>
    protected static void addLevelAndSplitRange(
        QueryBuildDataSource    _datasource,
        InventCostLevel         _level,
        InventCostDetail        _detail,
        int                     _levelFieldNum,
        int                     _splitFieldNum
        )
    {
        QueryBuildRange qbrLevel;

        if (_datasource)
        {
            if (_detail == InventCostDetail::No)
            {
                qbrLevel = _datasource.addRange(_levelFieldNum);
                qbrLevel.value(queryValue(InventCostLevel::Total));
            }
            else
            {
                int tableId = _datasource.table();
                str stringNameOfLevel = fieldId2name(tableId, _levelFieldNum);
                str stringNameOfSplit = fieldId2name(tableId, _splitFieldNum);
                switch (_level)
                {
                    case InventCostLevel::Total:
                        qbrLevel = _datasource.addRange(_levelFieldNum);
                        qbrLevel.value(queryValue(InventCostLevel::Total));
                        break;
                    case InventCostLevel::Single:
                        qbrLevel = _datasource.addRange(_levelFieldNum);
                        qbrLevel.value(strFmt('( (((%1 == %2) && (%3 == %4)) || (%1 == %5)) )',
                                              stringNameOfLevel,
                                              any2int(InventCostLevel::Total),
                                              stringNameOfSplit,
                                              any2int(NoYes::No),
                                              any2int(InventCostLevel::Single)));
                        qbrLevel.status(RangeStatus::Hidden);
                        break;
                    case InventCostLevel::Multi:
                        qbrLevel = _datasource.addRange(_levelFieldNum);
                        qbrLevel.value(strFmt('( (((%1 == %2) && (%3 == %4)) || ((%1 == %5) && (%3 == %4)) || (%1 == %6)) )',
                                              stringNameOfLevel,
                                              any2int(InventCostLevel::Total),
                                              stringNameOfSplit,
                                              any2int(NoYes::No),
                                              any2int(InventCostLevel::Single),
                                              any2int(InventCostLevel::Multi)));
                        qbrLevel.status(RangeStatus::Hidden);
                        break;
                    default:
                        throw error(strFmt("@SYS22828", funcName()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateTable2CostTransView</Name>
				<Source><![CDATA[
    private static TableId translateTable2CostTransView(TableId _tableId, boolean _translate)
    {
        TableId tableId = _tableId;

        if (_translate && (tableId == tableNum(InventDim) || tableId == tableNum(InventCostTrans)))
        {
            tableId = tableNum(InventCostTransView);
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFiltersFromDialog</Name>
				<Source><![CDATA[
    private static void addFiltersFromDialog(Query _query, Query _callerQuery, boolean _translateToView)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange qbr;

        int queryFilterCount = _callerQuery.queryFilterCount();
        for (int i = 1; i <= queryFilterCount; i++)
        {
            QueryFilter dynamicQueryFilter = _callerQuery.queryFilter(i);
            if (dynamicQueryFilter != null && dynamicQueryFilter.value() != '')
            {
                TableId tableId = dynamicQueryFilter.datasource().table();

                // ItemId from InventCostTrans are transferred to InventTable.
                if (tableId == tableNum(InventCostTrans) && dynamicQueryFilter.field() == fieldId2name(tableNum(InventCostTrans), fieldNum(InventCostTrans, ItemId)))
                {
                    qbds = _query.dataSourceTable(tableNum(InventTable));
                    qbr = SysQuery::findOrCreateRange(qbds, fieldNum(InventTable, ItemId));
                    qbr.value(dynamicQueryFilter.value());
                }
                else
                {
                    tableId = InventCostReport_CostBase::translateTable2CostTransView(tableId, _translateToView);
                    qbds = _query.dataSourceTable(tableId);
                    qbr = SysQuery::findOrCreateRange(qbds, fieldName2id(tableId, dynamicQueryFilter.field()));
                    qbr.value(dynamicQueryFilter.value());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds data sources and ranges that were set up in the dialog form to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query to which the data sources and ranges are added.
    /// </param>
    /// <param name="_callerQuery">
    ///    The link to the query that was set by the user.
    /// </param>
    /// <param name="_translateToView">
    ///    A Boolean value that specifies whether dialog tables and ranges have to be translated to the
    ///    corresponding tables and ranges on the <c>InventCostTransView</c> view; optional.
    /// </param>
    /// <remarks>
    ///    The query that was set up in the dialog contains data sources for the <c>InventDim</c> and
    ///    <c>InventCostTrans</c> tables. The specified input query contains a data source for the
    ///    <c>InventCostTransView</c> view. The <c>InventCostTransView</c> view is based on the
    ///    <c>InventDim</c> and <c>InventCostTrans</c> tables. Therefore, the ranges that have been added to
    ///    the <c>InventDim</c> and <c>InventCostTrans</c> tables are transferred to the
    ///    <c>InventCostTransView</c> data source.
    /// </remarks>
    protected static void addRangesFromDialog(
        Query           _query,
        Query           _callerQuery,
        boolean         _translateToView = true
        )
    {
        QueryBuildRange qbr;

        // Find all ranges from the query set up in the dialog
        // Notice that all ranges from InventDim and InventCostTrans should be transferred to InventCostTransView
        for (int i = 1; i <= _callerQuery.dataSourceCount(); i++)
        {
            QueryBuildDataSource qbdsFromDialog = _callerQuery.dataSourceNo(i);
            TableId tableId = InventCostReport_CostBase::translateTable2CostTransView(qbdsFromDialog.table(), _translateToView);
            QueryBuildDataSource qbds = _query.dataSourceTable(tableId);
            // Copy links from the dialog.
            if (!qbds && qbdsFromDialog.embedded())
            {
                TableId parentTableId = InventCostReport_CostBase::translateTable2CostTransView(qbdsFromDialog.parentDataSource().table(), _translateToView);
                qbds = _query.dataSourceTable(parentTableId);
                // Find the lowest level datasource, add the new one below it.
                while (qbds.childDataSourceCount())
                {
                    qbds = qbds.childDataSourceNo(1);
                }
                qbds = qbds.addDataSource(tableId);
                for (int linkNo = 1; linkNo <= qbdsFromDialog.linkCount(); linkNo++)
                {
                    QueryBuildLink qblink = qbdsFromDialog.link(linkNo);
                    qbds.addLink(fieldName2id(parentTableId, fieldId2name(qbdsFromDialog.parentDataSource().table(), qblink.field())), qblink.relatedField(), _query.dataSourceTable(parentTableId).name());
                }
                qbds.joinMode(qbdsFromDialog.joinMode());
            }

            for (int j = 1; j <= qbdsFromDialog.rangeCount(); j++)
            {
                QueryBuildRange qbrFromDialog = qbdsFromDialog.range(j);
                // Only add ranges that have a value
                if (qbrFromDialog.value())
                {
                    // The hidden range on transdate should not be transferred
                    if (qbdsFromDialog.table() == tableNum(InventCostTrans) && qbrFromDialog.field() == fieldNum(InventCostTrans, TransDate) && qbrFromDialog.status() == RangeStatus::Hidden)
                    {
                        continue;
                    }
                    else
                    {
                        // ItemId from InventCostTrans are transferred to InventTable
                        if (qbdsFromDialog.table() == tableNum(InventCostTrans) && fieldId2name(tableNum(InventCostTrans), qbrFromDialog.field()) == fieldId2name(tableNum(InventCostTrans), fieldNum(InventCostTrans, ItemId)))
                        {
                            qbds = _query.dataSourceTable(tableNum(InventTable));
                            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(InventTable, ItemId));
                            qbr.value(qbrFromDialog.value());
                        }
                        else
                        {
                            // If the tableid was changed, also change the fieldid
                            FieldId fieldId = qbrFromDialog.field();
                            if (tableId != qbdsFromDialog.table())
                            {
                                fieldId = fieldName2id(tableNum(InventCostTransView), fieldId2name(qbdsFromDialog.table(), fieldId));
                            }
                            qbr = SysQuery::findOrCreateRange(qbds, fieldId);
                            qbr.value(qbrFromDialog.value());
                        }
                    }
                }
            }
        }

        InventCostReport_CostBase::addFiltersFromDialog(_query, _callerQuery, _translateToView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignAmountToTemp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the specified amount to an appropriate amount on an <c>InventCostTmpTransBreakdown</c>
    ///    record.
    /// </summary>
    /// <param name="_amount">
    ///    The amount that is assigned to the given record.
    /// </param>
    /// <param name="_bomCostGroup">
    ///    The specified amount that is added to or stored in an amount depending on the
    ///    <c>CostGroupBehavior</c> or <c>CostGroupType</c> value from this record.
    /// </param>
    /// <param name="_inventCostTmpTransBreakdown">
    ///    The specified amount is stored in amounts on this record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <c>CostGroupType</c> value is unknown.
    /// </exception>
    protected static void assignAmountToTemp(
        AmountMST                   _amount,
        BOMCostGroup                _bomCostGroup,
        InventCostTmpTransBreakdown _inventCostTmpTransBreakdown
        )
    {
        if (_bomCostGroup)
        {
            switch (_bomCostGroup.CostGroupBehavior)
            {
                case CostGroupBehavior::Fixed:
                    _inventCostTmpTransBreakdown.FixedAmount = _amount;
                    break;
                case CostGroupBehavior::Variable:
                case CostGroupBehavior::Undefined:
                    _inventCostTmpTransBreakdown.VariableAmount = _amount;
                    break;
            }

            switch (_bomCostGroup.CostGroupType)
            {
                case CostGroupType::Undefined:
                    _inventCostTmpTransBreakdown.UndefinedAmount = _amount;
                    break;
                case CostGroupType::DirectMaterials:
                    _inventCostTmpTransBreakdown.MaterialsAmount = _amount;
                    break;
                case CostGroupType::DirectManufacturing,
                     CostGroupType::DirectOutsourcing:
                    _inventCostTmpTransBreakdown.ManufacturingAmount = _amount;
                    break;
                case CostGroupType::Indirect:
                    _inventCostTmpTransBreakdown.IndirectAmount = _amount;
                    break;
                default:
                    throw error(strFmt("@SYS22828", funcName()));
            }
        }
        else
        {
            // If no cost group is given, the amount is classified as "Undefined"
            _inventCostTmpTransBreakdown.UndefinedAmount = _amount;
            _inventCostTmpTransBreakdown.VariableAmount = _amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a generic query with data sources for the <c>InventTable</c> and <c>InventCostTransView</c>
    ///    tables.
    /// </summary>
    /// <param name="_fromDate">
    ///    Selects all transactions in the <c>InventCostTrans</c> table, starting from this date.
    /// </param>
    /// <param name="_toDate">
    ///    Selects all transactions in the <c>InventCostTrans</c> table, ending with this date.
    /// </param>
    /// <returns>
    ///    A new query that has data sources for the <c>InventTable</c> and <c>InventCostTransView</c> tables.
    /// </returns>
    /// <remarks>
    ///    The query is pre-built with a range of <c>from</c> and <c>todate</c> dates.
    /// </remarks>
    protected static Query buildQuery(
        FromDate    _fromDate,
        ToDate      _toDate
        )
    {
        ToDate                              toDate;

        // Build basic Query
        Query query = new Query();
        QueryBuildDataSource qbdsInventTable = query.addDataSource(tableNum(InventTable));
        
        qbdsInventTable.fields().clearFieldList();
        qbdsInventTable.fields().addField(fieldNum(InventTable, RecId));
        qbdsInventTable.fields().addField(fieldNum(InventTable, ItemId));
        qbdsInventTable.fields().addField(fieldNum(InventTable, DataAreaId));
        qbdsInventTable.fields().addField(fieldNum(InventTable, Product));
        
        QueryBuildDataSource qbdsInventCostTransView = qbdsInventTable.addDataSource(tableNum(InventCostTransView));
        qbdsInventCostTransView.addLink(fieldNum(InventTable, ItemId), fieldNum(InventCostTransView, ItemId));

        // Add date range
        if (_toDate)
        {
            toDate = _toDate;
        }
        else
        {
            toDate = maxDate();
        }
        qbdsInventCostTransView.addRange(fieldNum(InventCostTransView, TransDate)).value(queryValue(_fromDate) + '..' + queryValue(toDate));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts amounts from the specified amount set into the specified <c>InventCostTmpTransBreakdown</c>
    ///    record.
    /// </summary>
    /// <param name="_inventCostTmpTransBreakdown">
    ///    The <c>InventCostTmpTransBreakdown</c> record to which to insert amounts.
    /// </param>
    /// <param name="_amounts">
    ///    The amount set from which to retrieve amounts.
    /// </param>
    protected static void insertAmounts(
        InventCostTmpTransBreakdown _inventCostTmpTransBreakdown,
        InventCostAmountHandler     _amounts
        )
    {
        if (_amounts)
        {
            _inventCostTmpTransBreakdown.VariableAmount         = _amounts.getAmount(InventCostAmountType::Variable);
            _inventCostTmpTransBreakdown.FixedAmount            = _amounts.getAmount(InventCostAmountType::Fixed);
            _inventCostTmpTransBreakdown.UndefinedAmount        = _amounts.getAmount(InventCostAmountType::Undefined);
            _inventCostTmpTransBreakdown.MaterialsAmount        = _amounts.getAmount(InventCostAmountType::DirectMaterials);
            _inventCostTmpTransBreakdown.ManufacturingAmount    = _amounts.getAmount(InventCostAmountType::DirectManufacturing);
            _inventCostTmpTransBreakdown.IndirectAmount         = _amounts.getAmount(InventCostAmountType::Indirect);
            _inventCostTmpTransBreakdown.OnHandAmount           = _amounts.getAmount(InventCostAmountType::OnHand);
            _inventCostTmpTransBreakdown.wipAmount              = _amounts.getAmount(InventCostAmountType::WIP);
            _inventCostTmpTransBreakdown.DeferredAmount         = _amounts.getAmount(InventCostAmountType::Deferred);
            _inventCostTmpTransBreakdown.cogsAmount             = _amounts.getAmount(InventCostAmountType::COGS);
            _inventCostTmpTransBreakdown.VarianceAmount         = _amounts.getAmount(InventCostAmountType::Variance);
            _inventCostTmpTransBreakdown.Cost                   = _amounts.getAmount(InventCostAmountType::Cost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventCostReport_CostBaseType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a concrete instance of a report generator.
    /// </summary>
    /// <param name="_type">
    ///    Chooses between three different report layouts, that is the layouts htat are represented by the
    ///    <c>Item</c>, <c>Origin</c>, and <c>CostGroup</c> values.
    /// </param>
    /// <param name="_fromDate">
    ///    Selects all transactions in the <c>InventCostTrans</c> table, starting from this date.
    /// </param>
    /// <param name="_toDate">
    ///    Selects all transactions in the <c>InventCostTrans</c> table, ending with this date.
    /// </param>
    /// <param name="_level">
    ///    Shows <c>InventCostTransVariance</c> records according to this selection.
    /// </param>
    /// <param name="_detail">
    ///    Selects which kind of transactions to print on the report.
    /// </param>
    /// <param name="_query">
    ///    Links back to the query that was set by the user.
    /// </param>
    /// <param name="_reportName">
    ///    The name of the caller report.
    /// </param>
    /// <param name="_includeBeginning">
    ///    A value that specifies whether the starting inventory is included in the quantity and amounts.
    /// </param>
    /// <returns>
    ///    A concrete instance of a report generator.
    /// </returns>
    /// <remarks>
    ///    Based on the axis and name of the calling report, a concrete instance of a report generator is
    ///    created and returned to the caller.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <c>InventCostAxis</c> is unknown or the user does not have permissions for the appropriate
    ///    tables.
    /// </exception>
    public static InventCostReport_CostBase newInventCostReport_CostBaseType(
        InventCostAxis      _type,
        FromDate            _fromDate,
        ToDate              _toDate,
        InventCostLevel     _level,
        InventCostDetail    _detail,
        Query               _query,
        SRSCatalogItemName  _reportName,
        NoYes               _includeBeginning = NoYes::No
        )
    {
        // Validate that user has access to all the tables that presents data in this report
        if (!hasTableAccess(tableNum(InventDim)) &&
            !hasTableAccess(tableNum(InventCostTrans)) &&
            !hasTableAccess(tableNum(InventCostTransVariance)) &&
            !hasTableAccess(tableNum(InventItemCostGroupRollup)) &&
            !hasTableAccess(tableNum(PurchTable)) &&
            !hasTableAccess(tableNum(SalesTable)) &&
            !hasTableAccess(tableNum(BOMCostGroup)))
        {
            throw error("@SYS79625");
        }

        InventCostReport_CostBase retVal = InventCostReport_CostBase::createInventCostReport_CostBaseType(_reportName);

        retVal.parmFromDate(_fromDate);
        retVal.parmToDate(_toDate);
        retVal.parmLevel(_level);
        retVal.parmAxis(_type);
        retVal.parmDetail(_detail);
        retVal.parmQuery(_query);
        retVal.parmIncludeBeginning(_includeBeginning);
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventCostReport_CostBaseType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a concrete instance of a report generator.
    /// </summary>
    /// <param name="_reportName">
    ///    The name of the caller report.
    /// </param>
    /// <returns>
    ///    A concrete instance of a report generator.
    /// </returns>
    protected static InventCostReport_CostBase createInventCostReport_CostBaseType(SRSCatalogItemName  _reportName)
    {
        InventCostReport_CostBase inventCostReport_CostBase;

        if (_reportName == ssrsReportStr(InventCostVariances, Report))
        {
            inventCostReport_CostBase = InventCostReport_CostVariances::construct();
        }
        else
        {
            if (_reportName == ssrsReportStr(InventCostValue, Report))
            {
                // The inventory value statements requires access to more tables
                if (!hasTableAccess(tableNum(InventItemPrice)) &&
                    !hasTableAccess(tableNum(InventCostTransSum)) &&
                    !hasTableAccess(tableNum(InventClosing)))
                {
                    throw error("@SYS79625");
                }

                inventCostReport_CostBase = InventCostReport_CostValue::construct();
            }
        }

        return inventCostReport_CostBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpTransBreakdownBeginning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes a total record from the <c>InventCostTmpTransBreakdown</c> record to the specified list.
    /// </summary>
    /// <param name="_amounts">
    ///    The amounts, that is, totals, are transferred to the <c>InventCostTmpTransBreakdown</c> record.
    /// </param>
    /// <param name="_newInventCostTmpTransBreakdown">
    ///    An <c>InventCostTmpTransBreakdown</c> record with pre-filled data, that is, amounts will be
    ///    overwritten.
    /// </param>
    /// <param name="_inventCostTmpTransBreakdown">
    ///    A table buffer in which to insert the record.
    /// </param>
    protected static void writeTmpTransBreakdownBeginning(
        InventCostAmountHandler     _amounts,
        InventCostTmpTransBreakdown _newInventCostTmpTransBreakdown,
        InventCostTmpTransBreakdown _inventCostTmpTransBreakdown
        )
    {
        InventCostReport_CostBase::insertAmounts(_newInventCostTmpTransBreakdown, _amounts);
        _newInventCostTmpTransBreakdown.TransactionCategory    = InventCostTransactionCategory::Beginning;
        _newInventCostTmpTransBreakdown.TotalTrans = TotalTrans::Total;
        _inventCostTmpTransBreakdown.data(_newInventCostTmpTransBreakdown);
        _inventCostTmpTransBreakdown.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpTransBreakdownTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes a transaction record from the <c>InventCostTmpTransBreakdown</c> record to the specified
    ///    list.
    /// </summary>
    /// <param name="_newInventCostTmpTransBreakdown">
    ///    An <c>InventCostTmpTransBreakdown</c> record with pre-filled data.
    /// </param>
    /// <param name="_inventCostTmpTransBreakdown">
    ///    A table buffer in which the record is inserted.
    /// </param>
    /// <remarks>
    ///    No record is written to the temporary table; instead, a record is added to the specified list.
    /// </remarks>
    protected static void writeTmpTransBreakdownTrans(
        InventCostTmpTransBreakdown _newInventCostTmpTransBreakdown,
        InventCostTmpTransBreakdown _inventCostTmpTransBreakdown
        )
    {
        _inventCostTmpTransBreakdown.data(_newInventCostTmpTransBreakdown);
        _inventCostTmpTransBreakdown.TotalTrans = TotalTrans::Trans;
        _inventCostTmpTransBreakdown.TransactionCategory    = InventCostTransactionCategory::Transaction;
        _inventCostTmpTransBreakdown.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>