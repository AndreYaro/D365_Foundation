<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsAutoCreateLoadLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSAutoCreateLoadLine</c> is responisble for creating load lines automatically for source lines.
/// </summary>
abstract class WhsAutoCreateLoadLine
{
    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a load line based on the new source document line.
    /// </summary>
    abstract public void autoCreateLoadLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is allowed to automatically create a load with the specified inventory dimensions.
    /// </summary>
    /// <param name="_inventDim">
    /// Inventory dimensions.
    /// </param>
    /// <returns>
    /// true if it is allowed to create a load; otherwise, false.
    /// </returns>
    protected boolean checkInventDim(InventDim _inventDim)
    {
        return _inventDim.inventLocation().isLoadEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLoadTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the load template id.
    /// </summary>
    /// <param name = "_transportationTemplateId">The transportation template.</param>
    /// <param name = "_itemId">The item id.</param>
    /// <returns>The load template id.</returns>
    protected WHSLoadTemplateId findLoadTemplateId(TMSTransportationTemplateId _transportationTemplateId, ItemId _itemId)
    {
        // Determine what loadTemplate will be
        WHSLoadTemplateId loadTemplateId = TMSTransportationTemplate::find(_transportationTemplateId).LoadTemplateId;

        if (!loadTemplateId)
        {
            loadTemplateId = InventItemGroup::find(InventItemGroupItem::itemGroupByItemIdLegalEntity(_itemId).ItemGroupId).LoadTemplateId;
        }

        return loadTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates load record from a load template and inserts to database.
	/// </summary>
	/// <param name="_loadTemplateId">
	/// The load template id.
	/// </param>
	/// <param name="_loadDirection">
	/// The load directions.
	/// </param>
	/// <param name="_itemId">
	/// The item id.
	/// </param>
	/// <param name="_inventLocationId">
	/// The warehouse id.
	/// </param>
	/// <param name="_loadPaysFrieght">
	/// Determines whether load pays freight or not.
	/// </param>
	/// <returns>
	/// The newly created load record.
	/// </returns>
        protected WHSLoadTable createLoadTable(
        WHSLoadTemplateId    _loadTemplateId,
        WHSLoadDirection     _loadDirection,
        ItemId               _itemId,
        InventLocationId     _inventLocationId,
        TMSLoadPaysFreight   _loadPaysFrieght = NoYes::No)
    {
        ttsbegin;

        WHSLoadTable loadTable = this.initalizeLoadTableBuffer(
            _loadTemplateId,
            _loadDirection,
            _itemId,
            _inventLocationId,
            _loadPaysFrieght);

        loadTable.insert();

        ttscommit;

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initalizeLoadTableBuffer</Name>
				<Source><![CDATA[
    internal WHSLoadTable initalizeLoadTableBuffer(
        WHSLoadTemplateId    _loadTemplateId,
        WHSLoadDirection     _loadDirection,
        ItemId               _itemId,
        InventLocationId     _inventLocationId,
        TMSLoadPaysFreight   _loadPaysFrieght = NoYes::No)
    {
        WHSLoadTable loadTable;
        loadTable.setLoadId();
        loadTable.initFromLoadTemplateId(_loadTemplateId);
        loadTable.LoadDirection     = _loadDirection;
        loadTable.LoadPaysFreight   = _loadPaysFrieght;
        loadTable.InventLocationId  = _inventLocationId;
        loadTable.InventSiteId      = InventLocation::find(_inventLocationId).InventSiteId;

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initializes from common source buffer.
	/// </summary>
	/// <param name="_common">
	/// The comon source buffer.
	/// </param>
        abstract protected void initFromBuffer(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAutoCreateLoadLine</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether it should auto create load lines or not.
	/// </summary>
	/// <returns>
	/// True if it should auto create load lines.
	/// </returns>
        abstract protected boolean shouldAutoCreateLoadLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSourceLineTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and instance of <c>WHSAutoCreateLoadLine</c> based on common.
    /// </summary>
    /// <param name="_common">
    /// Common record buffer used to determine what child class to initialize.
    /// </param>
    /// <returns>
    /// An instance of <c>WHSAutoCreateLoadLine</c>.
    /// </returns>
    public static WHSAutoCreateLoadLine newFromSourceLineTableBuffer(Common _common)
    {
        WHSAutoCreateLoadLine               whsAutoCreateLoadLine;
        WHSAutoCreateLoadLineAttribute      whsAutoCreateLoadLineAttr;

        whsAutoCreateLoadLineAttr = new WHSAutoCreateLoadLineAttribute(tableId2name(_common.TableId));

        whsAutoCreateLoadLine = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSAutoCreateLoadLine),whsAutoCreateLoadLineAttr);

        if (!whsAutoCreateLoadLine)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        whsAutoCreateLoadLine.initFromBuffer(_common);

        return whsAutoCreateLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAutoUpdateShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an order should be added to a shipment.
    /// </summary>
    /// <param name = "_inventLocationId">
    /// <c>WHSInventLocationId</c> record.
    /// </param>
    /// <param name = "_orderNum">
    /// <c>WHSorderNum</c> id.
    /// </param>
    /// <param name = "_workTransType">
    /// The <c>WHSWorkTransType</c> of the <c>WHSOrderNum</c>.
    /// </param>
    /// <param name = "_inventTransType">
    /// The <c>InventTransType</c> of the <c>WHSOrderNum</c>.
    /// </param>
    /// <returns>
    /// true if the order is should be added; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean shouldAutoUpdateShipment(
        WHSOrderNum         _orderNum, 
        WHSWorkTransType    _workTransType, 
        InventTransType     _inventTransType)
    {
        return this.hasOrderBeenReleasedToWarehouse()
            && !WHSWaveTable::hasWaveBeenExecutedForOrder(_orderNum, _workTransType, _inventTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrderBeenReleasedToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an order has been released to warehouse.
    /// </summary>
    /// <returns>
    /// true if the order has been released to warehouse; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean hasOrderBeenReleasedToWarehouse()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWaveForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a valid wave to assign the shipment or creates a new one
    /// while creating a respective wave line record.
    /// </summary>
    /// <param name = "_shipmentTable">
    /// <c>WHSShipmentTable</c> record.
    /// </param>
    [Hookable(false)]
    internal void findOrCreateWaveForShipment(WHSShipmentTable _shipmentTable)
    {
        WHSWaveId waveId = WHSWaveTable::assignOrCreateWave(_shipmentTable).WaveId;

        WHSWaveLine::createFromWaveIdAndShipment(waveId, _shipmentTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>locateAutoUpdateShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locates a shipment to add a load line to. If an existing shipment cannot be found, then a new shipment will be created. 
    /// </summary>
    /// <param name = "_orderNum">
    /// <c>WHSOrderNum</c> id.
    /// </param>
    /// <param name = "_workTransType">
    /// The <c>WHSWorkTransType</c> of the <c>WHSOrderNum</c>.
    /// </param>
    /// <param name = "_inventTransType">
    /// The <c>InventTransType</c> of the <c>WHSOrderNum</c>.
    /// </param>
    /// <returns>
    /// The located <c>WHSShipmenTable</c> record.
    /// </returns>
    [Hookable(false)]
    internal WHSShipmentTable locateAutoUpdateShipment(
        WHSOrderNum         _orderNum, 
        WHSWorkTransType    _workTransType,
        InventTransType     _inventTransType)
    {
        using (var activityContext = this.instrumentationLogger().autoMaintainLoadLineActivities().locateShipment())
        {
            WHSShipmentTable    shipmentTable;
            WHSLoadLine         loadLine;

            while select shipmentTable
                where shipmentTable.OrderNum        == _orderNum &&
                      shipmentTable.WorkTransType   == _workTransType
                    exists join loadLine
                        where loadLine.ShipmentId       == shipmentTable.ShipmentId && 
                              loadLine.InventTransType  == _InventTransType
            {
                if (this.canAddToShipment(shipmentTable.WaveId))
                {
                    break;
                }
            }

            boolean createNewShipment = !shipmentTable.RecId;

            if (createNewShipment)
            {
                shipmentTable = this.createNewShipment();
            }

            this.instrumentationLogger().autoMaintainLoadLineActivities().locatedShipment(activityContext, createNewShipment);
            this.instrumentationLogger().logRecordInformation(shipmentTable);

            return shipmentTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddToShipment</Name>
				<Source><![CDATA[
    private boolean canAddToShipment(WHSWaveId _waveId)
    {
        if (_waveId
            && WHSWaveTable::find(_waveId).overThreshold())
        {
            return false;
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new shipment for the load line based on the source document line.
    /// </summary>
    /// <returns>
    /// New <c>WHSShipmentTable</c> record.
    /// </returns>
    [Hookable(false)]
    internal WHSShipmentTable createNewShipment()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>