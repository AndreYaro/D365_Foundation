<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalReceiptPost_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail fiscal receipt posting base class. Provides the infrastructe to persist a retail fiscal receipt given a ParmData object model.
/// </summary>
public class RetailFiscalReceiptPost_BR
{
    RetailFiscalReceiptParmData_BR  fiscalReceiptParmData;
    RetailFiscalReceipt_BR          retailFiscalReceipt;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRetailFiscalReceipt</Name>
				<Source><![CDATA[
/// <summary>
    /// Persists the retail fiscal receipt header information from the ParmData object to the database.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws exception when it fails to persist the header.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initRetailFiscalReceipt()
    {
        retailFiscalReceipt.initValue();

        retailFiscalReceipt.AccountingDate                  = fiscalReceiptParmData.parmAccountingDate();
        retailFiscalReceipt.AdditionalFiscalMemoryIndex     = fiscalReceiptParmData.parmAdditionalFiscalMemoryIndex();
        retailFiscalReceipt.ConsumerCNPJCPFNumber           = fiscalReceiptParmData.parmConsumerCNPJCPFNumber();
        retailFiscalReceipt.ConsumerName                    = fiscalReceiptParmData.parmConsumerName();
        retailFiscalReceipt.FiscalEstablishment             = fiscalReceiptParmData.parmFiscalEstablishment();
        retailFiscalReceipt.FiscalPrinterSerialNumber       = fiscalReceiptParmData.parmFiscalPrinterSerialNumber();
        retailFiscalReceipt.FiscalReceiptDateTime           = fiscalReceiptParmData.parmFiscalReceiptDateTime();
        retailFiscalReceipt.FiscalReceiptModel              = fiscalReceiptParmData.parmFiscalReceiptModel();
        retailFiscalReceipt.FiscalReceiptNumber             = fiscalReceiptParmData.parmFiscalReceiptNumber();
        retailFiscalReceipt.IsStatementPosted               = fiscalReceiptParmData.parmIsStatementPosted();
        retailFiscalReceipt.QuantityDecimals                = fiscalReceiptParmData.parmQuantityDecimals();
        retailFiscalReceipt.ReceiptNumber                   = fiscalReceiptParmData.parmReceiptNumber();
        retailFiscalReceipt.Status                          = fiscalReceiptParmData.parmStatus();
        retailFiscalReceipt.StoreId                         = fiscalReceiptParmData.parmStoreId();
        retailFiscalReceipt.TerminalId                      = fiscalReceiptParmData.parmTerminalId();
        retailFiscalReceipt.TotalAmount                     = fiscalReceiptParmData.parmTotalAmount();
        retailFiscalReceipt.TotalDiscountAmount             = fiscalReceiptParmData.parmTotalDiscountAmount();
        retailFiscalReceipt.TotalSurchargeAmount            = fiscalReceiptParmData.parmTotalSurchargeAmount();
        retailFiscalReceipt.TransactionId                   = guid2str(newGuid());
        retailFiscalReceipt.UnitDecimals                    = fiscalReceiptParmData.parmUnitDecimals();
        retailFiscalReceipt.Voucher                         = fiscalReceiptParmData.parmVoucher();
        retailFiscalReceipt.ZReportNumber                   = fiscalReceiptParmData.parmZReportNumber();

        if (retailFiscalReceipt.validateWrite())
        {
            retailFiscalReceipt.insert();

            retailFiscalReceipt.TransactionId   = int642str(retailFiscalReceipt.RecId);
            retailFiscalReceipt.update();
        }
        else
        {
            throw Exception::Error;
        }

        this.initRetailFiscalReceiptLines();
    }
]]></Source>
			</Method>
			<Method>
				<Name>initRetailFiscalReceiptLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the retail fiscal receipt lines information and taxes from the ParmData object to the database.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws exception when it fails to persist the line.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initRetailFiscalReceiptLines()
    {
        RetailFiscalReceiptLine_BR          retailFiscalReceiptLine;
        RetailFiscalReceiptLineParmData_BR  fiscalReceiptLineParmData;
        ListEnumerator                      linesEnumerator;

        linesEnumerator = fiscalReceiptParmData.parmLines().getEnumerator();

        while (linesEnumerator.moveNext())
        {
            fiscalReceiptLineParmData   = linesEnumerator.current();

            retailFiscalReceiptLine.clear();

            retailFiscalReceiptLine.CancelledQuantity               = fiscalReceiptLineParmData.parmCancelledQuantity();
            retailFiscalReceiptLine.CFOP                            = fiscalReceiptLineParmData.parmCFOP();
            retailFiscalReceiptLine.ItemId                          = fiscalReceiptLineParmData.parmItemId();
            retailFiscalReceiptLine.ItemType                        = fiscalReceiptLineParmData.parmItemType();
            retailFiscalReceiptLine.LineAmount                      = fiscalReceiptLineParmData.parmLineAmount();
            retailFiscalReceiptLine.LineDiscountAmount              = fiscalReceiptLineParmData.parmLineDiscountAmount();
            retailFiscalReceiptLine.LineNum                         = fiscalReceiptLineParmData.parmLineNum();
            retailFiscalReceiptLine.LineSurchargeAmount             = fiscalReceiptLineParmData.parmLineSurchargeAmount();
            retailFiscalReceiptLine.Quantity                        = fiscalReceiptLineParmData.parmQuantity();
            retailFiscalReceiptLine.Unit                            = fiscalReceiptLineParmData.parmUnit();
            retailFiscalReceiptLine.UnitPrice                       = fiscalReceiptLineParmData.parmUnitPrice();

            retailFiscalReceiptLine.StoreId                         = retailFiscalReceipt.StoreId;
            retailFiscalReceiptLine.TerminalId                      = retailFiscalReceipt.TerminalId;
            retailFiscalReceiptLine.TransactionId                   = retailFiscalReceipt.TransactionId;

            if (retailFiscalReceiptLine.validateWrite())
            {
                retailFiscalReceiptLine.insert();
            }
            else
            {
                throw Exception::Error;
            }

            this.initRetailFiscalReceiptTaxTrans(retailFiscalReceiptLine, fiscalReceiptLineParmData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailFiscalReceiptTaxTrans</Name>
				<Source><![CDATA[
/// <summary>
    /// Persists the given retail fiscal receipt taxes from the ParmData object to the database for a given line.
    /// </summary>
    /// <param name="_retailFiscalReceiptLine">
    /// The retail fiscal receipt line to persist the taxes to.
    /// </param>
    /// <param name="_fiscalReceiptLineParmData">
    /// The line ParmData object that holds the taxes ParmData list.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws exception when it fails to persist the tax.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initRetailFiscalReceiptTaxTrans(RetailFiscalReceiptLine_BR _retailFiscalReceiptLine, RetailFiscalReceiptLineParmData_BR _fiscalReceiptLineParmData)
    {
        RetailFiscalReceiptTaxTrans_BR          retailFiscalReceiptTaxTrans;
        RetailFiscalReceiptTaxTransParmData_BR  fiscalReceiptTaxTransParmData;
        ListEnumerator                          taxesEnumerator;

        taxesEnumerator = _fiscalReceiptLineParmData.parmTaxes().getEnumerator();

        while (taxesEnumerator.moveNext())
        {
            fiscalReceiptTaxTransParmData   = taxesEnumerator.current();

            retailFiscalReceiptTaxTrans.clear();

            retailFiscalReceiptTaxTrans.FiscalValue                     = fiscalReceiptTaxTransParmData.parmFiscalValue();
            retailFiscalReceiptTaxTrans.TaxAmount                       = fiscalReceiptTaxTransParmData.parmTaxAmount();
            retailFiscalReceiptTaxTrans.TaxationOrigin                  = fiscalReceiptTaxTransParmData.parmTaxationOrigin();
            retailFiscalReceiptTaxTrans.TaxationCode                    = fiscalReceiptTaxTransParmData.parmTaxationCode();
            retailFiscalReceiptTaxTrans.TaxBaseAmount                   = fiscalReceiptTaxTransParmData.parmTaxBaseAmount();
            retailFiscalReceiptTaxTrans.TaxCode                         = fiscalReceiptTaxTransParmData.parmTaxCode();
            retailFiscalReceiptTaxTrans.TaxType                         = fiscalReceiptTaxTransParmData.parmTaxType();
            retailFiscalReceiptTaxTrans.TaxValue                        = fiscalReceiptTaxTransParmData.parmTaxValue();
            retailFiscalReceiptTaxTrans.TotalizerIndex                  = fiscalReceiptTaxTransParmData.parmTotalizerIndex();
            retailFiscalReceiptTaxTrans.TotalizerName                   = fiscalReceiptTaxTransParmData.parmTotalizerName();

            retailFiscalReceiptTaxTrans.LineNum                         = _retailFiscalReceiptLine.LineNum;
            retailFiscalReceiptTaxTrans.StoreId                         = _retailFiscalReceiptLine.StoreId;
            retailFiscalReceiptTaxTrans.TerminalId                      = _retailFiscalReceiptLine.TerminalId;
            retailFiscalReceiptTaxTrans.TransactionId                   = _retailFiscalReceiptLine.TransactionId;

            if (retailFiscalReceiptTaxTrans.validateWrite())
            {
                retailFiscalReceiptTaxTrans.insert();
            }
            else
            {
                throw Exception::Error;
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RetailFiscalReceiptPost_BR</c>.
    /// </summary>
    /// <param name="_fiscalReceiptParmData">
    /// An instance of <c>RetailFiscalReceiptParmData_BR</c>. This is the retail fiscal receipt object model that will be persisted by this posting class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RetailFiscalReceiptParmData_BR _fiscalReceiptParmData)
    {
        fiscalReceiptParmData = _fiscalReceiptParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This is the method that actually starts the Retail Fiscal Receipt posting process. It will persist the ParmData object model
    ///     into the Retail Fiscal Receipt tables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        ttsBegin;

        this.initRetailFiscalReceipt();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>