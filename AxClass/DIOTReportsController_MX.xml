<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DIOTReportsController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DIOTReportsController_MX</c> class is the controller class for both DIOT
///    detailed and summary report.
/// </summary>
class DIOTReportsController_MX extends SrsReportRunController implements BatchRetryable
{
    str userSelectedReportName;
    // Report Name in SSRS
    #DIOT_MX

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMX00004, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change report contract before running report.
    /// </summary>
    protected void preRunModifyContract()
    {
        DiotDeclarationContract_MX contract = this.parmReportContract().parmRdpContract() as DiotDeclarationContract_MX;

        super();

        DIOTReportsController_MX::modifyContract(contract);

        userSelectedReportName = DIOTReportsController_MX::getReportName(contract.parmReportType());
        this.parmReportName(userSelectedReportName);
        this.parmReportContract().parmReportName(userSelectedReportName);
        if (contract.parmGenerateFile() == NoYes::Yes)
        {
            DIOTReportsController_MX::exportFile(contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the DIOT text file
    /// </summary>
    /// <param name = "_contract">
    /// The Report Contract
    /// </param>
    private static void exportFile(DiotDeclarationContract_MX _contract)
    {
        DIOTDeclarationGenerator_MX     diotDeclarationGenerator = new DIOTDeclarationGenerator_MX();
        StreamIo                        streamIo;
        Filename                        fileName;

        diotDeclarationGenerator.parmAbsValueInGeneratedFile(_contract.parmAbsValueInGeneratedFile());
        fileName = diotDeclarationGenerator.formatFileName();
        streamIo = diotDeclarationGenerator.newFile(filename);

        diotDeclarationGenerator.generate(streamIo, _contract);

        File::SendFileToUser(streamIo.getStream(), fileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    public static DIOTReportsController_MX newArgs(Args _args)
    {
        DIOTReportsController_MX controller = new DIOTReportsController_MX();

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    public static str getReportName(DIOTReportType_MX diotReportType)
    {
        if (diotReportType == DIOTReportType_MX::Detailed)
        {
            return #reportNameDetailed;
        }
        else
        {
            return #reportNameDefault;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DIOTReportsController_MX controller = DIOTReportsController_MX::newArgs(_args);
        controller.parmReportName(#reportNameDefault);
        controller.parmDialogCaption(#reportCaption);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    public static void modifyContract(DiotDeclarationContract_MX contract)
    {
        RealBase percentageGlobalVendors;

        percentageGlobalVendors = contract.parmPercentageGlobalVendors();
        percentageGlobalVendors = percentageGlobalVendors == 0.00 ? 100.00 : percentageGlobalVendors;
        contract.parmPercentageGlobalVendors(percentageGlobalVendors);

        TaxReportPeriod reportPeriod;

        switch (contract.parmShow())
        {
            case TaxVatReportOption_MX::Realized :
                reportPeriod = TaxReportPeriod::find(contract.parmRealizedTaxPeriod(), contract.parmFromDate());
                break;

            case TaxVatReportOption_MX::Unrealized :
                reportPeriod = TaxReportPeriod::find(contract.parmUnrealizedTaxPeriod(), contract.parmFromDate());
                break;

            case TaxVatReportOption_MX::Both :
                reportPeriod = TaxReportPeriod::find(contract.parmUnrealizedTaxPeriod(), contract.parmFromDate());
                if (reportPeriod == null)
                {
                    reportPeriod = TaxReportPeriod::find(contract.parmRealizedTaxPeriod(), contract.parmFromDate());
                }
                break;
        }

        contract.parmFromDate(reportPeriod.FromDate);
        contract.parmToDate(reportPeriod.ToDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>