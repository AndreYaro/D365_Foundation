<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNegativeOnHandTrackerCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSNegativeOnHandTrackerCache</c> is a transaction based cache
/// that tracks information about on hand changes for warehouses that allow negative.
/// This allows to calculate on hand adjustments that need to be done
/// on upper levels of the reservation hierarchy.
/// </summary>
class WHSNegativeOnHandTrackerCache
{
    Map valuesMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValuesMap</Name>
				<Source><![CDATA[
    private void initValuesMap()
    {
        valuesMap = new Map(Types::Container, Types::Class);
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initValuesMap();
    }
]]></Source>
			</Method>
			<Method>
				<Name>valuesMap</Name>
				<Source><![CDATA[
    private Map valuesMap()
    {
        return valuesMap;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSNegativeOnHandTrackerCache construct()
    {
        return new WHSNegativeOnHandTrackerCache();
    }
]]></Source>
			</Method>
			<Method>
				<Name>flush</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes the cache.
    /// </summary>
    public static void flush()
    {
        WHSNegativeOnHandTrackerCache::instance().initValuesMap();
    }
]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private static container getKey(ItemId _itemId, InventDimId _inventDimId)
    {
        return [_itemId, _inventDimId];
    }
]]></Source>
			</Method>
			<Method>
				<Name>getOnHandTrackers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the on hand tracker objects for the specified item and dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The ID of the inventory dimension values set.
    /// </param>
    /// <returns>
    /// The <c>WHSNegativeOnHandTrackerCacheValue</c> object that contains the requested on hand tracker objects.
    /// </returns>
    public static WHSNegativeOnHandTrackerCacheValue getOnHandTrackers(ItemId _itemId, InventDimId _inventDimId)
    {
        WHSNegativeOnHandTrackerCache cache = WHSNegativeOnHandTrackerCache::instance();
        container key = WHSNegativeOnHandTrackerCache::getKey(_itemId, _inventDimId);

        if (cache.valuesMap().exists(key))
        {
            return cache.valuesMap().lookup(key);
        }

        return null;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getOnHandTrackersEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an object that allows to iterate over the negative on hand tracker objects
    /// that are stored in the cache.
    /// </summary>
    /// <returns>
    /// An object that allows to iterate over the values that are stored in the cache.
    /// </returns>
    public static Enumerator getOnHandTrackersEnumerator()
    {
        return WHSNegativeOnHandTrackerCache::instance().valuesMap().valueSet().getEnumerator();
    }
]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    private static WHSNegativeOnHandTrackerCache instance()
    {
        WHSNegativeOnHandTrackerCache cache;

        anytype cacheAnytype = SysTransactionScopeCache::get(classStr(WHSNegativeOnHandTrackerCache), '');

        if (cacheAnytype)
        {
            cache = cacheAnytype;
        }
        else
        {
            cache = WHSNegativeOnHandTrackerCache::construct();
            SysTransactionScopeCache::set(classStr(WHSNegativeOnHandTrackerCache), '', cache);
        }

        return cache;
    }
]]></Source>
			</Method>
			<Method>
				<Name>set</Name>
				<Source><![CDATA[
    public static void set(WHSNegativeOnHandTrackerCacheValue _offset)
    {
        container key = WHSNegativeOnHandTrackerCache::getKey(_offset.itemId(), _offset.inventDimId());
        WHSNegativeOnHandTrackerCache::instance().valuesMap().insert(key, _offset);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
