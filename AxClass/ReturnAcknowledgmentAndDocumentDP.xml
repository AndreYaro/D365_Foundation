<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReturnAcknowledgmentAndDocumentDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReturnAcknowledgmentAndDocumentDP</c> class is the Report Data Provider class for Return
///    Acknowledgment and Return Document SRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ReturnAcknowledgmentAndDocument)),
    SRSReportParameterAttribute(classStr(ReturnAcknowledgmentAndDocContract))
]
public class ReturnAcknowledgmentAndDocumentDP extends SRSReportDataProviderBase
{
    FormLetterRemarks                   formLetterRemarks;
    CustTable                           addressCustTable;
    ReturnAcknowledgmentAndDocumentTmp  returnAcknowledgmentAndDocumentTmp;
    
    SalesTable                          salesTable;
    SalesLine                           salesLine;
    InventDim                           inventDim;
    boolean                             printNotes;
    boolean                             pdsCatchWeightEnabled;
    str                                 returnReportType;
    container                           inventDimSetup;
    InventDimCtrl_Rep_Sales             inventDimReport;

    //Macros
    #define.ReturnAcknowledgment('ReturnAcknowledgment')
    #define.ReturnDocument('ReturnDocument')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllNotesForDocuTypeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns all Notes for passed Document Type Group.
    /// </summary>
    /// <param name="_common">
    /// <c>Common</c> buffer for which notes are attached and should be selected.
    /// </param>
    /// <param name="_docuTypeGroup">
    /// A value from the <c>DocuTypeGroup</c> enumeration.
    /// </param>
    /// <param name="_restriction">
    /// A value from the <c>DocumentRestriction</c> enumeration.
    /// </param>
    /// <returns>
    /// Concatenated notes.
    /// </returns>
    private Notes getAllNotesForDocuTypeGroup(Common _common, DocuTypeGroup  _docuTypeGroup, DocuRestriction _restriction)
    {
        DocuType            docuType = DocuType::findGroup(_docuTypeGroup);
        DocuRefSearch       docuRefSearch;
        Notes               returnNotes;
        Notes               localNotes;

        #xppTexts

        while (docuType)
        {
            docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_common, docuType.TypeId, _restriction);
            localNotes = Docu::concatDocuRefNotes(docuRefSearch);

            if (localNotes)
            {
                if (returnNotes != "")
                {
                    returnNotes += #newline;
                }
                returnNotes += localNotes;
            }

            next docuType;
        }

        return returnNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnAcknowledgmentAndDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the full data from the <c>ReturnAcknowledgmentAndDocumentTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>ReturnAcknowledgmentAndDocumentTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ReturnAcknowledgmentAndDocumentTmp))]
    public ReturnAcknowledgmentAndDocumentTmp getReturnAcknowledgmentAndDocumentTmp()
    {
        select returnAcknowledgmentAndDocumentTmp;
        return returnAcknowledgmentAndDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimensions which should be showed on the report.
    /// </summary>
    private void initInventDimSetup()
    {
        InventDimParm   inventDimParm;
         
        inventDimParm.setAllProductDimensions();
        inventDimParm.InventBatchIdFlag = true;
        inventDimParm.InventSerialIdFlag = true;

        inventDimReport = InventDimCtrl_Rep_Sales::construct();

        inventDimSetup = inventDimReport.dimFieldsActive(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic, calls helper methods, and inserts data in the temporary table.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {

        ReturnAcknowledgmentAndDocContract contract = this.parmReturnAcknowledgmentAndDocContract();
        pdsCatchWeightEnabled   = #PdsCatchWeightEnabled;
        printNotes              = contract.parmPrintNotes();
        returnReportType        = contract.parmReportType();

        this.createReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data for the return acknowledgment and return document.
    /// </summary>
    protected void createReportData()
    {
        this.initInventDimSetup();
        
        this.createReturnAcknowledgmentAndDocLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReturnAcknowledgmentAndDocQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the return acknowledgment and return document query.
    /// </summary>
    /// <returns>
    /// The return acknowledgment and return document query.
    /// </returns>
    protected Query buildReturnAcknowledgmentAndDocQuery()
    {
        ReturnAcknowledgmentAndDocContract contract = this.parmReturnAcknowledgmentAndDocContract();
        RecId recId = contract.parmRecordId();
        
        Query query = this.parmQuery();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(SalesTable));
        SysQuery::findOrCreateRange(qbds, fieldNum(SalesTable, RecId)).value(queryValue(recId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnAcknowledgmentAndDocLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the return acknowledgment and return document lines.
    /// </summary>
    protected void createReturnAcknowledgmentAndDocLines()
    {

        QueryRun queryRun = new QueryRun(this.buildReturnAcknowledgmentAndDocQuery());
        if (queryRun.next())
        {
            salesTable          = queryRun.get(tableNum(SalesTable));
            formLetterRemarks   = queryRun.get(tableNum(FormLetterRemarks));
            addressCustTable    = queryRun.get(tableNum(CustTable));
            
            ReturnAcknowledgmentAndDocumentTmp returnAcknowledgmentAndDocumentTemplate = this.createReturnAcknowledgmentAndDocTemplate();

            do
            {
                salesLine       = queryRun.get(tableNum(SalesLine));
                inventDim       = queryRun.get(tableNum(InventDim));
                this.createReturnAcknowledgmentAndDocLine(returnAcknowledgmentAndDocumentTemplate);
            }
            while (queryRun.next());

            ReturnAcknowledgmentAndDocContract contract = this.parmReturnAcknowledgmentAndDocContract();
            boolean sendDoc                 = contract.parmSendXML();
            boolean isSendDoc               = contract.parmIsSendDoc();
            if (sendDoc && isSendDoc)
            {
                this.sendReturnAcknowledgmentXML();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnAcknowledgmentAndDocTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the template used to create the return acknowledgment and return document lines.
    /// </summary>
    /// <returns>
    /// The template used to create the return acknowledgment and return document lines.
    /// </returns>
    protected ReturnAcknowledgmentAndDocumentTmp createReturnAcknowledgmentAndDocTemplate()
    {
        ReturnAcknowledgmentAndDocumentTmp returnAcknowledgmentAndDocumentTemplate = this.initReturnAcknowledgmentAndDocTemplate();

        returnAcknowledgmentAndDocumentTemplate.insert();

        return returnAcknowledgmentAndDocumentTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReturnAcknowledgmentAndDocTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the template used to create the return acknowledgment and return document lines.
    /// </summary>
    /// <returns>
    /// The initialized template.
    /// </returns>
    protected ReturnAcknowledgmentAndDocumentTmp initReturnAcknowledgmentAndDocTemplate()
    {
        CompanyInfo   companyInfo = CompanyInfo::find();

        ReturnAcknowledgmentAndDocumentTmp  returnAcknowledgmentAndDocumentTemplate;
        returnAcknowledgmentAndDocumentTemplate.CompanyPhone                = companyInfo.phone();
        returnAcknowledgmentAndDocumentTemplate.CompanyTeleFax              = companyInfo.teleFax();
        returnAcknowledgmentAndDocumentTemplate.CompanyGiro                 = companyInfo.Giro;
        returnAcknowledgmentAndDocumentTemplate.CompanyCoRegNum             = companyInfo.CoRegNum;
        returnAcknowledgmentAndDocumentTemplate.CompanyEnterpriseNumber     = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, salesTable.DeliveryDate);
        returnAcknowledgmentAndDocumentTemplate.CompanyName                 = companyInfo.name();
        returnAcknowledgmentAndDocumentTemplate.CompanyAddress              = companyInfo.postalAddress().Address;
        returnAcknowledgmentAndDocumentTemplate.SalesTaker                  = HcmWorker::find(salesTable.WorkerSalesTaker).name();
        returnAcknowledgmentAndDocumentTemplate.CustAccount                 = salesTable.CustAccount;
        returnAcknowledgmentAndDocumentTemplate.ReturnItemNum               = salesTable.ReturnItemNum;
        returnAcknowledgmentAndDocumentTemplate.CustomerRef                 = salesTable.CustomerRef;
        returnAcknowledgmentAndDocumentTemplate.PurchOrderFormNum           = salesTable.PurchOrderFormNum;
        returnAcknowledgmentAndDocumentTemplate.ReturnReasonCodeId          = salesTable.ReturnReasonCodeId;
        returnAcknowledgmentAndDocumentTemplate.PdsEnabled                  = pdsCatchWeightEnabled;

        if (returnReportType == #ReturnDocument)
        {
            returnAcknowledgmentAndDocumentTemplate.ItemReturnDeadLine      = strFmt("@SYS105842", strFmtByLanguage(salesTable.LanguageId,'{0:d}',salesTable.ReturnDeadline));
        }

        returnAcknowledgmentAndDocumentTemplate.CompanyLogo                 = FormLetter::companyLogo();
        if (conLen(returnAcknowledgmentAndDocumentTemplate.CompanyLogo) > 0)
        {
            returnAcknowledgmentAndDocumentTemplate.PrintCompanyLogo        = NoYes::Yes;
        }

        returnAcknowledgmentAndDocumentTemplate.DeliveryName                 = salesTable.DeliveryName;
        returnAcknowledgmentAndDocumentTemplate.DeliveryAddress              = salesTable.deliveryAddressing();

        returnAcknowledgmentAndDocumentTemplate.CompanyNameReturnBy          = addressCustTable.name();
        returnAcknowledgmentAndDocumentTemplate.CompanyAddressReturnBy       = addressCustTable.postalAddress().Address;
        returnAcknowledgmentAndDocumentTemplate.FormLetterTxt                = formLetterRemarks.Txt;

        if (printNotes)
        {
            returnAcknowledgmentAndDocumentTemplate.Notes = this.getAllNotesForDocuTypeGroup(salesTable, DocuTypeGroup::Note, DocuRestriction::External);
        }

        return returnAcknowledgmentAndDocumentTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnAcknowledgmentAndDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a return acknowledgment and return document line.
    /// </summary>
    /// <param name = "_returnAcknowledgmentAndDocumentTemplate">
    /// The template used to initialize the line.
    /// </param>
    /// <returns>
    /// The created line.
    /// </returns>
    protected ReturnAcknowledgmentAndDocumentTmp createReturnAcknowledgmentAndDocLine(ReturnAcknowledgmentAndDocumentTmp _returnAcknowledgmentAndDocumentTemplate)
    {
        this.initReturnAcknowledgmentAndDocLine(_returnAcknowledgmentAndDocumentTemplate);

        returnAcknowledgmentAndDocumentTmp.insert();

        return returnAcknowledgmentAndDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReturnAcknowledgmentAndDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a return acknowledgment and return document line.
    /// </summary>
    /// <param name = "_returnAcknowledgmentAndDocumentTemplate">
    /// The template used to initialize the line.
    /// </param>
    /// <returns>
    /// The initialized line.
    /// </returns>
    protected ReturnAcknowledgmentAndDocumentTmp initReturnAcknowledgmentAndDocLine(ReturnAcknowledgmentAndDocumentTmp _returnAcknowledgmentAndDocumentTemplate)
    {
        returnAcknowledgmentAndDocumentTmp.data(_returnAcknowledgmentAndDocumentTemplate);

        returnAcknowledgmentAndDocumentTmp.ItemId                   = salesLine.ItemId;
        returnAcknowledgmentAndDocumentTmp.Name                     = salesLine.Name;

        returnAcknowledgmentAndDocumentTmp.InventDimStr = FormLetter::inventDimReport(inventDim, inventDimSetup, salesTable.LanguageId);
        returnAcknowledgmentAndDocumentTmp.UnitTxt = this.salesUnitTxt();
        if (returnReportType == #ReturnDocument)
        {
            returnAcknowledgmentAndDocumentTmp.ExpectedRetQty       = abs(salesLine.ExpectedRetQty);
            returnAcknowledgmentAndDocumentTmp.PdsCWQtyReturned     = abs(salesLine.PdsCWExpectedRetQty);
        }
        else if (returnReportType == #ReturnAcknowledgment)
        {
            returnAcknowledgmentAndDocumentTmp.SalesQty             = abs(salesLine.SalesQty);
            returnAcknowledgmentAndDocumentTmp.ReturnArrivalDate    = salesLine.ReturnArrivalDate;
            returnAcknowledgmentAndDocumentTmp.PdsCWQtyReturned     = abs(salesLine.PdsCWQty);
        }

        if (pdsCatchWeightEnabled)
        {
            returnAcknowledgmentAndDocumentTmp.PdsCWUnitId     = salesLine.pdsCWUnitId();
        }

        if (printNotes)
        {
            returnAcknowledgmentAndDocumentTmp.LineNotes = this.getAllNotesForDocuTypeGroup(salesLine, DocuTypeGroup::Note, DocuRestriction::External);
        }

        return returnAcknowledgmentAndDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text of the <c>SalesUnit</c> object.
    /// </summary>
    /// <returns>
    /// The text of the <c>SalesUnit</c> object.
    /// </returns>
    private UnitOfMeasureReportingText salesUnitTxt()
    {
        return UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.SalesUnit), salesTable.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReturnAcknowledgmentXML</Name>
				<Source><![CDATA[
    void sendReturnAcknowledgmentXML()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnAcknowledgmentAndDocContract</Name>
				<Source><![CDATA[
    public ReturnAcknowledgmentAndDocContract parmReturnAcknowledgmentAndDocContract()
    {
        return this.parmDataContract() as ReturnAcknowledgmentAndDocContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>