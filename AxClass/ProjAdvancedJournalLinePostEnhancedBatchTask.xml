<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalLinePostEnhancedBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A task for posting multiple ProjAdvancedJournals using multiple batch tasks.
/// </summary>
public class ProjAdvancedJournalLinePostEnhancedBatchTask extends RunBaseBatch implements BatchRetryable
{
    private int totalLinesProcessed;
    private int configuredMaxLinesPerTask;
    private Set linesToPost;

    #DEFINE.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of this class that can be used to generate multiple batch tasks for advanced journal line posting.
    /// </summary>
    /// <param name = "_maxLinesPerTask">Maximum number of lines per task</param>
    /// <returns>A task that can journalize and post a list of advanced journal lines</returns>
    public static ProjAdvancedJournalLinePostEnhancedBatchTask construct(int _maxLinesPerTask)
    {
        ProjAdvancedJournalLinePostEnhancedBatchTask batch = new ProjAdvancedJournalLinePostEnhancedBatchTask();
        batch.linesToPost = new Set(Types::Int64);
        batch.configuredMaxLinesPerTask = _maxLinesPerTask;
        batch.totalLinesProcessed = 0;
        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the data of the class into a container.
    /// </summary>
    /// <returns>A container containing data of class variables.</returns>
    public container pack()
    {
        return [#CurrentVersion, configuredMaxLinesPerTask, linesToPost.pack(), totalLinesProcessed];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores data from container to class variables.
    /// </summary>
    /// <param name = "_packedClass">The packed container containing data.</param>
    /// <returns>True; when data was restored successfully otherwise false.</returns>
    public boolean unpack(container _packedClass)
    {
        if (conPeek(_packedClass, 1) != #CurrentVersion)
        {
            return false;
        }

        configuredMaxLinesPerTask = conPeek(_packedClass, 2);
        linesToPost = Set::create(conPeek(_packedClass, 3));
        totalLinesProcessed = conPeek(_packedClass, 5);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the journal line to set of lines to be processed.
    /// </summary>
    /// <param name = "_projAdvancedJournalLineRecId">The journal line which should be processed.</param>
    public void addLine(projAdvancedJournalLineRecId _projAdvancedJournalLineRecId)
    {
        linesToPost.add(_projAdvancedJournalLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskIsFull</Name>
				<Source><![CDATA[
    /// <summary>
    /// The state of remaining capacity of lines which can be processed.
    /// </summary>
    /// <returns>True; when no more line can be added or false when more line can be added.</returns>
    public boolean taskIsFull()
    {
        boolean isTaskFull = false;
        if (linesToPost.elements() >= configuredMaxLinesPerTask)
        {
            isTaskFull = true;
        }
        return isTaskFull;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        // Wrap all logic within try-catch to suppress all exceptions and thus allow dependent (Header process) job to run.
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalLinePostEnhancedBatchTask));
        using (SysInstrumentationActivityContext activityContext = logger.integrationJournalActivity().postAdvancedJournalContext())
        {
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::EnhancedPosting, any2Str(True));
            try
            {
                SetIterator recordsIterator = new SetIterator(linesToPost);

                while (recordsIterator.more())
                {
                    totalLinesProcessed++;

                    ProjAdvancedJournalLine projAdvancedJournalLine = ProjAdvancedJournalLine::findNoCache(recordsIterator.value());
                    ProjAdvancedJournal projAdvancedJournal = ProjAdvancedJournal::findNoCache(projAdvancedJournalLine.ProjAdvancedJournal);

                    logger.logInformation(strFmt("@Proj:JournalLineInfo", projAdvancedJournalLine.RecId, projAdvancedJournalLine.Voucher, projAdvancedJournal.ProjAdvancedJournalId, this.parmCurrentBatch(), xSession::currentRetryCount()));

                    if (projAdvancedJournal.Status == ProjAdvancedJournalStatus::Processing)
                    {
                        if (projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::Unrecoverable && projAdvancedJournalLine.PostError == NoYes::No)
                        {
                            ttsbegin;
                            projAdvancedJournalLine.selectForUpdate(true);
                            projAdvancedJournalLine.PostError = NoYes::Yes;
                            projAdvancedJournalLine.doUpdate();
                            ttscommit;
                        }
                        else
                        {
                            this.updateJournalLineStatusToCorrectStatus(projAdvancedJournalLine);

                            ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(projAdvancedJournal);
                            projAdvancedJournalPost.processJournalLineEnhanced(projAdvancedJournalLine);
                        }
                    }
                    else
                    {
                        logger.logCritical(strFmt("@Proj:JournalLineProcessingSkippedDueToJournalStatus",
                            projAdvancedJournalLine.RecId, projAdvancedJournalLine.Voucher, projAdvancedJournal.ProjAdvancedJournalId, projAdvancedJournal.DataAreaId, projAdvancedJournal.Status));
                    }

                    recordsIterator.next();
                }
            }
            catch
            {
                logger.logError(strFmt("@Proj:ExceptionInLineBatchTask", this.parmCurrentBatch(), linesToPost.elements(), totalLinesProcessed));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLineStatusToCorrectStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the status of a journal line and updates it accordingly.
    /// </summary>
    /// <param name = "_projAdvancedJournalLine">The journal line to be updated.</param>
    protected void updateJournalLineStatusToCorrectStatus(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        if (_projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::None)
        {
            ProjAdvancedJournalPost::updateJournalLineStatusToCorrectState(_projAdvancedJournalLine, true);

            // Check to see if the line is set to Unrecoverable, so that if it is we can throw a warning
            if (_projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::Unrecoverable)
            {
                warning(strFmt("@Proj:JournalLineEntryPresentInGLOrProjTable", _projAdvancedJournalLine.RecId, _projAdvancedJournalLine.Voucher));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructor to create an object of the class.
    /// </summary>
    /// <param name = "_packedObject">The data with which class variables can be initialized.</param>
    /// <returns>An instance of class initialized with values stored in packedObject.</returns>
    public static ProjAdvancedJournalLinePostEnhancedBatchTask create(container _packedObject)
    {
        ProjAdvancedJournalLinePostEnhancedBatchTask proposalBatch = new ProjAdvancedJournalLinePostEnhancedBatchTask();
        proposalBatch.unpack(_packedObject);
        return proposalBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>