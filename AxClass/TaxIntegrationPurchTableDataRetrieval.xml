<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchTableDataRetrieval</c> class retrieves data from <c>PurchTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(PurchTable))]
public class TaxIntegrationPurchTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected PurchTable purchTable;
    protected PurchLine purchLine;
    protected PurchLine originalPurchLine;

    protected TransportationDocument transportationDocument;
    protected VendTable vendTable;
    protected VendTable vendTableInvoice;

    protected InventDim inventDim;

    private LedgerDimensionDefaultAccount ledgerAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        SysDaQueryObjectBuilder queryObjectBuilder;

        if (this.document.getLocalRecord())
        {
            this.purchTable = this.document.getLocalRecord();

            if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled())
            {
                queryObjectBuilder = SysDaQueryObjectBuilder::from(this.vendTable)
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualToLiteral(this.purchTable.OrderAccount)
                    .outerJoin(this.transportationDocument) // primary key
                        .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                            .isEqualToLiteral(this.purchTable.TransportationDocument)
                    .outerJoin(this.vendTableInvoice) // alternate key
                        .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                            .isEqualToLiteral(this.purchTable.InvoiceAccount);
            }
            else
            {
                queryObjectBuilder = SysDaQueryObjectBuilder::from(this.vendTable)
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, OrderAccount))
                    .outerJoin(this.transportationDocument) // primary key
                        .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                            .isEqualTo(this.purchTable, fieldStr(PurchTable, TransportationDocument))
                    .outerJoin(this.vendTableInvoice) // alternate key
                        .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                            .isEqualTo(this.purchTable, fieldStr(PurchTable, InvoiceAccount));
            }
        }
        else
        {
            queryObjectBuilder = SysDaQueryObjectBuilder::from(this.purchTable)
                .where(this.purchTable, fieldStr(PurchTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .outerJoin(this.transportationDocument) // primary key
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, TransportationDocument))
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, OrderAccount))
                .outerJoin(this.vendTableInvoice) // alternate key
                    .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, InvoiceAccount));
        }

        return queryObjectBuilder.toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document excluding deleted purch lines.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObjectBuilder queryBuilder = SysDaQueryObjectBuilder::from(this.purchLine)
            .where(this.purchLine, fieldStr(PurchLine, PurchId))
                .isEqualToLiteral(this.purchTable.PurchId)
            .where(this.purchLine, fieldStr(PurchLine, IsDeleted))
                .isEqualToLiteral(NoYes::No)
            .outerJoin(this.inventDim) // alternate key
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.purchLine, fieldStr(PurchLine, InventDimId));

        if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled())
        {
            queryBuilder.outerJoin(this.originalPurchLine)
                .where(this.originalPurchLine, fieldStr(PurchLine, InventTransId))
                    .isEqualTo(this.purchLine, fieldStr(PurchLine, InventRefTransId));
        }

        return queryBuilder.toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.purchLine.TableId,
            this.purchLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary> 
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Purchase);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>PurchTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        this.copyToDocumentFromInventStorageDimMap(document, this.purchTable);

        document.setIncludingTax(this.purchTable.InclTax);
        document.setOrderAccount(this.purchTable.OrderAccount);
        document.setOrderAccountGroup(this.purchTable.VendGroup);
        document.setInvoiceAccount(this.purchTable.InvoiceAccount);
        document.setTransactionCurrencyCode(this.purchTable.CurrencyCode);
        document.setAccountingCurrencyFixedExchangeRate(this.purchTable.FixedExchRate);
        document.setReportingCurrencyFixedExchangeRate(this.purchTable.ReportingCurrencyFixedExchRate);
        document.setDeliveryTerm(this.purchTable.DlvTerm);
        document.setListCode(this.purchTable.ListCode);
        this.copyToDocumentFromVATNum(
            this.purchTable.VATNum,
            this.purchTable.VATNumTableType,
            this.purchTable.VATNumRecId);
        document.setPurchaseType(this.purchTable.PurchaseType);
        document.setIntercompanyDirectDelivery(this.purchTable.InterCompanyDirectDelivery);
        document.setDirectDelivery(this.purchTable.MCRDropShipment);
        document.setInvoiceAccountGroup(this.vendTableInvoice.VendGroup);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            switch(document.getDocumentStatus())
            {
                case DocumentStatus::None:
                    document.setAccountingDate(this.purchTable.AccountingDate);
                    document.setCreatedDateTime(this.purchTable.CreatedDateTime);
                    break;
                case DocumentStatus::Confirmation:
                    // since Po confirmation document date is from purchParmTable, we could only set it from taxPurch.
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrVendor(
            this.transportationDocument,
            this.vendTable,
            LogisticsLocationRoleType::Delivery);

        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress;
        if (this.purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryLocationOrSiteOrCompanyInformation(
                this.purchTable.InventLocationId,
                this.purchTable.InventSiteId,
                CompanyInfo::find(),
                LogisticsLocationRoleType::Delivery);
        }
        else
        {
            shipmentDestinationLogisticsPostalAddress = this.purchTable.deliveryAddress();
        }

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            this.vendTableInvoice,
            LogisticsLocationRoleType::Invoice);
        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>PurchLine</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        ledgerAccount = 0;

        this.copyToLineFromSalesPurchJournalLine(_line, this.purchLine);
        this.copyToLineFromInventDim(_line, this.inventDim);
        this.copyToLineFromInventTable(_line, this.purchLine.inventTable());

        _line.setProductVariant(this.purchLine.VariantId);
        _line.setIntrastatCommodityId(this.purchLine.IntrastatCommodity);
        _line.setProjectId(this.purchLine.ProjId);
        if (_line.getIntrastatCommodityId())
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_line.getIntrastatCommodityId());
            _line.setIntrastatCommodityCode(EcoResCategory.Code);
        }

        _line.setDirectDelivery(this.purchLine.MCRDropShipment);
        _line.setDeliveryTerm(this.purchLine.DlvTerm);
        _line.setDeliveryDate(this.purchLine.deliveryDate(document.getInvoiceDate()));

        _line.setLedgerDimension(this.purchLine.DefaultDimension);
        LedgerDimensionDefaultAccount ledgerAccountLoc = 0;
        if (isConfigurationkeyEnabled(configurationKeyNum(Project))
                && this.purchLine
                && this.purchLine.ItemId
                && this.purchLine.ProjId
                && this.purchLine.ProjCategoryId)
        {
            ledgerAccountLoc = ProjPosting::getLedgerDimension(
                    ProjAccountType::CostAccount,
                    this.purchLine.ProjId,
                    this.purchLine.ProjCategoryId,
                    0,
                    false,
                    false,
                    this.purchLine.TaxGroup);
        }
        if (ledgerAccountLoc == 0)
        {
            if (this.purchLine.ItemId)
            {
                InventMovement inventMovement = InventMovement::construct(this.purchLine);

                if (inventMovement.mustBeBookedFinancially())
                {
                    if (inventMovement.mustBeBookedBalanceSheet())
                    {
                        ledgerAccountLoc = inventMovement.accountBalanceSheet();
                    }
                    else
                    {
                        if (inventMovement.mustBeBookedOperations())
                        {
                            ledgerAccountLoc = inventMovement.accountOperations();
                        }
                    }
                }
                LedgerAccount = ledgerAccountLoc;
            }
        }
        _line.setOperationLedgerDimension(ledgerAccountLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quantity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setQuantity(this.getTransactionQuantity());
        _line.setLineAmount(this.purchLine.calcLineAmount(_line.getQuantity()));
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction quantity.
    /// The logic is similar as PurchCalcTax_Purch::transQty().
    /// </summary>
    /// <returns>The quantity.</returns>
    private PurchQty getTransactionQuantity()
    {
        if (!this.purchLine.isInvoiced())
        {
            return PurchQuantity::construct(DocumentStatus::Invoice, true).calcPurchQty(this.purchLine, this.document.getQuantityType().getPurchUpdate());
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyAddressToLineWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should copy address to line with cache or not.
    /// Override this method to return true to leverage cache for better performance.
    /// </summary>
    /// <returns>true if copy with cache; otherwise, false.</returns>
    protected boolean shouldCopyAddressToLineWithCache()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentOriginAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentOriginAddress()
    {
        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrVendor(
            this.transportationDocument,
            this.vendTable, // document
            LogisticsLocationRoleType::Delivery);
        return shipmentOriginLogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentOriginAddressCacheKey()
    {
        return int642Str(this.transportationDocument.LoadedPostalAddress) + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + int642Str(this.vendTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentDestinationAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentDestinationAddress()
    {
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress;
        if (this.purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled()
                && this.originalPurchLine)
            {
                shipmentDestinationLogisticsPostalAddress = this.originalPurchLine.deliveryAddress();
            }
            else
            {
                shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryDimensionOrCompanyInformation(
                    this.inventDim,
                    CompanyInfo::find(),
                    LogisticsLocationRoleType::Delivery);
            }
        }
        else
        {
            shipmentDestinationLogisticsPostalAddress = this.purchLine.deliveryAddress();
        }

        return shipmentDestinationLogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentDestinationAddressCacheKey()
    {
        if (this.purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled()
                && this.originalPurchLine)
            {
                return strFmt('%1|%2',
                    tableNum(LogisticsPostalAddress),
                    this.originalPurchLine.DeliveryPostalAddress ? this.originalPurchLine.DeliveryPostalAddress : this.originalPurchLine.DeliveryPostalAddress);
            }
            else
            {
                return this.inventDim.InventLocationId
                    + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter
                    + this.inventDim.InventSiteId;
            }
        }
        else
        {
            return strFmt('%1|%2',
                tableNum(LogisticsPostalAddress),
                this.purchLine.DeliveryPostalAddress ? this.purchLine.DeliveryPostalAddress : this.purchTable.DeliveryPostalAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchTableDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purch table discount.
    /// </summary>
    /// <returns>Return the purch table discount.</returns>
    /// <remarks>
    /// In case of posting an invoice with multiple purchase orders, the purchTable can be different from the header table of the purchLine.
    /// The straightforward solution is to query the header table of the line in the getLineQueryObject method.
    /// However, there is a performance concern as it is only needed for this corner case.
    /// Therefore, it caches the DiscPercent of the header table of the current line for simplicity. If more fields are needed in the future,
    /// may consider updating the purchTable (or caching the record) instead of caching more fields.
    /// </remarks>
    private PurchEndDiscPct getPurchTableDiscPercent()
    {
        if (!this.purchLine.endDisc())
        {
            return 0.0;
        }

        PurchEndDiscPct purchEndDiscPct;

        if (this.purchLine.PurchId != this.purchTable.PurchId)
        {
            TaxIntegrationDataRetrievalContext contextLoc = this.getContext();
            if (!contextLoc.existsSalesPurchTotalsDiscPercent(this.purchLine.PurchId))
            {
                purchEndDiscPct = this.purchLine.purchTable().DiscPercent;
                contextLoc.cacheSalesPurchTotalsDiscPercent(this.purchLine.PurchId, purchEndDiscPct);
            }
            else
            {
                purchEndDiscPct = contextLoc.getSalesPurchTotalsDiscPercent(this.purchLine.PurchId, true);
            }
        }
        else
        {
            purchEndDiscPct = this.purchTable.DiscPercent;
        }

        return purchEndDiscPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>PurchTable</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>
    /// Multiple purchase orders can be calculated in one document. Different lines can have different headers.
    /// But some fields should be retrieved from the same header, some are from each line's header.
    /// Please keep the behavior the same as the core tax.
    /// </remarks>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        PurchEndDiscPct purchDiscPct = this.getPurchTableDiscPercent();
        if (purchDiscPct)
        {
            _line.setTransactionAmount(_line.getTransactionAmount() * (100 - purchDiscPct) / 100);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToDocumentChargeFromDocumentChargeTable(_charge);
        this.copyToDocumentChargeFromHeaderTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromDocumentChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromDocumentChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>PurchTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromHeaderTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(this.purchTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToLineChargeFromLineChargeTable(_charge);
        this.copyToLineChargeFromLineTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>PurchLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        _charge.setInventoryTransactionId(this.purchLine.InventTransId);
        _charge.setLedgerDimension(this.purchLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge from <c>MarkupTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge.</param>
    /// <param name = "_markupTrans">The record of <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromChargeTable(TaxIntegrationLineObject _charge, MarkupTrans _markupTrans)
    {
        MarkupTable markupTable = _markupTrans.markupTable();

        switch (markupTable.CustType)
        {
            case MarkupType::Item :
                if (this.purchLine)
                {
                    _charge.setOperationLedgerDimension(ledgerAccount);
                }
                break;

            case MarkupType::LedgerAccount :
                _charge.setOperationLedgerDimension(markupTable.parmCustomerLedgerDimension());
                break;

            case MarkupType::CustVend :
                _charge.setOperationLedgerDimension(markupTable.parmVendorLedgerDimension());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a charge object from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_source">The source <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromMarkupTrans(
        TaxIntegrationLineObject _destination,
        MarkupTrans _source)
    {
        _destination.setTaxable(!_source.isIntercompanyVirtualCharge());
        super(_destination, _source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxabilityForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// References from <c>PurchCalcTax_Purch.skipTaxRecalculationsForLine</c>
    /// and removed the condition <c>PurchCalcTax_Purch.useOnlyEditedLinesForTaxCalc</c>,
    /// because the <c>useOnlyEditedLinesForTaxCalc</c> depends on the Marginal base on the tax code,
    /// but tax service doesn't support the Marginal base anymore.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void determineTaxabilityForLine(TaxIntegrationLineObject _line)
    {
        boolean isTaxable = _line.isTaxable();

        if (this.purchTable.recalculateTaxForChangedLineOnly())
        {
            // For invoice matched lines allow tax recalculation in situations where specQty is different from All (e.g. when using UpdateSelection in PurchTotals form)
            PurchUpdate quantityType = this.document.getQuantityType().getPurchUpdate();
            boolean isPOModified = purchLine.IsModified || purchTable.IsModified;
            boolean isPurchLineInvoiced = purchLine.isInvoiceMatched()
                || purchLine.sourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Finalized;
            isTaxable = isPOModified && !isPurchLineInvoiced || quantityType != PurchUpdate::All;
        }

        _line.setTaxable(isTaxable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>