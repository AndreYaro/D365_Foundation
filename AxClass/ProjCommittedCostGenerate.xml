<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCommittedCostGenerate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using RunTimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;

class ProjCommittedCostGenerate extends RunBaseBatch implements BatchRetryable
{
    NoYes               purchRequisition;
    NoYes               purchaseOrder;
    NoYes               itemRequirement;
    NoYes               production;
    NoYes               salesOrder;
    NoYes               itemJournal;
    NoYes               vendInvoice;
    NoYes               expenseManagement;
    NoYes               travelRequisition;
    NoYes               hourJournal;
    NoYes               timeSheet;
    NoYes               advancedJournal;

    DialogRunbase       dialog;

    DialogField         dialogPurchRequisition;
    DialogField         dialogPurchaseOrder;
    DialogField         dialogItemRequirement;
    DialogField         dialogProduction;
    DialogField         dialogSalesOrder;
    DialogField         dialogItemJournal;
    DialogField         dialogVendInvoice;
    DialogField         dialogExpenseManagement;
    DialogField         dialogTravelRequisition;
    DialogField         dialogHourJournal;
    DialogField         dialogTimeSheet;
    DialogField         dialogAdvancedJournal;
    boolean             dontShowdialog;

    List                hourForecastModelList;
    List                itemForecastModelList;
    List                expenseForecastModelList;

    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        purchRequisition,
        purchaseOrder,
        itemRequirement,
        production,
        salesOrder,
        itemJournal,
        expenseManagement,
        travelRequisition,
        vendInvoice,
        hourJournal,
        timeSheet,
        advancedJournal
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCommittedCosts</Name>
				<Source><![CDATA[
    private void createCommittedCosts()
    {
        setPrefix("@SYS105978");
        if (purchRequisition)
        {
            this.createPurchRequisition();
        }

        if (purchaseOrder)
        {
            this.createPurchaseOrder();
        }

        if (itemRequirement)
        {
            this.createItemRequirement();
        }

        if (production)
        {
            this.createProduction();
        }

        if (salesOrder)
        {
            this.createSalesOrder();
        }

        if (itemJournal)
        {
            this.createItemJournal();
        }

        if (expenseManagement)
        {
            this.createExpenseManagement();
        }

        if (travelRequisition)
        {
            this.createTravelRequisition();
        }

        if (vendInvoice)
        {
            this.createVendInvoice();
        }

        if (hourJournal)
        {
            this.createHourJournal();
        }
        
        if (timeSheet)
        {
            this.createTimeSheet();
        }
        
        if (advancedJournal)
        {
            this.createAdvancedJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseManagement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the committed cost for the expense management.
    /// </summary>
    /// <remarks>
    ///    The committed costs for project related expense management.
    /// </remarks>
    private void createExpenseManagement()
    {
        boolean                 created;
        TrvExpTrans             trvExpTrans;
        SourceDocumentLineItem  sourceDocumentLineItem;

        setPrefix("@SYS342976");

        ttsbegin;

        while select trvExpTrans
        where trvExpTrans.InterCompanyLE == this.lastValueDataAreaId()
           && trvExpTrans.ProjId != ''
           && trvExpTrans.ExpNumber != ''
           && trvExpTrans.LineType != TrvExpLineType::ItemizedLine
           && trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(trvExpTrans);
            if (this.processSourceDocumentLineItem(sourceDocumentLineItem))
            {
                created = true;
            }
        }

        ttscommit;

        if (!created)
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHourJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the committed cost for the hour journal.
    /// </summary>
    /// <remarks>
    ///    The committed costs for project related hour journal.
    /// </remarks>
    private void createHourJournal()
    {
        ProjJournalTrans                        projJournalTrans;
        ProjJournalTable                        projJournalTable;
        CostControlTransCommittedCost           costControlTransCommittedCost;
        ProjBudgetTransactionManager            projBudgetTransactionManager;
        boolean                                 created=false;
        boolean                                 useBudgeting = false;
        boolean                                 budgetUpdate = false;
        AmountCur                               amountCur;

        setPrefix("@SYS342974");

        ttsbegin;
        while select projJournalTrans
        exists join RecId from projJournalTable
        where projJournalTable.JournalId == projJournalTrans.JournalId
        && projJournalTable.Posted ==NoYes::No
        && projJournalTable.JournalType == ProjJournalType::Hour
        && projJournalTrans.ProjId
        {
            if (!CostControlTransCommittedCost::findOpenedByProjTransID(projJournalTrans.TransId))
            {
                costControlTransCommittedCost.clear();
                costControlTransCommittedCost.initFromProjJournalTrans(projJournalTrans);

                costControlTransCommittedCost.Qty=projJournalTrans.Qty;
                amountCur= CurrencyExchangeHelper::amount(projJournalTrans.Qty * projJournalTrans.CostPrice, CompanyInfoHelper::standardCurrency());
                costControlTransCommittedCost.CommittedDate = projJournalTrans.TransDate;
                costControlTransCommittedCost.ProjTransType = ProjTransType::Hour;
                costControlTransCommittedCost.Open = NoYes::Yes;
                costControlTransCommittedCost.Reverse = NoYes::No;

                if (!costControlTransCommittedCost.Qty == 0)
                {
                    useBudgeting = ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting;

                    if (useBudgeting )
                    {
                        projBudgetTransactionManager =  ProjBudgetTransactionManager::newProjBudgetTransactionManager(ProjBudgetTransaction::construct(projJournalTrans));
                        projBudgetTransactionManager.parmSupressMessages(true);
                        budgetUpdate = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                    }
                    else
                    {
                        budgetUpdate = this.reduceForecast(costControlTransCommittedCost, amountCur);
                        // Reduce the forecast for every qualified forecast model
                    }
                    if (budgetUpdate)
                    {
                        costControlTransCommittedCost.Amount = amountCur;
                        costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(costControlTransCommittedCost.Amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                        costControlTransCommittedCost.insert();

                        info(strFmt("@SYS112810", strLwr(enum2str(CommittedCostOrig::HourJournal)),projJournalTrans.JournalId,num2str(projJournalTrans.LineNum,1,2,1,0)));
                        created=true;
                    }
                    else
                    {
                        if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                        {
                            info(strFmt("@SYS118723", strLwr(enum2str(CommittedCostOrig::HourJournal)),projJournalTrans.JournalId, num2str(projJournalTrans.LineNum,1,2,1,0)));
                        }
                        else if (!useBudgeting)
                        {
                            this.returnForecast(costControlTransCommittedCost, amountCur);
                            info(strFmt("@SYS118723", strLwr(enum2str(CommittedCostOrig::HourJournal)),projJournalTrans.JournalId,num2str(projJournalTrans.LineNum,1,2,1,0)));
                        }
                    }
                }
            }
        }
        ttscommit;

        if (!created)
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemJournal</Name>
				<Source><![CDATA[
    private void createItemJournal()
    {
        InventJournalTrans                      inventJournalTrans;
        InventJournalTable                      inventJournalTable;
        CostControlTransCommittedCost           costControlTransCommittedCost;
        ProjBudgetTransactionManager            projBudgetTransactionManager;
        boolean                                 created=false;
        boolean                                 useBudgeting = false;
        boolean                                 budgetUpdate = false;

        setPrefix("@SYS104142");
        ttsbegin;
        while select * from inventJournalTrans
                exists join inventJournalTable
                where inventJournalTrans.JournalId == inventJournalTable.JournalId
                && inventJournalTable.Posted ==NoYes::No
                && inventJournalTable.JournalType == InventJournalType::project
                && inventJournalTrans.ProjId != ''
        {
            if (!CostControlTransCommittedCost::findOpenedByProjTransID(inventJournalTrans.ProjTransId))
            {
                costControlTransCommittedCost.clear();
                costControlTransCommittedCost.initFromInventJournalTrans(inventJournalTrans);

                costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                costControlTransCommittedCost.ProjTransType = ProjTransType::Item;
                costControlTransCommittedCost.Open = NoYes::Yes;
                costControlTransCommittedCost.Qty = inventJournalTrans.Qty;
                costControlTransCommittedCost.Voucher = inventJournalTrans.Voucher;

                if (!costControlTransCommittedCost.Qty == 0)
                {
                    useBudgeting = ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting;

                    if (useBudgeting)
                    {
                        projBudgetTransactionManager =  ProjBudgetTransactionManager::newProjBudgetTransactionManager(ProjBudgetTransaction::construct(inventJournalTrans));
                        projBudgetTransactionManager.parmSupressMessages(true);
                        budgetUpdate = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                    }
                    else
                    {
                        budgetUpdate = this.reduceForecast(costControlTransCommittedCost, inventJournalTrans.CostAmount);
                        // Reduce the forecast for every qualified forecast model
                    }
                    if (budgetUpdate)
                    {
                        costControlTransCommittedCost.Amount = inventJournalTrans.CostAmount;
                        costControlTransCommittedCost.AmountMst = inventJournalTrans.CostAmount;
                        costControlTransCommittedCost.insert();

                        info(strFmt("@SYS112810", strLwr(enum2str(CommittedCostOrig::ItemJournal)),inventJournalTrans.JournalId,num2str(inventJournalTrans.LineNum,1,2,1,0)));
                        created=true;
                    }
                    else
                    {
                        if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                        {
                            info(strFmt("@SYS118723", strLwr(enum2str(CommittedCostOrig::ItemJournal)),inventJournalTrans.JournalId, num2str(inventJournalTrans.LineNum,1,2,1,0)));
                        }
                        else if (!useBudgeting)
                        {
                            this.returnForecast(costControlTransCommittedCost, inventJournalTrans.CostAmount);
                            info(strFmt("@SYS118723", strLwr(enum2str(CommittedCostOrig::ItemJournal)),inventJournalTrans.JournalId,num2str(inventJournalTrans.LineNum,1,2,1,0)));
                        }
                    }
                }
            }
        }

        if (!created)
        {
            info("@SYS113054");
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemRequirement</Name>
				<Source><![CDATA[
    private void createItemRequirement()
    {
        SalesLine                           salesLine;
        CostControlTransCommittedCost       costControlTransCommittedCost;
        boolean                             created = false;
        boolean                             updateBudget = false;
        boolean                             useBudgeting = false;
        ProjBudgetTransaction               projBudgetTransaction;
        ProjBudgetTransactionLine           projBudgetTransactionLine;
        ProjBudgetTransactionManager        projBudgetTransactionManager;
        PriceCur                            costPrice;

        setPrefix("@SYS104139");
        ttsbegin;

        while select salesLine
        where salesLine.SalesType == SalesType::ItemReq
            && salesLine.InventRefId == ''
            && salesLine.InventRefTransId == ''
            && (salesLine.SalesStatus == SalesStatus::None
                || salesLine.SalesStatus == SalesStatus::Backorder
                || SalesLine.SalesStatus == SalesStatus::Delivered)
            && salesLine.ProjId != ''
        {
            costControlTransCommittedCost =CostControlTransCommittedCost::findOpenedByProjTransID(salesLine.ProjTransId);
            if (!costControlTransCommittedCost)
            {
                costControlTransCommittedCost.clear();
                costControlTransCommittedCost.initFromSalesLine(salesLine);

                costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                costControlTransCommittedCost.Open = NoYes::Yes;
                costControlTransCommittedCost.ProjTransType = ProjTransType::Item;

                costControlTransCommittedCost.Qty = salesLine.RemainSalesFinancial + salesLine.RemainSalesPhysical;

                costPrice =InventTable::find(salesLine.ItemId).costPcsPrice(salesLine.InventDimId,salesLine.inventDim());

                if (!costControlTransCommittedCost.Qty == 0)
                {
                    useBudgeting = ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting;

                    if (useBudgeting)
                    {
                        projBudgetTransactionLine = ProjBudgetTransactionLine::construct(salesLine);
                        projBudgetTransactionLine.parmQty(costControlTransCommittedCost.Qty);
                        projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.Qty * costPrice );
                        projBudgetTransaction = new ProjBudgetTransaction();
                        projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                        projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
                        updateBudget = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                    }
                    else
                    {
                        updateBudget = this.reduceForecast(costControlTransCommittedCost, costControlTransCommittedCost.Qty *  costPrice);
                    }

                    if (updateBudget)
                    {
                        costControlTransCommittedCost.Amount = costControlTransCommittedCost.Qty *costPrice;
                        costControlTransCommittedCost.AmountMst = costControlTransCommittedCost.Amount;
                        costControlTransCommittedCost.insert();
                        info(strFmt("@SYS112810", strLwr(enum2str(CommittedCostOrig::ItemRequirement)),salesLine.SalesId,num2str(salesLine.LineNum,1,2,1,0)));
                        created=true;
                    }
                    else
                    {
                        if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                        {
                            info(strFmt("@SYS302872", salesLine.ProjCategoryId, salesLine.ProjId,salesLine.SalesId));
                        }
                        else if (!useBudgeting)
                        {
                            this.returnForecast(costControlTransCommittedCost, costControlTransCommittedCost.Qty * costPrice);
                            info(strFmt("@SYS118723", strLwr(enum2str(CommittedCostOrig::ItemRequirement)),salesLine.SalesId,num2str(salesLine.LineNum,1,2,1,0)));
                        }
                    }
                }
            }
        }
        if (!created)
        {
            info("@SYS113054");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProduction</Name>
				<Source><![CDATA[
    private void createProduction()
    {
        ProdTable  prodTable;
        boolean    created=false;
        setPrefix("@SYS104140");
        ttsbegin;

        while select prodTable
        where prodTable.ProdType == ProdType::Standard
            && (prodTable.ProdStatus == ProdStatus::CostEstimated
                || prodTable.ProdStatus == ProdStatus::Scheduled
                || prodTable.ProdStatus == ProdStatus::Released
                || prodTable.ProdStatus == ProdStatus::StartedUp
                || prodTable.ProdStatus == ProdStatus::ReportedFinished)
            && prodTable.ProjId != ''
        {
            if (prodTable.ProjPostingType == ProjProdPostingType::FinishedItemMethod && !prodTable.ProjLinkedToOrder)
            {
                created = this.createProductionFinishedItemMethod(prodTable) || created;
            }
            else
            {
                if (prodTable.ProjPostingType == ProjProdPostingType::ConsumedMethod)
                {
                    created=this.createProductionConsumedMethod(prodTable) || created;
                }
            }
        }
        if (!created)
        {
            info("@SYS113054");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionConsumedMethod</Name>
				<Source><![CDATA[
    private boolean createProductionConsumedMethod(ProdTable _prodTable)
    {
        CostControlTransCommittedCost       costControlTransCommittedCost;
        CostControlTransCommittedCost       existingCostControlTransCommittedCost;
        List                                costControlTransCommittedCostList=new List(Types::Record);
        List                                amountList=new List(Types::Real);
        ProdCalcTrans                       prodCalcTrans;
        ProdBOM                             prodBOM;
        ProdRoute                           prodRoute;
        ProdRouteProj                       prodRouteProj;
        ItemCalcType                        itemCalcType;
        boolean                             created=false;
        Amount                              amount;
        ProjBudgetTransaction               projBudgetTransaction;
        ProjBudgetTransactionLine           projBudgetTransactionLine;
        boolean                             updateBudget = false;
        boolean                             useBudgeting = false;
        ProjBudgetTransactionManager        projBudgetTransactionManager;

        boolean returnForecastCascade(List  _committedCostList, List _amountList)
        {
            CostControlTransCommittedCost   curCommittedCost;
            Amount                          curAmount;
            boolean                         ret;
            ListEnumerator                  listEnumCC,listEnumAmount;

            listEnumCC=_committedCostList.getEnumerator();
            listEnumAmount=_amountList.getEnumerator();
            listEnumCC.reset();
            listEnumAmount.reset();

            while (listEnumCC.moveNext())
            {
                curCommittedCost = listEnumCC.current();
                if (listEnumAmount.moveNext())
                {
                    curAmount = listEnumAmount.current();
                }
                else
                {
                    return false;
                }
                ret = this.returnForecast(curCommittedCost,curAmount);
                if (!ret)
                {
                    return false;
                }
            }
            return true;
        }

        // For the consumed method, the lineNum in costcontrol table from 1....
        useBudgeting = ProjTable::find(_prodTable.ProjId).UseBudgeting;

        select firstonly existingCostControlTransCommittedCost
        where existingCostControlTransCommittedCost.CommittedCostOrig  == CommittedCostOrig::Production
            && existingCostControlTransCommittedCost.RefId             == _prodTable.ProdId
            && existingCostControlTransCommittedCost.Open              == NoYes::Yes;

        if (!existingCostControlTransCommittedCost)
        {
            while select prodCalcTrans
                where prodCalcTrans.CalcType!=ItemCalcType::Production
                &&    prodCalcTrans.TransRefId == _prodTable.ProdId
                &&    prodCalcTrans.TransRefType == ProdTransRefType::Production
            {
                costControlTransCommittedCost.clear();

                // Create item committed cost
                if (prodCalcTrans.IdRefTableId == tableNum(ProdBOM))
                {
                    select prodBOM where prodBOM.RecId==prodCalcTrans.IdRefRecId
                    && prodBOM.ProdId == _prodTable.ProdId;
                    if (prodCalcTrans.CalcType==ItemCalcType::Item
                    ||(prodCalcTrans.CalcType==ItemCalcType::BOM && !prodBOM.prodTableRef().isProjMethodConsumed()))
                    {
                        costControlTransCommittedCost.initFromProdBom(prodBOM);
                        if (prodBOM.EndConsump)
                        {
                            costControlTransCommittedCost.Qty = prodBOM.RemainBOMPhysical;
                        }
                        else
                        {
                            costControlTransCommittedCost.Qty=prodCalcTrans.consumptionSum()-prodCalcTrans.realConsumptionTotal();
                        }

                        costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        costControlTransCommittedCost.ProjTransType = ProjTransType::Item;
                        costControlTransCommittedCost.Open = NoYes::Yes;
                        costControlTransCommittedCost.Reverse = NoYes::No;

                        if (prodCalcTrans.consumptionSum() != 0)
                        {
                            amount=prodCalcTrans.costPriceSum()* costControlTransCommittedCost.Qty / prodCalcTrans.consumptionSum();
                        }

                        costControlTransCommittedCostList.addEnd(costControlTransCommittedCost);
                        amountList.addEnd(amount);

                        if (costControlTransCommittedCost.Qty != 0)
                        {
                            // Reduce the forecast for every qualified forecast model
                            if (useBudgeting)
                            {
                                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodBOM);

                                if (prodCalcTrans.consumptionSum() != 0)
                                {
                                    projBudgetTransactionLine.parmSalesAmount(prodCalcTrans.salesPriceSum() * costControlTransCommittedCost.Qty / prodCalcTrans.consumptionSum());
                                }

                                projBudgetTransactionLine.parmCostAmount(CurrencyExchangeHelper::mstAmount(amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                                projBudgetTransaction = new ProjBudgetTransaction();
                                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                                projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
                                updateBudget = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                            }
                            else
                            {
                                updateBudget = this.reduceForecast(costControlTransCommittedCost,amount);
                            }

                            if (updateBudget)
                            {
                                costControlTransCommittedCost.Amount = amount;
                                costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(costControlTransCommittedCost.Amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                                costControlTransCommittedCost.insert();
                                created=true;
                            }
                            else
                            {
                                if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                                {
                                    info(strFmt("@SYS302873",_prodTable.ProjCategoryId, _prodTable.ProjId, _prodTable.ProdId));
                                }
                                else if (!useBudgeting)
                                {
                                    returnForecastCascade(costControlTransCommittedCostList,amountList);
                                    info(strFmt("@SYS118820", strLwr(enum2str(CommittedCostOrig::Production)),_prodTable.ProdId));
                                }

                                created=false;
                                return created;
                            }
                        }
                    }
                }
                else if (prodCalcTrans.IdRefTableId == tableNum(ProdRoute))
                {
                    if (prodCalcTrans.CalcType==ItemCalcType::Process
                        || prodCalcTrans.CalcType==ItemCalcType::Setup
                        || prodCalcTrans.CalcType==ItemCalcType::Qty)
                    {
                        itemCalcType=prodCalcTrans.CalcType;
                        select prodRoute where prodRoute.RecId == prodCalcTrans.IdRefRecId
                            && prodRoute.ProdId == _prodTable.ProdId;

                        prodRouteProj=prodRoute.prodRouteProj(itemCalcType);
                        costControlTransCommittedCost.initFromProdRouteProj(prodRouteProj);
                        costControlTransCommittedCost.initFromProdRoute(prodRoute,itemCalcType);
                        costControlTransCommittedCost.Qty = prodCalcTrans.consumptionSum()-prodCalcTrans.realConsumptionTotal();

                        costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        costControlTransCommittedCost.LineNum = prodCalcTrans.LineNum-1;
                        costControlTransCommittedCost.ProjTransType = ProjTransType::Hour;
                        costControlTransCommittedCost.Open = NoYes::Yes;
                        costControlTransCommittedCost.Reverse = NoYes::No;

                        if (prodCalcTrans.consumptionSum())
                        {
                            amount = prodCalcTrans.costPriceSum()* costControlTransCommittedCost.Qty / prodCalcTrans.consumptionSum();
                        }
                        costControlTransCommittedCostList.addEnd(costControlTransCommittedCost);
                        amountList.addEnd(amount);
                        if (costControlTransCommittedCost.Qty != 0)
                        {
                            // Reduce the forecast for every qualified forecast model
                            if (useBudgeting)
                            {
                                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodRouteProj);
                                if (prodCalcTrans.consumptionSum())
                                {
                                    projBudgetTransactionLine.parmSalesAmount(prodCalcTrans.salesPriceSum()* costControlTransCommittedCost.Qty / prodCalcTrans.consumptionSum());
                                }

                                projBudgetTransactionLine.parmCostAmount(CurrencyExchangeHelper::mstAmount(amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                                projBudgetTransactionLine.parmQty(costControlTransCommittedCost.Qty);
                                projBudgetTransaction = new ProjBudgetTransaction();
                                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                                projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
                                updateBudget = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                            }
                            else
                            {
                                updateBudget = this.reduceForecast(costControlTransCommittedCost,amount);
                            }

                            if (updateBudget)
                            {
                                if (prodCalcTrans.consumptionSum())
                                {
                                    costControlTransCommittedCost.Amount = prodCalcTrans.costPriceSum() * costControlTransCommittedCost.Qty / prodCalcTrans.consumptionSum();
                                }
                                costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(costControlTransCommittedCost.Amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                                costControlTransCommittedCost.insert();
                                created = true;
                            }
                            else
                            {
                                if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                                {
                                    info(strFmt("@SYS302873",_prodTable.ProjCategoryId, _prodTable.ProjId, _prodTable.ProdId));
                                }
                                else if (!useBudgeting)
                                {
                                    returnForecastCascade(costControlTransCommittedCostList, amountList);
                                    info(strFmt("@SYS118820", strLwr(enum2str(CommittedCostOrig::Production)),_prodTable.ProdId));
                                }
                                created=false;
                                return created;
                            }
                        }
                    }
                }
            }

            while select prodBOM where prodBOM.ProdId== _prodTable.ProdId
            notexists join prodCalcTrans
            where prodCalcTrans.TransRefId   == _prodTable.ProdId
                && prodCalcTrans.TransRefType == ProdTransRefType::Production
                && prodCalcTrans.IdRefTableId == tableNum(ProdBOM)
                && prodBOM.RecId              == prodCalcTrans.IdRefRecId
            {
                costControlTransCommittedCost.initFromProdBom(prodBOM);
                costControlTransCommittedCost.Qty=prodBOM.RemainBOMPhysical;

                costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

                costControlTransCommittedCost.ProjTransType = ProjTransType::Item;
                costControlTransCommittedCost.Open = NoYes::Yes;
                costControlTransCommittedCost.Reverse = NoYes::No;
                amount=prodBOM.ProjCostPrice * costControlTransCommittedCost.Qty;
                costControlTransCommittedCostList.addEnd(costControlTransCommittedCost);
                amountList.addEnd(amount);

                if (costControlTransCommittedCost.Qty != 0)
                {
                    // Reduce the forecast for every qualified forecast model

                    if (useBudgeting)
                    {
                        projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodBOM);
                        projBudgetTransactionLine.parmSalesAmount(prodBOM.ProjSalesPrice * costControlTransCommittedCost.Qty);
                        projBudgetTransactionLine.parmCostAmount(CurrencyExchangeHelper::mstAmount(amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                        projBudgetTransaction = new ProjBudgetTransaction();
                        projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                        projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
                        updateBudget = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                    }
                    else
                    {
                        updateBudget = this.reduceForecast(costControlTransCommittedCost, amount);
                    }

                    if (updateBudget)
                    {
                        costControlTransCommittedCost.Amount = amount;
                        costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(costControlTransCommittedCost.Amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                        costControlTransCommittedCost.insert();
                        created=true;
                    }
                    else
                    {
                        if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                        {
                            info(strFmt("@SYS302873",_prodTable.ProjCategoryId, _prodTable.ProjId, _prodTable.ProdId));
                        }
                        else if (!useBudgeting)
                        {
                            returnForecastCascade(costControlTransCommittedCostList,amountList);
                            info(strFmt("@SYS118820", strLwr(enum2str(CommittedCostOrig::Production)),_prodTable.ProdId));
                        }
                        created=false;
                        return created;
                    }
                }
            }
        }

        if (created)
        {
            info(strFmt("@SYS112811", strLwr(enum2str(CommittedCostOrig::Production)),_prodTable.ProdId));
        }

        return created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionFinishedItemMethod</Name>
				<Source><![CDATA[
    private boolean createProductionFinishedItemMethod(ProdTable _prodTable)
    {
        CostControlTransCommittedCost           costControlTransCommittedCost;
        boolean                                 created=false;
        ProjBudgetTransaction                   projBudgetTransaction;
        ProjBudgetTransactionLine               projBudgetTransactionLine;
        ProjBudgetTransactionManager            projBudgetTransactionManager;
        boolean                                 updateBudget = false;
        boolean                                 useBudgeting = false;

        // For the finished item method, the lineNum in costcontrol table is zero
        if (!CostControlTransCommittedCost::findOpenedByLineNum(CommittedCostOrig::Production, _prodTable.ProdId, 0))
        {
            costControlTransCommittedCost.clear();
            costControlTransCommittedCost.initFromProdTable(_prodTable);

            costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            costControlTransCommittedCost.Open = NoYes::Yes;
            costControlTransCommittedCost.ProjTransType = ProjTransType::Item;

            costControlTransCommittedCost.Qty = _prodTable.RemainInventPhysical + _prodTable.remainInventFinancial();
            if (!costControlTransCommittedCost.Qty == 0)
            {
                // Reduce the forecast for every qualified forecast model
                useBudgeting = ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting;

                if (useBudgeting)
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(_prodTable);
                    projBudgetTransactionLine.parmQty(costControlTransCommittedCost.Qty);
                    projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.Qty * this.unitCostProduction(_prodTable));
                    projBudgetTransactionLine.parmCostAmount(this.unitCostProduction(_prodTable));
                    projBudgetTransaction = new ProjBudgetTransaction();
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                    projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
                    updateBudget = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                }
                else
                {
                    updateBudget = this.reduceForecast(costControlTransCommittedCost,costControlTransCommittedCost.Qty * this.unitCostProduction(_prodTable));
                }

                if (updateBudget)
                {
                    costControlTransCommittedCost.Amount = costControlTransCommittedCost.Qty * this.unitCostProduction(_prodTable);
                    costControlTransCommittedCost.AmountMst = costControlTransCommittedCost.Amount;
                    costControlTransCommittedCost.insert();
                    info(strFmt("@SYS112811", strLwr(enum2str(CommittedCostOrig::Production)),_prodTable.ProdId));
                    created=true;
                }
                else
                {
                    if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                    {
                        info(strFmt("@SYS302873",_prodTable.ProjCategoryId, _prodTable.ProjId, _prodTable.ProdId));
                    }
                    else if (!useBudgeting)
                    {
                        this.returnForecast(costControlTransCommittedCost, costControlTransCommittedCost.Qty * this.unitCostProduction(_prodTable));
                        info(strFmt("@SYS118820", strLwr(enum2str(CommittedCostOrig::Production)),_prodTable.ProdId));
                    }
                }
            }
        }

        return created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrder</Name>
				<Source><![CDATA[
    private void createPurchaseOrder()
    {
        boolean                         created;
        PurchLine                       purchLine;
        InterCompanyPurchSalesReference interCompanyPurchSalesReference;
        SalesTable                      salesTable;
        SourceDocumentLineItem          sourceDocumentLineItem;

        setPrefix("@SYS104138");

        ttsbegin;

        while select purchLine
        where (purchLine.PurchaseType == PurchaseType::Purch
            || purchLine.PurchaseType == PurchaseType::ReturnItem)
            && purchLine.ProjId != ''
            && !purchLine.IsDeleted
        notexists join interCompanyPurchSalesReference
            where interCompanyPurchSalesReference.PurchId == purchLine.PurchId
                exists join salesTable
                    where salesTable.SalesId == interCompanyPurchSalesReference.SalesId
                        && salesTable.ProjId == purchLine.ProjId
        {

            if(FeatureStateProvider::isFeatureEnabled(ProjCommittedCostPRToPOFeature::instance()) &&
                (purchLine.PurchReqId != '' && purchLine.purchTable().DocumentState != VersioningDocumentState::Confirmed))
            {
                // Those purchline which are coming from PR and that are not in confirmed state should not be included here
                continue;
            }
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(purchLine);
            if (this.processSourceDocumentLineItem(sourceDocumentLineItem))
            {
                created = true;
            }
        }

        ttscommit;

        if (!created)
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the committed cost for the purchase requisitions.
    /// </summary>
    /// <remarks>
    /// The committed costs for project related purchase requisitions.
    /// </remarks>
    private void createPurchRequisition()
    {
        boolean                 created;
        PurchReqLine            purchReqLine;
        SourceDocumentLineItem  sourceDocumentLineItem;

        setPrefix("@SYS302171");

        ttsbegin;

        while select purchReqLine where purchReqLine.ProjId && purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(purchReqLine);
            if (this.processSourceDocumentLineItem(sourceDocumentLineItem))
            {
                created = true;
            }
        }

        ttscommit;

        if (!created)
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrder</Name>
				<Source><![CDATA[
    private void createSalesOrder()
    {
        SalesLine                               salesLine;
        CostControlTransCommittedCost           costControlTransCommittedCost;
        ProjBudgetTransaction                   projBudgetTransaction;
        ProjBudgetTransactionLine               projBudgetTransactionLine;
        ProjBudgetTransactionManager            projBudgetTransactionManager;
        boolean                                 created=false;
        boolean                                 updateBudget = false;
        boolean                                 useBudgeting = false;
        PriceCur                                costPrice;

        setPrefix("@SYS104141");
        ttsbegin;

        while select salesLine
        where (salesLine.SalesType == SalesType::Sales
            || salesLine.SalesType == SalesType::ReturnItem)
            && (salesLine.SalesStatus == SalesStatus::None
                || salesLine.SalesStatus == SalesStatus::Backorder
                || SalesLine.SalesStatus == SalesStatus::Delivered)
            && salesLine.ProjId != ''
        {
            costControlTransCommittedCost =CostControlTransCommittedCost::findOpenedByProjTransID(salesLine.ProjTransId);
            if (!costControlTransCommittedCost)
            {
                costControlTransCommittedCost.clear();
                costControlTransCommittedCost.initFromSalesLine(salesLine);

                costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                costControlTransCommittedCost.Open = NoYes::Yes;
                costControlTransCommittedCost.ProjTransType = ProjTransType::Item;

                costControlTransCommittedCost.Qty = salesLine.RemainSalesFinancial + salesLine.RemainSalesPhysical;

                costPrice =InventTable::find(salesLine.ItemId).costPcsPrice(salesLine.InventDimId,salesLine.inventDim());

                if (!costControlTransCommittedCost.Qty == 0)
                {
                    // Reduce the forecast for every qualified forecast model
                    useBudgeting = ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting;

                    if (useBudgeting)
                    {
                        projBudgetTransactionLine = ProjBudgetTransactionLine::construct(salesLine);
                        projBudgetTransactionLine.parmQty(costControlTransCommittedCost.Qty);
                        projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.Qty * costPrice);
                        projBudgetTransaction = new ProjBudgetTransaction();
                        projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                        projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(ProjBudgetTransaction::construct(salesLine));
                        updateBudget = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                    }
                    else
                    {
                        updateBudget = this.reduceForecast(costControlTransCommittedCost, costControlTransCommittedCost.Qty * costPrice);
                    }

                    if ( updateBudget )
                    {
                        costControlTransCommittedCost.Amount = costControlTransCommittedCost.Qty *  costPrice;
                        costControlTransCommittedCost.AmountMst = costControlTransCommittedCost.Amount;
                        costControlTransCommittedCost.insert();

                        info(strFmt("@SYS112810", strLwr(enum2str(CommittedCostOrig::SalesOrder)),salesLine.SalesId,num2str(salesLine.LineNum,1,2,1,0)));
                        created =true;
                    }
                    else
                    {
                        if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                        {
                            info(strFmt("@SYS302871", salesLine.ProjCategoryId, salesLine.ProjId,salesLine.SalesId));
                        }
                        else if (!useBudgeting)
                        {
                            this.returnForecast(costControlTransCommittedCost, costControlTransCommittedCost.Qty * costPrice);
                            info(strFmt("@SYS118723", strLwr(enum2str(CommittedCostOrig::SalesOrder)),salesLine.SalesId,num2str(salesLine.LineNum,1,2,1,0)));
                        }
                    }
                }
            }
        }

        if (!created)
        {
            info("@SYS113054");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTravelRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the committed cost for the travel requisitions.
    /// </summary>
    /// <remarks>
    ///    The committed costs for project related travel requisitions.
    /// </remarks>
    private void createTravelRequisition()
    {
        boolean                 created;
        TrvRequisitionLine      trvRequisitionLine;
        TrvRequisitionTable     trvRequisitionTable;
        SourceDocumentLineItem  sourceDocumentLineItem;

        setPrefix("@SYS342975");

        ttsbegin;

        while select trvRequisitionLine
            join RecId,ApprovalStatus from trvRequisitionTable
        where trvRequisitionLine.ProjTable != 0 &&
              trvRequisitionTable.RecId == trvRequisitionLine.TrvRequisitionTable &&
              trvRequisitionTable.ApprovalStatus == TrvRequisitionApprovalStatus::Approved
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(trvRequisitionLine);
            if (this.processSourceDocumentLineItem(sourceDocumentLineItem))
            {
                created = true;
            }
        }

        ttscommit;

        if (!created )
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoice</Name>
				<Source><![CDATA[
    private void createVendInvoice()
    {
        boolean                     created;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
        SourceDocumentLineItem      sourceDocumentLineItem;
        VendInvoiceInfoTable        vendInvoiceInfoTable;
        VendInvoiceJour             vendInvoiceJour;

        setPrefix("@SYS322728");

        ttsbegin;

        while select vendInvoiceInfoLine
			join RecId from vendInvoiceInfoLine_Project
				where vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId == vendInvoiceInfoLine.RecId
					exists join vendInvoiceInfoTable
                        where vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                            && vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                    notexists join vendInvoiceJour
                        where vendInvoiceJour.InvoiceId == vendInvoiceInfoTable.Num

        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceInfoLine);
            if (this.processSourceDocumentLineItem(sourceDocumentLineItem))
            {
                created = true;
            }
        }

        ttscommit;

        if (!created)
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimeSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the committed cost for the timesheet transactions.
    /// </summary>
    /// <remarks>
    /// The committed costs for project related timesheet transactions.
    /// </remarks>
    private void createTimeSheet()
    {
        boolean             created;
        TSTimesheetLine     tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetTrans    tsTimesheetTrans;
        TSTimesheetTable    tsTimeSheetTable;

        SourceDocumentLineItem  sourceDocumentLineItem;

        setPrefix("@Proj:CommittedCostsForTimesheetTransactions");

        ttsbegin;

        while select tsTimesheetTrans
        exists join tsTimesheetLineWeek
            where tsTimesheetLineWeek.RecId == tsTimesheetTrans.tsTimesheetLineWeek
        exists join tsTimesheetLine
            where tsTimesheetLine.RecId        == tsTimesheetLineWeek.tsTimesheetLine
                && tsTimesheetLine.TimesheetNbr == tsTimeSheetTable.TimesheetNbr
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(tsTimesheetTrans);
            if (this.processSourceDocumentLineItem(sourceDocumentLineItem))
            {
                created = true;
            }
        }

        ttscommit;

        if (!created)
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdvancedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the committed cost for the advanced journal transactions.
    /// </summary>
    /// <remarks>
    /// The committed costs for project advanced journal transactions.
    /// </remarks>
    private void createAdvancedJournal()
    {
        boolean             created;
        ProjAdvancedJournalLine advancedJournalLine;
        SourceDocumentLineItem  sourceDocumentLineItem;

        setPrefix("@Proj:CommittedCostsForAdvancedJournalTransactions");

        ttsbegin;

        while select advancedJournalLine
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(advancedJournalLine);
            if (this.processSourceDocumentLineItem(sourceDocumentLineItem))
            {
                created = true;
            }
        }

        ttscommit;

        if (!created)
        {
            info("@SYS113054");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be built by using the <c>Dialog</c> class or by using a class that is created in
    /// the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogGroup     dlgCommittedCostItem;

        dialog = super();

        if (!dontShowdialog)
        {
            dialog.addGroup("@SYS104134", dlgCommittedCostItem);

            dialogPurchRequisition      = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         purchRequisition, "@SYS114136","@SYS302171");
            dialogPurchaseOrder         = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         purchaseOrder,    "@SYS15812","@SYS104138");
            dialogItemRequirement       = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         itemRequirement , "@SYS84947","@SYS104139");
            dialogProduction            = dialog.addFieldValue(extendedTypeStr(ProjOptionProduction),    production,       "@SYS10657","@SYS104140");
            dialogSalesOrder            = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         salesOrder,       "@SYS19627","@SYS104141");
            dialogItemJournal           = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         itemJournal,      "@SYS81925","@SYS104142");
            dialogExpenseManagement     = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         expenseManagement,"@SYS101454","@SYS342976");
            dialogTravelRequisition     = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         travelRequisition,"@SYS302364","@SYS342975");
            dialogVendInvoice           = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         vendInvoice,      "@SYS3179","@SYS322728");
            dialogHourJournal           = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         hourJournal,      "@SYS59154","@SYS342974");
            dialogTimeSheet             = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         timeSheet,        "@SYS190484","@Proj:CommittedCostsForTimesheetTransactions");
            dialogAdvancedJournal       = dialog.addFieldValue(extendedTypeStr(ProjOptionSales),         advancedJournal,  "@Proj:ProjectAdvancedJournal","@Proj:CommittedCostsForAdvancedJournalTransactions");

            dialog.defaultButton(DialogDefaultButton::Cancel);
            this.updateDesign();
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastModelList</Name>
				<Source><![CDATA[
    public List getForecastModelList(ProjTransType _type)
    {
        // return the forecast model list whose auto forecast reduction is enabled in forecast model parameter
        // The reason to sort by reduction field and checkbudget field is: The first forecast models have more chance to not have enough budget to reduce. The roll back (return forecast) rate is optimized
        List modelList;
        container con;
        ForecastModel forecastModel;

        modelList=new List(Types::Container);

        switch (_type)
        {
            case ProjTransType::Hour:
            while select ModelId, ProjHourReduction, ProjCheckHourBudget from forecastModel
                order by ProjHourReduction desc, ProjCheckHourBudget desc
                where    forecastModel.Blocked == NoYes::No
                {
                    con=conNull();
                    con += forecastModel.ModelId;
                    con += forecastModel.ProjHourReduction;
                    con += forecastModel.ProjCheckHourBudget;
                    modelList.addEnd(con);
                }
                break;

            case ProjTransType::Item:
            while select ModelId, ProjItemReduction, ProjCheckItemBudget from forecastModel
                order by ProjItemReduction desc, ProjCheckItemBudget desc
                where forecastModel.Blocked == NoYes::No
                {
                    con=conNull();
                    con += forecastModel.ModelId;
                    con += forecastModel.ProjItemReduction;
                    con += forecastModel.ProjCheckItemBudget;
                    modelList.addEnd(con);
                }
                break;

            case ProjTransType::Cost:
            while select ModelId, ProjExpenseReduction, ProjCheckExpenseBudget from forecastModel
                order by ProjExpenseReduction desc, ProjCheckExpenseBudget desc
                where forecastModel.Blocked == NoYes::No
                {
                    con=conNull();
                    con += forecastModel.ModelId;
                    con += forecastModel.ProjExpenseReduction;
                    con += forecastModel.ProjCheckExpenseBudget;
                    modelList.addEnd(con);
                }
                break;
        }

        return modelList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (!dontShowdialog)
        {
            this.parmPurchRequisition(dialogPurchRequisition.value());
            this.parmPurchaseOrder(dialogPurchaseOrder.value());
            this.parmItemRequirement(dialogItemRequirement.value());
            this.parmProduction(dialogProduction.value());
            this.parmSalesOrder(dialogSalesOrder.value());
            this.parmItemJournal(dialogItemJournal.value());
            this.parmExpenseManagement(dialogExpenseManagement.value());
            this.parmTravelRequisition(dialogTravelRequisition.value());
            this.parmVendInvoice(dialogVendInvoice.value());
            this.parmHourJournal(dialogHourJournal.value());
            this.parmTimeSheet(dialogTimeSheet.value());
            this.parmAdvancedJournal(dialogAdvancedJournal.value());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret;

        ret =  super();

        hourForecastModelList       = this.getForecastModelList(ProjTransType::Hour);
        itemForecastModelList       = this.getForecastModelList(ProjTransType::Item);
        expenseForecastModelList    = this.getForecastModelList(ProjTransType::Cost);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>GetLast</c> method of the <c>SysLastValue</c> class. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        ProjParameters  projParameters = ProjParameters::find();

        super();

        purchRequisition = projParameters.TrackCommittedCostPurchaseRequisition;
        purchaseOrder = projParameters.TrackCommittedCostPurchaseOrder;
        itemRequirement = projParameters.TrackCommittedCostItemRequirement;
        production = projParameters.TrackCommittedCostProduction;
        salesOrder = projParameters.TrackCommittedCostSalesOrder;
        itemJournal = projParameters.TrackCommittedCostItemJournal;
        expenseManagement = projParameters.TrackCommittedCostExpenseManagement;
        travelRequisition = projParameters.TrackCommittedCostTravelRequisition;
        vendInvoice = projParameters.TrackCommittedCostVendInvoice;
        hourJournal = projParameters.TrackCommittedCostHourJournal;
        timeSheet = projParameters.TrackCommittedCostTimesheets;
        advancedJournal = projParameters.TrackCommittedCostAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDontShowBaseDialog</Name>
				<Source><![CDATA[
    public boolean parmDontShowBaseDialog(boolean _dontShow = dontShowdialog)
    {
        dontShowdialog = _dontShow;

        return dontShowdialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvancedJournal</Name>
				<Source><![CDATA[
    public NoYes parmAdvancedJournal(NoYes _advancedJournal = advancedJournal)
    {
        advancedJournal = _advancedJournal;

        return advancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenseManagement</Name>
				<Source><![CDATA[
    public NoYes parmExpenseManagement(NoYes _expenseManagement = expenseManagement)
    {
        expenseManagement = _expenseManagement;

        return expenseManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHourJournal</Name>
				<Source><![CDATA[
    public NoYes parmHourJournal(NoYes _hourJournal = hourJournal)
    {
        hourJournal = _hourJournal;

        return hourJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemJournal</Name>
				<Source><![CDATA[
    public NoYes parmItemJournal(NoYes _itemJournal = itemJournal)
    {
        itemJournal = _itemJournal;

        return itemJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRequirement</Name>
				<Source><![CDATA[
    public NoYes parmItemRequirement(NoYes _itemRequirement = itemRequirement)
    {
        itemRequirement = _itemRequirement;

        return itemRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduction</Name>
				<Source><![CDATA[
    public NoYes parmProduction(NoYes _production = production)
    {
        production = _production;

        return production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseOrder</Name>
				<Source><![CDATA[
    public NoYes parmPurchaseOrder(NoYes _purchaseOrder = purchaseOrder)
    {
        purchaseOrder = _purchaseOrder;

        return purchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRequisition</Name>
				<Source><![CDATA[
    public NoYes parmPurchRequisition(NoYes _purchRequisition = purchRequisition)
    {
        purchRequisition = _purchRequisition;

        return purchRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesOrder</Name>
				<Source><![CDATA[
    public NoYes parmSalesOrder(NoYes _salesOrder = salesOrder)
    {
        salesOrder = _salesOrder;

        return salesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTravelRequisition</Name>
				<Source><![CDATA[
    public NoYes parmTravelRequisition(NoYes _travelRequisition = travelRequisition)
    {
        travelRequisition = _travelRequisition;

        return travelRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoice</Name>
				<Source><![CDATA[
    public NoYes parmVendInvoice(NoYes _vendInvoice = vendInvoice)
    {
        vendInvoice = _vendInvoice;

        return vendInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeSheet</Name>
				<Source><![CDATA[
    public NoYes parmTimeSheet(NoYes _timeSheet = timeSheet)
    {
        timeSheet = _timeSheet;

        return timeSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocumentLineItem</Name>
				<Source><![CDATA[
    private boolean processSourceDocumentLineItem(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        CostControlTransCommittedCost           costControlTransCommittedCost;
        CostControlTransCommittedCost           costControlTransCommittedCostCheck;
        CostControlTransCommittedCost           costControlTransCommittedCostTransId;
        boolean                                 created;
        Map                                     projectCommitmentsMap;
        MapEnumerator                           mapEnumerator;
        ProjTransIdBase                         transactionId;
        RecId                                   sourceDocumentLineId;
        SelectableDataArea                      projectDataAreaId;
        ProjId                                  projectId;
        ProjCategoryId                          categoryId;
        smmActivityNumber                       activityNumber;
        LedgerDimensionAccount                  ledgerDimension;
        Qty                                     quantity;
        CurrencyCode                            transactionCostCurrency;
        AmountCur                               transactionCurrencyCostAmount;
        AmountMST                               accountingCurrencyCostAmount;
        CurrencyCode                            transactionSalesCurrency;
        AmountMST                               accountingCurrencySalesAmount;
        SourceDocument                          sourceDocument;
        SourceDocumentLineItemIProject          sourceDocumentLineItemIProject;
        SourceDocumentLineItemIProduct          sourceDocumentLineItemIProduct;
        SourceDocumentLineItemIInventory        sourceDocumentLineItemIInventory;
        DocumentNum                             documentNumber;
        LineNum                                 lineNum;
        ProjTransType                           projTransType;
        CommittedCostOrig                       committedCostOrig;
        CustVendAC                              vendAccount;
        ProjBudgetTransactionManager            projBudgetTransactionManager;
        ProjBudgetTransaction                   projBudgetTransaction;
        ProjBudgetTransactionLine               projBudgetTransactionLine;
        boolean                                 useBudgeting;
        boolean                                 budgetUpdate;
        SourceDocumentLineRecId                 sourceDocumentLineRecId;

        sourceDocumentLineRecId                 = _sourceDocumentLineItem.parmSourceDocumentLine().RecId;

        if (TrvExpTrans::findBySourceDocumentLine(sourceDocumentLineRecId))
        {
            select firstonly RecId
                from costControlTransCommittedCostCheck
                where costControlTransCommittedCostCheck.SourceDocumentLine == sourceDocumentLineRecId && 
                      costControlTransCommittedCostCheck.Open == NoYes::Yes;
        }
        else
        {
            select firstonly RecId
                from costControlTransCommittedCostCheck
                where costControlTransCommittedCostCheck.SourceDocumentLine == sourceDocumentLineRecId;
        }

        if (!costControlTransCommittedCostCheck)
        {
            projectCommitmentsMap = new Map(Types::String, Types::Container);
            ProjectCommitmentFacade::updateProjectCommitmentsMap(projectCommitmentsMap, _sourceDocumentLineItem);

            mapEnumerator = projectCommitmentsMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                [sourceDocumentLineId,
                projectDataAreaId,
                projectId,
                categoryId,
                activityNumber,
                ledgerDimension,
                quantity,
                transactionCostCurrency,
                transactionCurrencyCostAmount,
                accountingCurrencyCostAmount,
                transactionSalesCurrency,
                accountingCurrencySalesAmount] = mapEnumerator.currentValue();

                changecompany (projectDataAreaId)
                {
                    select firstonly ProjTransId
                    from costControlTransCommittedCostTransId
                    where costControlTransCommittedCostTransId.SourceDocumentLine == sourceDocumentLineRecId &&
                        costControlTransCommittedCostTransId.CurrencyCode == transactionCostCurrency &&
                        costControlTransCommittedCostTransId.LedgerDimension == ledgerDimension &&
                        costControlTransCommittedCostTransId.ProjId == projectId &&
                        costControlTransCommittedCostTransId.CategoryId == categoryId &&
                        costControlTransCommittedCostTransId.ActivityNumber == activityNumber;

                    transactionId = costControlTransCommittedCostTransId.ProjTransId;

                    if (!transactionId)
                    {
                        transactionId = ProjParameters::newTransId();
                    }

                    sourceDocument = _sourceDocumentLineItem.parmSourceDocument();
                    sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;
                    documentNumber = sourceDocument.parmDocumentNumber();

                    if (!documentNumber &&
                        _sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
                    {
                        VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(_sourceDocumentLineItem.parmSourceDocumentLine().RecId);
                        documentNumber = vendInvoiceInfoLine.vendInvoiceInfoTable().DocumentNum;
                    }

                    projTransType = ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem);
                    committedCostOrig = ProjectSourceDocumentLineItemHelper::committedCostOrig(_sourceDocumentLineItem);
                    lineNum = _sourceDocumentLineItem.parmLineNum();

                    if (!lineNum)
                    {
                        select maxof(LineNum) from costControlTransCommittedCost where costControlTransCommittedCost.CommittedCostOrig  == committedCostOrig &&
                                                                                       costControlTransCommittedCost.RefId              == documentNumber;
                        
                        lineNum = costControlTransCommittedCost.LineNum + 1;
                    }

                    vendAccount = ProjectSourceDocumentLineItemHelper::vendAccount(_sourceDocumentLineItem);

                    costControlTransCommittedCost.clear();
                    costControlTransCommittedCost.ProjTransId = transactionId;
                    costControlTransCommittedCost.SourceDocumentLine = sourceDocumentLineRecId;
                    costControlTransCommittedCost.ProjId = projectId;
                    costControlTransCommittedCost.ProjType = ProjTable::find(costControlTransCommittedCost.ProjId).Type;
                    costControlTransCommittedCost.CategoryId = categoryId;
                    costControlTransCommittedCost.ProjTransType = projTransType;
                    costControlTransCommittedCost.ActivityNumber = activityNumber;
                    costControlTransCommittedCost.LedgerDimension = ledgerDimension;
                    costControlTransCommittedCost.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension);
                    costControlTransCommittedCost.CurrencyCode = transactionCostCurrency;

                    costControlTransCommittedCost.CommittedCostOrig = committedCostOrig;
                    costControlTransCommittedCost.RefId = documentNumber;
                    costControlTransCommittedCost.LineNum = lineNum;
                    if (projTransType == ProjTransType::Item)
                    {
                        if (!(_sourceDocumentLineItem is SourceDocumentLineItemIProduct))
                        {
                            throw error(Error::wrongUseOfFunction(funcName()));
                        }

                        sourceDocumentLineItemIProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;

                        if (_sourceDocumentLineItem is SourceDocumentLineItemIInventory)
                        {
                            sourceDocumentLineItemIInventory = _sourceDocumentLineItem as SourceDocumentLineItemIInventory;
                            costControlTransCommittedCost.InventTransId = sourceDocumentLineItemIInventory.parmLotId();
                        }

                        costControlTransCommittedCost.EmplItemId = sourceDocumentLineItemIProduct.parmItemId();
                    }
                    else
                    {
                        costControlTransCommittedCost.Resource = sourceDocumentLineItemIProject.parmProjectResourceRecId();
                        costControlTransCommittedCost.ResourceCategory = sourceDocumentLineItemIProject.parmProjectResourceCategoryRecId();
                    }
                    costControlTransCommittedCost.VendAccount = vendAccount;

                    costControlTransCommittedCost.Qty = quantity;
                    costControlTransCommittedCost.CommittedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

                    costControlTransCommittedCost.Open = NoYes::Yes;
                    costControlTransCommittedCost.Reverse = NoYes::No;

                    if (!costControlTransCommittedCost.Qty == 0)
                    {
                        useBudgeting = ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting;

                        if (useBudgeting)
                        {
                            projBudgetTransaction = new ProjBudgetTransaction();

                            projBudgetTransactionLine = ProjBudgetTransactionLine_Virtual::construct(
                                                        projTransType,
                                                        costControlTransCommittedCost.CommittedDate,
                                                        costControlTransCommittedCost.ProjTransId,
                                                        costControlTransCommittedCost.ProjId,
                                                        costControlTransCommittedCost.CategoryId,
                                                        costControlTransCommittedCost.Qty,
                                                        costControlTransCommittedCost.CurrencyCode,
                                                        transactionCurrencyCostAmount,
                                                        Ledger::accountingCurrency(),
                                                        accountingCurrencySalesAmount,
                                                        costControlTransCommittedCost.SourceDocumentLine,
                                                        costControlTransCommittedCost.ActivityNumber,
                                                        sourceDocumentLineItemIProject.parmProjectLineProperty());

                            projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);

                            projBudgetTransactionManager =  ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);
                            // Do not suppress messages since this code is being executed as part of a menu item and should display any warnings/error in the notification center.
                            projBudgetTransactionManager.parmSupressMessages(false);
                            budgetUpdate = projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement);
                        }
                        else
                        {
                            budgetUpdate = this.reduceForecast(costControlTransCommittedCost, transactionCurrencyCostAmount);
                            // Reduce the forecast for every qualified forecast model
                        }
                        if (budgetUpdate)
                        {
                            costControlTransCommittedCost.Amount = transactionCurrencyCostAmount;
                            costControlTransCommittedCost.AmountMst = accountingCurrencyCostAmount;
                            costControlTransCommittedCost.insert();

                            info(strFmt("@SYS112810", strLwr(enum2str(committedCostOrig)), documentNumber, num2str(lineNum, 1, 2, 1, 0)));
                            created = true;
                        }
                        else
                        {
                            if (useBudgeting && projBudgetTransactionManager.parmIsBudgetDefined())
                            {
                                info(strFmt("@SYS118723", strLwr(enum2str(committedCostOrig)), documentNumber, num2str(lineNum, 1, 2, 1, 0)));
                            }
                            else if (!useBudgeting)
                            {
                                this.returnForecast(costControlTransCommittedCost, transactionCurrencyCostAmount);
                                info(strFmt("@SYS118723", strLwr(enum2str(committedCostOrig)), documentNumber, num2str(lineNum, 1, 2, 1, 0)));
                            }
                        }
                    }
                }
            }
        }

        return created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceForecast</Name>
				<Source><![CDATA[
    public boolean reduceForecast(CostControlTransCommittedCost  _committedCostRec, Amount _amount)
    {
        // Return false if the forecast model enablethe forecast reduction and check remaining budget, but the budget is not enough to reduce
        // Otherwise return true

        ListEnumerator      listEnum;
        ForecastModelId     forecastModelId;
        boolean             isEnoughBudget =true;
        boolean             isReduceForecast;
        boolean             isCheckRemainBudgetOnForecastModel;
        boolean             isCheckRemainBudgetOnProject;
        List                forecastModelList;
        ProjTransType       transType;
        ProjForecastReduce  projForecastReduce;
        container           con;

        projForecastReduce= ProjForecastReduce::newCostControl(_committedCostRec, _committedCostRec.Qty, _amount);

        transType=_committedCostRec.ProjTransType;
        isCheckRemainBudgetOnProject = ProjTable::find(_committedCostRec.ProjId).CheckBudget;
        forecastModelList=this.getForecastModelList(transType);

        listEnum=forecastModelList.getEnumerator();
        listEnum.reset();

        while (listEnum.moveNext())
        {
            con=listEnum.current();
            forecastModelId= conPeek(con,1);
            isReduceForecast = conPeek(con,2);
            isCheckRemainBudgetOnForecastModel = conPeek(con,3);

            if (isReduceForecast )
            {
                if (isCheckRemainBudgetOnForecastModel && isCheckRemainBudgetOnProject)
                {
                    isEnoughBudget=projForecastReduce.reduceForecast(_committedCostRec.Qty,_amount,forecastModelId);
                    if (!isEnoughBudget)
                    {
                        warning(strFmt("@SYS118221",forecastModelId));
                        return false;
                    }
                }
                else
                {
                    projForecastReduce.reduceForecast(_committedCostRec.Qty,_amount,forecastModelId);
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnForecast</Name>
				<Source><![CDATA[
    public boolean returnForecast(CostControlTransCommittedCost  _committedCostRec, Amount _amount)
    {
        ProjForecastReduce  projForecastReduce;

        projForecastReduce= ProjForecastReduce::newForecastReturn( _committedCostRec.ProjTransId,
                                                                   _committedCostRec.ProjTransType,
                                                                   -_committedCostRec.Qty,
                                                                   -_amount);
        projForecastReduce.run();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the task of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            this.createCommittedCosts();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            // Logging the event for telemetry
            RunTimeEventSource::EventWriteInfoLogMark(Exception::Warning, "@Proj:CommittedCostGenerateErrorMessage");

            // Since this is used in the menu item, we don't want to throw the exception but just silently return.
            // The individual warning/error messages would have been added to the notification center before this point.
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c> method
    /// and return false if those tasks must run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitCostProduction</Name>
				<Source><![CDATA[
    private PriceCur unitCostProduction(ProdTable prodTable)
    {
        PriceCur        retPrice = 0;
        ProdCalcTrans   prodCalcTrans;

        select prodCalcTrans
        where prodCalcTrans.IdRefTableId    == prodTable.TableId
           && prodCalcTrans.IdRefRecId      == prodTable.RecId
           && prodCalcTrans.CalcType == ItemCalcType::Production;

        if (prodCalcTrans)
        {
            retPrice=prodCalcTrans.costPricePcs();
        }

        return retPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    private void updateDesign()
    {
        ProjParameters  projParameters = ProjParameters::find();

        if (!projParameters.TrackCommittedCostPurchaseRequisition)
        {
            dialogPurchRequisition.enabled(false);
            dialogPurchRequisition.value(false);
            purchRequisition = false;
        }

        if (!projParameters.TrackCommittedCostPurchaseOrder)
        {
            dialogPurchaseOrder.enabled(false);
            dialogPurchaseOrder.value(false);
            purchaseOrder = false;
        }

        if (!projParameters.TrackCommittedCostItemRequirement)
        {
            dialogItemRequirement.enabled(false);
            dialogItemRequirement.value(false);
            itemRequirement = false;
        }

        if (!projParameters.TrackCommittedCostProduction)
        {
            dialogProduction.enabled(false);
            dialogProduction.value(false);
            production = false;
        }

        if (!projParameters.TrackCommittedCostSalesOrder)
        {
            dialogSalesOrder.enabled(false);
            dialogSalesOrder.value(false);
            salesOrder = false;
        }

        if (!projParameters.TrackCommittedCostItemJournal)
        {
            dialogItemJournal.enabled(false);
            dialogItemJournal.value(false);
            itemJournal = false;
        }

        if (!projParameters.TrackCommittedCostExpenseManagement)
        {
            dialogExpenseManagement.enabled(false);
            dialogExpenseManagement.value(false);
            expenseManagement = false;
        }

        if (!projParameters.TrackCommittedCostTravelRequisition)
        {
            dialogTravelRequisition.enabled(false);
            dialogTravelRequisition.value(false);
            travelRequisition = false;
        }

        if (!projParameters.TrackCommittedCostVendInvoice)
        {
            dialogVendInvoice.enabled(false);
            dialogVendInvoice.value(false);
            vendInvoice = false;
        }

        if (!projParameters.TrackCommittedCostHourJournal)
        {
            dialogHourJournal.enabled(false);
            dialogHourJournal.value(false);
            hourJournal = false;
        }

        if (!projParameters.TrackCommittedCostTimesheets)
        {
            dialogTimeSheet.enabled(false);
            dialogTimeSheet.value(false);
            timeSheet = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;

        if (!(purchRequisition  ||
              purchaseOrder     || 
              itemRequirement   || 
              production        || 
              salesOrder        || 
              itemJournal       || 
              vendInvoice       ||  
              expenseManagement || 
              travelRequisition || 
              hourJournal       || 
              timeSheet         || 
              advancedJournal))
        {
            // commitment type not selected
            ret = checkFailed("@SYS105592");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjCommittedCostGenerate construct()
    {
        return new ProjCommittedCostGenerate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS105978";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ProjCommittedCostGenerate projCommittedCostGenerate = ProjCommittedCostGenerate::construct();

        projCommittedCostGenerate.getLast();
        projCommittedCostGenerate.init();

        if (!projCommittedCostGenerate.prompt())
        {
            return;
        }

        projCommittedCostGenerate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>