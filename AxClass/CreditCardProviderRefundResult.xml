<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardProviderRefundResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CreditCardProviderCaptureResult</c> stores result from a credit card refund operation.
/// </summary>
class CreditCardProviderRefundResult extends CreditCardProviderResult
{
    CreditCardRefundResult creditCardRefundResult;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object from an array of properties.
    /// </summary>
    /// <param name="_properties">
    /// An array of properties.
    /// </param>
    protected void init(Microsoft.Dynamics.Retail.PaymentSDK.Portable.PaymentProperty[] _properties)
    {
        str ns = Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_RefundResponse();
        CreditCardPaymentProperty property;

        super(_properties);

        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_UniqueCardId());
        this.parmCreditCardUniqueCardId(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_Last4Digits());
        this.parmCreditCardNumber(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_CardType());
        this.parmCreditCardTypeName(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_ApprovedAmount());
        this.parmTransactionAmount(property ? property.parmDecimalValue() : 0);
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_ProviderTransactionId());
        this.parmAuthorization(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_RefundResult());
        this.parmRefundResult(property ? CreditCardProviderRefundResult::getRefundResult(property.parmStringValue()) : CreditCardRefundResult::None);
        this.parmAvsResult(CreditCardAddressVerificationResult::None);
        this.parmAvsDetail(CreditCardMSAVSDetailCode::None);
        this.parmCvcResult(CreditCardMSCVCResultCode::Unknown);
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_PaymentTrackingId());
        this.parmMCRPaymentTrackingId(property ? property.parmStringValue() : '');

        if (EnhancedWalletSupportAndPaymentsImprovementFeature::isEnabled())
        {
            property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_ApprovalCode());
            this.parmApprovalCode(property ? property.parmStringValue() : '');

            property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_PaymentReference());
            this.parmProcessorReference(property ? property.parmStringValue() : '');

            property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.RefundResponseProperties::get_PaymentMethodName());
            this.parmProcessorPayment(property ? property.parmStringValue() : '');
        }

        this.parmResultOK(this.parmRefundResult() == CreditCardRefundResult::Success);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefundResult</Name>
				<Source><![CDATA[
    public CreditCardRefundResult parmRefundResult(CreditCardRefundResult _value = creditCardRefundResult)
    {
        creditCardRefundResult = _value;
        return creditCardRefundResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a result from a response object.
    /// </summary>
    /// <param name="_response">
    /// A response.
    /// </param>
    /// <param name="_amountCur">
    /// The amount captured.
    /// </param>
    /// <returns>
    /// A result.
    /// </returns>
    public static CreditCardProviderRefundResult constructFromResponse(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Response _response, AmountCur _amountCur)
    {
        CreditCardProviderRefundResult result = new CreditCardProviderRefundResult();
        result.init(_response.get_Properties());
        result.parmTransactionAmount(-1 * _amountCur);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a result from a XML string.
    /// </summary>
    /// <param name="_xmlString">
    /// A XML string.
    /// </param>
    /// <param name="_amountCur">
    /// The amount captured.
    /// </param>
    /// <returns>
    /// A result.
    /// </returns>
    public static CreditCardProviderRefundResult constructFromXmlString(str _xmlString, AmountCur _amountCur)
    {
        CreditCardProviderRefundResult result = new CreditCardProviderRefundResult();
        result.init(Microsoft.Dynamics.Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(_xmlString));
        result.parmTransactionAmount(-1 * _amountCur);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefundResult</Name>
				<Source><![CDATA[
    private static CreditCardRefundResult getRefundResult(str _code)
    {
        str toStr(Microsoft.Dynamics.Retail.PaymentSDK.Portable.RefundResult _value)
        {
            str s = System.Convert::ToString(_value);

            return s;
        }

        if (_code == toStr(Microsoft.Dynamics.Retail.PaymentSDK.Portable.RefundResult::None))
            return CreditCardRefundResult::None;
        else if (_code == toStr(Microsoft.Dynamics.Retail.PaymentSDK.Portable.RefundResult::Success))
            return CreditCardRefundResult::Success;
        else if (_code == toStr(Microsoft.Dynamics.Retail.PaymentSDK.Portable.RefundResult::Failure))
            return CreditCardRefundResult::Failure;
        // *************************************************
        // TO DO: remove this when Martin maps it to success
        // *************************************************
        else if (_code == 'QueuedForBatch')
            return CreditCardRefundResult::Success;

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>