<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerParametersEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles <c>LedgerParamters</c> event related to RU country/region.
/// </summary>
public class LedgerParametersEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LedgerParameters_onModifiedField</Name>
				<Source><![CDATA[
    // <GEEU>
    /// <summary>
    /// Handles onModifiedField event for <c>LedgerParameters</c> table.
    /// </summary>
    /// <param name="sender">The <c>LedgerParameters</c> table.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(LedgerParameters), DataEventType::ModifiedField)]
    public static void LedgerParameters_onModifiedField(Common sender, DataEventArgs e)
    {
        const str paragraph = '\n\n';

        ModifyFieldEventArgs args = e;
        LedgerParameters ledgerParameters = sender as LedgerParameters;

        switch (args.parmFieldId())
        {
            case fieldNum(LedgerParameters, ExchRateDiffCalcType_W):
                if (ledgerParameters.ExchRateDiffCalcType_W == ExchRateDiffCalcType_W::Standard)
                {
                    ledgerParameters.AdvanceAdjustment_W = false;
                    LedgerCurrencyParameters_RU::updateExchRateDiffExtendedSetup(false);
                }
                else
                {
                    LedgerCurrencyParameters_RU::updateExchRateDiffExtendedSetup(true);
                }
                break;

            case fieldNum(LedgerParameters, IsBudgetReservationEnabled_PSN):
                if (ledgerParameters.IsBudgetReservationEnabled_PSN == NoYes::Yes)
                {
                    ledgerParameters.IsEncumbranceProcessEnabled = NoYes::Yes;
                    ledgerParameters.IsPreEncumbranceProcessEnabled = NoYes::Yes;

                    info("@Budgeting_BudgetReservationPS:BudgetReservationsRecordEncumbrancesInfolog");
                    info("@Budgeting_BudgetReservationPS:BudgetReservationsIncludeEncumbrancesInfolog");
                }
                else if (Box::yesNo("@Budgeting_BudgetReservationPS:BudgetReservationsCancelEncumbrancesInfolog" + paragraph + "@SYS73804", DialogButton::No) == DialogButton::No)
                {
                    ledgerParameters.IsBudgetReservationEnabled_PSN = NoYes::Yes;
                }
                break;

           case fieldNum(LedgerParameters, IsEncumbranceProcessEnabled):
                if (PublicSectorUtils::isBudgetReservationEnabled())
                {
                    if (ledgerParameters.IsEncumbranceProcessEnabled == NoYes::Yes)
                    {
                        info("@Budgeting_BudgetReservationPS:PurchaseOrdersRecordEncumbrancesInfolog");
                    }
                    else if (Box::yesNo("@Budgeting_BudgetReservationPS:PurchaseOrdersCancelEncumbrancesInfolog" + paragraph + "@SYS73804", DialogButton::No) == DialogButton::No)
                    {
                        ledgerParameters.IsEncumbranceProcessEnabled = NoYes::Yes;
                    }
                }
                break;

            case fieldNum(LedgerParameters, IsPreEncumbranceProcessEnabled):
                if (PublicSectorUtils::isBudgetReservationEnabled())
                {
                    if (ledgerParameters.IsPreEncumbranceProcessEnabled == NoYes::Yes)
                    {
                        ledgerParameters.IsEncumbranceProcessEnabled = NoYes::Yes;

                        info("@Budgeting_BudgetReservationPS:PurchaseRequisitionsRecordEncumbrancesInfolog");
                    }
                    else if (Box::yesNo("@Budgeting_BudgetReservationPS:PurchaseRequisitionsCancelEncumbrancesInfolog" + paragraph + "@SYS73804", DialogButton::No) == DialogButton::No)
                    {
                        ledgerParameters.IsPreEncumbranceProcessEnabled = NoYes::Yes;
                    }
                }
                break;

            case fieldNum(LedgerParameters, JournalizingDefinitionEnableValue):
                if (PublicSectorUtils::isBudgetReservationEnabled())
                {
                    if (ledgerParameters.JournalizingDefinitionEnableValue == NoYes::Yes && Box::yesNo("@Budgeting_BudgetReservationPS:UsePostingDefinitionsForAllTransactionTypes" + paragraph + "@SYS73804", DialogButton::No) == DialogButton::No)
                    {
                        ledgerParameters.JournalizingDefinitionEnableValue = NoYes::No;
                    }
                    else if (ledgerParameters.JournalizingDefinitionEnableValue == NoYes::No && Box::yesNo("@Budgeting_BudgetReservationPS:ClearUsePostingDefinitionCheckboxMessage" + paragraph + "@SYS73804", DialogButton::No) == DialogButton::No)
                    {
                        ledgerParameters.JournalizingDefinitionEnableValue = NoYes::Yes;
                    }

                    if (ledgerParameters.JournalizingDefinitionEnableValue == NoYes::No)
                    {
                        ledgerParameters.IsBudgetReservationEnabled_PSN = NoYes::No;
                    }
                }
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerParameters_onValidatingField</Name>
				<Source><![CDATA[
    // </GEEU>

    /// <summary>
    /// Handles onValidatedField event for <c>LedgerParameters</c> table.
    /// </summary>
    /// <param name="sender">The <c>LedgerParameters</c> table.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(LedgerParameters), DataEventType::ValidatingField)]
    public static void LedgerParameters_onValidatingField(Common sender, DataEventArgs e)
    {
        ValidateFieldEventArgs ve = e;
        boolean isValid = true;
        PurchTable purchTable;
        DialogButton selectedButton;
        LedgerParameters ledgerParameters = sender as LedgerParameters;

        if (ve.parmFieldId() == fieldNum(LedgerParameters, IsEncumbranceProcessEnabled))
        {
            if (!PublicSectorUtils::isBudgetReservationEnabled())
            {
                select firstonly RecId from purchTable;

                if (purchTable.RecId != 0)
                {
                    // Only validate if the value of the field has changed
                    if (hasGUI() && ledgerParameters.IsEncumbranceProcessEnabled != ledgerParameters.orig().IsEncumbranceProcessEnabled)
                    {
                        if (ledgerParameters.IsEncumbranceProcessEnabled == NoYes::Yes)
                        {
                            selectedButton = Box::yesNo("@SYS313371", DialogButton::Yes,"@SYS313370");
                            if (selectedButton == DialogButton::No)
                            {
                                ledgerParameters.IsEncumbranceProcessEnabled = NoYes::No;
                            }
                        }
                        else
                        {
                            selectedButton = Box::okCancel("@SYS313373", DialogButton::Ok,"@SYS313372");
                            if (selectedButton == DialogButton::Cancel)
                            {
                                ledgerParameters.IsEncumbranceProcessEnabled = NoYes::Yes;
                            }
                        }
                    }
                }
            }
        }
        // <GEEU>
        else if (ve.parmFieldId() == fieldNum(LedgerParameters, vatRefundingMethod_RU))
        {
            if (ledgerParameters.vatRefundingMethod_RU == RDeferralsVATRefundingMethod::Proportional &&  VendParameters::find().VatProcessGroupBy_RU == NoYes::No)
            {
                isValid = checkFailed("@GLS114363");
            }
        }
        // </GEEU>
        ve.parmValidateResult(isValid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerParameters_onValidatingFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles onValidatedFieldValue event for <c>LedgerParameters</c> table.
    /// </summary>
    /// <param name="sender">The <c>LedgerParameters</c> table.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(LedgerParameters), DataEventType::ValidatingFieldValue)]
    public static void LedgerParameters_onValidatingFieldValue(Common sender, DataEventArgs e)
    {
        ValidateFieldValueEventArgs ve = e;
        boolean isValid = true;
        LedgerParameters ledgerParameters = sender as LedgerParameters;
        // <GCN>
        #isoCountryRegionCodes
        // </GCN>

        // <GCN>
        if (ve.parmFieldName() == fieldStr(LedgerParameters, ChineseVoucher_CN)
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]))
        {
            if ((select firstonly RecId from LedgerJournalTrans
                    where LedgerJournalTrans.LedgerVoucherType_CN != 0
                        || LedgerJournalTrans.Voucher_CN != '').RecId != 0)
            {
                // The general journal needs to be empty in order to modify the setup for the Chinese voucher system.
                isValid = checkFailed("@GLS54497");
            }
            ve.parmValidateResult(isValid);
        }
        // </GCN>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>