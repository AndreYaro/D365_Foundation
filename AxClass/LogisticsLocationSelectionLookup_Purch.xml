<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationSelectionLookup_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LogisticsLocationSelectionLookup_Purch extends LogisticsLocationSelectionLookup
{
    InventSiteId inventSiteId;
    InventLocationId inventLocationId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query for the <c>PurchTable</c> table lookup.
    /// </summary>
    public void buildQuery()
    {
        Query myQuery;
        QueryBuildDataSource qbd, qbdLogisticsLocation;
        QueryBuildRange qbr;

        myQuery = new Query();

        if (this.parmReturnLocation())
        {
            qbdLogisticsLocation = myQuery.addDataSource(tableNum(LogisticsLocation));
            qbd = qbdLogisticsLocation.addDataSource(tableNum(LogisticsPostalAddress));
            qbd.joinMode(JoinMode::InnerJoin);
            qbd.relations(true);
        }
        else
        {
            qbd = myQuery.addDataSource(tableNum(LogisticsPostalAddress));
            qbdLogisticsLocation = qbd.addDataSource(tableNum(LogisticsLocation));
            qbdLogisticsLocation.joinMode(JoinMode::InnerJoin);
            qbdLogisticsLocation.relations(true);
        }

        qbd = qbdLogisticsLocation.addDataSource(tableNum(LogisticsLESiteWarehouseLocation));
        qbd.joinMode(JoinMode::ExistsJoin);
        qbd.addLink(fieldNum(LogisticsLocation, RecId), fieldNum(LogisticsLESiteWarehouseLocation, Location));

        // Entities range
        qbr = qbd.addRange(fieldNum(LogisticsLESiteWarehouseLocation, Entity));
        qbr.value(this.entityRange());
        qbr.status(RangeStatus::Hidden);

        // Roles range
        qbr = qbd.addRange(fieldNum(LogisticsLESiteWarehouseLocation, LocationRole));
        qbr.value(
            strFmt('((%1 == %2) || (%3 == 1))',
                fieldId2name(tableNum(LogisticsLESiteWarehouseLocation), fieldNum(LogisticsLESiteWarehouseLocation, LocationRole)),
                this.rolesRange(),
                fieldId2name(tableNum(LogisticsLESiteWarehouseLocation), fieldNum(LogisticsLESiteWarehouseLocation, IsPrimary))));
        qbr.status(RangeStatus::Hidden);

        this.parmQuery(myQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityRange</Name>
				<Source><![CDATA[
    public str entityRange()
    {
        str entityRange;
        InventSite site;
        InventLocation warehouse;

        if (inventSiteId)
        {
            site = InventSite::find(inventSiteId);
            entityRange = strFmt('((Entity == %1) && (unionAllBranchId == %2))', site.RecId,
                LogisticsLESiteWarehouseLocation::entityTableId2uaBranchId(site.TableId));
        }

        if (inventLocationId)
        {
            if (entityRange)
            {
                entityRange += ' || ';
            }
            warehouse = InventLocation::find(inventLocationId);
            entityRange += strFmt('((Entity == %1) && (unionAllBranchId == %2))', warehouse.RecId,
                LogisticsLESiteWarehouseLocation::entityTableId2uaBranchId(warehouse.TableId));
        }

        // Entity is current CompanyInfo
        if (entity)
        {
            if (entityRange)
            {
                entityRange += ' || ';
            }
            entityRange += strFmt('((Entity == %1) && (unionAllBranchId == %2))', entity.RecId,
                LogisticsLESiteWarehouseLocation::entityTableId2uaBranchId(tableNum(CompanyInfo)));
        }

        if (entityRange)
        {
            entityRange = strFmt('(%1)', entityRange);
        }
        return entityRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _siteId = inventSiteId)
    {
        inventSiteId = _siteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLookupBufferAddressRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>AddressRefTableId</c> and <c>AddressRefRecId</c> fields on the calling buffer.
    /// </summary>
    /// <param name="_lookupResult">
    /// The record that was selected in the look up.
    /// </param>
    protected void setLookupBufferAddressRef(Common _lookupResult)
    {
        SysDictTable dictTable;
        SysDictField dictFieldRefTableId, dictFieldRefRecId;
        LogisticsLESiteWarehouseLocation entityLocation;
        LogisticsLocationRecId locationRecId;

        Common lookupBuffer = this.parmCallingControl().dataSourceObject().cursor();

        dictTable = new SysDictTable(lookupBuffer.TableId);
        dictFieldRefTableId = new SysDictField(lookupBuffer.TableId, dictTable.fieldName2Id(AddressRefTableId));
        dictFieldRefRecId = new SysDictField(lookupBuffer.TableId, dictTable.fieldName2Id(AddressRefRecId));

        // Verify that the fields exist
        if (!dictFieldRefTableId || !dictFieldRefRecId)
        {
            return;
        }

        // Find the owner of the address based on the _lookupResult
        if (this.parmReturnLocation())
        {
            // _lookupResult is LogisticsLocation
            locationRecId = _lookupResult.RecId;
        }
        else
        {
            // _lookupResult is LogisticsPostalAddress
            locationRecId = _lookupResult.(fieldNum(LogisticsPostalAddress, Location));
        }

        select Location, Entity, UnionAllBranchId from  entityLocation
        where entityLocation.Location == locationRecId;

        lookupBuffer.(dictFieldRefTableId.id()) = entityLocation.uaBranchId2EntityTableId();
        lookupBuffer.(dictFieldRefRecId.id()) = entityLocation.Entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LogisticsLocationSelectionLookup_Purch construct()
    {
        return new LogisticsLocationSelectionLookup_Purch(CompanyInfo::find());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static LogisticsLocationSelectionLookup_Purch newParameters(FormReferenceControl _callingControl)
    {
        LogisticsLocationSelectionLookup_Purch lookup = LogisticsLocationSelectionLookup_Purch::construct();

        lookup.parmCallingControl(_callingControl);
        lookup.parmAllowAddAddress(false);
        lookup.parmAllowEnhancedSelect(false, null, CompanyInfo::find());
        lookup.parmUseLookupValue(true);
        // We default for this class
        lookup.parmReturnLocation(false);
        return lookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>