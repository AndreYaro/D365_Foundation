<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCalcVolumeVAT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCalcVolumeVAT extends CustVendCalcVolume
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accumCustInvoice</Name>
				<Source><![CDATA[
        void accumCustInvoice(CustInvoiceJour _custInvoiceJour)
    {
        ttsbegin;

        if (useCalculationBE)
        {
            select firstonly forupdate tmpCustVendVolume
            where tmpCustVendVolume.SalesPurch == SalesPurch::Sales &&
                  tmpCustVendVolume.EnterpriseNumber == this.custInvoiceJourEnterpriseNum(_custInvoiceJour);
        }
        else
        {
            select firstonly forupdate tmpCustVendVolume
            index hint TypeVATNumIdx
            where tmpCustVendVolume.SalesPurch == SalesPurch::Sales &&
                  tmpCustVendVolume.vatNum == this.custInvoiceJourVATNum(_custInvoiceJour);
        }

        this.custWriteRecord(_custInvoiceJour);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumProjInvoice</Name>
				<Source><![CDATA[
        void accumProjInvoice(ProjInvoiceJour _projInvoiceJour)
    {
        ttsbegin;
        if (useCalculationBE)
        {
            if (useJournalVATNum)
            {
                select firstonly forupdate tmpCustVendVolume
                where tmpCustVendVolume.SalesPurch == SalesPurch::Sales &&
                      tmpCustVendVolume.EnterpriseNumber == _projInvoiceJour.EnterpriseNumber;
            }
            else
            {
                select firstonly forupdate tmpCustVendVolume
                where tmpCustVendVolume.SalesPurch == SalesPurch::Sales &&
                    tmpCustVendVolume.EnterpriseNumber == CustTable::find(_projInvoiceJour.InvoiceAccount).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _projInvoiceJour.InvoiceDate);
            }
        }
        else
        {
            select firstonly forupdate tmpCustVendVolume
            index hint TypeVATNumIdx
            where tmpCustVendVolume.SalesPurch == SalesPurch::Sales &&
                  tmpCustVendVolume.vatNum == this.projInvoiceJourVATNum(_projInvoiceJour);
        }

        this.projWriteRecord(_projInvoiceJour);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumVendInvoice</Name>
				<Source><![CDATA[
        void accumVendInvoice(VendInvoiceJour _vendInvoiceJour)
    {
        ttsbegin;

        if (useCalculationBE)
        {
            select firstonly forupdate tmpCustVendVolume
            where tmpCustVendVolume.SalesPurch == SalesPurch::Purch &&
                  tmpCustVendVolume.EnterpriseNumber == this.vendInvoiceJourEnterpriseNum(_vendInvoiceJour);
        }
        else
        {
            select firstonly forupdate tmpCustVendVolume
            index hint TypeVATNumIdx
            where tmpCustVendVolume.SalesPurch == SalesPurch::Purch &&
                  tmpCustVendVolume.vatNum == this.vendInvoiceJourVATNum(_vendInvoiceJour);
        }

        this.vendWriteRecord(_vendInvoiceJour);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceQuery</Name>
				<Source><![CDATA[
        void custInvoiceQuery(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,

                          str _vatNum,
                          List _billingClassification = null,
                          NoYes _inclTransWithNoBillingClass = NoYes::No)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _vatNum,
                                                                        _billingClassification, _inclTransWithNoBillingClass);
        }
        else
        {
            super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _vatNum);
        }

        qCustVendVolume.query().dataSourceTable(tableNum(CustInvoiceJour)).addSortField(fieldNum(CustInvoiceJour,vatNum),SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
        Name name()
    {
        TaxVATNumTable taxVATNumTable;
        VATName vatName;

        vatName = TaxVATNumTable::name(tmpCustVendVolume.vatNum, tmpCustVendVolume.CountryRegionId);

        if (vatName)
        {
            return vatName;
        }

        if ((select count(RecId) from taxVATNumTable
                index hint TaxVATNumIdx
                where taxVATNumTable.vatNum == tmpCustVendVolume.vatNum).RecId == 1)
        {
            return (select firstonly Name from taxVATNumTable
                        index hint TaxVATNumIdx
                        where taxVATNumTable.vatNum == tmpCustVendVolume.vatNum).Name;
        }
        return vatName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceQuery</Name>
				<Source><![CDATA[
        void projInvoiceQuery(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,
                          str _vatNum)
    {
        super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _vatNum);

        if (useCalculationBE)
        {
            QueryBuildDataSource custInvoiceJoin_ds = qCustVendVolume.query().dataSourceTable(tableNum(ProjInvoiceJour)).addDataSource(tableNum(CustInvoiceJour));
            custInvoiceJoin_ds.fetchMode(QueryFetchMode::One2One);
            custInvoiceJoin_ds.joinMode(JoinMode::NoExistsJoin);
            custInvoiceJoin_ds.addLink(fieldNum(ProjInvoiceJour, LedgerVoucher), fieldNum(CustInvoiceJour, LedgerVoucher));
            custInvoiceJoin_ds.addLink(fieldNum(ProjInvoiceJour, InvoiceDate), fieldNum(CustInvoiceJour, InvoiceDate));
        }

        qCustVendVolume.query().dataSourceTable(tableNum(ProjInvoiceJour)).addSortField(fieldNum(ProjInvoiceJour,vatNum),SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceQuery</Name>
				<Source><![CDATA[
        void vendInvoiceQuery(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,
                          str _vatNum)
    {
        super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _vatNum);

        qCustVendVolume.query().dataSourceTable(tableNum(VendInvoiceJour)).addSortField(fieldNum(VendInvoiceJour,vatNum),SortOrder::Ascending);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>