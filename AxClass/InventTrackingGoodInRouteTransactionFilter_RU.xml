<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingGoodInRouteTransactionFilter_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingProdTransactionFilter</c> class provides filtering based on a production order for
///    the <see cref="InventTrans form"/> form.
/// </summary>
internal class InventTrackingGoodInRouteTransactionFilter_RU extends InventTrackingTraceFilter
{
    #define.CurrentVersion(1)

    private InventTransId inventTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillFilterTable</Name>
				<Source><![CDATA[
    protected void fillFilterTable()
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventTransTmpFilter    inventTransTmpFilter = filterTmp as InventTransTmpFilter;

        insert_recordset inventTransTmpFilter (InventTrans)
            select RecId from inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == inventTransId;

        InventTransTmpFilter  inventTransTmpFilterJoin;

        inventTransTmpFilterJoin.linkPhysicalTableInstance(inventTransTmpFilter);

        insert_recordset inventTransTmpFilter (InventTrans) 
            select RecId from inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOriginSales_RU
                        && inventTransOrigin.InventTransId == inventTransId
                notexists join inventTransTmpFilterJoin
                    where inventTransTmpFilterJoin.InventTrans == inventTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterTableType</Name>
				<Source><![CDATA[
    protected TableId filterTableType()
    {
        return tableNum(InventTransTmpFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, inventTransId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case #CurrentVersion:
                [version, inventTransId] = _packed;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTrackingGoodInRouteTransactionFilter_RU construct()
    {
        return new InventTrackingGoodInRouteTransactionFilter_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of <c>InventTrackingGoodInRouteTransactionFilter_RU</c> from a <c>InventTransId</c> buffer.
    /// </summary>
    /// <param name="_inventTransId">
    ///    A lot id.
    /// </param>
    /// <returns>
    ///   An instance of <c>InventTrackingGoodInRouteTransactionFilter_RU</c>.
    /// </returns>
    public static InventTrackingGoodInRouteTransactionFilter_RU newInventTransId(InventTransId _inventTransId)
    {
        InventTrackingGoodInRouteTransactionFilter_RU filter = InventTrackingGoodInRouteTransactionFilter_RU::construct();

        filter.parmInventTransId(_inventTransId);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>