<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingSourceExplorerFileExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AccountingSourceExplorerFileExport
{
    private static const System.String delimiter = ',';
    private static const System.String lineFeed = '\n';
    private static const System.String carriageReturn = '\r';
    private static const int64 ExcelRowLimit = 1048576;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AccountingSourceExplorerTmp accountingSourceExplorerTmp;

        Debug::assert(_args.record() is AccountingSourceExplorerTmp && _args.menuItemName() ==  menuItemActionStr(AccountingSourceExplorerFileExport));

        if (_args.record() && _args.menuItemName() == menuItemActionStr(AccountingSourceExplorerFileExport))
        {
            accountingSourceExplorerTmp = _args.record() as AccountingSourceExplorerTmp;
        }

        if (accountingSourceExplorerTmp)
        {
            if (_args.caller() && _args.callerName() == formStr(AccountingSourceExplorer))
            {
                AccountingSourceExplorerFileExport accountingSourceExplorerFileExport = new AccountingSourceExplorerFileExport();
                accountingSourceExplorerFileExport.exportAccountingSourceExplorerTmpToCSV( _args.caller());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportAccountingSourceExplorerTmpToCSV</Name>
				<Source><![CDATA[
    private void exportAccountingSourceExplorerTmpToCSV(FormRun _accountingSourceExplorerFormRun)
    {
        System.IO.FileStream fileStream;
        System.IO.StreamWriter streamWriter;

        str fileName = this.createFileName();

        str tempFileName;  

        try
        {
            tempFileName = System.IO.Path::GetTempFileName();

            fileStream = new System.IO.FileStream(tempFileName, System.IO.FileMode::Create);
            streamWriter = new System.IO.StreamWriter(fileStream, new System.Text.UTF8Encoding(true)); // for extended character sets encoding bom must be specified

            if (this.checkRowLimitAndSetInfolog(_accountingSourceExplorerFormRun))
            {
                this.writeAccountingSourceExplorerTmp(streamWriter, _accountingSourceExplorerFormRun);

                streamWriter.Flush();
                fileStream.Seek(0, System.IO.SeekOrigin::Begin);

                // research on datasource is required as running export causes accounting source explorer grid to clear out.
                FormDataSource accountingSourceExplorerTmpDataSource = _accountingSourceExplorerFormRun.dataSource(identifierStr(AccountingSourceExplorerTmp));
                accountingSourceExplorerTmpDataSource.research();

                DocuFileSave::saveFileAs(fileStream, fileName);
            }
        }
        catch
        {
            throw error(strFmt("@DataExpTool:ErrMsg_FileExportFailed_1", fileName));
        }
        finally
        {
            streamWriter.Dispose();
            fileStream.Dispose();
            System.IO.File::Delete(tempFileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupQueryRun</Name>
				<Source><![CDATA[
    private QueryRun setupQueryRun(FormRun _accountingSourceExplorerFormRun)
    {
        FormDataSource accountingSourceExplorerTmpDataSource = _accountingSourceExplorerFormRun.dataSource(identifierStr(AccountingSourceExplorerTmp));
        QueryRun qr = accountingSourceExplorerTmpDataSource.queryRun();

        qr.reset();

        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRowLimitAndSetInfolog</Name>
				<Source><![CDATA[
    private boolean checkRowLimitAndSetInfolog(FormRun _accountingSourceExplorerFormRun)
    {
        int numberOfRows = 0;
        QueryRun qr = this.setupQueryRun(_accountingSourceExplorerFormRun);

        while (qr.next())
        {
            numberOfRows+=1;
        }

        if (numberOfRows >= ExcelRowLimit)
        {
            infolog.add(Exception::Warning, "@SourceDocumentAccountingFramework:AccountingSourceExplorerExportRowLimitWarning");
            return false;
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAccountingSourceExplorerTmp</Name>
				<Source><![CDATA[
    private void writeAccountingSourceExplorerTmp(System.IO.StreamWriter _streamWriter, FormRun _accountingSourceExplorerFormRun)
    {
        AccountingSourceExplorerTmp accountingSourceExplorerTmp;
        
        FormStringControl  dimensionSetNameControl = _accountingSourceExplorerFormRun.control(_accountingSourceExplorerFormRun.controlId(formControlStr(AccountingSourceExplorer, DimensionSetName)));
        DimensionHierarchy dimensionHierarchy = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, dimensionSetNameControl.text());

        this.writeAccountingSourceExplorerTmpHeader(_streamWriter, dimensionHierarchy);

        QueryRun qr = this.setupQueryRun(_accountingSourceExplorerFormRun);

        while (qr.next())
        {
             //Get the fetched record.
            accountingSourceExplorerTmp = qr.get(tableNum(AccountingSourceExplorerTmp));
            this.writeAccountingSourceExplorerLine(_streamWriter, accountingSourceExplorerTmp, dimensionHierarchy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAccountingSourceExplorerTmpHeader</Name>
				<Source><![CDATA[
    private void writeAccountingSourceExplorerTmpHeader(System.IO.StreamWriter _streamWriter, DimensionHierarchy _dimensionHierarchy)
    {
        System.String headerLine = this.getAccountingSourceExplorerTmpFinancialDimensionHeader(_dimensionHierarchy);

        headerLine += fieldPName(AccountingSourceExplorerTmp, JournalNumber)                + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, AccountingDate)           + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, SubledgerVoucher)         + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, DocumentNumber)           + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, DocumentDate)             + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, PostingType)              + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, Text)                     + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, LedgerAccount)            + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, MainAccountId)            + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, MainAccountName)          + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, AccountingCurrencyAmount) + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, ReportingCurrencyAmount)  + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, TransactionCurrencyAmount)+ delimiter
                        + fieldPName(AccountingSourceExplorerTmp, TransactionCurrencyCode)  + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, MonetaryAmount)           + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, TypeEnumName)             + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, JournalCategory)          + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, DestinationCompany)       + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, PartyNumber)              + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, PartyName)                + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, DocumentDescription)      + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, DocumentText)             + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, ProductNumber)            + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, LineNumber)               + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, LineDate)                 + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, Quantity)                 + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, Unit)                     + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, LineText)                 + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, LineDescription)          + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, LineDocumentReference)    + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, Location)                 + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, ProjectId)                + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, ProjectActivityNumber)    + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, ProjectCategoryId)        + delimiter
                        + fieldPName(AccountingSourceExplorerTmp, ProjectLinePropertyId);

        _streamWriter.WriteLine(headerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingSourceExplorerTmpFinancialDimensionHeader</Name>
				<Source><![CDATA[
    private str getAccountingSourceExplorerTmpFinancialDimensionHeader(DimensionHierarchy _dimensionHierarchy)
    {
        System.String financialDimensionHeaderLine;

        if (_dimensionHierarchy == null)
        {
            financialDimensionHeaderLine = '';
        }
        else
        {
            DimensionSetSegmentName dimensionSetSegmentNames = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(_dimensionHierarchy.RecId);
            int dimensionHierarchylevelCount = DimensionHierarchy::getLevelCount(_dimensionHierarchy.RecId);

            for (int i = 1; i <= dimensionHierarchylevelCount; i++)
            {
                financialDimensionHeaderLine += dimensionSetSegmentNames[i] + delimiter;
            }
        }

        return financialDimensionHeaderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAccountingSourceExplorerLine</Name>
				<Source><![CDATA[
    private void writeAccountingSourceExplorerLine(System.IO.StreamWriter _streamWriter, AccountingSourceExplorerTmp _accountingSourceExplorerTmp, DimensionHierarchy _dimensionHierarchy)
    {
        System.String line = this.getAccountingSourceExplorerTmpFinancialDimensionLine(_accountingSourceExplorerTmp, _dimensionHierarchy);

        // Set empty string value to prevent 01/01/1900 00:00:00 from being shown when a date is empty
        str accountingDateStr = (_accountingSourceExplorerTmp.AccountingDate) ? any2Str(_accountingSourceExplorerTmp.AccountingDate) : ' ';
        str documentDateStr = (_accountingSourceExplorerTmp.DocumentDate) ? any2Str(_accountingSourceExplorerTmp.DocumentDate) : ' ';
        str lineDateStr = (_accountingSourceExplorerTmp.LineDate) ? any2Str(_accountingSourceExplorerTmp.LineDate) : ' ';
        str lineTextStr = AccountingSourceExplorerFileExport::handleStartingDoubleQuotes(any2Str(_accountingSourceExplorerTmp.LineText));
        str lineDescStr = AccountingSourceExplorerFileExport::handleStartingDoubleQuotes(any2Str(_accountingSourceExplorerTmp.LineDescription));

        line += any2Str(_accountingSourceExplorerTmp.JournalNumber)                                 + delimiter
                + accountingDateStr                                                                 + delimiter
                + any2Str(_accountingSourceExplorerTmp.SubledgerVoucher)                            + delimiter
                + any2Str(_accountingSourceExplorerTmp.DocumentNumber)                              + delimiter
                + documentDateStr                                                                   + delimiter
                + strRem(enum2Str(_accountingSourceExplorerTmp.PostingType), delimiter)             + delimiter
                + strRem(strRem(strRem(any2Str(_accountingSourceExplorerTmp.Text), delimiter),  lineFeed), carriageReturn)   + delimiter
                + any2Str(_accountingSourceExplorerTmp.LedgerAccount)                               + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.MainAccountId), delimiter)            + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.MainAccountName), delimiter)          + delimiter
                + any2Str(_accountingSourceExplorerTmp.AccountingCurrencyAmount)                    + delimiter
                + any2Str(_accountingSourceExplorerTmp.ReportingCurrencyAmount)                     + delimiter
                + any2Str(_accountingSourceExplorerTmp.TransactionCurrencyAmount)                   + delimiter
                + any2Str(_accountingSourceExplorerTmp.TransactionCurrencyCode)                     + delimiter
                + enum2Str(_accountingSourceExplorerTmp.MonetaryAmount)                             + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.TypeEnumName), delimiter)             + delimiter
                + strRem(enum2Str(_accountingSourceExplorerTmp.JournalCategory), delimiter)         + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.DestinationCompany), delimiter)       + delimiter
                + any2Str(_accountingSourceExplorerTmp.PartyNumber)                                 + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.PartyName), delimiter)                + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.DocumentDescription), delimiter)      + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.DocumentText), delimiter)             + delimiter
                + any2Str(_accountingSourceExplorerTmp.ProductNumber)                               + delimiter
                + any2Str(_accountingSourceExplorerTmp.LineNumber)                                  + delimiter
                + lineDateStr                                                                       + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.Quantity), delimiter)                 + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.Unit), delimiter)                     + delimiter
                + strRem(strRem(strRem(lineTextStr, delimiter), lineFeed), carriageReturn)   + delimiter
                + strRem(strRem(strRem(lineDescStr, delimiter), lineFeed), carriageReturn)   + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.LineDocumentReference), delimiter)    + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.Location), delimiter)                 + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.ProjectId), delimiter)                + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.ProjectActivityNumber), delimiter)    + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.ProjectCategoryId), delimiter)        + delimiter
                + strRem(any2Str(_accountingSourceExplorerTmp.ProjectLinePropertyId), delimiter);

        _streamWriter.WriteLine(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingSourceExplorerTmpFinancialDimensionLine</Name>
				<Source><![CDATA[
    private str getAccountingSourceExplorerTmpFinancialDimensionLine(AccountingSourceExplorerTmp _accountingSourceExplorerTmp, DimensionHierarchy _dimensionHierarchy)
    {
        System.String financialDimensionLine;

        if (_dimensionHierarchy == null)
        {
            financialDimensionLine = '';
        }
        else
        {
            int dimensionHierarchylevelCount = DimensionHierarchy::getLevelCount(_dimensionHierarchy.RecId);

            for (int i = 1; i <= dimensionHierarchylevelCount; i++)
            {
                financialDimensionLine += _accountingSourceExplorerTmp.DimensionValues[i] + delimiter;
            }
        }

        return financialDimensionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileName</Name>
				<Source><![CDATA[
    private str createFileName()
    {
        date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        str todayStr = date2Str(today,
                                -1,
                                DateDay::Digits2,
                                DateSeparator::Hyphen,
                                DateMonth::Digits2,
                                DateSeparator::Hyphen,
                                DateYear::Digits4,
                                DateFlags::FormatAll);

        str fileName = strFmt("@SYS309930", formStr(AccountingSourceExplorer), todayStr) + '.csv';

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleStartingDoubleQuotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that accounting source explorer file export does not have formatting issues
    /// By adding single quotes to the string when the first character is a double quote
    /// </summary>
    internal static str handleStartingDoubleQuotes(str _textField) {
        if (strFind(_textField, "\"", 0, 1))
        {
            _textField = "'" + _textField + "'";
        }

        return _textField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>