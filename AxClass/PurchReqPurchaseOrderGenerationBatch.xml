<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqPurchaseOrderGenerationBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqPurchaseOrderGenerationBatch</c> class is used to create purchase orders as a part
/// of the batch process.
/// </summary>

public class PurchReqPurchaseOrderGenerationBatch extends RunBaseBatch implements BatchRetryable
{
    Dialog          dialog;
    int             numOfPurchReqTable;
    DialogField     dflNumOfPurchReqTable;

    private PurchReqInstrumentationLogger instrumentationLogger;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        numOfPurchReqTable
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQueryRange</Name>
				<Source><![CDATA[
    private void addQueryRange(QueryBuildDataSource  qbds)
    {
        qbds.addRange(fieldNum(PurchReqLine, RequisitionStatus))                .value(queryValue(PurchReqRequisitionStatus::Approved));
        qbds.addRange(fieldNum(PurchReqLine, PurchLineCreated))                 .value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(PurchReqLine, IsPurchaseOrderGenerationManual))  .value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always returns false.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the class is shown in the list of the <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of the <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> is false,
    /// this method will not have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTask</Name>
				<Source><![CDATA[
    private void createBatchTask(
                                  RequisitionReleaseStrategy _requisitionReleaseStrategy
                                  )
    {
        BatchHeader                     batchHeader;
        _requisitionReleaseStrategy.parmIsRunningInAutoMode(true);

        if (this.parmCurrentBatch().BatchJobId)
        {
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        }
        else
        {
            batchHeader = BatchHeader::construct();
        }

        if (this.parmCurrentBatch().BatchJobId)
        {
            batchHeader.addRuntimeTask(
                                       _requisitionReleaseStrategy
                                       , this.parmCurrentBatch().RecId);
        }
        else
        {
            batchHeader.addTask(
                                _requisitionReleaseStrategy
                                );
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an object that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// An object that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog = super();

        dflNumOfPurchReqTable
            = dialog.addFieldValue(extendedTypeStr(Integer), numOfPurchReqTable, "@SYS325601", "@SYS325602");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePreEncumbrance</Name>
				<Source><![CDATA[
    private boolean evaluatePreEncumbrance(PurchReqLine _purchReqLine)
    {
        LedgerParameters ledgerParameters = LedgerParameters::findByCompany(_purchReqLine.buyingLegalEntity2DataArea());
        boolean          ret              = true;

        if (ledgerParameters.IsPreEncumbranceProcessEnabled == NoYes::Yes)
        {
            if (_purchReqLine.lineNotPosted())
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        numOfPurchReqTable = dflNumOfPurchReqTable.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Query                query                = new Query();
        QueryBuildDataSource qbds;
        QueryRun             runQuery;
        Map                             releaseStrategies = new Map(Types::Container, Types::Class);
        Map                             requisitionsPerReleaseStrategy = new Map(Types::Class, Types::Class);
        Set                             requisitions;
        MapEnumerator                   enumerator;
        RequisitionReleaseStrategy      requisitionReleaseStrategy;
        RefRecId                        lastPurchReqTable;
        container                       requisitionReleaseStrategyKey;

        PurchReqLine		purchReqLine; 

        using (var activityContext = this.instrumentationLogger().purchaseOrderGeneration().runBatch())
        {
            if (numOfPurchReqTable == 0)
            {
                numOfPurchReqTable = 1;
            }

            qbds = query.addDataSource(tableNum(PurchReqLine));

            QueryBuildDataSource qbdsPurchReqTable = qbds.addDataSource(tableNum(PurchReqTable));
            qbdsPurchReqTable.relations(true);
            qbdsPurchReqTable.joinMode(JoinMode::ExistsJoin);

            qbds.addSortField(fieldNum(PurchReqLine, PurchReqTable));

            this.addQueryRange(qbds);

            qbdsPurchReqTable.addRange(fieldNum(PurchReqTable, RequisitionStatus)).value(queryValue(PurchReqRequisitionStatus::Approved));

            runQuery = new QueryRun(query);

            while (runQuery.next())
            {
                purchReqLine = runQuery.get(tableNum(PurchReqLine));

                using (var activityContextLine = this.instrumentationLogger().purchaseOrderGeneration().runBatchLine(purchReqLine.RecId))
                {
                    if (purchReqLine.PurchReqTable != lastPurchReqTable)
                    {
                        if (lastPurchReqTable)
                        {
                            enumerator = requisitionsPerReleaseStrategy.getEnumerator();
                            while (enumerator.moveNext())
                            {
                                requisitions = enumerator.currentValue();
                                if (requisitions.elements() >= numOfPurchReqTable)
                                {
                                    requisitionReleaseStrategy = enumerator.currentKey();
                                    this.createBatchTask(requisitionReleaseStrategy);

                                    requisitionReleaseStrategyKey = requisitionReleaseStrategy.getKey();
                                    requisitionsPerReleaseStrategy.remove(requisitionReleaseStrategy);
                                    releaseStrategies.remove(requisitionReleaseStrategyKey);
                                    break;
                                }
                            }
                        }

                        lastPurchReqTable = purchReqLine.PurchReqTable;
                    }

                    if (this.evaluatePreEncumbrance(purchReqLine))
                    {
                        requisitionReleaseStrategy = RequisitionReleaseStrategy::pushRequisitionLineToReleaseStartegy(purchReqLine, releaseStrategies);

                        if (requisitionsPerReleaseStrategy.exists(requisitionReleaseStrategy))
                        {
                            requisitions = requisitionsPerReleaseStrategy.lookup(requisitionReleaseStrategy);
                        }
                        else
                        {
                            requisitions = new Set(typeName2Type(extendedTypeStr(RecId)));
                            requisitionsPerReleaseStrategy.insert(requisitionReleaseStrategy, requisitions);
                        }

                        if (!requisitions.in(purchReqLine.PurchReqTable))
                        {
                            requisitions.add(purchReqLine.PurchReqTable);
                        }
                    }
                }
            }

            if (requisitionsPerReleaseStrategy.elements())
            {
                using (var activityContextLine = this.instrumentationLogger().purchaseOrderGeneration().runBatchCreateTask())
                {
                    enumerator = requisitionsPerReleaseStrategy.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        requisitionReleaseStrategy = enumerator.currentKey();
                        this.createBatchTask(requisitionReleaseStrategy);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Any classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReqPurchaseOrderGenerationBatch construct()
    {
        return new PurchReqPurchaseOrderGenerationBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS325575";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchReqPurchaseOrderGenerationBatch    purchReqPurchaseOrderGenerationBatch = PurchReqPurchaseOrderGenerationBatch::construct();

        if (purchReqPurchaseOrderGenerationBatch.prompt())
        {
            purchReqPurchaseOrderGenerationBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchReqInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>