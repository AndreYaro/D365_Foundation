<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceLevelAgreementLogHelperCommon</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaServiceLevelAgreementLogHelperCommon
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndStopSLA</Name>
				<Source><![CDATA[
        public static boolean checkAndStopSLA(SMAServiceLevelAgreementLogType _logType, RefRecId _refRecId, Common argsType)
    {
        Args                    args;
        MenuFunction            menuFunction;
        boolean                 result = false;

        // check if SLA is open
        if (SMAServiceLevelAgreementLogHelperCommon::shouldStopSLALog(_logType, _refRecId))
        {
            result = true;

            // show SLA cancel prompt
            menuFunction = new MenuFunction(menuitemactionstr(SMAServiceLevelAgreementLog_Close), MenuItemType::Action);
            args = new Args();
            args.record(argsType);
            menuFunction.run(args);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndStopSLAWeb</Name>
				<Source><![CDATA[
        public static boolean checkAndStopSLAWeb(SMAServiceLevelAgreementLogType _logType,
                                            RefRecId _refRecId,
                                            SMASLAStartDateTime _endTime,
                                            boolean _createReason,
                                            SMAReasonId _reasonId,
                                            Description _description)
    {
        SMAServiceLevelAgreementLogTable    serviceLevelAgreementLog;
        Common                              common;
        SMAReasonType                       reasonType = SMAReasonType::Stop;
        SMAParameters                       parameters = SMAParameters::find();
        SMALatestCompletionDateTime         lastCompletionDateTime;
        boolean                             result = false;
        SysDictTable                        dictTable;

        // make sure we should stop the SLA in the first place
        if (!SMAServiceLevelAgreementLogHelperCommon::shouldStopSLALog(_logType, _refRecId))
            return result;

        if (_createReason && (!_reasonId || !SMAReasonTable::find(_reasonId)))
        {
            // Invalid reason specified
            return checkFailed("@SYS104856");
        }

        // check if reason should be provided
        if (!_createReason && parameters.ReasonOnExceedTime)
        {
            dictTable = new SysDictTable(SMAServiceLevelAgreementLogTable::logType2TableId(_logType));

            if (dictTable)
            {
                common = SMAServiceLevelAgreementLogTable::getRelatedRecord(_logType, _refRecId);

                if (common && tableHasMethod(dictTable, identifierstr(displayLatestCompletionDateTime)))
                    lastCompletionDateTime = common.displayLatestCompletionDateTime();
            }

            if (_endTime > lastCompletionDateTime)
            {
                // A reason must be specified when the service order is closed later than agreed
                return checkFailed("@SYS104857");
            }
        }

        ttsbegin;

        select firstonly forupdate serviceLevelAgreementLog order by RecId desc
            where serviceLevelAgreementLog.LogType == _logType &&
                  serviceLevelAgreementLog.RefRecId == _refRecId;

        serviceLevelAgreementLog.EndDateTime    = _endTime;
        serviceLevelAgreementLog.Status         = SMALogStatus::Closed;

        if (serviceLevelAgreementLog.validateWrite())
        {
            serviceLevelAgreementLog.update();

            dictTable = new SysDictTable(SMAServiceLevelAgreementLogTable::logType2TableId(_logType));

            if (dictTable)
            {
                common = SMAServiceLevelAgreementLogTable::getRelatedRecord(_logType, _refRecId);

                if (common && tableHasMethod(dictTable, identifierstr(calcServiceLevelAgreementCompliance)) &&
                fieldname2id(common.TableId, identifierstr(ServiceLevelAgreementStatus)))
                {
                    common.(fieldname2id(common.TableId, identifierstr(ServiceLevelAgreementStatus))) = SMALogStatus::Closed;
                    common.calcServiceLevelAgreementCompliance();

                    common.update();
                }
            }

            if (_createReason)
            {
                SMAServiceLevelAgreementReason::createReasonFromTimeLog(_logType, _refRecId, _reasonId, reasonType, _description);
            }

            result = true;
        }

        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateSignOffServiceOrderFromLine</Name>
				<Source><![CDATA[
        public static void checkUpdateSignOffServiceOrderFromLine(SMAServiceOrderLine _serviceLine)
    {
        SMAServiceOrderTable   serviceOrderTable;
        SMAServiceOrderLine    serviceOrderLine;

        serviceOrderTable = SMAServiceOrderTable::find(_serviceLine.ServiceOrderId,true);

        if ((_serviceLine.SignOff != serviceOrderTable.SignOff))
        {
            // Sign off the Service Order if all lines are signed off
            select RecId from  serviceOrderLine
                         where serviceOrderLine.ServiceOrderId  == _serviceLine.ServiceOrderId
                            && serviceOrderLine.SignOff         == NoYes::No;
            serviceOrderTable.SignOff   = !serviceOrderLine.RecId;
            serviceOrderTable.update(true, false, null, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSignOffServiceOrderLines</Name>
				<Source><![CDATA[
        public static boolean shouldSignOffServiceOrderLines(SMAServiceOrderId _serviceOrderId, RecId _serviceLineRecId)
    {
        SMAServiceOrderLine     serviceOrderLine;
        // all lines should be signed off to sign off the header
        select RecId from  serviceOrderLine
                         where serviceOrderLine.ServiceOrderId  == _serviceOrderId
                            && serviceOrderLine.SignOff         == NoYes::No
                            && serviceOrderLine.RecId           != _serviceLineRecId;

        return !serviceOrderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStopSLALog</Name>
				<Source><![CDATA[
        public static boolean shouldStopSLALog(SMAServiceLevelAgreementLogType _logType, RefRecId _refRecId)
    {
        Common          common;
        fieldId         fieldIdSignOff, fieldIdStatus;

        common = SMAServiceLevelAgreementLogTable::getRelatedRecord(_logType, _refRecId);

        if (common.RecId)
        {
            fieldIdSignOff  = fieldname2id(common.TableId, identifierstr(SignOff));
            fieldIdStatus   = fieldname2id(common.TableId, identifierstr(ServiceLevelAgreementStatus));

            if (fieldIdSignOff && fieldIdStatus)
            return common.(fieldIdSignOff) == NoYes::No &&
                 common.(fieldIdStatus) == SMALogStatus::Open;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>