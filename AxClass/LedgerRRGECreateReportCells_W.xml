<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGECreateReportCells_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGECreateReportCells_W extends RunBase
{
    LedgerRRGRepCode_RU             reportId;
    LedgerRRGEQueryType_W           queryType;
    LedgerRRGEQueryRecId_W          queryRecId;
    LedgerRRGECommonSectionRecId_W  commonSectionRecId;
    LedgerRRGEPropertyRecId_W       propertyRecId;
    LedgerRRGReportTable_RU         reportTable;
    private const int               CurrentVersion  = 1;
    private const int               Version1        = 1;
    private const int               RetryNum        = 5;  //number of retries in catch(Exception::UpdateConflict) loop

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCell</Name>
				<Source><![CDATA[
    private void createCell(LedgerRRGEProperties_W _property)
    {
        LedgerRRGCellTable_RU       cellTable;
        LedgerRRGOperationTable_RU  operationTable;
        LedgerRRGCellCode_RU        cellCode = cellTable.setCellCode(_property.displayDefaultCell());

        if (cellCode)
        {
            select forupdate cellTable
                where cellTable.ReportRecId   == reportTable.RecId    &&
                      cellTable.CellCode      == cellCode;
        }

        cellTable.CellCode      = cellCode;
        cellTable.ReportRecId   = reportTable.RecId;
        cellTable.Description   = _property.Name;
        cellTable.initFromProperty(_property);

        if (cellTable.RecId)
        {
            cellTable.update();
        }
        else
        {
            cellTable.insert();
        }

        delete_from operationTable
            where operationTable.CellTableId == cellTable.TableId   &&
                  operationTable.CellRecId   == cellTable.RecId;

        operationTable.initFromCellTable(cellTable);
        operationTable.LedgerRRGEProperties_W       = _property.RecId;
        operationTable.LedgerOperation              = LedgerRRGOperationType_RU::None;
        operationTable.BalanceType                  = LedgerRRGBalancePeriodType_RU::None;
        operationTable.AccountIntervalType          = LedgerRRGIntervalType_RU::None;
        operationTable.OffsetAccountIntervalType    = LedgerRRGIntervalType_RU::None;
        operationTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCells</Name>
				<Source><![CDATA[
    private void createCells()
    {
        QueryRun queryRun = new QueryRun(this.makePropertiesQuery());

        while (queryRun.next())
        {
            this.createCell(queryRun.get(tableNum(LedgerRRGEProperties_W)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return Dialog::newFormnameRunbase(formStr(LedgerRRGECreateReportCells_W), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromArgs(Args _args)
    {
        LedgerRRGCellTable_RU   cellTable;
        FormDataSource          fds;
        QueryBuildDataSource    qbds;
        int                     i;
        QueryBuildDynalink      dynalink;

        this.getLast();

        if (_args)
        {
            switch (_args.dataset())
            {
                case tableNum(LedgerRRGReportTable_RU):
                    reportTable.data(_args.record());
                    break;
                case tableNum(LedgerRRGCellTable_RU):
                    if (FormDataUtil::isFormDataSource(_args.record()))
                    {
                        fds  = FormDataUtil::getFormDataSource(_args.record());
                        qbds = fds.query().dataSourceTable(tableNum(LedgerRRGCellTable_RU));

                        for (i = qbds.dynalinkCount(); i; i--)
                        {
                            dynalink = qbds.dynalink(i);
                            if (dynalink.cursor().TableId == tableNum(LedgerRRGReportTable_RU))
                            {
                                reportTable.data(dynalink.cursor());
                                break;
                            }
                        }
                    }
                    else
                    {
                        cellTable   = _args.record();
                        reportTable = cellTable.reportTable();
                    }
                    break;
            }

            reportId = reportTable.RepCode;
        }

        if (!reportId)
        {
            throw error(Error::missingRecord(classStr(LedgerRRGECreateReportCells_W)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makePropertiesQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query makePropertiesQuery(boolean _requisiteFilter = true)
    {
        Query                   query           = new Query();
        QueryBuildDataSource    propertiesDS    = query.addDataSource(tableNum(LedgerRRGEProperties_W));
        QueryBuildDataSource    linesDS;

        if (propertyRecId && _requisiteFilter)
        {
            findOrCreateRange_W(propertiesDS, fieldNum(LedgerRRGEProperties_W, RecId), queryValue(propertyRecId));
        }
        else
        {
            if (commonSectionRecId)
            {
                linesDS = propertiesDS.addDataSource(tableNum(LedgerRRGECommonSectionLines_W));
                linesDS.joinMode(JoinMode::ExistsJoin);
                linesDS.addRange(fieldNum(LedgerRRGECommonSectionLines_W, LedgerRRGECommonSections_W)).value(queryValue(commonSectionRecId));
                linesDS.relations(true);
            }
            else
            {
                if (queryRecId)
                {
                    linesDS = propertiesDS.addDataSource(tableNum(LedgerRRGEExpressionLines_W));
                    linesDS.joinMode(JoinMode::ExistsJoin);
                    linesDS.addRange(fieldNum(LedgerRRGEExpressionLines_W, LedgerRRGEQueries_W)).value(queryValue(queryRecId));
                    linesDS.relations(true);
                }
                else
                {
                    if (_requisiteFilter)
                    {
                        findOrCreateRange_W(propertiesDS, fieldNum(LedgerRRGEProperties_W, PropertyId), SysQuery::valueEmptyString());
                    }
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, reportId, queryRecId, queryType, commonSectionRecId, propertyRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonSectionRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGECommonSectionRecId_W parmCommonSectionRecId(LedgerRRGECommonSectionRecId_W _commonSectionRecId = commonSectionRecId)
    {
        if (commonSectionRecId != _commonSectionRecId)
        {
            commonSectionRecId    = _commonSectionRecId;
            this.parmPropertyRecId(0);
        }

        return commonSectionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPropertyRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPropertyRecId_W parmPropertyRecId(LedgerRRGEPropertyRecId_W _propertyRecId = propertyRecId)
    {
       
        propertyRecId = _propertyRecId;

        return propertyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEQueryRecId_W parmQueryRecId(LedgerRRGEQueryRecId_W _queryRecId = queryRecId)
    {
       
        if (queryRecId != _queryRecId)
        {
            queryRecId         = _queryRecId;
            this.parmCommonSectionRecId(0);
            this.parmPropertyRecId(0);
        }

        return queryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEQueryType_W parmQueryType(LedgerRRGEQueryType_W _queryType = queryType)
    {
        if (queryType != _queryType)
        {
            queryType = _queryType;

            if (inPrompt && LedgerRRGEQueries_W::find(queryRecId).Type != queryType)
            {
                if ((select count(RecId) from ledgerRRGEQueries_W
                        where ledgerRRGEQueries_W.Type == queryType).RecId == 1)
                {
                    this.parmQueryRecId((select RecId from ledgerRRGEQueries_W
                                where ledgerRRGEQueries_W.Type == queryType).RecId);
                }
                else
                {
                    this.parmQueryRecId(0);
                }

                this.parmCommonSectionRecId(0);
                this.parmPropertyRecId(0);
            }
        }
        return queryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGRepCode_RU parmReportId(LedgerRRGRepCode_RU _reportId = reportId)
    {
       
        reportId = _reportId;

        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 propertiesCount()
    {
        Query       query = this.makePropertiesQuery();
        QueryRun    queryRun;
        int64       res;
   
        query.dataSourceTable(tableNum(LedgerRRGEProperties_W)).addSelectionField(fieldNum(LedgerRRGEProperties_W, RecId), SelectionField::Count);
        query.dataSourceTable(tableNum(LedgerRRGEProperties_W)).orderMode(OrderMode::GroupBy);
        queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            res = queryRun.get(tableNum(LedgerRRGEProperties_W)).(fieldNum(LedgerRRGEProperties_W, RecId));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setPrefix(LedgerRRGECreateReportCells_W::description());

        if (! this.validate())
        {
            throw error("@SYS18738");
        }

        try
        {
            ttsbegin;

            this.createCells();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
   
        switch (version)
        {
            case CurrentVersion:
                [version, reportId, queryRecId, queryType, commonSectionRecId, propertyRecId] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        reportTable = LedgerRRGReportTable_RU::findByRepCode(reportId);

        if (!reportTable)
        {
            ret = checkFailed(strFmt("@LedgerRRG:LedgerRRG_RepotNotExist", reportId));
        }

        if (_calledFrom && !this.propertiesCount())
        {
            ret = checkFailed("@LedgerRRG:LedgerRRG_RequisitesNotSelected");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public server static LedgerRRGECreateReportCells_W construct()
    {
        return new LedgerRRGECreateReportCells_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@LedgerRRG:LedgerRRG_CreateReportCells";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerRRGECreateReportCells_W   createReportCells = LedgerRRGECreateReportCells_W::construct();
        FormDataSource                  fds;

        createReportCells.initFromArgs(_args);

        if (createReportCells.prompt())
        {
            createReportCells.runOperation();
            if (_args && FormDataUtil::isFormDataSource(_args.record()))
            {
                fds = FormDataUtil::getFormDataSource(_args.record());
                fds.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>