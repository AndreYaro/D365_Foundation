<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeQuantityUnitOfMeasureConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeQuantityUnitOfMeasureConverter</c> class provides the methods to convert quantities between units of measure.
/// </summary>
public class TradeQuantityUnitOfMeasureConverter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertReleasedProductToInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a quantity to inventory units.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_quantity">The quantity to convert to inventory units.</param>
    /// <param name = "_unitId">The unit of measure ID of the quantity to convert.</param>
    /// <returns>The quantity in inventory units.</returns>
    public static InventQty convertReleasedProductToInventoryQuantity(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        Qty                 _quantity,
        UnitOfMeasureSymbol _unitId)
    {
        if (!_quantity)
        {
            return 0;
        }

        var _inventUnitId = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;

        if (_unitId == _inventUnitId)
        {
            return decRound(_quantity, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_inventUnitId)));
        }

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId, _inventDimId, _quantity, _unitId, _inventUnitId, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertReleasedProductInventoryToPurchaseQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity in inventory units to quantity in purchase units.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_quantity">The quantity to convert in inventory units.</param>
    /// <returns>The quantity in purchase units.</returns>
    public static PurchQty convertReleasedProductInventoryToPurchaseQuantity(ItemId _itemId, InventDimId _inventDimId, InventQty _quantity)
    {
        if (!_quantity)
        {
            return 0;
        }

        InventTable         item = InventTable::find(_itemId);
        UnitOfMeasureSymbol inventUnitId = item.inventUnitId();
        UnitOfMeasureSymbol purchUnitId = item.purchUnitId();

        if (inventUnitId == purchUnitId)
        {
            return decRound(_quantity, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(purchUnitId)));
        }

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId, _inventDimId, _quantity, inventUnitId, purchUnitId, NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>