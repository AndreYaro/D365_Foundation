<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPostJournalizing</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalCheckPostJournalizing
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPayrollDisbursementEntries</Name>
				<Source><![CDATA[
    public static JournalizingDefinitionManagerBank initPayrollDisbursementEntries(LedgerJournalType _journalType)
    {
        JournalizingDefinitionId journalizingDefinitionId;
        JournalizingDefinitionManagerBank payrollDisbursementjournalizingDefinitionManagerBank;

        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                    && _journalType == LedgerJournalType::PayrollDisbursement)
        {
            if (LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes)
            {
                payrollDisbursementjournalizingDefinitionManagerBank = JournalizingDefinitionManager::newJournalizingDefinitionManagerBank(
                    '',
                    '',
                    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                    LedgerPostingType::LedgerJournal);

                payrollDisbursementjournalizingDefinitionManagerBank.parmBankTransactionTypes(BankTransactionTypes::PayrollDisbursementJournal);
                journalizingDefinitionId = payrollDisbursementjournalizingDefinitionManagerBank.getDefaultJournalizingDefinition();

                if (journalizingDefinitionId)
                {
                    payrollDisbursementjournalizingDefinitionManagerBank.parmJournalizingDefinition(journalizingDefinitionId);
                }
            }
        }
        return payrollDisbursementjournalizingDefinitionManagerBank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPayrollDisbursementEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds transactions in a ledger voucher object for payroll disbursement.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// A ledger voucher to add the generated entries to.
    /// </param>
    public static void addPayrollDisbursementEntries(JournalizingDefinitionManagerBank _payrollDisbursementjournalizingDefinitionManagerBank, LedgerVoucher _ledgerVoucher)
    {
        List                                systemGeneratedEntriesList;
        List                                payrollDisbursementGeneratedEntriesList;

        LedgerVoucherList                   ledgerVoucherList;
        LedgerVoucherObject                 ledgerVoucherObject;
        LedgerVoucherTransList              ledgerVoucherTransList;
        LedgerVoucherTransObject            ledgerVoucherTransObject;

        boolean                             hasMoreElements;
        boolean                             hasMoreTrans;

        if (_ledgerVoucher)
        {
            ledgerVoucherList =  _ledgerVoucher.getInternalCollection();
            hasMoreElements = ledgerVoucherList.first();

            while (hasMoreElements)
            {
                ledgerVoucherObject = ledgerVoucherList.item();

                if (ledgerVoucherObject)
                {
                    ledgerVoucherTransList = ledgerVoucherObject.getInternalCollection();
                    hasMoreTrans = ledgerVoucherTransList.first();

                    payrollDisbursementGeneratedEntriesList = new List(Types::Class);

                    while (hasMoreTrans)
                    {
                        ledgerVoucherTransObject = ledgerVoucherTransList.item();

                        if (ledgerVoucherTransObject)
                        {
                            systemGeneratedEntriesList = _payrollDisbursementjournalizingDefinitionManagerBank.getSystemGeneratedEntries(DebitCredit::Debit, ledgerVoucherTransObject.parmLedgerDimensionId());

                            // Adds the generated entries to a list
                            LedgerJournalCheckPostJournalizing::addPayrollGeneratedEntriesToList(systemGeneratedEntriesList, payrollDisbursementGeneratedEntriesList, ledgerVoucherTransObject);
                        }

                        hasMoreTrans = ledgerVoucherTransList.next();
                    }

                    if (!payrollDisbursementGeneratedEntriesList.empty())
                    {
                        // Adds the generated entries to a ledger voucher object for payroll disbursement.
                        LedgerJournalCheckPostJournalizing::addPayrollGeneratedEntriesToVoucher(ledgerVoucherObject, payrollDisbursementGeneratedEntriesList);
                    }
                }

                hasMoreElements = ledgerVoucherList.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPayrollGeneratedEntriesToList</Name>
				<Source><![CDATA[
    private static void addPayrollGeneratedEntriesToList(List _systemGeneratedEntriesList, List _payrollDisbursementGeneratedEntriesList, LedgerVoucherTransObject _ledgerVoucherTransObject)
    {
        JournalizingDefinitionEntry journalizingDefinitionEntry;
        Factor signFactor;

        ListEnumerator systemGeneratedEntriesListEnumerator = _systemGeneratedEntriesList.getEnumerator();

        while (systemGeneratedEntriesListEnumerator.moveNext())
        {
            journalizingDefinitionEntry = systemGeneratedEntriesListEnumerator.current();
            signFactor = journalizingDefinitionEntry.parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit ? 1: -1;
            journalizingDefinitionEntry.parmTransactionAmount(signFactor * _ledgerVoucherTransObject.parmAmountCur());
            journalizingDefinitionEntry.parmAccountingAmount(signFactor * _ledgerVoucherTransObject.parmAccountingCurrencyAmount());
            journalizingDefinitionEntry.parmReportingAmount(signFactor * _ledgerVoucherTransObject.parmReportingCurrencyAmount());

            _payrollDisbursementGeneratedEntriesList.addEnd(journalizingDefinitionEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPayrollGeneratedEntriesToVoucher</Name>
				<Source><![CDATA[
    private static void addPayrollGeneratedEntriesToVoucher( LedgerVoucherObject _ledgerVoucherObject, List _payrollDisbursementGeneratedEntriesList)
    {
        JournalizingDefinitionEntry journalizingDefinitionEntryGenerated;
        LedgerVoucherTransObject ledgerVoucherTransObjectGenerated;

        ListEnumerator payrollDisbursementGeneratedEntriesListEnumerator = _payrollDisbursementGeneratedEntriesList.getEnumerator();

        while (payrollDisbursementGeneratedEntriesListEnumerator.moveNext())
        {
            journalizingDefinitionEntryGenerated = payrollDisbursementGeneratedEntriesListEnumerator.current();

            ledgerVoucherTransObjectGenerated = LedgerVoucherTransObject::newBasicDefault(
                _ledgerVoucherObject,
                LedgerPostingType::LedgerJournal,
                journalizingDefinitionEntryGenerated.parmLedgerDimension(),
                Ledger::accountingCurrency(),
                journalizingDefinitionEntryGenerated.parmTransactionAmount(),
                journalizingDefinitionEntryGenerated.parmAccountingAmount(),
                journalizingDefinitionEntryGenerated.parmReportingAmount());

            _ledgerVoucherObject.addTrans(ledgerVoucherTransObjectGenerated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWriteOffJournalizingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds transactions in a ledger voucher object.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// A ledger voucher object to use.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// A buffer of <c>LedgerJournalTrans</c> table to use.
    /// </param>
    public static void addWriteOffJournalizingEntries(LedgerVoucher _ledgerVoucher, LedgerJournalTrans _ledgerJournalTrans)
    {
        JournalizingDefinitionId            journalizingDefinitionId;
        List                                systemGeneratedEntriesList;
        JournalizingDefinitionEntry         generatedOutput;
        ListEnumerator                      systemGeneratedEntriesListEnumerator;
        JournalizingDefinitionManagerBank   journalizingDefinitionManagerBank;
        AmountCur                           amountCur;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            amountCur = _ledgerJournalTrans.AmountCurDebit - _ledgerJournalTrans.AmountCurCredit;

            if (LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes             &&
                _ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger                       &&
                _ledgerJournalTrans.ledgerJournalTable().JournalName == CustParameters::find().CollectionsWriteOffLedgerJournalName)
            {
                if (!_ledgerVoucher.findLedgerVoucherObject(_ledgerJournalTrans.Voucher, _ledgerJournalTrans.TransDate))
                {
                    _ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(_ledgerJournalTrans.Voucher,
                                                                            _ledgerJournalTrans.TransDate));
                }

                journalizingDefinitionManagerBank = JournalizingDefinitionManager::newJournalizingDefinitionManagerBank(
                    _ledgerJournalTrans.BankAccountId,
                    _ledgerJournalTrans.PaymMode,
                    _ledgerJournalTrans.TransDate,
                LedgerPostingType::CustSettlement);

                journalizingDefinitionManagerBank.parmBankTransactionTypes(BankTransactionTypes::AccountsReceivableSettlement);
                journalizingDefinitionId = journalizingDefinitionManagerBank.getDefaultJournalizingDefinition();
                journalizingDefinitionManagerBank.parmJournalizingDefinition(journalizingDefinitionId);

                systemGeneratedEntriesList = journalizingDefinitionManagerBank.getSystemGeneratedEntries(DebitCredit::Debit, _ledgerJournalTrans.LedgerDimension);

                systemGeneratedEntriesListEnumerator = systemGeneratedEntriesList.getEnumerator();

                while (systemGeneratedEntriesListEnumerator.moveNext())
                {
                    generatedOutput = systemGeneratedEntriesListEnumerator.current();

                    _ledgerVoucher.addTrans(
                    LedgerVoucherTransObject::newBasicDefault(
                        _ledgerVoucher.findLedgerVoucherObject(_ledgerJournalTrans.Voucher, _ledgerJournalTrans.TransDate),
                        LedgerPostingType::LedgerJournal,
                        generatedOutput.parmLedgerDimension(),
                        _ledgerJournalTrans.CurrencyCode,
                        generatedOutput.parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit ? amountCur : -amountCur,
                        generatedOutput.parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit ? amountCur : -amountCur,
                        generatedOutput.parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit ? amountCur : -amountCur));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>