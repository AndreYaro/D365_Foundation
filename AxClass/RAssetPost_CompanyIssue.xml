<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_CompanyIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_CompanyIssue extends RAssetPost
{
    RAssetMoveHist rAssetMoveHist;
    AmountCur      balanceAcquisition,
                   balanceDepreciation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans()
    {
        RAssetSumCalc rassetSumTrans;
        ;
    
        ttsbegin;
    
        rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(ledgerJournalTrans_RAsset.AssetId,
                                                             rAssetStandardId,
                                                             transDate);
        balanceAcquisition  = rassetSumTrans.acquisitionTotal();
        balanceDepreciation = rassetSumTrans.depreciationTotal();
        this.updateMoveHistoryStandard();
        rAssetTrans = this.initAcquisitionTrans();
        rAssetTrans.Open      = NoYes::Yes;
        rAssetTrans.Voucher   = ledgerVoucher.lastVoucher();
        rAssetTrans.insert();
        this.createTransLink(rAssetTrans);
        rAssetTrans = this.initDepreciationTrans();
        rAssetTrans.Open      = NoYes::Yes;
        rAssetTrans.Voucher   = ledgerVoucher.lastVoucher();
        rAssetTrans.insert();
        this.createTransLink(rAssetTrans);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAcquisitionTrans</Name>
				<Source><![CDATA[
    private RAssetTrans initAcquisitionTrans()
    {
        ;

        rAssetTrans                = this.initFromLedgerJournalTrans();
        rAssetTrans.Txt            = "@GLS116682";
        rAssetTrans.AssetTransType = RAssetTransType::Acquisition;
        rAssetTrans.PostingType    = RAssetPostingType::CompanyIssue;
        rAssetTrans.AmountCur      = -balanceAcquisition;
        rAssetTrans.AmountMST      = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, transDate);
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepreciationTrans</Name>
				<Source><![CDATA[
    private RAssetTrans initDepreciationTrans()
    {
        ;

        rAssetTrans                = this.initFromLedgerJournalTrans();
        rAssetTrans.Txt            = "@GLS116682";
        rAssetTrans.AssetTransType = RAssetTransType::Depreciation;
        rAssetTrans.PostingType    = RAssetPostingType::CompanyIssue;
        rAssetTrans.AmountCur      = -balanceDepreciation;
        rAssetTrans.AmountMST      = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, transDate);
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoveHistoryStandard</Name>
				<Source><![CDATA[
    private void updateMoveHistoryStandard()
    {
        RAssetMoveStandard rAssetMoveStandard;
        ;

        rAssetMoveHist = RAssetMoveHist::findLastOperation(ledgerJournalTrans_RAsset.AssetId,
                                                           RAssetMoveType::CompanyIssue,
                                                           NoYes::No,
                                                           transDate,
                                                           true);
        if (! rAssetMoveHist)
        {
            throw error(strfmt("@GLS116699", RAssetMoveType::CompanyIssue, ledgerJournalTrans_RAsset.AssetId,  transDate));
        }
        if (! rAssetStandards)
        {
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);
        }

        rAssetStandards.DisposalDate = transDate;
        rAssetStandards.doUpdate();

        rAssetMoveHist.updateMoveStandard();
        rAssetMoveStandard = rAssetMoveHist.rAssetMoveStandard(rAssetStandardId, true);
        rAssetMoveStandard.BalanceAcquisition  = balanceAcquisition;
        rAssetMoveStandard.BalanceDepreciation = - balanceDepreciation;
        rAssetMoveStandard.rAssetLifeTimePass  = rAssetStandards.lifeTimePass(transDate);
        rAssetMoveStandard.Posted              = NoYes::Yes;
        rAssetMoveStandard.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        RAssetMoveStandard   rAssetMoveStandard;
        RAssetMoveHist       rAssetMoveHistReceipt;
        RAssetMoveHistEngine rAssetMoveHistEngine;
        ;

        ttsbegin;

        if (! rAssetTable)
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);

        select firstonly RecId from rAssetMoveStandard
            where rAssetMoveStandard.RefRecId   == rAssetMoveHist.RecId   &&
                  rAssetMoveStandard.RefTableId == rAssetMoveHist.TableId &&
                  rAssetMoveStandard.Posted     == NoYes::No;

        if (! rAssetMoveStandard.RecId)
        {
            rAssetMoveHistEngine = RAssetMoveHistEngine::construct(rAssetMoveHist);

            select firstonly DisposalDate from rAssetStandards
                order by DisposalDate desc
                where rAssetStandards.AssetId == ledgerJournalTrans_RAsset.AssetId;

            rAssetMoveHist.ChangeDate = rAssetStandards.DisposalDate;
            rAssetMoveHist.Posted = NoYes::Yes;
            if (! rAssetMoveHistEngine.validateWrite())
            {
                throw info(strfmt("@GLS116697", RAssetMoveType::CompanyIssue, rAssetMoveHist.AccountNum));
            }
            rAssetMoveHist.update();
            rAssetTable.Status = RAssetStatus::Disposed;
            rAssetTable.doUpdate();
            if (rAssetMoveHist.AssetId && rAssetMoveHist.Company)
            {
                if (SysDataArea::checkAccessible(rAssetMoveHist.Company))
                {
                    changecompany(rAssetMoveHist.Company)
                    {
                        rAssetMoveHistReceipt.clear();
                        rAssetMoveHistReceipt.ChangeDate = rAssetMoveHist.ChangeDate;
                        rAssetMoveHistReceipt.AccountNum = rAssetMoveHist.AssetId;
                        rAssetMoveHistReceipt.Company    = rAssetMoveHist.DataAreaId;
                        rAssetMoveHistReceipt.AssetId    = rAssetMoveHist.AccountNum;
                        rAssetMoveHistReceipt.MoveType   = RAssetMoveType::CompanyReceipt;
                        rAssetMoveHistEngine = RAssetMoveHistEngine::construct(rAssetMoveHistReceipt);
                        if (! rAssetMoveHistEngine.validateWrite())
                        {
                            throw info(strfmt("@GLS116697", RAssetMoveType::CompanyIssue, rAssetMoveHist.AccountNum));
                        }
                        rAssetMoveHistReceipt.insert();
                        rAssetMoveHistEngine.write();
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
