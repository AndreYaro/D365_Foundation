<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppServiceDecoratorRuleDefaultDisplayArea</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppServiceDecoratorRuleDefaultDisplayArea</c> class populates the DisplayArea for the default pattern.
/// </summary>
public class WHSMobileAppServiceDecoratorRuleDefaultDisplayArea implements WHSIMobileAppServiceXMLDecoratorRule
{
    #WHSRF
    #WHSWorkExecuteControlElements
    #WHSWorkExecuteDisplayCases
    #XmlDocumentation

    private boolean                   fieldFound = false;
    private WHSMobileAppFieldValueMap oldControlsMap;
    protected WHSMobileAppPageInfo    pageInfo;
    private boolean                   inputFieldFound;
    private Map                       lastEditableField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileAppServiceDecoratorRuleDefaultDisplayArea construct()
    {
        return new WHSMobileAppServiceDecoratorRuleDefaultDisplayArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInputFieldFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method for <c>boolean</c> inputFieldFound variable.
    /// </summary>
    /// <parm name="_inputFieldFound">
    /// True if input field is found, otherwise false.
    /// </parm>
    [Hookable(false)]
    internal boolean parmInputFieldFound(boolean _inputFieldFound = inputFieldFound)
    {
        inputFieldFound = _inputFieldFound;

        return inputFieldFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to run the transformation.
    /// </summary>
    /// <param name = "_pageInfo">
    /// The <c>WHSMobileAppPageInfo</c> containing controls and information to carry out the transformation.
    /// </param>
    public void run(WHSMobileAppPageInfo _pageInfo)
    {
        pageInfo = _pageInfo;

        ListEnumerator le = _pageInfo.parmControlsEnumerator();
        while (le.moveNext())
        {
            Map controlMap = le.current();

            boolean enabled = ((controlMap.lookup(#XMLControlEnabled) == '1') || (controlMap.lookup(#XMLControlEnabled) == 1));

            WHSMobileAppDisplayArea displayArea = this.calculateDisplayArea(enabled, controlMap);

            if (displayArea != WHSMobileAppXMLDisplayArea::EmptyArea)
            {
                controlMap.insert(#XMLControlDisplayArea, displayArea);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayArea</Name>
				<Source><![CDATA[
    protected WHSMobileAppDisplayArea calculateDisplayArea(boolean _enabled, Map _controlMap)
    {
        WHSMobileAppDisplayArea displayArea;
        switch (_controlMap.lookup(#XMLControlCtrlType))
        {
            case #RFLabel:
                displayArea = this.calculateDisplayAreaForLabel(_controlMap);
                break;

            case #RFText, #RFPassword:
                displayArea = this.calculateDisplayAreaForText(_enabled, _controlMap);
                this.setLastEditableField(_enabled, _controlMap);
                fieldFound = true;
                break;

            case #RFListbox, #RFCombobox:
                displayArea = this.calculateDisplayAreaForCombobox(_enabled, _controlMap);
                this.setLastEditableField(_enabled, _controlMap);
                fieldFound = true;
                break;

            case #RFButton:
                displayArea = this.calculateDisplayAreaForButton(_controlMap);
                break;

            case #RFDetourButton:
                displayArea = WHSMobileAppXMLDisplayArea::EmptyArea;
                break;

            default:
                displayArea = WHSMobileAppXMLDisplayArea::EmptyArea;
                break;
        }

        return displayArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastEditableField</Name>
				<Source><![CDATA[
    private void setLastEditableField(boolean _enabled, Map _controlMap)
    {
        if (_enabled)
        {
            lastEditableField = _controlMap;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayAreaForLabel</Name>
				<Source><![CDATA[
    private WHSMobileAppDisplayArea calculateDisplayAreaForLabel(Map _controlMap)
    {
        if (this.isLabelInSubHeaderArea(_controlMap, pageInfo.parmMenuItemName()))
        {
            return WHSMobileAppXMLDisplayArea::SubHeaderArea;
        }

        return WHSMobileAppXMLDisplayArea::InfoAndSecondaryInputArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLabelInSubHeaderAreaDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to check if the current label control is in the SubHeader area.
    /// </summary>
    /// <param name = "_controlMap">Map that contains the control properties.</param>
    /// <param name = "_menuItemName">The menu item name of the currrent flow.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object where a boolean that indicates if the label control is in the SubHeader area or not can be returned.</param>
    static delegate void isLabelInSubHeaderAreaDelegate(Map _controlMap, WHSMenuItemName _menuItemName, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLabelInSubHeaderArea</Name>
				<Source><![CDATA[
    protected boolean isLabelInSubHeaderArea(Map _controlMap, WHSMenuItemName _menuItemName)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        WHSMobileAppServiceDecoratorRuleDefaultDisplayArea::isLabelInSubHeaderAreaDelegate(_controlMap, _menuItemName, result);
        if (result.hasResult())
        {
            return result.result();
        }
        return (!fieldFound
            && (_controlMap.lookup(#XMLControlName) != #RFError)
            && (_controlMap.lookup(#XMLControlInputType) == #WHSRFUndefinedDataType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayAreaForText</Name>
				<Source><![CDATA[
    protected WHSMobileAppDisplayArea calculateDisplayAreaForText(boolean _enabled, Map _controlMap)
    {
        str data = WHSWorkExecuteDisplay::prepareControlData(_controlMap.lookup(#XMLControlData));
        if (this.isTextInPrimaryInputArea(_enabled, _controlMap, data, pageInfo.parmMenuItemName()))
        {
            inputFieldFound = true;
            return WHSMobileAppXMLDisplayArea::PrimaryInputArea;
        }

        return WHSMobileAppXMLDisplayArea::InfoAndSecondaryInputArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTextInPrimaryInputAreaDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to check if the current text control is in the primary input area.
    /// </summary>
    /// <param name = "_enabled">Boolean that indicates if the control is enabled or not.</param>
    /// <param name = "_controlMap">Map that contains the control properties.</param>
    /// <param name = "_data">Data for the current control.</param>
    /// <param name = "_menuItemName">The menu item name of the currrent flow.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object where a boolean that indicates if the text control is in the primary input area or not can be returned.</param>
    static delegate void isTextInPrimaryInputAreaDelegate(boolean _enabled, Map _controlMap, str _data, WHSMenuItemName _menuItemName, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTextInPrimaryInputArea</Name>
				<Source><![CDATA[
    protected boolean isTextInPrimaryInputArea(boolean _enabled, Map _controlMap, str _data, WHSMenuItemName _menuItemName)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        WHSMobileAppServiceDecoratorRuleDefaultDisplayArea::isTextInPrimaryInputAreaDelegate(_enabled, _controlMap, _data, _menuItemName, result);
        if (result.hasResult())
        {
            return result.result();
        }
        return _enabled && (this.isError(_controlMap) || this.hasNewValue(_controlMap, _data, false) || ((_data == '') && (!inputFieldFound)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayAreaForCombobox</Name>
				<Source><![CDATA[
    private WHSMobileAppDisplayArea calculateDisplayAreaForCombobox(boolean _enabled, Map _controlMap)
    {
        str options = _controlMap.lookup(#XMLControlData);
        if ((options == '') || !_enabled)
        {
            return WHSMobileAppXMLDisplayArea::InfoAndSecondaryInputArea;
        }

        str data = WHSWorkExecuteDisplay::prepareControlData(_controlMap.lookup(#XMLControlSelected));
        if (this.isComboboxInPrimaryInputArea(_enabled, _controlMap, data, pageInfo.parmMenuItemName()))
        {
            inputFieldFound = true;
            return WHSMobileAppXMLDisplayArea::PrimaryInputArea;
        }

        return WHSMobileAppXMLDisplayArea::InfoAndSecondaryInputArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isComboboxInPrimaryInputAreaDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to check if the current combobox control is in the primary input area.
    /// </summary>
    /// <param name = "_enabled">Boolean that indicates if the control is enabled or not.</param>
    /// <param name = "_controlMap">Map that contains the control properties.</param>
    /// <param name = "_data">Data for the current control.</param>
    /// <param name = "_menuItemName">The menu item name of the currrent flow.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object where a boolean that indicates if the combobox control is in the primary input area or not can be returned.</param>
    static delegate void isComboboxInPrimaryInputAreaDelegate(boolean _enabled, Map _controlMap, str _data, WHSMenuItemName _menuItemName, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isComboboxInPrimaryInputArea</Name>
				<Source><![CDATA[
    protected boolean isComboboxInPrimaryInputArea(boolean _enabled, Map _controlMap, str _data, WHSMenuItemName _menuItemName)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        WHSMobileAppServiceDecoratorRuleDefaultDisplayArea::isComboboxInPrimaryInputAreaDelegate(_enabled, _controlMap, _data, _menuItemName, result);
        if (result.hasResult())
        {
            return result.result();
        }
        return this.isError(_controlMap) || (!inputFieldFound && this.hasNewValue(_controlMap, _data, true)) ||
           (lastEditableField && lastEditableField.lookup(#XMLControlDisplayArea) == WHSMobileAppXMLDisplayArea::PrimaryInputArea);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayAreaForButton</Name>
				<Source><![CDATA[
    private WHSMobileAppDisplayArea calculateDisplayAreaForButton(Map _controlMap)
    {
        if (this.isButtonInPrimaryActionArea(_controlMap, pageInfo.parmMenuItemName()))
        {
            return WHSMobileAppXMLDisplayArea::PrimaryActionArea;
        }
        else
        {
            return WHSMobileAppXMLDisplayArea::EmptyArea;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isButtonInPrimaryActionAreaDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to check if the current button control is in the primary action area.
    /// </summary>
    /// <param name = "_controlMap">Map that contains the control properties.</param>
    /// <param name = "_menuItemName">The menu item name of the currrent flow.</param>
    /// <param name = "_result">An <c>EventHandlerAcceptResult</c> object where a boolean that indicates if the button control is in the primary action area or not can be returned.</param>
    static delegate void isButtonInPrimaryActionAreaDelegate(Map _controlMap, WHSMenuItemName _menuItemName, EventHandlerAcceptResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isButtonInPrimaryActionArea</Name>
				<Source><![CDATA[
    protected boolean isButtonInPrimaryActionArea(Map _controlMap, WHSMenuItemName _menuItemName)
    {
        EventHandlerAcceptResult result = EventHandlerAcceptResult::newSingleResponse();
        WHSMobileAppServiceDecoratorRuleDefaultDisplayArea::isButtonInPrimaryActionAreaDelegate(_controlMap, _menuItemName, result);
        if (result.isAccepted())
        {
            return true;
        }
        WHSMobileAppControlName controlName = _controlMap.lookup(#XMLControlName);
        return ((_controlMap.lookup(#XMLControlDefaultButton) == '1') ||
                (controlName == #RFAddLP) ||
                (controlName == #RFDone)  ||
                (controlName == #RFReturn));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isError</Name>
				<Source><![CDATA[
    private boolean isError(Map _controlMap)
    {
        return _controlMap.lookup(#XMLControlError) == "1";
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNewValue</Name>
				<Source><![CDATA[
    private boolean hasNewValue(Map _controlMap, str _data, boolean _considerEmptyFieldAsNewValue)
    {
        if (!_considerEmptyFieldAsNewValue && (_data == ''))
        {
            return false;
        }

        if (!oldControlsMap)
        {
            this.setOldControlsMap();
        }

        WHSMobileAppControlName controlName = _controlMap.lookup(#XMLControlName);
        if (!oldControlsMap.exists(controlName))
        {
            return true;
        }

        if (oldControlsMap.lookup(controlName) != _data)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOldControlsMap</Name>
				<Source><![CDATA[
    private void setOldControlsMap()
    {
        if (pageInfo.parmUserSessionId() == emptyGuid())
        {
            oldControlsMap = WHSMobileAppFieldValueMap::construct();
            return;
        }
        using (WHSMobileAppIsInboundContext context = WHSMobileAppIsInboundContext::current())
        {
            context.parmIsInboundContainer(true);
            oldControlsMap = WHSMobileAppFieldValueMap::constructFromContainer(pageInfo.parmReceivedContainer());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>