<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticFormEditCommitChangesApply</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMAnalyticFormEditCommitAttribute(CFMJournalEditActionType::Apply)]
class CFMAnalyticFormEditCommitChangesApply extends CFMAnalyticFormEditCommitChanges
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearUncommitted</Name>
				<Source><![CDATA[
    private void clearUncommitted()
    {
        CFMAnalyticDataEditUncommitted dataEditUncommitted;
        CFMJournalTransLog transLog;

        update_recordSet transLog
            setting Uncommitted = NoYes::No
            where transLog.JournalTable == journalTable.RecId
        join dataEditUncommitted
            where dataEditUncommitted.SourceRefRecId == transLog.SourceHeader
                && dataEditUncommitted.SourceType == transLog.SourceType
                && dataEditUncommitted.JournalTable == journalTable.RecId;

        delete_from dataEditUncommitted
            where dataEditUncommitted.JournalTable == journalTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOpenTransQuery</Name>
				<Source><![CDATA[
    private Query custVendOpenTransQuery(CFMAnalyticDataEditUncommitted _dataEditUncommitted)
    {
        TableId transOpenTableId, transTableId;
        FieldId transOpenRecFieldId, transRecId, dataAreaFieldId;

        Query query = new Query();

        switch (_dataEditUncommitted.SourceType)
        {
            case CFMJournalTransSourceType::CustDebt:
                transOpenTableId = tableNum(CustTransOpen);
                transTableId = tableNum(CustTrans);
                transOpenRecFieldId = fieldNum(CustTransOpen, RecId);
                transRecId = fieldNum(CustTrans, RecId);
                dataAreaFieldId = fieldNum(CustTrans, DataAreaId);
                break;

            case CFMJournalTransSourceType::VendDebt:
                transOpenTableId = tableNum(VendTransOpen);
                transTableId = tableNum(VendTrans);
                transOpenRecFieldId = fieldNum(VendTransOpen, RecId);
                transRecId = fieldNum(VendTrans, RecId);
                dataAreaFieldId = fieldNum(VendTrans, DataAreaId);
                break;
        }

        QueryBuildDataSource qbdsOpenTrans = query.addDataSource(transOpenTableId);
        qbdsOpenTrans.fields().addField(transOpenRecFieldId);
        qbdsOpenTrans.addRange(transOpenRecFieldId).value(queryValue(_dataEditUncommitted.SourceRefRecId));

        QueryBuildDataSource qbdsCustVendTrans = qbdsOpenTrans.addDataSource(transTableId);
        qbdsCustVendTrans.fields().addField(transRecId);
        qbdsCustVendTrans.fields().addField(dataAreaFieldId);
        qbdsCustVendTrans.relations(true);

        qbdsOpenTrans.firstOnly(true);
        query.allowCrossCompany(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChanges</Name>
				<Source><![CDATA[
    protected void runChanges()
    {
        CFMJournalTrans journalTrans;
        CFMAnalyticDataEditUncommitted dataEditUncommitted;

        update_recordSet journalTrans
            setting Uncommitted = NoYes::No
            where journalTrans.JournalId == journalTable.JournalId;

        while select dataEditUncommitted
            where dataEditUncommitted.JournalTable == journalTable.RecId
        {
            switch (dataEditUncommitted.SourceType)
            {
                case CFMJournalTransSourceType::CustDebt:
                case CFMJournalTransSourceType::VendDebt:
                    this.updateCustVendDebt(dataEditUncommitted);
                    break;

                case CFMJournalTransSourceType::PaymentRequest:
                    this.updatePaymentRequest(dataEditUncommitted);
                    break;
            }
        }

        this.clearUncommitted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendDebt</Name>
				<Source><![CDATA[
    private void updateCustVendDebt(CFMAnalyticDataEditUncommitted _dataEditUncommitted)
    {
        CustVendTrans custVendTrans, custVendTransUpdate;
        CustVendTransOpen custVendTransOpen, custVendTransOpenUpdate;

        void findRecordsToUpdate()
        {
            switch(custVendTrans.TableId)
            {
                case tableNum(VendTrans):
                    custVendTransUpdate = VendTrans::find(custVendTrans.RecId, true);
                    custVendTransOpenUpdate = VendTransOpen::find(custVendTransOpen.RecId, true);
                    break;

                case tableNum(CustTrans):
                    custVendTransUpdate = CustTrans::find(custVendTrans.RecId, true);
                    custVendTransOpenUpdate = CustTransOpen::find(custVendTransOpen.RecId, true);
                    break;
            }
        }

        QueryRun queryRun = new QueryRun(this.custVendOpenTransQuery(_dataEditUncommitted));

        if (queryRun.next())
        {
            custVendTransOpen = queryRun.getNo(1);
            custVendTrans = queryRun.getNo(2);

            changeCompany(custVendTrans.company())
            {
                findRecordsToUpdate();

                if (custVendTransUpdate.RecId && custVendTransOpenUpdate.RecId)
                {
                    custVendTransOpenUpdate.DueDate = _dataEditUncommitted.DueDate;
                    custVendTransUpdate.PaymMode = _dataEditUncommitted.PaymMode;
                    custVendTransUpdate.PaymSpec = _dataEditUncommitted.PaymSpec;

                    custVendTransOpenUpdate.update();
                    custVendTransUpdate.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentRequest</Name>
				<Source><![CDATA[
    private void updatePaymentRequest(CFMAnalyticDataEditUncommitted _dataEditUncommitted)
    {
        CFMPaymentRequestTable  paymentRequest = CFMPaymentRequestTable::findRecID(_dataEditUncommitted.SourceRefRecId, true);

        if (paymentRequest)
        {
            paymentRequest.PaymMode = _dataEditUncommitted.PaymMode;
            paymentRequest.PaymSpec = _dataEditUncommitted.PaymSpec;
            paymentRequest.PaymentAccountNum = _dataEditUncommitted.PaymentAccountNum;
            paymentRequest.PaymentAccountType = _dataEditUncommitted.PaymentAccountType;
            paymentRequest.PaymentDate = _dataEditUncommitted.DueDate;

            paymentRequest.paymentDateModified();
            paymentRequest.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>