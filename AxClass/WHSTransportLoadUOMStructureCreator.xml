<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransportLoadUOMStructureCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransportLoadUOMStructureCreator</c> class is used to create UOM structure for a transport load.
/// </summary>
[SysTableNameFactory(tableStr(WHSTransportLoad))]
public class WHSTransportLoadUOMStructureCreator extends WHSUOMStructureCreator
{
    protected WHSTransportLoad transportLoad;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>WHSTransportLoad</c> table.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSTransportLoad</c> table.
    /// </param>
    public void initFromBuffer(Common _common)
    {
        transportLoad = _common as WHSTransportLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates UOM structure.
    /// </summary>
    public void createUOMStructure()
    {
        WHSTransportLoadPickWorkLinesCollection transportLoadPickWorkLinesCollection 
            = WHSTransportLoadPickWorkLinesCollection::newFromTransportLoadWithTransTypeFilter(transportLoad, InventTransType::TransferOrderShip);

        MapEnumerator transportLoadPickWorkLinesEnumerator = transportLoadPickWorkLinesCollection.getCollectionEnumerator();
        
        while (transportLoadPickWorkLinesEnumerator.moveNext())
        {
            WHSWorkLineList currentWorkLineList = transportLoadPickWorkLinesEnumerator.currentValue();

            this.createUOMStructureFromInitialPickWorkLines(currentWorkLineList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUOMStructureFromInitialPickWorkLines</Name>
				<Source><![CDATA[
    private void createUOMStructureFromInitialPickWorkLines(WHSWorkLineList _currentWorkLineList)
    {
        ListEnumerator      workLineEnumerator = _currentWorkLineList.getWorkLineListEnumerator();
        WHSWorkId           loopWorkId;
        WHSLicensePlateId   targetLicensePlateId;
        boolean             createUOMCriteria;
        RecId               prevLoadLine;
        WHSWorkId           prevWorkId;

        while (workLineEnumerator.moveNext())
        {
            WHSWorkLine     initialPickWorkLine = workLineEnumerator.current();
            WHSWorkTable    workTable = initialPickWorkLine.whsWorkTable();
            WHSLoadLine     loadLine = WHSLoadLine::findbyRecId(initialPickWorkLine.LoadLineRefRecId);

            if (initialPickWorkLine.WorkId != loopWorkId)
            {
                createUOMCriteria                           = false;
                [createUOMCriteria, targetLicensePlateId]   = this.getTargetLicensePlateAndCreateUOMCriteria(workTable, initialPickWorkLine);
            }

            if (createUOMCriteria)
            {
                this.createOrUpdateTransferModuleUOMStructure(targetLicensePlateId, loadLine, initialPickWorkLine.InventQtyWork);

                // Using license plate for receiving a transfer order requires ASN items so we need to create them as part of the ship process.
                // The update or creation of ASN items must occur only once per <c>WHSLoadLine</c> in order to avoid adding the quantity of
                // the <c>InventTrans</c> records twice for the same line.
                if (loadLine.RecId != prevLoadLine || initialPickWorkLine.WorkId != prevWorkId)
                {
                    prevLoadLine    = loadLine.data().RecId;
                    prevWorkId      = initialPickWorkLine.WorkId;
                    this.WHSShipmentASNCreator().generateASNItems(targetLicensePlateId, initialPickWorkLine, WHSModule::Transfer);
                }
            }

            loopWorkId = initialPickWorkLine.WorkId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>