<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoicePostNotStocked</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesInvoicePostNotStocked
{
    Common journalLine;
    SalesLine salesLine;
    SalesParmLine salesParmLine;
    RecordInsertList recordInsertListCustInvoicePackingSlipMatch;

    SalesQty updateNow;
    InventQty updateNowInvent;
    PdsCWInventQty cwUpdateNow;
    SalesQty invoiceUpdatedOnly;
    AmountCur lineValue;
    AmountCur lineValueInclTax;
    AmountCur discValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected AmountCur lineAmount()
    {
        CustInvoiceTrans custInvoiceTrans = this.parmJournalLine();

        return custInvoiceTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountTax</Name>
				<Source><![CDATA[
    protected LineAmountTax lineAmountTax()
    {
        CustInvoiceTrans custInvoiceTrans = this.parmJournalLine();

        return custInvoiceTrans.LineAmountTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchInvoicePackingSlipNotStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches packing slip lines and invoice lines for sales order lines that are not stocked.
    /// </summary>
    protected void matchInvoicePackingSlipNotStocked()
    {
        SalesQty deliverNow;

        List list = SalesParmSubLine::buildSalesParmSubLineList(salesParmLine.RecId);
        Counter subLines = list.elements();

        if (subLines > 0)
        {
            ListEnumerator le = list.getEnumerator();
            SalesQty salesQtyLeft = salesParmLine.DeliverNow;

            while (le.moveNext())
            {
                SalesParmSubLine salesParmSubLine = le.current();

                if (subLines == 1)
                {
                    deliverNow = salesQtyLeft;
                }
                else
                {
                    deliverNow = salesParmSubLine.DeliverNow;
                }

                subLines--;

                CustPackingSlipTrans custPackingSlipTrans = CustPackingSlipTrans::findRecId(salesParmSubLine.JournalRefRecId,true);
                CustInvoicePackingSlipQuantityMatch::matchPackingSlipTransSourceDocumentLine(recordInsertListCustInvoicePackingSlipMatch, this.sourceDocumentLine(), custPackingSlipTrans,deliverNow);

                salesQtyLeft -= deliverNow;
            }
        }
        else
        {
            this.matchInvoicePackingSlipSpecQtyAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchInvoicePackingSlipSpecQtyAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches invoice lines against packing slip lines for order lines that are not stocked when the
    /// specified quantity is not equal to the packing slip.
    /// </summary>
    protected void matchInvoicePackingSlipSpecQtyAll()
    {
        SalesQty quantityMatched;
        CustPackingSlipTrans custPackingSlipTrans;

        if (salesParmLine.DeliverNow * salesLine.SalesQty > 0)
        {
            int sign = salesParmLine.DeliverNow > 0 ? 1 : -1;
            while select forupdate custPackingSlipTrans
                where custPackingSlipTrans.InventTransId == salesParmLine.InventTransId
                   && custPackingSlipTrans.FullyMatched == NoYes::No
            {
                SalesQty remainSalesFinancial = custPackingSlipTrans.remainSalesFinancial();

                SalesQty quantityToMatch = sign * min(abs(remainSalesFinancial),abs(salesParmLine.DeliverNow - invoiceUpdatedOnly - quantityMatched));

                CustInvoicePackingSlipQuantityMatch::matchPackingSlipTransSourceDocumentLine(recordInsertListCustInvoicePackingSlipMatch, this.sourceDocumentLine(), custPackingSlipTrans,quantityToMatch);

                quantityMatched += quantityToMatch;

                if (quantityMatched == (salesParmLine.DeliverNow - invoiceUpdatedOnly))
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _journalLine, SalesLine _salesLine, SalesParmLine _salesParmLine, RecordInsertList _recordInsertListCustInvoicePackingSlipMatch)
    {
        this.parmJournalLine(_journalLine);
        this.parmSalesLine(_salesLine);
        this.parmSalesParmLine(_salesParmLine);
        this.parmRecordInsertList(_recordInsertListCustInvoicePackingSlipMatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscValue</Name>
				<Source><![CDATA[
    public AmountCur parmDiscValue()
    {
        return discValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceUpdatedOnly</Name>
				<Source><![CDATA[
    public SalesQty parmInvoiceUpdatedOnly()
    {
        return invoiceUpdatedOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalLine</Name>
				<Source><![CDATA[
    protected Common parmJournalLine(Common _journalLine = journalLine)
    {
        journalLine = _journalLine;

        return journalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineValue</Name>
				<Source><![CDATA[
    public AmountCur parmLineValue()
    {
        return lineValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineValueInclTax</Name>
				<Source><![CDATA[
    public AmountCur parmLineValueInclTax()
    {
        return lineValueInclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordInsertList</Name>
				<Source><![CDATA[
    protected RecordInsertList parmRecordInsertList(RecordInsertList _recordInsertListCustInvoicePackingSlipMatch = recordInsertListCustInvoicePackingSlipMatch)
    {
        recordInsertListCustInvoicePackingSlipMatch = _recordInsertListCustInvoicePackingSlipMatch;

        return recordInsertListCustInvoicePackingSlipMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    protected SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesParmLine</Name>
				<Source><![CDATA[
    protected SalesParmLine parmSalesParmLine(SalesParmLine _salesParmLine = salesParmLine)
    {
        salesParmLine = _salesParmLine;

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateNow</Name>
				<Source><![CDATA[
    public SalesQty parmUpdateNow()
    {
        return updateNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateNowInvent</Name>
				<Source><![CDATA[
    public InventQty parmUpdateNowInvent()
    {
        return updateNowInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCwUpdateNow</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCwUpdateNow()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNotStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs posting routines for not stocked sales order lines.
    /// </summary>
    public void postNotStocked()
    {
        updateNow = this.qty();
        updateNowInvent = 0;
        cwUpdateNow = 0;
        invoiceUpdatedOnly = this.qtyPhysicalNow();

        lineValue = this.lineAmount();
        lineValueInclTax = this.lineAmountTax() + lineValue;
        discValue = this.sumLineDisc();
        this.matchInvoicePackingSlipNotStocked();

        if (salesLine.SalesQty < 0)
        {
            SalesQty varianceSalesQty = salesParmLine.DeliverNow + salesParmLine.RemainAfter - salesParmLine.RemainBefore;
            SalesQty registerQty = invoiceUpdatedOnly - varianceSalesQty;
            TradeNonStockedRegistrationHelper tradeNonStockedRegistrationHelper = TradeNonStockedRegistrationHelper::newFromSalesPurchLine(salesLine);
            if (registerQty < 0)
            {
                //Delete the pending receipt and pending registration records for the quantity being posted.
                tradeNonStockedRegistrationHelper.updatePendingQuantityOnPosting(-registerQty);
            }
            else
            {
                tradeNonStockedRegistrationHelper.synchronizePendingRegistration(registerQty,false);
            }
        }

        SalesLineType salesLineType = salesLine.type();
        //For subscription lines, RemainSalesPhysical is reset to the line quantity if it would become zero; otherwise set to RemainAfter
        salesLine.RemainSalesPhysical = (salesLineType.mustInventBeExpectedAgain() && salesParmLine.RemainAfter == 0)? salesLine.SalesQty: salesParmLine.RemainAfter;
        salesLine.RemainSalesFinancial += invoiceUpdatedOnly;
        salesLine.RemainSalesFinancial -= updateNow;

        if (salesLine.returnItem())
        {
            salesLine.setReturnLineStatus(DocumentStatus::Invoice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    protected SalesInvoicedQty qty()
    {
        CustInvoiceTrans custInvoiceTrans = this.parmJournalLine();

        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPhysicalNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that is being physically updated for the invoiced sales order line.
    /// </summary>
    /// <returns>
    /// The quantity that is being physically updated for the invoiced sales order line.
    /// </returns>
    /// <remarks>
    /// The <c>qtyPhysicalNow</c> method is used for not stocked order lines.
    /// </remarks>
    protected SalesQty qtyPhysicalNow()
    {
        SalesQty qtyPhysicalNow;
        SalesQty physicalQtyBefore = salesLine.deliveredInTotal();
        SalesQty financialQtyPosted = salesLine.invoicedInTotal();

        if (physicalQtyBefore)
        {
            if (this.qty() * salesLine.SalesQty >0)
            {
                if (abs(physicalQtyBefore) >= abs(financialQtyPosted))
                {
                    qtyPhysicalNow = 0;
                }
                else
                {
                    //Not packing slip posted enough
                    qtyPhysicalNow = financialQtyPosted - physicalQtyBefore;
                }
            }
            else
            {
                if (abs(physicalQtyBefore) >= abs(financialQtyPosted))
                {
                    //Not packing slip posted enough
                    qtyPhysicalNow = financialQtyPosted - physicalQtyBefore;
                }
                else
                {
                    qtyPhysicalNow = 0;
                }
            }
        }
        else
        {
            qtyPhysicalNow = this.qty();
        }

        return qtyPhysicalNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLine</Name>
				<Source><![CDATA[
    protected RefRecId sourceDocumentLine()
    {
        CustInvoiceTrans custInvoiceTrans = this.parmJournalLine();

        return custInvoiceTrans.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumLineDisc</Name>
				<Source><![CDATA[
    protected SalesSumLineDiscAmount sumLineDisc()
    {
        CustInvoiceTrans custInvoiceTrans = this.parmJournalLine();

        return custInvoiceTrans.SumLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesInvoicePostNotStocked construct(CustInvoiceTrans _custInvoiceTrans, SalesLine _salesLine, SalesParmLine _salesParmLine, RecordInsertList _recordInsertListCustInvoicePackingSlipMatch)
    {
       return new SalesInvoicePostNotStocked(_custInvoiceTrans, _salesLine, _salesParmLine, _recordInsertListCustInvoicePackingSlipMatch);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>