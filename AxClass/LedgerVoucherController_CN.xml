<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller class for <c>LedgerVoucherReport_CN</c> report.
/// </summary>
public class LedgerVoucherController_CN extends SrsReportRunController implements BatchRetryable
{
    LedgerVoucherTmp_CN     ledgerVoucherReportTmp;

    Map     mapAllDataForProforma;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndPostProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check and execute post proforma to get transaction data.
    /// </summary>
    /// <returns>
    /// Result of post proforma.
    /// </returns>
    protected boolean checkAndPostProforma()
    {
        LedgerVoucherContract_CN    contract;

        Map                         mapProformaData;
        Query                       query;
        QueryRun                    queryRun;
        QueryBuildDataSource        qbds;

        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalCheckPost  ledgerJournalCheckPost;

        boolean ret = true;

        contract = this.parmReportContract().parmRdpContract();

        mapAllDataForProforma = new Map(Types::Class, Types::Record);

        query = new Query(queryStr(LedgerVoucherLedgerJournalTrans_CN));
        qbds = query.dataSourceTable(tableNum(LedgerJournalTrans));
        SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, LedgerVoucherType_CN)).value(queryValue(LedgerVoucherType_CN::findByNaturalKey(contract.parmVoucherType()).RecId));
        SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, Voucher_CN)).value(contract.parmVoucherNumber());
        if (contract.parmIsPrintFromJournalLine())
        {
            SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, JournalNum)).value(contract.parmJournalNumber());
        }
        else
        {
            SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, TransDate)).value(queryRange(contract.parmFromDate(), contract.parmToDate()));
        }
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
            ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
            if (!ledgerJournalTable.Posted)
            {
                ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTrans(
                    ledgerJournalTrans,
                    LedgerJournalVoucher::Voucher,
                    NoYes::Yes);
                ledgerJournalCheckPost.parmPostProforma_CN(true);
                try
                {
                    LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

                    mapProformaData = ledgerJournalCheckPost.parmJournalEntryMap_CN();

                    mapAllDataForProforma.insert(mapProformaData, ledgerJournalTrans);
                }
                catch
                {
                    //The voucher report print job has been cancelled, because the journal cannot be posted
                    ret = checkFailed("@GLS222611");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProformaDataToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data get from post proforma to the tmp table.
    /// </summary>
    protected void insertProformaDataToTmpTable()
    {
        List                        value;
        ListEnumerator              valueListEnumerator;

        Map                         mapProformaDataLocal;
        MapEnumerator               dataEnumerator;
        MapEnumerator               allDataMapEnumerator;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalEntry_w       generalJournalEntryW;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        LedgerVoucherContract_CN    contract;
        LedgerJournalTrans          ledgerJournalTransLocal;

        Map                         mapGeneralJournal;
        MapEnumerator               generalJournalEnum;

        value           = new List(Types::Record);
        contract        = this.parmReportContract().parmRdpContract();
        allDataMapEnumerator = mapAllDataForProforma.getEnumerator();
        while (allDataMapEnumerator.moveNext())
        {
            mapProformaDataLocal    = allDataMapEnumerator.currentKey();
            ledgerJournalTransLocal = allDataMapEnumerator.currentValue();

            dataEnumerator = mapProformaDataLocal.getEnumerator();
            while (dataEnumerator.moveNext())
            {
                mapGeneralJournal   = dataEnumerator.currentKey();
                generalJournalEnum = mapGeneralJournal.getEnumerator();
                if (generalJournalEnum.moveNext())
                {
                    generalJournalEntry     = generalJournalEnum.currentKey();
                    generalJournalEntryW    = generalJournalEnum.currentValue();
                }
                if (!contract.parmVoucherNumber() || strScan(contract.parmVoucherNumber(), generalJournalEntryW.Voucher_CN, 0, strLen(contract.parmVoucherNumber())) > 0)
                {
                    value               = dataEnumerator.currentValue();
                    valueListEnumerator = value.getEnumerator();
                    while (valueListEnumerator.moveNext())
                    {
                        //Enumerate the list to get the data of 'GeneralJournalAccountEntry'
                        ledgerVoucherReportTmp.clear();
                        generalJournalAccountEntry = valueListEnumerator.current();
                        generalJournalAccountEntry.calculateInternalValues();

                        LedgerVoucherDP_CN::insertDataToTmpTable(
                            ledgerJournalTransLocal.JournalNum,
                            generalJournalEntry, generalJournalEntryW,
                            generalJournalAccountEntry,
                            ledgerVoucherReportTmp,
                            contract.parmIsPrintLedgerDimension(),
                            contract.parmDimensionDisplayLayout());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalEntry_W       generalJournalEntryW;
        LedgerVoucherType_CN        ledgerVoucherType;
        LedgerPrintLayout_CN        ledgerPrintLayout;
        LedgerVoucherContract_CN    contract;

        FromDate    defaultFromDate;
        ToDate      defaultToDate;

        super();

        //Ledger voucher
        this.parmDialogCaption("@SYS4004272");

        contract = this.parmReportContract().parmRdpContract();
        if (this.parmArgs().dataset())
        {
            switch (this.parmArgs().dataset())
            {
                case tableNum(LedgerJournalTrans):
                    ledgerJournalTrans = this.parmArgs().record();
                    contract.parmIsPrintFromJournalLine(true);
                    if (ledgerJournalTrans)
                    {
                        ledgerVoucherType = LedgerVoucherType_CN::find(ledgerJournalTrans.LedgerVoucherType_CN);
                        contract.parmVoucherType(ledgerVoucherType.Id);
                        contract.parmJournalNumber(ledgerJournalTrans.JournalNum);
                        contract.parmVoucherNumber(ledgerJournalTrans.Voucher_CN);
                    }
                    else
                    {
                        contract.parmVoucherType('');
                        contract.parmJournalNumber('');
                        contract.parmVoucherNumber('');
                    }
                    break;

                case tableNum(GeneralJournalEntry):
                    generalJournalEntry = this.parmArgs().record();
                    contract.parmIsPrintFromJournalLine(false);
                    if (generalJournalEntry)
                    {
                        generalJournalEntryW = GeneralJournalEntry_W::findByGeneralJournalEntry(generalJournalEntry.RecId);
                        ledgerVoucherType = LedgerVoucherType_CN::find(generalJournalEntryW.LedgerVoucherType_CN);
                        contract.parmVoucherType(ledgerVoucherType.Id);
                        contract.parmFromDate(generalJournalEntry.AccountingDate);
                        contract.parmToDate(generalJournalEntry.AccountingDate);
                        contract.parmVoucherNumber(generalJournalEntryW.Voucher_CN);
                        contract.parmPostingLayer(generalJournalEntry.PostingLayer);
                    }
                    else
                    {
                        contract.parmVoucherType('');
                        contract.parmFromDate(dateNull());
                        contract.parmToDate(dateNull());
                        contract.parmVoucherNumber('');
                    }
                    break;
            }
        }
        else
        {
            [defaultFromDate, defaultToDate] = LedgerVoucherContract_CN::getDefaultDates();
            contract.parmIsPrintFromJournalLine(false);
            contract.parmFromDate(defaultFromDate);
            contract.parmToDate(defaultToDate);
            contract.parmVoucherType('');
            contract.parmVoucherNumber('');
        }

        if (ledgerVoucherType)
        {
            select firstOnly Code from ledgerPrintLayout
                order by ledgerPrintLayout.Code
                where ledgerPrintLayout.LedgerPrintLayoutGroup == ledgerVoucherType.LedgerPrintLayoutGroup;
            contract.parmPrintLayoutCode(enum2str(ledgerPrintLayout.Code));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        LedgerVoucherContract_CN    contract;
        SRSReportRunPermission      srsPermission;
        RecId                       tempTableRecId;

        super();
        contract    = this.parmReportContract().parmRdpContract();
        switch (contract.parmPrePrintLevel())
        {
            case PrePrintLevel::PrePrinted:
                if (contract.parmPrintLayoutCode() == enum2str(LedgerPreprintVoucher_CN::TR101))
                {
                    this.parmReportContract().parmReportName(ssrsReportStr(LedgerVoucher_CN, VoucherTR101PreDesign));
                    // Ledger voucher - TR101
                    this.parmDialogCaption(strFmt("@SYS109730", "@SYS4004272", "@GLS222612"));
                }
                else
                {
                    this.parmReportContract().parmReportName(ssrsReportStr(LedgerVoucher_CN, VoucherTW101PreDesign));
                    // Ledger voucher - TW101
                    this.parmDialogCaption(strFmt("@SYS109730", "@SYS4004272", "@GLS222613"));
                }
                break;

            case PrePrintLevel::BlankPaper:
                if (contract.parmPrintLayoutCurrency() == LedgerPrintLayoutCurrency_CN::DefaultCurrency)
                {
                    this.parmReportContract().parmReportName(ssrsReportStr(LedgerVoucher_CN, VoucherTR101BlankDesign));
                    // Ledger voucher - Default currency
                    this.parmDialogCaption(strFmt("@SYS109730", "@SYS4004272", "@SYS23938"));
                }
                else
                {
                    this.parmReportContract().parmReportName(ssrsReportStr(LedgerVoucher_CN, VoucherTW101BlankDesign));
                    // Ledger voucher - Foreign currency
                    this.parmDialogCaption(strFmt("@SYS109730", "@SYS4004272", "@SYS79744"));
                }
                break;
        }

        if (mapAllDataForProforma)
        {
            this.insertProformaDataToTmpTable();
        }
        if (ledgerVoucherReportTmp)
        {
            contract.parmLedgerVoucherReportTmpPhysicalTableName(ledgerVoucherReportTmp.getPhysicalTableName());
        }
        else
        {
            contract.parmLedgerVoucherReportTmpPhysicalTableName('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        LedgerVoucherContract_CN    contract;
        boolean ret;

        ret = super();

        contract = this.parmReportContract().parmRdpContract();

        if (ret && contract.parmIsPrintFromJournalLine())
        {
            ret = this.checkAndPostProforma();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00012, funcName());

        LedgerVoucherController_CN   controller;

        if (!LedgerParameters::isChineseVoucher_CN())
        {
            // The Chinese voucher system must be enabled first.
            checkFailed(
                "@GLS63823",
                '',
                SysInfoAction_Formrun::newFormnameControlnameDesc(
                    formStr(LedgerParameters),
                    formControlStr(LedgerParameters, General_ChineseVoucher_CN),
                    "@SYS24215"));
            return;
        }

        controller = new LedgerVoucherController_CN();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(LedgerVoucher_CN, VoucherTR101PreDesign));
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>