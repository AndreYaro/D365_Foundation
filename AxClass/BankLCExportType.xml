<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCExportType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCExportType</c> class handles the business logic for the <c>BankLCExport</c> table.
/// </summary>
class BankLCExportType extends BankLCType
{
    VersioningUpdateType versioningUpdateType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBankLCExportTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and inserts a <c>BankLCExport</c> record from the specified <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesTable">
    ///    A <c>SalesTable</c> record.
    /// </param>
    /// <returns>
    ///    The created <c>BankLCExport</c> record.
    /// </returns>
    protected BankLCExport createBankLCExportTable(SalesTable _salesTable)
    {
        BankLCExport newBankLCExport;

        newBankLCExport.clear();
        newBankLCExport.initValue();
        newBankLCExport.initFromSalesTable(_salesTable);

        newBankLCExport.insert();

        return newBankLCExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and inserts the <c>BankLCExportLine</c> records for the specified letter of credit.
    /// </summary>
    /// <param name="_bankLCExport">
    ///    The letter of credit.
    /// </param>
    /// <param name="_defaultShippingDate">
    ///    The default shipping date.
    /// </param>
    /// <param name="_salesTable">
    ///    The <c>SalesTable</c> table for which to create shipment lines.
    /// </param>
    /// <returns>
    ///    The created shipment line
    /// </returns>
    private BankLCExportLine createShipmentLine(
        BankLCExport    _bankLCExport,
        TransDate       _defaultShippingDate,
        SalesTable      _salesTable)
    {
        BankLCExportLine          newBankLCExportLine;
        BankLCExportSalesTotals   salesTotals;

        salesTotals = BankLCExportSalesTotals::construct(
                        _salesTable,
                        BankLCSalesPurchQtyCategoryType::Ordered);
        salesTotals.parmDeliveryDate(_defaultShippingDate);
        salesTotals.calc();

        newBankLCExportLine.initShipmentLine(
            _bankLCExport.RecId,
            _defaultShippingDate,
            salesTotals.totalAmount());

        if (newBankLCExportLine.ShipmentAmountCur != 0
            && newBankLCExportLine.validateWrite())
        {
            newBankLCExportLine.insert();
        }

        return newBankLCExportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BankLCExportLine</c> records for the letter of credit.
    /// </summary>
    public void createShipmentLines()
    {
        if (this.isDataLoaded())
        {
            this.doCreateShipmentLines();
        }
        else
        {
            BankLCExportType::createShipmentLinesOnServer(this.parmBankLCRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCreateShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BankLCExportLine</c> records for the letter of credit.
    /// </summary>
    private void doCreateShipmentLines()
    {
        #OCCRetryCount

        boolean         isRetry = false;
        BankLCExport    bankLCExportLocal;
        SalesTable      salesTableLocal;
        SalesLine       salesLine;
        TransDate       curLCLineShippingDate;
        TransDate       curSalesLineShippingDate;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                this.reLoadBankLC();
            }

            bankLCExportLocal = this.parmBankLCExport();

            select firstonly salesTableLocal
                where salesTableLocal.SalesId == bankLCExportLocal.SalesTable;

            while select ShippingDateRequested from salesLine
                order by salesLine.ShippingDateRequested
                where salesLine.SalesId == bankLCExportLocal.SalesTable
                    && (salesLine.LineDeliveryType    == LineDeliveryType::DeliveryLine
                        || salesLine.LineDeliveryType == LineDeliveryType::OrderLine)
            {
                if (salesLine.ShippingDateRequested)
                {
                    curSalesLineShippingDate = salesLine.ShippingDateRequested;

                    if (curLCLineShippingDate != curSalesLineShippingDate)
                    {
                        if (curLCLineShippingDate)
                        {
                            this.createShipmentLine(
                                bankLCExportLocal,
                                curLCLineShippingDate,
                                salesTableLocal);
                        }

                        curLCLineShippingDate = curSalesLineShippingDate;
                    }
                }
            }

            if (curLCLineShippingDate)
            {
                this.createShipmentLine(
                    bankLCExportLocal,
                    curLCLineShippingDate,
                    salesTableLocal);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateInvoicePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCExportLine</c> table after the invoice has been posted.
    /// </summary>
    /// <param name="_bankLCExportLineRefRecId">
    ///    The record ID of the <c>BankLCExportLine</c> record that is marked on the invoice.
    /// </param>
    private void doUpdateInvoicePosted(BankLCLineRefRecId _bankLCExportLineRefRecId)
    {
        BankLCExport bankLCExportLocal;
        #OCCRetryCount

        try
        {
            ttsbegin;
            bankLCExportLocal = this.parmBankLCExport();
            bankLCExportLocal.ExportStatus = BankLCExportStatusType::UnderPayment;
            bankLCExportLocal.update();
            this.updateShipmentStatus(_bankLCExportLineRefRecId, BankLCExportShipmentStatusType::Invoiced);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdatePackingSlipPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCExportLine</c> record after the packing slip has been posted.
    /// </summary>
    /// <param name="_bankLCExportLineRefRecId">
    ///    The record ID of the <c>BankLCExportLine</c> record that is marked on the packing slip.
    /// </param>
    private void doUpdatePackingSlipPosted(BankLCLineRefRecId _bankLCExportLineRefRecId)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (this.parmVersioningUpdateType() == VersioningUpdateType::Cancel)
            {
                this.updateShipmentStatus(_bankLCExportLineRefRecId, BankLCExportShipmentStatusType::Open);
            }
            else
            {
            this.updateShipmentStatus(_bankLCExportLineRefRecId, BankLCExportShipmentStatusType::Shipped);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdatePaymentPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCExportLine</c> record after a payment is posted.
    /// </summary>
    /// <param name="_bankLCExportLineRefRecId">
    ///    The record ID of the <c>BankLCExportLine</c> record that is marked on the payment.
    /// </param>
    private void doUpdatePaymentPosted(BankLCLineRefRecId _bankLCExportLineRefRecId)
    {
        BankLCExport    bankLCExportLocal;

        #OCCRetryCount

        try
        {
            ttsbegin;

            this.updateShipmentStatus(_bankLCExportLineRefRecId, BankLCExportShipmentStatusType::PaymentReceived);

            bankLCExportLocal = this.parmBankLCExport();
            if (bankLCExportLocal.getBalanceAmount() == 0)
            {
                bankLCExportLocal.ExportStatus = BankLCExportStatusType::Closed;
            }
            else
            {
                bankLCExportLocal.ExportStatus = BankLCExportStatusType::UnderPayment;
            }

            bankLCExportLocal.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateUpdatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the related payment of a letter of credit can be posted.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    protected boolean doValidateUpdatePayment(RecId _ledgerJournalTransRefRecId)
    {
        boolean                     allOk = true;
        LedgerJournalTransBankLC    ledgerJournalTransBankLCLocal;
        BankLCExportLine            bankLCExportLineLocal;

        allOk = super(_ledgerJournalTransRefRecId);

        if (allOk)
        {
            ledgerJournalTransBankLCLocal = LedgerJournalTransBankLC::findByLedgerJournalTrans(_ledgerJournalTransRefRecId);
            bankLCExportLineLocal = BankLCExportLine::find(ledgerJournalTransBankLCLocal.BankLCLine);
            if (bankLCExportLineLocal.ExportShipmentStatus !=  BankLCExportShipmentStatusType::Invoiced)
            {
                // The shipment line is not invoiced.
                allOk = checkFailed("@SYS321191");
            }
        }

        if (allOk)
        {
            if (bankLCExportLineLocal.DocumentSubmitted != NoYes::Yes)
            {
                // The documents of the shipment have not been submitted to the bank.
                allOk = checkFailed("@SYS330404");
            }
        }

        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the invoice.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The invoice document.
    /// </param>
    /// <returns>
    ///    The invoice amount.
    /// </returns>
    protected AmountCur getInvoiceAmount(FormletterParmTable _formletterParmTable)
    {
        SalesTotals         salesTotals;
        SalesParmTable      salesParmTable;

        salesParmTable  = _formletterParmTable;
        salesTotals     = SalesTotals::construct(
                            salesParmTable,
                            salesParmTable.salesParmUpdate().SpecQty,
                            salesParmTable.salesParmUpdate().SumBy,
                            salesParmTable.ParmId,
                            salesParmTable.SalesId,
                            DocumentStatus::Invoice);
        salesTotals.calc();

        return salesTotals.totalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackingSlipAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the packing slip.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The packing slip document
    /// </param>
    /// <returns>
    ///    The packing slip amount.
    /// </returns>
    protected AmountCur getPackingSlipAmount(FormletterParmTable _formletterParmTable)
    {
        SalesTotals         salesTotals;
        SalesParmTable      salesParmTable;

        salesParmTable  = _formletterParmTable;
        salesTotals     = SalesTotals::construct(
                            salesParmTable,
                            salesParmTable.salesParmUpdate().SpecQty,
                            salesParmTable.salesParmUpdate().SumBy,
                            salesParmTable.ParmId,
                            salesParmTable.SalesId,
                            DocumentStatus::PackingSlip);
        salesTotals.calc();

        return salesTotals.totalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCExport</Name>
				<Source><![CDATA[
    public BankLCExport parmBankLCExport(
        BankLCExport _bankLCExport = this.parmBankLC())
    {
        return this.parmBankLC(_bankLCExport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersioningUpdateType</Name>
				<Source><![CDATA[
    public VersioningUpdateType parmVersioningUpdateType(VersioningUpdateType _versioningUpdateType = versioningUpdateType)
    {
        versioningUpdateType = _versioningUpdateType;
        return versioningUpdateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCExportLine</c> record after the invoice has been posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCExportLine</c> record that is marked on the invoice.
    /// </param>
    public void updateInvoicePosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
        if (this.isDataLoaded())
        {
            this.doUpdateInvoicePosted(_bankLCLineRefRecId);
        }
        else
        {
            BankLCExportType::updateInvoicePostedOnServer(this.parmBankLCRecId(), _bankLCLineRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingSlipPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCExportLine</c> record after the packing slip has been posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCExportLine</c> record that is marked on the packing slip.
    /// </param>
    public void updatePackingSlipPosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
        if (this.isDataLoaded())
        {
            this.doUpdatePackingSlipPosted(_bankLCLineRefRecId);
        }
        else
        {
            BankLCExportType::updatePackingSlipPostedOnServer(this.parmBankLCRecId(), _bankLCLineRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCExportLine</c> record after the payment is posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCExportLine</c> record that is marked on the payment.
    /// </param>
    public void updatePaymentPosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
        if (this.isDataLoaded())
        {
            this.doUpdatePaymentPosted(_bankLCLineRefRecId);
        }
        else
        {
            BankLCExportType::updatePaymentPostedOnServer(
                this.parmBankLCRecId(),
                _bankLCLineRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCExportLine</c> record status.
    /// </summary>
    /// <param name="_bankLCExportLineRefRecId">
    ///    The record ID of the <c>BankLCImportLine</c> record.
    /// </param>
    /// <param name="_shipmentStatus">
    ///    The new status.
    /// </param>
    private void updateShipmentStatus(
        BankLCLineRefRecId              _bankLCExportLineRefRecId,
        BankLCExportShipmentStatusType  _shipmentStatus)
    {
        BankLCExportLine bankLCExportLineLocal;

        bankLCExportLineLocal = BankLCExportLine::find(_bankLCExportLineRefRecId, true);

        bankLCExportLineLocal.ExportShipmentStatus = _shipmentStatus;
        bankLCExportLineLocal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinesWhenConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>BankLCExportLine</c> records are valid for letter of credit confirmation.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    protected boolean validateLinesWhenConfirm()
    {
        boolean             ok = true;
        BankLCExport        bankLCExportLocal;
        BankLCExportLine    bankLCExportLineLocal;

        bankLCExportLocal = this.parmBankLCExport();

        while select bankLCExportLineLocal
            where bankLCExportLineLocal.BankLC                == bankLCExportLocal.RecId
                && bankLCExportLineLocal.ExportShipmentStatus == BankLCExportShipmentStatusType::Open
        {
            if (!ok)
            {
                break;
            }

            ok = this.validateLineFieldsWhenConfirm(bankLCExportLineLocal);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit-related invoice is valid for posting.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The invoice to validate.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public boolean validateUpdateInvoice(FormletterParmTable _formletterParmTable)
    {
        if (this.isDataLoaded())
        {
            return this.doValidateUpdateInvoice(_formletterParmTable);
        }
        else
        {
            return BankLCExportType::validateUpdateInvoiceOnServer(this.parmBankLCRecId(), _formletterParmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit-related packing slip is valid.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The packing slip to validate.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public boolean validateUpdatePackingSlip(FormletterParmTable _formletterParmTable)
    {
        if (this.isDataLoaded())
        {
            return this.doValidateUpdatePackingSlip(_formletterParmTable);
        }
        else
        {
            return BankLCExportType::validateUpdatePackingSlipOnServer(this.parmBankLCRecId(), _formletterParmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the related payment of a letter of credit can be posted.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateUpdatePayment(RecId _ledgerJournalTransRefRecId)
    {
        if (this.isDataLoaded())
        {
            return this.doValidateUpdatePayment(_ledgerJournalTransRefRecId);
        }
        else
        {
            return BankLCExportType::validateUpdatePaymentOnServer(this.parmBankLCRecId(), _ledgerJournalTransRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canIssueLC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the export letter of credit can be issued.
    /// </summary>
    /// <param name="_bankLCExportRefRecId">
    ///    The record ID of the letter of credit to check.
    /// </param>
    /// <returns>
    ///    true if the letter of credit can be issued; otherwise, false.
    /// </returns>
    public static boolean canIssueLC(BankLCRefRecId _bankLCExportRefRecId)
    {
        boolean             ok = true;
        BankLCExportType    bankLCExportType;

        bankLCExportType = BankLCExportType::construct(_bankLCExportRefRecId, true);

        ok = bankLCExportType.validateConfirmation();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BankLCExportType</c> class by using the letter of credit specified
    ///    by a record ID.
    /// </summary>
    /// <param name="_bankLCRecId">
    ///    The record ID of the letter of credit to use.
    /// </param>
    /// <param name="_loadData">
    ///    A Boolean value that indicates whether to load the letter of credit record; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_isLoadInfo">
    ///    A Boolean value that indicates whether to load the <c>BankLCInfo</c> record; optional.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>BankLCExportType</c> class.
    /// </returns>
    public static BankLCExportType construct(
        BankLCRefRecId  _bankLCRecId,
        boolean         _loadData       = false,
        boolean         _forUpdate      = false,
        boolean         _isLoadInfo     = false)
    {
        BankLCExportType    bankLCExportType;
        BankLCExport        bankLCExport;

        if (_loadData)
        {
            bankLCExport        = BankLCExport::find(_bankLCRecId, _forUpdate);
            bankLCExportType    = BankLCExportType::constructByBankLCExport(bankLCExport, _isLoadInfo);
        }
        else
        {
            bankLCExportType = new BankLCExportType();
            bankLCExportType.parmBankLCRecId(_bankLCRecId);
        }
        return bankLCExportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByBankLCExport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BankLCExportType</c> class by using the specified letter of credit
    ///    record.
    /// </summary>
    /// <param name="_bankLCExport">
    ///    The letter of credit record to use.
    /// </param>
    /// <param name="_isLoadInfo">
    ///    A Boolean value that indicates whether to load the <c>BankLCInfo</c> record; optional.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>BankLCExportType</c> class.
    /// </returns>
    public static BankLCExportType constructByBankLCExport(
        BankLCExport    _bankLCExport,
        boolean         _isLoadInfo = false)
    {
        BankLCExportType    bankLCExportType;

        if (_bankLCExport && _bankLCExport.RecId != 0)
        {
            bankLCExportType = new BankLCExportType();
            bankLCExportType.parmBankLCExport(_bankLCExport);

            if (_isLoadInfo)
            {
                bankLCExportType.loadBankLCInfo(_bankLCExport.selectForUpdate());
            }
        }
        return bankLCExportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBySalesId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BankLCExportType</c> class by using a sales ID.
    /// </summary>
    /// <param name="_salesId">
    ///    The sales ID to use.
    /// </param>
    /// <param name="_loadData">
    ///    A Boolean value that indicates whether to load the letter of credit record; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_isLoadInfo">
    ///    A Boolean value that indicates whether to load the <c>BankLCInfo</c> record; optional.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>BankLCExportType</c> class.
    /// </returns>
    public static BankLCExportType constructBySalesId(
        SalesId _salesId,
        boolean _loadData   = false,
        boolean _forUpdate  = false,
        boolean _isLoadInfo = false)
    {
        return BankLCExportType::construct(
            BankLCExport::findBySalesTable(_salesId).RecId,
            _loadData,
            _forUpdate,
            _isLoadInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankLCExport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and inserts a new <c>BankLCExport</c> record for the sales order.
    /// </summary>
    /// <param name="_salesId">
    ///    The sales ID to use.
    /// </param>
    /// <returns>
    ///    The created instance of the <c>BankLCExportType</c> class that contains the new <c>BankLCExport</c>
    ///    record.
    /// </returns>
    public static BankLCExportType createBankLCExport(SalesId _salesId)
    {
        BankLCExportType    bankLCExportType;
        BankLCExport        bankLCExport;
        SalesTable          salesTableLocal;

        if (_salesId)
        {
            if (BankLCExport::existBySalesTable(_salesId))
            {
                return BankLCExportType::constructBySalesId(_salesId);
            }
            else
            {
                salesTableLocal = SalesTable::find(_salesId);

                if (!salesTableLocal)
                {
                    throw error (strFmt("@SYS34076", "@SYS9694"));
                }

                bankLCExportType = new BankLCExportType();

                bankLCExport = BankLCExport::findBySalesTable(_salesId);

                if (!bankLCExport)
                {
                    ttsbegin;
                    bankLCExport = bankLCExportType.createBankLCExportTable(salesTableLocal);
                    ttscommit;
                    bankLCExportType.parmBankLCRecId(bankLCExport.RecId);
                }
            }
        }

        return bankLCExportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentLinesOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the <c>BankLCExportLine</c> records to be created on the server.
    /// </summary>
    /// <param name="_bankLCExportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    private static void createShipmentLinesOnServer(BankLCRefRecId _bankLCExportRecId)
    {
        ttsbegin;
        BankLCExportType::construct(_bankLCExportRecId, true).doCreateShipmentLines();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicePostedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the update to be done on server.
    /// </summary>
    /// <param name="_bankLCExportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_bankLCExportLineRefRecId">
    ///    The record ID of the letter of credit line.
    /// </param>
    public static void updateInvoicePostedOnServer(
        BankLCRefRecId      _bankLCExportRecId,
        BankLCLineRefRecId  _bankLCExportLineRefRecId)
    {
        ttsbegin;
        BankLCExportType::construct(
            _bankLCExportRecId,
            true,
            true).doUpdateInvoicePosted(_bankLCExportLineRefRecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingSlipPostedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the update to be done on server.
    /// </summary>
    /// <param name="_bankLCExportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_bankLCExportLineRefRecId">
    ///    The record ID of the letter of credit line.
    /// </param>
    public static void updatePackingSlipPostedOnServer(
        BankLCRefRecId      _bankLCExportRecId,
        BankLCLineRefRecId  _bankLCExportLineRefRecId)
    {
        ttsbegin;
        BankLCExportType::construct(
            _bankLCExportRecId,
            true,
            false).doUpdatePackingSlipPosted(_bankLCExportLineRefRecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentPostedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces an update to be performed on the server.
    /// </summary>
    /// <param name="_bankLCExportRecId">
    ///    The record ID of a letter of credit.
    /// </param>
    /// <param name="_bankLCExportLineRefRecId">
    ///    The record ID of a letter of credit line.
    /// </param>
    private static void updatePaymentPostedOnServer(
        BankLCRefRecId      _bankLCExportRecId,
        BankLCLineRefRecId  _bankLCExportLineRefRecId)
    {
        ttsbegin;
        BankLCExportType::construct(
            _bankLCExportRecId,
            true,
            true).doUpdatePaymentPosted(_bankLCExportLineRefRecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the required information for the letter of credit is attached correctly with the
    ///    packing slip or invoices.
    /// </summary>
    /// <param name="_parmId">
    ///    The <c>ParmId</c> value of the <c>SalesParmTable</c> table that represents the sales documents.
    /// </param>
    /// <param name="_documentStatus">
    ///    The <c>DocumentStatus</c> value of the <c>SalesParmTable</c> value that represents the type of the
    ///    documents.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public static boolean validateDocuments(ParmId _parmId, DocumentStatus _documentStatus)
    {
        boolean             ret = true;
        BankLCExportType    bankLCExportType;
        SalesParmTable      salesParmTableLocal;
        SalesTable          salesTableLocal;

        while select salesParmTableLocal
            where salesParmTableLocal.ParmId == _parmId
            join SalesId from salesTableLocal
                where salesTableLocal.SalesId == salesParmTableLocal.SalesId
                    && (salesTableLocal.BankDocumentType    == BankDocumentType::ImportCollection
                        || salesTableLocal.BankDocumentType == BankDocumentType::LetterOfCredit)
        {
            bankLCExportType = BankLCExportType::constructBySalesId(salesTableLocal.SalesId, true);
            if (!bankLCExportType)
            {
                // The sales order %1 related Letter of Credit / Import Collection is not found.
                ret = checkFailed(strFmt("@SYS318809", salesTableLocal.SalesId)) && ret;
            }
            else
            {
                switch (_documentStatus)
                {
                    case DocumentStatus::PackingSlip :
                        ret = bankLCExportType.validateUpdatePackingslip(salesParmTableLocal) && ret;
                        break;

                    case DocumentStatus::Invoice     :
                    case DocumentStatus::ApproveJournal:
                        ret = bankLCExportType.validateUpdateInvoice(salesParmTableLocal) && ret;
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateInvoiceOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the validation to be done on server.
    /// </summary>
    /// <param name="_bankLCExportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_formletterParmTable">
    ///    The document.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    private static boolean validateUpdateInvoiceOnServer(
        BankLCRefRecId      _bankLCExportRecId,
        FormletterParmTable _formletterParmTable)
    {
        boolean ret;

        ttsbegin;
        ret = BankLCExportType::construct(
                _bankLCExportRecId,
                true,
                false).doValidateUpdateInvoice(_formletterParmTable);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePackingSlipOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the validation to be done on server.
    /// </summary>
    /// <param name="_bankLCExportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_formletterParmTable">
    ///    The document.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    private static boolean validateUpdatePackingSlipOnServer(
        BankLCRefRecId      _bankLCExportRecId,
        FormletterParmTable _formletterParmTable)
    {
        boolean ret;

        ttsbegin;
        ret = BankLCExportType::construct(
                _bankLCExportRecId,
                true,
                false).doValidateUpdatePackingSlip(_formletterParmTable);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePaymentOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the validation to be performed on the server.
    /// </summary>
    /// <param name="_bankLCExportRecId">
    ///    The record ID of a letter of credit.
    /// </param>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise false.
    /// </returns>
    private static boolean validateUpdatePaymentOnServer(
        BankLCRefRecId  _bankLCExportRecId,
        RecId           _ledgerJournalTransRefRecId)
    {
        boolean ret;

        ttsbegin;
        ret = BankLCExportType::construct(
                _bankLCExportRecId,
                true,
                false).doValidateUpdatePayment(_ledgerJournalTransRefRecId);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>