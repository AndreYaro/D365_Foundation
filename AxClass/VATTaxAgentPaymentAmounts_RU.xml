<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VatTaxAgentPaymentAmounts_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>VatTaxAgentPaymentAmounts_RU</c> used to calculate
/// distribution of tax agent amounts by tax codes for tax agent.
/// </summary>
/// <remarks>
/// Ths class <c>VatTaxAgentPaymentAmounts_RU</c> used when settlement of transactions performed.
/// </remarks>
class VatTaxAgentPaymentAmounts_RU
{
    VendTrans    vendTrans;
    Map          mapTaxAmounts;
    TransDate    transDate;

    #define.taxAmountTransactionIdx(1)
    #define.taxAmountAccountingIdx(2)
    #define.taxBaseAmountTransactionIdx(3)
    #define.taxBaseAmountAccountingIdx(4)
    #define.taxBaseAmountReportingIdx(5)
    #define.taxAmountReportingIdx(6)
    #define.taxAmountTransactionInclInTotalIdx(7)
    #define.taxAmountAccountingInclInTotalIdx(8)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates map which holds distribution of tax agent amounts by tax codes.
    /// </summary>
    /// <param name="_settleAmountTransaction">
    /// Amount being settled in transaction currency.
    /// </param>
    /// <param name="_settleAmountAccounting">
    /// Amount being settled in accounting currency.
    /// </param>
    /// <param name="_settleAmountReporting">
    /// Amount being settled in reporting currency.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <param name="_withTax">
    /// Determines if invoice amount includes tax.
    /// </param>
    public void calc(
        AmountCur           _settleAmountTransaction,
        AmountMST           _settleAmountAccounting,
        AmountMSTSecondary  _settleAmountReporting,
        TransDate           _transDate = transDate,
        boolean             _withTax   = false)
    {
        TaxTrans            taxTrans;
        AmountCur           baseAmountTransaction;
        AmountMST           baseAmountAccounting;
        AmountMSTSecondary  baseAmountReporting;
        VendInvoiceJour     vendInvoiceJour;
        Amount              taxBaseAmountTransaction;
        Amount              taxBaseAmountAccounting;
        Amount              taxBaseAmountReporting;
        Amount              taxAmountTransaction;
        Amount              taxAmountAccounting;
        Amount              taxAmountReporting;
        Amount              taxAmountTransactionInclInTotal;
        Amount              taxAmountAccountingInclInTotal;
        MapEnumerator       me;
        container           valuesCon;

        transDate = _transDate;

        vendInvoiceJour = VendInvoiceJour::findFromVendTrans(vendTrans.Invoice,
                                                             vendTrans.TransDate,
                                                             vendTrans.AccountNum,
                                                             false,
                                                             vendTrans.Voucher);

        baseAmountTransaction   = _withTax ? vendInvoiceJour.InvoiceAmount      : vendInvoiceJour.SalesBalance;
        baseAmountAccounting    = _withTax ? vendInvoiceJour.InvoiceAmountMST   : vendInvoiceJour.amountMST(baseAmountTransaction);
        baseAmountReporting     = CurrencyExchangeHelper::amountMST2MSTSecond_RU(baseAmountAccounting, vendInvoiceJour.InvoiceDate);

        while select taxTrans
            where taxTrans.Voucher   == vendTrans.Voucher   &&
                  taxTrans.TransDate == vendTrans.TransDate
        {
            taxBaseAmountTransaction    = this.taxBaseAmount(taxTrans, false);
            taxBaseAmountAccounting     = this.taxBaseAmount(taxTrans, true);
            taxAmountTransaction        = this.taxAmount(taxTrans, false);
            taxAmountAccounting         = this.taxAmount(taxTrans, true);

            taxBaseAmountReporting      = CurrencyExchangeHelper::amountMST2MSTSecond_RU(taxBaseAmountAccounting, transDate);
            taxAmountReporting          = CurrencyExchangeHelper::amountMST2MSTSecond_RU(taxAmountAccounting, transDate);

            taxAmountTransactionInclInTotal = taxTrans.ExemptTax ? 0 : taxAmountTransaction;
            taxAmountAccountingInclInTotal  = taxTrans.ExemptTax ? 0 : taxAmountAccounting;

            if (mapTaxAmounts.exists(taxTrans.TaxCode))
            {
                valuesCon = mapTaxAmounts.lookup(taxTrans.TaxCode);
                taxBaseAmountTransaction    += conPeek(valuesCon, #taxBaseAmountTransactionIdx);
                taxBaseAmountAccounting     += conPeek(valuesCon, #taxBaseAmountAccountingIdx);
                taxAmountTransaction        += conPeek(valuesCon, #taxAmountTransactionIdx);
                taxAmountAccounting         += conPeek(valuesCon, #taxAmountAccountingIdx);
                taxBaseAmountReporting      += conPeek(valuesCon, #taxBaseAmountReportingIdx);
                taxAmountReporting          += conPeek(valuesCon, #taxAmountReportingIdx);
                taxAmountTransactionInclInTotal += conPeek(valuesCon, #taxAmountTransactionInclInTotalIdx);
                taxAmountAccountingInclInTotal  += conPeek(valuesCon, #taxAmountAccountingInclInTotalIdx);
            }

            mapTaxAmounts.insert(taxTrans.TaxCode, [
                taxAmountTransaction,
                taxAmountAccounting,
                taxBaseAmountTransaction,
                taxBaseAmountAccounting,
                taxBaseAmountReporting,
                taxAmountReporting,
                taxAmountTransactionInclInTotal,
                taxAmountAccountingInclInTotal]);
        }

        if (_settleAmountTransaction || _settleAmountAccounting || _settleAmountReporting)
        {
            Map mapTaxAmountsCorrection = Map::create(mapTaxAmounts.pack());

            me = mapTaxAmountsCorrection.getEnumerator();

            mapTaxAmounts = new Map(Types::String, Types::Container);            
            
            while (me.moveNext())
            {
                valuesCon = me.currentValue();
                if (baseAmountTransaction)
                {
                    taxBaseAmountTransaction = CurrencyExchangeHelper::amount(conPeek(valuesCon, 3) * _settleAmountTransaction / baseAmountTransaction);
                    taxAmountTransaction     = CurrencyExchangeHelper::amount(conPeek(valuesCon, 1) * _settleAmountTransaction / baseAmountTransaction);
                    taxAmountTransactionInclInTotal = CurrencyExchangeHelper::amount(conPeek(valuesCon, 7) * _settleAmountTransaction / baseAmountTransaction);
                }

                if (baseAmountAccounting)
                {
                    taxBaseAmountAccounting = CurrencyExchangeHelper::amount(conPeek(valuesCon, 4) * _settleAmountAccounting / baseAmountAccounting);
                    taxAmountAccounting     = CurrencyExchangeHelper::amount(conPeek(valuesCon, 2) * _settleAmountAccounting / baseAmountAccounting);
                    taxAmountAccountingInclInTotal  = CurrencyExchangeHelper::amount(conPeek(valuesCon, 8) * _settleAmountAccounting / baseAmountAccounting);
                }

                if (baseAmountReporting)
                {
                    taxBaseAmountReporting = CurrencyExchangeHelper::amount(conPeek(valuesCon, 5) * _settleAmountReporting / baseAmountReporting);
                    taxAmountReporting     = CurrencyExchangeHelper::amount(conPeek(valuesCon, 6) * _settleAmountReporting / baseAmountReporting);
                }

                mapTaxAmounts.insert(me.currentKey(), [
                    taxAmountTransaction,
                    taxAmountAccounting,
                    baseAmountTransaction,
                    baseAmountAccounting,
                    baseAmountReporting,
                    taxAmountReporting,
                    taxAmountTransactionInclInTotal,
                    taxAmountAccountingInclInTotal
                    ]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization of the <c>VatTaxAgentPaymentAmounts_RU</c> class.
    /// </summary>
    private void init()
    {
        mapTaxAmounts = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>VatTaxAgentPaymentAmounts_RU</c> class with data from <c>VendTrans</c>.
    /// </summary>
    /// <param name="_vendTrans">
    /// <c>VendTrans</c> record which is associated with invoice.
    /// </param>
    protected void initFromVendTrans(VendTrans  _vendTrans)
    {
        vendTrans = _vendTrans;
        transDate = _vendTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapTaxAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns map which holds distribution of tax agent amounts by tax codes.
    /// </summary>
    /// <returns>
    /// Map which holds distribution of tax amounts by tax codes.
    /// </returns>
    public Map mapTaxAmounts()
    {
        return mapTaxAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAgentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns tax agent amount by given tax code and type of return value.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code for which tax agent amount searched.
    /// </param>
    /// <param name="_idx">
    /// Type of return value.
    /// </param>
    /// <returns>
    /// Tax agent amount.
    /// </returns>
    /// <remarks>
    /// Types of return values described in classDeclaration.
    /// </remarks>
    public Amount taxAgentAmount(TaxCode _taxCode, int _idx)
    {
        if (mapTaxAmounts.exists(_taxCode))
        {
            return conPeek(mapTaxAmounts.lookup(_taxCode), _idx);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAgentAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns tax agent amount in transaction currency by given tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code for which tax agent amount searched.
    /// </param>
    /// <returns>
    /// Tax agent amount in transaction currency by given tax code.
    /// </returns>
    public AmountCur taxAgentAmountCur(TaxCode _taxCode)
    {
        return this.taxAgentAmount(_taxCode, #taxAmountTransactionIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAgentAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns tax agent amount in accounting currency by given tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code for which tax agent amount searched.
    /// </param>
    /// <returns>
    /// Tax agent amount in accounting currency by given tax code.
    /// </returns>
    public AmountMST taxAgentAmountMST(TaxCode _taxCode)
    {
        return this.taxAgentAmount(_taxCode, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAgentAmountReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns tax agent amount in reporting currency by given tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code for which tax agent amount searched.
    /// </param>
    /// <returns>
    /// Tax agent amount in reporting currency by given tax code.
    /// </returns>
    public AmountMSTSecondary taxAgentAmountReporting(TaxCode _taxCode)
    {
        return this.taxAgentAmount(_taxCode, #taxAmountReportingIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAgentBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns base amount for tax agent amount in transaction currency by given tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code for which tax agent amount searched.
    /// </param>
    /// <returns>
    /// Base amount for tax agent amount in transaction currency by given tax code.
    /// </returns>
    public AmountMST taxAgentBaseAmountCur(TaxCode _taxCode)
    {
        return this.taxAgentAmount(_taxCode, #taxBaseAmountTransactionIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAgentBaseAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns base amount for tax agent amount in accounting currency by given tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code for which tax agent amount searched.
    /// </param>
    /// <returns>
    /// Base amount for tax agent amount in accounting currency by given tax code.
    /// </returns>
    public AmountMST taxAgentBaseAmountMST(TaxCode _taxCode)
    {
        return this.taxAgentAmount(_taxCode, #taxBaseAmountAccountingIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAgentBaseAmountReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns base amount for tax agent amount in reporting currency by given tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code for which tax agent amount searched.
    /// </param>
    /// <returns>
    /// Base amount for tax agent amount in reporting currency by given tax code.
    /// </returns>
    public AmountMSTSecondary taxAgentBaseAmountReporting(TaxCode _taxCode)
    {
        return this.taxAgentAmount(_taxCode, #taxBaseAmountReportingIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    private Amount taxAmount(TaxTrans _taxTrans, boolean _getMST = true)
    {
        TaxAmountCur taxAmountCur;

        taxAmountCur = _taxTrans.ExemptTax ?
                       new Tax().taxCalcWithoutSource_RU(_taxTrans.TaxCode,
                                                         _taxTrans.TransDate,
                                                         _taxTrans.SourceCurrencyCode,
                                                         _taxTrans.SourceBaseAmountCur,
                                                         TaxModuleType::Purch,
                                                         _taxTrans.TaxBaseQty) :
                       _taxTrans.taxAmountCur_W();

        taxAmountCur = _getMST ?
                        CurrencyExchangeHelper::mstAmount(taxAmountCur, _taxTrans.SourceCurrencyCode, transDate) :
                        taxAmountCur;

        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    private TaxBase taxBaseAmount(TaxTrans _taxTrans, boolean _getMST = true)
    {
        CurrencyExchangeHelper currencyExchangeHelper;

        if (_getMST)
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::current(),
                transDate);

            return currencyExchangeHelper.calculateTransactionToAccounting(
                _taxTrans.SourceCurrencyCode,
                _taxTrans.SourceBaseAmountCur,
                true);
        }

        return _taxTrans.SourceBaseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAgentAmount</Name>
				<Source><![CDATA[
    private Amount totalTaxAgentAmount(int _idx)
    {
        MapEnumerator me = mapTaxAmounts.getEnumerator();
        AmountCur   total;

        while (me.moveNext())
        {
            total += conPeek(me.currentValue(), _idx);
        }

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAgentAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total tax agent amount in transaction currency.
    /// </summary>
    /// <returns>
    /// Total tax agent amount in transaction currency.
    /// </returns>
    public AmountCur totalTaxAgentAmountCur()
    {
        return this.totalTaxAgentAmount(#taxAmountTransactionInclInTotalIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAgentAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total tax agent amount in accounting currency.
    /// </summary>
    /// <returns>
    /// Total tax agent amount in accounting currency.
    /// </returns>
    public AmountMST totalTaxAgentAmountMST()
    {
        return this.totalTaxAgentAmount(#taxAmountAccountingInclInTotalIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAgentAmountReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total tax agent amount in reporting currency.
    /// </summary>
    /// <returns>
    /// Total tax agent amount in reporting currency.
    /// </returns>
    public AmountMSTSecondary totalTaxAgentAmountReporting()
    {
        return this.totalTaxAgentAmount(#taxAmountReportingIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>VATTaxAgentPaymentAmounts_RU</c> class and initializes it.
    /// </summary>
    /// <param name="_vendTrans">
    /// <c>VendTrans</c> record which used to initialize the class instance.
    /// </param>
    /// <returns>
    /// New instance of <c>VATTaxAgentPaymentAmounts_RU</c> class.
    /// </returns>
    public static VATTaxAgentPaymentAmounts_RU construct(VendTrans _vendTrans)
    {
        VATTaxAgentPaymentAmounts_RU   paymentAmounts;

        paymentAmounts = new VATTaxAgentPaymentAmounts_RU();
        paymentAmounts.initFromVendTrans(_vendTrans);
        paymentAmounts.init();

        return paymentAmounts;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>