<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchComplementaryInvSourceDocLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchComplementaryInvSourceDocLine</c> class provides the information to handle the
///    distributions and subledger journal account entries for a purchase complementary invoice line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_PurchComplementaryInv), SourceDocumentLine_PurchComplementaryInv::PurchComplementaryInvoiceLine)]
class PurchComplementaryInvSourceDocLine extends SourceDocumentLineItem
    implements SourceDocumentLineItemIProduct
{
    PurchComplementaryInvoiceHeader invoiceHeader;
    PurchComplementaryInvoiceLine   invoiceLine;
    InventTable                     inventTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the legal entity rec ID associated with the source document line.
    /// </summary>
    /// <returns>
    /// <c>LegalEntityRecId</c> associated with this source document line.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        SourceDocumentAmount    extendedPrice;

        extendedPrice = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), invoiceLine.Amount, MonetaryAmount::ExtendedPrice, false);
        sourceDocumentAmountMap.insert(extendedPrice);
        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        return new BusinessEvent(enumNum(BusinessEvent_PurchComplementaryInv), BusinessEvent_PurchComplementaryInv::PurchComplementaryInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        invoiceLine = _sourceDocumentLineImplementation;
        invoiceHeader = invoiceLine.PurchComplementaryInvoiceHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return invoiceHeader.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategory</Name>
				<Source><![CDATA[
    public Common parmCategory()
    {
        return EcoResCategory::find(invoiceLine.ProcurementCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryName</Name>
				<Source><![CDATA[
    public str parmCategoryName()
    {
        return EcoResCategory::find(invoiceLine.ProcurementCategory).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return invoiceLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return invoiceLine.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public Common parmInventTable()
    {
        if (invoiceLine.ItemId && !inventTable)
        {
            InventTable = InventTable::find(InvoiceLine.ItemId);
        }
        return InventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmItemDataAreaId()
    {
        DataAreaId      dataAreaId;

        if (invoiceLine.ItemId)
        {
            dataAreaId = invoiceLine.DataAreaId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return invoiceLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStocked</Name>
				<Source><![CDATA[
    public TradeStockedProduct parmStocked()
    {
        return invoiceLine.isStocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return invoiceHeader.Currency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>