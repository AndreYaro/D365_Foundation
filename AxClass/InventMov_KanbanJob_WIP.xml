<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_KanbanJob_WIP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventMov_KanbanJob_WIP extends InventMov_KanbanJob
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHaveReservedWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the movement type can have WHS work created that takes over reserving the lower levels of the hierarchy.
    /// </summary>
    /// <returns>
    ///     true if the movement item is WHS enabled; otherwise, false.
    /// </returns>
    public boolean canHaveReservedWork()
    {
        return this.isItemWHSEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the balance sheet account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();

            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.isReceipt())
                {
                    if (prodGroup)
                    {
                        cacheAccountBalanceSheet = prodGroup.ReceiptLedgerDimension;
                    }
                    else
                    {
                        cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                            InventAccountType::ProdReceipt,
                            InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                            '',
                            '',
                            0,
                            false,
                            false,
                            false,
                            true);
                    }
                }
                else
                {
                    if (prodGroup)
                    {
                        cacheAccountBalanceSheet = prodGroup.IssueLedgerDimension;
                    }
                    else
                    {
                        cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                            InventAccountType::ProdIssue,
                            InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                            '',
                            '',
                            0,
                            false,
                            false,
                            false,
                            true);
                    }
                }
            }
            else
            {
                if (this.isReceipt())
                {
                    cacheAccountBalanceSheet =  prodGroup &&
                                            (prodGroup.ReceiptLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                            prodGroup.ReceiptLedgerDimension :
                                            InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::ProdReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet =  prodGroup &&
                                            (prodGroup.IssueLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                            prodGroup.IssueLedgerDimension :
                                            InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::ProdIssue));
                }
            }
        }
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">
    ///     An InventAccountType type.
    /// </param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(InventAccountType _inventAccountType)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = this.createInventPostingItemLedgerDimensionParameters(_inventAccountType, '');

        searchParameters.ItemId = '';
        searchParameters.SearchTable = false;
        searchParameters.SearchGroupId = false;
        searchParameters.SearchCategory = false;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the operations account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();

            if (this.isReceipt())
            {
                cacheAccountOperations  = prodGroup &&
                                        (prodGroup.ReceiptOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                            prodGroup.ReceiptOffsetLedgerDimension :
                                            InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::ProdReceiptOffsetAccount));
            }
            else
            {
                cacheAccountOperations  = prodGroup &&
                                        (prodGroup.IssueOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                            prodGroup.IssueOffsetLedgerDimension :
                                            InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameterFromKanbanJob(InventAccountType::ProdIssueOffsetAccount));
            }
        }
        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameterFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">
    ///     An inventory account type.
    /// </param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameterFromKanbanJob(InventAccountType _inventAccountType)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = this.createInventPostingItemLedgerDimensionParameters(_inventAccountType, kanbanJob.inventTable().itemGroupId());

        searchParameters.ItemId = kanbanJob.itemId();

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountPhysical()
    {
        // <GEERU>
        boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (!cacheAccountPhysical)
        {
            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();

            // <GCN>
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.isReceipt())
                {
                    if (prodGroup)
                    {
                        cacheAccountPhysical = prodGroup.ReportLedgerDimension;
                    }
                    else
                    {
                        cacheAccountPhysical = InventPosting::itemExtendParm_CN(
                            InventAccountType::ProdReportFinished,
                            InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                            this.itemId(),
                            this.inventTable().ItemGroupId());
                    }
                }
                else
                {
                    if (prodGroup)
                    {
                        cacheAccountPhysical = prodGroup.PicklistLedgerDimension;
                    }
                    else
                    {
                        cacheAccountPhysical = InventPosting::itemExtendParm_CN(
                            InventAccountType::ProdPicklist,
                            InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                            this.itemId(),
                            this.inventTable().ItemGroupId());
                    }
                }
            }
            else
            {
                // </GCN>
                if (this.isReceipt())
                {
                    cacheAccountPhysical = prodGroup &&
                                        (prodGroup.ReportLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.ReportLedgerDimension :
                                        InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReportFinished));
                }
                else
                {
                    cacheAccountPhysical = prodGroup &&
                                        (prodGroup.PicklistLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.PicklistLedgerDimension :
                        InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdPicklist));
                }
                // <GCN>
            }
            // </GCN>
        }

        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && kanbanJob.RecId)
        {
            InventTransOriginKanbanJobWIP::writeOriginOwnerRelationship(kanbanJob.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the corresponded owner.
    /// </summary>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void deleteOriginOwnerRelationship()
    {
        if (kanbanJob)
        {
            InventTransOriginKanbanJobWIP::deleteOwnerRelationship(kanbanJob.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimId</c> value.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimId</c> value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.Use the <c>InventDimId</c> field from the
    ///    <c>KanbanJob</c> table for positive transaction quantities and the <c>InventDimId</c> field from
    ///    the <c>KanbanJob</c> table for negative transaction quantities.
    /// </remarks>
    public InventDimId inventDimId()
    {
        if (this.isReceipt())
        {
            return kanbanJob.InventDimId;
        }
        return kanbanJob.IssueInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginKanbanJobWIP::findInventTransOriginId(kanbanJob.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the movement must be booked physically.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeBookedPhysically()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWMSOrderControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether output orders must be used with the movement.
    /// </summary>
    /// <returns>
    ///    true if an output order must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is an override of the base class method.
    /// </remarks>
    public boolean mustBeWMSOrderControlled()
    {
        return (!this.isReceipt()) && kanbanJob.type().mustBeWMSOrderControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an inventory movement from the original <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <returns>
    ///    An <c>InventMovement</c> class instance.
    /// </returns>
    /// <remarks>
    ///    This method is an override of the base class method.This method returns null if the current
    ///    <c>KanbanJob</c> record has not been inserted into the database.
    /// </remarks>
    public InventMovement newMovement_Orig()
    {
        return kanbanJob.RecId ? new InventMov_KanbanJob_WIP(kanbanJob.orig(),kanbanJob.orig().type()) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical offset account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (!cacheOffsetAccountPhysical)
        {
            // <GEERU>
            boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
            // </GEERU>

            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();

            if (this.isReceipt())
            {
                cacheOffsetAccountPhysical = prodGroup &&
                                            (prodGroup.ReportOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                                prodGroup.ReportOffsetLedgerDimension :
                                                InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReportFinishedOffsetAccount));
            }
            else
            {
                cacheOffsetAccountPhysical = prodGroup &&
                                            (prodGroup.PickListOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                                prodGroup.PickListOffsetLedgerDimension :
                                                InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdPicklistOffsetAccount));
            }
        }

        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceipt</Name>
				<Source><![CDATA[
    private boolean isReceipt()
    {
        return this.transQty() >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the balance sheet ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerPostingType postingBalanceSheet()
    {
        if (this.isReceipt())
        {
            return LedgerPostingType::ProdReceipt;
        }
        return LedgerPostingType::ProdIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical offset ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerPostingType postingOffsetPhysical()
    {
        if (this.isReceipt())
        {
            return LedgerPostingType::ProdReportFinishedOffsetAccount;
        }
        return LedgerPostingType::ProdPicklistOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the operations ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerPostingType postingOperations()
    {
        if (this.isReceipt())
        {
            return LedgerPostingType::ProdReceiptOffsetAccount;
        }
        return LedgerPostingType::ProdIssueOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public LedgerPostingType postingPhysical()
    {
        if (this.isReceipt())
        {
            return LedgerPostingType::ProdReportFinished;
        }
        return LedgerPostingType::ProdPicklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the inventory dimension of the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The new <c>InventDimId</c> value.
    /// </param>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void setInventDimId(InventDimId _inventDimId)
    {
        if (this.isReceipt())
        {
            kanbanJob.setInventDimId(_inventDimId);
        }
        else
        {
            kanbanJob.setIssueInventDimId(_inventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the issue transaction ID from the <c>KanbanJob</c> table.
    /// </summary>
    /// <returns>
    ///    The issue inventory blocking transaction ID.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransId transId()
    {
        if (this.isReceipt())
        {
            return kanbanJob.InventTransId;
        }
        return kanbanJob.IssueInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the transaction sign for the movement.
    /// </summary>
    /// <returns>
    ///    -1 if the transaction quantity is negative; otherwise, 1.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public Integer transSign()
    {
        return kanbanJob.type().mustBeWIPReceiptMovement() ? 1 : -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the transaction type of the movement.
    /// </summary>
    /// <returns>
    ///    An <c>InventTransType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransType transType()
    {
        return InventTransType::KanbanJobWIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_KanbanJob_WIP</c> class based on the specified record.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_KanbanJob_WIP</c> class.
    /// </returns>
    public static InventMov_KanbanJob_WIP newFromKanbanJob(KanbanJob _kanbanJob)
    {
        return new InventMov_KanbanJob_WIP(_kanbanJob);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>