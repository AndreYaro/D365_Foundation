<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNetProcessorBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendNetProcessorBatch</c> provides the interface to do generate netting journals.
/// </summary>
[SysObsolete('This class is no longer supported.', false, 28\02\2024)]
public class CustVendNetProcessorBatch extends RunBaseBatch implements BatchRetryable
{
    private const int DialogFromPartyFieldNo = 900;
    private const int DialogToPartyFieldNo = 901;
    private const str DialogToPartyNameControlName = 'ToPartyNameControlName';
    private const str DialogFromPartyNameControlName = 'FromPartyNameControlName';
    private const str DialogLegalEntityLookupControlName = 'LegalEntityLookupControlName';

    private FormStringControl dialogLegalEntitySelection;
    private LedgerLegalEntityLookup legalEntityLookup;
    private int dialogLegalEntityLookupId;
    private str userLegalEntityRange;

    private Dialog dialog;
    private DialogField dialogFromPartyName;
    private DialogField dialogToPartyName;
    private DialogField dialogNettingDate;
    private DialogField dialogCompany;

    private DirPartyRecId fromPartyRecId;
    private DirPartyRecId toPartyRecId;
    private TransDate nettingDate;
    private container legalEntityOptions;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        nettingDate,
        fromPartyRecId,
        toPartyRecId,
        legalEntityOptions
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@CashManagement:ObsoleteCustVendNetProcessName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        dialog = super();

        DialogGroup groupParameters = dialog.addGroup("@SYS7764");

        dialogNettingDate = dialog.addFieldValue(extendedTypeStr(TransDate), currentDate, "@CashManagement:CustVendNetDate");

        FormBuildGroupControl currentGroup = dialog.form().design().control(dialog.curFormGroup().name());
        FormBuildStringControl dialogLegalEntityLookup = currentGroup.addControl(FormControlType::String, DialogLegalEntityLookupControlName);
        dialogLegalEntityLookup.extendedDataType(extendedTypeNum(LedgerLegalEntitySelection));
        dialogLegalEntityLookup.lookupOnly(true);
        dialogLegalEntityLookupId = dialogLegalEntityLookup.id();

        dialog.addGroup("@CashManagement:CustVendNetFromParty");
        dialogFromPartyName = new DialogField(dialog, extendedTypeStr(DirPartyRecId), DialogFromPartyFieldNo);
        dialog.addCtrlDialogField(DialogFromPartyNameControlName);
        dialogFromPartyName.init(dialog);
        dialogFromPartyName.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(CustVendNetProcessorBatch, agreementNameLookup),
            this);

        dialog.addGroup("@CashManagement:CustVendNetToParty");
        dialogToPartyName = new DialogField(dialog, extendedTypeStr(DirPartyRecId), DialogToPartyFieldNo);
        dialog.addCtrlDialogField(DialogToPartyNameControlName);
        dialogToPartyName.init(dialog);
        dialogToPartyName.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(CustVendNetProcessorBatch, agreementNameLookup),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        this.constructLegalEntityLookup(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLegalEntityLookup</Name>
				<Source><![CDATA[
    private void constructLegalEntityLookup(DialogRunbase _dialog)
    {
        dialoglegalEntitySelection = _dialog.formRun().design().control(dialogLegalEntityLookupId);
        legalEntityLookup = LedgerLegalEntityLookup::construct(_dialog.formRun(), dialoglegalEntitySelection);
        legalEntityLookup.setSelection(['']);

        dialoglegalEntitySelection.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(CustVendNetProcessorBatch, legalEntityLookup),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntityLookup</Name>
				<Source><![CDATA[
    private void legalEntityLookup(FormStringControl _control)
    {
        legalEntityLookup.lookup(_control.text(), userLegalEntityRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementNameLookup</Name>
				<Source><![CDATA[
    private void agreementNameLookup(FormReferenceControl _ctrl)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(DirPartyTable), _ctrl, true);
        sysTableLookup.addLookupfield(fieldnum(DirPartyTable, Name));

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tablenum(DirPartyTable));
        qbds.addSortField(fieldNum(DirPartyTable, Name));
        qbds.relations(false);
        qbds = qbds.addDataSource(tableNum(CustVendNetAgreement));
        qbds.addLink(fieldNum(DirPartyTable, RecId), fieldNum(CustVendNetAgreement, Party));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.update(false);
        qbds.enabled(true);
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        nettingDate = dialogNettingDate.value();

        legalEntityOptions = legalEntityLookup.getLegalEntitySelection();
        if (legalEntityOptions == conNull())
        {
            List companiesList = new List(Types::String);
            CompanyInfo companyInfo;
            while select companyInfo
            {
                companiesList.addEnd(companyInfo.DataArea);
            }
            legalEntityOptions = list2Con(companiesList);
        }

        fromPartyRecId = dialogFromPartyName.value();
        toPartyRecId = dialogToPartyName.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CustVendNetProcessor processor = CustVendNetProcessor::construct(
            this.nettingDate,
            this.legalEntityOptions,
            this.fromPartyRecId,
            this.toPartyRecId);

        processor.process();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustVendNetProcessorBatch processorBatch;

        processorBatch = CustVendNetProcessorBatch::construct();

        if (processorBatch.prompt())
        {
            processorBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendNetProcessorBatch construct()
    {
        CustVendNetProcessorBatch processorBatch;

        processorBatch = new CustVendNetProcessorBatch();

        return processorBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>