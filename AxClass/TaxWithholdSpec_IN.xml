<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSpec_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdSpec_IN</c> class is the tax withhold spec class.
/// </summary>
class TaxWithholdSpec_IN
{
    TaxAmountCur        taxAmountCur;
    TaxAmount           taxAmountMST;
    TaxBaseCur          taxBaseAmountCur;
    TaxBase             taxBaseAmountMST;
    TaxWithholdCode     taxWithholdCode;
    TaxAmountCur        totalTaxAmountCur;
    TaxAmount           totalTaxAmountMST;
    TaxBaseCur          totalTaxBaseAmountCur;
    TaxBase             totalTaxBaseAmountMST;
    Voucher             voucher;
    TransDate           taxDate;
    RefRecId            custInvoiceJourRecId;
    boolean             isTaxInvoice;
    NoYes               released;
    TaxSpecTmp          taxSpecTmp;
    CurrencyCode        currencyCode;

    TaxWithholdSpecTmp_IN       taxWithholdSpecTmp;
    TaxWithholdTrans_IN         taxWithholdTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWithholdSpec_IN</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher information.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_CustInvoiceJourRecID">
    /// The cust invoice journal rec id.
    /// </param>
    void new(Voucher    _voucher,
             TransDate  _date,
             recId      _CustInvoiceJourRecID = 0)
    {
        voucher     = _voucher;
        taxDate     = _date;

        released    = NoYes::No;

        custInvoiceJourRecId = _CustInvoiceJourRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSpec</Name>
				<Source><![CDATA[
        public boolean parmTaxSpec()
    {
        if ( released ==NoYes::No )
        {
            taxWithholdSpecTmp.setTmp();

            while select taxWithholdTrans
                    order by TaxWithholdGroup
                    where taxWithholdTrans.voucher      == voucher &&
                            taxWithholdTrans.TransDate  == taxDate
                {
                    taxWithholdSpecTmp.clear();
                    taxWithholdSpecTmp.TaxWithholdCode          = taxWithholdTrans.TaxWithholdCode;
                    taxWithholdSpecTmp.SourceRegulateAmountCur  = taxWithholdTrans.AdjustedTaxWithholdAmount;
                    taxWithholdSpecTmp.TaxWithholdAmount        = taxWithholdTrans.TaxWithholdAmount;
                    taxWithholdSpecTmp.SourceBaseAmountCur      = taxWithholdTrans.TaxWithholdBaseAmountCur;
                    taxWithholdSpecTmp.Voucher                  = taxWithholdTrans.voucher;
                    taxWithholdSpecTmp.TransDate                = taxWithholdTrans.TransDate;
                    taxWithholdSpecTmp.insert();
                }

                select
                    sum(SourceBaseAmountCur),
                    sum(SourceRegulateAmountCur),
                    sum(TaxWithholdAmount),
                    TaxWithholdCode
                from taxWithholdSpecTmp
                    group by TransDate, TaxWithholdCode
                    where taxWithholdSpecTmp.Voucher    == voucher &&
                          taxWithholdSpecTmp.TransDate  == taxDate;
        }
        else
        {
            next taxWithholdSpecTmp;
        }

        released = NoYes::Yes;

        if (taxWithholdSpecTmp)
        {
            taxWithholdCode          = taxWithholdSpecTmp.TaxWithholdCode;
            taxAmountCur             = taxWithholdSpecTmp.SourceRegulateAmountCur;
            taxAmountMST             = taxWithholdSpecTmp.TaxWithholdAmount;
            taxBaseAmountCur         = taxWithholdSpecTmp.SourceBaseAmountCur;
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax amount information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    TaxAmountCur taxAmount()
    {
        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax amount MST information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxAmount</c> class.
    /// </returns>
    TaxAmount taxAmountMST()
    {
        return taxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax base amount.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxBaseCur</c> class.
    /// </returns>
    TaxBaseCur  taxBaseAmount()
    {
        return taxBaseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax withhold code.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxWithholdCode</c> class.
    /// </returns>
    TaxWithholdCode  taxWithholdCode()
    {
        return taxWithholdCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>