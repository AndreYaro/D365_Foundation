<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorContactPersonMakeInactiveEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Vendor menu item specific event handlers for the <c>ContactPersonMakeInactive</c> events.
/// </summary>
final class VendVendorContactPersonMakeInactiveEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>suppressingActivateMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppresses the active message if the <c>ContactPersonMakeInactive</c> class is called from the
    /// <c>VendVendorContactPersonActivate</c> action menu item.
    /// </summary>
    /// <param name = "_callerArgs">The <c>Args</c> object provided by the caller of the class.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object containing the result from the subscribers</param>
    [SubscribesTo(classStr(ContactPersonMakeInactive), delegateStr(ContactPersonMakeInactive, onSuppressingShowMessage))]
    public static void suppressingActivateMessage(Args _callerArgs, EventHandlerResult _result)
    {
        if (_callerArgs && _callerArgs.menuItemType() == MenuItemType::Action && _callerArgs.menuItemName() == menuItemActionStr(VendVendorContactPersonActivate))
        {
            _result.booleanResult(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>suppressingInactivateMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppresses the inactive message if the <c>ContactPersonMakeInactive</c> class is called from the
    /// <c>VendVendorContactPersonInactivate</c> action menu item.
    /// </summary>
    /// <param name = "_callerArgs">The <c>Args</c> object provided by the caller of the class.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object containing the result from the subscribers</param>
    [SubscribesTo(classStr(ContactPersonMakeInactive), delegateStr(ContactPersonMakeInactive, onSuppressingShowMessage))]
    public static void suppressingInactivateMessage(Args _callerArgs, EventHandlerResult _result)
    {
        if (_callerArgs && _callerArgs.menuItemType() == MenuItemType::Action && _callerArgs.menuItemName() == menuItemActionStr(VendVendorContactPersonInactivate))
        {
            _result.booleanResult(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>terminateOnlineSessionForInactivatedContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Terminates online session for the inactivated contact  person.
    /// </summary>
    /// <param name = "_contact">The <c>ContactPerson</c> record.</param>
    [SubscribesTo(classStr(ContactPersonMakeInactive), delegateStr(ContactPersonMakeInactive, onInactivatingContactPerson)), Hookable(false)]
    internal static void terminateOnlineSessionForInactivatedContactPerson(ContactPerson _contact)
    {
        if (_contact)
        {
            UserInfo user = ContactPerson::vendorUser(_contact);

            if (user && user.id && SysUsersOnline::isUserOnline(user.id))
            {
                SysClientSessions clientSessions;
                container usersList;
                while select clientSessions 
                    where clientSessions.userId == user.id 
                       && (clientSessions.Status == SessionState::Running 
                             || clientSessions.Status == SessionState::Killed
                             || clientSessions.Status == SessionStatus::MarkedAsKill)
                {
                    usersList += [[clientSessions.UserId, clientSessions.SessionId, clientSessions.LoginDateTime]];
                }

                if (conLen(usersList) > 0)
                {
                    SysUsersTerminate usersTerminate  = new sysUsersTerminate();
                    usersTerminate.parmUsersList(usersList);
                    usersTerminate.runOperation();
                    info(strFmt("@SCM:TerminateOnlineSessionForInactivatedVendorContact", user.name));
                }
            }

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>