<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandAvailPhysicalCalcColumnDefinitions</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventOnHandAvailPhysicalCalcColumnDefinitions
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processingWhsItemDefinition</Name>
				<Source><![CDATA[
    public static str processingWhsItemDefinition()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            return SysComputedColumn::returnLiteral(NoYes::No);
        }
        else
        {
            DictTable dictTable = new DictTable(tableNum(WhsInventEnabled));

            /*
            (CAST ((CASE
            WHEN EXISTS (SELECT 'x' FROM WHSINVENTENABLED SUBQUERY WHERE SUBQUERY.PARTITION = T1.PARTITION AND SUBQUERY.DATAAREAID = T1.DATAAREAID AND SUBQUERY.ITEMID = T1.ITEMID)
            THEN 1
            ELSE 0
            END) AS INT)) AS ISWAREHOUSEITEM
            */

            str statement = strFmt("CASE WHEN " +
            "EXISTS (SELECT 'x' FROM %1 SUBQUERY WHERE SUBQUERY.%2 = %3 AND SUBQUERY.%4 = %5 AND SUBQUERY.%6 = %7) " +
            "THEN 1 ELSE 0 END",

            dictTable.name(DbBackend::Native),

            dictTable.fieldObject(fieldNum(WhsInventEnabled, Partition)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, Partition)),

            dictTable.fieldObject(fieldNum(WhsInventEnabled, DataAreaID)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, DataAreaId)),

            dictTable.fieldObject(fieldNum(WhsInventEnabled, ItemId)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, ItemId))

            );

            return statement;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingAvailPhysicalDefinition</Name>
				<Source><![CDATA[
    public static str processingAvailPhysicalDefinition()
    {
        DictTable whsInventReserveTable = new DictTable(tableNum(WhsInventReserve));
        DictTable whsInventEnabledTable = new DictTable(tableNum(WhsInventEnabled));

        FieldId reservPhysicalFieldId   = fieldNum(WhsInventReserve, ReservPhysical);

        str orderByField, groupByField;

        // Order by HierarchyLevel asc
        orderByField = whsInventReserveTable.fieldObject(fieldNum(WhsInventReserve, HierarchyLevel)).name(DbBackend::Native);

        // Group by HierarchyLevel
        groupByField = whsInventReserveTable.fieldObject(fieldNum(WhsInventReserve, HierarchyLevel)).name(DbBackend::Native);

        /*
        (CAST ((CASE WHEN EXISTS (SELECT 'x' FROM WHSINVENTENABLED SUBQUERY WHERE SUBQUERY.PARTITION = T1.PARTITION AND SUBQUERY.DATAAREAID = T1.DATAAREAID AND SUBQUERY.ITEMID = T1.ITEMID)
        THEN
            // If current hierarchy exists multiple child nodes, we should calculate the onhand from ReservPhysical, which current ReservPhysical reduces the sum of ReservPhysical from the closest child nodes
            CASE WHEN (SELECT COUNT(RECID) FROM WHSINVENTRESERVE SUBQUERY WHERE SUBQUERY.PARTITION = T1.PARTITION AND SUBQUERY.DATAAREAID = T1.DATAAREAID AND SUBQUERY.ITEMID = T1.ITEMID AND SUBQUERY.PARENTINVENTDIMID = T1.INVENTDIMID) > 1
            THEN -(
            (SELECT TOP(1) MAX(RESERVPHYSICAL) FROM WHSINVENTRESERVE SUBQUERY WHERE SUBQUERY.PARTITION = T1.PARTITION AND SUBQUERY.DATAAREAID = T1.DATAAREAID AND SUBQUERY.ITEMID = T1.ITEMID AND SUBQUERY.INVENTDIMID = T1.INVENTDIMID)
            -
            (SELECT TOP(1) SUM(RESERVPHYSICAL) FROM WHSINVENTRESERVE SUBQUERY WHERE SUBQUERY.PARTITION = T1.PARTITION AND SUBQUERY.DATAAREAID = T1.DATAAREAID AND SUBQUERY.ITEMID = T1.ITEMID AND SUBQUERY.PARENTINVENTDIMID = T1.INVENTDIMID
            Group by HIERARCHYLEVEL
            Order by HIERARCHYLEVEL ASC)
            )
            ELSE T1.AVAILPHYSICAL
            END
        ELSE
        T1.AVAILPHYSICAL
        END) AS NUMERIC(32, 6))) AS CALCULATEDAVAILABLEPHYSICAL
        */
        str statement = strFmt("CASE WHEN " +
            "EXISTS (SELECT 'x' FROM %1 SUBQUERY WHERE SUBQUERY.%2 = %3 AND SUBQUERY.%4 = %5 AND SUBQUERY.%6 = %7) " +
            "THEN " +
            "CASE WHEN (SELECT COUNT(RECID) FROM %8 SUBQUERY WHERE SUBQUERY.%9 = %10 AND SUBQUERY.%11 = %12 AND SUBQUERY.%13 = %14 AND SUBQUERY.%15 = %16) > 1 " +
            "THEN -(" +
                "(SELECT TOP(1) MAX(%18) FROM %8 SUBQUERY WHERE SUBQUERY.%9 = %10 AND SUBQUERY.%11 = %12 AND SUBQUERY.%13 = %14 AND SUBQUERY.%17 = %16)" +
                " - " +
                "(SELECT TOP(1) SUM(%18) FROM %8 SUBQUERY WHERE SUBQUERY.%9 = %10 AND SUBQUERY.%11 = %12 AND SUBQUERY.%13 = %14 AND SUBQUERY.%15 = %16 GROUP BY %20 ORDER BY %21 ASC)" +
                ") " +
                "ELSE %19 " +
                "END "+
            "ELSE %19 " +
            "END",

            whsInventEnabledTable.name(DbBackend::Native),

            whsInventEnabledTable.fieldObject(fieldNum(WhsInventEnabled, Partition)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, Partition)),

            whsInventEnabledTable.fieldObject(fieldNum(WhsInventEnabled, DataAreaID)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, DataAreaId)),

            whsInventEnabledTable.fieldObject(fieldNum(WhsInventEnabled, ItemId)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, ItemId)),

            whsInventReserveTable.name(DbBackend::Native),

            whsInventReserveTable.fieldObject(fieldNum(WhsInventReserve, Partition)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, Partition)),

            whsInventReserveTable.fieldObject(fieldNum(WhsInventReserve, DataAreaID)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, DataAreaId)),

            whsInventReserveTable.fieldObject(fieldNum(WhsInventReserve, ItemId)).name(DbBackend::Native),
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, ItemId)),

            // %15: SUBQUERY.PARENTINVENTDIMID
            whsInventReserveTable.fieldObject(fieldNum(WhsInventReserve, ParentInventDimId)).name(DbBackend::Native),

            // %16: T1.INVENTDIMID
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, InventDimId)),

            // %17: SUBQUERY.INVENTDIMID
            whsInventReserveTable.fieldObject(fieldNum(WhsInventReserve, InventDimId)).name(DbBackend::Native),

            // %18: SUBQUERY.ReservPhysical
            whsInventReserveTable.fieldObject(reservPhysicalFieldId).name(DbBackend::Native),

            // %19: T1.AvailPhysical
            SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, AvailPhysical)),

            // %20, %21
            groupByField, orderByField
        );

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingNonWHSAvailPhysicalDefinition</Name>
				<Source><![CDATA[
    public static str processingNonWHSAvailPhysicalDefinition()
    {
        return SysComputedColumn::returnField(viewstr(InventOnHandAIEntity), tableStr(InventSum), fieldStr(InventSum, AvailPhysical));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>