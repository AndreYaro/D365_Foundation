<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRule_FixedTaxOffset_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// If fixed offset is enabled, than special account shopuld be offset to tax account
/// </summary>
[SysClassNameAttribute(classStr(TaxSourceDocSublineItem))]
class AccJourRule_FixedTaxOffset_RU extends AccountingJournalizingRule implements SysIConditionalExtension
{
    TaxDirection        taxDirection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        SourceDocumentLineItem          parentSourceDocumentLineItem = sourceDocumentLineItem.parmParentSourceDocumentLineItem();
        AccJourRuleSaleOfProductCharge  chargeAccountingJournalizingRule;
        SourceDocumentLineItemICharge   iCharge;

        LedgerDimensionDefaultAccount   defaultLedgerDimension;
        LedgerDimensionAccount          ret;

        if (parentSourceDocumentLineItem && parentSourceDocumentLineItem is SourceDocumentLineItemICharge)
        {
            iCharge = parentSourceDocumentLineItem as SourceDocumentLineItemICharge;
            if (iCharge.parmMarkupTable().needChargeIssue())
            {
                chargeAccountingJournalizingRule = AccountingJournalizingRule::newRule(parentSourceDocumentLineItem, MonetaryAmount::Charge);
                chargeAccountingJournalizingRule.parmCurrentLedgerDimensionAllocation(this.parmCurrentLedgerDimensionAllocation());
                chargeAccountingJournalizingRule.parmDimensionValuesUsedForSummaryAccount(true, this.parmDimensionValuesUsedForSummaryAccount());
                ret = chargeAccountingJournalizingRule.getJournalAccountEntryLedgerDimension(_defaultLedgerDimension, _accountingDistributionLedgerDimension);
                return ret;
            }
        }

        // dimension of fixet offset trans should be always same as dimension of the _accountingDistributionLedgerDimension
        defaultLedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_defaultLedgerDimension);
        ret = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(defaultLedgerDimension, _accountingDistributionLedgerDimension);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimAllocList</Name>
				<Source><![CDATA[
    protected void initDimAllocList()
    {
        SourceDocumentLineItem          parentSourceDocumentLineItem = sourceDocumentLineItem.parmParentSourceDocumentLineItem();
        AccJourRuleSaleOfProductCharge  chargeAccountingJournalizingRule;
        SourceDocumentLineItemICharge   iCharge;

        ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
        ledgerDimensionAllocationList.addEnd(
            LedgerDimensionAllocation::newFromParameters(
                this.item().offsetLedgerDimension_RU(),
                1,
                this.parmSide(),
                false
            ));

        if (parentSourceDocumentLineItem && parentSourceDocumentLineItem is SourceDocumentLineItemICharge)
        {
            iCharge = parentSourceDocumentLineItem as SourceDocumentLineItemICharge;
            if (iCharge.parmMarkupTable().needChargeIssue())
            {
                chargeAccountingJournalizingRule = AccountingJournalizingRule::newRule(parentSourceDocumentLineItem, MonetaryAmount::Charge);
                chargeAccountingJournalizingRule.addChargeIssueToDimAllocList(ledgerDimensionAllocationList, this.parmSide());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether an extension can be applied in current conditions.
    /// </summary>
    /// <param name="_parameter">
    /// Parameter that specifies extension context.
    /// </param>
    /// <returns>
    /// true, if the extension can be applied; otherwise, false.
    /// </returns>
    public boolean isApplicableTo(anytype _parameter)
    {
        TaxSourceDocSublineItem item;
        boolean                 ret;
        Object                  object = _parameter;
        if (object is TaxSourceDocSublineItem)
        {
            item = object as TaxSourceDocSublineItem;
            ret = item.offsetLedgerDimension_RU() ? true : false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
    private TaxSourceDocSublineItem item()
    {
        return this.parmSourceDocumentLineItem() as TaxSourceDocSublineItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        return LedgerPostingType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side = DebitCredit::Debit;
        taxDirection = this.item().parmTaxDirection();
        switch (taxDirection)
        {
            case TaxDirection::IncomingTax:
            case TaxDirection::UseTax:
                if (this.parmAmount() >= 0.0)
                {
                    side = DebitCredit::Credit;
                }
                else
                {
                    side = DebitCredit::Debit;
                }
                break;

            case TaxDirection::OutgoingTax:
                if (this.parmAccountingdistribution().TransactionCurrencyAmount >= 0.0)
                {
                    side = DebitCredit::Credit;
                }
                break;
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>