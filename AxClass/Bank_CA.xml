<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_CA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_CA extends Bank
{
    #define.AccNumberMinLength(7)
    #define.AccNumberMaxLength(12)
    #define.RegNumberLength(9)
    #define.NormHyphenPosition(5)
    #define.ElecZeroPosition(0)
    #define.LengthOfCharacter(1)
    #define.NormalTransChar("-")
    #define.ElectronicTransChar("0")
    #define.RoutingNumberType("CC")

    private const int RegNumHyphenPosition = 6;
    private const int RegNumElecFirstPosition = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the routing number or type and account number on a Canadian bank account.
    /// </summary>
    /// <param name="_bankAccountMap">
    ///    A <c>BankAccountMap</c> object for the account to validate.
    /// </param>
    /// <returns>
    ///    true if the bank account is validated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Calls the checks for bank account number, routing number, and routing number type
    /// </remarks>
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        boolean bankIsValid = this.checkBankRegNum(_bankAccountMap.RegistrationNum, _bankAccountMap.BankCodeType);
        
        if (bankIsValid)
        {
            bankIsValid = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return bankIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCheckBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether we can call the <c>checkBankAccountNum</c> method or not.
    /// </summary>
    /// <param name="_accountNumber">
    ///    The bank account number to validate.
    /// </param>
    /// <returns>
    ///     true if the <c>checkBankAccountNum</c> can be called; otherise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean canCheckBankAccountNum(BankAccount _accountNumber)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the account number on a Canadian bank account.
    /// </summary>
    /// <param name="_accountNumber">
    ///    The bank account number to validate.
    /// </param>
    /// <returns>
    ///    true if the bank account is validated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The account number must be between 7 and 12 characters long.
    /// </remarks>
    public boolean checkBankAccountNum(BankAccount _accountNumber)
    {
        boolean accountNumIsValid = true;

        if (this.canCheckBankAccountNum(_accountNumber))
        {
            if (strLen(_accountNumber) < #AccNumberMinLength
            || strLen(_accountNumber) > #AccNumberMaxLength)
            {
                accountNumIsValid = checkFailed(strfmt("@SYS317402",#AccNumberMinLength,#AccNumberMaxLength));
            }
        }

        return accountNumIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankRegNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The routing number must be 9 characters long Electronic transfers must have a <c>0</c> as the first
    ///    digit Other transfers must have a <c>-</c> as the fifth character
    /// </summary>
    /// <param name="_registrationNum">
    ///    The bank registration number to validate.
    /// </param>
    /// <param name="_bankCodeType">
    ///    The bank registration type to use during validation.
    /// </param>
    /// <returns>
    ///    true if the routing number is valid; otherwise, false.
    /// </returns>
    public boolean checkBankRegNum(BankRegNum _registrationNum, BankCodeType _bankCodeType)
    {
        boolean bankRegNumIsValid = true;

        if (this.canCheckBankRegistrationNum())
        {
            if (_bankCodeType != BankCodeType::Code_CC)
            {
                bankRegNumIsValid = checkFailed("@SYS332296");
                return bankRegNumIsValid;
            }

            if (strLen(_registrationNum) != #RegNumberLength)
            {
                bankRegNumIsValid = checkFailed(strfmt("@SYS313991",#RoutingNumberType,#RegNumberLength));
                return bankRegNumIsValid;
            }

            if (!(subStr(_registrationNum, RegNumHyphenPosition, #LengthOfCharacter) == #NormalTransChar)
            && !(subStr(_registrationNum, RegNumElecFirstPosition, #LengthOfCharacter) == #ElectronicTransChar))
            {
                bankRegNumIsValid = checkFailed("@SYS332295");
            }
        }

        return bankRegNumIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCheckBankRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to use standard validation or not.
    /// </summary>
    /// <returns>
    ///     true if we need to use standard validation; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean canCheckBankRegistrationNum()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;
        if (_bankAccountMap.fieldAccessRight(fieldstr(BankAccountMap, AccountNum)) != AccessRight::NoAccess
        && _bankAccountMap.fieldAccessRight(fieldStr(BankAccountMap, RegistrationNum)) != AccessRight::NoAccess)
        {
            ret = this.checkBankAccount(_bankAccountMap);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Bank_CA construct()
    {
        return new Bank_CA();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>