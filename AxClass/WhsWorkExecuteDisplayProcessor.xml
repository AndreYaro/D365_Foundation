<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplayProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Stopwatch = System.Diagnostics.Stopwatch;

/// <summary>
/// The <c>WhsWorkExecuteDisplayProcessor</c> class processes the input container in a safe and consistent manner including handling of transactions and exceptions.
/// </summary>
internal final class WhsWorkExecuteDisplayProcessor
{
    #WHSRF
    
    private WhsWorkExecuteDisplayProcessorState state;
    private WHSWorkExecuteDisplayExceptionHandler exceptionHandler;

    private WHSServiceXMLTranslator xmlTranslator;
    private container               initialContainer;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmXmlTranslator</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSServiceXMLTranslator parmXmlTranslator(WHSServiceXMLTranslator _xmlTranslator = xmlTranslator)
    {
        xmlTranslator = _xmlTranslator;
        return xmlTranslator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitialContainer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container parmInitialContainer(container _initialContainer = initialContainer)
    {
        initialContainer = _initialContainer;
        return initialContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsWorkExecuteDisplayProcessor construct()
    {
        return new WhsWorkExecuteDisplayProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBuildUsingProcessGuide</Name>
				<Source><![CDATA[
    private WHSExecuteProcessEventHandlerResultValue tryBuildUsingProcessGuide()
    {
        if (state.mustUseProcessGuide())
        {
            EventHandlerResult handlerResult = EventHandlerResult::newDefault();
            WHSExecuteProcessParameters parameters = state.createExecuteProcessParameters();
            parameters.xmlTranslator = xmlTranslator;
            parameters.processor = this;
            WhsWorkExecuteDisplay::callExecuteProcessDelegate(parameters, handlerResult);
            return handlerResult.result();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleButtonClicks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void handleButtonClicks()
    {
        if (state.isCancel() || state.isLogOff()) 
        {
            ttsbegin;

            var pass = state.pass;
            var workExecuteDisplay = state.workExecuteDisplay;

            if (pass && pass.exists(#WorkId))
            {
                workExecuteDisplay.callCleanupWorkOnCancelOrLogout(pass.lookup(#WorkId));
            }

            state.handleCatchWeightTagOnCancelOrLogoff();
            state.resetPassOnCancelOrLogOff();

            if (state.isCancel() &&
                state.mustRemoveUserFromOpenLPsOnCancel())
            {
                WHSMixedLicensePlateReceipt::removeUserFromOpenLPs(pass.lookup(#UserId));
            }

            if (state.isLogOff())
            {
                this.handleLogOff();
            }
            else
            {
                state.ensureWorkExecuteDisplay();
                this.handleCancelClicked();
            }

            ttscommit;
        }
            
        state.ensureWorkExecuteDisplay();

        this.handleBackClicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLogOff</Name>
				<Source><![CDATA[
    private void handleLogOff()
    {
        // Log user logout telemetry
        WHSWarehouseMobileDeviceActivityData whsUserActivityData = state.createOriginalActivityData();
        WHSWarehouseMobileDeviceTelemetryEventLogger::logUserLogout(whsUserActivityData);
        SysDeviceUserDailyActionFlag::setDeviceUserActiveToday(WHSWorkUser::getTelemetryId(state.userId), SysDeviceUserType::Warehouse);

        // Delete session
        WHSWorkUserSession::deleteSession(state.userId);

        // Restore state variables
        state.resetWhenLoggingOff(xmlTranslator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCancelClicked</Name>
				<Source><![CDATA[
    private void handleCancelClicked()
    {
        var workExecuteDisplay = state.workExecuteDisplay;
        workExecuteDisplay.callCancelClicked();
        state.resetOnCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleBackClicked</Name>
				<Source><![CDATA[
    private void handleBackClicked()
    {
        if (state.isBack())
        {
            var workExecuteDisplay = state.workExecuteDisplay;
            workExecuteDisplay.callBackClicked();
            state.resetOnBack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WhsWorkExecuteDisplayProcessorState resetState()
    {
        state = WhsWorkExecuteDisplayProcessorState::createFromContainer(initialContainer);
        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForRetry</Name>
				<Source><![CDATA[
    private void prepareForRetry()
    {
        exceptionHandler = null;

        this.resetState();
        state.initializeWorkExecuteDisplay(xmlTranslator);
        this.handleButtonClicks();
        exceptionHandler = state.createExceptionHandler();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextFormStateInTransaction</Name>
				<Source><![CDATA[
    private container buildNextFormStateInTransaction()
    {
        exceptionHandler = state.createExceptionHandler();

        var formBuilder = new WhsWorkExecuteDisplayFormBuilder(this, state);
        WHSExecuteProcessEventHandlerResultValue result = WHSFormBuilderRunWithRetry::run(formBuilder, exceptionHandler, this, state.pass.parmUserId());

        return [result.formContainer, result.xmlState, result.isFormContainerStoredInUserSession];        
    }

]]></Source>
			</Method>
			<Method>
				<Name>recreatePreviousResponse</Name>
				<Source><![CDATA[
    private container recreatePreviousResponse()
    {
        WHSWorkUserSession session = WHSWorkUserSession::find(state.pass.parmUserId());
        WHSWorkUserSessionStateFacade sessionState = session.sessionState();

        XML xml = session.recreateAuthorizationTokensInXml(sessionState.parmXml());

        // Note :
        // As we do not store the form container, it is recreated from XML. It may not be 100% identical. In the common use cases, it is thrown away anyway.
        // The emulator uses it.
        container con = WhsWorkExecuteDisplay::readXML(xml);

        return [con, xml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextFormState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container buildNextFormState()
    {
        str xmlState;
        container formContainer;
        boolean isFormContainerStoredInUserSession = false;

        Stopwatch stopwatch = Stopwatch::StartNew();

        this.resetState();

        if (state.pass.parmIsPreviousSession())
        {
            // Backend received already processed request again. Likely the last response was lost in transit.
            // Echo back previous response.

            return this.recreatePreviousResponse();
        }
        
        using (var _ = (WHSDocumentRoutingContext::IsWhsMobileAppSessionDocumentRoutingContextFlightEnabled ? WHSDocumentRoutingContext::newFromPass(state.pass) : null))
        {
            WHSExecuteProcessEventHandlerResultValue resultValue = this.tryBuildUsingProcessGuide();

            if (resultValue && resultValue.formContainer != conNull())
            {
                formContainer = resultValue.formContainer;
                isFormContainerStoredInUserSession = resultValue.isFormContainerStoredInUserSession;
                xmlState = resultValue.xmlState;

                if (resultValue.exitProcessRequested)
                {
                    if (isFormContainerStoredInUserSession)
                    {
                        return [formContainer, xmlState];
                    }

                    return this.exitFromProcessGuideFlow(formContainer);
                }
            }
            else
            {
                if (state.isDetourButtonClicked())
                {
                    state.navigateToDetour();
                }

                state.initializeWorkExecuteDisplay(xmlTranslator);

                this.handleButtonClicks();

                if (state.shouldReturnFromDetour())
                {
                    return this.returnFromDetour();
                }

                if (state.useSingleTransactionMode())
                {
                    using (var batchedLabelPrint = WhsBatchedDocumentRoutingContext::construct())
                    {
                        [formContainer, xmlState, isFormContainerStoredInUserSession] = this.buildNextFormStateInTransaction();

                        if (isFormContainerStoredInUserSession)
                        {
                            batchedLabelPrint.printBatchedLabels();
                        }
                    }
                }
                else
                {
                    formContainer = state.buildDisplayForm();
                }
            
                formContainer = state.workExecuteDisplay.clearClickedButtons(formContainer);
            }
        }

        this.handleLogin(formContainer);

        if (!isFormContainerStoredInUserSession &&
           !xmlState)
        {
            // Either an exception happened, single transaction is not used
            [formContainer, xmlState] = this.createXmlStateAndUpdateSession(formContainer);
        }

        stopwatch.Stop();

        // Log user activity telemetry (except for login and logout events which are logged separately)
        if (state.userId != '')
        {
            state.resetDeviceId();
            WHSWarehouseMobileDeviceTelemetryEventLogger::logUserActivity(state.createActivityData(xmlState, stopwatch.ElapsedMilliseconds));
            SysDeviceUserDailyActionFlag::setDeviceUserActiveToday(WHSWorkUser::getTelemetryId(state.userId), SysDeviceUserType::Warehouse);
        }

        container ret = [formContainer, xmlState];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exitFromProcessGuideFlow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container exitFromProcessGuideFlow(container _formContainer)
    {
        if (state.isDetourSession())
        {
            return this.returnFromDetour(this.getProcessGuideMessageControl(_formContainer));
        }

        return WhsWorkExecuteDisplay::getNextFormState(_formContainer, xmlTranslator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessGuideMessageControl</Name>
				<Source><![CDATA[
    private container getProcessGuideMessageControl(container _formContainer)
    {
        #WHSWorkExecuteControlElements

        container ret;

        if (conLen(_formContainer) >= #RFErrorLoc)
        {
            container controlCon = conPeek(_formContainer, #RFErrorLoc);
            if (conPeek(controlCon, #controlType) == #RFLabel &&
                conPeek(controlCon, #name)        == #RFError &&
                conPeek(controlCon, #label)       != '')
            {
                ret = controlCon;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnFromDetour</Name>
				<Source><![CDATA[
    private container returnFromDetour(container _messageControl = conNull())
    {
        var formBuilder = new WHSReturnFromDetourFormBuilder(this, state, _messageControl);
        exceptionHandler = state.createExceptionHandler();
        WHSExecuteProcessEventHandlerResultValue result = WHSFormBuilderRunWithRetry::run(formBuilder, exceptionHandler, this, state.pass.parmUserId());

        return [result.formContainer, result.xmlState];        
    }

]]></Source>
			</Method>
			<Method>
				<Name>sessionMobileAppStepId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppStepId sessionMobileAppStepId()
    {
        container passthroughInfo = conPeek(initialContainer, #PassthroughInfo);
        WHSRFPassthrough pass = WHSRFPassthrough::create(passthroughInfo);
        return pass.parmMobileAppStepId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLogin</Name>
				<Source><![CDATA[
    private void handleLogin(container _formContainer)
    {
        if (state.isLogin() && conLen(conPeek(_formContainer, #PassthroughInfo)) > 0)
        {
            WHSRFPassthrough tmpPass = WHSRFPassthrough::create(conPeek(_formContainer, #PassthroughInfo));

            // Log user login telemetry
            if (tmpPass.exists(#UserSessionId) && tmpPass.exists(#UserId))
            {
                WhsUserId userId = tmpPass.lookup(#UserId);

                WHSWarehouseMobileDeviceTelemetryEventLogger::logUserLogin(state.createOriginalActivityData(userId));
                SysDeviceUserDailyActionFlag::setDeviceUserActiveToday(WHSWorkUser::getTelemetryId(userId), SysDeviceUserType::Warehouse);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlStateAndUpdateSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container createXmlStateAndUpdateSession(container _formContainer)
    {
        str xmlState = '';
        container formContainer = _formContainer;

        if (state.mustUpdateSession(formContainer))
        {
            formContainer = state.prepareSessionTokens(formContainer);
            xmlState = xmlTranslator.createXml(formContainer);

            // The current session language is set on the session authentication step
            WhsWorkExecuteDisplay::callUpdateWorkUserSession(state.userId, formContainer, '', xmlState, infolog.language(), xmlTranslator);
        }

        return [formContainer, xmlState];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>