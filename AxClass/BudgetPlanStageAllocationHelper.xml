<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanStageAllocationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanStageAllocationHelper</c> class provides helper methods to use to facilitate the stage allocation functionality.
/// </summary>
public class BudgetPlanStageAllocationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>swapBudgetPlanningStageAllocationPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the ordinal for two <c>BudgetPlanningStageAllocation</c> records.
    /// </summary>
    /// <param name = "_workflowStageRecId">The budget plan workflow stage of both records.</param>
    /// <param name = "_elementAtHigherPriority">The ordinal position of the higher record.</param>
    /// <param name = "_elementAtLowerPriority">The ordinal position of the lower record.</param>
    public static void swapBudgetPlanningStageAllocationPriority(
        BudgetPlanningWorkflowStageRecId _workflowStageRecId,
        BudgetPlanStageAllocationOrdinal _elementAtHigherPriority,
        BudgetPlanStageAllocationOrdinal _elementAtLowerPriority)
    {
        BudgetPlanningStageAllocation higherPosition;
        BudgetPlanningStageAllocation lowerPosition;

        if (_elementAtHigherPriority > _elementAtLowerPriority)
        {
            throw error("@Budget:BudgetPlanning_Validation_IncorrectStageAllocationSwappingOrder");
        }

        select firstonly forupdate higherPosition
            order by ordinal desc
            where higherPosition.BudgetPlanningWorkflowStage == _workflowStageRecId
                && higherPosition.Ordinal <= _elementAtHigherPriority;

        select firstonly forupdate lowerPosition
            order by ordinal asc
            where lowerPosition.BudgetPlanningWorkflowStage == _workflowStageRecId
                && lowerPosition.Ordinal >= _elementAtLowerPriority;

        BudgetPlanStageAllocationOrdinal higherPriorityOrdinal = higherPosition.Ordinal;

        ttsbegin;

        higherPosition.Ordinal = lowerPosition.Ordinal;
        higherPosition.update();

        lowerPosition.Ordinal = higherPriorityOrdinal;
        lowerPosition.update();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>