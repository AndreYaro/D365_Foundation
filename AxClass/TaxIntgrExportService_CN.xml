<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportService_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The electronic reporting service class for Tax integration export
/// </summary>
class TaxIntgrExportService_CN extends SysOperationServiceBase
{
    TaxProfileTable_CN              taxProfile;
    TaxProfileId_CN                 profileId;
    boolean                         ignoreZero;
    Query                           query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyParameterRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies range from parameter.
    /// </summary>
    protected void applyParameterRange()
    {
        QueryBuildDataSource dataSource;

        taxProfile = TaxProfileTable_CN::findByProfileId(profileId);
        if (taxProfile)
        {
            dataSource = query.dataSourceTable(tableNum(TaxIntgrExportDocument_CN));
            SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, taxCode)).value(SysQuery::value(taxProfile.TaxCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodeMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the tax code statistics map.
    /// </summary>
    /// <returns>
    /// The tax code statistics map.
    /// </returns>
    protected Map getTaxCodeMap()
    {
        QueryBuildDataSource            dataSource;
        Map                             taxCodeMap;
        TaxIntgrExportDocument_CN       exportDocument;
        int                             documentCount;
        TaxCode                         lastTaxCode;
        QueryRun                        queryRun;

        //make the query count and group by tax code
        dataSource = query.dataSourceTable(tableNum(TaxIntgrExportDocument_CN));
        dataSource.addGroupByField(fieldNum(TaxIntgrExportDocument_CN, TaxCode));
        dataSource.addSortField(fieldNum(TaxIntgrExportDocument_CN, TaxCode));
        dataSource.addGroupByField(fieldNum(TaxIntgrExportDocument_CN, RecId));
        queryRun = new QueryRun(query);

        taxCodeMap = new Map(Types::String, Types::Integer);
        while (queryRun.next())
        {
            exportDocument = queryRun.get(exportDocument.TableId);

            if (lastTaxCode != ''
                && exportDocument.TaxCode != lastTaxCode)
            {
                taxCodeMap.insert(lastTaxCode, documentCount);
                documentCount = 0;
            }
            lastTaxCode = exportDocument.TaxCode;
            documentCount++;
        }
        if (lastTaxCode != '' || TaxIntgrExportDocumentMultiTaxFeature::isEnabled())
        {
            taxCodeMap.insert(lastTaxCode, documentCount);
        }

        return taxCodeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIntgrExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Export VAT invoices
    /// </summary>
    /// <param name = "_contract">Tax integration export contract</param>
    public void taxIntgrExport(TaxIntgrExportContract_CN _contract)
    {
        int                             invoiceCount;
        int                             fileCount;
        Map                             taxCodeMap;
        MapEnumerator                   mapEnumerator;

        profileId = _contract.parmProfileId();
        ignoreZero = _contract.parmIgnoreZero();
        query = new Query(SysOperationHelper::base64Decode(_contract.parmQuery()));

        this.applyParameterRange();

        try
        {
            TaxIntgrExportDocumentExporter_CN::applyMandatoryRange(query);

            taxCodeMap = this.getTaxCodeMap();
            fileCount = taxCodeMap.elements();

            if (fileCount)
            {
                mapEnumerator = taxCodeMap.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    if (TaxIntgrExportDocumentExporter_CN::export(mapEnumerator.currentKey(), query, _contract))
                    {
                        invoiceCount += mapEnumerator.currentValue();
                    }
                }
            }
        }
        catch
        {
            // Export is canceled.
            warning("@SYS55051");
        }

        info(strfmt("@GLS54784", int2str(invoiceCount)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>