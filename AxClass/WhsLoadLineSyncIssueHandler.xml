<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLoadLineSyncIssueHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSLoadLineSyncIssueHandler</c> class handles synchronization issues between inventory transactions and load lines according to the
///    WHS parameter setup.
/// </summary>
public class WhsLoadLineSyncIssueHandler
{
    WHSLoadSynchronizationPolicy    whsLoadSynchronizationPolicy;

    private WHSInstrumentationLogger    instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>effectiveLoadSynchronizationPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the effective synchronization policy.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID that the policy is intended to be applied to.
    /// </param>
    /// <returns>
    ///    The effective synchronization policy.
    /// </returns>
    protected WHSLoadSynchronizationPolicy effectiveLoadSynchronizationPolicy(InventTransId _inventTransId)
    {
        WHSLoadLine                     whsLoadLine;
        WHSLoadSynchronizationPolicy    effectivePolicy = whsLoadSynchronizationPolicy;
        
        switch (whsLoadSynchronizationPolicy)
        {
            case WHSLoadSynchronizationPolicy::Invalidate:
                // if any work has been created, then the 'Invalidate' policy can no longer be applied.
                select firstonly RecId from whsLoadLine
                    where whsLoadLine.InventTransId  == _inventTransId
                        && (whsLoadLine.WorkCreatedQty != 0 || whsLoadLine.LoadDirection == WHSLoadDirection::Inbound);
                
                if (whsLoadLine.RecId)
                {
                    effectivePolicy = WHSLoadSynchronizationPolicy::Fail;
                }

                break;
        }

        return effectivePolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a warning in the info log or throws an error.
    /// </summary>
    /// <param name="_message">
    ///    The message; optional.
    /// </param>
    /// <param name="_throwError">
    ///    A Boolean value that indicates if an error must be thrown; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    An error occurrerd. The message will specify the type of error.
    /// </exception>
    protected void fail(
        str     _message    = '',
        boolean _throwError = false)
    {
        if (_throwError)
        {
            throw error(_message);
        }
        else
        {
            if (_message)
            {
                checkFailed(_message);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a synchronization issue.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID that is related to the issue.
    /// </param>
    /// <param name="_message">
    ///    The message that can be given to the user; optional.
    /// </param>
    /// <param name="_canThrowError">
    ///    A Boolean value that indicates if an error can be thrown; optional.
    /// </param>
    /// <param name="_forcePolicy">
    ///    A Boolean value that indicates if a policy should be enforced; optional.
    /// </param>
    /// <param name="_forcedSynchronizationPolicy">
    ///    A <c>WHSLoadSynchronizationPolicy</c> value that represents the enforced policy.
    /// </param>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    Wheher or not a method will be shown and/or an error will be thrown depends on the policy defined in the WHS parameters.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///    The load synchronization policy is unknown.
    /// </exception>
    public boolean handleIssue(
        InventTransId _inventTransId,
        str           _message       = '',
        boolean       _canThrowError = false,
        boolean       _forcePolicy = false,
        WHSLoadSynchronizationPolicy _forcedSynchronizationPolicy = whsLoadSynchronizationPolicy)
    {
        WHSLoadSynchronizationPolicy effectivePolicy = _forcePolicy ? _forcedSynchronizationPolicy : this.effectiveLoadSynchronizationPolicy(_inventTransId);

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().loadLineActivities().handleValidationFailure(_inventTransId, _message, _canThrowError, _forcePolicy, effectivePolicy))
        {
            switch (effectivePolicy)
            {
                case WHSLoadSynchronizationPolicy::Invalidate:
                    this.invalidate(_inventTransId);
                    break;
                case WHSLoadSynchronizationPolicy::Fail:
                    this.fail(_message,_canThrowError);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables
    /// </summary>
    protected void init()
    {
        whsLoadSynchronizationPolicy = WHSParameters::find().LoadSynchronizationPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the invalid field on load lines and related load headers.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID that is used to identify records to update.
    /// </param>
    protected void invalidate(InventTransId _inventTransId)
    {
        if (_inventTransId)
        {
            ttsbegin;

            WHSLoadLine whsLoadLine;
            whsLoadLine.skipDataMethods(true);
            update_recordset whsLoadLine
                setting Invalid = NoYes::Yes
                where whsLoadLine.InventTransId == _inventTransId
                    && whsLoadLine.LoadId       != ''
                    && whsLoadLine.Invalid       == NoYes::No;

            WHSLoadTable whsLoadTable;
            whsLoadTable.skipDataMethods(true);
            update_recordset whsLoadTable
                setting Invalid = NoYes::Yes
                where whsLoadTable.Invalid == NoYes::No
                exists join whsLoadLine
                    where whsLoadLine.LoadId         == whsLoadTable.LoadId
                        && whsLoadLine.InventTransId == _inventTransId
                        && whsLoadLine.LoadId        != '';

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WHSLoadLineSyncIssueHandler</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WHSLoadLineSyncIssueHandler</c> class.
    /// </returns>
    private static WHSLoadLineSyncIssueHandler construct()
    {
        return new WHSLoadLineSyncIssueHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>WHSLoadLineSyncIssueHandler</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WHSLoadLineSyncIssueHandler</c> class.
    /// </returns>
    public static WHSLoadLineSyncIssueHandler newStandard()
    {
        WHSLoadLineSyncIssueHandler whsLoadLineSyncIssueHandler = WHSLoadLineSyncIssueHandler::construct();

        whsLoadLineSyncIssueHandler.init();

        return whsLoadLineSyncIssueHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>