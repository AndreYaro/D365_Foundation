<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_Facture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PurchFormLetter_Facture_RU</c> class used to call posting of facture simultaneously with invoice posting
/// </summary>
final class PurchFormLetter_Facture_RU extends PurchFormLetter_Invoice implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return <c>DocumentStatus</c> value corresponding to facture
    /// </summary>
    /// <returns>
    /// <c>DocumentStatus</c> value corresponding to facture
    /// </returns>
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::Facture_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(
        identifierName _className = classStr(FormletterService),
        identifierName _methodName= methodStr(FormletterService, postPurchaseOrderFacture_RU),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmListCommonCS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets list of variables used for facture and invoice posting
    /// </summary>
    public void resetParmListCommonCS()
    {
        super();

        this.proforma(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription  description()
    {
        return "@GLS104524";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new instance of <c>SalesFormLetter_Facture_RU</c> class
    /// </summary>
    /// <param name="_className">
    /// Class name to be called for posting facture
    /// </param>
    /// <param name="_methodName">
    /// Method name to be called for posting of facture
    /// </param>
    /// <param name="_executionMode">
    /// <c>SysOperationExecutionMode</c> for performing posting operation
    /// </param>
    /// <returns>
    /// New instance of <c>SalesFormLetter_Facture_RU</c> class
    /// </returns>
    static public PurchFormLetter_Facture_RU newFacture(
        identifierName _className  = classStr(FormletterService),
        identifierName _methodName = methodStr(FormletterService, postPurchaseOrderFacture_RU),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchFormLetter_Facture_RU formletter = new PurchFormLetter_Facture_RU(_className, _methodName, _executionMode);
        formletter.init();
        return formletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>