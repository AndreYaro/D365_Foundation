<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLine_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLine_ApplicationSuite_Extension</c> class is used for extension of the <c>PurchLine</c> table functionality.
/// </summary>
#ISOCountryRegionCodes
[ExtensionOf(tableStr(PurchLine))]
public final class PurchLine_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>interCompanyUpdateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an intercompany order line should be updated.
    /// </summary>
    /// <returns>
    /// true if the intercompany order line should be updated; otherwise, false.
    /// </returns>
    public boolean interCompanyUpdateNow()
    {
        boolean ret = next interCompanyUpdateNow();
        DataAreaId interCompanyId = this.purchTable().InterCompanyCompanyId;

        if (!ret && interCompanyId)
        {
            ret = IntrastatTriangularDealToggle::isEnabledInDataArea(interCompanyId)
                && IntrastatTriangularDealToggle::isEnabledInDataArea(this.DataAreaId)
                && this.orig().StatTriangularDeal != this.StatTriangularDeal;
        }

        return ret || this.areDeliveryOrExternalInformationUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_InvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the VendTable record for the PurchTable InvoiceAccount.
    /// </summary>
    /// <returns>The VendTable record.</returns>
    internal VendTable vendTable_InvoiceAccount()
    {
        return VendTable::find(this.purchTable().InvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds DlvTerm and DlvMode fields for Make-to-order supply automation feature
    /// </summary>
    void initFromPurchLine(
        PurchLine _purchLine,
        boolean _copyPrecisely,
        boolean _copyPriceDisc,
        boolean _copyQty,
        boolean _copyProject,
        Qty _qty,
        PdsCWInventQty _cwQty,
        boolean _setAddressFromInventDim)
    {
        next initFromPurchLine(_purchLine,
                               _copyPrecisely,
                               _copyPriceDisc,
                               _copyQty,
                               _copyProject,
                               _qty,
                               _cwQty,
                               _setAddressFromInventDim);
        if (_copyPrecisely)
        {
            this.DlvMode = _purchLine.DlvMode;
            this.DlvTerm = _purchLine.DlvTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchLine</c> record from the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> record from which to initialize the <c>PurchLine</c> record.
    /// </param>
    void initFromSalesLine(SalesLine _salesLine)
    {
        next initFromSalesLine(_salesLine);

        if (SalesPurchSyncDeliveryInfoFeature::instance().isEnabled())
        {
            PurchParameters purchParameters = PurchParameters::find();
            if (purchParameters.isDeliveryInformationCreateAllowed(_salesLine.DeliveryType))
            {
                this.DlvMode = _salesLine.DlvMode;
                this.DlvTerm = _salesLine.DlvTerm;
            }
        }
        else
        {
            this.DlvMode = _salesLine.DlvMode;
            this.DlvTerm = _salesLine.DlvTerm;
        }

        if (_salesLine.DeliveryType == TradeLineDlvType::DropShip && this.purchTable().mustTransferItemNameForIntercompany())
        {
            this.ExternalItemId = _salesLine.ExternalItemId;
            this.Name           = _salesLine.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the item changes.
    /// </summary>
    /// <param name = "_matchingAgreement">The <c>RecId</c> of the matching agreement.</param>
    /// <param name="_executeOnlyIfProductIsFullySpecified">
    ///     A Boolean value indicating whether to perform product variant validation; optional.
    /// </param>
    public void itemIdChanged(AgreementHeaderRecId _matchingAgreement, boolean _executeOnlyIfProductIsFullySpecified)
    {
        next itemIdChanged(_matchingAgreement, _executeOnlyIfProductIsFullySpecified);

        if (this.purchTable().TradeEndCustomerAccount)
        {
            this.updateExternalItemDescriptionIntercompany(this.purchTable().TradeEndCustomerAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExternalItemDescriptionIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates external item description on purchase and sales lines for intercompany orders
    /// </summary>
    /// <param name="_endCustomerAccount">
    /// <c>_endCustomerAccount</c> End customer account.
    /// </param>
    public void updateExternalItemDescriptionIntercompany(TradeEndCustomerAccount _tradeEndCustomerAccount = '')
    {
        if (this.purchTable().isInterCompanyOrder()
         && this.purchTable().mustTransferItemNameForIntercompany())
        {
            this.ExternalItemId = '';
            this.initName();

            CustVendExternalItem externalItem = CustVendExternalItem::find(ModuleInventPurchSalesVendCustGroup::Cust, 
                this.ItemId, InventDim::findOrCreateBlank().inventDimId, _tradeEndCustomerAccount);
        
            if (externalItem)
            {
                CustFormletterParameters    custFormLetterParameters = CustFormLetterParameters::find();
                
                this.ExternalItemId = externalItem.ExternalItemId;
                if (custFormLetterParameters.ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.Name = externalItem.Description;
                }
                else
                {
                    this.initName();
                    if (this.Name)
                    {
                        this.Name += '\n';
                    }
                    this.Name += externalItem.Description;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areDeliveryOrExternalInformationUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a delivery or external information were updated.
    /// </summary>
    /// <returns>
    /// true if information was updated; otherwise, false.
    /// </returns>
    private boolean areDeliveryOrExternalInformationUpdated()
    {
        return ((this.purchTable().mustTransferItemNameForIntercompany()
             && (this.orig().ExternalItemId          != this.ExternalItemId
              || this.orig().Name                    != this.Name))
              || this.orig().DlvTerm != this.DlvTerm
              || this.orig().DlvMode != this.DlvMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipChangeManagementProcessing</Name>
				<Source><![CDATA[
    protected boolean skipChangeManagementProcessing(PurchTable _purchTable)
    {
        boolean ret = next skipChangeManagementProcessing(_purchTable);

        return ret
                || PurchLineGTDUpdateBypassChangeManagementValidationContext::current()
                || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                    && _purchTable.purchTable_W().CustomsImportOrder_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventory</Name>
				<Source><![CDATA[
    protected boolean mustUpdateInventory(PurchLineType _purchLineType)
    {
        boolean ret = next mustUpdateInventory(_purchLineType);

        if (!ret && PurchLineGTDUpdateBypassChangeManagementValidationContext::current())
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;

            select firstonly RecId from inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         ==  inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == this.InventTransId;

            ret = inventTrans.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCreateFixedAsset</Name>
				<Source><![CDATA[
    public void modifyCreateFixedAsset()
    {
        next modifyCreateFixedAsset();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ])
            && this.CreateFixedAsset == NoYes::Yes)
        {
            this.AssetTransTypePurch = AssetTransTypePurch::PreAcquisition_CZ;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>