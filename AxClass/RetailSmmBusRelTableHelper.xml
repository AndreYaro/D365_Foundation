<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSmmBusRelTableHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailSmmBusRelTableHelper</c> class is a helper class for B2B prospect operations such as approval and rejection.
/// </summary>
public class RetailSmmBusRelTableHelper
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approveB2BProspect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a B2B prospect into a customer
    /// </summary>
    /// <param name = "_smmBusRelTable">B2B prospect</param>
    public static void approveB2BProspect(smmBusRelTable _smmBusRelTable)
    {
        RetailSmmBusRelTableHelper::convertB2BProspectToCustomer(_smmBusRelTable, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectB2BProspect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark a B2B prospect as rejected
    /// </summary>
    /// <param name = "_smmBusRelTable">B2B prospect</param>
    public static void rejectB2BProspect(smmBusRelTable _smmBusRelTable)
    {
        ttsbegin;

        RetailSmmBusRelTableHelper::setB2BProspectStatus(_smmBusRelTable.RecId, RetailB2BProspectStatus::Rejected);
        RetailEventNotificationAction::insertRetailENAction(RetailEventNotificationType::B2BProspectRejected, _smmBusRelTable.RecId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerDatasource</Name>
				<Source><![CDATA[
    internal static void refreshCallerDatasource(smmBusRelTable smmBusRelTable)
    {
        FormDataSource dataSource = FormDataUtil::getFormDataSource(smmBusRelTable);

        if (dataSource)
        {
            // Save the active record id
            RecId activeRecId = dataSource.cursor().RecId;

            // Refresh the data source
            dataSource.research();

            // Reselect the saved record
            if (activeRecId != 0)
            {
                dataSource.positionToRecordByValue(fieldNum(Common, RecId), int642str(activeRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetB2BProspect</Name>
				<Source><![CDATA[
    internal static void resetB2BProspect(smmBusRelTable _smmBusRelTable)
    {
        ttsbegin;

        RetailSmmBusRelTableHelper::setB2BProspectStatus(_smmBusRelTable.RecId, RetailB2BProspectStatus::Pending);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resend an email to a B2B prospect who has been either approved or rejected
    /// </summary>
    /// <param name = "_smmBusRelTable">B2B prospect</param>
    public static void resendEmail(smmBusRelTable _smmBusRelTable)
    {
        RetailB2BProspectStatus status = RetailSmmBusRelTable::findBySmmBusRelTableRefRecId(_smmBusRelTable.RecId).B2BProspectStatus;

        switch (status)
        {
            case RetailB2BProspectStatus::Approved:
                RetailEventNotificationAction::insertRetailENAction(RetailEventNotificationType::B2BProspectApproved, _smmBusRelTable.RecId);
                break;

            case RetailB2BProspectStatus::Rejected:
                RetailEventNotificationAction::insertRetailENAction(RetailEventNotificationType::B2BProspectRejected, _smmBusRelTable.RecId);
                break;

            default:
                return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setB2BProspectStatus</Name>
				<Source><![CDATA[
    private static void setB2BProspectStatus(RecId _recId, RetailB2BProspectStatus _status)
    {
        RetailSmmBusRelTable statusTable;

        select forupdate statusTable
            where statusTable.smmBusRelTable == _recId;

        statusTable.B2BProspectStatus = _status;
        statusTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustHierarchyOrganization</Name>
				<Source><![CDATA[
    public static DirPartyRecId createCustHierarchyOrganization(DirPartyName _companyName, DirOrganizationNumberOfEmployees _companySize,
        smmBusRelTable _smmBusRelTable)
    {
        RetailSmmBusRelTable retailSmmBusRelTable = RetailSmmBusRelTable::findBySmmBusRelTableRefRecId(_smmBusRelTable.RecId);

        DirPartyRecId adminPartyRecId = _smmBusRelTable.Party;
        DirPartyTable adminParty = DirPartyTable::findRec(adminPartyRecId);
        CustTable adminCustTable = CustTable::findByPartyRecId(adminPartyRecId);
        RetailCustTable adminRboCustTable = RetailCustTable::find(adminCustTable.AccountNum);

        DirPartyLocation adminEmailLocation = DirPartyLocation::findPrimaryPartyLocation(adminPartyRecId, false, LogisticsElectronicAddressMethodType::Email);
        LogisticsElectronicAddress adminEmailAddress = LogisticsElectronicAddress::findPrimary(adminEmailLocation.Location, LogisticsElectronicAddressMethodType::Email);

        DirPartyLocation adminPostalLocation = DirPartyLocation::findPrimaryPartyLocation(adminPartyRecId);
        LogisticsPostalAddress adminPostalAddress = LogisticsPostalAddress::findByLocation(adminPostalLocation.Location);

        CustHierarchy hierarchy;
        CustHierarchyNode hierarchyNode;
        DirPartyTable dirPartyTable;
        LogisticsElectronicAddress logisticsElectronicAddress;

        // Check for organization with email address (adminEmailAddress.Locator) already exists in another customer hierarchy.
        select firstonly RecId from hierarchy
            exists join hierarchyNode
                where   hierarchyNode.CustHierarchyId == hierarchy.CustHierarchyId
                    && hierarchyNode.VersionAdded > hierarchyNode.VersionRemoved
                    exists join dirPartyTable
                        where dirPartyTable.RecId == hierarchy.OrganizationParty
                            || dirPartyTable.RecId == hierarchyNode.Party
                            exists join logisticsElectronicAddress
                                where logisticsElectronicAddress.RecId == dirPartyTable.PrimaryContactEmail
                                    && logisticsElectronicAddress.Locator == adminEmailAddress.Locator;

        if (hierarchy.RecId)
        {
            throw error(strFmt("@Retail:RetailB2BProspectNotApprovedAsEmailIdAlreadyExistsInCustomerHierarchy", adminEmailAddress.Locator));
        }

        container newCustomerResult = RetailTransactionServiceCustomer::newCustomer(
            _companyName,
            adminCustTable.CustGroup,
            adminCustTable.currency,
            adminParty.LanguageId,
            adminPostalAddress.Street,
            adminPostalAddress.ZipCode,
            adminPostalAddress.State,
            adminPostalAddress.County,
            null,
            null,
            adminEmailAddress.Locator,
            null,
            adminCustTable.multiLineDisc,
            adminCustTable.endDisc,
            adminCustTable.lineDisc,
            adminCustTable.priceGroup,
            adminCustTable.taxGroup,
            adminCustTable.creditMax,
            adminCustTable.blocked,
            adminCustTable.OrgId,
            adminCustTable.usePurchRequest,
            adminCustTable.vatNum,
            adminCustTable.invoiceAccount,
            adminCustTable.mandatoryCreditLimit,
            adminCustTable.contactPersonId,
            adminRboCustTable.useOrderNumberReference,
            adminRboCustTable.receiptOption,
            adminRboCustTable.receiptEmail,
            adminPostalAddress.City,
            adminPostalAddress.CountryRegionId,
            adminCustTable.identificationNumber,
            retailSmmBusRelTable.RetailChannel,
            DirPartyType::Organization,
            adminPostalAddress.StreetNumber,
            adminPostalAddress.DistrictName,
            adminPostalAddress.BuildingCompliment,
            adminCustTable.cnpjCpfNum_BR);

        // Initialize mcrCustTable fields using default channel customer record
        CustTable channelDefaultCustomer = CustTable::find(RetailChannelTable::findByRecId(retailSmmBusRelTable.RetailChannel).DefaultCustAccount);
        MCRCustTable mcrDefaultCustTable = MCRCustTable::findByCustAccount(channelDefaultCustomer.AccountNum);

        MCRCustTable mcrCustTable = MCRCustTable::findByCustAccount(adminCustTable.AccountNum);

        if (!mcrCustTable.RecId)
        {
            mcrCustTable.initValue();
            mcrCustTable.CustTable = adminCustTable.RecId;
            mcrCustTable.AllowOnAccount = mcrDefaultCustTable.AllowOnAccount;
            mcrCustTable.insert();
        }

        boolean customerCreated;
        if (conLen(newCustomerResult) >= 1)
        {
            customerCreated = conPeek(newCustomerResult, 1);
        }

        if (!customerCreated)
        {
            throw error('@CustHierarchy:CreateOrganizationCustomerError');
        }

        DirPartyRecId organizationPartyRecId = conPeek(newCustomerResult, 5);
        DirOrganization organizationParty = DirPartyTable::findRec(organizationPartyRecId, true, DirPartyType::Organization);
        organizationParty.NumberOfEmployees = _companySize;
        organizationParty.update();

        return organizationPartyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertB2BProspectToCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the B2B prospect into a customer. Will send email if indicated by parameter.
    /// </summary>
    /// <param name = "_smmBusRelTable">B2B prospect</param>
    /// <param name = "_sendEmail">Flag indicating whether to send email after approval.</param>
    public static void convertB2BProspectToCustomer(smmBusRelTable _smmBusRelTable, boolean _sendEmail)
    {
        ttsbegin;

        RetailSmmBusRelTableHelper::convertProspectToCustomer(_smmBusRelTable);

        RetailSmmBusRelTableHelper::setB2BProspectStatus(_smmBusRelTable.RecId, RetailB2BProspectStatus::Approved);

        if (_sendEmail)
        {
            RetailEventNotificationAction::insertRetailENAction(RetailEventNotificationType::B2BProspectApproved, _smmBusRelTable.RecId);
        }

        info("@Retail:RetailB2BProspectApprovalConfirmationInfoLogMessage");

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertB2B2BProspectToB2B2BCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a B2B2B prospect to B2B2B customer.
    /// </summary>
    /// <param name="_smmBusRelTable"><c>smmBusRelTable</c> which stores the prospect.</param>
    /// <param name="_templateChannelRecId">The RecId of the <c>RetailChannelTable</c> which is the template of the seller channel.</param>
    /// <param name="_sellerChannelId">The retail channel id for the seller channel.</param>
    /// <param name="_sellerChannelName">The name for the seller channel.</param>
    /// <param name="_sellerChannelOMOperatingUnitNumber">The OM operating unit number for the seller channel.</param>
    /// <param name="_retailWorkerId">The worker id for the retail worker of the seller channel.</param>
    /// <param name="_sendEmail">Flag indicating whether to send email after approval.</param>
    public static void convertB2B2BProspectToB2B2BCustomer(
        smmBusRelTable _smmBusRelTable,
        RetailChannelRecId _templateChannelRecId,
        RetailChannelId _sellerChannelId,
        DirPartyName _sellerChannelName,
        OMOperatingUnitNumber _sellerChannelOMOperatingUnitNumber,
        HcmPersonnelNumberId _retailWorkerId,
        boolean _sendEmail)
    {

        ttsbegin;

        RetailSmmBusRelTable b2bProspect;
        select firstonly CompanyName, CompanySize, IsPromoteProspect, BusinessPartnerId
            from b2bProspect where b2bProspect.smmBusRelTable == _smmBusRelTable.RecId;

        CustHierarchy b2b2bCustHierarchy;

        if (!b2bProspect.IsPromoteProspect)
        {
            // Create customer hierarchy for brand-new B2B2B prospect.
            container convertResult = RetailSmmBusRelTableHelper::convertProspectToCustomer(_smmBusRelTable);
            RecId custHierarchyRecId = conPeek(convertResult, 2);
            b2b2bCustHierarchy = CustHierarchy::find(custHierarchyRecId, true);
        }
        else
        {
            // Get the existing customer hierarchy for promoting B2B to B2B2B.
            if (Box::yesNo("@Retail:ConfirmPromotingBusinessPartner", DialogButton::No) == DialogButton::Yes)
            {
                select firstonly forupdate b2b2bCustHierarchy
                    where b2b2bCustHierarchy.CustHierarchyId == b2bProspect.BusinessPartnerId;
            }
            else
            {
                ttsabort;
                return;
            }
        }

        if (!b2b2bCustHierarchy)
        {
            throw error('@Retail:CannotFindCustHierarchyForApproveB2B2BProspect');
        }

        RetailChannelTable templateChannel = RetailChannelTable::findByRecId(_templateChannelRecId);

        container sellerChannelCreateResult;

        changecompany(templateChannel.InventLocationDataAreaId)
        {
            sellerChannelCreateResult = RetailSmmBusRelTableHelper::createSellerChannel(
            _smmBusRelTable,
            _templateChannelRecId,
            _sellerChannelId,
            _sellerChannelName,
            _sellerChannelOMOperatingUnitNumber,
            _retailWorkerId,
            b2bProspect.IsPromoteProspect);
        }

        RetailChannelRecId sellerChannelRecId = conPeek(sellerChannelCreateResult, 1);
        RetailChannelId sellerChannelId = conPeek(sellerChannelCreateResult, 2);
        DirAddressBookRecId sellerChannelEmployeeAddressBookRecId = conPeek(sellerChannelCreateResult, 3);

        b2b2bCustHierarchy.SellerChannel = sellerChannelId;
        b2b2bCustHierarchy.SellerChannelEmployeeAddressBook = sellerChannelEmployeeAddressBookRecId;
        b2b2bCustHierarchy.update();

        if (b2bProspect.IsPromoteProspect)
        {
            RetailSmmBusRelTableHelper::addCustHierarchyNodeAdminToSellerChannelAddressBook(b2b2bCustHierarchy.CustHierarchyId, sellerChannelRecId);
        }

        RetailSmmBusRelTableHelper::setB2BProspectStatus(_smmBusRelTable.RecId, RetailB2BProspectStatus::Approved);

        if (_sendEmail)
        {
            RetailEventNotificationAction::insertRetailENAction(RetailEventNotificationType::B2B2BProspectApproved, _smmBusRelTable.RecId);
        }

        ttscommit;

        eventSource.EventWriteApproveB2BProspectSuccessful(b2bProspect.ProspectType == RetailProspectType::BuyerSeller, b2bProspect.IsPromoteProspect);
        info(strFmt('@Retail:RetailB2BSellerProspectApprovalConfirmationInfoLogMessage'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initApproveB2bProspect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the approval flow for B2B prospects.
    /// </summary>
    /// <param name = "_args">The caller arguments for the smmBusRelTable form.</param>
    /// <param name = "_sendEmail">Flag indicating whether to send email after approval.</param>
    internal static void initApproveB2bProspect(Args _args, boolean _sendEmail)
    {
        if (!_args || _args.dataset() != tableNum(smmBusRelTable) || !_args.record() || _args.record().RecId == 0)
        {
            throw error("@SYS22996");
        }

        smmBusRelTable    smmBusRelTableArgs = _args.record();

        // Select the entire BusRelTable record, since the record passed in the Args
        // may not have selected all the fields
        smmBusRelTable smmBusRelTable;
        RetailSmmBusRelTable retailSmmBusRelTable;

        select firstonly smmBusRelTable
                where smmBusRelTable.RecId == smmBusRelTableArgs.RecId
            outer join ProspectType, IsPromoteProspect from retailSmmBusRelTable
                where smmBusRelTable.RecId == retailSmmBusRelTable.smmBusRelTable;

        if (retailSmmBusRelTable && retailSmmBusRelTable.ProspectType == RetailProspectType::BuyerSeller)
        {
            eventSource.EventWriteApproveB2BProspectStarted(retailSmmBusRelTable.ProspectType == RetailProspectType::BuyerSeller, retailSmmBusRelTable.IsPromoteProspect);
            
            MenuFunction b2b2bMenuItem = new MenuFunction(menuItemDisplayStr(RetailApproveB2B2BProspectWithSelectedChannel), MenuItemType::Display);
            Args b2b2bMenuItemArgs = new Args(_args.caller());
            b2b2bMenuItemArgs.record(smmBusRelTable);
            b2b2bMenuItemArgs.parm(int2Str(_sendEmail));
            b2b2bMenuItem.run(b2b2bMenuItemArgs);
        }
        else
        {
            if (Box::yesNo("@Retail:RetailApproveB2BProspectBoxMessage", DialogButton::No) == DialogButton::Yes)
            {
                eventSource.EventWriteApproveB2BProspectStarted(retailSmmBusRelTable.ProspectType == RetailProspectType::BuyerSeller, retailSmmBusRelTable.IsPromoteProspect);
                
                RetailSmmBusRelTableHelper::convertB2BProspectToCustomer(smmBusRelTable, _sendEmail);

                eventSource.EventWriteApproveB2BProspectSuccessful(retailSmmBusRelTable.ProspectType == RetailProspectType::BuyerSeller, retailSmmBusRelTable.IsPromoteProspect);
                
                // Refresh of Prospect form
                RetailSmmBusRelTableHelper::refreshCallerDatasource(smmBusRelTableArgs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertProspectToCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a B2B or B2B2B prospect to a customer.
    /// </summary>
    /// <param name="_smmBusRelTable">The B2B or B2B2B prospect.</param>
    /// <returns>The new customer hierarchy organization, the new customer hierarchy and the new customer hierarchy node.</returns>
    internal static container convertProspectToCustomer(smmBusRelTable _smmBusRelTable)
    {
        if (!DirPartyTableHelper::isCustomer(_smmBusRelTable.Party))
        {
            if (!_smmBusRelTable.canConvertToCustomer())
            {
                throw Exception::Error;
            }

            NoYes conversionSuccesful = smmBusRelTable::convert2Customer(_smmBusRelTable, '', false);
            if (conversionSuccesful == NoYes::No)
            {
                throw Exception::Error;
            }
        }

        RetailSmmBusRelTable b2bProspect;
        select firstonly CompanyName, CompanySize from b2bProspect where b2bProspect.smmBusRelTable == _smmBusRelTable.RecId;

        DirPartyRecId organizationPartyRecId = RetailSmmBusRelTableHelper::createCustHierarchyOrganization(b2bProspect.CompanyName, b2bProspect.CompanySize, _smmBusRelTable);

        CustHierarchy hierarchy = CustHierarchy::create(b2bProspect.CompanyName, CustHierarchyPurpose::B2BOrganization, organizationPartyRecId);

        CustHierarchyNode hierarchyNode = CustHierarchyNode::addNodeToHierarchy(hierarchy.CustHierarchyId, 0, _smmBusRelTable.Party, CustHierarchyNodeType::Customer, CustHierarchyNodeRole::Admin);

        boolean isB2BAdmin = true;
        RetailCustTable::updateB2BFields(hierarchyNode.Party, hierarchyNode.RecId, isB2BAdmin, newGuid());

        return [organizationPartyRecId, hierarchy.RecId, hierarchyNode.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSellerChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a seller channel for the B2B2B prospect using the template channel.
    /// </summary>
    /// <param name="_smmBusRelTable">The B2B2B prospect.</param>
    /// <param name="_templateChannelRecId">The RecId of the template channel.</param>
    /// <param name="_sellerChannelId">The retail channel id for the seller channel.</param>
    /// <param name="_sellerChannelName">The name of the new channel.</param>
    /// <param name="_sellerChannelOMOperatingUnitNumber">The OM operating unit number for the seller channel.</param>
    /// <param name="_retailWorkerId">The worker id for the retail worker of the seller channel.</param>
    /// <param name="_isPromoting">If the prospect is the promoting prospect.</param>
    /// <returns>The new seller channel.</returns>
    private static container createSellerChannel(
        smmBusRelTable _smmBusRelTable,
        RetailChannelRecId _templateChannelRecId,
        RetailChannelId _sellerChannelId,
        DirPartyName _sellerChannelName,
        OMOperatingUnitNumber _sellerChannelOMOperatingUnitNumber,
        HcmPersonnelNumberId _retailWorkerId,
        boolean _isPromoting)
    {
        ttsbegin;

        RetailOnlineChannelTable sellerChannel = RetailOnlineChannelProvisionHelper::provisionRetailOnlineChannel(
            _templateChannelRecId,
            _sellerChannelId,
            _smmBusRelTable.Party,
            _sellerChannelName,
            _sellerChannelOMOperatingUnitNumber);

        // Create customer address book.
        DirAddressBook customerAddressBook = RetailOnlineChannelProvisionHelper::createRetailAddressBook(
            sellerChannel.RecId,
            'C' + sellerChannel.RetailChannelId,
            RetailAddressBookType::Customer,
            strFmt('@Retail:SellerChannelCustomerAddressBookDescription', _sellerChannelName));

        // Add default customer to the customer address book.
        RetailOnlineChannelTable sourceRetailOnlineChannelTable;
        select firstonly sourceRetailOnlineChannelTable
            where sourceRetailOnlineChannelTable.RecId == _templateChannelRecId;
        CustTable defaultCust = CustTable::findByCompany(sourceRetailOnlineChannelTable.DefaultCustDataAreaId, sourceRetailOnlineChannelTable.DefaultCustAccount);
        if (defaultCust)
        {
            RetailOnlineChannelProvisionHelper::addPartyToAddressBook(defaultCust.Party, customerAddressBook.RecId);
        }

        // Create employee address book.
        DirAddressBook employeeAddressBook = RetailOnlineChannelProvisionHelper::createRetailAddressBook(
            sellerChannel.RecId,
            'E' + sellerChannel.RetailChannelId,
            RetailAddressBookType::Employee,
            strFmt('@Retail:SellerChannelEmployeeAddressBookDescription', _sellerChannelName));

        // Create retail worker.
        if (!_isPromoting)
        {
            HcmWorkerRecId hcmWorkerRecId = RetailOnlineChannelProvisionHelper::createWorkerForParty(_smmBusRelTable.Party, employeeAddressBook.RecId, sellerChannel.inventLocationDataAreaId, _retailWorkerId);
            RetailOnlineChannelProvisionHelper::createRetailStaffForHcmWorker(hcmWorkerRecId);
        }

        ttscommit;

        return [sellerChannel.RecId, sellerChannel.RetailChannelId, employeeAddressBook.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustHierarchyNodeAdminToSellerChannelAddressBook</Name>
				<Source><![CDATA[
    internal static void addCustHierarchyNodeAdminToSellerChannelAddressBook(CustHierarchyId _custHierarchyId, RefRecId _sellerChannelRecId)
    {
        RetailStoreAddressBook retailStoreAddressBook;
        CustHierarchyNode custHierarchyNode;
        CustTable custTable;
        RetailStaffTable retailStaffTable;
        boolean generateWorker = true;
        List addressBookRecIds = new List(Types::Int64);

        // Check if the worker number sequence exists and is not manual for generating retail worker for customer hierarchy administrators.
        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(HcmPersonnelNumberId));
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (!(numberSequenceReference && numberSequenceTable))
        {
            warning(strFmt('@Retail:MissingNumberSequenceForGeneratingB2B2BRetailWorkerWarningMessage'));
            generateWorker = false;
        }
        else if (numberSequenceTable.Manual)
        {
            warning(strFmt('@Retail:ManualNumberSequenceForGeneratingB2B2BRetailWorkerWarningMessage'));
            generateWorker = false;
        }

        ttsbegin;

        // Gather all employee address book for seller channel.
        while select retailStoreAddressBook
            where retailStoreAddressBook.StoreRecId == _sellerChannelRecId &&
                retailStoreAddressBook.AddressBookType == RetailAddressBookType::Employee
        {
            addressBookRecIds.addEnd(RetailStoreAddressBook.AddressBook);
        }

        // Create retail workers for administrators if possible and add them to the seller channel address book.
        while select custHierarchyNode
            where custHierarchyNode.CustHierarchyId == _custHierarchyId &&
                custHierarchyNode.Role == CustHierarchyNodeRole::Admin
        {
            HcmWorker hcmWorker = HcmWorker::findByPerson(custHierarchyNode.Party);
            HcmWorkerRecId hcmWorkerRecId;
            if (!hcmWorker)
            {
                if (generateWorker)
                {
                    // Create retail worker if possible.
                    custTable = CustTable::findByPartyRecId(custHierarchyNode.Party);
                    HcmPersonnelNumberId workerPersonnelNumber = HcmWorkerTransition::getNewHcmWorkerPersonnelNumber();
                    hcmWorkerRecId = RetailOnlineChannelProvisionHelper::createWorkerForParty(custHierarchyNode.Party, 0, custTable.DataAreaId, workerPersonnelNumber);
                }
                else
                {
                    /// Otherwise, we skip this admnistrator and let the user create it.
                    continue;
                }
            }
            else
            {
                hcmWorkerRecId = hcmWorker.RecId;
            }

            // Create RetailStaffTable if not exists.
            RetailOnlineChannelProvisionHelper::createRetailStaffForHcmWorker(hcmWorkerRecId);

            // Update RetailStaffTable external Id and external sub Id.
            RetailOnlineChannelProvisionHelper::updateRetailStaffExternalIdByCustomerExternalId(custHierarchyNode.Party);

            // Add the worker to the seller store address book.
            ListEnumerator addressBookRecIdEnumerator = addressBookRecIds.getEnumerator();
            while (addressBookRecIdEnumerator.moveNext())
            {
                DirAddressBookRecId addressBookRecId = addressBookRecIdEnumerator.current();
                RetailOnlineChannelProvisionHelper::addPartyToAddressBook(custHierarchyNode.Party, addressBookRecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>