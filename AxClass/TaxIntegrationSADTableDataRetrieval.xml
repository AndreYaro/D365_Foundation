<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationSADTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
[TaxIntegrationDataRetrieval(tableStr(PlSADTable))]
public class TaxIntegrationSADTableDataRetrieval extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected PlSADTable sadTable;
    protected PlSADTrans sadTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        sadTable = document.getLocalRecord();
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.sadTrans)
            .where(this.sadTrans, fieldStr(PlSADTrans, SADNumberCode))
            .isEqualToLiteral(this.sadTable.SADNumberCode)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Purchase);
        document.setAccountType(LedgerJournalACType::Vend);
        document.setInvoiceId('');
        document.setIncludingTax(NoYes::No);
        // Always use accounting currency.
        document.setTransactionCurrencyCode(CompanyInfoHelper::standardCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    protected void copyToDocumentFromHeaderTable()
    {
        super();
       
        this.copyCustVendInfoToDocument();
        document.setVATRegisterDate(this.sadTable.VATDueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.sadTrans.TableId,
            this.sadTrans.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineByDefault(TaxIntegrationLineObject _line)
    {
        // Override sales tax always set to YES.
        _line.setOverrideSalesTax(NoYes::Yes);
        // Always use accounting currency.
        _line.setTransactionCurrencyCode(CompanyInfoHelper::standardCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>PlSADTrans</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setLedgerDimension(this.sadTrans.DefaultDimension);
        _line.setTaxGroup(this.sadTrans.TaxGroup);
        _line.setTaxItemGroup(this.sadTrans.TaxItemGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setLineAmount(this.sadTrans.lineAmount());
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>
    /// The defeault implementation invokes <c>copyToLineFromHeaderTable</c> after <c>copyToLineFromLineTable</c>.
    /// which means that a property will be overwritten by this method.
    /// This is suitable for a property which presents in the header table but not in the line table,
    /// but usually not desirable for a property presents in both the header table and the line table.
    /// </remarks>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        _line.setCalculationDate(this.sadTable.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>Line address is not required for journal.</remarks>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        // Override this method because no need to copy.
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustVendInfoToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies cust group and vend group to the document.
    /// </summary>
    protected void copyCustVendInfoToDocument()
    {
        TaxSAD taxSAD = document.getLegacyTax() as TaxSAD;
        VendAccount vendAccount = taxSAD.getCustVendAccount_PL();
        if (vendAccount) 
        {
            document.setOrderAccount(vendAccount);
            VendTable vendTable = VendTable::find(document.getOrderAccount());
            document.setOrderAccountGroup(vendTable.VendGroup);

            VendTable vendTableInvoice = VendTable::find(vendTable.InvoiceAccount);
            vendTableInvoice = vendTableInvoice ? vendTableInvoice : vendTable;
            document.setInvoiceAccount(vendTableInvoice.AccountNum);
            document.setInvoiceAccountGroup(vendTableInvoice.VendGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        // the shouldSkipDocumentCharge must be true
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        // the shouldSkipLineCharge must be true
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>