<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrPriceHistoryLine_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRPriceHistoryLine_Sales</c> class provides information about sales line needed for price history.
/// </summary>
/// <remarks>
///     For returns the original SalesLine is used instead of the return line.  The return line does
///     not have its own price history.  Using the original SalesLine causes that sales line's history
///     to be used/displayed.
///     The return line is used for:
///         - quantity
///         - multiline quantity
///         - query of rebate history
/// </remarks>
class McrPriceHistoryLine_Sales extends MCRPriceHistoryLine
{
    SalesLine               salesLine;
    SalesTable              salesTable;
    AgreementLine           agreementLine;
    PdsRebateAgreementLine  tmpRebateAgreementLine;
    CustParameters          custParameters;

    int rebateNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowPriceHistoryUpdate</Name>
				<Source><![CDATA[
    public boolean allowPriceHistoryUpdate()
    {
        return this.isPriceDetailsEnabled() || this.isMerchandisingEventHistoryEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAgreementHeaderQuery</Name>
				<Source><![CDATA[
    private Query buildAgreementHeaderQuery()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        Query query;
        QueryBuildDataSource qbds;
        // </GEERU>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            query = AgreementHeader::partyAgreementsQuery(
                tableNum(SalesAgreementHeader),
                fieldNum(SalesAgreementHeader, CustAccount),
                salesTable.CustAccount ? salesTable.CustAccount : SysQuery::valueEmptyString(),
                salesTable.ShippingDateRequested);

            if (salesTable.InvoiceAccount)
            {
                qbds = query.dataSourceTable(tableNum(SalesAgreementHeader));
                qbds = qbds.addDataSource(tableNum(SalesAgreementHeaderDefault));
                qbds.relations(true);

                qbds.addRange(fieldNum(SalesAgreementHeaderDefault, CustomerInvoiceAccount)).value(queryValue(salesTable.InvoiceAccount));
            }

            qbds = query.dataSourceTable(tableNum(SalesAgreementHeader));
            findOrCreateRange_W(qbds, fieldNum(SalesAgreementHeader, AgreementState), SysQuery::valueUnlimited());

            qbds = query.dataSourceTable(tableNum(SalesAgreementHeader));
            qbds = qbds.addDataSource(tableNum(SalesAgreementHeaderExt_RU));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
        }
        else
        {
            // </GEERU>

            query = AgreementHeader::partyAgreementsQuery(
                tableNum(SalesAgreementHeader),
                fieldNum(SalesAgreementHeader, CustAccount),
                salesTable.CustAccount,
                salesTable.ShippingDateRequested);
            // <GEERU>
        }
        // </GEERU>
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBillBackRebates</Name>
				<Source><![CDATA[
    private void createBillBackRebates(PdsRebateTable _pdsRebateTableTmp)
    {
        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateAgreementLine  rebateAgreementLine;
        InventQty               calcQty;
        UnitOfMeasureSymbol     calcUOM;
        date                    calcDate;
        AmountCur               grossAmt;
        TAMPromotionItem        tamPromotionItem;
        TAMPromotionCust        tamPromotionCust;
        TAMMerchandisingEvent   tamMerchEvent;
        InventDim               inventDimLocal;
        InventDim               salesLineInventDim = salesLine.inventDim();

        tmpRebateAgreementLine.setTmp();
        //Find all applicable Rebate Agreements.
        while select pdsRebateAgreement
            where pdsRebateAgreement.Validated
                && pdsRebateAgreement.Verifier
                && pdsRebateAgreement.PdsRebateProgramType == PdsRebateProgramType::BillBack
                && (PdsGlobal::pdsIsCWItem(salesLine.ItemId)
                    || pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
                && (pdsRebateAgreement.RebateCurrency        == salesLine.CurrencyCode)
                && (pdsRebateAgreement.RebateUOMOption       == PdsRebateUOMOption::Convert
                    || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::InventoryUnit
                        && pdsRebateAgreement.PdsRebateUnit  == salesLine.SalesUnit)
                    || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::CWUnit
                        && pdsRebateAgreement.PdsRebateUnit  == salesLine.pdsCWUnitId()))
            join MerchandisingEventID, PromotionID from tamMerchEvent
                where tamMerchEvent.MerchandisingEventID        == pdsRebateAgreement.tamMerchandisingEventID
                    && tamMerchEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
            join RecId from tamPromotionCust
                where tamPromotionCust.PromotionID  == tamMerchEvent.PromotionID
                    && tamPromotionCust.CustAccount == salesTable.CustAccount
            join InventDimID from tamPromotionItem
                where tamPromotionItem.MerchandisingEventID == tamMerchEvent.MerchandisingEventID
                    && tamPromotionItem.ItemID              == salesLine.ItemId
            #TAMRebateInventDimExistsJoin(tamPromotionItem.InventDimId, inventDimLocal, salesLineInventDim)
        {
            calcDate = pdsRebateAgreement.setCalcDate(salesLine);

            if (!pdsRebateAgreement.tamCheckValidDateBillBack(calcDate))
            {
                continue;
            }

            if (pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
            {
                calcQty = salesLine.SalesQty;
                calcUOM = salesLine.SalesUnit;
            }
            else
            {
                calcQty = salesLine.PdsCWQty;
                calcUOM = salesLine.pdsCWUnitId();
            }

            grossAmt = salesLine.calcGrossAmountExclTax();

            RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(grossAmt,
                                                                                                                             calcQty,
                                                                                                                             calcUOM,
                                                                                                                             salesLine.CurrencyCode,
                                                                                                                             salesLine.ItemId,
                                                                                                                             salesLine.InventDimId);

            if (pdsRebateAgreement.checkRebateRequirement(contract))
            {
                while select rebateAgreementLine
                where rebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                {
                    select firstonly RecId from _pdsRebateTableTmp
                        where _pdsRebateTableTmp.PdsRebateAgreementRefRecId == rebateAgreementLine.RebateAgreementRefRecId;

                    if (_pdsRebateTableTmp.RecId)
                    {
                        break;
                    }

                    this.createPdsRebateTableFromLine(pdsRebateAgreement,
                                                      rebateAgreementLine,
                                                    _pdsRebateTableTmp);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPdsRebates</Name>
				<Source><![CDATA[
    private void createPdsRebates(PdsRebateTable _pdsRebateTableTmp)
    {
        PdsRebateAgreement      pdsRebateAgreement;

        PdsRebateAgreementLine  rebateAgreementLine;
        InventTable             inventTable = InventTable::find(salesLine.ItemId);
        CustTable               custTable   = CustTable::find(salesTable.CustAccount);

        InventQty               calcQty;
        UnitOfMeasureSymbol     calcUOM;
        date                    calcDate;
        AmountCur               grossAmt;
        PdsRebateItem           pdsRebateItem;
        InventDim               inventDimLocal;
        InventDim               salesLineInventDim = salesLine.inventDim();
        date                        dateMin = dateNull();
        date                        dateMax = maxDate();

        tmpRebateAgreementLine.setTmp();

        McrPriceHistoryLine_SalesQueryBuilder mcrPriceHistoryLine_SalesQueryBuilder = McrPriceHistoryLine_SalesQueryBuilder::newFromQuery(salesLine, salesTable, inventTable, custTable);

        SysDaQueryObject qePdsRebateAgreement = mcrPriceHistoryLine_SalesQueryBuilder.buildRebateAgreementQuery(pdsRebateAgreement);

        SysDaSearchObject soPdsRebateAgreement = new SysDaSearchObject(qePdsRebateAgreement);

        SysDaValidTimeStateDateRange validTimeStateDateRange = new SysDaValidTimeStateDateRange(dateMin, dateMax);
        soPdsRebateAgreement.validTimeState(validTimeStateDateRange);

        SysDaSearchStatement ssPdsRebateAgreement = new SysDaSearchStatement();

        //Find all applicable Rebate Agreements.
        while (ssPdsRebateAgreement.nextRecord(soPdsRebateAgreement))
        {
            calcDate = pdsRebateAgreement.setCalcDate(salesLine);
            if (!pdsRebateAgreement.checkValidDate(calcDate))
            {
                continue;
            }

            if (pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
            {
                calcQty = salesLine.SalesQty;
                calcUOM = salesLine.SalesUnit;
            }
            else
            {
                calcQty = salesLine.PdsCWQty;
                calcUOM = salesLine.pdsCWUnitId();
            }

            grossAmt = salesLine.calcGrossAmountExclTax();

            RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(grossAmt,
                                                                                                                             calcQty,
                                                                                                                             calcUOM,
                                                                                                                             salesLine.CurrencyCode,
                                                                                                                             salesLine.ItemId,
                                                                                                                             salesLine.InventDimId);

            if (pdsRebateAgreement.checkRebateRequirement(contract))
            {
                // Agreements with the custom item code are using an item list.
                if (pdsRebateAgreement.PdsItemRebateCode == PdsRebateItemCode::Selection)
                {
                    while select rebateAgreementLine
                    where rebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                    join InventDimID from pdsRebateItem
                    where pdsRebateItem.RebateAgreementRefRecId == rebateAgreementLine.RebateAgreementRefRecId
                                && pdsRebateItem.ItemID == salesLine.ItemId
                    #TAMRebateInventDimExistsJoin(pdsRebateItem.InventDimId, inventDimLocal, salesLineInventDim)
                    {
                        select firstonly RecId from _pdsRebateTableTmp
                            where _pdsRebateTableTmp.PdsRebateAgreementRefRecId == rebateAgreementLine.RebateAgreementRefRecId;

                        if (_pdsRebateTableTmp.RecId)
                        {
                            break;
                        }

                        this.createPdsRebateTableFromLine(pdsRebateAgreement,
                                                          rebateAgreementLine,
                                                          _pdsRebateTableTmp);
                    }
                }
                else
                {
                    while select rebateAgreementLine
                    where rebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                    {
                        select firstonly RecId from _pdsRebateTableTmp
                            where _pdsRebateTableTmp.PdsRebateAgreementRefRecId == rebateAgreementLine.RebateAgreementRefRecId;

                        if (_pdsRebateTableTmp.RecId)
                        {
                            break;
                        }

                        this.createPdsRebateTableFromLine(pdsRebateAgreement,
                                                          rebateAgreementLine,
                                                    _pdsRebateTableTmp);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPdsRebateTableFromLine</Name>
				<Source><![CDATA[
    private void createPdsRebateTableFromLine(PdsRebateAgreement     _pdsRebateAgreement,
                                            PdsRebateAgreementLine  _pdsRebateAgreementLine,
                                            PdsRebateTable _pdsRebateTableTmp)
    {
        PdsRebateAgreementLine  rebateAgreementLine = _pdsRebateAgreementLine;
        PdsRebateAgreement      rebateAgreement = _pdsRebateAgreement;
        InventQty               calcQty;
        UnitOfMeasureSymbol     calcUOM;
        AmountCur               calcAmt;
        PdsRebateAgreementLine  rebateAgreementLineMax;
        PdsRebateTable          pdsRebateTableTmp = _pdsRebateTableTmp;

        if (PdsRebateAgreement::convertRebateValue(rebateAgreementLine.RebateValue, rebateAgreementLine.RebateAmtType, rebateAgreement.RebateCurrency, salesLine.CurrencyCode))
        {
            if (rebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
            {
                calcQty = salesLine.SalesQty;
                calcUOM = salesLine.SalesUnit;
            }
            else
            {
                calcQty = salesLine.PdsCWQty;
                calcUOM = salesLine.pdsCWUnitId();
            }

            if (rebateAgreement.PdsRebateTakenFrom == PdsRebateTakenFrom::Gross)
            {
                calcAmt = salesLine.calcGrossAmountExclTax();
            }
            else
            {
                calcAmt = salesLine.calcLineAmountExclTax();
            }

            if (rebateAgreement.RebateGenericCurrency == NoYes::Yes)
            {
                calcAmt = CurrencyExchangeHelper::curAmount2CurAmount(calcAmt, salesLine.CurrencyCode, rebateAgreement.RebateCurrency);
            }

            RebateQuantityRequirementContract contract = RebateQuantityRequirementContract::constructWithVariables(calcQty,
                                                                                                                   calcUOM,
                                                                                                                   salesLine.ItemId,
                                                                                                                   salesLine.InventDimId,
                                                                                                                   false);

            if  ((rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity
                    && rebateAgreementLine.checkRebateQuantityRequirements(contract)
                 )
                    ||(rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount
                        && rebateAgreementLine.checkRebateAmtRequirements(calcAmt)))
            {
                this.initAndInsertRebate(rebateAgreement, rebateAgreementLine, pdsRebateTableTmp);
            }
            else
            {
                rebateAgreementLineMax = PdsRebateAgreementLine::selectRebateAgreementLineMax(rebateAgreement,
                                                                                              salesLine.inventDim(),
                                                                                              salesLine.ItemId,
                                                                                              calcQty,
                                                                                              calcUOM,
                                                                                              rebateAgreement.RebateCurrency,
                                                                                              calcAmt);
                contract.maxRebateLineBreak = true;

                if (rebateAgreementLineMax.RecId == rebateAgreementLine.RecId
                    && ((rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity
                    && rebateAgreementLine.checkRebateQuantityRequirements(contract)
                    ||(rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount
                    && rebateAgreementLine.checkRebateAmtRequirements(calcAmt, true)))))
                {
                    this.initAndInsertRebate(rebateAgreement, rebateAgreementLine, pdsRebateTableTmp);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRebateInventDim</Name>
				<Source><![CDATA[
    private InventDimId createRebateInventDim(InventDim salesInventDim)
    {
        InventDim inventDimPrice;
        inventDimPrice.InventDimFieldsMap::initProductDimensionsFrom(salesInventDim);

        return InventDim::findOrCreate(inventDimPrice).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRoyalties</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds royalties for a sales line and pass the information off for temporary record generation.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTableTmp">
    ///     A <c>MCRRoyaltyVendTable</c> buffer.
    /// </param>
    /// <remarks>
    ///     Finds royalty records based on the existing sales line. Matching records are passed to <c>createRoyalty</c>,
    ///     where temporary records are written to represent the royalties due to vendors.
    /// </remarks>
    private void createRoyalties(MCRRoyaltyVendTable  _mcrRoyaltyVendTableTmp)
    {
        InventDim                   inventDim;
        InventDim                   inventDimTransaction;
        InventQty                   calcQty;
        UnitOfMeasureSymbol         calcUOM;
        date                        calcDate;
        AmountCur                   calcAmt;
        AmountCur                   breakAmt;
        AmountCur                   calcAmtGross;
        AmountCur                   calcAmtNet;
        MCRRoyaltyContract          mcrRoyaltyContract;
        MCRRoyaltyTablePricing      mcrRoyaltyTablePricingLocal;
        MCRRoyaltyTable             mcrRoyaltyTable;
        MCRRoyaltyItemCode          mcrRoyaltyItemCode;
        CurrencyExchangeRate        exchangeRate;
        Ledger                      ledger = Ledger::find(Ledger::current());

        calcAmtGross    = salesLine.SalesQty * salesLine.SalesPrice;
        calcAmtNet      = salesLine.LineAmount;

        // Find all approved applicable royalty agreements.
        // We are checking the exchange rate pair here because we do not want an error on the call to
        // CurrencyExchangeHelper::curAmount2CurAmount, we just want to skip royalty calculation in that scenario
        while select mcrRoyaltyTable
            join  RecId, UnitType, CumulateSalesBy, RoyaltyTakenFrom, Currency
            from  mcrRoyaltyContract
            where mcrRoyaltyContract.RoyaltyContract            == mcrRoyaltyTable.RoyaltyContract
               && mcrRoyaltyContract.Validated                  == NoYes::Yes
        {
            calcDate = mcrRoyaltyTable.setCalcDate(salesLine);

            if (mcrRoyaltyContract.Currency != this.parmCurrencyCode())
            {
                exchangeRate = ExchangeRateHelper::getVariableExchangeRate(
                                                                    this.parmCurrencyCode(),
                                                                    mcrRoyaltyContract.Currency,
                                                                    ledger.DefaultExchangeRateType,
                                                                    calcDate,
                                                                    true);
                if (!exchangeRate)
                {
                    continue;
                }
            }

            if (!mcrRoyaltyTable.checkValidDate(calcDate))
            {
                continue;
            }

            if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::InventoryUnit)
            {
                calcQty = salesLine.SalesQty;
                calcUOM = salesLine.SalesUnit;
            }
            else
            {
                calcQty = salesLine.PdsCWQty;
                calcUOM = salesLine.pdsCWUnitId();
            }

            if (mcrRoyaltyContract.RoyaltyTakenFrom  == MCRRoyaltyTakenFrom::Gross)
            {
                calcAmt = calcAmtGross;
            }
            else
            {
                calcAmt = calcAmtNet;
            }

            breakAmt    = CurrencyExchangeHelper::curAmount2CurAmount(calcAmt, salesLine.CurrencyCode, mcrRoyaltyContract.Currency, calcDate);

            if (!inventDimTransaction)
            {
                inventDimTransaction = InventDim::find(salesLine.InventDimId);
            }
            select firstonly mcrRoyaltyItemCode
                where mcrRoyaltyItemCode.RoyaltyCode        == mcrRoyaltyTable.RoyaltyCode
                    && mcrRoyaltyItemCode.ItemID            == salesLine.ItemId
                    #TAMRebateInventDimExistsJoin(mcrRoyaltyItemCode.InventDimId, inventDim, inventDimTransaction);

            if (mcrRoyaltyItemCode)
            {
                mcrRoyaltyTablePricingLocal = MCRRoyaltyTablePricing::findPricingFromSalesLine(
                    mcrRoyaltyTable,
                    salesLine,
                    calcQty,
                    salesLine.SalesUnit,
                    mcrRoyaltyContract.Currency,
                    breakAmt,
                    mcrRoyaltyContract.RecId);

                if (mcrRoyaltyTablePricingLocal)
                {
                    select firstonly RecId from _mcrRoyaltyVendTableTmp
                         where _mcrRoyaltyVendTableTmp.RoyaltyAgreementLineRefRecId == mcrRoyaltyTablePricingLocal.RecId;

                    if (!_mcrRoyaltyVendTableTmp.RecId)
                    {
                        this.createRoyalty(_mcrRoyaltyVendTableTmp, mcrRoyaltyTablePricingLocal);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRoyalty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates temporary entries in <c>MCRRoyaltyVendTable</c> for royalty amounts.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTableTmp">
    ///     A <c>MCRRoyaltyVendTable</c> buffer.
    /// </param>
    /// <param name="_mcrRoyaltyTablePricing">
    ///     A <c>MCRRoyaltyTablePricing</c> buffer.
    /// </param>
    /// <remarks>
    ///     Create temporary table entries for royalties. These records are subsequently used in calculating a price margin
    ///     as well as being displayed on a grid on the form <c>MCRPriceHistory</c>.
    /// </remarks>
    protected void createRoyalty(
        MCRRoyaltyVendTable     _mcrRoyaltyVendTableTmp,
        MCRRoyaltyTablePricing  _mcrRoyaltyTablePricing = null)
    {
        MCRRoyaltyTable             mcrRoyaltyTable;
        MCRRoyaltyContract          mcrRoyaltyContract;
        Amount                      royaltyAmount;
        MCRRoyaltyVendTable         mcrRoyaltyVendTableTmp  = _mcrRoyaltyVendTableTmp;

        mcrRoyaltyTable             = MCRRoyaltyTable::find(_mcrRoyaltyTablePricing.RoyaltyCode);
        mcrRoyaltyContract          = mcrRoyaltyTable.royaltyContract();

        ttsbegin;
        mcrRoyaltyVendTableTmp.initValue();

        mcrRoyaltyVendTableTmp.RoyaltyCode                  = mcrRoyaltyTable.RoyaltyCode;
        mcrRoyaltyVendTableTmp.RoyaltyValue                 = _mcrRoyaltyTablePricing.RoyaltyValue;
        mcrRoyaltyVendTableTmp.RoyaltyAmtType               = mcrRoyaltyTable.RoyaltyAmtType;
        mcrRoyaltyVendTableTmp.LedgerDimension              = mcrRoyaltyContract.LedgerDimension;
        mcrRoyaltyVendTableTmp.OffsetLedgerDimension        = mcrRoyaltyContract.OffsetLedgerDimension;
        mcrRoyaltyVendTableTmp.RoyaltyAgreementLineRefRecId = _mcrRoyaltyTablePricing.RecId;
        mcrRoyaltyVendTableTmp.mcrRoyaltyTableRefRecId      = mcrRoyaltyTable.RecId;
        mcrRoyaltyVendTableTmp.VendAccount                  = mcrRoyaltyTable.VendAccount;
        mcrRoyaltyVendTableTmp.RoyaltyPayTo                 = mcrRoyaltyTable.VendAccount;

        mcrRoyaltyVendTableTmp.SalesId                      = salesLine.SalesId;

        mcrRoyaltyVendTableTmp.RoyaltyCalcDate              = mcrRoyaltyContract.setCalcDate(salesLine);
        mcrRoyaltyVendTableTmp.CustAccount                  = salesLine.CustAccount;
        mcrRoyaltyVendTableTmp.CurrencyCode                 = salesLine.CurrencyCode;

        mcrRoyaltyVendTableTmp.SalesTableRefRecId           = salesTable.RecId;
        mcrRoyaltyVendTableTmp.InventTransId                = salesLine.InventTransId;
        mcrRoyaltyVendTableTmp.ItemId                       = salesLine.ItemId;
        mcrRoyaltyVendTableTmp.SalesPriceUnit               = salesLine.SalesPrice;
        mcrRoyaltyVendTableTmp.SalesNetExtendedPrice        = salesLine.LineAmount;
        mcrRoyaltyVendTableTmp.SalesInvoicedQty             = salesLine.SalesQty;
        mcrRoyaltyVendTableTmp.cwSalesInvoicedQty           = salesLine.PdsCWQty;

        if (mcrRoyaltyContract.RoyaltyTakenFrom == MCRRoyaltyTakenFrom::Gross)
        {
            mcrRoyaltyVendTableTmp.SalesAmount = salesLine.SalesQty * salesLine.SalesPrice;
        }
        else
        {
            mcrRoyaltyVendTableTmp.SalesAmount = salesLine.LineAmount;
        }

        mcrRoyaltyVendTableTmp.SalesLineRefRecId            = salesLine.RecId;

        switch (mcrRoyaltyVendTableTmp.RoyaltyAmtType)
        {
            case MCRRoyaltyAmtType::AmountPerUnit :
                royaltyAmount = mcrRoyaltyVendTableTmp.royaltyAmountPerUnit();
                break;

            case MCRRoyaltyAmtType::FixedAmount:
                royaltyAmount = mcrRoyaltyVendTableTmp.convertToNegativeRoyalty(_mcrRoyaltyTablePricing.RoyaltyValue);
                break;

            case MCRRoyaltyAmtType::Percentage:
                royaltyAmount = mcrRoyaltyVendTableTmp.SalesAmount
                                    * _mcrRoyaltyTablePricing.RoyaltyValue
                                    / 100;
                break;

            default:
                throw error("@PDS1430");
        }

        royaltyAmount                                 = CurrencyExchangeHelper::amount(royaltyAmount, this.parmCurrencyCode());
        mcrRoyaltyVendTableTmp.StartingRoyaltyAmt     = royaltyAmount;
        mcrRoyaltyVendTableTmp.CorrectedRoyaltyAmt    = mcrRoyaltyVendTableTmp.StartingRoyaltyAmt;
        mcrRoyaltyVendTableTmp.RoyaltyBalance         = mcrRoyaltyVendTableTmp.StartingRoyaltyAmt;

        mcrRoyaltyVendTableTmp.status().setInitialStatus();

        mcrRoyaltyVendTableTmp.doInsert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRoyalties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if royalties apply for the sales order.
    /// </summary>
    /// <returns>true, if royalties need to be created; otherwise, false.</returns>
    /// <remarks>Royalties should not apply for sales orders of type item requirement.</remarks>
    public boolean mustCreateRoyalties()
    {
        if (salesTable.SalesType == SalesType::ItemReq)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMCRRoyaltyVendTableTmp</Name>
				<Source><![CDATA[
    public void fillMCRRoyaltyVendTableTmp(MCRRoyaltyVendTable  _mcrRoyaltyVendTableTmp)
    {
        super(_mcrRoyaltyVendTableTmp);

        if (this.mustCreateRoyalties())
        {
            this.createRoyalties(_mcrRoyaltyVendTableTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if rebates apply for the sales order.
    /// </summary>
    /// <returns>true, if rebates need to be created; otherwise, false.</returns>
    /// <remarks>Rebates do not apply for item requirement and subscription.</remarks>
    public boolean mustCreateRebates()
    {
        if (salesTable.SalesType == SalesType::ItemReq
            || salesTable.SalesType == SalesType::Subscription)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPdsRebateTableTmp</Name>
				<Source><![CDATA[
    public void fillPdsRebateTableTmp(PdsRebateTable _pdsRebateTableTmp)
    {
        super(_pdsRebateTableTmp);

        if (this.mustCreateRebates())
        {
            this.createPdsRebates(_pdsRebateTableTmp);
            this.createBillBackRebates(_pdsRebateTableTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLines</Name>
				<Source><![CDATA[
    protected List getAgreementLines()
    {
        Query                   query;
        QueryRun                queryRun;
        SalesAgreementHeader    salesAgreementHeader;
        List                    listTemp;
        List                    listReturn = new List(Types::Record);
        
        using (var activityContext = AgreementInstrumentationLogger::createLogger(classStr(McrPriceHistoryLine_Sales)).agreement().priceHistoryGetAgreementLines(salesLine.TableId))
        {
            query    = this.buildAgreementHeaderQuery();
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                salesAgreementHeader = queryRun.get(tableNum(SalesAgreementHeader));
                listTemp = AgreementLine::getAgreementLinesForOrderLine(
                    salesLine,
                    salesAgreementHeader.RecId,
                    true);

                listReturn.appendList(listTemp);
            }
        }

        return listReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a rebate from a rebate agreement.
    /// </summary>
    /// <param name = "_pdsRebateAgreement">The agreement.</param>
    /// <param name = "_pdsRebateAgreementLine">The agreement line.</param>
    /// <returns>The initialized rebate.</returns>
    protected PdsRebateTable initRebate(PdsRebateAgreement      _pdsRebateAgreement,
                                        PdsRebateAgreementLine  _pdsRebateAgreementLine)
    {
        PdsRebateAgreementLine  rebateAgreementLine = _pdsRebateAgreementLine;
        PdsRebateAgreement      rebateAgreement     = _pdsRebateAgreement;
        PdsRebateTable          pdsRebateTableTmp;
        TAMRebateAmount         rebateAmount;

        pdsRebateTableTmp.CustAccount                 = salesLine.CustAccount;
        pdsRebateTableTmp.PdsRebateValue              = rebateAgreementLine.RebateValue;
        pdsRebateTableTmp.PdsRebateAmtType            = rebateAgreementLine.RebateAmtType;
        pdsRebateTableTmp.PdsRebateType               = rebateAgreement.PdsRebateType;
        pdsRebateTableTmp.LedgerDimension             = rebateAgreement.LedgerDimension;
        pdsRebateTableTmp.OffsetLedgerDimension       = rebateAgreement.OffsetLedgerDimension;
        pdsRebateTableTmp.RebateAgreementLineRefRecId = rebateAgreementLine.RecId;
        pdsRebateTableTmp.PdsRebateAgreementRefRecId  = rebateAgreement.RecId;
        pdsRebateTableTmp.LedgerDimension             = rebateAgreement.LedgerDimension;
        pdsRebateTableTmp.OffsetLedgerDimension       = rebateAgreement.OffsetLedgerDimension;

        if (rebateAgreement.PdsCustRebateCode == TableGroupAll::GroupId)
        {
            //Customer rebate group field on the Price details form is only meant to
            //show values corresponding to the Customer rebate group and not Customer TMA group
            if (rebateAgreement.PdsRebateProgramType == PdsRebateProgramType::Rebate)
            {
                pdsRebateTableTmp.PdsCustRebateGroupId = rebateAgreement.PdsCustRebateRelation;
            }
        }
        if (rebateAgreement.PdsItemRebateCode == PdsRebateItemCode::GroupId)
        {
            pdsRebateTableTmp.PdsItemRebateGroupId = rebateAgreement.PdsItemRebateRelation;
        }

        pdsRebateTableTmp.CurrencyCode                = salesLine.CurrencyCode;
        pdsRebateTableTmp.SalesId                     = salesTable.SalesId;

        pdsRebateTableTmp.RebateCalcDate              = rebateAgreement.setCalcDate(salesLine);
        pdsRebateTableTmp.SalesTableRefRecId          = salesTable.RecId;
        pdsRebateTableTmp.InventTransId               = salesLine.InventTransId;
        pdsRebateTableTmp.ItemId                      = salesLine.ItemId;
        pdsRebateTableTmp.SalesPriceUnit              = salesLine.SalesPrice;
        pdsRebateTableTmp.SalesNetExtendedPrice       = salesLine.LineAmount;
        pdsRebateTableTmp.SalesInvoicedQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                   salesLine.InventDimId,
                                                                                                                   salesLine.SalesQty,
                                                                                                                   salesLine.SalesUnit,
                                                                                                                   rebateAgreementLine.RebateUnit,
                                                                                                                   NoYes::Yes);

        pdsRebateTableTmp.PdsCWSalesInvoicedQty  = salesLine.PdsCWQty;

        if (rebateAgreement.PdsRebateTakenFrom == PdsRebateTakenFrom::Gross)
        {
            pdsRebateTableTmp.SalesAmount = salesLine.calcGrossAmountExclTax();
        }
        else
        {
            pdsRebateTableTmp.SalesAmount = salesLine.calcLineAmountExclTax();
        }

        pdsRebateTableTmp.SalesLineRefRecId = salesLine.RecId;

        switch (rebateAgreementLine.RebateAmtType)
        {
            case PdsRebateAmtType::AmountPerUnit :
                rebateAmount = pdsRebateTableTmp.rebateAmountPerUnit();
                break;

            case PdsRebateAmtType::FixedAmount:
                rebateAmount = pdsRebateTableTmp.convertToNegativeRebate(rebateAgreementLine.RebateValue);
                break;

            case PdsRebateAmtType::Percentage:
                rebateAmount = pdsRebateTableTmp.SalesAmount * rebateAgreementLine.RebateValue / 100;
                break;

            default:
                throw error("@PDS1430");
        }

        rebateAmount = CurrencyExchangeHelper::amount(rebateAmount, rebateAgreementLine.Currency);
        pdsRebateTableTmp.PdsStartingRebateAmt   = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, rebateAgreementLine.Currency, salesLine.CurrencyCode);
        //Set next unique rebate id for the temp table to avoid duplicate records
        pdsRebateTableTmp.PdsRebateId = this.nextPdsRebateId();

        return pdsRebateTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndInsertRebate</Name>
				<Source><![CDATA[
    private void initAndInsertRebate(PdsRebateAgreement      _pdsRebateAgreement,
                                     PdsRebateAgreementLine  _pdsRebateAgreementLine,
                                     PdsRebateTable          _pdsRebateTable)
    {
        ttsbegin;
        PdsRebateTable pdsRebateTableTmp = this.initRebate(_pdsRebateAgreement, _pdsRebateAgreementLine);
        _pdsRebateTable.data(pdsRebateTableTmp);
        _pdsRebateTable.doInsert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpMCRAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TmpMCRAgreementLine</c> record.
    /// </summary>
    /// <param name="_tmpMCRAgreementLine">
    /// The <c>TmpMCRAgreementLine</c> record to initialize.
    /// </param>
    public void initTmpMCRAgreementLine(TmpMCRAgreementLine _tmpMCRAgreementLine)
    {
        SalesAgreementHeader    salesAgreementHeader;
        if (agreementLine)
        {
            _tmpMCRAgreementLine.initFromAgreementLine(agreementLine);
            _tmpMCRAgreementLine.AgreementId = this.parmAgreementId();

            salesAgreementHeader = SalesAgreementHeader::find(agreementLine.Agreement);
            _tmpMCRAgreementLine.AgreementState = salesAgreementHeader.AgreementState;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContinuityBillUpFrontChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a continuity item is bill up front.
    /// </summary>
    /// <returns>
    ///     true if line is a child line of a continuity item that is bill up front; otherwise, false.
    /// </returns>
    public boolean isContinuityBillUpFrontChild()
    {
        SalesTableLinks salesTableLinks;
        SalesLine       salesLineContinuityParent;
        boolean         isContinuityBillUpFrontChild;
        if (salesTable.mcrSalesTable().ContinuityChild)
        {
            // Find parent sales line to determine if bill up front.  Not using the
            // continuity schedule as this could change.
            salesTableLinks = SalesTableLinks::find(salesTable.SalesId);
            select firstonly SalesPrice from salesLineContinuityParent
                where salesLineContinuityParent.InventTransId == salesTableLinks.mcrMainInventTransId;
            // If there's a price, then bill up front
            if (salesLineContinuityParent.SalesPrice != 0)
            {
                isContinuityBillUpFrontChild = true;
            }
        }
        else
        {
            isContinuityBillUpFrontChild = false;
        }
        return isContinuityBillUpFrontChild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkValid</Name>
				<Source><![CDATA[
    protected boolean isLinkValid(AgreementLine _agreementLine)
    {
        return _agreementLine.isLinkValid(salesLine, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMerchandisingEventHistoryEnabled</Name>
				<Source><![CDATA[
    public boolean isMerchandisingEventHistoryEnabled()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(TAMPromotionsManagement));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDetailsEnabled</Name>
				<Source><![CDATA[
    public boolean isPriceDetailsEnabled()
    {
        return custParameters.MCREnablePriceDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipToChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not this sales order line is a delivery line.
    /// </summary>
    /// <returns>
    /// true if the order line is a delivery line; Otherwise, false.
    /// </returns>
    public boolean isShipToChild()
    {
        if (salesLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMarginAlert</Name>
				<Source><![CDATA[
    public MCRMarginAlert mcrMarginAlert()
    {
        MCRMarginAlert_Sales mcrMarginAlert_Sales;

        mcrMarginAlert_Sales = MCRMarginAlert_Sales::newSalesLine(salesLine);
        return mcrMarginAlert_Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRPriceHistoryLine_Sales</c> class.
    /// </summary>
    protected void new()
    {
        super();
        custParameters = CustParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPdsRebateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next rebate id to use for temporary rebate tables.
    /// </summary>
    /// <returns>
    /// The next unique rebate id.
    /// </returns>
    /// <remarks>
    /// The rebate id is not displayed and does not refer to anything.  The
    /// rebate table is only used to store temporary information for different
    /// kinds of rebates in a unified form.  The rebate id needs to be different
    /// to avoid duplicate insert error.
    /// </remarks>
    protected PdsRebateId nextPdsRebateId()
    {
        PdsRebateId pdsRebateId;

        rebateNum++;
        pdsRebateId = int2str(rebateNum);

        return pdsRebateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    public CustVendAC parmAccountId()
    {
        return salesLine.orderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountMultilineDiscCode</Name>
				<Source><![CDATA[
    public MultiLnDiscCode parmAccountMultilineDiscCode()
    {
        return salesTable.MultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementId</Name>
				<Source><![CDATA[
    public Num parmAgreementId()
    {
        Num agreementId;

        if (agreementLine)
        {
            agreementId = SalesAgreementHeader::find(agreementLine.Agreement).SalesNumberSequence;
        }
        return agreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFindLineDisc</Name>
				<Source><![CDATA[
    public boolean parmCanFindLineDisc()
    {
        return salesLine.canEditDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFindTAMMerchEventPricing</Name>
				<Source><![CDATA[
    public boolean parmCanFindTAMMerchEventPricing()
    {
        boolean canFindTAMMerchEventPricing = true;

        if (salesTable.SalesType    == SalesType::ItemReq
            || salesTable.SalesType == SalesType::Subscription)
        {
            canFindTAMMerchEventPricing = false;
        }

        return canFindTAMMerchEventPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode()
    {
        return salesLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim()
    {
        return salesLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return salesLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemLineDiscCode</Name>
				<Source><![CDATA[
    public LineDiscCode parmItemLineDiscCode()
    {
        return salesLine.itemLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmLineDiscAmount()
    {
        return salesLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscCode</Name>
				<Source><![CDATA[
    public LineDiscCode parmLineDiscCode()
    {
        return salesLine.lineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscPct</Name>
				<Source><![CDATA[
    public DiscPct parmLineDiscPct()
    {
        return salesLine.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMultiLn</Name>
				<Source><![CDATA[
    public LineMultiLn parmLineMultiLn()
    {
        return SalesParameters::find().Disc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public PriceMarkup parmMarkup()
    {
        return salesLine.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingAgreementLine</Name>
				<Source><![CDATA[
    public AgreementLineRecId parmMatchingAgreementLine()
    {
        return salesLine.MatchingAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmMCROrderLine2PriceHistoryRef()
    {
        return salesLine.mcrOrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales parmModuleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmMultilineDiscAmount()
    {
        return salesLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscPct</Name>
				<Source><![CDATA[
    public DiscPct parmMultilineDiscPct()
    {
        return salesLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmOrigMCROrderLine2PriceHistoryRef()
    {
        return salesLine.orig().mcrOrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public PriceCur parmPrice()
    {
        return salesLine.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDate</Name>
				<Source><![CDATA[
    public PriceDate parmPriceDate()
    {
        return salesLine.priceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId parmPriceGroupId()
    {
        return salesLine.priceGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceOverride</Name>
				<Source><![CDATA[
    public NoYes parmPriceOverride()
    {
        MCRSalesLinePriceOverride mcrSalesLinePriceOverride = salesLine.mcrSalesLinePriceOverride();
        mcrSalesLinePriceOverride.reread();

        return mcrSalesLinePriceOverride.PriceOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit()
    {
        return salesLine.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    public PurchId parmPurchId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the qty of the line.
    /// </summary>
    /// <returns>
    ///     The qty of the line.
    /// </returns>
    public Qty parmQty()
    {
        return salesLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyMultiline</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity for the multiline.
    /// </summary>
    /// <returns>
    ///     The total quantity of all lines that have matching multiline discount code.
    /// </returns>
    /// <remarks>
    ///     See class declaration for comments about returns.
    /// </remarks>
    public Qty parmQtyMultiline()
    {
        InventTableModule       inventTableModule, inventTableModuleMultiLineDisc;
        SalesLine               salesLineLocal;

        // Find line's multi-line discount code
        // Sum quantity of all other lines that have same multi-line discount code
        select sum(SalesQty) from salesLineLocal
            where salesLineLocal.SalesId   == salesLine.SalesId
            exists join inventTableModuleMultiLineDisc
                where inventTableModuleMultiLineDisc.ItemId     == this.parmItemId()
                   && inventTableModuleMultiLineDisc.ModuleType == this.parmModuleType()
            exists join inventTableModule
               where inventTableModule.ItemId        == salesLineLocal.ItemId
                  && inventTableModule.ModuleType    == this.parmModuleType()
                  && inventTableModule.MultiLineDisc == inventTableModuleMultiLineDisc.MultiLineDisc;

        return salesLineLocal.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuotationId</Name>
				<Source><![CDATA[
    public QuotationId parmQuotationId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    protected RecId parmRecId()
    {
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    public SalesId parmSalesId()
    {
        return salesLine.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a new sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The new sales line.
    /// </param>
    public void parmSalesLine(SalesLine _salesLine)
    {
        salesLine  = _salesLine;
        salesTable = salesLine.salesTable();
        if (salesLine.MatchingAgreementLine)
        {
            agreementLine = AgreementLine::find(salesLine.MatchingAgreementLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginRelated</Name>
				<Source><![CDATA[
    public boolean parmShowMarginRelated()
    {
        return SalesParameters::find().mcrEnableMarginAlert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowRoyaltyTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a <c>Boolean</c> value indicating if the sales price history line shows the royalty tab.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean parmShowRoyaltyTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableId()
    {
        return salesLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitId()
    {
        return salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public void updateMCROrderLine2PriceHistoryRef(MCROrderLinePriceHistoryReference _mcrOrderLinePriceHistoryReference)
    {
        salesLine.mcrOrderLine2PriceHistoryRef = _mcrOrderLinePriceHistoryReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usesRetailPricing</Name>
				<Source><![CDATA[
    public boolean usesRetailPricing()
    {
        return RetailParameters::isRetailEnabledAndInUse()
            && RetailPricingEngine::useRetailPricing(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRPriceHistoryLine_Sales</c> class.
    /// </summary>
    /// <returns>
    /// Instance of a sales price history line
    /// </returns>
    public static MCRPriceHistoryLine_Sales construct()
    {
        return new MCRPriceHistoryLine_Sales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRPriceHistoryLine_Sales</c> class.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line used to initialize the object.
    /// </param>
    /// <returns>
    /// Instance of a sales price history line
    /// </returns>
    public static MCRPriceHistoryLine_Sales newSalesLine(SalesLine _salesLine)
    {
        MCRPriceHistoryLine_Sales mcrPriceHistoryLine_Sales = MCRPriceHistoryLine_Sales::construct();

        mcrPriceHistoryLine_Sales.parmSalesLine(_salesLine);
        return mcrPriceHistoryLine_Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLine</Name>
				<Source><![CDATA[
    public SalesLine getSalesLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>