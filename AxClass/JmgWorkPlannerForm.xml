<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgWorkPlannerForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgWorkPlannerForm</c> class is a helper class for the <c>JmgWorkPlanner</c> form.
/// </summary>
abstract class JmgWorkPlannerForm
{
    Map                 editControls;
    Map                 rowLabels;
    Map                 labelToRow;
    Map                 profileTimes;
    FormStringControl   defaultFormStringControl;
    FormStringControl   weekendFormStringControl;
    JmgDate             fromDate;
    JmgDate             toDate;
    JmgTmpWorkPlanner   jmgTmpWorkPlanner;
    int                 firstTotalColumn;

    boolean             showWeekend;
    boolean             showPlannedAbsence;
    JmgColor            absenceColor;
    FormStringControl   absenceFormStringControl;

    JmgWorkPlannerForm  allLevel;
    JmgWorkPlannerForm  profileGroupLevel;

    Map                 totalTimeSums;
    Map                 weekTotalSums;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the data interval shown on the work planner form.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date of the date interval to show.
    /// </param>
    /// <param name="_toDate">
    ///    The to date of the date interval to show.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The specified from date is after the specified to date.
    /// </exception>
    public void changeDateInterval(JmgDate _fromDate, JmgDate _toDate)
    {
        if (_fromDate > _toDate)
        {
            throw error("@SYS16982");
        }

        fromDate    = _fromDate;
        toDate      = _toDate;

        firstTotalColumn    = 10 - dayofwk(fromDate);
        if (firstTotalColumn > (toDate - fromDate) + 3)
        {
            firstTotalColumn = toDate - fromDate + 3;
        }

        this.loadData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the profile date that is displayed in the specified column.
    /// </summary>
    /// <param name="_column">
    ///    The column number for which to retrieve the profile date.
    /// </param>
    /// <returns>
    ///    The profile date that is displayed in the specified column.
    /// </returns>
    protected JmgProfileDate columnToDate(int _column)
    {
        if (_column == 1                                                                ||
            (_column >= firstTotalColumn && (_column - firstTotalColumn) mod 8 == 0)    ||
            _column == this.numberOfColumns())
        {
            return dateNull();
        }

        if (_column >= firstTotalColumn)
        {
            return fromDate + _column - 3 - (_column - firstTotalColumn) div 8;
        }
        return fromDate + _column - 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToColumn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the column where the specified profile date is displayed.
    /// </summary>
    /// <param name="_profileDate">
    ///    The profile date for which to retrieve the column.
    /// </param>
    /// <returns>
    ///    The column where the specified profile date is displayed.
    /// </returns>
    public int dateToColumn(JmgProfileDate _profileDate)
    {
        int noOfDates;
        int noOfDatesBeforeFirst;
        int noOfDatesAfterFirst;
        int noOfSumsAfterFirst;
        noOfDates = (_profileDate - fromDate) + 1;
        noOfDatesBeforeFirst = firstTotalColumn - 2;

        if (noOfDates <= noOfDatesBeforeFirst)
        {
            return 1 + noOfDates;
        }

        noOfDatesAfterFirst = max(0, noOfDates - noOfDatesBeforeFirst);
        noOfSumsAfterFirst  = noOfDatesAfterFirst div 7 - (noOfDatesAfterFirst mod 7 == 0 ? 1 : 0);
        return firstTotalColumn + noOfDatesAfterFirst + noOfSumsAfterFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the from date that is currently displayed on the work planner form.
    /// </summary>
    /// <returns>
    ///    The from date that is currently displayed on the work planner form.
    /// </returns>
    public JmgDate fromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the column label for the specified column.
    /// </summary>
    /// <param name="_column">
    ///    The ID of the column for which to retrieve the column label.
    /// </param>
    /// <returns>
    ///    The label for the specified column.
    /// </returns>
    public str getColumnLabel(int _column)
    {
        if (_column == 1)
        {
            return "@SYS75288";
        }

        if (this.columnToDate(_column) == dateNull() ||
            _column == this.numberOfColumns())
        {
            return strfmt("@SYS24734", wkofyr(this.columnToDate(_column - 1)));
        }

        return date2StrUsr(this.columnToDate(_column), DateFlags::FormatAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCellContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves cell content, which is used to display the value at the specified column and row.
    /// </summary>
    /// <param name="_column">
    ///    The column for which to retrieve the control.
    /// </param>
    /// <param name="_row">
    ///    The row for which to retrieve the control.
    /// </param>
    /// <returns>
    ///    The <c>JmgWorkPlannerCellContent</c> object, which is used to display the value at the specified column and
    ///    row.
    /// </returns>
    public JmgWorkPlannerCellContent getCellContent(int _column, int _row)
    {
        Description         data;
        FormStringControl   control     = defaultFormStringControl;
        JmgProfileDate      profileDate = this.columnToDate(_column);

        if (profileDate != dateNull())
        {
            JmgTmpWorkPlanner tmp = JmgTmpWorkPlanner::find(jmgTmpWorkPlanner, profileDate, this.getRowLabel(_row));

            if (showPlannedAbsence && tmp && tmp.AbsenceJobId)
            {
                control = absenceFormStringControl;
                data = tmp.AbsenceCodeDescription;
            }
            else if (tmp && tmp.ProfileId && editControls.exists(tmp.ProfileId))
            {
                data = tmp.ProfileId;
                control = editControls.lookup(tmp.ProfileId);
            }
            else if (showWeekend             &&
                (dayofwk(profileDate) == 6   ||
                 dayofwk(profileDate) == 7))
            {
                control = weekendFormStringControl;
            }
        }

        return JmgWorkPlannerCellContent::constructFromValues(control, data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileAt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the profile to display at the specified row and column.
    /// </summary>
    /// <param name="_column">
    ///    The column for which to retrieve the profile.
    /// </param>
    /// <param name="_row">
    ///    The row for which to retrieve the profile.
    /// </param>
    /// <returns>
    ///    The profile to display at the specified row and column.
    /// </returns>
    public JmgProfileId getProfileAt(int _column, int _row)
    {
        JmgTmpWorkPlanner tmp;
        tmp = JmgTmpWorkPlanner::find(jmgTmpWorkPlanner,  this.columnToDate(_column), this.getRowLabel(_row));
        if (tmp)
        {
            return tmp.ProfileId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total working time for the specified profile.
    /// </summary>
    /// <param name="_jmgProfileId">
    ///    The ID of the profile for which to retrieve the work time.
    /// </param>
    /// <returns>
    ///    The total working time for the specified profile.
    /// </returns>
    public JmgLabelProfileTimeTotal getProfileTime(JmgProfileId _jmgProfileId)
    {
        JmgSeconds  ret;
        container   c;
        int         i;
        ret = 0;
        if (profileTimes.exists(_jmgProfileId))
        {
            c = profileTimes.lookup(_jmgProfileId);
            for (i = 1; i <= conlen(c); i++)
            {
                ret += conpeek(c, i);
            }
        }
        return JmgProfileSeconds::formattedSeconds(ret, JmgSecondPresentationEnum::Centitime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the label for the specified row.
    /// </summary>
    /// <param name="_row">
    /// The row to retrieve the label for.
    /// </param>
    /// <returns>
    /// the label for the specified row.
    /// </returns>
    public str getRowLabel(int _row)
    {
        if (rowLabels.exists(_row))
        {
            return rowLabels.lookup(_row);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total planned work time to display at the specified row.
    /// </summary>
    /// <param name="_row">
    ///    The row for which to retrieve the total work time.
    /// </param>
    /// <returns>
    ///    The total planned work time to display at the specified row.
    /// </returns>
    public JmgLabelProfileTimeTotal getTotalTime(int _row)
    {
        if (totalTimeSums.exists(_row))
        {
            return JmgProfileSeconds::formattedSeconds(totalTimeSums.lookup(_row));
        }
        return JmgProfileSeconds::formattedSeconds(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeekTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the work time to display at the specified column and row.
    /// </summary>
    /// <param name="_column">
    ///    The column for which to retrieve the profile time.
    /// </param>
    /// <param name="_row">
    ///    The row for which to retrieve the profile time.
    /// </param>
    /// <returns>
    ///    The work time to display at the specified column and row.
    /// </returns>
    public JmgTimeString getWeekTotal(int _column, int _row)
    {
        JmgProfileDate  profileDate;
        int             key;
        Map             row;

        if (weekTotalSums.exists(_row))
        {
            row = weekTotalSums.lookup(_row);
            profileDate = this.columnToDate(_column - 1);
            key = year(profileDate) * 100 + wkofyr(profileDate);
            if (row.exists(key))
            {
                return JmgProfileSeconds::formattedSeconds(row.lookup(key));
            }
        }
        return JmgProfileSeconds::formattedSeconds(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEditControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the edit controls used to display the work plan.
    /// </summary>
    /// <param name="_formTableControl">
    ///    The <c>FormTableControl</c> object to use to display the work plan.
    /// </param>
    private final void initEditControls(FormTableControl _formTableControl)
    {
        JmgProfileTable     jmgProfileTable;
        FormStringControl   formStringControl;
        editControls = new Map(Types::String, Types::Class);

        while select Profile, Color
            from jmgProfileTable
        {
            formStringControl = _formTableControl.addControl(FormControlType::String, _formTableControl.name() + any2Str(jmgProfileTable.RecId));
            formStringControl.viewEditMode(ViewEditMode::Edit);
            formStringControl.allowEdit(false);
            formStringControl.colorScheme(2);
            formStringControl.backgroundColor(jmgProfileTable.Color);

            editControls.insert(jmgProfileTable.Profile, formStringControl);
        }

        // Add weekend:
        weekendFormStringControl = _formTableControl.addControl(FormControlType::String, _formTableControl.name() + "@SYS26303");
        weekendFormStringControl.viewEditMode(ViewEditMode::Edit);
        weekendFormStringControl.allowEdit(false);
        weekendFormStringControl.colorScheme(2);
        weekendFormStringControl.backgroundColor(WinAPI::RGB2int(190, 190, 190));

        // Add default:
        defaultFormStringControl = _formTableControl.addControl(FormControlType::String, _formTableControl.name() + "@SYS40133");
        defaultFormStringControl.viewEditMode(ViewEditMode::Edit);
        defaultFormStringControl.allowEdit(false);

        // Add absence:
        absenceFormStringControl = _formTableControl.addControl(FormControlType::String, _formTableControl.name() + "@SYS3414");
        absenceFormStringControl.viewEditMode(ViewEditMode::Edit);
        absenceFormStringControl.allowEdit(false);
        absenceFormStringControl.colorScheme(2);
        absenceFormStringControl.backgroundColor(absenceColor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRowLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the row labels to display on the work plan.
    /// </summary>
    protected abstract void initRowLabels()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLabelShowing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified label is currently shown on the work plan.
    /// </summary>
    /// <param name="_label">
    ///    The row label to test whether it is currently displayed on the work plan.
    /// </param>
    /// <returns>
    ///    true if the row label is currently displayed; otherwise, false.
    /// </returns>
    public boolean isLabelShowing(str _label)
    {
        return _label == '' || labelToRow.exists(_label);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWeekTotalColumn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified column displays a weekly time sum.
    /// </summary>
    /// <param name="_column">
    ///    The column to use to test whether it displays a weekly time sum.
    /// </param>
    /// <returns>
    ///    true if the specified column displays a weekly sum; otherwise, false.
    /// </returns>
    public boolean isWeekTotalColumn(int _column)
    {
        return _column > 1 && this.columnToDate(_column) == dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelToRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the row number, which displays the specified label.
    /// </summary>
    /// <param name="_label">
    ///    The label for which to retrieve the row number.
    /// </param>
    /// <returns>
    ///    The row number, which displays the specified label.
    /// </returns>
    public int labelToRow(str _label)
    {
        if (labelToRow.exists(_label))
        {
            return labelToRow.lookup(_label);
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the data from the <c>JmgProfileCalendar</c> table, which is displayed
    /// on the work planner.
    /// </summary>
    public void loadData()
    {
        JmgProfileCalendar  jmgProfileCalendar;
        int                 rowNumber;
        // Clear tmp buffer
        jmgTmpWorkPlanner = null;

        jmgProfileCalendar.recordLevelSecurity(true);

        while select jmgProfileCalendar
            where jmgProfileCalendar.Date                   >= fromDate
                && jmgProfileCalendar.Date                  <= toDate
                && jmgProfileCalendar.ProfileCalendarType   == this.type()
                && jmgProfileCalendar.ProfileId
        {
            if (labelToRow.exists(jmgProfileCalendar.RelationNumber))
            {
                rowNumber = labelToRow.lookup(jmgProfileCalendar.RelationNumber);

                jmgTmpWorkPlanner.ProfileId       = jmgProfileCalendar.ProfileId;
                jmgTmpWorkPlanner.ProfileDate     = jmgProfileCalendar.Date;
                jmgTmpWorkPlanner.Row             = rowNumber;
                jmgTmpWorkPlanner.RelationNumber  = jmgProfileCalendar.RelationNumber;
                jmgTmpWorkPlanner.insert();
            }
        }
        this.recalculateSums();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>JmgWorkPlannerForm</c> class.
    /// </summary>
    /// <param name="_formTableControl">
    /// The <c>FormTableControl</c> object used to display the work plan.
    /// </param>
    /// <param name="_fromDate">
    /// The start date of the initial date interval shown.
    /// </param>
    /// <param name="_toDate">
    /// The end date of the initial date interval shown.
    /// </param>
    /// <param name="_profileTimes">
    /// A map of calculated profile times.
    /// </param>
    /// <param name="_allLevel">
    /// A reference to the <c>JmgWorkPlannerForm</c> object, which handles the All level.
    /// </param>
    /// <param name="_profileGroupLevel">
    /// A reference to the <c>JmgWorkPlannerForm</c> object, which handles the profile group level.
    /// </param>
    void new(FormTableControl   _formTableControl,
             JmgDate            _fromDate,
             JmgDate            _toDate,
             Map                _profileTimes,
             JmgWorkPlannerForm _allLevel = null,
             JmgWorkPlannerForm _profileGroupLevel = null)
    {
        fromDate            = _fromDate;
        toDate              = _toDate;
        allLevel            = _allLevel;
        profileGroupLevel   = _profileGroupLevel;
        firstTotalColumn    = 10 - dayofwk(fromDate);
        if (firstTotalColumn > (toDate - fromDate) + 3)
        {
            firstTotalColumn = toDate - fromDate + 3;
        }

        this.initEditControls(_formTableControl);
        this.initRowLabels();
        profileTimes    = _profileTimes;
        totalTimeSums   = new Map(Types::Integer, Types::Integer);
        weekTotalSums   = new Map(Types::Integer, Types::Integer);
        this.loadData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of columns, which is displayed on the work planner form.
    /// </summary>
    /// <returns>
    /// The number of columns, which is displayed on the work planner form.
    /// </returns>
    public int numberOfColumns()
    {
        int            noOfDates;
        int            noOfDatesBeforeFirst;
        int            noOfDatesAfterFirst;
        int            noOfSumsAfterFirst;
        noOfDates = (toDate - fromDate) + 1;
        noOfDatesBeforeFirst = firstTotalColumn - 2;
        noOfDatesAfterFirst = max(0, noOfDates - noOfDatesBeforeFirst);
        noOfSumsAfterFirst = noOfDatesAfterFirst div 7 + (noOfDatesAfterFirst mod 7 == 0 ? 0 : 1);

        return firstTotalColumn + noOfDatesAfterFirst + noOfSumsAfterFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfRows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number rows, which is displayed on the work planner form.
    /// </summary>
    /// <returns>
    /// The number of rows, which is displayed on the work planner form.
    /// </returns>
    public int numberOfRows()
    {
        return rowLabels.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAbsenceColor</Name>
				<Source><![CDATA[
    public JmgColor parmAbsenceColor(JmgColor _color = absenceColor)
    {
        absenceColor = _color;
        if (absenceFormStringControl)
        {
            absenceFormStringControl.backgroundColor(absenceColor);
        }
        return absenceColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedAbsence</Name>
				<Source><![CDATA[
    public boolean parmShowPlannedAbsence(boolean _showPlannedAbsence = showPlannedAbsence)
    {
        showPlannedAbsence = _showPlannedAbsence;
        return showPlannedAbsence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowWeekend</Name>
				<Source><![CDATA[
    public boolean parmShowWeekend(boolean _showWeekend = showWeekend)
    {
        showWeekend = _showWeekend;
        return showWeekend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the time sums displayed on the work plan.
    /// </summary>
    protected void recalculateSums()
    {
        JmgDate             d;
        JmgTmpWorkPlanner   t;
        int                 i;
        totalTimeSums   = new Map(Types::Integer, Types::Integer);
        weekTotalSums   = new Map(Types::Integer, Types::Class);

        for (d = fromDate; d <= toDate; d++)
        {
            for (i = 1; i <= this.numberOfRows(); i++)
            {
                t = JmgTmpWorkPlanner::find(jmgTmpWorkPlanner, d, this.getRowLabel(i));
                this.updateTimeSums('', t.ProfileId, d, i, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves changes that are made to the work plan in the database.
    /// </summary>
    public void saveData()
    {
        JmgProfileCalendar  jmgProfileCalendar;
        ttsbegin;
        if (this.type() == JmgProfileCalendarType::All)
        {
            while select jmgTmpWorkPlanner
            {
                jmgTmpWorkPlanner.RelationNumber = '';
                jmgTmpWorkPlanner.update();
            }
        }

        // Delete old entries in profile calendar
        while select forupdate jmgTmpWorkPlanner
            join forupdate jmgProfileCalendar
            where jmgProfileCalendar.Date                   == jmgTmpWorkPlanner.ProfileDate
                && jmgProfileCalendar.RelationNumber        == jmgTmpWorkPlanner.RelationNumber
                && jmgProfileCalendar.ProfileCalendarType   == this.type()
        {
            if (jmgProfileCalendar.SpecialDayId)
            {
                jmgTmpWorkPlanner.SpecialDayId = jmgProfileCalendar.SpecialDayId;
                jmgTmpWorkPlanner.update();
            }

            jmgProfileCalendar.delete();
        }

        // Insert new ones.
        while select jmgTmpWorkPlanner
            where jmgTmpWorkPlanner.ProfileId
        {
            jmgProfileCalendar.ProfileCalendarType = this.type();
            if (this.type() != JmgProfileCalendarType::All)
            {
                jmgProfileCalendar.RelationNumber   = jmgTmpWorkPlanner.RelationNumber;
            }
            jmgProfileCalendar.Date             = jmgTmpWorkPlanner.ProfileDate;
            jmgProfileCalendar.ProfileId        = jmgTmpWorkPlanner.ProfileId;
            jmgProfileCalendar.SpecialDayId     = jmgTmpWorkPlanner.SpecialDayId;
            jmgProfileCalendar.insert();
        }

        if (this.type() == JmgProfileCalendarType::All)
        {
            while select jmgTmpWorkPlanner
            {
                jmgTmpWorkPlanner.RelationNumber = "@SYS14437";
                jmgTmpWorkPlanner.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProfileAt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the displayed profile at the specified column and row.
    /// </summary>
    /// <param name="_column">
    ///    The column at which to update the profile value.
    /// </param>
    /// <param name="_row">
    ///    The row at which to update the profile value.
    /// </param>
    /// <param name="_profileId">
    ///    The ID of the profile to set for the specified column and row.
    /// </param>
    /// <returns>
    ///    A container that contains the column and row of the cell that contains the weekly sum to update
    ///    after the profile value has been changed.
    /// </returns>
    public container setProfileAt(int _column, int _row, JmgProfileId _profileId)
    {
        JmgTmpWorkPlanner   tmp;
        JmgProfileDate      profileDate;
        JmgProfileId        oldProfileId;
        profileDate = this.columnToDate(_column);

        // Do not allow total columns to be set:
        if (profileDate == dateNull())
        {
            return connull();
        }

        tmp = JmgTmpWorkPlanner::find(jmgTmpWorkPlanner, profileDate, this.getRowLabel(_row));
        if (tmp)
        {
            oldProfileId  = tmp.ProfileId;
            tmp.ProfileId = _profileId;
            tmp.update();
        }
        else
        {
            jmgTmpWorkPlanner.ProfileId       = _profileId;
            jmgTmpWorkPlanner.ProfileDate     = profileDate;
            jmgTmpWorkPlanner.Row             = _row;
            jmgTmpWorkPlanner.RelationNumber  = this.getRowLabel(_row);
            jmgTmpWorkPlanner.insert();
        }
        this.updateTimeSums(oldProfileId, _profileId, profileDate, _row);

        // Calculate the week total to be updated:
        return [min(_column + 8 - dayofwk(profileDate), this.numberOfColumns()), _row];
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the to-date that is currently displayed on the work planner form.
    /// </summary>
    /// <returns>
    ///    The to-date that is currently displayed on the work planner form.
    /// </returns>
    public JmgDate toDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the profile calendar type that is associated to the <c>JmgWorkPlannerForm</c> object.
    /// </summary>
    /// <returns>
    ///    The profile calendar type that is associated to the <c>JmgWorkPlannerForm</c> object.
    /// </returns>
    protected abstract JmgProfileCalendarType type()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeSums</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the time sums when a profile is changed.
    /// </summary>
    /// <param name="_oldProfileId">
    ///    The old profile ID.
    /// </param>
    /// <param name="_newProfileId">
    ///    The new profile ID.
    /// </param>
    /// <param name="_profileDate">
    ///    The profile date where the profile is changed.
    /// </param>
    /// <param name="_row">
    ///    The row where the profile is changed.
    /// </param>
    /// <param name="_recalculation">
    ///    A Boolean value that specifies whether the time sums is updated as part of a recalculation.
    /// </param>
    protected void updateTimeSums(JmgProfileId _oldProfileId, JmgProfileId _newProfileId, JmgProfileDate _profileDate, int _row, boolean _recalculation = false)
    {
        container       oldProfileTimes;
        container       newProfileTimes;
        int             key;
        Map             row;

        if (!_recalculation && _oldProfileId)
        {
            oldProfileTimes = profileTimes.lookup(_oldProfileId);
        }

        if (_newProfileId)
        {
            newProfileTimes = profileTimes.lookup(_newProfileId);
        }

        int peekProfileTime(container _profileTimes)
        {
            int profileTime = 0;

            if (conLen(_profileTimes) >= dayofwk(_profileDate))
            {
                profileTime = conpeek(_profileTimes, dayofwk(_profileDate));
            }

            return profileTime;
        }

        JmgSeconds diffProfileTime = peekProfileTime(newProfileTimes) - peekProfileTime(oldProfileTimes);

        if (totalTimeSums.exists(_row))
        {
            totalTimeSums.insert(_row, totalTimeSums.lookup(_row) + diffProfileTime);
        }
        else
        {
            totalTimeSums.insert(_row, diffProfileTime);
        }

        key =  year(_profileDate) * 100 + wkofyr(_profileDate);

        if (weekTotalSums.exists(_row))
        {
            row = weekTotalSums.lookup(_row);
            if (row.exists(key))
            {
                row.insert(key, row.lookup(key) + diffProfileTime);
            }
            else
            {
                row.insert(key, diffProfileTime);
            }
        }
        else
        {
            row = new Map(Types::Integer, Types::Integer);
            weekTotalSums.insert(_row, row);
            row.insert(key, diffProfileTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileTimes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a container that has calculated profile times.
    /// </summary>
    /// <returns>
    ///    A container that has calculated profile times.
    /// </returns>
    public static container getProfileTimes()
    {
        JmgProfileDay           jmgProfileDay;
        JmgProfiles             jmgProfiles;
        JmgStampJournalTable    stampJournalTable;
        JmgProfileId            currentProfileId;
        container               times;
        Map                     map;
        map = new Map(Types::String, Types::Container);

        while select Profile, DayId
            from  jmgProfileDay
            order by Profile, DayId
            where jmgProfileDay.DayId   != JmgDayIdEnum::Special
        {
            if (!currentProfileId   || currentProfileId != jmgProfileDay.Profile)
            {
                if (currentProfileId)
                {
                    map.insert(currentProfileId, times);
                }
                times           = [ 0, 0, 0, 0, 0, 0, 0];
                currentProfileId = jmgProfileDay.Profile;
            }
            jmgProfiles     = new JmgProfiles(false);
            stampJournalTable = null;
            jmgProfiles.getProfile(jmgProfileDay.Profile, jmgProfileDay.DayId);
            jmgProfiles.initStampJournalTable(stampJournalTable);
            times           = conpoke(times, jmgProfileDay.DayId + 1, stampJournalTable.ProfileSeconds);
        }
        // Insert for the last profile
        if (currentProfileId)
        {
            map.insert(currentProfileId, times);
        }
        return map.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>