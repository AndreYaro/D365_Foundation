<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableType_Pmf</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class regroups operations related to batch order processing.
/// </summary>
class ProdTableType_Pmf extends ProdTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventUpdExpected</Name>
				<Source><![CDATA[
    public boolean canInventUpdExpected()
    {
        if (prodTable.inventTable().PmfProductType == PmfProductType::MainItem)
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReworkOrderStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the quantity to be processed has been reserved and the rework order can be started.
    /// </summary>
    /// <returns>
    /// true if the inventory has been reserved; otherwise, false.
    /// </returns>
    public boolean canReworkOrderStart()
    {
        boolean             ret = true;
        ProdBOM             prodBOM;

        if (#PmfReworkBatchEnabled
            && prodTable.PmfReworkBatch == NoYes::Yes)
        {
            //The reservation transaction is linked  with ProdBOM record for a rework order, not the prodTable.
            while select InventTransId, DataAreaId
                from prodBOM
                where prodBOM.ProdId == prodTable.ProdId
                    && prodBOM.ItemId == prodTable.ItemId
            {
                InventTransOriginId inventTransOriginId = InventTransOriginProdBOM::findInventTransOriginId(prodBOM.DataAreaId, prodBOM.InventTransId);
                InventTransSum inventTransSum = InventTransSum::newStandard();

                if (PdsGlobal::pdsIsCWItem(prodTable.ItemId))
                {
                    ret = -(inventTransSum.pdsCWidReservPhysical(inventTransOriginId) + inventTransSum.pdsCWidPicked(inventTransOriginId)) >= prodTable.PdsCWBatchSched;
                }
                else
                {
                    ret = -(inventTransSum.originReservPhysical(inventTransOriginId) + inventTransSum.originPicked(inventTransOriginId)) >= prodTable.QtySched;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimated</Name>
				<Source><![CDATA[
    public InventUpd_Estimated createEstimated(Common _childBuffer)
    {
        return InventUpd_Estimated::newProcess(prodTable, this, _childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReworkBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a Rework Batch order.
    /// </summary>
    protected void createReworkBatch()
    {
        ProdBOM     toProdBom;

        InventDim fromInventDim = prodTable.inventDim();
        LineNum lineNum = ProdBOM::lastLineNum(prodTable.ProdId);

        toProdBom.initFromProdTable(prodTable);
        toProdBom.LineNum = lineNum+1;
        toProdBom.ItemId = prodTable.ItemId;
        toProdBom.UnitId = InventTableModule::find(prodTable.ItemId, ModuleInventPurchSales::Invent).UnitId;
        toProdBom.bomQtySerie = prodTable.QtySched;
        toProdBom.PmfQtyWithoutYield = (prodTable.QtySched * prodTable.PmfYieldPct)/100;

        toProdBom.PdsCWQty = prodTable.PdsCWBatchSched;

        toProdBom.InventDimId = InventMovement::construct(toProdBom).getInventDimForIssueTransFromReceipt(fromInventDim, fromInventDim).inventDimId;

        toProdBom.DefaultDimension = prodTable.DefaultDimension;

        toProdBom.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBOMRoute</Name>
				<Source><![CDATA[
    public void expandBOMRoute()
    {
        if (#PmfReworkBatchEnabled && prodTable.PmfReworkBatch)
        {
            this.createReworkBatch();
        }
        else if (this.canCopyBOMRoute())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCopyBOMRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a production bill of material and route can be copied by default
    /// </summary>
    /// <returns>true, if a production bill of material and route can be copied; otherwise, false.</returns>
    protected boolean canCopyBOMRoute()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns batch order id based on batch order number sequence.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// Determines moment of number sequence assignment.
    /// </param>
    /// <returns>
    /// New batch order id.
    /// </returns>
    public ProdId initProdId(boolean _makeDecisionLater = true)
    {
        numberSeqProdId = ProdTable::pmfNumberSeqBatchId(_makeDecisionLater);

        ProdId prodId = numberSeqProdId.num();

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    /// <param name="_prodTable">
    /// Batch order record.
    /// </param>
    protected void new(ProdTable _prodTable)
    {
        super(_prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCanSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the split option should be available for this batch order (a specific subset of production order).
    /// </summary>
    /// <returns>
    /// true if the split option should be shown; false if it should not be shown.
    /// </returns>
    /// <remarks>
    /// This determines if the split order option should be available to the user.
    /// </remarks>
    public boolean pmfCanSplit()
    {
        return prodTable.RemainInventPhysical > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runHistoricalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Batch order ending operation.
    /// </summary>
    /// <param name="_prodParmHistoricalCost">
    /// Related batch order parameter record.
    /// </param>
    /// <param name="_multi">
    /// List of records to process.
    /// </param>
    public void runHistoricalCost(
        ProdParmHistoricalCost  _prodParmHistoricalCost,
        RunbaseRecsMapable      _multi = null)
    {
        ProdUpdHistoricalCost_Process prodUpdHistoricalCost =
            ProdUpdHistoricalCost_Process::newParmBuffer(_prodParmHistoricalCost);

        prodUpdHistoricalCost.run();

        if (_multi)
        {
            _multi.mergeRecs(prodUpdHistoricalCost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Batch order starting operation.
    /// </summary>
    /// <param name="_prodParmStartUp">
    /// Related batch order parameter record.
    /// </param>
    /// <param name="_multi">
    /// List of records to process.
    /// </param>
    public void runStartUp(
        ProdParmStartUp     _prodParmStartUp,
        RunbaseRecsMapable  _multi = null
        )
    {
        if (!this.canReworkOrderStart())
        {
            throw error("@PRO2069");
        }

        super(_prodParmStartUp, _multi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    public void updated(ProdTable _prodTableOrig)
    {
        super(_prodTableOrig);

        if (prodTable.PmfYieldPct != _prodTableOrig.PmfYieldPct)
        {
            ProdBOM prodBOM;

            while select forupdate prodBOM
                where prodBOM.ProdId == prodTable.ProdId
            {
                if (prodBOM.bomConsump == BOMConsumpType::Variable)
                {
                    prodBOM.bomQty = (prodBOM.PmfQtyWithoutYield * 100)
                                        / prodTable.PmfYieldPct;
                }
                else
                {
                    prodBOM.bomQty = prodBOM.PmfQtyWithoutYield;
                }
                prodBOM.doUpdate();
            }
        }

        if (_prodTableOrig.transDate() != prodTable.transDate())
        {
            PmfProdCoBy             prodCoBy;

            while select forupdate prodCoBy
                where  prodCoBy.ProdId     == prodTable.ProdId
                    && prodCoBy.EndConsump == NoYes::No
            {
                prodCoBy.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate delete of batch order.
    /// </summary>
    /// <returns>
    /// Return flag.
    /// </returns>
    public boolean validateDelete()
    {
        PmfProdCoBy pmfProdCoBy;

        boolean ret = super();

        while select pmfProdCoBy
            where pmfProdCoBy.ProdId == prodTable.ProdId
        {
            if (!pmfProdCoBy.validateDelete())
            {
                return false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate inserts and updates of batch order.
    /// </summary>
    /// <returns>
    /// Return flag.
    /// </returns>
    public boolean validateWrite()
    {
        BOMVersion checkVersion;

        boolean ret = super();

        if (ret)
        {
            select firstonly checkVersion
                where checkVersion.bomId == prodTable.bomId;

            ret = prodTable.inventTable().checkPlanningItemCost(checkVersion);

            if (ret)
            {
                if (prodTable.PmfYieldPct == 0)
                {
                    ret = checkFailed("@PRO1004");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <param name="_prodTable">
    /// Batch order record.
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static ProdTableType_Pmf construct(ProdTable _prodTable)
    {
        return new ProdTableType_Pmf(_prodTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>