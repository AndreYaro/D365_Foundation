<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGlobalTableConstraintController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class for the user defined table constraint edit form.
/// </summary>
class PcGlobalTableConstraintController
{
    Map columnNameToFormDataSource;
    Map columnNameToColumnRecord;
    Map rowDataMap;

    PCGlobalTableConstraintDefinition tableConstraintDefinition;

    Map tmpRowIdsToRealRowIds;

    int64 newRowIdCounter;

    FormRun formRun;

    PCGlobalTableConstraintDataPopulator    dataPopulator;
    PCGlobalTableConstraintCellEditor       tableConstraintCellEditor;
    PCGlobalTableConstraintValidator        tableConstraintValidator;
    PCGlobalTableConstraintCellDefaultValue tableConstraintCellDefaultValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAuxiliaryDatastructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds auxilirary data structure.
    /// </summary>
    private void buildAuxiliaryDatastructure()
    {
        PCTableConstraintColumnDefinition   column;
        FormDataSource                      formDataSource;
        MapEnumerator                       me = columnNameToFormDataSource.getEnumerator();

        while (me.moveNext())
        {
            formDataSource = me.currentValue();

            column = PCTableConstraintColumnDefinition::findByNameAndDefinition(formDataSource.name(), tableConstraintDefinition.RecId);

            Debug::assert(column.RecId != 0);

            columnNameToColumnRecord.insert(column.Name, column);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a row in the table constraint.
    /// </summary>
    /// <param name="_rowId">
    /// A row ID.
    /// </param>
    public void deleteRow(PCTableConstraintRowRecId _rowId)
    {
        RecId tableConstraintRowId;

        if (_rowId < 0) // newly create row
        {
            if (tmpRowIdsToRealRowIds.exists(_rowId))
            {
                tableConstraintRowId = tmpRowIdsToRealRowIds.lookup(_rowId);
            }
            else
            {
                // Newly created row not in PCTableConstraintRow
                tableConstraintRowId = 0;
            }
        }
        else
        {
            tableConstraintRowId = _rowId;
        }

        if ( tableConstraintRowId )
        {
            ttsbegin;
            PCTableConstraintRow::find(tableConstraintRowId, true).delete();
            ttscommit;
            rowDataMap.remove(tableConstraintRowId);
        }

        this.deleteRowInTmp(_rowId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRowInTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a row in the temporary data structure.
    /// </summary>
    /// <param name="_rowId">
    /// A row ID.
    /// </param>
    private void deleteRowInTmp(PCTableConstraintRowRecId _rowId)
    {
        PCGlobalTableConstraintEditTmp  tmpValue;
        MapEnumerator                   me = columnNameToFormDataSource.getEnumerator();

        FormDataSource formDataSource;

        while (me.moveNext())
        {
            formDataSource = me.currentValue();
            tmpValue.setTmpData(formDataSource.cursor());

            delete_from tmpValue where tmpValue.RowId == _rowId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumLookupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for an enum lookup.
    /// </summary>
    /// <param name="_columnName">
    /// A table constraint column name.
    /// </param>
    /// <returns>
    /// Enum lookup data.
    /// </returns>
    public PCRuntimeStringLookupTmp getEnumLookupData(PCName _columnName)
    {
        PCRuntimeStringLookupTmp            runtimeStringLookupTmp;
        PCSolverTextValue                   solverValue;
        EcoResAttributeType                 attributeType;
        EcoResEnumerationAttributeTypeValue enumValue;
        PCTableConstraintColumnDefinition   columnDefinition;

        columnDefinition = columnNameToColumnRecord.lookup(_columnName);

        while select Value from solverValue
            join TableId from enumValue
            where enumValue.Value == solverValue.TextValue
            join TableId from attributeType
            where attributeType.RecId == enumValue.AttributeType
            &&    attributeType.RecId == columnDefinition.AttributeType
        {
            runtimeStringLookupTmp.clear();
            runtimeStringLookupTmp.DisplayValue = solverValue.Value;
            runtimeStringLookupTmp.SolverValue  = solverValue.Value;
            runtimeStringLookupTmp.insert();
        }

        return runtimeStringLookupTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntegerLookupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets integer lookup data from a table constraint cell.
    /// </summary>
    /// <param name="_columnName">
    /// A table constraint column name.
    /// </param>
    /// <returns>
    /// Integer lookup data.
    /// </returns>
    public PCRuntimeIntegerLookupTmp getIntegerLookupData(PCName _columnName)
    {
        PCRuntimeIntegerLookupTmp           runtimeIntegerLookupTmp;
        EcoResBoundedAttributeTypeValue     boundedAttributeTypeValue;
        EcoResIntValue                      lowerBound;
        EcoResIntValue                      upperBound;
        EcoResEnumerationAttributeTypeValue attributeTypeEnumerationValue;
        EcoResIntValue                      setValue;
        PCTableConstraintColumnDefinition   columnDefinition = columnNameToColumnRecord.lookup(_columnName);
        EcoResAttributeType                 attributeType = columnDefinition.getAttributeType();

        if (attributeType.IsEnumeration)
        {
            while select IntValue from setValue
                exists join attributeTypeEnumerationValue
                where   attributeTypeEnumerationValue.Value         == setValue.RecId
                &&      attributeTypeEnumerationValue.AttributeType == attributeType.RecId
            {
                runtimeIntegerLookupTmp.clear();
                runtimeIntegerLookupTmp.Value = setValue.IntValue;
                runtimeIntegerLookupTmp.insert();
            }
        }
        else
        {
            select firstonly TableId from boundedAttributeTypeValue
                where boundedAttributeTypeValue.AttributeType == columnDefinition.AttributeType
                join IntValue from lowerBound
                    where lowerBound.RecId == boundedAttributeTypeValue.LowerBound
                join IntValue from upperBound
                    where upperBound.RecId == boundedAttributeTypeValue.UpperBound;

            for (int i = lowerBound.IntValue; i <= upperBound.IntValue; i++)
            {
                runtimeIntegerLookupTmp.clear();
                runtimeIntegerLookupTmp.Value = i;
                runtimeIntegerLookupTmp.insert();
            }
        }

        return runtimeIntegerLookupTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewRowId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new row ID.
    /// </summary>
    /// <returns>
    /// A row ID.
    /// </returns>
    public int64 getNewRowId()
    {
        newRowIdCounter--;

        return newRowIdCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowIdFromTempCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the row ID from a temporary table constraint cell.
    /// </summary>
    /// <param name="_tmpCellValue">
    /// A temporary table constraint cell.
    /// </param>
    /// <returns>
    /// A row ID.
    /// </returns>
    protected PCTableConstraintRowRecId getRowIdFromTempCell(PCGlobalTableConstraintEditTmp _tmpCellValue)
    {
        PCTableConstraintRow    tableConstraintRow;
        int64                   rowId;

        // temporary row ID
        if (_tmpCellValue.RowId < 0)
        {
            // Has row record been created?
            if (!tmpRowIdsToRealRowIds.exists(_tmpCellValue.RowId))
            {
                tableConstraintRow.TableConstraintDefinition = tableConstraintDefinition.RecId;
                tableConstraintRow.insert();
                tmpRowIdsToRealRowIds.insert(_tmpCellValue.RowId, tableConstraintRow.RecId);
            }

            rowId = tmpRowIdsToRealRowIds.lookup(_tmpCellValue.RowId);
        }
        else
        {
            rowId = _tmpCellValue.RowId;
        }

        return rowId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableConstraintId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table constraint definition ID.
    /// </summary>
    /// <returns>
    /// The table constraint definition ID.
    /// </returns>
    public RecId getTableConstraintId()
    {
        return tableConstraintDefinition.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form controller.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> instance.
    /// </param>
    /// <param name="_tableConstraintDefinition">
    /// The table constraint definition.
    /// </param>
    public void initialize(FormRun _formRun, PCGlobalTableConstraintDefinition _tableConstraintDefinition)
    {
        // The controller should use the initial table constraint definition
        this.setFormContext(_formRun, PCGlobalTableConstraintDefinition::find(_tableConstraintDefinition.RecId));

        this.populateDataSources();

        this.buildAuxiliaryDatastructure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values of a newly created row.
    /// </summary>
    public void initValue()
    {
        PCGlobalTableConstraintEditTmp      cursor;
        FormDataSource                      formDataSource;
        RecId                               newRowId = this.getNewRowId();
        PCTableConstraintColumnDefinition   columnRecord;

        MapEnumerator me = columnNameToFormDataSource.getEnumerator();

        while (me.moveNext())
        {
            formDataSource = me.currentValue();

            cursor = formDataSource.cursor();

            cursor.RowId = newRowId;

            columnRecord = columnNameToColumnRecord.lookup(formDataSource.name());

            tableConstraintCellDefaultValue.setDefaultValue(cursor, columnRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()

    {
        columnNameToFormDataSource  = new Map(Types::String, Types::Class);
        tmpRowIdsToRealRowIds       = new Map(Types::Int64, Types::Int64);
        columnNameToColumnRecord    = new Map(Types::String, Types::Record);
        rowDataMap                  = new Map(Types::Int64, Types::String);

        dataPopulator                   = PCGlobalTableConstraintDataPopulator::construct();
        tableConstraintCellEditor       = PCGlobalTableConstraintCellEditor::construct();
        tableConstraintValidator        = PCGlobalTableConstraintValidator::construct();
        tableConstraintCellDefaultValue = PCGlobalTableConstraintCellDefaultValue::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataPopulator</Name>
				<Source><![CDATA[
    public PCGlobalTableConstraintDataPopulator parmDataPopulator(PCGlobalTableConstraintDataPopulator _dataPopulator = dataPopulator)
    {
        dataPopulator = _dataPopulator;

        return dataPopulator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableConstraintCellEditor</Name>
				<Source><![CDATA[
    public PCGlobalTableConstraintCellEditor parmTableConstraintCellEditor(PCGlobalTableConstraintCellEditor _tableConstraintCellEditor = tableConstraintCellEditor)
    {
        tableConstraintCellEditor = _tableConstraintCellEditor;

        return tableConstraintCellEditor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the form's data sources.
    /// </summary>
    protected void populateDataSources()
    {
        this.parmRowDataMap(dataPopulator.populate(tableConstraintDefinition, formRun));
        columnNameToFormDataSource = dataPopulator.parmColumnNameToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form context for the user defined table constraint edit form controller.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> instance.
    /// </param>
    /// <param name="_tableConstraintDefinition">
    /// The table constraint definition.
    /// </param>
    protected void setFormContext(FormRun _formRun, PCGlobalTableConstraintDefinition _tableConstraintDefinition)
    {
        PCContractNotNull::assertObject(_formRun, funcName());
        PCContractNotNull::assertRecord(_tableConstraintDefinition, funcName());

        formRun = _formRun;
        tableConstraintDefinition = _tableConstraintDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTableConstriant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the table constraint.
    /// </summary>
    public void validateTableConstriant()
    {
        tableConstraintValidator.validate(tableConstraintDefinition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a row that is about to be written.
    /// </summary>
    /// <returns>
    /// true if the row is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        MapEnumerator   me;
        FormDataSource  formDataSource;
        str             columnName;
        boolean         ret = true;

        me = columnNameToFormDataSource.getEnumerator();

        // write
        while (me.moveNext())
        {
            formDataSource = me.currentValue();
            columnName = formDataSource.name();
            ret = tableConstraintCellEditor.validateCellValue(PCTableConstraintColumnDefinition::findByNameAndDefinition(columnName, tableConstraintDefinition.RecId).RecId, formDataSource.cursor()) & ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the write event from the associated form.
    /// </summary>
    public void write()
    {
        MapEnumerator   me;
        List            rowEditData = new List(Types::Container);
        RecId           newRowId    = this.getNewRowId();

        FormDataSource formDataSource;

        me = columnNameToFormDataSource.getEnumerator();

        // write
        while (me.moveNext())
        {
            formDataSource = me.currentValue();
            //Initialize temp row id
            if (!formDataSource.cursor().getFieldValue(fieldStr(PCGlobalTableConstraintEditTmp, RowId)))
            {
                formDataSource.cursor().setFieldValue(fieldStr(PCGlobalTableConstraintEditTmp, RowId), newRowId);
                formDataSource.cursor().write();
            }

            rowEditData.addEnd([formDataSource.name(), formDataSource.cursor()]);
        }

        this.writeRowData(rowEditData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRowData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits a row in the table constraint.
    /// </summary>
    /// <param name="_rowData">
    /// Row data.
    /// </param>
    /// <exception cref="Exception::Error">
    /// throws an error if a cell record for each column of the row does not exists.
    /// </exception>
    protected void writeRowData(List _rowData)
    {
        ListEnumerator                      le;
        PCGlobalTableConstraintEditTmp      tempCellValue;
        PCName                              columnName;
        RecId                               rowId;
        RefRecId                            columnId;
        RecId                               tmpRowId;
        str                                 rowStr;

        PCContractNotNull::assertObject(_rowData, funcName());

        le = _rowData.getEnumerator();

        ttsbegin;

        while (le.moveNext())
        {
            [columnName, tempCellValue] = le.current();
            if (tempCellValue.RowId < 0)
            {
                tmpRowId = tempCellValue.RowId;
            }
            rowId = this.getRowIdFromTempCell(tempCellValue);
            columnId = PCTableConstraintColumnDefinition::findByNameAndDefinition(columnName, tableConstraintDefinition.RecId).RecId;
            tableConstraintCellEditor.updateCell(columnId, rowId, tempCellValue);
            rowStr += strFmt("%1%2", columnName, this.getColumnValueStr(tempCellValue, columnId));
        }

        if (rowDataMap.valueSet().in(rowStr))
        {
            if (!rowDataMap.keySet().in(rowId))
            {
                tmpRowIdsToRealRowIds.remove(tmpRowId);
                throw error("@SYP4881579");
            }

            if (rowDataMap.lookup(rowId) != rowStr)
            {
                throw error("@SYP4881579");
            }
        }

        if (rowDatamap.keySet().in(rowId))
        {
            rowDatamap.remove(rowId);
        }
        rowDatamap.insert(rowId, rowStr);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCGlobalTableConstraintController construct()
    {
        return new PCGlobalTableConstraintController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get column value string for cell
    /// </summary>
    /// <param name="record">
    /// Temp cell
    /// </param>
    /// <param name="columnId">
    /// column record
    /// </param>
    /// <returns>
    /// Column vallue string
    /// </returns>
    public str getColumnValueStr(PCGlobalTableConstraintEditTmp record, RefRecId columnId)
    {
        PCTableConstraintColumnDefinition columnDefinition = PCTableConstraintColumnDefinition::find(columnId);

        if (columnDefinition.getDataType() == AttributeDataType::Text)
        {
            return int642str(tableConstraintCellEditor.findEnumValue(columnDefinition, record.TextValue));
        }

        return record.GetColumnValueStr(columnDefinition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowDataMap</Name>
				<Source><![CDATA[
    public Map parmRowDataMap(Map _rowDataMap = rowDatamap)
    {
        rowDataMap = _rowDataMap;

        return rowDataMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>