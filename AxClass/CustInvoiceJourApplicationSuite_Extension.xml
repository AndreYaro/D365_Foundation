<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceJourApplicationSuite_Extension</c> class is an extension class which extends the <c>CustInvoiceJour</c> table.
/// </summary>
[ExtensionOf(tableStr(CustInvoiceJour))]
public final class CustInvoiceJourApplicationSuite_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSalesParmTable</Name>
				<Source><![CDATA[
    public void initFromSalesParmTable(SalesParmTable _salesParmTable)
    {
        next initFromSalesParmTable(_salesParmTable);

        if (FeatureStateProvider::isFeatureEnabled(CompanyTaxRegistrationFeature::instance()))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceGB00021, funcName());

            this.TaxID = _salesParmTable.TaxId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTable</Name>
				<Source><![CDATA[
    public void initFromCustInvoiceTable(CustInvoiceTable _custInvoiceTable, RefNum _refNum)
    {
        next initFromCustInvoiceTable(_custInvoiceTable, _refNum);

        if (FeatureStateProvider::isFeatureEnabled(DynamicQRCodeFeature_IN::instance()))
        {
            this.PrintDynamicQRCode_IN = _custInvoiceTable.PrintDynamicQRCode_IN;
        }

        if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()))
        {
            this.InvoiceType_W = _custInvoiceTable.InvoiceType_W;
        }

        if (FeatureStateProvider::IsFeatureEnabled(BusinessDocChorusProInvoicingIntegrationFeature_FR::instance()))
        {
            this.ElectronicInvoiceFrameworkType_FR = _custInvoiceTable.ElectronicInvoiceFrameworkType_FR;
            this.ServiceCodeRefRecId = _custInvoiceTable.ServiceCodeRefRecId;
            this.ProjectManager_FR = _custInvoiceTable.ProjectManager_FR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    public void initFromSalesTable(SalesTable salesTable, SalesParmTable _salesParmTable)
    {
        next initFromSalesTable(salesTable, _salesParmTable);

        if (FeatureStateProvider::isFeatureEnabled(DynamicQRCodeFeature_IN::instance()))
        {
            this.PrintDynamicQRCode_IN = salesTable.PrintDynamicQRCode_IN;
        }

        if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()))
        {
            this.InvoiceType_W = salesTable.InvoiceType_W;
        }

        if (FeatureStateProvider::IsFeatureEnabled(BusinessDocChorusProInvoicingIntegrationFeature_FR::instance()))
        {
            this.ElectronicInvoiceFrameworkType_FR = salesTable.ElectronicInvoiceFrameworkType_FR;
            this.ServiceCodeRefRecId = salesTable.ServiceCodeRefRecId;
            this.ProjectManager_FR = salesTable.ProjectManager_FR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitle_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title of report required in Saudi Arabia.
    /// </summary>
    /// <param name = "_isCreditNote">true if title for credit note; otherwise, false.</param>
    /// <param name = "_isDebitNote">true if title for debit note; otherwise, false.</param>
    /// <param name = "_printCopyOriginal">The value of <c>PrintCopyOriginal</c> enum.</param>
    /// <param name = "_isProforma">true if title for pro forma; otherwise, false.</param>
    /// <param name = "_isSimplifiedInvoice">true if title for simplified invoice; otherwise, false.</param>
    /// <param name = "_languageId">The language identificator.</param>
    /// <returns>The title of report required in Saudi Arabia.</returns>
    internal static str getDocumentTitle_SA(
        boolean _isCreditNote,
        boolean _isDebitNote,
        PrintCopyOriginal _printCopyOriginal,
        boolean _isProforma,
        boolean _isSimplifiedInvoice,
        CustLanguageId _languageId)
    {
        str documentTitle;

        if (!_isCreditNote)
        {
            if (_printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (_isProforma)
                {
                    if (_isSimplifiedInvoice)
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaSimplifiedDebitNoteCopy");
                        }
                        else
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaSimplifiedInvoiceCopy");
                        }
                    }
                    else
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaTaxDebitNoteCopy");
                        }
                        else
                        {
                            documentTitle = literalStr("@SYS121363");
                        }
                    }
                }
                else
                {
                    if (_isSimplifiedInvoice)
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:CopySimplifiedDebitNote");
                        }
                        else
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:CopySimplifiedInvoice");
                        }
                    }
                    else
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:CopyTaxDebitNote");
                        }
                        else
                        {
                            documentTitle = literalStr("@UAE_VAT:UAE_VAT_CopyTaxInvoice");
                        }
                    }
                }
            }
            else
            {
                if (_isProforma)
                {
                    if (_isSimplifiedInvoice)
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaSimplifiedDebitNote");
                        }
                        else
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaSimplifiedInvoice");
                        }
                    }
                    else
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaTaxDebitNote");
                        }
                        else
                        {
                            documentTitle = literalStr("@SYS121362");
                        }
                    }
                }
                else
                {
                    if (_isSimplifiedInvoice)
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:SimplifiedDebitNote");
                        }
                        else
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:InvoiceTypeSimplified");
                        }
                    }
                    else
                    {
                        if (_isDebitNote)
                        {
                            documentTitle = literalStr("@ApplicationSuite_Localization:TaxDebitNote");
                        }
                        else
                        {
                            documentTitle = literalStr("@SYS115505");
                        }
                    }
                }
            }
        }
        else
        {
            if (_printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (_isProforma)
                {
                    if (_isSimplifiedInvoice)
                    {
                        documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaSimplifiedCreditNoteCopy");
                    }
                    else
                    {
                        documentTitle = literalStr("@SYS70790");
                    }
                }
                else
                {
                    if (_isSimplifiedInvoice)
                    {
                        documentTitle = literalStr("@ApplicationSuite_Localization:CopySimplifiedCreditNote");
                    }
                    else
                    {
                        documentTitle = literalStr("@UAE_VAT:UAE_VAT_CopyTaxCreditNote");
                    }
                }
            }
            else
            {
                if (_isProforma)
                {
                    if (_isSimplifiedInvoice)
                    {
                        documentTitle = literalStr("@ApplicationSuite_Localization:ProFormaSimplifiedCreditNote");
                    }
                    else
                    {
                        documentTitle = literalStr("@ApplicationSuite_Localization:ProformaTaxCreditNote");
                    }
                }
                else
                {
                    if (_isSimplifiedInvoice)
                    {
                        documentTitle = literalStr("@ApplicationSuite_Localization:SimplifiedCreditNote");
                    }
                    else
                    {
                        documentTitle = literalStr("@UAE_VAT:UAE_VAT_TaxCreditNote");
                    }
                }
            }
        }

        return SysLabel::labelId2String(documentTitle, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RegistrationNumber value of the <c>TaxRegistration</c> record.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber</c> value of the <c>TaxRegistration</c> record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    internal display TaxRegistrationNumber taxRegistrationNumber()
    {
        return TaxRegistration::find(this.TaxID).RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalCustInvoices_PL</Name>
				<Source><![CDATA[
    internal static Set originalCustInvoices_PL(CustInvoiceJour _custInvoiceJour)
    {
        Set retSet = new Set(Types::Container);

        CustInvoiceTrans invoiceTrans, origTrans;
        CustInvoiceTrans_W invoiceTrans_W;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) &&
            CustInvoiceJourOrigInvoices_PLFlight::instance().isEnabled())
        {
            while select RecId from invoiceTrans
                where invoiceTrans.InvoiceId == _custInvoiceJour.InvoiceId
                    && invoiceTrans.InvoiceDate == _custInvoiceJour.InvoiceDate
                    && invoiceTrans.SalesId == _custInvoiceJour.SalesId
                    && invoiceTrans.NumberSequenceGroup == _custInvoiceJour.NumberSequenceGroup
            exists join invoiceTrans_W
                where invoiceTrans_W.CustInvoiceTrans == invoiceTrans.RecId
                    && invoiceTrans_W.RefReturnInvoiceTrans_W
            {
                retSet = CustInvoiceJour::findOriginalCustInvoice_PL(invoiceTrans.RecId, _custInvoiceJour, retSet);
            }
        }

        return retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalCustInvoice_PL</Name>
				<Source><![CDATA[
    private static Set findOriginalCustInvoice_PL(RefRecId _curInvoiceTransRecId, CustInvoiceJour _custInvoiceJour, Set _retSet)
    {
        CustInvoiceTrans invoiceTrans, refTrans;
        CustInvoiceTrans_W invoiceTrans_W;

        while select RecId from invoiceTrans
            exists join refTrans
                where refTrans.InvoiceId == invoiceTrans.InvoiceId
                    && refTrans.InvoiceDate == invoiceTrans.InvoiceDate
                    && refTrans.SalesId == invoiceTrans.SalesId
                    && refTrans.NumberSequenceGroup == invoiceTrans.NumberSequenceGroup
                    && refTrans.RecId != _curInvoiceTransRecId
            exists join invoiceTrans_W
                where invoiceTrans_W.CustInvoiceTrans == _curInvoiceTransRecId
                    && invoiceTrans_W.RefReturnInvoiceTrans_W == refTrans.RecId
        {
            _retSet = CustInvoiceJour::findOriginalCustInvoice_PL(invoiceTrans.RecId, _custInvoiceJour, _retSet);
        }

        CustInvoiceTrans curInvoiceTrans =  CustInvoiceTrans::findRecId(_curInvoiceTransRecId);
        container con = [curInvoiceTrans.InvoiceId, curInvoiceTrans.InvoiceDate];

        if (curInvoiceTrans.InvoiceId != _custInvoiceJour.InvoiceId
            && !_retSet.in(con)
            && !curInvoiceTrans.salesLine().salesTable().isCreditNote_PL())
        {
            _retSet.add(con);
        }

        return _retSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>