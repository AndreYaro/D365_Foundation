<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomProdFlowSubcontractedServicesUsage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMProdFlowSubcontractedServicesUsage</c> class is used to calculate the cost of the
///    subcontracted services for a given item and dimension pair during the BOM calculation.
/// </summary>
public class BomProdFlowSubcontractedServicesUsage
{
    ItemId              itemId;
    InventDimId         inventDimId;
    Qty                 consumedQty;
    BOMCalcGroup        bomCalcGroup;
    InventTable         inventTable;
    InventItemType      inventItemType;
    UnitOfMeasureSymbol inventUnitId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the calculation for the current object.
    /// </summary>
    /// <param name="_bomCalcItem">
    ///    The <c>BOMCalcItem</c> object that calculates the cost of the item that uses subcontracted services.
    /// </param>
    /// <returns>
    ///    The <c>BOMCalcTrans</c> record that contains the results of the calculation.
    /// </returns>
    /// <remarks>
    ///    If <c>BOMCalcTrans</c> record does not exist for the service item dimension combination within the
    ///    same calculation, a new record is created. If one exists the consumption of the service item will
    ///    be aggregated in the existing record and this record will be returned.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BOMCalcTrans calc(
        BOMCalcItem _bomCalcItem)
    {
        BOMCalcTrans        bomCalcTrans;
        CostGroupId         costGroupId;
        InventQty           oldConsumptionVariable = 0;

        costGroupId = inventTable.costGroup();

        ttsbegin;

        select forupdate bomCalcTrans
        where bomCalcTrans.CostGroupId == costGroupId
            && bomCalcTrans.PriceCalcId == _bomCalcItem.parmPriceCalcId()
            && bomCalcTrans.Resource == itemId
            && bomCalcTrans.InventDimId == inventDimId
            && bomCalcTrans.CalcType == ItemCalcType::Service;

        if (bomCalcTrans.RecId)
        {
            oldConsumptionVariable = bomCalcTrans.ConsumptionVariable;
        }
        else
        {
            bomCalcTrans.CostGroupId = costGroupId;
            bomCalcTrans.PriceCalcId = _bomCalcItem.parmPriceCalcId();
            bomCalcTrans.Resource = itemId;
            bomCalcTrans.InventDimId = inventDimId;
            bomCalcTrans.CalcType = ItemCalcType::Service;

            bomCalcTrans.LineNum = _bomCalcItem.getLineNum();
            bomCalcTrans.TransDate = _bomCalcItem.parmCalcDate();
            bomCalcTrans.Qty = _bomCalcItem.topParentQty();
            bomCalcTrans.UnitId = InventTable::find(itemId).inventUnitId();
            bomCalcTrans.Level = _bomCalcItem.parmLevel() + 1;
            bomCalcTrans.bom = NoYes::No;
            bomCalcTrans.ConsumptionConstant = 0;
        }

        bomCalcTrans.ConsumptionVariable = consumedQty;

        this.calcCost(_bomCalcItem, bomCalcTrans);

        this.updatePerQtyPrices(_bomCalcItem, bomCalcTrans);

        this.updateWarnings(_bomCalcItem, bomCalcTrans);

        bomCalcTrans.write();

        // Update parent
        _bomCalcItem.updateCalcPrices(bomCalcTrans);
        _bomCalcItem.updateActualPrices(bomCalcTrans);
        _bomCalcItem.updateCostCalcTransData(bomCalcTrans);

        if (oldConsumptionVariable)
        {
            bomCalcTrans.ConsumptionVariable += oldConsumptionVariable;
            this.updatePerQtyPrices(_bomCalcItem, bomCalcTrans);
            bomCalcTrans.update();
        }

        ttscommit;

        return bomCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the cost of the service item according to the setup of the BOM calculation.
    /// </summary>
    /// <param name="_bomCalcItem">
    ///    The <c>BOMCalcItem</c> object that calculates the cost of the item that uses subcontracted services.
    /// </param>
    /// <param name="_bomCalcTrans">
    ///    The <c>BOMCalcTrans</c> record that contains the results of the calculation.
    /// </param>
    /// <remarks>
    ///    The results of the calculation will be stored in the <c>BOMCalcTrans</c> record that is passed as a
    ///    parameter.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcCost(
        BOMCalcItem         _bomCalcItem,
        BOMCalcTrans        _bomCalcTrans   /*in-out*/)
    {
        BOMCostPriceModel   parentCostPriceModel        = _bomCalcItem.parmCostPriceModel();
        BOMCalcCostPrice    bomCalcGroupCostPrice       = bomCalcGroup.getCostPriceModel(parentCostPriceModel);
        BOMCalcCostPrice    bomCalcGroupCostPriceAlt    = bomCalcGroup.getCostPriceModelAlt(parentCostPriceModel);
        BOMCalcCost         bomCalcCost = BOMCalcCost::construct();

        BOMCalcCostPrice    costPriceModelUsed;
        BOMCalcSalesPrice   salesPriceModelUsed;

        bomCalcCost.initCalc(_bomCalcItem.parmCalcDate(),
                             itemId,
                             inventDimId,
                             consumedQty,
                             0,
                             '',
                             _bomCalcItem.parmProfitSet(),
                             _bomCalcItem.parmCostingVersionId(),
                             _bomCalcItem.parmBOMCalcFallBack(),
                             _bomCalcItem.parmFallBackVersionId(),
                             parentCostPriceModel,
                             _bomCalcItem.parmSiteId());

        // calculate cost price
        bomCalcCost.calcPrimaryCostModel();
        costPriceModelUsed = bomCalcGroupCostPrice;

        if (!bomCalcCost.costPrice() && bomCalcGroupCostPrice != bomCalcGroupCostPriceAlt)
        {
            bomCalcCost.calcAlternativeCostModel();
            costPriceModelUsed = bomCalcGroupCostPriceAlt;
        }

        bomCalcCost.calcSalesPrice();
        salesPriceModelUsed = bomCalcGroup.getSalesPriceModel(parentCostPriceModel);

        // update cost price model field
        this.updateCostPriceModelUsed(costPriceModelUsed, _bomCalcTrans);

        // update sales price model field
        this.updateSalesPriceModelUsed(salesPriceModelUsed, _bomCalcTrans);

        _bomCalcTrans.CostPrice = bomCalcCost.costPrice();
        _bomCalcTrans.CostMarkup = bomCalcCost.costMarkup();
        _bomCalcTrans.CostPriceUnit  = bomCalcCost.costPriceUnit();
        _bomCalcTrans.CostPriceFallBackVersion   = bomCalcCost.costPriceFallBackVersion();

        _bomCalcTrans.SalesPrice = bomCalcCost.salesPrice();
        _bomCalcTrans.SalesMarkup = bomCalcCost.salesMarkup();
        _bomCalcTrans.SalesPriceUnit = bomCalcCost.salesPriceUnit();
        _bomCalcTrans.SalesPriceFallBackVersion  = bomCalcCost.salesPriceFallBackVersion();

        _bomCalcTrans.ConsistOfPrice = bomCalcCost.parmPriceCalcIdOfPriceUsed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes member variables that are used during the calculation.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    Thrown if the item passed as parameter does not exist.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initParameters()
    {
        inventTable = InventTable::find(itemId);

        if (!inventTable)
        {
            throw error(strFmt(InventTable::txtNotExist(),itemId));
        }

        bomCalcGroup    = inventTable.bomCalcGroup();
        inventItemType  = inventTable.inventItemType();
        inventUnitId    = inventTable.inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedQty</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Qty parmConsumedQty(Qty _consumedQty = consumedQty)
    {
        consumedQty = _consumedQty;

        return consumedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostPriceModelUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>CostPriceModelUsed</c> field in the <c>_bufferCalcTrans</c> record.
    /// </summary>
    /// <param name="_costPriceModel">
    ///    A <c>BOMCalcCostPrice</c> enumeration type that represents the source of the cost that is used in
    ///    the calculation.
    /// </param>
    /// <param name="_bufferCalcTrans">
    ///    A <c>BOMCalcTrans</c> or <c>ProdCalcTrans</c> record that is used to store the results of the
    ///    calculation.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Thrown if an invalid result record was passed or the indicated source is invalid.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateCostPriceModelUsed(BOMCalcCostPrice _costPriceModel,
                                            Common           _bufferCalcTrans)
    {
        BOMCalcCostPriceUsed    costPriceModelUsed;
        BOMCalcTrans            bomCalcTrans;
        ProdCalcTrans           prodCalcTrans;

        costPriceModelUsed = this.getBOMCalcCostPriceUsed(_costPriceModel);

        switch (_bufferCalcTrans.TableId)
        {
            case tableNum(BOMCalcTrans):
                bomCalcTrans                    = _bufferCalcTrans;
                bomCalcTrans.CostPriceModelUsed = costPriceModelUsed;
                break;

            case tableNum(ProdCalcTrans):
                prodCalcTrans                       = _bufferCalcTrans;
                prodCalcTrans.CostPriceModelUsed    = costPriceModelUsed;
                break;

            default:
                throw error("@SYS16078");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMCalcCostPriceUsed</Name>
				<Source><![CDATA[
	/// <summary>
    ///	   Translates the <c>BOMCalcCostPrice</c> enum value to <c>BOMCalcCostPriceUsed</c> enum value.
    /// </summary>
    /// <param name = "_costPriceModel">
    ///    A <c>BOMCalcCostPrice</c> enumeration type that represents the source of the cost that is used in
    ///    the calculation.
	/// </param>
    /// <returns>
    ///	   A <c>BOMCalcCostPriceUsed</c> enumeration type.
	/// </returns>
    protected BOMCalcCostPriceUsed getBOMCalcCostPriceUsed(BOMCalcCostPrice _costPriceModel)
    {
        BOMCalcCostPriceUsed costPriceModelUsed;

        switch (_costPriceModel)
        {
            case BOMCalcCostPrice::CostPrice:
                costPriceModelUsed = BOMCalcCostPriceUsed::CostPrice;
                break;

            case BOMCalcCostPrice::OnhandPrice:
                costPriceModelUsed = BOMCalcCostPriceUsed::OnhandPrice;
                break;

            case BOMCalcCostPrice::PriceDisc:
                costPriceModelUsed = BOMCalcCostPriceUsed::PriceDisc;
                break;

            case BOMCalcCostPrice::PurchPrice:
                costPriceModelUsed = BOMCalcCostPriceUsed::PurchPrice;
                break;
        }

        return costPriceModelUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePerQtyPrices</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>CostPriceQty</c> , <c>CostMarkupQty</c> , <c>SalesPriceQty</c>, and
    ///    <c>SalesMarkupQty</c> fields by using the current consumption values in the result record.
    /// </summary>
    /// <param name="_bomCalcItem">
    ///    The <c>BOMCalcItem</c> object that calculates the cost of the item that uses subcontracted services.
    /// </param>
    /// <param name="_bomCalcTrans">
    ///    The record that contains the results of the current calculation.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updatePerQtyPrices(
        BOMCalcItem     _bomCalcItem,
        BOMCalcTrans    _bomCalcTrans
    )
    {
        Qty totalConsump    = _bomCalcTrans.ConsumptionVariable + _bomCalcTrans.ConsumptionConstant;
        Qty topParentQty    = _bomCalcItem.topParentQty();

        _bomCalcTrans.CostPriceQty   = _bomCalcTrans.CostPrice *  (totalConsump / topParentQty) / _bomCalcTrans.CostPriceUnit;
        _bomCalcTrans.CostMarkupQty  = _bomCalcTrans.CostMarkup / _bomCalcTrans.CostPriceUnit;
        _bomCalcTrans.SalesPriceQty  = _bomCalcTrans.SalesPrice * (totalConsump / topParentQty) / _bomCalcTrans.CostPriceUnit;
        _bomCalcTrans.SalesMarkupQty = _bomCalcTrans.SalesMarkup / _bomCalcTrans.CostPriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPriceModelUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>SalesPriceModelUsed</c> field in the <c>_bufferCalcTrans</c> record.
    /// </summary>
    /// <param name="_salesPriceModel">
    ///    A <c>BOMCalcSalesPrice</c> enumeration type that represents the source of the determined sales
    ///    price.
    /// </param>
    /// <param name="_bufferCalcTrans">
    ///    A <c>BOMCalcTrans</c> or <c>ProdCalcTrans</c> records that is used to store the results of the
    ///    calculation.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Thrown if an invalid result record was passed or the indicated source is invalid.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateSalesPriceModelUsed(BOMCalcSalesPrice _salesPriceModel,
                                             Common            _bufferCalcTrans)
    {
        BOMCalcSalesPriceUsed   salesPriceModelUsed;
        BOMCalcTrans            bomCalcTrans;
        ProdCalcTrans           prodCalcTrans;

        switch (_salesPriceModel)
        {
            case BOMCalcSalesPrice::CostGroup:
                salesPriceModelUsed = BOMCalcSalesPriceUsed::CostGroup;
                break;

            case BOMCalcSalesPrice::SalesPrice:
                salesPriceModelUsed = BOMCalcSalesPriceUsed::SalesPrice;
                break;

            default:
                throw error("@SYS105954");
        }

        switch (_bufferCalcTrans.TableId)
        {
            case tableNum(BOMCalcTrans):
                bomCalcTrans                        = _bufferCalcTrans;
                bomCalcTrans.SalesPriceModelUsed    = salesPriceModelUsed;
                break;

            case tableNum(ProdCalcTrans):
                prodCalcTrans                       = _bufferCalcTrans;
                prodCalcTrans.SalesPriceModelUsed   = salesPriceModelUsed;
                break;

            default:
                throw error("@SYS16078");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the warning conditions and updates the messages in the <c>BOMCalcTrans</c> record.
    /// </summary>
    /// <param name="_bomCalcItem">
    ///    The <c>BOMCalcItem</c> object that calculates the cost of the item that uses subcontracted services.
    /// </param>
    /// <param name="_bomCalcTrans">
    ///    The <c>BOMCalcTrans</c> record that contains the results of the calculation.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateWarnings(
        BOMCalcItem         _bomCalcItem,
        BOMCalcTrans        _bomCalcTrans)
    {
        BOMCalcCheck bomCalcCheck;

        bomCalcCheck = BOMCalcCheck::newBOMCalcBase(_bomCalcItem);
        bomCalcCheck.checkZeroCostPrice(_bomCalcTrans.CostPrice);
        bomCalcCheck.checkMinContribution(_bomCalcTrans.contributionRatio());
        bomCalcCheck.checkUseFallBack(_bomCalcTrans.CostPriceFallBackVersion, _bomCalcTrans.SalesPriceFallBackVersion);

        if (bomCalcCheck.hasMessages())
        {
            _bomCalcTrans.Infolog = bomCalcCheck.getMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>BOMProdFlowSubcontractedServicesUsage</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the subcontracted service item.
    /// </param>
    /// <param name="_inventDimId">
    ///     The inventory dimension ID.
    /// </param>
    /// <param name="_consumedQty">
    ///     The quantity of the subcontracted service item that is consumed.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>BOMProdFlowSubcontractedServicesUsage</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BOMProdFlowSubcontractedServicesUsage construct(
        ItemId          _itemId,
        InventDimId     _inventDimId,
        Qty             _consumedQty)
    {
        BOMProdFlowSubcontractedServicesUsage usage = new BOMProdFlowSubcontractedServicesUsage();

        usage.parmItemId(_itemId);
        usage.parmConsumedQty(_consumedQty);
        usage.parmInventDimId(_inventDimId);
        usage.initParameters();

        return usage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>