<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgDialogFormClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgDialogFormClass</c> class is used to show dialogs to the user during the use of the
///    registration form.
/// </summary>
class JmgDialogFormClass
{
    str buttonStr;
    str headLine;
    str caption;
    Object  controlClass;
    boolean isReqDocs;
    boolean markAsReadOnly;
    boolean doTimeOut;
    int     timeOutInMs;
    //Absence stuff
    boolean                 makeAbsenceRegistration;
    boolean                 doNothingOnClose;
    boolean                 formIsClosedDown;
    JmgJobBundle            jmgJobBundle;
    JmgTermJob              termJob;
    container               jobIdCon;
    Object                  registrationForm;
    JmgJobId                jmgJobId;

    private JmgInstrumentationLogger    jmgInstrumentationLogger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the <c>clicked</c> event for the button control.
    /// </summary>
    /// <param name="_button">
    ///     The control where the <c>clicked</c> event is called.
    /// </param>
    public void clicked(FormCommandButtonControl _button)
    {
        Object                  form;
        form                    = _button.formRun();
        jmgJobId                = conPeek(jobIdCon, _button.userDataItem());
        makeAbsenceRegistration = true;
        form.parmButtonPushed(true);
        form.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJobsStartedBody</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the specified <c>FormGroupControl</c> object that has  controls to show information
    ///    about started jobs.
    /// </summary>
    /// <param name="_fgc">
    ///    The <c>FormGroupControl</c> object to add controls to.
    /// </param>
    /// <param name="_jobIds">
    ///    A container with job IDs for which controls are added.
    /// </param>
    private void createJobsStartedBody(FormGroupControl _fgc,   container _jobIds)
    {
        int jobCount;
        JmgJobTable jobTbl;
        JmgJobId    currentJobId;
        FormGroupControl    subGroup;

        for (jobCount = 1; jobCount <= _fgc.controlCount();jobCount++)
        {
            _fgc.controlNum(jobCount).visible(false);
        }
        for (jobCount = 1; jobCount <= conlen(_jobIds);jobCount++)
        {
            currentJobId = conpeek(_jobIds,jobCount);
            jobTbl = JmgJobTable::find(currentJobId);
            subGroup = _fgc.addControl(FormControlType::Group,currentJobId);
            subGroup.columns(2);
            subGroup.frameType(1);

            FormStaticTextControl moduleRefId = subGroup.addControl(FormControlType::StaticText, currentJobId + '_module_' + int2str(jobCount));
            moduleRefId.text(jobTbl.ModuleRefId);

            FormStaticTextControl jobInfo = subGroup.addControl(FormControlType::StaticText, currentJobId + '_jobInfo_' + int2str(jobCount));
            jobInfo.text(enum2str(jobTbl.Type)+ '  ' + jobTbl.Description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosingDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the system when the user dialog is closed.
    /// </summary>
    /// <param name="_formRun">
    /// A reference to the <c>FormRun</c> object, which is used to display the dialog.
    /// </param>
    public void formClosingDown(FormRun _formRun)
    {
        JmgMESDocuHandling          docHand  = controlClass;
        JmgRegistrationParameters   parms;

        formIsClosedDown = true;

        if (doNothingOnClose)
        {
            return;
        }

        if (makeAbsenceRegistration)
        {
            parms = jmgJobBundle.getStartupParameters(termJob.jobId());
            parms.jobIdAbsence(jmgJobId);
            jmgJobBundle.setStartupParameters(termJob.jobId(),parms);
            return;
        }
        if (markAsReadOnly)
        {
            docHand.markAllFilesAsRead(_formRun, true);
        }
        else
        {
            if (docHand)
            {
                docHand.openMarkedFiles(_formRun, isReqDocs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>JmgDialogFormClass</c> class.
    /// </summary>
    /// <param name="_headline">
    ///    The headline to display on the dialog.
    /// </param>
    /// <param name="_caption">
    ///    The caption to display on the dialog.
    /// </param>
    /// <param name="_buttonText">
    ///    The button text to use on the dialog.
    /// </param>
    /// <param name="_timeOut">
    ///    true if the dialog must be automatically closed after a timeout; otherwise, false.
    /// </param>
    /// <param name="_timeOutInMs">
    ///    the time out in ms.
    /// </param>
    /// <param name="_registrationForm">
    ///    Instance of the <c>JmgRegistrationForm</c>.
    /// </param>
    void new(str _headline, str _caption, str _buttonText = "@SYS5473", boolean _timeOut = false, int _timeOutInMs = 6000, FormRun _registrationForm = null)
    {
        caption = _caption;
        headLine = _headline;
        buttonStr = _buttonText;
        doTimeOut = _timeOut;
        timeOutInMs = _timeOutInMs;
        registrationForm = _registrationForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAbsenceDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows an absence dialog to the user.
    /// </summary>
    /// <param name="_jobBundle">
    ///    A reference to the <c>JmgJobBundle</c> object, which is used to make the absence registration.
    /// </param>
    /// <param name="_termJob">
    ///    A reference to the <c>JmgTermJob</c> object which is used to make the absence registration.
    /// </param>
    /// <returns>
    ///    true if the absence dialog closed down correctly; otherwise, false.
    /// </returns>
    boolean openAbsenceDialog(JmgJobBundle _jobBundle, JmgTermJob _termJob)
    {
        const str selectName = 'selectText';
        const str clickedMethodName = 'clicked';
        const str jmgAbsenceButtonName = 'jmgAbsenceButton';

        JmgJobTable              jobTable;
        HRMAbsenceCode           absenceCode;
        FormGroupControl         formGroupControl;
        int                      jobCount;
        JmgJobId                 currentJobId;
        FormStaticTextControl    formStaticTextControl;
        FormCommandButtonControl formButtonControl;
        HRMAbsenceCodeGroup      absenceCodeGroup;
        int                      numberofbuttons = 15;

        using(var activityContext = this.getOrCreateLogger().registration().absenceDialog())
        {
            FormRun  formRun    = this.openDialog();
            Object   formObject = formRun;
            jmgJobBundle        = _jobBundle;
            termJob             = _termJob;
            formGroupControl    = formObject.getContentGroup();

            formObject.parmExitButtonVisible(false);

            for (jobCount = 1; jobCount <= formGroupControl.controlCount();jobCount++)
            {
                formGroupControl.controlNum(jobCount).visible(false);
            }
            jobIdCon = connull();
            while select jobTable
            order by Description
            where jobTable.Type      == JmgJobTableType::HRMAbsenceCode ||
                  jobTable.Type      == JmgJobTableType::HRMAbsenceCodeGroup
            {
                jobIdCon += jobTable.JobId;
            }
            formStaticTextControl = formGroupControl.addControl(FormControlType::StaticText, selectName);
            formStaticTextControl.text("@SYS309603");
            for (jobCount = 1; jobCount <= conlen(jobIdCon);jobCount++)
            {
                formButtonControl = formGroupControl.addControl(FormControlType::CommandButton,jmgAbsenceButtonName + int2str(jobCount));
                currentJobId = conpeek(jobIdCon,jobCount);
                jobTable     = JmgJobTable::find(currentJobId);
                absenceCode  = HRMAbsenceCode::findByJobId(currentJobId);
                formButtonControl.imageLocation(FormButtonImageLocation::EmbeddedResource);
                if (absenceCode)
                {
                    formButtonControl.buttonDisplay(absenceCode.JmgIconId > 0 ? ButtonDisplay::TextWithImageAbove : ButtonDisplay::TextOnly);
                    formButtonControl.normalImage(int2str(absenceCode.JmgIconId));
                }
                else
                {
                    absenceCodeGroup = HRMAbsenceCodeGroup_Extension::findJobId(currentJobId);
                    if (absenceCodeGroup)
                    {
                        formButtonControl.buttonDisplay(absenceCodeGroup.JmgIconId > 0 ? ButtonDisplay::TextWithImageAbove : ButtonDisplay::TextOnly);
                        formButtonControl.normalImage(int2str(absenceCodeGroup.JmgIconId));
                    }
                }
                formButtonControl.text(jobTable.Description);
                formButtonControl.widthMode(FormWidth::ColumnWidth);
                formButtonControl.userDataItem(jobCount);
                formButtonControl.registerOverrideMethod(clickedMethodName, clickedMethodName, this);
                //In case where number of buttons is 15 or more, icons will not be displayed and buttons are smaller.
                if (conlen(jobIdCon) >= numberofbuttons)
                {
                    formButtonControl.buttonDisplay(ButtonDisplay::TextOnly);
                }
            }
            makeAbsenceRegistration = true;
            formRun.run();
            formRun.wait();
        }

        return formIsClosedDown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAttachmentDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a document attachment dialog to the user.
    /// </summary>
    /// <param name="_docHand">
    ///    A reference to the <c>JmgMESDocuHandling</c> object, which contains the documents to display.
    /// </param>
    /// <param name="_requestedDocs">
    ///    true if the documents are requested by the user; otherwise, false.
    /// </param>
    public void openAttachmentDialog(JmgMESDocuHandling _docHand, boolean _requestedDocs = false)
    {
        FormGroupControl fgc;
        FormRun formRun = this.openDialog(true);
        Object  formObject = formRun;

        using(var activityContext = this.getOrCreateLogger().registration().attachmentDialog())
        {
            fgc = formObject.getContentGroup();

            _docHand.createDialogBody(fgc,_requestedDocs);

            isReqDocs = _requestedDocs;

            controlClass = _docHand;

            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBreakDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a choose break dialog to the user.
    /// </summary>
    void openBreakDialog()
    {
        int cnt;
        FormGroupControl fgc;
        FormRun formRun = this.openDialog();
        Object  formObject = formRun;
        FormStaticTextControl fst;

        using(var activityContext = this.getOrCreateLogger().registration().timeDialog())
        {
            fgc = formObject.getContentGroup();

            for (cnt = 1; cnt <= fgc.controlCount();cnt++)
            {
                fgc.controlNum(cnt).visible(false);
            }

            fst = fgc.addControl(FormControlType::StaticText,'selectText');
            fst.leftValue(cnt);
            fst.text("@SYS309986"+ '       '+ time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),-1,-1));

            doNothingOnClose = true;
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the dialog to use for absence, break, and document handling
    /// </summary>
    /// <param name="_allowCancel">
    ///    true if the dialog should allow cancelling; otherwise, false.
    /// </param>
    /// <returns>
    ///    A reference to the initialized dialog.
    /// </returns>
    private Object openDialog(boolean _allowCancel = false)
    {
        Object formRun;
        Args    a;

        a = new Args(formStr(JmgDialogForm));
        a.caller(this);

        formRun = classfactory.formRunClass(a);
        formRun.init();
        formRun.setCaption(caption);
        formRun.setHeadline(headLine);
        formRun.setButtonText(buttonStr);
        formRun.setCancelVisible(_allowCancel);

        doNothingOnClose = false;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openStartJobsDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a start job dialog to the user.
    /// </summary>
    /// <param name="_jobIds">
    /// The list of job IDs to show on the dialog.
    /// </param>
    /// <param name="_docHand">
    /// A reference to the <c>JmgMESDocuHandling</c> object, which contains the documents to display.
    /// </param>
    void openStartJobsDialog(container _jobIds, JmgMESDocuHandling _docHand)
    {
        FormGroupControl fgc;
        FormStaticTextControl   fst;
        FormRun formRun;
        Object  formObject;
        container jobIds = JmgDialogFormClass::filterJobTypes(_jobIds,JmgJobTableType::SFCBreak);

        if (!conlen(jobIds))
        {
            return;
        }

        using(var activityContext = this.getOrCreateLogger().registration().startDialog())
        {
            formRun = this.openDialog();
            formObject = formRun;

            fgc = formObject.getContentGroup();
            this.createJobsStartedBody(fgc,jobIds);
            _docHand.findRequestedReading();

            if (_docHand.isThereRequestedReading())
            {
                fst = fgc.addControl(FormControlType::StaticText,'Confirm');
                fst.text("@SYS302289");
                _docHand.createDialogBody(fgc,true);
                fst = fgc.addControl(FormControlType::StaticText,'awareness');
                fst.text("@SYS302288");
            }

            markAsReadOnly = true;
            controlClass = _docHand;

            doNothingOnClose = true;
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasFormClosedOK</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the main action on the dialog was invoked.
    /// </summary>
    /// <returns>True if the main action was invoked; otherwise, false.</returns>
    public boolean wasFormClosedOK()
    {
        return formIsClosedDown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterJobTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters out the job IDs of the specified types
    /// </summary>
    /// <param name="_jobIds">
    /// The list of job IDs to filter.
    /// </param>
    /// <param name="_jobType">
    /// The job type to filter out
    /// </param>
    /// <returns>
    /// A container with a list of job IDs, which are not of the specified type.
    /// </returns>
    private static container filterJobTypes(container _jobIds, JmgJobTableType _jobType)
    {
        container ret = connull();
        int i;
        for (i = 1; i <= conlen(_jobIds); i++)
        {
            if (JmgJobTable::find(conpeek(_jobIds,i)).Type != _jobType)
            {
                ret += conpeek(_jobIds,i);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateLogger</Name>
				<Source><![CDATA[
    private JmgInstrumentationLogger getOrCreateLogger()
    {
        if(!jmgInstrumentationLogger)
        {
            jmgInstrumentationLogger = JmgInstrumentationLogger::createLogger(classStr(JmgDialogFormClass));
        }
        return jmgInstrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>