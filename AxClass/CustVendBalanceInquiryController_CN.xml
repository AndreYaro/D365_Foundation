<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendBalanceInquiryController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller class for <c>CustVendBalanaceInquiry_CN</c> report.
/// </summary>
class CustVendBalanceInquiryController_CN extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract contract;
        SrsReportDataContract       reportDataContract;
        VendBalanceInquiry_CN       vendBalanceInquiry_CN;
        CustBalanceInquiry_CN       custBalanceInquiry_CN;
        SrsReportRunPermission      permission;
        Recid                       recid;
        CustVendBalanceListTmp_CN   tmptable;
        SrsReportRdlDataContract    rdlContract;
        boolean                     displayForeignCurrency;
        #define.ReportLabel('ReportLabel')

        if (this.parmArgs().caller() is VendBalanceInquiry_CN)
        {
            vendBalanceInquiry_CN  = this.parmArgs().caller();
            tmpTable               = vendBalanceInquiry_CN.getBalanceList();
            displayForeignCurrency = vendBalanceInquiry_CN.isDisplayCur();
        }
        else if (this.parmArgs().caller() is CustBalanceInquiry_CN)
        {
            custBalanceInquiry_CN  = this.parmArgs().caller();
            tmpTable               = custBalanceInquiry_CN.getBalanceList();
            displayForeignCurrency = custBalanceInquiry_CN.isDisplayCur();
        }

        reportDataContract = this.parmReportContract();

        contract    = reportDataContract.parmRdpContract() as SrsTmpTblMarshallerContract;
        rdlContract = reportDataContract.parmRdlContract() as SrsReportRdlDataContract;

        permission = new SrsReportRunPermission();
        permission.assert();

        recid = SRSTmpTblMarshaller::SendTmpTblToDataProvider(tmpTable);

        CodeAccessPermission::revertAssert();

        contract.parmTmpTableDataRecId(recid);

        if (rdlContract)
        {
            if (rdlContract.getParameter(#ReportLabel))
            {
                rdlContract.setValue(#ReportLabel, displayForeignCurrency);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00016, funcName());

        SrsReportRunController controller = new CustVendBalanceInquiryController_CN();

        controller.parmArgs(_args);
        controller.parmReportName((_args.caller() is VendBalanceInquiry_CN) ?
                                    (controller.parmReportName(ssrsReportStr(CustVendBalanceInquiry_CN, Vend))) :
                                    (controller.parmReportName(ssrsReportStr(CustVendBalanceInquiry_CN, Cust))));
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>