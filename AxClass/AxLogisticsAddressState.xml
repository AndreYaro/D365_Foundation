<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>AxLogisticsAddressState</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>AxLogisticsAddressState</c> class is used in the AIF services.
/// </summary>
class AxLogisticsAddressState extends AxApplicationBase
{
    LogisticsAddressState logisticsAddressState;
    str             localStateId;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>axOrig</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets the original instance of the <c>AxBC</c> class for the <c>LogisticsAddressState</c> table.
    /// </summary>
    /// <returns>
    /// The instance of the <c>AxBC</c> class.
    /// </returns>
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>currentRecord</Name>
        <Source><![CDATA[
        public Common currentRecord(Common _logisticsAddressState = logisticsAddressState)
    {
        if (!prmisDefault(_logisticsAddressState))
        {
            super(_logisticsAddressState);
            logisticsAddressState = _logisticsAddressState;
        }
        else
        {
            super();
        }

        return logisticsAddressState;
    }

]]></Source>
      </Method>
      <Method>
        <Name>emptyRecord</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets an empty <c>AxLogisticsAddressState</c> record.
    /// </summary>
    /// <returns>
    /// An empty <c>AxLogisticsAddressState</c> record.
    /// </returns>
    protected Common emptyRecord()
    {
        LogisticsAddressState localLogisticsAddressState;
        return localLogisticsAddressState;
    }
]]></Source>
      </Method>
      <Method>
        <Name>logisticsAddressState</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets the current record for the instance of the <c>AxBC</c> class.
    /// </summary>
    /// <param name="_logisticsAddressState">
    /// The <c>LogisticsAddressState</c> record that is passed as a parameter.
    /// </param>
    /// <returns>
    /// The instance of the <c>AxBC</c> class for the <c>LogisticsAddressState</c> record.
    /// </returns>
    public LogisticsAddressState logisticsAddressState(LogisticsAddressState _logisticsAddressState = logisticsAddressState)
    {
        if (!prmisDefault(_logisticsAddressState))
        {
            this.setCurrentRecordFromExternal(_logisticsAddressState);
        }

        return this.currentRecord();
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCountryRegionId</Name>
        <Source><![CDATA[
        public str parmCountryRegionId(str _countryRegionId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_countryRegionId))
        {
            dictField = new DictField(tableNum(LogisticsAddressState),fieldNum(LogisticsAddressState,CountryRegionId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_countryRegionId,dictField,this.mapPolicy().xMLMapCountryRegion());
                _countryRegionId = this.axLogisticsAddressCountryRegionId(_countryRegionId);
            }
            else
            {
                this.validateInboundString(_countryRegionId,dictField);
            }
            this.setField(fieldNum(LogisticsAddressState, CountryRegionId), _countryRegionId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountryRegionId(logisticsAddressState.CountryRegionId);
        }
        else
        {
            return logisticsAddressState.CountryRegionId;
        }
    }
]]></Source>
      </Method>
      <Method>
        <Name>parmGNISLocation</Name>
        <Source><![CDATA[
        public PayrollGNIS parmGNISLocation(PayrollGNIS _gnsiLocation = '')
    {
        if (!prmisDefault(_gnsiLocation))
        {
            this.setField(fieldNum(LogisticsAddressState, GNISLocation), _gnsiLocation);
        }

        return logisticsAddressState.GNISLocation;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmIbgeCode_BR</Name>
        <Source><![CDATA[
        public StateIBGECode_BR parmIbgeCode_BR(StateIBGECode_BR _ibgeCode = '')
    {
        if (!prmisDefault(_ibgeCode))
        {
            this.setField(fieldNum(LogisticsAddressState, IBGECode_BR), _ibgeCode);
        }

        return logisticsAddressState.IBGECode_BR;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmIntrastatCode</Name>
        <Source><![CDATA[
        public IntrastatExternalCode parmIntrastatCode(IntrastatExternalCode _intrastatCode = '')
    {
        if (!prmisDefault(_intrastatCode))
        {
            this.setField(fieldNum(LogisticsAddressState, IntrastatCode), _intrastatCode);
        }

        return logisticsAddressState.IntrastatCode;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmName</Name>
        <Source><![CDATA[
        public LogisticsAddressStatename parmName(LogisticsAddressStatename _name = '')
    {
        if (!prmisDefault(_name))
        {
            this.setField(fieldNum(LogisticsAddressState, Name), _name);
        }

        return logisticsAddressState.Name;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProperties_RU</Name>
        <Source><![CDATA[
        public LogisticsAddressPropertiesId_RU parmProperties_RU(LogisticsAddressPropertiesId_RU _propertiesId = 0)
    {
        if (!prmisDefault(_propertiesId))
        {
            this.setField(fieldNum(LogisticsAddressState, Properties_RU), _propertiesId);
        }

        return logisticsAddressState.Properties_RU;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmStateCode_IT</Name>
        <Source><![CDATA[
        public AddressStateCode_IT parmStateCode_IT(AddressStateCode_IT _stateCode_IT = '')
    {
        if (!prmisDefault(_stateCode_IT))
        {
            this.setField(fieldNum(LogisticsAddressState, StateCode_IT), _stateCode_IT);
        }

        return logisticsAddressState.StateCode_IT;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmStateId</Name>
        <Source><![CDATA[
        public str parmStateId(str _stateId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_stateId))
        {
            dictField = new DictField(tableNum(LogisticsAddressState),fieldNum(LogisticsAddressState,StateId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_stateId,dictField,this.mapPolicy().xMLMapState());
                localStateId = _stateId;
            }
            else
            {
                this.validateInboundString(_stateId,dictField);
            }
            this.setField(fieldNum(LogisticsAddressState, StateId), _stateId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressStateId(logisticsAddressState.StateId, logisticsAddressState.CountryRegionId);
        }
        else
        {
            return logisticsAddressState.StateId;
        }
    }
]]></Source>
      </Method>
      <Method>
        <Name>parmTimeZone</Name>
        <Source><![CDATA[
        public Timezone parmTimeZone(Timezone _timezone = Timezone::GMTMINUS1200INTERNATIONALDATELINEWEST)
    {
        if (!prmisDefault(_timezone))
        {
            this.setField(fieldNum(LogisticsAddressState, TimeZone), _timezone);
        }

        return logisticsAddressState.TimeZone;
    }

]]></Source>
      </Method>
      <Method>
        <Name>resetInternalValues</Name>
        <Source><![CDATA[
        public void resetInternalValues()
    {
        super();

        localStateId = '';
    }

]]></Source>
      </Method>
      <Method>
        <Name>setTableFields</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Ensures that all default methods are called before inserting or updating a record.
    /// </summary>
    /// <remarks>
    ///    In order to make sure that all defaulting methods are called before inserting or updating a record,
    ///    the <c>setTableFields</c> method on the <c>AxInternalBase</c> class must be overridden in the AxBC
    ///    class.The method should include a call to all defaulting methods (that is, setFieldName
    ///    methods).Code the defaulting business logic in the different setFieldName methods. Therefore, you
    ///    do not have to put the setFieldName methods in a specific order in this method.
    /// </remarks>
    protected void setTableFields()
    {
        this.currentRecord().defaultRow();
    }

]]></Source>
      </Method>
      <Method>
        <Name>valueMapDependingFields</Name>
        <Source><![CDATA[
    /// <summary>
    /// Performs incoming value mapping of fields where the value mapping for a field depends on another
    /// field, such as the <c>item</c>, <c>state</c>, and <c>county</c> fields.
    /// </summary>
    /// <remarks>
    /// This method is used in the <c>save</c> method. Therefore the incoming value mapping is performed
    /// before the defaulting of fields.
    /// </remarks>
    protected void valueMapDependingFields()
    {
        super();

        if (this.valueMappingInbound())
        {
            if (localStateId && logisticsAddressState.CountryRegionId)
            {
                this.parmStateId(this.axLogisticsAddressStateId(localStateId,logisticsAddressState.CountryRegionId));

    //            if (local)
    //            {
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
        static AxLogisticsAddressState construct()
    {
        return new AxLogisticsAddressState();
    }

]]></Source>
      </Method>
      <Method>
        <Name>newLogisticsAddressState</Name>
        <Source><![CDATA[
    /// <summary>
    /// Create a new <c>AxLogisticsAddressState</c> object
    /// </summary>
    /// <param name="_logisticsAddressState">
    /// The <c>LogisticsAddressState</c> record
    /// </param>
    /// <returns>
    /// A new instance of the <c>AxLogisticsAddressState</c> class.
    /// </returns>
    public static AxLogisticsAddressState newLogisticsAddressState(LogisticsAddressState _logisticsAddressState)
    {
        AxLogisticsAddressState axLogisticsAddressState = AxLogisticsAddressState::construct();
        axLogisticsAddressState.logisticsAddressState(_logisticsAddressState);

        return axLogisticsAddressState;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>