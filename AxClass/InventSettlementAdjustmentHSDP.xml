<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSettlementAdjustmentHSDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSettlementAdjustmentHSDP</c> class is the RDP class for the
/// <c>InventSettlementAdjustmentHS</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventSettlementAdjustment)),
    SRSReportParameterAttribute(classStr(InventSettlementAdjustmentHSContract))
]
public class InventSettlementAdjustmentHSDP extends SRSReportDataProviderBase
{
    InventSettlementAdjustmentHSTmp inventSettlementAdjustmentHSTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventSettlementAdjustmentHSTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventSettlementAdjustementHSTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>InventSettlementAdjustementHSTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(InventSettlementAdjustmentHSTmp))]
    public InventSettlementAdjustmentHSTmp getInventSettlementAdjustmentHSTmp()
    {
        return inventSettlementAdjustmentHSTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSettlementAdjustmentHSTmp</Name>
				<Source><![CDATA[
    private void insertInventSettlementAdjustmentHSTmp(InventTrans inventTrans, InventSettlement inventSettlement, InventTransOrigin inventTransOrigin)
    {
        inventSettlementAdjustmentHSTmp.Cancelled                      = inventSettlement.Cancelled;
        inventSettlementAdjustmentHSTmp.ItemId                         = inventSettlement.ItemId;
        inventSettlementAdjustmentHSTmp.TransDate                      = inventSettlement.TransDate;
        inventSettlementAdjustmentHSTmp.Voucher                        = inventSettlement.Voucher;
        inventSettlementAdjustmentHSTmp.SettleModel                    = inventSettlement.SettleModel;
        inventSettlementAdjustmentHSTmp.CostAmountAdjustmentSettlement = inventSettlement.CostAmountAdjustment;
        inventSettlementAdjustmentHSTmp.DateFinancial                  = inventTrans.DateFinancial;
        inventSettlementAdjustmentHSTmp.Qty                            = inventTrans.Qty;
        inventSettlementAdjustmentHSTmp.CostAmountAdjustment           = inventTrans.CostAmountAdjustment;
        inventSettlementAdjustmentHSTmp.CostAmountPosted               = inventTrans.CostAmountPosted;
        inventSettlementAdjustmentHSTmp.ReferenceCategory              = inventTransOrigin.ReferenceCategory;
        inventSettlementAdjustmentHSTmp.ReferenceId                    = inventTransOrigin.ReferenceId;
        inventSettlementAdjustmentHSTmp.StornoTxt                      = inventTrans.stornoTxt_RU();
        inventSettlementAdjustmentHSTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes business logic used in the <c>InventSettlementAdjustmentHS</c> report.
    /// </summary>
    public void processReport()
    {
        InventTrans         inventTrans;
        TransLink_RU        link;
        Set                 excludeSet = new Set(extendedTypeId2Type(extendedtypenum(recId)));

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00121, funcName());

        InventSettlementAdjustmentHSContract inventSettlementAdjustmentHSContract = this.parmDataContract() as InventSettlementAdjustmentHSContract;

        Boolean hideStorno = inventSettlementAdjustmentHSContract.parmHideStorno();

        if (hideStorno)
        {
            select firstonly RecId from link
                where link.RefTableId == tablenum(InventTrans);
        }

        QueryRun tmpQueryRun = new QueryRun(this.parmQuery());

        if (link)
        {
            while (tmpQueryRun.next())
            {
                inventTrans = tmpQueryRun.get(tablenum(InventTrans));
                TransLink_RU::findInventTransStornoRef(inventTrans, excludeSet);
            }
        }

        tmpQueryRun.reset();

        while (tmpQueryRun.next())
        {
            inventTrans = tmpQueryRun.get(tablenum(InventTrans));
            InventSettlement inventsettlement = tmpQueryRun.get(tablenum(InventSettlement));
            InventTransOrigin inventTransOrigin = tmpQueryRun.get(tablenum(InventTransOrigin));

            if (excludeSet.in(inventTrans.RecId))
            {
                continue;
            }

            this.insertInventSettlementAdjustmentHSTmp(inventTrans, inventSettlement, inventTransOrigin);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>