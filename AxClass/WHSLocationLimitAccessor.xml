<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationLimitAccessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WHSLocationLimitCache</c> class provides a cached access to the data in the <c>WHSLocationLimit</c> table.
/// </summary>
public class WHSLocationLimitAccessor
{
    SysGlobalObjectCache sgoc;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the scope that this class uses in the global object cache.
    /// </summary>
    /// <returns>
    /// A GlobalObjectCacheScope value.
    /// </returns>
    protected GlobalObjectCacheScope cacheScope()
    {
        return classStr(WHSLocationLimitAccessor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the entire cache.
    /// </summary>
    public void clearCache()
    {
        sgoc.clear(this.cacheScope());
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the key for storing the results in the global object cache from parameters passed to the <c>retrieveQty</c> method.
    /// </summary>
    /// <param name="_inventLocationId">
    ///    The inventory location ID.
    /// </param>
    /// <param name="_wmsLocationId">
    ///    The warehouse location ID.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_unitId">
    ///    The unit ID.
    /// </param>
    /// <param name="_considerNotFoundAsUnlimited">
    ///    A Boolean value that indicates if the fact that no limit record was found must be considered as 'unlimited'.
    /// </param>
    /// <param name="_inventDimId">
    ///    Variant InventDimId.
    /// </param>
    /// <param name="_containerTypeCode">
    ///     The container type.
    /// </param>
    /// <returns>
    ///    A container to be used as the key in the global object cache.
    /// </returns>
    protected container makeCacheKey(
        InventLocationId        _inventLocationId,
        WMSLocationId           _wmsLocationId,
        ItemId                  _itemId,
        UnitOfMeasureSymbol     _unitId,
        boolean                 _considerNotFoundAsUnlimited,
        InventDimId             _inventDimId = '',
        WHSContainerTypeCode    _containerTypeCode = '')
    {
        WHSLocationLimit    whsLocationLimit;

        str caller = strFmt('%1.%2', classStr(WHSLocationLimitAccessor), methodStr(WHSLocationLimitAccessor, retrieveQty));

        str arguments = strFmt('%1-%2-%3-%4-%5-%6-%7',
            _inventLocationId,
            _wmsLocationId,
            _itemId,
            _unitId,
            _considerNotFoundAsUnlimited,
            _inventDimId,
            _containerTypeCode);

        return [whsLocationLimit.Partition, whsLocationLimit.DataAreaId, caller, arguments];
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeExistLimitCacheKey</Name>
				<Source><![CDATA[
    private container makeExistLimitCacheKey(container _cacheKey)
    {
        return _cacheKey + 'existLimit';

    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        sgoc = classfactory.globalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the location stock limit.
    /// </summary>
    /// <param name="_inventLocationId">
    ///    The inventory location ID.
    /// </param>
    /// <param name="_wmsLocationId">
    ///    The warehouse location ID.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_unitId">
    ///    The unit ID.
    /// </param>
    /// <param name="_considerNotFoundAsUnlimited">
    ///    A Boolean value that indicates if the fact that no limit record was found must be considered as 'unlimited'.
    /// </param>
    /// <param name="_inventDimId">
    ///    Variant InventDimId.
    /// </param>
    /// <param name="_containerTypeCode">
    ///     The container type.
    /// </param>
    /// <returns>
    ///    A container that holds the limit quantity and unit ID.
    /// </returns>
    /// <remarks>
    ///     Will cache the results of the actual calculation, and return the cached results next time the method is called with the same parameters.
    /// </remarks>
    public container retrieveQty(
        InventLocationId        _inventLocationId,
        WMSLocationId           _wmsLocationId,
        ItemId                  _itemId,
        UnitOfMeasureSymbol     _unitId,
        boolean                 _considerNotFoundAsUnlimited,
        InventDimId             _inventDimId = '',
        WHSContainerTypeCode    _containerTypeCode = '')
    {
        container cacheKey = this.makeCacheKey(
            _inventLocationId,
            _wmsLocationId,
            _itemId,
            _unitId,
            _considerNotFoundAsUnlimited,
            _inventDimId,
            _containerTypeCode);
        container existLimitCacheKey;

        var context = WHSLocationDirectiveIsLocationLimitSetContext::current();
        
        if (context)
        {
            existLimitCacheKey = this.makeExistLimitCacheKey(cacheKey);

            container existLimitCon = sgoc.find(this.cacheScope(), existLimitCacheKey);

            if (existLimitCon != conNull())
            {
                context.parmExistLocationLimit(conPeek(existLimitCon, 1));
            }
        }

        container result = sgoc.find(this.cacheScope(), cacheKey);

        if (result == conNull())
        {
            result = this.retrieveQtyNoCache(
                _inventLocationId,
                _wmsLocationId,
                _itemId,
                _unitId,
                _considerNotFoundAsUnlimited,
                _inventDimId,
                _containerTypeCode);

            sgoc.insert(this.cacheScope(), cacheKey, result);

            if (context)
            {                
                sgoc.insert(this.cacheScope(), existLimitCacheKey, [context.parmExistLocationLimit()]);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQtyNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the location stock limit without trying to look it up in the cache.
    /// </summary>
    /// <param name="_inventLocationId">
    ///    The inventory location ID.
    /// </param>
    /// <param name="_wmsLocationId">
    ///    The warehouse location ID.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_unitId">
    ///    The unit ID.
    /// </param>
    /// <param name="_considerNotFoundAsUnlimited">
    ///    A Boolean value that indicates if the fact that no limit record was found must be considered as 'unlimited'.
    /// </param>
    /// <param name="_inventDimId">
    ///    Variant InventDimId.
    /// </param>
    /// <param name="_containerTypeCode">
    ///     The container type.
    /// </param>
    /// <returns>
    ///    A container that holds the limit quantity and unit ID.
    /// </returns>
    protected container retrieveQtyNoCache(
        InventLocationId        _inventLocationId,
        WMSLocationId           _wmsLocationId,
        ItemId                  _itemId,
        UnitOfMeasureSymbol     _unitId,
        boolean                 _considerNotFoundAsUnlimited,
        InventDimId             _inventDimId = '',
        WHSContainerTypeCode    _containerTypeCode = '')
    {
        Qty                     qty    = 0;
        UnitOfMeasureSymbol     unitId = '';
        boolean                             limitExists = false;
        boolean                             isContainerLimit;

        EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();
        unitConverter.parmSkipProductMasterCheck(true);

        UnitOfMeasureRecId unitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(_unitId);
        WHSLocProfileId locProfileId = WMSLocation::find(_wmsLocationId, _inventLocationId).LocProfileId;
        WHSPackSizeCateogryId packSizeCategoryId = WHSInventTable::find(_itemId).PackSizeCateogryId;

        WHSLocationLimitLookupMap          locationLimitMap;

        //if we are not searching for product variant limits use a less complex view for performance reasons
        if (_inventDimId
        || _containerTypeCode)
        {
            WHSLocationLimitLookup          locationLimitLookup;
            locationLimitMap = locationLimitLookup;
        }
        else
        {
            WHSLocationLimitItemLookup          locationLimitItemLookup;
            locationLimitMap = locationLimitItemLookup;
        }

        while select AllowUnlimitedQty, UnitId, Qty, ContainerTypeCode, WarehouseGroupId, WarehouseGroupAll from locationLimitMap
            order by
                locationLimitMap.IsContainerTypeSpecific desc,
                locationLimitMap.isVariantSpecific desc,
                locationLimitMap.isItemSpecific desc,
                locationLimitMap.IsPackSizeCategorySpecific desc,
                locationLimitMap.IsLocationSpecific desc,
                locationLimitMap.IsLocationProfileSpecific desc,
                locationLimitMap.IsWarehouseSpecific desc,
                locationLimitMap.IsWarehouseGroupSpecific desc
            where (locationLimitMap.InventLocationId == _inventLocationId
                    || locationLimitMap.WarehouseGroupAll != WhsWarehouseGroupAll::Warehouse)
                && (locationLimitMap.InventDimIDProductDim == '' || locationLimitMap.InventDimIDProductDim == _inventDimId)
                && (locationLimitMap.ItemId == '' || locationLimitMap.ItemId == _itemId)
                && (locationLimitMap.WMSLocationId == '' || locationLimitMap.WMSLocationId == _wmsLocationId)
                && (locationLimitMap.LocProfileId == '' || locationLimitMap.LocProfileId == locProfileId)
                && (locationLimitMap.PackSizeCategoryId == '' || locationLimitMap.PackSizeCategoryId == packSizeCategoryId)
        {
            if (locationLimitMap.WarehouseGroupAll == WhsWarehouseGroupAll::Group
                && !WhsWarehouseGroup::containsWarehouse(locationLimitMap.WarehouseGroupId, _inventLocationId))
            {
                continue;
            }

            limitExists = true;

            if (locationLimitMap.AllowUnlimitedQty)
            {
                qty = realMax();
                unitId = locationLimitMap.UnitId;
                break;
            }
            else if (locationLimitMap.ContainerTypeCode != '')
            {
                if (_containerTypeCode)
                {
                    // Get the work container type's unit of measure & set the unit Id to the container unit.
                    unitId = WHSContainerType::find(_containerTypeCode).UnitId;
                    qty = locationLimitMap.Qty;
                    unitOfMeasureRecId containerUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(unitId);
                    unitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(locationLimitMap.UnitId);

                    if (unitConverter.canBeConverted(unitOfMeasureRecId,
                                                     containerUnitOfMeasureRecId,
                                                     _itemId,
                                                     _inventDimId))
                    {
                        qty = unitConverter.convert(qty, unitOfMeasureRecId, containerUnitOfMeasureRecId, NoYes::No, _itemId, _inventDimId, NoYes::No);
                        isContainerLimit = true;
                        break;
                    }
                }
                else
                {
                    // If a container type code is not passed in then the container type stocking limit should not be used, and the query for a valid stocking limit should continue.
                    continue;
                }
            }
            else if (!_itemId && !_containerTypeCode)
            {
                qty = locationLimitMap.Qty;
                unitId = locationLimitMap.UnitId;
                break;
            }
            else
            {
                qty = locationLimitMap.Qty;
                unitId = locationLimitMap.UnitId;

                if (unitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(locationLimitMap.UnitId),
                                                 unitOfMeasureRecId,
                                                 _itemId,
                                                 _inventDimId))
                {
                    break;
                }
            }
        }

        if (!limitExists)
        {
            qty    = _considerNotFoundAsUnlimited ? realMax() : 0;
            unitId = _unitId;
        }

        var context = WHSLocationDirectiveIsLocationLimitSetContext::current();
        
        if (context)
        {
            context.parmExistLocationLimit(limitExists);
        }

        return [qty, unitId, isContainerLimit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLocationLimitAccessor construct()
    {
        return new WHSLocationLimitAccessor();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>