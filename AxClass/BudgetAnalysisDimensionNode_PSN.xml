<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisDimensionNode_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAnalysisDimensionNode_PSN</c> class represents the data for a node in the tree control on the <c>BusgetAnalysisInquiry_PSN</c> form.
/// </summary>
public class BudgetAnalysisDimensionNode_PSN implements SysPackable
{
    List            parentageList;
    Map             childMap;

    RefRecId        dimAttributeValueRecId;
    DimensionValue  dimAttrtibuteValue;
    Name            dimAttrtibuteName;
    Level           currentLevel;
    boolean         isLeafNode;
    str             dimAttributeValueStr;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        dimAttributeValueRecId,
        dimAttrtibuteValue,
        dimAttrtibuteName,
        currentLevel,
        isLeafNode,
        dimAttributeValueStr
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string that is used as the text of the tree control node represented by the current instance of the class.
    /// </summary>
    /// <returns>
    /// The string that is used as the text of the tree control node.
    /// </returns>
    public str getNodeText()
    {
        return strFmt('%1 - %2', dimAttrtibuteValue, dimAttrtibuteName);
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        parentageList   = new List(Types::Int64);
        childMap        = new Map(Types::Int64, Types::Container);
    }
]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, [#CurrentList, parentageList.pack(), childMap.pack()]];
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmChildMap</Name>
				<Source><![CDATA[
    public Map parmChildMap(Map _childMap = childMap)
    {
        if (!prmisDefault(_childMap))
        {
            childMap = _childMap;
        }

        return childMap;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLevel</Name>
				<Source><![CDATA[
    public Level parmCurrentLevel(Level _currentLevel = currentLevel)
    {
        if (!prmisDefault(_currentLevel))
        {
            currentLevel = _currentLevel;
        }

        return currentLevel;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmDimAttributeName</Name>
				<Source><![CDATA[
    public Name parmDimAttributeName(Name _dimAttrtibuteName = dimAttrtibuteName)
    {
        if (!prmisDefault(_dimAttrtibuteName))
        {
            dimAttrtibuteName = _dimAttrtibuteName;
        }

        return dimAttrtibuteName;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmDimAttributeValue</Name>
				<Source><![CDATA[
    public DimensionValue parmDimAttributeValue(DimensionValue _dimAttrtibuteValue = dimAttrtibuteValue)
    {
        if (!prmisDefault(_dimAttrtibuteValue))
        {
            dimAttrtibuteValue = _dimAttrtibuteValue;
        }

        return dimAttrtibuteValue;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmDimAttributeValueRecId</Name>
				<Source><![CDATA[
    public RefRecId parmDimAttributeValueRecId(RefRecId _dimAttributeValueRecId = dimAttributeValueRecId)
    {
        if (!prmisDefault(_dimAttributeValueRecId))
        {
            dimAttributeValueRecId = _dimAttributeValueRecId;
        }

        return dimAttributeValueRecId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmDimAttributeValueStr</Name>
				<Source><![CDATA[
    public str parmDimAttributeValueStr(str _dimAttributeValueStr = dimAttributeValueStr)
    {
        if (!prmisDefault(_dimAttributeValueStr))
        {
            dimAttributeValueStr = _dimAttributeValueStr;
        }

        return dimAttributeValueStr;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmIsLeafNode</Name>
				<Source><![CDATA[
    public boolean parmIsLeafNode(boolean _isLeafNode = isLeafNode)
    {
        if (!prmisDefault(_isLeafNode))
        {
            isLeafNode = _isLeafNode;
        }

        return isLeafNode;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmParentageList</Name>
				<Source><![CDATA[
    public List parmParentageList(List _parentageList = parentageList)
    {
        if (!prmisDefault(_parentageList))
        {
            parentageList = _parentageList;
        }

        return parentageList;
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedClassMembers;
        container   packedParentageList;
        container   packedChildMap;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedClassMembers] = _packedClass;

                // Extract the #CurrentList and packed map.
                [#CurrentList, packedParentageList, packedChildMap] = packedClassMembers;

                break;

            default:
                return false;
        }

        if (packedParentageList != connull())
        {
            // Unpack the packed list
            parentageList = List::create(packedParentageList);
        }

        if (packedChildMap != connull())
        {
            // Unpack the packed Map
            childMap = Map::create(packedChildMap);
        }

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetAnalysisDimensionNode_PSN</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetAnalysisDimensionNode_PSN">
    /// A <c>Container</c> object that contains a packed <c>BudgetAnalysisDimensionNode_PSN</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetAnalysisDimensionNode_PSN</c> class.
    /// </returns>
    public static BudgetAnalysisDimensionNode_PSN create(container _packedBudgetAnalysisDimensionNode_PSN)
    {
        BudgetAnalysisDimensionNode_PSN budgetAnalysisDimensionNode;

        if (_packedBudgetAnalysisDimensionNode_PSN != conNull())
        {
            budgetAnalysisDimensionNode = new BudgetAnalysisDimensionNode_PSN();
            budgetAnalysisDimensionNode.unpack(_packedBudgetAnalysisDimensionNode_PSN);
        }

        return budgetAnalysisDimensionNode;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>