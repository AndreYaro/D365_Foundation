<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReservationHierarchyCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WHSReservationHierarchyCache</c> class caches warehouse reservation hierarchy lists
///     built by the <c>WHSReservationHierarchyListBuilder</c> class and information about the hierarchy.
/// </summary>
class WHSReservationHierarchyCache
{
    #Define.CacheScope('WHSReservationHierarchyCache')

    WHSReservationHierarchyListBuilder builder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDimFieldKey</Name>
				<Source><![CDATA[
        private str buildDimFieldKey(
        str                                 _methodKey,
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        fieldId                             _inventDimFieldId)
    {
        return strFmt('%1%2-%3', _methodKey, int642str(_whsReservationHierarchyRecId), int2str(_inventDimFieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildKey</Name>
				<Source><![CDATA[
        private str buildKey(
        str                                 _methodKey,
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return strFmt('%1%2-%3', _methodKey, int642str(_whsReservationHierarchyRecId), int2str(_sortOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerFromGlobalObjectCache</Name>
				<Source><![CDATA[
        private container getContainerFromGlobalObjectCache(str _key)
    {
        return classfactory.globalObjectCache().find(#CacheScope, [_key]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing the inventory dimensions in the hierarchy above the location.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing the inventory dimensions in the hierarchy above the location.
    /// </returns>
    public List getDimListAboveLocation(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        #Define.MethodKey('getDimListAboveLocation')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyAbove(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, wmsLocationId),
                        false);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAboveBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing the inventory dimensions in the hierarchy above the batch.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing the inventory dimensions in the hierarchy above the batch.
    /// </returns>
    internal List getDimListAboveBatch(
                WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
                WHSReservationHierarchySortOrder    _sortOrder)
    {
        #Define.MethodKey('getDimListAboveBatch')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyAbove(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, inventBatchId),
                        true);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing the inventory dimensions in the hierarchy.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing the inventory dimensions in the hierarchy.
    /// </returns>
    public List getDimListAll(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        #Define.MethodKey('getDimListAllFromInventTable')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildFullHierarchy(_whsReservationHierarchyRecId, _sortOrder);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBatchAndAbove</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing the inventory dimensions hierarchy above and including the batch.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing  the inventory dimensions above and including the batch.
    /// </returns>
    public List getDimListBatchAndAbove(WHSReservationHierarchyRecId _whsReservationHierarchyRecId, WHSReservationHierarchySortOrder _sortOrder)
    {
        #Define.MethodKey('getDimListBatchAndAbove')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyAbove(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, InventBatchId),
                        true);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing  the inventory dimensions below LicensePlate.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing  the inventory dimensions below LicensePlate.
    /// </returns>
    public List getDimListBelowLicensePlate(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        #Define.MethodKey('getDimListBelowLicensePlate')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyBelow(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, LicensePlateId),
                        false);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing  the inventory dimensions below Batch.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing  the inventory dimensions below Batch.
    /// </returns>
    [Hookable(false)]
    internal List getDimListBelowBatch(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        #Define.MethodKey('getDimListBelowBatch')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyBelow(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, inventBatchId),
                        false);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a <c>List</c> containing  the inventory dimensions below WMSLocationId.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing  the inventory dimensions below location.
    /// </returns>
    public List getDimListBelowLocation(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        #Define.MethodKey('getDimListBelowLocation')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyBelow(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, wmsLocationId),
                        false);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing the inventory dimensions below status.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing the inventory dimensions below status.
    /// </returns>
    public List getDimListBelowStatus(WHSReservationHierarchyRecId _whsReservationHierarchyRecId, WHSReservationHierarchySortOrder _sortOrder)
    {
        #Define.MethodKey('getDimListBelowStatus')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyBelow(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, InventStatusId),
                        false);

            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListLocationAndDown</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing the inventory dimensions from location and down.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing  the inventory dimensions from location and down.
    /// </returns>
    public List getDimListLocationAndDown(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        #Define.MethodKey('getDimListLocationAndDownFromInventTable')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyBelow(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, wmsLocationId),
                        true);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListStatusAndAbove</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a <c>List</c> containing the inventory dimensions hierarchy above and including the status.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order that the list should be returned in.
    /// </param>
    /// <returns>
    ///     A <c>List</c> containing  the inventory dimensions above and including the status.
    /// </returns>
    public List getDimListStatusAndAbove(WHSReservationHierarchyRecId _whsReservationHierarchyRecId, WHSReservationHierarchySortOrder _sortOrder)
    {
        #Define.MethodKey('getDimListStatusAndAbove')

        str     key = this.buildKey(#MethodKey, _whsReservationHierarchyRecId, _sortOrder);
        List    result = this.getListFromCache(key);

        if (result == null)
        {
            result = builder.buildPartialHierarchyAbove(
                        _whsReservationHierarchyRecId,
                        _sortOrder,
                        fieldNum(InventDim, InventStatusId),
                        true);
            this.insertListIntoCache(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFieldLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the level of the <c>InventDim</c> field in the reservation hierarchy.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    /// The <c>WHSReservationHierarchyRecId</c> ID of the reservation hierarchy.
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The <c>InventDim</c> field ID to be found in the reservation hierarchy.
    /// </param>
    /// <returns>
    /// The level in the reservation hierarchy that the <c>InventDim</c> field is found at.
    /// </returns>
    /// <remarks>
    /// This method will return the invalid hierarchy level if the <c>InventDim</c> field is not found in the hierarchy.
    /// </remarks>
    public WHSReservationHierarchyLevel getInventDimFieldLevel(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        FieldId                             _inventDimFieldId)
    {
        #Define.MethodKey('getInventDimFieldLevel')
        #WHSReservationHierarchy

        WHSReservationHierarchyLevel        level;

        str key = this.buildDimFieldKey(#MethodKey, _whsReservationHierarchyRecId, _inventDimFieldId);

        //we are storing simple values so we only need the GlobalObjectCache
        container resultConFromCache = this.getContainerFromGlobalObjectCache(key);

        if (resultConFromCache == conNull())
        {
            // If no matching dimField is found in the hierarchy the return value is the invalid level.
            level = #INVALIDHIERARCHYLEVEL;

            ListEnumerator le = this.getDimListAll(_whsReservationHierarchyRecId, WHSReservationHierarchySortOrder::TopDown).getEnumerator();

            while (le.moveNext() && level == #INVALIDHIERARCHYLEVEL)
            {
                WHSReservationHierarchyElementData elementData = le.current();

                if (elementData.parmDimensionFieldId() == _inventDimFieldId)
                {
                    level = elementData.parmLevel();
                }
            }

            this.insertIntoGlobalObjectCache(key, [level]);
        }
        else
        {
            level = conPeek(resultConFromCache, 1);
        }

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves hierarchy list from cache.
    /// </summary>
    /// <param name="_key">
    ///     Key to look for.
    /// </param>
    /// <returns>
    ///     Hierarchy list or <c>null</c> if key is not cached.
    /// </returns>
    private List getListFromCache(str _key)
    {
        List                    result = null;

        result = classfactory.globalCache().get(#CacheScope, _key, null);
        // Not in globalCache
        if (result == null)
        {
            container packedList = classfactory.globalObjectCache().find(#CacheScope, [_key]);
            // Found in globalOjectCache but not in globalCache
            if (conLen(packedList) > 0)
            {
                result = List::create(packedList);

                // Add to globalCache
                classfactory.globalCache().set(#CacheScope, _key, result);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGlobalObjectCache</Name>
				<Source><![CDATA[
    private void insertIntoGlobalObjectCache(
        str         _key,
        container   _value)
    {
        classfactory.globalObjectCache().insert(#CacheScope, [_key], _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertListIntoCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts hierarchy list into cache.
    /// </summary>
    /// <param name="_key">
    ///     Key to use.
    /// </param>
    /// <param name="_list">
    ///     Hierarchy list to insert.
    /// </param>
    private void insertListIntoCache(str _key, List _list)
    {
        classfactory.globalCache().set(#CacheScope, _key, _list);
        this.insertIntoGlobalObjectCache(_key, _list.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldAbove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if one field is above another in a reservation hierarchy.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID.
    /// </param>
    /// <param name="_inventDimFieldIdIsAbove">
    /// The <c>InventDim</c> field ID that is expected to be above.
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The InventDim field ID that is being used as the lower field.
    /// </param>
    /// <returns>
    /// true if the _inventDimFieldIdIsAbove field is above the _inventDimFieldId field.
    /// </returns>
    /// <remarks>
    /// This method will return false any of the fields are not found in the hierarchy.
    /// </remarks>
    public boolean isFieldAbove(
        WHSReservationHierarchyRecId    _whsReservationHierarchyRecId,
        FieldId                         _inventDimFieldIdIsAbove,
        FieldId                         _inventDimFieldId)
    {
        boolean                             isFieldAbove = false;

        #WHSReservationHierarchy

        if (_inventDimFieldIdIsAbove == _inventDimFieldId)
        {
            return false;
        }

        WHSReservationHierarchyLevel levelDimFieldAbove = this.getInventDimFieldLevel(_whsReservationHierarchyRecId,_inventDimFieldIdIsAbove);
        WHSReservationHierarchyLevel levelDimFieldBelow = this.getInventDimFieldLevel(_whsReservationHierarchyRecId,_inventDimFieldId);

        //if the above field was not found or the below field is not found the above field is not considered above
        if (levelDimFieldAbove == #INVALIDHIERARCHYLEVEL
        ||  levelDimFieldBelow == #INVALIDHIERARCHYLEVEL)
        {
            isFieldAbove = false;
        }
        else if (levelDimFieldAbove < levelDimFieldBelow)
        {
            isFieldAbove =  true;
        }

        return isFieldAbove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldBelow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if one field is below another in a reservation hierarchy.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldIdIsBelow">
    /// The InventDim field ID that is being determined if it is below.
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The InventDim field ID that is being used as the above field.
    /// </param>
    /// <returns>
    /// true if the _inventDimFieldIdIsBelow field is below the _inventDimFieldId field.
    /// </returns>
    /// <remarks>
    /// This method will return false any of the fields are not found in the hierarchy.
    /// </remarks>
    private boolean isFieldBelow(
        WHSReservationHierarchyRecId    _whsReservationHierarchyRecId,
        FieldId                         _inventDimFieldIdIsBelow,
        FieldId                         _inventDimFieldId)
    {
        boolean                             isFieldBelow = false;

        #WHSReservationHierarchy

        if (_inventDimFieldIdIsBelow == _inventDimFieldId)
        {
            return false;
        }

        WHSReservationHierarchyLevel levelDimFieldBelow = this.getInventDimFieldLevel(_whsReservationHierarchyRecId,_inventDimFieldIdIsBelow);
        WHSReservationHierarchyLevel levelDimField      = this.getInventDimFieldLevel(_whsReservationHierarchyRecId,_inventDimFieldId);

        //if the below field was not found  or if the other field is not found, then below field is not considered below
        if (levelDimFieldBelow  == #INVALIDHIERARCHYLEVEL
        ||  levelDimField       == #INVALIDHIERARCHYLEVEL)
        {
            isFieldBelow = false;
        }
        else if (levelDimFieldBelow > levelDimField)
        {
            isFieldBelow =  true;
        }

        return isFieldBelow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given inventory dimension field is above wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///    The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldId">
    ///    The field ID of the inventory dimension to check.
    /// </param>
    /// <returns>
    ///    true if the field is above location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public boolean isFieldIdAboveLocation(
        WHSReservationHierarchyRecId    _whsReservationHierarchyRecId,
        FieldId                         _inventDimFieldId)
    {
        #Define.MethodKey('isFieldIdAboveLocation')

        boolean         result = false;

        str key = this.buildDimFieldKey(#MethodKey, _whsReservationHierarchyRecId, _inventDimFieldId);

        //we are storing simple values so we only need the GlobalObjectCache
        container containerFromCache = this.getContainerFromGlobalObjectCache(key);

        //not found in cache
        if (containerFromCache == conNull())
        {
            result = this.isFieldAbove(_whsReservationHierarchyRecId, _inventDimFieldId, fieldNum(InventDim, WMSLocationId));
            this.insertIntoGlobalObjectCache(key, [result]);
        }
        else
        {
            result = conPeek(containerFromCache,1);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given inventory dimension field is below wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///    The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldId">
    ///    The field ID of the inventory dimension to check.
    /// </param>
    /// <returns>
    ///    true if the field is below location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public boolean isFieldIdBelowLocation(
        WHSReservationHierarchyRecId    _whsReservationHierarchyRecId,
        FieldId                         _inventDimFieldId)
    {
        #Define.MethodKey('isFieldIdBelowLocation')

        boolean result = false;

        str key = this.buildDimFieldKey(#MethodKey, _whsReservationHierarchyRecId, _inventDimFieldId);

        //we are storing simple values so we only need the GlobalObjectCache
        container containerFromCache = this.getContainerFromGlobalObjectCache(key);

        //not found in cache
        if (containerFromCache == conNull())
        {
            result = this.isFieldBelow(_whsReservationHierarchyRecId, _inventDimFieldId, fieldNum(InventDim, WMSLocationId));
            this.insertIntoGlobalObjectCache(key, [result]);
        }
        else
        {
            result = conPeek(containerFromCache,1);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyTrackingDimensionsAboveLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean anyTrackingDimensionsAboveLocation(WHSReservationHierarchyRecId _whsReservationHierarchyRecId)
    {
        #Define.MethodKey('anyTrackingDimensionsAboveLocation')

        boolean result = false;

        str key = strFmt('%1-%2', #MethodKey, int642Str(_whsReservationHierarchyRecId));

        //we are storing simple values so we only need the GlobalObjectCache
        container containerFromCache = this.getContainerFromGlobalObjectCache(key);

        //not found in cache
        if (containerFromCache == conNull())
        {
            result = this.calculateAnyTrackingDimensionsAboveLocation(_whsReservationHierarchyRecId);
            this.insertIntoGlobalObjectCache(key, [result]);
        }
        else
        {
            result = conPeek(containerFromCache, 1);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAnyTrackingDimensionsAboveLocation</Name>
				<Source><![CDATA[
    private boolean calculateAnyTrackingDimensionsAboveLocation(WHSReservationHierarchyRecId _whsReservationHierarchyRecId)
    {
        ListEnumerator hierarchyEnumerator = WHSReservationHierarchyProvider::construct()
            .getDimListAboveLocation(_whsReservationHierarchyRecId, WHSReservationHierarchySortOrder::BottomUp)
            .getEnumerator();

        while (hierarchyEnumerator.moveNext())
        {
            WHSReservationHierarchyElementData elementData = hierarchyEnumerator.current();

            if (InventDim::isFieldIdTrackingDimension(elementData.parmDimensionFieldId()))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        builder = WHSReservationHierarchyListBuilder::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the contents of the cache.
    /// </summary>
    public static void clearCache()
    {
        if (xGlobal::hasClient())
        {
            WHSReservationHierarchyCache::clearCacheClient();
        }
        WHSReservationHierarchyCache::clearCacheServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheClient</Name>
				<Source><![CDATA[
    private static void clearCacheClient()
    {
        classfactory.globalCache().clear(#CacheScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheServer</Name>
				<Source><![CDATA[
    private static void clearCacheServer()
    {
        classfactory.globalCache().clear(#CacheScope);
        classfactory.globalObjectCache().clear(#CacheScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method to be used to create <c>WHSReservationHierarchyCache</c> instances.
	/// </summary>
	/// <returns>
	/// <c>WHSReservationHierarchyCache</c> instance.
	/// </returns>
    public static WHSReservationHierarchyCache construct()
    {
        return new WHSReservationHierarchyCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>