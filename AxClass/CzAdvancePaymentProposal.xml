<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzAdvancePaymentProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CzAdvancePaymentProposal extends RunBase
{
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalEngine ledgerJournalEngine;

    Query               query;
    QueryRun            queryRun;

    NoYes               copyVAToptions;
    NoYes               copyPostingProfile;
    NoYes               linkToPayment;
    NoYes               changeInvoiceStatus;
    NoYes               excludeLinked;

    DialogField         fieldCopyVAToptions;
    DialogField         fieldCopyPostingProfile;
    DialogField         fieldLinkToPayment;
    DialogField         fieldChangeInvoiceStatus;
    DialogField         fieldExcludeLinked;

    boolean             hideJournalNotPrepaymentInfo;

    #define.CurrentVersion(2)
    #localMacro.CurrentList
        copyVAToptions,
        copyPostingProfile,
        linkToPayment,
        changeInvoiceStatus,
        excludeLinked
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountType</Name>
				<Source><![CDATA[
    abstract protected LedgerJournalACType accountType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog ret = super();

        ret.addGroup("@SYS54716");
        fieldCopyPostingProfile  = ret.addFieldValue(enumStr(NoYes), copyPostingProfile,  "@GLS111748", "@GLS111749");
        fieldCopyVAToptions      = ret.addFieldValue(enumStr(NoYes), copyVAToptions,      "@GLS111727", "@GLS111728");

        ret.addGroup("@GLS111702");
        fieldLinkToPayment       = ret.addFieldValue(enumStr(NoYes), linkToPayment,       "@GLS111705", "@GLS221994");
        fieldChangeInvoiceStatus = ret.addFieldValue(enumStr(NoYes), changeInvoiceStatus, "@SYS24620", "@GLS221995");

        ret.addGroup("@SYS81048");
        fieldExcludeLinked       = ret.addFieldValue(enumStr(NoYes), excludeLinked,       "@GLS111755", "@GLS111756");

        fieldLinkToPayment.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(CzAdvancePaymentProposal, linkToPayment_modified), this);
        fieldChangeInvoiceStatus.allowEdit(fieldLinkToPayment.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    final public boolean getFromDialog()
    {
        boolean ret = super();

        copyPostingProfile  = fieldCopyPostingProfile.value();
        copyVAToptions      = fieldCopyVAToptions.value();
        linkToPayment       = fieldLinkToPayment.value();
        changeInvoiceStatus = fieldChangeInvoiceStatus.value();
        excludeLinked       = fieldExcludeLinked.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default payment reference, based on the advance invoice table provided.
    /// </summary>
    /// <param name="_invoiceTable">
    /// The advance invoice table to use when determining the default payment reference.
    /// </param>
    /// <returns>
    /// A payment reference.
    /// </returns>
    /// <remarks>
    /// This is the default payment reference used when generating the payment proposal in the <c>LedgerJournalTrans</c> table.
    /// </remarks>
    protected PaymReference getPaymReference(CzAdvanceInvoiceTable _invoiceTable)
    {
        return _invoiceTable.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceLine</Name>
				<Source><![CDATA[
    abstract protected void initFromInvoiceLine(
        CzAdvanceInvoiceTable    _invoiceTable,
        CzAdvanceInvoiceLine     _invoiceLine = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceTable</Name>
				<Source><![CDATA[
    protected void initFromInvoiceTable(
        LedgerJournalTable    _ledgerJournalTable,
        CzAdvanceInvoiceTable _invoiceTable)
    {
        this.insertLedgerJournalTrans(_ledgerJournalTable, _invoiceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        int         i;
        container   sharedServiceCompanies;

        if (isConfigurationkeyEnabled(configurationkeynum(LedgerAdvIntercompanyAccounting)))
        {
            sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curext());
        }
        else
        {
            sharedServiceCompanies = [ curext() ];
        }

        query = new Query();
        query.allowCrossCompany(true);

        for (i = 1; i <= conlen(sharedServiceCompanies); i++)
        {
            query.addCompanyRange(conpeek(sharedServiceCompanies, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerJournalTrans</Name>
				<Source><![CDATA[
    final protected void insertLedgerJournalTrans(
        LedgerJournalTable    _ledgerJournalTable,
        CzAdvanceInvoiceTable _invoiceTable,
        CzAdvanceInvoiceLine  _invoiceLine = null)
    {
        NumberSeq tmpVoucherNum;

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();
        ledgerJournalEngine.initValue(ledgerJournalTrans);

        if (_ledgerJournalTable.NumberSequenceTable)
        {
            tmpVoucherNum = NumberSeq::newGetVoucherFromId(_ledgerJournalTable.NumberSequenceTable, false);
            ledgerJournalTrans.Voucher   = tmpVoucherNum.voucher();
        }

        ledgerJournalTrans.JournalNum  = _ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AccountType = this.accountType();
        ledgerJournalTrans.parmAccount(
            _invoiceTable.InvoiceAccount,
            ledgerJournalTrans.AccountType,
            _invoiceTable.company());

        ledgerJournalEngine.accountModified(ledgerJournalTrans);

        ledgerJournalTrans.PaymReference = this.getPaymReference(_invoiceTable);
        ledgerJournalTrans.TransDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.CurrencyCode  = _invoiceTable.CurrencyCode;
        ledgerJournalTrans.ExchRate      = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode);
        ledgerJournalTrans.Txt           = strfmt("@SYS76498", "@GLS107927", _invoiceTable.InvoiceId);

        ledgerJournalTrans.TaxGroup      = "";
        ledgerJournalTrans.TaxItemGroup  = "";

        this.initFromInvoiceLine(_invoiceTable, _invoiceLine);

        if (copyPostingProfile && _invoiceTable.PostingProfile)
        {
            ledgerJournalTrans.PostingProfile = _invoiceTable.PostingProfile;
        }

        ledgerJournalTrans.insert();

        if (linkToPayment)
        {
            CzAdvanceInvoiceLink::setLink(ledgerJournalTrans.company(),
                                          ledgerJournalTrans.Voucher,
                                          ledgerJournalTrans.TransDate,
                                          _invoiceTable,
                                          changeInvoiceStatus              ?
                                          CzAdvanceInvoiceStatus::PartPaid :
                                          _invoiceTable.Status);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkExists</Name>
				<Source><![CDATA[
    abstract protected boolean linkExists(CzAdvanceInvoiceTable _invoiceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        copyVAToptions      = NoYes::Yes;
        copyPostingProfile  = NoYes::Yes;
        linkToPayment       = NoYes::Yes;
        changeInvoiceStatus = NoYes::Yes;
        excludeLinked       = NoYes::Yes;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    final public container pack()
    {
        return [ #CurrentVersion, #CurrentList, queryRun.pack() ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalEngine</Name>
				<Source><![CDATA[
    private LedgerJournalEngine parmLedgerJournalEngine(LedgerJournalEngine _ledgerJournalEngine = ledgerJournalEngine)
    {
        ledgerJournalEngine = _ledgerJournalEngine;

        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    private LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    final public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkToPayment_modified</Name>
				<Source><![CDATA[
    private boolean linkToPayment_modified(FormCheckBoxControl _ctrl)
    {
        boolean modified = _ctrl.modified();

        if (modified)
        {
            fieldChangeInvoiceStatus.allowEdit(_ctrl.value());
        }

        return modified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerJournalTable          ledgerJournalTable;
        CzAdvanceInvoiceTable       invoiceTable;
        FormDataSource              fds = FormDataUtil::getFormDataSource(ledgerJournalTrans);

        try
        {
            ttsbegin;

            if (linkToPayment && ! ledgerJournalEngine.ledgerJournalTable().ledgerJournalTable_W().Prepayment_W)
            {
                info("@GLS108303");
                linkToPayment                = false;
                hideJournalNotPrepaymentInfo = true;
            }

            if (! ledgerJournalTrans.RecId)
            {
                fds.delete();
            }

            ledgerJournalTable = ledgerJournalEngine.ledgerJournalTable();

            while (queryRun.next())
            {
                invoiceTable = queryRun.getNo(1);

                if (excludeLinked && this.linkExists(invoiceTable))
                    continue;

                this.initFromInvoiceTable(ledgerJournalTable, invoiceTable);
            }

            ttscommit;

            fds.linkActive();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    final public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version   version = RunBase::getVersion(_packedClass);
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [ version, #CurrentList, packedQuery ] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initParmDefault();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProposal</Name>
				<Source><![CDATA[
    public static void createProposal(Args _args)
    {
        CzAdvancePaymentProposal proposal = CzAdvancePaymentProposal::newFromArgs(_args);

        if (proposal.prompt())
        {
            proposal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    private static CzAdvancePaymentProposal newFromArgs(Args _args)
    {
        CzAdvancePaymentProposal ret;
        LedgerJournalTrans       trans;
        LedgerJournalEngine      ledgerJournalEngine;

        if (! _args          ||
            _args.dataset() != tablenum(LedgerJournalTrans))
            throw error(Error::missingRecord(classstr(CzAdvancePaymentProposal)));

        trans = _args.record();

        if (! _args.caller()                                                                   ||
            ! SysDictClass::isEqualOrSuperclass(classidget(_args.caller()), classnum(FormRun)) ||
            ! formHasMethod(_args.caller(), identifierstr(ledgerJournalEngine)))
            throw error("@GLS105755");

        ledgerJournalEngine = _args.caller().ledgerJournalEngine();

        if (ledgerJournalEngine.ledgerJournalTable().Posted)
            throw error(strfmt("@SYS18421", trans.JournalNum));

        switch (ledgerJournalEngine.ledgerJournalTable().JournalType)
        {
            case LedgerJournalType::CustPayment :
                ret = new CzAdvancePaymentProposal_Cust();
                break;

            case LedgerJournalType::Payment     :
                ret = new CzAdvancePaymentProposal_Vend();
                break;

            default                             :
                throw error(strfmt("@GLS111754", ledgerJournalEngine.ledgerJournalTable().JournalType));
        }

        ret.parmLedgerJournalTrans(trans);
        ret.parmLedgerJournalEngine(ledgerJournalEngine);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>