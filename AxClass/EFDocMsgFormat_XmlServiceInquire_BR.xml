<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlServiceInquire_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates and interprets the XML to be sent to the status inquire web service.
/// </summary>
public class EFDocMsgFormat_XmlServiceInquire_BR extends EFDocMsgFormat_XmlBase_BR implements IEFDocMsgFormat
{
    IEFDocMsgStream_BR           stream;
    EFDocServiceInquireParams_BR efDocServiceInquireParams;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the NF-e manual that this class adheres to.
    /// </summary>
    /// <returns>The version of the NF-e manual from <c>EFiscalDocVersion_BR</c> enumerator.</returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getService</Name>
				<Source><![CDATA[
        private str getService()
    {
        return 'STATUS';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(EFDocServiceInquireParams_BR _efDocServiceInquireParams)
    {
        efDocServiceInquireParams = _efDocServiceInquireParams;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the XML returned by the inquire web service.
    /// </summary>
    /// <param name="_stream">The stream from which to read the XML.</param>
    /// <param name="_returnInfo">A parm object to fill the return information.</param>
    void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR

        str         returnCode;
        str         returnMessage;
        str         tMed;
        str         plannedReturnDateTime;
        str         notes;

        utcDateTime utcPlannedReturnDateTime;

        xmlDoc.loadXml(conpeek(_stream.read(),1));

        returnCode            = this.tryGetNodeContent('/x:retConsStatServ/x:cStat');
        returnMessage         = this.tryGetNodeContent('/x:retConsStatServ/x:xMotivo');

        tMed                  = this.tryGetNodeContent('/x:retConsStatServ/x:tMed');
        plannedReturnDateTime = this.tryGetNodeContent('/x:retConsStatServ/x:dhRetorno');
        notes                 = this.tryGetNodeContent('/x:retConsStatServ/x:xObs');

        if (plannedReturnDateTime)
        {
            utcPlannedReturnDateTime = DateTimeUtil::parse(plannedReturnDateTime);
        }

        _returnInfo.parmReturnCodeStatus(returnCode);
        _returnInfo.parmReturnMessage(returnMessage);
        _returnInfo.parmAverageResponseTime(str2int(tMed));
        _returnInfo.parmPlannedReturn(utcPlannedReturnDateTime);
        _returnInfo.parmReturnNotes(notes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the XML that this class creates and interprets.
    /// </summary>
    /// <returns>The XML version in string format.</returns>
    public str version()
    {
        return '2.00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>webService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves which web service this format is to be sent to.
    /// </summary>
    /// <returns>A web service from <c>EFDocWebService_BR</c> enumerator.</returns>
    EFDocWebService_BR webService()
    {
        return EFDocWebService_BR::ServiceInquire;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML messages and sends it to the provided message stream.
    /// </summary>
    /// <param name="_stream">The stream to be used to send the messages</param>
    /// <param name="_documentList">A <c>EFiscalDocumentList_BR</c> list of documents to be sent.</param>
    public void write(IEFDocMsgStream_BR _stream, EFiscalDocumentList_BR _documentList)
    {
        XmlElement      constStatServElement;

        constStatServElement  = this.createElement('consStatServ');
        constStatServElement.setAttribute('versao', this.version());

        constStatServElement.appendChild(this.createElementWithValue('tpAmb', efDocServiceInquireParams.parmEFDocEnvironment() == EFDocEnvironment_BR::Production ? '1' : '2'));
        constStatServElement.appendChild(this.createElementWithValue('cUF', efDocServiceInquireParams.parmCUF()));
        constStatServElement.appendChild(this.createElementWithValue('xServ', this.getService()));

        xmlDoc = XmlDocument::newXml(constStatServElement.xml());
        xmlDoc.insertBefore(xmlDoc.createXmlDeclaration('1.0', 'UTF-8', ''), xmlDoc.documentElement());

        _stream.write(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocMsgFormat_XmlServiceInquire_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocMsgFormat_XmlServiceInquire_BR</c> object.</returns>
    /// <param name="_efDocServiceInquireParams">A <c>EFDocServiceInquireParams_BR</c> object that contains information to transport</param>
    public static EFDocMsgFormat_XmlServiceInquire_BR construct(EFDocServiceInquireParams_BR _efDocServiceInquireParams)
    {
        return new EFDocMsgFormat_XmlServiceInquire_BR(_efDocServiceInquireParams);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>