<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchOrderJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchPurchOrderJournalPost
extends FormletterJournalPost
{
    PurchParmTable          purchParmTable;
    PurchLine               purchLine;
    PurchTable              purchTable;

    VendPurchOrderJour      vendPurchOrderJour;
    PurchTableVersion       purchTableVersion;
    PurchTotals             purchTotals;
    boolean                 isFrenchRegulatoryEnabled;
    boolean                 canPostLedger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _purchLine)
    {
        PurchLine               localPurchLine = _purchLine as PurchLine;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventQty               qtyRemain = localPurchLine.QtyOrdered;

        if (purchLine.isStocked())
        {
            while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId       == localPurchLine.InventTransId
                   && inventTransOrigin.ReferenceCategory   == InventTransType::Purch
                join InventDimId, sum(Qty) from inventTrans
                group by InventDimId
                where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
            {
                if (qtyRemain)
                {
                    qtyRemain = this.createInventReportDimHistory(localPurchLine.InventTransId, inventTrans.InventDimId, vendPurchOrderJour.PurchaseOrderId, -inventTrans.Qty, qtyRemain);
                }
                else
                    break;
            }
        }
        else
        {
            this.createInventReportDimHistory(localPurchLine.InventTransId,
                                              localPurchLine.InventDimId,
                                              vendPurchOrderJour.PurchaseOrderId,
                                              localPurchLine.PurchQty,
                                              localPurchLine.PurchQty );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return canPostLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforePostingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the purchase order line before the line is posted.
    /// </summary>
    protected void checkBeforePostingLine()
    {
        super();

        if (BudgetParameters::find().PreventIncreaseToCarryForwardEncumbrance == NoYes::Yes
            && purchTable.hasDocumentBeenThroughYearEnd())
        {
            this.checkCarryforwardAmountNotExceeded();
        }

        if (isFrenchRegulatoryEnabled)
        {
            if (PurchAgreementFinDimensionAccess_PSN::isFinDimensionAmountAuthorized(purchLine.MatchingAgreementLine, purchLine.SourceDocumentLine))
            {
                this.checkPurchCommitmentBalance();
            }
        }
        else if (purchLine.isBudgetReservationLineReferenced())
        {
            this.verifyBudgetReservationBalance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCarryforwardAmountNotExceeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the purchase order being posted was processed through year-end with
    /// carry-forward and its amount does not increase the amount carried forward.
    /// </summary>
    protected void checkCarryforwardAmountNotExceeded()
    {
        if (BudgetTransactionHeader::existForTypeAndSourceNumber(purchTable.PurchId, BudgetTransactionType::CarryForwardBudget))
        {
            PurchLine                           purchLineLocal;
            AccountingDistribution              accountingDistribution;
            AccountingEvent                     accountingEvent;            
            BudgetSource                        budgetSource;
            BudgetSourceTracking                budgetSourceTracking;
            BudgetSourceTrackingDetail          budgetSourceTrackingDetail;
            BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
            
            // Loop through all the purchase order lines that have an accounting event of period open.
            while select LineAmount, LineNumber, CurrencyCode, SourceDocumentLine from purchLineLocal
                where purchLineLocal.PurchId == purchTable.PurchId
                exists join accountingDistribution
                    where accountingDistribution.SourceDocumentLine == purchLineLocal.SourceDocumentLine
                exists join accountingEvent
                    where accountingEvent.RecId == accountingDistribution.AccountingEvent
                        && accountingEvent.Type == AccountingEventType::PeriodOpen
            {
                AmountCur carryForwardAmount = BudgetEncumbranceCarryForwardBalance_PSN::getCarryforwardAmount(
                    purchLineLocal.SourceDocumentLine,
                    purchLineLocal.CurrencyCode);

                select sum(AccountingCurrencyAmount)
                    from budgetSourceTrackingRelievingDetail
                    exists join budgetSourceTrackingDetail
                        where budgetSourceTrackingDetail.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
                    exists join budgetSourceTracking
                        where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
                    exists join budgetSource
                        where budgetSource.RecId == budgetSourceTracking.BudgetSource
                            && budgetSource.SourceDocumentLine == purchLineLocal.SourceDocumentLine;

                // Relieving amounts are stored as negative values so add the relieving amount value to the LineAmount to get the unrelieved amount
                AmountCur unrelievedLineAmount = purchLineLocal.LineAmount + budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;

                if (unrelievedLineAmount > carryForwardAmount)
                {
                    // The line amount is greater than the amount carried forward.
                    AmountCur differenceAmount = unrelievedLineAmount - carryForwardAmount;

                    throw error(strFmt("@Budgeting_BudgetReservationPS:BudgetCarryForwardBalanceValidationError",
                        purchTable.PurchId,
                        purchLineLocal.LineNumber,
                        differenceAmount,
                        purchLineLocal.CurrencyCode));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyBudgetReservationBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation line referenced by the purchase order line has enough balance.
    /// </summary>
    /// <remarks>
    /// If the referenced budget reservation line does not have sufficient balance, halt purchase order confirmation.
    /// </remarks>
    private void verifyBudgetReservationBalance()
    {
        BudgetReservation_PSN::checkBudgetReservationBalance(purchLine.BudgetReservationLine_PSN, PurchTable::find(purchLine.PurchId).SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchCommitmentBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current purchase order line will exceed the balance of the commitment to
    /// which it is related.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The current purchase order exceeds the balance of the commitment to which it is related.
    /// </exception>
    public void checkPurchCommitmentBalance()
    {
        if (isFrenchRegulatoryEnabled
            && purchLine.PurchCommitmentLine_PSN != 0
            && !PurchCommitmentLine_PSN::performBalanceCheck(purchLine.SourceDocumentLine))
        {
            throw error("@PublicSector:PurchCommitmentLineOverConsumedError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDocuRefLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>DocuRef</c> records that are attached to the order lines to the target document.
    /// </summary>
    /// <remarks>
    /// The <c>DocuRef</c> records are not copied on purchase order confirmation.
    /// </remarks>
    protected void copyDocuRefLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    public boolean createReportData(FormletterJournalPrint _formletterJournalPrint)
    {
        SRSTmpDataStore        srsTmpDataStore;
        PurchPurchaseOrderDP   purchPurchaseOrderDP = new PurchPurchaseOrderDP();
        PurchPurchaseOrderContract purchPurchaseOrderContract = new PurchPurchaseOrderContract();

        purchPurchaseOrderContract.parmRecordId(formletterJournal.RecId);

        if (_formletterJournalPrint)
        {
            srsTmpDataStore.Value   = _formletterJournalPrint.pack();
            srsTmpDataStore.insert();
            purchPurchaseOrderContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }

        purchPurchaseOrderDP.createData(purchPurchaseOrderContract);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLedgerTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default ledger transaction text.
    /// </summary>
    /// <returns>
    /// The default transaction text.
    /// </returns>
    protected LedgerTransTxt defaultLedgerTransactionText()
    {
        return LedgerTransTxt::PurchPurchOrderLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus  documentStatus()
    {
        return DocumentStatus::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    protected void endPostLine()
    {
        PurchReqLine        purchReqLine;

        super();

        if (this.doFinalizePurchaseRequisition())
        {
            // Finalize the purchReqLine
            purchReqLine = PurchReqLine::findLineRefId(purchLine.PurchReqLineRefId);
            purchReqLine.createCancelEventAndDistributions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFinalizePurchaseRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase requisition line associated with the current purchase order line should be finalized,
    /// if there is a purchase requisition line associated with the current purchase order line.
    /// </summary>
    /// <returns>
    /// true if the purchase requistion should be finalized; otherwise, false.
    /// </returns>
    protected boolean doFinalizePurchaseRequisition()
    {    
        boolean doFinalizePurchaseRequisition = purchLine.PurchReqLineRefId != emptyGuid();

        if (doFinalizePurchaseRequisition && purchLine.BudgetReservationLine_PSN)
        {
            BudgetReservationHeader_PSN budgetReservationHeader = BudgetReservationHeader_PSN::findByLine(purchLine.BudgetReservationLine_PSN);

            if (budgetReservationHeader.RecId && budgetReservationHeader.RelievingDocumentType != BudgetReservationRelievingDocument_PSN::PurchaseRequisition)
            {
                doFinalizePurchaseRequisition = false;
            }
        }

        return doFinalizePurchaseRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a voucher number.
    /// </summary>
    /// <returns>
    /// A voucher number.
    /// </returns>
    protected Num getVoucher()
    {
        return vendPurchOrderJour.PurchaseOrderVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes various class variables.
    /// </summary>
    public void init()
    {
        purchTableVersion = PurchTableVersion::find(vendPurchOrderJour.PurchTableVersion);
        isFrenchRegulatoryEnabled = PublicSectorUtils::isFrenchRegulatoryEnabled();
        canPostLedger = LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::Yes ? true : false;
        super();

        if (!purchTable)
        {
            purchTable = vendPurchOrderJour.purchTable();
        }

        if (this.parmTotals())
        {
            purchTotals = this.parmTotals() as PurchTotals;
        }
        else
        {
            purchTotals = PurchTotals::newPurchTableConfirmation(vendPurchOrderJour.purchTable(), purchParmTable);
            purchTotals.parmUpdateTotalsSummary(true);
            purchTotals.calc();
        }
        this.tax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>FormletterProvider</c> object.
    /// </summary>
    protected void initFormletterProvider()
    {
        formletterProvider = FormletterProvider::newFormletterType(FormletterType::Purchase, purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransactionTxt</c> object.
    /// </summary>
    /// <param name="_ledgerTransTxt">
    /// A ledger transaction text.
    /// </param>
    /// <returns>
    /// An instance of the <c>TransactionTxt</c> class.
    /// </returns>
    protected TransactionTxt initTransactionTxt(LedgerTransTxt _ledgerTransTxt)
    {
        TransactionTextContext      transactionTextContext;
        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType          (_ledgerTransTxt);
        transactionTxt.setVoucher       (vendPurchOrderJour.PurchaseOrderVoucher);
        transactionTxt.setFormLetter    (vendPurchOrderJour.PurchaseOrderId);
        transactionTxt.setKey1          (vendPurchOrderJour.PurchId);
        transactionTxt.setKey2          (purchTable.InvoiceAccount);
        transactionTxt.setKey3          (VendTable::groupId(purchTable.InvoiceAccount));
        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion() &&
            TransactionTextContext::isTypeSupported(_ledgerTransTxt))
        {
            transactionTextContext = TransactionTextContext::newForTransactionType(_ledgerTransTxt);
            transactionTextContext.setTableBuffer(vendPurchOrderJour);
            transactionTextContext.setTableBuffer(vendPurchOrderJour.purchTable());
            transactionTxt.setTransactionTextContext(transactionTextContext);
        }

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReportDimHistoryLogType</Name>
				<Source><![CDATA[
    protected InventReportDimHistoryLogType inventReportDimHistoryLogType()
    {
        return InventReportDimHistoryLogType::PurchPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current journal line record.
    /// </summary>
    /// <param name="_journalLine">
    /// A journal line record.
    /// </param>
    /// <returns>
    /// A journal line record.
    /// </returns>
    protected Common journalLine(Common _journalLine = purchLine)
    {
        purchLine = _journalLine as PurchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(PurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherObjectDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document date and document number.
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    /// An instance of the <c>LedgerVoucherObject</c> class.
    /// </param>
    /// <returns>
    /// A container that contains the posting date value and the <c>PurchOrderDocNum</c> field value.
    /// </returns>
    /// <remarks>
    /// The document number is adjusted for the number of purchase orders posted.
    /// </remarks>
    protected container ledgerVoucherObjectDocument(LedgerVoucherObject _ledgerVoucherObject)
    {
        return [DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), vendPurchOrderJour.PurchOrderDocNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherObjectSetParms</Name>
				<Source><![CDATA[
    protected void ledgerVoucherObjectSetParms(LedgerVoucherObject _ledgerVoucherObject)
    {
        _ledgerVoucherObject.parmTransDate(purchTable.AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextFormletterJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the next document line to process.
    /// </summary>
    protected void nextFormletterJournalTrans()
    {
        next purchLine;

        formletterJournalTrans.data(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = vendPurchOrderJour)
    {
        vendPurchOrderJour = _journalTable as VendPurchOrderJour;

        return vendPurchOrderJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;

        if (!purchTable)
        {
            purchTable = purchParmTable.purchTable(true);
        }

        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendPurchOrderJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs customer and vendor related postings.
    /// </summary>
    protected void postCustVend()
    {
        // Note, don't let base class method run, lines are posted in this.journalizeSourceDocument().
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEndDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the end discount.
    /// </summary>
    /// <remarks>
    /// Do not call the base class method. Lines are posted in the <c>this.journalizeSourceDocument</c>
    /// method.
    /// </remarks>
    protected void postEndDiscount()
    {
        // Note, don't let base class method run, all discounts are posted in this.journalizeSourceDocument().
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    protected void postLine()
    {
        // Note, don't let base class method run, lines are posted in this.journalizeSourceDocument().
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLineDiscount</Name>
				<Source><![CDATA[
    protected void postLineDiscount()
    {
        // Note, don't let base class method run, line level discounts are posted in this.journalizeSourceDocument().
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void  postMarkupOnJour(PurchTable  _purchTableMarkup)
    {
        markup.postJournal(1,
                           purchTotals.purchOrderBalance(_purchTableMarkup.TableId, _purchTableMarkup.RecId),
                          _purchTableMarkup,
                          _purchTableMarkup.DefaultDimension,
                           null,
                           ledgerVoucher,
                           _purchTableMarkup.isInterCompanyOrder());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void  postMarkupOnTrans()
    {
        markup.postJournal(purchLine.PurchQty,
                           purchTable.InclTax?purchLine.LineAmount-purchLine.ConfirmedTaxAmount:purchLine.LineAmount,
                           purchLine,
                           purchLine.DefaultDimension,
                           null,
                           ledgerVoucher,
                           purchTable.isInterCompanyOrder());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void  postMarkupTable()
    {
        this.postMarkupOnJour(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRoundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts roundings.
    /// </summary>
    /// <remarks>
    /// Do not call the base class method. Lines are posted in the <c>this.journalizeSourceDocument</c>
    /// method.
    /// </remarks>
    protected void postRoundOff()
    {
        // Note, don't let base class method run, roundoff are posted in this.journalizeSourceDocument().
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be posted on update.
    /// </summary>
    /// <returns>
    /// true if tax should be posted on update; otherwise, false.
    /// </returns>
    protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processedHeaderImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// A processed purchase order source document event handler.
    /// </summary>
    /// <param name="_sourceDocumentHeaderImplementation">
    /// The source document header implementation.
    /// </param>
    public void processedHeaderImplementation(SourceDocumentHeaderImplementation  _sourceDocumentHeaderImplementation)
    {
        AccountingEvent accountingEvent;

        select forupdate firstonly accountingEvent
            order by RecId desc
            where accountingEvent.SourceDocumentHeader == purchTable.SourceDocumentHeader
              && !accountingEvent.EventDateTime;

        if (accountingEvent.RecId)
        {
            accountingEvent.EventDateTime = purchTableVersion.VersionDateTime;
            accountingEvent.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the source document.
    /// </summary>
    protected void processSourceDocument()
    {
        UserId processUserId = this.parmChainFormletterContract().parmBatchCreatedBy();

        if (!processUserId)
        {
            // Set to current user if there is not a batch user
            processUserId = curUserId();
        }

        const SourceDocumentProcessorCaller NullCaller = null;
        const boolean TransitionToCompletedStateAccountFullyQualifiedValidationTrue = true;
        const boolean DoNotUpdateImplementation = false;
        const SourceDocumentLineImplementationList NullSourceDocumentLineList = null;
        boolean doAsynchronousLineTransition = true;

        if (purchTable.isInterCompanyOrder())
        {
            doAsynchronousLineTransition = false;
        }

        sourceDocumentProcessorFacade::submitSourceDocumentImplementation(purchTable,
                                                                          DoNotUpdateImplementation,
                                                                          SourceDocumentAccountingStatus::Completed,
                                                                          NullCaller,
                                                                          processUserId,
                                                                          TransitionToCompletedStateAccountFullyQualifiedValidationTrue,
                                                                          NullSourceDocumentLineList,
                                                                          doAsynchronousLineTransition);

        this.processedHeaderImplementation(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormletterJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the pointer to process document lines.
    /// </summary>
    protected void selectFormletterJournalTrans()
    {
        select purchLine
            where purchLine.PurchId  == vendPurchOrderJour.PurchId;

        formletterJournalTrans.data(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line record for the current journal line.
    /// </summary>
    /// <returns>
    /// A source line record.
    /// </returns>
    protected Common sourceLine()
    {
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source header record for the journal header.
    /// </summary>
    /// <returns>
    /// A <c>PurchTable</c> record.
    /// </returns>
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeCalcTax</Name>
				<Source><![CDATA[
    protected Object tradeCalcTax()
    {
        return PurchCalcTax::construct(this.parmJournalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TransTxt</c> object.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TransTxt</c> object.
    /// </returns>
    protected TransTxt  transactionLogTxt()
    {
        return "@SYS12638";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::PurchPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction Date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate  updateDate()
    {
        return vendPurchOrderJour.PurchOrderDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        SetEnumerator   se = ordersPosted.getEnumerator();

        ttsbegin;
        while (se.moveNext())
        {
            purchTable = PurchTable::find(se.current(),true);
            if (purchTable)
            {
                this.updatePurchTable();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the purchase table for the journal header.
    /// </summary>
    protected void updatePurchTable()
    {
        purchTable.updateIsEncumbranceRequired();
        purchTable.updateDocumentStatus(this.documentStatus());
        purchTable.updateBackStatus();
        purchTable.updatePurchaseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactTxtForLedgerVoucherObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the transaction text that uses the transaction.
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    ///    The instance of the <c>LedgerVoucherObject</c> class.
    /// </param>
    protected void updateTransactTxtForLedgerVoucherObject(LedgerVoucherObject _ledgerVoucherObject)
    {
        super(_ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchPurchOrderJournalPost construct()
    {
        return new PurchPurchOrderJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax doucment.
    /// </summary>
    /// <param name="_checkLedgerVoucher">
    /// A Boolean value that indicates whether checking the LedgerVoucher; optional.
    /// </param>
    public void postTaxDocument(boolean _checkLedgerVoucher = true)
    {
        super(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>