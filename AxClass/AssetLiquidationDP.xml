<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetLiquidationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetLiquidationDP</c> class is the report data provider class for the <c>AssetLiquidation</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetLiquidation)),
    SRSReportParameterAttribute(classStr(AssetLiquidationContract))
]
public class AssetLiquidationDP extends SrsReportDataProviderPreProcessTempDB
{
    AssetLiquidationTmp assetLiquidationTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetLiquidationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the data in the <c>AssetLiquidationTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>AssetLiquidationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetLiquidationTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetLiquidationTmp getAssetLiquidationTmp()
    {
        select assetLiquidationTmp;
        return assetLiquidationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// Customizing this class may cause problems with future upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        QueryRun    queryRun;
        AssetBook   assetBook;
        AssetTable  assetTable;
        AssetLiquidationContract contract = this.parmDataContract() as AssetLiquidationContract;

        queryRun = new QueryRun(this.parmQuery());
        while (queryRun.next())
        {
            assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
            assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;

            assetLiquidationTmp.AssetId         = assetBook.AssetId;
            assetLiquidationTmp.AcquisitionDate = assetBook.AcquisitionDate;
            assetLiquidationTmp.BookId          = assetBook.BookId;
            assetLiquidationTmp.Name            = assetTable.Name;
            assetLiquidationTmp.Quantity        = assetTable.Quantity;
            assetLiquidationTmp.DepartmentName  = OMOperatingUnit::find(assetTable.Department, OMOperatingUnitType::OMAnyOU).Name;
            assetLiquidationTmp.LocationDetails = strFmt("@SYS76498", assetTable.Location, AssetLocation::find(assetTable.Location).Name);
            assetLiquidationTmp.ResponsibleName = HcmWorker::worker2Name(assetTable.WorkerResponsible);

            assetLiquidationTmp.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>