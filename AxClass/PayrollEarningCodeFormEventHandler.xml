<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningCodeFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollEarningCodeFormEventHandler</c> contains the event handlers for the <c>PayrollEarningCode</c>
/// form.
/// </summary>
public final class PayrollEarningCodeFormEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PayrollEarningCodeDefaultDimension_CategoryId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the category ID control's <c>lookup</c> mehtod.
    /// </summary>
    /// <param name="_sender">The control context.</param>
    /// <param name="_e">The control event args.</param>
    [FormControlEventHandler(formControlStr(PayrollEarningCode, PayrollEarningCodeDefaultDimension_CategoryId), FormControlEventType::Lookup)]
    public static void PayrollEarningCodeDefaultDimension_CategoryId_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        PayrollEarningCode payrollEarningCode = _sender.formRun().dataSource(formDataSourceStr(PayrollEarningCode, PayrollEarningCode)).cursor() as PayrollEarningCode;

        if (payrollEarningCode.QuantityUnit == PayrollQuantityUnit::Hours)
        {
            ProjCategory::lookupProjCategoryType(_sender, ProjCategoryType::Hour);
        }
        else
        {
            ProjCategory::lookupProjCategoryType(_sender, ProjCategoryType::Cost);
        }

        FormControlCancelableSuperEventArgs cancelEvent = _e as FormControlCancelableSuperEventArgs;
        cancelEvent.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxMethod_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the field tax method <c>onModified</c> event to validate and update fields.
    /// </summary>
    /// <param name="_sender">The field object context.</param>
    /// <param name="_e">The date field event args.</param>
    [FormDataFieldEventHandler(formDataFieldStr(PayrollEarningCode, PayrollEarningCode, TaxMethod), FormDataFieldEventType::Modified)]
    public static void TaxMethod_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollEarningCode payrollEarningCode = _sender.datasource().cursor() as PayrollEarningCode;

        if (payrollEarningCode.TaxMethod != PayrollTaxMethod::Custom)
        {
            payrollEarningCode.TaxGroup = 0;
            _sender.datasource().rereadReferenceDataSources();
        }

        PayrollEarningCodeFormEventHandler::updateFormDesign(_sender.datasource().formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollEarningCode_postLegalEntityControlModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>postLegealEntityControlModified</c> method and refreshes data sources.
    /// </summary>
    /// <param name="_formElement">The form context.</param>
    [SubscribesTo(formStr(PayrollEarningCode), delegateStr(PayrollEarningCode, postLegalEntityControlModified))]
    public static void PayrollEarningCode_postLegalEntityControlModified(FormRun _formElement)
    {
        FormDataSource payrollEarningCodeAccountingRule_ds = _formElement.dataSource(formDataSourceStr(PayrollEarningCode, PayrollEarningCodeAccountingRule));
        payrollEarningCodeAccountingRule_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollEarningCode_postSetControllersContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>postSetControllersContext</c> event and updates the dimension entry control and ledger dimension.
    /// </summary>
    /// <param name="_formElement">The form context.</param>
    /// <param name="_selectedCompany">The selected company.</param>
    /// <param name="_clearDECONContextChange">true to clear the dimension entry control context.</param>
    [SubscribesTo(formStr(PayrollEarningCode), delegateStr(PayrollEarningCode, postSetControllersContext))]
    public static void PayrollEarningCode_postSetControllersContext(FormRun _formElement, SelectableDataArea _selectedCompany, boolean _clearDECONContextChange)
    {
        DimensionEntryControl dimensionEntryControl = PayrollEarningCodeFormEventHandler::getFormControl(_formElement, formControlStr(PayrollEarningCode, DimensionEntryControl)) as DimensionEntryControl;
        SegmentedEntryControl ledgerDimension = PayrollEarningCodeFormEventHandler::getFormControl(_formElement, formControlStr(PayrollEarningCode, LedgerDimension)) as SegmentedEntryControl;

        // reactivate the dimension controller with the proper legal entity context
        dimensionEntryControl.parmCompany(_selectedCompany);
        dimensionEntryControl.reactivate(_clearDECOnContextChange);

        ledgerDimension.parmDataAreaId(_selectedCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollEarningCode_postUpdateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>postUpdateDesign</c> event and updates data sources and form design.
    /// </summary>
    /// <param name="_formElement">The form context.</param>
    [SubscribesTo(formStr(PayrollEarningCode), delegateStr(PayrollEarningCode, postUpdateDesign))]
    public static void PayrollEarningCode_postUpdateDesign(FormRun _formElement)
    {
        FormDataSource payrollEarningCodeDetail_ds = _formElement.dataSource(formDataSourceStr(PayrollEarningCode, PayrollEarningCodeDetail));
        FormDataSource payrollEarningCode_ds = _formElement.dataSource(formDataSourceStr(PayrollEarningCode, PayrollEarningCode));
        FormDataSource payrollEarningCodeDefaultDimension_ds = _formElement.dataSource(formDataSourceStr(PayrollEarningCode, PayrollEarningCodeDefaultDimension));

        PayrollEarningCode payrollEarningCode = payrollEarningCode_ds.cursor() as PayrollEarningCode;

        DimensionEntryControl dimensionEntryControl = PayrollEarningCodeFormEventHandler::getFormControl(_formElement, formControlStr(PayrollEarningCode, DimensionEntryControl)) as DimensionEntryControl;

        // Fields are set as editable unless locked down by a business rule below
        payrollEarningCode_ds.object(fieldNum(PayrollEarningCode, TaxGroup)).allowEdit(true);

        payrollEarningCodeDefaultDimension_ds.object(fieldNum(PayrollEarningCodeDefaultDimension, AccountingDistributionTemplate)).visible(true);


        dimensionEntryControl.visible(false);

         // Auto payment run type
        if (payrollEarningCode.IncludeInPaymentType == PayrollIncludeInPaymentType::Auto)
        {
            payrollEarningCodeDefaultDimension_ds.object(fieldNum(PayrollEarningCodeDefaultDimension, AccountingDistributionTemplate)).visible(false);
            dimensionEntryControl.visible(false);
        }

        if (PayrollEarningCode.TaxMethod == PayrollTaxMethod::Custom)
        {
            payrollEarningCode_ds.object(fieldNum(PayrollEarningCode, TaxGroup)).allowEdit(true);
        }
        else
        {
            payrollEarningCode_ds.object(fieldNum(PayrollEarningCode, TaxGroup)).allowEdit(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollEarningCodeAccountingRule_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the payroll earning code account rule <c>onQueryExecuting</c> event to add query ranges to the data source.
    /// </summary>
    /// <param name="_sender">The data source context.</param>
    /// <param name="_e">The data source event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PayrollEarningCode, PayrollEarningCodeAccountingRule), FormDataSourceEventType::QueryExecuting)]
    public static void PayrollEarningCodeAccountingRule_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormStringControl legalEntity = PayrollEarningCodeFormEventHandler::getFormControl(_sender.FormRun(), formControlStr(PayrollEarningCode, LegalEntity));

        RefRecId selectedDataAreaId = CompanyInfo::findDataArea(legalEntity.text()).RecId;

        SysQuery::findOrCreateRange(_sender.query().dataSourceName(_sender.name()), fieldNum(PayrollEarningCodeAccountingRule, LegalEntity)).value(queryValue(selectedDataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollEarningCodeAccountingRule_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the payrol earning code accounting rule data source <c>onInitialized</c> event to add ranges.
    /// </summary>
    /// <param name="_sender">The data source context.</param>
    /// <param name="_e">The data source event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PayrollEarningCode, PayrollEarningCodeAccountingRule), FormDataSourceEventType::Initialized)]
    public static void PayrollEarningCodeAccountingRule_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        SysQuery::findOrCreateRange(_sender.query().dataSourceName(_sender.name()), fieldNum(PayrollEarningCodeAccountingRule, LegalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    private static void updateFormDesign(FormRun _formElement)
    {
        PayrollIEarningCodeForm callerForm = _formElement as PayrollIEarningCodeForm;

        if (callerForm != null)
        {
            callerForm.updateDesign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    private static FormControl getFormControl(FormRun _formRun, FormControlName _formControlName)
    {
        return _formRun.control(_formRun.controlId(_formControlName));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>