<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class  SalesQuotationTableForm
{
    SalesQuotationTable             salesQuotationTable;
    Common                          source;
    QuotationType                   quotationType;
    QuotationType                   defaultQuotationType;

    QuotationIdBase                 quotationId;
    QuotationIdBase                 newQuotationId;

    smmBusRelAccount                busRelAccount;
    CustAccount                     custAccount;
    CustInvoiceAccount              invoiceAccount;
    CustLanguageId                  languageId;

    SalesQuotationLine              newlyCreatedSalesQuotationLine;
    Hierarchy                       srcHierarchy;
    boolean                         advancedStartup;
    boolean                         createFromTemplate;
    boolean                         initFromCustTable;

    SalesQuotationTemplateGroupId   createFromTemplateGroupId;
    QuotationTemplateName           createFromTemplateName;
    SalesQuotationPriceConversion   quotationPriceConversion;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        advancedStartup
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    void active(SalesQuotationTable     _salesQuotationTable)
    {
        this.salesQuotationTable(_salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>busRelAccount</Name>
				<Source><![CDATA[
    smmBusRelAccount busRelAccount(smmBusRelAccount  _busRelAccount = busRelAccount)
    {
        busRelAccount = _busRelAccount;
        return busRelAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    boolean canClose(SalesQuotationTable    _salesQuotationTable)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canNewLineBeAppended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new order line can be inserted after the currently selected one.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///     The currently selected sales quotation line.
    /// </param>
    /// <returns>
    ///     false for order lines with multiple deliveries; otherwise, true.
    /// </returns>
    /// <remarks>
    ///     When working on order form and an order line with multiple deliveries is selected a new line should always be inserted before it.
    /// </remarks>
    public boolean canNewLineBeAppended(SalesQuotationLine _salesQuotationLine)
    {
        return _salesQuotationLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineBeRemoved</Name>
				<Source><![CDATA[
    internal boolean canLineBeRemoved(SalesQuotationLine _salesQuotationLine)
    {
        return salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
            || !_salesQuotationLine.isIntegrationOwnerDynamics365Sales(salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistABS</Name>
				<Source><![CDATA[
    public boolean checkExistABS(SalesQuotationTable _salesQuotationTableTemplate)
    {
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;

        if (_salesQuotationTableTemplate.QuotationType == QuotationType::Project)
        {
            select firstonly HierarchyId, Name from srcHierarchy
                join RecId from hierarchyTreeTable
                    where srcHierarchy.HierarchyId == hierarchyTreeTable.HierarchyId
                exists join hierarchyLinkTable
                    where hierarchyLinkTable.HierarchyId == hierarchyTreeTable.HierarchyId
                        && hierarchyLinkTable.RefRecId == _salesQuotationTableTemplate.RecId
                        && hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable);
        }
        else
        {
            select firstonly HierarchyId, Name from srcHierarchy
                join RecId from hierarchyTreeTable
                    where hierarchyTreeTable.HierarchyId == srcHierarchy.HierarchyId
                        && hierarchyTreeTable.ParentElementNumber
                exists join hierarchyLinkTable
                    where hierarchyLinkTable.HierarchyId == hierarchyTreeTable.HierarchyId
                       && hierarchyLinkTable.RefRecId == _salesQuotationTableTemplate.RecId
                       && hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable);
        }

        return hierarchyTreeTable ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTemplate</Name>
				<Source><![CDATA[
    boolean checkTemplate()
    {
        SalesQuotationTable salesQuotationTableTemplate = SalesQuotationTable::findTemplate(this.quotationType(), this.parmFromTemplateGroupId(), this.parmFromTemplateName());

        if (salesQuotationTableTemplate.isTemplate())
        {
            return true;
        }

        if (this.parmFromTemplateGroupId() || this.parmFromTemplateName())
        {
            salesQuotationTableTemplate = SalesQuotationTable::findTemplate(this.quotationType(), this.parmFromTemplateGroupId(), this.parmFromTemplateName());

            // Check exist
            if (!salesQuotationTableTemplate.RecId)
            {
                checkFailed("@SYS30623");

                return false;
            }
            else
            {
                // Check active template
                if (!salesQuotationTableTemplate.TemplateActive)
                {
                    // Template not active.
                    checkFailed("@SYS99743");

                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    boolean  create()
    {
        Args                    args = new Args();
        SalesQuotationTable     currentRecord = salesQuotationTable;

        args.name(this.createForm());
        args.caller(this);
        args.parmEnumeration(this.quotationType());

        FormRun salesCreateQuotation = classfactory.formRunClass(args);
        salesCreateQuotation.init();
        salesCreateQuotation.run();
        salesCreateQuotation.wait();

        if (salesCreateQuotation.closedOk() && this.checkTemplate())
        {
            if (this.parmFromTemplateGroupId() && this.parmFromTemplateName())
            {
                this.createFromTemplate();
            }

            return true;
        }
        salesQuotationTable = currentRecord;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDestinationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Hierarchy</c> record from the destination quotation.
    /// </summary>
    /// <returns>The created <c>Hierarchy</c> record.</returns>
    [Replaceable]
    protected Hierarchy createDestinationHierarchy()
    {
        //create Hierarchy record
        HierarchyCreate hierarchyCreate = HierarchyCreate::construct(HierarchyType::Project);
        hierarchyCreate.parmIsQuotation(true);
        hierarchyCreate.parmSourceCommon(salesQuotationTable);
        hierarchyCreate.run();

        return hierarchyCreate.parmHierarchy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createABSFromTemplate</Name>
				<Source><![CDATA[
    private void createABSFromTemplate(boolean _useRateCards = true)
    {
        Hierarchy destHierarchy = this.createDestinationHierarchy();

        ProjPlanVersionsManager::createDraft(destHierarchy.HierarchyId,
                                            salesQuotationTable.QuotationId,
                                            salesQuotationTable.PSAEstProjStartDate,
                                            salesQuotationTable.PSAEstProjEndDate);

        // Import the hierarchy of the source quotation to destination quotation as if we are doing in WBS import.
        ProjPlanVersion projPlanVersion = ProjPlanVersion::getRootTask(destHierarchy.HierarchyId);
        // Waiting on completion of WBSV2: ProjPlanVersionsManager::preImportHierarchy(srcHierarchy.HierarchyId, destHierarchy.HierarchyId, projPlanVersion.HierarchyTaskId);
        ProjPlanVersionsManager::importTemplateHierarchy(srcHierarchy.HierarchyId,
                                                        destHierarchy.HierarchyId,
                                                        projPlanVersion.HierarchyTaskId,
                                                        _useRateCards);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    str createForm()
    {
        return formStr(SalesCreateQuotation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTemplate</Name>
				<Source><![CDATA[
    void createFromTemplate()
    {
        ttsbegin;

        SalesQuotationTable salesQuotationTableTemplate = SalesQuotationTable::findTemplate(this.quotationType(),
                                                                                            this.parmFromTemplateGroupId(),
                                                                                            this.parmFromTemplateName(),
                                                                                            true);
        if (salesQuotationTableTemplate)
        {
            this.initializeFromTemplate(salesQuotationTableTemplate);
            
            salesQuotationTable.doUpdate();

            if (Project::Enabled() && this.checkExistABS(salesQuotationTableTemplate))
            {
                this.createABSFromTemplate(this.parmQuotationPriceConversion() == SalesQuotationPriceConversion::Current ? true : false);

                this.createLinesFromHeaderForProject(salesQuotationTable);
            }
            else
            {
                SalesQuotationLine salesQuotationLine;

                SalesQuotationLine::createQuotationLineFromTemplate(salesQuotationTableTemplate,salesQuotationTable,this.parmQuotationPriceConversion());
                if (this.parmQuotationPriceConversion() == SalesQuotationPriceConversion::Template)
                {
                    update_recordset salesQuotationLine
                        setting CurrencyCode    =   salesQuotationTableTemplate.CurrencyCode
                        where salesQuotationLine.QuotationId    ==  salesQuotationTable.QuotationId;

                    salesQuotationTable.convertCurrencyCode(salesQuotationTable.CurrencyCode);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTemplate</Name>
				<Source><![CDATA[
    protected void initializeFromTemplate(SalesQuotationTable _salesQuotationTableTemplate)
    {
        // copy header information
        salesQuotationTable.QuotationCategory   = _salesQuotationTableTemplate.QuotationCategory;
        salesQuotationTable.DocuTitle           = _salesQuotationTableTemplate.DocuTitle;
        salesQuotationTable.DocuIntro           = _salesQuotationTableTemplate.DocuIntro;
        salesQuotationTable.DocuConclusion      = _salesQuotationTableTemplate.DocuConclusion;

        if (this.parmQuotationPriceConversion() == SalesQuotationPriceConversion::Template)
        {
            salesQuotationTable.DefaultDimension  = salesQuotationTable.copyDimension(_salesQuotationTableTemplate.DefaultDimension);
            if (this.quotationType() == QuotationType::Sales)
            {
                salesQuotationTable.DiscPercent     = _salesQuotationTableTemplate.DiscPercent;
            }
        }

        if (Project::Enabled())
        {
            salesQuotationTable.psaSchedCalendarId = _salesQuotationTableTemplate.psaSchedCalendarId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromHeaderForProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates sales quotation order lines for a project based <c>SalesQuotationTable</c>.
    /// </summary>
    /// <param name = "_salesQuotationTable">The sales quotation to create lines for.</param>
    protected void createLinesFromHeaderForProject(SalesQuotationTable _salesQuotationTable)
    {
        new PSAGenerateQuotationLines().createSalesQuotationLines(_salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new quotation line can be created.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///     The currently selected sales quotation line.
    /// </param>
    /// <returns>
    ///     true when quotation lines can be edited and the current line is not a delivery line; otherwise, false.
    /// </returns>
    public boolean createLineAllowed(SalesQuotationLine _salesQuotationLine)
    {
        boolean ret = (_salesQuotationLine.LineDeliveryType != LineDeliveryType::DeliveryLine
                || _salesQuotationLine.LineNum == SalesQuotationDeliverySchedule::lastDeliveryLineNumber(_salesQuotationLine.InventTransId))
            && this.editLineAllowed();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    CustAccount  custAccount(CustAccount  _custAccount = custAccount)
    {
        custAccount = _custAccount;
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuotationType</Name>
				<Source><![CDATA[
    QuotationType  defaultQuotationType()
    {
        return QuotationType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified quotation line can be deleted.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The quotation line to be checked for deletion.
    /// </param>
    /// <returns>
    ///    true when the line can be deleted; otherwise, false.
    /// </returns>
    boolean deleteLineAllowed(SalesQuotationLine _salesQuotationLine)
    {
        boolean deleteLine = _salesQuotationLine.LineDeliveryType != LineDeliveryType::DeliveryLine
                && this.editLineAllowed()
                && _salesQuotationLine.checkDelete(false);

        return deleteLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>design</Name>
				<Source><![CDATA[
    void  design()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the quotation lines can be edited.
    /// </summary>
    /// <returns>
    ///     true when the quotation lines can be edited; otherwise, false.
    /// </returns>
    boolean  editLineAllowed()
    {
        return salesQuotationTable.checkUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editQuotationId</Name>
				<Source><![CDATA[
    boolean  editQuotationId()
    {
        return NumberSequenceTable::find(SalesParameters::numRefQuotationIdBase().NumberSequenceId).numAllowEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editQuotationType</Name>
				<Source><![CDATA[
    boolean editQuotationType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFunctionButtonsMultiselect</Name>
				<Source><![CDATA[
    internal boolean enableFunctionButtonsMultiselect(
        SalesQuotationTable          _salesQuotationTable,
        FormFunctionButtonControl    _buttonConvert2customer = null,
        FormFunctionButtonControl    _buttonAlternativeQuotations = null,
        FormFunctionButtonControl    _buttonCopyAllHeader = null,
        FormFunctionButtonControl    _salesQuotationChangeReasonCode = null)
    {
        if (FormDataUtil::isFormDataSource(_salesQuotationTable))
        {
            boolean                     enableConvert2Customer              = _buttonConvert2customer ? false : true;
            boolean                     enableAlternativeQuotationsButton   = _buttonAlternativeQuotations ? false : true;
            boolean                     enableCopyAllHeaderButton           = _buttonCopyAllHeader ? false : true;
            boolean                     enableChangeReasonCode              = _salesQuotationChangeReasonCode ? false : true;

            FormDataSource salesQuotationTable_ds = FormDataUtil::getFormDataSource(_salesQuotationTable);
            SalesQuotationTable localSalesQuotationTable = salesQuotationTable_ds.getFirst(true);
            localSalesQuotationTable = localSalesQuotationTable? localSalesQuotationTable : salesQuotationTable_ds.cursor();
        
            if (localSalesQuotationTable)
            {
                while (localSalesQuotationTable)
                {
                    if ((enableConvert2Customer             == true) &&
                        (enableAlternativeQuotationsButton  == true) &&
                        (enableCopyAllHeaderButton          == true))
                    {
                        break;
                    }

                    SalesQuotationTableType salesQuotationTableType = localSalesQuotationTable.type();

                    if (!enableConvert2Customer)
                    {
                        enableConvert2Customer              = salesQuotationTableType.mayConvert2Customer();
                    }

                    if (!enableAlternativeQuotationsButton)
                    {
                        enableAlternativeQuotationsButton   = salesQuotationTableType.mayQuotationBeLinked() && (!localSalesQuotationTable.isTemplate());
                    }

                    if (!enableCopyAllHeaderButton)
                    {
                        enableCopyAllHeaderButton           = salesQuotationTableType.mayQuotationBeCopied();
                    }

                    if (!enableChangeReasonCode)
                    {
                        enableChangeReasonCode = !localSalesQuotationTable.checkUpdate(false);
                    }

                    localSalesQuotationTable = salesQuotationTable_ds.getNext();
                }
            }
            else
            {
                return false;
            }

            if (_buttonConvert2customer)
            {
                _buttonConvert2customer.enabled(enableConvert2Customer);
            }

            if (_buttonAlternativeQuotations)
            {
                _buttonAlternativeQuotations.enabled(enableAlternativeQuotationsButton);
            }

            if (_buttonCopyAllHeader)
            {
                _buttonCopyAllHeader.enabled(enableCopyAllHeaderButton);
            }

            if (_salesQuotationChangeReasonCode)
            {
                _salesQuotationChangeReasonCode.enabled(enableChangeReasonCode);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFunctionButtons</Name>
				<Source><![CDATA[
    void enableFunctionButtons(SalesQuotationTable          _salesQuotationTable,
                               FormFunctionButtonControl    buttonConvert2customer = null,
                               FormFunctionButtonControl    buttonAlternativeQuotations = null,
                               FormFunctionButtonControl    buttonCopyAllHeader = null,
                               FormFunctionButtonControl    salesQuotationChangeReasonCode = null)
    {
        boolean                     enableConvert2Customer              = buttonConvert2customer ? false : true;
        boolean                     enableAlternativeQuotationsButton   = buttonAlternativeQuotations ? false : true;
        boolean                     enableCopyAllHeaderButton           = buttonCopyAllHeader ? false : true;

        SalesQuotationTable localSalesQuotationTable = _salesQuotationTable;

        SalesQuotationTableType salesQuotationTableType = localSalesQuotationTable.type();

        enableConvert2Customer              = salesQuotationTableType.mayConvert2Customer();
        enableAlternativeQuotationsButton   = salesQuotationTableType.mayQuotationBeLinked()
                                                && (!localSalesQuotationTable.isTemplate());
        enableCopyAllHeaderButton = salesQuotationTableType.mayQuotationBeCopied();
        boolean enableChangeReasonCode = !localSalesQuotationTable.checkUpdate(false);

        if (buttonConvert2customer)
        {
            buttonConvert2customer.enabled(enableConvert2Customer);
        }

        if (buttonAlternativeQuotations)
        {
            buttonAlternativeQuotations.enabled(enableAlternativeQuotationsButton);
        }

        if (buttonCopyAllHeader)
        {
            buttonCopyAllHeader.enabled(enableCopyAllHeaderButton);
        }

        if (salesQuotationChangeReasonCode)
        {
            salesQuotationChangeReasonCode.enabled(enableChangeReasonCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFields</Name>
				<Source><![CDATA[
    public void enableHeaderFields(SalesQuotationTable       _salesQuotationTable)

    {
        FormDataSource salesQuotationTable_ds = FormDataUtil::getFormDataSource(_salesQuotationTable);
        SalesQuotationTable localSalesQuotationTable = salesQuotationTable_ds.getFirst(true);

        if (localSalesQuotationTable)
        {
            SalesQuotationTableType salesQuotationTableType = localSalesQuotationTable.type();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineDeliverNowFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the deliver now quantity or catch weight quantity field.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    A table buffer that contains the current <c>SalesQuotationLine</c> record.
    /// </param>
    /// <param name="_enable">
    ///    A Boolean value indicating whether to enable the appropriate sales qty field.
    /// </param>
    public void enableLineDeliverNowFields(SalesQuotationLine _salesQuotationLine, boolean _enable)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_salesQuotationLine.ItemId);

        enableDSField(FormDataUtil::getFormDataSource(_salesQuotationLine), fieldNum(SalesQuotationLine, SalesDeliverNow), _enable && !isCWItem);
        enableDSField(FormDataUtil::getFormDataSource(_salesQuotationLine), fieldNum(SalesQuotationLine, PdsCWDeliverNow), _enable && isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFields</Name>
				<Source><![CDATA[
    public void enableLineFields(SalesQuotationLine        _salesQuotationLine)

    {
        FormDataSource salesQuotationLine_ds = FormDataUtil::getFormDataSource(_salesQuotationLine);
        SalesQuotationLine localSalesQuotationLine = salesQuotationLine_ds.getFirst(true);

        if (localSalesQuotationLine)
        {
            SalesQuotationLineType salesQuotationLineType = localSalesQuotationLine.type();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLinePriceCalcButtons</Name>
				<Source><![CDATA[
    void enableLinePriceCalcButtons(SalesQuotationLine         _salesQuotationLine,
                                    FormFunctionButtonControl   buttonSuppItemCalc)
    {
        boolean                     enableDeleteQuotationButton = buttonSuppItemCalc ? false : true;

        SalesQuotationLine localSalesQuotationLine = _salesQuotationLine;

        enableDeleteQuotationButton = localSalesQuotationLine.type().enableSuppItem();

        if (buttonSuppItemCalc)
        {
            buttonSuppItemCalc.enabled(enableDeleteQuotationButton);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineRemainFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the remaining quantity or catch weight quantity field.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    A table buffer that contains the current <c>SalesQuotationLine</c> record.
    /// </param>
    /// <param name="_enable">
    ///    A Boolean value indicating whether to enable the appropriate sales qty field.
    /// </param>
    public void enableLineRemainFields(SalesQuotationLine _salesQuotationLine, boolean _enable)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_salesQuotationLine.ItemId);

        enableDSField(FormDataUtil::getFormDataSource(_salesQuotationLine), fieldNum(SalesQuotationLine, RemainSalesPhysical), _enable && !isCWItem);
        enableDSField(FormDataUtil::getFormDataSource(_salesQuotationLine), fieldNum(SalesQuotationLine, PdsCWRemainInventPhysical), _enable && isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineSalesQtyFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the Qty or catch weight quantity field.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    A table buffer that contains the current <c>SalesQuotationLine</c> record.
    /// </param>
    /// <param name="_enable">
    ///    A Boolean value indicating whether to enable the appropriate sales qty field.
    /// </param>
    public void enableLineSalesQtyFields(SalesQuotationLine _salesQuotationLine, boolean _enable)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_salesQuotationLine.ItemId);

        enableDSField(FormDataUtil::getFormDataSource(_salesQuotationLine), fieldNum(SalesQuotationLine, SalesQty), _enable && !isCWItem);
        enableDSField(FormDataUtil::getFormDataSource(_salesQuotationLine), fieldNum(SalesQuotationLine, PdsCWQty), _enable && isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProductModelLineButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the product model button.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// A table buffer that contains the current <c>SalesQuotationLine</c> records.
    /// </param>
    /// <param name="_productModelButton">
    /// The product model button to enable or disable.
    /// </param>
    void enableProductModelLineButton(SalesQuotationLine        _salesQuotationLine,
                                      FormMenuButtonControl     _productModelButton)
    {
        _productModelButton.enabled(!_salesQuotationLine.isCategoryBased());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateButtons</Name>
				<Source><![CDATA[
    void enableUpdateButtons(SalesQuotationTable        _salesQuotationTable,
                             FormFunctionButtonControl  buttonUpdateQuotation,
                             FormFunctionButtonControl  buttonUpdateConfirmation,
                             FormFunctionButtonControl  buttonUpdateLost,
                             FormFunctionButtonControl  buttonUpdateCancelled)
    {
        boolean                     enableQuotationButton       = buttonUpdateQuotation     ? false : true;
        boolean                     enableConfirmationButton    = buttonUpdateConfirmation  ? false : true;
        boolean                     enableLostButton            = buttonUpdateLost          ? false : true;
        boolean                     enableCancelledButton       = buttonUpdateCancelled     ? false : true;

        if (this.enableUpdateButtonsMultiselect(_salesQuotationTable, buttonUpdateQuotation, buttonUpdateConfirmation, buttonUpdateLost, buttonUpdateCancelled))
        {
            // Multiselect was applied
            return;
        }
        else
        {
            SalesQuotationTableCheckIfUpdateContract checkIfUpdatedContract = SalesQuotationTableCheckIfUpdateContract::newCheckAll();

            container canBeUpdated = _salesQuotationTable.checkIfUpdate(checkIfUpdatedContract.pack());
            SalesQuotationTableCanBeUpdatedContract canBeUpdatedContract = SalesQuotationTableCanBeUpdatedContract::create(canBeUpdated);

            enableQuotationButton       = canBeUpdatedContract.parmCanQuotationBeUpdated();
            enableConfirmationButton    = canBeUpdatedContract.parmCanConfirmationBeUpdated();
            enableLostButton            = canBeUpdatedContract.parmCanLostBeUpdated();
            enableCancelledButton       = canBeUpdatedContract.parmCanCancelledBeUpdated();
        }

        boolean isExternallyManaged = Project::isProjectExternallyManaged(_salesQuotationTable.ProjIdRef);
        boolean lockFieldsForProjectQuotations = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::ProjectQuotations) && isExternallyManaged;

        boolean isIntegrationOwnerDynamics365Sales = _salesQuotationTable.isIntegrationOwnerDynamics365Sales();

        if (buttonUpdateQuotation)
        {
            buttonUpdateQuotation.enabled(enableQuotationButton && !lockFieldsForProjectQuotations && !isIntegrationOwnerDynamics365Sales);
        }

        if (buttonUpdateConfirmation)
        {
            buttonUpdateConfirmation.enabled(enableConfirmationButton && !lockFieldsForProjectQuotations && !isIntegrationOwnerDynamics365Sales);
        }

        if (buttonUpdateLost)
        {
            buttonUpdateLost.enabled(enableLostButton && !lockFieldsForProjectQuotations && !isIntegrationOwnerDynamics365Sales);
        }

        if (buttonUpdateCancelled)
        {
            buttonUpdateCancelled.enabled(enableCancelledButton && !lockFieldsForProjectQuotations && !isIntegrationOwnerDynamics365Sales);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateButtonsMultiselect</Name>
				<Source><![CDATA[
    public boolean enableUpdateButtonsMultiselect(SalesQuotationTable        _salesQuotationTable,
                             FormFunctionButtonControl  buttonUpdateQuotation,
                             FormFunctionButtonControl  buttonUpdateConfirmation,
                             FormFunctionButtonControl  buttonUpdateLost,
                             FormFunctionButtonControl  buttonUpdateCancelled)
    {
        boolean                     lockCDSQuotations           = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::ProjectQuotations);
        boolean                     enableQuotationButton       = buttonUpdateQuotation     ? false : true;
        boolean                     enableConfirmationButton    = buttonUpdateConfirmation  ? false : true;
        boolean                     enableLostButton            = buttonUpdateLost          ? false : true;
        boolean                     enableCancelledButton       = buttonUpdateCancelled     ? false : true;

        FormDataSource salesQuotationTable_ds = FormDataUtil::getFormDataSource(_salesQuotationTable);
        SalesQuotationTable localSalesQuotationTable = salesQuotationTable_ds.getFirst(true);
        localSalesQuotationTable = localSalesQuotationTable? localSalesQuotationTable : salesQuotationTable_ds.cursor();
        
        if (localSalesQuotationTable)
        {
            while (localSalesQuotationTable)
            {
                if ((enableQuotationButton      == true) &&
                    (enableConfirmationButton   == true) &&
                    (enableLostButton           == true) &&
                    (enableCancelledButton      == true))
                {
                    break;
                }

                SalesQuotationTableType salesQuotationTableType = localSalesQuotationTable.type();
                boolean isExternallyManaged = Project::isProjectExternallyManaged(localSalesQuotationTable.ProjIdRef);

                if (!enableQuotationButton)
                {
                    enableQuotationButton       = salesQuotationTableType.mayQuotationBeUpdated() && !(isExternallyManaged && lockCDSQuotations);
                }

                if (!enableConfirmationButton)
                {
                    enableConfirmationButton    = salesQuotationTableType.mayConfirmationBeUpdated()  && !(isExternallyManaged && lockCDSQuotations);
                }

                if (!enableLostButton)
                {
                    enableLostButton            = salesQuotationTableType.mayLostBeUpdated() && !(isExternallyManaged && lockCDSQuotations);
                }

                if (!enableCancelledButton)
                {
                    enableCancelledButton       = salesQuotationTableType.mayCancelledBeUpdated() && !(isExternallyManaged && lockCDSQuotations);
                }

                localSalesQuotationTable = salesQuotationTable_ds.getNext();
            }
        }
        else
        {
            return false;
        }

        if (buttonUpdateQuotation)
        {
            buttonUpdateQuotation.enabled(enableQuotationButton);
        }

        if (buttonUpdateConfirmation)
        {
            buttonUpdateConfirmation.enabled(enableConfirmationButton);
        }

        if (buttonUpdateLost)
        {
            buttonUpdateLost.enabled(enableLostButton);
        }

        if (buttonUpdateCancelled)
        {
            buttonUpdateCancelled.enabled(enableCancelledButton);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateButtonsProject</Name>
				<Source><![CDATA[
    void enableUpdateButtonsProject(SalesQuotationTable        _salesQuotationTable,
                                    FormFunctionButtonControl  buttonLinkAndTransferToProject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuotationIdFromCaller</Name>
				<Source><![CDATA[
    public QuotationIdBase getQuotationIdFromCaller(Object _formRunCallerObject)
    {
        if (_formRunCallerObject)
        {
            if (formHasMethod(_formRunCallerObject, identifierStr(parmQuotationId)))
            {
                return _formRunCallerObject.parmQuotationId();
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
        advancedStartup = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    void  initValues()
    {
        CustTable       custTable;
        VendAccount     vendAccount;

        salesQuotationTable.QuotationType   = this.quotationType() ? this.quotationType() : this.defaultQuotationType();
        salesQuotationTable.CustAccount     = this.custAccount();
        salesQuotationTable.BusRelAccount   = this.busRelAccount();
        salesQuotationTable.LanguageId      = this.languageId();

        if (source)
        {
            if (source.TableId == tableNum(smmTMCallListTable))
            {
                salesQuotationTable.initFromSmmTMCallListTable(source);
            }

            else if (source.TableId == tableNum(smmCampaignSelection))
            {
                salesQuotationTable.initFromSmmCampaignSelection(source);
            }

            else if (source.TableId == tableNum(smmOpportunityTable))
            {
                salesQuotationTable.initFromSmmOpportunityTable(source);
            }
            else if (source.TableId == tableNum(smmBusRelTable))
            {
                smmBusRelTable busRelTable = source;
                if (busRelTable.BusRelTypeId != smmBusRelTypeGroup::getCustomerType())
                {
                    salesQuotationTable.BusRelAccount = busRelTable.BusRelAccount;
                    salesQuotationTable.initFromBusinessRelationTable();
                }
                else
                {
                    custTable = CustTable::findByPartyRecId(busRelTable.Party);
                }
            }
            if (source.TableId == tableNum(CustTable) || custTable)
            {
                if (!custTable)
                {
                    custTable = source;
                }
                salesQuotationTable.CustAccount = custTable.AccountNum;
                salesQuotationTable.transferCustAccount_Server(this.parmInitFromCustTable(true));
            }
        }

        if (salesQuotationTable.ContactPersonId && ! salesQuotationTable.BusRelAccount &&
            (salesQuotationTable.TemplateActive || ! salesQuotationTable.CustAccount))
        {
            ContactPerson contactPerson = ContactPerson::find(salesQuotationTable.ContactPersonId);

            smmBusRelTable smmBusRelTable = smmBusRelTable::findByParty(contactPerson.ContactForParty);

            if (smmBusRelTable.RecId)
            {
                salesQuotationTable.BusRelAccount = smmBusRelTable.BusRelAccount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    CustInvoiceAccount  invoiceAccount(CustInvoiceAccount  _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;
        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanced</Name>
				<Source><![CDATA[
    boolean isAdvanced(boolean _advancedStartup = advancedStartup)
    {
        advancedStartup = _advancedStartup;

        return advancedStartup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    CustLanguageId  languageId(CustLanguageId _languageId = languageId)
    {
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueElementName
    abstract IdentifierName lastValueElementName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueType
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueUserId
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActive</Name>
				<Source><![CDATA[
    boolean linkActive()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFormResearchAfterDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the form must be researched after the currently selected order line is deleted.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The currently selected sales quotation line.
    /// </param>
    /// <returns>
    /// true for order lines with multiple deliveries; otherwise, false.
    /// </returns>
    public boolean mustFormResearchAfterDelete(SalesQuotationLine _salesQuotationLine)
    {
        return _salesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source, QuotationType _quotationType = QuotationType::Sales)
    {
        if (_source.TableId == tableNum(SalesQuotationTable))
        {
            salesQuotationTable = _source;
        }

        // Set source, this is the element.args().record() in the calling form
        source = _source;

        createFromTemplate = false;

        this.quotationType(_quotationType);

        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromTemplateGroupId</Name>
				<Source><![CDATA[
    SalesQuotationTemplateGroupId parmFromTemplateGroupId(SalesQuotationTemplateGroupId   _createFromTemplateGroupId = createFromTemplateGroupId)
    {
        createFromTemplateGroupId = _createFromTemplateGroupId;

        return createFromTemplateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromTemplateName</Name>
				<Source><![CDATA[
    QuotationTemplateName parmFromTemplateName(QuotationTemplateName   _createFromTemplateName = createFromTemplateName)
    {
        createFromTemplateName = _createFromTemplateName;

        return createFromTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitFromCustTable</Name>
				<Source><![CDATA[
    public boolean parmInitFromCustTable(boolean _initFromCustTable = initFromCustTable)
    {
        initFromCustTable = _initFromCustTable;

        return initFromCustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuotationPriceConversion</Name>
				<Source><![CDATA[
    SalesQuotationPriceConversion parmQuotationPriceConversion(SalesQuotationPriceConversion   _quotationPriceConversion = quotationPriceConversion)
    {
        quotationPriceConversion = _quotationPriceConversion;

        return quotationPriceConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable parmSalesQuotationTable()
    {
        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource</Name>
				<Source><![CDATA[
    public Common parmSource(Common _source = source)
    {
        source = _source;

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>project</Name>
				<Source><![CDATA[
    public boolean project()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesQuotationLine</Name>
				<Source><![CDATA[
    Query querySalesQuotationLine(Query querySalesQuotationLine)
    {
        return querySalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesQuotationTable</Name>
				<Source><![CDATA[
    Query querySalesQuotationTable(Query querySalesQuotationTable)
    {
        return querySalesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationType</Name>
				<Source><![CDATA[
    QuotationType quotationType(QuotationType _quotationType = quotationType)
    {
        quotationType = _quotationType;

        return quotationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the delivery schedule when an order or delivery line was modified.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The changed sales quotation line.
    /// </param>
    /// <remarks>
    /// This method is overloaded on the <c>SalesQuotationTableForm_Sales</c> class. When called on this
    /// base class it does nothing.
    /// </remarks>
    void refreshDeliverySchedule(SalesQuotationLine _salesQuotationLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSalesQuotationLine</Name>
				<Source><![CDATA[
    public void resetSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        LineNum lineNum = _salesQuotationLine.LineNum;
        _salesQuotationLine.data(newlyCreatedSalesQuotationLine);
        _salesQuotationLine.LineNum = lineNum;

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            MCRSalesQuotationLine mcrSalesQuotationLine = _salesQuotationLine.mcrSalesQuotationLine();
            MCRSalesQuotationLine mcrSalesQuotationLine_NewlyCreated = newlyCreatedSalesQuotationLine.mcrSalesQuotationLine();
            // Save off the Source ID so it can remain unchanged.
            MCRSourceID mcrSourceId = mcrSalesQuotationLine.SourceId;

            // Reassign the Source ID in case the mcrSalesQuotationLine_NewlyCreated buffer changes it.
            mcrSalesQuotationLine.data(mcrSalesQuotationLine_NewlyCreated);
            mcrSalesQuotationLine.SourceId = mcrSourceId;

            _salesQuotationLine.mcrPackMCRSalesQuotationLine(mcrSalesQuotationLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_Create</Name>
				<Source><![CDATA[
    public void salesQuotationLine_Create(SalesQuotationLine _salesQuotationLine)
    {
        this.setNewlyCreatedSalesQuotationLine(_salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_ValidateWrite</Name>
				<Source><![CDATA[
    boolean salesQuotationLine_ValidateWrite(SalesQuotationLine     _salesQuotationLine,
                                             InventDim              _inventDim)
    {
        boolean                         ret                             = true;

        if (!_salesQuotationLine.RecId && this.useAlternativeItem())
        {
            SalesAlternativeItem salesAlternativeItem = SalesAlternativeItem::newAlternativeItem(_salesQuotationLine);
            salesAlternativeItem.parmInventDim(_inventDim);

            if (salesAlternativeItem.existAlternativeItem())
            {
                ret = false;

                if (Box::okCancel(strFmt("@SYS63055", salesAlternativeItem.alternativeItemId(),
                                                      salesAlternativeItem.alternativeProductDimensionPrefix()), DialogButton::Ok) == DialogButton::Ok)
                {
                    ItemId itemId = salesAlternativeItem.alternativeItemId();
                    SalesQty salesQty = _salesQuotationLine.SalesQty;
                    QuotationProjTransType projTransType = _salesQuotationLine.ProjTransType;

                    this.resetSalesQuotationLine(_salesQuotationLine);

                    if (Project::Enabled())
                    {
                        EcoResProductDimGroupSetup::copyProductDimensionsForItem(itemId, _inventDim, _salesQuotationLine.inventDim());
                        _salesQuotationLine.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
                    }

                    _salesQuotationLine.ItemId      = itemId;
                    _salesQuotationLine.ProjTransType   = projTransType;
                    _salesQuotationLine.itemIdChanged();
                    _salesQuotationLine.LinePropertyId  = ProjLinePropertySetup::findLinePropertyId(_salesQuotationLine.salesQuotationTable().ProjIdRef,
                                                                                                    _salesQuotationLine.ProjCategoryId);

                    _inventDim = _salesQuotationLine.inventDim();

                    if (_salesQuotationLine.QuotationType == QuotationType::Project)
                    {
                        _salesQuotationLine.TaxItemGroup = ProjParameters::taxItemGroupItem(_salesQuotationLine.ProjCategoryId, _salesQuotationLine.ItemId);
                    }
                    else
                    {
                        _salesQuotationLine.TaxItemGroup = InventTable::find(itemId).salesTaxItemGroupId();
                    }

                    EcoResProductDimGroupSetup dimSetup = EcoResProductDimGroupSetup::newItemId(itemId);
                    dimSetup.copyProductDimensions(salesAlternativeItem.alternativeProductDimension(dimSetup, _inventDim), _inventDim);
                    _salesQuotationLine.setInventDimIdFromInventDim(_inventDim);
                    _salesQuotationLine.ProjDescription = InventTable::find(_salesQuotationLine.ItemId).defaultProductName();
                    _salesQuotationLine.SalesQty    = salesQty;

                    SalesQuotationLine::modifySalesQty(_salesQuotationLine,_inventDim);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_Write</Name>
				<Source><![CDATA[
    void salesQuotationLine_Write(SalesQuotationLine    salesQuotationLine)
    {
        SalesQty  salesQty = salesQuotationLine.SalesQty;

        if (Project::Enabled() && salesQty != salesQuotationLine.SalesQty)
        {
            salesQuotationLine.LineAmount = salesQuotationLine.calcLineAmount();
        }

        if (!SalesQuotationLineV2EntityUpdateRemainInventPhysicalFlight::instance().isEnabled())
        {
            InventMovement::bufferSetRemainQty(salesQuotationLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTable</Name>
				<Source><![CDATA[
    SalesQuotationTable salesQuotationTable(SalesQuotationTable     _salesQuotationTable = salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets line access on a <c>SalesQuotationLine</c> form data source.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The form data source to set access.
    /// </param>
    void setLineAccess(SalesQuotationLine _salesQuotationLine)
    {
        FormDataSource  salesQuotationLine_ds = FormDataUtil::getFormDataSource(_salesQuotationLine);

        if (salesQuotationLine_ds)
        {
            this.enableLineSalesQtyFields(_salesQuotationLine, _salesQuotationLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries);
            this.enableLineDeliverNowFields(_salesQuotationLine, true);
            this.enableLineRemainFields(_salesQuotationLine, true);
            salesQuotationLine_ds.object(fieldNum(SalesQuotationLine,SalesUnit              )).allowEdit(_salesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLine);
            salesQuotationLine_ds.object(fieldNum(SalesQuotationLine,ReceiptDateRequested   )).allowEdit(_salesQuotationLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries);
            salesQuotationLine_ds.object(fieldNum(SalesQuotationLine,ShippingDateRequested  )).allowEdit(_salesQuotationLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries);
            salesQuotationLine_ds.object(fieldNum(SalesQuotationLine,LineAmount             )).allowEdit(_salesQuotationLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewlyCreatedSalesQuotationLine</Name>
				<Source><![CDATA[
    protected void setNewlyCreatedSalesQuotationLine(SalesQuotationLine _newlyCreatedSalesQuotationLine)
    {
        newlyCreatedSalesQuotationLine.data(_newlyCreatedSalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTouched</Name>
				<Source><![CDATA[
    void setTouched(SalesQuotationTable _salesQuotationTable)
    {
        if (_salesQuotationTable.custTable_CustAccount().shouldEstimateBeCalculated())
        {
            _salesQuotationTable.Touched = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTemplateTab</Name>
				<Source><![CDATA[
    public boolean showTemplateTab()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls whether the item in question should be replaced with alternative item set up in the item
    ///    details form.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    As a rule the alternative item setup made in the Item Details form should be used.However in
    ///    special cases, for example, delivery schedules, this default behavior can be overridden.
    /// </remarks>
    public boolean useAlternativeItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationTableForm construct(QuotationType      _quotationType,
                                             Common             _source)
    {
        if (_source.TableId == tableNum(SalesQuotationLine))
        {
            return new SalesQuotationTableForm_DlvSchedule(_source);
        }

        SalesQuotationTypeFactoryAttribute  attribute       = new SalesQuotationTypeFactoryAttribute(_quotationType);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_source);
        SalesQuotationTableForm             instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(SalesQuotationTableForm), attribute, instantiation) as SalesQuotationTableForm;

        if (!instance)
        {
			throw error(strFmt("@SYS84623", classStr(SalesQuotationTableForm), enum2str(_quotationType)));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  args)
    {
        new MenuFunction(menuitemDisplayStr(SalesQuotationTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySalesQty</Name>
				<Source><![CDATA[
    public static void modifySalesQty(SalesQuotationLine   _salesQuotationLine,
                                      InventDim            _inventDim)
    {
        InventMovement::setMinMaxQty(_salesQuotationLine);

        _salesQuotationLine.salesPurchLineInterface().resetPriceAgreement();
        _salesQuotationLine.initSalesQty();
        _salesQuotationLine.setPriceDisc(_inventDim);
        _salesQuotationLine.calcPackingUnitQty(_inventDim);

        InventMovement::bufferSetTransQtyUnit(_salesQuotationLine);

        _salesQuotationLine.setInventDeliverNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlTaxIntegrationFieldsForTableAndLine</Name>
				<Source><![CDATA[
    internal void controlTaxIntegrationFieldsForTableAndLine(
        FormDataSource _salesQuotationTable_ds,
        FormDataSource _salesQuotationLine_ds)
    {
        _salesQuotationTable_ds.object(fieldNum(SalesQuotationTable, OverrideSalesTax)).visible(true);
        _salesQuotationLine_ds.object(fieldNum(SalesQuotationLine, TaxGroup)).allowEdit(false);
        _salesQuotationLine_ds.object(fieldNum(SalesQuotationLine, TaxItemGroup)).allowEdit(false);
        _salesQuotationLine_ds.object(fieldNum(SalesQuotationLine, OverrideSalesTax)).visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlTaxIntegrationFieldsForLine</Name>
				<Source><![CDATA[
    internal void controlTaxIntegrationFieldsForLine(
        SalesQuotationLine _salesQuotationLine)
    {
        FormDataSource salesQuotationLine_ds = FormDataUtil::getFormDataSource(_salesQuotationLine);
        salesQuotationLine_ds.object(fieldNum(SalesQuotationLine, TaxGroup)).allowEdit(_salesQuotationLine.OverrideSalesTax == NoYes::Yes);
        salesQuotationLine_ds.object(fieldNum(SalesQuotationLine, TaxItemGroup)).allowEdit(_salesQuotationLine.OverrideSalesTax == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOverrideSalesTax</Name>
				<Source><![CDATA[
    internal void modifiedOverrideSalesTax(
        SalesQuotationLine _salesQuotationLine)
    {
        FormDataSource salesQuotationLine_ds = FormDataUtil::getFormDataSource(_salesQuotationLine);
        salesQuotationLine_ds.object(fieldNum(SalesQuotationLine, TaxGroup)).allowEdit(_salesQuotationLine.OverrideSalesTax == NoYes::Yes);
        salesQuotationLine_ds.object(fieldNum(SalesQuotationLine, TaxItemGroup)).allowEdit(_salesQuotationLine.OverrideSalesTax == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadTableAndLines</Name>
				<Source><![CDATA[
    internal void rereadTableAndLines(
        FormDataSource _salesQuotationTable_ds,
        FormDataSource _salesQuotationLine_ds)
    {
        _salesQuotationTable_ds.reRead();
        _salesQuotationLine_ds.research(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>