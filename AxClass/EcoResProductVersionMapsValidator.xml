<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVersionMapsValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Framework.Analytics.Shared;
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The <c>EcoResProductVersionMapsValidator</c> class validates whether any maps that have the
/// Product Version dimension, have not mapped the version field on the mapped tables and views.
/// The class contains extension points to ignore modules and/or maps to be ignored for this validation,.
/// </summary>
public final class EcoResProductVersionMapsValidator
{
    private boolean reportErrors;

    private Set     mapsToIgnore;
    private Set     modulesToIgnore;

    private int     mapErrorCount;

    private EcoResInstrumentationLogger instrumentationLogger;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMapsToIgnoreSet</Name>
				<Source><![CDATA[
    private void buildMapsToIgnoreSet()
    {
        using (var activityContext = this.instrumentationLogger().featureValidationActivities().buildMapsToIgnoreSet())
        {
            mapsToIgnore = new Set(Types::String);
        
            this.addMapsToIgnore(mapsToIgnore);

            this.instrumentationLogger().featureValidationActivities().builtMapsToIgnoreSet(activityContext, mapsToIgnore.elements());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMapsToIgnore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of <c>TableMap</c> objects that should be ignored for this check.
    /// </summary>
    /// <returns>
    /// The set of maps to ignore from being validated.
    /// </returns>
    /// <remarks>
    /// This is an extension point, where extending models can add other maps that need not be included in the validation.
    /// An extending model must only add a map name to this set if the map must be skipped for the version dimension field check,
    /// and that will not lead to incorrect behavior when the product version dimension feature is enabled; otherwise the map must be fixed to include the version field mapping.
    /// </remarks>
    protected Set addMapsToIgnore(Set _mapsToIgnore)
    {
        return _mapsToIgnore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesToIgnoreSet</Name>
				<Source><![CDATA[
    private void buildModulesToIgnoreSet()
    {
        using (var activityContext = this.instrumentationLogger().featureValidationActivities().buildModulesToIgnoreSet())
        {
            modulesToIgnore = new Set(Types::String);

            this.addModuleReferencesToIgnore();

            modulesToIgnore = this.addModulesToIgnore(modulesToIgnore);

            this.instrumentationLogger().featureValidationActivities().builtModulesToIgnoreSet(activityContext, modulesToIgnore.elements());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addModulesToIgnore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a set of module names, that should be ignored when validating the maps.
    /// </summary>
    /// <returns>
    /// The set of module names to ignore, from being validated.
    /// </returns>
    /// <remarks>
    /// This is an extension point, to add module names to the set to avoid the module from the validation.
    /// An extending model must only add its name to the set if the extension model must be skipped for the version dimension field check on the maps in that module,
    /// and that will not lead to incorrect behavior when the product version dimension feature is enabled; otherwise the maps in the extensions must be fixed to map the version fields.
    /// </remarks>
    protected Set addModulesToIgnore(Set _modulesToIgnore)
    {
        return _modulesToIgnore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addModuleReferencesToIgnore</Name>
				<Source><![CDATA[
    private void addModuleReferencesToIgnore()
    {
        var thisClassInfo   = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetClass(classId2Name(classIdGet(this)));
        var thisClassType   = thisClassInfo.GetType();
        str thisModuleName  = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetModuleOfMetadataArtifact(thisClassInfo.Name, thisClassType);

        modulesToIgnore.add(thisModuleName);

        var thisModelEnumerator = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetModelsOfMetadataArtifact(thisClassInfo.Name, thisClassType).GetEnumerator();

        if (thisModelEnumerator.MoveNext())
        {
            var thisModelInfo = thisModelEnumerator.Current;

            var moduleReferenceEnumerator = thisModelInfo.ModuleReferences.GetEnumerator();

            while (moduleReferenceEnumerator.MoveNext())
            {
                str moduleReference = moduleReferenceEnumerator.Current;

                modulesToIgnore.add(moduleReference);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVersionFieldsForMap</Name>
				<Source><![CDATA[
    private List getVersionFieldsForMap(str _moduleName, str _mapName)
    {
        AxMap tableMapInfo = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetMap(_mapName);

        List versionFields;
        var mapFieldsEnumerator = tableMapInfo.Fields.getEnumerator();

        while (mapFieldsEnumerator.moveNext())
        {
            AxMapBaseField mapField = mapFieldsEnumerator.Current;

            if(mapField.ExtendedDataType == extendedTypeStr(EcoResVersionName) || mapField.ExtendedDataType == extendedTypeStr(EcoResItemVersionName))
            {
                if (!versionFields)
                {
                    versionFields = new List(Types::String);

                }
                versionFields.addEnd(mapField.Name);
            }
        }

        return versionFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColorFieldsForMap</Name>
				<Source><![CDATA[
    private List getColorFieldsForMap(str _moduleName, str _mapName)
    {
        AxMap   tableMapInfo = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetMap(_mapName);
        List    colorFields;
        var     mapFieldsEnumerator = tableMapInfo.Fields.getEnumerator();

        while (mapFieldsEnumerator.moveNext())
        {
            AxMapBaseField mapField = mapFieldsEnumerator.Current;

            if(mapField.ExtendedDataType == extendedTypeStr(EcoResColorName) || mapField.ExtendedDataType == extendedTypeStr(EcoResItemColorName))
            {
                if (!colorFields)
                {
                    colorFields = new List(Types::String);

                }
                colorFields.addEnd(mapField.Name);
            }
        }

        return colorFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMapsInModule</Name>
				<Source><![CDATA[
    private boolean validateMapsInModule(str _moduleToValidate)
    {
        boolean isModuleValid = true;
 
        using (var activityContext = this.instrumentationLogger().featureValidationActivities().buildMapsToIgnoreSet())
        {
            var tableMapsInModuleEnumerator = AggregateMetadataHelper::MetadataProvider.Maps.ListObjects(_moduleToValidate).getEnumerator();

            while (tableMapsInModuleEnumerator.moveNext())
            {
                str mapBeingValidated = tableMapsInModuleEnumerator.Current;

                if (mapsToIgnore.in(mapBeingValidated))
                {
                    continue;
                }

                List versionFieldsInMap = this.getVersionFieldsForMap(_moduleToValidate, mapBeingValidated);
                if (!versionFieldsInMap)
                {
                    continue;
                }

                List colorFieldsInMap = this.getColorFieldsForMap(_moduleToValidate, mapBeingValidated);

                var modulesBeingCheckedForMappingsEnumerator = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetInstalledModuleNamesInSortedOrder().GetEnumerator();
                while (modulesBeingCheckedForMappingsEnumerator.MoveNext())
                {
                    str currentModuleName = modulesBeingCheckedForMappingsEnumerator.Current;

                    if (modulesToIgnore.in(currentModuleName))
                    {
                        continue;
                    }

                    var tableEnumerator = AggregateMetadataHelper::MetadataProvider.Tables.ListObjects(currentModuleName).getEnumerator();
                    while (tableEnumerator.moveNext())
                    {
                        str currentTableName = tableEnumerator.Current;

                        isModuleValid = isModuleValid && this.validateTable(currentModuleName, currentTableName, mapBeingValidated, versionFieldsInMap, colorFieldsInMap);
                    }

                    var tableMapEnumerator = AggregateMetadataHelper::MetadataProvider.Maps.ListObjects(currentModuleName).getEnumerator();
                    while (tableMapEnumerator.moveNext())
                    {
                        str currentTableMapName = tableMapEnumerator.Current;

                        isModuleValid = isModuleValid && this.validateTableMap(currentModuleName, currentTableMapName, mapBeingValidated, versionFieldsInMap, colorFieldsInMap);
                    }

                    var viewEnumerator = AggregateMetadataHelper::MetadataProvider.Views.ListObjects(currentModuleName).getEnumerator();
                    while (viewEnumerator.moveNext())
                    {
                        str currentViewName = viewEnumerator.Current;

                        isModuleValid = isModuleValid && this.validateView(currentModuleName, currentViewName, mapBeingValidated, versionFieldsInMap, colorFieldsInMap);
                    }

                    var dataEntityEnumerator = AggregateMetadataHelper::MetadataProvider.DataEntityViews.ListObjects(currentModuleName).getEnumerator();
                    while (dataEntityEnumerator.moveNext())
                    {
                        str currentDataEntityName = dataEntityEnumerator.Current;

                        isModuleValid = isModuleValid && this.validateDataEntityView(currentModuleName, currentDataEntityName, mapBeingValidated, versionFieldsInMap, colorFieldsInMap);
                    }
                }
            }
            this.instrumentationLogger().featureValidationActivities().validatedModule(activityContext, _moduleToValidate, isModuleValid);
        }

        return isModuleValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDataEntityView</Name>
				<Source><![CDATA[
    private boolean validateDataEntityView(str _moduleName, str _dataEntityViewName, str _mapName, List _versionFieldsInMap, List _colorFieldsInMap)
    {
        AxDataEntityView tableInfo = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetDataEntityView(_dataEntityViewName);

        if (tableInfo.IsObsolete)
        {
            return true;
        }

        return this.validateMapping(_moduleName, _dataEntityViewName, _mapName, _versionFieldsInMap, _colorFieldsInMap, tableInfo.Mappings.GetEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTable</Name>
				<Source><![CDATA[
    private boolean validateTable(str _moduleName, str _tableName, str _mapName, List _versionFieldsInMap, List _colorFieldsInMap)
    {
        AxTable tableInfo = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetTable(_tableName);

        if (tableInfo.IsKernelTable || tableInfo.IsObsolete)
        {
            return true;
        }

        return this.validateMapping(_moduleName, _tableName, _mapName, _versionFieldsInMap, _colorFieldsInMap, tableInfo.Mappings.GetEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTableMap</Name>
				<Source><![CDATA[
    private boolean validateTableMap(str _moduleName, str _tableMapName, str _mapName, List _versionFieldsInMap, List _colorFieldsInMap)
    {
        AxMap tableMapInfo = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetMap(_tableMapName);

        if (tableMapInfo.IsObsolete)
        {
            return true;
        }

        return this.validateMapping(_moduleName, _tableMapName, _mapName, _versionFieldsInMap, _colorFieldsInMap, tableMapInfo.Mappings.GetEnumerator(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateView</Name>
				<Source><![CDATA[
    private boolean validateView(str _moduleName, str _viewName, str _mapName, List _versionFieldsInMap, List _colorFieldsInMap)
    {
        AxView viewInfo = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetView(_viewName);

        return this.validateMapping(_moduleName, _viewName, _mapName, _versionFieldsInMap, _colorFieldsInMap, viewInfo.Mappings.GetEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMapping</Name>
				<Source><![CDATA[
    private boolean validateMapping(str _moduleName, str _tableName, str _mapName, List _versionFieldsInMap, List _colorFieldsInMap, System.Collections.IEnumerator _mappingEnumerator, boolean _isMap = false)
    {
        if (!_colorFieldsInMap.empty() && !this.isDimensionMapped(extendedTypeStr(EcoResColorName), _moduleName, _tableName, _mapName, _colorFieldsInMap, _mappingEnumerator, _isMap, false))
        {
            return true;
        }
        else 
        {
            return this.isDimensionMapped(extendedTypeStr(EcoResVersionName), _moduleName, _tableName, _mapName, _versionFieldsInMap, _mappingEnumerator, _isMap, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionMapped</Name>
				<Source><![CDATA[
    private boolean isDimensionMapped(str _dimensionType, str _moduleName, str _tableName, str _mapName, List _dimensionFieldsInMap, System.Collections.IEnumerator _mappingEnumerator, boolean _isMap, boolean _reportErrors)
    {
        boolean isMappingCorrect = true;

        while (_mappingEnumerator.moveNext())
        {
            AxTableMapping currentMapping = _mappingEnumerator.Current;

            if (currentMapping.MappingTable == _mapName)
            {
                ListEnumerator dimensionFieldsInMapEnumerator = _dimensionFieldsInMap.GetEnumerator();

                while (dimensionFieldsInMapEnumerator.moveNext())
                {
                    str dimensionFieldInMap = dimensionFieldsInMapEnumerator.Current();

                    if (_isMap)
                    {
                        ListEnumerator dimensionFieldsInCurrentMapEnumerator;
                        
                        switch (_dimensionType)
                        {
                            case extendedTypeStr(EcoResColorName):
                                dimensionFieldsInCurrentMapEnumerator = this.getColorFieldsForMap(_moduleName, _tableName).getEnumerator();
                                break;
                            case extendedTypeStr(EcoResVersionName):
                                dimensionFieldsInCurrentMapEnumerator = this.getVersionFieldsForMap(_moduleName, _tableName).getEnumerator();
                                break;
                            default:
                                checkFailed(strfmt("@SCM:InvalidDimensionTypeToValidate", _dimensionType, _moduleName,  _mapName));
                        }

                        while (dimensionFieldsInCurrentMapEnumerator.moveNext())
                        {
                            str dimensionFieldInCurrentMap = dimensionFieldsInCurrentMapEnumerator.Current();

                            if (!SysDictField::isFieldMapped(_tableName, _mapName, dimensionFieldInCurrentMap)
                                    && !SysDictField::isFieldMapped(_mapName, _tableName, dimensionFieldInCurrentMap))
                            {
                                if (_reportErrors)
                                {
                                    this.reportUnmappedField(_moduleName, _tableName, dimensionFieldInCurrentMap, _mapName);
                                }
                                isMappingCorrect = false;
                                break;
                            }
                        }
                    }
                    else if (!SysDictField::isFieldMapped(_tableName, _mapName, dimensionFieldInMap)
                        && !SysDictField::isFieldMapped(_mapName, _tableName, dimensionFieldInMap))
                    {
                        if (_reportErrors)
                        {
                            this.reportUnmappedField(_moduleName, _tableName, dimensionFieldInMap, _mapName);
                        }
                        isMappingCorrect = false;
                        break;
                   }
                }
            }
        }

        return isMappingCorrect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMappingFieldMapped</Name>
				<Source><![CDATA[
    private boolean isMappingFieldMapped(
        TableName   _mapName,
        TableName   _mappedTableName,
        FieldName   _mapFieldName)
    {
        TableId             mapId           = tableName2Id(_mapName);
        TableId             mappedTableId   = tableName2Id(_mappedTableName);
        FieldId             mapFieldId      = fieldName2Id(mappedTableId, _mapFieldName);

        return SysDictField::findMappingFieldId(mapId, mapFieldId, mappedTableId) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportUnmappedField</Name>
				<Source><![CDATA[
    private void reportUnmappedField(str _moduleName, str _mapName, str _fieldName, str _mappedTableName)
    {
        if (reportErrors)
        {
            checkFailed(strFmt("@SCM:ProductVersionMapValidationError",
                            _modulename, _mappedTableName, _fieldName, _mapName));
        }

        mapErrorCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFeatureEnablement</Name>
				<Source><![CDATA[
    private boolean validateFeatureEnablement()
    {
        using (var activityContext = this.instrumentationLogger().featureValidationActivities().validateModules())
        {
            boolean canEnable = true;

            var moduleEnumerator = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetInstalledModuleNamesInSortedOrder().GetEnumerator();
            int validatedModuleCount = 0;

            while (moduleEnumerator.MoveNext())
            {
                str moduleName = moduleEnumerator.Current;

                if (modulesToIgnore.in(moduleName))
                {
                    continue;
                }

                validatedModuleCount++;

                canEnable = canEnable && this.validateMapsInModule(moduleName);
             }

            this.instrumentationLogger().featureValidationActivities().validatedModules(activityContext, canEnable, validatedModuleCount);
            this.instrumentationLogger().featureValidationActivities().shouldEnableFeature(activityContext, canEnable, mapErrorCount);

            return canEnable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private EcoResInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = EcoResInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableFeature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the feature can be enabled.
    /// </summary>
    /// <returns>
    /// true, if the feature can be enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean canEnableFeature()
    {
        using (var activityContext = this.instrumentationLogger().featureValidationActivities().canEnableFeature())
        {
            mapErrorCount = 0;

            boolean canEnable;

            if (!modulesToIgnore)
            {
                this.buildModulesToIgnoreSet();
            }

            if (!mapsToIgnore)
            {
                this.buildMapsToIgnoreSet();
            }

            canEnable = this.validateFeatureEnablement();

            this.instrumentationLogger().featureValidationActivities().shouldEnableFeature(activityContext, canEnable, mapErrorCount);

            return canEnable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportErrors</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public boolean parmReportErrors(boolean _reportErrors = reportErrors)
    {
        reportErrors = _reportErrors;

        return reportErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct as an instance of the <c>EcoResProductVersionMapsValidator</c> class.
    /// </summary>
    /// <returns>
    /// The class instance.
    /// </returns>
    [Hookable(false)]
    static public EcoResProductVersionMapsValidator construct()
    {
        return new EcoResProductVersionMapsValidator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>