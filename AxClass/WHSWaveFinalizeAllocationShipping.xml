<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveFinalizeAllocationShipping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>WHSWaveFinalizeAllocationShipping</c> is responsible for making sure all post allocation wave processes are run.
/// </summary>
class WHSWaveFinalizeAllocationShipping extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    WHSWaveTable            waveTable;
    WHSWaveId               waveId;
    WHSWaveExecutionID      waveExecutionId;
    WHSReleaseToWarehouseId releaseToWarehouseId;
    WHSWaveStepRefRecId     currentRunningWaveStepRecId;
    WHSWorkCreateId         workCreateId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        waveId,
        waveExecutionId,
        workCreateId,
        releaseToWarehouseId,
        currentRunningWaveStepRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ensureWaveProcessContinues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a batch job to run waves steps after allocation.
    /// </summary>
    private void ensureWaveProcessContinues()
    {
        var whsNextWaveStepTaskCreator = WHSNextWaveStepTaskCreator::newStandard(waveId, waveExecutionId, currentRunningWaveStepRecId, releaseToWarehouseId);

        if (!whsNextWaveStepTaskCreator.createTask())
        {
            throw error("@WAX:WaveNextBatchTaskCreationError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostEngine</Name>
				<Source><![CDATA[
    public void initFromPostEngine(WHSPostEngine _postEngine)
    {
        this.parmWaveId(_postEngine.parmWaveTable().WaveId);
        this.parmWaveExecutionId(_postEngine.parmWaveExecutionId());
        this.parmReleaseToWarehouseId(_postEngine.parmReleaseToWarehouseId());
        this.parmCurrentRunningWaveStep(_postEngine.parmCurrentRunningWaveStep());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentRunningWaveStep</Name>
				<Source><![CDATA[
    public WHSWaveStepRefRecId parmCurrentRunningWaveStep(WHSWaveStepRefRecId _currentRunningWaveStep = currentRunningWaveStepRecId)
    {
        currentRunningWaveStepRecId = _currentRunningWaveStep;

        return currentRunningWaveStepRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    public WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    public WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public  WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleErroredWave</Name>
				<Source><![CDATA[
    private void handleErroredWave(str _errorType)
    {
        this.cleanupErroredWave(_errorType);
        this.notifyOnWaveExecutionFailure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupErroredWave</Name>
				<Source><![CDATA[
    private void cleanupErroredWave(str _errorType)
    {
        var waveProcessingDataCleanup = WHSWaveProcessingDataCleanup::newForWaveExecution(waveId, waveExecutionId);
        waveProcessingDataCleanup.parmWaveCleanupType('FinalAllocationStep' + _errorType + 'Cleanup');
        waveProcessingDataCleanup.cleanupErroredWave();                
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyOnWaveExecutionFailure</Name>
				<Source><![CDATA[
    private void notifyOnWaveExecutionFailure()
    {
        WHSWaveTable erroredWaveTable = WHSWaveTable::find(waveId);
        str infologText = infolog.text();

        WhsWaveNotificationManager::instance().handleNotificationsOnWaveExecuted(erroredWaveTable, waveExecutionId, 0, infologText);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            waveTable = WHSWaveTable::find(waveId);

            using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newFinalizeAllocation(waveTable, waveExecutionId, funcName()))
            {
                try
                {
                    if (this.validateAllocationWasFinished())
                    {
                        ttsbegin;
                        var lockedControlRecord = WHSWaveStepController::createAndLockControlRecord(waveId, waveExecutionId, classStr(WHSWaveFinalizeAllocationShipping), waveTable.InventLocationId);

                        this.runFinalAllocationOperation();
                        this.ensureWaveProcessContinues();

                        lockedControlRecord.delete();
                        ttscommit;
                    }
                    else
                    {
                        if (WHSWaveUnprocessedPendingAllocationRecordsLoggingFlight::instance().isEnabled())
                        {
                            this.logUnprocessedPendingAllocationRecords();
                        }

                        // If we didn't process all the pending allocation records for the wave then we should display an error and cleanup the committed wave data.
                        error(strFmt("@WAX:WaveProcessingPreviousStepGenericError", WHSWaveTemplateLine::findByRecId(currentRunningWaveStepRecId).PostMethodName));

                        // This will also delete the WHSWaveStepController record.
                        this.handleErroredWave('IncompleteAllocation');
                    }
                }
                catch
                {
                    error("@WAX:WaveProcessingFinalAllocationStepUnexpectedError");

                    this.handleErroredWave('CatchAll');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFinalAllocationOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes allocation logic that cannot be threaded.
    /// </summary>
    private void runFinalAllocationOperation()
    {
        ttsBegin;
        
        waveTable = WhsPostEngineBase::setWorkBuildIdAndWaveProcessingStatus(waveId, workCreateId);
        
        var workCreate = WHSWorkCreateWave::construct(waveTable, workCreateId);
        workCreate.parmWaveExecutionId(waveExecutionId);
        workCreate.parmParmWaveId(waveId);
        workCreate.killFailedShipments();

        if (WHSParameters::find().WaveProgressLog)
        {
            WHSWaveMethodStatusHandler::newWaveMethodStatusHandler(waveTable.WaveId, methodStr(WHSPostEngineBase, allocateWave)).updateWaveStepProgressToCompleted();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUnprocessedPendingAllocationRecords</Name>
				<Source><![CDATA[
    internal void logUnprocessedPendingAllocationRecords()
    {
        WHSWavePendingAllocation pendingAllocation;
        
        Map pendingAllocationMessageMap = new Map(Types::Container, Types::String);
        str message;

        Counter pendingAllocationRecordsCount;

        const int limitPendingAllocationRecordsMessage = 10;

        while select pendingAllocation
            where pendingAllocation.WaveId    == waveId
            &&    pendingAllocation.Processed == NoYes::No
        {
            message = strFmt("@WAX:WaveAllocationWasNotProcessedLogMessage", pendingAllocation.ItemId, pendingAllocation.InventDimIdAboveLocation);

            pendingAllocationRecordsCount++;

            if (pendingAllocationRecordsCount > limitPendingAllocationRecordsMessage)
            {
                message += '\n';
                message += strFmt("@WAX:MultipleWaveNotAllocatedLogMessage", limitPendingAllocationRecordsMessage, tableStr(WHSWaveExecutionHistory));
            }

            pendingAllocationMessageMap.insert([pendingAllocation.ItemId, pendingAllocation.InventDimIdAboveLocation], message);

            if (pendingAllocationRecordsCount > limitPendingAllocationRecordsMessage)
            {
                break;
            }
        }

        if (pendingAllocationMessageMap.elements())
        {
            this.createMultipleWaveExecutionHistoryLines(pendingAllocationMessageMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMultipleWaveExecutionHistoryLines</Name>
				<Source><![CDATA[
    internal void createMultipleWaveExecutionHistoryLines(
        Map _pendingAllocationMessageMap)
    {
        if (WHSParameters::find().WaveExecutionHistoryLog)
        {
            UserConnection conn = new UserConnection();

            try
            {
                conn.ttsbegin();

                MapEnumerator me = _pendingAllocationMessageMap.getEnumerator();

                while (me.moveNext())
                {
                    WHSWaveExecutionHistory waveExecutionHistory;
                    waveExecutionHistory.setConnection(conn);

                    this.setWHSWaveExecutionHistoryValues(waveExecutionHistory, me.currentValue());
                    this.insertWaveExecutionHistoryBuffer(waveExecutionHistory);
                }
                conn.ttscommit();
            }
            finally
            {
                conn.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSWaveExecutionHistoryValues</Name>
				<Source><![CDATA[
    private void setWHSWaveExecutionHistoryValues(
        WHSWaveExecutionHistory _waveExecutionHistory,
        WHSMessage              _message)
    {
        _waveExecutionHistory.WaveId             = waveId;
        _waveExecutionHistory.WaveExecutionID    = waveExecutionId;

        if (!_waveExecutionHistory.InventLocationId)
        {
            _waveExecutionHistory.InventLocationId   = waveTable.InventLocationId;
        }

        _waveExecutionHistory.Message            = _message;
        _waveExecutionHistory.TransDateTime      = DateTimeUtil::utcNow();
        _waveExecutionHistory.Fail               = true;
        _waveExecutionHistory.WorkBuildId        = waveTable.WorkBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWaveExecutionHistoryBuffer</Name>
				<Source><![CDATA[
    private void insertWaveExecutionHistoryBuffer(WHSWaveExecutionHistory _waveExecutionHistory)
    {
        _waveExecutionHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllocationWasFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all allocation has been processed for the current wave run.
    /// </summary>
    /// <returns>
    /// true, if all pending allocation has been processed; otherwise, false.
    /// </returns>
    private boolean validateAllocationWasFinished()
    {
        WHSWavePendingAllocation    pendingAllocation;

        select firstOnly RecId from pendingAllocation
            where pendingAllocation.WaveId          == waveId
            &&    pendingAllocation.WaveExecutionID == waveExecutionId
            &&    pendingAllocation.Processed       == NoYes::No;

        return pendingAllocation.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWaveFinalizeAllocationShipping construct()
    {
        return new WHSWaveFinalizeAllocationShipping();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:WavePostAllocationBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    public BatchInfo batchInfo()
    {
        BatchInfo ret = super();

        ret.parmRetryable(false);
        ret.parmRetriesOnFailure(0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsWaveExecute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSWaveExecute);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>