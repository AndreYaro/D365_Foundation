<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsDocumentRoutingTemplateTranslator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Dynamics.ApplicationPlatform;

public final class WhsDocumentRoutingTemplateTranslator
{
    private WhsDocumentRoutingTranslator translator;           
    // Used by the "old" template regex approach where all of the sections are in the regex itself
    private static const str TemplateHeaderRegexString = @'(\s*\{\{Header\s*\r?\n(?<header>.*?)[ \t]*\}\}\r?\n?)?';
    private static const str TemplatePreRowRegexString = @'(?<preRow>(([^\{]|\{(?!\{))+))?';
    private static const str TemplateRowRegexString = @'(\{\{Row\s+(?<rowSettings>.+?)\r?\n(?<row>.*?)[ \t]*\}\}\r?\n?)?';
    private static const str TemplatePostRowRegexString = @'(?<postRow>(([^\{]|\{(?!\{))+)?)?';
    private static const str TemplateFooterRegexString = @'(\{\{Footer\s*\r?\n(?<footer>.*?)[ \t]*\}\})?\s*';
                                                     
    private static const str HeaderCaptureGroup = 'header';
    private static const str PreRowCaptureGroup = 'preRow';
    private static const str RowCaptureGroup = 'row';
    private static const str RowSettingsCaptureGroup = 'rowSettings';
    private static const str PostRowCaptureGroup = 'postRow';
    private static const str FooterCaptureGroup = 'footer';

    private str rawHeader, rawFooter, rawPreRow, rawPostRow, rawRow;
    private str translatedHeader, translatedFooter, translatedPreRow, translatedPostRow;
                
    // Used by the "new" template regex approach where the regex only matches the format of the section
    private static Regex NewTemplateRegex = new Regex(@'({{(?<sectionName>\w+)((?<sectionParams>[^\r\n]+?)?)\r?\n(?<textInSection>.*?)}}\r?\n?)',
                                                   RegexOptions::Singleline | RegexOptions::ExplicitCapture | RegexOptions::IgnoreCase | RegexOptions::Compiled);

    private static const str TextInSectionGroupName = 'textInSection';
    private static const str SectionNameGroupName = 'sectionName';
    private static const str SectionParamsGroupName = 'sectionParams';

    private static const str HeaderSection = 'Header';
    private static const str HeaderFirstSection = 'HeaderFirst';
    private static const str FooterSection = 'Footer';
    private static const str FooterFirstSection = 'FooterFirst';
    private static const str LabelStartSection = 'LabelStart';
    private static const str LabelEndSection = 'LabelEnd';
    private static const str RowSection = 'Row';
    private static const str PreRowSection = 'PreRow';
    private static const str PostRowSection = 'PostRow';
    private static const container NoTranslateSections = [RowSection];       
    
    private Map rawSectionsMap = new Map(Types::String, Types::String);
    private Map translatedSectionsMap = new Map(Types::String, Types::String);

    // General use variables/constants below
    private static const str RowSettingsTable = 'Table';
    private static const str RowSettingsStartY = 'StartY';
    private static const str RowSettingsStartYFirst = 'StartYFirst';
    private static const str RowSettingsIncY = 'IncY';
    private static const str RowSettingsRowsPerLabel = 'RowsPerLabel';
    private static const str RowSettingsMaxLabels = 'MaxLabels';
    private static const str RowSettingsRowsPerLabelFirst = 'RowsPerLabelFirst';

    private static const str PositionParams = 'position';
    private static const str PositionParamsRowNumber = 'rowNumber';
    private static const str PositionParamsGlobalRowNumber = 'globalRowNumber';
    private static const str PositionParamsLabelNumber = 'labelNumber';
    private static const str PositionParamsLabelCount = 'labelCount';
    private static const str PositionParamsYPos = 'YPos';

    private static const str LabelCountMagicString = '[[[LABELCOUNT]]]';
            
    private str rowTableDSName;
    private int rowsPerLabel, maxLabels, rowsPerLabelFirst;
    private int startY, startYFirst;    
    private int incY;    

    private WhsDocumentRoutingTemplateTranslatorIterator currentIterator;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTemplateAndQueryRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WhsDocumentRoutingTemplateTranslator newFromTemplateAndQueryRun(str _templateString, QueryRun _queryRun)
    {
        WhsDocumentRoutingTemplateTranslator templateTranslator = WhsDocumentRoutingTemplateTranslator::newFromTemplate(_templateString);
                
        templateTranslator.currentIterator = WhsDocumentRoutingTemplateTranslatorQueryRunIterator::newFromTemplateTranslatorAndQueryRun(templateTranslator, _queryRun, templateTranslator.rowTableDSName);

        return templateTranslator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTemplate</Name>
				<Source><![CDATA[
    private static WhsDocumentRoutingTemplateTranslator newFromTemplate(str _templateString)
    {
        Match templateMatch = NewTemplateRegex.Match(_templateString);             

        WhsDocumentRoutingTemplateTranslator templateTranslator = new WhsDocumentRoutingTemplateTranslator();        
        templateTranslator.extractSectionsFromRegexMatch(_templateString, templateMatch);         
      
        WhsDocumentRoutingTemplateTranslator::parseRowSettingsStr(templateTranslator, WhsDocumentRoutingTemplateTranslator::extractTemplatePart(templateMatch, RowSettingsCaptureGroup));

        return templateTranslator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractTemplatePart</Name>
				<Source><![CDATA[
    private static str extractTemplatePart(Match _templateMatch, str _groupName)
    {
        System.Text.RegularExpressions.Group templatePartGroup = _templateMatch.Groups.get_Item(_groupName);
        if (templatePartGroup && templatePartGroup.Success)
        {
            return templatePartGroup.Value;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractSectionsFromRegexMatch</Name>
				<Source><![CDATA[
    private void extractSectionsFromRegexMatch(str _templateString, Match _templateMatch)
    {
        boolean firstMatch = true;
        boolean beforeRow = true;
        int lastPosition = 1;

        System.Text.StringBuilder preRowText = PooledStringBuilder::GetInstance();
        System.Text.StringBuilder postRowText = PooledStringBuilder::GetInstance();
        
        if (!_templateMatch || !_templateMatch.Success)
        {
            // If there are no sections, then the complete template everything is a simple "preRow" text
            preRowText.Append(_templateString);            
        }

        while (_templateMatch && _templateMatch.Success)
        {
            if (_templateMatch.Index > lastPosition)
            {
                str textBeforeSection = subStr(_templateString, lastPosition, (_templateMatch.Index - lastPosition) + 1);
                if (beforeRow)
                {
                    preRowText.Append(textBeforeSection);
                }
                else
                {
                    postRowText.Append(textBeforeSection);
                }
            }

            lastPosition = _templateMatch.Index + _templateMatch.Length + 1;

            var sectionNameGroup = _templateMatch.Groups.get_Item(SectionNameGroupName);
            if (!sectionNameGroup || !sectionNameGroup.Success)
            {
                _templateMatch = _templateMatch.NextMatch();
                continue;
            }

            str sectionName = sectionNameGroup.Value;
            
            var textInSectionGroup = _templateMatch.Groups.get_Item(TextInSectionGroupName);
            str rawTextInSection = (textInSectionGroup && textInSectionGroup.Success) ? textInSectionGroup.Value : '';                      
            
            rawSectionsMap.add(sectionName, rawTextInSection);

            if (sectionName == RowSection)
            {
                var sectionParamsGroup = _templateMatch.Groups.get_Item(SectionParamsGroupName);
                str sectionParams = (sectionParamsGroup && sectionParamsGroup.Success) ? sectionParamsGroup.Value : '';

                WhsDocumentRoutingTemplateTranslator::parseRowSettingsStr(this, sectionParams);
                beforeRow = false;
            }

            _templateMatch = _templateMatch.NextMatch();
        }

        if (lastPosition > 1)
        {
            postRowText.Append(subStr(_templateString, lastPosition, strLen(_templateString)));
        }

        rawSectionsMap.add(PreRowSection, PooledStringBuilder::GetStringAndRelease(preRowText));
        rawSectionsMap.add(PostRowSection, PooledStringBuilder::GetStringAndRelease(postRowText));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseRowSettingsStr</Name>
				<Source><![CDATA[
    private static void parseRowSettingsStr(WhsDocumentRoutingTemplateTranslator _templateTranslator, str _rowSettingsStr)
    {
        List rowSettingsList = strSplit(_rowSettingsStr, ' \t');
        ListEnumerator rowSettingsEnum = rowSettingsList.getEnumerator();
        while (rowSettingsEnum.moveNext())
        {
            str currentRowSetting = rowSettingsEnum.current();
            currentRowSetting = strLRTrim(currentRowSetting);

            if (currentRowSetting == '')
            {
                continue;
            }
            
            str rowSettingName, rowSettingValue;
            [rowSettingName, rowSettingValue] = str2con(currentRowSetting, '=', false);            

            switch (rowSettingName)
            {
                case RowSettingsTable:
                    _templateTranslator.rowTableDSName = rowSettingValue;                    
                    break;

                case RowSettingsStartY:
                    _templateTranslator.startY = str2int(rowSettingValue);
                    break;

                case RowSettingsIncY:
                    _templateTranslator.incY = str2int(rowSettingValue);
                    break;

                case RowSettingsRowsPerLabel:
                    _templateTranslator.rowsPerLabel = str2Int(rowSettingValue);
                    break;

                case RowSettingsMaxLabels:
                    _templateTranslator.maxLabels = str2Int(rowSettingValue);
                    break;

                case RowSettingsRowsPerLabelFirst:
                    _templateTranslator.rowsPerLabelFirst = str2Int(rowSettingValue);
                    break;

                case RowSettingsStartYFirst:
                    _templateTranslator.startYFirst = str2Int(rowSettingValue);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>withTranslator</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WhsDocumentRoutingTemplateTranslator withTranslator(WhsDocumentRoutingTranslator _translator)
    {
        translator = _translator;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateTemplate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List translateTemplate()
    {
        var stringListLabelCollector = new WhsDocumentRoutingTemplateTranslatorStringListLabelCollector();
        this.translateTemplateToLabelCollector(stringListLabelCollector);
        return stringListLabelCollector.parmResultingLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateTemplateToLabelCollector</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void translateTemplateToLabelCollector(WhsDocumentRoutingTemplateTranslatorLabelCollector _labelCollector)
    {
        if (!currentIterator)
        {
            throw Error("@WAX:WhsDocumentRoutingTemplateTranslator_QueryRunMustBeSpecified");
        }

        if (!translator)
        {
            translator = WhsDocumentRoutingTranslator::construct();
        }
        
        if (!currentIterator.moveNext() || !this.getSection(RowSection, true))
        {
            this.updateTranslatorFromIterator();
            _labelCollector.collectLabel(translator.translate(this.getSection(HeaderSection, true) + this.getSection(PreRowSection, true) + this.getSection(PostRowSection, true) + this.getSection(FooterSection, true)));
            return;
        }
       
        this.updateTranslatorFromIterator();
        this.translateRawStrings();

        List labelBodies = this.buildLabelBodies();
        this.createLabelsFromBodies(_labelCollector, labelBodies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateRawStrings</Name>
				<Source><![CDATA[
    private void translateRawStrings()
    {     
        MapEnumerator rawSectionsEnumerator = rawSectionsMap.getEnumerator();
        while (rawSectionsEnumerator.moveNext())
        {
            if (conFind(NoTranslateSections, rawSectionsEnumerator.currentKey()) == 0)
            {
                translatedSectionsMap.add(rawSectionsEnumerator.currentKey(), translator.translate(rawSectionsEnumerator.currentValue()));
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTranslatorFromIterator</Name>
				<Source><![CDATA[
    private void updateTranslatorFromIterator()
    {
        currentIterator.updateTranslatorFromIterator(translator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLabelBodies</Name>
				<Source><![CDATA[
    private List buildLabelBodies()
    {
        int labelNumber = 1;
        int rowNumber = 0, globalRowNumber = 0;        
        System.Text.StringBuilder bodyStringBuilder = new System.Text.StringBuilder();
        RecId currentRecIdOfRowTable;

        List bodyStringBuilderList = new List(Types::Class);

        do
        {            
            this.updateTranslatorFromIterator();
            this.updateTranslatorFromPosition(labelNumber, rowNumber, globalRowNumber);

            if (!bodyStringBuilder)
            {
                bodyStringBuilder = new System.Text.StringBuilder();
            }
            bodyStringBuilder.Append(translator.translate(this.getSection(RowSection, true)));

            rowNumber++;
            globalRowNumber++;                
            
            int maxRowsOnCurrentLabel = (rowsPerLabelFirst && labelNumber == 1 ? rowsPerLabelFirst : rowsPerLabel);

            if (maxRowsOnCurrentLabel && (rowNumber mod maxRowsOnCurrentLabel) == 0)
            {
                bodyStringBuilderList.addEnd(bodyStringBuilder);
                bodyStringBuilder = null;

                labelNumber++;
                rowNumber = 0;

                if (maxLabels && labelNumber > maxLabels)
                {
                    break;
                }
            }
        }
        while (currentIterator.moveNext());

        if (bodyStringBuilder)
        {
            bodyStringBuilderList.addEnd(bodyStringBuilder);
        }

        return bodyStringBuilderList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEmitMultipleLabels</Name>
				<Source><![CDATA[
    private boolean canEmitMultipleLabels()
    {
        return (rowsPerLabel != 0 || rowsPerLabelFirst != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPositionParameters</Name>
				<Source><![CDATA[
    private boolean hasPositionParameters()
    {
        return (startY != 0 || startYFirst != 0 || incY != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTranslatorFromPosition</Name>
				<Source><![CDATA[
    private void updateTranslatorFromPosition(int _labelNumber, int _rowNumber, int _globalRowNumber, int _labelCount = 0)
    {
        Map parametersMap = new Map(Types::String, Types::String);

        parametersMap.insert(PositionParamsRowNumber, int2Str(_rowNumber + 1));
        parametersMap.insert(PositionParamsGlobalRowNumber, int2Str(_globalRowNumber + 1));

        if (this.canEmitMultipleLabels())
        {
            parametersMap.insert(PositionParamsLabelNumber, int2Str(_labelNumber));
            parametersMap.insert(PositionParamsLabelCount, (_labelCount > 0) ? int2Str(_labelCount) : WhsDocumentRoutingTemplateTranslator::LabelCountMagicString);            
        }
        if (this.hasPositionParameters())
        {
            parametersMap.insert(PositionParamsYPos, int2str((startYFirst && _labelNumber == 1 ? startYFirst : startY) + (_rowNumber * incY)));
        }

        translator.withParameterMap(parametersMap, PositionParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLabelsFromBodies</Name>
				<Source><![CDATA[
    private void createLabelsFromBodies(WhsDocumentRoutingTemplateTranslatorLabelCollector _labelCollector, List _bodyStringBuilderList)
    {
        int labelsCount = _bodyStringBuilderList.elements();
        int currentLabel;

        ListEnumerator bodyStringBuilderListEnum = _bodyStringBuilderList.getEnumerator();
        while (bodyStringBuilderListEnum.moveNext())
        {
            currentLabel++;

            StringBuilder bodyStringBuilder = bodyStringBuilderListEnum.current();
            
            str rawLabelStr = this.createTemplateLabel(currentLabel, labelsCount, bodyStringBuilder);
            _labelCollector.collectLabel(rawLabelStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplateLabel</Name>
				<Source><![CDATA[
    private str createTemplateLabel(int _labelNumber, int _labelCount, StringBuilder _bodyStringBuilder)
    {
        StringBuilder labelStringBuilder = PooledStringBuilder::GetInstance();
        boolean firstLabel = (_labelNumber == 1);
        boolean lastLabel = (_labelNumber == _labelCount);

        // if mustTranslateAgain is true, then we need to re-translate the already translated headers and footers to translate any $position...$ placeholders
        // and replace the LabelCountMagicString in the bodies with the final label count
        boolean mustTranslateAgain = this.canEmitMultipleLabels();
        
        if (mustTranslateAgain)
        {
            this.updateTranslatorFromPosition(_labelNumber, 0, 0, _labelCount);
        }

        labelStringBuilder.Append(this.getSection(LabelStartSection));
        
        if (firstLabel && this.hasSection(HeaderFirstSection))
        {
            labelStringBuilder.Append(mustTranslateAgain ? translator.translate(this.getSection(HeaderFirstSection)) : this.getSection(HeaderFirstSection));
        }
        else
        {
            labelStringBuilder.Append(mustTranslateAgain ? translator.translate(this.getSection(HeaderSection)) : this.getSection(HeaderSection));
        }

        if (firstLabel)
        {
            labelStringBuilder.Append(this.getSection(PreRowSection));
        }

        if (mustTranslateAgain)
        {
            labelStringBuilder.Append(_bodyStringBuilder.Replace(WhsDocumentRoutingTemplateTranslator::LabelCountMagicString, int2Str(_labelCount)));
        }
        else
        {
            labelStringBuilder.Append(_bodyStringBuilder);
        }

        if (lastLabel)
        {
            LabelStringBuilder.Append(this.getSection(PostRowSection));
        }

        if (firstLabel && this.hasSection(FooterFirstSection))
        {
            labelStringBuilder.Append(mustTranslateAgain ? translator.translate(this.getSection(FooterFirstSection)) : this.getSection(FooterFirstSection));
        }
        else
        {
            labelStringBuilder.Append(mustTranslateAgain ? translator.translate(this.getSection(FooterSection)) : this.getSection(FooterSection));
        }

        labelStringBuilder.Append(this.getSection(LabelEndSection));

        return PooledStringBuilder::GetStringAndRelease(labelStringBuilder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSection</Name>
				<Source><![CDATA[
    private str getSection(str _sectionName, boolean _forceRaw = false)
    {      
        if (_forceRaw || conFind(NoTranslateSections, _sectionName) > 0)
        {
            if (rawSectionsMap.exists(_sectionName))
            {
                return rawSectionsMap.lookup(_sectionName);
            }
        }
        else
        {
            if (translatedSectionsMap.exists(_sectionName))
            {
                return translatedSectionsMap.lookup(_sectionName);
            }
        }    
          
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSection</Name>
				<Source><![CDATA[
    private boolean hasSection(str _sectionName)
    {       
        return rawSectionsMap.exists(_sectionName);       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>