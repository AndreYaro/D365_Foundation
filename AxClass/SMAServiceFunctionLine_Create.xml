<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceFunctionLine_Create</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmaServiceFunctionLine_Create extends SMAServiceFunctionLine implements BatchRetryable
{
    SMAScopeId              scopeId;
    SMAAgreementId          buildAgreementId;
    Counter                 seO_Created;

    // tables
    SMAServiceOrderTable    serviceOrderTable;
    SMAServiceOrderLine     serviceOrderLine;
    smmActivities           templateActivity;

    SMAAgreementTable       agreementTable;         // table buffer to hold Service agreements
    SMAAgreementLine        agreementLine;          // table buffer to hold Service agreement lines

    // classes
    SMADateControl                  dateControl;
    SMADateCalculation_Interval     dateCalculation;        // Class variable to calculate interval dates
    SMAPreServiceOrderLinesCreate   preServiceOrderLines;   // Class variable to create preServiceOrderLines

    // Dialog
    DialogField             dialogContinous;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPreServiceOrderLines</Name>
				<Source><![CDATA[
    protected void buildPreServiceOrderLines()
    {
        dateControl.parmSetChild(agreementLine.StartDate,agreementLine.EndDate);
        if (dateControl.isParentValid() && dateControl.isChildValid() && agreementLine.checkIfValid())
        {
           preServiceOrderLines.create(agreementTable, agreementLine, dateControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildServiceOrders</Name>
				<Source><![CDATA[
    protected void buildServiceOrders()
    {
        SMAServiceOrderCreate  serviceOrderCreate;

        serviceOrderCreate = new SMAServiceOrderCreate(this.parmScopeId(), showInfolog, this.isInBatch());
        serviceOrderCreate.parmTemplateActivity(templateActivity);
        seO_Created += serviceOrderCreate.buildServiceOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSetup</Name>
				<Source><![CDATA[
    public boolean checkSetup()
    {
        boolean ret;

        // Service Order number seq is set up and is not manual
        ret = SMAServiceOrderTable::checkNumberSeq();

        // Scope number seq is set up and is not manual
        ret = ret && SMAPreServiceOrderLine::checkNumberSeq();

        // check the activity parameter and to see if the current user is an employee
        if (ret && SMAParameters::find().ServiceOrderCreateActivity &&  HcmWorker::find(DirPersonUserEx::worker(DirPersonUser::current())).PersonnelNumber == '')
        {
            // The current user is not set up as an employee and therefore not able to create service orders with activities.
            ret = checkFailed("@SYS106720");
        }

        return  ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplateActivity</Name>
				<Source><![CDATA[
    void deleteTemplateActivity()
    {
        ttsbegin;

        if (templateActivity.ActivityNumber)
        {
            templateActivity = smmActivities::find(templateActivity.ActivityNumber, true);
            if (templateActivity)
            {
                templateActivity.doDelete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialog = super();

        // Option
        dialog.addGroup("@SYS73535");
        // Continues
        dialogContinous = dialog.addField(extendedtypestr(NoYesId), "@SYS84232");

        dialogContinous.value(continuous);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        continuous = dialogContinous.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextAgreementLine</Name>
				<Source><![CDATA[
    protected void getNextAgreementLine()
    {
        agreementLine = null;

        if (queryRun.next())
        {
            agreementLine = queryRun.get(tablenum(SMAAgreementLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextAgreementTable</Name>
				<Source><![CDATA[
    protected void getNextAgreementTable()
    {
        agreementTable      = queryRun.get(tablenum(SMAAgreementTable));
        buildAgreementId    = agreementTable.AgreementId;

        dateControl.parmSetParent(agreementTable.StartDate, agreementTable.EndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStagesAllowed</Name>
				<Source><![CDATA[
    public str getStagesAllowed()
    {
        str    tmpStageStr = '';

        return tmpStageStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBuildServiceOrder</Name>
				<Source><![CDATA[
    protected void initBuildServiceOrder()
    {
        QueryBuildDataSource            qbdsAgreementLine;

        buildAgreementId = '';

        // Get a new scopeId
        scopeId = SMAPreServiceOrderLine::newScopeId();

        // Set transaction types
        qbdsAgreementLine = queryRun.query().dataSourceTable(tablenum(SMAAgreementLine));
        this.setTransactionTypes(qbdsAgreementLine);

        // Initializing the dateControl Class
        dateControl = new SMADateControl();
        dateControl.parmSetPeriod(periodFromDate, periodToDate);

        // Initilizing the dateCalculation Class
        dateCalculation = new SMADateCalculation_Interval(periodFromDate, periodToDate, continuous);

        // Init PreserviceOrder class
        preServiceOrderLines = new SMAPreServiceOrderLinesCreate(dateCalculation, scopeId, showInfolog);

        // Setting the prefix for the infolog
        if (showInfolog)
        {
            setprefix("@SYS79091");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScopeId</Name>
				<Source><![CDATA[
    public SMAScopeId parmScopeId(SMAScopeId _scopeId = scopeId)
    {
        scopeId = _scopeId;

        return scopeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public SysQueryRun queryBuild()
    {
        QueryBuildDataSource    qbdsProjectTable;
        QueryBuildDataSource    qbdsAgreementTable;
        QueryBuildDataSource    qbdsAgreementLine;
        SysQueryRun             localQueryRun;

        // Creating the query on the fly
        serviceQuery = new Query();

        if (!serviceQuery)
        {
            // Query run is not initiaized
            throw error("@SYS87642");
        }

        // Add datasources to serviceQuery depentant on caller and the servicefunction
        qbdsProjectTable = serviceQuery.addDataSource(tablenum(ProjTable));

        // Add agreement table as datasource
        qbdsAgreementTable = qbdsProjectTable.addDataSource(tablenum(SMAAgreementTable));
        qbdsAgreementTable.relations(true);

        // Add agreement lines as datasource
        qbdsAgreementLine = qbdsAgreementTable.addDataSource(tablenum(SMAAgreementLine));
        qbdsAgreementLine.relations(true);
        qbdsAgreementLine.orderMode(OrderMode::OrderBy);
        qbdsAgreementLine.addSortField(fieldnum(SMAAgreementLine, AgreementId));

        this.queryUpdateRange();

        queryRun = new SysQueryRun(serviceQuery);
        localQueryRun = this.queryRun();
        localQueryRun.promptShowSorting(false);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        boolean     templateActivityCreated;

        if (showInfolog)
        {
            // Building service orders
            setprefix("@SYS91766");
        }

        // if some service agreement lines selected for this job
        this.initBuildServiceOrder();

        try
        {
            if (queryRun.next())
            {
                agreementLine = queryRun.get(tablenum(SMAAgreementLine));

                while (agreementLine)
                {
                    if (buildAgreementId != '')
                    {
                        ttsbegin;
                        // Go through all agreement lines for one agreement and create PreService order lines
                        while ((agreementLine) && (buildAgreementId == agreementLine.AgreementId))
                        {
                            // Build Preservice order lines for agreement line
                            this.buildPreServiceOrderLines();
                            // get next agreement Line
                            agreementLine = null;

                            this.getNextAgreementLine();
                        }

                        if (showInfolog)
                        {
                            // Agreement %1
                            setprefix(strfmt("@SYS106589", buildAgreementId));
                        }

                        // Create service orders
                        this.buildServiceOrders();

                        ttscommit;
                    }
                    // Init variables for the next agreement
                    if (agreementLine)
                    {
                        this.getNextAgreementTable();
                        // Create template activity
                        if (!templateActivityCreated && !this.isInBatch() && smmLicense::CRM() && agreementTable.WorkerServiceResponsible)
                        {
                            templateActivityCreated = true;
                            templateActivity = smmActivities::find(smmActivityCreate::createActivity(agreementTable,this.isInBatch()).ActivityNumber);
                        }
                    }
                }
            }
            // Delete template activity
            this.deleteTemplateActivity();
        }
        catch
        {
            // Delete template activity
            this.deleteTemplateActivity();
        }

        if (seO_Created)
        {
            // Number of service orders created
            setprefix("@SYS106590");
            // Total : %1
            info(strfmt("@SYS106591",seO_Created));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasicRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates basic locked ranges for the query.
    /// </summary>
    protected void setBasicRanges()
    {
        QueryBuildDataSource    qbds_Agreement;
        QueryBuildDataSource    qbds_AgreementLine;

        QueryBuildRange         qbr_Stopped;
        // Get the object tables from the query
        qbds_Agreement      = serviceQuery.dataSourceTable(tablenum(SMAAgreementTable));

        if (qbds_Agreement)
        {
            // Add locked field to agreement to make sure suspended agreements are not selected
            qbr_Stopped = qbds_Agreement.addRange(fieldnum(SMAAgreementTable, Suspended));
            qbr_Stopped.value(queryValue(NoYes::No));
            qbr_Stopped.status(RangeStatus::Locked);

            // Add locked field to agreement to make sure template agreements are not selected
            qbr_Stopped = qbds_Agreement.addRange(fieldnum(SMAAgreementTable, TemplateGroupId));
            qbr_Stopped.value(SysQuery::valueEmptyString());
            qbr_Stopped.status(RangeStatus::Locked);
        }

        qbds_AgreementLine  = serviceQuery.dataSourceTable(tablenum(SMAAgreementLine));

        if (qbds_AgreementLine)
        {
            // Add locked field to agreement line to make sure suspended agreements are not selected
            qbr_Stopped = qbds_AgreementLine.addRange(fieldnum(SMAAgreementLine, Suspended));
            qbr_Stopped.value(queryValue(NoYes::No));
            qbr_Stopped.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!periodFromDate)
        {
            // From date is not specified.
            ret = ret && checkFailed("@SYS90867");
        }

        if (!periodToDate)
        {
            // To date must be specified.
            ret = ret && checkFailed("@SYS90868");
        }

        if (periodToDate && periodFromDate > periodToDate)
        {
            // To date must come after from date.
            ret = ret && checkFailed("@SYS90869");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        // Create service orders
        return "@SYS79091";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>