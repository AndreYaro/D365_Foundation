<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XMLWordDocumentBookmark</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The bookmark controller.
/// </summary>
public class XMLWordDocumentBookmark
{
    protected NetDFOXMLWordprocessingBookmarkStartProxy bookmarkStart;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(NetDFOXMLWordprocessingBookmarkStartProxy _bookmarkStart)
    {
        bookmarkStart = _bookmarkStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the bookmark controller.
    /// </summary>
    /// <param name = "_bookmarkStart">The BookmarkStart proxy.</param>
    /// <returns>Created bookmark controller.</returns>
    public static XMLWordDocumentBookmark construct(NetDFOXMLWordprocessingBookmarkStartProxy _bookmarkStart)
    {
        return new XMLWordDocumentBookmark(_bookmarkStart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProxy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BookmarkStart proxy.
    /// </summary>
    /// <returns>The BookmarkStart proxy.</returns>
    public NetDFOXMLWordprocessingBookmarkStartProxy getProxy()
    {
        return bookmarkStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bookmark name.
    /// </summary>
    /// <returns>The bookmark name.</returns>
    public str name()
    {
        return bookmarkStart.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ToString</Name>
				<Source><![CDATA[
    public str ToString()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bookmark text.
    /// </summary>
    /// <returns>The bookmark text.</returns>
    public str getText()
    {
        str result = '';

        NetDFOXMLWordprocessingTextProxy text = this.findBookmarkText();

        if (text != null)
        {
            result = text.getText();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bookmark text.
    /// </summary>
    /// <param name = "_value">The value.</param>
    /// <param name = "_removeExists">True if other bookmark text should be removed.</param>
    public void setText(str _value, boolean _removeExists = true)
    {
        NetDFOXMLWordprocessingTextProxy text = this.findBookmarkText();

        if (text != null)
        {
            text.setText(_value);

            if (_removeExists)
            {
                if (bookmarkStart.columnFirst() == -1)
                {
                    boolean bookmarkEndFound = false;

                    NetDFOXMLOpenXmlElementProxy nextSibling = bookmarkStart.nextSibling();
                    while (nextSibling != null && !bookmarkEndFound)
                    {
                        NetDFOXMLWordprocessingBookmarkEndProxy bookmarkEnd = nextSibling as NetDFOXMLWordprocessingBookmarkEndProxy;
                        if (bookmarkEnd != null && bookmarkEnd.id() == bookmarkStart.id())
                        {
                            break;
                        }

                        System.Collections.IEnumerable childElements = nextSibling.descendants();
                        if (childElements != null)
                        {
                            System.Collections.IEnumerator childElementsEnumerator = childElements.GetEnumerator();
                            while (childElementsEnumerator.MoveNext())
                            {
                                bookmarkEnd = ERCast::asAny(childElementsEnumerator.Current) as NetDFOXMLWordprocessingBookmarkEndProxy;
                                if (bookmarkEnd != null && bookmarkEnd.id() == bookmarkStart.id())
                                {
                                    bookmarkEndFound = true;
                                    break;
                                }

                                NetDFOXMLWordprocessingTextProxy textToRemove = ERCast::asAny(childElementsEnumerator.Current) as NetDFOXMLWordprocessingTextProxy;
                                if (textToRemove != null
                                && !textToRemove.textEquals(text))
                                {
                                    textToRemove.remove();
                                }
                            }
                        }

                        nextSibling = nextSibling.nextSibling();
                    }
                }
            }
        }
        else
        {
            NetDFOXMLWordprocessingTextProxy textToInsert = NetDFOXMLWordprocessingTextProxy::createNew(_value);

            System.Object[] argumentText = new System.Object[1]();
            argumentText.SetValue(textToInsert, 0);
            NetDFOXMLWordprocessingRunProxy run = NetDFOXMLWordprocessingRunProxy::createNewFromOpenXmlElementProxyArray(argumentText);
            
            System.Object[] argumentRun = new System.Object[1]();
            argumentRun.SetValue(run, 0);
            NetDFOXMLWordprocessingParagraphProxy paragraph = NetDFOXMLWordprocessingParagraphProxy::createNewFromOpenXmlElementProxyArray(argumentRun);
            bookmarkStart.parent().insertAfterSelfParagraph(paragraph);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBookmarkText</Name>
				<Source><![CDATA[
    private NetDFOXMLWordprocessingTextProxy findBookmarkText()
    {
        NetDFOXMLWordprocessingTextProxy textInColumn = null;

        if (bookmarkStart.columnFirst() != -1)
        {
            NetDFOXMLWordprocessingTableRowProxy tableRow = null;

            NetDFOXMLOpenXmlElementProxy parent = bookmarkStart;
            while (parent != null && tableRow == null)
            {
                tableRow = parent as NetDFOXMLWordprocessingTableRowProxy;
                if (tableRow == null)
                {
                    parent = parent.parent();
                }
            }

            if (tableRow != null)
            {
                NetDFOXMLWordprocessingTableCellProxy tableCell = tableRow.getFirstChildTableCell();

                for (int i = 0; i < bookmarkStart.columnFirst(); i++)
                {
                    tableCell = tableCell.nextSiblingTableCell();
                }

                textInColumn = XMLWordDocumentBookmark::getFirstDescendantText(tableCell);
            }
        }
        else
        {
            NetDFOXMLOpenXmlElementProxy nextSibling = bookmarkStart.nextSibling();
            while (nextSibling != null && textInColumn == null)
            {
                NetDFOXMLWordprocessingBookmarkStartProxy nextBookmarkStart = nextSibling as NetDFOXMLWordprocessingBookmarkStartProxy;
                if (nextBookmarkStart != null
                        && subStr(nextBookmarkStart.name(), 0, 1) != '_')
                {
                    break;
                }

                NetDFOXMLWordprocessingBookmarkEndProxy bookmarkEnd = nextSibling as NetDFOXMLWordprocessingBookmarkEndProxy;
                if (bookmarkEnd != null && bookmarkEnd.id() == bookmarkStart.id())
                {
                    break;
                }

                textInColumn = XMLWordDocumentBookmark::getFirstDescendantText(nextSibling);
                if (textInColumn == null)
                {
                    nextSibling = nextSibling.nextSibling();
                }
            }
        }

        return textInColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDescendantText</Name>
				<Source><![CDATA[
    private static NetDFOXMLWordprocessingTextProxy getFirstDescendantText(NetDFOXMLOpenXmlElementProxy _penXmlElementProxy)
    {
        NetDFOXMLWordprocessingTextProxy result = null;
            
        System.Collections.IEnumerable descendants = _penXmlElementProxy.descendantsText();

        if (descendants != null)
        {
            System.Collections.IEnumerator descendantsEnumerator = descendants.GetEnumerator();
            if (descendantsEnumerator.MoveNext())
            {
                result = ERCast::asAny(descendantsEnumerator.Current) as NetDFOXMLWordprocessingTextProxy;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookmarkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent related table.
    /// </summary>
    /// <returns>The table controller.</returns>
    public XMLWordDocumentTable getBookmarkTable()
    {
        XMLWordDocumentTable result = null;

        NetDFOXMLWordprocessingTableProxy table = null;

        NetDFOXMLOpenXmlElementProxy parent = bookmarkStart.parent();
        while (parent != null && table == null)
        {
            table = parent as NetDFOXMLWordprocessingTableProxy;
            if (table == null)
            {
                parent = parent.parent();
            }
        }

        if (table != null)
        {
            result = XMLWordDocumentTable::construct(table);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>