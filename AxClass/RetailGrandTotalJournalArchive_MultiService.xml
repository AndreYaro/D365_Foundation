<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalArchive_MultiService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Archives grand total journals.
/// </summary>
public class RetailGrandTotalJournalArchive_MultiService extends SysOperationServiceBase
{
    private BatchHeader batchHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the archive reports.
    /// </summary>
    /// <param name = "_dataContract">The data contract.</param>
    public void run(RetailGrandTotalJournalArchive_MultiContract _dataContract)
    {
        RetailChannelTable retailChannelTable;
        SetEnumerator selectedStoreEnumerator;
        SetEnumerator oMInternalOrgRecIds;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set descendants;
        SetEnumerator descendantsEnumerator;

        oMInternalOrgRecIds = _dataContract.parmSelectedOMInternalOrgRecIds().getEnumerator();

        // Used to filter the OMOperating unit type to include only Retail channel
        operatingUnitType.add(OMOperatingUnitType::RetailChannel);

        while (oMInternalOrgRecIds.moveNext())
        {
            // Get all the descendents for selected hierarchy node
            descendants = OMOperatingUnit::getDescendantsAndSelf(
                                        oMInternalOrgRecIds.current(),
                                        _dataContract.parmOMHierarchyRecId(),
                                        DateTimeUtil::utcNow(),
                                        operatingUnitType
                                        );

            // Start traversing on the descendants
            descendantsEnumerator = descendants.getEnumerator();
            while (descendantsEnumerator.moveNext())
            {
                retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                if(retailChannelTable.RecId
                   && retailChannelTable.ChannelType == RetailChannelType::RetailStore
                   && !selectedStoreRecIds.in(retailChannelTable.RecId))
                {
                    selectedStoreRecIds.add(retailChannelTable.RecId);
                }
            }
        }

        if (!selectedStoreRecIds.elements())
        {
            throw error("@SYS107537");
        }

        // Start processing for selected stores
        selectedStoreEnumerator = selectedStoreRecIds.getEnumerator();
        while (selectedStoreEnumerator.moveNext())
        {
            this.archiveJournal(
                _dataContract,
                RetailStoreTable::findRecId(selectedStoreEnumerator.current()));
        }

        if (batchHeader)
        {
            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveJournal</Name>
				<Source><![CDATA[
    private void archiveJournal(RetailGrandTotalJournalArchive_MultiContract _dataContract, RetailStoreTable _storeTable)
    {
        RetailGrandTotalJournalTable journalTable;
        boolean noDataSelected = true;
        
        while select journalTable order by FromDate
            where journalTable.StoreId == _storeTable.StoreNumber
                && journalTable.FromDate >= _dataContract.parmFromDate()
                && journalTable.ToDate <= _dataContract.parmToDate()
                && journalTable.Status == RetailGrandTotalJournalStatus::Closed
        {
            noDataSelected = false;

            try
            {
                this.runScheduleJob(journalTable);
            }
            catch
            {
                error(strFmt("@RetailGrandTotalJournal:FailureWhileExporting", journalTable.JournalNum, journalTable.StoreId, journalTable.FromDate, journalTable.ToDate));
            }
        }

        if (noDataSelected)
        {
            throw error("@SYS107537");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArchiveReportRunner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the report runner.
    /// </summary>
    /// <param name="_journalTable">
    /// The journal table.
    /// </param>
    /// <param name="_isInBatch">
    /// Is the execution in batch.
    /// </param>
    /// <returns>
    /// The report runner.
    /// </returns>
    private RetailGrandTotalJournalArchiveController createArchiveReportRunner(RetailGrandTotalJournalTable _journalTable, boolean _isInBatch)
    {
        RetailGrandTotalJournalArchiveController reportRunner;

        if (_isInBatch)
        {
            reportRunner = new RetailGrandTotalJournalArchiveController(
                classStr(RetailGrandTotalJournalArchiveService),
                methodStr(RetailGrandTotalJournalArchiveService, run),
                SysOperationExecutionMode::Synchronous);

            RetailGrandTotalJournalArchiveContract contract = reportRunner.getDataContractObject() as RetailGrandTotalJournalArchiveContract;
            contract.initialize();
            contract.initFromGrandTotalJournalTable(_journalTable);

            reportRunner.batchInfo().parmCaption("@SYS3335" + ': ' + _journalTable.Description);
        }
        else
        {
            reportRunner = RetailGrandTotalJournalArchiveController::constructFromGrandTotalJournal(_journalTable);
            reportRunner.batchInfo().parmBatchExecute(false);
        }

        reportRunner.parmShowDialog(false);

        return reportRunner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the batch job.
    /// </summary>
    /// <param name="_journalTable">
    /// The journal table.
    /// </param>
    protected void runScheduleJob(RetailGrandTotalJournalTable _journalTable)
    {
        if (this.isExecutingInBatch())
        {
            if (!batchHeader)
            {
                batchHeader = this.getCurrentBatchHeader();
            }

            RetailGrandTotalJournalArchiveController reportRunner = this.createArchiveReportRunner(_journalTable, true);
            batchHeader.addRuntimeTask(reportRunner, this.getCurrentBatchTask().RecId);

            batchHeader.save();
        }
        else
        {
            this.createArchiveReportRunner(_journalTable, false).startOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>