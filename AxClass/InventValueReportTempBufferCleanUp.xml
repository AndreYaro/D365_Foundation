<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportTempBufferCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventValueReportTempBufferCleanUp extends RunBaseBatch implements BatchRetryable
{
    NoYes                   cleanUpDummyField;

    private ExecutionTime   reportExecutionTimeDelBefore;

    private DialogField     dialogReportExecutionTimeDelBefore;

    private QueryRun        queryRun;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        cleanUpDummyField,
        reportExecutionTimeDelBefore
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventValueExecutionHistory inventValueExecutionHistory;

        while (queryRun.next())
        {
            inventValueExecutionHistory = queryRun.get(tableNum(InventValueExecutionHistory));
            if (inventValueExecutionHistory.RecId && inventValueExecutionHistory.ExecutionTime < reportExecutionTimeDelBefore)
            {
                this.deleteSelectedData(inventValueExecutionHistory.RecId);
            }
        }

        this.deleteOrphanData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedData</Name>
				<Source><![CDATA[
    private void deleteSelectedData(RecId inventValueExecutionHistoryRecid)
    {
        InventValueReportTmpLine inventValueReportTmpLine;
        InventValueExecutionHistory inventValueExecutionHistory;
        CreatedTransactionId inventValueExecutionHistoryTransId;

        select * from inventValueExecutionHistory where inventValueExecutionHistory.RecId == inventValueExecutionHistoryRecid;
        inventValueExecutionHistoryTransId = inventValueExecutionHistory.TransactionId;

        inventValueExecutionHistory.skipDatabaseLog(true);
        inventValueExecutionHistory.skipDataMethods(true);
        inventValueExecutionHistory.skipEvents(true);
        delete_from inventValueExecutionHistory
            where inventValueExecutionHistory.RecId == inventValueExecutionHistoryRecid;

        inventValueReportTmpLine.skipDatabaseLog(true);
        inventValueReportTmpLine.skipDataMethods(true);
        inventValueReportTmpLine.skipEvents(true);
        delete_from inventValueReportTmpLine
            where inventValueReportTmpLine.TransactionId == inventValueExecutionHistoryTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrphanData</Name>
				<Source><![CDATA[
    private void deleteOrphanData()
    {
        InventValueExecutionHistory inventValueExecutionHistory;
        InventValueReportTmpLine inventValueReportTmpLine;
            
        inventValueReportTmpLine.skipDatabaseLog(true);
        inventValueReportTmpLine.skipDataMethods(true);
        inventValueReportTmpLine.skipEvents(true);
        delete_from inventValueReportTmpLine
            notexists join inventValueExecutionHistory
            where inventValueExecutionHistory.TransactionId == inventValueReportTmpLine.TransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentBatchHeader</Name>
				<Source><![CDATA[
    public BatchHeader getCurrentBatchHeader()
    {
        return BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventValueReportTempBufferCleanUp";
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button is to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid instance of the <c>QueryRun</c> class.If you change the return value to false, the
    ///    button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        #define.textWidth(60)
        #define.textHeight(15)

        var dialog = super();

        /* Show batch details and warnings
        We have to create a fake invisible border control to retain the focus
        on the first tab when starting the dialog */
        str warningMessage = "@SCM:InventValueReportStorageDeletionWarning" + "\r\r\n" + "@SCM:InventValueReportTempBufferCleanUpDescription";
        DialogField dialogField = dialog.addFieldValue(extendedTypeStr(Notes), warningMessage);
        dialogField.showLabel(false);
        dialogField.border(1);
        dialogField.allowEdit(false);
        dialogField.displayHeight(#textHeight);
        dialogField.displayLength(#textWidth);

        dialogReportExecutionTimeDelBefore = dialog.addField(extendedTypeStr(ExecutionTime),"@SCM:InventValueReportTempHistoryCleanUpExecTimeDelBefore");
        dialogReportExecutionTimeDelBefore.value(reportExecutionTimeDelBefore);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reportExecutionTimeDelBefore = dialogReportExecutionTimeDelBefore.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        reportExecutionTimeDelBefore = prevMth(prevMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(InventValueExecutionHistory));
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldnum(InventValueExecutionHistory, ExecutionName));
        queryBuildRange.value("");

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer         version      = RunBase::getVersion(_packedClass);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList,packedQuery] = _packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        InventValueReportTempBufferCleanUp cleanUp = new InventValueReportTempBufferCleanUp();
        cleanUp.initQuery();
        if (! cleanUp.prompt())
        {
            return;
        }

        cleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>