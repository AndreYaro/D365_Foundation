<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionProductSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionProductSelect</c> class executes a product selection.
/// </summary>
class TradeNonStockedConversionProductSelect
{
    List        productList;
    QueryRun    queryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to use for selection of <c>EcoResProduct</c> records.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query = new Query();
        QueryBuildRange         range;
        QueryBuildDataSource    qbdsProduct;

        qbdsProduct = query.addDataSource(tablenum(EcoResDistinctProduct));

        range = qbdsProduct.addRange(fieldnum(EcoResDistinctProduct, ProductType));
        range.value(queryValue(EcoResProductType::Service));
        range.status(RangeStatus::Locked);

        qbdsProduct.addRange(fieldnum(EcoResDistinctProduct, DisplayProductNumber));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedProductList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a packed <c>List</c> object that contains all selected products.
    /// </summary>
    /// <returns>
    /// A container that contains the packed version of the <c>List</c> object.
    /// </returns>
    public container getPackedProductList()
    {
        return productList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productList = new List(typeName2Type(extendedtypestr(recId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the query prompt.
    /// </summary>
    /// <returns>
    /// true if the query should be executed; otherwise, false.
    /// </returns>
    protected boolean queryPrompt()
    {
        return queryRun.prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes a product selection.
    /// </summary>
    public void run()
    {
        EcoResDistinctProduct   ecoResDistinctProduct;

        queryRun = new QueryRun(this.buildQuery());

        if (this.queryPrompt())
        {
            while (queryRun.next())
            {
                ecoResDistinctProduct = queryRun.get(tablenum(EcoResDistinctProduct)) as EcoResDistinctProduct;
                productList.addEnd(ecoResDistinctProduct.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TradeNonStockedConversionProductSelect construct()
    {
        return new TradeNonStockedConversionProductSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        TradeNonStockedConversionProductSelect  tradeNonStockedConversionProductSelect = TradeNonStockedConversionProductSelect::construct();
        tradeNonStockedConversionProductSelect.run();
        TradeNonStockedConversionProductSelect::updateCallerDataSource(_args, tradeNonStockedConversionProductSelect.getPackedProductList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>FormDataSource</c> object from the calling form.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object.
    /// </param>
    /// <param name="_packedProductList">
    /// A Container that represents a list of products.
    /// </param>
    static public void updateCallerDataSource(
        Args        _args,
        container   _packedProductList)
    {
        Object          formRun = _args.caller();
        List            productList = List::create(_packedProductList);
        ListEnumerator  listEnumerator;
        FormDataSource  tradeNonStockedConversionDs;
        TradeNonStockedConversion               tradeNonStockedConversion;
        TradeNonStockedConversionTmpProducts    tradeNonStockedConversionTmpProducts;

        if (productList.elements())
        {
            tradeNonStockedConversionDs = formRun.tradeNonStockedConversion_ds();
            tradeNonStockedConversion   = tradeNonStockedConversionDs.cursor();

            tradeNonStockedConversionTmpProducts = _args.record() as TradeNonStockedConversionTmpProducts;

            delete_from tradeNonStockedConversionTmpProducts
                where tradeNonStockedConversionTmpProducts.NonStockedConversion == tradeNonStockedConversion.RecId;

            listEnumerator = productList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                tradeNonStockedConversionTmpProducts.Product = listEnumerator.current();
                tradeNonStockedConversionTmpProducts.initFromTradeNonStockedConversion(tradeNonStockedConversion);
                tradeNonStockedConversionTmpProducts.insert();
            }
            FormDataUtil::getFormDataSource(tradeNonStockedConversionTmpProducts).research();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>