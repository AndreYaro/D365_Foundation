<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrTaxDefaultUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRTaxDefaultUpdate</c> class updates the default tax fields when tax codes/groups are loaded.
/// </summary>
class mcrTaxDefaultUpdate extends RunBaseBatch implements BatchRetryable
{
    int         taxProcessed;

    // Dialog variables.
    AddressCountryRegionId  taxCountry;

    // Dialog fields.
    DialogField     dlgTaxCountry;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        taxCountry
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dialog of tax default updater.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        DialogGroup                 dialogGrpMain;
        DialogGroup                 dialogGrpCriteria;
        DialogRunbase               dialog;

        // Setup the dialog
        dialog = new DialogRunbase("@MCR26381", this);
        dialogGrpMain = dialog.addGroup('');
        dialogGrpMain.frameType(FormFrameType::None);
        dialogGrpMain.columns(1);
        // Add the group for the Criteria
        dialogGrpCriteria = dialog.addGroup("@SYS13128", dialogGrpMain);
        dialogGrpCriteria.frameType(FormFrameType::Auto);
        // Prompt for "Default country"
        dlgTaxCountry = dialog.addField(extendedTypeStr(AddressCountryRegionId), "@MCR26382");
        dlgTaxCountry.value('');

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        taxCountry = dlgTaxCountry.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the MCR fields on the Tax group heading record
    /// so that defaulting will function properly.
    /// </summary>
    /// <remarks>
    /// Primarily used when tax codes are loaded form an external source.
    /// MCR fields on tax group heading: MCRZipcode, MCRCountry, MCRCounty, MCRState, MCRCity.
    /// </remarks>
    public void processUpdate()
    {
        TaxGroupHeading         taxGroupHeading;
        AddressZipCodeId        zipCode;
        AddressCity             city;
        AddressCountyId         county;
        AddressCountryRegionId  country;
        AddressStateId          state;
        str                     groupName;
        str                     countyTemp;
        int                     findPos;
        #define.County('County')

        // Disable the cache to make sure true updates made.
        taxGroupHeading.disableCache(true);

        // Update the fields if they have not been filled in already.
        ttsbegin;
        while select forupdate taxGroupHeading
            order by SearchField1, SearchField2
            where taxGroupHeading.mcrCity == ""
               && taxGroupHeading.mcrCountry == ""
               && taxGroupHeading.mcrCounty == ""
               && taxGroupHeading.mcrState == ""
               && taxGroupHeading.mcrZipCode == ""
               && taxGroupHeading.SearchField1
               && taxGroupHeading.SearchField2
        {
            taxProcessed ++;
            // Assumes certain values filled in which are only true for CCH.

            // Format zip code as first 5 digits.
            zipCode     = subStr(taxGroupHeading.TaxGroup, 1, 5);

            // State is placed in search field 1.
            state       = taxGroupHeading.SearchField1;

            // Format the county.
            countyTemp = strLTrim(taxGroupHeading.SearchField2);
            findPos = strScan(countyTemp, #County, 1, strLen(countyTemp));
            if (findPos == 0 || findPos > 10 )
            {
                county = strRTrim(subStr(countyTemp, 1, 10));
            }
            else
            {
                county = strRTrim(subStr(countyTemp, 1, findPos-1));
            }

            // Format the city.
            groupName     = strLTrim(taxGroupHeading.TaxGroupName);
            findPos = strFind(groupName, ', ', 1, strLen(groupName));
            if (findPos != 0)
            {
                city = subStr(groupName, 1, findPos-1);
            }
            else
            {
                city = "";
            }

            // Use value entered on dialog since unable to format country from state due to uniqueness.
            country = taxCountry;

            // Update the fields and the table.
            taxGroupHeading.mcrCity    = city;
            taxGroupHeading.mcrCountry = country;
            taxGroupHeading.mcrCounty  = county;
            taxGroupHeading.mcrState   = state;
            taxGroupHeading.mcrZipCode = zipCode;
            taxGroupHeading.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run tax default update job.
    /// </summary>
    public void run()
    {
        int  timeStart, timeEnd;

        super();

        setPrefix(MCRTaxDefaultUpdate::description());

        timeStart = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

        // Update the tax codes.
        this.processUpdate();

        // Display message that process has completed.
        timeEnd = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        info(strFmt("@MCR26356", int2str(taxProcessed), int2str(timeEnd - timeStart)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRTaxDefaultUpdate construct()
    {
        return new MCRTaxDefaultUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Description of tax default update class.
    /// </summary>
    /// <returns>The class description.</returns>
    public static ClassDescription description()
    {
        return "@MCR26305";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRTaxDefaultUpdate mcrTaxDefaultUpdate;

        mcrTaxDefaultUpdate = MCRTaxDefaultUpdate::construct();

        if (mcrTaxDefaultUpdate.prompt())
        {
            mcrTaxDefaultUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>mcrTaxDefaultUpdate</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>mcrTaxDefaultUpdate</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>