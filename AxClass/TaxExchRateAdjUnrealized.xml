<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExchRateAdjUnrealized</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxExchRateAdjUnrealized</c> class is the tax exchange rate adjustment class.
/// </summary>
class TaxExchRateAdjUnrealized extends RunBaseBatch implements BatchRetryable
{
    private const str FeatureReference = 'TH-00002';

    #ISOCountryRegionCodes
    DialogField         dialogTaxPeriod;
    DialogField         dialogSettleDate;
    DialogField         dialogPostingDate;
    DialogField         dialogTaxCode;
    DialogField         dialogExchRateDate;
    DialogField         dialogGovernmentExchRate;
    DialogField         dialogUseDailyRate;

    TaxPeriod           taxPeriod;
    TransDate           settleDate;
    TransDate           postingDate;
    TaxCode             taxCode;
    TransDate           exchRateDate;
    GovernmentExchRate  governmentExchRate;
    NoYesId             useDailyRate;

    TransDate           fromDate;
    TransDate           toDate;

    NumberSeq           numberSeq;
    Voucher             voucher;
    LedgerVoucher       ledgerVoucher;
    TmpTaxWorkTrans     tmpTaxWorkTrans;

    ExchangeRateTypeRecId governmentExchangeRateTypeRecId;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        taxPeriod,
        settleDate,
        postingDate,
        taxCode,
        exchRateDate,
        governmentExchangeRateTypeRecId,
        useDailyRate
    #endmacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExchVoucherTrans</Name>
				<Source><![CDATA[
    private void addExchVoucherTrans(
        TaxDirection                _taxDirection,
        CurrencyCode                _sourceCurrency,
        LedgerDimensionAccount      _ledgerDimension,
        CurrencyCode                _transCurrency,
        AmountMST                   _taxAmountDif,
        AmountMSTSecondary          _amountMSTSecondary)
    {
        LedgerPostingType             ledgerPostingType;
        CurrencyGainLossAccountType   currencyAccountType;
        LedgerDimensionAccount        ledgerDimensionAccount;
        LedgerDimensionDefaultAccount defaultLedgerDimension;

        if ((_taxDirection == TaxDirection::OutgoingTax && _taxAmountDif < 0) ||
            (_taxDirection == TaxDirection::IncomingTax && _taxAmountDif > 0))
        {
            ledgerPostingType   = LedgerPostingType::ExchRateGain;
            currencyAccountType = CurrencyGainLossAccountType::RealizedGain;
        }
        else
        {
            ledgerPostingType   = LedgerPostingType::ExchRateLoss;
            currencyAccountType = CurrencyGainLossAccountType::RealizedLoss;
        }

        defaultLedgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            _sourceCurrency,
            currencyAccountType);

        ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension);

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newAdjustmentDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                ledgerPostingType,
                _ledgerDimension,
                _transCurrency,
                _taxAmountDif,
                _amountMSTSecondary));

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newAdjustmentDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                ledgerPostingType,
                ledgerDimensionAccount,
                _transCurrency,
               -_taxAmountDif,
               -_amountMSTSecondary));

        // <GEERU>
        ledgerVoucher.bondLast2_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExchVoucherTrans_unrealized</Name>
				<Source><![CDATA[
    private void addExchVoucherTrans_unrealized(
        TaxDirection                _taxDirection,
        CurrencyCode                _sourceCurrency,
        LedgerDimensionAccount      _ledgerDimension,
        CurrencyCode                _transCurrency,
        AmountMST                   _taxAmountDif,
        AmountMSTSecondary          _amountMSTSecondary)
    {
        LedgerPostingType   ledgerPostingType;
        CurrencyGainLossAccountType   currencyAccountType;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        LedgerDimensionAccount        ledgerDimensionAccount;

        if ((_taxDirection == TaxDirection::OutgoingTax && _taxAmountDif < 0) ||
            (_taxDirection == TaxDirection::IncomingTax && _taxAmountDif > 0))
        {
            ledgerPostingType   = LedgerPostingType::ExchRateGain;
            currencyAccountType = CurrencyGainLossAccountType::RealizedGain;
        }
        else
        {
            ledgerPostingType   = LedgerPostingType::ExchRateLoss;
            currencyAccountType = CurrencyGainLossAccountType::RealizedLoss;
        }

        defaultLedgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            _sourceCurrency,
            currencyAccountType);

        ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension);

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newAdjustmentDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                ledgerPostingType,
                _ledgerDimension,
                _transCurrency,
                _taxDirection == TaxDirection::OutgoingTax ? -_taxAmountDif : _taxAmountDif,
                _amountMSTSecondary));

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newAdjustmentDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                ledgerPostingType,
                ledgerDimensionAccount,
                _transCurrency,
               _taxDirection == TaxDirection::OutgoingTax ? _taxAmountDif : -_taxAmountDif,
               -_amountMSTSecondary));

        // <GEERU>
        ledgerVoucher.bondLast2_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerVoucherTrans</Name>
				<Source><![CDATA[
    private boolean addLedgerVoucherTrans()
    {
        AmountMST           taxAmountNow;
        AmountMST           taxAmountDif;
        AmountMSTSecondary  taxAmountReporting;
        boolean             ret;

        RefRecId            ledgerRecId = Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId);
        CurrencyExchangeHelper  currencyExchangeHelper;

        while select tmpTaxWorkTrans
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(ledgerRecId, useDailyRate ? tmpTaxWorkTrans.TransDate : exchRateDate);

            if (tmpTaxWorkTrans.Posted)
            {
                currencyExchangeHelper.parmExchangeRateTypeRecId(governmentExchangeRateTypeRecId);
            }

            taxAmountNow = currencyExchangeHelper.calculateTransactionToAccounting(
                                                        tmpTaxWorkTrans.SourceCurrencyCode,
                                                        tmpTaxWorkTrans.SourceTaxAmountCur,
                                                        true);

            if (taxAmountNow != tmpTaxWorkTrans.TaxAmount)
            {
                taxAmountDif = taxAmountNow - tmpTaxWorkTrans.TaxAmount;

                taxAmountReporting = currencyExchangeHelper.calculateAccountingToReportingAdjustment(
                            tmpTaxWorkTrans.SourceCurrencyCode,
                            taxAmountDif,
                            true);

                this.addExchVoucherTrans_unrealized(tmpTaxWorkTrans.TaxDirection,
                                                        tmpTaxWorkTrans.SourceCurrencyCode,
                                                        tmpTaxWorkTrans.LedgerDimension,
                                                        Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId),
                                                        tmpTaxWorkTrans.TaxDirection == TaxDirection::OutgoingTax ?  -taxAmountDif : taxAmountDif,
                                                        taxAmountReporting);
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If the return value of the <c>canGoBatch</c> method is
    ///    false this method will not have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSwapBetweenCS</Name>
				<Source><![CDATA[
    protected boolean canSwapBetweenCS()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnrealizedRecord_TH</Name>
				<Source><![CDATA[
    private void deleteUnrealizedRecord_TH()
    {
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        TaxTrans                            taxTrans;
        TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;
        TaxTable                            taxTable;

        taxTable = TaxTable::find(taxCode);

        if (taxTable.UnrealizedTax)
        {
            ttsBegin;
            while select RecId from dimensionAttributeValueCombination
                where DimensionAttributeValueCombination.MainAccount == MainAccount::findByLedgerDimension(TaxLedgerAccountGroup::find(taxTable.TaxAccountGroup).TaxUnrealizedPayablesLedgerDimension).RecId
            {
                select forupdate taxTransGeneralJournalAccountEntry
                join InventTransId from taxTrans
                    where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                        && taxTransGeneralJournalAccountEntry.LedgerDimension == dimensionAttributeValueCombination.RecId
                        && taxTrans.RealizedDate       >= fromDate
                        && taxTrans.RealizedDate       <= toDate
                        && taxTrans.TaxCode            == taxCode
                        && taxTrans.TaxPeriod          == taxPeriod
                        && taxTrans.SourceCurrencyCode != Ledger::accountingCurrency(CompanyInfo::current())
                        && taxTrans.UnrealizedTax      == NoYes::No;

                if (taxTransGeneralJournalAccountEntry.RecId != 0
                    && InventTable::find(SalesLine::findInventTransId(taxTrans.InventTransId).ItemId).ItemType == ItemType::Service)
                {
                    taxTransGeneralJournalAccountEntry.delete();
                    break;
                }
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase  dialogRunbase = new DialogRunbase("@SYS95384", this);

        dialogTaxPeriod          = dialogRunbase.addField(extendedtypestr(TaxPeriod));
        dialogSettleDate         = dialogRunbase.addField(extendedtypestr(TransDate), "@SYS16693", "@SYS67021");
        dialogPostingDate        = dialogRunbase.addField(extendedtypestr(TransDate), "@SYS14475", "@SYS16696");
        dialogTaxCode            = dialogRunbase.addField(extendedtypestr(TaxCode));
        dialogExchRateDate       = dialogRunbase.addField(extendedtypestr(TransDate), "@SYS8879", "@SYS24519");
        dialogGovernmentExchRate = dialogRunbase.addField(extendedtypestr(ExchangeRateTypeRecId), "@SYS95376", "@SYS323876");
        dialogUseDailyRate       = dialogRunbase.addField(extendedtypestr(NoYesId), "@SYS7394", "@SYS59567");

        dialogTaxPeriod.value(taxPeriod);
        dialogSettleDate.value(settleDate);
        dialogPostingDate.value(postingDate);
        dialogTaxCode.value(taxCode);
        dialogExchRateDate.value(exchRateDate);
        dialogGovernmentExchRate.value(governmentExchangeRateTypeRecId);
        dialogUseDailyRate.value(useDailyRate);

        if (!settleDate)
        {
            dialogSettleDate.value(dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }
        if (!postingDate)
        {
            dialogPostingDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromCustTrans</Name>
				<Source><![CDATA[
    private boolean findFromCustTrans(TaxTrans    _taxTrans)
    {
        CustTrans   custTrans;
        CustTrans   offsetCustTrans;

        custTrans = CustTrans::findVoucherDate(_taxTrans.Voucher, _taxTrans.TransDate);
        select firstonly TransDate, RecId from offsetCustTrans where offsetCustTrans.RecId == custTrans.OffsetRecid;
        if (offsetCustTrans.RecId)
        {
            return this.isSameYrDifferentMth(offsetCustTrans.TransDate, _taxTrans.TransDate);
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendTrans</Name>
				<Source><![CDATA[
    private boolean findFromVendTrans(TaxTrans    _taxTrans)
    {
        VendTrans   vendTrans;
        VendTrans   offsetVendTrans;

        vendTrans = VendTrans::findVoucherDate(_taxTrans.Voucher, _taxTrans.TransDate);
        select firstonly TransDate, RecId from offsetVendTrans where offsetVendTrans.RecId == vendTrans.OffsetRecid;
        if (offsetVendTrans.RecId)
        {
            return this.isSameYrDifferentMth(offsetVendTrans.TransDate, _taxTrans.TransDate);
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerVoucher</Name>
				<Source><![CDATA[
    private LedgerVoucher findLedgerVoucher()
    {
        TransactionTxt  transactionTxt;

        numberSeq = NumberSeq::newGetVoucher(LedgerParameters::numRefLedgerExchAdjVoucher(), false);

        voucher = numberSeq.voucher();

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Tax,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(voucher,
                                                                 postingDate,
                                                                 SysModule::Tax,
                                                                 LedgerTransType::ExchAdjustment));

        if (ledgerVoucher)
        {
            ledgerVoucher.parmVoucherSeriesCode(numberSeq.parmVoucherSequenceCode());

            transactionTxt = TransactionTxt::construct();
            transactionTxt.setType(LedgerTransTxt::LedgerExchAdj);
            transactionTxt.setVoucher(voucher);

            ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transactionTxt.txt());
        }

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        taxPeriod          = dialogTaxPeriod.value();
        settleDate         = dialogSettleDate.value();
        postingDate        = dialogPostingDate.value();
        taxCode            = dialogTaxCode.value();
        exchRateDate       = dialogExchRateDate.value();
        governmentExchangeRateTypeRecId = dialogGovernmentExchRate.value();
        useDailyRate       = dialogUseDailyRate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    private void initValues()
    {
        fromDate    = TaxReportPeriod::find(taxPeriod, settleDate).FromDate;
        toDate      = TaxReportPeriod::find(taxPeriod, settleDate).ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserttaxExchRateAdjustment</Name>
				<Source><![CDATA[
    private boolean inserttaxExchRateAdjustment(
        TaxTrans    _taxTrans,
        boolean     _realizeSalesTax)
    {
        TaxExchRateAdjustment   taxExchRateAdjustment;
        ExchangeRateHelper      exchangeRateHelper;

        ttsbegin;

        taxExchRateAdjustment.clear();
        taxExchRateAdjustment.initFromTaxTrans(_taxTrans);

        taxExchRateAdjustment.TaxPeriod          = taxPeriod;
        taxExchRateAdjustment.GovernmentExchRate = (_realizeSalesTax ? NoYes::Yes : NoYes::No);
        taxExchRateAdjustment.ExchRateDate       = exchRateDate;

        if (_taxTrans.RealizedDate)
        {
            taxExchRateAdjustment.ExchRateDate   = _taxTrans.RealizedDate;
        }
        else
        {
            if (useDailyRate == NoYes::Yes)
            {
                taxExchRateAdjustment.ExchRateDate   = _taxTrans.TransDate;
            }
        }

        exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                _taxTrans.SourceCurrencyCode,
                taxExchRateAdjustment.ExchRateDate);

        if (_realizeSalesTax)
        {
            exchangeRateHelper.parmExchangeRateTypeRecId(governmentExchangeRateTypeRecId);
        }

        taxExchRateAdjustment.ExchRate = exchangeRateHelper.getExchangeRate1();
        taxExchRateAdjustment.ExchRateSecond = exchangeRateHelper.getExchangeRate2();

        taxExchRateAdjustment.TaxCode = taxCode;

        taxExchRateAdjustment.insert();

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private void insertTmpTaxWorkTrans(
        TaxTrans                _taxTrans,
        boolean                 _realizeSalesTax,
        LedgerDimensionAccount  _taxLedgerDimension)
    {
        tmpTaxWorkTrans.SourceCurrencyCode  = _taxTrans.SourceCurrencyCode;
        tmpTaxWorkTrans.Voucher             = _taxTrans.Voucher;
        tmpTaxWorkTrans.TaxAmount           = _taxTrans.TaxAmount;
        tmpTaxWorkTrans.SourceTaxAmountCur  = _taxTrans.SourceTaxAmountCur;
        tmpTaxWorkTrans.TransDate           = _taxTrans.TransDate;
        tmpTaxWorkTrans.euroTriangulation   = _taxTrans.euroTriangulation;
        tmpTaxWorkTrans.LedgerDimension     = _taxLedgerDimension;
        tmpTaxWorkTrans.TaxDirection        = _taxTrans.TaxDirection;
        tmpTaxWorkTrans.Posted              = _realizeSalesTax;
        tmpTaxWorkTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSameYrDifferentMth</Name>
				<Source><![CDATA[
    private boolean isSameYrDifferentMth(
        TransDate date1,
        TransDate date2)
    {
        boolean ret;

        if (!(mthofyr(date1) == mthofyr(date2) && year(date1) == year(date2)))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>realizeSalesTax</Name>
				<Source><![CDATA[
    private boolean realizeSalesTax(TaxTrans    _taxTrans)
    {
        switch (_taxTrans.Source)
        {
            case TaxModuleType::Voucher :
                if (_taxTrans.TaxOrigin == TaxOrigin::Payment && _taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                {
                    return this.findFromVendTrans(_taxTrans);
                }
                else if (_taxTrans.TaxOrigin == TaxOrigin::Payment && _taxTrans.TaxDirection == TaxDirection::IncomingTax)
                {
                    return this.findFromCustTrans(_taxTrans);
                }

            case TaxModuleType::Purch :
            case TaxModuleType::PurchInvoice :
                return this.findFromVendTrans(_taxTrans);

            case TaxModuleType::Sales :
            case TaxModuleType::SalesInvoice :
                return this.findFromCustTrans(_taxTrans);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        boolean foundDiff;

        try
        {
            ttsbegin;

            this.initValues();

            ledgerVoucher = this.findLedgerVoucher();

            if (ledgerVoucher)
            {
                this.sumTaxTransFCYRealized();

                foundDiff = this.addLedgerVoucherTrans();

                ledgerVoucher.end();
            }

            if (!foundDiff)
            {
                numberSeq.abort();
            }

            TransactionLog::create(TransactionLogType::LedgerExchAdj, voucher);

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxTransFCY</Name>
				<Source><![CDATA[
    private void sumTaxTransFCY()
    {
        TaxTrans    taxTrans;
        boolean     realizeSalesTax;
        boolean     updateExchRate;

        LedgerDimensionAccount ledgerDimensionAccount;

        while select sum(SourceTaxAmountCur),
                     sum(TaxAmount),
                     maxof(Source),
                     maxof(TaxOrigin),
                     maxof(TaxDirection),
                     maxof(RecId),
                     maxof(Voucher),
                     maxof(TransDate),
                     maxof(SourceCurrencyCode),
                     maxof(CurrencyCode),
                     maxof(euroTriangulation)
            from  taxTrans
            group by Voucher, SourceCurrencyCode, TransDate
            where taxTrans.TransDate           >= fromDate
                && taxTrans.TransDate          <= toDate
                && taxTrans.TaxCode            == taxCode
                && taxTrans.TaxPeriod          == taxPeriod
                && taxTrans.SourceCurrencyCode != CompanyInfoHelper::standardCurrency()
        {
            realizeSalesTax = this.realizeSalesTax(taxTrans);

            if (realizeSalesTax)
            {
                ledgerDimensionAccount = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTrans.RecId);

                updateExchRate  = false;

                if (TaxExchRateAdjustment::exist(taxTrans.Voucher, taxTrans.TransDate, taxPeriod, taxCode, taxTrans.RealizedDate))
                {
                    updateExchRate = this.updateTaxExchRateAdjustment(taxTrans, realizeSalesTax, ledgerDimensionAccount);
                }
                else
                {
                    updateExchRate = this.inserttaxExchRateAdjustment(taxTrans, realizeSalesTax);
                }
                if (updateExchRate)
                {
                    this.insertTmpTaxWorkTrans(taxTrans, realizeSalesTax, ledgerDimensionAccount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxTransFCYRealized</Name>
				<Source><![CDATA[
    private void sumTaxTransFCYRealized()
    {
        TaxTrans    taxTrans;
        boolean     realizeSalesTax;
        boolean     updateExchRate;

        LedgerDimensionAccount ledgerDimensionAccount;

        this.deleteUnrealizedRecord_TH();

        while select TransDate,
                     RealizedDate,
                     Voucher,
                     SourceCurrencyCode,
                     sum(SourceTaxAmountCur),
                     sum(TaxAmount),
                     maxof(Source),
                     maxof(TaxOrigin),
                     maxof(TaxDirection),
                     maxof(RecId),
                     maxof(CurrencyCode),
                     maxof(euroTriangulation),
                     maxof(TaxTransRefRecId)
            from  taxTrans
            group by Voucher, SourceCurrencyCode, TransDate, RealizedDate
            where taxTrans.RealizedDate        >= fromDate
                && taxTrans.RealizedDate          <= toDate
                && taxTrans.TaxCode            == taxCode
                && taxTrans.TaxPeriod          == taxPeriod
                && taxTrans.SourceCurrencyCode != Ledger::accountingCurrency(CompanyInfo::current())
                && taxTrans.UnrealizedTax      == NoYes::No
        {
            realizeSalesTax = this.realizeSalesTax(taxTrans);

            if (realizeSalesTax)
            {
                updateExchRate  = false;

                ledgerDimensionAccount = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTrans.RecId);

                if (TaxExchRateAdjustment::exist(taxTrans.Voucher, taxTrans.TransDate, taxPeriod, taxCode, taxTrans.RealizedDate))
                {
                    updateExchRate = this.updateTaxExchRateAdjustment(taxTrans, realizeSalesTax, ledgerDimensionAccount);
                }
                else
                {
                    updateExchRate = this.inserttaxExchRateAdjustment(taxTrans, realizeSalesTax);
                }
                if (updateExchRate)
                {
                    this.insertTmpTaxWorkTrans(taxTrans, realizeSalesTax, ledgerDimensionAccount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass, 1);

        #LOCALMACRO.CurrentList_v1
            taxPeriod,
            settleDate,
            postingDate,
            taxCode,
            exchRateDate,
            governmentExchRate,
            useDailyRate
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;

            case 1 :
                [version,#CurrentList_v1] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxExchRateAdjustment</Name>
				<Source><![CDATA[
    private boolean updateTaxExchRateAdjustment(
        TaxTrans                _taxTrans,
        boolean                 _realizeSalesTax,
        LedgerDimensionAccount  _taxLedgerDimension)
    {
        TaxExchRateAdjustment    taxExchRateAdjustment;
        AmountMST                taxAmountNow;
        AmountMST                taxAmountDif;
        AmountMSTSecondary       amountMSTSecondary;
        boolean                  ret = false;
        TransDate                transDate;
        LedgerRecId              ledgerRecId = Ledger::current();

        CurrencyExchangeHelper   currencyExchangeHelper;
        ExchangeRateHelper       exchangeRateHelper;

        ttsbegin;

        transDate             = _taxTrans.RealizedDate ? _taxTrans.RealizedDate : _taxTrans.TransDate;
        taxExchRateAdjustment = TaxExchRateAdjustment::find(_taxTrans.Voucher,
                                                            _taxTrans.TransDate,
                                                            taxPeriod,
                                                            taxCode,
                                                            _taxTrans.RealizedDate,
                                                            true);

        exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                ledgerRecId,
                _taxTrans.SourceCurrencyCode,
                useDailyRate == NoYes::Yes ? transDate : exchRateDate);

        if (_realizeSalesTax)
        {
            exchangeRateHelper.parmExchangeRateTypeRecId(governmentExchangeRateTypeRecId);
        }

        if (taxExchRateAdjustment.ExchRate != exchangeRateHelper.getExchangeRate1()
            || taxExchRateAdjustment.ExchRateSecond != exchangeRateHelper.getExchangeRate2())
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(ledgerRecId,
                                                                            useDailyRate == NoYes::Yes ? transDate : exchRateDate);

            if (_realizeSalesTax)
            {
                currencyExchangeHelper.parmExchangeRateTypeRecId(governmentExchangeRateTypeRecId);
            }

            taxAmountNow = currencyExchangeHelper.calculateTransactionToAccounting(
                                                        _taxTrans.SourceCurrencyCode,
                                                        _taxTrans.SourceTaxAmountCur,
                                                        true);

            taxAmountDif        = -(taxAmountNow - _taxTrans.TaxAmount);

            amountMSTSecondary = currencyExchangeHelper.calculateAccountingToReportingAdjustment(
                            _taxTrans.SourceCurrencyCode,
                            taxAmountDif,
                            true);

            if (!_taxTrans.TaxTransRefRecId)
            {
                this.addExchVoucherTrans(_taxTrans.TaxDirection,
                                         _taxTrans.SourceCurrencyCode,
                                         _taxLedgerDimension,
                                         _taxTrans.CurrencyCode,
                                         taxAmountDif,
                                         amountMSTSecondary);
            }

            taxExchRateAdjustment.GovernmentExchRate    = _realizeSalesTax;
            taxExchRateAdjustment.ExchRateDate          = useDailyRate == NoYes::Yes ? transDate : exchRateDate;
            taxExchRateAdjustment.ExchRate              = exchangeRateHelper.getExchangeRate1();
            taxExchRateAdjustment.ExchRateSecond        = exchangeRateHelper.getExchangeRate2();

            taxExchRateAdjustment.TaxCode = taxCode;

            taxExchRateAdjustment.update();

            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (ret && useDailyRate && exchRateDate)
        {
            ret = checkFailed(strfmt("@SYS99486", "@SYS7394", "@SYS8879"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxExchRateAdjUnrealized construct()
    {
        return new TaxExchRateAdjUnrealized();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS10991";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TaxExchRateAdjUnrealized taxExchRateAdjUnrealized = TaxExchRateAdjUnrealized::construct();

        if (taxExchRateAdjUnrealized.prompt())
        {
            // Run process as IL
            TaxExchRateAdjUnrealized::runIL(taxExchRateAdjUnrealized.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIL</Name>
				<Source><![CDATA[
    private static container runIL(container _pack)
    {
        TaxExchRateAdjUnrealized TaxExchRateAdjUnrealized = new TaxExchRateAdjUnrealized();
        taxExchRateAdjUnrealized.unpack(_pack);
        taxExchRateAdjUnrealized.runOperation();

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// All concrete Runbase classes must implement a method desribing whether the class is designed for running in the Sandbox;
    /// essentially whether they are designed for execution in a new session.
    /// </summary>
    /// <returns>True if this Runbase-extending class is meant to run in a new session; false otherwise.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>