<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceBatchJobHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceBatchJobHelper
{
    private static real deleteBulkSize = 2048.0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteBatchTask</Name>
				<Source><![CDATA[
    internal static void deleteBatchTask(int _classNum)
    {
        Batch batchTask;
        select firstonly forupdate batchTask
            where batchTask.ClassNumber == _classNum;

        if (batchTask.RecId)
        {
            var batchJobId = batchTask.BatchJobId;
            batchTask.skipAosValidation(true);
            batchTask.doDelete();
        
            BatchJob batchJob;
            select firstonly forupdate batchJob
                where batchJob.RecId == batchJobId;

            if (batchJob.RecId)
            {
                batchJob.skipAosValidation(true);
                batchJob.doDelete();
            }

            Info(strFmt("@SCM:InventoryServiceAdjustmentBatchJobDisabledInfo", batchTask.Caption));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateTasks</Name>
				<Source><![CDATA[
    internal static System.Threading.Tasks.Task[] allocateTasks(InventInventoryDataServiceJobTaskType _type, boolean _cacheToken = false, boolean _isPartitionByProductIdForDiagTool = false)
    {
        TableId sourceTableId = InventInventoryDataServiceBatchJobHelper::getTableId(_type);
        Common sourceTable = new SysDictTable(sourceTableId).makeRecord();

        select minof(RecId) from sourceTable;
        RecId minRecId = sourceTable.RecId;
        select maxof(RecId) from sourceTable;
        RecId maxRecId = sourceTable.RecId;
        if (!minRecId || !maxRecId)
        {
            return new System.Threading.Tasks.Task[0]();
        }

        if (_cacheToken)
        {
            InventInventoryDataServiceBatchJobTask::create(minRecId, minRecId + 9, _type, _isPartitionByProductIdForDiagTool).run();
            minRecId = minRecId + 10;
        }

        int bulkSizeOfRequest = InventInventoryDataServiceBatchJobHelper::getBulkSizeOfRequest(InventInventoryDataServiceParameters::find());

        int WeightedRecordCount = InventInventoryDataServiceBatchJobHelper::getTotalWeightedRecordCount(_type);
        if (!WeightedRecordCount)
        {
            return new System.Threading.Tasks.Task[0]();
        }

        int estimatedTaskCount = InventInventoryDataServiceBatchJobHelper::ceil(WeightedRecordCount/bulkSizeOfRequest);
        int recordCountInQueue = maxRecId - minRecId + 1;
        int recordCountInQueuePerTask = InventInventoryDataServiceBatchJobHelper::ceil(recordCountInQueue / estimatedTaskCount);
        RecId currentRecId = minRecId;
        List taskList = new List(Types::Class);
        int taskCount = 0;

        for (int i = 0; i < estimatedTaskCount; i++)
        {
            RecId taskMinRecId = currentRecId;
            RecId taskMaxRecId = min(currentRecId + recordCountInQueuePerTask - 1, maxRecId);
            taskList.addEnd(InventInventoryDataServiceBatchJobTask::create(taskMinRecId, taskMaxRecId, _type));
            taskCount++;

            currentRecId = taskMaxRecId + 1;
            if (currentRecId > maxRecId)
            {
                break;
            }
        }

        int i = 0;
        var threadTasklist = new System.Threading.Tasks.Task[taskCount]();
        var tasksEnumerator = taskList.getEnumerator();
        while (tasksEnumerator.moveNext())
        {
            InventInventoryDataServiceBatchJobTask task = tasksEnumerator.current();
            threadTasklist.SetValue(task.runAsync(), i);
            i++;
        }

        return threadTasklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateDeleteTasks</Name>
				<Source><![CDATA[
    internal static System.Threading.Tasks.Task[] allocateDeleteTasks(TableId sourceTableId)
    {
        Common              sourceTable = new SysDictTable(sourceTableId).makeRecord();
        FieldId             reservationIdFieldId = fieldName2Id(sourceTableId, identifierStr(InventoryServiceReservationId));
        FieldId             autoOffsetFieldId = fieldName2Id(sourceTableId, identifierStr(InventoryServiceAutoOffset));
    
        select minof(RecId) from sourceTable
            where (sourceTable.(reservationIdFieldId) != '' || sourceTable.(autoOffsetFieldId) == true);
        RecId minRecId = sourceTable.RecId;
        select maxof(RecId) from sourceTable
            where (sourceTable.(reservationIdFieldId) != '' || sourceTable.(autoOffsetFieldId) == true);
        RecId maxRecId = sourceTable.RecId;
        select count(RecId) from sourceTable
            where sourceTable.RecId >= minRecId && sourceTable.RecId <= maxRecId;        
        int64 recordCount = sourceTable.RecId;

        if (!minRecId || !maxRecId)
        {
            return new System.Threading.Tasks.Task[0]();
        }

        real bulkSize = InventInventoryDataServiceBatchJobHelper::deleteBulkSize;

        if (!recordCount)
        {
            return new System.Threading.Tasks.Task[0]();
        }

        int estimatedTaskCount = InventInventoryDataServiceBatchJobHelper::ceil(recordCount/bulkSize);
        int64 recordCountInQueue = maxRecId - minRecId + 1;
        int64 recordCountInQueuePerTask = InventInventoryDataServiceBatchJobHelper::ceil(recordCountInQueue / estimatedTaskCount);
        RecId currentRecId = minRecId;
        List taskList = new List(Types::Class);
        int taskCount = 0;

        for (int i = 0; i < estimatedTaskCount; i++)
        {
            RecId taskMinRecId = currentRecId;
            RecId taskMaxRecId = min(currentRecId + recordCountInQueuePerTask - 1, maxRecId);
            
            select firstonly1 RecId from sourceTable
                where sourceTable.RecId >= taskMinRecId && sourceTable.RecId <= taskMaxRecId;

            if (sourceTable.RecId)
            {
                taskList.addEnd(InventInventoryDataServiceCleanReservationIdBatchJobTask::create(taskMinRecId, taskMaxRecId, sourceTableId));
                taskCount++;
            }

            currentRecId = taskMaxRecId + 1;
            if (currentRecId > maxRecId)
            {
                break;
            }
        }

        int i = 0;
        var threadTasklist = new System.Threading.Tasks.Task[taskCount]();
        var tasksEnumerator = taskList.getEnumerator();
        while (tasksEnumerator.moveNext())
        {
            InventInventoryDataServiceCleanReservationIdBatchJobTask task = tasksEnumerator.current();
            threadTasklist.SetValue(task.runAsync(), i);
            i++;
        }

        return threadTasklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ceil</Name>
				<Source><![CDATA[
    internal static int ceil(real a)
    {
        return real2int((trunc(a) == a ? a : trunc(a) + 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBulkSizeOfRequest</Name>
				<Source><![CDATA[
    internal static int getBulkSizeOfRequest(InventInventoryDataServiceParameters parameter)
    {
        if (parameter.NumberOfInventsumInRequest)
        {
            return parameter.NumberOfInventsumInRequest;
        }
        else
        {
            return 512;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDataSources</Name>
				<Source><![CDATA[
    internal static void researchDataSources(Args _args)
    {
        if (_args)
        {
            FormRun formRun = _args.caller();
            if (FormRun)
            {
                List dsList = formRun.rootFormDataSources();
                ListEnumerator dsListEnumerator;
                if (dsList && dsList.elements() > 0)
                {
                    dsListEnumerator = dsList.getEnumerator();

                    while(dsListEnumerator.moveNext())
                    {
                        dsListEnumerator.current().research(true);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsBatchTaskValidate</Name>
				<Source><![CDATA[
    internal static boolean IsBatchTaskValidate(ClassId _classId, DictClass _dictClass)
    {
        Batch batchTask;
        select firstonly RecId from batchTask where batchTask.ClassNumber == _classId;
        if (_dictClass != null && !batchTask.RecId && BatchJob::isSystemTask(_dictClass))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    private static TableId getTableId(InventInventoryDataServiceJobTaskType _type)
    {
        switch (_type)
        {
            case InventInventoryDataServiceJobTaskType::InventSum:
                return tableNum(InventInventoryDataServiceInventSumQueueTemp);
            case InventInventoryDataServiceJobTaskType::WHSInventReserve:
                return tableNum(InventInventoryDataServiceWHSQueueTemp);
            case InventInventoryDataServiceJobTaskType::SoftReserve:
                return tableNum(InventInventoryDataServiceSoftReserveQueueTemp);
            case InventInventoryDataServiceJobTaskType::IV_Adjustment:
                return tableNum(InventInventoryDataServiceOnhandAdjustmentQueueTemp);
            case InventInventoryDataServiceJobTaskType::OnHandDiagnose:
                return tableNum(InventoryServiceOnHandCheckTable);
            case InventInventoryDataServiceJobTaskType::OnHandChangeSchedule:
                return tableNum(InventInventoryDataServiceOnhandChangeScheduleQueueTemp);
            case InventInventoryDataServiceJobTaskType::InventJournalTransStatus:
                return tableNum(InventInventoryDataServiceJournalTransStatusQueue);
            default:
                throw error("@SYS152811");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalWeightedRecordCount</Name>
				<Source><![CDATA[
    private static int getTotalWeightedRecordCount(InventInventoryDataServiceJobTaskType _type)
    {
        switch (_type)
        {
            case InventInventoryDataServiceJobTaskType::InventSum:
                int res = (select count(RecId) from InventInventoryDataServiceInventSumQueueTemp).RecId;
                if (FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceAdjustmentOffsetFeature::instance()))
                {
                    res += (select count(RecId) from InventInventoryDataServiceAdjustmentOffsetQueue).RecId / 2;
                }

                return res;
            case InventInventoryDataServiceJobTaskType::WHSInventReserve:
                return (select count(RecId) from InventInventoryDataServiceWHSQueueTemp).RecId;
            case InventInventoryDataServiceJobTaskType::SoftReserve:
                return (select count(RecId) from InventInventoryDataServiceSoftReserveQueueTemp).RecId;
            case InventInventoryDataServiceJobTaskType::IV_Adjustment:
                return (select count(RecId) from InventInventoryDataServiceOnhandAdjustmentQueueTemp).RecId;
            case InventInventoryDataServiceJobTaskType::OnHandDiagnose:
                return (select count(RecId) from InventoryServiceOnHandCheckTable).RecId;
            case InventInventoryDataServiceJobTaskType::OnHandChangeSchedule:
                return (select count(RecId) from InventInventoryDataServiceOnhandChangeScheduleQueueTemp).RecId;
            case InventInventoryDataServiceJobTaskType::InventJournalTransStatus:
                return (select count(RecId) from InventInventoryDataServiceJournalTransStatusQueue).RecId;
            default:
                throw error("@SYS152811");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>