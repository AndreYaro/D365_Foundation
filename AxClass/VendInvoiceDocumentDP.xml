<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceDocumentDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceDocumentDP</c> class retrieves records for the <c>VendInvoiceDocument</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(VendInvoiceDocumentContract))]
public class VendInvoiceDocumentDP extends SrsReportDataProviderPreProcess
{
    str parm;
    str inventDimString;

    container inventDimSetup;
    container inventDimSetupProduct;
    PrintCopyOriginal printCopyOriginal;

    VendInvoiceJour vendInvoiceJour;
    VendInvoiceTrans vendInvoiceTrans;
    InventDim inventDim;
    InventReportDimHistory inventReportDimHistory;
    VendPaymSchedLine vendPaymSchedLine;
    CustVendCreditInvoicingTrans custVendCreditInvoicingTrans;
    CustVendCreditInvoicingJour custVendCreditInvoicingJour;
    PurchInvoiceJournalPrint purchInvoiceJournalPrint;
    TaxSpec taxSpec;
    FormletterProformaPrint formletterProformaPrint;
    InventDimCtrl_Rep_Purch inventDimReport;
    ItemType taxInvoiceItemType;
    CashDiscAmount cashDiscAmountTax;
    VendInvoiceDocumentTmp vendInvoiceDocumentTmp;
    SysDocuBrandDetailsRegular docuBrandDetails;
    CompanyInfo companyInfo;
    VendFormletterParameters vendFormletterParameters;
    VendParameters vendParameters ;

    RecId formLetterRecId;

    NoYes showInventReportDimHistory;
    NoYes purchInvoiceTransOrTaxTrans;
    NoYes isProforma;
    boolean insertIntoTempTable;
    boolean insertInventDim;
    boolean isTaxInvoice;
    boolean cashDiscOnInvoice;
    boolean vendCreditInvoicing;

    AmountCur totalPurchBalance;
    AmountCur totalDiscount;
    AmountCur totalMiscCharges;
    AmountCur totalPurchTax;
    AmountCur totalRoundOff;
    Amount amount;

    // <GIN>
    PurchLine purchLineForTaxes;
    TaxInformation_IN taxInformation;
    TaxRegistrationNumbers_IN taxRegistrationNumbers;
    VendInvoiceDocumentTmp_IN vendInvoiceDocumentTmp_IN;
    // </GIN>

    // <GEEU>
    boolean isFirstRecord;
    Set taxDirectives;
    CurrencyCode companyCurrencyCode;
    RNumDateInWordConverter rNumDateInWordConverter;
    // </GEEU>
    // <GEECZ>
    VendSettlement vendSettlement;
    VendTrans vendTrans;
    TaxTrans taxTrans;
    AmountCur totalPrePaidAmountCur;
    boolean printPrePaymentDepreciations;
    boolean printPrePaymentTaxTrans;
    // </GEECZ>

    // <GEEHU><GEELT>
    boolean insertTaxExcludedAmountValues;
    boolean insertAmountInWords;
    AmountCur totalTaxAmountExcludedCur;
    // </GEELT></GEEHU>

    // <GMY>
    VendInvoiceJour_W vendInvoiceJour_W;
    boolean isSelfBilledInvoice_MY;
    // </GMY>

    LogisticsAddressing address;
    Phone phone;
    TeleFax teleFax;
    Name name;

    boolean phoneCached;
    boolean addressCached;
    boolean companyNameCached;
    boolean telefaxCached;
    boolean insertCompanyLogo;
    const str emptyString = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscTxt_SA</Name>
				<Source><![CDATA[
    private CashDiscFreeTxt cashDiscTxt_SA()
    {
        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(vendInvoiceJour.TableId, vendInvoiceJour.RecId))
        {
            boolean isCashDiscCalculatedOnAmountInclTaxForVend = TaxCashDiscountParametersHelper::cashDiscInclTax(ModuleCustVend::Vend);

            return CashDisc::cashDiscTxt(vendInvoiceJour.CashDiscCode,
                                         vendInvoiceJour.DocumentDate ? vendInvoiceJour.DocumentDate : vendInvoiceJour.InvoiceDate,
                                         isCashDiscCalculatedOnAmountInclTaxForVend,
                                         vendInvoiceJour.InvoiceAmount,
                                         vendInvoiceJour.InvoiceAmount - vendInvoiceJour.SumTax,
                                         vendInvoiceJour.CurrencyCode,
                                         vendInvoiceJour.CashDiscDate,
                                         vendInvoiceJour.CashDisc,
                                         vendInvoiceJour.LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensionsToInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the product inventoried dimension to the non inventoried
    /// dimension when appropriate.
    /// </summary>
    private void addProductDimensionsToInventDim()
    {
        if (vendFormletterParameters.ItemDimPlacement == ItemDimFormLetter::Line)
        {
            FieldId dimFieldId;
            container inventoryDimensionsLocal;

            // Add product inventory dimension information.
            for (int i = 1; i <= conLen(inventDimSetupProduct); i++)
            {
                dimFieldId = conPeek(inventDimSetupProduct, i);
                inventoryDimensionsLocal += dimFieldId;
            }

            // Add non inventoried product dimension information.
            for (int i = 1; i <= conLen(inventDimSetup); i++)
            {
                dimFieldId = conPeek(inventDimSetup, i);

                if (!conFind(inventoryDimensionsLocal, dimFieldId))
                {
                    inventoryDimensionsLocal += dimFieldId;
                }
            }

            inventDimSetup = inventoryDimensionsLocal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates the settlement <c>AmountCur</c> value.
    /// </summary>
    /// <returns>
    ///   The settlement <c>AmountCur</c> value.
    /// </returns>
    public AmountCur calculateSettledAmount()
    {
        VendSettlement localVendSettlement;

        select firstonly crosscompany SettleAmountCur from localVendSettlement
            where localVendSettlement.TransRecId == vendSettlement.OffsetRecid
                  && localVendSettlement.TransCompany == vendSettlement.OffsetCompany
                  && localVendSettlement.OffsetRecid == vendSettlement.TransRecId
                  && localVendSettlement.OffsetCompany == vendSettlement.TransCompany;

        return localVendSettlement.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPrepaidAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total prepaid <c>AmountCur</c> value.
    /// </summary>
    /// <returns>
    ///    An <c>AmountCur</c> value of the total prepayment amount.
    /// </returns>
    private AmountCur calculateTotalPrepaidAmount()
    {
        VendTrans vendTransLocal;
        VendTrans vendTransOffset;
        VendSettlement vendSettlementLocal;

        select crosscompany sum(SettleAmountCur) from vendSettlementLocal
            where vendSettlementLocal.DataAreaId == curExt()
            exists join vendTransLocal
                where vendTransLocal.RecId == vendSettlementLocal.TransRecId
                    && vendTransLocal.DataAreaId == vendSettlementLocal.TransCompany
                    && vendTransLocal.Voucher == vendInvoiceJour.LedgerVoucher
                    && vendTransLocal.AccountNum == vendInvoiceJour.InvoiceAccount
                    && vendTransLocal.TransDate == vendInvoiceJour.InvoiceDate
            exists join vendTransOffset
                where vendTransOffset.RecId == vendSettlementLocal.OffsetRecid
                    && vendTransOffset.DataAreaId == vendSettlementLocal.OffsetCompany
                    && (vendTransOffset.TransType == LedgerTransType::Payment
                        || vendTransOffset.Prepayment == NoYes::Yes);

        return -vendSettlementLocal.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransportationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the transportation related fields from the table.
    /// </summary>
    private void clearTransportationDetails()
    {
        vendInvoiceDocumentTmp.TransportationDataSection = NoYes::No;
        vendInvoiceDocumentTmp.DoPrintTransportationDocument = NoYes::No;
        vendInvoiceDocumentTmp.DeliveryName = '';
        vendInvoiceDocumentTmp.DeliveryAddress = '';

        vendInvoiceDocumentTmp.TransportationContactPersonName = '';
        vendInvoiceDocumentTmp.TransportationContactPersonTitle = '';

        vendInvoiceDocumentTmp.TransportationCarrierAddress = '';
        vendInvoiceDocumentTmp.TransportationCarrierName = '';

        vendInvoiceDocumentTmp.TransPortationIssuedByName = '';
        vendInvoiceDocumentTmp.TransportationIssuedByTitle = '';

        vendInvoiceDocumentTmp.TransportationLoadedDateTime = utcDateTimeNull();
        vendInvoiceDocumentTmp.TransportationLoadedAddress = '';
        vendInvoiceDocumentTmp.TransportationLoadedName = '';

        vendInvoiceDocumentTmp.TransportationPackageDangerDegree = '';
        vendInvoiceDocumentTmp.TransportationPackageDescription = '';

        vendInvoiceDocumentTmp.TransportationVehicleDescription = '';
        vendInvoiceDocumentTmp.TransportationVehicleDriverName = '';
        vendInvoiceDocumentTmp.TransportationVehiclePlateNumber = '';
        vendInvoiceDocumentTmp.TransportationVehicleTrailerNumber = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company postal address.
    /// </summary>
    /// <returns>
    /// The company postal address.
    /// </returns>
    private Addressing companyAddress()
    {
        if (addressCached)
        {
            return address;
        }

        LogisticsPostalAddress localLogisticsPostalAddress = LogisticsLocationEntity::findPostalAddress(companyInfo, LogisticsLocationRoleType::Invoice);

        if (localLogisticsPostalAddress)
        {
            addressCached = true;
            address = localLogisticsPostalAddress.Address;
            return address;
        }

        localLogisticsPostalAddress = companyInfo.postalAddress();

        if (localLogisticsPostalAddress)
        {
            addressCached = true;
            address = localLogisticsPostalAddress.Address;
            return address;
        }

        addressCached = true;
        address = '';
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company name.
    /// </summary>
    /// <returns>
    /// The company name.
    /// </returns>
    private Name companyName()
    {
        if (companyNameCached)
        {
            return name;
        }

        LogisticsLocationEntity location = LogisticsLocationEntity::findLocation(companyInfo, LogisticsLocationRoleType::Invoice, DateTimeUtil::getSystemDateTime(), false);

        if (location && location.parmLocationRecId())
        {
            companyNameCached = true;
            name = location.parmLocationDescription();
            return name;
        }

        companyNameCached = true;
        name = companyInfo.name();
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company phone.
    /// </summary>
    /// <returns>
    /// The company phone.
    /// </returns>
    private Phone companyPhone()
    {
        if (phoneCached)
        {
            return phone;
        }

        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(companyInfo.RecId, LogisticsElectronicAddressMethodType::Phone);

        if (electronicAddress)
        {
            phoneCached = true;
            phone = electronicAddress.Locator;
            return phone;
        }

        phoneCached = true;
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyTelefax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company telefax.
    /// </summary>
    /// <returns>
    /// The company telefax.
    /// </returns>
    private TeleFax companyTelefax()
    {
        if (telefaxCached)
        {
            return teleFax;
        }

        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(companyInfo.RecId,LogisticsElectronicAddressMethodType::Fax);

        if (electronicAddress)
        {
            telefaxCached = true;
            teleFax = electronicAddress.Locator;
            return teleFax;
        }
        telefaxCached = true;
        teleFax = '';
        return teleFax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name="_contract">
    /// An instance of <c>VendInvoiceDocumentContract</c> report contract class.
    /// </param>
    public void createData(VendInvoiceDocumentContract _contract)
    {
        #ISOCountryRegionCodes

        boolean shouldCreateTaxSpec = true;
        
        // <GEEU>
        LogisticsAddressCountryRegionISOCode isoCountryCode = SysCountryRegionCode::countryInfo();
        // </GEEU>
        // <GEEHU>
        boolean canGroupByTaxDirection = true;
        // </GEEHU>

        // <GEEU>
        isFirstRecord = true;
        taxDirectives = new Set(Types::String);
        companyCurrencyCode = Ledger::accountingCurrency();
        // </GEEU>

        // <GEELT><GEELV>
        if (isoCountryCode == #isoLT || isoCountryCode == #isoLV)
        {
            rNumDateInWordConverter = RNumDateInWordConverter::construct(currentUserLanguage());
        }
        // </GEELV></GEELT>

        isProforma = NoYes::No;
        companyInfo = CompanyInfo::find();
        vendFormletterParameters = VendFormletterParameters::find();
        vendParameters = VendParameters::find();
        RecId recId = _contract.parmRecordId();
        RecId ledgerjournalTransRecid = _contract.parmRecordIdLedgerJourTrans();
        printCopyOriginal = _contract.parmPrintCopyOriginal();
        formLetterRecId = _contract.parmFormLetterRecordId();
        parm = _contract.parmParm();

        NoYes vendPaymSchedInsert = NoYes::No;

        LedgerJournalTrans ledgerJournalTrans;
        if (ledgerjournalTransRecid)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerjournalTransRecid,false);
        }

        this.unpackFormLetter();

        if (purchInvoiceJournalPrint && purchInvoiceJournalPrint.parmProforma())
        {
            formletterProformaPrint = FormletterProformaPrint::newUnpack(purchInvoiceJournalPrint.parmFormletterProformaPrintPacked());
            isProforma = NoYes::Yes;
        }

        vendCreditInvoicing = vendParameters.CreditInvoicingReport;
        vendInvoiceJour = VendInvoiceJour::findRecId(recId);
        inventDimReport = InventDimCtrl_Rep_Purch::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Invoice);
        inventDimReport.initDimParmVisible();
        inventdimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        inventDimReport.initProductDimParmVisible();
        inventDimSetupProduct = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        this.addProductDimensionsToInventDim();

        cashDiscOnInvoice = TaxParameters::find().CashDiscOnInvoice;

        if (vendCreditInvoicing)
        {
            this.creditInvoicingHeader(vendInvoiceJour);
        }

        // <GMY>
        if (isoCountryCode == #isoMY)
        {
            vendInvoiceJour_W = vendInvoiceJour.vendInvoiceJour_W();

            if (vendInvoiceJour_W.InvoiceType_MY == InvoiceType_MY::SelfBilled)
            {
                isSelfBilledInvoice_MY = true;
            }
        }
        // </GMY>

        QueryRun tradeLoopTrans = new TradeLoopTrans(vendInvoiceJour, tableNum(VendInvoiceTrans)).buildQueryRun();
        tradeLoopTrans.reset();

        insertCompanyLogo = true;

        while (tradeLoopTrans.next())
        {
            insertIntoTempTable = false;
            showInventReportDimHistory = NoYes::No;
            insertInventDim = false;
            vendInvoiceTrans = tradeLoopTrans.get(tableNum(VendInvoiceTrans));

            if (vendCreditInvoicing)
            {
                this.creditInvoicingLines(vendInvoiceTrans);
            }

            if (shouldCreateTaxSpec)
            {
                this.setTaxSpec(ledgerJournalTrans);

                shouldCreateTaxSpec = false;
            }

            this.inventDimLine();
            purchInvoiceTransOrTaxTrans = NoYes::Yes;
            this.printInventTrans();

            if (!insertIntoTempTable)
            {
                this.insertVendInvoiceDocumentTmp(purchInvoiceTransOrTaxTrans,vendPaymSchedInsert);
                insertIntoTempTable = true;
            }
        }

        if (vendFormletterParameters.TaxSpecPrintLevel == TaxSpecPrintLevel::Currency ||
            vendFormletterParameters.TaxSpecPrintLevel == TaxSpecPrintLevel::CurrencyMST ||
            (vendFormletterParameters.TaxSpecPrintLevel == TaxSpecPrintLevel::None && (isoCountryCode == #isoLT || isoCountryCode == #isoHU)))
        {
            if (shouldCreateTaxSpec)
            {
                this.setTaxSpec(ledgerJournalTrans);

                shouldCreateTaxSpec = false;
            }

            if (vendParameters.IntracomVAT)
            {
                if (vendFormletterParameters.PrintIntracomVAT)
                {
                    taxSpec.setIntracomVATInvoice(NoYes::No);
                }
                else
                {
                    taxSpec.setIntracomVATInvoice(NoYes::Yes);
                }
            }

            // <GEEHU>
            if (isoCountryCode == #isoHU)
            {
                canGroupByTaxDirection = false;
            }
            // </GEEHU>

            // <GMY>
            if (isSelfBilledInvoice_MY)
            {
                taxSpec.parmIsGSTInvoice_MY(true);
            }
            // </GMY>

            DiscPct invDiscAmountDenominator = ((100 - vendInvoiceJour.CashDiscPercent) / 100);
            DiscPct taxDiscAmount= (vendInvoiceJour.CashDiscPercent / 100);

            purchInvoiceTransOrTaxTrans = NoYes::No;

            // <GEEHU>
            while (taxSpec.parmTaxSpec(canGroupByTaxDirection))
            // </GEEHU>
            {
                if (cashDiscOnInvoice && isoCountryCode == #isoES)
                {
                    amount = taxSpec.taxBaseAmount() / invDiscAmountDenominator;
                    cashDiscAmountTax = amount * taxDiscAmount;
                }

                this.insertVendInvoiceDocumentTmp(purchInvoiceTransOrTaxTrans, vendPaymSchedInsert);
                insertIntoTempTable = true;
            }
        }
        if (!insertIntoTempTable)
        {
            if (shouldCreateTaxSpec)
            {
                this.setTaxSpec(ledgerJournalTrans);

                shouldCreateTaxSpec = false;
            }

            this.insertVendInvoiceDocumentTmp(purchInvoiceTransOrTaxTrans, vendPaymSchedInsert);
            insertIntoTempTable = true;
        }
        
        if (vendInvoiceJour.PaymentSched)
        {
            VendPaymSched vendPaymSched;
            vendPaymSchedInsert = NoYes::Yes;
            purchInvoiceTransOrTaxTrans = NoYes::No;

            while select vendPaymSchedLine
                    where !vendPaymSchedLine.IsDeleted
                exists join vendPaymSched
                    where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId
                        && vendPaymSched.ExtRecId == vendInvoiceJour.RecId
            {
                this.insertVendInvoiceDocumentTmp(purchInvoiceTransOrTaxTrans, vendPaymSchedInsert);
            }
        }

        // <GIN>
        if (isoCountryCode == #isoIN)
        {
            if (TaxParameters::checkTaxParameters_IN())
            {
                select firstonly purchLineForTaxes
                    where purchLineForTaxes.PurchId == vendInvoiceJour.PurchId;
            }
            this.insertDataInVendInvoiceDocumentTmp_IN();
        }
        // </GIN>

        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            if (this.hasTotalPrepaidAmount())
            {
                this.insertPrepaidVendTrans();
            }
        }
        // </GEECZ>

        // <GEELT><GEEHU>
        if (isoCountryCode == #isoLT || isoCountryCode == #isoHU)
        {
            insertTaxExcludedAmountValues = true;
            this.insertVendInvoiceDocumentTmp(NoYes::No, NoYes::No);
            insertTaxExcludedAmountValues = false;
        }
        // </GEEHU></GEELT>

        // <GEELT>
        if (isoCountryCode == #isoLT)
        {
            insertAmountInWords = true;
            this.insertVendInvoiceDocumentTmp(NoYes::No, NoYes::No);
            insertAmountInWords = false;
        }
        // </GEELT>
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditInvoicingHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>custVendCreditInvoicingJour</c> object.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The vendor invoicing journal.
    /// </param>
    private void creditInvoicingHeader(VendInvoiceJour _vendInvoiceJour)
    {
        custVendCreditInvoicingJour = CustVendCreditInvoicingJour::findInvoiceId(_vendInvoiceJour.TableId, _vendInvoiceJour.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditInvoicingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>creditInvoicingLines</c> object.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// The vendor invoicing transaction.
    /// </param>
    private void creditInvoicingLines(VendInvoiceTrans _vendInvoiceTrans)
    {
        custVendCreditInvoicingTrans = CustVendCreditInvoicingTrans::findTransId(_vendInvoiceTrans.TableId, _vendInvoiceTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExternalItemId</c> value.
    /// </summary>
    /// <returns>
    /// An <c>ExternalItemId</c> value.
    /// </returns>
    private ExternalItemId externalItemNum()
    {
        switch (vendFormletterParameters.ItemNum)
        {
            case OurYourBoth::Our, OurYourBoth::Your:
                return emptyString;
            case OurYourBoth::Both:
                return vendInvoiceTrans.ExternalItemId;
        }
        return emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the invoice count.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The <c>VendInvoiceJour</c> buffer.
    /// </param>
    /// <returns>
    /// The count of records.
    /// </returns>
    public Counter getInvoiceCount_IN(VendInvoiceJour _vendInvoiceJour)
    {
        PurchLine purchLineLoc;
        
        select count(RecId) from purchLineLoc
            where purchLineLoc.PurchId == _vendInvoiceJour.PurchId;

        return any2int(purchLineLoc.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceDocumentTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(VendInvoiceDocumentTmp))
    ]
    public VendInvoiceDocumentTmp getVendInvoiceDocumentTmp()
    {
        select vendInvoiceDocumentTmp;
        return vendInvoiceDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))
    ]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        select docuBrandDetails;
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceDocumentTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>VendInvoiceDocumentTmp_IN</c> Temp Table.
    /// </summary>
    /// <returns>
    /// Data from <c>VendInvoiceDocumentTmp_IN</c>.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(VendInvoiceDocumentTmp_IN))]
    public VendInvoiceDocumentTmp_IN getVendInvoiceDocumentTmp_IN()
    {
        select vendInvoiceDocumentTmp_IN;
        return vendInvoiceDocumentTmp_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTotalPrepaidAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether there is any total Prepaid amount.
    /// </summary>
    /// <returns>
    ///    True when the total prepaid amount is not equal to 0; Otherwise, false.
    /// </returns>
    public boolean hasTotalPrepaidAmount()
    {
        return totalPrePaidAmountCur != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataInVendInvoiceDocumentTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data into <c>VendInvoiceDocumentTmp_IN</c> table.
    /// </summary>
    protected void populateDataInVendInvoiceDocumentTmp_IN()
    {
        TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(purchLineForTaxes);

        vendInvoiceDocumentTmp_IN.JournalRecId = vendInvoiceJour.RecId;

        if (TaxParameters::isSalesTaxEnable_IN())
        {
            vendInvoiceDocumentTmp_IN.ShowCSTNumber = true;
            vendInvoiceDocumentTmp_IN.SalesTaxNumber = TaxRegistrationNumbers_IN::find(transTaxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
        }

        if (TaxParameters::isVATEnable_IN())
        {
            vendInvoiceDocumentTmp_IN.ShowTINNumber = true;
            vendInvoiceDocumentTmp_IN.tinNumber = TaxRegistrationNumbers_IN::find(transTaxInformation.VATTIN).RegistrationNumber;
        }

        if (TaxParameters::isServiceTaxEnable_IN())
        {
            vendInvoiceDocumentTmp_IN.ShowSTCNumber = true;
            vendInvoiceDocumentTmp_IN.stcNumber = TaxRegistrationNumbers_IN::find(transTaxInformation.ServiceTaxRegistrationNumber).RegistrationNumber;
        }

        if (TaxParameters::isExciseEnable_IN())
        {
            vendInvoiceDocumentTmp_IN.showECCNumber = true;
            vendInvoiceDocumentTmp_IN.eccNumber = TaxRegistrationNumbers_IN::find(transTaxInformation.ExciseECCRegistrationNumber).RegistrationNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataInVendInvoiceDocumentTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into <c>VendInvoiceDocumentTmp_IN</c> table.
    /// </summary>
    private void insertDataInVendInvoiceDocumentTmp_IN()
    {
        this.populateDataInVendInvoiceDocumentTmp_IN();

        vendInvoiceDocumentTmp_IN.insert();
        vendInvoiceDocumentTmp_IN.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPrepaidVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the prepaid vendor transaction records and also the tax transaction records associated with it.
    /// </summary>
    private void insertPrepaidVendTrans()
    {
        VendTrans vendTransLocal;
        CustVendTransPostingLog_RU postingLog;

        VendTrans invoiceVendTrans = vendInvoiceJour.vendTrans();

        while select crosscompany vendSettlement
            where vendSettlement.DataAreaId == curExt()
                && vendSettlement.CanBeReversed == NoYes::Yes
            join vendTrans
                order by TransDate
                where vendTrans.RecId == vendSettlement.OffsetRecid
                        && vendTrans.DataAreaId == vendSettlement.OffsetCompany
                        && vendTrans.Prepayment == NoYes::Yes
            exists join vendTransLocal
                where vendTransLocal.RecId == vendSettlement.TransRecId
                    && vendTransLocal.DataAreaId == vendSettlement.TransCompany
                    && vendTransLocal.Voucher == vendInvoiceJour.LedgerVoucher
                    && vendTransLocal.AccountNum == vendInvoiceJour.InvoiceAccount
                    && vendTransLocal.TransDate == vendInvoiceJour.InvoiceDate
        {
            changecompany(vendSettlement.OffsetCompany)
            {
                printPrePaymentDepreciations = true;
                this.insertVendInvoiceDocumentTmp(NoYes::No, NoYes::No);
                printPrePaymentDepreciations = false;

                while select postingLog
                    where postingLog.PostingLogType == CustVendTransPostingLogType_RU::PrepaymentStornoVAT
                        && postingLog.RefTableId == tableNum(VendTrans)
                        && ((postingLog.TransRecId == vendTrans.RecId
                        && postingLog.TransCompany == vendTrans.DataAreaId
                        && postingLog.OffSetRecId == invoiceVendTrans.RecId
                        && postingLog.OffsetCompany == invoiceVendTrans.DataAreaId)
                        || (postingLog.OffSetRecId == vendTrans.RecId
                        && postingLog.OffsetCompany == vendTrans.DataAreaId
                        && postingLog.TransRecId == invoiceVendTrans.RecId
                        && postingLog.TransCompany == invoiceVendTrans.DataAreaId))
                {
                    while select taxTrans
                        where taxTrans.Voucher == postingLog.Voucher
                            && (taxTrans.TransDate == postingLog.TransDate
                            || taxTrans.TransDate == postingLog.reverseDate())
                    {
                        if ((taxTrans.Voucher != vendInvoiceJour.LedgerVoucher
                            || taxTrans.TransDate != vendInvoiceJour.InvoiceDate)
                            && !CzTaxDocumentTable::exist(taxTrans.Voucher, taxTrans.TransDate))
                        {
                            taxTrans.TaxBaseAmount = -taxTrans.TaxBaseAmount;
                            taxTrans.TaxAmount = -taxTrans.TaxAmount;
                            taxTrans.TaxBaseAmountCur = -taxTrans.TaxBaseAmountCur;
                            taxTrans.TaxAmountCur = -taxTrans.TaxAmountCur;
                        }

                        taxTrans.Voucher = vendTrans.Voucher;
                        taxTrans.TransDate = vendTrans.TransDate;

                        printPrePaymentTaxTrans = true;
                        this.insertVendInvoiceDocumentTmp(NoYes::No, NoYes::No);
                        printPrePaymentTaxTrans = false;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProductDimensionColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields on the <c>VendInvoiceDocumentTmp</c> for enabling the product dimension columns.
    /// </summary>
    /// <param name = "_vendInvoiceDocumentTmp">A <c>VendInvoiceDocumentTmp</c> record to set the values.</param>
    /// <param name = "_inventDimFieldId">A <c>FieldId</c> which is the product dimension on the <c>InventDim</c> record.</param>
    protected void enableProductDimensionColumns(VendInvoiceDocumentTmp _vendInvoiceDocumentTmp, FieldId _inventDimFieldId)
    {
        #InventDimDevelop
        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventSizeId):
                _vendInvoiceDocumentTmp.ShowInventDimSize = 1;
                break;
            case fieldNum(InventDim, InventColorId):
                _vendInvoiceDocumentTmp.ShowInventDimColor = 1;
                break;
            case fieldNum(InventDim, ConfigId):
                _vendInvoiceDocumentTmp.ShowInventDimConfigId = 1;
                break;
            case fieldNum(InventDim, InventStyleId):
                _vendInvoiceDocumentTmp.ShowInventDimStyleId = 1;
                break;
            case fieldNum(InventDim, InventVersionId):
                _vendInvoiceDocumentTmp.ShowInventDimVersion = 1;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendInvoiceDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates values into the <c>VendInvoiceDocumentTmp</c> table.
    /// </summary>
    /// <param name="_purchInvoiceTransOrTaxTrans">
    ///     A value that indicates whether it is transaction details or tax details.
    /// </param>
    ///     <param name="_vendPaymSched">
    ///     The <c>vendPaymSched</c> variable.
    /// </param>
    protected void populateVendInvoiceDocumentTmp(NoYes _purchInvoiceTransOrTaxTrans, NoYes _vendPaymSched)
    {
        // <GEEU>
        #ISOCountryRegionCodes
        
        VendTable vendTable_vendor;
        VendTable vendTable_seller;
        // </GEEU>

        vendInvoiceDocumentTmp.JournalRecId = vendInvoiceJour.RecId;

        // <GEEU>
        LogisticsAddressCountryRegionISOCode isoCountryCode = SysCountryRegionCode::countryInfo();
        vendInvoiceDocumentTmp.LanguageTxtTextSection = NoYes::No;
        // </GEEU>

        vendInvoiceDocumentTmp.CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendInvoiceJour.InvoiceDate);

        // <GEELT><GEELV>
        if (isoCountryCode == #isoLT || isoCountryCode == #isoLV)
        {
            vendInvoiceDocumentTmp.CompanyVATNum = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, vendInvoiceJour.InvoiceDate);
        }
        else
        {
            // </GEELV></GEELT>
            vendInvoiceDocumentTmp.CompanyVATNum = vendFormletterParameters.PrintInvoiceVATNum ? TaxTransactionTaxIDHelper::getTaxID(
                vendInvoiceJour.TableId,
                vendInvoiceJour.RecId,
                vendInvoiceJour.InvoiceDate).getLegalEntityTaxID()
            : emptyString;
            // <GEELT><GEELV>
        }
        // </GEELV></GEELT>

        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            vendInvoiceDocumentTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, vendInvoiceJour.InvoiceDate);
        }
        // </GEECZ>

        vendInvoiceDocumentTmp.CompanyAddress = this.companyAddress();
        vendInvoiceDocumentTmp.CompanyName = this.companyName();
        vendInvoiceDocumentTmp.CompanyPhone = this.companyPhone();
        vendInvoiceDocumentTmp.CompanyTeleFax = this.companyTelefax();
        vendInvoiceDocumentTmp.CompanyGiro = companyInfo.Giro;
        vendInvoiceDocumentTmp.CompanyCoRegNum = companyInfo.CoRegNum;

        if (conLen(FormLetter::companyLogo()) == 0)
        {
            vendInvoiceDocumentTmp.PrintLogo = NoYes::No;
        }
        else
        {
            vendInvoiceDocumentTmp.PrintLogo = NoYes::Yes;

            if (insertCompanyLogo)
            {
                vendInvoiceDocumentTmp.CompanyLogo = FormLetter::companyLogo();
                insertCompanyLogo = false;
            }
            else
            {
                vendInvoiceDocumentTmp.CompanyLogo = connull();
            }
        }

        // <GEEU>
        if (isoCountryCode == #isoLT || isoCountryCode == #isoLV || isoCountryCode == #isoCZ || isoCountryCode == #isoHU)
        {
            vendTable_vendor = vendInvoiceJour.vendTable_OrderAccount();
            vendTable_seller = vendInvoiceJour.vendTable_InvoiceAccount();

            vendInvoiceDocumentTmp.VendName = vendTable_vendor.name();
            vendInvoiceDocumentTmp.VendAddress = DirParty::getAddress(vendTable_vendor.Party);

            if (isoCountryCode == #isoLT)
            {
                vendInvoiceDocumentTmp.VendorEnterpriseCode = vendTable_vendor.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendInvoiceJour.InvoiceDate);
            }

            if (vendInvoiceJour.OrderAccount != vendInvoiceJour.InvoiceAccount)
            {
                vendInvoiceDocumentTmp.ShowSeller = NoYes::Yes;
                vendInvoiceDocumentTmp.SellerName = vendTable_seller.name();
                vendInvoiceDocumentTmp.SellerAddress = DirParty::getAddress(vendTable_seller.Party);

                if (isoCountryCode == #isoLT)
                {
                    vendInvoiceDocumentTmp.SellerEnterpriseCode = vendTable_seller.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendInvoiceJour.InvoiceDate);
                }
            }

            // <GEECZ>
            if (isoCountryCode == #isoCZ)
            {
                vendInvoiceDocumentTmp.VendRegNum = vendTable_vendor.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendInvoiceJour.InvoiceDate);
            }
            // </GEECZ>
        }
        else
        {
            // </GEEU>
            vendInvoiceDocumentTmp.VendName = vendInvoiceJour.vendName();
            vendInvoiceDocumentTmp.VendAddress = vendInvoiceJour.vendAddress();
            // <GEEU>
        }
        // </GEEU>

        vendInvoiceDocumentTmp.VendVATNum = TaxTransactionTaxIDHelper::getTaxID(
            vendInvoiceJour.TableId,
            vendInvoiceJour.RecId,
            vendInvoiceJour.InvoiceDate).getCounterPartyTaxID();

        vendInvoiceDocumentTmp.InvoiceText = this.invoiceTxt();
        vendInvoiceDocumentTmp.InvoiceNum = vendInvoiceJour.InvoiceId;
        vendInvoiceDocumentTmp.InvoiceDate = vendInvoiceJour.InvoiceDate;

        // <GEELV>
        if (isoCountryCode == #isoLV)
        {
            vendInvoiceDocumentTmp.InvoiceDateStr = rNumDateInWordConverter.date2strExt(vendInvoiceJour.InvoiceDate, false, true);
        }
        // </GEELV>

        vendInvoiceDocumentTmp.PurchNum = vendInvoiceJour.PurchId;
        vendInvoiceDocumentTmp.InternalInvoiceId = vendInvoiceJour.InternalInvoiceId;

        // <GEELV>
        if (isoCountryCode == #isoLV && vendInvoiceJour.FixedDueDate)
        {
            vendInvoiceDocumentTmp.Payment = rNumDateInWordConverter.date2strExt(vendInvoiceJour.FixedDueDate, false, true);
        }
        else
        {
            // </GEELV>
            vendInvoiceDocumentTmp.Payment = vendInvoiceJour.paymentCondition();
            // <GEELV>
        }
        // </GEELV>

        vendInvoiceDocumentTmp.EnterpriseNumber = vendInvoiceJour.EnterpriseNumber;
        vendInvoiceDocumentTmp.CorrectedInvoiceIdCtrl = custVendCreditInvoicingJour.CustVendCorrectedInvoiceId;
        vendInvoiceDocumentTmp.CorrectiveReason = custVendCreditInvoicingJour.CustVendCorrectiveReason;
        vendInvoiceDocumentTmp.TaxInvoicePurchId = vendInvoiceJour.TaxInvoicePurchId;
        vendInvoiceDocumentTmp.CashDiscPercent = vendInvoiceJour.CashDiscPercent;

        // <GEEU>
        if (isoCountryCode == #isoLT || isoCountryCode == #isoLV || isoCountryCode == #isoCZ || isoCountryCode == #isoHU)
        {
            vendInvoiceDocumentTmp.InvoiceDueDate = vendInvoiceJour.DueDate;
        }
        // </GEEU>

        // <GEELV>
        if (isoCountryCode == #isoLV)
        {
            vendInvoiceDocumentTmp.InvoiceDueDateStr = rNumDateInWordConverter.date2strExt(vendInvoiceJour.DueDate, false, true);
        }
        // </GEELV>

        if (_purchInvoiceTransOrTaxTrans && !_vendPaymSched)
        {
            vendInvoiceDocumentTmp.ItemId = this.itemId();
            vendInvoiceDocumentTmp.ItemIdOnly = vendInvoiceTrans.ItemId;

            if (isoCountryCode == #isoSA)
            {
                vendInvoiceDocumentTmp.Name = PurchParameters::nameAndOrDescription(
                    vendInvoiceTrans.inventTable(),
                    vendInvoiceJour.LanguageId,
                    vendInvoiceTrans.InventDimId,
                    EcoResCategory::find(vendInvoiceTrans.ProcurementCategory));
            }
            else
            {
                vendInvoiceDocumentTmp.Name = vendInvoiceTrans.Name;
            }

            vendInvoiceDocumentTmp.Qty = vendInvoiceTrans.Qty;
            VendInvoiceDocumentTmp.VendInvoiceTransLineNum = vendInvoiceTrans.LineNum;
            vendInvoiceDocumentTmp.PurchUnitTxt = vendInvoiceTrans.purchUnitTxt();

            this.setPDSFields();

            // <GEELT><GEELV>
            if (isoCountryCode == #isoLT || isoCountryCode == #isoLV)
            {
                vendInvoiceDocumentTmp.PurchPrice = (vendInvoiceTrans.Qty ? vendInvoiceTrans.LineAmount / vendInvoiceTrans.Qty : 0);
            }
            else
            {
                // </GEELV></GEELT>
                vendInvoiceDocumentTmp.PurchPrice = vendInvoiceTrans.PurchPrice;
                // <GEELT><GEELV>
            }
            // </GEELV></GEELT>

            vendInvoiceDocumentTmp.DiscPercent = vendInvoiceTrans.DiscPercent;
            vendInvoiceDocumentTmp.DiscAmount = vendInvoiceTrans.DiscAmount;

            // <GEELT><GEELV>
            if (isoCountryCode == #isoLT || isoCountryCode == #isoLV)
            {
                vendInvoiceDocumentTmp.LineAmount = vendInvoiceTrans.LineAmount;
            }
            else
            {
                // </GEELV></GEELT>
                vendInvoiceDocumentTmp.LineAmount = vendInvoiceTrans.lineAmountInclTax();
                // <GEELT><GEELV>
            }
            // </GEELV></GEELT>

            vendInvoiceDocumentTmp.TaxWriteCode = vendInvoiceTrans.TaxWriteCode;
            vendInvoiceDocumentTmp.CorrectiveReasonLines = custVendCreditInvoicingTrans.CustVendCorrectiveReason;

            //ExternalItemNum
            vendInvoiceDocumentTmp.ExternalItemNum = this.externalItemNum();

            //BodyReference
            if (showInventReportDimHistory == NoYes::Yes)
            {
                vendInvoiceDocumentTmp.InventDimPrint = this.inventDim();
            }

            if (insertInventDim)
            {
                vendInvoiceDocumentTmp.InventDimProduct = FormLetter::inventDimReport(inventDim, inventDimSetupProduct, vendInvoiceJour.LanguageId);

                vendInvoiceDocumentTmp.InventDimFieldsMap::initProductDimensionsFrom(inventDim);

                FieldId inventDimFieldId;
                for (int i = 1;i <= conLen(inventDimSetupProduct); i++)
                {
                    // Get the selected product dimension fields in order to
                    // enable and disable report columns.
                    inventDimFieldId = conPeek(inventDimSetupProduct, i);

                    this.enableProductDimensionColumns(vendInvoiceDocumentTmp, inventDimFieldId);
                }
            }
        }
        else if (!_vendPaymSched
                // <GEECZ>
                && !printPrePaymentDepreciations
                && !printPrePaymentTaxTrans
                // </GEECZ>
                )
        {
            vendInvoiceDocumentTmp.PrintCode = taxSpec.taxWriteCode();
            vendInvoiceDocumentTmp.TaxCode = taxSpec.taxCode();
            vendInvoiceDocumentTmp.Amount = amount;
            vendInvoiceDocumentTmp.CashDiscAmount = cashDiscAmountTax;
            vendInvoiceDocumentTmp.TaxBaseAmount = taxSpec.taxBaseAmount();
            vendInvoiceDocumentTmp.TaxBaseQty = taxSpec.taxBaseQty();
            vendInvoiceDocumentTmp.TaxAmount = taxSpec.taxAmount();
            vendInvoiceDocumentTmp.TaxAmountMST = taxSpec.taxAmountMST();
            vendInvoiceDocumentTmp.TaxExemptDescription = taxSpec.taxExemptDescription();

            if (vendFormletterParameters.TaxSpecPrintLevel == TaxSpecPrintLevel::None && (isoCountryCode == #isoLT || isoCountryCode == #isoHU))
            {
                vendInvoiceDocumentTmp.ShowTaxBalance = 0;
            }
            else
            {
                vendInvoiceDocumentTmp.ShowTaxBalance = 1;
            }

            // <GEEU>
            if (isoCountryCode == #isoCZ || isoCountryCode == #isoHU || isoCountryCode == #isoLT || isoCountryCode == #isoLV)
            {
                vendInvoiceDocumentTmp.TaxBaseAmountMST = taxSpec.taxBaseAmountMST();
            }
            // </GEEU>

            // <GEECZ>
            if (isoCountryCode == #isoCZ)
            {
                vendInvoiceDocumentTmp.TaxBaseCurrencyCode = taxSpec.currencyCode();
            }
            // </GEECZ>

            // <GEELT><GEEHU>
            if ((isoCountryCode == #isoLT || isoCountryCode == #isoHU) && !insertTaxExcludedAmountValues && !insertAmountInWords)
            {
                vendInvoiceDocumentTmp.ExcludeInTaxTransSection = taxSpec.parmExcludeFromInvoice();

                if (vendInvoiceDocumentTmp.ExcludeInTaxTransSection)
                {
                    // Sum the excluded tax amount which will be used in the report design to subtract
                    // from invoice amount and total sales tax amount.
                    totalTaxAmountExcludedCur += vendInvoiceDocumentTmp.TaxAmount;
                }
            }
            // </GEEHU></GEELT>

            // <GMY>
            if (isSelfBilledInvoice_MY)
            {
                vendInvoiceDocumentTmp.GSTSummaryText_MY = taxSpec.getGSTSummaryText_MY(vendInvoiceJour);
            }
            // </GMY>
        }

        if (_vendPaymSched)
        {
            vendInvoiceDocumentTmp.SchedDueDate = vendPaymSchedLine.DueDate;
            vendInvoiceDocumentTmp.SchedDiscAmount = vendPaymSchedLine.DiscAmount;
            vendInvoiceDocumentTmp.SchedDiscDate = vendPaymSchedLine.DiscDate;
            vendInvoiceDocumentTmp.SchedDueAmount = vendPaymSchedLine.DueAmount;

            // <GEELV>
            if (isoCountryCode == #isoLV)
            {
                vendInvoiceDocumentTmp.SchedDueDateStr = rNumDateInWordConverter.date2strExt(vendInvoiceDocumentTmp.SchedDueDate, false, true);
                vendInvoiceDocumentTmp.SchedDiscDateStr = rNumDateInWordConverter.date2strExt(vendInvoiceDocumentTmp.SchedDiscDate, false, true);
            }
            // </GEELV>

            vendInvoiceDocumentTmp.ShowVendPaym = 1;
        }

        if (isoCountryCode == #isoJP)
        {
            if (!vendInvoiceJour.isProforma())
            {
                vendInvoiceDocumentTmp.WithReducedTax_JP = TaxTable::existTaxTransWithReducedTaxType_JP(vendInvoiceTrans);
            }
            else
            {
                PurchLine purchLine = vendInvoiceTrans.purchLine();
                PurchTable purchTable = vendInvoiceJour.purchTable();
                PurchTotals purchTotals = PurchTotals::newPurchTable(purchTable);
                purchTotals.calc();
                TmpTaxWorkTrans tmpTaxWorkTrans = purchTotals.tax().tmpTaxWorkTrans();
                vendInvoiceDocumentTmp.WithReducedTax_JP = tmpTaxWorkTrans.existTaxTransWithReducedTaxType_JP(purchLine);
            }
            vendInvoiceDocumentTmp.TaxBaseAmountMST = taxSpec.taxBaseAmountMST();
        }

        // <GEEU>
        if ((isoCountryCode == #isoLT || isoCountryCode == #isoLV || isoCountryCode == #isoCZ || isoCountryCode == #isoHU) && taxSpec)
        {
            vendInvoiceDocumentTmp.LanguageTxtText = LanguageTxt::find(tableNum(TaxTable), TaxTable::find(taxSpec.taxCode()).RecId, vendInvoiceJour.LanguageId).Txt;

            if (!taxDirectives.in(vendInvoiceDocumentTmp.LanguageTxtText))
            {
                vendInvoiceDocumentTmp.LanguageTxtTextSection = NoYes::Yes;
                taxDirectives.add(vendInvoiceDocumentTmp.LanguageTxtText);
            }
            else
            {
                vendInvoiceDocumentTmp.LanguageTxtTextSection = NoYes::No;
            }
        }
        // </GEEU>

        vendInvoiceDocumentTmp.TotalSalesBalance = this.totalSalesBalance();
        vendInvoiceDocumentTmp.TotalDiscount = totalDiscount;
        vendInvoiceDocumentTmp.TotalMiscCharges = totalMiscCharges;
        vendInvoiceDocumentTmp.TotalSalesTax = this.totalSalesTax();
        vendInvoiceDocumentTmp.TotalRoundOff = totalRoundOff;
        vendInvoiceDocumentTmp.TotalGrand = this.totalGrand();
        vendInvoiceDocumentTmp.CurrencyCode = vendInvoiceTrans.CurrencyCode;
        vendInvoiceDocumentTmp.SalesBalance = vendInvoiceJour.SalesBalance;
        vendInvoiceDocumentTmp.EndDisc = vendInvoiceJour.EndDisc;
        vendInvoiceDocumentTmp.SumMarkup = vendInvoiceJour.SumMarkup;
        vendInvoiceDocumentTmp.CashDisc = vendInvoiceJour.CashDisc;
        vendInvoiceDocumentTmp.TotaltaxBaseAmount = vendInvoiceJour.SalesBalance
                                            - vendInvoiceJour.EndDisc
                                            + vendInvoiceJour.SumMarkup
                                            - vendInvoiceJour.CashDisc;

        if (ReverseChargeParameters_W::find().Enabled)
        {
            vendInvoiceDocumentTmp.ReverseChargeAmount = vendInvoiceJour.ReverseChargeAmount;
            vendInvoiceDocumentTmp.ReverseChargeBalance = vendInvoiceJour.reverseChargeBalance();

            vendInvoiceDocumentTmp.ReverseChargeLine = vendInvoiceTrans.ReverseCharge_W ? '*' : '';

            if (vendInvoiceJour.ReverseChargeAmount > 0)
            {
                vendInvoiceDocumentTmp.ReverseChargeJournal = '*';
            }
        }

        vendInvoiceDocumentTmp.TotalsSumTax = vendInvoiceJour.SumTax;
        vendInvoiceDocumentTmp.InvoiceRoundOff = vendInvoiceJour.InvoiceRoundOff;
        vendInvoiceDocumentTmp.InvoiceAmount = vendInvoiceJour.InvoiceAmount;

        vendInvoiceDocumentTmp.CurrencyCodeMain = vendInvoiceJour.CurrencyCode;
        vendInvoiceDocumentTmp.IntracomSumTax = this.intracomTaxInvoiceAmount();
        vendInvoiceDocumentTmp.IntracomInvoiceAmount = (vendInvoiceJour.InvoiceAmount - vendInvoiceJour.SumTax)
                                                + this.intracomTaxInvoiceAmount();
        vendInvoiceDocumentTmp.TaxFreeBalance = vendInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans());
        vendInvoiceDocumentTmp.TaxableBalance = vendInvoiceJour.taxableBalance(this.tmpTaxWorkTrans());
        vendInvoiceDocumentTmp.NetAmount = vendInvoiceJour.netAmount();
        vendInvoiceDocumentTmp.PaymentSched = vendInvoiceJour.PaymentSched;

        if (isoCountryCode == #isoSA)
        {
            vendInvoiceDocumentTmp.CashDiscTxt = this.cashDiscTxt_SA();
        }
        else
        {
            vendInvoiceDocumentTmp.CashDiscTxt = vendInvoiceJour.cashDiscTxt();
        }

        vendInvoiceDocumentTmp.StandardCurrency = CompanyInfoHelper::standardCurrency();
        vendInvoiceDocumentTmp.SalesBalanceMST = vendInvoiceJour.SalesBalance * vendInvoiceJour.ExchRate / 100;
        vendInvoiceDocumentTmp.SumTaxMST = vendInvoiceJour.SumTax * vendInvoiceJour.ExchRate / 100;
        vendInvoiceDocumentTmp.InvoiceAmountMST = vendInvoiceJour.InvoiceAmount * vendInvoiceJour.ExchRate / 100;
        vendInvoiceDocumentTmp.ExchRate = vendInvoiceJour.ExchRate / 100;
        vendInvoiceDocumentTmp.CurrencyCodeCompany = Ledger::accountingCurrency(companyInfo.RecId);
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findPurchInvFromVendInvoiceJour(vendInvoiceJour.PurchId,vendInvoiceJour.InvoiceId,vendInvoiceJour.ParmId);
        vendInvoiceDocumentTmp.TotalAppliedAmount = abs(VendAdvanceApplicationTrans::totalAdvanceAppliedAmountForInvoice(vendInvoiceInfoTable.RecId, false));

        //Visibility Parameters
        vendInvoiceDocumentTmp.PurchInvoiceTransOrTaxTrans = _purchInvoiceTransOrTaxTrans;
        vendInvoiceDocumentTmp.VendPaymSched = _vendPaymSched;
        vendInvoiceDocumentTmp.PrintInvoiceVATNum = vendFormletterParameters.PrintInvoiceVATNum;

        vendInvoiceDocumentTmp.LocalCurrencyAmount = CompanyInfoHelper::standardCurrency() != vendInvoiceJour.CurrencyCode;

        vendInvoiceDocumentTmp.TaxSpecPrintLevel = vendFormletterParameters.TaxSpecPrintLevel;
        vendInvoiceDocumentTmp.VendCreditInvoicing = vendParameters.CreditInvoicingReport;
        vendInvoiceDocumentTmp.IntracomVAT = vendParameters.IntracomVAT;
        vendInvoiceDocumentTmp.PrintIntracomVAT = vendFormletterParameters.PrintIntracomVAT;
        vendInvoiceDocumentTmp.PrintExternalItemNum = this.printExternalItemNum();
        vendInvoiceDocumentTmp.IsTaxInvoice = isTaxInvoice;
        vendInvoiceDocumentTmp.CashDiscOnInvoice = cashDiscOnInvoice;
        vendInvoiceDocumentTmp.TaxPrintTaxFreeBalance = vendFormletterParameters.TaxPrintTaxFreeBalance;

        vendInvoiceDocumentTmp.ShowEnterpriseNumber = (isoCountryCode == #isoBE ? NoYes::Yes : NoYes::No);

        if (isoCountryCode == #isoDK
            || isoCountryCode == #isoNO
            || isoCountryCode == #isoFI
            || isoCountryCode == #isoCH
            || isoCountryCode == #isoBE)
        {
            vendInvoiceDocumentTmp.ShowGiroField = NoYes::Yes;
        }
        else
        {
            vendInvoiceDocumentTmp.ShowGiroField = NoYes::No;
        }

        vendInvoiceDocumentTmp.IsProforma = isProforma;

        // <GEEU>
        if (isoCountryCode == #isoLT || isoCountryCode == #isoLV || isoCountryCode == #isoCZ || isoCountryCode == #isoHU)
        {
            // <GEELT><GEELV>
            if (isoCountryCode == #isoLT || isoCountryCode == #isoLV)
            {
                this.clearTransportationDetails();
            }
            // </GEELV></GEELT>

            if (isFirstRecord)
            {
                // Since only one temp table manages all the header and details, we should avoid inserting header information
                // more than once.

                // <GEECZ><GEEHU>
                if (isoCountryCode == #isoCZ || isoCountryCode == #isoHU)
                {
                    vendInvoiceDocumentTmp.DoPricesIncludeTax = vendInvoiceJour.InclTax;
                }
                // </GEEHU></GEECZ>

                if (printCopyOriginal == PrintCopyOriginal::Copy)
                {
                    vendInvoiceDocumentTmp.ShowCopy = NoYes::Yes;
                }

                // <GEELT><GEELV><GEECZ>
                if ((isoCountryCode == #isoLT || isoCountryCode == #isoLV || isoCountryCode == #isoCZ) && companyInfo.Bank)
                {
                    BankAccountTable bankAccount = BankAccountTable::find(companyInfo.Bank);

                    vendInvoiceDocumentTmp.CompanyBankAccountName = bankAccount.Name;
                    vendInvoiceDocumentTmp.CompanyBankAccountNum = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                        bankAccount.AccountNum : "@AccountsReceivable:FiveAsterisk";
                    vendInvoiceDocumentTmp.CompanyBankAccountRegNum = bankAccount.RegistrationNum;
                }
                // </GEECZ></GEELV></GEELT>

                vendInvoiceDocumentTmp.CompanyRegNum = companyInfo.RegNum;
                if (isoCountryCode == #isoLT)
                {
                    vendInvoiceDocumentTmp.CompanyEnterpriseCode = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendInvoiceJour.InvoiceDate);
                }

                // <GEELV>
                if (isoCountryCode == #isoLV)
                {
                    vendInvoiceDocumentTmp.AmountInWords = rNumDateInWordConverter.numeralsToCurrency(vendInvoiceJour.InvoiceAmount,
                                                                                                                vendInvoiceJour.CurrencyCode);
                }
                // </GEELV>

                // <GEELV><GEECZ>
                if (isoCountryCode == #isoLV || isoCountryCode == #isoCZ)
                {
                    VendBankAccount vendBankAccount;
                    if (isoCountryCode == #isoCZ)
                    {
                        vendBankAccount = VendBankAccount::find(vendTable_seller.AccountNum, vendTable_seller.BankAccount);
                    }
                    else
                    {
                        vendBankAccount = VendBankAccount::findDefaultByCompany_LV(curext(), vendTable_seller.AccountNum, vendInvoiceJour.CurrencyCode);
                    }

                    if (vendBankAccount)
                    {
                        vendInvoiceDocumentTmp.VendBankAccountNum = hasFieldAccess(tableNum(VendBankAccount), fieldNum(VendBankAccount, AccountNum)) ?
                                                                            vendBankAccount.AccountNum : "@AccountsReceivable:FiveAsterisk";
                        vendInvoiceDocumentTmp.VendBankAccountName = vendBankAccount.Name;
                        vendInvoiceDocumentTmp.VendBankAccountRegNum = vendBankAccount.RegistrationNum;
                    }
                }
                // </GEECZ></GEELV>

                // <GEELV>
                if (isoCountryCode == #isoLV)
                {
                    vendInvoiceDocumentTmp.AmountInWords = strFmt("@SYS76498", "@GLS108517", vendInvoiceDocumentTmp.AmountInWords);
                }
                // </GEELV>

                if (companyCurrencyCode != vendInvoiceJour.CurrencyCode)
                {
                    vendInvoiceJour.calcMSTAmounts();
                    vendInvoiceDocumentTmp.InvoiceAmountMST = vendInvoiceJour.InvoiceAmountMST;
                    vendInvoiceDocumentTmp.SumMarkupAmountMST = vendInvoiceJour.SumMarkupMST;
                    vendInvoiceDocumentTmp.EndDiscAmountMST = vendInvoiceJour.EndDiscMST;
                    vendInvoiceDocumentTmp.TaxableBalanceAmountMST = vendInvoiceJour.amountMST(vendInvoiceDocumentTmp.TaxableBalance);
                    vendInvoiceDocumentTmp.TaxFreeBalanceAmountMST = vendInvoiceJour.amountMST(vendInvoiceDocumentTmp.TaxFreeBalance);
                    vendInvoiceDocumentTmp.TotalsSumTaxAmountMST = vendInvoiceJour.amountMST(vendInvoiceDocumentTmp.TotalsSumTax);
                    vendInvoiceDocumentTmp.InvoiceRoundOffAmountMST = vendInvoiceJour.amountMST(vendInvoiceDocumentTmp.InvoiceRoundOff);
                    vendInvoiceDocumentTmp.SalesBalanceMST = vendInvoiceJour.amountMST(vendInvoiceDocumentTmp.SalesBalance);
                    vendInvoiceDocumentTmp.TaxableBalanceAmountMST = vendInvoiceJour.amountMST(vendInvoiceDocumentTmp.TaxableBalance);
                    vendInvoiceDocumentTmp.CompanyCurrencyCode = companyCurrencyCode;
                    vendInvoiceDocumentTmp.NetAmountMST = vendInvoiceJour.amountMST(vendInvoiceDocumentTmp.NetAmount);
                    vendInvoiceDocumentTmp.ShowAccountingCurrencyAmounts = 1;

                    // <GEELV>
                    if (isoCountryCode == #isoLV)
                    {
                        vendInvoiceDocumentTmp.AmountInWordsInCompanyCurrency = rNumDateInWordConverter.numeralsToCurrency(vendInvoiceJour.InvoiceAmountMST, companyCurrencyCode);

                        if (vendInvoiceJour.InvoiceAmountMST < 0)
                        {
                            vendInvoiceDocumentTmp.AmountInWordsInCompanyCurrency = strFmt("@SYS76498", "@GLS108517", vendInvoiceDocumentTmp.AmountInWordsInCompanyCurrency);
                        }
                    }
                    // </GEELV>

                    // <GEEHU>
                    if (isoCountryCode == #isoHU 
                        && (vendInvoiceDocumentTmp.TaxSpecPrintLevel == TaxSpecPrintLevel::CurrencyMST
                            || (vendInvoiceDocumentTmp.TaxSpecPrintLevel == TaxSpecPrintLevel::Currency
                                && TaxParameters::find().BankExchRate_W)))
                    {
                        vendInvoiceDocumentTmp.SalesTaxExchRate = SalesTaxExchangeRateHelper::getSalesTaxTransactionExchangeRate(vendInvoiceJour.TableId, vendInvoiceJour.RecId);
                        vendInvoiceDocumentTmp.ExcludeInTaxTransSection = NoYes::No;
                        vendInvoiceDocumentTmp.DoPrintSalesTaxExchRateSection = 1;
                    }
                    // </GEEHU>
                }

                vendInvoiceDocumentTmp.InvoiceReturnByList = '';

                if (vendInvoiceJour.PurchaseType == PurchaseType::ReturnItem)
                {
                    vendInvoiceDocumentTmp.InvoiceReturnByList = vendInvoiceJour.originalInvoices_W(', ', true, "@SYS83462");
                }

                if (IntrastatCountryRegionParameters::isInEUByIsoCode())
                {
                    vendInvoiceDocumentTmp.TransportationDataSection = NoYes::Yes;
                    TransportationDocument transportationDocument = TransportationDocument::find(vendInvoiceJour.TransportationDocument);

                    if (transportationDocument)
                    {
                        if (isoCountryCode == #isoLV)
                        {
                            vendInvoiceDocumentTmp.DoPrintTransportationDocument = NoYes::Yes;
                        }
                        else
                        {
                            vendInvoiceDocumentTmp.DoPrintTransportationDocument = transportationDocument.DoPrintTransportationDocument;
                        }

                        vendInvoiceDocumentTmp.TransportationContactPersonName = transportationDocument.contactPersonName(vendInvoiceJour);
                        vendInvoiceDocumentTmp.TransportationContactPersonTitle = transportationDocument.contactPersonTitle(vendInvoiceJour);
                        vendInvoiceDocumentTmp.TransPortationIssuedByName = transportationDocument.issuedByName();
                        vendInvoiceDocumentTmp.TransportationIssuedByTitle = transportationDocument.issuedByTitle();

                        if (vendInvoiceDocumentTmp.DoPrintTransportationDocument)
                        {
                            // Identifies the record having the transporation data.

                            vendInvoiceDocumentTmp.DeliveryName = vendInvoiceJour.DeliveryName;
                            vendInvoiceDocumentTmp.DeliveryAddress = vendInvoiceJour.deliveryAddress();

                            // Set values from transportation document.

                            vendInvoiceDocumentTmp.TransportationCarrierAddress = transportationDocument.carrierAddress(vendTable_vendor.Party);
                            vendInvoiceDocumentTmp.TransportationCarrierName = transportationDocument.carrierName(vendTable_vendor.Party);

                            vendInvoiceDocumentTmp.TransportationLoadedDateTime = transportationDocument.LoadedDateTime;

                            if (isoCountryCode == #isoLV)
                            {
                                vendInvoiceDocumentTmp.TransportationLoadedDateStr = rNumDateInWordConverter.date2strExt(DateTimeUtil::date(transportationDocument.LoadedDateTime), false ,true);
                            }

                            vendInvoiceDocumentTmp.TransportationLoadedAddress = transportationDocument.displayLoadedPostalAddressing();
                            vendInvoiceDocumentTmp.TransportationLoadedName = transportationDocument.LoadedAddressName;

                            vendInvoiceDocumentTmp.TransportationPackageDangerDegree = transportationDocument.PackageDangerDegree;
                            vendInvoiceDocumentTmp.TransportationPackageDescription = transportationDocument.PackageDescription;

                            // Set values from transportation vehicle.
                            TransportationVehicle transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);

                            if (transportationVehicle)
                            {
                                vendInvoiceDocumentTmp.TransportationVehicleDescription = transportationVehicle.modelDescription();
                                vendInvoiceDocumentTmp.TransportationVehicleDriverName = transportationVehicle.DriverName;
                                vendInvoiceDocumentTmp.TransportationVehiclePlateNumber = transportationVehicle.PlateNumber;
                                vendInvoiceDocumentTmp.TransportationVehicleTrailerNumber = transportationVehicle.TrailerNumber;
                            }
                        }
                    }
                }

                // <GEECZ>
                if (isoCountryCode == #isoCZ)
                {
                    totalPrePaidAmountCur = this.calculateTotalPrepaidAmount();
                    vendInvoiceDocumentTmp.TotalPrepaidAmount = totalPrePaidAmountCur;
                    vendInvoiceDocumentTmp.VendPurchReceiptDate = vendInvoiceJour.PurchReceiptDate_W;
                    vendInvoiceDocumentTmp.VatDueDate = vendInvoiceJour.vatDueDate_W();
                    VendInvoiceJourSymbol vendInvoiceJourSymbol = VendInvoiceJourSymbol::findByVendInvoiceJour(vendInvoiceJour.RecId);

                    if (vendInvoiceJourSymbol)
                    {
                        vendInvoiceDocumentTmp.VendBankSpecificSymbol = vendInvoiceJourSymbol.SpecificSymbol;
                        BankConstantSymbol bankConstantSymbol = BankConstantSymbol::find(vendInvoiceJourSymbol.BankConstantSymbol);
                        vendInvoiceDocumentTmp.VendBankConstantSymbol = bankConstantSymbol.ConstantSymbol;
                    }
                }
                // </GEECZ>

                isFirstRecord = false;
            }
        }
        // </GEEU>

        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            vendInvoiceDocumentTmp.ShowPrePaymentDeductionSection = NoYes::No;

            if (printPrePaymentDepreciations && vendTrans)
            {
                vendInvoiceDocumentTmp.VendTransTransDate = vendTrans.TransDate;
                vendInvoiceDocumentTmp.VendTransTxt = vendTrans.Txt;
                vendInvoiceDocumentTmp.VendTransCurrencyCode = vendTrans.CurrencyCode;
                vendInvoiceDocumentTmp.VendTransInvoiceCurrencyCode = vendInvoiceJour.CurrencyCode;
                vendInvoiceDocumentTmp.VendTransSettledAmountOriginCur = this.calculateSettledAmount();
                vendInvoiceDocumentTmp.VendTransSettledAmountCur = this.settledAmountCur();
                vendInvoiceDocumentTmp.ShowPrePaymentDeductionSection = NoYes::Yes;
            }

            if (printPrePaymentTaxTrans)
            {
                vendInvoiceDocumentTmp.ShowTaxBalance = 1;
                vendInvoiceDocumentTmp.TaxCode = taxTrans.TaxCode;
                vendInvoiceDocumentTmp.TaxAmount = taxTrans.TaxAmountCur;
                vendInvoiceDocumentTmp.TaxAmountMST = taxTrans.TaxAmount;
                vendInvoiceDocumentTmp.TaxBaseAmount = taxTrans.TaxBaseAmountCur;
                vendInvoiceDocumentTmp.TaxBaseAmountMST = taxTrans.TaxBaseAmount;
                vendInvoiceDocumentTmp.TaxBaseQty = taxTrans.TaxBaseQty;
                vendInvoiceDocumentTmp.PrintCode = taxTrans.PrintCode;
                vendInvoiceDocumentTmp.TaxExemptDescription = TaxExemptCodeTable::txt(taxTrans.ExemptCode, currentUserLanguage());
                vendInvoiceDocumentTmp.TaxDocumentNum = CzTaxDocumentTable::find(taxTrans.Voucher, taxTrans.TransDate).TaxDocumentNum;
                vendInvoiceDocumentTmp.TaxBaseCurrencyCode = taxTrans.SourceCurrencyCode;
            }
        }
        // </GEECZ>

        // <GEELT><GEEHU>
        if ((isoCountryCode == #isoLT || isoCountryCode == #isoHU) && insertTaxExcludedAmountValues)
        {
            // Insert the tax excluded amount values in order to be used in the report design to
            // subtract from invoice amount and sales tax amount.
            vendInvoiceDocumentTmp.TotalTaxAmountExcludedCur = totalTaxAmountExcludedCur;
            vendInvoiceDocumentTmp.TotalTaxAmountExcludedMST = vendInvoiceJour.amountMST(totalTaxAmountExcludedCur);
            vendInvoiceDocumentTmp.ExcludeInTaxTransSection = NoYes::Yes;
        }
        // </GEEHU></GEELT>

        // <GEELT>
        if (isoCountryCode == #isoLT && insertAmountInWords)
        {
            // Insert the amount in words after subtracting the tax excluded amount from the invoice amount.
            vendInvoiceDocumentTmp.TotalTaxAmountExcludedCur = 0;
            vendInvoiceDocumentTmp.TotalTaxAmountExcludedMST = 0;
            vendInvoiceDocumentTmp.ExcludeInTaxTransSection = NoYes::Yes;
            vendInvoiceDocumentTmp.AmountInWords = rNumDateInWordConverter.numeralsToCurrency((vendInvoiceJour.InvoiceAmount - totalTaxAmountExcludedCur),
                                                                                                    vendInvoiceJour.CurrencyCode);
            vendInvoiceDocumentTmp.AmountInWordsSection = NoYes::Yes;
        }
        // </GEELT>

        // <GIN>
        if (TaxParameters::isServiceTaxEnable_IN() && taxSpec.serviceTaxReverseChargeOriginAmount_IN() == 0 && TaxTable::find(taxSpec.taxCode()).TaxType_IN != TaxType_IN::ServiceTax)
        {
            vendInvoiceDocumentTmp.ServiceTaxReverseChargeOriginAmount_IN = taxSpec.taxAmount();
        }
        else
        {
            vendInvoiceDocumentTmp.ServiceTaxReverseChargeOriginAmount_IN = taxSpec.serviceTaxReverseChargeOriginAmount_IN();
        }
        // </GIN>

        // <GMY>
        if (isoCountryCode == #isoMY)
        {
            vendInvoiceDocumentTmp.InvoiceType_MY = vendInvoiceJour_W.InvoiceType_MY;

            if (isSelfBilledInvoice_MY)
            {
                vendInvoiceDocumentTmp.GSTApprovalNumber_MY = vendInvoiceJour_W.GSTApprovalNumber_MY;
            }

            if (this.shouldPrintQRCode_W() && vendInvoiceJour_W && vendInvoiceJour_W.QRCode_W)
            {
                str decodeBase64String = VendGenerateQRCode_W::decodeBase64String(vendInvoiceJour_W.QRCode_W);
                vendInvoiceDocumentTmp.QRCode_W = VendGenerateQRCode_W::generateQRCodeFromBase64(decodeBase64String);
            }
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintQRCode_W</Name>
				<Source><![CDATA[
    private boolean shouldPrintQRCode_W()
    {
        return BusinessDocumentPrintQRCodeFlight_MY::instance().isEnabled() && VendInvoiceDocumentPrintQRCodeFlight_MY::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendInvoiceDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>VendInvoiceDocumentTmp</c> table.
    /// </summary>
    /// <param name="_purchInvoiceTransOrTaxTrans">
    ///     A value that indicates whether it is transaction details or tax details.
    /// </param>
    ///     <param name="_vendPaymSched">
    ///     The <c>vendPaymSched</c> variable.
    /// </param>
    public void insertVendInvoiceDocumentTmp(NoYes _purchInvoiceTransOrTaxTrans, NoYes _vendPaymSched)
    {
        this.populateVendInvoiceDocumentTmp(_purchInvoiceTransOrTaxTrans, _vendPaymSched);

        // set Document Branding Header;
        this.setSysDocuBrandDetails();

        vendInvoiceDocumentTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    private void setSysDocuBrandDetails()
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.CurrencySymbol = Currency::find(vendInvoiceTrans.CurrencyCode).Symbol;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracomTaxInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxAmountCur</c> value.
    /// </summary>
    /// <returns>
    /// The <c>TaxAmountCur</c> value.
    /// </returns>
    private TaxAmountCur intracomTaxInvoiceAmount()
    {
        return (taxSpec ? taxSpec.taxInvoiceAmount() : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity value between two units of measure in the context of a released product and send it as
    /// string value with inventory dimensions.
    /// </summary>
    /// <returns>
    /// The string value with inventory dimensions.
    /// </returns>
    private str inventDim()
    {
        #ISOCountryRegionCodes

        InventQty purchQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            vendInvoiceTrans.ItemId, 
            vendInvoiceTrans.InventDimId,
            abs(inventReportDimHistory.Qty) * sign(vendInvoiceTrans.Qty),
            vendInvoiceTrans.inventTable().inventUnitId(),
            vendInvoiceTrans.PurchUnit,
            NoYes::Yes);

        str inventDimStr;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            inventDimStr = strFmt(SysLabel::labelId2String(literalStr("@SYS321794"), vendInvoiceJour.LanguageId), purchQty, inventDimString);
        }
        else
        {
            inventDimStr = strFmt("@SYS321794", purchQty, inventDimString);
        }

        return inventDimStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// sets the inserInventDim flag.
    /// </summary>
    private void inventDimLine()
    {
        insertInventDim = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the String value.
    /// </summary>
    /// <returns>
    /// The String value.
    /// </returns>
    private str invoiceTxt()
    {
        str invoiceTxt;

        if (vendInvoiceJour.InvoiceAmount >= 0)
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        invoiceTxt = "@SYS87980";
                    }
                    else
                    {
                        invoiceTxt = (isTaxInvoice ? "@SYS121363" : "@SYS70789");
                    }
                }
                else
                {
                    invoiceTxt = (isTaxInvoice ? "@SYS121364" : "@SYS24428");
                }
            }
            else
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        invoiceTxt = "@SYS87979";
                    }
                    else
                    {
                        invoiceTxt = (isTaxInvoice ? "@SYS121362" : "@SYS4701");
                    }
                }
                else
                {
                    invoiceTxt = (isTaxInvoice ? "@SYS115505" : "@SYS12128");
                }
            }
        }
        else
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        invoiceTxt = "@SYS87981";
                    }
                    else
                    {
                        invoiceTxt = (vendCreditInvoicing ? "@SYS99741" : "@SYS71588");
                    }
                }
                else
                {
                    invoiceTxt = (vendCreditInvoicing ? "@SYS99733" : "@SYS71589");
                }
            }
            else
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        invoiceTxt = "@SYS87981";
                    }
                    else
                    {
                        invoiceTxt = (vendCreditInvoicing ? "@SYS99741" : "@SYS71590");
                    }
                }
                else
                {
                    invoiceTxt = (vendCreditInvoicing ? "@SYS99734" : "@SYS71591");
                }
            }
        }

        return invoiceTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> value.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c> value.
    /// </returns>
    private ItemId itemId()
    {
        ItemId itemId;

        switch (VendFormletterParameters::find().ItemNum)
        {
            case OurYourBoth::Our, OurYourBoth::Both:
                itemId = vendInvoiceTrans.ItemId;
                break;
            case OurYourBoth::Your:
                itemId = vendInvoiceTrans.ExternalItemId;
                break;
        }

        if (inventDimReport.isInventDimItemId())
        {
            itemId += inventDimReport.reportStrItemId(inventDim);
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printExternalItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Boolean value.
    /// </summary>
    /// <returns>
    /// The Boolean value.
    /// </returns>
    private boolean printExternalItemNum()
    {
        return (vendFormletterParameters.ItemNum == OurYourBoth::Both
            && (vendInvoiceTrans.ItemId || vendInvoiceTrans.isCategoryBased())
            && vendInvoiceTrans.ExternalItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value.
    /// </summary>
    private void printInventTrans()
    {
        if (inventDimSetup)
        {
            if (purchInvoiceJournalPrint && purchInvoiceJournalPrint.parmProforma())
            {
                InventQty qtyRemain = vendInvoiceTrans.InventQty;
                InventQty qtyTrans;
                InventTrans inventTrans;
                InventTransOrigin localInventTransOrigin;

                while select InventDimId, Qty from inventTrans
                    order by StatusReceipt, InventDimId
                    where (inventTrans.StatusReceipt == StatusReceipt::Ordered
                        || inventTrans.StatusReceipt == StatusReceipt::Arrived
                        || inventTrans.StatusReceipt == StatusReceipt::Registered
                        || inventTrans.StatusReceipt == StatusReceipt::Received)
                        && inventTrans.StatusIssue == StatusIssue::None
                    join inventDim
                        where inventDim.InventDimId == inventTrans.InventDimId
                    exists join localInventTransOrigin
                        where localInventTransOrigin.InventTransId == vendInvoiceTrans.InventTransId
                            && localInventTransOrigin.ReferenceCategory == InventTransType::Purch
                            && inventTrans.InventTransOrigin == localInventTransOrigin.RecId    
                {
                    inventDimString = FormLetter::inventDimReport(inventDim, inventDimSetup, vendInvoiceJour.LanguageId);

                    if (inventDimString)
                    {
                        if (qtyRemain)
                        {
                            if ((qtyRemain > 0) && (abs(inventTrans.Qty) < qtyRemain))
                            {
                                qtyTrans = inventTrans.Qty;
                                qtyRemain -= abs(qtyTrans);
                            }
                            else
                            {
                                qtyTrans = qtyRemain;
                                qtyRemain = 0;
                            }

                            inventReportDimHistory.Qty = qtyTrans;
                            inventReportDimHistory.InventDimId = inventTrans.InventDimId;

                            showInventReportDimHistory = NoYes::Yes;
                            this.insertVendInvoiceDocumentTmp(purchInvoiceTransOrTaxTrans,NoYes::No);

                            insertIntoTempTable = true;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }
            else
            {
                while select inventReportDimHistory
                    where inventReportDimHistory.InventTransId == vendInvoiceTrans.InventTransId &&
                        inventReportDimHistory.TransRefId == vendInvoiceTrans.InternalInvoiceId &&
                        inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchInvoice
                    outer join inventDim
                        where inventDim.InventDimId == inventReportDimHistory.InventDimId
                {
                    inventDimString = FormLetter::inventDimReport(inventDim, inventDimSetup, vendInvoiceJour.LanguageId);

                    if (inventDimString)
                    {
                        showInventReportDimHistory = NoYes::Yes;
                    }

                    this.insertVendInvoiceDocumentTmp(purchInvoiceTransOrTaxTrans, NoYes::No);
                    insertIntoTempTable = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic, calls helper methods, and inserts data into the
    /// <c>VendInvoiceDocumentTmp</c> temporary table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// Microsoft SQL Server Reporting Services at runtime. The method should compute data and populate the
    /// data tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        #ISOCountryRegionCodes

        LogisticsAddressCountryRegionISOCode isoCountryCode = SysCountryRegionCode::countryInfo();

        VendInvoiceDocumentContract contract = this.parmDataContract() as VendInvoiceDocumentContract;
        CreatedTransactionId createdTransactionId = contract.parmCreatedTransactionId();
        LanguageId languageId = contract.parmLanguageId();
        RecId recId = contract.parmRecordId();
        
        VendInvoiceDocumentTmp localVendInvoiceDocumentTmp = VendInvoiceDocumentTmp::findJourRecId(recId, createdTransactionId, languageId);

        if (localVendInvoiceDocumentTmp.RecId)
        {
            //the report data is already created so use it. this is the proforma scenario.
            RecordSortedList recordList = new RecordSortedList(tableNum(VendInvoiceDocumentTmp));
            recordList.sortOrder(fieldNum(VendInvoiceDocumentTmp, RecId));

            while select localVendInvoiceDocumentTmp
                where localVendInvoiceDocumentTmp.JournalRecId == recId
            {
                recordList.ins(localVendInvoiceDocumentTmp);
            }

            delete_from localVendInvoiceDocumentTmp //the created data is copied so it should be deleted.
                where localVendInvoiceDocumentTmp.JournalRecId == recId;

            recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.

            if (isoCountryCode == #isoIN)
            {
                recordList = new RecordSortedList(tableNum(VendInvoiceDocumentTmp_IN));
                recordList.sortOrder(fieldNum(VendInvoiceDocumentTmp_IN, RecId));

                VendInvoiceDocumentTmp_IN localVendInvoiceDocumentTmp_IN;
                while select localVendInvoiceDocumentTmp_IN
                    where localVendInvoiceDocumentTmp_IN.JournalRecId == recId
                {
                    recordList.ins(localVendInvoiceDocumentTmp_IN);
                }

                delete_from localVendInvoiceDocumentTmp_IN //the created data is copied so it should be deleted.
                    where localVendInvoiceDocumentTmp_IN.JournalRecId == recId;

                recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
            }
        }
        else
        {
            // Set the userconnection to use on table.
            // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
            vendInvoiceDocumentTmp.setConnection(this.parmUserConnection());

            // <GIN>
            if (isoCountryCode == #isoIN)
            {
                vendInvoiceDocumentTmp_IN.setConnection(this.parmUserConnection());
            }
            // </GIN>

            this.createData(contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPDSFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets PDS fieds when the configuration key is enabled.
    /// </summary>
    /// <remarks>
    /// Concatenates the field values along with labels to show as a seperate
    /// line in the report.
    /// </remarks>
    private void setPDSFields()
    {
        vendInvoiceDocumentTmp.PdsEnabled = (#PdsCatchWeightEnabled ? NoYes::Yes : NoYes::No);

        if (vendInvoiceDocumentTmp.PdsEnabled)
        {
            vendInvoiceDocumentTmp.PdsCWQty = vendInvoiceTrans.PdsCWQty;
            vendInvoiceDocumentTmp.PdsCWUnitId = vendInvoiceTrans.pdsCWUnitId();

            if (currentSessionLanguageRTL())
            {
                // Flip the order of labels and values.
                if (vendInvoiceDocumentTmp.PdsCWQty)
                {
                    vendInvoiceDocumentTmp.PdsCWStr = '  ' + strFmt("@SYS191501", "@PDS1", vendInvoiceDocumentTmp.PdsCWQty);
                }

                if (vendInvoiceDocumentTmp.PdsCWUnitId)
                {
                    vendInvoiceDocumentTmp.PdsCWStr = strFmt("@SYS191501", "@PDS3", vendInvoiceDocumentTmp.PdsCWUnitId) + vendInvoiceDocumentTmp.PdsCWStr;
                }
            }
            else
            {
                if (vendInvoiceDocumentTmp.PdsCWQty)
                {
                    vendInvoiceDocumentTmp.PdsCWStr = strFmt("@SYS191501", "@PDS1", vendInvoiceDocumentTmp.PdsCWQty) + '  ';
                }

                if (vendInvoiceDocumentTmp.PdsCWUnitId)
                {
                    vendInvoiceDocumentTmp.PdsCWStr += strFmt("@SYS191501", "@PDS3", vendInvoiceDocumentTmp.PdsCWUnitId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the settled <c>AmountCur</c> value from the <c>VendSettlement</c> record.
    /// </summary>
    /// <returns>
    ///    The settled <c>AmountCur</c> value from the <c>VendSettlement</c> record.
    /// </returns>
    public AmountCur settledAmountCur()
    {
        return -vendSettlement.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>TmpTaxWorkTrans</c> value.
    /// </summary>
    /// <returns>
    /// A <c>TmpTaxWorkTrans</c> value; otherwise, null.
    /// </returns>
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (vendInvoiceJour.isProforma() && formletterProformaPrint)
        {
            return formletterProformaPrint.tmpTaxWorkTrans(vendInvoiceJour.RecId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalGrand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rounded grand total amount after discounts, miscellaneous charges, and sales tax.
    /// </summary>
    /// <returns>
    /// An <c>AmountCur</c> value.
    /// </returns>
    private AmountCur totalGrand()
    {
        return totalPurchBalance - totalDiscount + totalMiscCharges + totalPurchTax - totalRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSalesBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total sales balance amount.
    /// </summary>
    /// <returns>
    /// An <c>AmountCur</c> value.
    /// </returns>
    private AmountCur totalSalesBalance()
    {
        return totalPurchBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total sales tax amount.
    /// </summary>
    /// <returns>
    /// An <c>AmountCur</c> value.
    /// </returns>
    private AmountCur totalSalesTax()
    {
        return totalPurchTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the packed class and unpacks it.
    /// </summary>
    private void unpackFormLetter()
    {
        SRSTmpDataStore srsTmpDataStore;

        if (formLetterRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
                where srsTmpDataStore.RecId == formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                purchInvoiceJournalPrint = PurchInvoiceJournalPrint::construct();
                purchInvoiceJournalPrint.unpack(srsTmpDataStore.Value);
                srsTmpDataStore.delete();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize TaxSpec
    /// </summary>
    private void setTaxSpec(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (vendInvoiceJour.isProforma())
        {
            taxSpec = TaxSpec::construct(emptyString, naDate(), vendInvoiceJour.RecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans());
        }
        else
        {
            taxSpec = TaxSpec::construct(vendInvoiceJour.LedgerVoucher,
                                         vendInvoiceJour.InvoiceDate,
                                         vendInvoiceJour.RecId,
                                         _ledgerJournalTrans.RecId,
                                         isTaxInvoice);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>