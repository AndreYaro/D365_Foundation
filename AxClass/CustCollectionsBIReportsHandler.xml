<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsBIReportsHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles drillthrough events from the Credit and collections PowerBI report and launches appropriate forms with filtering based on the BI report, page, or visual.
/// </summary>
public class CustCollectionsBIReportsHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReportDrillThru</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to drillthrough events on specific sections and handle launching filtered forms.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    [SubscribesTo(classstr(PowerBIReportControl), delegatestr(PowerBIReportControl, buildReportDrillThru))]
    public static void buildReportDrillThru(PBIReportSelectedData _data)
    {
        if (!_data || _data.dataPoints().empty())
        {
            return;
        }

        if (FeatureStateProvider::isFeatureEnabled(CustCollectionsBIV3PerformanceImproveFeature::instance()))
        {
            switch (_data.report().displayName())
            {
                case 'Credit and collections management V3':
                case 'Credit and collections management cross company V3':
                    CustCollectionsBIReportsHandler handler = new CustCollectionsBIReportsHandler();
                    handler.currentPage(_data);
                default:
                    break;
            }
        }
        else
        {   
            switch (_data.report().displayName())
            {
                case 'Credit and collections management V2':
                case 'Credit and collections management cross company V2':
                    CustCollectionsBIReportsHandler handler = new CustCollectionsBIReportsHandler();
                    handler.currentPage(_data);
                default:
                    break;
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPage</Name>
				<Source><![CDATA[
    private void currentPage(PBIReportSelectedData _data)
    {
        switch (_data.page().displayName())
        {
            case 'Collections overview':
                this.collectionsOverview(_data);
                break;
            case 'Credit overview':
                this.creditOverview(_data);
                break;
            case 'Credit limit':
                this.creditLimit(_data);
                break;
            case 'Customers over credit limit':
                this.customersOverCreditLimit(_data);
                break;
            case 'Customers past due':
                this.customersPastDue(_data);
                break;
            case 'Aged balances':
                this.agedBalances(_data);
                break;
            case 'Expected payments':
                this.expectedPayments(_data);
                break;
            case 'Write-offs':
                break;
            case 'Collections status':
                this.collectionStatus(_data);
                break;
            case 'Collection letters':
                this.collectionLetters(_data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionsOverview</Name>
				<Source><![CDATA[
    private void collectionsOverview(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Aged balances':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CollectionsOverviewAgedBalances);
                break;
            case 'Balance due by region':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CollectionsOverviewBalanceDueByRegion);
                break;
            case 'Collection status amounts':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::CollectionsOverviewCollectionStatusAmounts);
                break;
            case 'Collection code amounts':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::CollectionsOverviewCollectionCodeAmounts);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditOverview</Name>
				<Source><![CDATA[
    private void creditOverview(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Credit limit vs credit used by region':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CreditOverviewCreditLimitVsCreditUsedByRegion);
                break;
            case 'Customers per credit rating':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CreditOverviewCustomersPerCreditRating);
                break;
            case 'Customers over credit limit per company':
                changecompany(CustCollectionsBIReportsHandler::getIdentityListValue(_data))
                {
                    this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CustomersOverCreditLimitPerCompany);
                }
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditLimit</Name>
				<Source><![CDATA[
    private void creditLimit(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Per company':
                changecompany(CustCollectionsBIReportsHandler::getIdentityListValue(_data))
                {
                    this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CreditLimitPerCompany);
                }
                break;
            case 'Per customer group':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CreditLimitPerCustomerGroup);
                break;
            case 'Credit limit per credit rating per company':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CreditLimitPerCreditRatingPerCompany);
                break;
            case 'Credit limit vs credit used by region':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CreditLimitCreditLimitVsCreditUsedByRegion);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customersOverCreditLimit</Name>
				<Source><![CDATA[
    private void customersOverCreditLimit(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Per company':
                changecompany(CustCollectionsBIReportsHandler::getIdentityListValue(_data))
                {
                    this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CustomersOverCreditLimitPerCompany);
                }
                break;
            case 'Per customer group':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CustomersOverCreditLimitPerCustomerGroup);
                break;
            case 'By region':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CustomersOverCreditLimitByRegion);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customersPastDue</Name>
				<Source><![CDATA[
    private void customersPastDue(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Per company':
                changecompany(CustCollectionsBIReportsHandler::getIdentityListValue(_data))
                {
                    this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CustomersPastDuePerCompany);
                }
                break;
            case 'Per customer group':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CustomersPastDuePerCustomerGroup);
                break;
            case 'By region':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::CustomersPastDueByRegion);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>agedBalances</Name>
				<Source><![CDATA[
    private void agedBalances(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Aged balances':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::AgedBalancesAgedBalances);
                break;
            case 'Per company':
                changecompany(CustCollectionsBIReportsHandler::getIdentityListValue(_data))
                {
                    this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::AgedBalancesPerCompany);
                }
                break;
            case 'Per customer group':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBIPoolsListPage), _data, CustCollectionsBIGraphs::AgedBalancesPerCustomerGroup);
                break;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectedPayments</Name>
				<Source><![CDATA[
    private void expectedPayments(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Per company':
                changecompany(CustCollectionsBIReportsHandler::getIdentityListValue(_data))
                {
                    this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::ExpectedPaymentsPerCompany);
                }
                break;
            case 'Per customer group':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::ExpectedPaymentsPerCustomerGroup);
                break;
            case 'By region':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::ExpectedPaymentsByRegion);
                break;
                
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionStatus</Name>
				<Source><![CDATA[
    private void collectionStatus(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Collection status amounts':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::CollectionStatusCollectionStatusAmounts);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionLetters</Name>
				<Source><![CDATA[
    private void collectionLetters(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Collection code amounts':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::CollectionLettersCollectionCodeAmounts);
                break;
            case 'Per customer group':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::CollectionLettersPerCustomerGroup);
                break;
            case 'By region':
                this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::CollectionLettersByRegion);
                break;
            case 'Per company':
                changecompany(CustCollectionsBIReportsHandler::getIdentityListValue(_data))
                {
                    this.runMenuFunction(menuItemDisplayStr(CustCollectionsBICustTrans), _data, CustCollectionsBIGraphs::CollectionLettersPerCompany);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMenuFunction</Name>
				<Source><![CDATA[
    private void runMenuFunction(str _menuItem, Object _object, CustCollectionsBIGraphs _graph)
    {
        Args args = new Args();
        args.parmObject(_object);   
        args.parmEnumType(enumNum(CustCollectionsBIGraphs));
        args.menuItemName(_menuItem);
        args.parmEnum(_graph);
        
        new MenuFunction(_menuItem, MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdentityListValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first value in the identity list from the <c>PowerBIReportSelectedData</c> object.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <returns>The first value of the identities list.</returns>
    public static str getIdentityListValue(PBIReportSelectedData _data)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();
        ListEnumerator enum = identitiesList.getEnumerator();
        enum.moveNext();

        return enum.current().identityEquals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first field id in the identity list from the <c>PowerBIReportSelectedData</c> object.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <returns>The first field id of the identities list.</returns>
    public static str getFieldId(PBIReportSelectedData _data)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();
        ListEnumerator enum = identitiesList.getEnumerator();
        enum.moveNext();

        return enum.current().target().column();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForCollectionsPools</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append query restrictions based on the data in the <c>PBIReportSelectedData</c> object for the collection pools list page.
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    /// <param name = "_graph">The graph that is being acted on.</param>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    public static void buildQueryForCollectionsPools(Query _query, CustCollectionsBIGraphs _graph, PBIReportSelectedData _data)
    {
        switch (_graph)
        {
            case CustCollectionsBIGraphs::CreditOverviewCreditLimitVsCreditUsedByRegion:
                CustCollectionsBIReportsHandler::queryCreditOverviewCreditLimitVsCreditUsedByRegion(_query, _data);
                break;
            case CustCollectionsBIGraphs::CreditOverviewCustomersPerCreditRating:
                CustCollectionsBIReportsHandler::queryCreditOverviewCustomersPerCreditRating(_query, _data);
                break;
            case CustCollectionsBIGraphs::CreditOverviewCustomersOverCreditLimitPerCompany:
                CustCollectionsBIReportsHandler::queryCreditOverviewCustomersOverCreditLimitPerCompany(_query, _data);
                break;
            case CustCollectionsBIGraphs::CreditLimitCreditLimitVsCreditUsedByRegion:
                CustCollectionsBIReportsHandler::queryCreditLimitCreditLimitVsCreditUsedByRegion(_query, _data);
                break;
            case CustCollectionsBIGraphs::CreditLimitPerCompany:
                CustCollectionsBIReportsHandler::queryCreditLimitPerCompany(_query, _data);
                break;
            case CustCollectionsBIGraphs::CreditLimitPerCreditRatingPerCompany:
                CustCollectionsBIReportsHandler::queryCreditLimitPerCreditRatingPerCompany(_query, _data);
                break;
            case CustCollectionsBIGraphs::CreditLimitPerCustomerGroup:
                CustCollectionsBIReportsHandler::queryCreditLimitPerCustomerGroup(_query, _data);
                break;
            case CustCollectionsBIGraphs::CustomersOverCreditLimitByRegion:
                CustCollectionsBIReportsHandler::queryCustomersOverCreditLimitByRegion(_query, _data);
                break;
            case CustCollectionsBIGraphs::CustomersOverCreditLimitPerCompany:
                CustCollectionsBIReportsHandler::queryCustomersOverCreditLimitPerCompany(_query, _data);
                break;
            case CustCollectionsBIGraphs::CustomersOverCreditLimitPerCustomerGroup:
                CustCollectionsBIReportsHandler::queryCustomersOverCreditLimitPerCustomerGroup(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionsOverviewAgedBalances:
                CustCollectionsBIReportsHandler::queryCollectionsOverviewAgedBalances(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionsOverviewBalanceDueByRegion:
                CustCollectionsBIReportsHandler::queryCollectionsOverviewBalanceDueByRegion(_query, _data);
                break;
            case CustCollectionsBIGraphs::CustomersPastDueByRegion:
                CustCollectionsBIReportsHandler::queryCustomersPastDueByRegion(_query, _data);
                break;
            case CustCollectionsBIGraphs::CustomersPastDuePerCompany:
                CustCollectionsBIReportsHandler::queryCustomersPastDuePerCompany(_query, _data);
                break;
            case CustCollectionsBIGraphs::CustomersPastDuePerCustomerGroup:
                CustCollectionsBIReportsHandler::queryCustomersPastDuePerCustomerGroup(_query, _data);
                break;
            case CustCollectionsBIGraphs::AgedBalancesAgedBalances:
                CustCollectionsBIReportsHandler::queryAgedBalancesAgedBalances(_query, _data);
                break;
            case CustCollectionsBIGraphs::AgedBalancesPerCustomerGroup:
                CustCollectionsBIReportsHandler::queryAgedBalancesPerCustomerGroup(_query, _data);
                break;
            case CustCollectionsBIGraphs::AgedBalancesPerCompany:
                CustCollectionsBIReportsHandler::queryAgedBalancesAgedBalancesPerCompany(_query, _data);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAgedBalancesAgedBalancesPerCompany</Name>
				<Source><![CDATA[
    protected static void queryAgedBalancesAgedBalancesPerCompany(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBIAgedBalances), tableNum(CustTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustCollectionsBIAgedBalances, AccountNum));
        qbds.addLink(fieldNum(CustTable, DataAreaId), fieldNum(CustCollectionsBIAgedBalances, DataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreditOverviewCustomersOverCreditLimitPerCompany</Name>
				<Source><![CDATA[
    protected static void queryCreditOverviewCustomersOverCreditLimitPerCompany(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::queryCreditOverviewCreditLimitVsCreditUsedByRegion(_query, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAgedBalancesAgedBalances</Name>
				<Source><![CDATA[
    protected static void queryAgedBalancesAgedBalances(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::queryCollectionsOverviewAgedBalances(_query, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAgedBalancesPerCustomerGroup</Name>
				<Source><![CDATA[
    protected static void queryAgedBalancesPerCustomerGroup(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustTable));
        qbds.addRange(fieldNum(CustTable, CustGroup))
            .value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustomersPastDueByRegion</Name>
				<Source><![CDATA[
    protected static void queryCustomersPastDueByRegion(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseBalancesDue(_query);

        CustCollectionsBIReportsHandler::getQueryBaseCustomerByRegion(
            _query,
            tableNum(CustCollectionsBICustTrans),
            fieldNum(CustCollectionsBICustTrans, AccountNum),
            fieldNum(CustCollectionsBICustTrans, DataAreaId),
            CustCollectionsBIReportsHandler::getIdentityListValue(_data),
            _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustomersPastDuePerCompany</Name>
				<Source><![CDATA[
    protected static void queryCustomersPastDuePerCompany(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseBalancesDue(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustomersPastDuePerCustomerGroup</Name>
				<Source><![CDATA[
    protected static void queryCustomersPastDuePerCustomerGroup(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseBalancesDue(_query);
        
        SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(CustTable)), fieldNum(CustTable, CustGroup))
            .value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBaseBalancesDue</Name>
				<Source><![CDATA[
    protected static void getQueryBaseBalancesDue(Query _query)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBICustTrans), tableNum(CustTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustCollectionsBICustTrans, AccountNum));
        qbds.addLink(fieldNum(CustTable, DataAreaId), fieldNum(CustCollectionsBICustTrans, DataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionsOverviewAgedBalances</Name>
				<Source><![CDATA[
    protected static void queryCollectionsOverviewAgedBalances(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBIAgedBalances), tableNum(CustTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustCollectionsBIAgedBalances, AccountNum));
        qbds.addLink(fieldNum(CustTable, DataAreaId), fieldNum(CustCollectionsBIAgedBalances, DataAreaId));
        qbds.addRange(fieldNum(CustCollectionsBIAgedBalances, Heading))
            .value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionsOverviewBalanceDueByRegion</Name>
				<Source><![CDATA[
    protected static void queryCollectionsOverviewBalanceDueByRegion(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBICustTrans), tableNum(CustTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustCollectionsBICustTrans, AccountNum));
        qbds.addLink(fieldNum(CustTable, DataAreaId), fieldNum(CustCollectionsBICustTrans, DataAreaId));

        CustCollectionsBIReportsHandler::getQueryBaseCustomerByRegion(
            _query,
            tableNum(CustCollectionsBICustTrans),
            fieldNum(CustCollectionsBICustTrans, AccountNum),
            fieldNum(CustCollectionsBICustTrans, DataAreaId),
            CustCollectionsBIReportsHandler::getIdentityListValue(_data),
            _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustomersOverCreditLimitByRegion</Name>
				<Source><![CDATA[
    protected static void queryCustomersOverCreditLimitByRegion(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query, true);
        CustCollectionsBIReportsHandler::getQueryBaseCustomerByRegion(
            _query,
            tableNum(CustCollectionsBICredit),
            fieldNum(CustCollectionsBICredit, AccountNum),
            fieldNum(CustCollectionsBICredit, DataAreaId),
            CustCollectionsBIReportsHandler::getIdentityListValue(_data),
            _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustomersOverCreditLimitPerCompany</Name>
				<Source><![CDATA[
    protected static void queryCustomersOverCreditLimitPerCompany(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustomersOverCreditLimitPerCustomerGroup</Name>
				<Source><![CDATA[
    protected static void queryCustomersOverCreditLimitPerCustomerGroup(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query, true);

        SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(CustTable)), fieldNum(CustTable, CustGroup))
            .value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreditLimitPerCustomerGroup</Name>
				<Source><![CDATA[
    protected static void queryCreditLimitPerCustomerGroup(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query);

        SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(CustTable)), fieldNum(CustTable, CustGroup))
            .value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreditLimitPerCreditRatingPerCompany</Name>
				<Source><![CDATA[
    protected static void queryCreditLimitPerCreditRatingPerCompany(Query _query, PBIReportSelectedData _data)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();
        ListEnumerator enum = identitiesList.getEnumerator();
        enum.moveNext();
        str companySelected = enum.current().identityEquals();
        enum.moveNext();
        str custCreditRating = enum.current().identityEquals();

        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query);
        SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(CustCollectionsBICredit)), fieldNum(CustCollectionsBICredit, CreditRating))
            .value(SysQuery::value(custCreditRating));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreditLimitPerCompany</Name>
				<Source><![CDATA[
    protected static void queryCreditLimitPerCompany(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreditLimitCreditLimitVsCreditUsedByRegion</Name>
				<Source><![CDATA[
    protected static void queryCreditLimitCreditLimitVsCreditUsedByRegion(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::queryCreditOverviewCreditLimitVsCreditUsedByRegion(_query, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreditOverviewCreditLimitVsCreditUsedByRegion</Name>
				<Source><![CDATA[
    protected static void queryCreditOverviewCreditLimitVsCreditUsedByRegion(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query);
        CustCollectionsBIReportsHandler::getQueryBaseCustomerByRegion(
            _query,
            tableNum(CustCollectionsBICredit),
            fieldNum(CustCollectionsBICredit, AccountNum),
            fieldNum(CustCollectionsBICredit, DataAreaId),
            CustCollectionsBIReportsHandler::getIdentityListValue(_data),
            _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreditOverviewCustomersPerCreditRating</Name>
				<Source><![CDATA[
    protected static void queryCreditOverviewCustomersPerCreditRating(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustomersOverCreditLimit(_query);
        SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(CustCollectionsBICredit)), fieldNum(CustCollectionsBICredit, CreditRating))
            .value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBaseCustomersOverCreditLimit</Name>
				<Source><![CDATA[
    protected static void getQueryBaseCustomersOverCreditLimit(Query _query, boolean _limitToCustomersOverCreditLimit = false)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBICredit), tableNum(CustTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustCollectionsBICredit, AccountNum));
        qbds.addLink(fieldNum(CustTable, DataAreaId), fieldNum(CustCollectionsBICredit, DataAreaId));
        qbds.addRange(fieldNum(CustCollectionsBICredit, SystemCurrencyCreditMax)).value(SysQuery::value('> 0'));

        if (_limitToCustomersOverCreditLimit)
        {
            qbds.addRange(fieldNum(CustCollectionsBICredit, AmountOverCreditLimit)).value(SysQuery::value('> 0'));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append query restrictions based on the data in the <c>PBIReportSelectedData</c> object for cust trans.
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    /// <param name = "_graph">The graph that is being acted on.</param>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    public static void buildQueryForCustTrans(Query _query, CustCollectionsBIGraphs _graph, PBIReportSelectedData _data)
    {
        switch (_graph)
        {
            case CustCollectionsBIGraphs::ExpectedPaymentsPerCompany:
                CustCollectionsBIReportsHandler::getQueryBaseCustTransExpectedPayments(_query);
                break;
            case CustCollectionsBIGraphs::ExpectedPaymentsPerCustomerGroup:
                CustCollectionsBIReportsHandler::queryExpectedPaymentsPerCustomerGroup(_query, _data);
                break;
            case CustCollectionsBIGraphs::ExpectedPaymentsByRegion:
                CustCollectionsBIReportsHandler::queryExpectedPaymentsByRegion(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionStatusCollectionStatusAmounts:
                CustCollectionsBIReportsHandler::queryCollectionStatusCollectionStatusAmounts(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionLettersCollectionCodeAmounts:
                CustCollectionsBIReportsHandler::queryCollectionLettersCollectionCodeAmounts(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionLettersPerCustomerGroup:
                CustCollectionsBIReportsHandler::queryCollectionLettersPerCustomerGroup(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionLettersPerCompany:
                CustCollectionsBIReportsHandler::queryCollectionLettersPerCompany(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionLettersByRegion:
                CustCollectionsBIReportsHandler::queryCollectionLettersByRegion(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionsOverviewCollectionCodeAmounts:
                CustCollectionsBIReportsHandler::queryCollectionsOverviewCollectionCodeAmounts(_query, _data);
                break;
            case CustCollectionsBIGraphs::CollectionsOverviewCollectionStatusAmounts:
                CustCollectionsBIReportsHandler::queryCollectionsOverviewCollectionStatusAmounts(_query, _data);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionsOverviewCollectionCodeAmounts</Name>
				<Source><![CDATA[
    protected static void queryCollectionsOverviewCollectionCodeAmounts(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::queryCollectionLettersCollectionCodeAmounts(_query, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionsOverviewCollectionStatusAmounts</Name>
				<Source><![CDATA[
    protected static void queryCollectionsOverviewCollectionStatusAmounts(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::queryCollectionStatusCollectionStatusAmounts(_query, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryExpectedPaymentsPerCustomerGroup</Name>
				<Source><![CDATA[
    protected static void queryExpectedPaymentsPerCustomerGroup(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustTransExpectedPayments(_query);

        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustTable), tableNum(CustCollectionsBIExpectedPaymentView));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustCollectionsBIExpectedPaymentView, AccountNum), fieldNum(CustTable, AccountNum));
        qbds.addLink(fieldNum(CustCollectionsBIExpectedPaymentView, Company), fieldNum(CustTable, DataAreaId));
        qbds.addRange(fieldNum(CustTable, CustGroup)).value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBaseCustTransExpectedPayments</Name>
				<Source><![CDATA[
    protected static void getQueryBaseCustTransExpectedPayments(Query _query)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBIExpectedPaymentView), tableNum(CustTrans));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTrans, AccountNum), fieldNum(CustCollectionsBIExpectedPaymentView, AccountNum));
        qbds.addLink(fieldNum(CustTrans, DataAreaId), fieldNum(CustCollectionsBIExpectedPaymentView, Company));
        qbds.addLink(fieldNum(CustTrans, Voucher), fieldNum(CustCollectionsBIExpectedPaymentView, Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryExpectedPaymentsByRegion</Name>
				<Source><![CDATA[
    protected static void queryExpectedPaymentsByRegion(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCustTransExpectedPayments(_query);

        CustCollectionsBIReportsHandler::getQueryBaseCustomerByRegion(
            _query,
            tableNum(CustCollectionsBIExpectedPaymentView),
            fieldNum(CustCollectionsBIExpectedPaymentView, AccountNum),
            fieldNum(CustCollectionsBIExpectedPaymentView, Company),
            CustCollectionsBIReportsHandler::getIdentityListValue(_data),
            _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionStatusCollectionStatusAmounts</Name>
				<Source><![CDATA[
    protected static void queryCollectionStatusCollectionStatusAmounts(Query _query, PBIReportSelectedData _data)
    {
        DictEnum de = new DictEnum(enumNum(CustVendDisputeStatus));
        CustVendDisputeStatus disputeStatus = any2Enum(de.name2Value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));

        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustDispute), tableNum(CustTrans));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTrans, RecId), fieldNum(CustDispute, CustTrans));
        qbds.addRange(fieldNum(CustDispute, Status)).value(SysQuery::value(disputeStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionLettersCollectionCodeAmounts</Name>
				<Source><![CDATA[
    protected static void queryCollectionLettersCollectionCodeAmounts(Query _query, PBIReportSelectedData _data)
    {
        DictEnum de = new DictEnum(enumNum(CustCollectionLetterCode));
        CustCollectionLetterCode status = any2Enum(de.symbol2Value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));

        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustTrans));
        qbds.addRange(fieldNum(CustTrans, CollectionLetterCode)).value(SysQuery::value(status));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionLettersByRegion</Name>
				<Source><![CDATA[
    protected static void queryCollectionLettersByRegion(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCollectionLetterAmounts(_query);
        
        CustCollectionsBIReportsHandler::getQueryBaseCustomerByRegion(
            _query, 
            tableNum(CustCollectionsBICustTrans),
            fieldNum(CustCollectionsBICustTrans, AccountNum),
            fieldNum(CustCollectionsBICustTrans, DataAreaId),
            CustCollectionsBIReportsHandler::getIdentityListValue(_data),
            _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionLettersPerCompany</Name>
				<Source><![CDATA[
    protected static void queryCollectionLettersPerCompany(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCollectionLetterAmounts(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCollectionLettersPerCustomerGroup</Name>
				<Source><![CDATA[
    protected static void queryCollectionLettersPerCustomerGroup(Query _query, PBIReportSelectedData _data)
    {
        CustCollectionsBIReportsHandler::getQueryBaseCollectionLetterAmounts(_query);

        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustTable), tableNum(CustCollectionsBICustTrans));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustCollectionsBICustTrans, AccountNum), fieldNum(CustTable, AccountNum));
        qbds.addLink(fieldNum(CustCollectionsBICustTrans, DataAreaId), fieldNum(CustTable, DataAreaId));
        qbds.addRange(fieldNum(CustTable, CustGroup)).value(SysQuery::value(CustCollectionsBIReportsHandler::getIdentityListValue(_data)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBaseCollectionLetterAmounts</Name>
				<Source><![CDATA[
    protected static void getQueryBaseCollectionLetterAmounts(Query _query)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBICustTrans), tableNum(CustTrans));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CustTrans, AccountNum), fieldNum(CustCollectionsBICustTrans, AccountNum));
        qbds.addLink(fieldNum(CustTrans, DataAreaId), fieldNum(CustCollectionsBICustTrans, DataAreaId));
        qbds.addLink(fieldNum(CustTrans, Voucher), fieldNum(CustCollectionsBICustTrans, Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBaseCustomerByRegion</Name>
				<Source><![CDATA[
    protected static void getQueryBaseCustomerByRegion(Query _query, int _parentTable, FieldId _accountNumFieldId, FieldId _companyFieldId, str _region, PBIReportSelectedData _data)
    {
        CustCollectionsBICustTable biCustTable;
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CustCollectionsBICustTable), _parentTable);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(_accountNumFieldId, fieldNum(CustCollectionsBICustTable, AccountNum));
        qbds.addLink(_companyFieldId, fieldNum(CustCollectionsBICustTable, DataAreaId));
        qbds.addRange(fieldName2id(biCustTable.TableId, CustCollectionsBIReportsHandler::getFieldId(_data)))
            .value(SysQuery::value(_region));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>