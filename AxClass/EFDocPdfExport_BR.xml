<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocPdfExport_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Exports fiscal document NF-e in pdf
/// </summary>
class EFDocPdfExport_BR
{
    boolean isReportGenerated = false;
    FiscalDocument_BR fiscalDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args.record())
        {
            throw error("@GLS62665");
        }

        FormDataSource ds = FormDataUtil::getFormDataSource(_args.record());
        FiscalDocument_BR fiscalDocument = ds.getFirst(true);

        if (!fiscalDocument)
        {
            fiscalDocument = ds.cursor();
        }

        while (fiscalDocument)
        {
            var exporter = EFDocPdfExport_BR::construct(fiscalDocument);
            exporter.exportToUser();
            fiscalDocument = ds.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FiscalDocument_BR _fiscalDocument)
    {
        this.fiscalDocument = _fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of EFDocPdfExport_BR class
    /// </summary>
    /// <param name="_fiscalDocument">
    /// Fiscal Document which will have the DANFE exported
    /// </param>
    /// <returns>
    /// An instance of EFDocPdfExport_BR
    /// </returns>
    public static EFDocPdfExport_BR construct(FiscalDocument_BR _fiscalDocument)
    {
        if (_fiscalDocument.RecId == 0)
        {
            throw error("@GLS62665");
        }
        return new EFDocPdfExport_BR(_fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the DANFE pdf of a fiscal document to current user
    /// </summary>
    /// <returns>
    /// True if the process succeeded, false otherwise
    /// </returns>
    public boolean exportToUser()
    {
        SrsReportRunController reportRunController = this.createControllerToUser();
        return this.export(reportRunController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportBinary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the DANFE pdf in binary format of a fiscal document
    /// </summary>
    /// <returns>
    /// Binary data if the process succeeded, null otherwise
    /// </returns>
    public BinData exportBinary()
    {
        SrsReportRunController reportRunController = this.createControllerBinary();

        if (this.export(reportRunController))
        {
            return this.getBinaryDataForReport(reportRunController.parmReportContract().parmPrintSettings());
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRenderingComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Captures the result of the report rendering and saves it on the object
    /// </summary>
    /// <param name="_sender">
    /// The report controller in which the execution happened
    /// </param>
    /// <param name="_eventArgs">
    /// The arguments of the event that represents that the rendering has been completed
    /// </param>
    public void onRenderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        isReportGenerated = _eventArgs.parmReportExecutionInfo().parmIsSuccessful();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    protected SRSCatalogItemName getReportName()
    {
        SRSCatalogItemName ret;

        if (fiscalDocument.isElectronicConsumerFiscalDoc())
        {
            ret = ssrsReportStr(EFDocDanfeNfce_BR, Report);
        }
        else
        {
            ret = ssrsReportStr(EFDocDanfe_BR, Report);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createControllerToUser</Name>
				<Source><![CDATA[
    private SrsReportRunController createControllerToUser()
    {
        SrsReportDataContract       contract;
        SrsReportRunController      reportRunController;

        reportRunController = this.createReportRunController();

        contract = reportRunController.parmReportContract();
        contract.parmPrintSettings().printMediumType(SRSPrintMediumType::File);
        contract.parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
        this.createFiscalDocumentContract(contract);

        return reportRunController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createControllerBinary</Name>
				<Source><![CDATA[
    private SrsReportRunController createControllerBinary()
    {
        SrsReportDataContract       contract;
        SrsReportRunController      reportRunController;

        reportRunController = this.createReportRunController();

        contract = reportRunController.parmReportContract();
        contract.parmPrintSettings().printMediumType(SRSPrintMediumType::Archive);
        contract.parmPrintSettings().parmPrintToArchive(true);
        this.createFiscalDocumentContract(contract);

        return reportRunController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportRunController</Name>
				<Source><![CDATA[
    private SrsReportRunController createReportRunController()
    {
        SrsReportRunController      reportRunController;

        reportRunController = new SrsReportRunController();

        reportRunController.parmReportName(this.getReportName());

        reportRunController.parmLoadFromSysLastValue(false);

        return reportRunController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocumentContract</Name>
				<Source><![CDATA[
    private void createFiscalDocumentContract(SrsReportDataContract contract)
    {
        #NFPrinting_BR
        #SRSFramework
        FiscalDocumentContract_BR   rdpContract;

        var filename = fiscalDocument.AccessKey + #pdf;
        contract.parmPrintSettings().fileName(filename);

        rdpContract = contract.parmRdpContract() as FiscalDocumentContract_BR;
        rdpContract.parmRecordId(fiscalDocument.RecId);

        FiscalEstablishment_BR fiscalEstablishment;
        select firstonly EFDocEnvironment from fiscalEstablishment 
            where fiscalEstablishment.FiscalEstablishmentId == fiscalDocument.fiscalEstablishment;
        
        if (fiscalEstablishment.EFDocEnvironment == EFDocEnvironment_BR::Testing)
        {
            rdpContract.parmEFDocEnvironment(true);
        }
        else
        {
            rdpContract.parmEFDocEnvironment(false);
        }

        rdpContract.parmPrePrintedSecurityForm(false);
        rdpContract.parmMaxDescSizeAdditionaInfFirstPage(#MaxDescSizeAdditionaInfFirstPage);
        rdpContract.parmMaxDescSizeAdditionalInformation(#MaxDescSizeAdditionalInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>export</Name>
				<Source><![CDATA[
    private boolean export(SrsReportRunController reportRunController)
    {
        boolean success = false;
        try
        {
            reportRunController.renderingCompleted += eventhandler(this.onRenderingComplete);
            reportRunController.runReport();

            if (!isReportGenerated)
            {
                warning("@SYS4007201");
            }

            success = isReportGenerated;
        }
        catch
        {
            warning("@SYS4007201");
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBinaryDataForReport</Name>
				<Source><![CDATA[
    private BinData getBinaryDataForReport(SRSPrintDestinationSettings _printerSettings)
    {
        PrintJobHeader printJobHeader;
        DocuRef        docuRef;

        select firstonly RecId from printJobHeader
            where printJobHeader.printedTime == _printerSettings.parmSRSPrintArchiveContract().parmExecutionTime()
                && printJobHeader.printedDate == _printerSettings.parmSRSPrintArchiveContract().parmExecutionDate()
                && printJobHeader.jobDescription == _printerSettings.parmSRSPrintArchiveContract().parmJobDescription()
                && printJobHeader.printedBy == curUserId();

        select firstonly docuRef
            where docuRef.RefRecId == printJobHeader.RecId
                && docuRef.RefTableId == printJobHeader.TableId
                && docuRef.ActualCompanyId == curExt();

        BinData binData = new BinData();
        binData.setData(DocumentManagement::getAttachmentAsContainer(docuRef));

        return binData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>