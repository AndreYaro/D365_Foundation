<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookPost_Sales_Cancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookPost_Sales_Cancel_RU extends BookPost_Sales_RU implements BatchRetryable
{
    TransDate   lastClosingDate;
    Set         processedBlockedTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected boolean check()
    {
        boolean                         ret = true;
        SalesBookVATProcessLogTable_RU  salesBookVATProcessLogTable;
        BookStructSmallVATAmounts_RU    usedAmounts, currentAmounts;
        AmountMST                       restoredAmountToCancel, usedInPurch, usedInSales;

        boolean checkAmounts(AmountMST _currentAmount, AmountMST _usedAmount)
        {
            if (_currentAmount * _usedAmount < 0)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (abs(_currentAmount) <= abs(_usedAmount))
            {
                return true;
            }
            return false;
        }
        ;

        setPrefix("@SYS13894");

        while select forupdate tmpProcessLogTrans
            where tmpProcessLogTrans.Marked == NoYes::Yes
        {
            restoredAmountToCancel = 0;

            setPrefix(strFmt("@GLS111359", tmpProcessLogTrans.AccountNum, tmpProcessLogTrans.FactureExternalId));

            select firstonly TransDate from salesBookVATProcessLogTable
                where salesBookVATProcessLogTable.RecId == tmpProcessLogTrans.LogTableRefRecId;

            if (transDate < salesBookVATProcessLogTable.TransDate)
            {
                ret = false;
                tmpProcessLogTrans.Error = NoYes::Yes;
                tmpProcessLogTrans.update();
                error("@GLS102559");
            }

            while select tmpProcessLogTransOper
                where tmpProcessLogTransOper.RefRecId         == tmpProcessLogTrans.RecId &&
                      tmpProcessLogTransOper.LogTableRefRecId == tmpProcessLogTrans.LogTableRefRecId
            {
                usedAmounts    = SalesBookVATProcessLogTransOper_RU::usedAmounts(tmpProcessLogTrans.FactureId,
                                                                                 tmpProcessLogTransOper.TaxCode,
                                                                                 tmpProcessLogTransOper.DefaultDimension,
                                                                                 tmpProcessLogTransOper.InventTransId,
                                                                                 tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                 tmpProcessLogTrans.PaymentRecIdRef,
                                                                                 tmpProcessLogTrans.InvoiceCompany,
                                                                                 tmpProcessLogTrans.PaymentCompany,
                                                                                 tmpProcessLogTrans.SettlementRecId,
                                                                                 tmpProcessLogTrans.SettlementDate,
                                                                                 false,
                                                                                 0,
                                                                                 NoYes::Yes,
                                                                                 tmpProcessLogTransOper.RestoringType);

                currentAmounts = new BookStructSmallVATAmounts_RU();
                currentAmounts.addAmounts(tmpProcessLogTransOper.AmountLiableToVAT + tmpProcessLogTransOper.TaxAmount,
                                          tmpProcessLogTransOper.AmountLiableToVAT,
                                          tmpProcessLogTransOper.TaxAmount);

                if (! checkAmounts(currentAmounts.amountInclVAT(), usedAmounts.amountInclVAT())         ||
                    ! checkAmounts(currentAmounts.amountLiableToVAT(), usedAmounts.amountLiableToVAT()) ||
                    ! checkAmounts(currentAmounts.taxAmountVAT(), usedAmounts.taxAmountVAT()))
                {
                    ret = false;

                    tmpProcessLogTrans.Error = NoYes::Yes;
                    tmpProcessLogTrans.update();
                    error("@GLS102590");
                }

                if (tmpProcessLogTrans.ProcessingType    == SalesBookProcessingType_RU::VATRestoration &&
                    tmpProcessLogTransOper.RestoringType != SalesBookVATRestoringType_RU::None)
                {
                    restoredAmountToCancel += tmpProcessLogTransOper.AmountLiableToVAT + tmpProcessLogTransOper.TaxAmount;
                }
            }

            if (restoredAmountToCancel && tmpProcessLogTrans.InvoiceRecIdRef)
            {
                usedInPurch = PurchBookVATProcessLogTransOper_RU::usedAmounts_InvoiceRecId(tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                           tmpProcessLogTrans.InvoiceCompany,
                                                                                           transDate,
                                                                                           false,
                                                                                           PurchBookProcessingType_RU::ExpConfirmation).amountInclVAT();

                usedInSales = SalesBookVATProcessLogTransOper_RU::usedAmounts_InvoiceRecId(tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                           tmpProcessLogTrans.InvoiceCompany,
                                                                                           false).amountInclVAT();

                if (usedInPurch > usedInSales - restoredAmountToCancel)
                {
                    ret = false;
                    tmpProcessLogTrans.Error = NoYes::Yes;
                    tmpProcessLogTrans.update();
                    error("@GLS114214");
                }
            }
        }

        return ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperation</Name>
				<Source><![CDATA[
        protected SalesBookVATProcessLogTransOper_RU logOperation(AmountMST _taxAmount, AmountMST _amountLiableToVAT)
    {
        SalesBookVATProcessLogTransOper_RU   processLogTransOper, prevProcessLogTransOper;
        SalesBookVATProcessLogTrans_RU       processLogTransLocal;
        ;

        processLogTransOper = super(_taxAmount, _amountLiableToVAT);

        select forupdate firstonly prevProcessLogTransOper
            where prevProcessLogTransOper.RecId == tmpProcessLogTransOper.OrigRecId;

        if ( ! SalesBookTable_RU::canProcessDate(prevProcessLogTransOper.TransDate, lastClosingDate))
        {
            throw error(strFmt("@GLS113010",
                SalesBookVATProcessParameters_RU::find(prevProcessLogTransOper.SalesBookVATProcessParameters_RU).OperationCode,
                processLogTrans.FactureExternalId));
        }

        processLogTransOper.CanceledRefRecId = prevProcessLogTransOper.RecId;
        processLogTransOper.update();

        prevProcessLogTransOper.CanceledRefRecId = processLogTransOper.RecId;
        prevProcessLogTransOper.update();

        if ( ! prevProcessLogTransOper.Blocked)
        {
            if (processLogTransList.len())
            {
                processLogTransList.first(processLogTransLocal);
                do
                {
                    if (BookDataCalc_RU::datePeriodBook(processLogTransLocal.SalesBookTransDate) != BookDataCalc_RU::datePeriodBook(prevProcessLogTransOper.TransDate))
                    {
                        processedBlockedTrans.add(processLogTransLocal.RecId);
                    }
                }
                while (processLogTransList.next(processLogTransLocal));
            }
            else if (BookDataCalc_RU::datePeriodBook(processLogTrans.SalesBookTransDate) != BookDataCalc_RU::datePeriodBook(prevProcessLogTransOper.TransDate))
            {
                processedBlockedTrans.add(processLogTrans.RecId);
            }
        }

        return processLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        SetEnumerator                      setEnumerator;
        SalesBookVATProcessLogTable_RU     salesBookVatProcessLogTable;
        SalesBookVATProcessLogTransOper_RU salesBookVATProcessLogTransOper,newSalesBookVatProcessLogTransOper;
        ;

        lastClosingDate = SalesBookTable_RU::getLastClosedBook().ClosingDate;

        processedBlockedTrans = new Set(typeName2Type(extendedTypeStr(recId)));
        ttsbegin;

        super();

        setEnumerator = processedBlockedTrans.getEnumerator();

        while (setEnumerator.moveNext())
        {
            this.cancelBlockedTrans(setEnumerator.current());

            select firstonly RecId from salesBookVatProcessLogTable
                order by Executed desc, EndTime desc
                where salesBookVatProcessLogTable.TransDate <= lastClosingDate
            exists join salesBookVATProcessLogTransOper
                where salesBookVATProcessLogTransOper.LogTableRefRecId == salesBookVatProcessLogTable.RecId &&
                      salesBookVATProcessLogTransOper.RefRecId         == setEnumerator.current();

            while select salesBookVATProcessLogTransOper
                where salesBookVATProcessLogTransOper.LogTableRefRecId == salesBookVatProcessLogTable.RecId &&
                      salesBookVATProcessLogTransOper.RefRecId         == setEnumerator.current()           &&
                      salesBookVATProcessLogTransOper.Blocked          == NoYes::Yes                        &&
                      salesBookVATProcessLogTransOper.Correct          == NoYes::No                         &&
                      salesBookVATProcessLogTransOper.CanceledRefRecId != 0
            {
                newSalesBookVatProcessLogTransOper.clear();
                newSalesBookVatProcessLogTransOper.data(salesBookVATProcessLogTransOper);

                newSalesBookVatProcessLogTransOper.LogTableRefRecId = logTable.RecId;
                newSalesBookVatProcessLogTransOper.CanceledRefRecId = 0;
                newSalesBookVatProcessLogTransOper.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return  "@GLS113011";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>