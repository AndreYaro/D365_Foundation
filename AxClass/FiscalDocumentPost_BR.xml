<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentPost_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Fiscal document posting base class. Provides the infrastructe to persist a fiscal document given a ParmData object model.
/// </summary>
public class FiscalDocumentPost_BR
{
    BrazilParameters                        brazilParameters;
    FiscalDocumentParmData_BR               fiscalDocumentParmData;
    FiscalDocument_BR                       fiscalDocument;

    Map                                     markupTransFiscalDocMiscCharge;

    boolean                                 hasErrorsInFiscalDocumentLine;
    boolean                                 hasErrorsInFiscalDocumentPaymentTrans;

    SystemSequence                          systemSequence;

    RecordInsertList fiscalDocTaxTransSourceRecordList = new RecordInsertList(tableNum(FiscalDocumentTaxTransSource_BR));
    RecordInsertList fiscalDocumentLineTaxesRecordList = new RecordInsertList(tableNum(FiscalDocumentTaxTrans_BR));


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFiscalDocument</Name>
				<Source><![CDATA[
    public  FiscalDocument_BR parmFiscalDocument(FiscalDocument_BR _fiscalDocument = fiscalDocument)
    {
        fiscalDocument = _fiscalDocument;
        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether the fiscal document PamrData object model is valid against the validation rules.
    /// </summary>
    /// <returns>
    ///     True when there are no validation failures, meaning that the ParmData object model can be considered ready for posting. False otherwise.
    /// </returns>
    /// <remarks>
    ///     Validation rules are determined by validation methods defined within validation classes and decorated with the special attribute FiscalDocumentValidation_BR.
    ///     Validation classes are attached to an instance of FiscalDocumentValidationExecutor_BR class which is created within this FiscalDocumentPost_BR instance.
    /// </remarks>
    public boolean canBePosted()
    {
        FiscalDocumentValidationsExecutor_BR validationsExecutor;

        validationsExecutor = this.getValidationsExecutor();

        Debug::assert(validationsExecutor != null);

        validationsExecutor.execute(fiscalDocumentParmData);
        if (validationsExecutor.hasFailures())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAccessKey</Name>
				<Source><![CDATA[
    private str generateAccessKey()
    {
        FiscalEstablishment_BR  fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalDocument.fiscalEstablishment);

        if (!fiscalEstablishment.EFDocVersion)
        {
            throw error(strFmt("@GLS223736",
                               fieldPName(FiscalEstablishment_BR, EFDocVersion),
                               fiscalEstablishment.FiscalEstablishmentId));
        }

        return EFDocFactory_BR::construct().createAccessKey(
            fiscalEstablishment.EFDocVersion,
            fiscalDocument.NumericCode,
            fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNumericCode</Name>
				<Source><![CDATA[
    private int generateNumericCode()
    {
        Random random = new Random();

        return random.nextInt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default fiscal document status of the <c>FiscalDocumentParmData_BR</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>FiscalDocumentStatus_BR</c> value representing the fiscal document status.
    /// </returns>
    protected FiscalDocumentStatus_BR getDefaultStatus()
    {
        if (fiscalDocumentParmData.shouldGenerateElectronicDocument())
        {
            // In this case electronic fiscal document framework takes care of the status
            return FiscalDocumentStatus_BR::Blank;
        }
        else if (fiscalDocumentParmData.isEFDocumentCity())
        {
            return FiscalDocumentStatus_BR::Created;
        }
        else if (fiscalDocumentParmData.isRetailDocument())
        {
            return fiscalDocumentParmData.parmStatus();
        }
        else
        {
            return FiscalDocumentStatus_BR::Approved;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a table buffer representing the fiscal document being posted.
    /// </summary>
    /// <returns>
    ///     A <c>FiscalDocument_BR</c> table buffer.
    /// </returns>
    public FiscalDocument_BR getFiscalDocument()
    {
        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document operation description from the CFOP description of the first line with a CFOP.
    /// </summary>
    /// <returns>
    /// The <c>FiscalDocumentOperationDescription_BR</c> value representing the fiscal document operation description.
    /// </returns>
    protected FiscalDocumentOperationDescription_BR getOperationDescription()
    {
        FiscalDocumentOperationDescription_BR   operationDescription;
        FiscalDocumentLineParmData_BR           lineParmData;
        CFOPTable_BR                            cfopTable;
        ListEnumerator                          listOfLinesEnumerator;
        MapEnumerator                           mapEnumerator;
        Map                                     cfopsInLines = new Map(Types::Real, Types::String); // sorted by LineNum

        if (fiscalDocumentParmData.parmFiscalDocumentOperationDescription() == '')
        {
        if (fiscalDocumentParmData.parmLines())
        {
            listOfLinesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();
            while (listOfLinesEnumerator.moveNext())
            {
                lineParmData = listOfLinesEnumerator.current();
                cfopsInLines.insert(lineParmData.parmLineNum(), lineParmData.parmCFOP());
            }
        }

        mapEnumerator = cfopsInLines.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            if (mapEnumerator.currentValue() != '')
            {
                cfopTable               = CFOPTable_BR::findByCFOPId(mapEnumerator.currentValue());
                operationDescription    = subStr(cfopTable.Name, 1, 60);
                break;
            }
            }
        }
        else
        {
            operationDescription = fiscalDocumentParmData.parmFiscalDocumentOperationDescription();
        }

        return operationDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total discount amount of the fiscal document.
    /// </summary>
    /// <returns>
    /// The sum of the discount amount of all the lines of the fiscal document.
    /// </returns>
    protected AmountMST getTotalDiscountAmount()
    {
        ListEnumerator                  linesEnumerator;
        FiscalDocumentLineParmData_BR   line;
        AmountMST                       totalDiscountAmount;

        if (fiscalDocumentParmData.parmTotalDiscountAmount() == 0)
        {
        if (!fiscalDocumentParmData.parmLines())
        {
            return 0;
        }

        linesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();

        while (linesEnumerator.moveNext())
        {
            line = linesEnumerator.current();
            totalDiscountAmount += line.parmLineDiscount();
        }
        }
        else
        {
            totalDiscountAmount = fiscalDocumentParmData.parmTotalDiscountAmount();
        }

        return totalDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalGoodsAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total goods amount of the fiscal document.
    /// </summary>
    /// <returns>
    /// The sum of the line amount of all the product lines of the fiscal document.
    /// </returns>
    protected AmountMST getTotalGoodsAmount()
    {
        ListEnumerator                  linesEnumerator;
        FiscalDocumentLineParmData_BR   line;
        AmountMST                       totalGoodsAmount;

        if (!fiscalDocumentParmData.parmLines())
        {
            return 0;
        }

        if (fiscalDocumentParmData.parmTotalGoodsAmount() == 0)
        {
        linesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();

        while (linesEnumerator.moveNext())
        {
            line = linesEnumerator.current();

            if (line.parmItemType() == FiscalDocumentLineItemType_BR::Product)
            {
                totalGoodsAmount += line.parmLineAmount();
            }
            }
        }
        else
        {
            totalGoodsAmount = fiscalDocumentParmData.parmTotalGoodsAmount();
        }

        return totalGoodsAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalServicesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total services amount of the fiscal document.
    /// </summary>
    /// <returns>
    /// The sum of the line amount of all the service lines of the fiscal document.
    /// </returns>
    protected AmountMST getTotalServicesAmount()
    {
        ListEnumerator                  linesEnumerator;
        FiscalDocumentLineParmData_BR   line;
        AmountMST                       totalServicesAmount;

        if (!fiscalDocumentParmData.parmLines())
        {
            return 0;
        }

        if (fiscalDocumentParmData.parmTotalServicesAmount() == 0)
        {
        linesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();

        while (linesEnumerator.moveNext())
        {
            line = linesEnumerator.current();

            if (line.parmItemType() == FiscalDocumentLineItemType_BR::Service)
            {
                totalServicesAmount += line.parmLineAmount();
            }
            }
        }
        else
        {
            totalServicesAmount = fiscalDocumentParmData.parmTotalServicesAmount();
        }

        return totalServicesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsExecutor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>FiscalDocumentValidationsExecutor_BR</c> class with all validations automatically added.
    /// </summary>
    /// <returns>
    /// An instance of the <c>FiscalDocumentValidationsExecutor_BR</c> class with all pre-defined validations loaded.
    /// </returns>
    protected FiscalDocumentValidationsExecutor_BR getValidationsExecutor()
    {
        return FiscalDocumentValidationsExecutor_BR::newFromFiscalDocument(fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the fiscal document payment and the related installments of the fiscal document from the ParmData objects to the database.
    /// </summary>
    protected void initCustVendTrans()
    {
        FiscalDocumentCustVendTransParmData_BR  custVendTransParmData;
        FiscalDocumentCustVendTrans_BR          fiscalDocumentCustVendTrans;
        FiscalDocumentInstallment_BR            fiscalDocumentInstallment;
        ListEnumerator                          installmentsListEnumerator;
        FiscalDocumentInstallmentParmData_BR    installmentParmData;

        custVendTransParmData = fiscalDocumentParmData.parmCustVendTrans();
        if (custVendTransParmData && custVendTransParmData.parmAmount())
        {
            fiscalDocumentCustVendTrans.clear();
            fiscalDocumentCustVendTrans.initValue();
            fiscalDocumentCustVendTrans.FiscalDocument  = fiscalDocument.RecId;
            fiscalDocumentCustVendTrans.DueDate         = custVendTransParmData.parmDueDate();
            fiscalDocumentCustVendTrans.Amount          = custVendTransParmData.parmAmount();
            fiscalDocumentCustVendTrans.DocumentType    = custVendTransParmData.parmDocumentType();
            fiscalDocumentCustVendTrans.QtyInstallments = custVendTransParmData.qtyInstallments() > 0 ? custVendTransParmData.qtyInstallments() : 1;
            fiscalDocumentCustVendTrans.insert();

            if (custVendTransParmData.qtyInstallments() > 0)
            {
                installmentsListEnumerator = custVendTransParmData.parmListOfInstallments().getEnumerator();

                while (installmentsListEnumerator.moveNext())
                {
                    installmentParmData = installmentsListEnumerator.current();

                    fiscalDocumentInstallment.clear();
                    fiscalDocumentInstallment.initValue();
                    fiscalDocumentInstallment.FiscalDocumentCustVendTrans   = fiscalDocumentCustVendTrans.RecId;
                    fiscalDocumentInstallment.Amount                        = installmentParmData.parmAmount();
                    fiscalDocumentInstallment.DueDate                       = installmentParmData.parmDueDate();
                    fiscalDocumentInstallment.InstallmentNumber             = installmentParmData.parmInstallmentNumber();
                    fiscalDocumentInstallment.insert();
                }
            }
            else
            {
                fiscalDocumentInstallment.clear();
                fiscalDocumentInstallment.initValue();
                fiscalDocumentInstallment.FiscalDocumentCustVendTrans   = fiscalDocumentCustVendTrans.RecId;
                fiscalDocumentInstallment.Amount                        = fiscalDocumentCustVendTrans.Amount;
                fiscalDocumentInstallment.DueDate                       = fiscalDocumentCustVendTrans.DueDate;
                fiscalDocumentInstallment.InstallmentNumber             = 1;
                fiscalDocumentInstallment.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the fiscal document header information and texts from the ParmData object to the database.
    /// </summary>
    protected void createFiscalDocument()
    {
        this.initFiscalDocument();

        if (!fiscalDocument.validateWrite())
        {
            throw Exception::Error;
        }

        fiscalDocument.insert();

        if (fiscalDocumentParmData.parmListOfTextsParmData())
        {
            FiscalDocumentTextPost_BR::copy(fiscalDocumentParmData.parmListOfTextsParmData(), fiscalDocument);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new fiscal document values.
    /// </summary>
    [Hookable]
    protected void initFiscalDocument()
    {
        FiscalDocDateWithTimeZoneHelper_BR fiscalDocDateWithTimeZoneHelper;

        fiscalDocument.initFromfiscalDocumentParmData(fiscalDocumentParmData);

        fiscalDocument.TotalDiscountAmount = this.getTotalDiscountAmount();
        this.initSuframaDiscountTotals();
        fiscalDocument.TotalGoodsAmount = this.getTotalGoodsAmount();
        fiscalDocument.TotalServicesAmount = this.getTotalServicesAmount();
        fiscalDocument.OperationDescription = this.getOperationDescription();
        fiscalDocument.Status = this.getDefaultStatus();

        if (!fiscalDocumentParmData.parmFiscalDocumentDateTime())
        {
            fiscalDocDateWithTimeZoneHelper = FiscalDocDateWithTimeZoneHelper_BR::newFromFiscalDocument(fiscalDocument);

            fiscalDocument.FiscalDocumentDateTime = fiscalDocDateWithTimeZoneHelper.getFiscalDocumentDateTime();
            fiscalDocument.FiscalDocumentDateTimeOffset = fiscalDocDateWithTimeZoneHelper.getFiscalDocumentDateTimeOffset();
        }
        else
        {
            fiscalDocument.FiscalDocumentDateTime = fiscalDocumentParmData.parmFiscalDocumentDateTime();
            fiscalDocument.FiscalDocumentDateTimeOffset = fiscalDocumentParmData.parmFiscalDocumentDateTimeOffset();
        }

        if (fiscalDocumentParmData.parmThirdPartyPostalAddress() != fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress())
        {
            fiscalDocument.DeliveryLogisticsPostalAddress = fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress();
        }

        if (fiscalDocumentParmData.hasServiceItems())
        {
            this.setCityWhereServicePerformed(fiscalDocument, fiscalDocumentParmData.parmServiceCodeOnDlvAddress());
        }

        if (fiscalDocumentParmData.parmThirdPartyCNPJCPF() != fiscalDocumentParmData.parmDeliveryCNPJCPF())
        {
            fiscalDocument.DeliveryCNPJCPF = fiscalDocumentParmData.parmDeliveryCNPJCPF();
        }
        if (fiscalDocumentParmData.parmThirdPartyIE() != fiscalDocumentParmData.parmDeliveryIE())
        {
            fiscalDocument.DeliveryIE = fiscalDocumentParmData.parmDeliveryIE();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocumentLineMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the given fiscal document miscellaneous charges from the ParmData object to the database for a given line.
    /// </summary>
    /// <param name="_fiscalDocumentLine">
    /// The fiscal document line to persist the miscellaneous charges to.
    /// </param>
    /// <param name="_listOfMiscCharges">
    /// The list of miscellaneous charges to be persisted.
    /// </param>
    protected void initFiscalDocumentLineMiscCharges(fiscalDocumentLine_BR _fiscalDocumentLine, List _listOfMiscCharges)
    {
        ListEnumerator                      miscChargesEnumerator;
        FiscalDocumentMiscChargeParmData_BR fiscalDocumentMiscChargeParmData;
        FiscalDocumentMiscCharge_BR         fiscalDocumentMiscCharge;

        miscChargesEnumerator = _listOfMiscCharges.getEnumerator();

        int chargenum = 1;

        while (miscChargesEnumerator.moveNext())
        {
            fiscalDocumentMiscChargeParmData = miscChargesEnumerator.current();

            fiscalDocumentMiscCharge.clear();
            fiscalDocumentMiscCharge.initValue();

            fiscalDocumentMiscCharge.FiscalDocumentLine = _fiscalDocumentLine.RecId;
            fiscalDocumentMiscCharge.Amount = abs(fiscalDocumentMiscChargeParmData.parmAmount());
            fiscalDocumentMiscCharge.ChargeNum = chargenum;
            fiscalDocumentMiscCharge.MarkupTrans = fiscalDocumentMiscChargeParmData.parmMarkupTrans();
            fiscalDocumentMiscCharge.Type = fiscalDocumentMiscChargeParmData.parmType();
            fiscalDocumentMiscCharge.insert();

            markupTransFiscalDocMiscCharge.insert(fiscalDocumentMiscCharge.MarkupTrans, fiscalDocumentMiscCharge.RecId);

            chargenum++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocumentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the fiscal document lines information, source transaction references, texts, taxes and miscellaneous charges from the
    /// ParmData object to the database.
    /// </summary>
    protected void initFiscalDocumentLines()
    {
        ListEnumerator                      linesEnumerator;
        FiscalDocumentLineParmData_BR       lineParmData;
        FiscalDocumentLine_BR               fiscalDocumentLine;

        ListEnumerator                      linesEnumeratorLineSource;
        FiscalDocumentLineSourceParmData_BR lineSourceParmData;
        FiscalDocumentLineSource_BR         fiscalDocumentLineSource;
        LineNum                             lineNum;

        systemSequence.suspendRecIds(tableNum(FiscalDocumentTaxTrans_BR));
        systemSequence.flushValues(tableNum(FiscalDocumentTaxTrans_BR));

        if (!fiscalDocumentParmData.parmLines())
        {
            return;
        }

        linesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();

        while (linesEnumerator.moveNext())
        {
            markupTransFiscalDocMiscCharge = new Map(Types::Int64, Types::Int64);

            lineParmData = linesEnumerator.current();

            lineNum++;

            setPrefix(
                fieldLabelValue(tableNum(FiscalDocumentLine_BR),
                                fieldNum(FiscalDocumentLine_BR, ItemId),
                                lineParmData.parmItemId()));

            fiscalDocumentLine.clear();
            fiscalDocumentLine.initValue();
            fiscalDocumentLine.LineNum              = LineNum;
            fiscalDocumentLine.FiscalDocument       = fiscalDocument.RecId;
            fiscalDocumentLine.LineDiscount         = lineParmData.parmLineDiscount();
            fiscalDocumentLine.UnitPrice            = lineParmData.parmUnitPrice();
            fiscalDocumentLine.Origin               = lineParmData.parmOrigin();
            fiscalDocumentLine.FCINumber            = lineParmData.parmFciNumber();
            fiscalDocumentLine.LineAmount           = lineParmData.parmLineAmount();
            fiscalDocumentLine.ItemId               = lineParmData.parmItemId();
            fiscalDocumentLine.RefRecId             = lineParmData.parmRefRecId();
            fiscalDocumentLine.FiscalClassification = lineParmData.parmFiscalClassification();
            fiscalDocumentLine.CFOP                 = lineParmData.parmCFOP();
            fiscalDocumentLine.RefTableId           = lineParmData.parmRefTableId();
            fiscalDocumentLine.Quantity             = lineParmData.parmQuantity();
            fiscalDocumentLine.Unit                 = lineParmData.parmUnit();
            fiscalDocumentLine.GrossWeight          = lineParmData.parmGrossWeight();
            fiscalDocumentLine.FinancialLedgerDimension = lineParmData.parmFinancialLedgerDimension();
            fiscalDocumentLine.ItemType             = lineParmData.parmItemType();
            fiscalDocumentLine.ServiceCode          = lineParmData.parmServiceCode();
            fiscalDocumentLine.ExceptionCode        = lineParmData.parmExceptionCode();
            fiscalDocumentLine.ScaleIndicator       = lineParmData.parmScaleIndicator();
            fiscalDocumentLine.CNPJ                 = lineParmData.parmCNPJ();
            fiscalDocumentLine.BenefitCode          = lineParmData.parmBenefitCode();
            fiscalDocumentLine.AdjustmentCode53     = lineParmData.parmAdjustmentCode53();
            fiscalDocumentLine.ObservationCode      = lineParmData.parmObservationCode();
            fiscalDocumentLine.InventTransId        = lineParmData.parmInventTransId();
            fiscalDocumentLine.NetWeight            = lineParmData.parmNetWeight();
            fiscalDocumentLine.Description          = lineParmData.parmDescription();
            fiscalDocumentLine.DIAddition           = lineParmData.parmDIAddition();
            fiscalDocumentLine.AssetId              = lineParmData.parmAssetId();
            fiscalDocumentLine.FreightNature        = lineParmData.parmFreightNature();
            fiscalDocumentLine.ApproximateTaxAmount = lineParmData.parmApproximateTaxAmount();
            fiscalDocumentLine.AccountingAmount     = lineParmData.parmAccountingAmount();
            fiscalDocumentLine.TaxSubstitutionCode  = TaxSubstitutionCodeTable_BR::getTaxSubstitutionCode(lineParmData.parmItemId(), lineParmData.parmFiscalClassification());

            fiscalDocumentLine.SuframaDiscountCOFINS = lineParmData.parmSuframaDiscountCOFINS();
            fiscalDocumentLine.SuframaDiscountICMS   = lineParmData.parmSuframaDiscountICMS();
            fiscalDocumentLine.SuframaDiscountPIS    = lineParmData.parmSuframaDiscountPIS();

            fiscalDocumentLine.ICMSSTCollectionPaymentMode = lineParmData.parmICMSSTCollectionPaymentMode();
            fiscalDocumentLine.ICMSSTCollectionPaymentNumber = lineParmData.parmICMSSTCollectionPaymentNumber();
            fiscalDocumentLine.RespWithholdingICMSST = lineParmData.parmRespWithholdingICMSST();
            fiscalDocumentLine.NfeVbcstretVicmsstretTagsReported = lineParmData.parmNfeVbcstretVicmsstretTagsReported();

            if (BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::BR00095]))
            {
                fiscalDocumentLine.ServiceTaxationTypeValue = lineParmData.parmServiceTaxationTypeValue();
            }

            if (!fiscalDocumentLine.validateWrite())
            {
                hasErrorsInFiscalDocumentLine = true;
                continue;
            }

            fiscalDocumentLine.insert();

            linesEnumeratorLineSource = lineParmData.parmListOfSourceRecords().getEnumerator();

            if (lineParmData.parmListOfSourceRecords().elements())
            {
                while (linesEnumeratorLineSource.moveNext())
                {
                    lineSourceParmData = linesEnumeratorLineSource.current();

                    fiscalDocumentLineSource.clear();
                    fiscalDocumentLineSource.initValue();
                    fiscalDocumentLineSource.FiscalDocumentLine         = fiscalDocumentLine.RecId;
                    fiscalDocumentLineSource.SourceDocumentLineTableId  = lineSourceParmData.parmRefTableId();
                    fiscalDocumentLineSource.SourceDocumentLineRecId    = lineSourceParmData.parmRefRecId();
                    fiscalDocumentLineSource.InventTransId              = lineSourceParmData.parmInventTransId();
                    fiscalDocumentLineSource.insert();
                }
            }
            else
            {
                fiscalDocumentLineSource.clear();
                fiscalDocumentLineSource.initValue();
                fiscalDocumentLineSource.FiscalDocumentLine         = fiscalDocumentLine.RecId;
                fiscalDocumentLineSource.SourceDocumentLineTableId  = lineParmData.parmRefTableId();
                fiscalDocumentLineSource.SourceDocumentLineRecId    = lineParmData.parmRefRecId();
                fiscalDocumentLineSource.InventTransId              = lineParmData.parmInventTransId();
                fiscalDocumentLineSource.insert();
            }

            FiscalDocumentTextPost_BR::copy(lineParmData.parmListOfTextsParmData(), fiscalDocumentLine);

            this.initFiscalDocumentLineMiscCharges(fiscalDocumentLine, lineParmData.parmListOfMiscCharges());

            this.initFiscalDocumentLineTaxes(fiscalDocumentLine, lineParmData.parmListOfTaxes());
        }

        fiscalDocumentLineTaxesRecordList.insertDatabase();
        fiscalDocTaxTransSourceRecordList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(FiscalDocumentTaxTrans_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocumentLineTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the given fiscal document taxes from the ParmData object to the database for a given line.
    /// </summary>
    /// <param name="_fiscalDocumentLine">
    /// The fiscal document line to persist the taxes to.
    /// </param>
    /// <param name="_listOfTaxes">
    /// The list of taxes to be persisted.
    /// </param>
    protected void initFiscalDocumentLineTaxes(fiscalDocumentLine_BR _fiscalDocumentLine, List _listOfTaxes)
    {
        ListEnumerator                              taxesEnumerator;
        FiscalDocumentTaxTransParmData_BR           fiscalDocumentTaxParmData;
        FiscalDocumentTaxTrans_BR                   fiscalDocumentTaxTrans;
        FiscalDocumentTaxTransOutgoingICMSDif_BR    fiscalDocumentTaxICMSDif;
        CfopDirectionCheck_BR                       cfopDirectionCheck = CfopDirectionCheck_BR::construct(_fiscalDocumentLine.CFOP);

        taxesEnumerator = _listOfTaxes.getEnumerator();
        while (taxesEnumerator.moveNext())
        {
            fiscalDocumentTaxParmData = taxesEnumerator.current();

            fiscalDocumentTaxTrans.clear();
            fiscalDocumentTaxTrans.initValue();

            systemSequence.suspendRecIds(fiscalDocumentTaxTrans.TableId);
            fiscalDocumentTaxTrans.RecId = systemSequence.reserveValues(1, fiscalDocumentTaxTrans.TableId);

            fiscalDocumentTaxTrans.TaxTrans                     = fiscalDocumentTaxParmData.parmTaxTrans();
            fiscalDocumentTaxTrans.Type                         = fiscalDocumentTaxParmData.parmType();
            fiscalDocumentTaxTrans.TaxationCode                 = fiscalDocumentTaxParmData.parmTaxationCode();
            fiscalDocumentTaxTrans.TaxationOrigin               = fiscalDocumentTaxParmData.parmTaxationOrigin();
            fiscalDocumentTaxTrans.FiscalValue                  = fiscalDocumentTaxParmData.parmFiscalValue();
            fiscalDocumentTaxTrans.RetainedTax                  = fiscalDocumentTaxParmData.parmRetainedTax();
            fiscalDocumentTaxTrans.IncludedTax                  = fiscalDocumentTaxParmData.parmIncludedTax();
            fiscalDocumentTaxTrans.TaxExemptCode                = fiscalDocumentTaxParmData.parmTaxExemptCode();

            fiscalDocumentTaxTrans.TaxBaseAmount                = abs(fiscalDocumentTaxParmData.parmTaxBaseAmount());
            fiscalDocumentTaxTrans.TaxValue                     = abs(fiscalDocumentTaxParmData.parmTaxValue());
            fiscalDocumentTaxTrans.TaxAmount                    = abs(fiscalDocumentTaxParmData.parmTaxAmount());

            fiscalDocumentTaxTrans.TaxBaseAmountOther           = abs(fiscalDocumentTaxParmData.parmTaxBaseAmountOther());
            fiscalDocumentTaxTrans.TaxAmountOther               = abs(fiscalDocumentTaxParmData.parmTaxAmountOther());

            fiscalDocumentTaxTrans.TaxBaseAmountExempt          = abs(fiscalDocumentTaxParmData.parmTaxBaseAmountExempt());

            fiscalDocumentTaxTrans.TaxSubstitutionMarkupPct     = abs(fiscalDocumentTaxParmData.parmTaxSubstitutionMarkupPct());
            fiscalDocumentTaxTrans.TaxReductionPct              = abs(fiscalDocumentTaxParmData.parmTaxReductionPct());
            fiscalDocumentTaxTrans.TaxNonRecoverablePct         = abs(fiscalDocumentTaxParmData.parmTaxNonRecoverablePct());

            fiscalDocumentTaxTrans.FiscalDocumentLine           = _fiscalDocumentLine.RecId;

            if (fiscalDocumentTaxParmData.getTaxTransSourceSet().elements())
            {
                this.initTaxTransSource(_fiscalDocumentLine.RecId, fiscalDocumentTaxTrans.RecId, fiscalDocumentTaxParmData);
            }

            // For dual base ICMS-Diff tax, fiscal document will show the delta tax value.
            fiscalDocumentTaxTrans.DisplayTaxValue = fiscalDocumentTaxTrans.TaxValue;
            if (fiscalDocumentTaxTrans.TaxTrans
                && fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSDiff)
            {
                TaxTrans taxTrans = TaxTrans::findByRecId(fiscalDocumentTaxTrans.TaxTrans);
                fiscalDocumentTaxTrans.DisplayTaxValue = taxTrans.TaxValue;
            }

            // insert ICMS Diff record
            if (fiscalDocumentTaxParmData.parmType() == TaxType_BR::ICMSDiff
                && cfopDirectionCheck.isOtherState()
                && fiscalDocument.FinalUser
                && !fiscalDocument.ThirdPartyICMSContributor
                && fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::OwnEstablishment
                && fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Customer)
            {
                fiscalDocumentTaxICMSDif.clear();
                fiscalDocumentTaxICMSDif.FiscalDocument             = fiscalDocument.RecId;
                fiscalDocumentTaxICMSDif.FiscalDocumentLine         = _fiscalDocumentLine.RecId;
                fiscalDocumentTaxICMSDif.FiscalDocumentTaxTrans     = fiscalDocumentTaxTrans.RecId;
                fiscalDocumentTaxICMSDif.ICMSDifRecipientTaxAmount  = abs(fiscalDocumentTaxParmData.parmICMSDifRecipientTaxAmount());
                fiscalDocumentTaxICMSDif.ICMSDifIssuerTaxAmount     = abs(fiscalDocumentTaxParmData.parmICMSDifIssuerTaxAmount());
                fiscalDocumentTaxICMSDif.FiscalDocumentDate         = fiscalDocument.FiscalDocumentDate;

                fiscalDocumentTaxICMSDif.insert();
            }

            this.initFiscalDocumentLineTaxesPovertyFund(fiscalDocumentTaxParmData, fiscalDocumentTaxTrans.RecId);
            
            if (BrazilParameters::find().ICMSPresumedTax == NoYes::Yes)
            {
                this.createFiscalDocumentLinePresumedTax(fiscalDocumentTaxParmData, fiscalDocumentTaxTrans.RecId);
            }

            fiscalDocumentLineTaxesRecordList.add(fiscalDocumentTaxTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocumentLineTaxesPovertyFund</Name>
				<Source><![CDATA[
    private void initFiscalDocumentLineTaxesPovertyFund(FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxParmData, RecId _fiscalDocumentTaxTransRecId)
    {
        FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxPovertyFund;

        if (!_fiscalDocumentTaxParmData.parmTaxPovertyFundAmount() && !_fiscalDocumentTaxParmData.parmTaxPovertyFundPercentage())
        {
            return;
        }

        fiscalDocumentTaxPovertyFund.clear();
        fiscalDocumentTaxPovertyFund.FiscalDocumentTaxTrans_BR  = _fiscalDocumentTaxTransRecId;
        fiscalDocumentTaxPovertyFund.TaxPovertyFundPercentage   = _fiscalDocumentTaxParmData.parmTaxPovertyFundPercentage();
        fiscalDocumentTaxPovertyFund.TaxPovertyFundAmount       = _fiscalDocumentTaxParmData.parmTaxPovertyFundAmount();
        fiscalDocumentTaxPovertyFund.TaxPovertyFundBaseAmount   = _fiscalDocumentTaxParmData.parmTaxPovertyFundBaseAmount();
    
        fiscalDocumentTaxPovertyFund.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initThirdPartySalesDigitalPlatformCardPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new card payments from the representation of a fiscal document in memory.
    /// </summary>
    protected void initThirdPartySalesDigitalPlatformCardPayments()
    {
        //Extend this method in case of inegration with third party sales digital platform.
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocumentLinePresumedTax</Name>
				<Source><![CDATA[
    private void createFiscalDocumentLinePresumedTax(FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxParmData, RecId _fiscalDocumentTaxTransRecId)
    {
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed;

        if (_fiscalDocumentTaxParmData.parmPresumedTaxAmountPerInvUnit())
        {
            fiscalDocumentTaxTransPresumed.clear();
            fiscalDocumentTaxTransPresumed.FiscalDocumentTaxTrans_BR = _fiscalDocumentTaxTransRecId;
            fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit = _fiscalDocumentTaxParmData.parmPresumedTaxAmountPerInvUnit();
            fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmountPerInvUnit = _fiscalDocumentTaxParmData.parmPresumedTaxBaseAmountPerInvUnit();
            fiscalDocumentTaxTransPresumed.PresumedvICMSSubstituto = _fiscalDocumentTaxParmData.parmPresumedvICMSSubstituto();
			fiscalDocumentTaxTransPresumed.PresumedTaxAmount = _fiscalDocumentTaxParmData.parmPresumedTaxAmount();
            fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmount = _fiscalDocumentTaxParmData.parmPresumedTaxBaseAmount();
            fiscalDocumentTaxTransPresumed.PresumedTaxPercentage = _fiscalDocumentTaxParmData.parmPresumedTaxPercentage();
            fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit = _fiscalDocumentTaxParmData.parmPresumedFCPTaxAmountPerInvUnit();
            fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmountPerInvUnit = _fiscalDocumentTaxParmData.parmPresumedFCPTaxBaseAmountPerInvUnit();
            fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmount = _fiscalDocumentTaxParmData.parmPresumedFCPTaxAmount();
            fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmount = _fiscalDocumentTaxParmData.parmPresumedFCPTaxBaseAmount();
            fiscalDocumentTaxTransPresumed.PresumedFCPTaxPercentage = _fiscalDocumentTaxParmData.parmPresumedFCPTaxPercentage();
    
            fiscalDocumentTaxTransPresumed.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransSource</Name>
				<Source><![CDATA[
    private void initTaxTransSource(RecId _fiscalDocumentLineRecId, RecId _fiscalDocumentTaxTrans, FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxParmData)
    {
        var enumerator = _fiscalDocumentTaxParmData.getTaxTransSourceSet().getEnumerator();

        while (enumerator.moveNext())
        {
            var taxTransRecId = enumerator.current();

            FiscalDocumentTaxTransSource_BR fiscalDocumentTaxTransSource;
            fiscalDocumentTaxTransSource.FiscalDocumentTaxTrans_BR = _fiscalDocumentTaxTrans;
            fiscalDocumentTaxTransSource.TaxTrans  = taxTransRecId;

            var markupTransRecId = FiscalDocumentTaxTransSource_BR::getMarkupTransRecId(taxTransRecId);
            if (markupTransRecId && markupTransFiscalDocMiscCharge.exists(markupTransRecId))
            {
                fiscalDocumentTaxTransSource.FiscalDocumentMiscCharge_BR  = markupTransFiscalDocMiscCharge.lookup(markupTransRecId);
            }
            else
            {
                fiscalDocumentTaxTransSource.FiscalDocumentLine_BR = _fiscalDocumentLineRecId;
            }

            fiscalDocTaxTransSourceRecordList.add(fiscalDocumentTaxTransSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the referenced fiscal documents from the ParmData objects to the database.
    /// </summary>
    protected void initFiscalReference()
    {
        FiscalDocumentReferencedParmData_BR     referencedParmData;
        FiscalDocumentReferenced_BR             fiscalDocumentReferenced;
        ListEnumerator                          enumerator;

        if (!fiscalDocumentParmData.parmListOfFiscalReference())
        {
            return;
        }

        enumerator = fiscalDocumentParmData.parmListOfFiscalReference().getEnumerator();
        while (enumerator.moveNext())
        {
            referencedParmData = enumerator.current();

            fiscalDocumentReferenced.clear();
            fiscalDocumentReferenced.initValue();
            fiscalDocumentReferenced.FiscalDocument             = fiscalDocument.RecId;
            fiscalDocumentReferenced.FiscalDocumentSourceText   = referencedParmData.parmFiscalDocumentSourceText();

            if (referencedParmData.parmSourceTableId() == tableNum(ExternalFiscalDocument_BR))
            {
                fiscalDocumentReferenced.ExternalReferencedFiscalDocument = referencedParmData.parmSourceRecId();
            }
            else if (referencedParmData.parmSourceTableId() == tableNum(FiscalDocument_BR))
            {
                fiscalDocumentReferenced.ReferencedFiscalDocument = referencedParmData.parmSourceRecId();
            }
            else
            {
                Error::wrongUseOfFunction(funcName());
            }

            fiscalDocumentReferenced.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentStat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the shipment parcels from the ParmData objects to the database.
    /// </summary>
    protected void initShipmentStat()
    {
        FiscalDocumentShipmentStatParmData_BR   shipmentStatParmData;
        FiscalDocumentShipmentStat_BR           fiscalDocumentShipmentStat;
        ListEnumerator                          shipmentStatListEnumerator;

        if (!fiscalDocumentParmData.parmListOfShipmentStat())
        {
            return;
        }

        shipmentStatListEnumerator = fiscalDocumentParmData.parmListOfShipmentStat().getEnumerator();
        while (shipmentStatListEnumerator.moveNext())
        {
            shipmentStatParmData = shipmentStatListEnumerator.current();

            fiscalDocumentShipmentStat.clear();
            fiscalDocumentShipmentStat.initValue();
            fiscalDocumentShipmentStat.FiscalDocument   = fiscalDocument.RecId;
            fiscalDocumentShipmentStat.NetWeight        = shipmentStatParmData.parmNetWeight();
            fiscalDocumentShipmentStat.GrossWeight      = shipmentStatParmData.parmGrossWeight();
            fiscalDocumentShipmentStat.VolumeQuantity   = shipmentStatParmData.parmVolumeQuantity();
            fiscalDocumentShipmentStat.VolumeType       = shipmentStatParmData.parmVolumeType();
            fiscalDocumentShipmentStat.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of <c>FiscalDocumentPost_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c>. This is the fiscal document object model that will be persisted by this posting class.
    /// </param>
    public void new(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        systemSequence = new systemSequence();

        fiscalDocumentParmData = _fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This is the method that actually starts the Fiscal Document posting process. It will verify whether there are any validation problems with
    ///     the ParmData object model passed in the constructor and, if there is no validation problems, it will persist the ParmData object model
    ///     into the Fiscal Document tables.
    /// </summary>
    public void run()
    {
        if (!this.canBePosted())
        {
            throw Exception::Error;
        }

        ttsBegin;

        this.write();
        this.fiscalDocumentWritten(fiscalDocument);

        if (fiscalDocumentParmData.isEFDocumentCity())
        {
            EFDocumentCityCreator_BR::construct().create(fiscalDocument);
        }

        if (fiscalDocumentParmData.shouldGenerateElectronicDocument())
        {
            this.updateElectronicFiscalDocument();
            EFDocEventHandler_BR::construct().post(fiscalDocument);
        }

        if (fiscalDocumentParmData.couldBeReferencedByEfdocumentReceivedXml())
        {
            EFDocumentReceivedXML_BR::updateReferenceToFiscalDocument(fiscalDocument);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCityWhereServicePerformed</Name>
				<Source><![CDATA[
    private void setCityWhereServicePerformed(FiscalDocument_BR _fiscalDocument, TaxServiceCodeOnDlvAddress_BR _serviceCodeOnDlvAddress)
    {
        if (_serviceCodeOnDlvAddress && _fiscalDocument.DeliveryLogisticsPostalAddress)
        {
            _fiscalDocument.CityWhereServicePerformed = LogisticsAddressCity::findLogisticsAddressMap(LogisticsPostalAddress::findRecId(fiscalDocument.DeliveryLogisticsPostalAddress)).RecId;
        }
        else if (_serviceCodeOnDlvAddress)
        {
            _fiscalDocument.CityWhereServicePerformed = LogisticsAddressCity::findLogisticsAddressMap(LogisticsPostalAddress::findRecId(fiscalDocument.ThirdPartyPostalAddress)).RecId;
        }
        else
        {
            _fiscalDocument.CityWhereServicePerformed = LogisticsAddressCity::findLogisticsAddressMap(LogisticsPostalAddress::findRecId(fiscalDocument.FiscalEstablishmentPostalAddress)).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateElectronicFiscalDocument</Name>
				<Source><![CDATA[
    private void updateElectronicFiscalDocument()
    {
        fiscalDocument.NumericCode = this.generateNumericCode();
        fiscalDocument.AccessKey = this.generateAccessKey();
        fiscalDocument.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateImportedEFDocumentCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates existing <c>FiscalDocument_BR</c> and <c>EFDocumentCity_BR</c> records from return NF-e services file.
    /// </summary>
    /// <param name="_returnedFiscalDocument">
    /// A <c>FiscalDocument_BR</c> record containing the data imported from file.
    /// </param>
    /// <param name="_returnedEFDocumentCity">
    /// A <c>EFDocumentCity_BR</c> record containing the data imported from file.
    /// </param>
    /// <returns>
    /// A <c>RPSImportResult_BR</c> value with the result of the update.
    /// </returns>
    public RPSImportResult_BR updateImportedEFDocumentCity( FiscalDocument_BR   _returnedFiscalDocument,
                                                            EFDocumentCity_BR   _returnedEFDocumentCity)
    {
        FiscalDocumentGeneralValidations_BR fiscalDocumentGeneralValidations    = new FiscalDocumentGeneralValidations_BR();
        FiscalDocument_BR                   localFiscalDocument;
        EFDocumentCity_BR                   localEFDocumentCity;

        fiscalDocumentParmData.parmFiscalDocumentNumber(_returnedFiscalDocument.FiscalDocumentNumber);
        fiscalDocumentParmData.parmFiscalDocumentDate(_returnedFiscalDocument.FiscalDocumentDate);
        fiscalDocumentGeneralValidations.parmFiscalDocumentParmData(fiscalDocumentParmData);

        while select forUpdate localFiscalDocument
            where   localFiscalDocument.FiscalDocumentSeries    == _returnedFiscalDocument.FiscalDocumentSeries
            join forUpdate localEFDocumentCity
                where   localEFDocumentCity.RPSNumber               like '*' + _returnedEFDocumentCity.rpsNumberWithoutPaddingZeros()
                    &&  localEFDocumentCity.RPSDate                 == _returnedEFDocumentCity.RPSDate
                    &&  localEFDocumentCity.FiscalDocument_BR       == localFiscalDocument.RecId
        {
            // This validation make sure that the register selected using "like" statement regard all digits significant.
            if (localEFDocumentCity.rpsNumberWithoutPaddingZeros() == _returnedEFDocumentCity.rpsNumberWithoutPaddingZeros())
            {
                break;
            }
        }

        if (!localFiscalDocument || !localEFDocumentCity)
        {
            return RPSImportResult_BR::NotFound;
        }

        // use the _returnFiscalDocument buffer to return these values back to the called method
        _returnedFiscalDocument.FiscalDocumentAccountNum  = localFiscalDocument.FiscalDocumentAccountNum;
        _returnedFiscalDocument.TotalServicesAmount       = localFiscalDocument.TotalServicesAmount;

        if (localEFDocumentCity.RPSImportDate)
        {
            return RPSImportResult_BR::AlreadyImported;
        }

        if (!this.validateCityFiscalDocument(fiscalDocumentGeneralValidations))
        {
            return RPSImportResult_BR::Invalid;
        }

        localFiscalDocument.FiscalDocumentNumber = _returnedFiscalDocument.FiscalDocumentNumber;
        localFiscalDocument.FiscalDocumentDate   = _returnedFiscalDocument.FiscalDocumentDate;
        localFiscalDocument.Status               = FiscalDocumentStatus_BR::Approved;
        localFiscalDocument.update();

        localEFDocumentCity.RPSValidationNumber  = _returnedEFDocumentCity.RPSValidationNumber;
        localEFDocumentCity.RPSImportDate        = datetobeginUtcDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getUserPreferredTimeZone());
        localEFDocumentCity.update();

        return RPSImportResult_BR::Imported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCityFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the city fiscal document.
    /// </summary>
    /// <param name="_fiscalDocumentGeneralValidations">
    /// The instance of <c>FiscalDocumentGeneralValidations_BR</c> with validations to be performed
    /// </param>
    /// <returns>
    /// True if fiscal document is valid, otherwise false
    /// </returns>
    protected boolean validateCityFiscalDocument(FiscalDocumentGeneralValidations_BR _fiscalDocumentGeneralValidations)
    {
        boolean ret = true;

        if (   !_fiscalDocumentGeneralValidations.header_FiscalDocumentNumberFormat()
            || !_fiscalDocumentGeneralValidations.header_FiscalDocumentDate())
        {
            ret = false;
        }
        if (fiscalDocumentParmData.parmFiscalDocumentDate() > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            ret = checkFailed(strFmt("@SYS4000564",fiscalDocumentParmData.parmFiscalDocumentNumber()));
        }
        if (!fiscalDocumentParmData.parmFiscalDocumentNumber())
        {
            ret = checkFailed("@SYS4000568");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the methods that persist the fiscal document from the ParmData objects to the database.
    /// </summary>
    protected void write()
    {
        this.createFiscalDocument();
        this.initCustVendTrans();
        this.initShipmentStat();
        this.initFiscalDocumentLines();
        this.initFiscalDocumentPaymentTrans();

        if (fiscalDocument.ThirdPartySalesDigitalPlatform == NoYes::Yes
            && FiscalDocumentHelper::checkIfThirdPartySalesDigitalPlatformApplicable(
                fiscalDocument.Direction,
                FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment)
                    .checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v100),
                fiscalDocument.PresenceType))
        {
            this.initThirdPartySalesDigitalPlatformCardPayments();
        }

        if (hasErrorsInFiscalDocumentLine || hasErrorsInFiscalDocumentPaymentTrans)
        {
            throw Exception::Error;
        }

        this.initFiscalReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel or reverse a fiscal document.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// Fiscal document to be cancelled
    /// </param>
    /// <param name="_cancelVoucherId">
    /// ID of the voucher the reverses the posting transaction; optional.
    /// </param>
    /// <param name="_cancelAccountingDate">
    /// Accounting date of the reversal transaction; optional.
    /// </param>
    /// <param name="_cancelInventoryVoucherId">
    /// ID of the voucher the reverses the inventory transaction; optional.
    /// </param>
    /// <param name="_cancelReasonComment">
    /// The cancel reason of the reversal transaction; optional.
    /// </param>
    /// <remarks>
    /// Fiscal document will be canceled when it was issued by the fiscal establishment itself,
    /// meaning that the fiscal document is no longer valid; it may be reported to the goverment as such.
    /// It will be reversed when issued by a third party, and can be corrected later. In this case it is not
    /// reported to the government as it doens't have fiscal validity, and a new fiscal document can be posted
    /// with the same identification.
    /// </remarks>
    public static void cancelFiscalDocument(FiscalDocument_BR _fiscalDocument,
                                            Voucher           _cancelVoucherId = '',
                                            AccountingDate    _cancelAccountingDate = dateNull(),
                                            Voucher           _cancelInventoryVoucherId = '',
                                            ReasonComment     _cancelReasonComment = '')
    {
        Debug::assert(_fiscalDocument != null);

        _fiscalDocument.selectForUpdate(true);

        if (EFDocument_BR::exist(_fiscalDocument.RecId))
        {
            if (_fiscalDocument.isElectronic())
            {
                // When Nfe, Reason comment must be set before reversal so that it can be generated by the xml
                _fiscalDocument.CancelReasonComment = _cancelReasonComment;

                EFDocEventHandler_BR::construct().reverse(_fiscalDocument);

                _fiscalDocument.reread();
            }
            else if (_fiscalDocument.isElectronicConsumerFiscalDoc())
            {
                _fiscalDocument.Status  = FiscalDocumentStatus_BR::Cancelled;
            }
        }
        else
        {
            if (_fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty)
            {
                // We don't receive cancelled fiscal documents issued by third-parties, but it
                // may be the case that the document was entered with wrong data and should be fixed.
                _fiscalDocument.Status = FiscalDocumentStatus_BR::Reversed;
            }
            else
            {
                _fiscalDocument.Status = FiscalDocumentStatus_BR::Cancelled;
            }
        }

        _fiscalDocument.CancelAccountingDate        = _cancelAccountingDate;
        _fiscalDocument.CancelVoucherId             = _cancelVoucherId;
        _fiscalDocument.CancelInventoryVoucherId    = _cancelInventoryVoucherId;
        _fiscalDocument.CancelReasonComment         = _cancelReasonComment;
        _fiscalDocument.update();

        EFDocumentCity_BR efDocumentCity = EFDocumentCity_BR::findByFiscalDocumentRef(_fiscalDocument.RecId, true);

        if (efDocumentCity)
        {
            efDocumentCity.RPSStatus = RPSStatus_BR::RPSCancelled;
            efDocumentCity.update();
        }

        if (_fiscalDocument.canBeReferencedByEfdocumentReceivedXml())
        {
            EFDocumentReceivedXML_BR::removeReferenceToFiscalDocument(_fiscalDocument.AccessKey);
        }

        _fiscalDocument.activateSPEDReinfEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate right after writing to a fiscal document during the post
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The <c>FiscalDocument_BR</c> record just written to.
    /// </param>
    delegate void fiscalDocumentWritten(FiscalDocument_BR _fiscalDocument)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocumentPaymentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the fiscal document payment transaction information from the ParmData object to the database.
    /// </summary>
    private void initFiscalDocumentPaymentTrans()
    {
        ListEnumerator                          paymentTransEnumerator;
        FiscalDocumentPaymentTransParmData_BR   paymentTransParmData;
        FiscalDocumentPaymentTrans_BR           fiscalDocumentPaymentTrans;

        if (!fiscalDocumentParmData.parmPaymentTrans())
        {
            return;
        }

        paymentTransEnumerator = fiscalDocumentParmData.parmPaymentTrans().getEnumerator();

        while (paymentTransEnumerator.moveNext())
        {
            paymentTransParmData = paymentTransEnumerator.current();

            setPrefix(
                fieldLabelValue(tableNum(FiscalDocumentPaymentTrans_BR),
                                fieldNum(FiscalDocumentPaymentTrans_BR, LineNum),
                                paymentTransParmData.parmLineNumber()));

            fiscalDocumentPaymentTrans.clear();

            fiscalDocumentPaymentTrans.Amount                   = paymentTransParmData.parmAmount();
            fiscalDocumentPaymentTrans.CardAuthorizationNumber  = paymentTransParmData.parmCardAuthorizationNumber();
            fiscalDocumentPaymentTrans.CardLogo                 = paymentTransParmData.parmCardLogo();
            fiscalDocumentPaymentTrans.CardProcessorCNPJCPF     = paymentTransParmData.parmCardProcessorCNPJCPF();
            fiscalDocumentPaymentTrans.FiscalDocument           = fiscalDocument.RecId;
            fiscalDocumentPaymentTrans.LineNum                  = paymentTransParmData.parmLineNumber();
            fiscalDocumentPaymentTrans.PaymentType              = paymentTransParmData.parmPaymentType();
            fiscalDocumentPaymentTrans.TenderTypeId             = paymentTransParmData.parmTenderTypeId();

            if (!fiscalDocumentPaymentTrans.validateWrite())
            {
                hasErrorsInFiscalDocumentPaymentTrans = true;
                continue;
            }

            fiscalDocumentPaymentTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSuframaDiscountTotals</Name>
				<Source><![CDATA[
    private void initSuframaDiscountTotals()
    {
        ListEnumerator                  linesEnumerator;
        FiscalDocumentLineParmData_BR   line;

        linesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();

        while (linesEnumerator.moveNext())
        {
            line = linesEnumerator.current();

            fiscalDocument.TotalSuframaDiscountCOFINSAmount += line.parmSuframaDiscountCOFINS();
            fiscalDocument.TotalSuframaDiscountICMSAmount   += line.parmSuframaDiscountICMS();
            fiscalDocument.TotalSuframaDiscountPISAmount    += line.parmSuframaDiscountPIS();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>