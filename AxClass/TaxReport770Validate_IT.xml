<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport770Validate_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReport770Validate_IT extends RunBase
{
    TaxReport770Table_IT    taxReport770Table;
    TaxReport770Id_IT       reportId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInfoLogErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if <c>addToInfolog()</c> should create errors, or warnings instead.
    /// </summary>
    /// <returns>true if errors should be shown; false if warnings should be shown instead.</returns>
    protected boolean addToInfoLogErrors()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a message to the infolog.
    /// </summary>
    /// <param name = "_message">A message to show in the infolog.</param>
    /// <param name = "_contorlName">A control name for setting up a reference link from the infolog.</param>
    /// <param name = "_vendTable">A vendor table reference.</param>
    private void addToInfoLog(SysInfoLogStr _message, IdentifierName _contorlName, VendTable _vendTable)
    {
        SysInfoAction_Formrun   infoActionForm;

        infoActionForm = SysInfoAction_Formrun::newFormnameControlname(formStr(VendTable), _contorlName);
        infoActionForm.parmCallerBuffer(_vendTable);

        if (this.addToInfoLogErrors())
        {
            error(_message, '', infoActionForm);
        }
        else
        {
            warning(_message, '', infoActionForm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        reportId    = taxReport770Table.ReportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReport770Table</Name>
				<Source><![CDATA[
    public TaxReport770Table_IT parmTaxReport770Table(TaxReport770Table_IT _taxReport770Table = taxReport770Table)
    {
        taxReport770Table = _taxReport770Table;
        return taxReport770Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        boolean flag;
        this.initValue();
        flag = this.validateCompanyInfo();
        flag = flag & this.validateVendors();
        flag = flag & this.validateVendorTransactions();

        if (flag)
        {
            info("@SYS61076");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompanyInfo</Name>
				<Source><![CDATA[
    public boolean validateCompanyInfo()
    {
        boolean                 ret;
        CompanyInfo             companyInfo = CompanyInfo::find();
        int                     legalNature;
        DirPerson               dirPerson;

        ret = true;

        if (! companyInfo.Name)
        {
            ret = checkFailed("@SYS61077");
        }

        if (strLen(companyInfo.FiscalCode_IT) < 11)
        {
            ret = checkFailed("@SYS61079");
        }

        legalNature = enum2int(companyInfo.LegalNature_IT);

        if (! legalNature)
        {
            ret = checkFailed("@SYS61080");
        }

        if (taxReport770Table.LegalAddrChanged && year(taxReport770Table.LegalAddrChangeDate) != (taxReport770Table.Year - 1))
        {
            ret = checkFailed(strFmt("@SYS61081", int2str(taxReport770Table.Year - 1)));
        }

        if (taxReport770Table.FiscalAddrChanged && year(taxReport770Table.FiscalAddrChangeDate) != (taxReport770Table.Year - 1))
        {
            ret = checkFailed(strFmt("@SYS61082", int2str(taxReport770Table.Year - 1)));
        }

        if ( (taxReport770Table.DeclarerType == DeclarerType_IT::OtherLegalEntity
              ||taxReport770Table.DeclarerType == DeclarerType_IT::CAF)
             && taxReport770Table.DeclarerFiscalCode == '')
        {
            ret = checkFailed("@SYS61083");
        }
        if (taxReport770Table.Signatory)
        {
            setPrefix("@SYS344420");
            setPrefix(HcmWorker::find(taxReport770Table.Signatory).name());
            dirPerson = DirPerson::find(HcmWorker::find(taxReport770Table.Signatory).Person);
            if (HcmPersonPrivateDetails::findByPerson(dirPerson.RecId).BirthDate == dateNull())
            {
                ret = checkFailed("@SYS344724" + "@SYS78855");
            }
            if (HcmPersonPrivateDetails::findByPerson(dirPerson.RecId).Gender == HcmPersonGender::None)
            {
                ret = checkFailed("@SYS344724" + "@SYS9284");
            }
        }
        else
        {
            ret = checkFailed(strFmt("@SYS117590", "@SYS344420"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendors</Name>
				<Source><![CDATA[
    public boolean validateVendors()
    {
        TaxReport770Trans_IT    reportTrans;
        VendTable               vendTable;
        DirPerson               dirPerson;
        DirPersonName           dirPersonName;
        boolean                 ret;
        DirPartyRecId           partyRecId;

        ret = true;

        while select * from vendTable order by AccountNum
            exists join reportTrans
                where vendTable.AccountNum == reportTrans.VendAccount
                    && reportTrans.ReportId == reportId

        {
            setPrefix(strFmt("@SYS82246", vendTable.AccountNum));

            if (vendTable.partyType() == DirPartyType::Person)
            {
                partyRecId = vendTable.Party;
            }
            else
            {
                partyRecId = ContactPerson::find(vendTable.ContactPersonId).Party;
            }
            dirPerson       = DirPerson::find(partyRecId);
            dirPersonName   = DirPersonName::find(partyRecId);

            if (! dirPersonName.FirstName)
            {
                this.addToInfoLog("@SYS61084",
                                    identifierStr(ContactPersonId),
                                    vendTable);
                ret = false;
            }

            if (! dirPersonName.LastName)
            {
                this.addToInfoLog("@SYS61085",
                                    identifierStr(ContactPersonId),
                                    vendTable);
                ret = false;
            }

            if (dirPerson.Gender == Gender::Unknown)
            {
                this.addToInfoLog("@SYS61086",
                                    identifierStr(ContactPersonId),
                                    vendTable);
                ret = false;
            }

            if (!vendTable.BirthPlace)
            {
                this.addToInfoLog("@SYS61087",
                                identifierStr(Contactinfo_BirthPlace),
                                vendTable);

                ret = false;
            }

            if (vendTable.partyType() == DirPartyType::Person && ! vendTable.birthDate())
            {
                this.addToInfoLog("@SYS61088",
                                identifierStr(Contactinfo_BirthDate),
                                vendTable);

                ret = false;
            }

            if (! vendTable.FiscalCode)
            {
                this.addToInfoLog("@SYS61090",
                                identifierStr(SalesTax_FiscalCode),
                                vendTable);

                ret = false;
            }

            if (! vendTable.BirthCountyCode_IT)
            {
                this.addToInfoLog("@SYS61091",
                                identifierStr(Contactinfo_BirthCountyCode_IT),
                                vendTable);

                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendorTransactions</Name>
				<Source><![CDATA[
    public boolean validateVendorTransactions()
    {
        TaxReport770TaxPaymentsV2_IT  taxReport770TaxPayments;
        date                          firstDateOfYear;
        boolean                       ret;

        ret = true;

        firstDateOfYear = mkDate(1, 1, taxReport770Table.Year - 1);

        while select VendAccount, PaymentDate from taxReport770TaxPayments
            order by VendAccount
                where taxReport770TaxPayments.ReportId == taxReport770Table.ReportId
                    && !taxReport770TaxPayments.SuspensionNote
                    && (!taxReport770TaxPayments.PaymentDate || taxReport770TaxPayments.PaymentDate < firstDateOfYear)
                    && taxReport770TaxPayments.PaidAmount
        {
            setPrefix(strFmt("@SYS82246", taxReport770TaxPayments.VendAccount));

            if (! taxReport770TaxPayments.PaymentDate)
            {
                ret = checkFailed("@SYS114582");
            }
            else
            {
                ret = checkFailed("@SYS61063");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS61070";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        TaxReport770Validate_IT     taxReport770Validate;
        FormDataSource              datasource = FormDataUtil::getFormDataSource(args.record());;

        if (args && args.record())
        {
            taxReport770Validate = new TaxReport770Validate_IT();
            if (taxReport770Validate.parmTaxReport770Table(args.record()).RecId)
            {
                taxReport770Validate.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>