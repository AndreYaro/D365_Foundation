<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffCustJournalLineProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>SettlementWriteOffCustJournalLineProcessor</c> class generates journal line data specific to customer accounts and customer payment journals.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.SettlementWriteOffJournalLineProcessor)),
    ExportMetadata(enumStr(ModuleCustVend), enumLiteralStr(ModuleCustVend, Cust))]
internal final class SettlementWriteOffCustJournalLineProcessor extends SettlementWriteOffJournalLineProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the posting profile for the payment line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The payment line.</param>
    internal protected void defaultPostingProfile(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(defaults.getJournalType());
        ledgerJournalEngine.initCustPostingProfile(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPartyFromLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the party for a given ledger dimension.
    /// </summary>
    /// <param name = "_ledgerDimension">The ledger dimension for the party.</param>
    /// <returns>The party reference.</returns>
    internal protected DirPartyRecId findPartyFromLedgerDimension(DimensionDynamicAccount _ledgerDimension)
    {
        return CustTable::findByLedgerDimension(_ledgerDimension).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTargetAccountFromPartyNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the customer account associated with a party id in a given legal entity.
    /// </summary>
    /// <param name = "_party">The party reference.</param>
    /// <param name = "_targetLegalEntity">The legal entity context.</param>
    /// <returns>The customer account.</returns>
    internal protected CustVendAC findTargetAccountFromPartyNumber(DirPartyRecId _party, DataAreaId _targetLegalEntity)
    {
        CustVendAC targetAccountNum;

        changecompany (_targetLegalEntity)
        {
            targetAccountNum = CustTable::findByPartyRecId(_party).AccountNum;
        }

        return targetAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModuleSpecificFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields specific to the implementation.
    /// </summary>
    /// <param name = "_journalContract">The write off contract.</param>
    /// <param name = "_ledgerJournalTrans">The journal line to create.</param>
    internal protected void setModuleSpecificFields(SettlementWriteOffJournalContract _journalContract, LedgerJournalTrans _ledgerJournalTrans)
    {
        this.setMarkedInvoice(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkedInvoice</Name>
				<Source><![CDATA[
    private void setMarkedInvoice(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);

        ttsbegin;

        _ledgerJournalTrans.updateMarkedInvoice(specTransManager.getSpecTransCount());
        _ledgerJournalTrans.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the payment line amount for the implementation.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The payment line to apply amounts against.</param>
    /// <param name = "_writeOffAdjustment">The set of adjustment amounts.</param>
    /// <remarks>
    /// The amount for payment is summarized per legal entity.
    /// </remarks>
    internal protected void setPaymentLineAmount(LedgerJournalTrans _ledgerJournalTrans, SettlementWriteOffAdjustment _writeOffAdjustment)
    {
        ttsbegin;

        AmountCur adjustmentAmount = _writeOffAdjustment.findAdjustmentAmount(_ledgerJournalTrans.Company);

        if (adjustmentAmount > 0)
        {
            _ledgerJournalTrans.AmountCurCredit = adjustmentAmount;
        }
        else
        {
            _ledgerJournalTrans.AmountCurDebit = adjustmentAmount;
        }

        _ledgerJournalTrans.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new ()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>