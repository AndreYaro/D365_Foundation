<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlowResourceRequirementsBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFlowResourceRequirements</c> class provides an interface to a resource requirement
///    calculation for a specified kanban flow or job.
/// </summary>
public abstract class KanbanFlowResourceRequirementsBase
{
    KanbanFlow          kanbanFlow;
    InventTable         inventTable;
    InventDimId         inventDimId;
    ItemId              itemId;
    InventQty           inventQty;
    RefRecId            unitOfMeasure;
    boolean             includeInternalResources;
    boolean             includeSubcontractedResources;

    boolean             cachedResourceRequirement;

    Map                 mapActivityRequirement;
    Map                 mapResourceRequirement;
    MapEnumerator       meActivityRequirement;
    MapEnumerator       meResourceRequirement;
    int                 foundRequirements;

    RefRecId            currentPlanActivityRecId;
    RefRecId            currentWrkCtrResourceGroupRecId;
    real                currentRunTimeSeconds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addKanbanFlowResourceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds resource requirements from another instance to the result map.
    /// </summary>
    /// <param name="_kanbanFlowResourceRequirements">
    /// An instance of the <c>KanbanFlowResourceRequirementsBase</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addKanbanFlowResourceRequirements(KanbanFlowResourceRequirementsBase _kanbanFlowResourceRequirements)
    {
        real            seconds;

        if (_kanbanFlowResourceRequirements)
        {
            // get results from the other instance
            Map mapActivityRequirementInstance = _kanbanFlowResourceRequirements.mapActivityRequirement();

            if (   mapActivityRequirementInstance
                && mapActivityRequirementInstance.elements())
            {
                // iterate outer map
                MapEnumerator meActivity = mapActivityRequirementInstance.getEnumerator();
                while (meActivity.moveNext())
                {
                    // get inner map
                    Map mapResourceRequirementInstance = meActivity.currentValue();

                    if (   mapResourceRequirementInstance
                        && mapResourceRequirementInstance.elements())
                    {
                        if (mapActivityRequirement.exists(meActivity.currentKey()))
                        {
                            // add one by one, if results exist for the current activity
                            Map mapResourceRequirementCurrent = mapActivityRequirement.lookup(meActivity.currentKey());

                            if (mapResourceRequirementCurrent)
                            {
                                MapEnumerator meRequirement = mapResourceRequirementInstance.getEnumerator();
                                while (meRequirement.moveNext())
                                {
                                    if (mapResourceRequirementCurrent.exists(meRequirement.currentKey()))
                                    {
                                        seconds = mapResourceRequirementCurrent.lookup(meRequirement.currentKey());
                                    }
                                    else
                                    {
                                        seconds = 0;
                                    }

                                    seconds += meRequirement.currentValue();
                                    foundRequirements++;
                                    mapResourceRequirementCurrent.insert(meRequirement.currentKey(),seconds);
                                }

                                mapActivityRequirement.insert(meActivity.currentKey(),mapResourceRequirementCurrent);
                            }
                            else
                            {
                                foundRequirements += mapResourceRequirementInstance.elements();
                                mapActivityRequirement.insert(meActivity.currentKey(),mapResourceRequirementInstance);
                            }
                        }
                        else
                        {
                            // add entire map for new activity
                            foundRequirements += mapResourceRequirementInstance.elements();
                            mapActivityRequirement.insert(meActivity.currentKey(),mapResourceRequirementInstance);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a resource requirement to the result map.
    /// </summary>
    /// <param name="_planActivityResourceRequirement">
    ///    A <c>PlanActivityResourceRequirement</c> record.
    /// </param>
    /// <param name="_planActivityTimeRecId">
    ///    A <c>PlanActivityTime</c> table record ID.
    /// </param>
    /// <param name="_inventQty">
    ///    The quantity to use for the calculation; optional.
    /// </param>
    /// <remarks>
    ///    The results are stored in a two-level map. The inner map links a work center resource group to a
    ///    time duration in seconds.The outer map stores an instance of the inner map per plan activity.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addRequirement(
        PlanActivityResourceRequirement _planActivityResourceRequirement,
        RefRecId                        _planActivityTimeRecId,
        InventQty                       _inventQty = inventQty)
    {
        real                                seconds;

        if (this.mustIncludeRequirement(_planActivityResourceRequirement))
        {
            PlanActivityTime planActivityTime = _planActivityTimeRecId ?
                                                     PlanActivityTime::find(_planActivityTimeRecId) :
                                                     PlanActivityTime::find(_planActivityResourceRequirement.PlanActivityTime);

            if (planActivityTime)
            {
                PlanActivityTimeCalculation planActivityTimeCalculation = PlanActivityTimeCalculation::newStandardActivity(
                                                                            planActivityTime,
                                                                            itemId,
                                                                            inventDimId,
                                                                            _inventQty,
                                                                            unitOfMeasure,
                                                                            LeanScheduleGroup::throughputRatio(
                                                                                        _planActivityResourceRequirement.WrkCtrResourceGroup,
                                                                                        itemId,
                                                                                        inventDimId));
                real runTimeSeconds = planActivityTimeCalculation.runTimeSeconds();

                if (runTimeSeconds)
                {
                    if (mapActivityRequirement.exists(_planActivityResourceRequirement.PlanActivity))
                    {
                        mapResourceRequirement = mapActivityRequirement.lookup(_planActivityResourceRequirement.PlanActivity);
                    }
                    else
                    {
                        mapResourceRequirement = new Map(typeName2Type(extendedTypeStr(RecId)),Types::Real);
                    }

                    if (mapResourceRequirement.exists(_planActivityResourceRequirement.WrkCtrResourceGroup))
                    {
                        seconds = mapResourceRequirement.lookup(_planActivityResourceRequirement.WrkCtrResourceGroup) + runTimeSeconds;
                    }
                    else
                    {
                        seconds = runTimeSeconds;
                        foundRequirements++;
                    }

                    mapResourceRequirement.insert(_planActivityResourceRequirement.WrkCtrResourceGroup,seconds);
                    mapActivityRequirement.insert(_planActivityResourceRequirement.PlanActivity,mapResourceRequirement);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlanActivityResourceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the resource requirements for the specified <c>PlanActivity</c> buffer.
    /// </summary>
    /// <param name="_planActivity">
    ///    A <c>PlanActivity</c> table buffer.
    /// </param>
    /// <param name="_leanProductionFlowRecId">
    ///    The record ID of a <c>LeanProductionFlow</c> record.
    /// </param>
    /// <param name="_inventQty">
    ///    The quantity to use for the calculation; optional.
    /// </param>
    /// <remarks>
    ///    In the two-level activity hierachy an activity can have multiple resource requirements.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcPlanActivityResourceRequirements(
        PlanActivity _planActivity,
        RefRecId     _leanProductionFlowRecId,
        InventQty    _inventQty = inventQty)
    {
        PlanActivity                        dependentPlanActivity;
        PlanActivityRelationship            planActivityRelationship;
        PlanConstraint                      planConstraint;

        //activity itself
        PlanActivityResourceRequirement planActivityResourceRequirement = PlanActivityResourceRequirement::findPlanActivity(_planActivity.RecId);
        if (planActivityResourceRequirement)
        {
            this.addRequirement(planActivityResourceRequirement,_planActivity.ActivityTime,_inventQty);
        }

        //the next aggregated level
        while select planActivityResourceRequirement
            join ActivityTime from dependentPlanActivity
                where dependentPlanActivity.RecId   == planActivityResourceRequirement.PlanActivity
            join TableId from planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity == _planActivity.RecId
                   && planActivityRelationship.DependentPlanActivity   == dependentPlanActivity.RecId
            join TableId from planConstraint
                where planConstraint.RecId          == planActivityRelationship.Constraint
                   && planConstraint.ConstraintType == ConstraintTypes::Aggregation
        {
            this.addRequirement(planActivityResourceRequirement,dependentPlanActivity.ActivityTime,_inventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResourceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource requirements for the kanban flow or job.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that indicates whether a recalculation must be forced, even if cached values are
    /// available.
    /// </param>
    /// <returns>
    /// true if a calculation was performed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract boolean calcResourceRequirements(boolean _forceRecalc = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPlanActivityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current record ID from the <c>PlanActivity</c> table.
    /// </summary>
    /// <returns>
    ///    The current record ID from the <c>PlanActivity</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId currentPlanActivityRecId()
    {
        return currentPlanActivityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRunTimeHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current requirement run time.
    /// </summary>
    /// <returns>
    /// The current requirement run time.
    /// </returns>
    /// <remarks>
    /// The current requirement run time is measured in hours.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Hours currentRunTimeHours()
    {
        #TimeConstants
        return currentRunTimeSeconds / #SecondsPerHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRunTimeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current requirement run time in seconds.
    /// </summary>
    /// <returns>
    ///    The current requirement run time in seconds.
    /// </returns>
    /// <remarks>The return value has increased precision. Callers need to increaes precision to handle reals.</remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real currentRunTimeSeconds()
    {
        return currentRunTimeSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentWrkCtrResourceGroupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current record ID from the <c>WrkCtrResourceGroup</c> table.
    /// </summary>
    /// <returns>
    ///    The current record ID from the <c>WrkCtrResourceGroup</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId currentWrkCtrResourceGroupRecId()
    {
        return currentWrkCtrResourceGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enumerator to the start of the result map.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that indicates whether a recalculation must be forced, even if cached values are
    /// available.
    /// </param>
    /// <returns>
    /// true if an element exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean first(boolean _forceRecalc = false)
    {
        if (   !cachedResourceRequirement
            || _forceRecalc)
        {
            this.calcResourceRequirements(_forceRecalc);
        }

        boolean result = mapActivityRequirement.elements();

        if (result)
        {
            meActivityRequirement = mapActivityRequirement.getEnumerator();
            result = meActivityRequirement.moveNext();
            if (result)
            {
                mapResourceRequirement = meActivityRequirement.currentValue();
                meResourceRequirement  = mapResourceRequirement.getEnumerator();
                result                 = meResourceRequirement.moveNext();
            }
        }

        this.initCurrent(!result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of found resource requirements.
    /// </summary>
    /// <returns>
    ///    The number of found resource requirements.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int foundRequirements()
    {
        return foundRequirements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the map that will hold the resource requirements.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        inventTable            = InventTable::find(itemId);
        mapActivityRequirement = new Map(typeName2Type(extendedTypeStr(RecId)),Types::Class);       // planActivity - map(wrkCtrResourceGroup - seconds)
        foundRequirements      = 0;

        // update inventDimId to represent only product dimensions
        if (   inventTable
            && inventDimId
            && inventDimId != InventDim::inventDimIdBlank())
        {
            InventDim inventDim = InventDim::find(inventDimId);
            inventDim.clearNotProductDim(InventDimGroupSetup::newInventTable(inventTable));

            inventDim   = InventDim::findOrCreate(inventDim);
            inventDimId = inventDim.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current element of the result map.
    /// </summary>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether the current results must be reset.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initCurrent(boolean _reset)
    {
        if (!_reset)
        {
            if (   meActivityRequirement
                && meResourceRequirement)
            {
                currentPlanActivityRecId        = meActivityRequirement.currentKey();
                currentWrkCtrResourceGroupRecId = meResourceRequirement.currentKey();
                currentRunTimeSeconds           = meResourceRequirement.currentValue();
            }
        }
        else
        {
            currentPlanActivityRecId        = 0;
            currentWrkCtrResourceGroupRecId = 0;
            currentRunTimeSeconds           = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapActivityRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the result map.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that indicates whether a recalculation must be forced, even if cached values are
    /// available.
    /// </param>
    /// <returns>
    /// An instance of the <c>Map</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map mapActivityRequirement(boolean _forceRecalc = false)
    {
        if (   !cachedResourceRequirement
            || _forceRecalc)
        {
            this.calcResourceRequirements(_forceRecalc);
        }

        return mapActivityRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>PlanActivityResourceRequirement</c> record must be included in the
    /// calculation.
    /// </summary>
    /// <param name="_planActivityResourceRequirement">
    /// A <c>PlanActivityResourceRequirement</c> record.
    /// </param>
    /// <returns>
    /// true if the record must be included in the calculation; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustIncludeRequirement(PlanActivityResourceRequirement _planActivityResourceRequirement)
    {
        boolean result = _planActivityResourceRequirement.RecId != 0;

        if (result)
        {
            if (   !includeInternalResources
                || !includeSubcontractedResources)
            {
                boolean isSubcontracted = _planActivityResourceRequirement.isSubcontracted();
                result = (includeSubcontractedResources
                                          &&  isSubcontracted)
                                          || (includeInternalResources
                                          &&  !isSubcontracted);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the enumerator to the next element of the result map.
    /// </summary>
    /// <returns>
    ///    true if the next element exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean next()
    {
        boolean result = meResourceRequirement ? meResourceRequirement.moveNext() : false;

        if (!result)
        {
            result = meActivityRequirement ? meActivityRequirement.moveNext() : false;
            if (result)
            {
                mapResourceRequirement = meActivityRequirement.currentValue();
                meResourceRequirement  = mapResourceRequirement.getEnumerator();
                result                 = meResourceRequirement.moveNext();
            }
        }

        this.initCurrent(!result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeInternalResources</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmIncludeInternalResources(boolean _includeInternalResources = includeInternalResources)
    {
        includeInternalResources = _includeInternalResources;
        return includeInternalResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSubcontractedResources</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmIncludeSubcontractedResources(boolean _includeSubcontractedResources = includeSubcontractedResources)
    {
        includeSubcontractedResources = _includeSubcontractedResources;
        return includeSubcontractedResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanFlow</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanFlow parmKanbanFlow(KanbanFlow _kanbanFlow = kanbanFlow)
    {
        kanbanFlow = _kanbanFlow;
        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasure</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmUnitOfMeasure(RefRecId _unitOfMeasure = unitOfMeasure)
    {
        unitOfMeasure = _unitOfMeasure;
        return unitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementsAsMapWrkCtrIdHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource requirements.
    /// </summary>
    /// <returns>
    /// A <c>Map</c> object that holds the calculated resource requirements.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map requirementsAsMapWrkCtrIdHours()
    {
        Hours                   hours;
        Map                     mapResourceRequirementHours = new Map(Types::String, Types::Real); // wrkCtrId -> resource requirement in hours

        boolean requirementsFound = this.first();
        while (requirementsFound)
        {
            WrkCtrResourceGroup wrkCtrResourceGroup = WrkCtrResourceGroup::find(this.currentWrkCtrResourceGroupRecId());
            if (wrkCtrResourceGroup)
            {
                if (mapResourceRequirementHours.exists(wrkCtrResourceGroup.WrkCtrId))
                {
                    hours = mapResourceRequirementHours.lookup(wrkCtrResourceGroup.WrkCtrId);
                }
                else
                {
                    hours = 0;
                }

                hours += this.currentRunTimeHours();

                mapResourceRequirementHours.insert(wrkCtrResourceGroup.WrkCtrId,hours);
            }
            requirementsFound = this.next();
        }

        return mapResourceRequirementHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates class input parameters
    /// </summary>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validate()
    {
        boolean result = true;

        if (   !inventTable
            || !kanbanFlow
            || !unitOfMeasure)
        {
            result = checkFailed("@SYS342414");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static Description description()
    {
        return "@SYS339034";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>