<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineServiceHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class to support the implementation of document line domain object supporting Service Tax.
/// </summary>
public class TaxModelDocLineServiceHelper_IN extends TaxModelDocLineHelper_IN
{
    TaxModelServiceTaxable_IN taxModelServiceTaxable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getServiceCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of <c>ServiceCodeTable_IN</c> of the transaction line.
    /// </summary>
    /// <returns>
    /// The service code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecId getServiceCodeRefRecId()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getServiceReferenceTaxModelDocLine().getServiceCodeRefRecId();
        }
        else
        {
            return transTaxInformation.ServiceCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ServiceCodeTable_IN</c> of the transaction line.
    /// </summary>
    /// <returns>
    /// The service code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ServiceCodeTable_IN getServiceCodeTable()
    {
        return ServiceCodeTable_IN::find(taxModelServiceTaxable.getServiceCodeRefRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceGTACategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the service GTA category of the transaction line.
    /// </summary>
    /// <returns>
    /// The category.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GTAServiceCategory_IN getServiceGTACategory()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getServiceReferenceTaxModelDocLine().getServiceGTACategory();
        }
        else
        {
            return transTaxInformation.ServiceTaxGTAServiceCategory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets service reference tax model document line.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxModelServiceTaxable_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxModelServiceTaxable_IN getServiceReferenceTaxModelDocLine()
    {
        return taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelServiceTaxable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAccountType_IN getServiceTaxAccountType(TaxOnItem _taxOnItem)
    {
        TaxAccountType_IN ret;

        if (!taxModelServiceTaxable.isServicePOT(_taxOnItem))
        { // Cash Basis
            switch (taxModelTaxable.getTaxDirection())
            {
                case TaxDirection::IncomingTax :
                    if (taxModelTaxable.isPayment())
                    {
                        if (taxModelServiceTaxable.isServiceGTA())
                        {
                            ret = TaxAccountType_IN::ServiceTaxPayableAccount; //credit
                        }
                        else
                        {
                            ret = TaxAccountType_IN::ServiceTaxInterimRecoverableAccount; //credit
                        }
                    }
                    else
                    {
                        ret = TaxAccountType_IN::ServiceTaxInterimRecoverableAccount; //debit
                    }
                    break;
                case TaxDirection::OutgoingTax :
                    if (taxModelTaxable.isPayment())
                    {
                        ret = TaxAccountType_IN::ServiceTaxInterimPayableAccount; //debit
                    }
                    else
                    {
                        ret = TaxAccountType_IN::ServiceTaxInterimPayableAccount; //credit
                    }
                    break;
            }
        }
        else
        {
            // POT
            switch (taxModelTaxable.getTaxDirection())
            {
                case TaxDirection::IncomingTax :
                    if (this.isPayment())
                    {
                        ret = TaxAccountType_IN::ServiceTaxInterimRecoverableAccount; //credit
                    }
                    else
                    {
                        ret = TaxAccountType_IN::ServiceTaxRecoverableAccount; //debit
                    }
                    break;
                case TaxDirection::OutgoingTax :
                    if (this.isPayment())
                    {
                        ret = TaxAccountType_IN::ServiceTaxInterimPayableAccount; //debit
                    }
                    else
                    {
                        ret = TaxAccountType_IN::ServiceTaxPayableAccount; //credit
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAccountType_IN getServiceTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        TaxAccountType_IN ret;

        if (!taxModelServiceTaxable.isServicePOT(_taxOnItem))
        { // Cash Basis
            switch (taxModelTaxable.getTaxDirection())
            {
                case TaxDirection::IncomingTax :
                    if (taxModelTaxable.isPayment())
                    {
                        if (taxModelServiceTaxable.isServiceGTA())
                        {
                            ret = TaxAccountType_IN::ServiceTaxInterimPayableAccount; //debit
                        }
                        else
                        {
                            ret = TaxAccountType_IN::ServiceTaxRecoverableAccount; //debit
                        }
                    }
                    else
                    {
                        if (taxModelServiceTaxable.isServiceGTA())
                        {
                            ret = TaxAccountType_IN::ServiceTaxInterimPayableAccount; //credit
                        }
                        else
                        {
                            ret = TaxAccountType_IN::None; //credit
                        }
                    }
                    break;
                case TaxDirection::OutgoingTax :
                    if (taxModelTaxable.isPayment())
                    {
                        ret = TaxAccountType_IN::ServiceTaxPayableAccount; //credit
                    }
                    else
                    {
                        ret = TaxAccountType_IN::None; //debit
                    }
                    break;
            }
        }
        else
        {
            // POT
            switch (taxModelTaxable.getTaxDirection())
            {
                case TaxDirection::IncomingTax :
                    if (this.isPayment())
                    {
                        ret = TaxAccountType_IN::ServiceTaxRecoverableAccount; // debit
                    }
                    else
                    {
                        ret = TaxAccountType_IN::None; // credit
                    }
                    break;
                case TaxDirection::OutgoingTax :
                    if (this.isPayment())
                    {
                        ret = TaxAccountType_IN::ServiceTaxPayableAccount; // credit
                    }
                    else
                    {
                        ret = TaxAccountType_IN::None; // debit
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Service Tax Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN getServiceTaxRegistrationNumber()
    {
        TaxModelTaxable_IN taxModelTaxableIN = taxModelTaxable as TaxModelTaxable_IN;
        return taxModelTaxableIN.getTaxRegistrationNumber(TaxType_IN::ServiceTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> Service Tax Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getServiceTaxRegistrationRefRecId()
    {
        TaxModelTaxable_IN taxModelTaxableIN = taxModelTaxable as TaxModelTaxable_IN;
        return taxModelTaxableIN.getTaxRegistrationNumberRefRecId(TaxType_IN::ServiceTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceGTA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is GTA transaction?
    /// </summary>
    /// <returns>
    /// True, if the transaction is GTA;Otherwise, false;
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isServiceGTA()
    {
        VendTable vendTable;
        boolean   ret;

        vendTable = taxModelTaxable.getVendTable();

        if (vendTable)
        {
            ret = vendTable.isGTA();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServicePOT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is POT transaction?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// True, if the transaction is POT;Otherwise, false;
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isServicePOT(TaxOnItem _taxOnItem)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceTaxGTARealizedAtInvSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the tax of the GTA vendor is realizable at Invoice settlement time or not.
    /// </summary>
    /// <returns>
    /// True, if it is realizeable; Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isServiceTaxGTARealizedAtInvSettlement()
    {
        return !transTaxInformation.ServiceTaxIsRecoverable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxModelServiceTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance of <c>TaxModelServiceTaxable_IN</c>
    /// </summary>
    /// <param name="_taxModelServiceTaxable">
    /// The given instance of <c>TaxModelServiceTaxable_IN</c>
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTaxModelServiceTaxable(TaxModelServiceTaxable_IN _taxModelServiceTaxable)
    {
        taxModelServiceTaxable = _taxModelServiceTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipServiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Service Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean shouldSkipServiceTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            ret = this.getServiceReferenceTaxModelDocLine().shouldSkipServiceTax(_taxOnItem);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>