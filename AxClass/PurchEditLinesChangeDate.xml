<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchEditLinesChangeDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   PurchEditLinesChangeDate
extends RunBase
{
    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        parmId,
        toDate,
        fromDate
    #ENDMACRO

    ParmId              parmId;
    DialogField         dialogToDate;
    DialogField         dialogFromDate;
    ToDate              toDate;
    FromDate            fromDate;

    DocumentStatus      documentStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();
        dialogFromDate  = dialog.addFieldValue(extendedtypestr(FromDate), fromDate);
        dialogFromDate.allowEdit(false);

        dialogToDate    = dialog.addFieldValue(extendedtypestr(ToDate), toDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        toDate          = dialogToDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ParmId     _parmId,
             FromDate   _fromDate)
    {
        super();

        this.getLast();

        parmId      = _parmId;
        fromDate    = _fromDate;
        toDate      = _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;

        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        VendDocumentTableMap vendDocumentTableMap;
        PurchParmTable       purchParmTable;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // Initialize the map before querying
        if (documentStatus == DocumentStatus::ApproveJournal ||
            documentStatus == DocumentStatus::Invoice)
        {
            vendDocumentTableMap = vendInvoiceInfoTable;
        }
        else
        {
            vendDocumentTableMap = purchParmTable;
        }

        try
        {
            while select forupdate vendDocumentTableMap
                where vendDocumentTableMap.ParmId == parmId
            {
                vendDocumentTableMap.TransDate    = toDate;

                if (!vendDocumentTableMap.DocumentDate)
                {
                    // Default other fields that depend on TransDate
                    vendDocumentTableMap.modifiedField(VendDocumentUtil::fieldNum(fieldnum(VendDocumentTableMap, TransDate),
                                                                                  vendDocumentTableMap.TableId));
                }

                vendDocumentTableMap.update();
            }
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
           throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    ToDate toDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (!toDate)
            ret = checkFailed("@SYS24455");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchEditLinesChangeDate  construct(ParmId _parmId, FromDate _fromDate)
    {
        PurchEditLinesChangeDate    purchEditLinesChangeDate;

        purchEditLinesChangeDate = new PurchEditLinesChangeDate(_parmId, _fromDate);
        return purchEditLinesChangeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS68704";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>