<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventDimQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSInventDimQueryBuilder
{
    private InventDim               inventDim; 
    private InventDim               inventDimCriteria;
    private static List             dimEnabledFieldList; 
    private static Set              dimEnabledProductFields;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventDimQueryBuilder newFromInventDim(InventDim _inventDim, InventDim _inventDimCriteria)
    {
        WHSInventDimQueryBuilder queryBuilder = new WHSInventDimQueryBuilder();

        queryBuilder.inventDim = _inventDim;
        queryBuilder.inventDimCriteria = _inventDimCriteria;
        
        return queryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFieldListEnumerator</Name>
				<Source><![CDATA[
    private static ListEnumerator dimEnabledFieldListEnumerator()
    {
        if (!dimEnabledFieldList)
        {
            dimEnabledFieldList = WHSInventDimQueryBuilder::dimEnabledFieldList();
        }

        return dimEnabledFieldList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFieldList</Name>
				<Source><![CDATA[
    private static List dimEnabledFieldList()
    {
        return InventDim::dimEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledProductFields</Name>
				<Source><![CDATA[
    private static Set dimEnabledProductFields()
    {
        if (!dimEnabledProductFields)
        {
            dimEnabledProductFields = InventDimMetaDataCache::dimProductDimEnabledFieldSet();
        }

        return dimEnabledProductFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimension</Name>
				<Source><![CDATA[
    private boolean isProductDimension(FieldId _fieldId)
    {
        return WHSInventDimQueryBuilder::dimEnabledProductFields().in(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedInventDimClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression selectedInventDimClause()
    {
        SysDaQueryExpression selectedInventDimClause = new SysDaEqualsExpression(new SysDaValueExpression(true), new SysDaValueExpression(true));

        ListEnumerator dimFields = WHSInventDimQueryBuilder::dimEnabledFieldListEnumerator();

        InventDim emptyInventDim;

        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();

            if (this.isProductDimension(dimFieldId))
            {
                //Product dimensions must match - we add all enabled product dimensions to avoid sending a lot of different queries which can lead to index permutations.
                selectedInventDimClause = selectedInventDimClause
                        .and(
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(inventDim, fieldId2Name(tableName2Id(tableStr(InventDim)), dimFieldId)),
                                new SysDaValueExpression(inventDimCriteria.(dimFieldId))));
            }
            else //blank or match on critiera
            {
                selectedInventDimClause = selectedInventDimClause
                    .and(new SysDaEqualsExpression(
                            new SysDaFieldExpression(inventDim, fieldId2Name(tableName2Id(tableStr(InventDim)), dimFieldId)),
                            new SysDaValueExpression(emptyInventDim.(dimFieldId)))
                        .or(                        
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(inventDim, fieldId2Name(tableName2Id(tableStr(InventDim)), dimFieldId)),
                                new SysDaValueExpression(inventDimCriteria.(dimFieldId)))));
            }
        }

        return selectedInventDimClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinClause</Name>
				<Source><![CDATA[
    private SysDaQueryObject joinClause(SysDaFieldExpression _inventDimIdFieldExpressionToJoinOn)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(inventDim);

        SysDaQueryExpression inventDimIdClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(inventDim, fieldStr(InventDim, InventDimId)), _inventDimIdFieldExpressionToJoinOn);
        
        joinQuery.whereClause(inventDimIdClause.and(this.selectedInventDimClause()));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWHSInventDimJoin</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final static SysDaQueryObject buildWHSInventDimJoin(
        InventDim               _inventDimEmptyBuffer,
        InventDim               _inventDimCriteria,     
        SysDaFieldExpression    _inventDimIdFieldExpressionToJoinOn)
    {
        WHSInventDimQueryBuilder dimQueryBuilder = WHSInventDimQueryBuilder::newFromInventDim(_inventDimEmptyBuffer, _inventDimCriteria);
        
        return dimQueryBuilder.joinClause(_inventDimIdFieldExpressionToJoinOn);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>