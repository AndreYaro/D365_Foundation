<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAvailableBalanceLedgerDimension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetAvailableBalanceLedgerDimension</c> class is designed to provide budgetary control
///    category aggregations for a ledger dimension by using a specified <c>BudgetModel</c> reference, a
///    starting interval date, and an ending interval date.
/// </summary>
public class BudgetAvailableBalanceLedgerDimension extends BudgetAvailableBalance
{
    // Cached budget setup properties.
    LedgerDimensionBudgetControl controlLedgerDimension;

    // Additional class properties
    QueryBuildRange controlLedgerDimension_qbr;

    // Query build ranges for relieving category sum query
    QueryBuildRange controlLedgerDimension_Relieved_qbr;

    QueryBuildRange calculationSummaryControlLedgerDimensionRange;
    QueryBuildRange calculationDeltaControlLedgerDimensionRange;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal properties of an instance of the
    ///    <c>BudgetAvailableBalanceLedgerDimension</c> class.
    /// </summary>
    /// <param name="_primaryLedgerId">
    ///    The record ID for the primary <c>Ledger</c> record to use for aggregations.
    /// </param>
    /// <param name="_controlLedgerDimension">
    ///    A record ID of the budget control ledger dimension.
    /// </param>
    /// <param name="_fromIntervalDate">
    ///    The starting date interval to use for aggregations.
    /// </param>
    /// <param name="_toIntervalDate">
    ///    The ending date interval to use for aggregations.
    /// </param>
    protected void initialize(
        recId _primaryLedgerId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        TransDate _fromIntervalDate,
        TransDate _toIntervalDate)
    {
        primaryLedgerId                 = _primaryLedgerId;
        controlLedgerDimension          = _controlLedgerDimension;
        fromIntervalDate                = _fromIntervalDate;
        toIntervalDate                  = _toIntervalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BudgetAvailableBalanceLedgerDimension</c> class.
    /// </summary>
    /// <remarks>
    ///    This method overrides the original method to prevent a caller from constructing an instance of the
    ///    class using the <c>new</c> method.
    /// </remarks>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBudgetControlCategorySumAllQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>BudgetControlCategorySumAll</c> query for use by the aggregation calculation.
    /// </summary>
    /// <remarks>
    ///    This method creates a new instance of the <c>BudgetControlCategorySumAll</c> query by calling
    ///    the <c>super</c> method and establishing the required query build data sources and query build
    ///    ranges. It also prepares the <c>trackingDateValueStr_qbr</c> query range value because it does
    ///    not change for the lifetime of the class instance.
    /// </remarks>
    protected void prepareBudgetControlCategorySumAllQuery()
    {
        super();

        if (budgetControlCategorySumAll_q != null && budgetSourceTrackingDetail_qbds != null)
        {
            // Find a range on control ledger dimension
            controlLedgerDimension_qbr = budgetSourceTrackingDetail_qbds.findRange(fieldnum(BudgetSourceTrackingDetail, BudgetControlLedgerDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQueryRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range values based on the specified parameters.
    /// </summary>
    /// <param name="_budgetModel">
    ///     A <c>BudgetModel</c> record.
    /// </param>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a confirmed status.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a draft status.
    /// </param>
    /// <param name="_includeDefaultBudgetModelTransactions">
    ///     A Boolean value that directs the calculation to include default
    ///     budget model budget control tracking data.
    /// </param>
    /// <param name="_includeIsSimulation">
    ///     A Boolean value that directs the calculation to include simulation
    ///     budget control tracking data.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///     A record ID of main account which is used in calculating the <c>BudgetSourceLedgerDimension</c> record ID.
    /// </param>
    /// <param name="_includeAllAccounts">
    ///     A Boolean value that directs to include all main accounts for the specified ledger dimension.
    /// </param>
    protected void prepareQueryRangeValues(
        BudgetModel _budgetModel,
        boolean     _includeConfirmed,
        boolean     _includeDraft,
        boolean     _includeDefaultBudgetModelTransactions,
        boolean     _includeIsSimulation,
        recId       _mainAccountRecId,
        boolean     _includeAllAccounts)
    {
        super(_budgetModel, _includeConfirmed, _includeDraft, _includeDefaultBudgetModelTransactions, _includeIsSimulation, _mainAccountRecId, _includeAllAccounts);

        if (controlLedgerDimension_qbr != null)
        {
            controlLedgerDimension_qbr.value(SysQuery::value(controlLedgerDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRelievingCategorySumAllQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>BudgetControlRelievingCategorySumAll</c> query for use by the aggregation calculation.
    /// </summary>
    /// <remarks>
    ///    This method creates a new instance of the <c>BudgetControlRelievingCategorySumAll</c> query and
    ///    establishes the required query build data sources and query build ranges.It also prepares the
    ///    <c>trackingDate_Relieving_qbr</c> query range value because it does not change for the lifetime of
    ///    the instance of the class.
    /// </remarks>
    protected void prepareRelievingCategorySumAllQuery()
    {
        super();

        if (budgetControlRelievingCategorySumAll_q != null && budgetSourceTrackingDetail_Relieved_qbds != null)
        {
            // Find QueryBuildRanges on relieved BudgetSourceTrackingDetail QueryBuildDataSource
            controlLedgerDimension_Relieved_qbr = budgetSourceTrackingDetail_Relieved_qbds.findRange(fieldnum(BudgetSourceTrackingDetail, BudgetControlLedgerDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRelievingQueryRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range values based on the specified parameters.
    /// </summary>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking relieving data in a confirmed status.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking relieving data in a draft status.
    /// </param>
    /// <param name="_includeIsSimulation">
    ///     A Boolean value that directs the calculation to include simulation
    ///     budget control tracking relieving data.
    /// </param>
    /// <param name="_includeCarryforwardAmounts">
    ///     A Boolean value that directs the calculation to include carryforward
    ///     budget control tracking relieving data.
    /// </param>
    protected void prepareRelievingQueryRangeValues(
        boolean _includeConfirmed,
        boolean _includeDraft,
        boolean _includeIsSimulation,
        boolean _includeCarryforwardAmounts)
    {
        super(_includeConfirmed, _includeDraft, _includeIsSimulation, _includeCarryforwardAmounts);

        if (controlLedgerDimension_Relieved_qbr != null)
        {
            controlLedgerDimension_Relieved_qbr.value(SysQuery::value(controlLedgerDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of a <c>BudgetAvailableBalanceLedgerDimension</c> class.
    /// </summary>
    /// <param name="_primaryLedgerId">
    ///     The record ID for the <c>Ledger</c> record to be used for aggregations.
    /// </param>
    /// <param name="_controlLedgerDimension">
    ///     The ledger dimension for the <c>BudgetAvailableBalanceLedgerDimension</c> instance.
    /// </param>
    /// <param name="_startIntervalDate">
    ///     The starting date interval to be used for aggregations.
    /// </param>
    /// <param name="_endIntervalDate">
    ///     The ending date interval to be used for aggregations.
    /// </param>
    /// <returns>
    ///     A <c>BudgetAvailableBalanceLedgerDimension</c> class instance.
    /// </returns>
    /// <remarks>
    ///     When a <c>BudgetLedgerSetup</c> record does not exist for the supplied ledger dimension a
    ///     null instance is returned.
    /// </remarks>
    public static BudgetAvailableBalanceLedgerDimension construct(
        recId _primaryLedgerId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        TransDate _startIntervalDate,
        TransDate _endIntervalDate)
    {
        BudgetAvailableBalanceLedgerDimension    budgetAvailableBalanceLedgerDimension;

        if (_primaryLedgerId != 0 && _controlLedgerDimension != 0)
        {
            budgetAvailableBalanceLedgerDimension = new BudgetAvailableBalanceLedgerDimension();

            budgetAvailableBalanceLedgerDimension.initialize(_primaryLedgerId, _controlLedgerDimension, _startIntervalDate, _endIntervalDate);
        }
        return budgetAvailableBalanceLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>