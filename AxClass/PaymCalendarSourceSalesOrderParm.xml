<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarSourceSalesOrderParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymCalendarSourceSalesOrderParm</c> class provides an interface that is used to find
/// payment calendars when the source is the <c>SalesParmTable</c> table.
/// </summary>
public class PaymCalendarSourceSalesOrderParm implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress
{
    SalesParmTable salesParmTable;
    SalesTable salesTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the bank account.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        CustBankAccount custBankAccount;
        LogisticsPostalAddress postalAddress;

        custBankAccount = CustBankAccount::findByCompany
            (salesParmTable.DataAreaId,
            salesParmTable.InvoiceAccount,
            salesParmTable.CustBankAccountId);

        postalAddress = LogisticsLocationEntity::location2PostalAddress(custBankAccount.Location);

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the third-party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        CustTable custTable;
        LogisticsPostalAddress localPostalTable;

        custTable = CustTable::findByCompany(salesParmTable.DataAreaId, salesParmTable.InvoiceAccount);

        localPostalTable = custTable.postalAddress();

        return localPostalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the payment calendar derivation source instance for the specified record.
    /// </summary>
    /// <param name="_salesParmTable">
    /// A populated <c>SalesParmTable</c> table buffer that specifies the initialization data.
    /// </param>
    public void initialize(SalesParmTable _salesParmTable)
    {
        salesParmTable = _salesParmTable;
        salesTable = salesParmTable.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        PaymCalendarModuleType paymCalendarModuleType;

        paymCalendarModuleType = PaymCalendarModuleType::Customer;

        return paymCalendarModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        CustPaymMode paymMode;

        paymMode = salesTable.PaymMode;

        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return salesParmTable.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return salesTable.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceSalesOrderParm</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PaymCalendarSourceSalesOrderParm</c> class.
    /// </returns>
    private static PaymCalendarSourceSalesOrderParm construct()
    {
        return new PaymCalendarSourceSalesOrderParm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The sales parameter table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> class which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDate(SalesParmTable _salesParmTable)
    {
        return PaymCalendarSourceSalesOrderParm::getAdjustedDatePrivate(_salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The sales parameter table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> class which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    private static PaymCalendarAdjustedDate getAdjustedDatePrivate(SalesParmTable _salesParmTable)
    {
        PaymTerm paymTerm;
        PaymCalendarSourceSalesOrderParm calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymTerm = PaymTerm::find(_salesParmTable.salesTable().Payment);
        if (paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
        {
            calendarSource = PaymCalendarSourceSalesOrderParm::newCalendarSource(_salesParmTable);
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_salesParmTable.FixedDueDate, paymTerm.CustomerUpdateDueDate, calendarSource);
        }
        else
        {
            paymCalendarAdjustedDate = PaymCalendarAdjustedDate::construct(_salesParmTable.FixedDueDate);
        }

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_salesParmTable">
    /// The sales parameter table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> class which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDueDate(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, SalesParmTable _salesParmTable)
    {
        return PaymCalendarSourceSalesOrderParm::getAdjustedDueDatePrivate(_dueDate, _updatePolicy, _salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDueDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_salesParmTable">
    /// The sales parameter table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> class which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    public static PaymCalendarAdjustedDate getAdjustedDueDatePrivate(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, SalesParmTable _salesParmTable)
    {
        PaymCalendarSourceSalesOrderParm calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymCalendarProcessor = PaymCalendarProcessor::construct();
        calendarSource = PaymCalendarSourceSalesOrderParm::newCalendarSource(_salesParmTable);
        paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_dueDate, _updatePolicy, calendarSource);

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalendarSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceSalesOrderParm</c> class.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The <c>SalesParmTable</c> record to load.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarSourceSalesOrderParm</c> class.
    /// </returns>
    public static PaymCalendarSourceSalesOrderParm newCalendarSource(SalesParmTable _salesParmTable)
    {
        PaymCalendarSourceSalesOrderParm paymCalendarSourceSalesOrderParm;

        paymCalendarSourceSalesOrderParm = PaymCalendarSourceSalesOrderParm::construct();
        paymCalendarSourceSalesOrderParm.initialize(_salesParmTable);

        return paymCalendarSourceSalesOrderParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>