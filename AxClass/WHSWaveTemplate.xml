<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for representing a wave template.
/// </summary>
public abstract class WHSWaveTemplate
{
    private WHSWaveTemplateTable waveTemplate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasReplenishmentStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the wave template has a replenishment step added to selected wave processing methods.
    /// </summary>
    /// <returns>true, if the replenishment step is part of the wave template; otherwise, false.</returns>
    public boolean hasReplenishmentStep()
    {
        return false;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTemplateTable</Name>
				<Source><![CDATA[
    public WHSWaveTemplateTable parmWaveTemplateTable(WHSWaveTemplateTable _waveTemplate = waveTemplate)
    {
        waveTemplate = _waveTemplate;
        return waveTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveTemplateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>WHSWaveTemplate</c> object.
    /// </summary>
    /// <param name="_waveTemplate">
    /// A wave template table record.
    /// </param>
    /// <returns>The instantiated object.</returns>
    [Hookable(false)]
    public static WHSWaveTemplate newFromWaveTemplateTable(WHSWaveTemplateTable _waveTemplate)
    {
        WHSWaveTemplateTypeFactoryAttribute attribute = new WHSWaveTemplateTypeFactoryAttribute(_waveTemplate.WaveTemplateType);
        WHSWaveTemplate instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWaveTemplate), attribute) as WHSWaveTemplate;

        if (!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance.parmWaveTemplateTable(_waveTemplate);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsWaveTemplateLineWithProcessingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a wave template line with a given processing method exists.
    /// </summary>
    /// <param name = "_processingMethodName">The name of the method to check for.</param>
    /// <returns>true if a line exist; otherwise, false.</returns>
    protected boolean existsWaveTemplateLineWithProcessingMethod(WHSPostMethodName _processingMethodName)
    {
        WHSWaveTemplateLine waveTemplateLine;

        if (_processingMethodName)
        {
            select firstonly RecId from waveTemplateLine
                where waveTemplateLine.WaveTemplateName == waveTemplate.WaveTemplateName
                    && waveTemplateLine.PostMethodName == _processingMethodName;
        }

        return waveTemplateLine.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>