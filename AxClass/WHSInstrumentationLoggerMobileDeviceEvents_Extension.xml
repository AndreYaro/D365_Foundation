<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationLoggerMobileDeviceEvents_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides API for logging mobile device events.
/// </summary>
[ExtensionOf(classStr(WHSInstrumentationLogger))]
internal final class WHSInstrumentationLoggerMobileDeviceEvents_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logUserLogin</Name>
				<Source><![CDATA[
    final internal void logUserLogin(WHSWarehouseMobileDeviceActivityData _activityData)
    {
        Map parameters = this.initializeBasicDeviceData(
                                guid2Str(_activityData.parmWhsUserGuid()),
                                guid2Str(_activityData.parmWorkerSysUserRelationObjectId()),
                                _activityData.parmCompany(),
                                _activityData.parmSite(),
                                _activityData.parmWarehouse(),
                                guid2Str(_activityData.parmDeviceId()),
                                guid2Str(_activityData.parmWhsUserSessionId()));

        this.logAttributeValueInformation(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBasicDeviceData</Name>
				<Source><![CDATA[
    private Map initializeBasicDeviceData(str _whsUserGuid,
                                        str _workerSysUserRelationObjectId,
                                        str _company,
                                        str _site,
                                        str _warehouse,
                                        str _deviceId,
                                        str _whsUserSessionId)
    {
        Map parameters = new Map(Types::String, Types::String);
        parameters.insert('whsUserGuid', _whsUserGuid);
        parameters.insert('workerSysUserRelationObjectId', _workerSysUserRelationObjectId);
        parameters.insert('company', _company);
        parameters.insert('site', _site);
        parameters.insert('warehouse', _warehouse);
        parameters.insert('deviceId', _deviceId);
        parameters.insert('whsUserSessionId', _whsUserSessionId);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUserLogout</Name>
				<Source><![CDATA[
    final internal void logUserLogout(WHSWarehouseMobileDeviceActivityData _activityData)
    {
        Map parameters = this.initializeBasicDeviceData(
                                guid2Str(_activityData.parmWhsUserGuid()),
                                guid2Str(_activityData.parmWorkerSysUserRelationObjectId()),
                                _activityData.parmCompany(),
                                _activityData.parmSite(),
                                _activityData.parmWarehouse(),
                                guid2Str(_activityData.parmDeviceId()),
                                guid2Str(_activityData.parmWhsUserSessionId()));
                                
        this.logAttributeValueInformation(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUserActivity</Name>
				<Source><![CDATA[
        final internal void logUserActivity(WHSWarehouseMobileDeviceActivityData _activityData, str _scrubedParmRequestXML)
    {
        Map parameters = this.initializeBasicDeviceData(
                                guid2Str(_activityData.parmWhsUserGuid()),
                                guid2Str(_activityData.parmWorkerSysUserRelationObjectId()),
                                _activityData.parmCompany(),
                                _activityData.parmSite(),
                                _activityData.parmWarehouse(),
                                guid2Str(_activityData.parmDeviceId()),
                                guid2Str(_activityData.parmWhsUserSessionId()));

        parameters.insert('workExecuteMode', WHSWorkExecutionMode::newFromMode(_activityData.parmMode()).toString());
        parameters.insert('step', int2Str(_activityData.parmStep()));
        parameters.insert('buttonClicked', _activityData.parmButtonClicked());
        parameters.insert('requestXML', _scrubedParmRequestXML);
        parameters.insert('workTableRecId', int2Str(_activityData.parmWorkTableRecId()));
        parameters.insert('workTransType', _activityData.parmWorkTableRecId() ? enum2Symbol(enumNum(WHSWorkTransType), enum2int(_activityData.parmWorkTransType())) : '');
        parameters.insert('workLineRecId', int2Str(_activityData.parmWorklineRecId()));
        parameters.insert('workLineType', _activityData.parmWorklineRecId() ? enum2Symbol(enumNum(WHSWorkType), enum2int(_activityData.parmWorkLineType())) : '');
        parameters.insert('durationInMilliSeconds', int642Str(_activityData.parmDurationInMilliSeconds()));
        parameters.insert('processGuideStep', _activityData.parmProcessGuideStepName());
        parameters.insert('item', int2Str(_activityData.parmInventTableRecId()));
        parameters.insert('cwItem', any2Str(_activityData.parmIsCWItem()));
        parameters.insert('workLineWMSLocationRecId', int2Str(_activityData.parmWorkLineWMSLocationRecId()));
        
        this.logAttributeValueInformation(parameters);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>