<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeTextInvoiceDP_CH_QRBill_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An extension class of Free text invoice report data provider to fill QR-Bill specific fields in the GIRO report.
/// </summary>
[ExtensionOf(classStr(FreeTextInvoiceDP))]
public final class FreeTextInvoiceDP_CH_QRBill_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initGiro</Name>
				<Source><![CDATA[
    protected void initGiro(CustInvoiceJour _custInvoiceJour)
    {
        next initGiro(_custInvoiceJour);

        if (_custInvoiceJour.GiroType == PaymentStub::QRBill)
        {
            CompanyBankAccountId companyBankAccountId = _custInvoiceJour.paymentBankAccountId();
            
            if (!companyBankAccountId)
            {
                CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(_custInvoiceJour.custTable_InvoiceAccount().PaymMode);

                if (custPaymModeTable.AccountType == LedgerJournalACType::Bank)
                {
                    companyBankAccountId = custPaymModeTable.parmPaymAccount();
                }
            }

            moneyTransferSlip.initFromBankAccountTable(companyBankAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPopulateGiroInformation</Name>
				<Source><![CDATA[
    protected void postPopulateGiroInformation(CustInvoiceJour _custInvoiceJour)
    {
        next postPopulateGiroInformation(_custInvoiceJour);

        if (_custInvoiceJour.GiroType == PaymentStub::QRBill)
        {
            salesInvoicePaymentStubTmp.IBAN_CH = moneyTransferSlip.getQRIBANOrIBAN(_custInvoiceJour.PaymId);
            salesInvoicePaymentStubTmp.currencyCodeISO_CH = Currency::currencyCodeISO(_custInvoiceJour.CurrencyCode);
            salesInvoicePaymentStubTmp.InvoiceName = cachedInvoicingName;

            LogisticsPostalAddress invoiceAddress = LogisticsPostalAddress::findRecId(_custInvoiceJour.InvoicePostalAddress);
            salesInvoicePaymentStubTmp.InvoiceAddressLine1_CH = strRemoveCr(invoiceAddress.Street);
            salesInvoicePaymentStubTmp.InvoiceAddressLine2_CH = strFmt('%1 %2', invoiceAddress.ZipCode, invoiceAddress.City);
            salesInvoicePaymentStubTmp.InvoiceCountryRegionId_CH = invoiceAddress.CountryRegionId;
            salesInvoicePaymentStubTmp.OcrField = _custInvoiceJour.PaymId;

            TmpTaxWorkTrans tmpTaxWorkTrans;

            if (_custInvoiceJour.isProforma())
            {
                if (formletterProformaPrint)
                {
                    tmpTaxWorkTrans = formletterProformaPrint.tmpTaxWorkTrans(_custInvoiceJour.RecId);
                }
            }
            else
            {
                tmpTaxWorkTrans = TmpTaxWorkTrans::initFromTaxTrans_CH(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate);
            }

            salesInvoicePaymentStubTmp.BillInformation_CH = CustQRBillQRCodeCreator_CH::getBillInformation(_custInvoiceJour, tmpTaxWorkTrans);
            salesInvoicePaymentStubTmp.LanguageId_CH = _custInvoiceJour.LanguageId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>