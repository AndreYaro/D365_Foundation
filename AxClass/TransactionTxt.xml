<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionTxt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransactionTxt
{
    private const LanguageIdAll UserLanguage = 'user';

    LedgerTransTxt  type;
    LanguageId      languageId;
    TransDate       transDate;
    str 255         formLetterNum;
    Voucher         voucherNum;
    str 255         key1;
    str 40          key2;
    str 40          key3;
    CustVendName    custVendName;
    
    //<GBR>
    Name            name;
    //</GBR>

    TransactionTextContext      transactionTextContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>TransactionTxt</c> object.
    /// </summary>
    /// <param name = "_type">The transaction type.</param>
    /// <param name = "_languageId">The language id.</param>
    /// <param name = "_date">The date.</param>
    /// <param name = "_formLetter">The form letter.</param>
    /// <param name = "_voucher">The voucher.</param>
    /// <param name = "_key1">The first key.</param>
    /// <param name = "_key2">The second key.</param>
    /// <param name = "_key3">The third key.</param>
    /// <returns>A new instance of <c>TransactionTxt</c> object.</returns>
    public static TransactionTxt construct(
             LedgerTransTxt _type = LedgerTransTxt::None,
             LanguageId     _languageId = CompanyInfo::languageId(),
             date           _date       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
             str 255        _formLetter = '',
             Voucher        _voucher    = '',
             str 255        _key1       = '',
             str 40         _key2       = '',
             str 40         _key3       = '')
    {
        return new TransactionTxt(_type, _languageID, _date, _formLetter, _voucher, _key1, _key2, _key3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
             LedgerTransTxt _type = LedgerTransTxt::None,
             LanguageId     _languageId = CompanyInfo::languageId(),
             date           _date       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
             str 255        _formLetter = '',
             Voucher        _voucher    = '',
             str 255        _key1       = '',
             str 40         _key2       = '',
             str 40         _key3       = '')
    {
        type            = _type;
        languageId      = _languageId;
        transDate       = _date;
        formLetterNum   = _formLetter;
        voucherNum      = _voucher;
        key1            = _key1;
        key2            = _key2;
        key3            = _key3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDate</Name>
				<Source><![CDATA[
    public void setDate(date _date)
    {
        transDate = _date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormLetter</Name>
				<Source><![CDATA[
    public void setFormLetter(str 255 _formLetter)
    {
        formLetterNum = _formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKey1</Name>
				<Source><![CDATA[
    public void setKey1(str 255 _key1)
    {
        key1   = _key1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKey2</Name>
				<Source><![CDATA[
    public void setKey2(str 40 _key2)
    {
        key2   = _key2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKey3</Name>
				<Source><![CDATA[
    public void setKey3(str 40 _key3)
    {
        key3   = _key3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguage</Name>
				<Source><![CDATA[
    public void setLanguage(LanguageId _languageId)
    {
        languageId = _languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName_BR</Name>
				<Source><![CDATA[
    [SysObsolete('Please use the setCustVendName() method instead.', false, 25\06\2020)]
	public void setName_BR(Name _name)
    {
        //name = _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an instance of the name that is used to generate a transaction text.
    /// </summary>
    /// <param name="_name">
    /// The instance of the name of the vendor or customer.
    /// </param>
    /// <remarks>
    ///The instance of the name must be one of the support transaction types.
    /// </remarks>
    public void setCustVendName(CustVendName _name)
    {
        custVendName = _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionTextContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an instance of the <c>TransactionTextContext</c> class that is used to generate a transaction
    /// text.
    /// </summary>
    /// <param name="_transactionTextContext">
    /// The instance of the <c>TransactionTextContext</c> class.
    /// </param>
    /// <remarks>
    /// The instance of the <c>TransactionTextContext</c> class must be one of the support transaction
    /// types.
    /// </remarks>
    public void setTransactionTextContext(TransactionTextContext _transactionTextContext)
    {
        transactionTextContext = _transactionTextContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setType</Name>
				<Source><![CDATA[
    public void setType(LedgerTransTxt _type)
    {
        type = _type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucher</Name>
				<Source><![CDATA[
    public void setVoucher(Voucher _voucher)
    {
        voucherNum = _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public TransactionTextLarge txt(TransactionTextLarge   _txt = '')
    {
        TransactTxt             transactTxt;
        TransactionTextLarge    txt = _txt;
        Map                     parameters;
        MapEnumerator           parameterEnumerator;
        int                     parameterNum;
        str                     parameterValue;

        if (!txt)
        {
            // Find the transaction text for the specified type and language.
            select firstonly transactTxt
                where transactTxt.TransactionType == type           &&
                      transactTxt.LanguageId      == languageId;

            if (!transactTxt && languageId != CompanyInfo::languageId())
            {
                // Find the transaction text for the specified type and the language set on the legal entity.
                select firstonly transactTxt
                    where transactTxt.TransactionType == type           &&
                          transactTxt.LanguageId      == CompanyInfo::languageId();
            }

            if (!transactTxt)
            {
                // Find the transaction text for the specified type and the 'user' language.
                select firstonly transactTxt
                    where transactTxt.TransactionType == type           &&
                          transactTxt.LanguageId      == UserLanguage;
            }

            if (!transactTxt.Txt)
            {
                return '';
            }

            txt = transactTxt.Txt;
        }

        // <GBR>
        if (BrazilParameters::isEnabled()  && !TransactionTextParameterSetup::existParameters(transactTxt.RecId))
        {
            if (type == LedgerTransTxt::LedgerConsolidate)
            {
                txt = strReplace(txt, '%6', '%7');
            }

            return strFmt(txt, date2StrUsr(transDate, DateFlags::FormatAll), formLetterNum, voucherNum, key1, key2, key3, custVendName);
        }
        // </GBR>

        if (transactionTextContext &&
            TransactionTextParameterSetup::existParameters(transactTxt.RecId))
        {
            parameters = transactionTextContext.getParameterValues(transactTxt);

            //3 common parameters (date, form, and voucher) shall still be used
            txt = strFmt(txt, date2StrUsr(transDate, DateFlags::FormatAll), formLetterNum, voucherNum);

            parameterEnumerator = parameters.getEnumerator();

            //Replace the parameter with actual value.
            //strfmt() can't used here as the number of parameter is not fixed.
            //The string replace will start with the biggest parameterNum,
            //to avoid the key value is not the prefix of another key value.
            while (parameterEnumerator.moveNext())
            {
                parameterNum    = parameterEnumerator.currentKey();
                parameterValue  = parameterEnumerator.currentValue();
                txt = strReplace(txt, '%' + int2str(-parameterNum), parameterValue);
            }

            return txt;
        }

        if (txt != '' && this.isProjectTxt(type))
        {
            txt = strReplace(txt, '%6', '%7');
            return strFmt(txt, date2StrUsr(transDate, DateFlags::FormatAll), formLetterNum, voucherNum, key1, key2, key3, custVendName);
        }

        return strfmt(txt, date2StrUsr(transDate, DateFlags::FormatAll), formLetterNum, voucherNum, key1, key2, key3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectTxt</Name>
				<Source><![CDATA[
    private boolean isProjectTxt(LedgerTransTxt _type)
    {
        boolean ret = false;

        if (_type == LedgerTransTxt::ProjectInvoiceLedger || _type == LedgerTransTxt::ProjectInvoiceCust || _type == LedgerTransTxt::ProjectCreditNoteLedger
                || _type == LedgerTransTxt::ProjectCreditNoteCust || _type == LedgerTransTxt::ProjectPostingLedger || _type == LedgerTransTxt::ProjectBudgetingLedger)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>