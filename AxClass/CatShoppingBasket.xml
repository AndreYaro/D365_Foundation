<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatShoppingBasket</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CatShoppingBasket
{
    private Name basketName;
    private List basketLines = new List(Types::Class);
    private const int maxLines = 1000;
    private PurchSupplierAuxId purchSupplierAuxId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPurchSupplierAuxId</Name>
				<Source><![CDATA[
    internal PurchSupplierAuxId parmPurchSupplierAuxId(PurchSupplierAuxId _purchSupplierAuxId)
    {
        purchSupplierAuxId = _purchSupplierAuxId;
        return purchSupplierAuxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>CatShoppingBasket</c> class.
    /// </summary>
    /// <param name = "_basketName">
    ///  The name of the shopping basket.
    /// </param>
    /// <returns>
    ///  An instance of the <c>CatShoppingBasket</c> data type. 
    /// </returns>
    public static CatShoppingBasket construct(Name _basketName)
    {
        CatShoppingBasket shoppingBasket = new CatShoppingBasket();
        shoppingBasket.basketName = _basketName;

        return  shoppingBasket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a shopping basket item.
    /// </summary>
    /// <param name="_prodId">
    ///    The product ID.
    /// </param>
    /// <param name="_prodName">
    ///    The product name.
    /// </param>
    /// <param name="_prodDesc">
    ///    The product description.
    /// </param>
    /// <param name="_prodPrice">
    ///    The product price.
    /// </param>
    /// <param name="_prodQty">
    ///    The product quantity.
    /// </param>
    /// <param name="_prodUom">
    ///    The product unit of measure.
    /// </param>
    /// <param name="_prodCurrency">
    ///    The product currency.
    /// </param>
    /// <returns>
    ///    true if the new item is successfully created; otherwise, false.
    /// </returns>
    public boolean newItem(ItemId _prodId, Name _prodName, ItemFreeTxt _prodDesc, Price _prodPrice, Qty _prodQty, UnitOfMeasureSymbol _prodUom, CurrencyCode _prodCurrency)
    {
        boolean                     status;
        CatShoppingBasketDetails    item;

        try
        {
            //assign values to item
            item = CatShoppingBasketDetails::construct();
            item.setProductId(_prodId);
            item.setProductName(_prodName);
            item.setProductDescription(_prodDesc);
            item.setProductCurrency(_prodCurrency);
            item.setProductQuantity(_prodQty);
            item.setProductPrice(_prodPrice);
            item.setProductUnitOfMeasure(_prodUom);
            item.setPurchSupplierAuxId(purchSupplierAuxId);

            if (basketLines.elements() >= maxLines)
            {
                status = checkFailed("@SYS309586");
            }
            else
            {
                //add item to basket
                basketLines.addEnd(item);
                status =  true;
            }
        }
        catch(Exception::Error)
        {
            status = false;
        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBasketLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets basket lines.
    /// </summary>
    /// <returns>
    ///  List of basket lines.
    /// </returns>
    public List getBasketLines()
    {
        return basketLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get name of the basket
    /// </summary>
    /// <returns>
    ///  Name of Basket.
    /// </returns>
    public Name getName()
    {
        return basketName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>