<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerPostingController</c> class is used to post to the general ledger.
/// </summary>
/// <remarks>
///    This class is an abstraction for the ledger posting framework and should be used as the type when a
///    reference to the ledger posting framework is needed.
/// </remarks>
public class LedgerPostingController
{
    LedgerVoucherGroup postingJournalGroup;
    LedgerVoucher postingJournal;
    LedgerVoucherObject postingReference;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a posting journal to the current posting journal group.
    /// </summary>
    /// <param name="_postingJournal">
    ///    The posting journal to add.
    /// </param>
    /// <remarks>
    ///    Use the <c>setPostingJournal</c> method when a posting journal group is not being used.
    /// </remarks>
    public void addJournal(LedgerVoucher _postingJournal)
    {
        if (_postingJournal == null)
        {
            throw error(Error::missingParameter(this));
        }

        if (postingJournalGroup == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        postingJournalGroup.addLedgerVoucher(_postingJournal);

        postingJournal = _postingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a posting reference to the current posting journal.
    /// </summary>
    /// <param name="_postingReference">
    ///    The posting reference to add.
    /// </param>
    /// <remarks>
    ///    The posting reference is required to use the <c>LedgerPostingController</c> class.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_postingReferemce" /> parameter is null.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The posting journal is not set.
    /// </exception>
    public void addReference(LedgerVoucherObject _postingReference)
    {
        if (_postingReference == null)
        {
            throw error(Error::missingParameter(this));
        }

        if (postingJournal == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        postingJournal.addVoucher(_postingReference);

        postingReference = _postingReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a posting transaction to the current object.
    /// </summary>
    /// <param name="_postingTrans">
    ///    The posting transaction to add.
    /// </param>
    /// <remarks>
    ///    A minimum of two posting transactions are required to use the LedgerPostingController class.
    /// </remarks>
    public void addTrans(LedgerVoucherTransObject _postingTrans)
    {
        if (_postingTrans == null)
        {
            throw error(Error::missingParameter(this));
        }

        if (postingJournal == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (postingReference == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        postingReference.addTrans(_postingTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the posting reference for the specified reference number and accounting date.
    /// </summary>
    /// <param name="_referenceNumber">
    /// The reference number of the posting reference to find.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date of the posting reference to find.
    /// </param>
    /// <param name="_postingLayer">
    /// The posting layer of the posting reference to find; optional.
    /// </param>
    /// <returns>
    /// A Boolean value indicating whether the current posting reference was updated.
    /// </returns>
    /// <remarks>
    /// The search for the posting reference is performed in the current posting journal.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The <paramref name="_referenceNumber"/> parameter is an empty string.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The <paramref name="_accountingDate"/> parameter is an empty date.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The posting journal is not set.
    /// </exception>
    public boolean findReference(
        Voucher _referenceNumber,
        TransDate _accountingDate,
        CurrentOperationsTax _postingLayer = postingJournal.lastPostingLayer())
    {
        LedgerVoucherObject searchReference;

        if (_referenceNumber == '' || _accountingDate == dateNull())
        {
            throw error(Error::missingParameter(this));
        }

        if (postingJournal == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        searchReference = postingJournal.findReference(_referenceNumber, _accountingDate, _postingLayer);

        postingReference = searchReference;

        return (searchReference != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    public LedgerVoucher getJournal()
    {
        return postingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalGroup</Name>
				<Source><![CDATA[
    public LedgerVoucherGroup getJournalGroup()
    {
        return postingJournalGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
    public LedgerVoucherObject getReference()
    {
        return postingReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // this override exists to control access
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the journals.
    /// </summary>
    /// <returns>
    /// true if the posting is executed without errors; otherwise, false.
    /// </returns>
    public boolean post()
    {
        boolean success;

        if (postingJournalGroup != null)
        {
            success = postingJournalGroup.end();
        }
        else if (postingJournal != null)
        {
            success = postingJournal.end();
        }
        else
        {
            // nothing to do
            success = true;
        }

        if (success)
        {
            postingJournalGroup = null;
            postingJournal = null;
            postingReference = null;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the posting journal on the current object.
    /// </summary>
    /// <param name="_postingJournal">
    ///    The posting journal to set.
    /// </param>
    /// <remarks>
    ///    This method uses the <c>addPostingJournal</c> method when a posting journal group is used.The post
    ///    method has to be called before another posting journal can be set.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_postingJournal" /> parameter is null.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The posting journal group is already set.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The posting journal is already set.
    /// </exception>
    public void setJournal(LedgerVoucher _postingJournal)
    {
        if (_postingJournal == null)
        {
            return;
        }

        if (postingJournalGroup != null)
        {
            // have to use addJournal
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (postingJournal != null)
        {
            // don't want to lose the current journal
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        postingJournal = _postingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the posting journal group.
    /// </summary>
    /// <param name="_postingJournalGroup">
    ///    The posting journal group.
    /// </param>
    /// <remarks>
    ///    The posting journal group is not required to use the <c>LedgerPostingController</c> class.
    /// </remarks>
    public void setJournalGroup(LedgerVoucherGroup _postingJournalGroup)
    {
        if (_postingJournalGroup == null)
        {
            throw error(Error::missingParameter(this));
        }

        if (postingJournalGroup != null)
        {
            // don't want to lose the current journal group
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        postingJournalGroup = _postingJournalGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the posting reference on the current object.
    /// </summary>
    /// <param name="_postingReference">
    ///    The posting reference to set.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_postingReference" /> parameter is null.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The posting journal is null.
    /// </exception>
    private void setReference(LedgerVoucherObject _postingReference)
    {
        if (_postingReference == null)
        {
            throw error(Error::missingParameter(this));
        }

        if (postingJournal == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        postingReference = _postingReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerPostingController</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerPostingController</c> object.</returns>
    public static LedgerPostingController construct()
    {
        return new LedgerPostingController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForLedgerPostingJournal</Name>
				<Source><![CDATA[
    public static LedgerPostingController newForLedgerPostingJournal(LedgerVoucher _ledgerPostingJournal)
    {
        LedgerPostingController controller;
        LedgerVoucherObject reference;

        controller = LedgerPostingController::construct();

        if (_ledgerPostingJournal != null)
        {
            controller.setJournal(_ledgerPostingJournal);

            reference = _ledgerPostingJournal.findLedgerVoucherObject();
            if (reference != null)
            {
                controller.setReference(reference);
            }
        }

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>