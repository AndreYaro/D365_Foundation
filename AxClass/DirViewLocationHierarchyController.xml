<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirViewLocationHierarchyController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DirViewLocationHierarchyController</c> class is the controller class for the locations view
///    form.
/// </summary>
class DirViewLocationHierarchyController extends HierarchyDesignerBase
{
    Map                                 nodeMap;
    int64                               firstNodeId;
    int64                               maxNodeId;
    int                                 maxLevelLoaded;
    DirViewLocationNode                 selectedNode;
    SecurityRights                      rights;
    DirViewLocationHierarchyUIInterface ui;
    dataAreaId                          originalDataAreaId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a node.
    /// </summary>
    /// <param name = "_nodeId">The ID of the node to get.</param>
    /// <returns>The found node.</returns>
    public DirViewLocationNode getNode(int64 _nodeId)
    {
        if (nodeMap.exists(_nodeId))
        {
            return nodeMap.lookup(_nodeId);
        }
        else
        {
            throw error("@SYS107505");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>dataAreaId</c> value of the selected node.
    /// </summary>
    /// <returns>
    /// The <c>dataAreaId</c> value of the selected node.
    /// </returns>
    public dataAreaId activeDataArea()
    {
        dataAreaId  dataAreaId;

        if (selectedNode && selectedNode.parmDataAreaId())
        {
            dataAreaId = selectedNode.parmDataAreaId();
        }
        else
        {
            dataAreaId = originalDataAreaId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the currently selected node.
    /// </summary>
    public void deleteCurrentNode()
    {
        Common      selectedRecord  = this.getNodeRecordForNode(selectedNode, true);
        dataAreaId  dataAreaId      = selectedNode.parmDataAreaId();
        boolean     nodeWasDeleted  = false;
        CompanyInfo companyInfo;

        if (selectedRecord)
        {
            if (this.isSelectedNodeTypeDataArea())
            {
                if (dataAreaId == originalDataAreaId)
                {
                    throw error("@SYS342208");
                }
                else
                {
                    // Must change to a company other than the one that is about to be deleted
                    changecompany(originalDataAreaId)
                    {
                        if ( appl.canDeleteCompany(dataAreaId) )
                        {
                            ttsbegin;

                            companyInfo = CompanyInfo::findDataArea(dataAreaId, true);
                            if (ui.askBeforeRecordDelete(companyInfo))
                            {
                                companyInfo.delete();
                                nodeWasDeleted = true;
                            }

                            ttscommit;
                        }
                        else
                        {
                            throw error("@SYS330788");
                        }
                    }
                }
            }
            else
            {
                // Delete the record if validation passes
                changecompany(dataAreaId)
                {
                    if (selectedRecord.validateDelete())
                    {
                        if (ui.askBeforeRecordDelete(selectedRecord))
                        {
                            ttsbegin;
                            selectedRecord.delete();
                            nodeWasDeleted = true;
                            ttscommit;
                        }
                    }
                }
            }
        }

        if (nodeWasDeleted)
        {
            ui.refreshTree();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelectedNodeTypeDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if parmNodeType <c>DirViewLocationNodeType</c> value is DataArea.
    /// </summary>
    /// <returns>Result of the check.</returns>
    protected boolean isSelectedNodeTypeDataArea()
    {
        return this.selectedNode.parmNodeType() == DirViewLocationNodeType::DataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the form for editing the current selected node.
    /// </summary>
    public void editCurrentNode()
    {
        this.reportNodeDoubleClick(selectedNode.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an array of the IDs of the children of a node that are at a specific depth.
    /// </summary>
    /// <param name="_id">
    /// The ID of the node for which to get the children.
    /// </param>
    /// <param name="_depth">
    /// The depth from which the children should be taken.
    /// </param>
    /// <returns>
    /// An array with the IDs of all the children of a node.
    /// </returns>
    public Array getDescendants(int64 _id, int _depth)
    {
        Array               childArray;
        Array               retArray = new Array(Types::Int64);
        Array               tempArray;
        DirViewLocationNode node;
        int                 i;
        int                 j;
        int                 retArrayCount = 0;

        node = this.getNode(_id);

        if (!node.parmDescendantsLoaded())
        {
            this.loadNodeDescendants(node, _depth);
        }

        // Recurse through the tree and get the nodes at the specified depth
        childArray = node.parmChildNodeIds();
        for (i=1;i<=childArray.lastIndex();i++)
        {
            if (_depth==1)
            {
                retArrayCount++;
                retArray.value(retArrayCount,childArray.value(i));
            }

            if (_depth > 1)
            {
                // Get the descendants and combine with the already found values
                tempArray = this.getDescendants(childArray.value(i), _depth-1);
                for (j=1;j<=tempArray.lastIndex();j++)
                {
                    retArrayCount++;
                    retArray.value(retArrayCount,tempArray.value(j));
                }
            }
        }

        return retArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an array with the node IDs for which the menu items should be enabled.
    /// </summary>
    /// <param name="_nodeID">
    /// The ID of a node.
    /// </param>
    /// <returns>
    /// An Array with the node IDs for which the menu items should be enabled.
    /// </returns>
    public Array getMenuItemsEnabled(int64 _nodeID)
    {
        // This method is not used by the locations view.
        return new Array(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the text to be displayed on the menu that corresponds to the menu item number.
    /// </summary>
    /// <param name="_menuItemNumber">
    ///    The ID of the menu item.
    /// </param>
    /// <returns>
    ///    The text to be displayed on the menu.
    /// </returns>
    public str getMenuItemText(int _menuItemNumber)
    {
        // The right click menu is not used by the locations view
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next available node ID.
    /// </summary>
    /// <returns>
    /// The next available node ID.
    /// </returns>
    protected int64 getNextNodeId()
    {
        maxNodeId++;
        if (firstNodeId==0)
        {
            firstNodeId = maxNodeId;
        }
        return maxNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name that must be displayed for the node.
    /// </summary>
    /// <param name="_nodeId">
    /// The ID of the node for which to get the name.
    /// </param>
    /// <returns>
    /// The name of the node.
    /// </returns>
    public str getNodeName(int64 _nodeId)
    {
        DirViewLocationNode node = this.getNode(_nodeId);
        return node.parmNodeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeCustomProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the secondary text lines to display for a node.
    /// </summary>
    /// <param name = "_nodeId">The ID of the node for which to get the text lines.</param>
    /// <returns>The secondary text lines to display.</returns>
    public Array getNodeCustomProperties(int64 _nodeId)
    {
        Array arr = new Array(Types::String);

        DirViewLocationNode node = this.getNode(_nodeId);

        if (!this.isNodeTypeDefault(node))
        {
            // Add the node type text
            arr.value(1, strupr(enum2str(node.parmNodeType())));
        }

        return arr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNodeTypeDefault</Name>
				<Source><![CDATA[
    private boolean isNodeTypeDefault(DirViewLocationNode _node)
    {
        return _node.parmNodeType() == DirViewLocationNodeType::Enterprise;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the primary record that the node represents.
    /// </summary>
    /// <param name="_id">
    /// The ID of the node.
    /// </param>
    /// <returns>
    /// The record that the node represents.
    /// </returns>
    /// <remarks>
    /// The record type will depend on the node type.
    /// </remarks>
    public Common getNodeRecord(int64 _id)
    {
        DirViewLocationNode node = this.getNode(_id);
        return this.getNodeRecordForNode(node);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCommonBasedOnNodeParmNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns and returns Common depending on the NodeParmNodeType <c>DirViewLocationNodeType</c> value.
    /// </summary>
    /// <param name="_node">
    /// The node for which to get the record.
    /// </param>
    /// <returns>
    /// The record that the node represents.
    /// </returns>
    protected Common assignCommonBasedOnNodeParmNodeType(DirViewLocationNode _node)
    {
        Common              common;
        DataArea            dataArea;
        InventSite          inventSite;
        InventLocation      inventLocation;
        ProdUnitTable       prodUnitTable;
        WrkCtrResourceGroup wrkCtrResourceGroup;
        WrkCtrTable         wrkCtrTable;
        WMSAisle            wmsAisle;
        WMSLocation         wmsLocation;

        switch (_node.parmNodeType())
        {
            case DirViewLocationNodeType::Enterprise:
                //No record to associate with the organization
                break;

            case DirViewLocationNodeType::DataArea:

                select firstonly dataArea
                    where dataArea.RecId == _node.parmRefRecId();

                common = dataArea;
                break;

            case DirViewLocationNodeType::InventSite:
                inventSite.company(_node.parmDataAreaId());

                select firstonly inventSite
                    where inventSite.RecId == _node.parmRefRecId();

                common = inventSite;
                break;

            case DirViewLocationNodeType::InventLocation:
                inventLocation.company(_node.parmDataAreaId());

                select firstonly inventLocation
                    where inventLocation.RecId == _node.parmRefRecId();

                common = inventLocation;
                break;

            case DirViewLocationNodeType::ProdUnit:
                prodUnitTable.company(_node.parmDataAreaId());

                select firstonly prodUnitTable
                    where prodUnitTable.RecId == _node.parmRefRecId();

                common = prodUnitTable;
                break;

            case DirViewLocationNodeType::WrkCtrResourceGroup:
                wrkCtrResourceGroup.company(_node.parmDataAreaId());

                select firstonly wrkCtrResourceGroup
                    where wrkCtrResourceGroup.RecId == _node.parmRefRecId();

                common = wrkCtrResourceGroup;
                break;

            case DirViewLocationNodeType::WrkCtrTableLocation:
            case DirViewLocationNodeType::WrkCtrTableMachine:
            case DirViewLocationNodeType::WrkCtrTablePersonnel:
            case DirViewLocationNodeType::WrkCtrTableTool:
            case DirViewLocationNodeType::WrkCtrTableVendor:
                wrkCtrTable.company(_node.parmDataAreaId());

                select firstonly wrkCtrTable
                    where wrkCtrTable.RecId == _node.parmRefRecId();

                common = wrkCtrTable;
                break;

            case DirViewLocationNodeType::WMSAisle:
                wmsAisle.company(_node.parmDataAreaId());

                select firstonly wmsAisle
                    where wmsAisle.RecId == _node.parmRefRecId();

                common = wmsAisle;
                break;

            case DirViewLocationNodeType::WMSLocation:
                wmsLocation.company(_node.parmDataAreaId());

                select firstonly wmsLocation
                    where wmsLocation.RecId == _node.parmRefRecId();

                common = wmsLocation;
                break;
            default:
                common = null;
        }
                
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeRecordForNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the primary record that the node represents.
    /// </summary>
    /// <param name="_node">
    /// The node for which to get the record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The record that the node represents.
    /// </returns>
    protected Common getNodeRecordForNode(DirViewLocationNode _node, boolean _forupdate = false)
    {
        Common              common;

        common = this.assignCommonBasedOnNodeParmNodeType(_node);
        common.selectForUpdate(_forupdate);
        
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type ID of a node.
    /// </summary>
    /// <param name="_nodeId">
    /// The ID of the node for which to get the type.
    /// </param>
    /// <returns>
    /// The node type ID.
    /// </returns>
    public int getNodeType(int64 _nodeId)
    {
        DirViewLocationNode node = this.getNode(_nodeId);
        return enum2int(node.parmNodeType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of menu items to display when the user right-clicks on a node.
    /// </summary>
    /// <returns>
    /// The number of menu items to display.
    /// </returns>
    public int getNumberOfMenuItems()
    {
        // The right click menu is not used by the locations view
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of a nodes parent node.
    /// </summary>
    /// <param name="_id">
    /// The ID of the node for which to get the parent.
    /// </param>
    /// <returns>
    /// The ID of the parent node.
    /// </returns>
    public int64 getParentID(int64 _id)
    {
        DirViewLocationNode node = this.getNode(_id);
        return node.parmParentNodeId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the root node.
    /// </summary>
    /// <returns>
    /// The ID of the root node.
    /// </returns>
    public int64 getRootID()
    {
        return firstNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record for the currently selected node.
    /// </summary>
    /// <returns>
    /// The record for the currently selected node.
    /// </returns>
    public Common getSelectedRecord()
    {
        return this.getNodeRecordForNode(selectedNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAsParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the given parent-child relationship is valid.
    /// </summary>
    /// <param name="_child">
    /// The ID of the child node.
    /// </param>
    /// <param name="_parent">
    /// The ID of the parent node.
    /// </param>
    /// <returns>
    /// true if the parent-child relationship is valid; otherwise, false.
    /// </returns>
    public boolean hasAsParent(int64 _child, int64 _parent)
    {
        DirViewLocationNode node = this.getNode(_child);

        if (node.parmParentNodeId() == _parent)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller and loads the Enterprise node.
    /// </summary>
    public void init()
    {
        DirViewLocationNode node;

        nodeMap = new Map(Types::Int64, Types::Class);
        firstNodeId = 0;

        // Initialize the first record
        node = DirViewLocationNode::newParameters(this.getNextNodeId(), DirViewLocationNodeType::Enterprise, -1, 0, "@SYS38151", curext());
        this.insertNewNodeAndUpdateParent(node);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventLocationFromCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventLocation</c> record based on the currently selected node.
    /// </summary>
    /// <param name="_inventLocation">
    /// The record to initialize.
    /// </param>
    public void initInventLocationFromCurrentNode(InventLocation _inventLocation)
    {
        InventSite      inventSite;

        if (selectedNode.parmNodeType() == DirViewLocationNodeType::InventSite)
        {
            inventSite = this.getNodeRecordForNode(selectedNode);
            _inventLocation.InventSiteId = inventSite.SiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdUnitTableFromCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProdUnitTable</c> record based on the currently selected node.
    /// </summary>
    /// <param name="_prodUnitTable">
    /// The record to initialize.
    /// </param>
    public void initProdUnitTableFromCurrentNode(ProdUnitTable _prodUnitTable)
    {
        InventSite      inventSite;

        if (selectedNode.parmNodeType() == DirViewLocationNodeType::InventSite )
        {
            inventSite = this.getNodeRecordForNode(selectedNode);
            _prodUnitTable.ParentSiteId = inventSite.SiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSAisleFromCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>WMSAisle</c> record based on the currently selected node.
    /// </summary>
    /// <param name="_wmsAisle">
    /// The record to initialize.
    /// </param>
    public void initWMSAisleFromCurrentNode(WMSAisle _wmsAisle)
    {
        InventLocation  inventLocation;

        if (selectedNode.parmNodeType() == DirViewLocationNodeType::InventLocation )
        {
            inventLocation = this.getNodeRecordForNode(selectedNode);
            _wmsAisle.InventLocationId = inventLocation.InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSLocationFromCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>WMSLocation</c> record based on the currently selected node.
    /// </summary>
    /// <param name="_wmsLocation">
    /// The record to initialize.
    /// </param>
    public void initWMSLocationFromCurrentNode(WMSLocation _wmsLocation)
    {
        WMSAisle    wmsAisle;

        if (selectedNode.parmNodeType() == DirViewLocationNodeType::WMSAisle )
        {
            wmsAisle = this.getNodeRecordForNode(selectedNode);
            _wmsLocation.InventLocationId = wmsAisle.InventLocationId;
            _wmsLocation.AisleId = wmsAisle.AisleId;
            _wmsLocation.wmsLocationId = _wmsLocation.makeName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWrkCtrResourceGroupFromCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>WrkCtrResourceGroup</c> record based on the currently selected node.
    /// </summary>
    /// <param name="_wrkCtrResourceGroup">
    /// The record to initialize.
    /// </param>
    public void initWrkCtrResourceGroupFromCurrentNode(WrkCtrResourceGroup _wrkCtrResourceGroup)
    {
        ProdUnitTable           prodUnitTable;

        if (selectedNode.parmNodeType() == DirViewLocationNodeType::ProdUnit)
        {
            prodUnitTable = this.getNodeRecordForNode(selectedNode);
            _wrkCtrResourceGroup.ProdUnitId = prodUnitTable.ProdUnitId;
            _wrkCtrResourceGroup.SiteId = prodUnitTable.ParentSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewNodeAndLoadDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new node, updates the parent node to point to the new node, and loads the descendants of
    /// the node.
    /// </summary>
    /// <param name="_node">
    /// The node to insert.
    /// </param>
    /// <param name="_depth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_parentNode">
    /// The parent node.
    /// </param>
    /// <param name="_common">
    /// A record that represents the node.
    /// </param>
    protected void insertNewNodeAndLoadDescendants(DirViewLocationNode _node, int _depth, DirViewLocationNode _parentNode = null, Common _common = null)
    {
        this.insertNewNodeAndUpdateParent(_node, _parentNode);
        this.loadNodeDescendants(_node, _depth - 1, _common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewNodeAndUpdateParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a node into the internal map and updates the parent node to point to the child.
    /// </summary>
    /// <param name="_node">
    /// The node to insert.
    /// </param>
    /// <param name="_parentNode">
    /// The parent node of the node; optional.
    /// </param>
    protected void insertNewNodeAndUpdateParent(DirViewLocationNode _node, DirViewLocationNode _parentNode = null)
    {
        nodeMap.insert(_node.parmId(), _node);
        if (_parentNode)
        {
            _parentNode.addChild(_node.parmId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataAreas</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all company information as nodes.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    protected void loadDataAreas(DirViewLocationNode _parentNode, int _loadDepth )
    {
        DataArea                dataArea;
        boolean                 hasMultiCompanyAccess;
        DirViewLocationNode     node;

        hasMultiCompanyAccess = hasMenuItemAccess(menuitemDisplayStr(SysDataAreaSelect), MenuItemType::Display);

        dataArea.recordLevelSecurity(true);

        // Get all companies in the enterprise
        while select crosscompany dataArea
            where dataArea.IsVirtual == false &&
                (hasMultiCompanyAccess || dataArea.Id == curext())
        {
            // Create new hierarchy node
            node = DirViewLocationNode::newParameters(this.getNextNodeId(), DirViewLocationNodeType::DataArea,_parentNode.parmId(), dataArea.RecId, dataArea.Id, dataArea.Id);

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, dataArea);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInventLocationFromSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the warehouses that are connected to a site.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent site node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_inventSite">
    /// The parent site record.
    /// </param>
    protected void loadInventLocationFromSite(DirViewLocationNode _parentNode, int _loadDepth, InventSite _inventSite)
    {
        InventLocation          inventLocation;
        DirViewLocationNode     node;

        inventLocation.company(_parentNode.parmDataAreaId());
        inventLocation.recordLevelSecurity(true);

        while select inventLocation
            order by inventLocation.InventLocationId
            where inventLocation.InventSiteId == _inventSite.SiteId
        {
            // Create new hierarchy node
            node = DirViewLocationNode::newParameters(this.getNextNodeId(), DirViewLocationNodeType::InventLocation,
                                                      _parentNode.parmId(), inventLocation.RecId, inventLocation.InventLocationId, _parentNode.parmDataAreaId());

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, inventLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNodeDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all descendants to a given node.
    /// </summary>
    /// <param name="_node">
    /// The node for which to load the descendants.
    /// </param>
    /// <param name="_depth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_common">
    /// The record that represents the node; optional.
    /// </param>
    protected void loadNodeDescendants(DirViewLocationNode _node, int _depth, Common _common = null)
    {
        Common common = _common;

        if (_depth <= 0)
        {
            return;
        }

        if (!common)
        {
            common = this.getNodeRecordForNode(_node);
        }

        this.loadNodeData(_node, _depth, common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNodeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a given node.
    /// </summary>
    /// <param name="_node">
    /// The node for which to load the descendants.
    /// </param>
    /// <param name="_depth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_common">
    /// The record that represents the node.
    /// </param>
    protected void loadNodeData(DirViewLocationNode _node, int _depth, Common _common)
    {
        switch (_node.parmNodeType())
        {
            case DirViewLocationNodeType::Enterprise:
                this.loadDataAreas(_node, _depth);
                break;
            case DirViewLocationNodeType::DataArea:
                this.loadSitesFromDataArea(_node, _depth);
                break;
            case DirViewLocationNodeType::InventSite:
                this.loadInventLocationFromSite(_node, _depth, _common);
                this.loadProdUnitFromSite(_node, _depth, _common);
                break;
            case DirViewLocationNodeType::ProdUnit:
                this.loadResourceGroupFromProdUnit(_node, _depth, _common);
                break;
            case DirViewLocationNodeType::WrkCtrResourceGroup:
                this.loadResourcesFromResourceGroup(_node, _depth, _common);
                break;
            case DirViewLocationNodeType::InventLocation:
                this.loadWMSAisleFromInventLocation(_node, _depth, _common);
                break;
            case DirViewLocationNodeType::WMSAisle:
                this.loadWMSLocationFromWMSAisle(_node, _depth, _common);
                break;
        }

        _node.parmDescendantsLoaded(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdUnitFromSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the production units for a site.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent site node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_inventSite">
    /// The parent site record.
    /// </param>
    protected void loadProdUnitFromSite(DirViewLocationNode _parentNode, int _loadDepth, InventSite _inventSite)
    {
        ProdUnitTable       prodUnitTable;
        DirViewLocationNode node;

        prodUnitTable.company(_parentNode.parmDataAreaId());
        prodUnitTable.recordLevelSecurity(true);

        while select ProdUnitId, RecId from prodUnitTable
            order by prodUnitTable.ProdUnitId
            where prodUnitTable.ParentSiteId == _inventSite.SiteId
        {
            // Create new hierarchy node
            node = DirViewLocationNode::newParameters(this.getNextNodeId(), DirViewLocationNodeType::ProdUnit,_parentNode.parmId(), prodUnitTable.RecId, prodUnitTable.ProdUnitId, _parentNode.parmDataAreaId());

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, prodUnitTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadResourceGroupFromProdUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the resource groups for a production unit.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent production unit node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_prodUnitTable">
    /// The parent production unit record.
    /// </param>
    protected void loadResourceGroupFromProdUnit(DirViewLocationNode _parentNode, int _loadDepth, ProdUnitTable _prodUnitTable)
    {
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        DirViewLocationNode         node;

        wrkCtrResourceGroup.company(_parentNode.parmDataAreaId());
        wrkCtrResourceGroup.recordLevelSecurity(true);

        while select wrkCtrResourceGroup
            order by wrkCtrResourceGroup.WrkCtrId
            where wrkCtrResourceGroup.ProdUnitId  == _prodUnitTable.ProdUnitId
        {
            // Create new hierarchy node
            node = DirViewLocationNode::newParameters(this.getNextNodeId(), DirViewLocationNodeType::WrkCtrResourceGroup ,_parentNode.parmId(), wrkCtrResourceGroup.RecId, wrkCtrResourceGroup.WrkCtrId,
                                                      _parentNode.parmDataAreaId());

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, wrkCtrResourceGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadResourcesFromResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the resources for a resource group.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent resource group node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_wrkCtrResourceGroup">
    /// The parent resource group record.
    /// </param>
    protected void loadResourcesFromResourceGroup(DirViewLocationNode _parentNode, int _loadDepth, WrkCtrResourceGroup _wrkCtrResourceGroup)
    {
        WrkCtrTable                 wrkCtrTableItem;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;

        wrkCtrTableItem.company(_parentNode.parmDataAreaId());
        wrkCtrResourceGroupResource.company(_parentNode.parmDataAreaId());

        wrkCtrTableItem.recordLevelSecurity(true);
        wrkCtrResourceGroupResource.recordLevelSecurity(true);

        while select wrkCtrTableItem
            order by wrkCtrTableItem.WrkCtrId
            exists join wrkCtrResourceGroupResource
            where wrkCtrResourceGroupResource.ResourceGroup     == _wrkCtrResourceGroup.RecId
               && wrkCtrTableItem.WrkCtrId                      == wrkCtrResourceGroupResource.WrkCtrId
        {
            // Create new hierarchy node where the type depends on the resource type
            DirViewLocationNodeType nodeType = this.convertsNodeTypeDependingOnResourceType(wrkCtrTableItem);
            DirViewLocationNode node = DirViewLocationNode::newParameters(this.getNextNodeId(), nodeType,_parentNode.parmId(), wrkCtrTableItem.RecId, wrkCtrTableItem.WrkCtrId, _parentNode.parmDataAreaId());

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, wrkCtrTableItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertsNodeTypeDependingOnResourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts node type depending on the resource type.
    /// </summary>
    /// <param name = "_wrkCtrTableItem">A <c>WrkCtrTable</c> record.</param>
    /// <returns>A <c>DirViewLocationNodeType</c> value; default value Enterprise.</returns>
    protected DirViewLocationNodeType convertsNodeTypeDependingOnResourceType(WrkCtrTable _wrkCtrTableItem)
    {
        switch (_wrkCtrTableItem.WrkCtrType)
        {
            case WrkCtrType::Location:
                return DirViewLocationNodeType::WrkCtrTableLocation;
            case WrkCtrType::Machine:
                return DirViewLocationNodeType::WrkCtrTableMachine;
            case WrkCtrType::Personnel:
                return DirViewLocationNodeType::WrkCtrTablePersonnel;
            case WrkCtrType::Tool:
                return DirViewLocationNodeType::WrkCtrTableTool;
            case WrkCtrType::Vendor:
                return DirViewLocationNodeType::WrkCtrTableVendor;
        }

        return DirViewLocationNodeType::Enterprise;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSitesFromDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the sites for a company.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent data area node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    protected void loadSitesFromDataArea(DirViewLocationNode _parentNode, int _loadDepth)
    {
        InventSite          inventSite;
        DirViewLocationNode node;

        inventSite.company(_parentNode.parmDataAreaId());
        inventSite.recordLevelSecurity(true);

        while select inventSite
            order by SiteId
        {
            // Create new hierarchy node
            node = DirViewLocationNode::newParameters(this.getNextNodeId(), DirViewLocationNodeType::InventSite,_parentNode.parmId(), inventSite.RecId, inventSite.SiteId, _parentNode.parmDataAreaId());

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, inventSite);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWMSAisleFromInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the aisles for a warehouse.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent warehouse node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_inventLocation">
    /// The parent warehouse record.
    /// </param>
    protected void loadWMSAisleFromInventLocation(DirViewLocationNode _parentNode, int _loadDepth, InventLocation _inventLocation)
    {
        WMSAisle            wmsAisle;
        DirViewLocationNode node;

        wmsAisle.company(_parentNode.parmDataAreaId());
        wmsAisle.recordLevelSecurity(true);

        while select wmsAisle
            order by wmsAisle.AisleId
            where wmsAisle.InventLocationId == _inventLocation.InventLocationId
        {
            // Create new hierarchy node
            node = DirViewLocationNode::newParameters(this.getNextNodeId(),DirViewLocationNodeType::WMSAisle,_parentNode.parmId(), wmsAisle.RecId, wmsAisle.AisleId, _parentNode.parmDataAreaId());

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, wmsAisle);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWMSLocationFromWMSAisle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all inventory locations for an aisle.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent aisle node.
    /// </param>
    /// <param name="_loadDepth">
    /// The depth to which data should be loaded.
    /// </param>
    /// <param name="_wmsAisle">
    /// The parent aisle record.
    /// </param>
    protected void loadWMSLocationFromWMSAisle(DirViewLocationNode _parentNode, int _loadDepth, WMSAisle _wmsAisle)
    {
        DirViewLocationNode node;
        WMSLocation         wmsLocation;

        wmsLocation.company(_parentNode.parmDataAreaId());
        wmsLocation.recordLevelSecurity(true);

        while select wmsLocation
            order by wmsLocation.wmsLocationId
            where
                wmsLocation.AisleId == _wmsAisle.AisleId &&
                wmsLocation.InventLocationId == _wmsAisle.InventLocationId
        {
            // Create new hierarchy node
            node = DirViewLocationNode::newParameters(this.getNextNodeId(), DirViewLocationNodeType::WMSLocation,
                                                      _parentNode.parmId(), wmsLocation.RecId, wmsLocation.wmsLocationId, _parentNode.parmDataAreaId());

            // Insert the new node and iterate children
            this.insertNewNodeAndLoadDescendants(node, _loadDepth - 1, _parentNode, wmsLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        rights              = SecurityRights::construct();
        originalDataAreaId  = curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUI</Name>
				<Source><![CDATA[
    public DirViewLocationHierarchyUIInterface parmUI(DirViewLocationHierarchyUIInterface _ui = ui)
    {
        ui = _ui;
        return ui;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportClickCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports how many clicks have been performed.
    /// </summary>
    /// <param name="_clickcount">
    /// The number of clicks.
    /// </param>
    public void reportClickCount(int _clickcount)
    {
        // This method is not used by the locations view.
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFatalError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reports that a fatal error has occurred in the control.
    /// </summary>
    public void reportFatalError()
    {
        info("@SYS107505");
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportNodeDoubleClick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports that a node has been double-clicked.
    /// </summary>
    /// <param name="_nodeId">
    /// The ID of the clicked node.
    /// </param>
    public void reportNodeDoubleClick(int64 _nodeId)
    {
        if (!selectedNode || selectedNode.parmId() != _nodeId)
        {
            this.reportSelectedNode(_nodeId);
        }

        ui.showRecordForm(this.getNodeRecordForNode(selectedNode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports a node as selected by a single click.
    /// </summary>
    /// <param name="_id">
    /// The ID of the node to select.
    /// </param>
    public void reportSelectedNode(int64 _id)
    {
        DirViewLocationNode     node;
        Common                  common;
        DirViewLocationNodeType nodeType;
        dataAreaId              dataAreaId;

        if (!this.validNode(_id))
        {
            return;
        }

        if (selectedNode && selectedNode.parmId() == _id)
        {
            // The same node is selected again so no need to do anything
            return;
        }

        node = nodeMap.lookup(_id);
        nodeType = node.parmNodeType();
        dataAreaId = node.parmDataAreaId();
        common = this.getNodeRecordForNode(node);

        // Save current active node
        selectedNode = node;

        // Informn the UI to refresh the active record buffers
        ui.activeRecordChanged(common);

        // Make the UI enable/disable functions based on selected node type and access rights
        ui.deleteRecordEnable(              (nodeType == DirViewLocationNodeType::DataArea
                                             && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(OMLegalEntities)) >= AccessRight::Delete)
                                         || (nodeType == DirViewLocationNodeType::InventSite
                                             && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(InventSite)) >= AccessRight::Delete)
                                         || (nodeType == DirViewLocationNodeType::InventLocation
                                             && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(InventLocations)) >= AccessRight::Delete)
                                         || (nodeType == DirViewLocationNodeType::WMSAisle
                                             && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(WMSAisle)) >= AccessRight::Delete)
                                         || (nodeType == DirViewLocationNodeType::WMSLocation
                                             && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(WMSLocation)) >= AccessRight::Delete)
                                         || (nodeType == DirViewLocationNodeType::ProdUnit
                                             && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(ProdUnitTable)) >= AccessRight::Delete)
                                         || (nodeType == DirViewLocationNodeType::WrkCtrResourceGroup
                                             && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(WrkCtrResourceGroup)) >= AccessRight::Delete)
                                         || ((   nodeType == DirViewLocationNodeType::WrkCtrTableLocation
                                              || nodeType == DirViewLocationNodeType::WrkCtrTableMachine
                                              || nodeType == DirViewLocationNodeType::WrkCtrTablePersonnel
                                              || nodeType == DirViewLocationNodeType::WrkCtrTableTool
                                              || nodeType == DirViewLocationNodeType::WrkCtrTableVendor)
                                            && rights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(WrkCtrTable)) >= AccessRight::Delete)
                                            );

        ui.newCompanyEnable(                nodeType == DirViewLocationNodeType::Enterprise );

        ui.newSiteEnable(                   nodeType == DirViewLocationNodeType::DataArea);

        ui.newWarehouseEnable(              nodeType == DirViewLocationNodeType::InventSite);

        ui.newProdUnitEnable(               nodeType == DirViewLocationNodeType::InventSite);

        ui.newResourceGroupEnable(          nodeType == DirViewLocationNodeType::ProdUnit);

        ui.newResourceEnable(               nodeType == DirViewLocationNodeType::WrkCtrResourceGroup);

        ui.newInventoryAisleEnable(         nodeType == DirViewLocationNodeType::InventLocation);

        ui.newLocationEnable(               nodeType == DirViewLocationNodeType::WMSAisle);

        ui.viewProductsEnable(              nodeType == DirViewLocationNodeType::Enterprise);

        ui.viewProductsPerCompanyEnable(    nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite
                                            || nodeType == DirViewLocationNodeType::ProdUnit
                                            || nodeType == DirViewLocationNodeType::WrkCtrResourceGroup
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableLocation
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableMachine
                                            || nodeType == DirViewLocationNodeType::WrkCtrTablePersonnel
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableTool
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableVendor
                                            || nodeType == DirViewLocationNodeType::InventLocation
                                            || nodeType == DirViewLocationNodeType::WMSAisle
                                            || nodeType == DirViewLocationNodeType::WMSLocation);

        ui.viewSitesEnable(                 nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite);

        ui.viewWarehousesEnable(            nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite
                                            || nodeType == DirViewLocationNodeType::InventLocation);

        ui.viewProductionUnitsEnable(       nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite
                                            || nodeType == DirViewLocationNodeType::ProdUnit);

        ui.viewResourceGroupsEnable(        nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite
                                            || nodeType == DirViewLocationNodeType::ProdUnit
                                            || nodeType == DirViewLocationNodeType::WrkCtrResourceGroup);

        ui.viewResourcesEnable(             nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite
                                            || nodeType == DirViewLocationNodeType::ProdUnit
                                            || nodeType == DirViewLocationNodeType::WrkCtrResourceGroup
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableLocation
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableMachine
                                            || nodeType == DirViewLocationNodeType::WrkCtrTablePersonnel
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableTool
                                            || nodeType == DirViewLocationNodeType::WrkCtrTableVendor);

        ui.viewInventoryAislesEnable(       nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite
                                            || nodeType == DirViewLocationNodeType::InventLocation
                                            || nodeType == DirViewLocationNodeType::WMSAisle);

        ui.viewLocationsEnable(             nodeType == DirViewLocationNodeType::DataArea
                                            || nodeType == DirViewLocationNodeType::InventSite
                                            || nodeType == DirViewLocationNodeType::InventLocation
                                            || nodeType == DirViewLocationNodeType::WMSAisle
                                            || nodeType == DirViewLocationNodeType::WMSLocation);

        ui.viewSiteAddressEnable(           nodeType == DirViewLocationNodeType::InventSite);

        ui.viewWarehouseAddressEnable(      nodeType == DirViewLocationNodeType::InventLocation);

        ui.viewWarehouseTransportEnable(    nodeType == DirViewLocationNodeType::InventLocation);

        ui.viewWarehouseExtCodesEnable(     nodeType == DirViewLocationNodeType::InventLocation);

        ui.viewWarehouseCopyEnable(         nodeType == DirViewLocationNodeType::InventLocation);

        ui.viewWarehouseWizardEnable(       nodeType == DirViewLocationNodeType::InventLocation);

        ui.viewLocationMaintenanceEnable(   nodeType == DirViewLocationNodeType::WMSAisle);

        ui.viewLocationCopyAisleEnable(     nodeType == DirViewLocationNodeType::WMSAisle);

        ui.viewLocationCopyRackEnable(      nodeType == DirViewLocationNodeType::WMSLocation);

        ui.editRecordEnable(                nodeType != DirViewLocationNodeType::Enterprise );
    }

]]></Source>
			</Method>
			<Method>
				<Name>validNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a node ID is valid.
    /// </summary>
    /// <param name="_id">
    /// The node ID to check.
    /// </param>
    /// <returns>
    /// true if the node is valid; otherwise, false.
    /// </returns>
    public boolean validNode(int64 _id)
    {
        return nodeMap.exists(_id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>DirViewLocationHierarchyController</c> class.
    /// </summary>
    /// <param name="_ui">
    /// An instance of the UI interface.
    /// </param>
    /// <returns>
    /// A new instance of the <c>DirViewLocationHierarchyController</c> class.
    /// </returns>
    public static DirViewLocationHierarchyController construct(DirViewLocationHierarchyUIInterface _ui)
    {
        DirViewLocationHierarchyController  controller = new DirViewLocationHierarchyController();
        controller.parmUI(_ui);
        controller.init();
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>