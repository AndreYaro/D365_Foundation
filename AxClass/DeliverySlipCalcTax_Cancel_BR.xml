<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DeliverySlipCalcTax_Cancel_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the taxes for delivery slips in cancelling scenario.
/// </summary>
class DeliverySlipCalcTax_Cancel_BR extends DeliverySlipCalcTax__DeliverySlip_BR
{
    FiscalDocument_BR       fiscalDocument;
    FiscalDocumentLine_BR   fiscalDocumentLine;
    SalesParmTable          salesParmTable;
    QueryRun                queryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query to traverse the lines to calculates the taxes for.
    /// </summary>
    public void initCursor()
    {
        Query     query = new Query();

        query.addDataSource(tablenum(FiscalDocumentLine_BR));
        query.dataSourceTable(tablenum(FiscalDocumentLine_BR)).addRange(fieldnum(FiscalDocumentLine_BR, FiscalDocument)).value(queryValue(fiscalDocument.recId));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance for a given <c>FiscalDocument_BR</c> and related <c>SalesParmTable</c> buffer.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> related to the delivery slip to be canceled.
    /// </param>
    /// <param name="_salesParmTable">
    /// <c>SalesParmTable</c> related to the delivery slip to be canceled.
    /// </param>
    public void new(FiscalDocument_BR _fiscalDocument, SalesParmTable _salesParmTable)
    {
        fiscalDocument = _fiscalDocument;
        salesParmTable = _salesParmTable;

        super(_salesParmTable.salesTable(), SalesUpdate::DeliverNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances to the next line in the query and returns it if it exists.
    /// </summary>
    /// <returns>
    /// A buffer of the next line in the query if it exists; null buffer if it doesn't.
    /// </returns>
    public Common nextLine()
    {
        CustPackingSlipTrans packingSlipTrans;

        salesLine = null;
        fiscalDocumentLine = null;
        lineExist = false;

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(FiscalDocumentLine_BR)))
            {
                fiscalDocumentLine = queryRun.get(tableNum(FiscalDocumentLine_BR));
                packingSlipTrans = custpackingsliptrans::findRecId(fiscalDocumentLine.RefRecId);
                salesLine = packingSlipTrans.salesLine();
                lineExist = true;
                break;
            }
        }
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsParmTransContract::newFromSalesParmTable(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount of the current line to calculate the taxes on.
    /// </summary>
    /// <returns>
    /// The amount of the current line to calculate the taxes on.
    /// </returns>
    public AmountCur transLineAmount()
    {
        return -(fiscaldocumentline.LineAmount - fiscalDocumentLine.LineDiscount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item quantity of the current line in the query.
    /// </summary>
    /// <returns>
    /// The item quantity of the current line in the query.
    /// </returns>
    public SalesQty transQty()
    {
        return fiscaldocumentline.Quantity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>