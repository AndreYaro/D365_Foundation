<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplSettleReverseManual_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplSettleReverseManual_RU extends EmplSettleReverse_RU
{
    Set settlementSet;
    #define.Value20(20)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery(EmplAccount_RU _emplAccount)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
        int                  i;
        SetEnumerator        settlementSetEnumerator;

        super(_emplAccount);

        qbds = settlementQueryRun.query().dataSourceTable(tablenum(EmplSettlement_RU));
        qbr  = qbds.findRange(fieldnum(EmplSettlement_RU, TransDate));

        if (qbr)
        {
            qbr.value(SysQuery::valueUnlimited());
        }

        settlementSetEnumerator = settlementSet.getEnumerator();

        while (settlementSetEnumerator.moveNext())
        {
            if (! (i mod #Value20))
            {
                qbr = qbds.addRange(fieldnum(EmplSettlement_RU, RecId));
                qbr.status(RangeStatus::Locked);
            }
            qbr.value(queryRangeConcat(qbr.value(), queryValue(settlementSetEnumerator.current())));
            i ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check(EmplAccount_RU _emplAccount, TransDate _transDate, EmplAdvanceId_RU _advanceId)
    {
        EmplSettlement_RU    emplSettlement;
        EmplTrans_RU         emplTrans;

        select firstonly emplSettlement
            where emplSettlement.TransDate > _transDate
        exists join emplTrans
            where emplTrans.EmplAccount      == _emplAccount
              && (emplSettlement.DebitRecId  == emplTrans.RecId
              ||  emplSettlement.CreditRecId == emplTrans.RecId);

        if (emplSettlement)
        {
            return checkFailed(strfmt("@GLS109129", _emplAccount, emplSettlement.TransDate));
        }

        if (_advanceId)
        {
            select firstonly emplSettlement
                where emplSettlement.TransDate == _transDate
            exists join emplTrans
                where emplTrans.EmplAccount      == _emplAccount
                   && emplSettlement.CreditRecId == emplTrans.RecId
                   && emplTrans.AdvanceId
                   && emplTrans.AdvanceId        >  _advanceId;

            if (emplSettlement)
            {
                return checkFailed(strfmt("@GLS110484", _advanceId));
            }
        }

        if (!LedgerFiscalCalendar::checkModuleIsOpen(
            SysModule::Purch,
            _transDate,
            LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                Ledger::fiscalCalendar(CompanyInfo::current()),
                _transDate,
                FiscalPeriodType::Operating)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementSet</Name>
				<Source><![CDATA[
    public Set parmSettlementSet(Set _settlementSet = settlementSet)
    {
        settlementSet = _settlementSet;
        return settlementSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>