<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_AssetsDisposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_AssetsDisposal extends RTax25RegCalc_Assets implements BatchRetryable
{
     Set  recIdSet;
#define.ParameterCode3(3)
    #define.ParameterCode4(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
    protected AmountMST tableOperation()
    {
        AmountMST                   amountDepreciation, amountBase, amountSale, amountRetire, amountTmp, amountTmpTotal;
        TransDate                   dateTrans;
        RefRecId                    refChildRecId;
        Range                       parameter = strltrim(strrtrim(RTax25RegisterParameters::find(registerId, #ParameterCode3).Parameter));
        RTax25ProfitId              profitId  = strltrim(strrtrim(RTax25RegisterParameters::find(registerId, #ParameterCode4).Parameter));
        RTax25RegisterTrans_TangibleAssetInfo   tangibleAssetInfo;
        RTax25RegisterTrans_IntangibleAssetInfo intangibleAssetInfo;
        RTax25RegisterTrans_NonInventIssue      nonInventIssue;
        ;
    
        refChildRecId = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::TangibleAssetInfo, registerJournalTrans).RecId;
        select firstonly InitialCost, DeprSum from tangibleAssetInfo
            where tangibleAssetInfo.BlockType             == ReportBlockType::Body &&
                  tangibleAssetInfo.JournalTransRefRecId  == refChildRecId         &&
                  tangibleAssetInfo.AssetId               == rAssetTable.AccountNum;
        amountBase         = tangibleAssetInfo.InitialCost;
        amountDepreciation = tangibleAssetInfo.DeprSum;
    
        refChildRecId = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::NonInventIssue, registerJournalTrans).RecId;
        select sum(Amount), sum(MiscCharges) from nonInventIssue
            where nonInventIssue.BlockType             == ReportBlockType::Body &&
                  nonInventIssue.JournalTransRefRecId  == refChildRecId         &&
                  nonInventIssue.FixedAssets           == rAssetTable.AccountNum;
        amountRetire = nonInventIssue.Amount;
        amountSale   = nonInventIssue.MiscCharges;
        select firstonly TransactionDate from nonInventIssue
            where nonInventIssue.BlockType             == ReportBlockType::Body &&
                  nonInventIssue.JournalTransRefRecId  == refChildRecId         &&
                  nonInventIssue.FixedAssets           == rAssetTable.AccountNum;
        dateTrans    = nonInventIssue.TransactionDate;
    
        if (new SysDictEnum(enumnum(NoYes)).name2Value(parameter) != NoYes::No && ! amountBase)
            {
            refChildRecId = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::IntangibleAssetInfo, registerJournalTrans).RecId;
            select firstonly InitialCost, DeprAmount from intangibleAssetInfo
                where intangibleAssetInfo.BlockType            == ReportBlockType::Body &&
                      intangibleAssetInfo.JournalTransRefRecId == refChildRecId         &&
                      intangibleAssetInfo.AssetId              == rAssetTable.AccountNum;
            amountBase         = intangibleAssetInfo.InitialCost;
            amountDepreciation = intangibleAssetInfo.DeprAmount;
        }
    
        if (amountRetire)
        {
            amountTmp      = amountBase - amountDepreciation + amountSale;
            amountTmpTotal = amountTmp - amountRetire;
            regQuery.addBodyRecord(RTax25ProfitTable::findByProfitId(profitId).RecId,
                                   [dateTrans,
                                   strfmt(rAssetTable.AccountNum),
                                   amountRetire,
                                   amountBase,
                                   amountDepreciation,
                                   amountSale,
                                   amountTmp,
                                   amountTmpTotal > 0 ? amountTmpTotal : 0.0],
                                   rAssetTable.TableId,
                                   rAssetTable.RecId,
                                   strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
        }
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    protected Query modifyQuery(Query _query)
    {
        QueryBuildDataSource qbdsStandards, qbdsAsset, qbdsNonInvIssue;
        RefRecId             refChildRecId;
    
        refChildRecId = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::NonInventIssue, registerJournalTrans).RecId;
    
        qbdsStandards = _query.dataSourceTable(tablenum(RAssetStandards));
        qbdsAsset     = _query.dataSourceTable(tablenum(RAssetTable));
    
        qbdsNonInvIssue = qbdsAsset.addDataSource(tablenum(RTax25RegisterTrans_NonInventIssue));
        qbdsNonInvIssue.joinMode(JoinMode::ExistsJoin);
        qbdsNonInvIssue.relations(false);
        qbdsNonInvIssue.addLink(fieldnum(RAssetTable, AccountNum), fieldnum(RTax25RegisterTrans_NonInventIssue, FixedAssets));
    
        qbdsNonInvIssue.addRange(fieldnum(RTax25RegisterTrans_NonInventIssue, JournalTransRefRecId)).value(queryValue(refChildRecId));
        qbdsNonInvIssue.addRange(fieldnum(RTax25RegisterTrans_NonInventIssue, BlockType)).value(queryValue(ReportBlockType::Body));
        qbdsNonInvIssue.addRange(fieldnum(RTax25RegisterTrans_NonInventIssue, Amount)).value(SysQuery::valueNot(0));
    
        return _query;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>