<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomPartOfDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMPartOfDP</c> class is the repord data provider class that populates the data required for
///    the SQL Server Reporting Services <c>BomPartOfReport</c> report.
/// </summary>
/// <remarks>
///    The data is populated in a <c>BOMPartOfTmp</c> table.
/// </remarks>
[
    SRSReportQuery(querystr(BOMPartOf)),
    SRSReportParameterAttribute(classstr(BOMPartOfContract))
]
class BomPartOfDP extends SRSReportDataProviderBase
{
    BOMHierarchyReport          hierarchyReport;
    BOMPartOfTmp                bomPartOfTmp;

    int                         maxFillBOM;
    int                         maxFillVersion;
    InventTable                 inventTable;
    InventItemGroupItem         inventItemGroupItem;
    BOM                         bom;
    BOMVersion                  bomVersion;
    boolean                     insertFlag, inventDimParmFlag;
    BOMPartOfContract           contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBOMPartOftmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects data from the <c>BOMPartOfTmp</c> table that is populated by the report data provider
    ///    business logic.
    /// </summary>
    /// <returns>
    ///    The table data in the table buffer.
    /// </returns>
    [SRSReportDataSet(tableStr(BOMPartOfTmp))]
    public BOMPartOfTmp getBOMPartOftmp()
    {
        select * from  bomPartOfTmp;
        return  bomPartOfTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data required for the report in the <c>BOMPartOfTmp</c> table.
    /// </summary>
    /// <remarks>
    ///    Depending on the selection of SQL Server Reporting Services, the data in the <paramref
    ///    name="BOMPartOfDS_show" /> parameter of the report for BOM lines or versions is inserted into the
    ///    table.
    /// </remarks>
    private void insertTmpTable()
    {
        InventDim   bomVersionInventDim;

        switch (contract.parmShow())
        {
            case BOMBOMVersion::BOM:
            case BOMBOMVersion::PmfFormula:
                bomPartOfTmp.bom_bomId          = bom.bomId;
                bomPartOfTmp.bom_bomName        = bom.bomName();
                bomPartOfTmp.bom_Position       = bom.Position;
                bomPartOfTmp.bom_Quantity       = bom.bomQty;
                bomPartOfTmp.bom_Unit           = bom.UnitId;
                bomPartOfTmp.bom_Formula        = bom.Formula;
                bomPartOfTmp.bom_Type           = bom.bomType;
                bomPartOfTmp.bom_ConfigGroup    = bom.ConfigGroupId;
            break;

            case BOMBOMVersion::Version:

                bomPartOfTmp.bomVersion_ItemId              = bomVersion.ItemId;
                bomPartOfTmp.bomVersion_BOMId               = bomVersion.bomId;
                bomPartOfTmp.bomVersion_Name                = bomVersion.Name;
                bomPartOfTmp.bomVersion_FromQty             = bomVersion.FromQty;
                bomPartOfTmp.bomVersion_FromDate            = bomVersion.FromDate;
                bomPartOfTmp.bomVersion_ToDate              = bomVersion.ToDate;
                bomPartOfTmp.bomVersion_Active              = bomVersion.Active;
                bomPartOfTmp.bomVersion_Approver            = bomVersion.Approver;
                bomPartOfTmp.bomVersion_Approved            = bomVersion.isApproved();
                bomPartOfTmp.bomVersion_ApproverNumber      = bomVersion.approverPersonnelNumber();

                //Insert inventory dimensions
                bomVersionInventDim = bomVersion.inventDim();
                bomPartOfTmp.InventDimFieldsMap::initAllDimensionsFrom(bomVersionInventDim);
                bomPartOfTmp.InventDim_inventDimId          = bomVersionInventDim.InventDimId;

            break;
        }
        bomPartOfTmp.InvenTable_ItemId          = inventTable.ItemId;
        bomPartOfTmp.InventTable_ItemName       = inventTable.defaultProductName();
        bomPartOfTmp.InventTable_ItemGroup      = inventItemGroupItem.ItemGroupId;
        bomPartOfTmp.bom_Version_Level          = hierarchyReport.presLevel() - 1 >= 0 ? hierarchyReport.presLevel() - 1 : 0;

        bomPartOfTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        public BOMPartOfContract parmContract(BOMPartOfContract _contract = contract)
    {
        contract = _contract;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInsertFlag</Name>
				<Source><![CDATA[
        private boolean parmInsertFlag(boolean _insertFlag = insertFlag)
    {
        insertFlag = _insertFlag;
        return insertFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchInterval</Name>
				<Source><![CDATA[
        public NoYes parmSearchInterval(NoYes _searchInterval= contract.parmSearchInterval())
    {
        return contract.parmSearchInterval(_searchInterval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchIntervalBOM</Name>
				<Source><![CDATA[
        public NoYes parmSearchIntervalBOM(NoYes _searchInterval= contract.parmSearchIntervalWithLinesOnly())
    {
        return contract.parmSearchIntervalWithLinesOnly(_searchInterval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShow</Name>
				<Source><![CDATA[
        public BOMBOMVersion parmShow()
    {
        return contract.parmShow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionSelect</Name>
				<Source><![CDATA[
        public BOMRouteVersionSelectAll parmVersionSelect(BOMRouteVersionSelectAll _versionSelect = contract.parmDisplayPrinciple())
    {
        return contract.parmDisplayPrinciple(_versionSelect);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the query of the SQL Server Reporting Services report and calls the X++ business logic to
    ///    populate the data.
    /// </summary>
    public void processReport()
    {
        Common          cursor;
        Query           query    = this.parmQuery();
        QueryRun        queryRun = new QueryRun(query);
        DictEnum        enum     = new DictEnum(enumnum(BOMBOMVersion));

        contract = this.parmDataContract() as BOMPartOfContract;

        maxFillBOM          = 10;
        maxFillVersion      = 20;
        hierarchyReport     = BOMHierarchyReport::newReport(this);

        while (queryRun.next())
        {
            cursor                  = queryRun.get(tablenum(InventTable));
            inventItemGroupItem     = queryRun.get(tablenum(InventItemGroupItem));
            this.sendDataToTmpTable(cursor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendDataToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends data to insert into the <c>BOMPartOfTmp</c> table.
    /// </summary>
    /// <param name="_cursor">
    ///    The record to insert into the table.
    /// </param>
    /// <remarks>
    ///    This method is called from the <c>processReport</c> method. This function calls the business logic
    ///    of the <c>BOMHierarchyReport</c> class that gets the BOM lines or version data, and calls this
    ///    function again. Hence, this function is recursively called.
    /// </remarks>
    private void sendDataToTmpTable(Common _cursor)
    {
        Integer         maxLevels;

        if (_cursor.TableId == tablenum(InventTable))
        {
            inventTable     = _cursor;
            insertFlag      = true;
            bom             = null;
            bomVersion      = null;
            maxLevels       = contract.parmShow() == BOMBOMVersion::BOM ? maxFillBOM : maxFillVersion;

            hierarchyReport.itemPartOf(inventTable.ItemId, '', maxLevels, contract.parmFromDate(), contract.parmToDate());
            //This flag is set to false if the above method gets the data of BOM lines/Versions and does an insert
            //by calling this same method. In such case the logic should not a insert again as this would lead
            //to duplicate records.
            if (insertFlag)
            {
                this.insertTmpTable();
            }
        }
        else if (_cursor.TableId == tablenum(BOMVersion))
        {
            bomVersion = _cursor;
            this.insertTmpTable();
        }
        else if (_cursor.TableId == tablenum(BOM))
        {
            bom = _cursor;
            if ((contract.parmShow() == BOMBOMVersion::BOM && !BOM::isPmfFormula(bom.bomId))
                || (contract.parmShow() == BOMBOMVersion::PmfFormula && BOM::isPmfFormula(bom.bomId)))
            {
                this.insertTmpTable();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>