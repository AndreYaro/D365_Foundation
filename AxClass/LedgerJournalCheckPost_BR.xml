<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalCheckPost_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTaxationCodeFiscalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the taxation code 99 or 49 has fiscal value WithCreditDebit
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Ledger journal trans to be checked.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    ///     The posting messages collection; optional.
    /// </param>
    /// <returns>
    /// False if taxation code is 99 or 49 and the fiscal value is WithCreditDebit.
    /// False otherwise.
    /// </returns>
    public static boolean checkTaxationCodeFiscalValue(LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean logCheckFailed(str _message)
        {
            if (_ledgerPostingMessageCollection)
            {
                return _ledgerPostingMessageCollection.logCheckFailed(_message);
            }
            else
            {
                return checkFailed(_message);
            }
        }

        TaxUncommitted pisTaxTrans;

        select firstonly TaxationCode_BR, FiscalValue_BR from pisTaxTrans
            where pisTaxTrans.SourceRecId == _ledgerJournalTrans.RecId &&
                pisTaxTrans.SourceTableId == tableNum(LedgerJournalTrans) &&
                pisTaxTrans.TaxType_BR == TaxType_BR::PIS;

        // If there are PIS and COFINS taxes associated with a ledger journal trans,
        // we must check if the fiscal value of the taxation code is correct
        if (pisTaxTrans)
        {
            TaxUncommitted cofinsTaxTrans;

            select firstonly TaxationCode_BR, FiscalValue_BR from cofinsTaxTrans
                where cofinsTaxTrans.SourceRecId == _ledgerJournalTrans.RecId &&
                    cofinsTaxTrans.SourceTableId == tableNum(LedgerJournalTrans) &&
                    cofinsTaxTrans.TaxType_BR == TaxType_BR::COFINS;

            if (cofinsTaxTrans)
            {
                if (pisTaxTrans.FiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit &&
                    TaxationCodeTable_BR::isTaxationCodeExcludedFromRevenue(TaxType_BR::PIS, pisTaxTrans.TaxationCode_BR))
                {
                    return logCheckFailed(strFmt("@SYP4882596", TaxFiscalValue_BR::WithCreditDebit, pisTaxTrans.TaxationCode_BR));
                }

                if (cofinsTaxTrans.FiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit &&
                    TaxationCodeTable_BR::isTaxationCodeExcludedFromRevenue(TaxType_BR::COFINS, cofinsTaxTrans.TaxationCode_BR))
                {
                    return logCheckFailed(strFmt("@SYP4882596", TaxFiscalValue_BR::WithCreditDebit, cofinsTaxTrans.TaxationCode_BR));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the fiscal establishment has been selected in a ledger journal trans when it is required
    /// (that is when there are PIS and COFINS taxes associated with the ledger journal trans).
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Ledger journal trans to be checked.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    ///     The posting messages collection; optional.
    /// </param>
    /// <returns>
    /// True if the ledger journal trans is correctly configured regarding the fiscal establishment.
    /// False otherwise.
    /// </returns>
    public static boolean checkFiscalEstablishment(LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean logCheckFailed(str _message)
        {
            if (_ledgerPostingMessageCollection)
            {
                return _ledgerPostingMessageCollection.logCheckFailed(_message);
            }
            else
            {
                return checkFailed(_message);
            }
        }

        boolean isFiscalEstablishmentDimensionAttribute = BrazilParameters::find().FiscalEstablishmentDimensionAttribute != 0;
        boolean isAccountType = _ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger && _ledgerJournalTrans.LedgerDimension != 0;
        boolean isOffsetAccountType = _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger && _ledgerJournalTrans.OffsetLedgerDimension != 0;

        if (isFiscalEstablishmentDimensionAttribute && !isAccountType && !isOffsetAccountType)
        {
            return true;
        }

        TaxUncommitted pisTaxTrans;

        select firstonly RecId from pisTaxTrans
            where pisTaxTrans.SourceRecId == _ledgerJournalTrans.RecId &&
                pisTaxTrans.SourceTableId == tableNum(LedgerJournalTrans) &&
                pisTaxTrans.TaxType_BR == TaxType_BR::PIS;

        // If there are PIS and COFINS taxes associated with a ledger journal trans,
        // we must check if the fiscal establishment has been configured.
        if (pisTaxTrans)
        {
            TaxUncommitted cofinsTaxTrans;

            select firstonly RecId from cofinsTaxTrans
                where cofinsTaxTrans.SourceRecId == _ledgerJournalTrans.RecId &&
                    cofinsTaxTrans.SourceTableId == tableNum(LedgerJournalTrans) &&
                    cofinsTaxTrans.TaxType_BR == TaxType_BR::COFINS;

            if (cofinsTaxTrans)
            {
                // First of all, the financial dimension for fiscal establishment must have been configured in Brazil Parameters.
                if (!isFiscalEstablishmentDimensionAttribute)
                {
                    return logCheckFailed("@FBK188");
                }

                // Check if the fiscal establishement has been configured when (offset) account type is ledger.
                if (isAccountType)
                {
                    if (LedgerJournalCheckPost_BR::getFiscalEstablishment(_ledgerJournalTrans.LedgerDimension) == 0)
                    {
                        return logCheckFailed("@FBK187");
                    }
                }

                if (isOffsetAccountType)
                {
                    if (LedgerJournalCheckPost_BR::getFiscalEstablishment(_ledgerJournalTrans.OffsetLedgerDimension) == 0)
                    {
                        return logCheckFailed("@FBK187");
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesTaxForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the TaxGroup/TaxItemGroup fields
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Ledger journal trans to be checked.
    /// </param>
    /// <returns>
    /// True if is valid; otherwise, false.
    /// </returns>
    public static boolean checkSalesTaxForProject(LedgerJournalTable _ledgerJournalTable, LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans_Project ledgerJournalTrans_Project;

        if (_ledgerJournalTable.JournalType == LedgerJournalType::Cost
            && (_ledgerJournalTrans.TaxGroup || _ledgerJournalTrans.TaxItemGroup))
        {
            ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(_ledgerJournalTrans.RecId);

            if (ProjLinePropertySetup::canCreateProjDebitNote_BR(_ledgerJournalTrans.parmAccount(), ledgerJournalTrans_Project.CategoryId, true))
            {
                return checkFailed("@SYS4010126");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionTxt</Name>
				<Source><![CDATA[
    public static boolean checkTransactionTxt(
        LedgerJournalTrans ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        if (ledgerJournalTrans.Txt == '')
        {
            if (_ledgerPostingMessageCollection)
            {
                _ledgerPostingMessageCollection.logAndThrowError("@GLS63123");
            }
            else
            {
                throw error("@GLS63123");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the fiscal establishment that is associated with a ledger dimension.
    /// </summary>
    /// <param name="_dimensionAttributeValueCombinationRecId">
    /// Ledger dimension.
    /// </param>
    /// <returns>
    /// Fiscal establishment rec id.
    /// </returns>
    private static RecId getFiscalEstablishment(RecId _dimensionAttributeValueCombinationRecId)
    {
        DimensionAttributeRecId             dimensionAttributeRecId;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        DimensionStorageSegment             dimensionStorageSegment;
        DimensionStorage                    dimensionStorage;
        int                                 i = 1;
        FiscalEstablishment_BR              fiscalEstablishment;

        dimensionAttributeValueCombination  = DimensionAttributeValueCombination::find(_dimensionAttributeValueCombinationRecId);

        if (!dimensionAttributeValueCombination)
        {
            return 0;
        }

        dimensionStorage                    = DimensionStorage::findById(dimensionAttributeValueCombination.RecId);

        for (i = 1; i <= dimensionStorage.segmentCount(); i++)
        {
            dimensionStorageSegment = dimensionStorage.getSegment(i);

            dimensionAttributeRecId = DimensionAttributeValue::find(dimensionStorageSegment.parmDimensionAttributeValueId()).DimensionAttribute;

            if (dimensionAttributeRecId == BrazilParameters::find().FiscalEstablishmentDimensionAttribute)
            {
                select firstonly RecId from fiscalEstablishment
                    where fiscalEstablishment.FiscalEstablishmentId == dimensionStorageSegment.parmDisplayValue();

                break;
            }
        }

        return fiscalEstablishment.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWithholdLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax witholding status on the journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line.</param>
    public static void updateTaxWithholdLineStatus(LedgerJournalTrans  _ledgerJournalTrans)
    {
        LedgerJournalTrans updatableLedgerJournalTrans;

        ttsbegin;

        select forupdate firstonly updatableLedgerJournalTrans
                where updatableLedgerJournalTrans.RecId == _ledgerJournalTrans.RecId;

        _ledgerJournalTrans.closeTaxWithholdEditStatus_BR();
        updatableLedgerJournalTrans.closeTaxWithholdEditStatus_BR();
        updatableLedgerJournalTrans.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTransWithTaxUncommitedSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes set and inserts in it RecId of LedgerJournalTrans records with related tax uncommited lines with PIS and COFINS types.
    /// </summary>
    /// <param name="_voucherNum">
    /// Voucher number of Ledger journal.
    /// </param>
    /// <param name="_journalNum">
    /// Number of Ledger journal.
    /// </param>
    /// <returns>
    /// Set with RecId of LedgerJournalTrans with related tax uncommited lines with PIS and COFINS types.
    /// </returns>
    public static Set initLedgerJournalTransWithTaxUncommitedSet(Voucher _voucherNum, LedgerJournalId _journalNum)
    {
        Set setCheckTaxation_BR = new Set(Types::Int64);

        TaxUncommitted pisCofinsTaxTrans;
        LedgerJournalTrans ledgerJournalTrans;

        while select RecId from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalNum &&
                (_voucherNum == '' || ledgerJournalTrans.Voucher == _voucherNum)
            exists join pisCofinsTaxTrans
                where pisCofinsTaxTrans.SourceRecId == ledgerJournalTrans.RecId &&
                    pisCofinsTaxTrans.SourceTableId == tableNum(LedgerJournalTrans) &&
                   (pisCofinsTaxTrans.TaxType_BR == TaxType_BR::PIS ||
                    pisCofinsTaxTrans.TaxType_BR == TaxType_BR::COFINS)
        {
            setCheckTaxation_BR.add(ledgerJournalTrans.RecId);
        }

        return setCheckTaxation_BR;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>