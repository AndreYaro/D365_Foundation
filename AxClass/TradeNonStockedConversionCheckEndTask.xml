<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCheckEndTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionCheckEndTask</c> class executes the readiness check end task.
/// </summary>
class TradeNonStockedConversionCheckEndTask
extends TradeNonStockedConversionEndTask implements BatchRetryable
{
    #Define.CurrentVersion(1)
    #Localmacro.CurrentList
        tradeNonStockedConversion
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the check end task.
    /// </summary>
    public void run()
    {
        TradeNonStockedConversionCheckTaskLog tradeNonStockedConversionCheckTaskLog;

        ttsbegin;
        tradeNonStockedConversionCheckTaskLog = TradeNonStockedConversionCheckTaskLog::findTradeNonStockedConversion(this.parmTradeNonStockedConversion().RecId, true);

        tradeNonStockedConversionCheckTaskLog.ReadinessRunDateTimeEnd = DateTimeUtil::utcNow();
        tradeNonStockedConversionCheckTaskLog.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TradeNonStockedConversionCheckEndTask construct()
    {
        return new TradeNonStockedConversionCheckEndTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS323651";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEndTask</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionCheckEndTask newEndTask(TradeNonStockedConversion _tradeNonStockedConversion)
    {
        TradeNonStockedConversionCheckEndTask tradeNonStockedConversionCheckEndTask = TradeNonStockedConversionCheckEndTask::construct();

        tradeNonStockedConversionCheckEndTask.parmTradeNonStockedConversion(_tradeNonStockedConversion);

        return tradeNonStockedConversionCheckEndTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>