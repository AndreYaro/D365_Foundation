<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PersonSearchProcessor_ContactAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PersonSearchProcessor_ContactAppSuite_Extension</c> class extends search processing
/// for Application Suite contact extensions such as prospective vendor contacts.
/// </summary>
[ExtensionOf(classStr(PersonSearchProcessor_Contact))]
public final class PersonSearchProcessor_ContactAppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResult</Name>
				<Source><![CDATA[
    private void addResult(VendVendorPortalUserRequest _userRequest)
    {
        DirPartyNumber dirPartyNumber;

        if (_userRequest.Person)
        {
            DirPartyTable dirPartyTable = DirPartyTable::findRec(_userRequest.Person);

            if (dirPartyTable)
            {
                dirPartyNumber = dirPartyTable.PartyNumber;

                PersonSearchPartyNumberTmp::findOrCreate(taskId, dirPartyNumber);
            }
        }

        PersonSearchResult::findOrCreateResult(
            taskId,
            PersonSearchResultCategory::ProspectiveUser,
            _userRequest.RecId,
            tableNum(VendVendorPortalUserRequest),
            '',
            dirPartyNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSearch</Name>
				<Source><![CDATA[
    public void doSearch()
    {
        next doSearch();

        if (PersonSearchCriteriaKnownId::existAny(taskId))
        {
            this.findUserRequestsByContactId();
        }

        if (PersonSearchCriteriaName::existAny(taskId))
        {
            this.findUserRequestsByNameEmail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserRequestsByContactId</Name>
				<Source><![CDATA[
    private void findUserRequestsByContactId()
    {
        VendVendorPortalUserRequest vendVendorPortalUserRequest;
        PersonSearchCriteriaKnownId personSearchCriteriaKnownId;

        // Find user requests by email
        while select vendVendorPortalUserRequest
        exists join personSearchCriteriaKnownId
            where vendVendorPortalUserRequest.UserAlias == personSearchCriteriaKnownId.Email
                && personSearchCriteriaKnownId.TaskId == taskId
                && personSearchCriteriaKnownId.Email != ''
        {
            this.addResult(vendVendorPortalUserRequest);
        }

        ContactPerson contactPerson;

        // Find user requests by associated contact id.
        while select vendVendorPortalUserRequest
        join contactPerson
            where vendVendorPortalUserRequest.Person == contactPerson.Party
                && contactPerson.VendorPortalAccessAllowed == NoYes::Yes
        exists join personSearchCriteriaKnownId
            where contactPerson.ContactPersonId == personSearchCriteriaKnownId.ContactId
                && personSearchCriteriaKnownId.TaskId == taskId
                && personSearchCriteriaKnownId.ContactId != ''
        {
            this.addResult(vendVendorPortalUserRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserRequestsByNameEmail</Name>
				<Source><![CDATA[
    private void findUserRequestsByNameEmail()
    {
        VendVendorPortalUserRequest vendVendorPortalUserRequest;
        PersonSearchCriteriaName personSearchCriteriaName;

        // Find user requests by the GAB email locator.
        while select vendVendorPortalUserRequest
        exists join personSearchCriteriaName
            where vendVendorPortalUserRequest.UserAlias == personSearchCriteriaName.Locator
                && personSearchCriteriaName.TaskId == taskId
                && personSearchCriteriaName.Locator != ''
        {
            this.addResult(vendVendorPortalUserRequest);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>