<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSBaseWaveStepMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSBaseWaveStepMethod</c> class contains base methods to be executed during wave processing.
/// </summary>
public final class WHSBaseWaveStepMethod extends WHSWaveStepMethod
{
    private WHSPostMethod postMethod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process wave step method.
    /// </summary>
    /// <param name="_postEngine">
    /// A <c>WhsPostEngine</c> instance.
    /// </param>
    /// <returns>
    /// true if the processing was successful; otherwise, false.
    /// </returns>
    public boolean process(WhsPostEngine _postEngine)
    {
        if (_postEngine)
        {
            SysDictClass baseClass = new SysDictClass(classNum(WHSPostEngineBase));
            return baseClass.callObject(this.name(), _postEngine);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the method name to be displayed.
    /// </summary>
    /// <returns>
    /// The method name to be displayed.
    /// </returns>
    public Name displayName()
    {
        DictEnum dictEnum = this.postMethodEnum();

        if (dictEnum)
        {
            return dictenum.value2Label(dictEnum.symbol2Value(this.name()));
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOptional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the wave step method is optional.
    /// </summary>
    /// <returns>
    /// True if the wave step method is optional; otherwise, false.
    /// </returns>
    public final boolean isOptional()
    {
        boolean isOptional = true;
        const int EnumValueNotFound = 255;

        WHSPostMethodName methodName = this.name();
        switch (this.WaveTemplateType())
        {
            case WHSWaveTemplateType::Shipping:
                if (SysDictEnum::newName(enumStr(WHSPostMethodsBase)).symbol2Value(methodName) != EnumValueNotFound)
                {
                    isOptional = SysDictEnum::newName(enumStr(WHSPostMethodBaseOptional)).symbol2Value(methodName) != EnumValueNotFound;
                }
                break;
            case WHSWaveTemplateType::Production:
                if (SysDictEnum::newName(enumStr(WHSPostMethodBaseProd)).symbol2Value(methodName) != EnumValueNotFound)
                {
                    isOptional = SysDictEnum::newName(enumStr(WHSPostMethodBaseProdOptional)).symbol2Value(methodName) != EnumValueNotFound;
                }
                break;
            case WHSWaveTemplateType::Kanban:
                if (SysDictEnum::newName(enumStr(WHSPostMethodBaseKanban)).symbol2Value(methodName) != EnumValueNotFound)
                {
                    isOptional = SysDictEnum::newName(enumStr(WHSPostMethodBaseKanbanOptional)).symbol2Value(methodName) != EnumValueNotFound;
                }
                break;
        }
        return isOptional;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the wave step method name.
    /// </summary>
    /// <returns>
    /// The wave step method name.
    /// </returns>
    public final WHSPostMethodName name()
    {
        return postMethod.postMethodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTaskBasedProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current method can be run in asynchronously
    /// </summary>
    /// <returns>
    /// true, if the method can be run asynchronously; otherwise, false.
    /// </returns>
    public final boolean canUseTaskBasedProcessing()
    {
        SysDictClass postEngineClass = SysDictClass::newName(classStr(WHSPostEngineBase));
        var sysDictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, postEngineClass.id(), this.name());

        if (!WHSBaseWaveStepMethod::isTaskBasedProcessingAllowed(this.name()))
        {
            return false;
        }

        if (sysDictMethod)
        {
            WHSWavePostMethodAttribute wavePostMethodAttribute = sysDictMethod.getAttribute(classStr(WHSWavePostMethodAttribute));

            return wavePostMethodAttribute && wavePostMethodAttribute.canUseTaskBasedProcessing();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaskBasedProcessingAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the wave step post method is allowed for wave task based processing.
    /// </summary>
    /// <param name = "_postMethodName">The wave step post method name.</param>
    /// <returns>true if the wave step post method is allowed for wave task based processing; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isTaskBasedProcessingAllowed(WHSPostMethodName _postMethodName)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigureTaskBasedProcessingAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the wave task based processing configuration is allowed.
    /// </summary>
    /// <param name = "_postMethodName">The wave step post method name.</param>
    /// <returns>true if the wave task based processing configuration is allowed; otherwise, false.</returns>
    /// <remarks>
    /// This method determines if post method name can be configured for task based processing 
    /// whereas isTaskBasedProcessingAllowed is used at runtime to determines batch task execution. 
    /// </remarks>
    [Hookable(false)]
    internal static boolean isConfigureTaskBasedProcessingAllowed(WHSPostMethodName _postMethodName)
    {
        switch (_postMethodName)
        {
            case methodStr(WhsPostEngineBase, replenish):
            case methodStr(WhsPostEngineBase, waveLabelPrinting):
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWaveStepTaskBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if wave step is setup for task based processing.
    /// </summary>
    /// <param name = "_postMethodName">The post method name for the wave step.</param>
    /// <param name = "_waveTemplateName">The wave template name.</param>
    /// <returns>
    /// true, if wave process method is setup for task based processing; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean isWaveStepTaskBased(
        WHSPostMethodName   _postMethodName,
        WHSWaveTemplateName _waveTemplateName)
    {
        if (!WHSBaseWaveStepMethod::isTaskBasedProcessingAllowed(_postMethodName))
        {
            return false;
        }

        return WHSParameters::find().ExecuteWaveInBatch
            && WHSWaveTemplateLine::existByPostMethodName(_waveTemplateName, _postMethodName)
            && WHSWavePostMethodTaskConfiguration::existsByWaveTemplateName(_postMethodName, _waveTemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWaveStepCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the wave post method has a wave step code
    /// </summary>
    /// <returns>true if the post method has a wave step code; otherwise false</returns>
    [Hookable(false)]
    internal final boolean hasWaveStepCode()
    {
        WHSPostMethodName methodName = this.name();

        switch (this.WaveTemplateType())
        {
            case WHSWaveTemplateType::Shipping:
                return this.hasShippingWaveStepCode(methodName);

            case WHSWaveTemplateType::Production:
                return this.hasProdutionWaveStepCode(methodName);
            
            case WHSWaveTemplateType::Kanban:
                return this.hasKanbanWaveStepCode(methodName);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasShippingWaveStepCode</Name>
				<Source><![CDATA[
    private boolean hasShippingWaveStepCode(WHSPostMethodName _methodName)
    {
        var enumValue = SysDictEnum::newName(enumStr(WHSPostMethodsBase)).symbol2Value(_methodName);

        return (enumValue == WHSPostMethodsBase::containerization
                || enumValue == WHSPostMethodsBase::replenish
                || enumValue == WHSPostMethodsBase::waveLabelPrinting
                || enumValue == WHSPostMethodsBase::buildLoads
                || enumValue == WHSPostMethodsBase::sorting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProdutionWaveStepCode</Name>
				<Source><![CDATA[
    private boolean hasProdutionWaveStepCode(WHSPostMethodName _methodName)
    {
        var prodEnumValue = SysDictEnum::newName(enumStr(WHSPostMethodBaseProd)).symbol2Value(_methodName);
        return (prodEnumValue == WHSPostMethodBaseProd::prodReplenish);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasKanbanWaveStepCode</Name>
				<Source><![CDATA[
    private boolean hasKanbanWaveStepCode(WHSPostMethodName _methodName)
    {
        var kanbanEnumValue = SysDictEnum::newName(enumStr(WHSPostMethodBaseKanban)).symbol2Value(_methodName);
        return (kanbanEnumValue == WHSPostMethodBaseKanban::kanbanReplenish);
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveStepType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>WHSWaveStepType</c> of the base wave post method.
    /// </summary>
    /// <returns>The Wave step type for this post method.</returns>
    [Hookable(false)]
    internal final WHSWaveStepType waveStepType()
    {
        WHSWaveStepType retWaveStepType;

        switch (this.name())
        {
            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::buildLoads):
                retWaveStepType = WHSWaveStepType::LoadBuilding;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::containerization):
                retWaveStepType = WHSWaveStepType::Containerization;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::waveLabelPrinting):
                retWaveStepType = WHSWaveStepType::LabelPrinting;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::replenish):
            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanReplenish):
            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodReplenish):
                retWaveStepType = WHSWaveStepType::Replenishment;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::sorting):
                retWaveStepType = WHSWaveStepType::SortTemplate;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName())); // if called there must be a value
                break;
        }

        return retWaveStepType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveTemplateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the wave step method template type.
    /// </summary>
    /// <returns>
    /// The wave step method template type.
    /// </returns>
    public final WHSWaveTemplateType waveTemplateType()
    {
        return postMethod.WaveTemplateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostMethod</Name>
				<Source><![CDATA[
    public void setPostMethod(WHSPostMethod _postMethod = postMethod)
    {
        postMethod = _postMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMethodEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the right post method enum based on the passed template type.
    /// </summary>
    /// <returns>
    /// The post method enum corresponding to this template.
    /// </returns>
    public DictEnum postMethodEnum()
    {
        DictEnum postMethodEnum = this.retrievePostMethodEnumForTemplateType();

        if (!postMethodEnum)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return postMethodEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousBaseWaveStepMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous wave post method from the current post method name.
    /// </summary>
    /// <returns>The previous base wave post method; otherwise, null.</returns>
    [Hookable(false)]
    final internal WHSBaseWaveStepMethod previousBaseWaveStepMethod()
    {
        if (this.isFirstMethod())
        {
            // There are no methods prior to the first method.
            return null;
        }

        WHSPostMethodName methodName;
        
        switch (this.name())
        {
            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::buildLoads):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::validateWave);
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::createLoads):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::buildLoads);
                if (!WHSPostMethod::findByMethodName(methodName))
                {
                    methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::validateWave);
                }
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::allocateWave):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::createLoads);
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::replenish):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::allocateWave);
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::containerization):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::replenish);
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::sorting):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::containerization);
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::createWork):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::sorting);
                if (!WHSPostMethod::findByMethodName(methodName))
                {
                    methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::containerization);
                }
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::waveLabelPrinting):
                methodName = enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::createWork);
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodAllocateWave):
                methodName = enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodPickQty);
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodReplenish):
                methodName = enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodAllocateWave);
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodCreateWork):
                methodName = enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodReplenish);
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanAllocateWave):
                methodName = enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanPickQty);
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanReplenish):
                methodName = enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanAllocateWave);
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanCreateWork):
                methodName = enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanReplenish);
                break;
        }

        if (!methodName)
        {
            methodName = this.previousMethodNameFromEnum();
        }

        return WHSBaseWaveStepMethod::newFromName(methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstMethod</Name>
				<Source><![CDATA[
    private boolean isFirstMethod()
    {
        return WHSBaseWaveStepMethod::retrieveSpecificOrderMethodPosition(this.name()) == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousMethodNameFromEnum</Name>
				<Source><![CDATA[
    private WHSPostMethodName previousMethodNameFromEnum()
    {
        DictEnum postMethodEnum = this.postMethodEnum();

        int currentPosition = postMethodEnum.symbol2Value(this.name());

        do
        {
            currentPosition--;
        }
        while (currentPosition >= 0 && postMethodEnum.value2Symbol(currentPosition));

        return postMethodEnum.value2Symbol(currentPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePostMethodEnumForTemplateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the post method enum for the wave template type.
    /// </summary>
    /// <returns>
    /// The post method enum corresponding to this template if found; otherwise, null.
    /// </returns>
    protected DictEnum retrievePostMethodEnumForTemplateType()
    {
        switch (this.waveTemplateType())
        {
            case WHSWaveTemplateType::Shipping:
                return new DictEnum(enumNum(WHSPostMethodsBase));
                
            case WHSWaveTemplateType::Production:
                return new DictEnum(enumNum(WHSPostMethodBaseProd));
                
            case WHSWaveTemplateType::Kanban:
                return new DictEnum(enumNum(WHSPostMethodBaseKanban));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>WHSBaseWaveStepMethod</c> instance based on the passed method name.
    /// </summary>
    /// <param name="_postMethodName">
    /// The method name.
    /// </param>
    /// <returns>
    /// A <c>WHSBaseWaveStepMethod</c> instance.
    /// </returns>
    public static WHSBaseWaveStepMethod newFromName(WHSPostMethodName _postMethodName)
    {
        WHSPostMethod currentPostMethod = WHSPostMethod::findByMethodName(_postMethodName);
        if (currentPostMethod && currentPostMethod.isBaseMethod())
        {
            WHSBaseWaveStepMethod baseWaveStepMethod = new WHSBaseWaveStepMethod();
            baseWaveStepMethod.setPostMethod(currentPostMethod);
            return baseWaveStepMethod;
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSpecificOrderMethodPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves wave method position for methods that must be positioned in a specific order.
    /// </summary>
    /// <param name = "_methodName">
    /// The current wave post method name.</param>
    /// <returns>
    /// The specific order position for the post method; otherwise, zero.
    /// </returns>
    [Hookable(false)]
    internal static WHSPostMethodPos retrieveSpecificOrderMethodPosition(WHSPostMethodName _methodName)
    {
        const WHSPostMethodPos ValidateWave         = 1;
        const WHSPostMethodPos BuildLoads           = 2;
        const WHSPostMethodPos CreateLoads          = 3;
        const WHSPostMethodPos AllocateWave         = 4;
        const WHSPostMethodPos Replenish            = 5;
        const WHSPostMethodPos Containerization     = 6;
        const WHSPostMethodPos Sorting              = 7;
        const WHSPostMethodPos CreateWork           = 8;
        const WHSPostMethodPos WaveLabelPrinting    = 9;

        const WHSPostMethodPos ProdPickQty          = 1;
        const WHSPostMethodPos ProdAllocateWave     = 2;
        const WHSPostMethodPos ProdReplenish        = 3;
        const WHSPostMethodPos ProdCreateWork       = 4;

        const WHSPostMethodPos KanbanPickQty        = 1;
        const WHSPostMethodPos KanbanAllocateWave   = 2;
        const WHSPostMethodPos KanbanReplenish      = 3;
        const WHSPostMethodPos KanbanCreateWork     = 4;

        WHSPostMethodPos methodPosition;

        switch (_methodName)
        {
            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::validateWave):
                methodPosition = ValidateWave;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::buildLoads):
                methodPosition = BuildLoads;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::createLoads):
                methodPosition = CreateLoads;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::allocateWave):
                methodPosition = AllocateWave;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::replenish):
                methodPosition = Replenish;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::containerization):
                methodPosition = Containerization;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::sorting):
                methodPosition = Sorting;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::createWork):
                methodPosition = CreateWork;
                break;

            case enum2Symbol(enumNum(WHSPostMethodsBase), WHSPostMethodsBase::waveLabelPrinting):
                methodPosition = WaveLabelPrinting;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodPickQty):
                methodPosition = ProdPickQty;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodAllocateWave):
                methodPosition = ProdAllocateWave;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodReplenish):
                methodPosition = ProdReplenish;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseProd), WHSPostMethodBaseProd::prodCreateWork):
                methodPosition = ProdCreateWork;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanPickQty):
                methodPosition = KanbanPickQty;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanAllocateWave):
                methodPosition = KanbanAllocateWave;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanReplenish):
                methodPosition = KanbanReplenish;
                break;

            case enum2Symbol(enumNum(WHSPostMethodBaseKanban), WHSPostMethodBaseKanban::kanbanCreateWork):
                methodPosition = KanbanCreateWork;
                break;
        }

        return methodPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWaveStepMethodEligibleForRunningOnSpoke</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    public static boolean isWaveStepMethodEligibleForRunningOnSpoke(WHSPostMethodName _postMethodName)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>