<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostEmplJournalCostAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostEmplJournalCostAdj extends ProjPostEmplJournal
{
    ProjEmplTrans               projEmplTransLocal;
    TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a budget update is required.
    /// </summary>
    /// <returns>
    ///    true if a budget update is required; otherwise, false.
    /// </returns>
    public boolean checkUpdateBudget()
    {
        boolean ret;

        if (projTrans.qty() < 0 && !this.parmTransIdOrig())
        {
            ret = true;
        }
        else if (this.parmTransIdOrig())
        {
            ret = false;
        }
        else
        {
            ret = super();
        }
        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjEmplTrans _projEmplTrans, TmpProjAdjustmentCreateCost _tmpProjAdjustmentCreateCost)
    {
        ProjJournalTrans    projJournalTransLocal;

        projEmplTransLocal = _projEmplTrans;
        tmpProjAdjustmentCreateCost = _tmpProjAdjustmentCreateCost;

        super(projJournalTransLocal);

        projTrans = ProjTrans::newProjTransEmplTransCostAdj(_projEmplTrans, _tmpProjAdjustmentCreateCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjEmplTransCost       projEmplTransCost;

        TransDate getLedgerTransdate()
        {
            TransDate ret;

            if (ledgerVoucher)
            {
                ret = ledgerVoucher.lastTransDate();
            }

            return ret;
        }

        ProjTransStatus getTransStatus()
        {
            ProjTransStatus ret;

            ret = this.parmTransStatus();

            if (!ret)
            {
                ret = ProjTransStatus::Posted;
            }

            return ret;
        }

        //Create ProjEmplTransCost record

        projEmplTransCost.clear();
        projEmplTransCost = ProjEmplTransCost::initTransFromAdjCreateCost(tmpProjAdjustmentCreateCost);
        projEmplTransCost.DefaultDimension = tmpProjAdjustmentCreateCost.DefaultDimension;
        projEmplTransCost.TransId = projEmplTransLocal.TransId;
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
            projEmplTransCost.LedgerTransdate = this.parmAdjustmentDate();
        }
        else
        {
            projEmplTransCost.LedgerTransdate = getLedgerTransdate();
        }

        if (this.parmLedgerStatusCostOrig())
        {
            projEmplTransCost.LedgerStatusCost = this.parmLedgerStatusCost();
        }
        else
        {
            if (this.parmTransStatus() == ProjTransStatus::Adjusted && (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet))
            {
                projEmplTransCost.LedgerStatusCost   = ProjLedgerStatus::None;
            }
            else
            {
                if (this.checkEnterNeverLedger())
                {
                    projEmplTransCost.LedgerStatusCost   = ProjLedgerStatus::Never;
                }
                else
                {
                    if (projTrans.projLineProperty().ToBeCapitalize)
                    {
                        projEmplTransCost.LedgerStatusCost   = this.parmLedgerStatusCost();
                    }
                    else if (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet)
                    {
                        projEmplTransCost.LedgerStatusCost   = ProjLedgerStatus::Operations;
                    }
                    else
                    {
                        projEmplTransCost.LedgerStatusCost   = this.parmLedgerStatusCost();
                    }
                }
            }
        }

        projEmplTransCost.TransStatus = getTransStatus();
        projEmplTransCost.insert();

        if ((projEmplTransLocal.TransactionOrigin == ProjOrigin::Timesheet) &&
            ProjHourCostPrice::findResourceRate(projTrans.resource(), projTrans.transDate()) &&
            (this.parmTransStatus() == ProjTransStatus::Adjusted))
        {
            this.parmTransIdCost(projEmplTransCost.TransId);
        }
        else
        {
            if (this.parmCostUseOrig())
            {
                this.parmTransIdCost(this.parmTransIdOrig());
            }
            else
            {
                this.parmTransIdCost(projEmplTransCost.TransId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimension value from the <c>projTrans</c> class object variable.
    /// </summary>
    /// <returns>
    /// The default dimension value from the <c>projTrans</c> class object variable.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        DimensionDefault    ret;
        ProjTransPosting    projTransPosting;

        if (this.postingType() == LedgerPostingType::ProjPayrollAllocation && this.parmAdjRefTransId() && this.parmTransStatus() == ProjTransStatus::Adjusted)
        {
            select firstOnly DefaultDimension from projTransPosting
                where projTransPosting.TransId == this.parmAdjRefTransId()
                    && projTransPosting.PostingType == LedgerPostingType::ProjPayrollAllocation
                    && projTransPosting.ProjFundingSource == this.parmProjFundingSource();
        }

        ret = projTransPosting.DefaultDimension ? projTransPosting.DefaultDimension : super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerStatusCostOrig</Name>
				<Source><![CDATA[
    public boolean parmLedgerStatusCostOrig(boolean _useLedgerStatusCostOrig = ledgerStatusCostOrig)
    {
        ledgerStatusCostOrig = _useLedgerStatusCostOrig;
        if (projTrans)
        {
            projTrans.parmLedgerStatusCostOrig(_useLedgerStatusCostOrig);
        }
        return ledgerStatusCostOrig;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>