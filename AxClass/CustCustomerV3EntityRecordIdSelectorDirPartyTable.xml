<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCustomerV3EntityRecordIdSelectorDirPartyTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute(identifierStr(TableName), tableStr(DirPartyTable))]
[ExportMetadataAttribute(identifierStr(EntityName), dataentityviewstr(CustCustomerV3Entity))]
[ExportAttribute(identifierstr(Dynamics.AX.Application.IBusinessEventsTableToEntityRecordIdSelector))]
internal final class CustCustomerV3EntityRecordIdSelectorDirPartyTable implements IBusinessEventsTableToEntityRecordIdSelector
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityRecordIdsImpactedByTableChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List getEntityRecordIdsImpactedByTableChange(BusinessEventsDefinition _eventDefinition, BusinessEventsActions _changeType, RecId _changedRecordId)
    {
        List impactedRecIds = new List(Types::Int64);

        CustTable custTable;

        // There are two event definitions that refer to the same DirPartyTable relationship.
        // One is defined by the query datasource relation on DirPartyBaseEntity
        // and the other by the getEntityDataSourceToFieldMapping override for DirPartyBaseEntity7 datasource name.
        // Both associations result in the same query.
        select firstonly RecId from custTable
            where custTable.Party == _changedRecordId;

        if (custTable)
        {
            impactedRecIds.addEnd(custTable.RecId);
        }

        return impactedRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>