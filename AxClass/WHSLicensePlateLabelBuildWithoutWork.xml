<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateLabelBuildWithoutWork</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLicensePlateLabelBuildWithoutWork</c> class is used to create license plate labels without work and printing them.
/// </summary>
internal class WHSLicensePlateLabelBuildWithoutWork extends WhsLicensePlateLabelBuild
{
    protected Common                orderLine;
    private InventDim               inventDim;
    private WHSWorkTransType        workTransType;
    private WHSLicensePlateId       licensePlateId;
    private WHSLoadId               loadId;
    private WHSShipmentId           shipmentId;
    private Qty                     qty;
    private UnitOfMeasureSymbol     unitId;
    private WhsWorkTransactionType  workTransactionTypeSingleton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected InventTransId inventTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNum</Name>
				<Source><![CDATA[
    protected LineNum lineNum()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderNum</Name>
				<Source><![CDATA[
    protected WHSOrderNum orderNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    protected InventDimId inventDimId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedQty</Name>
				<Source><![CDATA[
    protected InventQty orderedQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingQty</Name>
				<Source><![CDATA[
    protected InventQty remainingQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum</Name>
				<Source><![CDATA[
    protected AccountNum accountNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransType</Name>
				<Source><![CDATA[
    protected WHSWorkTransType workTransType()
    {
        return workTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected AccountName getAccountName(WHSWorkLine _workLine)
    {
        AccountName accountName;

        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, AccountName)))
        {
            return '';
        }

        accountName = workTransactionType.findAccountName(this.accountNum());

        if (!accountName)
        {
            accountName = this.findAccountNameFromSourceDocumentDetails(this.inventTransId(), this.orderNum(), this.inventDim().InventLocationId);
        }

        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSFromName getFromName()
    {
        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, FromName)))
        {
            return '';
        }

        return this.inventDim().inventLocation().Name;     
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected LineNum getOrderLineNum(WHSWorkLine _workLine)
    {
        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, LineNum)))
        {
            return 0;
        }

        return this.lineNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSToName getToName()
    {
        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, ToName)))
        {
            return '';
        }

        if (label.AccountName)
        {
            return label.AccountName;
        }
        else
        {
            return this.getAccountName(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected AccountNum getAccountNum(WHSWorkLine _workLine)
    {
        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, AccountNum)))
        {
            return '';
        }
        
        if (label.ShipmentId)
        {
            return WHSShipmentTable::find(label.ShipmentId).AccountNum;
        }
        
        return this.accountNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCarrierCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSCarrierCode getCarrierCode(WHSLoadId _loadId)
    {
        if (!_loadId || this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, CarrierCode)))
        {
            return '';
        }

        return WHSLoadTable::find(_loadId).CarrierCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSProNum getProNum(WHSShipmentId _shipmentId)
    {
        if (!_shipmentId || this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, ProNum)))
        {
            return '';
        }

        return WHSShipmentTable::find(_shipmentId).ProNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackingQty</Name>
				<Source><![CDATA[
    private WHSPackingQty getPackingQty()
    {
        WHSLoadLine loadLine = WHSLoadLine::findFirstForLoadId(loadId);

        if (loadLine.RecId)
        {
            return loadLine.PackingQty;
        }
        else
        {
            return WHSInventTable::getDefaultPackingQty(this.itemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    private InventDim inventDim()
    {
        if (!inventDim.RecId)
        {
            inventDim = InventDim::find(this.inventDimId());
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initLabel(WHSWorkLine _workLine, EcoResReleasedProductUnitConverter _converter)
    {
        label.clear();

        label.setLabelId();
        
        InventTable inventTable = InventTable::find(this.itemId());

        label.OrderNum = this.orderNum();  
        label.ItemId = this.itemId();
        label.ItemName = inventTable.defaultProductName();
        this.setWarehouseOnLabel();
        label.ShipmentId = shipmentId;
        label.workTransType = workTransType;
        label.LicensePlateId = licensePlateId;
        label.UserId = userId;
        label.Qty = qty;
        label.UnitID = unitId;
        label.InventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(this.itemId());
        label.UCCCompanyPrefix = WHSParameters::find().UCCCompanyPrefix;
        label.InventQty = _converter.convert(label.Qty,
                                                UnitOfMeasure::findBySymbol(unitId).RecId,
                                                UnitOfMeasure::findBySymbol(label.InventUnitId).RecId,
                                                NoYes::No,
                                                this.itemId(),
                                                this.inventDimId(),
                                                NoYes::No);
        label.Weight = inventTable.grossWeight() * label.InventQty;
        label.OrderedQty = this.orderedQty();
        label.RemainingQty = this.remainingQty();
        label.LineNum  = this.getOrderLineNum(_workLine);
        label.AccountNum = this.getAccountNum(_workLine);
        label.AccountName  = this.getAccountName(_workLine);
        label.ToName = this.getToName();
        label.ShipmentToName = this.getShipmentToName();
        label.FromName = this.getFromName();
        label.CarrierCode = this.getCarrierCode(loadId);
        label.ProNum = this.getProNum(shipmentId);
        label.PackingQty = this.getPackingQty();

        this.initLabelInventDims(this.inventDim());

        this.labelInitialized(label, _workLine, _converter, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouseOnLabel</Name>
				<Source><![CDATA[
    protected void setWarehouseOnLabel()
    {
        label.InventSiteId = this.inventDim().InventSiteId;
        label.InventLocationId = this.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkUsedForLPLabelBuild</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isWorkUsedForLPLabelBuild()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLicensePlateLabelPrintEnumerator</Name>
				<Source><![CDATA[
    internal boolean useLicensePlateLabelPrintEnumerator()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initFromParameters(WHSLicensePlateLabelBuildWithoutWorkParameters _parameters)
    {
        orderLine = _parameters.orderLine;
        workTransType = _parameters.workTransactionType;
        unitId = _parameters.unitId;
        qty = _parameters.qty;
        shipmentId = _parameters.shipmentId;
        loadId = _parameters.loadId;
        licensePlateId = _parameters.licensePlateId;
        userId = _parameters.userId;
        workTransactionType = WhsWorkTransactionType::singletonFromType(_parameters.workTransactionType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WhsLicensePlateLabelBuildWithoutWork newFromParameters(TableName _tableName, WHSLicensePlateLabelBuildWithoutWorkParameters _parameters)
    {
        SysTableNameFactoryAttribute attribute = new SysTableNameFactoryAttribute(_tableName);
        WhsLicensePlateLabelBuildWithoutWork instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WhsLicensePlateLabelBuildWithoutWork), attribute) as WhsLicensePlateLabelBuildWithoutWork;
        
        if (instance)
        {
            instance.initFromParameters(_parameters);
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkTransTypeAndParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WhsLicensePlateLabelBuildWithoutWork newFromWorkTransTypeAndParameters(WHSWorkTransType _type, WHSLicensePlateLabelBuildWithoutWorkParameters _parameters)
    {
        WHSLPLabelBuildWithoutWorkFactoryAttribute attribute = new WHSLPLabelBuildWithoutWorkFactoryAttribute(_type);
        WhsLicensePlateLabelBuildWithoutWork instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WhsLicensePlateLabelBuildWithoutWork), attribute) as WhsLicensePlateLabelBuildWithoutWork;

        if (instance)
        {
            instance.initFromParameters(_parameters);
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParametersLPReceiving</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WhsLicensePlateLabelBuildWithoutWork newFromParametersLPReceiving(WHSLicensePlateLabelBuildWithoutWorkParameters _parameters)
    {
        WHSLPReceiveLicensePlateLabelBuildWithoutWork instance = new WHSLPReceiveLicensePlateLabelBuildWithoutWork();
        instance.initFromParameters(_parameters);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>