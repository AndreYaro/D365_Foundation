<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaym_LoyaltyCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
///     The <c>MCRCustPaym_LoyaltyCard</c> class is responsible for managing a list of payments associated with a
///     loyalty card.
/// </summary>
public class MCRCustPaym_LoyaltyCard extends MCRCustPaym
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a payment field should be editable by the user.
    /// </summary>
    /// <param name="_fieldId">
    /// The field for which this method checks/changes the allow edit property.
    /// </param>
    /// <returns>
    /// True if editing should be allowed; otherwise, false.
    /// </returns>
    public boolean allowEdit(FieldId _fieldId)
    {
        boolean returnValue = false;
        if (_fieldId != fieldNum(MCRCustPaymTable, PercentAmount))
        {
            returnValue = super(_fieldId);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCardNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is allowable to update the card number.
    /// </summary>
    /// <returns>
    /// True if there is any posted amount; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The card number is not allowed to be updated if any amount has been posted for this payment.
    /// </remarks>
    public boolean allowEditCardNum()
    {
        // The card number is not allowed to be updated if any amount has been posted for this payment.
        return (mcrCustPaymTable.PostedAmount == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the passed amount can be posted.
    /// </summary>
    /// <param name="_postAmount">
    /// The amount to be checked if it can be posted.
    /// </param>
    /// <returns>
    /// True if the amount passed in can be posted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// On a return of a loyalty card, if not advance credit
    /// then the payment will be a non prepay in which case the amount needs
    /// to be posted at invoicing. At this point the custpaymstatus is
    /// authorized and not paid or posted.
    /// </remarks>
    public boolean canPost(AmountCur _postAmount)
    {
        if (_postAmount)
        {
            // If prepay, then allow post only if Payment status is 'Paid' or 'Posted'.
            if (mcrCustPaymTable.IsPrepay)
            {
                return mcrCustPaymTable.Status == MCRCustPaymStatus::Paid
                    || mcrCustPaymTable.Status == MCRCustPaymStatus::Posted
                    || mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized;
            }
            else // The payment status has to be 'Authorized' so that it can be posted when Prepay is false.
            {
                return mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized;
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLoyaltyCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the loyalty card record associated with this payment.
    /// </summary>
    /// <param name="_forUpdate">
    /// A boolean that determines if the found record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RetailLoyaltyCard</c> found.
    /// </returns>
    public RetailLoyaltyCard findLoyaltyCard(boolean _forUpdate = false)
    {
        return RetailLoyaltyCard::find(mcrCustPaymTable.PaymInfoRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default value of the passed field if it has been defined.
    /// </summary>
    /// <param name="_fieldId">
    /// The field for which this method finds the default value.
    /// </param>
    /// <returns>
    /// The default value of the specified field if it is defined; otherwise, null.
    /// </returns>
    public anytype getDefaultValue(FieldId _fieldId)
    {
        Percent totalPercentAmount = 0.0;

        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrepay):
                return NoYes::Yes;

            case fieldNum(MCRCustPaymTable, PercentAmount):
                return 0;

            default:
                return super(_fieldID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment account and account type.
    /// </summary>
    /// <returns>
    /// The account type <c>LedgerJournalACType</c> and the account <c>LedgerJournalAC</c>
    /// </returns>
    /// <remarks>
    /// By default, the account type and account are determined by the payment method.
    /// </remarks>
    public container getPaymAccount()
    {
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable =
            RetailStoreTenderTypeCardTable::find(mcrCustPaymTable.Channel, mcrCustPaymTable.TenderTypeId, mcrCustPaymTable.CardTypeId);

        LedgerJournalACType offsetType;
        LedgerDimensionDefaultAccount offsetAccount;

        if (retailStoreTenderTypeCardTable)
        {
            switch (retailStoreTenderTypeCardTable.accountType)
            {
                case RetailLedgerBank::Bank:
                    offsetType = LedgerJournalACType::Bank;
                    break;
                case RetailLedgerBank::Ledger:
                    offsetType = LedgerJournalACType::Ledger;
                    break;
            }
            offsetAccount = retailStoreTenderTypeCardTable.LedgerDimension;
        }
        else
        {
            throw error(strFmt("@MCR40426",enum2str(mcrCustPaymTable.CustPaymType)));
        }

        return [offsetType, offsetAccount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an identifier for this payment.
    /// </summary>
    /// <returns>
    /// An identifier for this payment.
    /// </returns>
    protected PaymReference getPaymReference()
    {
        return RetailLoyaltyCard::find(mcrCustPaymTable.PaymInfoRecId).CardNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymTypeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a loyalty card has been provided.
    /// </summary>
    /// <returns>
    /// True if the loyalty card number has been provided; otherwise, false.
    /// </returns>
    public boolean hasPaymTypeData()
    {
        return mcrCustPaymTable.PaymInfoTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new customer payment of type "loyalty card".
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    /// The <c>MCRCustPaymTable</c> used to create a new payment.
    /// </param>
    /// <param name="_allowUserInput">
    /// A boolean that determines whether to allow user input during the process of creating a new payment.
    /// </param>
    public void new(MCRCustPaymTable _mcrCustPaymTable, boolean _allowUserInput)
    {
        // Add loyalty Card to this logic
        if (_mcrCustPaymTable.CustPaymType != MCRCustPaymType::LoyaltyCard)
        {
            throw error(strFmt("@MCR32269", funcName(), enum2str(MCRCustPaymType::LoyaltyCard)));
        }

        super(_mcrCustPaymTable, _allowUserInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform balance for the payment method.
    /// </summary>
    /// <returns>The balance.</returns>
    [Hookable(false)]
    protected real performBalanceCheck()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs authorization on this payment.
    /// </summary>
    /// <returns>
    /// The resulting payment status of either MCRCustPaymStatus::Authorized or MCRCustPaymStatus::Declined.
    /// </returns>
    /// <remarks>
    /// A loyalty card payment is authorized if the available amount in loyalty points
    /// plus all unposted amounts is less than or equal to the payment amount.
    /// </remarks>
    protected MCRCustPaymStatus performAuth()
    {
        RetailLoyaltyCard cardTable = this.findLoyaltyCard();

        if (!cardTable)
        {
            throw error("@Retail:RetailLoyaltyCardNotExistsError");
        }

        boolean authorized;
        container packedRewardPointLinesContainer;

        // If payment is already created and authorized no need to authorize again. This is the case when a payment is created for cancel or reduce line quantity scenario
        if (mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized)
        {
            [authorized, packedRewardPointLinesContainer] = RetailLoyaltyManager::AuthorizeRewardPointsForPayment(mcrCustPaymTable.salesTable(), cardTable.CardNumber, mcrCustPaymTable.getUnpostedAmount());

            // Attempt to confirm the authorization by generating enough reward points to satisfy the requested payment amount.
            if (!authorized)
            {
                warning("@MCR11252");
                mcrCustPaymTable.Status = MCRCustPaymStatus::Declined;

                // Log message for customer authorization for loyaltyCard payment fail.
                eventSource.EventWriteCustomerAuthorizationForLoyaltyCardPaymentFail(funcName(), cardTable.RecId);
            }
            else
            {
                // if this is a prepay then mark as Paid, otherwise it should be Authorized.
                if (mcrCustPaymTable.IsPrepay == NoYes::Yes)
                {
                    mcrCustPaymTable.Status = MCRCustPaymStatus::Paid;

                    // Log message for set MCRCustPaymStatus as paid for loyaltyCard payment authorization.
                    eventSource.EventWriteSetMCRCustPaymStatusAsPaidForCustomerPaymentAuthorization(funcName(), cardTable.RecId);
                }
                else
                {
                    mcrCustPaymTable.Status = MCRCustPaymStatus::Authorized;

                    // Log message for set MCRCustPaymStatus as Authorized for loyaltyCard payment authorization.
                    eventSource.EventWriteSetMCRCustPaymStatusAsAuthorizedForCustomerPaymentAuthorization(funcName(), cardTable.RecId);
                }
            }

            ttsBegin;
            mcrCustPaymTable.update();
            ttsCommit;
        }

        return mcrCustPaymTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuthReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws error because reversal not implemented for loyalty cards.
    /// </summary>
    /// <returns>
    /// An error describing the incorrect use of this function.
    /// </returns>
    public boolean performAuthReversal()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the posting operations using the passed amount.
    /// </summary>
    /// <param name="_amount">
    /// The amount to be posted.
    /// </param>
    /// <remarks>
    /// Invoked to perform posting operations after posting records to the ledger journal.
    /// Subtract _amount from the card's points.
    /// </remarks>
    protected void performPost(Amount _amount)
    {
        RetailLoyaltyCard retailLoyaltyCard = this.findLoyaltyCard();

        ttsBegin;
        // If payment status is authorized, this means that points have already been rewarded
        if (mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized)
        {
            // Set the parmMCRPaymRecId in RetailLoyaltyManager_Extended parameters so it can be added to the redeem record in
            // RetailLoyaltyCardRewardPointTrans table. This will help identify the amount to refund when a payment is removed.
            RetailLoyaltyManager_ExtendedParameters retailLoyaltyManager_ExtendedParameters = RetailLoyaltyManager::extendedParameters;
            retailLoyaltyManager_ExtendedParameters.parmMCRPaymRecId(this.mcrCustPaymTable.RecId);

            // Attempt to Re-generate the required rewardpoint lines and post them.
            RetailLoyaltyManager::GenerateAndPostRewardPointsForPayment(mcrCustPaymTable.salesTable(), retailLoyaltyCard.CardNumber, _amount);
        }

        // if posting is successfull, then update the payment status
        if(mcrCustPaymTable.PostedAmount == mcrCustPaymTable.Amount)
        {
            mcrCustPaymTable.Status = MCRCustPaymStatus::Posted;
            mcrCustPaymTable.update();

            // Log message for posting is successful for passed amount.
            eventSource.EventWritePostingIsSuccessfulForAuthorizedPayment(funcName(), retailLoyaltyCard.RecId);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedgerJournal</Name>
				<Source><![CDATA[
    public void postToLedgerJournal(Amount _amount, boolean _isPrepay)
    {
        super(_amount, _isPrepay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAuthorize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates this payment for authorization.
    /// </summary>
    /// <param name="_showErrors">
    /// A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <returns>
    /// True if all data for this payment is valid and the payment should
    /// be allowed to be submitted for authorization; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the return value is false, then this payment should not be submitted
    /// for authorization.
    /// </remarks>
    public boolean validateAuthorize(boolean _showErrors = true)
    {
        setPrefix(strFmt("@MCR32270", mcrCustPaymTable.TenderTypeId, mcrCustPaymTable.Amount));

        boolean isValid = super(_showErrors);

        // payment account is required
        if (conpeek(this.getPaymAccount(), 2) == 0)
        {
            // Log message for payment account not available.
            eventSource.EventWritePaymentAccountNotFound(funcName());

            isValid = false;

            if (_showErrors)
            {
                throw error(strfmt("@MCR10845", mcrCustPaymTable.TenderTypeId));
            }
        }

        RetailLoyaltyCard cardTable = RetailLoyaltyCard::find(mcrCustPaymTable.PaymInfoRecId);

        // Loyalty card exists
        if(!cardTable)
        {
            // Log message for loyalty card not found for payment.
            eventSource.EventWriteLoyaltyCardNotFound(funcName());

            isValid = false;

            if (_showErrors)
            {
                // A loyalty card number is required.
                throw error("@Retail:RetailLoyaltyCardNotExistsError");
            }
        }

        // Loyalty card belongs to the customer
        RetailSharedParameters retailSharedParameters = RetailSharedParameters::find();
        boolean runValidationForCustomerToRedeemLoyalty = false;

        if (RetailRunValidationForCustomerToRedeemLoyaltyFlight::instance().isEnabled()
            || retailSharedParameters.ValidateCustomerToRedeemLoyalty == NoYes::Yes)
        {
            runValidationForCustomerToRedeemLoyalty = true;
        }

        if (runValidationForCustomerToRedeemLoyalty && cardTable.Party)
        {
            SalesTable salesTableLocal = mcrCustPaymTable.salesTable();
            CustAccount loyaltyCardCustAccount = CustTable::findByPartyRecId(cardTable.Party).AccountNum;

            if (System.String::IsNullOrEmpty(loyaltyCardCustAccount)
                || (loyaltyCardCustAccount != salesTableLocal.CustAccount && loyaltyCardCustAccount != salesTableLocal.InvoiceAccount))
            {
                // Log message for loyalty card not belongs to the customer.
                eventSource.EventWriteLoyaltyCardNotBelongsToCustomer(funcName(), cardTable.Party, cardTable.RecId);

                isValid = false;
                // "The loyalty card does not belong to customer."
                throw error("@Retail:LoyaltyCardDoesNotBelongToCustomer");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates post to ensure that on a return an authorized loyalty card will not issue an error.
    /// </summary>
    /// <param name="_amount">
    /// The amount to be validated in the post.
    /// </param>
    /// <param name="_showErrors">
    /// A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <returns>
    /// True if the amount being posted is valid; otherwise, false.
    /// </returns>
    public boolean validatePost(Amount _amount, boolean _showErrors = true)
    {
        boolean isValid = true;

        Amount unpostedAmount = mcrCustPaymTable.getUnpostedAmount();

        if (mcrCustPaymTable.IsPrepay)
        {
            // this payment must be Posted/Paid/Authorized
            if (mcrCustPaymTable.Status != MCRCustPaymStatus::Posted
            && mcrCustPaymTable.Status != MCRCustPaymStatus::Paid
            && mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized)
            {
                // Log message for validate payment posting fail.
                eventSource.EventWriteValidatePaymentPostingFail(funcName(), mcrCustPaymTable.RecId, mcrCustPaymTable.Status);

                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR30348", enum2str(mcrCustPaymTable.Status)));
                }
            }

            // must be a non-zero amount
            if (_amount == 0.0)
            {

                // Log message for validate payment amount is zero.
                eventSource.EventWriteValidatePaymentAmountIsZero(funcName(), mcrCustPaymTable.RecId);

                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount must have the same sign as the unposted payment amount
            if (isValid && sign(_amount) != sign(unpostedAmount))
            {
                // Log message for validate payment amount and unposted payment amount have not same sign.
                eventSource.EventWriteValidatePaymentPostedAndUnpostedAmountHaveNotSameSign(funcName(), mcrCustPaymTable.RecId, sign(_amount), sign(unpostedAmount));

                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount may not be greater than the unposted payment amount
            if (isValid && abs(_amount) > abs(unpostedAmount))
            {
                // Log message for validate payment amount is greater than unposted payment.
                eventSource.EventWriteValidatePaymentAmountIsGreaterThanUnPostedAmount(funcName(), mcrCustPaymTable.RecId);

                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }
        }
        else
        {
            // this payment must be Posted/Paid
            if (mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized)
            {
                isValid = false;

                // Log message for set mcrCustPaymTable as Authorized for loyaltyCard payment authorization.
                eventSource.EventWritePaymentIsNotSetAsAuthorized(funcName(), mcrCustPaymTable.RecId);

                if (_showErrors)
                {
                    throw error(strfmt("@MCR30348", enum2str(mcrCustPaymTable.Status)));
                }
            }

            // must be a non-zero amount
            if (!_amount)
            {
                isValid = false;

                // Log message for validate payment amount is zero.
                eventSource.EventWriteValidatePaymentAmountIsZero(funcName(), mcrCustPaymTable.RecId);

                if (_showErrors)
                {
                    throw error(strfmt("@Retail:InvalidPostingAmount", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount must have the same sign as the unposted payment amount
            if (isValid && sign(_amount) != sign(unpostedAmount))
            {
                isValid = false;

                // Log message for validate payment amount and unposted payment amount have not same sign.
                eventSource.EventWriteValidatePaymentPostedAndUnpostedAmountHaveNotSameSign(funcName(), mcrCustPaymTable.RecId, sign(_amount), sign(unpostedAmount));

                if (_showErrors)
                {
                    throw error(strfmt("@Retail:InvalidPostingAmount", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount may not be greater than the unposted payment amount
            if (isValid && abs(_amount) > abs(unpostedAmount))
            {
                isValid = false;

                // Log message for validate payment amount is greater than unposted payment.
                eventSource.EventWriteValidatePaymentAmountIsGreaterThanUnPostedAmount(funcName(), mcrCustPaymTable.RecId);

                if (_showErrors)
                {
                    throw error(strfmt("@Retail:InvalidPostingAmount", num2str(_amount, 1, 2, -1, -1)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates this payment for an insert or update.
    /// </summary>
    /// <param name="_showErrors">
    /// A boolean that determines whether to write the errors to an infolog; optional.
    /// </param>
    /// <param name="_validateAccountSetup">
    /// A boolean that determines whether to validate if an account is setup on the <c>RetailStoreTenderTypeTable</c>; optional.
    /// </param>
    /// <returns>True if the payment is valid; otherwise, false.</returns>
    /// <remarks>
    /// If the return value is false, then this payment should not be saved to the database.
    /// </remarks>
    public boolean validateWrite(boolean _showErrors = true, boolean _validateAccountSetup = true)
    {
        boolean isValid;

        // Check if the order is being modified.
        if (mcrCustPaymTable.PostedAmount > mcrCustPaymTable.Amount
            && RetailPaymentsBalanceCoveredByLoyaltyPointsFlight::instance().isEnabled())
        {
            // Confirm that the loyalty points for the balance amount are already posted.
            isValid = this.isBalanceCoveredByPreviousPayment();
        }
        else
        {
            isValid = super(_showErrors, false);
        }

        // serial number is required
        if (!this.hasPaymTypeData())
        {
            isValid = false;

            // Log message for loyalty card serial number is required.
            eventSource.EventWriteLoyaltyCardSerialNumberIsRequired(funcName());

            if (_showErrors)
            {
                // "A loyalty card number is required."
                throw error("@Retail:LoyaltyCardNumberIsRequired");
            }
        }

        RetailLoyaltyCard cardTable = this.findLoyaltyCard();

        // Check that the loyalty card exists.
        if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::LoyaltyCard && !cardTable)
        {
            isValid = false;

            // Log message for loyalty card not found for payment.
            eventSource.EventWriteLoyaltyCardNotFound(funcName());
        }

        if (!mcrCustPaymTable.checkAllowPaymentByPolicies(_showErrors))
        {
            isValid = false;
        }

        // Validate card setup
        // Related card table must be of type loyalty card
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable = RetailStoreTenderTypeCardTable::find(
            mcrCustPaymTable.Channel,
            mcrCustPaymTable.TenderTypeId,
            mcrCustPaymTable.CardTypeId);
        RetailTenderTypeCardTable retailTenderTypeCardTable;

        if (retailStoreTenderTypeCardTable)
        {
            retailTenderTypeCardTable = RetailTenderTypeCardTable::find(retailStoreTenderTypeCardTable.cardTypeId);

            if (retailTenderTypeCardTable.cardTypes != RetailCardTypesBase::LoyaltyCard)
            {
                isValid = false;

                // Log message for LoyaltyCard is not supported for channel.
                eventSource.EventWriteLoyaltyCardNotSupportedForChannel(funcName());

                if (_showErrors)
                {
                    throw error(strFmt("@MCR40420",
                        retailTenderTypeCardTable.cardTypes,
                        RetailChannelTable::findByOperatingUnitId(mcrCustPaymTable.Channel).ChannelType));
                }
            }

            // payment account is required if parameter is true
            if (_validateAccountSetup && retailStoreTenderTypeCardTable.LedgerDimension == 0)
            {
                isValid = false;

                // Log message for no payment account is configured for payment method.
                eventSource.EventWritePaymentAccountIsNotConfigured(funcName());

                if (_showErrors)
                {
                    throw error(strFmt("@MCR10845", mcrCustPaymTable.TenderTypeId));
                }
            }

        }
        else
        {
            isValid = false;

            // Log message for not a valid payment method for channel.
            eventSource.EventWriteNotAValidPaymentMethodForChannel(funcName());

            if (_showErrors)
            {
                throw error(strFmt("@MCR40422",
                    mcrCustPaymTable.CardTypeId,
                    RetailChannelTable::findByRecId(mcrCustPaymTable.Channel).name()));
            }
        }

        // Finally validate if we can authorize the requested amount
        AmountCur authAmount = mcrCustPaymTable.getUnpostedAmount();

        if (authAmount > 0)
        {
            MCRCustPaymTable tmpMcrCustPaymTable;
            // Only one payment of type Loyalty Card is allowed.
            select firstOnly recid from tmpMcrCustPaymTable
                where tmpMcrCustPaymTable.RefTableId == mcrCustPaymTable.RefTableId
                    && tmpMcrCustPaymTable.RefRecid == mcrCustPaymTable.RefRecId
                    && tmpMcrCustPaymTable.CustPaymType == mcrCustPaymType::LoyaltyCard
                    && tmpMcrCustPaymTable.RecId != mcrCustPaymTable.recid;

            if (tmpMcrCustPaymTable)
            {
                // Log message for multiple payments for tendertype Loyalty Card not allowed.
                eventSource.EventWriteMultiplePaymentsForTendertypeLoyaltyCardNotAllowed(funcName());

                // Found another Loyalty Card payment, so fail.
                isValid = false;

                if (_showErrors)
                {
                    // Multiple payments of type Loyalty card are not allowed.
                    throw error(strFmt("@Retail:MultiplePaymentsNotAllowed", retailTenderTypeCardTable.cardTypes));
                }
            }

            boolean authorized;
            container packedRewardPointLinesContainer;

            [authorized, packedRewardPointLinesContainer] = RetailLoyaltyManager::AuthorizeRewardPointsForPayment(mcrCustPaymTable.salesTable(), cardTable.CardNumber, authAmount);

            if (isValid && !authorized)
            {
                // Log message for payment amount exceeds what is allowed for this loyalty card in this sale.
                eventSource.EventWritePaymentAmountExceedsAllowedPaymentForLoyaltyCardInThisSale(funcName());

                isValid = false;

                if (_showErrors)
                {
                    // "The loyalty payment amount exceeds what is allowed for this loyalty card in this sale."
                    throw error("@Retail:PaymentExceedsLoyaltyCardBalance");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBalanceCoveredByPreviousPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the balance amount for the modified order is covered by the previous loyalty payment.
    /// </summary>
    /// <returns>True if the balance on the sales order is covered by the loyalty points; otherwise, false.</returns>
    internal boolean isBalanceCoveredByPreviousPayment()
    {
        boolean isBalanceCoveredByPoints;

        if (mcrCustPaymTable.RecId != 0
            && mcrCustPaymTable.Amount > 0
            && mcrCustPaymTable.PostedAmount > 0
            && mcrCustPaymTable.PostedAmount - mcrCustPaymTable.Amount > 0
            && RetailPaymentsBalanceCoveredByLoyaltyPointsFlight::instance().isEnabled())
            {
                SalesTable salesTableLocal = mcrCustPaymTable.salesTable();
                MCRCustPaymTotals mcrCustPaymTotalsLocal = MCRCustPaymTotals::construct(salesTableLocal.TableId, salesTableLocal.RecId);
                AmountCur balance = mcrCustPaymTotalsLocal.getTotalSalesAmount() - mcrCustPaymTotalsLocal.getTotalPaymAmount();
                AmountCur amountCoveredByLoyaltyPoints = RetailLoyaltyManager::AmountCoveredByLoyaltyPoints(
                    salesTableLocal, mcrCustPaymTable.getLoyaltyCardNumber(), balance);

                if (amountCoveredByLoyaltyPoints < 0 && balance == amountCoveredByLoyaltyPoints)
                {
                    isBalanceCoveredByPoints = true;
                }
            }

        return isBalanceCoveredByPoints;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>