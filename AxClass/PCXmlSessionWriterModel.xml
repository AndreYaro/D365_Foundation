<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Writes session XML for a product configuration model.
/// </summary>
class PcXmlSessionWriterModel
{
    PCXmlWriter   attributeTypeWriter;
    PCXmlWriter   componentTreeWriter;
    PCXmlWriter   modelWriter;

    PCConfigurationControl              configurationControl;
    PCComponentControl                  componentControl;
    PCRuntimeCacheController            runtimeCacheController;

    Set                                 parsedTypes;
    PCXmlSessionDatabaseRelationTypes   parsedSystemTableConstraintTypes;
    Map                                 parsedIntegerDomains;
    Map                                 parsedComponents;
    LanguageId                          sessionLangaugeId;

    private PCInstrumentationLogger logger;

    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupLocalizedNameForRootComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for the localized name for the root component.
    /// </summary>
    /// <param name="_rootComponent">
    /// The root component of the product configuration model.
    /// </param>
    /// <returns>
    /// A localized name for the root component.
    /// </returns>
    protected PCName lookupLocalizedNameForRootComponent(PCClass _rootComponent)
    {
        // get the name of the root component
        PCName rootComponentName = EcoResCategoryTranslation::findByCategoryAndLanguage(_rootComponent.RecId, sessionLangaugeId).FriendlyName;

        // default to system language if no translation exist in the client language
        return rootComponentName != '' ? rootComponentName : _rootComponent.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSessionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for the session values.
    /// </summary>
    /// <param name="_rootComponent">
    /// A root component.
    /// </param>
    /// <param name="_configuration">
    /// A configuration.
    /// </param>
    /// <returns>
    /// An instance of the <c>PCComponentInstance</c> class.
    /// </returns>
    protected PCComponentInstance lookupSessionValues(PCClass _rootComponent, PCProductConfiguration _configuration)
    {
        PCComponentInstance                 componentInstance;
        PCComponentInstanceRootComponent    rootComponentInstance;

        using (var activityContext = logger.preRuntime().loadSessionValues())
        {
            if (_configuration)
            {
                select  firstonly componentInstance
                where componentInstance.ProductConfiguration == _configuration.RecId
                join firstonly RecId from rootComponentInstance
                    where   rootComponentInstance.RootComponentClass == _rootComponent.RecId
                    &&      rootComponentInstance.ComponentInstance == componentInstance.RecId;
            }

            return componentInstance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupUIComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for the user interface component that is associated with the product configuration model.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// A product configuration model record.
    /// </param>
    protected void lookupUIComponent(PCProductConfigurationModel _productConfigurationModel)
    {
        using (var activityContext = logger.preRuntime().loadUI())
        {
            PCConfigurationUIGrouping::synchronizeUIControlWithModel(_productConfigurationModel);
            configurationControl = PCConfigurationControl::findByProductConfigurationModel(_productConfigurationModel.RecId);
            componentControl = PCComponentControl::findByRootComponent(_productConfigurationModel.RecId, _productConfigurationModel.RootComponentClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        modelWriter         = PCXmlWriter::construct();
        attributeTypeWriter = PCXmlWriter::construct();
        componentTreeWriter = PCXmlWriter::construct();

        parsedTypes                         = new Set(Types::Int64);
        parsedSystemTableConstraintTypes    = PCXmlSessionDatabaseRelationTypes::construct();
        parsedIntegerDomains                = new Map(Types::Int64, Types::String);
        parsedComponents                    = new Map(Types::Int64, Types::Class);
        sessionLangaugeId                   = LanguageTable::defaultLanguage();
        runtimeCacheController              = PCRuntimeCacheController::construct();

        logger = PCInstrumentationLogger::createLogger(classStr(PCXmlSessionWriterModel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModelXmlWriter</Name>
				<Source><![CDATA[
    public PCXmlWriter parmModelXmlWriter(PCXmlWriter _modelWriter = modelWriter)
    {
        modelWriter = _modelWriter;

        return modelWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEndTagsAndFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the ending xml tags and finishes the write by writing the result of the type definitions and the component tree.
    /// </summary>
    /// <param name="_xmlWriter">
    /// An instance of the <c>XmlWriter</c> class.
    /// </param>
    protected void writeEndTagsAndFinish(PCXmlWriter _xmlWriter)
    {
        parsedSystemTableConstraintTypes.writeTypeDefinitionsIL(_xmlWriter);

        _xmlWriter.writeRaw(attributeTypeWriter.writeToString());
        _xmlWriter.writeRaw(componentTreeWriter.writeToString());
        _xmlWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// A record in the <c>PCProductConfigurationModel</c> table.
    /// </param>
    /// <param name="_configuration">
    /// The product configuration session to load in configuration.
    /// </param>
    /// <param name="_xmlWriter">
    /// The XML writer that is used to store the XML representation of this record.
    /// </param>
    /// <param name="_priceMethod">
    /// The method used to calculate the unit price, defaults to cost; optional.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    public void write(
        PCProductConfigurationModel     _productConfigurationModel,
        PCProductConfiguration          _configuration,
        PCXmlWriter                     _xmlWriter,
        PCPriceMethod                   _priceMethod = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct())
    {
        PCClass                     rootComponent;
        PCComponentInstance         componentInstance;
        PCXmlSessionWriterComponent xmlSessionWriterComponent = PCXmlSessionWriterComponent::construct();
        Name                        rootComponentName;
        PCRuntimeInstanceIdManager  runtimeInstanceIdManager = PCRuntimeInstanceIdManager::construct();

        rootComponent = _productConfigurationModel.getRootComponent();

        componentInstance   = this.lookupSessionValues(rootComponent, _configuration);

        rootComponentName   = this.lookupLocalizedNameForRootComponent(rootComponent);

        this.lookupUIComponent(_productConfigurationModel);

        this.writeStartTags(_xmlWriter, _productConfigurationModel.Name);

        xmlSessionWriterComponent.write(rootComponent,
                                        rootComponentName,
                                        attributeTypeWriter,
                                        componentTreeWriter,
                                        componentInstance,
                                        configurationControl,
                                        componentControl,
                                        parsedTypes,
                                        parsedSystemTableConstraintTypes,
                                        parsedIntegerDomains,
                                        sessionLangaugeId,
                                        new StackBase(Types::Record),
                                        runtimeInstanceIdManager,
                                        _priceMethod,
                                        _runtimePriceModelInstance
                                        );

        this.writeEndTagsAndFinish(_xmlWriter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the XML representation of the specified product model that is compatible with the product
    ///    configuration.
    /// </summary>
    /// <param name="_model">
    ///    The product model from which to extract the generated XML.
    /// </param>
    /// <param name="_configuration">
    ///    The instance of the configuration that will be loaded with the current configuration; optional.
    /// </param>
    /// <param name="_priceMethod">
    /// The method used to calculate the unit price, defaults to cost; optional.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    /// <returns>
    ///    A string that contains the generated XML representation of the specified product model.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified model is not valid.
    /// </exception>
    public str writeModel(  PCProductConfigurationModel     _model,
                            PCProductConfiguration          _configuration = null,
                            PCPriceMethod                   _priceMethod = PCPriceMethod::Cost,
                            PCRuntimePriceModelInstance     _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct())
    {
        str xml;

        PCContractNotNull::assertRecord(_model, funcName());

        if (PCModelCachingForExistingVariantFixedFlight::instance().isEnabled() || _configuration.RecId == 0 )
        {
            xml = runtimeCacheController.getRuntimeXml(tableNum(PCProductConfigurationModel), _model.RecId, _runtimePriceModelInstance.parmPriceModel(), _runtimePriceModelInstance.parmCurrency());
        }

        if (xml == '')
        {
            this.write(_model, PCModelCachingForExistingVariantFixedFlight::instance().isEnabled() && _configuration.RecId != 0 ? null : _configuration, modelWriter, _priceMethod, _runtimePriceModelInstance);

            xml = modelWriter.writeToString();

            if (PCModelCachingForExistingVariantFixedFlight::instance().isEnabled() || _configuration.RecId == 0 )
            {
                runtimeCacheController.createEntry(tableNum(PCProductConfigurationModel), _model.RecId, xml, _runtimePriceModelInstance.parmPriceModel(), _runtimePriceModelInstance.parmCurrency());
            }
        }

        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStartTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the starting xml tags for the product configuration model.
    /// </summary>
    /// <param name="_xmlWriter">
    /// An instance of the <c>PCXmlWriter</c> class.
    /// </param>
    /// <param name="_modelName">
    /// Name of the product configuration model.
    /// </param>
    protected void writeStartTags(PCXmlWriter _xmlWriter, PCName _modelName)
    {
        _xmlWriter.writeStartElement(#modelElement);
        _xmlWriter.writeAttributeString(#nameAttribute, _modelName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterModel construct()
    {
        return new PCXmlSessionWriterModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimeCacheController</Name>
				<Source><![CDATA[
    public PCRuntimeCacheController parmRuntimeCacheController(PCRuntimeCacheController _runtimeCacheController = runtimeCacheController)
    {
        runtimeCacheController = _runtimeCacheController;

        return runtimeCacheController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML representation of a subcomponent that is compatible with the product configuration.
    /// </summary>
    /// <param name="_subComponent">
    /// Identifies the subcomponent in the <c>PCClass</c> table.
    /// </param>
    /// <param name="_xmlWriter">
    /// The XML writer that is used to store the XML representation of this record.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    public void writeSubComponent(
        PCClass                         _subComponent,
        PCXmlWriter                     _xmlWriter,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct())
    {
        Name                        subComponentName;

        PCXmlSessionWriterComponent xmlSessionWriterComponent   = PCXmlSessionWriterComponent::construct();
        PCRuntimeInstanceIdManager  runtimeInstanceIdManager    = PCRuntimeInstanceIdManager::construct();

        subComponentName   = this.lookupLocalizedNameForRootComponent(_subComponent);

        this.writeStartTags(_xmlWriter, subComponentName);

        xmlSessionWriterComponent.write(_subComponent,
                                        subComponentName,
                                        attributeTypeWriter,
                                        componentTreeWriter,
                                        null, //PCComponentInstance
                                        null, //PCConfigurationControl
                                        null, //PCComponentControl
                                        parsedTypes,
                                        parsedSystemTableConstraintTypes,
                                        parsedIntegerDomains,
                                        sessionLangaugeId,
                                        new StackBase(Types::Record),
                                        runtimeInstanceIdManager,
                                        _runtimePriceModelInstance.parmPriceMethod(),
                                        _runtimePriceModelInstance
                                        );

        this.writeEndTagsAndFinish(_xmlWriter);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>