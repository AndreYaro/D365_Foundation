<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationExternalNavigationViewContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CLMIntegrationExternalNavigationViewContract</c> class is to replace placeholders with actual values in the URL for view navigation type.
/// </summary>
[CLMIntegrationExternalNavigation(CLMIntegrationNavigationType::ViewContract)]
internal class CLMIntegrationExternalNavigationViewContract extends CLMIntegrationExternalNavigationHandler
{
    private CompanyInfo companyInfo;
    private TableId contractTableId = tableNum(CLMIntegrationContractTable);
    private TableId companyInfoTableId = tableNum(CompanyInfo);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getContractTable</Name>
				<Source><![CDATA[
    private CLMIntegrationContractTable getContractTable()
    {
        return contextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    private CompanyInfo getCompanyInfo()
    {
        if (!companyInfo)
        {
            companyInfo = CompanyInfo::findRecId(this.getContractTable().LegalEntity);
        }

        return companyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholderWithValue</Name>
				<Source><![CDATA[
    public str replacePlaceholderWithValue(str _placeholder)
    {
        if (contextRecord.TableId != tableNum(CLMIntegrationContractTable))
        {
            throw error(strFmt("@CLMIntegration:ContextRecordForViewContractNotSupported", tableId2Name(contextRecord.TableId), tableStr(CLMIntegrationContractTable)));
        }

        TableId tableId;
        FieldId fieldId;

        [tableId, fieldId] = this.getTableIdAndFieldIdFromPlaceholder(_placeholder);

        switch (tableId)
        {
            case contractTableId:
                return any2Str(this.getContractTable().(fieldId));

            case companyInfoTableId:
                return any2Str(this.getCompanyInfo().(fieldId));

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSupportedPlaceholders</Name>
				<Source><![CDATA[
    public void initializeSupportedPlaceholders()
    {
        supportedTableFields = new Set(Types::String);

        supportedTableFields.add(this.createPlaceholderStringForTableField(contractTableId, fieldNum(CLMIntegrationContractTable, ContractId)));
        supportedTableFields.add(this.createPlaceholderStringForTableField(contractTableId, fieldNum(CLMIntegrationContractTable, ExternalContractId)));
        supportedTableFields.add(this.createPlaceholderStringForTableField(contractTableId, fieldNum(CLMIntegrationContractTable, ContractType)));
        supportedTableFields.add(this.createPlaceholderStringForTableField(contractTableId, fieldNum(CLMIntegrationContractTable, ContractName)));
        supportedTableFields.add(this.createPlaceholderStringForTableField(contractTableId, fieldNum(CLMIntegrationContractTable, LatestAmendmentId)));
        supportedTableFields.add(this.createPlaceholderStringForTableField(contractTableId, fieldNum(CLMIntegrationContractTable, LatestExternalAmendmentId)));
        supportedTableFields.add(this.createPlaceholderStringForTableField(companyInfoTableId, fieldNum(CompanyInfo, DataArea)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>