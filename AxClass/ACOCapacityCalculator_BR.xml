<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ACOCapacityCalculator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ACOCapacityCalculator_BR</c> class calculate capacity hours in cost center
/// </summary>
class ACOCapacityCalculator_BR
{
    boolean     costCenterPlannedCapacityCalculated, costCenterUsedCapacityCalculated;
    date        fromDate, toDate;

    CostAmount              costCenterPlannedCapacity, costCenterUsedCapacity;
    DimensionAttributeRecId costCenterDimensionAttribute;
    Map                     resourcesPlannedCapacities, resourcesUsedCapacities, resourceStdCostsUsedCapacities;
    RecId                   costCenterDimensionAttributeValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costCenterPlannedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost center capacity
    /// </summary>
    /// <returns>
    /// The total capacity of the cost center in the period
    /// </returns>
    public Hours costCenterPlannedCapacity()
    {
        Map             resources;
        MapEnumerator   resourcesEnumerator;
        WrkCtrTable     wrkCtrTable;
        CostAmount      costCenterAmount;

        if (!costCenterPlannedCapacityCalculated)
        {
            resources = WrkCtrTable::resourcesInCostCenter_BR(costCenterDimensionAttribute, costCenterDimensionAttributeValue);

            resourcesEnumerator = resources.getEnumerator();

            while (resourcesEnumerator.moveNext())
            {
                wrkCtrTable         =  resourcesEnumerator.currentValue();
                costCenterAmount    += this.resourcePlannedCapacity(wrkCtrTable.WrkCtrId);
                costCenterAmount    -= this.resourceStdCostsUsedCapacity(wrkCtrTable.WrkCtrId);
            }

            costCenterPlannedCapacity           = costCenterAmount;
            costCenterPlannedCapacityCalculated = true;
        }

        return costCenterPlannedCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costCenterUsedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total used capacity of the cost center.
    /// </summary>
    /// <returns>
    /// The total hours of used capacity of the cost center.
    /// </returns>
    public Hours costCenterUsedCapacity()
    {
        CostAmount      costCenterAmount;
        Map             resources;
        MapEnumerator   resourcesEnumerator;
        WrkCtrTable     wrkCtrTable;

        if (!costCenterUsedCapacityCalculated)
        {
            resources = WrkCtrTable::resourcesInCostCenter_BR(costCenterDimensionAttribute, costCenterDimensionAttributeValue);

            resourcesEnumerator = resources.getEnumerator();

            while (resourcesEnumerator.moveNext())
            {
                wrkCtrTable         =   resourcesEnumerator.currentValue();
                costCenterAmount    +=  this.resourceUsedCapacity(wrkCtrTable.WrkCtrId);
            }

            costCenterUsedCapacity              = costCenterAmount;
            costCenterUsedCapacityCalculated    = true;
        }

        return costCenterUsedCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query that returns the route transactions generated in a period.
    /// </summary>
    /// <param name="_onlyStdCost">
    /// True if only route transactions related to a production of item with standard cost is desired; false otherwise.
    /// </param>
    /// <returns>
    /// Returns the query.
    /// </returns>
    protected Query getQuery(boolean _onlyStdCost = false)
    {
        Query                   query;
        QueryBuildDataSource    prodTableQbds, qbds;

        query = new Query();

        prodTableQbds = query.addDataSource(tableNum(ProdTable));

        prodTableQbds.addRange(fieldNum(ProdTable, ProdStatus)).value(queryValue(ProdStatus::Completed));
        prodTableQbds.addRange(fieldNum(ProdTable, StUpDate)).value(queryRange(fromDate, toDate));
        prodTableQbds.addRange(fieldNum(ProdTable, RealDate)).value(queryRange(fromDate, toDate));

        qbds = prodTableQbds.addDataSource(tableNum(ProdRouteTrans));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldNum(ProdRouteTrans, DateWIP)).value(queryRange(fromDate, toDate));
        qbds.addRange(fieldNum(ProdRouteTrans, TransType)).value(queryValue(ProdRouteTransType::Time));

        qbds = prodTableQbds.addDataSource(tableNum(InventTable));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = qbds.addDataSource(tableNum(InventModelGroupItem));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = qbds.addDataSource(tableNum(InventModelGroup));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        if (_onlyStdCost)
        {
            qbds.addRange(fieldNum(InventModelGroup, InventModel)).value(queryValue(InventModel::StdCost));
        }
        else
        {
            qbds.addRange(fieldNum(InventModelGroup, InventModel)).value(SysQuery::valueNot(InventModel::StdCost));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an isntance of the <c>ACOCapacityCalculator_BR</c> class.
    /// </summary>
    /// <param name="_fromDate">
    /// A date to define when the period begins.
    /// </param>
    /// <param name="_toDate">
    /// A date to define when the period ends.
    /// </param>
    /// <param name="_costCenterDimensionAttribute">
    /// The RecId of the cost center dimension
    /// </param>
    /// <param name="_costCenterDimensionAttributeValue">
    /// The RecId of the value of the cost center
    /// </param>
    public void new(date _fromDate, date _toDate, DimensionAttributeRecid _costCenterDimensionAttribute, RecId _costCenterDimensionAttributeValue)
    {
        fromDate                            = _fromDate;
        toDate                              = _toDate;
        costCenterDimensionAttribute        = _costCenterDimensionAttribute;
        costCenterDimensionAttributeValue   = _costCenterDimensionAttributeValue;

        resourcesPlannedCapacities      = new Map(Types::String, Types::Real);
        resourcesUsedCapacities         = new Map(Types::String, Types::Real);
        resourceStdCostsUsedCapacities  = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourcePlannedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the capacity of a resource.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The resource id.
    /// </param>
    /// <returns>
    /// The capacity in hours of the resource.
    /// </returns>
    public Hours resourcePlannedCapacity(WrkCtrId _wrkCtrId)
    {
        WrkCtrTable wrkCtrTable;

        if (!resourcesPlannedCapacities.exists(_wrkCtrId))
        {
            wrkCtrTable = wrkCtrTable::find(_wrkCtrId);
            resourcesPlannedCapacities.insert(_wrkCtrId, WrkCtrCapacitySum::plannedCapacity_BR(wrkCtrTable, fromDate, toDate));
        }

        return resourcesPlannedCapacities.lookup(_wrkCtrId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourcesStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the resources id of the cost center.
    /// </summary>
    /// <returns>
    /// The resources id of the cost center.
    /// </returns>
    public str resourcesStr()
    {
        Set             resources;
        SetEnumerator   resourcesEnumerator;
        str             resourcesStr;

        resources   = WrkCtrTable::resourcesInCostCenter_BR(costCenterDimensionAttribute, costCenterDimensionAttributeValue).keySet();

        resourcesEnumerator = resources.getEnumerator();

        while (resourcesEnumerator.moveNext())
        {
            resourcesStr = queryRangeConcat(resourcesStr, resourcesEnumerator.current());
        }

        return resourcesStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceStdCostsUsedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total hours consumed from a resource to produce items with standard cost.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The resource id.
    /// </param>
    /// <returns>
    /// The total amount of hours consumed in the resouce to produce items with standard costs.
    /// </returns>
    public Hours resourceStdCostsUsedCapacity(WrkCtrId _wrkCtrId)
    {
        Query           query;
        QueryRun        queryRun;
        ProdRouteTrans  prodRouteTrans;
        Hours           hours = 0;

        if (!resourceStdCostsUsedCapacities.exists(_wrkCtrId))
        {
            query   = this.getQuery(true);

            query.dataSourceTable(tableNum(ProdRouteTrans)).addRange(fieldNum(ProdRouteTrans, WrkCtrId)).value(queryValue(_wrkCtrId));
            query.dataSourceTable(tableNum(ProdRouteTrans)).addSelectionField(fieldNum(ProdRouteTrans, Hours), SelectionField::Sum);

            queryRun    = new QueryRun(query);

            while (queryRun.next())
            {
                prodRouteTrans  = queryRun.get(tableNum(ProdRouteTrans));
                hours           = prodRouteTrans.Hours;
            }

            resourceStdCostsUsedCapacities.insert(_wrkCtrId, hours);
        }

        return Hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceUsedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the used capacity of a resource in the period.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The resource id.
    /// </param>
    /// <returns>
    /// The used capacity of the resource in hours.
    /// </returns>
    public Hours resourceUsedCapacity(WrkCtrId _wrkCtrId)
    {
        Query           query;
        QueryRun        queryRun;
        ProdRouteTrans  prodRouteTrans;
        Hours           hours = 0;

        if (!resourcesUsedCapacities.exists(_wrkCtrId))
        {
            query   = this.getQuery();

            query.dataSourceTable(tableNum(ProdRouteTrans)).addRange(fieldNum(ProdRouteTrans, WrkCtrId)).value(queryValue(_wrkCtrId));
            query.dataSourceTable(tableNum(ProdRouteTrans)).addSelectionField(fieldNum(ProdRouteTrans, Hours), SelectionField::Sum);

            queryRun    = new QueryRun(query);

            while (queryRun.next())
            {
                prodRouteTrans  = queryRun.get(tableNum(ProdRouteTrans));
                hours           = prodRouteTrans.Hours;
            }

            resourcesUsedCapacities.insert(_wrkCtrId, hours);
        }

        return hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceSubSetList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves list of resources id of the cost center.
    /// </summary>
    /// <returns>
    /// The list of resources id of the cost center.
    /// </returns>
    public List resourceSubSetList()
    {
        const int ResourceSubSetCountMax = 50;
        Set             totalResources;
        SetEnumerator   resourcesEnumerator;
        List            resourceSubSet;
        int             resourceCount = 0;
        str             resourcesStr;

        resourceSubSet = new List(Types::String);

        totalResources      = WrkCtrTable::resourcesInCostCenter_BR(costCenterDimensionAttribute, costCenterDimensionAttributeValue).keySet();
        resourcesEnumerator = totalResources.getEnumerator();

        while (resourcesEnumerator.moveNext())
        {
            resourcesStr = queryRangeConcat(resourcesStr, resourcesEnumerator.current());
            resourceCount++;
            if (resourceCount == ResourceSubSetCountMax)
            {
                resourceSubSet.addEnd(resourcesStr);
                resourceCount = 0;
                resourcesStr  = '';
            }
        }

        if (resourceCount)
        {
            resourceSubSet.addEnd(resourcesStr);
        }

        return resourceSubSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>