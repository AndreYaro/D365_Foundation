<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransQueryBasedHelper_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class containing helper methods for processing TaxSpecPerLedgerTrans report using report query when date of VAT register is enabled.
/// </summary>
public class TaxSpecPerLedgerTransQueryBasedHelper_W extends TaxSpecPerLedgerTransBaseHelper
{
    protected TaxSpecPerLedgerTransTmp reportTableTmp;
    protected RecordInsertList recordInsertList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        recordInsertList = new RecordInsertList(reportTableTmp.TableId, true, true, true, true, true, reportTableTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the logic required for the report.
    /// </summary>
    public void process()
    {
        this.initializeRanges();
        this.addDefaultWhereClause();

        reportTable.setConnection(userConnection);
        reportTableTmp.setConnection(userConnection);

        this.processDetails();

        if (contract.parmTotalOnly())
        {
            this.processTotals();
        }
        else
        {
            reportTable.linkPhysicalTableInstance(reportTableTmp);
        }
        this.updateMainAccountName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefaultWhereClause</Name>
				<Source><![CDATA[
    private void addDefaultWhereClause()
    {
        reportQuery.dataSourceTable(tableNum(TaxTransGeneralJournalAccountEntry)).addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship)).value(queryValue(TaxTransRelationshipType::Tax));
        reportQuery.dataSourceTable(tableNum(TaxTransGeneralJournalAccountEntry)).addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship)).value(queryValue(TaxTransRelationshipType::UseTaxPayable));
        reportQuery.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxOrigin)).value(SysQuery::valueNot(enum2int(TaxOrigin::TaxReporting)));
        reportQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, Ledger)).value(SysQuery::value(ledgerRecId));

        reportQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(fromDate, toDate));
        reportQuery.dataSourceTable(tableNum(MainAccountLedgerDimensionView)).addRange(fieldNum(MainAccountLedgerDimensionView, MainAccount)).value(SysQuery::range(fromMainAccount, toMainAccount));
        reportQuery.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxCode)).value(SysQuery::range(fromTaxCode, toTaxCode));

        reportQuery.dataSourceTable(tableNum(TaxTrans_W)).joinMode(JoinMode::InnerJoin);
        findOrCreateRange_W(reportQuery.dataSourceTable(tableNum(TaxTrans_W)),fieldNum(taxTrans_W, VatDueDate_W), queryRange(fromVATDate, toVATDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetails</Name>
				<Source><![CDATA[
    private void processDetails()
    {
        this.processDetailsForLegacyDocuments();
        this.processDetailsForSDBasedDocuments();
        this.processDetailsForZeroTaxWithoutAD();

        if (isReportByAccTypeExpenditureFeatureEnabled)
        {
            this.updateExpenditureAccountForSDL();
        }

        recordInsertList.insertDatabase();

        select firstOnly RecId from reportTableTmp;
        this.updateRecordNumbers(reportTableTmp.getPhysicalTableName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetailsForLegacyDocuments</Name>
				<Source><![CDATA[
    private void processDetailsForLegacyDocuments()
    {
        Query reportQueryLocal = reportQuery.makeCopy();
        QueryBuildRange qbr;

        //
        //&& (taxTrans.SourceDocumentLine == 0
        //            || taxTrans.TaxOrigin == TaxOrigin::CashDisc
        //            || taxTrans.TaxOrigin == TaxOrigin::Payment
        //            || taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
        //
        QueryBuildDataSource taxTransDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxTrans));
        qbr = taxTransDataSource.addRange(fieldNum(TaxTrans, SourceDocumentLine));
        qbr.value(strFmt('((%1 == %2) || (%3 == %4) || (%5 == %6) || (%7 == %8))',
            fieldStr(TaxTrans, SourceDocumentLine), queryValue(0),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::CashDisc)),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::Payment)),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::TaxReversed))));

        GeneralJournalAccountEntry generalJournalAccountEntry;
        generalJournalAccountEntry.skipPostLoad(true);

        QueryRun queryRun = new QueryRun(reportQueryLocal);
        new SkipAOSValidationPermission().assert();

        while (queryRun.next())
        {
            GeneralJournalEntry generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            MainAccountLedgerDimensionView mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;
            TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
            TaxTrans_W taxTrans_W = queryRun.get(tableNum(TaxTrans_W)) as TaxTrans_W;
            TaxAccountingDistParentLineView acctDistView = queryRun.get(tableNum(TaxAccountingDistParentLineView)) as TaxAccountingDistParentLineView;
            TaxTable taxTable = queryRun.get(tableNum(TaxTable)) as TaxTable;
            TransactionReversalTrans transReversal = queryRun.get(tableNum(TransactionReversalTrans)) as TransactionReversalTrans;
            TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry = queryRun.get(tableNum(TaxTransGeneralJournalAccountEntry)) as TaxTransGeneralJournalAccountEntry;

            this.addReportTableTemp(
                generalJournalEntry.RecId,
                generalJournalEntry.AccountingDate,
                generalJournalEntry.JournalNumber,
                generalJournalEntry.SubLedgerVoucher,
                generalJournalAccountEntry.RecId,
                generalJournalAccountEntry.Text,
                generalJournalAccountEntry.AccountingCurrencyAmount,
                generalJournalAccountEntry.IsCredit,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                mainAccountLedgerDimensionView.MainAccount,
                mainAccountLedgerDimensionView.Name,
                mainAccountLedgerDimensionView.MainAccountRecId,
                taxTrans.RecId,
                taxTrans.TaxCode,
                taxTrans.TaxDirection,
                taxTable.TaxName,
                taxTrans.TaxAmount,
                taxTrans.TaxBaseAmount,
                transReversal.TraceNum,
                taxTrans_W.VatDueDate_W,
                taxTrans.TaxInCostPriceMST);
        }
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetailsForSDBasedDocuments</Name>
				<Source><![CDATA[
    private void processDetailsForSDBasedDocuments()
    {
        Query reportQueryLocal = reportQuery.makeCopy();
        QueryBuildRange qbr;

        //
        //&& taxTrans.SourceDocumentLine != 0
        //            && taxTrans.TaxOrigin != TaxOrigin::Payment
        //            && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
        //
        QueryBuildDataSource taxTransDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxTrans));
        qbr = taxTransDataSource.addRange(fieldNum(TaxTrans, SourceDocumentLine));
        qbr.value(strFmt('((%1 != %2) && (%3 != %4) && (%5 != %6))',
            fieldStr(TaxTrans, SourceDocumentLine), queryValue(0),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::Payment)),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::TaxReversed))));

        QueryBuildDataSource acctDistViewDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxAccountingDistParentLineView));
        acctDistViewDataSource.joinMode(JoinMode::InnerJoin);

        //
        // (((taxTransGeneralJournalAccountEntry.MonetaryAmountType  == MonetaryAmount::ExtendedPrice ||
        //   taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge) && acctDistView.MonetaryAmount == MonetaryAmount::Tax)
        //   || ((taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::PriceVariance ||
        //       taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ChargeVariance) && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance))
        //
        QueryBuildDataSource linkTableDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxTransGeneralJournalAccountEntry));
        qbr = acctDistViewDataSource.addRange(fieldNum(TaxAccountingDistParentLineView, MonetaryAmount));
        qbr.value(strFmt('((((%1.%2 == %3) || (%1.%2 == %9)) && (%4.%5 == %6)) || (( (%1.%2 == %7) || (%1.%2 == %10)) && (%4.%5 == %8)))',
                          linkTableDataSource.name(), fieldStr(TaxTransGeneralJournalAccountEntry, MonetaryAmountType), queryValue(enum2int(MonetaryAmount::ExtendedPrice)),
                          acctDistViewDataSource.name(), fieldStr(TaxAccountingDistParentLineView, MonetaryAmount), queryValue(enum2int(MonetaryAmount::Tax)),
                          queryValue(enum2int(MonetaryAmount::PriceVariance)), queryValue(enum2int(MonetaryAmount::TaxVariance)), queryValue(enum2int(MonetaryAmount::Charge)),
                          queryValue(enum2int(MonetaryAmount::ChargeVariance))));

        GeneralJournalAccountEntry generalJournalAccountEntry;
        generalJournalAccountEntry.skipPostLoad(true);

        QueryRun queryRun = new QueryRun(reportQueryLocal);
        new SkipAOSValidationPermission().assert();

        while (queryRun.next())
        {
            GeneralJournalEntry generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            MainAccountLedgerDimensionView mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;
            TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
            TaxTrans_W taxTrans_W = queryRun.get(tableNum(TaxTrans_W)) as TaxTrans_W;
            TaxAccountingDistParentLineView acctDistView = queryRun.get(tableNum(TaxAccountingDistParentLineView)) as TaxAccountingDistParentLineView;
            TaxTable taxTable = queryRun.get(tableNum(TaxTable)) as TaxTable;
            TransactionReversalTrans transReversal = queryRun.get(tableNum(TransactionReversalTrans)) as TransactionReversalTrans;
            TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry = queryRun.get(tableNum(TaxTransGeneralJournalAccountEntry)) as TaxTransGeneralJournalAccountEntry;

            this.addReportTableTemp(
                generalJournalEntry.RecId,
                generalJournalEntry.AccountingDate,
                generalJournalEntry.JournalNumber,
                generalJournalEntry.SubLedgerVoucher,
                generalJournalAccountEntry.RecId,
                generalJournalAccountEntry.Text,
                generalJournalAccountEntry.AccountingCurrencyAmount,
                generalJournalAccountEntry.IsCredit,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                mainAccountLedgerDimensionView.MainAccount,
                mainAccountLedgerDimensionView.Name,
                mainAccountLedgerDimensionView.MainAccountRecId,
                taxTrans.RecId,
                taxTrans.TaxCode,
                taxTrans.TaxDirection,
                taxTable.TaxName,
                acctDistView.AccountingCurrencyAmount,
                taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount,
                transReversal.TraceNum,
                taxTrans_W.VatDueDate_W);
        }
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetailsForZeroTaxWithoutAD</Name>
				<Source><![CDATA[
    private void processDetailsForZeroTaxWithoutAD()
    {
        Query reportQueryLocal = reportQuery.makeCopy();
        QueryBuildRange qbr;

        //
        //&& taxTrans.SourceDocumentLine != 0
        //            && taxTrans.TaxOrigin != TaxOrigin::Payment
        //            && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
        //
        QueryBuildDataSource taxTransDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxTrans));
        qbr = taxTransDataSource.addRange(fieldNum(TaxTrans, SourceDocumentLine));
        qbr.value(strFmt('((%1 != %2) && (%3 != %4) && (%5 != %6))',
            fieldStr(TaxTrans, SourceDocumentLine), queryValue(0),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::Payment)),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::TaxReversed))));

        QueryBuildDataSource acctDistViewDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxAccountingDistParentLineView));
        acctDistViewDataSource.joinMode(JoinMode::NoExistsJoin);

        GeneralJournalAccountEntry generalJournalAccountEntry;
        generalJournalAccountEntry.skipPostLoad(true);

        QueryRun queryRun = new QueryRun(reportQueryLocal);
        new SkipAOSValidationPermission().assert();

        while (queryRun.next())
        {
            GeneralJournalEntry generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            MainAccountLedgerDimensionView mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;
            TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
            TaxTrans_W taxTrans_W = queryRun.get(tableNum(TaxTrans_W)) as TaxTrans_W;
            TaxAccountingDistParentLineView acctDistView = queryRun.get(tableNum(TaxAccountingDistParentLineView)) as TaxAccountingDistParentLineView;
            TaxTable taxTable = queryRun.get(tableNum(TaxTable)) as TaxTable;
            TransactionReversalTrans transReversal = queryRun.get(tableNum(TransactionReversalTrans)) as TransactionReversalTrans;
            TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry = queryRun.get(tableNum(TaxTransGeneralJournalAccountEntry)) as TaxTransGeneralJournalAccountEntry;

            this.addReportTableTemp(
                generalJournalEntry.RecId,
                generalJournalEntry.AccountingDate,
                generalJournalEntry.JournalNumber,
                generalJournalEntry.SubLedgerVoucher,
                generalJournalAccountEntry.RecId,
                generalJournalAccountEntry.Text,
                generalJournalAccountEntry.AccountingCurrencyAmount,
                generalJournalAccountEntry.IsCredit,
                mainAccountLedgerDimensionView.FullyQualifiedAccount,
                mainAccountLedgerDimensionView.MainAccount,
                mainAccountLedgerDimensionView.Name,
                mainAccountLedgerDimensionView.MainAccountRecId,
                taxTrans.RecId,
                taxTrans.TaxCode,
                taxTrans.TaxDirection,
                taxTable.TaxName,
                FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportIncTaxForSourceDocFlighting::instance())? taxTrans.TaxAmount : 0,
                taxTrans.TaxBaseAmount,
                transReversal.TraceNum,
                taxTrans_W.VatDueDate_W);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenditureAccountForSDL</Name>
				<Source><![CDATA[
    private void updateExpenditureAccountForSDL()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        TaxTrans taxTrans;
        GeneralJournalAccountEntry generalJournalAccountEntryInvoice;
        InventTransOrigin inventTransOrigin;
        InventTransPosting inventTransPosting;

        update_recordSet reportTableTmp
            setting AmountDebit = generalJournalAccountEntryInvoice.AccountingCurrencyAmount
                where reportTable.AmountCredit == 0
            join generalJournalAccountEntry
                where reportTableTmp.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump
            join generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join inventTransPosting
                where generalJournalEntry.SubledgerVoucher == inventTransPosting.Voucher
                    && generalJournalAccountEntry.LedgerDimension == inventTransPosting.OffsetLedgerDimension
                    && inventTransPosting.PostingTypeOffset == generalJournalAccountEntry.PostingType
                    && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
            join taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
            join taxTrans
                where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
                    && taxTrans.SourceDocumentLine != 0
            join AccountingCurrencyAmount from generalJournalAccountEntryInvoice
                where generalJournalEntry.RecId == generalJournalAccountEntryInvoice.GeneralJournalEntry
                    && generalJournalAccountEntryInvoice.LedgerDimension == inventTransPosting.LedgerDimension
                    && generalJournalAccountEntryInvoice.PostingType == inventTransPosting.PostingType
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == taxTrans.InventTransId
                    && inventTransOrigin.RecId == inventTransPosting.InventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTotals</Name>
				<Source><![CDATA[
    private void processTotals()
    {
        TaxSpecPerLedgerTransTmp ledgerTemp;
        TaxSpecPerLedgerTransTmp taxTemp;

        ledgerTemp.setConnection(userConnection);
        taxTemp.setConnection(userConnection);

        if (!contract.parmTotalOnly())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        //
        // Values with record number not equal to have values repeated because of one ot many joins.
        // They should be set to zero while calculating totals.
        //
        update_recordSet reportTableTmp
        setting AmountCredit = 0, AmountDebit = 0
            where reportTableTmp.RecordNumber != 1;

        if (contract.parmGroupDataBy() == TaxSpecPerLedgerTransGroupBy::LedgerAccount)
        {
            if (contract.parmSubtotalByTaxCode())
            {
                if (contract.parmMainAccountOnly())
                {
                    insert_recordset reportTable (MainAccount, Name, MainAccountRecId, TaxCode, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select MainAccount, Name, MainAccountRecId, TaxCode, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.MainAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId, reportTableTmp.TaxCode;
                }
                else
                {
                    insert_recordset reportTable (FullyQualifiedAccount, Name, MainAccountRecId, TaxCode, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select FullyQualifiedAccount, Name, MainAccountRecId, TaxCode, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.FullyQualifiedAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId, reportTableTmp.TaxCode;
                }
            }
            else
            {
                if (contract.parmMainAccountOnly())
                {
                    insert_recordset reportTable (MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select MainAccount, Name, MainAccountRecId, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.MainAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId;
                }
                else
                {
                    insert_recordset reportTable (FullyQualifiedAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select FullyQualifiedAccount, Name, MainAccountRecId, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.FullyQualifiedAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId;
                }
            }
        }
        else
        {
            insert_recordset taxTemp (TaxCode, TaxReceivable, TaxPayable)
            select TaxCode, sum(TaxReceivable), sum(TaxPayable) from reportTableTmp
                group by reportTableTmp.TaxCode;

            if (contract.parmMainAccountOnly())
            {
                insert_recordset ledgerTemp (TaxCode, MainAccount, AmountDebit, AmountCredit, TaxBaseAmount)
                select TaxCode, MainAccount, sum(AmountDebit), sum(AmountCredit), sum(TaxBaseAmount) from reportTableTmp
                    group by reportTableTmp.TaxCode, reportTableTmp.MainAccount;
            }
            else
            {
                insert_recordset ledgerTemp (TaxCode, FullyQualifiedAccount, AmountDebit, AmountCredit, TaxBaseAmount)
                select TaxCode, FullyQualifiedAccount, sum(AmountDebit), sum(AmountCredit), sum(TaxBaseAmount) from reportTableTmp
                    group by reportTableTmp.TaxCode, reportTableTmp.FullyQualifiedAccount;
            }

            insert_recordset reportTable (FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,  AmountDebit, AmountCredit, TaxBaseAmount, TaxCode, TaxPayable, TaxReceivable)
            select FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxBaseAmount from ledgerTemp
            join TaxCode, TaxPayable, TaxReceivable from taxTemp
                where ledgerTemp.TaxCode == taxTemp.TaxCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReportTableTemp</Name>
				<Source><![CDATA[
    private void addReportTableTemp(
        RefRecId _generalJournalEntryRecId,
        TransDate _accountingDate,
        GeneralJournalEntryJournalNumber _journalNumber,
        Voucher _voucher,
        GeneralJournalEntryRecId _generalJournalAccountEntryRecId,
        TransactionTextLarge _text,
        AmountCur _amountDebit,
        NoYes _isCredit,
        DimensionDisplayValue _fullyQualifiedAccount,
        MainAccountNum _mainAccount,
        AccountName _name,
        RefRecId _mainAccountRecId,
        TaxTransRecId _taxTransRecId,
        TaxCode _taxCode,
        TaxDirection _taxDirection,
        TaxName _taxCodeName,
        TaxAmount _taxAmount,
        TaxBase _taxBaseAmount,
        TraceNum _traceNum,
        VATDueDate_W _vatDueDate,
        TaxAmount _taxInCostPriceMST = 0)
    {
        reportTableTmp.clear();
        reportTableTmp.GeneralJournalEntry = _generalJournalEntryRecId;
        reportTableTmp.AccountingDate = _accountingDate;
        reportTableTmp.JournalNumber = _journalNumber;
        if (_voucher)
        {
            reportTableTmp.Voucher = _voucher;
        }
        else
        {
            reportTableTmp.Voucher = literalStr("@SYS110428");
        }

        reportTableTmp.GeneralJournalAccountEntry = _generalJournalAccountEntryRecId;
        reportTableTmp.Text = _text;
        reportTableTmp.IsCredit = _isCredit;

        if (reportTableTmp.IsCredit)
        {
            reportTableTmp.AmountDebit = 0;
            reportTableTmp.AmountCredit = -_amountDebit;
        }
        else
        {
            reportTableTmp.AmountDebit = _amountDebit;
            reportTableTmp.AmountCredit = 0;
        }

        reportTableTmp.FullyQualifiedAccount = _fullyQualifiedAccount;
        reportTableTmp.MainAccount = _mainAccount;
        reportTableTmp.Name = _name;
        reportTableTmp.MainAccountRecId = _mainAccountRecId;

        reportTableTmp.TaxTrans = _taxTransRecId;
        reportTableTmp.TaxCode = _taxCode;
        reportTableTmp.TaxDirection = _taxDirection;
        reportTableTmp.TaxCodeName = _taxCodeName;
        reportTableTmp.TaxAmount = _taxAmount;
        reportTableTmp.TaxBaseAmount = _taxBaseAmount;

        reportTableTmp.TaxInCostPriceMST = _taxInCostPriceMST;
        reportTableTmp.TaxReceivable = 0;
        reportTableTmp.TaxPayable = 0;

        if (reportTableTmp.TaxDirection == TaxDirection::IncomingTax)
        {
            reportTableTmp.TaxReceivable = reportTableTmp.TaxAmount - reportTableTmp.TaxInCostPriceMST;
        }
        else if (reportTableTmp.TaxDirection == TaxDirection::OutgoingTax)
        {
            reportTableTmp.TaxPayable = -reportTableTmp.TaxAmount;
        }

        reportTableTmp.TraceNum = _traceNum;
        reportTableTmp.VatDueDate_W = _vatDueDate;

        recordInsertList.add(reportTableTmp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>