<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkMaximumChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkMaximumChecker</c> class performs the maximum checks when creating work.
/// </summary>
public class WhsWorkMaximumChecker
{
    internal  Qty                  runningMaxQty;
    internal  int                  runningPickLines;
    internal  Weight               runningWeight;
    internal  Volume               runningVolume;
    internal  WHSEstimatedTime     runningEstTime;

    internal  Qty                  prevRunningMaxQty;
    internal  int                  prevRunningPickLines;
    internal  Weight               prevRunningWeight;
    internal  Volume               prevRunningVolume;
    internal  WHSEstimatedTime     prevRunningEstTime;

    private WHSEstimatedTime       singleUnitLineTime; // Used to reset headers

    protected EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();

    private WHSWorkCreateId                    workCreateId;
    private WHSTmpWorkLine                     tmpWorkLine;    
    private WhsWorkMaximumCheckerResult        result;
    
    private boolean whsWorkBreakDontCheckCanFitOneMoreItemFlightEnabled = WHSWorkBreakDontCheckCanFitOneMoreItemFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsWorkMaximumChecker construct()
    {
        return new WhsWorkMaximumChecker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRunningValuesToPreviousValues</Name>
				<Source><![CDATA[
    internal void resetRunningValuesToPreviousValues()
    {
        runningMaxQty = prevRunningMaxQty;
        runningPickLines = prevRunningPickLines;
        runningWeight = prevRunningWeight;
        runningVolume = prevRunningVolume;
        runningEstTime = prevRunningEstTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetHeaderMaxFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the variables that track header maximums.
    /// </summary>
    /// <param name="_excessQty">
    /// The new quantity to be accounted for by the header maximums.
    /// </param>
    /// <param name="_workTemplateTable">
    /// The current work template.
    /// </param>
    /// <param name="_tmpWorkLine">
    /// The work line just processed.
    /// </param>
    public void resetHeaderMaxFields(
        Qty                  _excessQty,
        WHSWorkTemplateTable _workTemplateTable,
        WHSTmpWorkLine       _tmpWorkLine)
    {
        Qty newWorkHeaderQty = _excessQty;

        if (_workTemplateTable.MaxEstimatedPickTime)
        {
            runningEstTime = newWorkHeaderQty * singleUnitLineTime;
        }
        if (_workTemplateTable.MaxPickLines)
        {
            runningPickLines = 0;
        }
        if (_workTemplateTable.MaxQtyWorkHeader)
        {
            runningMaxQty = newWorkHeaderQty;
        }
        if (_workTemplateTable.MaxVolumeWorkHeader)
        {
            runningVolume = newWorkHeaderQty * InventTable::find(_tmpWorkLine.ItemId).UnitVolume;
        }
        if (_workTemplateTable.MaxWeightWorkHeader)
        {
            runningWeight = newWorkHeaderQty * InventTable::find(_tmpWorkLine.ItemId).grossWeight();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResultOnSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the result if this maximum is exceeded by the smallest amount of all configured maximums.
    /// </summary>
    /// <param name="_maxQty">
    /// The quantity that a line is exceeding a maximum by.
    /// </param>
    /// <param name="_maxHeaderQty">
    /// Optional, a work header maximum's actual value.
    /// </param>
    protected final void updateResultOnSplit(
        Qty                         _maxQty,
        Qty                         _maxHeaderQty = 0)
    {
        result.maxHeaderQty = _maxHeaderQty;
        Qty newExcessQty = tmpWorkLine.InventQty - _maxQty;
        result.split = true;

        if (!result.excessQty || (result.excessQty < newExcessQty && newExcessQty != 0))
        {
            Qty tmpMaxQty = result.maxHeaderQty != 0 ? result.maxHeaderQty : _maxQty;
            result.excessQty = newExcessQty;
            result.allowMultipleSplits = result.excessQty > tmpMaxQty;

            if (result.maxHeaderQty == 0)
            {
                result.minLineQty = _maxQty;
            }
            // run extra validation for running multiple splits with headers in case extra splits can happen from line value.
            else if (!result.allowMultipleSplits && result.minLineQty != 0)
            {
                result.allowMultipleSplits = (result.excessQty > result.minLineQty) && (result.minLineQty < result.maxHeaderQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResultOnWorkBreak</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the result to break work.
    /// </summary>   
    protected final void updateResultOnWorkBreak()
    {
        result.setWorkBreak = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkCreationHistoryLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a work creation history line record.
    /// </summary>
    /// <param name="_message">
    /// Message to be written in the record.
    /// </param>   
    protected final void createWorkCreationHistoryLog(WHSMessage _message)
    {
        WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(workCreateId, _message, true, tmpWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineQuantityMaximum</Name>
				<Source><![CDATA[
    private void checkLineQuantityMaximum(WhsWorkMaximumRuleParameters _parameters)
    {
        NoYes usePackingQty = _parameters.workTemplateTable.UsePackingQty;
        ItemId itemId = _parameters.tmpWorkLine.ItemId;

        // Check line quantity maximum
        if (_parameters.workTemplateTable.MaxQty || usePackingQty)
        {
            InventHandlingUnitId handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
            UnitOfMeasureSymbol maxUnitId = _parameters.workTemplateTable.MaxUnitId;

            if (usePackingQty)
            {
                maxUnitId = handlingUnitId;
            }

            // Only check qty maximum if inventory units can be converted to maximum units.
            if (usePackingQty
                || unitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(handlingUnitId),
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(maxUnitId),
                                                itemId,
                                                _parameters.tmpWorkLine.InventDimId))
            {
                InventHandlingQty tmpHandlingQty;

                // Find maximum quantity value.
                if (usePackingQty)
                {
                    tmpHandlingQty = WHSLoadLine::findbyRecId(_parameters.tmpWorkLine.LoadLineRefRecId).PackingQty;
                }
                else
                {
                    tmpHandlingQty = unitConverter.convert(_parameters.workTemplateTable.MaxQty,
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(_parameters.workTemplateTable.MaxUnitId),
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(handlingUnitId),
                                                                NoYes::No,
                                                                itemId,
                                                                _parameters.tmpWorkLine.InventDimId,
                                                                NoYes::No);
                }

                if (_parameters.tmpWorkLine.InventQty >= tmpHandlingQty)
                {
                    InventHandlingQty maxFieldHandlingQty = tmpHandlingQty;
                    this.createWorkCreationHistoryLog(strFmt("@WAX2075", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                    this.updateResultOnSplit(maxFieldHandlingQty);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeaderQuantityMaximum</Name>
				<Source><![CDATA[
    private void checkHeaderQuantityMaximum(WhsWorkMaximumRuleParameters _parameters)
    {
        Qty maxQtyWorkHeader = _parameters.workTemplateTable.MaxQtyWorkHeader;
        if (maxQtyWorkHeader)
        {
            prevRunningMaxQty = runningMaxQty;
            runningMaxQty += _parameters.tmpWorkLine.InventQty;
            if (runningMaxQty >= maxQtyWorkHeader)
            {
                InventHandlingQty maxFieldHandlingQty = maxQtyWorkHeader - prevRunningMaxQty;
                ItemId itemId = _parameters.tmpWorkLine.ItemId;
                this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineSplitQuantityMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                this.updateResultOnSplit(maxFieldHandlingQty, maxQtyWorkHeader);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberOfPickLines</Name>
				<Source><![CDATA[
    private void checkNumberOfPickLines(WhsWorkMaximumRuleParameters _parameters)
    {
        if (_parameters.workTemplateTable.MaxPickLines)
        {
            prevRunningPickLines = runningPickLines;
            runningPickLines++;

            if (runningPickLines >= _parameters.workTemplateTable.MaxPickLines)
            {
                result.split = true;
                ItemId itemId = _parameters.tmpWorkLine.ItemId;

                this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineSplitDueToPickMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                if (!result.excessQty || result.excessQty > _parameters.tmpWorkLine.InventQty)
                {
                    result.excessQty = 0; // Setting qty to 0 will result in splitting the next line after the current one.
                    result.allowMultipleSplits = false; // One line can never be split multiple times for the pick line maximum.
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWeight</Name>
				<Source><![CDATA[
    private void checkWeight(WhsWorkMaximumRuleParameters _parameters)
    {
        Weight grossWeight = _parameters.inventTable.grossWeight();

        if (grossWeight > 0) // Weight maximum calculations should only be performed if item weight is set.
        {
            Weight lineTotalGrossWeight = _parameters.tmpWorkLine.InventQty * grossWeight;
            ItemId itemId = _parameters.tmpWorkLine.ItemId;
            Weight maxWeight = _parameters.workTemplateTable.MaxWeight;
            
            if (maxWeight && lineTotalGrossWeight >= maxWeight)
            {
                InventHandlingQty maxFieldHandlingQty = roundDownDec(maxWeight / grossWeight, _parameters.inventUnitDecimalPrecision);
                
                boolean workLineSplit = this.checkWorkLineSplit(maxFieldHandlingQty);

                if (!workLineSplit)
                {
                    this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineNotSplitWeightMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                }
                else
                {
                    this.createWorkCreationHistoryLog(strFmt("@WAX2076", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                }
            }
            
            // Check total weight
            Weight maxWeightWorkHeader = _parameters.workTemplateTable.MaxWeightWorkHeader;
            if (maxWeightWorkHeader)
            {
                prevRunningWeight = runningWeight;
                runningWeight += lineTotalGrossWeight;
                if (runningWeight >= maxWeightWorkHeader)
                {
                    InventHandlingQty maxFieldHandlingQty = roundDownDec((maxWeightWorkHeader - prevRunningWeight) / grossWeight, _parameters.inventUnitDecimalPrecision);
                    InventHandlingQty workHeaderMaxQty = roundDownDec(maxWeightWorkHeader / grossWeight, _parameters.inventUnitDecimalPrecision);
                    
                    var workHeaderSplit = this.checkWorkHeaderSplit(maxFieldHandlingQty, workHeaderMaxQty);
                    if (!workHeaderSplit)
                    {
                        this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineNotSplitWorkUnitWeightMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                    }
                    else 
                    {
                        this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineSplitWeightMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                    }
                    
                }
                else if (maxWeightWorkHeader - runningWeight < grossWeight && !whsWorkBreakDontCheckCanFitOneMoreItemFlightEnabled)
                {
                    this.updateResultOnWorkBreak();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorkLineSplit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean checkWorkLineSplit(InventHandlingQty _maxFieldHandlingQty)
    {
        if (!_maxFieldHandlingQty)
        {
            result.maximumsExceed = true;
            return false;
        }
        else
        {
            this.updateResultOnSplit(_maxFieldHandlingQty);
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorkHeaderSplit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean checkWorkHeaderSplit(InventHandlingQty _maxFieldHandlingQty, InventHandlingQty _workHeaderMaxQty)
    {
        if (!_maxFieldHandlingQty 
            && !_workHeaderMaxQty)
        {
            result.maximumsExceed = true;
            return false;
        }
        else
        {
            this.updateResultOnSplit(_maxFieldHandlingQty, _workHeaderMaxQty);
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTotalEstimatedPickTime</Name>
				<Source><![CDATA[
    private void checkTotalEstimatedPickTime(WhsWorkMaximumRuleParameters _parameters)
    {
        if (_parameters.workTemplateTable.MaxEstimatedPickTime)
        {
            WHSLaborStandards laborStandards = new WHSLaborStandards(workCreateId);

            WHSEstimatedTime lineTime = laborStandards.computeEstimatedTimeFromTmpWorkLine(_parameters.workTemplateTable.WorkTemplateCode, _parameters.tmpWorkLine);
            singleUnitLineTime = roundUpDec(lineTime / _parameters.tmpWorkLine.InventQty, _parameters.inventUnitDecimalPrecision);
            prevRunningEstTime = runningEstTime;
            runningEstTime += lineTime;
            if (runningEstTime >= _parameters.workTemplateTable.MaxEstimatedPickTime)
            {
                ItemId itemId = _parameters.tmpWorkLine.ItemId;

                // Because estimated time changes for different items
                InventHandlingQty maxFieldHandlingQty = roundDownDec((_parameters.workTemplateTable.MaxEstimatedPickTime - prevRunningEstTime) / singleUnitLineTime, _parameters.inventUnitDecimalPrecision);
                InventHandlingQty workHeaderMaxQty = roundDownDec(_parameters.workTemplateTable.MaxEstimatedPickTime / singleUnitLineTime, _parameters.inventUnitDecimalPrecision);
                this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineSplitPickTimeMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                this.updateResultOnSplit(maxFieldHandlingQty, workHeaderMaxQty);
            }
            else if (_parameters.workTemplateTable.MaxEstimatedPickTime - runningEstTime < singleUnitLineTime)
            {
                this.updateResultOnWorkBreak();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVolume</Name>
				<Source><![CDATA[
    private void checkVolume(WhsWorkMaximumRuleParameters _parameters)
    {
        if (_parameters.inventTable.UnitVolume > 0) // Don't check volume maximums if volume is not configured.
        {
            ItemId itemId = _parameters.tmpWorkLine.ItemId;
            
            // Check Volume
            Volume maxVolume = _parameters.workTemplateTable.MaxVolume;
            Volume unitVolume = _parameters.inventTable.UnitVolume;
            InventQty inventQty = _parameters.tmpWorkLine.InventQty;

            if (maxVolume && inventQty * unitVolume >= maxVolume)
            {
                InventHandlingQty maxFieldHandlingQty = roundDownDec(maxVolume / unitVolume, _parameters.inventUnitDecimalPrecision);
                
                if (!maxFieldHandlingQty)
                {
                    this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineNotSplitVolumeMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                    result.maximumsExceed = true;
                }
                else
                {
                    this.createWorkCreationHistoryLog(strFmt("@WAX2077", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                    this.updateResultOnSplit(maxFieldHandlingQty);
                }
            }

            // Check total volume
            Volume maxVolumeWorkHeader = _parameters.workTemplateTable.MaxVolumeWorkHeader;

            if (maxVolumeWorkHeader)
            {
                prevRunningVolume = runningVolume;
                runningVolume += inventQty * unitVolume;

                if (runningVolume >= maxVolumeWorkHeader)
                {
                    InventHandlingQty maxFieldHandlingQty = roundDownDec((maxVolumeWorkHeader - prevRunningVolume) / unitVolume, _parameters.inventUnitDecimalPrecision);
                    InventHandlingQty workHeaderMaxQty = roundDownDec(maxVolumeWorkHeader / unitVolume, _parameters.inventUnitDecimalPrecision);
                    
                    if (!maxFieldHandlingQty
                        && !workHeaderMaxQty)
                    {
                        this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineNotSplitWorkUnitVolumeMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                        result.maximumsExceed = true;
                    }
                    else
                    {
                        this.createWorkCreationHistoryLog(strFmt("@WAX:TempWorkLineSplitVolumeMaximum", itemId, _parameters.tmpWorkLine.HighestQty, _parameters.tmpWorkLine.HighestUnitId));
                        this.updateResultOnSplit(maxFieldHandlingQty, workHeaderMaxQty);
                    }
                }
                else if (maxVolumeWorkHeader - runningVolume < unitVolume && !whsWorkBreakDontCheckCanFitOneMoreItemFlightEnabled)
                {
                    this.updateResultOnWorkBreak();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the maximum rules.
    /// </summary>
    /// <param name = "_parameters">The parameters for the rules.</param>
    protected void runRules(WhsWorkMaximumRuleParameters _parameters)
    {
        this.checkLineQuantityMaximum(_parameters);
        this.checkHeaderQuantityMaximum(_parameters);
        this.checkNumberOfPickLines(_parameters);
        this.checkWeight(_parameters);
        this.checkVolume(_parameters);
        this.checkTotalEstimatedPickTime(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal WhsWorkMaximumCheckerResult run(
        WHSWorkTemplateTable _workTemplateTable,
        WHSTmpWorkLine       _tmpWorkLine,
        WHSWorkCreateId      _workCreateId)
    {   
        result = WhsWorkMaximumCheckerResult::construct();
        workCreateId = _workCreateId;
        tmpWorkLine = _tmpWorkLine;

        WhsWorkMaximumRuleParameters parameters = WhsWorkMaximumRuleParameters::construct();
        parameters.workTemplateTable = _workTemplateTable;
        parameters.tmpWorkLine = _tmpWorkLine;
        parameters.inventTable = InventTable::find(_tmpWorkLine.ItemId);
        parameters.handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_tmpWorkLine.ItemId);
        parameters.inventUnitDecimalPrecision = UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(parameters.handlingUnitId));
        parameters.workCreateId = _workCreateId;

        this.runRules(parameters);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>