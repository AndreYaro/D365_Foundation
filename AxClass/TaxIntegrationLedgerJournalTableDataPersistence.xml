<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationLedgerJournalTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationLedgerJournalTableDataPersistence</c> class persists data to <c>LedgerJournalTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(LedgerJournalTable))]
public class TaxIntegrationLedgerJournalTableDataPersistence
    extends TaxIntegrationAbstractDataPersistenceTemplate
{
    protected LedgerJournalTable ledgerJournalTable;
    protected LedgerJournalTrans ledgerJournalTrans;

    protected TaxIntegrationJournalDocumentObject journalDocument;
    boolean isTaxIntBankOrTaxSpeciExchRateIntercompEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationLedgerJournalTableDataPersistence</c>.
    /// </summary>
    /// <param name = "_document">The document to process.</param>
    public void new(TaxIntegrationDocumentObject _document)
    {
        this.journalDocument = _document;
        super(_document);

        isTaxIntBankOrTaxSpeciExchRateIntercompEnabled = TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.ledgerJournalTable)
            .forUpdate()
            .where(this.ledgerJournalTable, fieldStr(LedgerJournalTable, RecId))
                .isEqualToLiteral(this.document.getLocalRecId())
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.ledgerJournalTrans)
            .forUpdate()
            .where(this.ledgerJournalTrans, fieldStr(LedgerJournalTrans, JournalNum))
                .isEqualToLiteral(this.ledgerJournalTable.JournalNum)
            .where(this.ledgerJournalTrans, fieldStr(LedgerJournalTrans, Voucher))
                .isEqualToLiteral(this.journalDocument.getLegacyTaxableDocument().getReferenceNumber())
            .where(this.ledgerJournalTrans, fieldStr(ledgerJournalTrans, RecId))
                .isNotEqualToLiteral(this.journalDocument.getLegacyTaxableDocument().getUnsavedLedgerJournalTrans().RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        if (!this.ledgerJournalTrans.RecId
            && document.hasUnsavedLine())
        {
            this.ledgerJournalTrans = journalDocument.getLegacyTaxableDocument().getUnsavedLedgerJournalTrans();
            ledgerJournalTrans.selectForUpdate(true);
        }

        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.ledgerJournalTrans.TableId, this.ledgerJournalTrans.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        TaxIntegrationJournalLineObject line = _line as TaxIntegrationJournalLineObject;

        if (line.isTaxable())
        {
            if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId))
            {
                VatDueDate_W vatDueDate;

                if (TaxIntegrationAutoFillDateOfVATRegisterFlight::instance().isEnabled())
                {
                    vatDueDate = TaxSpecificExchangeRate::getDateOfVATRegister(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);

                    if (!vatDueDate)
                    {
                        vatDueDate = ledgerJournalTrans.VatDueDate_W;
                    }

                    if (!vatDueDate)
                    {
                        vatDueDate = line.getCalculationDateV2();
                    }
                }
                else
                {
                    vatDueDate = ledgerJournalTrans.VatDueDate_W;
                }

                if (vatDueDate)
                {
                    boolean isInterCompany = isTaxIntBankOrTaxSpeciExchRateIntercompEnabled && ledgerJournalTrans.Company && ledgerJournalTrans.Company != curExt();
                    LedgerRecId ledgerRecId =  isInterCompany ? Ledger::primaryLedger(ledgerJournalTrans.getCompanyLegalEntity()) : Ledger::current();

                    TaxSpecificExchangeRateHelper taxSpecificExchangeRateHelper = new TaxSpecificExchangeRateHelper( 
                        ledgerJournalTrans.TableId,
                        ledgerJournalTrans.RecId,
                        TaxIntegrationHelper::determineTransactionTypeByJournalLine(line),
                        line.getTransactionCurrencyCode(),
                        vatDueDate,
                        ledgerRecId);

                    Set maintainedCurrencyCodes = new Set(Types::String);
                    taxSpecificExchangeRateHelper.maintainAccountingCurrencyTaxSpecificExchangeRate();
                    CurrencyCode accountingCurrency = isInterCompany ? Ledger::accountingCurrency(ledgerJournalTrans.getCompanyLegalEntity()) : Ledger::accountingCurrency();
                    maintainedCurrencyCodes.add(accountingCurrency);

                    CurrencyCode reportingCurrency = isInterCompany ? Ledger::reportingCurrency(ledgerJournalTrans.getCompanyLegalEntity()) : Ledger::reportingCurrency();
                    if (!maintainedCurrencyCodes.in(reportingCurrency))
                    {
                        taxSpecificExchangeRateHelper.maintainReportingCurrencyTaxSpecificExchangeRate();
                        maintainedCurrencyCodes.add(reportingCurrency);
                    }

                    Set taxLineSet = line.getTaxLineSet();
                    SetEnumerator enumerator = taxLineSet.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        var taxLine = enumerator.current();
                        CurrencyCode taxCurrencyCode = taxLine.getTaxCurrencyCode();
                        if (!maintainedCurrencyCodes.in(taxCurrencyCode))
                        {
                            taxSpecificExchangeRateHelper.maintainTaxSpecificExchangeRate(taxCurrencyCode);
                            maintainedCurrencyCodes.add(taxCurrencyCode);
                        }
                    }
                }
            }
            else
            {
                SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);
                if (!isTaxIntBankOrTaxSpeciExchRateIntercompEnabled || !salesTaxTransactionExchangeRate)
                {
                    SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(
                        ledgerJournalTrans,
                        line.getTransactionCurrencyCode(),
                        TaxIntegrationHelper::determineTransactionTypeByJournalLine(line),
                        line.getCalculationDateV2());
                }
            }
        }

        TaxIntegrationSkipUpdateContext taxSkipUpdateContext = TaxIntegrationSkipUpdateContext::current();
        if (taxSkipUpdateContext && taxSkipUpdateContext.parmSkipUpdate())
        {
            return true;
        }

        this.saveVendorChargedTaxFromDocumentToTable(ledgerJournalTrans);

        // Update Tax ID to those lines of cust/vend type.
        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            || ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
            || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
        {
            TaxIntegrationTaxIdUtility::saveTaxIDFromDocumentToTable(document, ledgerJournalTrans);
        }

        if (ledgerJournalTrans.Listcode != document.getListCode())
        {
            ledgerJournalTrans.Listcode = document.getListCode();
            ledgerJournalTrans.doUpdate();
        }

        if (!line.isTaxable())
        {
            return true;
        }

        document.getLegacyTax().setExchRates(this.ledgerJournalTrans.CurrencyCode);

        TaxGroup taxGroup = line.getTaxGroup();
        TaxItemGroup taxItemGroup = line.getTaxItemGroup();
        ledgerJournalTrans.TaxItemGroup = taxItemGroup;
        ledgerJournalTrans.TaxGroup = taxGroup;

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            ledgerJournalTrans.VatDueDate_W = line.getVATRegisterDate();
            if (PurchParameters::find().DateOfExchRate_W == DateOfExchRate_W::DateOfVATRegister)
            {
                ledgerJournalTrans.ExchRate = line.getAccountingCurrencyFixedExchangeRate();
                ledgerJournalTrans.ReportingCurrencyExchRate = line.getReportingCurrencyFixedExchangeRate();
            }
        }
        ledgerJournalTrans.doUpdate();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveVendorChargedTaxFromDocumentToTable</Name>
				<Source><![CDATA[
    private void saveVendorChargedTaxFromDocumentToTable(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            || _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
        {
            if (this.isTaxIntegrationEnabledForTaxSolutionProvider
                && this.isTaxIntegrationISVAccrueUseTaxEnabled
                && document.getAccrueSalesTaxType() == TaxAccrueSalesTaxType::Advanced)
            {
                LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = _ledgerJournalTrans.ledgerJournalTransTaxExtension();
                ledgerJournalTransTaxExtension.VendorChargedTaxTolerance = document.getVendorChargedTaxTolerance();
                ledgerJournalTransTaxExtension.VendorChargedTaxAssessment = document.getVendorChargedTaxAssessment();
                ledgerJournalTransTaxExtension.save(_ledgerJournalTrans, true); 
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>