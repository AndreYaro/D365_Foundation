<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductCrossTableManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>EcoResProductCrossTableManager</c> provides support for defaulting and validating product data.
/// </summary>
class EcoResProductCrossTableManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultProductType</Name>
				<Source><![CDATA[
    // ================== Region (defaulting for shared product fields) ==============

    /// <summary>
    /// Defaults product type on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultProductType(EcoResIProductCrossTableData _productCreationData)
    {
        _productCreationData.productData().identification().parmProductType(EcoResProductType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductSubType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults product sub-type on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultProductSubType(EcoResIProductCrossTableData _productCreationData)
    {
        Set allowedProductTypes = _productCreationData.parmAllowedProductSubTypes();
        if (allowedProductTypes.in(EcoResProductSubtype::Product))
        {
            _productCreationData.productData().identification().parmProductSubType(EcoResProductSubType::Product);
        }
        else if (allowedProductTypes.in(EcoResProductSubtype::ProductMaster))
        {
            _productCreationData.productData().identification().parmProductSubType(EcoResProductSubType::ProductMaster);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults product number on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultProductNumber(EcoResIProductCrossTableData _productCreationData)
    {
        if (!_productCreationData.productData().identification().parmProductNumber() && _productCreationData.productData().identification().isReleasedProduct())
        {
            _productCreationData.productData().identification().parmProductNumber(_productCreationData.productData().identification().companySpecificData().parmItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductSearchName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults product search name on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultProductSearchName(EcoResIProductCrossTableData _productCreationData)
    {
        if (!_productCreationData.productData().identification().parmProductSearchName())
        {
            _productCreationData.productData().identification().parmProductSearchName(name2Alias(_productCreationData.productData().identification().parmProductName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVariantConfigurationTechnology</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults variant configuration technology on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultVariantConfigurationTechnology(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().parmProductSubType() == EcoResProductSubtype::ProductMaster)
        {
            _productCreationData.productData().variant().parmConfigurationTechnology(EcoResVariantConfigurationTechnologyType::PredefinedVariants);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsCatchWeightProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults <c>IsCatchWeightProduct</c> on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultIsCatchWeightProduct(EcoResIProductCrossTableData _productCreationData)
    {
        if (!EcoResProductCrossTableManager::canBeCatchWeightProduct(_productCreationData))
        {
            _productCreationData.productData().identification().parmIsCatchWeightProduct(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductServiceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults <c>ProductServiceType</c> on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    internal static void defaultProductServiceType(EcoResIProductCrossTableData _productCreationData)
    {
        EcoResProductIdentificationData identification =
            _productCreationData.productData().identification();
        if (identification.parmProductType() == EcoResProductType::Item)
        {
            identification.parmProductServiceType(EcoResProductServiceType::NotSpecified);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults product dimension group name on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultProductDimensionGroupName(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().parmProductSubType() == EcoResProductSubType::ProductMaster)
        {
            var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

            if (retailAttributesGlobalLookup)
            {
                if (_productCreationData.productData().retail().parmIsRetailKit())
                {
                    RecId productDimensionGroupRecId = EcoResProductDimensionGroup::findByDimensionGroupName(retailAttributesGlobalLookup.GroupProductDimension).RecId;
                    EcoResProductDimGroupSetup ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::newDimensionGroup(productDimensionGroupRecId);
                    
                    // if the default dimension group is not config only then clear the dimension group, otherwise set the dimension group to the default value retrieved from retailAttributesGlobalLookup.GroupProductDimension
                    if (!ecoResProductDimGroupSetup.isOnlyConfigActive())
                    {
                        _productCreationData.productData().variant().parmProductDimensionGroupName('');
                    }
                    else
                    {
                        _productCreationData.productData().variant().parmProductDimensionGroupName(retailAttributesGlobalLookup.GroupProductDimension);
                    }
                }
                else
                {
                    _productCreationData.productData().variant().parmProductDimensionGroupName(retailAttributesGlobalLookup.GroupProductDimension);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultGlobalStorageDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults global storage dimension group name on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultGlobalStorageDimensionGroupName(EcoResIProductCrossTableData _productCreationData)
    {
        var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

        if (retailAttributesGlobalLookup)
        {
            if (retailAttributesGlobalLookup.GroupStorageDimension)
            {
                _productCreationData.productData().referenceGroups().parmGlobalStorageDimensionGroupName(retailAttributesGlobalLookup.GroupStorageDimension);
            }
            else if (_productCreationData.productData().identification().isReleasedProduct())
            {
                _productCreationData.productData().referenceGroups().parmGlobalStorageDimensionGroupName(_productCreationData.productData().referenceGroups().parmStorageDimensionGroupName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultGlobalTrackingDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults global tracking dimension group name on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultGlobalTrackingDimensionGroupName(EcoResIProductCrossTableData _productCreationData)
    {
        var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

        if (retailAttributesGlobalLookup)
        {
            if (retailAttributesGlobalLookup.GroupTrackingDimension)
            {
                _productCreationData.productData().referenceGroups().parmGlobalTrackingDimensionGroupName(retailAttributesGlobalLookup.GroupTrackingDimension);
            }
            else if (_productCreationData.productData().identification().isReleasedProduct())
            {
                _productCreationData.productData().referenceGroups().parmGlobalTrackingDimensionGroupName(_productCreationData.productData().referenceGroups().parmTrackingDimensionGroupName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultColorGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults colour group ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultColorGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().parmProductSubType() == EcoResProductSubType::ProductMaster)
        {
            var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

            if (retailAttributesGlobalLookup)
            {
                _productCreationData.productData().variant().parmColorGroupId(retailAttributesGlobalLookup.VariantColorGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSizeGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults size group ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultSizeGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().parmProductSubType() == EcoResProductSubType::ProductMaster)
        {
            var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

            if (retailAttributesGlobalLookup)
            {
                _productCreationData.productData().variant().parmSizeGroupId(retailAttributesGlobalLookup.VariantSizeGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStyleGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults style group ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultStyleGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().parmProductSubType() == EcoResProductSubType::ProductMaster)
        {
            var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

            if (retailAttributesGlobalLookup)
            {
                _productCreationData.productData().variant().parmStyleGroupId(retailAttributesGlobalLookup.VariantStyleGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemId</Name>
				<Source><![CDATA[
    // ================== Region (defaulting for released product fields) ==============

    /// <summary>
    /// Defaults item ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultItemId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct() && !_productCreationData.productData().identification().companySpecificData().parmItemId())
        {
            _productCreationData.productData().identification().companySpecificData().parmItemId(_productCreationData.productData().identification().parmProductNumber());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSearchName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults search name on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultSearchName(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct() && !_productCreationData.productData().identification().companySpecificData().parmSearchName())
        {
            _productCreationData.productData().identification().companySpecificData().parmSearchName(name2Alias(_productCreationData.productData().identification().parmProductSearchName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStorageDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults storage dimension group name on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultStorageDimensionGroupName(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

            if (retailAttributesGlobalLookup)
            {
                _productCreationData.productData().referenceGroups().parmStorageDimensionGroupName(retailAttributesGlobalLookup.GroupStorageDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTrackingDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults tracking dimension group name on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultTrackingDimensionGroupName(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesGlobalLookup = EcoResProductCrossTableManager::retailAttributesGlobalLookup(_productCreationData);

            if (retailAttributesGlobalLookup)
            {
                _productCreationData.productData().referenceGroups().parmTrackingDimensionGroupName(retailAttributesGlobalLookup.GroupTrackingDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventoryUnitSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults inventory unit symbol on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultInventoryUnitSymbol(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                var unitInvent = UnitOfMeasure::find(retailAttributesLegalEntityLookup.UnitInvent);
                _productCreationData.productData().unitsOfMeasure().parmInventoryUnitSymbol(unitInvent.Symbol);
            }
            else
            {
                _productCreationData.productData().unitsOfMeasure().parmInventoryUnitSymbol(InventParameters::find().DefaultUnitId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSalesUnitSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults sales unit symbol on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultSalesUnitSymbol(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                var unit = UnitOfMeasure::find(retailAttributesLegalEntityLookup.UnitSales);
                _productCreationData.productData().unitsOfMeasure().parmSalesUnitSymbol(unit.Symbol);
            }
            else
            {
                _productCreationData.productData().unitsOfMeasure().parmSalesUnitSymbol(InventParameters::find().DefaultUnitId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchaseUnitSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults purchase unit symbol on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultPurchaseUnitSymbol(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                var unit = UnitOfMeasure::find(retailAttributesLegalEntityLookup.UnitPurchase);
                _productCreationData.productData().unitsOfMeasure().parmPurchaseUnitSymbol(unit.Symbol);
            }
            else
            {
                _productCreationData.productData().unitsOfMeasure().parmPurchaseUnitSymbol(InventParameters::find().DefaultUnitId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOMUnitSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults BOM unit symbol on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultBOMUnitSymbol(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                var unit = UnitOfMeasure::find(retailAttributesLegalEntityLookup.UnitBOM);
                _productCreationData.productData().unitsOfMeasure().parmBOMUnitSymbol(unit.Symbol);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSalesTaxItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults sales tax item group ID for sales on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultSalesTaxItemGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().taxation().parmSalesTaxItemGroupId(retailAttributesLegalEntityLookup.ItemSalesTaxGroupSales);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchaseTaxItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults sales tax item group ID for purchases on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultPurchaseTaxItemGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().taxation().parmPurchaseTaxItemGroupId(retailAttributesLegalEntityLookup.ItemSalesTaxGroupPurch);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults item group ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultItemGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().referenceGroups().parmItemGroupId(retailAttributesLegalEntityLookup.GroupItemGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemModelGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults item model group ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultItemModelGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().referenceGroups().parmItemModelGroupId(retailAttributesLegalEntityLookup.GroupInventoryModel);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBuyerGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults buyer group ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultBuyerGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().referenceGroups().parmItemBuyerGroupId(retailAttributesLegalEntityLookup.ItemBuyerGroupId);
            }
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWHSUOMSeqGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults unit sequence group ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultWHSUOMSeqGroupId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().referenceGroups().parmWHSUOMSeqGroupId(retailAttributesLegalEntityLookup.UOMSeqGroupId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrimaryVendorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults primary vendor ID on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultPrimaryVendorId(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().vendor().parmItemPrimaryVendorId(retailAttributesLegalEntityLookup.PrimaryVendorId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchasePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults purchase price on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultPurchasePrice(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().prices().parmPurchasePrice(retailAttributesLegalEntityLookup.PurchasePrice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults sales price on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultSalesPrice(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().prices().parmSalesPrice(retailAttributesLegalEntityLookup.SalesPrice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventoryPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults inventory price on an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to apply defaulting.</param>
    public static void defaultInventoryPrice(EcoResIProductCrossTableData _productCreationData)
    {
        if (_productCreationData.productData().identification().isReleasedProduct())
        {
            var retailAttributesLegalEntityLookup = EcoResProductCrossTableManager::retailAttributesLegalEntityLookup(_productCreationData);

            if (retailAttributesLegalEntityLookup)
            {
                _productCreationData.productData().prices().parmInventoryPrice(retailAttributesLegalEntityLookup.InventoryPrice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    // ==================== Region (events handlers) ================

    /// <summary>
    /// Validates data for an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to validate data.</param>
    /// <returns>True if validation passes; otherwise false.</returns>
    public static boolean validateWrite(EcoResIProductCrossTableData _productCreationData)
    {
        boolean ret = true;
        EcoResProductIdentificationData productIdentificationData = 
            _productCreationData.productData().identification();

        if (_productCreationData.productData().retail().parmIsRetailKit())
        {
            if (productIdentificationData.parmIsCatchWeightProduct())
            {
                ret = checkFailed("@Retail:CatchWeightProductCannotBeRetailKit");
            }

            if (productIdentificationData.parmProductSubType() != EcoResProductSubType::ProductMaster)
            {
                ret = checkFailed("@Retail:OnlyProductMastersCanBeRetailKits");
            }

            ret = ret & EcoResProductCrossTableManager::validateConfigOnlyProductDimensionGroup(_productCreationData);
        }

        if (productIdentificationData.parmProductServiceType() == EcoResProductServiceType::Warranty
            && !EcoResProductServiceWarranty::canBeWarrantyProduct(productIdentificationData))
        {
            ret = checkFailed("@Warranty:WarrantyCreationCheckError");
        }

        ret = ret && EcoResProductCrossTableManager::validateProductDimensionGroupsActive(_productCreationData);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data from an instance of <c>EcoResIProductCrossTableData</c> and <c>EcoResProduct</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> from which to insert data.</param>
    /// <param name = "_product">Instance of <c>EcoResProduct</c> from which to insert data.</param>
    public static void insert(EcoResIProductCrossTableData _productCreationData, EcoResProduct _product)
    {
        EcoResProductCrossTableManager::saveValuesToProduct(_productCreationData, _product);

        EcoResProductCrossTableManager::validateAndWriteRecordBuffer(_product);

        EcoResProductIdentifier ecoResProductIdentifier;
        ecoResProductIdentifier.ProductNumber = _productCreationData.productData().identification().parmProductNumber();
        ecoResProductIdentifier.Product = _product.RecId;
        EcoResProductCrossTableManager::validateAndWriteRecordBuffer(ecoResProductIdentifier);

        if (_product.isProductMaster())
        {
            if (_productCreationData.productData().variant().parmProductDimensionGroupRecId())
            {
                EcoResProductDimensionGroupProduct productDimensionGroupProduct;
                productDimensionGroupProduct.initFromProduct(_product);
                productDimensionGroupProduct.ProductDimensionGroup = _productCreationData.productData().variant().parmProductDimensionGroupRecId();
                EcoResProductCrossTableManager::validateAndWriteRecordBuffer(productDimensionGroupProduct);
            }
            var productMaster = _product as EcoResProductMaster;
            if (productMaster.isDimensionBased() || productMaster.isPredefinedVariants())
            {
                EcoResProductMasterModelingPolicy productMasterModelingPolicy;
                productMasterModelingPolicy.ProductMaster = productMaster.RecId;
                EcoResProductCrossTableManager::validateAndWriteRecordBuffer(productMasterModelingPolicy);
            }
        }

        if (_productCreationData.productData().referenceGroups().parmGlobalStorageDimensionGroupRecId())
        {
            EcoResStorageDimensionGroupProduct storageDimensionGroupProduct;
            storageDimensionGroupProduct.Product = _product.RecId;
            storageDimensionGroupProduct.StorageDimensionGroup = _productCreationData.productData().referenceGroups().parmGlobalStorageDimensionGroupRecId();
            EcoResProductCrossTableManager::validateAndWriteRecordBuffer(storageDimensionGroupProduct);
        }

        if (_productCreationData.productData().referenceGroups().parmGlobalTrackingDimensionGroupRecId())
        {
            EcoResTrackingDimensionGroupProduct trackingDimensionGroupProduct;
            trackingDimensionGroupProduct.Product = _product.RecId;
            trackingDimensionGroupProduct.TrackingDimensionGroup = _productCreationData.productData().referenceGroups().parmGlobalTrackingDimensionGroupRecId();
            EcoResProductCrossTableManager::validateAndWriteRecordBuffer(trackingDimensionGroupProduct);
        }

        if (_productCreationData.productData().retail().parmRetailCategoryRecId())
        {
            EcoResCategory retailCategory = EcoResProductCrossTableManager::retailCategory(_productCreationData);
            EcoResProductCategory ecoResProductCategory;
            ecoResProductCategory.initValue();
            ecoResProductCategory.CategoryHierarchy = retailCategory.CategoryHierarchy;
            ecoResProductCategory.Category = retailCategory.RecId;
            ecoResProductCategory.Product = _product.RecId;
            EcoResProductCrossTableManager::validateAndWriteRecordBuffer(ecoResProductCategory);
        }

        if (_productCreationData.productData().identification().parmProductName())
        {
            EcoResProductTranslation::createOrUpdateTranslation(_product.RecId, _productCreationData.productData().identification().parmProductName(), '');
        }

        if (_product.isDistinctProduct() &&
            _productCreationData.productData().identification().parmProductServiceType() == EcoResProductServiceType::Warranty)
        {
            EcoResProductServiceWarranty productWarranty;
            productWarranty.initValue();
            productWarranty.DistinctProduct = _product.RecId;
            EcoResProductCrossTableManager::validateAndWriteRecordBuffer(productWarranty);
        }

        if (_productCreationData.productData().retail().parmIsRetailKit())
        {
            RetailKit retailKit;
            retailKit.ProductMaster = _product.RecId;
            retailKit.Status = RetailKitStatus::Draft;
            retailKit.DiscontinueKit = false;
            retailKit.DisassemblyAtRegisterAllowed = true;
            EcoResProductCrossTableManager::validateAndWriteRecordBuffer(retailKit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveValuesToProduct</Name>
				<Source><![CDATA[
    // ====================== Region (helper methods) ===============
    
    /// <summary>
    /// Saves values from a <c>EcoResIProductCrossTableData</c> instance to the given product.
    /// </summary>
    /// <param name = "_productCreationData">
    /// The product creation data to copy values from.
    /// </param>
    /// <param name = "_product">
    /// The product to save the values to.
    /// </param>
    protected static void saveValuesToProduct(EcoResIProductCrossTableData _productCreationData, EcoResProduct _product)
    {
        _product.DisplayProductNumber = _productCreationData.productData().identification().parmProductNumber();
        _product.ProductType = _productCreationData.productData().identification().parmProductType();
        _product.ServiceType = _productCreationData.productData().identification().parmProductServiceType();
        _product.SearchName = _productCreationData.productData().identification().parmProductSearchName();
        _product.PdsCWProduct = _productCreationData.productData().identification().parmIsCatchWeightProduct();

        if (_product.isProductMaster())
        {
            var ecoResProductMaster = _product as EcoResProductMaster;
            ecoResProductMaster.VariantConfigurationTechnology = _productCreationData.productData().variant().parmConfigurationTechnology();

            ecoResProductMaster.RetailColorGroupId = _productCreationData.productData().variant().parmColorGroupId();
            ecoResProductMaster.RetailSizeGroupId  = _productCreationData.productData().variant().parmSizeGroupId();
            ecoResProductMaster.RetailStyleGroupId = _productCreationData.productData().variant().parmStyleGroupId();
            if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
            {
                ecoResProductMaster.IsProductVariantUnitConversionEnabled = !_product.PdsCWProduct;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstConfigOnlyProductDimensionGroup</Name>
				<Source><![CDATA[
    private static EcoResProductDimensionGroup firstConfigOnlyProductDimensionGroup(EcoResProductDimensionGroupName _groupName = '')
    {
        EcoResProductDimensionGroup ecoResProductDimensionGroup;
        EcoResProductDimensionGroupFldSetup ecoResProductDimensionGroupFldSetupExists;
        EcoResProductDimensionGroupFldSetup ecoResProductDimensionGroupFldSetupNotExists;

        select firstonly ecoResProductDimensionGroup
            where _groupName == '' || ecoResProductDimensionGroup.Name == _groupName
            exists join ecoResProductDimensionGroupFldSetupExists
                where ecoResProductDimensionGroupFldSetupExists.productdimensiongroup == ecoResProductDimensionGroup.recid
                    && ecoResProductDimensionGroupFldSetupExists.isactive == NoYes::Yes
                    && ecoResProductDimensionGroupFldSetupExists.dimensionfieldid == fieldnum(InventDim, ConfigId)
            notexists join ecoResProductDimensionGroupFldSetupNotExists
                where ecoResProductDimensionGroupFldSetupNotExists.productdimensiongroup == ecoResProductDimensionGroup.recid
                    && ecoResProductDimensionGroupFldSetupNotExists.isactive == NoYes::Yes
                    && ecoResProductDimensionGroupFldSetupNotExists.dimensionfieldid != fieldnum(InventDim, ConfigId);

        return ecoResProductDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReservationHierarchyForReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates reservation hierarchy for an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_releasedProductCreationData">Instance of <c>EcoResIReleasedProductCrossTableData</c> on which to validate data.</param>
    /// <returns>True if the reservation hierarchy is valid; otherwise false.</returns>
    public static boolean validateReservationHierarchyForReleasedProduct(EcoResIReleasedProductCrossTableData _releasedProductCreationData)
    {
        boolean ret = true;

        WHSReservationHierarchyCache whsReservationHierarchyCache = WHSReservationHierarchyCache::construct();
        EcoResStorageDimensionGroup  ecoResStorageDimensionGroup = EcoResStorageDimensionGroup::findByDimensionGroupName(_releasedProductCreationData.parmStorageDimensionGroupName());
        EcoResTrackingDimensionGroup ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::findByDimensionGroupName(_releasedProductCreationData.parmTrackingDimensionGroupName());
        WHSReservationHierarchy      whsReservationHierarchy = WHSReservationHierarchy::findByName(_releasedProductCreationData.parmReservationHierarchyName());

        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newDimensionGroups(
                                        0,
                                        ecoResStorageDimensionGroup.RecId,
                                        ecoResTrackingDimensionGroup.RecId);

        WHSInventTableReservationHierarchy whsInventTableReservationHierarchy = WHSInventTableReservationHierarchy::newFromParameters(
            _releasedProductCreationData.parmItemId(),
            whsReservationHierarchy.RecId);

        whsInventTableReservationHierarchy.parmEcoResStorageDimensionGroupRecId(ecoResStorageDimensionGroup.RecId);
        whsInventTableReservationHierarchy.parmEcoResTrackingDimensionGroupRecId(ecoResTrackingDimensionGroup.RecId);
        whsInventTableReservationHierarchy.parmInventDimGroupSetup(inventDimGroupSetup);

        ret = ret && whsInventTableReservationHierarchy.validateCanAssignOrDeleteHierarchy();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfigOnlyProductDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates product dimension group for kit products for an instance of <c>EcoResIProductCrossTableData</c>.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to validate data.</param>
    /// <param name = "_productDimGroupName">Product dimension group name to validate.</param>
    /// <returns>True if the specified product is a kit product and the specified product dimension group has only configuration active; otherwise false.</returns>
    public static boolean validateConfigOnlyProductDimensionGroup(EcoResIProductCrossTableData _productCreationData, EcoResProductDimensionGroupName _productDimGroupName = _productCreationData.productData().variant().parmProductDimensionGroupName())
    {
        boolean ret = true;

        if (_productCreationData.productData().retail().parmIsRetailKit())
        {
            var dimensionGroup = EcoResProductCrossTableManager::firstConfigOnlyProductDimensionGroup(_productDimGroupName);

            if (!dimensionGroup.RecId)
            {
                ret = checkFailed("@REX4520724"); //The product dimension group is not valid for a kit product. Select a product dimension group that includes the configuration dimension as the only active product dimension.
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCatchWeightProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a product can be a catchweight product.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to check data.</param>
    /// <returns>True if the specified product can be a catchweight product; otherwise false.</returns>
    public static boolean canBeCatchWeightProduct(EcoResIProductCrossTableData _productCreationData)
    {
        return _productCreationData.productData().identification().parmProductType() == EcoResProductType::Item
            && !_productCreationData.productData().retail().parmIsRetailKit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfigOnlyProductDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates product dimension group name has only configuration active.
    /// </summary>
    /// <param name = "_productDimensionGroupName">Product dimension group name to validate.</param>
    /// <returns>True if the specified product dimension group name has only configuration active; otherwise false.</returns>
    public static boolean validateConfigOnlyProductDimensionGroupName(EcoResProductDimensionGroupName _productDimensionGroupName)
    {
        boolean ret = true;

        var dimensionGroup = EcoResProductCrossTableManager::firstConfigOnlyProductDimensionGroup(_productDimensionGroupName);

        if (!dimensionGroup.RecId)
        {
            ret = checkFailed("@REX4520724"); //The product dimension group is not valid for a kit product. Select a product dimension group that includes the configuration dimension as the only active product dimension.
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductDimensionGroupsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that only active product dimension groups are filled for a product master.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to check data.</param>
    /// <returns>True if only the active product dimension groups are filled; otherwise false.</returns>
    public static boolean validateProductDimensionGroupsActive(EcoResIProductCrossTableData _productCreationData)
    {
        boolean ret = true;

        if (_productCreationData.productData().identification().parmProductSubType() == EcoResProductSubtype::ProductMaster)
        {
            EcoResProductDimGroupSetup ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::newDimensionGroup(_productCreationData.productData().variant().parmProductDimensionGroupRecId());

            boolean sizeActive = ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim , InventSizeId)).isActive();
            boolean colorActive = ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim , InventColorId)).isActive();
            boolean styleActive = ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim , InventStyleId)).isActive();

            ret = EcoResProductCrossTableManager::validateDimensionGroup(_productCreationData.productData().variant().parmColorGroupId(), colorActive, "@SYS73726")
                & EcoResProductCrossTableManager::validateDimensionGroup(_productCreationData.productData().variant().parmSizeGroupId(), sizeActive, "@SYS73727")
                & EcoResProductCrossTableManager::validateDimensionGroup(_productCreationData.productData().variant().parmStyleGroupId(), styleActive, "@FPK270000");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionGroup</Name>
				<Source><![CDATA[
    private static boolean validateDimensionGroup(str _dimensionGroupValue, boolean _dimensionGroupNeeded, str _dimensionGroupLabel)
    {
        boolean ret = true;
        if (_dimensionGroupValue && !_dimensionGroupNeeded)
        {
            ret = checkFailed(strFmt("@SCM:ErrorProductDimensionGroupNotActive", _dimensionGroupLabel));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRetailCategoryByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a retail category name.
    /// </summary>
    /// <param name = "_categoryName"><c>EcoResCategoryName</c> for which to find a retail category name.</param>
    /// <returns><c>EcoResCategory</c> record.</returns>
    public static EcoResCategory findRetailCategoryByName(EcoResCategoryName _categoryName)
    {
        var retailHierarchyRole = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail);

        var category = EcoResCategory::findByName(_categoryName, retailHierarchyRole.CategoryHierarchy);

        return category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailCategory</Name>
				<Source><![CDATA[
    private static EcoResCategory retailCategory(EcoResIProductCrossTableData _productCreationData)
    {
        return EcoResProductCrossTableManager::findRetailCategoryByName(_productCreationData.productData().retail().parmRetailCategoryName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailCategoryDefaultingEnabled</Name>
				<Source><![CDATA[
    private static boolean isRetailCategoryDefaultingEnabled(EcoResIProductCrossTableData _productCreationData)
    {
        return !_productCreationData.parmIsUpdateOfExistingProduct() && _productCreationData.productData().retail().parmRetailCategoryRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailAttributesGlobalLookup</Name>
				<Source><![CDATA[
    private static RetailAttributesGlobalLookup retailAttributesGlobalLookup(EcoResIProductCrossTableData _productCreationData)
    {
        if (EcoResProductCrossTableManager::isRetailCategoryDefaultingEnabled(_productCreationData))
        {
            EcoResCategory category = EcoResProductCrossTableManager::retailCategory(_productCreationData);

            if (category)
            {
                return RetailAttributesGlobalLookup::findByCategory(category.RecId);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailAttributesLegalEntityLookup</Name>
				<Source><![CDATA[
    private static RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup(EcoResIProductCrossTableData _productCreationData)
    {
        if (EcoResProductCrossTableManager::isRetailCategoryDefaultingEnabled(_productCreationData))
        {
            EcoResCategory category = EcoResProductCrossTableManager::retailCategory(_productCreationData);

            if (category)
            {
                return RetailAttributesLegalEntityLookup::findByCategory(category.RecId, CompanyInfo::findDataArea(_productCreationData.productData().identification().companySpecificData().legalEntityId()).RecId);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteRecordBuffer</Name>
				<Source><![CDATA[
    private static void validateAndWriteRecordBuffer(Common _record)
    {
        if (_record.validateWrite())
        {
            _record.write();
        }
        else
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeProductRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes a table buffer based on a product sub-type.
    /// </summary>
    /// <param name = "_productCreationData">Instance of <c>EcoResIProductCrossTableData</c> on which to determine the record type.</param>
    /// <returns><c>EcoResProduct</c> buffer of a specific product sub-type.</returns>
    public static EcoResProduct makeProductRecord(EcoResIProductCrossTableData _productCreationData)
    {
        TableId getProductSubtypeTableId()
        {
            switch (_productCreationData.productData().identification().parmProductSubType())
            {
                case EcoResProductSubtype::Product:
                    return tableNum(EcoResDistinctProduct);
                case EcoResProductSubtype::ProductMaster:
                    return tableNum(EcoResProductMaster);
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        EcoResProduct product = new SysDictTable(getProductSubtypeTableId()).makeRecord();
        product.initValue();

        return product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the item model group based on the specified values.
    /// </summary>
    /// <param name = "_itemId">Item ID to use if an instance of <c>EcoResIReleasedProductCrossTableData</c> is not provided.</param>
    /// <param name = "_dataAreaId">Data area ID to use if an instance of <c>EcoResIReleasedProductCrossTableData</c> is not provided.</param>
    /// <param name = "_crossTableData">Optional instance of <c>EcoResIProductCrossTableData</c> to use.</param>
    /// <returns>Matching <c>InventModelGroup</c> record.</returns>
    public static InventModelGroup itemModelGroup(ItemId _itemId, DataAreaId _dataAreaId, EcoResIReleasedProductCrossTableData _crossTableData = null)
    {
        var modelGroup = _crossTableData ? InventModelGroup::find(_crossTableData.parmItemModelGroupId()) :
                                           InventModelGroupItem::findByItemIdLegalEntity(_itemId, _dataAreaId).modelGroupNoThrow();

        return modelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item is a stocked item.
    /// </summary>
    /// <param name = "_itemId">Item ID to use if an instance of <c>EcoResIReleasedProductCrossTableData</c> is not provided.</param>
    /// <param name = "_dataAreaId">Data area ID to use if an instance of <c>EcoResIReleasedProductCrossTableData</c> is not provided.</param>
    /// <param name = "_crossTableData">Optional instance of <c>EcoResIProductCrossTableData</c> to use.</param>
    /// <returns>True if the item is a stocked item; otherwise false.</returns>
    public static boolean isItemStocked(ItemId _itemId, DataAreaId _dataAreaId, EcoResIReleasedProductCrossTableData _crossTableData = null)
    {
        var modelGroup = EcoResProductCrossTableManager::itemModelGroup(_itemId, _dataAreaId, _crossTableData);

        return modelGroup.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDisableStockedOnlyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether fields for stocked items should be disabled.
    /// </summary>
    /// <param name = "_itemId">Item ID to use if an instance of <c>EcoResIReleasedProductCrossTableData</c> is not provided.</param>
    /// <param name = "_dataAreaId">Data area ID to use if an instance of <c>EcoResIReleasedProductCrossTableData</c> is not provided.</param>
    /// <param name = "_crossTableData">Optional instance of <c>EcoResIProductCrossTableData</c> to use.</param>
    /// <returns>True if fields for stocked items should be disabled; otherwise false.</returns>
    public static boolean mustDisableStockedOnlyFields(ItemId _itemId, DataAreaId _dataAreaId, EcoResIReleasedProductCrossTableData _crossTableData = null)
    {
        return !EcoResProductCrossTableManager::isItemStocked(_itemId, _dataAreaId, _crossTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <c>EcoResIReleasedProductCrossTableData</c> based on the provided record.
    /// </summary>
    /// <param name = "_record">The record on which to get a instance of <c>EcoResIReleasedProductCrossTableData</c>.</param>
    /// <returns>Instance of <c>EcoResIReleasedProductCrossTableData</c>.</returns>
    public static EcoResIReleasedProductCrossTableData crossTableData(Common _record)
    {
        EcoResIReleasedProductCrossTableData crossTableData;

        if (FormDataUtil::getFormDataSource(_record))
        {
            crossTableData = FormDataUtil::getFormDataSource(_record).formRun() as EcoResIReleasedProductCrossTableData;
        }

        return crossTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the specified fields from the specified buffer.
    /// </summary>
    /// <param name = "_record">The buffer on which to clears the fields.</param>
    /// <param name = "_fields">A container of FieldId values representing fields to be cleared.</param>
    public static void clearFields(Common _record, container _fields)
    {
        Common blankRecord = new SysDictTable(_record.TableId).makeRecord();

        for (int i = 1; i <= conLen(_fields); i++)
        {
            FieldId fieldId = conPeek(_fields, i);
            _record.(fieldId) = blankRecord.(fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldsAreBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the specified fields on the specified buffer are blank.
    /// </summary>
    /// <param name = "_record">The buffer on which to validate the fields.</param>
    /// <param name = "_fields">A container of FieldID values representing fields to validate.</param>
    /// <returns>True if the specified fields are blank on the specified buffer; otherwise false.</returns>
    public static boolean validateFieldsAreBlank(Common _record, container _fields, str _errorMessageTemplate = "@SYS78966")
    {
        boolean validationResult = true;

        for (int i = 1; i <= conLen(_fields); i++)
        {
            FieldId fieldId = conPeek(_fields, i);
            if (_record.(fieldId))
            {
                validationResult = checkFailed(strFmt(_errorMessageTemplate, fieldId2PName(_record.TableId, fieldId)));
            }
        }

        return validationResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>