<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RecordReferenceList_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RecordReferenceList_RU
{
    ParmId  parmId;
    Set     recIdSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMarkedRecords</Name>
				<Source><![CDATA[
    public void addMarkedRecords(FormDataSource _ds)
    {
        Common  record;

        if (_ds.anyMarked())
        {
            record = _ds.getFirst(NoYes::Yes);
            while (record)
            {
                this.addRecord(record);
                record = _ds.getNext();
            }
        }
        else
        {
            if (_ds.cursor())
            {
                this.addRecord(_ds.cursor());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecId</Name>
				<Source><![CDATA[
    public void addRecId(RecId _recId)
    {
        recIdSet.add(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    public void addRecord(Common _record)
    {
        this.addRecId(_record.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    public void cleanup()
    {
        RecordReference_RU  reference;

        if (parmId)
        {
            delete_from reference
                where reference.ParmId == parmId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    public boolean existRecId(RecId _recId)
    {
        return recIdSet.in(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecord</Name>
				<Source><![CDATA[
    public boolean existRecord(Common _record)
    {
        return this.existRecId(_record.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flush</Name>
				<Source><![CDATA[
    public void flush()
    {
        RecordInsertList    insertList = new RecordInsertList(tablenum(RecordReference_RU));
        SetEnumerator       e          = recIdSet.getEnumerator();
        RecordReference_RU  recordReference;

        ttsbegin;

        recordReference.clear();
        recordReference.initValue();

        recordReference.ParmId = this.getParmId();

        while (e.moveNext())
        {
            recordReference.RefRecId = e.current();
            insertList.add(recordReference);
        }

        insertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmId</Name>
				<Source><![CDATA[
    private ParmId getParmId()
    {
        if (! parmId)
        {
            parmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>join</Name>
				<Source><![CDATA[
    public void join(QueryBuildDataSource _qbdsParent, JoinMode _joinMode = JoinMode::ExistsJoin)
    {
        QueryBuildDataSource   qbdsFilter = _qbdsParent.addDataSource(tablenum(RecordReference_RU));

        qbdsFilter.allowAdd(QueryAllowAdd::NoFields);
        qbdsFilter.joinMode(_joinMode);
        qbdsFilter.fetchMode(QueryFetchMode::One2One);
        qbdsFilter.addLink(fieldnum(Common, RecId), fieldnum(RecordReference_RU, RefRecId));
        qbdsFilter.addRange(fieldnum(RecordReference_RU, ParmId)).value(queryValue(this.getParmId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ParmId _parmId = "", Set _recIdSet = new Set(Types::Int64))
    {
        parmId   = _parmId;
        recIdSet = _recIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ parmId, [ recIdSet.pack() ] ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecords</Name>
				<Source><![CDATA[
    public void setRecords(Set _recIdSet)
    {
        if (_recIdSet.typeId() != recIdSet.typeId())
        {
            throw(error(Error::wrongUseOfFunction(funcname())));
        }
        recIdSet = _recIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RecordReferenceList_RU construct()
    {
        return new RecordReferenceList_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public static RecordReferenceList_RU unpack(container _packedRecordReferenceList)
    {
        ParmId      parmId;
        container   packedRecIdSet;

        [ parmId, packedRecIdSet ] = _packedRecordReferenceList;

        return new RecordReferenceList_RU(parmId, Set::create(packedRecIdSet));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>