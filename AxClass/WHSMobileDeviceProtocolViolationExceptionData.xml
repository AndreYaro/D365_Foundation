<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceProtocolViolationExceptionData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileDeviceProtocolViolationExceptionData</c> class contains information for logging
/// warehouse mobile device protocol violation exception into telemetry.
/// </summary>
internal final class WHSMobileDeviceProtocolViolationExceptionData
{
    private const str RequestXMLAttributeName = 'requestXML';
    private const str SessionXMLAttributeName = 'sessionXML';
    private const str DeviceIdAttributeName = 'deviceId';
    private const str UserSessionAttributeName = 'whsUserSessionId';
    private const str RequestWorkExecuteModeAttributeName = 'requestWorkExecuteMode';
    private const str RequestWorkExecuteStepAttributeName = 'requestWorkExecuteStep';
    private const str SessionWorkExecuteModeAttributeName = 'sessionWorkExecuteMode';
    private const str SessionWorkExecuteStepAttributeName = 'sessionWorkExecuteStep';
    private const str XMLErrorsAttributeName = 'errors';
    private const str ExceptionLogRecordIdAttributeName = 'exceptionLogRecordId';

	#WHSRF

    internal guid                           deviceId;
    internal str                            requestXML;
    internal str                            sessionXML;
    internal WHSWorkUserSessionId           whsUserSessionId;
    internal WHSWorkExecuteMode             requestWorkExecuteMode;
    internal WHSWorkExecuteMode             sessionWorkExecuteMode;
    internal WHSWorkExecuteStep             requestWorkExecuteStep;
    internal WHSWorkExecuteStep             sessionWorkExecuteStep;
    internal RefRecId                       exceptionLogRecordId;
    private Set                             matchingControls;
    private Set                             errorControls;
    private Map                             exceptionError;
    private UserId                          userId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSMobileDeviceProtocolViolationExceptionData construct(container _requestContainer)
    {
        WHSRFPassthrough pass = WHSRFPassthrough::create(conPeek(_requestContainer, #PassthroughInfo));
        var exceptionData = new WHSMobileDeviceProtocolViolationExceptionData();

        exceptionData.matchingControls = new Set(Types::String);
        exceptionData.errorControls = new Set(Types::String);
        exceptionData.exceptionError = new Map(Types::Enum, Types::Class);
            
        if (pass.parmUserId())
        {
            ttsbegin;

            var userSession = WHSWorkUserSession::find(pass.parmUserId());
            exceptionData.whsUserSessionId = userSession.UserSessionId;
            exceptionData.userId = userSession.UserId;

            var stateInfo = conPeek(_requestContainer, #StateInfo);
            exceptionData.requestWorkExecuteMode = conPeek(stateInfo, #StateInfoMode);
            exceptionData.requestWorkExecuteStep = conPeek(stateInfo, #StateInfoStep);

            exceptionData.initFromWorkUserSessionState(userSession.sessionState());

            ttscommit;
        }
        exceptionData.deviceId = pass.parmDeviceId();
        exceptionData.requestXML = pass.parmRequestXml();
        exceptionData.detectErrors();

        return exceptionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkUserSessionState</Name>
				<Source><![CDATA[
    private void initFromWorkUserSessionState(WHSWorkUserSessionStateFacade _sessionState)
    {
        this.sessionWorkExecuteMode = _sessionState.parmMode();
        this.sessionWorkExecuteStep = _sessionState.parmStep();
        this.sessionXML = _sessionState.parmXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWhsUserSessionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkUserSessionId parmWhsUserSessionId(WHSWorkUserSessionId _whsUserSessionId = whsUserSessionId)
    {
        whsUserSessionId = _whsUserSessionId;
        return whsUserSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal guid parmDeviceId(guid _deviceId = deviceId)
    {
        deviceId = _deviceId;
        return deviceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UserId parmUserId(UserId _userId = userId)
    {
        userId = _userId;
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestXML</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str parmRequestXML(str _requestXML = requestXML)
    {
        requestXML = _requestXML;
        return requestXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionXML</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str parmSessionXML(str _sessionXML = sessionXML)
    {
        sessionXML = _sessionXML;
        return sessionXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorsByType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Set getErrorsByType(WHSMobileDeviceProtocolViolationExceptionXMLErrorType _errorType)
    {
        if (!exceptionError.exists(_errorType))
        {
            exceptionError.insert(_errorType, new Set(Types::String));
        }

        return exceptionError.lookup(_errorType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectErrors</Name>
				<Source><![CDATA[
    private void detectErrors()
    {
        System.Xml.Linq.XDocument requestXMLDocument = this.createXMLDocument(this.parmRequestXML(), RequestXMLAttributeName);
        System.Xml.Linq.XDocument sessionXMLDocument = this.createXMLDocument(this.parmSessionXML(), SessionXMLAttributeName);

        if (requestXMLDocument && sessionXMLDocument)
        {
            System.Collections.IEnumerable requestControlNodeList = requestXMLDocument.Descendants(#XMLControlNode);
            System.Collections.IEnumerable sessionControlNodeList = sessionXMLDocument.Descendants(#XMLControlNode);

            System.Collections.IEnumerator requestNodeEnumerator = requestControlNodeList.GetEnumerator();

            while (requestNodeEnumerator.MoveNext())
            {
                System.Xml.Linq.XElement requestNode = requestNodeEnumerator.Current as System.Xml.Linq.XElement;
            
                System.Collections.IEnumerator sessionNodeEnumerator = sessionControlNodeList.GetEnumerator();

                var requestControlName = requestNode.Attribute(#XMLControlName).Value;

                while (sessionNodeEnumerator.MoveNext())
                {
                    System.Xml.Linq.XElement sessionNode = sessionNodeEnumerator.Current as System.Xml.Linq.XElement;

                    var sessionControlName = sessionNode.Attribute(#XMLControlName).Value;

                    if (requestControlName == sessionControlName)
                    {
                        WHSMobileDeviceProtocolViolationExceptionXMLErrorType xmlErrorType = this.getValueMismatchTypeFromXMLDocumentNode(requestNode, sessionNode);

                        if (xmlErrorType == WHSMobileDeviceProtocolViolationExceptionXMLErrorType::None)
                        {
                            matchingControls.add(requestControlName);
                        }
                        else
                        {
                            errorControls.add(requestControlName);

                            this.getErrorsByType(xmlErrorType).add(requestControlName);
                        }
                    }
                }

                this.addErrorForMissingControl(requestControlName);
            }

            if (!matchingControls.elements())
            {
                this.getErrorsByType(WHSMobileDeviceProtocolViolationExceptionXMLErrorType::XMLDocumentNode).add(RequestXMLAttributeName);
            }

            System.Collections.IEnumerator sessionNodeEnumerator = sessionControlNodeList.GetEnumerator();

            while (sessionNodeEnumerator.MoveNext())
            {
                System.Xml.Linq.XElement sessionNode = sessionNodeEnumerator.Current as System.Xml.Linq.XElement;

                this.addErrorForMissingControl(sessionNode.Attribute(#XMLControlName).Value);
            }
        }
        else if (requestXMLDocument)
        {
            System.Collections.IEnumerable requestControlNodeList = requestXMLDocument.Descendants(#XMLControlNode);
            System.Collections.IEnumerator requestNodeEnumerator = requestControlNodeList.GetEnumerator();

            if (!requestNodeEnumerator.MoveNext())
            {
                this.getErrorsByType(WHSMobileDeviceProtocolViolationExceptionXMLErrorType::XMLDocumentNode).add(RequestXMLAttributeName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueMismatchTypeFromXMLDocumentNode</Name>
				<Source><![CDATA[
    private WHSMobileDeviceProtocolViolationExceptionXMLErrorType getValueMismatchTypeFromXMLDocumentNode(
        System.Xml.Linq.XElement _requestNode,
        System.Xml.Linq.XElement _sessionNode)
    {
        WHSMobileDeviceProtocolViolationExceptionXMLErrorType xmlErrorType = WHSMobileDeviceProtocolViolationExceptionXMLErrorType::None;

        switch (_sessionNode.Attribute(#XMLControlCtrlType).Value)
        {
            case #XMLControlLabel:
                xmlErrorType = this.getValueMismatchTypeForLabelControl(_requestNode, _sessionNode);
                break;

            case #RFButton:
            case #RFDetourButton:
                xmlErrorType = this.getValueMismatchTypeForButtonControl(_requestNode, _sessionNode);
                break;

            case #RFText:
                xmlErrorType = this.getValueMismatchTypeForTextControl(_requestNode, _sessionNode);
                break;
        }

        return xmlErrorType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueMismatchTypeForLabelControl</Name>
				<Source><![CDATA[
    private WHSMobileDeviceProtocolViolationExceptionXMLErrorType getValueMismatchTypeForLabelControl(
        System.Xml.Linq.XElement _requestNode,
        System.Xml.Linq.XElement _sessionNode)
    {
        if (_requestNode.Attribute(#RFLabel).Value != _sessionNode.Attribute(#RFLabel).Value)
        {
            return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::LabelMismatch;
        }

        return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueMismatchTypeForButtonControl</Name>
				<Source><![CDATA[
    private WHSMobileDeviceProtocolViolationExceptionXMLErrorType getValueMismatchTypeForButtonControl(
        System.Xml.Linq.XElement _requestNode,
        System.Xml.Linq.XElement _sessionNode)
    {
        if (_requestNode.Attribute(#RFLabel).Value != _sessionNode.Attribute(#RFLabel).Value)
        {
            return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::ButtonMismatch;
        }

        return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueMismatchTypeForTextControl</Name>
				<Source><![CDATA[
    private WHSMobileDeviceProtocolViolationExceptionXMLErrorType getValueMismatchTypeForTextControl(
        System.Xml.Linq.XElement _requestNode,
        System.Xml.Linq.XElement _sessionNode)
    {
        str requestValue = _requestNode.Attribute(#XMLControlData).Value;

        if (requestValue != _sessionNode.Attribute(#XMLControlData).Value &&
            _sessionNode.Attribute(#XMLControlEnabled).Value == '0')
        {
            return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::ValueMismatchReadOnly;
        }

        switch (_requestNode.Attribute(#XMLControlType).Value.ToUpperInvariant())
        {
            case strUpr(#TypeDate):
                System.DateTime dateResult;

                if (requestValue && 
                    !System.DateTime::TryParse(
                        requestValue,
                        new System.Globalization.CultureInfo(WHSParameters::getCurrentUserDateCulture(this.userId)),
                        System.Globalization.DateTimeStyles::None,
                        byref dateResult))
                {
                    return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::ValueMismatch;
                }
                break;

            case strUpr(#TypeInt),
                        strUpr(#TypeInt64),
                        strUpr(#TypeReal):
                        real realResult;

                if (requestValue && 
                    !System.Decimal::TryParse(
                        requestValue,
                        System.Globalization.NumberStyles::Number,
                        System.Globalization.CultureInfo::CreateSpecificCulture(infolog.language()),
                        byRef realResult))
                {
                    return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::ValueMismatch;
                }
                break;
        }

        return WHSMobileDeviceProtocolViolationExceptionXMLErrorType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXMLDocument</Name>
				<Source><![CDATA[
    private System.Xml.Linq.XDocument createXMLDocument(XML _xml, str _name)
    {
        System.Xml.Linq.XDocument xmlDoc;

        try
        {
            xmlDoc = System.Xml.Linq.XDocument::Parse(_xml);
        }
        catch
        {
            this.getErrorsByType(WHSMobileDeviceProtocolViolationExceptionXMLErrorType::XMLDocument).add(_name);
        }

        return xmlDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addErrorForMissingControl</Name>
				<Source><![CDATA[
    private void addErrorForMissingControl(str _controlName)
    {
        if (!matchingControls.in(_controlName) &&
            !errorControls.in(_controlName))
        {
            this.getErrorsByType(WHSMobileDeviceProtocolViolationExceptionXMLErrorType::ControlNotFound).add(_controlName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAttributeValuesForLogging</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map initializeAttributeValuesForLogging()
    {
        Map attributes = new Map(Types::String, Types::String);

        attributes.insert(DeviceIdAttributeName, guid2Str(this.parmDeviceId()));
        attributes.insert(RequestXMLAttributeName, this.getScrubRequestXML(this.parmRequestXML(), RequestXMLAttributeName));
        attributes.insert(UserSessionAttributeName, guid2Str(this.parmWhsUserSessionId()));

        attributes.insert(RequestWorkExecuteModeAttributeName, enum2Symbol(enumNum(WHSWorkExecuteMode), enum2int(this.requestWorkExecuteMode)));
        attributes.insert(RequestWorkExecuteStepAttributeName, int2Str(this.requestWorkExecuteStep));
        attributes.insert(SessionWorkExecuteModeAttributeName, enum2Symbol(enumNum(WHSWorkExecuteMode), enum2int(this.sessionWorkExecuteMode)));
        attributes.insert(SessionWorkExecuteStepAttributeName, int2Str(this.sessionWorkExecuteStep));

        attributes.insert(SessionXMLAttributeName, this.getScrubRequestXML(this.parmSessionXML(), SessionXMLAttributeName));
        attributes.insert(ExceptionLogRecordIdAttributeName, int642Str(exceptionLogRecordId));

        str errorsInXML;

        MapEnumerator errorEnumerator = exceptionError.getEnumerator();

        while (errorEnumerator.moveNext())
        {
            Set controls = errorEnumerator.currentValue();
            errorsInXML += (errorsInXML ? ', ' : '') + strFmt('%1: %2', enum2Symbol(enumNum(WHSMobileDeviceProtocolViolationExceptionXMLErrorType), errorEnumerator.currentKey()), int2Str(controls.elements()));
        }

        attributes.insert(XMLErrorsAttributeName, errorsInXML);

        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScrubRequestXML</Name>
				<Source><![CDATA[
    private XML getScrubRequestXML(XML _xml, str _name)
    {
        XML xml;

        try
        {
            xml = WHSWarehouseMobileDeviceTelemetryEventLogger::scrubRequestXML(_xml);
        }
        catch
        {
            this.getErrorsByType(WHSMobileDeviceProtocolViolationExceptionXMLErrorType::XMLScrubError).add(_name);
        }

        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMobileDeviceProtocolViolationExceptionLog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void writeMobileDeviceProtocolViolationExceptionLog(
        WHSWorkUserSessionStateCheck _requestStateCheck,
        WHSWorkUserSessionStateCheck _sessionStateCheck)
    {
        if (WHSMobileDeviceProtocolViolationExceptionLogToggle::instance().isEnabled())
        {
            UserConnection conn = new UserConnection();

            try
            {
                conn.ttsbegin();

                WHSMobileDeviceProtocolViolationExceptionLog exceptionLog;

                exceptionLog.setConnection(conn);
                exceptionLog.userId = this.userId;
                exceptionLog.RequestXML = this.parmRequestXML();
                exceptionLog.SessionXML = this.parmSessionXML();
                exceptionLog.RequestStateCheck = _requestStateCheck;
                exceptionLog.SessionStateCheck = _sessionStateCheck;
                exceptionLog.insert();

                conn.ttscommit();

                this.exceptionLogRecordId = exceptionLog.RecId;
            }
            finally
            {
                conn.finalize();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>