<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesInvoiceNonSSRSPrintMgmtAdapter</c> class used to allow
/// use of print management for non-SSRS (for example, Microsoft Office Excel) invoice
/// report printed by invoice from sales order.
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::SalesOrderInvoice)]
class SalesInvoiceNonSSRSPrintMgmtAdapter extends FormLetterNonSSRSPrintMgmtAdapter
{
    SalesInvoiceJournalPrint salesInvoiceJournalPrint;
    RecordSortedList journalList;
    CustInvoiceJour custInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a form letter report.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(SalesInvoiceJournalPrint))
        {
            // Set the caller
            salesInvoiceJournalPrint = this.parmArgs().caller();
        }
        if (this.parmArgs().dataset() == tableNum(WMSShipment))
        {
            WMSShipment wmsShipment = args.record();
            journalList = FormLetter::createJournalListCopy(ShipCarrierShipmentInvoice::custInvoiceJour(wmsShipment.ShipmentId));
        }
        else
        {
            if (this.parmArgs().record())
            {
                // Get journal list from the selected record/s
                journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
            }
            else
            {
                journalList = this.parmArgs().object();
            }
        }
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::SalesOrderInvoice);

        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesInvoiceJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(salesInvoiceJournalPrint.parmUsePrintManagement());
            formLetterReport.parmUseUserDefinedDestinations(salesInvoiceJournalPrint.parmUseUserDefinedDestinations());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        Common printMgmtReferencedTable;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(custInvoiceJour);

        do
        {
            if (!custInvoiceJour)
            {
                throw error("@SYS26348");
            }

            // Determine where to start looking for Print Mgmt settings
            if (SalesParameters::find().DeleteHeading == NoYes::Yes)
            {
                // The original SalesTable record no longer exists, so skip that Print Mgmt level
                // and start with the customer instead.
                printMgmtReferencedTable = custInvoiceJour.custTable_InvoiceAccount();

                if (printMgmtReferencedTable == null)
                {
                    printMgmtReferencedTable = custInvoiceJour.custTable_OrderAccount();
                }
            }
            else
            {
                printMgmtReferencedTable = custInvoiceJour.salesTable();
            }

            formLetterReport.parmSSRS(PrintMgmtSSRS::NonSSRS);
            formLetterReport.parmPrintType(printCopyOriginal);
            formLetterReport.loadPrintSettings(custInvoiceJour, printMgmtReferencedTable, custInvoiceJour.LanguageId);

            this.outputReports();
        } while (journalList.next(custInvoiceJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to set up recId of invoice for payment being printed.
    /// </summary>
    protected void setRecordId()
    {
        recordId = custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static SalesInvoiceNonSSRSPrintMgmtAdapter construct()
    {
        return new SalesInvoiceNonSSRSPrintMgmtAdapter();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
