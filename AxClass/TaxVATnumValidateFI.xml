<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATnumValidateFI</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxVATnumValidateFI extends TaxVATNumValidate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDigit</Name>
				<Source><![CDATA[
        private boolean validateDigit(VATNum _vatNum)
    {
        #define.Multipliers([7, 9, 10, 5, 8, 4, 2])
        #define.Modulo11(11)
        #define.InvalidValue(10)

        boolean ret = true;

        int     digit;
        int     result;
        Counter pos;

        if (strlen(_vatNum) != conlen(#Multipliers) + 1)
        {
            ret = checkFailed(strfmt("@SYS81617", conlen(#Multipliers) + 1, strlen(_vatNum)));
        }

        for (pos = 1; pos < strlen(_vatNum); pos++)
        {
            digit = str2int(substr(_vatNum, pos, 1));
            result = result + digit * conpeek(#Multipliers, pos);
        }

        digit = str2int(substr(_vatNum, pos, 1));

        result = #Modulo11 - result mod #Modulo11;

        if ((result == #InvalidValue) || digit != (result == #Modulo11 ? 0 : result))
        {
            ret = checkFailed("@SYS84772");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNum</Name>
				<Source><![CDATA[
        boolean validateVATNum(VATNum _vatNum, LogisticsAddressCountryRegionId _countryRegionId = '')
    {
        boolean ret = true;
        ;

        if (_vatNum)
        {
            ret = this.isValidChars(_vatNum);

            if (ret)
            {
                ret = this.isNumeric(_vatNum,8);
            }

            if (ret)
            {
                ret = this.validateDigit(_vatNum);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>