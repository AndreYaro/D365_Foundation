<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVATDeclReportSalesBookAdd_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerVATDeclReportSalesBookAdd_RU extends LedgerVATDeclReportSalesBook_RU
{
    container   bookRecIdCon;
    container   correctedBookRecIdCon;
    container   bookRecIdConPurch;
    container   correctedPurchBookRecIdCon;

    AmountMST   totalSalesAmountExclVAT20Add;
    AmountMST   totalSalesAmountExclVAT18Add;
    AmountMST   totalSalesAmountExclVAT10Add;
    AmountMST   totalSumSalesAmountVAT0Add;
    AmountMST   totalTaxAmountVAT20Add;
    AmountMST   totalTaxAmountVAT18Add;
    AmountMST   totalTaxAmountVAT10Add;
    AmountMST   totalSumAmountWithOutTaxesAdd;
    TransDate   startDate, reportDate;
    Counter     startLineNum;
    int         addListNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotal</Name>
				<Source><![CDATA[
    protected container calcTotal(SalesPurchBookRecId_RU _correctedBookId)
    {
        BookAmountsEngine_RU    bookAmountsEngine = BookAmountsEngine_RU::constructForCalc(SalesPurch::Sales, _correctedBookId);
        SalesBookTrans_RU       salesBookTransCorrect;
        SalesBookTable_RU       salesBookTableCorrect;
        PurchBookTrans_RU       purchBookTransCorrect;
        PurchBookTable_RU       purchBookTableCorrect;
        SalesPurchBookRecId_RU  correctedPurchBookId;
        int                     sign;
        boolean                 prepayment;
        AmountMST               salesAmountExclVAT20,
                                salesAmountExclVAT18,
                                salesAmountExclVAT10,
                                sumSalesAmountVAT0,
                                taxAmountVAT20,
                                taxAmountVAT18,
                                taxAmountVAT10,
                                sumAmountWithOutTaxes;

        void addCorrectTotal(SalesPurchBookDataMap_RU salesPurchBookDataMap)
        {
            sign = 1;

            if (salesPurchBookDataMap.TransType != SalesPurchBookTransType_RU::Prepayment &&
                salesPurchBookDataMap.TransType != SalesPurchBookTransType_RU::PrepaymentStorno)
            {
                prepayment = false;
            }
            else
            {
                prepayment = true;
            }

            AmountMST baseVAT20, amountVAT20,
                baseVAT18, amountVAT18;

            switch (salesPurchBookDataMap.TableId)
            {
                case tablenum(PurchBookTrans_RU) :
                    sign = -1;
                    [ baseVAT20, amountVAT20,
                        baseVAT18, amountVAT18 ] = (salesPurchBookDataMap as PurchBookTrans_RU).amountsVATStandard();
                    break;

                case tablenum(SalesBookTrans_RU) :
                    sign = 1;
                    [ baseVAT20, amountVAT20,
                        baseVAT18, amountVAT18 ] = (salesPurchBookDataMap as SalesBookTrans_RU).amountsVATStandard();
                    break;
            }

            if (!prepayment)
            {
                salesAmountExclVAT18    += baseVAT18 * sign;
                salesAmountExclVAT20    += baseVAT20 * sign;
                salesAmountExclVAT10    += salesPurchBookDataMap.AmountLiableToVAT10 * sign;
                sumSalesAmountVAT0      += salesPurchBookDataMap.AmountLiableToVAT0 * sign;
                sumAmountWithOutTaxes   += salesPurchBookDataMap.AmountNotLiableToVAT * sign;
            }
            taxAmountVAT18 += amountVAT18 * sign;
            taxAmountVAT20 += amountVAT20 * sign;           
            taxAmountVAT10 += salesPurchBookDataMap.TaxAmountVAT10 * sign;
        }

        startLineNum += SalesBookAddListReportExcel_RU::getBookLastNum(_correctedBookId, groupByFactures);

        bookAmountsEngine.fetchTaxMap();
        salesAmountExclVAT20    += bookAmountsEngine.getAmountVATStandard20().amountLiableToVAT();
        taxAmountVAT20          += bookAmountsEngine.getAmountVATStandard20().taxAmountVAT();
        salesAmountExclVAT18    += bookAmountsEngine.getAmountVATStandard().amountLiableToVAT();
        taxAmountVAT18          += bookAmountsEngine.getAmountVATStandard().taxAmountVAT();
        salesAmountExclVAT10    += bookAmountsEngine.getAmountVATReduced().amountLiableToVAT();
        taxAmountVAT10          += bookAmountsEngine.getAmountVATReduced().taxAmountVAT();
        sumSalesAmountVAT0      += bookAmountsEngine.getAmountVATZero().amountInclVAT();
        sumAmountWithOutTaxes   += bookAmountsEngine.getAmountNotLiableToVAT();

        while select salesBookTransCorrect
            where salesBookTransCorrect.CorrectedSalesBookTable_RU == _correctedBookId
                && (
                       salesBookTransCorrect.TransType    != SalesPurchBookTransType_RU::CreditNote
                    || salesBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionOriginal
                    || salesBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionCorrSales
                )
                && salesBookTransCorrect.RevisionType   != FactureRevisionType_RU::RevisionCorrPurch
                && (   salesBookTransCorrect.FactureDate_External   <  #correctionAddListDate
                    || salesBookTransCorrect.CorrectionType         != FactureCorrectionType_RU::Correction)
        exists join salesBookTableCorrect
            where salesBookTableCorrect.RecId           == salesBookTransCorrect.SalesBookTable_RU
                && salesBookTableCorrect.ClosingDate    <  startDate
                && salesBookTableCorrect.ClosingDate
        {
            addCorrectTotal(salesBookTransCorrect);
        }

        correctedPurchBookId = SalesBookTable_RU::find(_correctedBookId).findPurchBook().RecId;

        if (correctedPurchBookId)
        {
            while select purchBookTransCorrect
            where purchBookTransCorrect.CorrectedPurchBookTable_RU  == correctedPurchBookId
                && purchBookTransCorrect.RevisionType               == FactureRevisionType_RU::RevisionCorrSales
        exists join purchBookTableCorrect
            where purchBookTableCorrect.RecId                       == purchBookTransCorrect.PurchBookTable_RU
                && purchBookTableCorrect.ClosingDate                <  startDate
                && purchBookTableCorrect.ClosingDate
            {
                addCorrectTotal(purchBookTransCorrect);
            }
        }

        return [
            salesAmountExclVAT20,
            salesAmountExclVAT18,
            salesAmountExclVAT10,
            sumSalesAmountVAT0,
            taxAmountVAT20,
            taxAmountVAT18,
            taxAmountVAT10,
            sumAmountWithOutTaxes
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
    protected void calcTotalAmount()
    {
        int                     idx;
        SalesPurchBookRecId_RU  correctedBookRecId;
        AmountMST       totalSalesAmountExclVAT20AddLoc;
        AmountMST       totalSalesAmountExclVAT18AddLoc;
        AmountMST       totalSalesAmountExclVAT10AddLoc;
        AmountMST       totalSumSalesAmountVAT0AddLoc;
        AmountMST       totalTaxAmountVAT20AddLoc;
        AmountMST       totalTaxAmountVAT18AddLoc;
        AmountMST       totalTaxAmountVAT10AddLoc;
        AmountMST       totalSumAmountWithOutTaxesAddLoc;

        for (idx = 1; idx <= conlen(correctedBookRecIdCon); idx++)
        {
            correctedBookRecId = conpeek(correctedBookRecIdCon, idx);

            [ totalSalesAmountExclVAT20AddLoc, 
                totalSalesAmountExclVAT18AddLoc,
                totalSalesAmountExclVAT10AddLoc,
                totalSumSalesAmountVAT0AddLoc,
                totalTaxAmountVAT20AddLoc,
                totalTaxAmountVAT18AddLoc,
                totalTaxAmountVAT10AddLoc,
                totalSumAmountWithOutTaxesAddLoc ] = this.calcTotal(correctedBookRecId);

            totalSalesAmountExclVAT20Add += totalSalesAmountExclVAT20AddLoc;
            totalSalesAmountExclVAT18Add += totalSalesAmountExclVAT18AddLoc;
            totalSalesAmountExclVAT10Add += totalSalesAmountExclVAT10AddLoc;
            totalSumSalesAmountVAT0Add += totalSumSalesAmountVAT0AddLoc;
            totalTaxAmountVAT20Add += totalTaxAmountVAT20AddLoc;
            totalTaxAmountVAT18Add += totalTaxAmountVAT18AddLoc;
            totalTaxAmountVAT10Add += totalTaxAmountVAT10AddLoc;
            totalSumAmountWithOutTaxesAdd += totalSumAmountWithOutTaxesAddLoc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected container initParameters(Query _query)
    {
        Set                             setPeriods          = new Set(Types::Container);
        Map                             mapPeriodBooks      = new Map(Types::Container, Types::Container);
        Map                             mapBookPeriod       = new Map(Types::Int64,     Types::Container);
        Map                             mapPeriodPurchBooks = new Map(Types::Container, Types::Container);
        Map                             mapPurchBookPeriod  = new Map(Types::Int64,     Types::Container);
        int                             i;
        SetEnumerator                   setEnumerator;
        StartDate                       periodStart, periodStartLoc;
        EndDate                         periodEnd, periodEndLoc;
        container                       correctedBookRecIdConPeriod;
        container                       correctedPurchBookRecIdConPeriod;
        container                       ret, setPeriodsPacked;

        if (isCalledFromXMLExcelReport)
        {
            return [fromDate,
                toDate,
                bookRecIdCon,
                bookRecIdConPurch,
                correctedBookRecIdCon,
                correctedPurchBookRecIdCon];
        }

        [setPeriodsPacked,
         bookRecIdCon,
         bookRecIdConPurch] = SalesBook_AddList_Launcher_RU::initParameters(0,
                                                                        fromDate,
                                                                        toDate,
                                                                        _query,
                                                                        mapPeriodBooks,
                                                                        mapBookPeriod,
                                                                        mapPeriodPurchBooks,
                                                                        mapPurchBookPeriod);

        setPeriods = Set::create(setPeriodsPacked);

        if (setPeriods.elements())
        {
            setEnumerator = setPeriods.getEnumerator();
            while (setEnumerator.moveNext())
            {
                [periodStartLoc, periodEndLoc] = setEnumerator.current();

                periodStart = periodStart ? any2date(min(periodStart, periodStartLoc)) : periodStartLoc;
                periodEnd   = periodEnd   ? any2date(max(periodEnd,   periodEndLoc))   : periodEndLoc;

                correctedBookRecIdConPeriod = mapPeriodBooks.lookup(setEnumerator.current());

                for (i = 1; i <= conlen(correctedBookRecIdConPeriod); i++)
                {
                    correctedBookRecIdCon += conpeek(correctedBookRecIdConPeriod, i);
                }

                if (conlen(bookRecIdConPurch) > 0)
                {
                    correctedPurchBookRecIdConPeriod = mapPeriodPurchBooks.lookup(setEnumerator.current());
                    for (i = 1; i <= conlen(correctedPurchBookRecIdConPeriod); i++)
                    {
                        correctedPurchBookRecIdCon += conpeek(correctedPurchBookRecIdConPeriod, i);
                    }
                }
            }

            ret = [periodStart, periodEnd, bookRecIdCon, bookRecIdConPurch, correctedBookRecIdCon, correctedPurchBookRecIdCon];
        }
        else
        {
            ret = connull();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryDefault</Name>
				<Source><![CDATA[
    protected query initQueryDefault()
    {
        Query       query;

        if (isCalledFromXMLExcelReport && salesBookQueryRun)
        {
            query = salesBookQueryRun.query();
        }
        else
        {
            query = SalesBook_AddList_Launcher_RU::createDefaultQuery(0, fromDate, toDate);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun initQueryRun(boolean _isOldBook)
    {
        QueryRun                queryRun;
        Query                   query;
        QueryBuildDataSource    qbds;
        container               paramerets;

        if (! isCalledFromXMLExcelReport)
        {
            startDate = fromDate;
        }

        query = this.initQueryDefault();

        paramerets = this.initParameters(query);

        if (paramerets != connull())
        {
            [fromDate,
             toDate,
             bookRecIdCon,
             bookRecIdConPurch,
             correctedBookRecIdCon,
             correctedPurchBookRecIdCon] = paramerets;

            qbds = query.dataSourceTable(tablenum(SalesBookTrans_RU));

            findOrCreateRange_W(qbds, fieldnum(SalesBookTrans_RU, SalesBookTable_RU), con2Str(bookRecIdCon));

            findOrCreateRange_W(qbds, fieldnum(SalesBookTrans_RU, CorrectedSalesBookTable_RU), con2Str(correctedBookRecIdCon));

            findOrCreateRange_W(qbds, fieldnum(SalesBookTrans_RU, CorrectionType),
                '('
                + SalesBookTable_RU::extQueryStatement(qbds.name(), fieldstr(SalesBookTrans_RU, FactureDate_External), '<', date2StrXpp(#correctionAddListDate))
                + ' || '
                + SalesBookTable_RU::extQueryStatement(qbds.name(), fieldstr(SalesBookTrans_RU, CorrectionType), '!=', int2str(FactureCorrectionType_RU::Correction))
                + ')'
            );

            qbds = query.dataSourceTable(tablenum(PurchBookTrans_RU));

            findOrCreateRange_W(qbds, fieldnum(PurchBookTrans_RU, PurchBookTable_RU), con2Str(bookRecIdConPurch));

            if (conlen(correctedPurchBookRecIdCon) > 0)
            {
                findOrCreateRange_W(qbds, fieldnum(PurchBookTrans_RU, CorrectedPurchBookTable_RU), con2Str(correctedPurchBookRecIdCon));
            }
            else
            {
                findOrCreateRange_W(qbds, fieldnum(PurchBookTrans_RU, RecId), SysQuery::valueEmptyString());
            }

            SalesBookAddListReportExcel_RU::setExtQueryRanges(query);

            queryRun = new QueryRun(query);

            queryRun = LedgerVATDeclReportSalesBookAdd_RU::initQueryRunOnTmp(queryRun);

            qbds = queryRun.query().dataSourceTable(tablenum(SalesBookTrans_RU));

            qbds.sortClear();

            qbds.addSortField(fieldnum(SalesBookTrans_RU, FactureDate_External));
            qbds.addSortField(fieldnum(SalesBookTrans_RU, FactureExternalId));
            qbds.addSortField(fieldnum(SalesBookTrans_RU, RevisionSeqNumber));
            qbds.addSortField(fieldnum(SalesBookTrans_RU, Annulment));
            qbds.addSortField(fieldnum(SalesBookTrans_RU, FactureId));
            qbds.addSortField(fieldnum(SalesBookTrans_RU, AccountNum));
        }
        else
        {
            queryRun = null;
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    protected void insertHeader()
    {
        this.calcTotalAmount();

        header.TotalAmountExclVAT20Add = totalSalesAmountExclVAT20Add;
        header.TotalAmountExclVAT18Add = totalSalesAmountExclVAT18Add;
        header.TotalAmountExclVAT10Add = totalSalesAmountExclVAT10Add;
        header.TotalAmountExclVAT0Add = totalSumSalesAmountVAT0Add;
        header.TotalTaxAmountVAT20Add = totalTaxAmountVAT20Add;
        header.TotalTaxAmountVAT18Add = totalTaxAmountVAT18Add;
        header.TotalTaxAmountVAT10Add = totalTaxAmountVAT10Add;
        header.TotalAmountWOTaxAdd = totalSumAmountWithOutTaxesAdd;

        totalSalesAmountExclVAT20 += totalSalesAmountExclVAT20Add;
        totalSalesAmountExclVAT18 += totalSalesAmountExclVAT18Add;
        totalSalesAmountExclVAT10 += totalSalesAmountExclVAT10Add;
        totalSumSalesAmountVAT0 += totalSumSalesAmountVAT0Add;
        totalTaxAmountVAT20 += totalTaxAmountVAT20Add;
        totalTaxAmountVAT18 += totalTaxAmountVAT18Add;
        totalTaxAmountVAT10 += totalTaxAmountVAT10Add;
        totalSumAmountWithOutTaxes += totalSumAmountWithOutTaxesAdd;

        header.ReportDate = reportDate;
        header.AddListNumber = addListNumber;

        update_recordSet line
            setting lineNumber = line.LineNumber + startLineNum;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    public void setContract(container _contractPack)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();

        super(_contractPack);

        contract.unpack(_contractPack);

        bookRecIdCon                = contract.parmBookRecIdCon();
        correctedBookRecIdCon       = contract.parmCorrectedBookRecIdCon();
        bookRecIdConPurch           = contract.parmBookRecIdConPurch();
        correctedPurchBookRecIdCon  = contract.parmCorrectedPurchBookRecIdCon();
        startDate                   = contract.parmStartDate();
        reportDate                  = contract.parmReportDate();
        addListNumber               = contract.parmAddListNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerVATDeclReportSalesBookAdd_RU construct()
    {
        return new LedgerVATDeclReportSalesBookAdd_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTrans</Name>
				<Source><![CDATA[
    static public SalesBookTrans_RU getTmpTrans(QueryRun _queryRun)
    {
        SalesBookTrans_RU salesBookTrans, tmpSalesBookTrans;
        PurchBookTrans_RU purchBookTrans;

        _queryRun.reset();

        // BP deviation documented
        tmpSalesBookTrans.setTmp();

        while (_queryRun.next())
        {
            if (_queryRun.changed(tablenum(SalesBookTrans_RU)))
            {
                salesBookTrans = _queryRun.get(tablenum(SalesBookTrans_RU));

                tmpSalesBookTrans.data(salesBookTrans);
                tmpSalesBookTrans.doInsert();
            }
            if (_queryRun.changed(tablenum(PurchBookTrans_RU)))
            {
                purchBookTrans = _queryRun.get(tablenum(PurchBookTrans_RU));

                tmpSalesBookTrans.clear();

                tmpSalesBookTrans.AmountLiableToVAT10  = - purchBookTrans.AmountLiableToVAT10;
                tmpSalesBookTrans.TaxAmountVAT10       = - purchBookTrans.TaxAmountVAT10;
                tmpSalesBookTrans.AmountNotLiableToVAT = - purchBookTrans.AmountNotLiableToVAT;
                tmpSalesBookTrans.FactureExternalId    =    purchBookTrans.FactureExternalId;
                tmpSalesBookTrans.AccountName          =    purchBookTrans.AccountName;
                tmpSalesBookTrans.PaymentDate          =    purchBookTrans.PaymentDate;
                tmpSalesBookTrans.AmountInclVAT        = - purchBookTrans.AmountInclVAT;
                tmpSalesBookTrans.AmountLiableToVAT20  = - purchBookTrans.AmountLiableToVAT20;
                tmpSalesBookTrans.TaxAmountVAT20       = - purchBookTrans.TaxAmountVAT20;
                tmpSalesBookTrans.AmountLiableToVAT0   = - purchBookTrans.AmountLiableToVAT0;
                tmpSalesBookTrans.AccountNum           =    purchBookTrans.AccountNum;
                tmpSalesBookTrans.FactureId            =    purchBookTrans.FactureId;
                tmpSalesBookTrans.FactureDate          =    purchBookTrans.FactureDate;
                tmpSalesBookTrans.SettlementDate       =    purchBookTrans.SettlementDate;
                tmpSalesBookTrans.FactureDate_External =    purchBookTrans.FactureDate_External;
                tmpSalesBookTrans.TransType            =    purchBookTrans.TransType;
                tmpSalesBookTrans.ReverseDate          =    purchBookTrans.DeliveryDate;
                tmpSalesBookTrans.CorrectedFactureExternalId    = purchBookTrans.CorrectedFactureExternalId;
                tmpSalesBookTrans.RefOriginalFacture            = purchBookTrans.RefOriginalFacture;
                tmpSalesBookTrans.RevisionSeqNumber             = purchBookTrans.RevisionSeqNumber;
                tmpSalesBookTrans.CorrectionType                = purchBookTrans.CorrectionType;
                tmpSalesBookTrans.RevisionType                  = purchBookTrans.RevisionType;
                tmpSalesBookTrans.Annulment                     = purchBookTrans.Annulment;
                tmpSalesBookTrans.CorrectedFactureDate          = purchBookTrans.CorrectedFactureDate;
                tmpSalesBookTrans.RefRevisedFacture             = purchBookTrans.RefRevisedFacture;
                tmpSalesBookTrans.CommissionAgent               = purchBookTrans.CommissionAgent;
                tmpSalesBookTrans.PaymDocumentNum               = purchBookTrans.PaymDocumentNum;
                tmpSalesBookTrans.CurrencyCode                  = purchBookTrans.CurrencyCode;
                tmpSalesBookTrans.AmountCurInclVAT              = purchBookTrans.AmountCurInclVAT;
                tmpSalesBookTrans.OperationTypeCodes            = purchBookTrans.OperationTypeCodes;

                if (purchBookTrans.FactureJour_RU)
                {
                    tmpSalesBookTrans.FactureJour_RU            = purchBookTrans.FactureJour_RU;
                }
                else
                {
                    tmpSalesBookTrans.FactureJour_RU            = FactureJour_RU::find(purchBookTrans.FactureId, purchBookTrans.factureModule()).RecId;
                }

                tmpSalesBookTrans.doInsert();
            }
        }

        return tmpSalesBookTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunOnTmp</Name>
				<Source><![CDATA[
    public static QueryRun initQueryRunOnTmp(QueryRun _queryRun)
    {
        Query                query = new Query();
        QueryRun             queryRun;
        QueryBuildDataSource queryBuildDataSource;
        SalesBookTrans_RU    salesBookTrans = LedgerVATDeclReportSalesBookAdd_RU::getTmpTrans(_queryRun);

        queryBuildDataSource = query.addDataSource(tablenum(SalesBookTrans_RU));

        queryRun = new QueryRun(query);
        queryRun.setCursor(salesBookTrans);

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>