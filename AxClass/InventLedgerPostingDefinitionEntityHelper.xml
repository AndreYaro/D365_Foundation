<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerPostingDefinitionEntityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventLedgerPostingDefinitionEntityHelper</c> class is a helper for the ledger posting definition for
/// inventory entity.
/// </summary>
public class InventLedgerPostingDefinitionEntityHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventAccountTypeInventFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string of all the enum values within the <c>InventAccountTypeInvent</c> enum.
    /// </summary>
    /// <returns>A string of all the enum values within the <c>InventAccountTypeInvent</c> enum.</returns>
    [QueryRangeFunctionAttribute()]
    public static str inventAccountTypeInventFilter()
    {
        return InventLedgerPostingDefinitionEntityHelper::inventAccountTypeFilter(enumNum(InventAccountTypeInvent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountTypeProdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string of all the enum values within the <c>InventAccountTypeProd</c> enum.
    /// </summary>
    /// <returns>A string of all the enum values within the <c>InventAccountTypeProd</c> enum.</returns>
    [QueryRangeFunctionAttribute()]
    public static str inventAccountTypeProdFilter()
    {
        return InventLedgerPostingDefinitionEntityHelper::inventAccountTypeFilter(enumNum(InventAccountTypeProd));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountTypePurchFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string of all the enum values within the <c>InventAccountTypePurch</c> enum.
    /// </summary>
    /// <returns>A string of all the enum values within the <c>InventAccountTypePurch</c> enum.</returns>
    [QueryRangeFunctionAttribute()]
    public static str inventAccountTypePurchFilter()
    {
        return InventLedgerPostingDefinitionEntityHelper::inventAccountTypeFilter(enumNum(InventAccountTypePurch));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountTypeSalesFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string of all the enum values within the <c>InventAccountTypeSales</c> enum.
    /// </summary>
    /// <returns>A string of all the enum values within the <c>InventAccountTypeSales</c> enum.</returns>
    [QueryRangeFunctionAttribute()]
    public static str inventAccountTypeSalesFilter()
    {
        return InventLedgerPostingDefinitionEntityHelper::inventAccountTypeFilter(enumNum(InventAccountTypeSales));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountTypeStdCostVarianceFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string of all the enum values within the <c>InventAccountTypeStdCostVariance</c> enum.
    /// </summary>
    /// <returns>A string of all the enum values within the <c>InventAccountTypeStdCostVariance</c> enum.</returns>
    [QueryRangeFunctionAttribute()]
    public static str inventAccountTypeStdCostVarianceFilter()
    {
        return InventLedgerPostingDefinitionEntityHelper::inventAccountTypeFilter(enumNum(InventAccountTypeStdCostVariance));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountTypeFilter</Name>
				<Source><![CDATA[
    private static str inventAccountTypeFilter(EnumId _enumId)
    {
        DictEnum dictEnum = new DictEnum(_enumId);

        int enumValues = dictEnum.values();

        str ret;

        for (int enumIndex = 0; enumIndex < enumValues; enumIndex++)
        {
            int enumValue = dictEnum.index2Value(enumIndex);
            ret = queryRangeConcat(ret, enum2int(InventLedgerPostingDefinitionEntityHelper::inventAccountTypeX2InventAccountType(_enumId, enumValue)));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountTypeX2InventAccountType</Name>
				<Source><![CDATA[
    private static InventAccountType inventAccountTypeX2InventAccountType(EnumId _enumId, anytype _enumValue)
    {
        if (!(new DictEnum(_enumId).value2Symbol(_enumValue)))
        {
            throw error(strFmt('%1: enumId = %2, enumValue = %3', "@SYS345511", _enumId, _enumValue));
        }

        return InventLedgerPostingDefinitionEntityHelper::convertEnumToInventAccountType(_enumId, _enumValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertEnumToInventAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the passed enum to its corresponding <c>InventAccountType</c> value.
    /// </summary>
    /// <param name = "_enumId">
    /// The given <c>EnumId</c>.
    /// </param>
    /// <param name = "_enumValue">
    /// The given enum value.
    /// </param>
    /// <returns>
    /// The <c>InventAccountType</c> corresponding to the given arguments.
    /// </returns>
    [Replaceable]
    protected static InventAccountType convertEnumToInventAccountType(EnumId _enumId, anytype _enumValue)
    {
        switch (_enumId)
        {
            case enumNum(InventAccountTypeInvent):
                return InventPosting::inventAccount2AccountType(_enumValue);

            case enumNum(InventAccountTypeProd):
                return InventPosting::prodAccount2AccountType(_enumValue);

            case enumNum(InventAccountTypePurch):
                return InventPosting::purchAccount2AccountType(_enumValue);

            case enumNum(InventAccountTypeSales):
                return InventPosting::salesAccount2AccountType(_enumValue);

            case enumNum(InventAccountTypeStdCostVariance):
                return InventPosting::varianceAccount2AccountType(_enumValue);

            default:
                throw error(strFmt("@SCM:InventLedgerPostingDefinitionEntityHelperAccountTypeUnknown", _enumId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountTypeComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps enum values from the specified enum ID to enum values of InventAccountType.
    /// Must be called from another method as it requires an enum ID.
    /// </summary>
    /// <param name = "_enumId">The enum for which values should be mapped to corresponding values of InventAccountType. E.g. InventAccountTypeSales.</param>
    /// <returns>String which can be used as a computed column definition.</returns>
    public static str inventAccountTypeComputedColumnDefinition(EnumId _enumId)
    {
        DictEnum dictEnum = new DictEnum(_enumId);

        int enumValues = dictEnum.values();

        Map comparisonExpressionMap = SysComputedColumn::comparisionExpressionMap();

        for (int enumIndex = 0; enumIndex < enumValues; enumIndex++)
        {
            int enumValue = dictEnum.index2Value(enumIndex);

            comparisonExpressionMap.insert(
                SysComputedColumn::comparisonLiteral(InventLedgerPostingDefinitionEntityHelper::inventAccountTypeX2InventAccountType(_enumId, enumValue)),
                SysComputedColumn::returnLiteral(enumValue));
        }

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(
                tablestr(InventInventoryLedgerPostingDefinitionEntity),
                dataEntityDataSourceStr(InventInventoryLedgerPostingDefinitionEntity, InventPosting),
                fieldstr(InventPosting, InventAccountType)),
            comparisonExpressionMap,
            SysComputedColumn::returnLiteral(null));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes common logic for mapping ledger posting definition data entities to datasources.
    /// </summary>
    /// <param name = "_entityCtx">Entity context for current data entity record.</param>
    /// <param name = "_dataSourceCtx">Datasource context for current data entity datasource record.</param>
    /// <returns>Boolean value indicating whether anything was changed in the datasource context.</returns>
    public static boolean mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common buffer = _dataSourceCtx.getBuffer();

        switch (buffer.TableId)
        {
            case tableNum(InventPosting):
                return InventLedgerPostingDefinitionEntityHelper::findEntityDataSource(_entityCtx, _dataSourceCtx);

            case tableNum(ProcProcurementProductCategoryEntity):
            case tableNum(SalesProductCategoryEntity):
                boolean overwrittenPreviousMapping = InventLedgerPostingDefinitionEntityHelper::findEntityDataSource(_entityCtx, _dataSourceCtx);

                buffer = _dataSourceCtx.getBuffer();
                if (buffer.RecId)
                {
                    // Need to manually map the category name back to the entity field:
                    _entityCtx.getEntityRecord().mapDataSourceToEntity(_entityCtx, _dataSourceCtx);

                    // Need to remap entity to InventPosting table:
                    _entityCtx.getEntityRecord().mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('InventPosting'));
                }

                return overwrittenPreviousMapping;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    private static boolean findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common buffer = _dataSourceCtx.getBuffer();

        // Ensure check for existing record:
        if (!buffer.RecId)
        {
            buffer = _entityCtx.getEntityRecord().findEntityDataSource(_entityCtx, _dataSourceCtx);

            if (buffer.RecId)
            {
                _dataSourceCtx.setBuffer(buffer);

                // Switch operation to update if needed:
                if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                }

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>