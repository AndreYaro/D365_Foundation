<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsPickingList_OrderPickController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSPickingList_OrderPick</c> class is the helper class for the associated reports.
/// </summary>
public class WmsPickingList_OrderPickController extends SrsReportRunController implements BatchRetryable
{
    InventDimParm                               inventDimVisible;
    WMSPickingRoute                             wmsPickingRoute;
    PrintCopyOriginal                           printCopyOriginal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// A <c>WMSPirckingRoute</c> buffer cannot be extracted from the caller.
    /// </exception>
    protected void init()
    {
        SalesPickingListJournalPrint                salesPickingListJournalPrint;
        InventDimCtrl_Rep_Sales                     inventDimReport;

        printCopyOriginal = this.parmArgs().parmEnum();

        if (this.parmArgs().caller() is SalesPickingListJournalPrint)
        {
            salesPickingListJournalPrint = this.parmArgs().caller() as SalesPickingListJournalPrint;
        }

        wmsPickingRoute = null;

        if (this.parmArgs().record())
        {
            wmsPickingRoute = this.parmArgs().record() as WMSPickingRoute;
        }

        if (wmsPickingRoute  == null)
        {
            throw error("@SYS26348");
        }

        // Prepare visibility on inventory dimensions - will be transferred to the contract in modifyContract()
        inventDimReport = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::PickingList);
        inventDimReport.initDimParmVisible();
        if (inventDimReport.isInventDimLine())
        {
            inventDimVisible = inventDimReport.getInventDimVisibility();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the values of the instance variables.
    /// </summary>
    protected void prePromptModifyContract()
    {
        WmsPickingList_OrderPickContract    rdpContract;
        SRSTmpDataStore                     srsTmpDataStore;

        rdpContract = this.parmReportContract().parmRdpContract() as WmsPickingList_OrderPickContract;

        rdpContract.parmInventDimViewContract().parmInventDimParm(inventDimVisible);
        rdpContract.parmPrintCopyOriginal(printCopyOriginal);
        rdpContract.parmDocumentTitle(WMSPickingList_OrderPick::reportHeader(printCopyOriginal));

        // Pack the class and insert into the temporary store.
        srsTmpDataStore.Value = Global::buf2Con(wmsPickingRoute);
        ttsbegin;
        srsTmpDataStore.insert();
        ttscommit;

        // Set the rec id to contract parameter
        rdpContract.parmPickingRouteId(srsTmpDataStore.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WmsPickingList_OrderPickController construct()
    {
        return new WmsPickingList_OrderPickController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>WMSPickingList_OrderPick</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the class.
    /// </param>
    public static void main(Args _args)
    {
        // <GEECZ>
        LogisticsAddressCountryRegionISOCode isoCountryCode;
        #ISOCountryRegionCodes
        // </GEECZ>

        WmsPickingList_OrderPickController controller = WmsPickingList_OrderPickController::construct();

        // <GEECZ>
        isoCountryCode = SysCountryRegionCode::countryInfo();

        if (isoCountryCode == #isoCZ)
        {
            controller.parmReportName(ssrsReportStr(WMSPickingList_OrderPick, ReportCZ));
        }
        else
        {
        // </GEECZ>
            controller.parmReportName(ssrsReportStr(WMSPickingList_OrderPick, Report));
        // <GEECZ>
        }
        // </GEECZ>

        controller.parmArgs(_args);
        controller.init();
        controller.parmDialogCaption(WMSPickingList_OrderPick::reportHeader(_args.parmEnum()));
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>