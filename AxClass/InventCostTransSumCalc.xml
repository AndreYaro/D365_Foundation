<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTransSumCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>inventCostTransSumCalc</c> class creates the <c>inventCostTransSum</c> records when the
///    inventory is closed.
/// </summary>
/// <remarks>
///    This class is called from the <c>inventCostHelp.runStdCostClose</c> method during an inventory
///    closing.This class will create the <c>inventCostTransSum</c> records for the <c>inventCostTrans</c>
///    records, which are in the period that is closed.
/// </remarks>
class InventCostTransSumCalc
{
    InventClosing           inventClosing;
    InventClosing           previnventClosing;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>InventCostTransSum</c> records.
    /// </summary>
    /// <remarks>
    ///    The creation of the records is performed in one single <c>insert_recordSet</c> operation. All the
    ///    <c>InventCostTrans</c> records that are in the period from the last inventory closing to the
    ///    current inventory closing will be taken for the summarization.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A record exists that has no reference to an <c>InventClosing</c> record.
    /// </exception>
    protected void createRecords()
    {
        InventCostTrans        inventCostTrans;
        InventCostTransSum     inventCostTransSum, previnventCostTransSum, joinInventCostTransSum;

        InventClosingRefRecId currentClosingRefRecId = inventClosing.RecId;

        inventCostTransSum.skipDataMethods(true);

        ttsbegin;
        // Now create the sum records using an insert_recordset operation
        insert_recordset inventCostTransSum
              (ItemId, FinancialInventDimId, OnHandQty, AccruedQty, DeferredCOGSQty, COGSQty, inventClosingRefRecId)
        select ItemId, FinancialInventDimId, sum(OnHandQty), sum(AccruedQty), sum(DeferredCOGSQty), sum(cogsQty), currentClosingRefRecId
        from inventCostTrans
        group by ItemId, FinancialInventDimId
        where inventCostTrans.TransDate >  previnventClosing.TransDate
           && inventCostTrans.TransDate <= inventClosing.TransDate;

        insert_recordset inventCostTransSum
              (ItemId, FinancialInventDimId, CostTransRefType, TransRefId, DefaultDimension, WIPInQty, WIPOutQty, inventClosingRefRecId)
        select ItemId, FinancialInventDimId, CostTransRefType, TransRefId, DefaultDimension, sum(wipInQty), sum(wipOutQty), currentClosingRefRecId
        from inventCostTrans
        group by ItemId, FinancialInventDimId, TransRefId, CostTransRefType, DefaultDimension
        where inventCostTrans.TransDate         >  previnventClosing.TransDate
           && inventCostTrans.TransDate         <= inventClosing.TransDate
           && (inventCostTrans.CostTransRefType == InventCostTransRefType::Production
            || inventCostTrans.CostTransRefType == InventCostTransRefType::WIPRevaluation
            || inventCostTrans.CostTransRefType == InventCostTransRefType::ProductionFlow);

        // Add the sum from the previous closing
        update_recordset inventCostTransSum
            setting OnHandQty       = inventCostTransSum.OnHandQty       + previnventCostTransSum.OnHandQty,
                    AccruedQty      = inventCostTransSum.AccruedQty      + previnventCostTransSum.AccruedQty,
                    DeferredCOGSQty = inventCostTransSum.DeferredCOGSQty + previnventCostTransSum.DeferredCOGSQty,
                    cogsQty         = inventCostTransSum.cogsQty         + previnventCostTransSum.cogsQty,
                    wipInQty        = inventCostTransSum.wipInQty        + previnventCostTransSum.wipInQty,
                    wipOutQty       = inventCostTransSum.wipOutQty       + previnventCostTransSum.wipOutQty
            where inventCostTransSum.InventClosingRefRecId == currentClosingRefRecId
            join previnventCostTransSum
            where previnventCostTransSum.ItemId                == inventCostTransSum.ItemId
               && previnventCostTransSum.FinancialInventDimId  == inventCostTransSum.FinancialInventDimId
               && previnventCostTransSum.CostTransRefType      == inventCostTransSum.CostTransRefType
               && previnventCostTransSum.TransRefId            == inventCostTransSum.TransRefId
               && previnventCostTransSum.DefaultDimension      == inventCostTransSum.DefaultDimension
               && previnventCostTransSum.InventClosingRefRecId == previnventClosing.RecId;

        // Now insert all the records from the sum table that have nto been created
        insert_recordset inventCostTransSum
              (ItemId, FinancialInventDimId, CostTransRefType, TransRefId, DefaultDimension, OnHandQty, AccruedQty, DeferredCOGSQty, COGSQty, WIPInQty, WIPOutQty, inventClosingRefRecId)
        select ItemId, FinancialInventDimId, CostTransRefType, TransRefId, DefaultDimension, OnHandQty, AccruedQty, DeferredCOGSQty, cogsQty, wipInQty, wipOutQty, currentClosingRefRecId
        from previnventCostTransSum
        where previnventCostTransSum.InventClosingRefRecId == previnventClosing.RecId
        notexists join joinInventCostTransSum
            where joinInventCostTransSum.ItemId                == previnventCostTransSum.ItemId
               && joinInventCostTransSum.FinancialInventDimId  == previnventCostTransSum.FinancialInventDimId
               && joinInventCostTransSum.CostTransRefType      == previnventCostTransSum.CostTransRefType
               && joinInventCostTransSum.TransRefId            == previnventCostTransSum.TransRefId
               && joinInventCostTransSum.DefaultDimension      == previnventCostTransSum.DefaultDimension
               && joinInventCostTransSum.InventClosingRefRecId == currentClosingRefRecId;

        // Check if records with zero qty has been entered
        delete_from inventCostTransSum
            where inventCostTransSum.InventClosingRefRecId == currentClosingRefRecId
               && inventCostTransSum.AccruedQty            == 0
               && inventCostTransSum.cogsQty               == 0
               && inventCostTransSum.DeferredCOGSQty       == 0
               && inventCostTransSum.OnHandQty             == 0
               && inventCostTransSum.wipInQty              == 0
               && inventCostTransSum.wipOutQty             == 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize the parameters of the <c>InventCostTranSumCalc</c> class.
    /// </summary>
    /// <param name="_inventClosing">
    ///    The <c>InventClosing</c> record that is currently being processed.
    /// </param>
    /// <remarks>
    ///    This method sets the <c>inventClosing</c> variable and determines the previous inventory closing
    ///    date.
    /// </remarks>
    protected void initFromInventClosing(InventClosing _inventClosing)
    {
        // Set the caller record
        inventClosing = _inventClosing;

        // Now figure out the previous closing date
        // <GEERU>
        previnventClosing = InventClosing::findPrevClosingDate(_inventClosing.TransDate, _inventClosing.InventTransCurrency_RU);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostTransSumCalc</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is protected to ensure that the <c>construct</c> method is used.
    /// </remarks>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFromInventClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a static interface to call the class from an inventory closing.
    /// </summary>
    /// <param name="_inventClosing">
    ///    The inventory closing that is currently being processed.
    /// </param>
    /// <remarks>
    ///    This method is called from the <c>InventCostHelp.runStdCostClose</c> method during the closing of
    ///    the inventory.
    /// </remarks>
    public static void calcFromInventClosing(InventClosing    _inventClosing)
    {
        if (!_inventClosing)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // Initialize instance
        InventCostTransSumCalc inventCostTransSumCalc = InventCostTransSumCalc::construct();

        // Initialize parameters
        inventCostTransSumCalc.initFromInventClosing(_inventClosing);

        // Create closing records
        inventCostTransSumCalc.createRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostTransSumCalc construct()
    {
        return new InventCostTransSumCalc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
