<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlCalcCCSalesBalanceEliminate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjControlCalcCCSalesBalanceEliminate extends ProjControlCalcCCSalesBalance
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capital</Name>
				<Source><![CDATA[
        public AmountMST capital(ProjCostType _costType)
    {;
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalculateHoursQtyCapitalized</Name>
				<Source><![CDATA[
        protected boolean checkCalculateHoursQtyCapitalized()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consum</Name>
				<Source><![CDATA[
        public AmountMST consum(ProjCostType _costType)
    {;
        switch (_costType)
        {
            case ProjCostType::Hour:
                return projControlColumnAccEstimatePrev.ConsumHourConsum;

            case ProjCostType::Cost:
                return projControlColumnAccEstimatePrev.ConsumExpConsum;

            case ProjCostType::Item:
                return projControlColumnAccEstimatePrev.ConsumItemConsum;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eliminationAmountTurnover</Name>
				<Source><![CDATA[
        AmountMST eliminationAmountTurnover(ProjControlPeriodTable _projControlPeriod)
    {
        return -this.wipAccruedTurnover(_projControlPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generalHoursQty</Name>
				<Source><![CDATA[
        ProjQtyEmpl generalHoursQty(
        ProjControlPeriodTable  _controlPeriodTable,
        ProjEstimateColumn      _estimateColumn,
        ProjQty                 _qtyEstimate    = 0
        )
    {
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Estimate:
                return projControlPeriodTableColumnAccEstimate.GeneralHoursQty;
            case ProjEstimateColumn::Accumulated:
                return projControlColumnAccEstimatePrev.GeneralHoursQty;
            case ProjEstimateColumn::Total:
                return projControlPeriodTableColumnAccEstimate.GeneralHoursQty;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodUpdateColumnAccEstimateSecond</Name>
				<Source><![CDATA[
        public void periodUpdateColumnAccEstimateSecond(ProjControlPeriodTable _projControlPeriodTable)
    {;
        projControlPeriodTableColumnAccEstimate.plCostAccCost = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodUpdateColumnEstimateSecond</Name>
				<Source><![CDATA[
        public void periodUpdateColumnEstimateSecond(ProjControlPeriodTable _projControlPeriodTable)
    {;
        projControlPeriodTableColumnEstimate.plCostAccCost = -projControlColumnAccEstimatePrev.plCostAccCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plAccRevAccOnAcc</Name>
				<Source><![CDATA[
        public AmountMST plAccRevAccOnAcc(ProjControlPeriodTable _projControlPeriodTable, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.plAccRevAccOnAcc;
        }

        return projControlColumnAccEstimatePrev.plAccRevAccOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plAccRevSalesValue</Name>
				<Source><![CDATA[
        public AmountMST plAccRevSalesValue(ProjControlPeriodTable          _projControlPeriodTable,
                                        ProjEstimateColumn              _estimateColumn,
                                        ProjControlPeriodTableColumn    _projControlPeriodTableColumnAccEstimate = _projControlPeriodTableColumnAccEstimate)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.plAccRevSalesValue;
        }

        return projControlColumnTotalEstimatePrev.plAccRevSalesValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostAccCost</Name>
				<Source><![CDATA[
        public AmountMST plCostAccCost(ProjControlPeriodTable _projControlPeriodTable, ProjEstimateColumn _estimateColumn, ProjControlPeriodTableColumn _projControlPeriodTableColumnAccEstimate = null)
    {;
        if (_estimateColumn)
        {
            return projControlPeriodTableColumnAccEstimate.plCostAccCost;
        }

        return projControlColumnAccEstimatePrev.plCostAccCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostExpenses</Name>
				<Source><![CDATA[
        public ProjExpenses plCostExpenses(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
                return projControlPeriodTableColumnAccEstimate.ConsumExpNotCapital;
        }

        return _projControlPeriodTableColumn.ConsumExpNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostHour</Name>
				<Source><![CDATA[
        public AmountMST plCostHour(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.plCostHour;
        }

        return _projControlPeriodTableColumn.ConsumHourNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostItem</Name>
				<Source><![CDATA[
        public ProjItem plCostItem(ProjControlPeriodTableColumn _projControlPeriodTableColumnEstimate, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
                return projControlPeriodTableColumnEstimate.ConsumItemNotCapital;
        }

        return _projControlPeriodTableColumnEstimate.ConsumItemNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plInvRevInvoiceOnAcc</Name>
				<Source><![CDATA[
        public AmountMST plInvRevInvoiceOnAcc(ProjControlPeriodTable _projControlPeriodTable, ProjEstimateColumn _estimateColumn)
    {;
        return projControlColumnAccEstimatePrev.plInvRevInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionForseeablesLosses</Name>
				<Source><![CDATA[
        public boolean provisionForseeablesLosses(ProjControlPeriodTable _projControlPeriodTable)
    {
        ProjCostTrans       projCostTrans;
        ProjCostTransCost   projCostTransCost;
        ProjRevRecContractLine  revRecContractLine;
        boolean             ret;

        if (!ProjRevRecHelper::isForeseeableLossesActivatedForProjControlPeriodTable(_projControlPeriodTable))
        {
            ret = false;
        }

        if(ProjWIPTable::find(_projControlPeriodTable.ProjId).IsContractLineUsed && contractLineBasedRevRecFeature)
        {
            select firstonly revRecContractLine
                where revRecContractLine.RevenueRecognitionId == _projControlPeriodTable.ProjId
            join projCostTrans
                where projCostTrans.PSAContractLineNum == revRecContractLine.ContractLineNum   &&
                      projCostTrans.TransactionOrigin == ProjOrigin::EstimateAccruedLoss
                exists join projCostTransCost
                    where projCostTransCost.TransId == projCostTrans.TransId &&
                      projCostTransCost.TransStatus == ProjTransStatus::Posted;
        }
        else
        {

            select firstonly projCostTrans
                where projCostTrans.ProjId == _projControlPeriodTable.ProjId   &&
                      projCostTrans.TransactionOrigin == ProjOrigin::EstimateAccruedLoss
                exists join projCostTransCost
                    where projCostTransCost.TransId == projCostTrans.TransId &&
                      projCostTransCost.TransStatus == ProjTransStatus::Posted;
        }
        if (projCostTrans)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnover</Name>
				<Source><![CDATA[
        protected AmountMST wipAccruedTurnover(ProjControlPeriodTable _projControlPeriod)
    {
        return this.contractSum(_projControlPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnoverCredit</Name>
				<Source><![CDATA[
        public boolean wipAccruedTurnoverCredit(ProjControlPeriodTable _projControlPeriod)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnoverDebit</Name>
				<Source><![CDATA[
        public boolean wipAccruedTurnoverDebit(ProjControlPeriodTable _projControlPeriod)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCost</Name>
				<Source><![CDATA[
        protected AmountMST wipCost(ProjControlPeriodTable  _projControlPeriod)
    {
        return -this.wipCostAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceAccruedCost</Name>
				<Source><![CDATA[
        public ProjAccruedCost wipCostpriceAccruedCost(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return -_projControlPeriodTableColumn.plCostAccCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceExp</Name>
				<Source><![CDATA[
        public ProjExpenses wipCostpriceExp(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumExpCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceHour</Name>
				<Source><![CDATA[
        public ProjHour wipCostpriceHour(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumHourCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceItem</Name>
				<Source><![CDATA[
        public ProjItem wipCostpriceItem(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumItemCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceTotal</Name>
				<Source><![CDATA[
        public ProjTotalWIPCostPrice wipCostpriceTotal(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {;
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipCostpriceItem +
               _projControlPeriodTableColumn.wipCostpriceHour +
               _projControlPeriodTableColumn.wipCostpriceExp  +
               _projControlPeriodTableColumn.wipCostpriceAccruedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipInvoiceOnAcc</Name>
				<Source><![CDATA[
        public AmountMST wipInvoiceOnAcc(ProjControlPeriodTable _projControlPeriodTable)
    {;
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSalespriceSalesValue</Name>
				<Source><![CDATA[
        ProjSalesValue wipSalespriceSalesValue(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {
        ;
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Accumulated:
                return 0;

            case ProjEstimateColumn::Estimate:
                return 0 - projControlColumnAccEstimatePrev.wipSalesPriceSalesValue;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSalespriceTotal</Name>
				<Source><![CDATA[
        ProjTotalWIPSalesprice wipSalespriceTotal(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipSalesPriceSalesValue+
               _projControlPeriodTableColumn.wipSalesPriceProfit+
               _projControlPeriodTableColumn.wipSalespriceProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipTotalGrossWIP</Name>
				<Source><![CDATA[
        ProjGrossWIP wipTotalGrossWIP(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return  _projControlPeriodTableColumn.wipCostpriceTotal+
                _projControlPeriodTableColumn.wipSalespriceTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipTotalNetWIP</Name>
				<Source><![CDATA[
        projNetWIP wipTotalNetWIP(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipTotalGrossWIP-
               _projControlPeriodTableColumn.wipInvoiceOnAcc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>