<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetProposalDepreciationGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetProposalDepreciationGroup extends RAssetproposalDepreciation implements BatchRetryable
{
    RAssetTransDate             transDate, assetDeprPeriod;
    Map                         bonusTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        return RAssetTransType::Depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournalLine</Name>
				<Source><![CDATA[
    public boolean canCreateJournalLine(RAssetStandardId _rAssetStandardId)
    {
        return this.checkRegisterDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    #define.space(" ")
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        AmountCur                   amountCurTrans;
        RAssetDeprAccount           rAssetDeprAccount;
        RAssetSubGroupId            subGroupId;
        void updateDeprPeriod()
        {
            LedgerJournalTrans        ledgerJournalTransLocal;
            LedgerJournalTrans_RAsset ledgerJournalTransLocal_RAsset;

            ledgerJournalTransLocal = rAssetJournal.ledgerJournalTrans();
            ledgerJournalTransLocal_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();

            ledgerJournalTransLocal.selectForUpdate(true);
            ledgerJournalTransLocal_RAsset.selectForUpdate(true);

            ledgerJournalTransLocal_RAsset.DeprPeriod = assetDeprPeriod;
            ledgerJournalTransLocal.NoEdit            = isBudgetJournal ? NoYes::No : NoYes::Yes;
            ledgerJournalTransLocal.doUpdate();
            ledgerJournalTransLocal_RAsset.doUpdate();
        }

        if (_assetAmount != 0)
        {
            subGroupId = RAssetLifeHist::findDateLifeTime(rAssetTable.AccountNum, transDate - 1, _assetStandardId).SubGroupId;

            if ((select firstonly rAssetDeprAccount
                     where rAssetDeprAccount.AssetId         == rAssetTable.AccountNum &&
                           rAssetDeprAccount.AssetStandardId == _assetStandardId).RecId)
            {
                while select rAssetDeprAccount
                    where rAssetDeprAccount.AssetId         == rAssetTable.AccountNum &&
                          rAssetDeprAccount.AssetStandardId == _assetStandardId
                {
                    amountCurTrans = _assetAmount * rAssetDeprAccount.Percentage / 100;

                    if (amountCurTrans >= RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
                    {
                        rAssetJournal.createVoucher();
                        rAssetJournal.createTrans(-amountCurTrans,
                                                  rAssetTable,
                                                  transDate,
                                                  rAssetStandards,
                                                  rAssetBudgetModelId,
                                                  strFmt("@SYS96096", rAssetStandards.AssetGroup) +
                                                  (subGroupId ? "@SYS35667" + strFmt("@GLS117090", subGroupId) : '') +
                                                  "@SYS35675" +
                                                  strFmt("@GLS116532", assetDeprPeriod) + #space + rAssetDeprAccount.AssetTransTxt,
                                                  rAssetDeprAccount.AssetLedgerDimension,
                                                  NoYes::Yes,
                                                  rAssetDeprAccount.DefaultDimension);
                        updateDeprPeriod();
                        if (! rAssetBudgetModelId && bonusTrans)
                        {
                            this.createDepreciationBonusLine(transDate, bonusTrans, rAssetDeprAccount);
                        }
                    }
                }
            }
            else
            {
                amountCurTrans = _assetAmount;
                if (amountCurTrans >= RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
                {
                    rAssetJournal.createVoucher();
                    rAssetJournal.createTrans(-amountCurTrans,
                                              rAssetTable,
                                              transDate,
                                              rAssetStandards,
                                              rAssetBudgetModelId,
                                              strFmt("@SYS96096", rAssetStandards.AssetGroup) +
                                              (subGroupId ? "@SYS35667" + strFmt("@GLS117090", subGroupId) : '') +
                                              "@SYS35675" +
                                              strFmt("@GLS116532", assetDeprPeriod));
                    updateDeprPeriod();
                    if (! rAssetBudgetModelId && bonusTrans)
                    {
                        this.createDepreciationBonusLine(transDate, bonusTrans);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciateGroup</Name>
				<Source><![CDATA[
private void depreciateGroup(RAssetGroup _group)
    {
        RassetTableMethodIterator_TaxGroup iterator = new RassetTableMethodIterator_TaxGroup();
        MapEnumerator                      depreciation;
        anytype                            anyNull = null;
        TransDate                          accountingDate;
    
        iterator.initValue(rAssetStandards, runDate, rAssetBudgetModelId, _group);
    
        ttsbegin;
        while (iterator.nextInterval())
        {
            assetDeprPeriod = iterator.parmPostingDate();
    
            iterator.calculate();
    
            transDate = iterator.parmDeprStartDate();
            accountingDate = this.checkFirstDate(transDate, rAssetTable.AccountNum);
    
            if (transDate != accountingDate)
            {
                rAssetJournal.parmCorrect(true);
                rAssetJournal.parmAccountingDate(accountingDate);
            }
            else
            {
                rAssetJournal.parmCorrect(false);
            }
    
            depreciation = iterator.getCurDepreciation().getEnumerator();
    
            while (depreciation.moveNext())
            {
                rAssetStandards = depreciation.currentKey();
                rAssetTable = RAssetTable::find(rAssetStandards.AssetId);
    
                if (this.canCreateJournalLine(rAssetStandards.AssetStandardId))
                {
                    bonusTrans = iterator.getBonusGroup().exists(rAssetStandards.RecId) ?
                                 iterator.getBonusGroup().lookup(rAssetStandards.RecId) : anyNull;
                    this.createJournalLines(rAssetStandardId, true, depreciation.currentValue());
                }
            }
        }
        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS117089");
        dialogAssetStandardId.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();
        rAssetStandardId = RAssetParameters::standardTaxIdDefault();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query                query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
        ;

        super();

        qbds = query.addDataSource(tableNum(RAssetGroup));
        qbds.addRange(fieldNum(RAssetGroup, AssetGroupId));
        qbr = qbds.addRange(fieldNum(RAssetGroup, AssetStandardId));
        qbr.value(queryValue(RAssetParameters::standardTaxIdDefault()));
        qbr.status(RangeStatus::Locked);

        qbr = qbds.addRange(fieldNum(RAssetGroup, DepreciationRate));
        qbr.value(SysQuery::valueNot(0));
        qbr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _runProposal = queryRun)
    {
        DictEnum             assetTransTypeEnum = new DictEnum(enumNum(RAssetTransType));
        RAssetGroup          rAssetGroup;

        mapAssetCheck = new Map(Types::Container, Types::Enum);
        rAssetJournal = new RAssetJournal(this.journalNum(), this.assetTransType());

        this.progressInit(strFmt("@GLS106745", this.assetTransType()),
                          SysQuery::countTotal(_runProposal),
                          #AviUpdate);

        while (_runProposal.next())
        {
            rAssetGroup    = _runProposal.get(tableNum(RAssetGroup));
            progress.setText("@GLS116655" + "@SYS77038" + rAssetGroup.AssetGroupId);
            progress.incCount();

            if (!reasonRefRecID && (reasonCode != '' || reasonComment != ''))
            {
                rAssetJournal.parmReasonRefRecId(reasonRefRecID);
                rAssetJournal.parmReasonCode(reasonCode);
                rAssetJournal.parmReasonComment(reasonComment);
            }

            this.depreciateGroup(rAssetGroup);
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>