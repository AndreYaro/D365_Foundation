<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationDirectiveInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ComplianceDataType = Microsoft.Dynamics365.LocalizationFramework.XppSupportLayer.ComplianceAnnotations.ComplianceDataType;

/// <summary>
/// Provides activities for location directive execution.
/// </summary>
internal final class WHSLocationDirectiveInstrumentationActivities
{
    private WHSInstrumentationLogger logger;

    private const str LocationDirectiveExecute = 'LocationDirectiveExecute';
    private const str LocationDirectiveBuildActionQuery = 'LocationDirectiveBuildActionQuery';
    private const str LocationDirectiveVolumetricsCalculation = 'LocationDirectiveVolumetricsCalculation';
    private const str LocationDirectiveGetFinalLocationAndQuantity = 'LocationDirectiveGetFinalLocationAndQuantity';
    private const str LocationDirectiveFindLocation = 'LocationDirectiveFindLocation';
    private const str LocationDirectiveGetValidSellableDaysQty = 'LocationDirectiveGetValidSellableDaysQty';
    private const str LocationDirectiveActionConverter = 'LocationDirectiveActionQueryConverter';
    private const str LocationDirectiveActionQueryConvertAndSave = 'LocationDirectiveActionQueryConvertAndSave';
    private const str LocationDirectiveActionConverterService = 'LocationDirectiveActionQueryConverterService';
    private const str LocationDirectiveOptimizationRule = 'LocationDirectiveOptimizationRule';
    private const str LocationDirectiveStructure = 'LocationDirectiveStructure';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static WHSLocationDirectiveInstrumentationActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSLocationDirectiveInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLocationDirective</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext executeLocationDirective(WHSLocDirStrategy _strategy)
    {
        var activity = logger.activity(LocationDirectiveExecute);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty(logger.properties().LocationDirectiveStrategy, WHSLocDirStrategyClass::newFromMode(_strategy).stringify());

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>volumetricsCalculation</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext volumetricsCalculation()
    {
        var activity = logger.activity(LocationDirectiveVolumetricsCalculation); 
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveOptimizationRule</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext locationDirectiveOptimizationRule()
    {
        var activity = logger.activity(LocationDirectiveOptimizationRule);
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalLocationAndQuantity</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getFinalLocationAndQuantity()
    {
        var activity = logger.activity(LocationDirectiveGetFinalLocationAndQuantity);
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocation</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext findLocation(boolean _isRestart)
    {
        var activity = logger.activity(LocationDirectiveFindLocation);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        activityContext.addCustomProperty(logger.properties().Restart, any2Str(_isRestart));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveActionQuery</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext buildLocationDirectiveActionQuery(WHSLocDirAction _locationDirectiveAction, WHSWorkType _workType)
    {
        var activity = logger.activity(LocationDirectiveBuildActionQuery);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty(logger.properties().LocationDirectiveStrategy, WHSLocDirStrategyClass::newFromMode(_locationDirectiveAction.LocDirStrategy).stringify())
                .addCustomProperty(logger.properties().BatchEnabled, any2Str(_locationDirectiveAction.BatchEnabled))
                .addCustomProperty(logger.properties().WorkType, enum2Symbol(enumNum(WHSWorkType), enum2int(_workType)));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidSellableDaysQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext getValidSellableDaysQty(boolean _includeDeltaRecords)
    {
        var activity = logger.activity(LocationDirectiveGetValidSellableDaysQty);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty(logger.properties().IncludeDeltaRecords, any2Str(_includeDeltaRecords));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveActionConverter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext locationDirectiveActionConverter(
        QueryName _queryName,
        QueryName _convertedQueryName,
        boolean _useConvertedQuery)
    {
        var activity = logger.activity(LocationDirectiveActionConverter);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty('QueryName', _queryName);
        activityContext.addCustomProperty('ConvertedQueryName', _convertedQueryName);
        activityContext.addCustomProperty('UseQuery', any2Str(_useConvertedQuery));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveStructure</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext locationDirectiveStructure(WHSLocDirTable _locDirTable)
    {
        var activity = logger.activity(LocationDirectiveStructure);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        using (WHSInstrumentationJSONLogger jsonLogger = new WHSInstrumentationJSONLogger())
        {
            jsonLogger.startObject();

            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, LocSeqNum));
            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, InventLocationId));
            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, WorkTransType));
            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, WorkType));
            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, WarehouseGroupAll));
            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, LocateBy));
            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, ApplicableDispositionCodeRule));

            jsonLogger.addProperty(fieldStr(WHSLocDirTable, Scope), enum2Symbol(enumNum(WhsLocationDirectiveScope), _locDirTable.locationDirectiveScope()), ComplianceDataType::OII);
            if (_locDirTable.isDefaultQuery())
            {
                jsonLogger.addProperty(tableMethodStr(WHSLocDirTable, isDefaultQuery), 'Yes', ComplianceDataType::SystemMetadata);
            }
            jsonLogger.addFieldProperty(_locDirTable, fieldNum(WHSLocDirTable, LocDirQuery));

            jsonLogger.startArray('Lines');

            WHSLocDirLine locDirLine;

            while select locDirLine
                order by locDirLine.LocSeqNum
                where locDirLine.RefRecId == _locDirTable.RecId
            {
                this.addLocDirLineToJson(jsonLogger, locDirLine, _locDirTable.WorkType);
            }
            jsonLogger.endArray();
            jsonLogger.endObject();

            jsonLogger.writeToActivityContext(activityContext, 'locationDirectiveJson');
        }
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocDirLineToJson</Name>
				<Source><![CDATA[
    private void addLocDirLineToJson(WHSInstrumentationJSONLogger _jsonLogger, WHSLocDirLine _locDirLine, WhsWorkType _workType)
    {
        _jsonLogger.startObject();

        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, LocSeqNum));
        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, LocateQty));
        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, LocatePackingQty));
        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, RestrictByUOM));
        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, RoundUpToHandlingUnit));
        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, AllowSplit));
        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, FromQty));
        _jsonLogger.addFieldProperty(_locDirLine, fieldNum(WhsLocDirLine, ToQty));

        _jsonLogger.startArray('Actions');        

        WHSLocDirAction locDirAction;
        while select locDirAction
            order by locDirAction.LocSeqNum
            where locDirAction.RefRecId == _locDirLine.RecId
        {
            this.addLocDirActionToJson(_jsonLogger, locDirAction, _workType);
        }
        _jsonLogger.endArray();

        _jsonLogger.endObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocDirActionToJson</Name>
				<Source><![CDATA[
    private void addLocDirActionToJson(WHSInstrumentationJSONLogger _jsonLogger, WHSLocDirAction _locDirAction, WhsWorkType _workType)
    {
        _jsonLogger.startObject();

        _jsonLogger.addFieldProperty(_locDirAction, fieldNum(WHSLocDirAction, LocSeqNum));
        _jsonLogger.addFieldProperty(_locDirAction, fieldNum(WHSLocDirAction, LocDirStrategy));
        _jsonLogger.addFieldProperty(_locDirAction, fieldNum(WHSLocDirAction, UseInventFixedLocation));
        _jsonLogger.addFieldProperty(_locDirAction, fieldNum(WHSLocDirAction, AllowNegative));
        _jsonLogger.addFieldProperty(_locDirAction, fieldNum(WHSLocDirAction, BatchEnabled));
        if (_locDirAction.canOptimizeQuery(_workType))
        {
            _jsonLogger.addProperty(tableMethodStr(WHSLocDirAction, canOptimizeQuery), 'Yes', ComplianceDataType::SystemMetadata);
        }       

        _jsonLogger.addFieldProperty(_locDirAction, fieldNum(WHSLocDirAction, LocDirQuery));

        _jsonLogger.endObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveActionConverterService</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext locationDirectiveActionConverterService()
    {
        var activity = logger.activity(LocationDirectiveActionConverterService);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveActionQueryConvertAndSave</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext locationDirectiveActionQueryConvertAndSave(
        WHSLocDirAction _locationDirectiveAction,
        WHSWorkType _workType)
    {
        var activity = logger.activity(LocationDirectiveActionQueryConvertAndSave);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext
            .addCustomProperty(tableStr(WHSLocDirAction), int642Str(_locationDirectiveAction.RecId))
            .addCustomProperty(logger.properties().BatchEnabled, any2Str(_locationDirectiveAction.BatchEnabled))
            .addCustomProperty(logger.properties().WorkType, enum2Symbol(enumNum(WHSWorkType), enum2int(_workType)));

        return activityContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>