<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableForm_DlvScheduleSyncEnabled</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesTableForm_DlvScheduleSyncEnabled</c> class provides non-mandatory synchronization
///    mechanism for delivery schedules.
/// </summary>
class SalesTableForm_DlvScheduleSyncEnabled
extends SalesTableForm
{
    SalesLine   orderLineOrig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deliveryLinesSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the delivery lines with the order line after a change on either the order line or a
    /// delivery line.
    /// </summary>
    /// <param name="_salesLine">
    /// The line that was changed.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if any delivery lines were changed and the form refresh is needed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the value of the <paramref name="_interactive" /> parameter is false, the  positive answer is
    /// assumed for all question that would be asked if it was an interactive mode.
    /// </remarks>
    boolean deliveryLinesSync(SalesLine _salesLine, boolean _interactive = true)
    {
        SalesLine orderLine;
        boolean   needRefresh = false;

        if (_salesLine.LineDeliveryType == LineDeliveryType::OrderLine)
            return needRefresh;

        if (_salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            orderLine = _salesLine;
        }
        else
        {
            orderLine = SalesDeliverySchedule::findOrderLineForDeliveryLine(_salesLine.InventTransId);
        }

        needRefresh = this.syncDeliveryScheduleCommercialAttributes(orderLine, _interactive);
        needRefresh = this.syncDeliveryScheduleDDC(orderLine, _interactive) || needRefresh;
        return needRefresh;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderLineOrig</Name>
				<Source><![CDATA[
    public SalesLine parmOrderLineOrig(SalesLine _value = orderLineOrig)
    {
        orderLineOrig = _value;
        return orderLineOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliveryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes delivery lines after the order line with multiple deliveries was changed.
    /// </summary>
    /// <param name="_salesLine">
    /// The selected sales order line.
    /// </param>
    /// <remarks>
    /// This method rereads the delivery lines that are found in the cache of the client one by one.It does
    /// not need to requery the data source, which would be time consuming for a large order.The assumption
    /// is that there will not be hundreds of delivery lines, therefore, their reread one by one will
    /// normally perform much better when taking into account the slow <c>findRecord</c> method that would
    /// need to be called after the requery.
    /// </remarks>
    protected void refreshDeliveryLines(SalesLine _salesLine)
    {
        FormDataSource  salesLineDS = FormDataUtil::getFormDataSource(_salesLine);

        if (salesLineDS)
        {
            SalesLine localSalesLine = salesLineDS.getFirst(0,false); // skip records not in memory.
            while (localSalesLine)
            {
                if (localSalesLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
                {
                    localSalesLine.reread();
                }
                localSalesLine = salesLineDS.getNext();
            }

            // -1 means refresh all records, the default is -2 which refreshes only certain specific records (eg marked)
            salesLineDS.refreshEx(-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the delivery schedule when order or delivery line was modified.
    /// </summary>
    /// <param name="_salesLine">
    /// The changed sales order line.
    /// </param>
    /// <param name="_resetPriceOnOrderLine">
    /// A Boolean value that indicates whether price on the order line should be recalculated.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <remarks>
    /// If the value of the <paramref name="_interactive" /> parameter is false, the positive answer is
    /// assumed for all question that would have been asked if it was an interactive mode.
    /// </remarks>
    void refreshDeliverySchedule(SalesLine _salesLine, boolean _resetPriceOnOrderLine, boolean _interactive = true)
    {
        if (_salesLine.LineDeliveryType != LineDeliveryType::OrderLine)
        {
            if (_salesLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                this.refreshOrderLineWithMultipleDeliveries(_salesLine, _resetPriceOnOrderLine);
            }

            if (this.deliveryLinesSync(_salesLine, _interactive))
            {
                // refresh if user wanted to update commercial attributes on delivery lines.
                _salesLine.reread();
                this.refreshDeliveryLines(_salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the order line with multiple deliveries if it was changed in the result of delivery line
    /// change.
    /// </summary>
    /// <param name="_salesLine">
    /// The delivery line that changed.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that specifies whether to recalculate the price on the order line should be
    /// recalculated.
    /// </param>
    protected void refreshOrderLineWithMultipleDeliveries(SalesLine _salesLine, boolean _resetPrice)
    {
        SalesLine       orderLine       = SalesDeliverySchedule::findOrderLineForDeliveryLine(_salesLine.InventTransId, _resetPrice);
        boolean         found           = false;
        FormDataSource  salesLineDS     = FormDataUtil::getFormDataSource(_salesLine);

        if (_resetPrice)
        {
            // recalculation after agreement disassociation has no way to discover that the order line
            // was previously linked so we need to force price recalculation.
            SalesLine::modifySalesQty(orderLine, orderLine.inventDim(), _resetPrice);
            orderLine.update();
        }

        if (salesLineDS)
        {
            SalesLine localSalesLine = salesLineDS.getFirst(0,false); // skip records not in memory.
            while (localSalesLine && !found)
            {
                if (localSalesLine.InventTransId == orderLine.InventTransId)
                {
                    localSalesLine.reread();
                    found = true;
                }
                localSalesLine = salesLineDS.getNext();
            }

            // -1 means refresh all records, the default is -2 which refreshes only certain specific records (eg marked)
            salesLineDS.refreshEx(-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_Write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Captures the order line before the update of a line that will trigger delivery schedule
    /// synchronization.
    /// </summary>
    /// <param name="_salesLine">
    /// The line to change.
    /// </param>
    void salesLine_Write(SalesLine _salesLine)
    {
        orderLineOrig.clear();

        switch (_salesLine.LineDeliveryType)
        {
            case LineDeliveryType::OrderLineWithMultipleDeliveries:
                orderLineOrig.data(_salesLine.orig().data());
                break;

            case LineDeliveryType::DeliveryLine:
                orderLineOrig = SalesDeliverySchedule::findOrderLineForDeliveryLine(_salesLine.InventTransId);
                break;
        }

        super(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveCommercialAttributesChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects whether any of the commercial attributes have changed on the order line.
    /// </summary>
    /// <param name = "_orderLine">The new order line.</param>
    /// <returns>true if the commercial attributes have changed; otherwise, false.</returns>
    protected boolean haveCommercialAttributesChanged(SalesLine _orderLine)
    {
        return (_orderLine.SalesPrice  !=  orderLineOrig.SalesPrice  ||
                _orderLine.PriceUnit   !=  orderLineOrig.PriceUnit   ||
                _orderLine.LineDisc    !=  orderLineOrig.LineDisc    ||
                _orderLine.LinePercent !=  orderLineOrig.LinePercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommercialAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the commercial attributes of the delivery line from the order line.
    /// </summary>
    /// <param name = "_deliveryLine">The delivery line.</param>
    /// <param name = "_orderLine">The order line.</param>
    protected void setCommercialAttributes(SalesLine _deliveryLine, SalesLine _orderLine)
    {
        if (_orderLine.SalesPrice  !=  orderLineOrig.SalesPrice)
        {
            _deliveryLine.SalesPrice = _orderLine.SalesPrice;
            _deliveryLine.modifiedField(fieldNum(SalesLine, SalesPrice));
        }
        if (_orderLine.PriceUnit   !=  orderLineOrig.PriceUnit)
        {
            _deliveryLine.PriceUnit = _orderLine.PriceUnit;
            _deliveryLine.modifiedField(fieldNum(SalesLine, PriceUnit));
        }
        if (_orderLine.LineDisc    !=  orderLineOrig.LineDisc)
        {
            _deliveryLine.LineDisc = _orderLine.LineDisc;
            _deliveryLine.modifiedField(fieldNum(SalesLine, LineDisc));
        }
        if (_orderLine.LinePercent !=  orderLineOrig.LinePercent)
        {
            _deliveryLine.LinePercent = _orderLine.LinePercent;
            _deliveryLine.modifiedField(fieldNum(SalesLine, LinePercent));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryScheduleCommercialAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects whether any of the commercial attributes changed on the order line with multiple
    /// deliveries. If it changed, prompts the user whether the changed attributes should be copied to all
    /// the delivery lines and then copies it.
    /// </summary>
    /// <param name="_orderLine">
    /// The new order line with multiple deliveries.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if delivery lines were changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the value of the <paramref name="_interactive" /> parameter is false, the delivery lines are
    /// always updated with new commercial attributes.Commercial attributes are: <c>SalesPrice</c>,
    /// <c>PriceUnit</c>, <c>LineDisc</c>, and <c>LinePercent</c>.Change detection is based on comparison
    /// with the order line captured by invocation of the <c>salesLine_Write</c> method before the actual
    /// update of the Delivery Schedule.
    /// </remarks>
    protected boolean syncDeliveryScheduleCommercialAttributes(SalesLine _orderLine, boolean _interactive = true)
    {
        #OCCRetryCount
        SalesLine               deliveryLine;
        SalesDeliverySchedule   salesDeliverySchedule;

        // The commercial attributes of the delivery schedule have changed. Do you want to update all the delivery lines?
        if (!this.haveCommercialAttributesChanged(_orderLine)
             || (_interactive && Box::yesNo("@SYS131418", DialogButton::Yes) == DialogButton::No))
        {
            // user doesn't want to update commercial attributes.
            return false;
        }

        try
        {
            ttsbegin;

            while select forupdate deliveryLine
                    join salesDeliverySchedule
                        where salesDeliverySchedule.OrderLine    == _orderLine.InventTransId
                           && salesDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
            {
                if (!deliveryLine.isInterCompanyOrderLineInvoiceMatched())
                {
                    this.setCommercialAttributes(deliveryLine, _orderLine);
                    deliveryLine.update();
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryScheduleDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects if there are any delivery lines with shipment dates lower than the new order line values.
    /// If there are, prompts the user whether Delivery Date Control should be run on delivery lines.
    /// </summary>
    /// <param name="_orderLine">
    /// The new order line.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if any delivery lines were changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the value of the <paramref name="_interactive" /> parameter is false, the Delivery Date Control
    /// is always run for delivery line with shipments dates lower than the shipment date of the order line.
    /// </remarks>
    protected boolean syncDeliveryScheduleDDC(SalesLine _orderLine, boolean _interactive = true)
    {
        #OCCRetryCount
        SalesLine                   deliveryLine;
        SalesDeliverySchedule       salesDeliverySchedule;
        boolean                     needRefresh = false;

        select deliveryLine
            where deliveryLine.ShippingDateRequested    <  _orderLine.ShippingDateRequested
               || deliveryLine.ShippingDateConfirmed    <  _orderLine.ShippingDateConfirmed
            exists join salesDeliverySchedule
                where salesDeliverySchedule.OrderLine    == _orderLine.InventTransId
                   && salesDeliverySchedule.DeliveryLine == deliveryLine.InventTransId;

        // Shipment date on the order line exceeds the shipment date of the first delivery line.
        // Do you want to run delivery date control on delivery lines?
        if (deliveryLine
            && (!_interactive
                || Box::yesNo("@SYS131417", DialogButton::Yes) == DialogButton::Yes
               )
           )
        {
            needRefresh = true;
            try
            {
                ttsbegin;

                deliveryLine.selectForUpdate(true);

                while (deliveryLine)
                {
                    SalesCalcAvailableDlvDates salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(deliveryLine, fieldnum(SalesLine, DeliveryDateControlType));
                    salesCalcAvailableDlvDates.modifiedFieldBeforeInsert(deliveryLine, false);
                    deliveryLine.update();
                    next deliveryLine;
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                ttsabort;
                throw error("@SYS93835");
            }
        }

        return needRefresh;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
