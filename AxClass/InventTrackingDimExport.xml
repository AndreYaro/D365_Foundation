<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Class for exporting tracking information in XML format.
/// </summary>
class InventTrackingDimExport
{
    #File
    const str encoding = 'UTF-8';

    InventTrackingDimTracingCriteria        inventTrackingDimTracingCriteria;
    InventTrackingDimTracingHierarchy       inventTrackingDimTracingHierarchy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrackingDimTracingCriteria</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingCriteria parmInventTrackingDimTracingCriteria(InventTrackingDimTracingCriteria _inventTrackingDimTracingCriteria = inventTrackingDimTracingCriteria)
    {
        inventTrackingDimTracingCriteria = _inventTrackingDimTracingCriteria;

        return inventTrackingDimTracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrackingDimTracingHierarchy</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingHierarchy parmInventTrackingDimTracingHierarchy(InventTrackingDimTracingHierarchy _inventTrackingDimTracingHierarchy = inventTrackingDimTracingHierarchy)
    {
        inventTrackingDimTracingHierarchy = _inventTrackingDimTracingHierarchy;

        return inventTrackingDimTracingHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Set                 exportedNodes = new Set(Types::Integer);
        Set                 exportedTransactions;

        if (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            exportedTransactions = new Set(Types::String);
        }
        else
        {
            exportedTransactions = new Set(Types::Int64);
        }

        if (inventTrackingDimTracingHierarchy)
        {
            inventTrackingDimTracingHierarchy.parmTraceDirection(inventTrackingDimTracingCriteria.parmTraceDirection());
        }

        using (System.IO.Stream stream = this.getStream())
        {
            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.indent(true);
            xmlWriterSettings.encoding(encoding);
            XmlWriter xmlWriter = XmlWriter::newStream(stream, xmlWriterSettings);

            xmlWriter.writeStartDocument();
            xmlWriter.writeStartElement('Trace');

            if (inventTrackingDimTracingCriteria)
            {
                inventTrackingDimTracingCriteria.exportAsXML(xmlWriter);
                inventTrackingDimTracingHierarchy.exportCurrentOnHandAsXML(xmlWriter, inventTrackingDimTracingCriteria.inventTable());
            }

            xmlWriter.writeStartElement('TraceHierarchy');

            inventTrackingDimTracingHierarchy.exportChildNodesAsXML(xmlWriter, exportedNodes, exportedTransactions, 0, 1);

            xmlWriter.writeEndElement();    // TraceHierarchy
            xmlWriter.writeEndElement();    // Trace
            xmlWriter.flush();

            this.sendStreamToUser(stream);

            xmlWriter.close();
            xmlWriter = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new instance of a memory stream.
    /// </summary>
    /// <returns></returns>
    protected System.IO.Stream getStream()
    {
        return new System.IO.MemoryStream();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendStreamToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes the content of a stream available to the user as a file.
    /// </summary>
    /// <param name = "_stream">The stream to send.</param>
    protected void sendStreamToUser(System.IO.Stream _stream)
    {
        Filename fileName = InventTrackingDimExport::suggestedFileName();
        File::SendFileToUser(_stream, fileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingDimExport construct()
    {
        return new InventTrackingDimExport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2String</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a date value to a string value that can be included in XML documents.
    /// </summary>
    /// <param name="_value">
    ///    The date value to convert.
    /// </param>
    /// <returns>
    ///    A string containing the date value for output to an xml document.
    /// </returns>
    public static str date2String(date _value)
    {
        #define.DateSequence(321) // Year, Month, Date

        return date2str(_value, #DateSequence, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None );
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26056";
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Exports the item tracing results as an XML file.
    /// </summary>
    /// <param name="_inventTrackingDimTracingCriteria">
    ///    The criteria used for the search.
    /// </param>
    /// <param name="_inventTrackingDimTracingHierarchy">
    ///    The tracing results hierarchy.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    Cannot create/open file.
    /// </exception>
    static public void exportAsXML(
        InventTrackingDimTracingCriteria    _inventTrackingDimTracingCriteria,
        inventTrackingDimTracingHierarchy   _inventTrackingDimTracingHierarchy)
    {
        InventTrackingDimExport     inventTrackingDimExport = InventTrackingDimExport::construct();

        inventTrackingDimExport.parmInventTrackingDimTracingCriteria(_inventTrackingDimTracingCriteria);
        inventTrackingDimExport.parmInventTrackingDimTracingHierarchy(_inventTrackingDimTracingHierarchy);

        inventTrackingDimExport.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportInventDimAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the filled values in a record of <c>InventDim</c> table as attributes for an XML document element.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The <c>XmlWriter</c> for the XML document.
    /// </param>
    /// <param name="_inventDim">
    ///    The record of the <c>InventDim</c> table to write to the document.
    /// </param>
    public static void exportInventDimAsXML(
        XmlWriter   _xmlWriter,
        InventDim   _inventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldsList().getEnumerator();

        if (enumerator)
        {
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            _inventDim.checkInvalidFieldAccess(false);

            while (enumerator.moveNext())
            {
                FieldId inventDimFieldId = enumerator.current();
                if (_inventDim.(inventDimFieldId))
                {
                    _xmlWriter.writeAttributeString(new DictField(tableNum(InventDim),inventDimFieldId).name(), _inventDim.dimValue2str(inventDimFieldId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>int2String</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an integer value to a string value that can be included in XML documents.
    /// </summary>
    /// <param name="_value">
    ///    The integer value to convert.
    /// </param>
    /// <returns>
    ///    A string containing the integer value for output to an XML document.
    /// </returns>
    public static str int2String(int _value)
    {
        return int2str(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>real2String</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a real value to a string value that can be included in XML documents.
    /// </summary>
    /// <param name="_value">
    ///    The real value to convert.
    /// </param>
    /// <returns>
    ///    A string containing the real value for output to an xml document.
    /// </returns>
    public static str real2String(real _value)
    {
        #define.CharactersCode(1)       // Minimum number of digits
        #define.DecimalsCode(8)         // Number of decimals

        return num2str(_value, #CharactersCode, #DecimalsCode, DecimalSeparator::Dot, ThousandSeparator::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestedFileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a proposed filename to use when exporting an item trace.
    /// </summary>
    /// <returns>
    ///    The proposed filename.
    /// </returns>
    static public Filename suggestedFileName()
    {
        utcdatetime         dateTimeNow = DateTimeUtil::getSystemDateTime();

        str namePrefix = strReplace("@SYS4004859", ' ', '');
        namePrefix     = strReplace(namePrefix, '/', '_');
        namePrefix     = strReplace(namePrefix, '\\', '_');
        namePrefix     = strReplace(namePrefix, ':', '_');

        Filename fileName = DateTimeUtil::toStr(DateTimeUtil::applyTimeZoneOffset(dateTimeNow, DateTimeUtil::getUserPreferredTimeZone()));
        fileName          = strReplace(fileName, 'T', '_');            // Replace date/time separator with _
        fileName          = strReplace(fileName, ':', '');             // Replace : with empty string
        fileName          = strReplace(fileName, '-', '');             // Replace - with empty string
        fileName          = namePrefix + '_' + fileName + #xml;

        return fileName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>