<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatExternalCatalogPunchoutDialogHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CatExternalCatalogPunchoutDialogHelper</c> class is the helper class for filtering and searching external catalog and its categories
/// </summary>
public class CatExternalCatalogPunchoutDialogHelper
{
    private Set catExternalCatalogQueryRangeSet = new Set (Types::String);
    
    private Map availableCatExternalCategoriesMap = new Map (Types::Int64, Types::Enum);
    private Map catExternalCategoriesNameMap = new Map(Types::Int64, Types::String);
    private Map externalCataegoriesToExternalCatalogMap = new Map(Types::String, Types::Container);
    private Map vendorAllowed = new Map(Types::Int64, Types::Enum);

    private container   externalCatalogQueryFilter;
    private boolean     areAllCategoriesAvailable;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CatExternalCatalogPunchoutDialogHelper construct()
    {
        return new CatExternalCatalogPunchoutDialogHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAvailableCatExternalCategories</Name>
				<Source><![CDATA[
    protected void generateAvailableCatExternalCategories(RefRecId _buyingLegalEntity, RefRecId _receivingOperatingUnit)
    {
        EcoResCategory                      thisCategory, ascendantCategory;
        ProcCategoryAccessPolicyParameter   procCategoryAccessPolicyParameter;
        ProcCategoryTmpPolicyRule           procCategoryTmpPolicyRule, tmpCategoryPolicyRule;

        procCategoryTmpPolicyRule.setTmpData(EcoResCategory::getProcCategoryRules(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule,
                                                                            _buyingLegalEntity,
                                                                            _receivingOperatingUnit));

        tmpCategoryPolicyRule = EcoResCategory::getProcCategoryRules(SysPolicyRuleTypeEnum::CategoryPolicyRule,
                                                                    _buyingLegalEntity,
                                                                    _receivingOperatingUnit,
                                                                    _receivingOperatingUnit? ProcCategoryOrganizationOption::BuyingLegalEntityAndCombination : ProcCategoryOrganizationOption::BuyingLegalEntity);

        availableCatExternalCategoriesMap = new Map(Types::Int64, Types::Enum);

        select firstonly RecId from procCategoryTmpPolicyRule;
        areAllCategoriesAvailable = !procCategoryTmpPolicyRule.RecId;

        if (!areAllCategoriesAvailable)
        {
            while select RecId from procCategoryTmpPolicyRule
                join RecId from procCategoryAccessPolicyParameter
                    where procCategoryTmpPolicyRule.PolicyRule == procCategoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule
                join RecId from thisCategory
                    where thisCategory.RecId == procCategoryAccessPolicyParameter.ProcurementCategory
                join RecId from ascendantCategory
                    where ascendantCategory.NestedSetLeft <= thisCategory.NestedSetLeft
                        && ascendantCategory.NestedSetRight >= thisCategory.NestedSetRight
                        && ascendantCategory.CategoryHierarchy == thisCategory.CategoryHierarchy
            {
                if (!availableCatExternalCategoriesMap.exists(ascendantCategory.RecId))
                {
                    this.insertAvailableCatExternalCategoriesMapValue(ascendantCategory.RecId, tmpCategoryPolicyRule);
                }
            }
        }
        else
        {
            this.initializeAvailableCatExternalCategoriesMapValues(_buyingLegalEntity, _receivingOperatingUnit, tmpCategoryPolicyRule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CardGroup_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnClicked event of the <c>CardGroup</c> <c>FormControl</c> for the <c>CatExternalCatalogPunchoutDialog</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(CatExternalCatalogPunchoutDialog, CardGroup), FormControlEventType::Clicked)]
    public static void CardGroup_OnClicked(FormControl _sender, FormControlEventArgs e)
    {
        CatExternalCatalogPunchoutDialogHelper::executePunchout(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CardGroup_OnEnter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnEnter event of the <c>CardGroup</c> <c>FormControl</c> for the <c>CatExternalCatalogPunchoutDialog</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(CatExternalCatalogPunchoutDialog, CardGroup), FormControlEventType::Enter)]
    public static void CardGroup_OnEnter(FormControl _sender, FormControlEventArgs e)
    {
        CatExternalCatalogPunchoutDialogHelper::executePunchout(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatExternalCatalogImage_OnEnter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnEnter event of the <c>GridItemCatalog</c> <c>FormControl</c> for the <c>CatExternalCatalogPunchoutDialog</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(CatExternalCatalogPunchoutDialog, CatExternalCatalogImage), FormControlEventType::Enter),
     SysObsolete('This event handler method is not needed anymore and will be removed', true, 03\05\2022)]
    public static void CatExternalCatalogImage_OnEnter(FormControl _sender, FormControlEventArgs e)
    {
        if (CatExternalCatalogPunchoutOnEnterFlight::instance().isEnabled())
        {
            CatExternalCatalogPunchoutDialogHelper::executePunchout(_sender);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatExternalCatalogImage_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnClicked event of the <c>GridItemCatalog</c> <c>FormControl</c> for the <c>CatExternalCatalogPunchoutDialog</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(CatExternalCatalogPunchoutDialog, CatExternalCatalogImage), FormControlEventType::Clicked)]
    public static void CatExternalCatalogImage_OnClicked(FormControl _sender, FormControlEventArgs e)
    {
        CatExternalCatalogPunchoutDialogHelper::executePunchout(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>NavigateButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Handles the OnClicked event of the <c>NavigateButton</c> <c>FormControl</c> for the <c>CatExternalCatalogPunchoutDialog</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(CatExternalCatalogPunchoutDialog, NavigateButton), FormControlEventType::Clicked)]
    public static void NavigateButton_OnClicked(FormControl _sender, FormControlEventArgs e)
    {
        CatExternalCatalogPunchoutDialogHelper::executePunchout(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePunchout</Name>
				<Source><![CDATA[
    private static void executePunchout(FormControl _sender)
    {
        FormRun formRun = _sender.formRun() as FormRun;

        CatExternalCatalogSummary catExternalCatalogSummary = formRun.dataSource(formDataSourceStr(CatExternalCatalogPunchoutDialog, CatExternalCatalogSummary))
                                                                     .cursor() as CatExternalCatalogSummary;

        if (catExternalCatalogSummary.Name)
        {
            try
            {
                CatPunchoutHandler punchoutHandler = CatPunchoutHandler::construct(catExternalCatalogSummary.Name);
                
                if (!punchoutHandler)
                {
                    throw Exception::Error;
                }

                PurchReqTable puchReqTable = formRun.args().record() as PurchReqTable;
                CatExternalCatalog externalCatalog = CatExternalCatalog::find(catExternalCatalogSummary.Name);
                CatExternalCatalogPolicyBasedFields catalogPolicyBasedFields = formRun.dataSource(formDataSourceStr(CatExternalCatalogPunchoutDialog, CatExternalCatalogPolicyBasedFields)).cursor() as CatExternalCatalogPolicyBasedFields;

                punchoutHandler.setPunchoutRequestAttributes(CatPunchoutRequestAttributes::construct(puchReqTable.RecId, externalCatalog.RecId, catalogPolicyBasedFields));
                punchoutHandler.checkPunchoutRequestAttributes();

                if (punchoutHandler.startPunchout(catExternalCatalogSummary.Name))
                {
                    formRun.close();
                }
            }
            catch(Exception::Error)
            {
                throw error ("@SCM:CanNotNavigateToTheExternalCatalogSite");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAvailableCatExternalCategoriesMapValue</Name>
				<Source><![CDATA[
    private void insertAvailableCatExternalCategoriesMapValue(EcoResCategoryId _ecoResCategoryId, ProcCategoryTmpPolicyRule _tmpCategoryPolicyRule)
    {
        ProcCategoryVendorSelection procCategoryVendorSelection = CatPunchoutRequestAddToPurchRequisition::getVendorSelectionForCategory(_ecoResCategoryId, _tmpCategoryPolicyRule);

        availableCatExternalCategoriesMap.insert(_ecoResCategoryId, procCategoryVendorSelection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAvailableCatExternalCategoriesMapValues</Name>
				<Source><![CDATA[
    private void initializeAvailableCatExternalCategoriesMapValues(LegalEntityRecId _buyingLegalEntity, OMOperatingUnitRefRecId _receivingOperatingUnit, ProcCategoryTmpPolicyRule _tmpCategoryPolicyRule)
    {
        CatExternalCatalogProcurementCategories catExternalCatalogCategories;

        while select Category from catExternalCatalogCategories
            group by Category
        {
            this.insertAvailableCatExternalCategoriesMapValue(catExternalCatalogCategories.Category, _tmpCategoryPolicyRule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatExternalCategoryAvailable</Name>
				<Source><![CDATA[
    protected boolean isCatExternalCategoryAvailable(EcoResCategoryId _ecoResCategoryId)
    {
        return areAllCategoriesAvailable ? true : availableCatExternalCategoriesMap.exists(_ecoResCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatExternalCatalogAvailableCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the procurement categories available for a given external catalog
    /// </summary>
    /// <param name="_catExternalCatalogSummaryRecId">
    /// <c>CatExernalCatalog</c> record id
    /// </param>
    /// <returns>String containing all the available categories for the passed external catalog</returns>
    public str getCatExternalCatalogAvailableCategories(RefRecId _catExternalCatalogSummaryRecId)
    {
        str catalogAvailableCategories = "@SCM:NoExternalCatalogsAreAvailable";

        if(catExternalCategoriesNameMap.exists(_catExternalCatalogSummaryRecId))
        {
            catalogAvailableCategories = catExternalCategoriesNameMap.lookup(_catExternalCatalogSummaryRecId);
        }
                                  
        return catalogAvailableCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCatExternalCatalogSummaryDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the available categories for all external catalogs and filter the datasource
    /// </summary>
    /// <param name="_catExternalCatalogSummaryQBDS">
    /// <c>CatExternalCatalogSummary</c> datasource
    /// </param>
    /// <param name="_buyingLegalEntity">
    /// Buying legal entity
    /// </param>
    /// <param name="_receivingOperatingUnit">
    /// Receiving operating unit RecId
    /// </param>
    /// <param name="_requiredDate">
    /// Required date of requisition
    /// </param>
    public void refreshCatExternalCatalogSummaryDatasource(QueryBuildDataSource _catExternalCatalogSummaryQBDS,
                                                           SelectableDataArea _buyingLegalEntity, 
                                                           RefRecId _receivingOperatingUnit)
    {
        RefRecId buyingLegalEntityRecId = CompanyInfo::findDataArea(_buyingLegalEntity).RecId;
        this.generateAvailableCatExternalCategories(buyingLegalEntityRecId, _receivingOperatingUnit);
        this.generateCatExternalCategoriesMapAndAddRangesToDatasource(_catExternalCatalogSummaryQBDS, _buyingLegalEntity, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), buyingLegalEntityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCatExternalCategoriesMapAndAddRangesToDatasource</Name>
				<Source><![CDATA[
    protected void generateCatExternalCategoriesMapAndAddRangesToDatasource(QueryBuildDataSource _catExternalCatalogSummaryQBDS,
                                                                            SelectableDataArea _buyingLegalEntity,
                                                                            PurchReqRequiredDate _requiredDate,
                                                                            RefRecId _buyingLegalEntityRecId)
    {
        CatExternalCatalogSummary externalCatalogSummary;
        catExternalCategoriesNameMap = new Map(Types::Int64, Types::String);
        externalCataegoriesToExternalCatalogMap = new Map(Types::String, Types::Container);
        externalCatalogQueryFilter = conNull();

        while select RecId, Name, ExternalCatalogVendor, VendorAccountNumber from externalCatalogSummary
            where externalCatalogSummary.VendorDataAreaId == _buyingLegalEntity
        {
            container avalaibleCatExternalCategories = this.availableCategories(externalCatalogSummary.ExternalCatalogVendor, externalCatalogSummary.Name, 
                                                                                externalCatalogSummary.VendorAccountNumber, _requiredDate, _buyingLegalEntityRecId);
            if (!conLen(avalaibleCatExternalCategories))
            {
                externalCatalogQueryFilter += externalCatalogSummary.RecId;
                continue;
            }
            catExternalCategoriesNameMap.insert(externalCatalogSummary.RecId, con2Str(avalaibleCatExternalCategories));
        }
        this.clearRangesAndApplyExternalCatalogFilter(_catExternalCatalogSummaryQBDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableCategories</Name>
				<Source><![CDATA[
    protected container availableCategories(RefRecId _externalCatalogVendor, CatExternalCatalogName _externalCatalogName, VendAccount _vendAccount, PurchReqRequiredDate _requiredDate, RefRecId _buyingLegalEntityRecId)
    {
        container                                availableCatExternalCatalogCategories;
        CatExternalCatalogProcurementCategories  catExternalCatalogCategories;
        CatExternalCatalog                       catExternalCatalog;
        EcoResCategoryName                       categoryName;

        while select RecId, Category from catExternalCatalogCategories
            exists join catExternalCatalog
                where catExternalCatalogCategories.ExternalCatalog == catExternalCatalog.RecId
                    && catExternalCatalog.Name == _externalCatalogName
        {
            if (this.isCatExternalCategoryAvailable(catExternalCatalogCategories.Category)
                && this.isVendorAllowedForTheSelectedExternalCategory(_vendAccount, catExternalCatalogCategories.Category, _requiredDate, _buyingLegalEntityRecId))
            {
                categoryName = EcoResCategory::find(catExternalCatalogCategories.Category).Name;
                availableCatExternalCatalogCategories += categoryName;
                this.initializeExternalCataegoriesToExternalCatalogMap(_externalCatalogName, categoryName);
            }
        }

        return availableCatExternalCatalogCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorAllowedForTheSelectedExternalCategory</Name>
				<Source><![CDATA[
    private boolean isVendorAllowedForTheSelectedExternalCategory(VendAccount _vendAccount,
                                                                EcoResCategoryId _ecoResCategoryId,
                                                                PurchReqRequiredDate _requiredDate,
                                                                RefRecId _buyingLegalEntityRecId)
                                                                    
    {
        if (!vendorAllowed.exists(_ecoResCategoryId))
        {
            boolean isVendorAllowed = PurchReqVendorPolicyValidation::validateCategoryPolicyForVendor(availableCatExternalCategoriesMap.lookup(_ecoResCategoryId), 
                                                                                        _vendAccount, 
                                                                                        _ecoResCategoryId, 
                                                                                        _requiredDate, 
                                                                                        _buyingLegalEntityRecId);
            vendorAllowed.insert(_ecoResCategoryId, isVendorAllowed);
            return isVendorAllowed;
        }
        return vendorAllowed.lookup(_ecoResCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExternalCataegoriesToExternalCatalogMap</Name>
				<Source><![CDATA[
    private void initializeExternalCataegoriesToExternalCatalogMap(CatExternalCatalogName _externalCatalogName, EcoResCategoryName _categoryName)
    {
        if (!externalCataegoriesToExternalCatalogMap.exists(_categoryName))
        {
            externalCataegoriesToExternalCatalogMap.insert(_categoryName, [_externalCatalogName]);
        }
        else
        {
            container mapValue = externalCataegoriesToExternalCatalogMap.lookup(_categoryName);
            mapValue += _externalCatalogName;
            externalCataegoriesToExternalCatalogMap.insert(_categoryName, mapValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRangesAndApplyExternalCatalogFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear all the ranges applied on the passed datasource and apply the ranges related to <c>CatExternalCatalogSummary</c> RecId.
    /// </summary>
    /// <param name="_catExternalCatalogSummaryQBDS">
    /// <c>CatExternalCatalogSummary</c> datasource.
    /// </param>
    public void clearRangesAndApplyExternalCatalogFilter(QueryBuildDataSource _catExternalCatalogSummaryQBDS)
    {
        str queryRangeValue = '';
        _catExternalCatalogSummaryQBDS.clearRanges();
        int externalCatalogQueryFilterSize = conLen(externalCatalogQueryFilter);

        if (externalCatalogQueryFilterSize)
        {
            queryRangeValue += strFmt('(%1 != %2)', fieldStr(CatExternalCatalogSummary, RecId), conPeek(externalCatalogQueryFilter, 1));

            for (int i = 2; i <= externalCatalogQueryFilterSize; i++)
            {
                queryRangeValue += strFmt('&& (%1 != %2)', fieldStr(CatExternalCatalogSummary, RecId), conPeek(externalCatalogQueryFilter, i));
            }
        }

        _catExternalCatalogSummaryQBDS.addRange(fieldnum(CatExternalCatalogSummary, RecId)).value(queryRangeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Search in all the available categories for the passed strings and apply filter over <c>CatExternalCatalogSummary</c> datasource.
    /// </summary>
    /// <param name="_catExternalCatalogSummaryQBDS">
    /// <c>CatExternalCatalogSummary</c> datasource.
    /// </param>
    /// <param name="_searchString">
    /// Strings to search for.
    /// </param>
    public void search(QueryBuildDataSource _catExternalCatalogSummaryQBDS, str _searchString)
    {
        if (_searchString == '')
        {
            this.clearRangesAndApplyExternalCatalogFilter(_catExternalCatalogSummaryQBDS);
            return;
        }

        container externalCatalogToShow = this.searchCategory(str2con(_searchString));
        int externalCatalogToShowSize = conLen(externalCatalogToShow);
        if (!externalCatalogToShowSize)
        {
            this.applyNotExistingRangeToShowEmptyDatasource(_catExternalCatalogSummaryQBDS);
        }
        else
        {
            this.clearRangesAndApplyExternalCatalogFilter(_catExternalCatalogSummaryQBDS);
            
            for (int i = 1; i <= externalCatalogToShowSize; i++)
            {
                _catExternalCatalogSummaryQBDS.addRange(fieldnum(CatExternalCatalogSummary, Name)).value(queryValue(conPeek(externalCatalogToShow, i)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchCategory</Name>
				<Source><![CDATA[
    protected container searchCategory(container _searchString)
    {
        container   externalCatalogToShow;

        catExternalCatalogQueryRangeSet = new Set(Types::String);

        int searchStringSize = conLen(_searchString);
        for (int i = 1; i <= searchStringSize; i++)
        {
            str searchText = strLTrim(conPeek(_searchString, i));
            if (searchText == '')
            {
                continue;
            }
            if (externalCataegoriesToExternalCatalogMap.exists(searchText))
            {
                externalCatalogToShow += this.getUniqueRangesValue(externalCataegoriesToExternalCatalogMap.lookup(searchText));
            }
            else
            {
                externalCatalogToShow += this.matchSearchTxt(searchText);
            }
        }
        return externalCatalogToShow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchSearchTxt</Name>
				<Source><![CDATA[
    private container matchSearchTxt(str _searchText)
    {
        container   matchedExternalCatalog;
        MapEnumerator mapEnumerator = externalCataegoriesToExternalCatalogMap.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            if (match(_searchText, mapEnumerator.currentKey()))
            {
                matchedExternalCatalog += this.getUniqueRangesValue(mapEnumerator.currentValue());
            }
        }
        return matchedExternalCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueRangesValue</Name>
				<Source><![CDATA[
    private container getUniqueRangesValue(container _values)
    {
        CatExternalCatalogName    catExternalCatalogName;
        container   uniqueExternalCatalogRecIdValues = conNull();

        int valuesSize = conLen(_values);
        for (int i = 1; i <= valuesSize; i++)
        {
            catExternalCatalogName = conPeek(_values, i);
            if (!catExternalCatalogQueryRangeSet.in(catExternalCatalogName))
            {
                catExternalCatalogQueryRangeSet.add(catExternalCatalogName);
                uniqueExternalCatalogRecIdValues += catExternalCatalogName;
            }
        }
        return uniqueExternalCatalogRecIdValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyNotExistingRangeToShowEmptyDatasource</Name>
				<Source><![CDATA[
    private void applyNotExistingRangeToShowEmptyDatasource(QueryBuildDataSource _catExternalCatalogSummaryQBDS)
    {
        _catExternalCatalogSummaryQBDS.clearRanges();
        _catExternalCatalogSummaryQBDS.addRange(fieldnum(CatExternalCatalogSummary, VendorDataAreaId)).value(SysQuery::valueEmptyString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>