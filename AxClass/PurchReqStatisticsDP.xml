<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqStatisticsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqStatisticsDP</c> class is the report data provider class for purchase requisition statistics SSRS reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(PurchReqStatistics)),
    SRSReportParameterAttribute(classstr(PurchReqStatisticsContract))
]

class PurchReqStatisticsDP extends SRSReportDataProviderBase
{
    PurchReqStatisticsTmp    tmpPurchReqStatistics, tmpPurchReqStatisticsNew;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPurchReqStatisticsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>PurchReqStatisticsTmp</c> temporary table with the data.
    /// </summary>
    /// <returns>
    ///    The <c>PurchReqStatisticsTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(PurchReqStatisticsTmp))
    ]
    public PurchReqStatisticsTmp getPurchReqStatisticsTmp()
    {
        select * from tmpPurchReqStatistics;
        return tmpPurchReqStatistics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the report parameters.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// Note that this is a framework class. Customizing this class may cause problems with future upgrades
    /// to the software.
    /// </remarks>
    public void processReport()
    {
        PurchReqTableHistory            purchReqTableHistory;
        PurchReqLineHistory             purchReqLineHistory;
        PurchReqLine                    purchReqLine;
        PurchReqId                      reqId;
        AmountMST                       reqAmount;
        utcdatetime                     fromDate;
        utcdatetime                     toDate;
        InventDim                       dim;
        Query                           query;
        QueryRun                        queryRun;
        QueryBuildDataSource            qbdsPurchReqLineHistory;
        QueryBuildDataSource            qbdsPurchReqTableHistory;
        PurchReqShowRequisitionsFilter  purchReqShowRequisitionsFilter;
        PurchReqRequisitionStatus       status;
        PurchReqShowRequisitions        showRequisitions;
        NoYes                           all = NoYes::No;
        PurchReqTableHistoryTotals      purchReqTableHistoryTotals;
        PurchReqStatisticsContract      contract;

        query               =   this.parmQuery();
        contract            =   this.parmDataContract() as PurchReqStatisticsContract;

        fromDate            =   DateTimeUtil::newDateTime(contract.parmFromDate(),0);
        toDate              =   DateTimeUtil::newDateTime(contract.parmToDate(), 86400);
        status              =   contract.parmStatus();
        showRequisitions    =   contract.parmShowRequisitions();
        all                 =   contract.parmAll();

        qbdsPurchReqLineHistory     = query.dataSourceTable(tableNum(PurchReqLineHistory));
        qbdsPurchReqTableHistory    = query.dataSourceTable(tableNum(PurchReqTableHistory));

        if (fromDate && toDate)
        {
            SysQuery::findOrCreateRange(qbdsPurchReqTableHistory, fieldNum(PurchReqTableHistory,SubmittedDateTime)).value(queryRange(fromDate,toDate));
        }

        SysQuery::findOrCreateRange(qbdsPurchReqLineHistory,fieldNum(PurchReqLineHistory, Status)).value(SysQuery::value(status));

        if (all != NoYes::Yes)
        {
            purchReqShowRequisitionsFilter = PurchReqShowRequisitionsFilter::newPurchReqLineHistory(qbdsPurchReqLineHistory, fieldNum(PurchReqLineHistory, Requisitioner));
            purchReqShowRequisitionsFilter.applyFilter(showRequisitions);
        }

        queryRun  =new QueryRun(query);

        while (queryRun.next())
        {
            purchReqLineHistory         = queryRun.get(tableNum(PurchReqLineHistory));
            purchReqTableHistory        = queryRun.get(tableNum(PurchReqTableHistory));
            purchReqTableHistoryTotals  = queryRun.get(tableNum(PurchReqTableHistoryTotals));

                this.updateReqAmount(purchReqTableHistory.PurchReqId, reqId, reqAmount);
                tmpPurchReqStatistics.clear();
                reqId   =   purchReqTableHistory.PurchReqId;

                tmpPurchReqStatistics.VendAccount       =   purchReqLineHistory.VendAccount;
                tmpPurchReqStatistics.Status            =   purchReqTableHistory.Status;
                tmpPurchReqStatistics.ReqId             =   purchReqTableHistory.PurchReqId;
                tmpPurchReqStatistics.ReqName           =   purchReqTableHistory.PurchReqName;
                tmpPurchReqStatistics.Employee          =   HcmWorker::worker2Name(purchReqTableHistory.Originator);
                tmpPurchReqStatistics.Qty               =   purchReqLineHistory.PurchQty;
                tmpPurchReqStatistics.NetAmount         =   purchReqLineHistory.LineAmount;
                tmpPurchReqStatistics.Currency          =   purchReqLineHistory.CurrencyCode;
                tmpPurchReqStatistics.ItemNumber        =   purchReqLineHistory.ItemId;
                tmpPurchReqStatistics.ItemName          =   purchReqLineHistory.itemName();
                tmpPurchReqStatistics.ItemIdNonCatalog  =   purchReqLine.ItemIdNonCatalog;
                tmpPurchReqStatistics.PurchPrice        =   purchReqLineHistory.PurchPrice;
                tmpPurchReqStatistics.CompanyCurrency   =   purchReqTableHistoryTotals.CurrencyCode;
                dim                                     =   InventDim::find(purchReqLineHistory.InventDimId);
                tmpPurchReqStatistics.InventDimFieldsMap::initProductDimensionsFrom(dim);
                tmpPurchReqStatistics.CompanyName       =   CompanyInfo::find().Name;
                tmpPurchReqStatistics.CompanyAddress    =   CompanyInfo::find().postalAddress().Address;

                reqAmount   = purchReqTableHistoryTotals.SalesOrderBalance;
                tmpPurchReqStatistics.insert();
        }
        this.updateReqAmount(purchReqTableHistory.PurchReqId, reqId, reqAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>Req</c> amount in <c>PurchReqStatisticsTmp</c> temporary table.
    /// </summary>
    /// <param name="oldReqId">
    /// The purchase requisition ID of the previous record.
    /// </param>
    /// <param name="reqId">
    /// The purchase requisition ID of the current record.
    /// </param>
    /// <param name="reqAmount">
    /// The purchase requisition amount.
    /// </param>
    private void updateReqAmount(PurchReqId oldReqId,PurchReqId reqId,AmountMST reqAmount)
    {
        if (oldReqId   != reqId && reqId != strMin())
        {
            ttsbegin;
            tmpPurchReqStatisticsNew.setTmpData(tmpPurchReqStatistics);
            tmpPurchReqStatisticsNew.selectForUpdate(true);
            select forupdate tmpPurchReqStatisticsNew where  tmpPurchReqStatisticsNew.ReqId  ==  reqId;
            tmpPurchReqStatisticsNew.ReqAmount  =   reqAmount;
            tmpPurchReqStatisticsNew.update();
            ttscommit;
            reqAmount = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLatest</Name>
				<Source><![CDATA[
        public static boolean isLatest(RecId _purchReqTable, PurchReqRequisitionStatus _status,utcdatetime _toDateTime)
    {
        PurchReqTableVersion        purchReqTableVersion;
        PurchReqTableHistory        purchReqTableHistory;

        select ValidTimeState(_toDateTime) PurchReqTable, VersionDateTime from purchReqTableVersion
        where purchReqTableVersion.PurchReqTable == _purchReqTable
            join status from purchReqTableHistory
                where purchReqTableHistory.PurchReqTable == purchReqTableVersion.PurchReqTable;

        return (purchReqTableHistory.Status == _status);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
