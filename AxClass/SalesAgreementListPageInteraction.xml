<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAgreementListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class    SalesAgreementListPageInteraction
       extends  AgreementListPageInteraction

{
    SalesAgreementHeader salesAgreementHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current super-type record of the data source of the sales agreement or purchase
    /// agreement list page form
    /// </summary>
    /// <returns>
    /// The super-type record of the data source of the current agreement list page form.
    /// </returns>
    protected AgreementHeader currentAgreementHeader()
    {
        return this.listPage().activeRecord(querydatasourcestr(SalesAgreementListPage, SalesAgreementHeader)) as AgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSalesAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current record of the <c>SalesAgreementHeader</c> table, which is the data source of
    ///    the <c>SalesAgreementHeader</c> form.
    /// </summary>
    /// <returns>
    ///    The current record of the <c>SalesAgreementHeader</c> table.
    /// </returns>
    private SalesAgreementHeader currentSalesAgreementHeader()
    {
        return this.listPage().activeRecord(querydatasourcestr(SalesAgreementListPage, SalesAgreementHeader)) as SalesAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateOfCurrentAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    In addition to the super-type action based on the state of the current <c>SalesAgreementHeader</c>
    ///    record, this method populates the internal flag that indicates whether releases can be done from
    ///    the current sales agreement.
    /// </summary>
    /// <remarks>
    ///    This is a specialization of the base class <c>getStateOfCurrentAgreement</c> method of the base
    ///    class for sales agreements.
    /// </remarks>
    protected void getStateOfCurrentAgreement()
    {
        super();
        canReleaseFromCurrentAgreement = (salesAgreementHeader.AgreementState != AgreementState::OnHold);
            
        if(canReleaseFromCurrentAgreement && SalesAgreementListPageInteractionNewReleaseFlight::instance().isEnabled())
        {
            canReleaseFromCurrentAgreement = canReleaseFromCurrentAgreement && (salesAgreementHeader.AgreementState != AgreementState::Closed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        QueryBuildDataSource qbds,qbdsAgreementHeaderDefault;

        super(_query);

        qbds = _query.dataSourceTable(tablenum(SalesAgreementHeader));
        qbds.addSortField(fieldnum(SalesAgreementHeader, SalesNumberSequence));

        QueryBuildRange qbr = qbds.addRange(fieldnum(SalesAgreementHeader,IsDeleted));
        qbr.value(queryValue(NoYes::No));
        // <GEERU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
        // </GEERU>
            qbr.status(RangeStatus::Hidden);
        // <GEERU>
        }
        // </GEERU>

        qbr = qbds.addRange(fieldnum(SalesAgreementHeader, CustomerDataAreaId));
        qbr.value(queryValue(appl.company().dataArea(tablenum(CustTable))));
        qbr.status(RangeStatus::Hidden);

        Common callerRecord = this.listPage().listPageArgs().externalRecord();
        // If the caller is Projects list page or Projects details form
        if (callerRecord && callerRecord.TableId == tableNum(ProjTable))
        {
            ProjTable projTable = callerRecord;
            qbdsAgreementHeaderDefault = _query.dataSourceTable(tablenum(AgreementHeaderDefault));
            qbdsAgreementHeaderDefault.addRange(fieldNum(agreementHeaderDefault,Project)).value(queryValue(projTable.ProjId));
            qbdsAgreementHeaderDefault.joinMode(JoinMode::InnerJoin);
        }
        else if (callerRecord && callerRecord.TableId == tableNum(ProjInvoiceTable))
        {
            ProjInvoiceTable projInvoiceTable = callerRecord;
            qbdsAgreementHeaderDefault = _query.dataSourceTable(tablenum(AgreementHeaderDefault));
            qbds = qbdsAgreementHeaderDefault.addDataSource(tableNum(ProjTable));
            qbds.addLink(fieldNum(agreementHeaderDefault,Project), fieldNum(ProjTable, ProjId));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(ProjTable,ProjInvoiceProjId)).value(queryValue(projInvoiceTable.ProjInvoiceProjId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>AgreementListPageInteraction.selectionChanged</c> method and enables the action pane
    /// buttons.
    /// </summary>
    public void selectionChanged()
    {
        salesAgreementHeader = this.currentSalesAgreementHeader();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the action buttons on the Sales agreement action tab of the
    ///    <c>SalesAgreementListPage</c> list page.
    /// </summary>
    private void setButtonAgreement()
    {
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,BtnNewReleaseOrder),
                                                 canReleaseFromCurrentAgreement);
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,BtnConfirmation),
                                                 (salesAgreementHeader.RecId));
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,BtnProformaConfirmation),
                                                 (salesAgreementHeader.RecId));
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,BtnConfirmationHistory),
                                                 confirmationExistsForCurrentAgreement);
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,BtnReleaseOrderMatch),
                                                 areReleasesExistForCurrentAgreement);
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,BtnInvoiceHistory),
                                                 areInvoicesExistForCurrentAgreement);
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,ViewIntercompanyAgreement),
                                                 canViewRelatedAgreement);
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,PurchAgreementGenerationTask),
                                                 canCreateIntercompanyAgreement);

        FormDataSource agreementHeaderDS = FormDataUtil::getFormDataSource(salesAgreementHeader);
        if (agreementHeaderDS)
        {
            agreementHeaderDS.allowDelete(canDeleteCurrentAgreement);
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesAgreementListPage,PurchAgreementGenerationTask_RU),
                                                     canCreateIntracompanyAgreement_RU);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesAgreementListPage,ViewIntracompanyAgreement_RU),
                                                     canViewRelatedAgreement_RU);

            this.listPage().actionPaneControlEnabled(formControlStr(SalesAgreementListPage,AgreementSettleSalesTable_RU),
                                                     canViewSettled_RU);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesAgreementListPage,AgreementSettleCustFreeInvoice_RU),
                                                     canViewSettled_RU);

            this.listPage().actionPaneControlEnabled(formControlStr(SalesAgreementListPage,AgreementNotSettleSalesTable_RU),
                                                     canViewNotSettled_RU);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesAgreementListPage,AgreementNotSettleCustFreeInvoice_RU),
                                                     canViewNotSettled_RU);
            if (CFMParameters::isPaymentRequestsEnabled())
            {
                agreementHeaderDS.allowDelete(canDeleteCurrentAgreement && !CFMPaymentRequestTable::existByAgreementId(salesAgreementHeader.SalesNumberSequence));
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables action buttons on the controlled list page.
    /// </summary>
    protected void setButtonEnabled()
    {
        super();
        this.setButtonAgreement();
        this.setButtonGeneral();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage, TaxDocumentLauncher), true);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneral</Name>
				<Source><![CDATA[
    private void setButtonGeneral()
    {
        this.listPage().actionPaneControlEnabled(formcontrolstr(SalesAgreementListPage,BtnPrintMngmt),
                                                 true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility property on the buttons in the action pane.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when they must hide a button in the action pane at runtime.
    /// </remarks>
    protected void setButtonVisibility()
    {
        super();
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,GroupIntracompany_RU),false);
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,AgreementCustTrans_RU),false);
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,AgreementSettleSalesTable_RU),false);
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,AgreementSettleCustFreeInvoice_RU),false);
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,AgreementNotSettleSalesTable_RU),false);
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,AgreementNotSettleCustFreeInvoice_RU),false);
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,GroupSetup_RU),false);
            this.listPage().actionPaneControlVisible(formControlStr(SalesAgreementListPage,GeneralCustomer_RU),false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility property on the grid fields.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when it must hide a field in the grid at runtime.
    /// </remarks>
    protected void setGridFieldVisibility()
    {
        super();
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.listPage().listPageFieldVisible(formControlStr(SalesAgreementListPage, SalesAgreementHeaderExt_RU_AgreementDate), false);
            this.listPage().listPageFieldVisible(formControlStr(SalesAgreementListPage, SalesAgreementHeaderExt_RU_AgreementAmount), false);
            this.listPage().listPageFieldVisible(formControlStr(SalesAgreementListPage, SalesAgreementHeaderDefault_CustomerInvoiceAccount), false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>