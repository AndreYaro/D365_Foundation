<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFreeInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxFreeInvoice extends TaxCalculation
{
    TaxCalculationDateType taxCalculationDateType;
    CustInvoiceCalcTax_Table custInvoiceCalcTax;
    RefRecId lineRecIdBeingCalculated;

    NoYes isMarkupBeingCalculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction supports adjusting the calculated base amount when tax is
    /// included in item price and the users adjusts the tax amount.
    /// </summary>
    /// <returns>
    /// true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates line specific tax codes for the miscellaneous charges associated with the transaction
    ///    header and transaction lines.
    /// </summary>
    private void calcMarkup()
    {
        TaxAmount taxAmount;
        Amount baseAmount;
        Percent cashDisc = CashDisc::find(custInvoiceCalcTax.parmCustInvoiceTable().CashDiscCode).Percent;
        MarkupTrans markupTrans;
        // <GEERU><GEEU>
        Amount lineAmountExclTax;
        boolean countryRegion_EE_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL, #isoRU]);
        // </GEEU></GEERU>
        ;
        isMarkupBeingCalculated= NoYes::Yes;

        markupTrans= custInvoiceCalcTax.nextMarkupLine();
        this.setReasonTableRefRecIdBeingCalculated(custInvoiceCalcTax.parmCustInvoiceTable().CorrectionReasonCode);

        while (markupTrans)
        {
            if (custInvoiceCalcTax.markupTaxGroup() && custInvoiceCalcTax.markupTaxItemGroup())
            {
                markupTransTaxableDocumentLines++;
            }
            this.configureTaxForMarkupLine(markupTrans, custInvoiceCalcTax.transTransId());

            lineRecIdBeingCalculated = markupTrans.RecId;

            baseAmount = -custInvoiceCalcTax.markupAmount();

            if (this.taxParameters().TaxLessCashDisc)
            {
                baseAmount -= baseAmount * cashDisc / 100;
            }

            // Get the line amount excluding tax
            if (custInvoiceCalcTax.inclTax())
            {
                lineAmountExclTax = this.amountExclTax(baseAmount, false, false, 0, '', '', markupTrans.RecId, markupTrans.TableId);
            }
            else
            {
                lineAmountExclTax = baseAmount;
            }

            this.initializeTaxForLine(
                                        custInvoiceCalcTax.inclTax(),
                                        lineAmountExclTax,
                                        baseAmount,
                                        custInvoiceCalcTax.markupDimension(),
                                        custInvoiceCalcTax.operationAccountMarkup(),
                                        custInvoiceCalcTax.operationPostingMarkup()
                                        // <GEERU><GEEU>
                                        ,0,
                                        '',
                                        0,
                                        '',
                                        0,
                                        custInvoiceCalcTax.parmCustInvoiceTable().VatDueDate_W
                                        // </GEEU></GEERU>
                                        );

            taxAmount = this.calculateLineSpecificTaxCodes();

            markupTrans= custInvoiceCalcTax.nextMarkupLine();
        }

        isMarkupBeingCalculated= NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUsingTaxIntegration</Name>
				<Source><![CDATA[
    private TaxAmount calcUsingTaxIntegration()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;
        ReqReaderWriterLock lock = ReqReaderWriterLock::construct();
        TaxAmountCur taxAmount;
        str lockName = this.lockName();

        try
        {
            this.enterTaxableDocumentLock(lock, lockName);

            CustInvoiceTable custInvoiceTable = this.custInvoiceCalcTax.parmCustInvoiceTable();

            this.setCashDiscount(custInvoiceCalcTax.getCashDiscountPercent(), 0);
            boolean isTaxSpecificExchRateEnabledByBusinessProcess = TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled();
            if (!isTaxSpecificExchRateEnabledByBusinessProcess)
            {
                SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(
                    custInvoiceTable,
                    custInvoiceTable.CurrencyCode,
                    TransactionType::Sales,
                    custInvoiceTable.VatDueDate_W);
            }

            TaxIntegrationDocumentObject document = TaxIntegrationDocumentObject::constructWithRecord(custInvoiceTable);

            this.setFieldsForLegacyTax();
            this.setFieldsForTaxIntegrationDocumentObject(document);

            TaxIntegrationFacade::calculate(document);

            amountInclTaxMap = document.getAmountIncludingTax();
            amountExclTaxMap = document.getAmountExcludingTax();

            if (isTaxSpecificExchRateEnabledByBusinessProcess)
            {
                VatDueDate_W vatDueDate = TaxSpecificExchangeRate::getDateOfVATRegister(custInvoiceTable.TableId, custInvoiceTable.RecId);

                if (!vatDueDate)
                {
                    vatDueDate = custInvoiceTable.VatDueDate_W;
                }

                if (!vatDueDate)
                {
                    vatDueDate = this.parmTaxDate();
                }

                TaxSpecificExchangeRateHelper taxSpecificExchangeRateHelper = new TaxSpecificExchangeRateHelper(
                    custInvoiceTable.TableId,
                    custInvoiceTable.RecId,
                    TransactionType::Sales,
                    this.getTransactionalCurrency(),
                    vatDueDate);

                taxSpecificExchangeRateHelper.maintainAccountingCurrencyTaxSpecificExchangeRate();
                taxSpecificExchangeRateHelper.maintainReportingCurrencyTaxSpecificExchangeRate();

                TmpTaxWorkTrans localTaxWorkTrans;
                localTaxWorkTrans.setTmpData(taxWorkTrans);

                while select CurrencyCode from localTaxWorkTrans
                    group by localTaxWorkTrans.CurrencyCode
                {
                    taxSpecificExchangeRateHelper.maintainTaxSpecificExchangeRate(localTaxWorkTrans.CurrencyCode);
                }
            }

            taxAmount = this.finalizeCalculationForTaxIntegration(true);
        }
        catch (errorEx)
        {
            throw Exception::Error;
        }
        finally
        {
            this.exitTaxableDocumentLock(lock, lockName);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForLegacyTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for legacy tax.
    /// </summary>
    /// <remarks>
    /// This method is called by calcUsingTaxIntegration().
    /// </remarks>
    protected void setFieldsForLegacyTax()
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            this.parmVatRegData_W(this.custInvoiceCalcTax.vatRegData_W());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for tax integration document object.
    /// </summary>
    /// <param name = "_document">The tax integration document object.</param>
    protected void setFieldsForTaxIntegrationDocumentObject(TaxIntegrationDocumentObject _document)
    {
        _document.setTransactionDate(this.taxDate);
        // This deliveryDateMarkup() is for header.
        _document.setDeliveryDate(this.custInvoiceCalcTax.deliveryDate());
        _document.setDocumentDate(this.custInvoiceCalcTax.documentDate());
        _document.setInvoiceDate(this.custInvoiceCalcTax.invoiceDate());

        _document.setTransactionCurrencyCode(this.custInvoiceCalcTax.currencyCode());

        _document.setCompany(this.getCompany());
        _document.setHeadingTableId(this.headingTableId());
        _document.setHeadingRecId(this.headingRecId());

        _document.setSign(-1);

        if (this.custInvoiceCalcTax.isProjIntercompany())
        {
            _document.setSource(TaxModuleType::Project);
        }
        else
        {
            _document.setSource(TaxModuleType::FreeTxtInvoice);
        }

        _document.setBusinessProcess(this.taxIntegrationBusinessProcess());

        _document.setPrepaid(this.isPrePayment());

        _document.setEUROTriangulation(this.getTriangulation());

        _document.setLegacyTax(this);
        _document.setShouldSkipDocumentCharge(skipTableMarkup);
        _document.setShouldSkipLineCharge(skipLineMarkup);

        _document.setCashDiscountPercent(cashDiscPercent);
        _document.setCashDiscountAmount(cashDiscAmount);

        _document.setAccountingCurrencyFixedExchangeRate(this.parmExchRate());
        _document.setReportingCurrencyFixedExchangeRate(this.parmReportingCurrencyExchRate());

    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Steps through purchase order lines and markup lines to calculate tax for a purchase order.
    /// </summary>
    /// <returns>
    ///    The tax amount excluding Use tax.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmount taxAmount;
        TaxAmountCur baseAmount;
        CustInvoiceLine custInvoiceLine;
        // <GEEU>
        CustInvoiceTable custInvoiceTable;
        // </GEEU>
        // <GIN>
        boolean taxincl;
        boolean success = true;
        // </GIN>

        // <GEERU><GEEU>
        AmountCur baseAmountInclTax;
        #isoCountryRegionCodes
        // </GEEU></GEERU>

        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        // <GEEU>
        boolean countryRegion_EE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]);
        // </GEEU>

        if (!headingRecId)
        {
            return 0;
        }

        custInvoiceTable = this.custInvoiceCalcTax.parmCustInvoiceTable();

        if (custInvoiceTable.isTaxIntegrationEnabled())
        {
            taxAmount = this.calcUsingTaxIntegration();
        }
        else
        {
            if (this.skipTaxCalculations())
            {
                return 0;
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                return 0;
            }

            Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;
            Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
            System.Diagnostics.Stopwatch stopWatch;
            guid identifier;
            ReqReaderWriterLock lock = ReqReaderWriterLock::construct();
            str lockName = this.lockName();

            try
            {
                stopWatch = new System.Diagnostics.Stopwatch();
                identifier = newGuid();

                if (TaxCalculationInstrumentationToggle::instance().isEnabled())
                {
                    taxEventSourceLog.CalculateTaxStart(identifier, TaxUncommitted::callStackInfo());
                }
                else
                {
                    taxEventSourceLog.CalculateTaxStart(identifier);
                }

                stopWatch.Start();
                this.enterTaxableDocumentLock(lock, lockName);

                // <GEEU>
                custInvoiceTable = custInvoiceCalcTax.parmCustInvoiceTable();
                SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(custInvoiceTable, custInvoiceTable.CurrencyCode, TransactionType::Sales, custInvoiceTable.VatDueDate_W);
                // </GEEU>

                //<GIN>
                if (isIndiaCountryRegionEnabled)
                {
                    taxincl = CustTable::find(custInvoiceTable.InvoiceAccount).InclTax;
                }
                //</GIN>

                this.initializeCalculation();

                taxIncludedInItemPrice = custInvoiceCalcTax.inclTax();

                if (!skipTableMarkup)
                {
                    custInvoiceCalcTax.initCursorMarkupHeader(custInvoiceCalcTax.tableId(),
                                                                    custInvoiceCalcTax.recID());
                    this.calcMarkup();
                }

                custInvoiceCalcTax.initCursor();

                custInvoiceLine = custInvoiceCalcTax.nextLine() as CustInvoiceLine;

                while (custInvoiceLine)
                {
                    //this needs to be done outside of the tax group check because there are errors
                    //that could be thrown from inside here - even if 1 of the tax groups
                    //isn't supplied
                    this.configureTaxForFreeTextInvoiceLine(custInvoiceLine);

                    if (custInvoiceCalcTax.transTaxGroup() && custInvoiceCalcTax.transTaxItemGroup())
                    {
                        // <GBR>
                        if (BrazilParameters::isEnabled())
                        {
                            useAndConsumption_BR = custInvoiceCalcTax.useAndConsumption_BR();
                        }
                        // </GBR>

                        baseAmount = -custInvoiceCalcTax.baseAmount(!custInvoiceCalcTax.inclTax());

                        baseAmountInclTax = custInvoiceCalcTax.inclTax() ?
                                                -custInvoiceCalcTax.baseAmountInclTax_W() :
                                                baseAmount;

                        this.setCashDiscount(custInvoiceCalcTax.getCashDiscountPercent(), 0);

                        // <GEERU><GEEU>
                        if (countryRegion_RU || countryRegion_EE)
                        {
                            baseAmount = this.initializeTaxForLine(custInvoiceCalcTax.inclTax(),
                                                    baseAmount,
                                                    baseAmountInclTax,
                                                    custInvoiceLine.DefaultDimension,
                                                    custInvoiceCalcTax.operationAccount(),
                                                    custInvoiceCalcTax.operationPosting(),
                                                    custInvoiceCalcTax.transPcsPrice(),
                                                    '',
                                                    custInvoiceCalcTax.transQty() * -1,
                                                    '',
                                                    0,
                                                    custInvoiceCalcTax.parmCustInvoiceTable().VatDueDate_W
                                                    );
                        }
                        // </GEEU></GEERU>
                        // <GIN>
                        else if (isIndiaCountryRegionEnabled)
                        {
                            baseAmount = this.initializeTaxForLine(taxincl,
                                                    baseAmount,
                                                    baseAmount,
                                                    custInvoiceLine.DefaultDimension,
                                                    custInvoiceCalcTax.operationAccount(),
                                                    custInvoiceCalcTax.operationPosting(),
                                                    custInvoiceCalcTax.transPcsPrice(),
                                                    '',
                                                    custInvoiceCalcTax.transQty() * -1);
                        }
                        else
                        {
                            // </GIN>
                            baseAmount = this.initializeTaxForLine(custInvoiceCalcTax.inclTax(),
                                                    baseAmount,
                                                    baseAmountInclTax,
                                                    custInvoiceLine.DefaultDimension,
                                                    custInvoiceCalcTax.operationAccount(),
                                                    custInvoiceCalcTax.operationPosting(),
                                                    custInvoiceCalcTax.transPcsPrice(),
                                                    '',
                                                    custInvoiceCalcTax.transQty() * -1);

                            // <GIN>
                        }
                        // </GIN>

                        taxAmount = this.calculateLineSpecificTaxCodes();

                        // <GIN>
                        if (isTaxParametersEnabled)
                        {
                            taxAmount = this.finalizeCalculation();
                        }
                        // </GIN>
                        taxableDocumentLines++;
                    }

                    if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                    {
                        custInvoiceCalcTax.initCursorMarkup(custInvoiceLine.TableId, custInvoiceLine.RecId);
                        this.calcMarkup();
                    }

                    custInvoiceLine = custInvoiceCalcTax.nextLine() as CustInvoiceLine;
                }

                taxAmount = this.calculateTotalTaxCodes();

                taxAmount = this.finalizeCalculation(
                    // <GEEU>
                    true
                    // </GEEU>
                    );
            }
            catch (errorEx) // errorEx is the same as Exception::Error
            {
                success = false;
                taxEventSourceLog.TaxProcessError(guid2Str(newGuid()),
                                                  errorEx.Message,
                                                  errorEx.StackTrace,
                                                  methodStr(TaxFreeInvoice, calculateTax));
                throw Exception::Error;
            }
            finally
            {
                this.exitTaxableDocumentLock(lock, lockName);

                stopWatch.Stop();
                select count(RecId) from taxWorkTrans;
                taxEventSourceLog.CalculateTaxStop(identifier,
                                                   SysCountryRegionCode::countryInfo(),
                                                   tableStr(custInvoiceTable),
                                                   TaxTelemetryConstants::salesTax,
                                                   stopWatch.ElapsedMilliseconds,
                                                   taxableDocumentLines,
                                                   markupTransTaxableDocumentLines,
                                                   taxWorkTrans.RecId,
                                                   custInvoiceCalcTax.inclTax(),
                                                   headingTableId,
                                                   tableId2Name(headingTableId),
                                                   headingRecId,
                                                   success);
            }
        }

        this.checkResultCompatibility();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResultCompatibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks tax calculation result's compatibility.
    /// </summary>
    private void checkResultCompatibility()
    {
        // The COD payment method is incompatible to the conditional sales tax.
        CustInvoiceTable custInvoiceTable = this.custInvoiceCalcTax.parmCustInvoiceTable();
        PaymTerm custPaymTerm = PaymTerm::find(custInvoiceTable.Payment);
        if (custPaymTerm.PaymMethod == NetCurrent::COD)
        {
            TaxTable taxTable;
            select firstonly RecId from taxWorkTrans
                exists join taxTable
                    where taxWorkTrans.TaxCode == taxTable.TaxCode
                        && taxTable.PaymentTaxCode != null;

            // The transaction uses COD payment method and conditional sales tax, send warning about the payment term.
            if (taxWorkTrans.RecId)
            {
                warning(strFmt("@TaxCoreTax:ConditionalTaxWithCOD", custPaymTerm.PaymTermId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction line count.
    /// </summary>
    /// <returns>The transaction line count.</returns>
    protected int getTransactionLineCount()
    {
        int transactionLineCount = 0;

        custInvoiceCalcTax.initCursor();
        while (custInvoiceCalcTax.nextLine())
        {
            transactionLineCount++;
        }

        custInvoiceCalcTax.initCursor();
        return transactionLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    private DiscPct cashDiscPercent(CustInvoiceLine _custInvoiceLine)
    {
        return CustInvoiceTable::findRecId(_custInvoiceLine.ParentRecId).CashDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForFreeTextInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures tax to calculate a purchase order line.
    /// </summary>
    /// <param name="custInvoiceLine">
    ///    The transaction line for free text invoices.
    /// </param>
    private void configureTaxForFreeTextInvoiceLine(CustInvoiceLine custInvoiceLine)
    {
        TransDate taxCalculationDate;

        lineRecIdBeingCalculated = custInvoiceLine.RecId;
        this.setReasonTableRefRecIdBeingCalculated(
            custInvoiceLine.ReasonRefRecId,
            custInvoiceCalcTax.parmCustInvoiceTable().CorrectionReasonCode);

        custInvoiceCalcTax.initCursorMarkupHeader(custInvoiceCalcTax.tableId(),
                                                  custInvoiceCalcTax.recID());

        if (custInvoiceLine)
        {
            taxDate = custInvoiceCalcTax.invoiceDate();

            switch (taxCalculationDateType)
            {
                case TaxCalculationDateType::DeliveryDate:
                    taxCalculationDate = custInvoiceCalcTax.deliveryDate();
                    break;

                case TaxCalculationDateType::DocumentDate:
                    taxCalculationDate = custInvoiceCalcTax.documentDate();
                    break;

                case TaxCalculationDateType::InvoiceDate:
                    taxCalculationDate = custInvoiceCalcTax.invoiceDate();
                    break;
            }

            this.insertIntersection(custInvoiceCalcTax.transTaxGroup(),
                                    custInvoiceCalcTax.transTaxItemGroup(),
                                    custInvoiceCalcTax.transTransId(),
                                    custInvoiceLine.Description,
                                    taxCalculationDate);

            if (! this.checkTaxCodesByLine())
            {
                throw error("@SYS22772");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures tax to calculate a miscellaneous charge line.
    /// </summary>
    /// <param name="_markupTrans">
    ///    The miscellaneous charge line to calculate.
    /// </param>
    /// <param name="_inventTransId">
    ///    The inventory ID related to the miscellaneous charge line.
    /// </param>
    protected void configureTaxForMarkupLine(MarkupTrans _markupTrans, InventTransId _inventTransId)
    {
        TransDate taxCalculationDate;

        taxDate = custInvoiceCalcTax.invoiceDate();

        if (_markupTrans)
        {
            isMarkupBeingCalculated= NoYes::Yes;

            switch (taxCalculationDateType)
            {
                case TaxCalculationDateType::DeliveryDate:
                    taxCalculationDate = custInvoiceCalcTax.deliveryDateMarkup();
                    break;

                case TaxCalculationDateType::DocumentDate:
                    taxCalculationDate = custInvoiceCalcTax.documentDate();
                    break;

                case TaxCalculationDateType::InvoiceDate:
                    taxCalculationDate = custInvoiceCalcTax.invoiceDate();
                    break;
            }

            lineRecIdBeingCalculated = _markupTrans.RecId;

            this.insertIntersection(custInvoiceCalcTax.markupTaxGroup(),
                                    custInvoiceCalcTax.markupTaxItemGroup(),
                                    _inventTransId,
                                    _markupTrans.Txt,
                                    taxCalculationDate);

            if (! this.checkTaxCodesByLine())
            {
                throw error("@SYS22772");
            }
        }
        else
        {
            isMarkupBeingCalculated= NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance of the <c>TaxFreeInvoice</c> class.
    /// </summary>
    /// <param name="_initializationClass">
    ///    The purchase order specific class which contains the transaction lines and other information that
    ///    is required to calculate taxes.
    /// </param>
    public void init(Object _initializationClass)
    {
        custInvoiceCalcTax = _initializationClass as CustInvoiceCalcTax_Table;
        if (custInvoiceCalcTax == null)
        {
            throw error("@SYS95118");
        }

        taxCalculationDateType = this.taxParameters().TaxCalculationDateType;
        taxDate = custInvoiceCalcTax.invoiceDate();

        taxModuleType = TaxModuleType::FreeTxtInvoice;
        headingTableId = custInvoiceCalcTax.tableId();
        headingRecId = custInvoiceCalcTax.recID();
        taxIncludedInItemPrice = custInvoiceCalcTax.inclTax();
        this.setExchRates( custInvoiceCalcTax.currencyCode(),
                            custInvoiceCalcTax.exchRate(taxDate),
                            custInvoiceCalcTax.exchRateSecondary(taxDate),
                            Currency::noYes2UnknownNoYes(custInvoiceCalcTax.triangulation(taxDate)));

        if (SalesParameters::find().DateOfExchRate_W != DateOfExchRate_W::PostingDate
            && Ledger::isReportingCurrencyDefined())
        {
            this.setReportingCurrencyExchRate(
                custInvoiceCalcTax.reportingCurrencyExchRate(taxDate),
                custInvoiceCalcTax.reportingCurrencyExchRateSecondary(taxDate));
        }

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns ledger dimension account for given <c>TaxLedgerAccountGroup</c>
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///   Parameter to take direction from
    /// </param>
    /// <param name="_taxLedgerAccountGroup">
    ///   <c>TaxLedgerAccountGroup</c> record which is the source of ledger dimension
    /// </param>
    /// <returns>
    ///   Ledger dimension account for given <c>TaxLedgerAccountGroup</c>
    /// </returns>
    protected LedgerDimensionDefaultAccount ledgerDimension_RU(TmpTaxWorkTrans _tmpTaxWorkTrans, TaxLedgerAccountGroup _taxLedgerAccountGroup)
    {
        TaxType_W taxType = TaxTable::find(_tmpTaxWorkTrans.TaxCode).TaxType_W;

        if ((taxType == TaxType_W::VAT ||
             taxType == TaxType_W::VATReduced ||
             taxType == TaxType_W::VATZero) &&
             _tmpTaxWorkTrans.TaxDirection == TaxDirection::OutgoingTax &&
             (CustParameters::taxation_RU(taxDate) == CustTaxation_RU::OnPayment ||
              custInvoiceCalcTax.parmCustInvoiceTable().vatOnPayment_RU))
        {
            return _taxLedgerAccountGroup.TaxDeferredLedgerDimension_RU;
        }

        return super(_tmpTaxWorkTrans, _taxLedgerAccountGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns ledger dimension account for given <c>TaxLedgerAccountGroup</c>
    /// </summary>
    /// <param name="_taxLedgerAccountGroup">
    ///   <c>TaxLedgerAccountGroup</c> record which is the source of ledger dimension
    /// </param>
    /// <returns>
    ///   Ledger dimension account for given <c>TaxLedgerAccountGroup</c>
    /// </returns>
    protected LedgerDimensionDefaultAccount offsetLedgerDimension_RU(TaxLedgerAccountGroup _taxLedgerAccountGroup)
    {
        LedgerDimensionDefaultAccount defaultAccount;

        if (TaxParameters::find().TaxSpecPosting_RU == NoYes::Yes)
        {
            defaultAccount = _taxLedgerAccountGroup.TaxOutgoingOffsetLedgerDimension_RU;

            if (!defaultAccount)
            {
                throw error(strFmt("@GLS103651", _taxLedgerAccountGroup.TaxAccountGroup));
            }
        }
        else
        {
            defaultAccount = super(_taxLedgerAccountGroup);
        }

        return defaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLinesHaveTaxGroups</Name>
				<Source><![CDATA[
    protected boolean sourceLinesHaveTaxGroups()
    {
        return custInvoiceCalcTax.doTaxGroupExistsForDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>RecId</c> of the transaction line that is currently being calculated.
    /// </summary>
    /// <returns>
    ///    The <c>RecId</c> of the transaction line being calculated.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public RecId sourceRecId()
    {
        return lineRecIdBeingCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public RefTableId sourceTableId()
    {
        if (isMarkupBeingCalculated)
        {
            return tableNum(MarkupTrans);
        }
        else
        {
            return tableNum(CustInvoiceLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current transaction supports SubLedger distributions or SubLedger journal
    ///    lines.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    By default, the base implementation is that they do not support SubLedger distributions or
    ///    SubLedger journal lines. As the individual transaction supports the SubLedger, it will override
    ///    this and return true.
    /// </remarks>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeAmount_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns amount of reverse charge being posted.
    /// </summary>
    /// <returns>
    ///   Amount of tax reverse charge in transactional currency.
    /// </returns>
    public TaxAmountCur reverseChargeAmount_W()
    {
        TmpTaxWorkTrans localTaxWorkTrans;
        TaxAmountCur reverseChargeTaxAmount;

        if (ReverseChargeParameters_W::find().Enabled)
        {
            localTaxWorkTrans.setTmpData(taxWorkTrans);

            while select localTaxWorkTrans
                where localTaxWorkTrans.ReverseCharge_W == NoYes::Yes
            {
                reverseChargeTaxAmount -= CurrencyExchangeHelper::amount(localTaxWorkTrans.SourceBaseAmountCur * localTaxWorkTrans.showTaxValue() / 100, localTaxWorkTrans.CurrencyCode);
            }
        }

        return reverseChargeTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIntegrationBusinessProcess</Name>
				<Source><![CDATA[
    internal TaxIntegrationBusinessProcess taxIntegrationBusinessProcess()
    {
        TaxIntegrationBusinessProcess businessProcess;

        CustInvoiceTable custInvoiceTable = this.custInvoiceCalcTax.parmCustInvoiceTable();
        businessProcess = TaxIntegrationUtils::getBusinessProcessForCustInvoiceTable(custInvoiceTable);

        return businessProcess;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>