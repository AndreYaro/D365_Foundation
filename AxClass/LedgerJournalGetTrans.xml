<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalGetTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalGetTrans</c> class loads ledger transactions.
/// </summary>
final class LedgerJournalGetTrans extends RunBase
{
    NoYes                                   reverseSign;
    PeriodUnit                              freqCode;
    Freq                                    freqValue;
    LedgerGetVoucherMethod                  ledgerGetVoucherMethod;
    NoYes                                   includeAccruals;
    QueryRun                                queryRun;

    LedgerJournalId                         ledgerJournalId;
    LedgerJournalTable                      ledgerJournalTable;

    GeneralJournalEntryRecId                previousGeneralJournalEntry;
    Voucher                                 currentVoucher;
    Voucher                                 previousVoucher;

    // <GCN>
    Voucher_CN                              currentVoucher_CN;
    LedgerChineseVoucherEnabled_CN isChineseVoucherEnabled_CN;

    LedgerVoucherTypeId_CN voucherTypeId_CN;

    // keep this for compatibilty with saved user data from previous version.
    LedgerReversalMethod_CN revesalMethod;

    DialogField             dialogVoucherType_CN;
    // </GCN>

    DialogField                             dialogReverseSign;
    DialogField                             dialogFreqCode;
    DialogField                             dialogFreqValue;
    DialogField                             dialogGetVoucherMethod;
    DialogField                             dialogIncludeAccruals;

    // <GJP>
    boolean                                 isPositiveDRCRFailed;
    // </GJP>

    #ISOCountryRegionCodes

    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        ledgerJournalId,
        reverseSign,
        freqCode,
        freqValue,
        ledgerGetVoucherMethod,
        includeAccruals,
        voucherTypeId_CN
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>LedgerJournalTrans</c> records based on input parameters.
    /// </summary>
    /// <param name = "_generalJournalEntry">
    /// The <c>GeneralJournalEntry</c> record.
    /// </param>
    /// <param name = "_generalJournalAccountEntry">
    /// The <c>GeneralJournalAccountEntry</c> record.
    /// </param>
    /// <param name = "_generalJournalEntryW">
    /// The <c>GeneralJournalEntry_W</c> record.
    /// </param>
    /// <param name = "_voucherChanged">
    /// A boolean indicating if the voucher has changed.
    /// </param>
    /// <returns>
    /// A new <c>LedgerJournalTrans</c> record.
    /// </returns>
    protected LedgerJournalTrans createLedgerJournalTrans(
        GeneralJournalEntry _generalJournalEntry,
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        GeneralJournalEntry_W _generalJournalEntryW,
        boolean _voucherChanged)
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        TransDate                           transDate;
        TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;
        TaxTrans                            taxTrans;

        ledgerJournalTrans.initValue();

        if (ledgerJournalTable.JournalType  == LedgerJournalType::Daily                     ||
              ledgerJournalTable.JournalType  == LedgerJournalType::Payment                 ||
              ledgerJournalTable.JournalType  == LedgerJournalType::CustPayment             ||
              LedgerJournalName::isNegotiableInstrumentJournal(ledgerJournalTable.JournalType))
        {
            ledgerJournalTrans.Approved = NoYes::Yes;
            ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
        }

        ledgerJournalTrans.Invisible = NoYes::No;
        _generalJournalEntry.Ledger = Ledger::current();

        switch (ledgerGetVoucherMethod)
        {
            case LedgerGetVoucherMethod::Original :
                ledgerJournalTrans.Transferred = NoYes::Yes;
                break;

            default:
                ledgerJournalTrans.Transferred = NoYes::No;
                break;
        }

        if (freqValue)
        {
            transDate = this.newDate(_generalJournalEntry.AccountingDate);
        }
        else
        {
            transDate = _generalJournalEntry.AccountingDate;
        }

        // <GCN>
        if (isChineseVoucherEnabled_CN)
        {
            // use the voucher type in the generalJournalEntry
            if (voucherTypeId_CN == '')
            {
                ledgerJournalTrans.LedgerVoucherType_CN = _generalJournalEntryW.LedgerVoucherType_CN;
            }
            // use the voucher type specified in the dialog
            else
            {
                ledgerJournalTrans.LedgerVoucherType_CN = LedgerVoucherType_CN::findByNaturalKey(voucherTypeId_CN).RecId;
            }

            if (ledgerJournalTrans.LedgerVoucherType_CN == 0)
            {
                // Voucher type must be filled in
                checkFailed(strfmt("@SYS26332", "@GLS54929"));
                return null;
            }
        }
        // </GCN>

        ledgerJournalTrans.TransDate        = transDate;
        ledgerJournalTrans.JournalNum       = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.Company          = curext();
        ledgerJournalTrans.Voucher          = this.getVoucher(_generalJournalEntry, _voucherChanged);

        if (!ledgerJournalTrans.checkVoucherSeries(ledgerJournalTable))
        {
            throw error("@SYS23020");
        }

        // <GCN>
        if (isChineseVoucherEnabled_CN)
        {
            if (_voucherChanged)
            {
                currentVoucher_CN = NumberSeq_Voucher_CN::newGetVoucherFromCode(
                    LedgerVoucherType_CN::find(ledgerJournalTrans.LedgerVoucherType_CN).NumberSequenceTable, transDate).voucher();
            }

            ledgerJournalTrans.Voucher_CN = currentVoucher_CN;
        }
        // </GCN>

        ledgerJournalTrans.parmLedgerDimension(
            LedgerDimensionFacade::serviceCreateLedgerDimFromLedgerDim(_generalJournalAccountEntry.LedgerDimension));

        MainAccount mainAccount = MainAccount::find(_generalJournalAccountEntry.MainAccount);

        if (mainAccount.isBlockedForManualEntry())
        {
            throw error(strFmt("@SYS319027", mainAccount.MainAccountId));
        }
        if (reverseSign             == NoYes::Yes                           &&
            _generalJournalEntry.SubledgerVoucher                           &&
            (ledgerGetVoucherMethod == LedgerGetVoucherMethod::NewPrVoucher ||
             ledgerGetVoucherMethod == LedgerGetVoucherMethod::NewPrTrans))
        {
            ledgerJournalTrans.Txt = strFmt("@SYS77983", _generalJournalEntry.SubledgerVoucher);
        }
        else
        {
            ledgerJournalTrans.Txt = _generalJournalAccountEntry.Text;
        }

        ledgerJournalTrans.TransactionType  = _generalJournalEntry.JournalCategory;
        ledgerJournalTrans.CurrencyCode     = _generalJournalAccountEntry.TransactionCurrencyCode;

        ledgerJournalTrans.ExchRate         = _generalJournalAccountEntry.getAccountingExchangeRate();
        ledgerJournalTrans.ReportingCurrencyExchRate = _generalJournalAccountEntry.getReportingExchangeRate();

        if (FinTagConfiguration::isFinTagConfigurationSet(_generalJournalEntry.SubledgerVoucherDataAreaId))
        {
            ledgerJournalTrans.FinTag = _generalJournalAccountEntry.FinTag;
        }

        if (ledgerJournalTrans.ExchRate == 0)
        {
            ledgerJournalTrans.ExchRate = ExchangeRateHelper::getExchangeRate1_Static(_generalJournalEntry.Ledger, _generalJournalAccountEntry.TransactionCurrencyCode, transDate);
        }
     
        if (_generalJournalAccountEntry.IsCorrection)
        {
            if (_generalJournalAccountEntry.AccountingCurrencyAmount < 0)
            {
                ledgerJournalTrans.AmountCurDebit = reverseSign ? -_generalJournalAccountEntry.TransactionCurrencyAmount : _generalJournalAccountEntry.TransactionCurrencyAmount;
            }
            else
            {
                ledgerJournalTrans.AmountCurCredit = reverseSign ? _generalJournalAccountEntry.TransactionCurrencyAmount : -_generalJournalAccountEntry.TransactionCurrencyAmount;
            }
        }
        else
        {
            if (_generalJournalAccountEntry.AccountingCurrencyAmount < 0)
            {
                ledgerJournalTrans.AmountCurCredit = reverseSign ? _generalJournalAccountEntry.TransactionCurrencyAmount : -_generalJournalAccountEntry.TransactionCurrencyAmount;
            }
            else
            {
                ledgerJournalTrans.AmountCurDebit = reverseSign ? -_generalJournalAccountEntry.TransactionCurrencyAmount : _generalJournalAccountEntry.TransactionCurrencyAmount;
            }
        }

        // <GJP>
        if (!isPositiveDRCRFailed
            && (ledgerJournalTrans.AmountCurCredit < 0
                || ledgerJournalTrans.AmountCurDebit < 0)
            && ledgerJournalTable.isPositiveDRCROnlyEnabled_JP())
        {
            isPositiveDRCRFailed = true;
        }
        // </GJP>

        if (reverseSign)
        {
            ledgerJournalTrans.Qty = -_generalJournalAccountEntry.Quantity;
        }
        else
        {
            ledgerJournalTrans.Qty = _generalJournalAccountEntry.Quantity;
        }

        select firstOnly TaxCode, TaxGroup, TaxItemGroup, TaxOrigin from taxTrans
             exists join taxTransGeneralJournalAccountEntry
                 where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
                     && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == _generalJournalAccountEntry.RecId
                     && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount;

        if (taxTrans != null)
        {
            if (taxTrans.TaxOrigin == TaxOrigin::Transfer)
            {
                // don't set TaxGroup + TaxItemGroup for this case because TaxOrigin::Transfer mode doesn't use them
                ledgerJournalTrans.TaxCode = taxTrans.TaxCode;
            }
            else
            {
                // do not set TaxCode because the original document used TaxGroup + TaxItemGroup calculation and
                // setting TaxCode forces TaxOrigin::Transfer mode which only calculates the specified tax code

                ledgerJournalTrans.TaxGroup = taxTrans.TaxGroup;
                ledgerJournalTrans.TaxItemGroup = taxTrans.TaxItemGroup;
            }
        }

        ledgerJournalTrans.insert();

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the AOT.
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();

        reverseSign = NoYes::No;
        dialogGetVoucherMethod  = dialog.addFieldValue(enumStr(LedgerGetVoucherMethod), ledgerGetVoucherMethod, '@SYS12371');
        dialogIncludeAccruals   = dialog.addFieldValue(enumStr(NoYes), includeAccruals, "@SYS78110", "@SYS78111");
        dialogReverseSign       = dialog.addFieldValue(enumStr(NoYes), reverseSign, "@SYS9896", "@SYS28613");
        dialogFreqCode          = dialog.addFieldValue(enumStr(PeriodUnit), freqCode);
        dialogFreqValue         = dialog.addFieldValue(extendedTypeStr(Freq), freqValue);

        // <GCN>
        if (isChineseVoucherEnabled_CN)
        {
            // Select voucher type to generate journal
            dialogVoucherType_CN = dialog.addFieldValue(extendedTypeStr(LedgerVoucherTypeId_CN), voucherTypeId_CN, "@GLS54929","@GLS54493");
        }
        // </GCN>

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        ledgerGetVoucherMethod = dialogGetVoucherMethod.value();

        reverseSign            = dialogReverseSign.value();
        freqCode               = dialogFreqCode.value();
        freqValue              = dialogFreqValue.value();
        includeAccruals        = dialogIncludeAccruals.value();

        // <GCN>
        if (isChineseVoucherEnabled_CN)
        {
            voucherTypeId_CN  = dialogVoucherType_CN.value();
        }
        // </GCN>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewVoucher</Name>
				<Source><![CDATA[
    private Voucher getNewVoucher()
    {
        return new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    private Voucher getVoucher(GeneralJournalEntry _generalJournalEntry, boolean _voucherChanged)
    {
        switch (ledgerGetVoucherMethod)
        {
            case LedgerGetVoucherMethod::Original :
                if (_generalJournalEntry.SubledgerVoucher)
                {
                    currentVoucher = _generalJournalEntry.SubledgerVoucher;
                }
                break;

            case LedgerGetVoucherMethod::Total :
                if (currentVoucher == '')
                {
                    currentVoucher = this.getNewVoucher();
                }
                break;

            case LedgerGetVoucherMethod::NewPrVoucher :
                if (_voucherChanged)
                {
                    currentVoucher = this.getNewVoucher();
                }
                Debug::assert(currentVoucher != '');
                break;

            case LedgerGetVoucherMethod::NewPrTrans :
                currentVoucher = this.getNewVoucher();
                break;

            default:
                currentVoucher = this.getNewVoucher();
                break;
        }

        return currentVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        Query query;
        QueryBuildDataSource ds;

        // <GCN>
        QueryBuildDataSource newDs;
        // </GCN>

        // <GCN>
        isChineseVoucherEnabled_CN = LedgerParameters::isChineseVoucher_CN();
        if (isChineseVoucherEnabled_CN)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00011, funcName());
        }
        // </GCN>

        if (!queryRun)
        {
            queryRun = new QueryRun(querystr(GeneralJournal));

            query = queryRun.query();

            ds = query.dataSourceTable(tablenum(GeneralJournalEntry));

            GeneralJournalEntry::addSecureRangeForLedger(ds);

            // <GCN>
            if (GeneralJournalEntry_W::isLegalEntityInCountryRegion())
            {
                newDs = GeneralJournalEntry_W::addDataSource(ds, JoinMode::OuterJoin);

                if (isChineseVoucherEnabled_CN)
                {
                    newDs.addRange(fieldNum(GeneralJournalEntry_W, Voucher_CN));
                }
            }

            // Add accounting date as an option
            if (isChineseVoucherEnabled_CN)
            {
                ds.addRange(fieldNum(GeneralJournalEntry, AccountingDate));
            }
            // </GCN>

            ds.addSortField(fieldnum(GeneralJournalEntry, SubledgerVoucher));

            // Sort by GeneralJournalEntry.RecId because we will use that to determine
            // if the voucher change when the voucher is empty because of transfer in summary.
            ds.addSortField(fieldnum(GeneralJournalEntry, RecId));

            // <GCN>
            if (isChineseVoucherEnabled_CN)
            {
                ds.addRange(fieldNum(GeneralJournalEntry, SubledgerVoucher));
            }
            // </GCN>
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDate</Name>
				<Source><![CDATA[
    private TransDate newDate(TransDate  _transDate)
    {
        Futures futures;

        futures = Futures::construct(_transDate, freqValue, freqCode);

        return futures.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>QueryRun</c> class, which is used by the <c>QueryPrompt</c> class.
    /// </summary>
    /// <returns>
    ///    The <c>QueryRun</c> class, which is used by the <c>QueryPrompt</c> class.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a select menu item is added to a
    ///    dialog. Do not create the <c>QueryRun</c> class whenever the method is called. This should be done
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method. Or it should be used in the
    ///    <c>init</c> method or in the method only when it is not created.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw Exception::Error;
        }

        try
        {
            LedgerJournalGetTrans::updateNowServer(this.pack());
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Select button is to be added to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you change the return value to false, the button will be added. If you click this button, it
    ///    will show the query form. Therefore, the <c>QueryRun</c> method has to return a valid
    ///    <c>QueryRun</c>.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery;

        #DEFINE.V2(2)
        #LOCALMACRO.CurrentListV2
            reverseSign,
            freqCode,
            freqValue,
            ledgerGetVoucherMethod
        #ENDMACRO

        #DEFINE.V3(3)
        #LOCALMACRO.CurrentListV3
            reverseSign,
            freqCode,
            freqValue,
            ledgerGetVoucherMethod,
            includeAccruals
        #ENDMACRO

        // <GCN>
        #DEFINE.V4(4)
        #LOCALMACRO.CurrentListV4
            ledgerJournalId,
            reverseSign,
            freqCode,
            freqValue,
            ledgerGetVoucherMethod,
            includeAccruals
        #ENDMACRO
        // </GCN>

        #DEFINE.V5(5)
        #LOCALMACRO.CurrentListV5
            ledgerJournalId,
            reverseSign,
            freqCode,
            freqValue,
            ledgerGetVoucherMethod,
            includeAccruals,
            voucherTypeId_CN,
            revesalMethod
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            // <GCN>
            case #V5 :
                [version, #CurrentListV5, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            case #V4 :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]))
                {
                    [version, #CurrentListV3, packedQuery] = _packedClass;

                    if (packedQuery)
                    {
                        queryRun = new QueryRun(packedQuery);
                    }
                }
                break;
            // </GCN>

            case #V3 :
                [version, #CurrentListV3, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            case #V2 :
                [version, #CurrentListV2, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        GeneralJournalAccountEntry accrualGeneralJournalAccountEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalEntry accrualGeneralJournalEntry;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        RecordSortedList referenceCollection;
        boolean voucherChanged;
        boolean voucherChangedTemp;
        Voucher currentVoucherTemp;
        Voucher previousVoucherTemp;
        GeneralJournalEntryRecId previousGeneralJournalAccountEntryTemp;
        // <GCN>
        GeneralJournalEntry_W generalJournalEntryW;
        GeneralJournalEntry_W accrualGeneralJournalEntryW;
        // </GCN>

        ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);

        if (includeAccruals)
        {
            referenceCollection = new RecordSortedList(tablenum(GeneralJournalEntry));
            referenceCollection.sortOrder(fieldnum(GeneralJournalEntry, RecId));
        }

        ttsbegin;

        // <GJP>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            isPositiveDRCRFailed = false;
        }
        // </GJP>

        while (queryRun.next())
        {
            generalJournalAccountEntry = queryRun.get(tablenum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            generalJournalEntry = queryRun.get(tablenum(GeneralJournalEntry)) as GeneralJournalEntry;

            if (generalJournalAccountEntry.TransactionCurrencyAmount == 0)
            {
                continue;
            }

            voucherChanged = this.voucherChanged(generalJournalEntry);

            // <GCN><GEERU>
            if (GeneralJournalEntry_W::isLegalEntityInCountryRegion())
            {
                generalJournalEntryW = queryRun.get(tablenum(GeneralJournalEntry_W)) as GeneralJournalEntry_W;
            }
            // </GEERU></GCN>

            this.createLedgerJournalTrans(
                generalJournalEntry,
                generalJournalAccountEntry
                // <GCN>
                , generalJournalEntryW
                // </GCN>
                , voucherChanged);

            previousVoucher = generalJournalEntry.SubledgerVoucher;
            previousGeneralJournalEntry = generalJournalEntry.RecId;

            if (includeAccruals && !referenceCollection.find(generalJournalEntry))
            {
                voucherChangedTemp = voucherChanged;
                previousGeneralJournalAccountEntryTemp = previousGeneralJournalEntry;
                previousVoucherTemp = previousVoucher;
                currentVoucherTemp = currentVoucher;
                voucherChanged = true;

                while select RecId from ledgerJournalVoucherChanged
                    where ledgerJournalVoucherChanged.FromDate == generalJournalEntry.AccountingDate
                        && ledgerJournalVoucherChanged.FromVoucher == generalJournalEntry.SubledgerVoucher
                        && ledgerJournalVoucherChanged.dataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId
                    join accrualGeneralJournalEntry
                        where accrualGeneralJournalEntry.AccountingDate == ledgerJournalVoucherChanged.ToDate
                            && accrualGeneralJournalEntry.SubledgerVoucher == ledgerJournalVoucherChanged.ToVoucher
                            && accrualGeneralJournalEntry.SubledgerVoucherDataAreaId == ledgerJournalVoucherChanged.DataAreaId
                            && accrualGeneralJournalEntry.Ledger == Ledger::current()
                    join accrualGeneralJournalAccountEntry
                        where accrualGeneralJournalEntry.RecId == accrualGeneralJournalAccountEntry.GeneralJournalEntry
                    // <GCN>
                    outer join accrualGeneralJournalEntryW
                        where accrualGeneralJournalEntryW.GeneralJournalEntry == accrualGeneralJournalEntry.RecId
                    // </GCN>
                {
                    voucherChanged = this.voucherChanged(accrualGeneralJournalEntry);

                    this.createLedgerJournalTrans(
                        accrualGeneralJournalEntry,
                        accrualGeneralJournalAccountEntry
                        // <GCN>
                        , accrualGeneralJournalEntryW
                        // </GCN>
                        , voucherChanged);

                    previousVoucher = accrualGeneralJournalEntry.SubledgerVoucher;
                    previousGeneralJournalEntry = accrualGeneralJournalEntry.RecId;
                }

                referenceCollection.ins(generalJournalEntry);

                voucherChanged = voucherChangedTemp;
                previousGeneralJournalEntry = previousGeneralJournalAccountEntryTemp;
                previousVoucher = previousVoucherTemp;
                currentVoucher = currentVoucherTemp;
            }
        }

        // <GJP>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
            && isPositiveDRCRFailed)
        {
            warning("@GLS60021");
        }
        // </GJP>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        // Require at least one range to try and prevent the loading of every posted transaction into the journal.
        if (!SysQuery::queryHasRangesOrFilters(this.queryRun().query(), true))
        {
            ret = checkFailed(strFmt("@GeneralLedger:LoadLedgerTransFilterRequired", "@ProductFramework_Dialog:QueryTabCaption"));
        }

        if (!ledgerJournalId)
        {
            ret = checkFailed("@SYS19282");
        }

        if (LedgerParameters::find().CheckVoucher == ReuseVoucher::NoDuplicate &&
             ledgerGetVoucherMethod == LedgerGetVoucherMethod::Original)
        {
            ret = checkFailed("@SYS67049");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherChanged</Name>
				<Source><![CDATA[
    private boolean voucherChanged(GeneralJournalEntry _generalJournalEntry)
    {
        if (_generalJournalEntry.SubledgerVoucher)
        {
            return _generalJournalEntry.SubledgerVoucher != previousVoucher;
        }
        else
        {
            // If header is summarized we need to detect if the header itself changed
            // during processing as a substitute for the voucher changing the voucher.
            return _generalJournalEntry.RecId != previousGeneralJournalEntry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalGetTrans</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerJournalGetTrans</c> object.</returns>
    public static LedgerJournalGetTrans construct()
    {
        LedgerJournalGetTrans   ledgerJournalGetTrans;

        ledgerJournalGetTrans = new LedgerJournalGetTrans();
        ledgerJournalGetTrans.getLast();
        ledgerJournalGetTrans.init();

        return ledgerJournalGetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS28617";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalGetTrans   ledgerJournalGetTrans;

        switch (args.dataset())
        {
            case tablenum(LedgerJournalTable) :
                ledgerJournalGetTrans = LedgerJournalGetTrans::newLedgerJournalTable(args.record());
                break;

            case tablenum(LedgerJournalTrans) :
                ledgerJournalTrans = args.record();
                if (ledgerJournalTrans.RecId)
                {
                    ledgerJournalGetTrans = LedgerJournalGetTrans::newLedgerJournalTrans(args.record());
                }
                else
                {
                    ledgerJournalGetTrans = LedgerJournalGetTrans::newLedgerJournalTable(args.caller().ledgerJournalTable());
                }
                break;

            default :
                throw error("@SYS18626");
        }

        ledgerJournalGetTrans.saveLast();

        if (ledgerJournalGetTrans.prompt())
        {
            ledgerJournalGetTrans.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTable</Name>
				<Source><![CDATA[
    static LedgerJournalGetTrans newLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalGetTrans ledgerJournalGetTrans = LedgerJournalGetTrans::construct();

        ledgerJournalGetTrans.parmLedgerJournalId(_ledgerJournalTable.JournalNum);

        return ledgerJournalGetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTrans</Name>
				<Source><![CDATA[
    static LedgerJournalGetTrans newLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalGetTrans ledgerJournalGetTrans = LedgerJournalGetTrans::construct();

        ledgerJournalGetTrans.parmLedgerJournalId(_ledgerJournalTrans.JournalNum);

        return ledgerJournalGetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNowServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the instance of the <c>LedgerJournalGetTrans</c> and invokes the processing on the server.
    /// </summary>
    /// <param name="_ledgerJournalGetTransPacked">
    /// The packed instance of <c>LedgerJournalGetTrans</c>.
    /// </param>
    public static void updateNowServer(container _ledgerJournalGetTransPacked)
    {
        LedgerJournalGetTrans ledgerJournalGetTrans;

        ledgerJournalGetTrans = LedgerJournalGetTrans::construct();
        ledgerJournalGetTrans.unpack(_ledgerJournalGetTransPacked);

        ledgerJournalGetTrans.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>