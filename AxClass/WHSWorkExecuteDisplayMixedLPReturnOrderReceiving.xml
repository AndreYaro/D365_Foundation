<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPReturnOrderReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes return order item receiving flow for mixed license plate receiving.
/// </summary>
[WHSMixedLPReceivingMode(WHSMixedLPReceivingMode::ReturnOrderReceiving)]
public class WHSWorkExecuteDisplayMixedLPReturnOrderReceiving extends WHSWorkExecuteDisplayMixedLPReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransType</Name>
				<Source><![CDATA[
    protected InventTransType getInventTransType()
    {
        return InventTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noOrderNumValue</Name>
				<Source><![CDATA[
    protected boolean noOrderNumValue()
    {
        return (!pass.hasValue(#RMANum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiptAtWarehouse</Name>
				<Source><![CDATA[
    protected void checkReceiptAtWarehouse(
        Common				_common,
        InventLocationId	_inventLocationId)
    {
        this.checkReceiptAtWarehouseAllowed(_common, _inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderNum</Name>
				<Source><![CDATA[
    [SysObsolete('Use setOrderNumFromWorkLine instead', false, 20\07\2023)]
	protected void setOrderNum(InventTransId _inventTransId)
    {
        pass.insert(#RMANum, SalesTable::find(SalesLine::findInventTransId(_inventTransId).SalesId).ReturnItemNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLine</Name>
				<Source><![CDATA[
    protected Common getOrderLine()
    {
        return this.getReturnOrderLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingMixedLicensePlate</Name>
				<Source><![CDATA[
    protected void validateExistingMixedLicensePlate(WHSMixedLicensePlateReceipt _mixedLP)
    {
        if (_mixedLP.WorkTransType != WHSWorkTransType::ReturnOrder)
        {
            throw error("@WAX:MixedLPDiffWorkTransTypeError");
        }

        this.validatePlannedLinesNotMixed(_mixedLP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlannedLinesNotMixed</Name>
				<Source><![CDATA[
    private void validatePlannedLinesNotMixed(WHSMixedLicensePlateReceipt _mixedLP)
    {
        if (WHSMixedLicensePlateReceiptPlannedLine::existForMixedLicensePlateReceiptRecId(_mixedLP.RecId))
        {
            throw error(strFmt("@WAX:MixedLPWithPlannedLinesUnsupportedMobileFlowError", _mixedLP.LicensePlateId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextRegistration</Name>
				<Source><![CDATA[
    protected container buildNextRegistration(
        container   _con,
        str         _extraText = '')
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        container           ret = _con;
        boolean             hasRMAValue = pass.hasValue(#RMANum);

        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode);

        ExtendedTypeId extendedTypeRMANum = WHSMixedLPReturnOrderReceivingRMANumAvailableFlight::instance().isEnabled() ? extendedTypeNum(SalesReturnItemNum) : #WHSRFUndefinedDataType;

        ret += [this.buildControl(#RFText, #RMANum, "@WAX3259", 1, pass.lookupStr(#RMANum), extendedTypeRMANum, '', 0, !hasRMAValue)];

        if (hasRMAValue)
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
        }

        ret += this.buildNextRegistrationButtonList();

        if (hasRMAValue)
        {
            ret += [this.buildControl(#RFButton, WHSWorkExecuteDisplayMixedLPControls::ChangeRMANum, "@WAX:ChangeRMANum", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSingleReturnLine</Name>
				<Source><![CDATA[
    private SalesLine getSingleReturnLine(SalesId _salesId)
    {
        SalesLine returnLine;

        if (this.countReturnOrderLines(_salesId) == 1)
        {
            select firstonly returnLine
                where  returnLine.SalesId        == _salesId
                    && returnLine.ItemId         == pass.lookup(#ItemId)
                    && returnLine.ReturnStatus   == ReturnStatusLine::Awaiting
                    && returnLine.ExpectedRetQty <  0;

            return returnLine;
        }
        
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnOrderLine</Name>
				<Source><![CDATA[
    private SalesLine getReturnOrderLine()
    {
        InventDimParm   inventDimParm;
        InventDimParm   inventDimParmAllowBlank;

        if (InventDimGroupSetup::newItemIdProductDimensionsOnly(pass.lookup(#ItemId)).activeFields().elements())
        {
            inventDimParm.setAllProductDimensions();
        }
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
        if (pass.exists(#BatchId))
        {
            inventDimParm.InventBatchIdFlag = NoYes::Yes;
            inventDimParmAllowBlank.InventBatchIdFlag = NoYes::Yes;
        }
        InventDim inventDimCriteria;
        pass.initInventDimFromPassParm(inventDimCriteria, inventDimParm);

        InventSite::setReceivingWarehouseCriteria(inventDimCriteria, inventDimParm);
        SalesId     salesId = SalesTable::findReturnItemNum(pass.lookup(#RMANum)).SalesId;
        SalesLine   returnLine;
        InventDim   inventDim;
        RecId       returnRecId;
        EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();
        
        while select returnLine
            where returnLine.SalesId         == salesId
            &&    returnLine.ItemId          == pass.lookup(#ItemId)
            &&    returnLine.ReturnStatus    == ReturnStatusLine::Awaiting
            #InventDimExistsJoinAllowBlank(returnLine.InventDimId, inventDim, inventDimCriteria, inventDimParm, inventDimParmAllowBlank)
        {            
            if (abs(returnLine.ExpectedRetQty) > WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(returnLine.InventTransId))
            {
                if (pass.exists(#Qty))
                {
                    if (returnLine.ExpectedRetQty > -unitConverter.convertGivenUnitSymbols(pass.lookupNum(#Qty), pass.lookupStr(#SelectedValueUOM), returnLine.SalesUnit, NoYes::No, returnLine.ItemId, returnLine.InventDimId, NoYes::No))
                    {
                        throw error(strfmt("@SYS53743", abs(returnLine.ExpectedRetQty)));
                    }
                }

                returnRecId = returnLine.RecId;
                break;                
            }                  
        }

        return SalesLine::findRecId(returnRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverDeliveryMixedLP</Name>
				<Source><![CDATA[
    protected boolean checkOverDeliveryMixedLP(WHSMixedLicensePlateReceiptLine _mixedLPLines)
    {
        SalesLine returnLine = SalesLine::findInventTransId(_mixedLPLines.InventTransId);
        InventQty returnInventQty = InventTableModule::unitConvert(returnLine.ItemId,
                                                                   ModuleInventPurchSales::Invent,
                                                                   returnLine.SalesUnit,
                                                                   returnLine.ExpectedRetQty,
                                                                   returnLine.InventDimId);
        
		boolean isCWItem = this.isCatchWeightItem(returnLine);
        PdsCWInventQty cwReturnInventQty;
        if (isCWItem)
        {
            cwReturnInventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(returnLine.ItemId,
                                                                                        returnLine.InventDimId,
                                                                                        returnLine.PdsCWExpectedRetQty,
                                                                                        returnLine.pdsCWUnitId(),
                                                                                        WHSCatchWeightHelper::inventHandlingUnitId(returnLine.ItemId),
                                                                                        NoYes::No,
                                                                                        NoYes::Yes);
        }

        if (pass.lookupNum(#NewQty) - _mixedLPLines.InventQty + WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(returnLine.InventTransId) > (isCWItem ? abs(cwReturnInventQty) : abs(returnInventQty)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLPReceiptLine</Name>
				<Source><![CDATA[
    protected void createLPReceiptLine(
        Common			_common,
        InventDimId		_inventDimId,
        MenuItemName	_menuItemName)
    {
        SalesLine	returnLine = _common;

        // Create record in received table.
        WHSMixedLicensePlateReceiptLine::mixedLPReceiveLine(_inventDimId,
                                                     returnLine.InventTransId,
                                                     pass.parmCurrentQty(),
                                                     pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) ? pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight)
                                                                    : pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume),
                                                     pass.lookup(#ReceiptId),
                                                     pass.lookup(#UserId),
                                                     _menuItemName,
                                                     pass.lookupStr(#LoadId),
                                                     pass.lookupStr(#ShipmentId),
                                                     pass.lookupStr(#ContainerType),
                                                     WHSWorkTransType::ReturnOrder,
                                                     returnLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    protected InventDim getInventDim(Common _common)
    {
        SalesLine	returnLine = _common;

        return returnLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentQtyUOM</Name>
				<Source><![CDATA[
    protected container setCurrentQtyUOM(
        container	_con,
        Common		_common)
    {
        SalesLine	returnLine = _common;
        boolean isCWItem = this.isCatchWeightItem(returnLine);
  
        if (isCWItem)
        {
            pass.insert(#CurrentQty, EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(pass.parmItemId(),
                                                                                        (returnLine) ? returnLine.InventDimId : '',
                                                                                        pass.lookupNum(#Qty),
                                                                                        pass.parmSelectedValueUOM(),
                                                                                        WHSCatchWeightHelper::inventHandlingUnitId(pass.parmItemId()),
                                                                                        NoYes::No,
                                                                                        NoYes::Yes));
        }
        else if (UnitOfMeasure::unitOfMeasureIdBySymbol(pass.lookup(#SelectedValueUOM)))
        {
            pass.insert(#CurrentQty, InventTableModule::unitConvert(pass.lookup(#ItemId),
                                                                    ModuleInventPurchSales::Invent,
                                                                    pass.lookup(#SelectedValueUOM),
                                                                    pass.lookupNum(#Qty),
                                                                    returnLine.InventDimId));
        }

        pass.insert(#CurrentUOM, InventTableModule::find(pass.lookup(#ItemId), ModuleInventPurchSales::Invent).UnitId);

        container ret = _con;
        boolean	  overDeliveryBreak;
        InventQty returnInventQty = InventTableModule::unitConvert(returnLine.ItemId,
                                                                   ModuleInventPurchSales::Invent,
                                                                   returnLine.SalesUnit,
                                                                   returnLine.ExpectedRetQty,
                                                                   returnLine.InventDimId);
        
		PdsCWInventQty cwReturnInventQty;
        if (isCWItem)
        {
            cwReturnInventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(returnLine.ItemId,
                                                                                        returnLine.InventDimId,
                                                                                        returnLine.PdsCWExpectedRetQty,
                                                                                        returnLine.pdsCWUnitId(),
                                                                                        WHSCatchWeightHelper::inventHandlingUnitId(returnLine.ItemId),
                                                                                        NoYes::No,
                                                                                        NoYes::Yes);
        }

        if (pass.lookupNum(#CurrentQty) + WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(returnLine.InventTransId) > (isCWItem ? abs(cwReturnInventQty) : abs(returnInventQty)))
        {
            ret = conIns(ret, 1, conPeek(this.addErrorLabel(conNull(), "@WAX1172", WHSRFColorText::Error), 1));
            overDeliveryBreak = true;
        }

        return [ret, overDeliveryBreak];
    }

]]></Source>
			</Method>
			<Method>
				<Name>countReturnOrderLines</Name>
				<Source><![CDATA[
    private int64 countReturnOrderLines(SalesId _salesId)
    {
        SalesLine   returnLine;

        select count(RecId) from returnLine
            where  returnLine.SalesId        == _salesId
                && returnLine.ItemId         == pass.lookup(#ItemId)
                && returnLine.ReturnStatus   == ReturnStatusLine::Awaiting
                && returnLine.ExpectedRetQty <  0;

        return returnLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReturnOrderTrackingDimensions</Name>
				<Source><![CDATA[
    private container buildReturnOrderTrackingDimensions()
    {
        InventBatchId  batchId  = pass.lookupStr(#BatchId);
        container      ret;

        if (!batchId
        &&  this.countReturnOrderLines(SalesTable::findReturnItemNum(pass.lookup(#RMANum)).SalesId) == 1)
        {
            batchId = SalesLine::find(SalesTable::findReturnItemNum(pass.lookup(#RMANum)).SalesId).inventDim().InventBatchId;
        }

        InventTable inventTable = InventTable::find(pass.lookup(#ItemId));
        ListEnumerator le = InventDimGroupSetup::newDimensionGroups(0, 0, inventTable.trackingDimensionGroup()).activeFields().getEnumerator();

        while (le.moveNext())
        {
            if (!this.mustShowInventoryDimensionForItem(inventTable, le.current()))
            {
                continue;
            }

            switch (le.current())
            {
                case fieldNum(InventDim, InventBatchId):
                    if (batchId)
                    {
                        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, batchId, extendedTypeNum(InventBatchId), '', 0, false)];
                    }
                    else
                    {
                        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, '', extendedTypeNum(InventBatchId), '', 0)];
                    }
                    break;

                case fieldNum(InventDim, InventSerialId):
                    if (WHSInventTable::captureSerial(pass.lookup(#ItemId)) == WHSRFWhenToCapture::Receiving)
                    {
                        ret += [this.buildControl(#RFText, #SerialId, "@WAX1614", 1, '', extendedTypeNum(InventSerialId), '', 0)];
                    }
                    break;

                default:
                    ret += [this.buildControlForTableField(tableNum(InventDim),
                                                            le.current(),
                                                            fieldId2name(tableNum(InventDim), le.current()),
                                                            1,
                                                            '',
                                                            true)];
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegistering</Name>
				<Source><![CDATA[
    protected container buildRegistering(
        container   _con,
        str         _extraText = '',
        boolean     _enableContainerType = true)
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        SalesLine           returnLine;
        InventDim           inventDim;
        boolean             contBuilding;
        boolean             additionalButtons;
        container           ret = _con;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? rfMenuItem.rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode, _enableContainerType);

        if (pass.hasValue(#RMANum))
        {
            ExtendedTypeId extendedTypeRMANum = WHSMixedLPReturnOrderReceivingRMANumAvailableFlight::instance().isEnabled() ? extendedTypeNum(SalesReturnItemNum) : #WHSRFUndefinedDataType;

            ret += [this.buildControl(#RFText, #RMANum, "@WAX3259", 1, pass.lookup(#RMANum), extendedTypeRMANum, '', 0, 0)];

            if (pass.hasValue(#ItemId))
            {
                ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0)];
                ret += this.buildItemDescription(pass.lookup(#ItemId));

                if (this.captureTrackingDimensions(pass.lookup(#ItemId)))
                {
                    ret += this.buildReturnOrderTrackingDimensions();
                }

                returnLine = this.getSingleReturnLine((SalesTable::findReturnItemNum(pass.lookup(#RMANum)).SalesId));

                if (returnLine)
                {
                    inventDim = returnLine.inventDim();
                    contBuilding = true;
                }
                else if (!this.checkProductDimensionsInPass(pass.lookup(#ItemId)))
                {
                    ret = this.buildProductDimensionsFromInventDim(ret, pass.lookup(#ItemId), inventDim);
                }
                else
                {
                    returnLine = this.getReturnOrderLine();

                    if (!returnLine)
                    {
                        throw error("@WAX:NoAvailReturnLine");
                    }
                    else
                    {
                        contBuilding = true;
                    }
                }
            }
            else
            {
                ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
                additionalButtons = true;
            }
        }
        else
        {
            ExtendedTypeId extendedTypeRMANum = WHSMixedLPReturnOrderReceivingRMANumAvailableFlight::instance().isEnabled() ? extendedTypeNum(SalesReturnItemNum) : #WHSRFUndefinedDataType;

            ret += [this.buildControl(#RFText, #RMANum, "@WAX3259", 1, '', extendedTypeRMANum, '', 0)];
            additionalButtons = true;
        }

        if (contBuilding)
        {
            InventBatchId  batchId  = pass.lookupStr(#BatchId);
            InventSerialId serialId = pass.lookupStr(#SerialId);

            if (returnLine.InventTransIdReturn
            &&  (batchId || serialId))
            {
                if (!InventLookupReturn::validateInventSerialBatchIdReturn(serialId, batchId, returnLine.InventTransIdReturn, returnLine.ItemId))
                {
                    if (batchId)
                    {
                        throw error(strFmt("@SYP4881857", batchId));
                    }
                    else
                    {
                        throw error(strFmt("@SYP4881858", serialId));
                    }
                }
            }

            // Product variant could be uniquely identified, do not allow product dimensions to be changed
            ret = this.buildProductDimensionsFromInventDim(ret, pass.lookup(#ItemId), inventDim, false);

            ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];

            boolean isCWItem = this.isCatchWeightItem(returnLine);
            
            if (pass.lookupStr(#SelectedValueUOM) == '')
            {
                pass.insert(#SelectedValueUOM, (isCWItem ? returnLine.pdsCWUnitId() : returnLine.SalesUnit));
            }

            ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
            if (isCWItem && !this.isCatchWeightTaggedItem(returnLine))
            {
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0)];
            }
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (additionalButtons)
        {
            ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

            if (WHSMixedLicensePlateReceipt::hasOpenRecord(pass.lookup(#LicensePlateId)))
            {
                ret += [this.buildControl(#RFButton, #RFLPComplete, "@WAX:MixedLPComplete", 1, '', #WHSRFUndefinedDataType, '', 0)];
                ret += [this.buildControl(#RFButton, #RFList, "@WAX:MixedLPShowList", 1, '', #WHSRFUndefinedDataType, '', 0)];
            }

            if (pass.hasValue(#RMANum))
            {
                ret += [this.buildControl(#RFButton, WHSWorkExecuteDisplayMixedLPControls::ChangeRMANum, "@WAX:ChangeRMANum", 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPInfo</Name>
				<Source><![CDATA[
    protected container buildLPInfo(WHSLicensePlateId _licensePlateId)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;
        SalesTable                      sales;
        SalesLine                       returnLine;
        container                       ret;
        boolean                         callBuildLPInfoLine = WHSBuildLPInfoControlFlight::instance().isEnabled();
        int                             i;

        while select InventTransId, LineNum, InventQty, InventDimId, CapturedWeight from mixedLPLines
            order by LineNum
            where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_licensePlateId).RecId
                join ItemId, ExpectedRetQty, SalesUnit, PdsCWExpectedRetQty from returnLine
                    where returnLine.InventTransId == mixedLPLines.InventTransId
                join ReturnItemNum from sales
                    where sales.SalesId   == returnLine.SalesId
                    &&    sales.SalesType == SalesType::ReturnItem
        {
            if (callBuildLPInfoLine)
            {
                ret = this.buildLPInfoLine(ret, mixedLPLines, sales, returnLine, i);
            }
            else
            {
                InventQty returnInventQty = InventTableModule::unitConvert(returnLine.ItemId,
                                                                           ModuleInventPurchSales::Invent,
                                                                           returnLine.SalesUnit,
                                                                           returnLine.ExpectedRetQty,
                                                                           returnLine.InventDimId);

                boolean isCWItem = this.isCatchWeightItem(returnLine);
            
                str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                                strFmt("@WAX3192", "@SYS70473", mixedLPLines.LineNum),
                                strFmt("@WAX3192", "@WAX3259", sales.ReturnItemNum),
                                strFmt("@WAX3192", "@WAX1240", returnLine.ItemId),
                                strFmt("@WAX3192", "@WAX:ReturnLineQty", isCWItem ? returnLine.PdsCWExpectedRetQty : returnInventQty),
                                strFmt("@WAX3192", "@WAX:LPQty", mixedLPLines.InventQty),
                                isCWItem ? strFmt('\n%1\n%2',
                                                    strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(returnLine.ItemId)),
                                                    strFmt("@WAX3192", "@WAX:WeightCaptured", mixedLPLines.CapturedWeight)) : '',
                                strFmt("@WAX3192", "@SYS153282", InventTableModule::find(returnLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

                str trackingInfo;
            
                if (InventTable::find(returnLine.ItemId).productDimensionGroup())
                {
                    trackingInfo = this.getProductDimensionList(returnLine.ItemId, mixedLPLines.InventDimId);
                    lpInfo = lpInfo + trackingInfo;
                }

                if (this.captureTrackingDimensions(returnLine.ItemId))
                {
                    trackingInfo = this.getTrackingInfoList(returnLine.ItemId, mixedLPLines.InventDimId);
                    lpInfo = lpInfo + trackingInfo;
                }

                ret += [this.buildControl(#RFLabel, int2str(i), lpInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
            mixedLPHasLines = true;
            i++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPInfoLine</Name>
				<Source><![CDATA[
    protected container buildLPInfoLine(container _con, WHSMixedLicensePlateReceiptLine _mixedLPLines, SalesTable _sales, SalesLine _returnLine, int _controlNum)
    {
        container ret = _con;

        InventQty returnInventQty = InventTableModule::unitConvert(_returnLine.ItemId,
                                                                    ModuleInventPurchSales::Invent,
                                                                    _returnLine.SalesUnit,
                                                                    _returnLine.ExpectedRetQty,
                                                                    _returnLine.InventDimId);

        boolean isCWItem = this.isCatchWeightItem(_returnLine);
            
        str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                                strFmt("@WAX3192", "@SYS70473", _mixedLPLines.LineNum),
                                strFmt("@WAX3192", "@WAX3259", _sales.ReturnItemNum),
                                strFmt("@WAX3192", "@WAX1240", _returnLine.ItemId),
                                strFmt("@WAX3192", "@WAX:ReturnLineQty", isCWItem ? _returnLine.PdsCWExpectedRetQty : returnInventQty),
                                strFmt("@WAX3192", "@WAX:LPQty", _mixedLPLines.InventQty),
                                isCWItem ? strFmt('\n%1\n%2',
                                                    strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(_returnLine.ItemId)),
                                                    strFmt("@WAX3192", "@WAX:WeightCaptured", _mixedLPLines.CapturedWeight)) : '',
                                strFmt("@WAX3192", "@SYS153282", InventTableModule::find(_returnLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

        str trackingInfo;
            
        if (InventTable::find(_returnLine.ItemId).productDimensionGroup())
        {
            trackingInfo = this.getProductDimensionList(_returnLine.ItemId, _mixedLPLines.InventDimId);
            lpInfo = lpInfo + trackingInfo;
        }

        if (this.captureTrackingDimensions(_returnLine.ItemId))
        {
            trackingInfo = this.getTrackingInfoList(_returnLine.ItemId, _mixedLPLines.InventDimId);
            lpInfo = lpInfo + trackingInfo;
        }

        ret += [this.buildControl(#RFLabel, int2str(_controlNum), lpInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModifyItemQtyStr</Name>
				<Source><![CDATA[
    protected str buildModifyItemQtyStr(
        WHSLicensePlateId _licensePlateId,
        Line              _mixedLineNum)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;
        SalesTable                      sales;
        SalesLine                       returnLine;

        select firstOnly InventTransId, InventQty, LineNum, InventDimId, CapturedWeight from mixedLPLines
            where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(pass.lookup(#LicensePlateId)).RecId
            &&    mixedLPLines.LineNum           == str2int(pass.lookup(#MixedLPLineNum))
            join ItemId, ExpectedRetQty, SalesUnit, PdsCWExpectedRetQty from returnLine
                    where returnLine.InventTransId == mixedLPLines.InventTransId
                join ReturnItemNum from sales
                    where sales.SalesId   == returnLine.SalesId
                    &&    sales.SalesType == SalesType::ReturnItem;

        InventQty returnInventQty = InventTableModule::unitConvert(returnLine.ItemId,
                                                                   ModuleInventPurchSales::Invent,
                                                                   returnLine.SalesUnit,
                                                                   returnLine.ExpectedRetQty,
                                                                   returnLine.InventDimId);

        boolean isCWItem = this.isCatchWeightItem(returnLine);
            
        str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                        strFmt("@WAX3192", "@SYS70473", mixedLPLines.LineNum),
                        strFmt("@WAX3192", "@WAX3259", sales.ReturnItemNum),
                        strFmt("@WAX3192", "@WAX1240", returnLine.ItemId),
                        strFmt("@WAX3192", "@WAX:ReturnLineQty", isCWItem ? returnLine.PdsCWExpectedRetQty : returnInventQty),
                        strFmt("@WAX3192", "@WAX:LPQty", mixedLPLines.InventQty),
                        isCWItem ? strFmt('\n%1\n%2',
                                            strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(returnLine.ItemId)),
                                            strFmt("@WAX3192", "@WAX:WeightCaptured", mixedLPLines.CapturedWeight)) : '',
                        strFmt("@WAX3192", "@SYS153282", InventTableModule::find(returnLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

        if (this.captureTrackingDimensions(returnLine.ItemId))
        {
            str trackingInfo = this.getTrackingInfoList(returnLine.ItemId, mixedLPLines.InventDimId);
            lpInfo = lpInfo + trackingInfo;
        }

        return lpInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassWithSavedValues</Name>
				<Source><![CDATA[
    protected WhsrfPassthrough resetPassWithSavedValues(container _con)
    {
        ReturnItemNum saveRMANum = pass.lookup(#RMANum);

        pass = this.resetPassthrough(_con, false);

        pass.insert(#RMANum, saveRMANum);

        return pass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightItem(Common _common)
    {
        SalesLine returnLine = _common as SalesLine;

        return PdsGlobal::pdsIsCWItem(returnLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTaggedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight tag enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight tag enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightTaggedItem(Common _common)
    {
        SalesLine salesLine = _common as SalesLine;

        return WHSInventTable::isCatchWeightTagTracked(salesLine.ItemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>