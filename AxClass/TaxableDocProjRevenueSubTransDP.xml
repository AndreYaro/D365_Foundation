<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocProjRevenueSubTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider for Project - Subscription
/// </summary>
public class TaxableDocProjRevenueSubTransDP extends TaxableDocumentDataProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to load detail data for taxable document. And setup the row definitions.
    /// </summary>
    /// <returns>
    /// The query to load detail data for taxable document.
    /// </returns>
    /// <remarks>
    /// The row definitions must be setup here. It defines the mapping between row and data source,
    /// the child/parent relations between rows, and the row data provider class.
    /// </remarks>
    public Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    projRevenueSubTransHeadDataSource;
        QueryBuildDataSource    projProposalJourDataSource;
        QueryBuildDataSource    projProposalRevenueTransLineDataSource;
        QueryBuildDataSource    projRevenueTransLineDataSource;
        boolean                 hasTransLine = this.hasTransactionLine();

        query = new Query();
        projRevenueSubTransHeadDataSource = query.addDataSource(tableNum(TaxEngineProjRevenueSubTransHeader));
        projRevenueSubTransHeadDataSource.addRange(fieldNum(TaxEngineProjRevenueSubTransHeader, RecId)).value(queryValue(rootTable.RecId));

        projProposalJourDataSource = projRevenueSubTransHeadDataSource.addDataSource(tableNum(ProjProposalJour));
        projProposalJourDataSource.joinMode(JoinMode::OuterJoin);
        projProposalJourDataSource.relations(true);

        projProposalRevenueTransLineDataSource = projProposalJourDataSource.addDataSource(tableNum(ProjProposalRevenue));
        projProposalRevenueTransLineDataSource.joinMode(JoinMode::InnerJoin);
        projProposalRevenueTransLineDataSource.relations(true);

        projRevenueTransLineDataSource = projProposalRevenueTransLineDataSource.addDataSource(tableNum(ProjRevenueTrans));
        projRevenueTransLineDataSource.joinMode(JoinMode::InnerJoin);
        projRevenueTransLineDataSource.relations(true);
        projRevenueTransLineDataSource.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(queryValue(ProjOrigin::Subscription));

        rowDefinitions.empty();
        this.registerRow(projRevenueSubTransHeadDataSource.id(), 0, TaxEngineIntegrationConstants::Header, classStr(TaxableDocProjRevenueTransHeaderRowDP));
        this.registerRow(projProposalRevenueTransLineDataSource.id(), projRevenueSubTransHeadDataSource.id(), TaxEngineModelFieldsConstants::Lines, classStr(TaxableDocProjRevenueTransLineRowDP));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransactionLine</Name>
				<Source><![CDATA[
    private boolean hasTransactionLine()
    {
        TaxEngineProjRevenueSubTransHeader  header              = rootTable;
        ProjProposalJour                    projProposalJour    = ProjProposalJour::findRecid(header.ProjProposalJour);
        ProjRevenueTrans                    projRevenueTrans;
        ProjProposalRevenue                 projProposalRevenue;

        select firstOnly RecId from projProposalRevenue
            where projProposalRevenue.ProposalId == projProposalJour.ProposalId
                exists join RecId from projRevenueTrans
                    where projRevenueTrans.TransId              == projProposalRevenue.TransId
                        && projRevenueTrans.TransactionOrigin   == ProjOrigin::Subscription;

        return projProposalRevenue.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>