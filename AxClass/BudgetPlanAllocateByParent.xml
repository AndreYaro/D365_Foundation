<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateByParent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateByParent</c> class manages the budget allocation from
/// associated children budget plans to its parent budget plan.
/// </summary>
public class BudgetPlanAllocateByParent extends BudgetPlanAllocateByPlan
{
    Map parentLedgerDimensionChildBudgetPlans;
    Set childBudgetPlanHeaderDeleteProcessed;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new budget plan lines in the children budget plans allocated from budget
    /// plan lines in the parent budget plan.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The <c>BudgetPlanLine</c> record ID to allocate.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    protected void createBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        DimensionAttributeLevelValueView dimensionAttributeLevelValueView;
        DimensionAttribute               dimensionAttribute;
        OMHierarchyRelationship          hierarchyRelationship;
        OMOperatingUnit                  operatingUnit;
        BudgetPlanHeader                 childBudgetPlanHeader;
        BudgetPlanLine                   childBudgetPlanLine;
        Set                              childBudgetPlansForLedgerDimension;
        SetEnumerator                    childBudgetPlansForLedgerDimensionEnumerator;
        utcDateTime                      now = DateTimeUtil::utcNow();
        TableId                          operatingUnitTableId = tableNum(OMOperatingUnit);
        OrganizationHierarchyTypeRecId   hierarchyTypeRecId;

        hierarchyTypeRecId = BudgetPlanningProcess::find(parentBudgetPlanHeader.BudgetPlanningProcess).OrganizationHierarchyType;

        // Create a set of children budget plans with dimension attribute.
        if (!parentLedgerDimensionChildBudgetPlans.exists(_sourceBudgetPlanLine.LedgerDimension))
        {
            childBudgetPlansForLedgerDimension = new Set(typeName2Type(extendedTypeStr(BudgetPlanHeaderRecId)));

            // Get the organizations for dimension attribute
            while select validTimeState(now) RecId from operatingUnit
                join RecId from childBudgetPlanHeader
                    where childBudgetPlanHeader.BudgetingOrganization   == operatingUnit.RecId
                        && childBudgetPlanHeader.ParentBudgetPlanHeader == parentBudgetPlanHeader.RecId
                exists join hierarchyRelationship
                    where hierarchyRelationship.HierarchyType == hierarchyTypeRecId
                        && hierarchyRelationship.ParentOrganization == parentBudgetPlanHeader.BudgetingOrganization
                        && hierarchyRelationship.ChildOrganization  == operatingUnit.RecId
                exists join dimensionAttributeLevelValueView
                    where dimensionAttributeLevelValueView.ValueCombinationRecId == _sourceBudgetPlanLine.LedgerDimension
                        && dimensionAttributeLevelValueView.EntityInstance       == childBudgetPlanHeader.BudgetingOrganization
                    exists join dimensionAttribute
                        where dimensionAttribute.RecId                 == dimensionAttributeLevelValueView.DimensionAttribute
                            && dimensionAttribute.BackingEntityTableId == operatingUnitTableId
            {
                childBudgetPlansForLedgerDimension.add(childBudgetPlanHeader.RecId);
            }

            // Empty sets are tracked to indicate the source ledger dimension does not map to any child budget plan headers.
            parentLedgerDimensionChildBudgetPlans.insert(_sourceBudgetPlanLine.LedgerDimension, childBudgetPlansForLedgerDimension);
        }

        childBudgetPlansForLedgerDimension = parentLedgerDimensionChildBudgetPlans.lookup(_sourceBudgetPlanLine.LedgerDimension);

        childBudgetPlansForLedgerDimensionEnumerator = childBudgetPlansForLedgerDimension.getEnumerator();

        while (childBudgetPlansForLedgerDimensionEnumerator.moveNext())
        {
            targetBudgetPlanHeaderRecId = childBudgetPlansForLedgerDimensionEnumerator.current();

            if (this.canDeleteExistingTargetLines() && !childBudgetPlanHeaderDeleteProcessed.in(targetBudgetPlanHeaderRecId))
            {
                delete_from childBudgetPlanLine
                    where childBudgetPlanLine.BudgetPlanHeader    == targetBudgetPlanHeaderRecId
                        && childBudgetPlanLine.BudgetPlanScenario == targetBudgetPlanScenarioRecId;

                childBudgetPlanHeaderDeleteProcessed.add(targetBudgetPlanHeaderRecId);
            }

            super(_sourceBudgetPlanLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
        protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        super(_budgetPlanAllocateRequest);

        parentLedgerDimensionChildBudgetPlans =
            new Map(typeName2Type(extendedTypeStr(LedgerDimensionBase)), typeName2Type(classStr(Set)));

        childBudgetPlanHeaderDeleteProcessed =
            new Set(typeName2Type(extendedTypeStr(BudgetPlanHeaderRecId)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>