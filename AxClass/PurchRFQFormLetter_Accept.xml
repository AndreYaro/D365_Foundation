<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormLetter_Accept</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQFormLetter_Accept extends PurchRFQFormLetter implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Perform additional steps that must be executed after the prompt has finished.
    /// </summary>
    void afterPrompt()
    {
        super();

        this.reject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    protected void chooseLines()
    {
        PurchRFQParmUpdate purchRFQParmUpdate = this.purchRFQParmUpdate();

        // make default selection to be Marked in the business logic
        purchRFQParmUpdate.SpecQty = PurchRFQUpdate::Marked;

        this.purchRFQParmUpdate(purchRFQParmUpdate);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::RFQAccept;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePurchRFQFormletter_Reject</Name>
				<Source><![CDATA[
    protected void executePurchRFQFormletter_Reject()
    {
        Args callingArgs = new Args(this);

        callingArgs.record(this.purchRFQTable());
        new MenuFunction(menuitemActionStr(PurchRFQFormLetter_Reject), MenuItemType::Action).run(callingArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postRequestForQuoteAccept),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management document type for accepting a request for quotation marks.
    /// </summary>
    /// <returns>
    ///    The print management document type for accepting a request for quotes.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchRFQAccept;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    protected PurchRFQStatus purchRFQStatus()
    {
        return PurchRFQStatus::Accepted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    PurchRFQUpdateType purchRFQUpdateType()
    {
        return PurchRFQUpdateType::Accepted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rejects request for quotes.
    /// </summary>
    protected void reject()
    {
        PurchRFQParmTable   rfqParmtable;
        PurchRFQParmLine    rfqParmLine;
        PurchRFQLine        rfqLine;
        PurchRFQTable       rfqTable;
        boolean             executeReject;
        PurchRFQParmUpdate  purchRFQParmUpdate = this.purchRFQParmUpdate();

        while select rfqCaseId
        from  rfqParmtable
            where rfqParmtable.ParmId == purchRFQParmUpdate.ParmId
        {
            select firstonly RecId
            from   rfqTable
                where rfqTable.rfqCaseId == rfqParmtable.rfqCaseId
                join RecId
                from rfqLine
                    where rfqLine.rfqId  == rfqTable.rfqId &&
                          rfqLine.Status == PurchRFQStatus::Received
                notexists join rfqParmLine
                    where rfqParmLine.rfqLineRecId == rfqLine.RecId &&
                          rfqParmLine.ParmId       == purchRFQParmUpdate.ParmId;

            if (rfqTable.RecId)
            {
                executeReject = true;
                break;
            }
        }

        if (executeReject)
        {
            this.executePurchRFQFormletter_Reject();
            this.parmRejectExecuted(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.validateRFQCaseLines();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer             version = conPeek(_packedClass,1);
        ParmId              parmId;
        PurchRFQParmUpdate  purchRFQParmUpdate;
        Printout            printout;
        NoYes               printFormletter;
        container           printerSettingsFormLetter;
        boolean             usePrintManagement;
        PurchRFQTable       purchRFQTable;
        container           datasourceRecordsPacked;

        #LOCALMACRO.ParmList_v3
            parmId,
            purchRFQParmUpdate,
            Printout,
            PrintFormletter,
            PrinterSettingsFormLetter,
            usePrintManagement,
            purchRFQTable,
            datasourceRecordsPacked
        #ENDMACRO

        switch (version)
        {
            case 3:
                [version, #ParmList_v3] = _packedClass;
                this.setNewContract(PurchRFQFormLetterAcceptContract::construct());

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.purchRFQParmUpdate(purchRFQParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.usePrintManagement(usePrintManagement);
                this.purchRFQTable(purchRFQTable);
                break;

            default :
                return super(_packedClass);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that at least one RFQ reply line is marked and the marked reply lines are valid.
    /// </summary>
    public void validateLines()
    {
        PurchRFQTable  localPurchRFQTable = this.purchRFQTable();

        if (localPurchRFQTable && localPurchRFQTable.RFQType == PurchRFQType::PurchReq)
        {
            // For requisition type RFQ with alternate line, at least one line should be marked
            if (PurchRFQLine::doesAlternateLineExist(localPurchRFQTable.RFQId)
                && !localPurchRFQTable.isReplyLineMarked())
            {
                throw error("@EPR4460185");
            }

            // Validating if marked reply lines are valid
            if (!localPurchRFQTable.isMarkedReplyLineValid())
            {
                throw error("@EPR4460070");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePOTransdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>poTransDate</c> field that has the fiscal calendar.
    /// </summary>
    /// <param name="_poTransDate">
    ///    The date to validate.
    /// </param>
    /// <returns>
    ///    true if the specified <c>poTransdate</c> field is valid; otherwise, false.
    /// </returns>
    boolean validatePOTransdate(TransDate _poTransDate)
    {
        boolean    ret = true;

        if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(),_poTransDate,SysModule::Purch,false))
        {
            ret = checkFailed("@SYS127946");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuestionnaire</Name>
				<Source><![CDATA[
    public void validateQuestionnaire()
    {
        this.checkIfQuestionnaireComplete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQFormLetter_Accept construct(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postRequestForQuoteAccept),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return new PurchRFQFormLetter_Accept(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS105965";
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostEventHandler_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes afte the <c>run</c> method.
    /// </summary>
    /// <param name="_args">
    /// The <c>XppPrePostArgs</c> object.
    /// </param>
    /// <remarks>
    /// This method is called by an event handler.
    /// </remarks>
    public static void runPostEventHandler_BR(XppPrePostArgs _args)
    {
        PurchRFQFormLetter_Accept   that = _args.getThis();
        PurchRFQTable       purchRFQTableLoc = that.purchRFQTable();
        PurchRFQLine        purchRFQLineLoc;
        PurchRFQCaseTable   purchRFQCaseTableLoc;
        purchReqLine        purchReqLineLoc;

        if (purchRFQTableLoc.RFQType == PurchRFQType::PurchReq)
        {
            // Update Fiscal info on the Purchase requisition from PurchRFQ;
            // i.e., To copy fields CFOPTable_BR, TaxServiceCode_BR to Purchase requisition
            ttsBegin;
            while select CFOPTable_BR, TaxServiceCode_BR from purchRFQLineLoc
                where purchRFQLineLoc.RFQId == purchRFQTableLoc.RFQId
            {
                purchRFQCaseTableLoc = PurchRFQCaseTable::find(PurchRFQCaseLine::findRecId(PurchRFQLineLoc.RFQCaseLineRefRecId).RFQCaseId);

                select forupdate purchReqLineLoc
                    where purchReqLineLoc.PurchRFQCaseIdDataArea == purchRFQCaseTableLoc.dataAreaId
                       && purchReqLineLoc.PurchRFQCaseId == purchRFQCaseTableLoc.RFQCaseId;
                if (purchReqLineLoc)
                {
                    purchReqLineLoc.CFOPTable_BR      = purchRFQLineLoc.CFOPTable_BR;
                    purchReqLineLoc.TaxServiceCode_BR = purchRFQLineLoc.TaxServiceCode_BR;
                    purchReqLineLoc.update();
                }
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRFQCaseLines</Name>
				<Source><![CDATA[
    private void validateRFQCaseLines()
    {
        PurchRFQParmTable   rfqParmTable;
        PurchRFQParmLine    rfqParmLine;
        PurchRFQLine        rfqLine;
        PurchRFQCaseLine    rfqCaseLine;
        PurchRFQParmUpdate  purchRFQParmUpdate = this.purchRFQParmUpdate();

        if (PurchRFQCaseTable::find(this.purchRFQTable().RFQCaseId).RFQType == PurchRFQType::PurchReq)
        {
            select RecId, LineNum from rfqCaseLine
                where rfqCaseLine.StatusHigh == PurchRFQStatus::Accepted
                    exists join rfqLine
                    where rfqLine.RFQCaseLineRefRecId == rfqCaseLine.RecId
                        exists join rfqParmLine
                        where rfqParmLine.rfqLineRecId == rfqLine.RecId
                           && rfqParmLine.ParmId       == purchRFQParmUpdate.ParmId
                           exists join rfqParmTable
                           where rfqParmTable.ParmId     == purchRFQParmUpdate.ParmId
                              && rfqParmTable.TableRefId == rfqParmLine.TableRefId;

            if (rfqCaseLine.RecId)
            {
                throw error(strFmt("@SYP4861256", rfqCaseLine.LineNum, this.purchRFQTable().RFQCaseId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return PurchRFQFormLetter_Accept::description();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>