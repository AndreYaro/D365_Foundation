<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxImposedSerializeFunc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The functor class for income tax calculation.
/// </summary>
class rPayTaxImposedSerializeFunc implements IRPayTaxCalcFunctor
{
    RPayTaxCalcContext      calcContext;
    QueryRun                queryRunItem;

    RPayTaxEmplSum          taxEmplSum;
    RPayTaxEmplTrans        taxEmplTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies arguments and context.
    /// </summary>
    /// <param name="_args">
    /// The arguments.
    /// </param>
    /// <param name="_context">
    /// The context.
    /// </param>
    /// <returns>
    /// Null.
    /// </returns>
    public Object apply(anytype _args, Object _context)
    {
        Object obj;

        calcContext = _context as RPayTaxCalcContext;
        Debug::assert(calcContext != null);

        Debug::assert(typeOf(_args) == Types::Class);
        obj = _args;

        queryRunItem = obj as QueryRun;
        Debug::assert(queryRunItem != null);

        this.initFun();
        this.serialize();

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides accessebility to external variables from functor.
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    public void closure(anytype _closure)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTaxSum</Name>
				<Source><![CDATA[
        private RecId findOrCreateTaxSum()
    {
        RPayTaxEmplSum  taxSumStore;
        RPayTrans       payTrans;

        taxSumStore = RPayTaxEmplSum::find(taxEmplSum.EmplId, taxEmplSum.PayPeriod, taxEmplSum.CorrectedPeriod,
                                           taxEmplSum.RpayTaxIncomeGroupCode, NoYes::No, taxEmplSum.BranchId);

        if (!taxSumStore.RecId)
        {
           taxSumStore.clear();
           taxSumStore.data(taxEmplSum);

            //there are can be more than one transaction with the same group code
            //tax return is reckoning, deduction with refund exist and status changed NR->R
            while select sum(Amount), TaxRedemption from payTrans
                group by TaxRedemption
                where payTrans.Emplid               == taxEmplSum.EmplId            &&
                      payTrans.PayPeriod            == taxEmplSum.PayPeriod         &&
                      payTrans.BranchId             == taxEmplSum.BranchId          &&
                      payTrans.CorrectedPeriod      == taxEmplSum.CorrectedPeriod   &&
                      payTrans.TaxIncomeGroupCode   == taxEmplSum.RpayTaxIncomeGroupCode
            {
                if (payTrans.TaxRedemption)
                {
                    taxSumStore.PayrollRedemptionAmount = payTrans.Amount;
                }
                else
                {
                    taxSumStore.DeductTaxAmount         = -payTrans.Amount;
                }
            }

            taxSumStore.insert();
        }

        return taxSumStore.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFun</Name>
				<Source><![CDATA[
        private void initFun()
    {
        taxEmplSum   = queryRunItem.get(tableNum(RPayTaxEmplSum));
        taxEmplTrans = queryRunItem.get(tableNum(RPayTaxEmplTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialize</Name>
				<Source><![CDATA[
        private void serialize()
    {
        RPayTaxEmplTrans taxTransStore;

        taxTransStore.clear();
        taxTransStore.data(taxEmplTrans);
        taxTransStore.TaxSumRecId = this.findOrCreateTaxSum();
        taxTransStore.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>