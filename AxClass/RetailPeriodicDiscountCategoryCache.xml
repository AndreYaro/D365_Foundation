<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodicDiscountCategoryCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Hold cached <c>RetailPeriodicDiscountLine</c> and <c>UnitOfMeasure</c> records.
/// </summary>
internal class RetailPeriodicDiscountCategoryCache
{
    public Common retailPeriodicDiscountLine;
    public UnitOfMeasure unitOfMeasure;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>RetailPeriodicDiscountCategoryCache</c> from container.
    /// </summary>
    /// <param name = "_packedClass">The packed class.</param>
    /// <returns>The <c>RetailPeriodicDiscountCategoryCache</c> instance.</returns>
    public static RetailPeriodicDiscountCategoryCache create(container _packedClass)
    {
        RetailPeriodicDiscountCategoryCache cache = new RetailPeriodicDiscountCategoryCache();

        cache.unpack(_packedClass);

        return cache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>RetailPeriodicDiscountCache</c> from CRT model PeriodicDiscount class.
    /// </summary>
    /// <param name = "_periodicDiscount">The CRT PeriodicDiscount class.</param>
    /// <param name = "_periodicDiscountType">The discount type.</param>
    /// <returns>The <c>RetailPeriodicDiscountCache</c> instance.</returns>
    public static RetailPeriodicDiscountCategoryCache init(RetailPeriodicDiscount _discount, RetailPeriodicDiscountLine _discountLine, UnitOfMeasure _unitOfMeasure)
    {
        RetailPeriodicDiscountCategoryCache cache = new RetailPeriodicDiscountCategoryCache();

        cache.initFromTable(_discount, _discountLine, _unitOfMeasure);

        return cache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private void initFromTable(RetailPeriodicDiscount _periodicDiscount, RetailPeriodicDiscountLine _discountLine, UnitOfMeasure _unitOfMeasure)
    {
        if (_discountLine is RetailDiscountLineOffer)
        {
            retailPeriodicDiscountLine = _discountLine as RetailDiscountLineOffer;
        }
        else if (_discountLine is RetailDiscountLineMixAndMatch)
        {
            retailPeriodicDiscountLine = _discountLine as RetailDiscountLineMixAndMatch;
        }
        else if (_discountLine is RetailDiscountLineMultibuy)
        {
            retailPeriodicDiscountLine = _discountLine as RetailDiscountLineMultibuy;
        }
        else if (_discountLine is RetailDiscountLineThresholdApplying)
        {
            retailPeriodicDiscountLine = _discountLine as RetailDiscountLineThresholdApplying;
        }
        else
        {
            retailPeriodicDiscountLine = _discountLine;
        }

        unitOfMeasure = _unitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [buf2Con(retailPeriodicDiscountLine),
                buf2Con(unitOfMeasure)];

    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    private void unpack(container _packedClass)
    {
        container packedDiscountLine;
        container packedUnitOfMeasure;

        [packedDiscountLine, packedUnitOfMeasure] = _packedClass;

        retailPeriodicDiscountLine = con2Buf(packedDiscountLine);
        unitOfMeasure = con2Buf(packedUnitOfMeasure);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>