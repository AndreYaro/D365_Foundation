<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OMLegalEntityExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class OMLegalEntityExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CompanyInfoActivated</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(OMLegalEntity, CompanyInfo), FormDataSourceEventType::Activated)]
    public static void CompanyInfoActivated(FormDataSource dataSource, FormDataSourceEventArgs e)
    {
        #ISOCountryRegionCodes

        FormRun legalEntityForm;
        legalEntityForm = dataSource.formRun();
        CompanyInfo cInfo = dataSource.cursor();
        if (SysCountryRegionCode::isPartyInCountryRegion(cInfo.RecId, [#isoSA]))
        {
            var zakatParameterEnabled = LedgerParameters::findByCompany(cInfo.DataArea).IsZakatEnabled_SA;
            legalEntityForm.set__zakatParameterEnabled(zakatParameterEnabled);

            var zakat = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, zakat)) as FormGroupControl;
            zakat.enabled(zakatParameterEnabled);
        }

        OMLegalEntityExtension::UpdateTaxRegulationButton(legalEntityForm, cInfo);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            FormDataSource ds = legalEntityForm.dataSource(formdatasourcestr(OMLegalEntity, TaxInformationLegalEntity_IN));
            TaxInformationLegalEntity_IN table = CompanyInfo::find().getTaxInformationLegalEntity_IN();
            OMLegalEntityExtension::updateTaxWithholdInfo_IN(ds, table);
        }
        // </GIN>

        // <GJP>
        var phoneticName_JP = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, PhoneticName_JP)) as FormStringControl;
        if (phoneticName_JP)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
            {
                phoneticName_JP.visible(true);
            }
            else
            {
                phoneticName_JP.visible(false);
            }
        }
        // </GJP>

        // <GCN>
        var taxRegistrationType = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, CompanyInfoExtensionCN_TaxRegistrationType)) as FormReferenceGroupControl;
        if (taxRegistrationType)
        {
            if (SysCountryRegionCode::isPartyInCountryRegion(cInfo.RecId, [#isoCN]))
            {
                if (CustParameters::findByCompany(cInfo.DataArea).TaxIntegrationSystem_CN)
                {
                    taxRegistrationType.enabled(true);
                }
                else
                {
                    taxRegistrationType.enabled(false);
                }
            }
            else
            {
                taxRegistrationType.enabled(false);
            }
        }
        // </GCN>

        var AlcoholLicenseRelTable_RU = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, AlcoholLicenseRelTable_RU)) as FormFunctionButtonControl;
        AlcoholLicenseRelTable_RU.visible(SysCountryRegionCode::isPartyInCountryRegion(cInfo.RecId, [#isoRU]));

        var TaxRegime_MX = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, TaxRegime_MX)) as FormFunctionButtonControl;
        TaxRegime_MX.visible(SysCountryRegionCode::isPartyInCountryRegion(cInfo.RecId, [#isoMX]));

        OMLegalEntityExtension::AllowEditPrintCorrInvoiceLabelEffDate_DE(dataSource);

        // Do not allow changing company region if financial transactions already exist
        dataSource.object(fieldNum(CompanyInfo, LocalizationCountryRegionCode))
            .allowEdit(!cInfo || !GeneralJournalEntry::existForLedger(Ledger::primaryLedger(cInfo.RecId)));

        boolean isEE = SysCountryRegionCode::isPartyInCountryRegion(cInfo.RecId, [#isoEE]);

        var EePersonalDataLoggingControl = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, EePersonalDataLogging)) as FormTabPageControl;
        var EeRoleChangeLoggingControl = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, EeRoleChangeLogging)) as FormTabPageControl;
        EePersonalDataLoggingControl.visible(isEE);
        EeRoleChangeLoggingControl.visible(isEE);

        FormTabPageControl vatTabPage_AE = LegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, VATTabPage_AE)) as FormTabPageControl;

        if (vatTabPage_AE != null)
        {
            vatTabPage_AE.visible(SysCountryRegionCode::isPartyInCountryRegion(cInfo.RecId, [#isoAE]));
        }

        boolean enabledMultipleTaxIdVatDeclaration_IT = MultipleTaxIdReportingHelper::isLegalEntityOrAddressInCountryRegion([#isoIT], MultipleTaxIdScope::VATDeclaration);
        dataSource.object(fieldNum(CompanyInfo, LegalNature_IT)).enabled(enabledMultipleTaxIdVatDeclaration_IT);
        dataSource.object(fieldNum(CompanyInfo, FiscalCode_IT)).enabled(enabledMultipleTaxIdVatDeclaration_IT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxRegime_MX_Modified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(OMLegalEntity, CompanyInfo, CompanyType_MX), FormDataFieldEventType::Modified)]
    public static void TaxRegime_MX_Modified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        CompanyInfo cInfo = sender.dataSource().cursor();

        var TaxRegime_MX = sender.dataSource().formRun().design().controlName(formcontrolstr(OMLegalEntity, TaxRegime_MX)) as FormFunctionButtonControl;
        TaxRegime_MX.enabled(((cInfo.CompanyType_MX == CompanyType_MX::LegalEntity) || ( cInfo.CompanyType_MX == CompanyType_MX::LegalPerson)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMLegalEntityInitlized</Name>
				<Source><![CDATA[
    [FormEventHandler(formstr(OMLegalEntity), FormEventType::Initialized)]
    public static void OMLegalEntityInitlized(xFormRun OMLegalForm, FormEventArgs args)
    {
        var vatNum = OMLegalForm.design().controlName(formcontrolstr(OMLegalEntity, VATNum)) as FormStringControl;
        var importVatNum = OMLegalForm.design().controlName(formcontrolstr(OMLegalEntity, ImportVatNum)) as FormStringControl;
        TaxVATNumTable::enableLookupVATNum(vatNum);
        TaxVATNumTable::enableLookupVATNum(importVatNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DataSourceRefresh</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formstr(OMLegalEntity), FormDataSourceEventType::Refreshed)]
    public static void DataSourceRefresh(FormDataSource dataSource, FormDataSourceEventArgs e)
    {
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCA]))
        {
            CompanyInfo cInfo = dataSource.cursor();
            FormRun form = dataSource.formRun();
            var TaxGSTHSTAccountId_CA = form.design().controlName(formcontrolstr(OMLegalEntity, TaxGSTHSTAccountId_CA)) as FormStringControl;

            TaxGSTHSTAccountId_CA.enabled(cInfo.BusinessNumber_CA != '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BusinessNumberCAModifed</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(OMLegalEntity, CompanyInfo, BusinessNumber_CA), FormDataFieldEventType::Modified)]
    public static void BusinessNumberCAModifed(FormDataObject dataField, FormDataFieldEventArgs e)
    {
        FormDataSource dataSource = dataField.dataSource();
        CompanyInfo cInfo = dataSource.cursor();
        FormRun legalEntityForm = dataSource.formRun();
        OMLegalEntityExtension::updateTaxRegulationButton(legalEntityForm, cInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormDataFieldModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(OMLegalEntity, CompanyInfo, PrintCorrInvoiceLabel_DE), FormDataFieldEventType::Modified)]
    public static void FormDataFieldModified(FormDataObject dataField, FormDataFieldEventArgs e)
    {
        OMLegalEntityExtension::AllowEditPrintCorrInvoiceLabelEffDate_DE(dataField.datasource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInformationLegalEntityCreate</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(OMLegalEntity, TaxInformationLegalEntity_IN), FormDataSourceEventType::Creating)]
    public static void TaxInformationLegalEntityCreate(FormDataSource legalEntity, FormDataSourceEventArgs e)
    {
        FormRun form = legalEntity.formRun();
        CompanyInfo cInfo = form.datasource(formdatasourcestr(OMLegalEntity, CompanyInfo)).cursor();
        if (cInfo)
        {
            changecompany(cInfo.DataArea)
            {
                if (!TaxInformationLegalEntity_IN::findByLegalEntity(cInfo.RecId).RecId)
                {
                    // Cancel Super
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxAuthority_RULookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(OMLegalEntity, TaxAuthority_RU_TaxAuthority_RU), FormControlEventType::Lookup)]
    public static void TaxAuthority_RULookup(FormControl control, FormControlEventArgs e)
    {
        var                  taxAuthority_RU = control as FormStringControl;
        SysTableLookup       lookup = SysTableLookup::newParameters(tableNum(TaxAuthorityAddress), taxAuthority_RU);
        Query                query;
        QueryBuildDataSource qbds;

        lookup.addLookupfield(fieldNum(TaxAuthorityAddress, TaxAuthority));
        lookup.addLookupfield(fieldNum(TaxAuthorityAddress, Name));

        query = new Query();

        qbds = query.addDataSource(tableNum(TaxAuthorityAddress));

        query.allowCrossCompany(true);

        FormRun form = taxAuthority_RU.formRun();
        CompanyInfo cInfo = form.datasource(formdatasourcestr(OMLegalEntity, CompanyInfo)).cursor();
        query.addCompanyRange(cInfo.DataArea);

        lookup.parmQuery(query);

        lookup.performFormLookup();
        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInformationLegalEntity_QueryExecuting</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(OMLegalEntity, TaxInformationLegalEntity_IN), FormDataSourceEventType::QueryExecuting)]
    public static void TaxInformationLegalEntity_QueryExecuting(FormDataSource dataSource, FormDataSourceEventArgs e)
    {
        // the table buffer will not change its DataAreaId when selecting a record in the second company's context, we need to reset it explicitly
        TaxInformationLegalEntity_IN table = dataSource.cursor();
        table.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInformationLegalEntity_Writing</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(OMLegalEntity, TaxInformationLegalEntity_IN), FormDataSourceEventType::Writing)]
    public static void TaxInformationLegalEntity_Writing(FormDataSource dataSource, FormDataSourceEventArgs e)
    {
        FormRun form = dataSource.formRun();
        CompanyInfo cInfo = form.datasource(formdatasourcestr(OMLegalEntity, CompanyInfo)).cursor();
        if (cInfo)
        {
            changecompany(cInfo.DataArea)
            {
                TaxInformationLegalEntity_IN table = dataSource.cursor();
                table.LegalEntity = cInfo.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInformationLegalEntity_InitValue</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(OMLegalEntity, TaxInformationLegalEntity_IN), FormDataSourceEventType::InitValue)]
    public static void TaxInformationLegalEntity_InitValue(FormDataSource dataSource, FormDataSourceEventArgs e)
    {
        TaxInformationLegalEntity_IN table = dataSource.cursor();
        table.panStatus = TaxPermanentAccountStatus_IN::NotAvailable;
        dataSource.object(fieldNum(TaxInformationLegalEntity_IN,panNumber)).allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInformationLegalEntity_MinistryType_Modified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(OMLegalEntity, TaxInformationLegalEntity_IN, MinistryType), FormDataFieldEventType::Modified)]
    public static void TaxInformationLegalEntity_MinistryType_Modified(FormDataObject dataField, FormDataFieldEventArgs e)
    {
        FormDataSource taxInformationLegalEntity_IN_ds = dataField.dataSource();
        TaxInformationLegalEntity_IN table = taxInformationLegalEntity_IN_ds.cursor();
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,MinistryName)).visible(TaxWithholdParameters_IN::checkTaxParameters() && table.MinistryType != TaxWithholdMinistryType_IN::Regular);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInformationLegalEntity_MinistryType_PANStatus</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(OMLegalEntity, TaxInformationLegalEntity_IN, PANStatus), FormDataFieldEventType::Modified)]
    public static void TaxInformationLegalEntity_MinistryType_PANStatus(FormDataObject dataField, FormDataFieldEventArgs e)
    {
        FormDataSource taxInformationLegalEntity_IN_ds = dataField.dataSource();
        TaxInformationLegalEntity_IN table = taxInformationLegalEntity_IN_ds.cursor();
        if (table.panStatus == TaxPermanentAccountStatus_IN::NotAvailable)
        {
            taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,panNumber)).allowEdit(false);
        }
        else
        {
            taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,panNumber)).allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInformationLegalEntity_TypeOfDeductor_Modified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(OMLegalEntity, TaxInformationLegalEntity_IN, TypeOfDeductor), FormDataFieldEventType::Modified)]
    public static void TaxInformationLegalEntity_TypeOfDeductor_Modified(FormDataObject dataField, FormDataFieldEventArgs e)
    {
        FormDataSource taxInformationLegalEntity_IN_ds = dataField.dataSource();
        OMLegalEntityExtension::updateTaxWithholdInfo_IN(taxInformationLegalEntity_IN_ds, taxInformationLegalEntity_IN_ds.cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateDelete</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(OMLegalEntity, CompanyInfo), FormDataSourceEventType::ValidatingDelete)]
    public static void ValidateDelete(FormDataSource companyInfo_ds, FormDataSourceEventArgs e)
    {
        #define.datCompany('DAT')
        CompanyInfo companyInfo = companyInfo_ds.cursor();
        FormRun form = companyInfo_ds.formRun();

        if (OMLegalEntityExtension::hasPostedTransactions(companyInfo))
        {
            throw error("@ApplicationCommon:OMLegalEntity_DeletionError");
        }

        if ( !strCmp(strUpr(companyInfo.DataArea), #datCompany) )
        {
            throw error("@SYS330787");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VatNum_JumpRef</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(OMLegalEntity, VATNum), FormControlEventType::JumpRef)]
    public static void VatNum_JumpRef(FormControl vatnum, FormControlEventArgs e)
    {
        if (TaxVATNumTable::taxVATNumTableEnabled())
        {
            FormRun omLegalEntityForm = vatnum.formRun();
            FormDataSource companyInfoDs = omLegalEntityForm.dataSource(formdatasourcestr(OMLegalEntity, CompanyInfo));
            CompanyInfo cInfo = companyInfoDs.cursor();
            TaxVATNumTable::jumpRefVATNum(cInfo, omLegalEntityForm, fieldId2name(tableNum(CompanyInfo), fieldNum(CompanyInfo, vatNum)));
            FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VatNum_Lookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(OMLegalEntity, ImportVATNum), FormControlEventType::Lookup),
     FormControlEventHandler(formcontrolstr(OMLegalEntity, VATNum), FormControlEventType::Lookup)]
    public static void VatNum_Lookup(FormControl _vatNumControl, FormControlEventArgs _eventArgs)
    {
        if (TaxVATNumTable::taxVATNumTableEnabled())
        {
            FormRun omLegalEntityForm = _vatNumControl.formRun();
            FormDataSource companyInfoDs = omLegalEntityForm.dataSource(formdatasourcestr(OMLegalEntity, CompanyInfo));
            CompanyInfo cInfo = companyInfoDs.cursor();
            TaxVATNumTable::lookupVATNum(_vatNumControl, cInfo);
            FormControlCancelableSuperEventArgs cancelableEventArgs = _eventArgs as FormControlCancelableSuperEventArgs;
            cancelableEventArgs.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportVatNum_JumpRef</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(OMLegalEntity, ImportVatNum), FormControlEventType::JumpRef)]
    public static void ImportVatNum_JumpRef(FormControl importVatNum, FormControlEventArgs e)
    {
        if (TaxVATNumTable::taxVATNumTableEnabled())
        {
            FormRun omLegalEntityForm = importVatNum.formRun();
            FormDataSource companyInfoDs = omLegalEntityForm.dataSource(formdatasourcestr(OMLegalEntity, CompanyInfo));
            CompanyInfo cInfo = companyInfoDs.cursor();
            TaxVATNumTable::lookupVATNum(importVATNum,cInfo);
            FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a legal entity has any posted transactions and journals. 
    /// </summary>
    /// <param name = "_companyInfo">The legal entity to be verified.</param>
    /// <returns>True if there are posted transactions; otherwise, false.</returns>
    private static boolean hasPostedTransactions(CompanyInfo _companyInfo)
    {
        boolean hasPostedTransactions = true;

        LedgerJournalTable ledgerJournalTable;

        changecompany(_companyInfo.DataArea)
        {
            select firstonly RecId from ledgerJournalTable
                where ledgerJournalTable.Posted == NoYes::Yes;
        }

        if (ledgerJournalTable.RecId == 0)
        {
            hasPostedTransactions = GeneralJournalEntry::existForLedger(Ledger::findByLegalEntity(_companyInfo.RecId).RecId);
        } 

        return hasPostedTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AllowEditPrintCorrInvoiceLabelEffDate_DE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method allows or restricts editing of the <c>Print Corrective invoice label effective date</c> field
    ///    depending on the value of the <c>Print Corrective invoice label</c> field.
    /// </summary>
    private static void AllowEditPrintCorrInvoiceLabelEffDate_DE(FormDataSource dataSource)
    {
        //Bug 1019211 tracking refactoring this into form extension
        //including the controls added to this form.
        CompanyInfo ci = dataSource.cursor() as CompanyInfo;

        dataSource.object(fieldNum(CompanyInfo, PrintCorrInvoiceLabelEffDate_DE)).allowEdit(ci.PrintCorrInvoiceLabel_DE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateTaxWithholdInfo_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update India withholding tax information.
    /// </summary>
    /// <param name = "taxInformationLegalEntity_IN_ds">Form data source taxInformationLegalEntity_IN</param>
    /// <param name = "_taxInformationLegalEntity_IN">active buffer of TaxInformationLegalEntity_IN</param>
    public static void UpdateTaxWithholdInfo_IN(FormDataSource taxInformationLegalEntity_IN_ds, TaxInformationLegalEntity_IN _taxInformationLegalEntity_IN)
    {
        boolean flag;

        flag = TaxWithholdParameters_IN::checkTaxParameters();

        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,TypeOfDeductor)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,paoCode)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,ddoCode)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,paoRegNum)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,ddoRegNum)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,MinistryType)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,MinistryName)).visible(flag && _taxInformationLegalEntity_IN.MinistryType != TaxWithholdMinistryType_IN::Regular);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,MinistryCode)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,StateCode)).visible(flag);
        taxInformationLegalEntity_IN_ds.object(fieldnum(TaxInformationLegalEntity_IN,PANStatus)).visible(flag);

        flag = conFind([TypeOfDeductor_IN::CentralGovernmentA,TypeOfDeductor_IN::StateGovernmentS,
                    TypeOfDeductor_IN::StatutoryBodyE,TypeOfDeductor_IN::StatutoryBodyD,
                    TypeOfDeductor_IN::AutonomousBodyG,TypeOfDeductor_IN::AutonomousBodyH,
                    TypeOfDeductor_IN::LocalAuthorityL,TypeOfDeductor_IN::LocalAuthorityN
                    ],
                    _taxInformationLegalEntity_IN.TypeOfDeductor);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,paoCode)).allowEdit(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,ddoCode)).allowEdit(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,paoCode)).mandatory(_taxInformationLegalEntity_IN.isMandatoryTaxWithholdInfo(fieldStr(TaxInformationLegalEntity_IN,paoCode)));
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,ddoCode)).mandatory(_taxInformationLegalEntity_IN.isMandatoryTaxWithholdInfo(fieldStr(TaxInformationLegalEntity_IN,ddoCode)));

        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,paoRegNum)).allowEdit(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,ddoRegNum)).allowEdit(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,MinistryType)).allowEdit(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,MinistryName)).allowEdit(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,MinistryCode)).allowEdit(flag && _taxInformationLegalEntity_IN.MinistryType != TaxWithholdMinistryType_IN::Others);

        flag = conFind([TypeOfDeductor_IN::StateGovernmentS,
                    TypeOfDeductor_IN::StatutoryBodyE,
                    TypeOfDeductor_IN::AutonomousBodyH,
                    TypeOfDeductor_IN::LocalAuthorityN
                    ],
                    _taxInformationLegalEntity_IN.TypeOfDeductor);

        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,StateCode)).allowEdit(flag);
        taxInformationLegalEntity_IN_ds.object(fieldNum(TaxInformationLegalEntity_IN,StateCode)).mandatory(_taxInformationLegalEntity_IN.isMandatoryTaxWithholdInfo(fieldStr(TaxInformationLegalEntity_IN,StateCode)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateTaxRegulationButton</Name>
				<Source><![CDATA[
    public static void UpdateTaxRegulationButton(FormRun OMLegalEntityForm, CompanyInfo cInfo)
    {
        var TaxGSTHSTAccountId_CA = OMLegalEntityForm.design().controlName(formcontrolstr(OMLegalEntity, TaxGSTHSTAccountId_CA)) as FormStringControl;
        TaxGSTHSTAccountId_CA.enabled(cInfo.BusinessNumber_CA != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPersonName_AELookup</Name>
				<Source><![CDATA[
    [
        FormControlEventHandler(formcontrolstr(OMLegalEntity, VATGroup_DeclarantName_AE), FormControlEventType::Lookup),
        FormControlEventHandler(formcontrolstr(OMLegalEntity, VATGroup_TaxablePersonName_AE), FormControlEventType::Lookup),
        FormControlEventHandler(formcontrolstr(OMLegalEntity, VATGroup_TaxableAgentName_AE), FormControlEventType::Lookup)
    ]
    public static void DirPersonName_AELookup(FormControl _formControl, FormControlEventArgs _e)
    {
        OMLegalEntityExtension::lookupDirPersonName_AE(_formControl);

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;

        if (ce)
        {
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxableAgencyName_AELookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formcontrolstr(OMLegalEntity, VATGroup_TaxableAgencyName_AE), FormControlEventType::Lookup)]
    public static void TaxableAgencyName_AELookup(FormControl _formControl, FormControlEventArgs _e)
    {
        OMLegalEntityExtension::lookupTaxableAgencyName_AE(_formControl);

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;

        if (ce)
        {
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDirPersonName_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for the taxable person or agent or declarant name.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> control that the lookup will be attached to.
    /// </param>
    public static Common lookupDirPersonName_AE(FormReferenceControl _formReferenceControl)
    {
        Query query = new Query();
        QueryBuildDataSource dirPartyTableDS = query.addDataSource(tableNum(DirPartyTable));
        dirPartyTableDS.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(queryValue(Tablenum(DirPerson)));

        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(DirPartyTable), _formReferenceControl);
        sysTableLookup.addLookupfield(fieldNum(DirPartyTable, Name));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxableAgencyName_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for the agency name.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> control that the lookup will be attached to.
    /// </param>
    public static Common lookupTaxableAgencyName_AE(FormReferenceControl _formReferenceControl)
    {
        Query query = new Query();
        QueryBuildDataSource dirPartyTableDS = query.addDataSource(tableNum(DirPartyTable));
        dirPartyTableDS.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(queryValue(Tablenum(DirOrganization)));

        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(DirPartyTable), _formReferenceControl);
        sysTableLookup.addLookupfield(fieldNum(DirPartyTable, Name));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>