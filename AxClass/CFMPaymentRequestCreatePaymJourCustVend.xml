<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestCreatePaymJourCustVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CFMPaymentRequestCreatePaymJourCustVend extends CFMPaymentRequestCreatePaymJournal
{
    CustVendCreatePaymJournal createPaymJournalOnCustVendDebt;
    CFMCustVendPaymProposal paymentRequestPaymProposal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFilterForVendTransOpen</Name>
				<Source><![CDATA[
    protected void addFilterForVendTransOpen()
    {
        QueryBuildDataSource qbdsPaymentRequest = paymentRequestQuery.dataSourceTable(tableNum(CFMPaymentRequestTable));
        QueryBuildDataSource qbdsVendTransOpen;

        if (accountType == CFMAccountType::Vend)
        {
            qbdsVendTransOpen = qbdsPaymentRequest.addDataSource(tableNum(VendTransOpen));
        }
        else
        {
            qbdsVendTransOpen = qbdsPaymentRequest.addDataSource(tableNum(CustTransOpen));
        }

        qbdsVendTransOpen.relations(true);
        qbdsVendTransOpen.joinMode(JoinMode::NoExistsJoin);

        QueryBuildDataSource qbdsPaymentLink = qbdsPaymentRequest.addDataSource(tableNum(CFMPaymentRequestPaymentLink));
        qbdsPaymentLink.relations(true);
        qbdsPaymentLink.joinMode(JoinMode::NoExistsJoin);

    }

]]></Source>
			</Method>
			<Method>
				<Name>addPaymentRequestToPayment</Name>
				<Source><![CDATA[
    protected void addPaymentRequestToPayment(CFMPaymentRequestTable _paymentRequest)
    {
        paymentRequestPaymProposal.parmPaymProposalCalcPaym().parmPaymCurrency(_paymentRequest.PaymentCurrency);
        paymentRequestPaymProposal.parmPaymProposalCalcPaym().parmPaymentRequest(_paymentRequest);

        paymentRequestPaymProposal.addPaymentRequest(_paymentRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymProposalOnCustVendDebt</Name>
				<Source><![CDATA[
    protected void createPaymProposalOnCustVendDebt()
    {
        createPaymJournalOnCustVendDebt = CustVendCreatePaymJournal::createFromCashFlowJournal(accountType,
            paymentRequestJournalTable.RecId,
            this.getPaymentJournalTable().JournalNum,
            companies,
            paymentRequestQuery,
            this.separatePaymentPerCompany());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessJournal</Name>
				<Source><![CDATA[
    protected void postProcessJournal()
    {
        if (createPaymJournalOnCustVendDebt)
        {
            CustVendPaymProposalTransferToJournal paymTransfer = CustVendPaymProposalTransferToJournal::construct();

            paymTransfer.parmPaymProposal(createPaymJournalOnCustVendDebt.paymProposal());
            paymTransfer.runOperation();

            createPaymJournalOnCustVendDebt.paymProposal().clear();
        }

        if (paymentRequestPaymProposal)
        {
            paymentRequestPaymProposal.clear();
        }

        this.clearJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessJournal</Name>
				<Source><![CDATA[
    protected void preProcessJournal()
    {
        this.createPaymProposalOnCustVendDebt();
        this.addFilterForVendTransOpen();
        paymentRequestPaymProposal = CFMCustVendPaymProposal::newLedgerJournal(this.getPaymentJournalTable().JournalNum);

        CustVendPaymProposalCalcPaym paymProposalCalcPaym = paymentRequestPaymProposal.parmPaymProposalCalcPaym();
        paymProposalCalcPaym.parmPaymDatePrinciple(CustVendCreatePaymProposalType::DueDate);
        paymProposalCalcPaym.parmFromDate(dateNull());
        paymProposalCalcPaym.parmToDate(dateMax());
        paymentRequestPaymProposal.parmIncludeInvoicesFromOtherCompanies(true);
        paymentRequestPaymProposal.parmIsGeneretedFromPaymentSchedule(paymentRequestJournalTable.RecId);
        paymentRequestPaymProposal.parmCreatePaymPerInvoiceCompany(this.separatePaymentPerCompany() == NoYes::Yes ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>separatePaymentPerCompany</Name>
				<Source><![CDATA[
    private NoYes separatePaymentPerCompany()
    {
        NoYes ret;

        switch (accountType)
        {
            case CFMAccountType::Cust:
                ret = this.parmSeparatePaymentCompanyCust();
                break;

            case CFMAccountType::Vend:
                ret = this.parmSeparatePaymentCompanyVend();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>