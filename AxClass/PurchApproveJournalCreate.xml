<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchApproveJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchApproveJournalCreate
extends PurchInvoiceJournalCreate
{
    LedgerJournalTrans      ledgerJournalTrans;
    TransDate               origTransDate;
    TransDate               transDate;
    Voucher                 origVoucher;
    LedgerJournalId         oldVendTransJournalNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal can be created.
    /// </summary>
    /// <returns>
    /// true if the journal can be created; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        boolean ok;
        LedgerJournalTrans ledgerJournalTransLocal;

        VendInvoiceTotalValidationResult localVendInvoiceTotalValidationResult;

        ok = super();

        if (ok && vendInvoiceInfoTable.Hold == NoYes::No)
        {
            this.findInvoiceJour();

            select firstonly ledgerJournalTransLocal
                where ledgerJournalTransLocal.JournalNum == ledgerJournalTrans.JournalNum
                   && ledgerJournalTransLocal.Voucher == ledgerJournalTrans.Voucher
                   && ledgerJournalTransLocal.PurchLedgerPosting == ArrivalPostingType::Vendor;

            if (vendInvoiceJour.InvoiceAmount + ledgerJournalTransLocal.amount() != 0)
            {
                ok = checkFailed(strFmt("@SYS28649",vendInvoiceJour.InvoiceAmount,-ledgerJournalTransLocal.amount()));
            }

            if (purchTotals.purchCurrency() != vendInvoiceJour.CurrencyCode)
            {
                ok = checkFailed("@SYS74898");
                return ok;
            }

            localVendInvoiceTotalValidationResult = VendDocumentTableType_ApproveJournal::checkTotalInvoiceAmount(purchTotals, vendInvoiceJour, ledgerJournalTransLocal);

            if (localVendInvoiceTotalValidationResult && !localVendInvoiceTotalValidationResult.isSuccess)
            {
                ok = checkFailed(localVendInvoiceTotalValidationResult.resultMessage);
            }
        }

        return ok && (!localVendInvoiceTotalValidationResult || localVendInvoiceTotalValidationResult.isSuccess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an invoice for duplicate numbers before posting.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    protected boolean checkDuplicateInvoice()
    {
        // Always allow duplicates, as the voucher for this approval journal will have the same number
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when updating the sales order, the purchase order, or the request for
    /// quote.
    /// </summary>
    protected void createJournalHeader()
    {
        // If user is posting, update the record recorded from the invoice register, otherwise make a new record for print etc.
        if (this.proforma() || vendInvoiceInfoTable.Hold == NoYes::Yes)
        {
            vendInvoiceJour.insert();
        }
        else
        {
            vendInvoiceJour.update();

            // Updating LedgerJournalVoucherChanged if the voucher or date have been changed
            if (origVoucher != vendInvoiceJour.LedgerVoucher || origTransDate != transDate)
            {
                LedgerJournalVoucherChanged::modifyOrigVoucherDate(ledgerJournalTrans.JournalNum, origVoucher, origTransDate, vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    protected DocumentDate documentDate()
    {
        VendInvoiceInfoTable localVendInvoiceInfoTable;

        localVendInvoiceInfoTable.Ordering = this.parmDocumentStatus();
        localVendInvoiceInfoTable.defaultField(fieldNum(VendInvoiceInfoTable, DocumentDate), null, ledgerJournalTrans);
        return localVendInvoiceInfoTable.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNum</Name>
				<Source><![CDATA[
    protected Num  documentNum()
    {
        VendInvoiceInfoTable localVendInvoiceInfoTable;

        localVendInvoiceInfoTable.Ordering = this.parmDocumentStatus();
        localVendInvoiceInfoTable.defaultField(fieldNum(VendInvoiceInfoTable, DocumentNum), null, ledgerJournalTrans);
        return localVendInvoiceInfoTable.DocumentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJour</Name>
				<Source><![CDATA[
    protected void  findInvoiceJour(boolean  _forUpdate = false)
    {
        LedgerJournalTrans  localLedgerJournalTrans;

        vendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(ledgerJournalTrans.Invoice,
                                                             this.parmOrigVoucher(),
                                                             this.parmOrigTransDate(),
                                                             vendInvoiceInfoTable.InvoiceAccount,
                                                             _forUpdate);

        if (!vendInvoiceJour)
        {
            select firstonly Invoice, Voucher, TransDate from localLedgerJournalTrans
                where localLedgerJournalTrans.TransferredTo == ledgerJournalTrans.JournalNum;

            vendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(localLedgerJournalTrans.Invoice,
                                                                 localLedgerJournalTrans.Voucher,
                                                                 localLedgerJournalTrans.TransDate,
                                                                 vendInvoiceInfoTable.InvoiceAccount,
                                                                 _forUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger voucher from the vender invoice journal.
    /// </summary>
    /// <returns>
    /// The ledger voucher of the vender invoice journal.
    /// </returns>
    protected Voucher getCostLedgerVoucher()
    {
        return vendInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the journal.
    /// </summary>
    /// <returns>
    /// A journal number.
    /// </returns>
    protected Num getJournalNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return conPeek(this.getNumAndVoucher(), 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void  initJournalHeader()
    {
        #ISOCountryRegionCodes
        // <GEEU>
        #EECountryRegionCodes
        // </GEEU>
        PurchTable  localPurchTable;
        VendTable   localVendTable;

        if (!vendInvoiceInfoTable.isNonPO())
        {
            localPurchTable = vendInvoiceInfoTable.purchTable();
        }

        if (!this.proforma() || vendInvoiceInfoTable.Hold == NoYes::No)
        {
            // User is posting, update the record recorded from the invoice register, otherwise make a new record for print etc.
            this.findInvoiceJour(true);
        }

        if (vendInvoiceInfoTable.Hold == NoYes::Yes)
        {
            // Document on hold should always be proforma
            vendInvoiceJour.Proforma        = true;
        }
        else
        {
            vendInvoiceJour.Proforma            = this.proforma();
        }

        vendInvoiceJour.ParmId                  = purchParmUpdate.ParmId;
        
        // <GIT>
        boolean useOriginalVoucher = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && VendInvoiceApprovalUseOriginVoucher_ITFlight::instance().isEnabled();
        // </GIT>
        
        if (vendInvoiceJour.InvoiceDate != this.invoiceDate() && !useOriginalVoucher)
        {
            vendInvoiceJour.LedgerVoucher       = this.getVoucher();
        }

        this.initNumberSeq_IT();

        vendInvoiceJour.DocumentDate            = this.documentDate();
        vendInvoiceJour.InvoiceDate             = this.invoiceDate();
        vendInvoiceJour.DocumentNum             = this.documentNum();
        vendInvoiceJour.PaymId                  = this.paymentId();
        vendInvoiceJour.PurchId                 = vendInvoiceInfoTable.PurchId;
        vendInvoiceJour.SourceDocumentHeader    = vendInvoiceInfoTable.SourceDocumentHeader;
        vendInvoiceJour.SourceDocumentLine      = vendInvoiceInfoTable.SourceDocumentLine;

        if (vendInvoiceInfoTable.isNonPO())
        {
            localVendTable = vendInvoiceInfoTable.vendTable_InvoiceAccount();

            vendInvoiceJour.VendGroup           = localVendTable.VendGroup;
            vendInvoiceJour.TaxGroup            = vendInvoiceInfoTable.TaxGroup;

            vendInvoiceJour.PurchaseType        = PurchaseType::Purch;
            vendInvoiceJour.OrderAccount        = vendInvoiceInfoTable.OrderAccount;
            vendInvoiceJour.ItemBuyerGroupId    = localVendTable.ItemBuyerGroupId;
            vendInvoiceJour.DlvTerm             = localVendTable.DlvTerm;
            vendInvoiceJour.DlvMode             = localVendTable.DlvMode;

            LogisticsPostalAddress deliveryPostalAddress = LogisticsPostalAddress::findRecId(vendInvoiceInfoTable.DeliveryPostalAddress);
            vendInvoiceJour.CountryRegionId     = deliveryPostalAddress.CountryRegionId;
            vendInvoiceJour.State               = deliveryPostalAddress.State;

            vendInvoiceJour.LanguageId          = DirPartyTable::findRec(localVendTable.Party).LanguageId;

            vendInvoiceJour.PaymentSched        = vendInvoiceInfoTable.PaymentSched;

            vendInvoiceJour.PostingProfile      = vendInvoiceInfoTable.PostingProfile;
        }
        else
        {
            vendInvoiceJour.VendGroup           = localPurchTable.VendGroup;
            vendInvoiceJour.TaxGroup            = localPurchTable.TaxGroup;

            vendInvoiceJour.PurchaseType        = localPurchTable.PurchaseType;
            vendInvoiceJour.OrderAccount        = localPurchTable.OrderAccount;
            vendInvoiceJour.ItemBuyerGroupId    = localPurchTable.ItemBuyerGroupId;
            vendInvoiceJour.DlvTerm             = localPurchTable.DlvTerm;
            vendInvoiceJour.DlvMode             = localPurchTable.DlvMode;
            vendInvoiceJour.ReturnItemNum       = localPurchTable.ReturnItemNum;

            LogisticsPostalAddress deliveryAddress = localPurchTable.deliveryAddress();
            vendInvoiceJour.CountryRegionId     = deliveryAddress.CountryRegionId;
            vendInvoiceJour.State               = deliveryAddress.State;

            vendInvoiceJour.LanguageId          = localPurchTable.LanguageId;
            vendInvoiceJour.PaymentSched        = localPurchTable.PaymentSched;
            // <GEEU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
            {
                vendInvoiceJour.OffsessionId_RU     = vendInvoiceInfoTable.vendInvoiceInfoTable_Officials().OffSessionId;
            }
            // </GEEU>
            vendInvoiceJour.PostingProfile      = localPurchTable.PostingProfile;
            vendInvoiceJour.Listcode            = localPurchTable.ListCode;
            vendInvoiceJour.euSalesList         = "";
        }

        vendInvoiceJour.initApprovalFromPurchTotals(purchTotals);

        vendInvoiceJour.CostLedgerVoucher       = this.getCostLedgerVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigTransDate</Name>
				<Source><![CDATA[
    public  TransDate parmOrigTransDate(TransDate _origTransDate = origTransDate)
    {
        origTransDate = _origTransDate;
        return origTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigVoucher</Name>
				<Source><![CDATA[
    public Voucher parmOrigVoucher(Voucher _origVoucher = origVoucher)
    {
        origVoucher = _origVoucher;
        return origVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentId</Name>
				<Source><![CDATA[
    protected PaymId paymentId()
    {
        VendInvoiceInfoTable localVendInvoiceInfoTable;

        localVendInvoiceInfoTable.Ordering = this.parmDocumentStatus();
        localVendInvoiceInfoTable.defaultField(fieldNum(VendInvoiceInfoTable, PaymId), null, ledgerJournalTrans);
        return localVendInvoiceInfoTable.PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCreditMaxCheck</Name>
				<Source><![CDATA[
    protected boolean skipCreditMaxCheck()
    {
        /* Do not check credit max as it has already been checked when the invoice was first registered */
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchApproveJournalCreate construct()
    {
        return new PurchApproveJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumberSeq_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the number sequence object.
    /// </summary>
    /// <remarks>
    /// Number sequence is used in Italian sales tax book functionality and must be initialized.
    /// </remarks>
    private void initNumberSeq_IT()
    {
        if (!this.numberSeq
            && !this.proforma()
            && MultipleTaxIdReportingHelper::isLegalEntityOrTaxInCountryRegion(
                this.parmTax(), [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
             numberSeq = this.allocateNumAndVoucher();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>