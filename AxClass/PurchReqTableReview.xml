<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqTableReview</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqTableReview</c> class is used for populating the temporary review tables.
/// </summary>
public class PurchReqTableReview
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateReviewAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a review assignment table buffer for the given review summary.
    /// </summary>
    /// <param name="_context">
    /// The review summary.
    /// </param>
    /// <returns>
    /// A table buffer that contains all of the reviewers for the current review step.
    /// </returns>
    public PurchReqTableTmpReviewAssignment populateReviewAssignment(PurchReqTableTmpReviewSummary _context)
    {
        PurchReqTableTmpReviewAssignment    reviewAssignment;
        container                           con;
        container                           subCon;
        int                                 counter;

        con = PurchReqTableReview::populateReviewAssignmentServer(_context.RecId, _context.WorkflowStepTable, _context.WorkflowTrackingStatusTable);

        for (counter = 1; counter <= conLen(con); counter++)
        {
            subCon = conPeek(con, counter);

            reviewAssignment.initValue();
            reviewAssignment.PurchReqTableTmpReviewSummary = _context.RecId;

            [ reviewAssignment.Reviewer,
              reviewAssignment.Action,
              reviewAssignment.ActionDate] = conPeek(con, counter);

            reviewAssignment.insert();
        }

        return reviewAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReviewSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a review summary table buffer for the given requisition.
    /// </summary>
    /// <param name="_context">
    /// The requisition for which to obtain the review summary.
    /// </param>
    /// <returns>
    /// A table buffer that contains the review summary.
    /// </returns>
    public PurchReqTableTmpReviewSummary populateReviewSummary(PurchReqTable _context)
    {
        PurchReqTableTmpReviewSummary purchReqTableTmpReviewSummary;

        purchReqTableTmpReviewSummary.initValue();

        [ purchReqTableTmpReviewSummary.Status,
          purchReqTableTmpReviewSummary.StatusSince,
          purchReqTableTmpReviewSummary.Step,
          purchReqTableTmpReviewSummary.StepSince,
          purchReqTableTmpReviewSummary.WorkflowTrackingStatusTable,
          purchReqTableTmpReviewSummary.WorkflowStepTable ] = PurchReqTableReview::populateReviewSummaryServer(_context.RecId);

        purchReqTableTmpReviewSummary.insert();

        return purchReqTableTmpReviewSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReviewAssignmentServer</Name>
				<Source><![CDATA[
        private static container populateReviewAssignmentServer(RefRecId _contextRecId, RefRecId _workflowStepRecId, RefRecId _workflowTrackingStatusRecId)
    {
        container                     con;
        WorkflowTrackingTable         workflowTracking;
        WorkflowTrackingWorkItem      workflowTrackingWorkItem;
        WorkflowWorkItemTable         workflowWorkItem;
        WorkflowWorkItemQueueAssignee workItemQueueAssignee;
        PurchReqReviewStatus          reviewStatus;
        Set                           reviewerSet       = new Set(Types::String);

        void checkAndAddAssignment(UserId _userId, PurchReqReviewStatus _reviewStatus, utcdatetime _date)
        {
            if (!reviewerSet.in(_userId))
            {
                reviewerSet.add(_userId);

                con += [[ _userId, _reviewStatus, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_date, DateTimeUtil::getUserPreferredTimeZone())) ]];
            }
        }

        // If the latest tracking record is for the creation of a line-item workflow then this method should return nothing
        select firstonly RecId, TrackingContext, TrackingType from workflowTracking
            order by CreatedDateTime desc
            where workflowTracking.WorkflowTrackingStatusTable == _workflowTrackingStatusRecId;
        if (workflowTracking.TrackingContext != WorkflowTrackingContext::LineItemElement ||
            workflowTracking.TrackingType    != WorkflowTrackingType::Creation)
        {
            // Check for a change request or a return (most likely a rejection); if one exists it trumps everything else (below this)
            select firstonly RecId, Type, UserId, CreatedDateTime from workflowWorkItem
                order by workflowWorkItem.CreatedDateTime desc
                    where workflowWorkItem.Status == WorkflowWorkItemStatus::Pending
                exists join workflowTrackingWorkItem
                    where workflowTrackingWorkItem.WorkflowWorkItemTable == workflowWorkItem.RecId
                join workflowTracking
                    where workflowTracking.RecId                       == workflowTrackingWorkItem.WorkflowTrackingTable &&
                          workflowTracking.TrackingContext             == WorkflowTrackingContext::WorkItem &&
                          workflowTracking.TrackingType                == WorkflowTrackingType::Creation &&
                          workflowTracking.WorkflowTrackingStatusTable == _workflowTrackingStatusRecId;
            if (workflowWorkItem && (workflowWorkItem.Type == WorkflowWorkItemType::RequestChange ||
                                     workflowWorkItem.Type == WorkflowWorkItemType::Return))
            {
                con += [[ workflowWorkItem.UserId, PurchReqReviewStatus::Pending, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(workflowWorkItem.CreatedDateTime, DateTimeUtil::getUserPreferredTimeZone())) ]];
            }
            else
            {
                while select RecId, Status, Queue, IsClaimed, UserId, CreatedDateTime from workflowWorkItem
                    exists join workflowTrackingWorkItem
                        where workflowTrackingWorkItem.WorkflowWorkItemTable == workflowWorkItem.RecId
                    join workflowTracking
                        where workflowTracking.RecId                       == workflowTrackingWorkItem.WorkflowTrackingTable &&
                              workflowTracking.TrackingContext             == WorkflowTrackingContext::WorkItem &&
                              workflowTracking.TrackingType                == WorkflowTrackingType::Creation &&
                              workflowTracking.WorkflowStepTable           == _workflowStepRecId &&
                              workflowTracking.WorkflowTrackingStatusTable == _workflowTrackingStatusRecId
                {
                    if (workflowWorkItem.Status == WorkflowWorkItemStatus::Completed)
                    {
                        reviewStatus = PurchReqReviewStatus::Approved;
                    }
                    else
                    {
                        reviewStatus = PurchReqReviewStatus::Pending;
                    }

                    if (workflowWorkItem.Queue && workflowWorkItem.IsClaimed == NoYes::No)
                    {
                        while select User from workItemQueueAssignee
                            where workItemQueueAssignee.WorkitemQueue == workflowWorkItem.Queue
                        {
                            checkAndAddAssignment(workItemQueueAssignee.User, reviewStatus, workflowWorkItem.CreatedDateTime);
                        }
                    }
                    else
                    {
                        checkAndAddAssignment(workflowWorkItem.UserId, reviewStatus, workflowWorkItem.CreatedDateTime);
                    }
                }
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReviewSummaryServer</Name>
				<Source><![CDATA[
        private static container populateReviewSummaryServer(RefRecId _purchReqTableRecId)
    {
        container                       con;
        PurchReqTable                   purchReqTable;
        PurchReqTableHistory            purchReqTableHistory;
        WorkflowTrackingStatusTable     workflowTrackingStatus;
        WorkflowTrackingTable           workflowTracking;
        utcdatetime                     validDate               = DateTimeUtil::utcNow();
        WorkflowStepName                stepName;
        TransDate                       stepSinceDate;
        PurchReqRequisitionStatus       status;
        TransDate                       statusSinceDate;
        RefRecId                        workflowTrackingStatusRecId;
        RefRecId                        workflowStepRecId;
        UserInfo                        userInfo;

        /* Get the current status */
        select firstonly validTimeState(validDate)
            CreatedDateTime, RequisitionStatus from purchReqTable
                where purchReqTable.RecId == _purchReqTableRecId

            outer join CreatedDateTime from purchReqTableHistory
                where purchReqTableHistory.PurchReqTable == purchReqTable.RecId

            outer join RecId from workflowTrackingStatus
                order by workflowTrackingStatus.CreatedDateTime desc
                where workflowTrackingStatus.ContextTableId == purchReqTable.TableId &&
                      workflowTrackingStatus.ContextRecId   == purchReqTable.RecId;

        /* line-item subworkflow */
        select firstonly RecId, Name, CreatedDateTime, TrackingContext, TrackingType from workflowTracking
            order by workflowTracking.CreatedDateTime desc
            where workflowTracking.WorkflowTrackingStatusTable == workflowTrackingStatus.RecId;
        if (workflowTracking.TrackingContext != WorkflowTrackingContext::LineItemElement ||
            workflowTracking.TrackingType    != WorkflowTrackingType::Creation)
        {
            /* Current step */
            select firstonly RecId, Name, CreatedDateTime, WorkflowStepTable
                from workflowTracking
                order by workflowTracking.CreatedDateTime desc
                    where workflowTracking.WorkflowTrackingStatusTable == workflowTrackingStatus.RecId &&
                          workflowTracking.TrackingContext             == WorkflowTrackingContext::Step &&
                          workflowTracking.TrackingType                == WorkflowTrackingType::Creation;
        }

        if (purchReqTable != null)
        {
            status = purchReqTable.RequisitionStatus;
            userInfo = xUserInfo::find(false, curUserId());

            if (purchReqTableHistory != null)
            {
                statusSinceDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(purchReqTableHistory.CreatedDateTime, userInfo.PreferredTimeZone));
            }
            else
            {
                statusSinceDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(purchReqTable.CreatedDateTime, userInfo.PreferredTimeZone));
            }

            if (workflowTracking != null)
            {
                stepName                    = workflowTracking.Name;
                stepSinceDate               = DateTimeUtil::date(workflowTracking.CreatedDateTime);
                workflowTrackingStatusRecId = workflowTrackingStatus.RecId;
                workflowStepRecId           = workflowTracking.WorkflowStepTable;
            }

            con = [status, statusSinceDate, stepName, stepSinceDate, workflowTrackingStatusRecId, workflowStepRecId];
        }

        return con;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>