<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostReportController</c> class handles the report initialization for both the
///    <c>InventCostValue</c> and the <c>InventCostVariances</c> reports.
/// </summary>
class InventCostReportController extends SrsReportRunController implements BatchRetryable
{
    #define.costValueReportPrefix       ('InventCostValue.')
    #define.costVariancesReportPrefix   ('InventCostVariances.')
    #define.reportPostFix               ('Report')

    CostSelectPeriodState costSelectPeriodState;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    public void preRunModifyContract()
    {
        InventCostReportContract inventCostReportContract = this.parmReportContract().parmRdpContract() as InventCostReportContract;
        inventCostReportContract.parmSite(InventCostReportController::getSite(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey())));
        inventCostReportContract.parmReportName(this.parmReportName());

        this.parmReportContract().parmReportName(this.parmReportName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        super();

        if (costSelectPeriodState)
        {
            var inventCostReportContract = this.parmReportContract().parmRdpContract() as InventCostReportContract;
            var inventCostDateCodeContract = inventCostReportContract.parmInventCostDateCodeContract();

            inventCostDateCodeContract.parmDateCode(costSelectPeriodState.parmDateCode());
            inventCostDateCodeContract.parmFromDate(costSelectPeriodState.parmFromDate());
            inventCostDateCodeContract.parmToDate(costSelectPeriodState.parmToDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the dialog values for errors.
    /// </summary>
    /// <returns>
    ///    true if an error has occurred in the dialog values; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean isValid = super();
        InventCostReportContract    inventCostReportContract = this.parmReportContract().parmRdpContract() as InventCostReportContract;

        if (inventCostReportContract.parmAxis() == InventCostAxis::CostGroup &&
            inventCostReportContract.parmDetail() == InventCostDetail::Decomposition)
        {
            isValid = checkFailed(strFmt("@SYS118191", InventCostDetail::Decomposition, InventCostAxis::CostGroup));
        }

        if (inventCostReportContract.parmInventCostDateCodeContract().parmFromDate() > inventCostReportContract.parmInventCostDateCodeContract().parmToDate())
        {
            isValid = checkFailed("@SYS16982");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostReportController construct()
    {
        return new InventCostReportController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a label according to the caller, that is, the menu item name.
    /// </summary>
    /// <param name="_menuItemName">
    ///    The menu item name for which to find the prefix.
    /// </param>
    /// <returns>
    ///    The label that corresponds to the menu item.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The caller is neither the <c>InventCostValue</c> nor the <c>InventCostVariances</c>.
    /// </exception>
    protected static LabelType getDialogCaption(MenuItemName _menuItemName)
    {
        // Return label according to menu item
        // If the menu item is unkown, throw an exception.
        switch (_menuItemName)
        {
            case menuitemOutputStr(InventCostValue):
                return "@SYS118178";
            case menuitemOutputStr(InventCostVariances):
                return "@SYS118182";
            default:
                throw error("@SYS118190");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportNamePrefix</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the report name prefix for the menu item that called it.
    /// </summary>
    /// <param name="_menuItemName">
    ///    The menu item name for which to find the prefix.
    /// </param>
    /// <returns>
    ///    The report name prefix.
    /// </returns>
    /// <remarks>
    ///    Report name prefixes are defined in the class declaration.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The caller is neither the <c>InventCostValue</c> report nor the <c>InventCostVariances</c> report.
    /// </exception>
    protected static SRSCatalogItemName getReportNamePrefix(MenuItemName _menuItemName)
    {
        // Return reportname according to menu item
        // If the menu item is unkown, throw an exception.
        switch (_menuItemName)
        {
            case menuitemOutputStr(InventCostValue):
                return #costValueReportPrefix;
            case menuitemOutputStr(InventCostVariances):
                return #costVariancesReportPrefix;
            default:
                throw error("@SYS118190");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the site information from the query.
    /// </summary>
    /// <param name="_query">
    ///    The query from which to extract the site form.
    /// </param>
    /// <returns>
    ///    The site information that was set in the query.
    /// </returns>
    /// <remarks>
    ///    The site is stored as a range on the <c>InventDim</c> data source table in the query that has been
    ///    built in the dialog form.
    /// </remarks>
    protected static InventSiteId getSite(Query _query)
    {
        InventSiteId            site = '';

        // Extract site range from query
        // Site is a range on the InventDim datasource
        QueryBuildDataSource qbdsInventDim = _query.dataSourceTable(tableNum(InventDim));
        if (qbdsInventDim)
        {
            // Get infolog curent line counter in order to rollback an error (if the siterange has been removed)
            int infologLinesCounter = infologLine();

            try
            {
                // Get site from range
                QueryBuildRange qbrSiteId = qbdsInventDim.rangeField(fieldNum(InventDim, InventSiteId));
                if (qbrSiteId)
                {
                    site = qbrSiteId.value();
                }
            }
            catch
            {
                // Clean up infolog.
                infolog.clear(infologLinesCounter);
            }
        }

        return site;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostSelectPeriodState</Name>
				<Source><![CDATA[
    protected void parmCostSelectPeriodState(CostSelectPeriodState _costSelectPeriodState)
    {
        costSelectPeriodState = _costSelectPeriodState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventCostReportController  controller = new InventCostReportController();

        if (!_args)
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        str reportName = InventCostReportController::getReportNamePrefix(_args.menuItemName()) + #reportPostFix;

        var costSelectPeriodState = _args.parmObject() as CostSelectPeriodState;
        controller.parmCostSelectPeriodState(costSelectPeriodState);

        controller.parmReportName(reportName);
        controller.parmDialogCaption(InventCostReportController::getDialogCaption(_args.menuItemName()));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
