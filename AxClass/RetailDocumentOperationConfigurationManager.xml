<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationConfigurationManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDocumentOperationConfigurationManager</c> class manages system wide configuration information for Document Operation Framework.
/// </summary>
internal class RetailDocumentOperationConfigurationManager
{
    internal const int MaximumConfigCacheSize = 4096; // Maximum objects to store in the configuration objects cache (the number of different operation types is not expected to be very large).

    internal static RetailDocumentOperationConfigurationManager instance = new RetailDocumentOperationConfigurationManager();

    private Map operationConfigCache;

    private boolean cachingEnabledIndicator;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Private construct of <c>RetailDocumentOperationConfigurationManager</c>. 
    /// </summary>
    private void new()
    {
        this.operationConfigCache = new Map(Types::String, Types::Class);
        this.cachingEnabledIndicator = true;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationConfiguration</Name>
				<Source><![CDATA[
    internal RetailDocumentOperationConfigurationBase getOperationConfiguration(RetailDocumentOperationOperationName _operationNAme)
    {
        RetailDocumentOperationConfigurationBase configObject = this.getOperationConfigFromCache(_operationName);
        if (!configObject)
        {
            configObject = this.createOperationConfiguration(_operationName);
            this.storeOperationConfigInCache(_operationName, configObject);
        }
        return configObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCachingEnabled</Name>
				<Source><![CDATA[
    internal void setCachingEnabled(boolean _enabled)
    {
        if (_enabled)
        {
            this.operationConfigCache = new Map(Types::String, Types::Class);
        }
        this.cachingEnabledIndicator = _enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumOperationRuntimeTimeToMonitorSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimum time in seconds after which monitor job needs to be monitored
    /// </summary>
    /// <returns>The minimum monitored task runtime in seconds</returns>
    internal int getMinimumOperationRuntimeTimeToMonitorSeconds()
    {
        return 20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationConfigFromCache</Name>
				<Source><![CDATA[
    protected RetailDocumentOperationConfigurationBase getOperationConfigFromCache(RetailDocumentOperationOperationName _operationName)
    {
        if (!this.cachingEnabledIndicator)
        {
            return null;
        }
        
        Map configurationObjectsCache = this.operationConfigCache;
        if (configurationObjectsCache.exists(_operationName))
        {
            return configurationObjectsCache.lookup(_operationName);
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeOperationConfigInCache</Name>
				<Source><![CDATA[
    protected void storeOperationConfigInCache(RetailDocumentOperationOperationName _operationName, RetailDocumentOperationConfigurationBase _configObject)
    {
        if (!this.cachingEnabledIndicator)
        {
            return;
        }

        Map configurationObjectsCache = this.operationConfigCache;
        if (configurationObjectsCache.elements() < MaximumConfigCacheSize)
        {
            configurationObjectsCache.insert(_operationName, _configObject);
        }
        else
        {
            RetailDocumentOperationLogger::logConfigurationWarning('Too many objects in operation config objects cache. Not using the cache for new objects');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOperationConfiguration</Name>
				<Source><![CDATA[
    private RetailDocumentOperationConfigurationBase createOperationConfiguration(str _operationName)
    {
        if (_operationName == RetailDocumentOperationProcessorFactory::CreateCustomerOrderOperationName)
        {
            return RetailDocumentOperationConfigurationCreateCustomerOrder::construct();
        }
        else if (_operationName == RetailDocumentOperationProcessorFactory::CancelCustomerOrderOperationName)
        {
            return RetailDocumentOperationConfigurationCancelCustomerOrder::construct();
        }
        else
        {
            return RetailDocumentOperationConfigurationBase::construct(_operationName);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>