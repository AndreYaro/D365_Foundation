<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>psaProjPost_IndirectComponentInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class psaProjPost_IndirectComponentInvoice extends ProjPost
{
    ProjProposalEmpl        m_tProjProposalEmpl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        m_tProjProposalEmpl = _buffer;
        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    public void postTrans(boolean checkProjTrans = true) // added parameter
    {
        PSAIndirectComponentTrans       indirectComponentTrans;
        LedgerVoucherTransObject        oTransObject;
        AmountCur                       amountCur;
        LedgerDimensionDefaultAccount   defaultLedgerDimension;
        ProjCategoryId                  categoryid;
        ProjId                          projId;
        LedgerDimensionAccount          mergedDimension;
        CurrencyExchangeHelper          currencyExchHelper;
        LedgerVoucherObject             ledgerVoucherObject;

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
        currencyExchHelper.parmExchangeRate1(this.exchRate());
        currencyExchHelper.parmExchangeRate2(this.exchRateSecondary());

        while select IndirectComponentId,Amount from indirectComponentTrans
               where indirectComponentTrans.TransId    == m_tProjProposalEmpl.TransId &&
                     indirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Invoice &&
                     indirectComponentTrans.ProjFundingSource     == m_tProjProposalEmpl.projProposalJour().FundingSource
        {
            amountCur      = CurrencyExchangeHelper::amount(indirectComponentTrans.Amount, m_tProjProposalEmpl.projEmplTrans().CurrencyId);

            projId                 = m_tProjProposalEmpl.projEmplTrans().ProjId;
            categoryid              = PSAIndirectComponent::find(indirectComponentTrans.IndirectComponentId).ComponentCategory;
            defaultLedgerDimension  = this.revenueAccount(projId, categoryid, m_tProjProposalEmpl.TaxGroupId);
            mergedDimension         = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, m_tProjProposalEmpl.projEmplTrans().DefaultDimension);
            oTransObject            = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                        LedgerPostingType::ProjTurnover,
                                                                        mergedDimension,
                                                                        m_tProjProposalEmpl.projEmplTrans().CurrencyId,
                                                                        -amountCur,
                                                                        currencyExchHelper);
            ledgerVoucher.addTrans(oTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenueAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount revenueAccount(ProjId _sProjId, ProjCategoryId _sCategoryId, TaxGroup _taxGroup = '')
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::RevenueAccount, _sProjId, _sCategoryId,0, false, true, _taxGroup);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
