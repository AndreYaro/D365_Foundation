<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSearchPublishingSessionCreateRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RetailSearchPublishingSessionCreateRequest</c> class is used to create publish session in database.
/// </summary>
/// <remarks>
///    This class is used for Real-time service data contract.
/// </remarks>
[DataContractAttribute('RetailSearchPublishingSessionCreateRequest')]
public final class RetailSearchPublishingSessionCreateRequest extends RetailSearchPublishingSessionBaseRequest
{
    private List<str> operatingUnitNumbers;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSessionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the session.
    /// </summary>
    /// <param name = "_sessionIds">The session id.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('SessionId')]
    public RetailSearchPublishingSessionId parmSessionId(RetailSearchPublishingSessionId _sessionIds = sessionId)
    {
        sessionId = _sessionIds;
        return sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataStoreName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the data store name.
    /// </summary>
    /// <param name = "_dataStoreName">The new value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('DataStoreName')]
    public RetailConnProfileName parmDataStoreName(RetailConnProfileName _dataStoreName = dataStoreName)
    {
        dataStoreName = _dataStoreName;
        return dataStoreName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the entity type.
    /// </summary>
    /// <param name = "_entityType">The new value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('EntityType')]
    public RetailSearchPublishingEntityType parmEntityType(RetailSearchPublishingEntityType _entityType = entityType)
    {
        entityType = _entityType;
        return entityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the status.
    /// </summary>
    /// <param name = "_status">The new value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('Status')]
    public RetailSearchPublishingSessionStatus parmStatus(RetailSearchPublishingSessionStatus _status = statusIn)
    {
        statusIn = _status;
        return statusOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedEntitiesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the changed entities count.
    /// </summary>
    /// <param name = "_changedEntitiesCount">The new value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('ChangedEntitiesCount')]
    public RetailSearchPublishingSessionEntityCount parmChangedEntitiesCount(RetailSearchPublishingSessionEntityCount _changedEntitiesCount = changedEntitiesCount)
    {
        changedEntitiesCount = _changedEntitiesCount;
        return changedEntitiesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPublishedEntitiesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the published entities count.
    /// </summary>
    /// <param name = "_publishedEntitiesCount">The new value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('PublishedEntitiesCount')]
    public RetailSearchPublishingSessionEntityCount parmPublishedEntitiesCount(RetailSearchPublishingSessionEntityCount _publishedEntitiesCount = publishedEntitiesCount)
    {
        publishedEntitiesCount = _publishedEntitiesCount;
        return publishedEntitiesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the message value.
    /// </summary>
    /// <param name = "_message">The new value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('Message')]
    public RetailSearchPublishingSessionMessage parmMessage(RetailSearchPublishingSessionMessage _message = message)
    {
        message = _message;
        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailsData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the details data value.
    /// </summary>
    /// <param name = "_detailsData">The new details value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('DetailsData')]
    public RetailSearchPublishingSessionDetailsData parmDetailsData(RetailSearchPublishingSessionMessage _detailsData = detailsData)
    {
        detailsData = _detailsData;
        return detailsData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperatingUnitNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the list of operating unit numbers.
    /// </summary>
    /// <param name = "_operatingUnitNumbers">The new value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('OperatingUnitNumbers')]
    public List<str> parmOperatingUnitNumbers(List<str> _operatingUnitNumbers = operatingUnitNumbers)
    {
        operatingUnitNumbers = _operatingUnitNumbers;
        return operatingUnitNumbers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAndProcessDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates request object and process details.
    /// </summary>
    internal void ValidateAndProcessDetails()
    {
        super();

        switch (this.parmEntityType())
        {
            case RetailSearchPublishingEntityType::Product:
                if (this.parmOperatingUnitNumbers() == null || this.parmOperatingUnitNumbers().empty())
                {
                    if (this.parmStatus() != RetailSearchPublishingSessionStatus::Failed)
                    {
                        throw Global::error('The operating unit numbers is empty or null. It is required if there is no error.');
                    }
                    else
                    {
                        // To ensure data integrity if error passed with ErrorCodes then session cannot be empty.
                        if (this.parmSessionId() == Global::emptyGuid())
                        {
                            this.parmSessionId(newGuid());
                        }

                        // For product we require Oun, in some cases errors show up before we get oun list.
                        List emptyOperatingUnitNumbers = new List(Types::String);
                        emptyOperatingUnitNumbers.addEnd(WhiteSpaceConst); // oun is required for product sessions uniqueness, empty if for entities that are oun independent.
                        this.parmOperatingUnitNumbers(emptyOperatingUnitNumbers);
                    }
                }

                break;
            default: // All other entities for now.
                if (!this.parmOperatingUnitNumbers())
                {
                    List emptyOperatingUnitNumbers = new List(Types::String);
                    emptyOperatingUnitNumbers.addEnd(WhiteSpaceConst); // oun is required for product sessions uniqueness, empty if for entities that are oun independent.
                    this.parmOperatingUnitNumbers(emptyOperatingUnitNumbers);
                }

                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>