<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorCustProForma_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>FiscalDocumentParmData_BR</c> which represents a pro forma customer fiscal document.
/// </summary>
public class FiscalDocParmDataCreatorCustProForma_BR extends FiscalDocParmDataCreatorCustInvoice_BR
{
    TmpTaxWorkTrans tmpTaxWorkTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
        public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR ret;

        ret = super();

        ret.parmIsProForma(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefRecId</Name>
				<Source><![CDATA[
        protected RecId custPaymSchedRefRecId()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefTableId</Name>
				<Source><![CDATA[
        protected TableId custPaymSchedRefTableId()
    {
        return salesTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
        protected boolean hasCustVendTrans()
    {
        return salesTable.createCustTrans_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
        protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        FiscalDocumentCustVendTransParmData_BR custTransParmData = new FiscalDocumentCustVendTransParmData_BR();

        custTransParmData.parmAmount(custInvoiceJour.InvoiceAmountMST);
        custTransParmData.parmDueDate(custInvoiceJour.DueDate);

        return custTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
        protected List initListOfInstallments()
    {
        CustVendPaymSched custVendPaymSched;

        List ret;

        if (salesTable.PaymentSched &&
            ! CustPaymSched::exist(salesTable.TableId,
                                   salesTable.RecId) &&
            ! CustPaymSched::exist(salesParmTable.TableId,
                                   salesParmTable.RecId))
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust,salesTable);
            custVendPaymSched.setSalesTotals(salesTotals);
            custVendPaymSched.createPaymSched(PaymSched::find(salesTable.PaymentSched));
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
        protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        List                                    listOfTaxParmData = new List(Types::Class);
        FiscalDocumentTaxTransParmData_BR       fiscalDocumentTaxTransParmData;

        while select tmpTaxWorkTrans
            where tmpTaxWorkTrans.SourceRecId == _fiscalDocumentLineParmData.parmRefRecId()
                && tmpTaxWorkTrans.SourceTableId == _fiscalDocumentLineParmData.parmRefTableId()
        {
            fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            this.initTaxTransParmDataFromTmpTaxWorkTrans(_fiscalDocumentParmData,
                                                         fiscalDocumentTaxTransParmData,
                                                         tmpTaxWorkTrans);

            listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>FiscalDocumentTaxTransParmData_BR</c> from a set of <c>TmpTaxWorkTrans</c> buffers.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// <c>FiscalDocumentParmData_BR</c> that is the header of the document being initialized.
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// <c>FiscalDocumentTaxTransParmData_BR</c> to be initialized.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// <c>TmpTaxWorkTrans</c> with basic tax information.
    /// </param>
    protected void initTaxTransParmDataFromTmpTaxWorkTrans(FiscalDocumentParmData_BR          _fiscalDocumentParmData,
                                                           FiscalDocumentTaxTransParmData_BR  _fiscalDocumentTaxTransParmData,
                                                           TmpTaxWorkTrans                    _tmpTaxWorkTrans)
    {
        TaxTable                taxTable;
        TaxationCode_BR         taxationCodeIPI;
        TaxationCodeTable_BR    taxationCodeTable;

        taxTable = TaxTable::find(_tmpTaxWorkTrans.TaxCode);

        _fiscalDocumentTaxTransParmData.parmTaxTransSourceTableId   (_tmpTaxWorkTrans.SourceTableId);
        _fiscalDocumentTaxTransParmData.parmTaxTransSourceRecId     (_tmpTaxWorkTrans.SourceRecId);
        _fiscalDocumentTaxTransParmData.parmTaxTrans                (_tmpTaxWorkTrans.RecId);
        _fiscalDocumentTaxTransParmData.parmType                    (_tmpTaxWorkTrans.TaxType_BR);

        // IPI demands that we construct the taxation code based on fiscal document direction.
        if (_tmpTaxWorkTrans.TaxType_BR == TaxType_BR::IPI)
        {
            taxationCodeTable = TaxationCodeTable_BR::find(_tmpTaxWorkTrans.TaxType_BR, _tmpTaxWorkTrans.TaxationCode_BR);
            if (_fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Incoming)
            {
                taxationCodeIPI = taxationCodeTable.InputCode;
            }
            else
            {
                taxationCodeIPI = taxationCodeTable.OutputCode;
            }
            taxationCodeIPI += taxationCodeTable.AtoCotepeTaxCode;
            _fiscalDocumentTaxTransParmData.parmTaxationCode(taxationCodeIPI);
            _fiscalDocumentTaxTransParmData.parmTaxExemptCode(_tmpTaxWorkTrans.exemptCode());
        }
        else
        {
            _fiscalDocumentTaxTransParmData.parmTaxationCode(_tmpTaxWorkTrans.TaxationCode_BR);
        }

        _fiscalDocumentTaxTransParmData.parmTaxValue                (_tmpTaxWorkTrans.showTaxValue());
        _fiscalDocumentTaxTransParmData.parmFiscalValue             (_tmpTaxWorkTrans.FiscalValue_BR);
        _fiscalDocumentTaxTransParmData.parmRetainedTax             (taxTable.RetainedTax_BR);
        _fiscalDocumentTaxTransParmData.parmIncludedTax             (taxTable.IncludedTax_BR);
        _fiscalDocumentTaxTransParmData.parmTaxAmount               (_tmpTaxWorkTrans.TaxAmount - _tmpTaxWorkTrans.TaxInCostPrice);

        if (_fiscalDocumentTaxTransParmData.parmTaxAmount() != 0)
        {
            if (_tmpTaxWorkTrans.taxBaseAmountHasBeenAdjusted_BR())
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount           (_tmpTaxWorkTrans.getTaxBaseAmountRegulatedMST_BR());
            }
            else
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount           (_tmpTaxWorkTrans.TaxBaseAmount);
            }
        }

        _fiscalDocumentTaxTransParmData.parmTaxReductionPct         (_tmpTaxWorkTrans.TaxReductionPct_BR);

        _fiscalDocumentTaxTransParmData.parmTaxSubstitutionMarkupPct    (TaxData::find(_tmpTaxWorkTrans.TaxCode, _tmpTaxWorkTrans.TransDate, _tmpTaxWorkTrans.TaxBaseAmount).TaxSubstitutionMarkupValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineParmDataRefRecord</Name>
				<Source><![CDATA[
        protected void setLineParmDataRefRecord(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, CustInvoiceTrans _custInvoiceTrans)
    {
        SalesLine salesLine;

        select RecId from salesLine
            where salesLine.InventTransId == _custInvoiceTrans.InventTransId;

        _fiscalDocumentLineParmData.parmRefTableId      (tableNum(SalesLine));
        _fiscalDocumentLineParmData.parmRefRecId        (salesLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>tmpTaxWorkTrans</c> buffer that will be used to generate the parm data.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>tmpTaxWorkTrans</c> buffer that will be used to generate the parm data.
    /// </param>
    public void setTmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        tmpTaxWorkTrans = _tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>