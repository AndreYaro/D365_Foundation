<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvPersonalExpenseHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class to deal with Personal expenses.
/// </summary>
public static class TrvPersonalExpenseHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numberOfPersonalCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of personal categories that are valid for the specified payment method.
    /// </summary>
    /// <param name="_payMethod">
    /// The payment method.
    /// </param>
    /// <returns>
    /// The number of personal categories that are valid for the specified payment method.
    /// </returns>
    /// <remarks>
    /// The value is used to determine whether a modal window that prompts the user to select a personal
    /// category is shown.
    /// </remarks>
    public static NumberOfRecords numberOfPersonalCategories(TrvPayMethodEDT _payMethod)
    {
        TrvCostType         trvCostType;
        TrvValidatePayment  trvValidatePayment;
        NumberOfRecords     numberOfPersonalCategories;

        select count(RecId) from trvCostType
            where trvCostType.ExpType       == TrvExpType::Personal
                && trvCostType.IsInactive   == NoYes::No
                && trvCostType.isImportOnly == NoYes::No
            join CostType, PayMethod from trvValidatePayment
                where trvValidatePayment.CostType   == trvCostType.CostType
                    && trvValidatePayment.PayMethod == _payMethod;

        numberOfPersonalCategories = trvCostType.RecId;

        return numberOfPersonalCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstPersonalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the first personal category that is valid for the specified payment method.
    /// </summary>
    /// <param name="_payMethod">
    ///     The payment method.
    /// </param>
    /// <returns>
    ///     The first personal category that is valid for the specified payment method.
    /// </returns>
    public static TrvCostTypeEDT findFirstPersonalCategory(TrvPayMethodEDT _payMethod)
    {
        TrvCostType         trvCostType;
        TrvValidatePayment  trvValidatePayment;

        select firstonly CostType from trvCostType
            where trvCostType.ExpType       == TrvExpType::Personal
                && trvCostType.IsInactive   == NoYes::No
                && trvCostType.isImportOnly == NoYes::No
            join CostType,PayMethod from trvValidatePayment
                where trvValidatePayment.CostType   == trvCostType.CostType
                    && trvValidatePayment.PayMethod == _payMethod;

        return trvCostType.CostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePersonalCostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the category is a valid personal category given the header's payment method.
    /// </summary>
    /// <param name = "_payMethod">The header credit card transaction's payment method.</param>
    /// <param name = "_costType">The expense category user entered.</param>
    /// <returns></returns>
    public static boolean validatePersonalCostType(TrvPayMethodEDT _payMethod, TrvCostTypeEDT _costType)
    {
        TrvValidatePayment  trvValidatePayment;
        TrvCostType         trvCostType = TrvCostType::find(_costType);
        boolean             ret = true;

        if (trvCostType
            && trvCostType.ExpType == TrvExpType::Personal
            && trvCostType.IsInactive == NoYes::No
            && trvCostType.isImportOnly == NoYes::No)
        {
            select firstonly RecId from trvValidatePayment
                where trvValidatePayment.CostType   == _costType
                    && trvValidatePayment.PayMethod == _payMethod;

            if (trvValidatePayment.RecId == 0)
            {
                ret = checkFailed("@Expense:ExpenseLine_InvalidPersonalCategoryForPayMethod");
            }
        }
        else
        {
            ret = checkFailed("@Expense:ExpenseLine_InvalidPersonalCategory");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPersonalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for personal expense category with the same payment method.
    /// </summary>
    /// <param name = "_lookupCtrl">The form control where the lookup is bound to.</param>
    /// <param name = "_payMethod">The payment method on the header trans.</param>
    public static void lookupPersonalCategory(FormStringControl _lookupCtrl, TrvPayMethodEDT _payMethod)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(TrvCostType), _lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(TrvCostType));
        QueryBuildDataSource    qbdsPayMethod;

        queryBuildDataSource.addRange(fieldnum(TrvCostType, ExpType)).value(queryValue(TrvExpType::Personal));
        queryBuildDataSource.addRange(fieldnum(TrvCostType, IsInactive)).value(queryValue(NoYes::No));
        queryBuildDataSource.addRange(fieldnum(TrvCostType, IsImportOnly)).value(queryValue(NoYes::No));

        qbdsPayMethod = queryBuildDataSource.addDataSource(tableNum(TrvValidatePayment));
        qbdsPayMethod.addLink(fieldNum(TrvCostType, CostType), fieldNum(TrvValidatePayment, CostType));
        qbdsPayMethod.addRange(fieldNum(TrvValidatePayment, PayMethod)).value(_payMethod);

        sysTableLookup.addLookupfield(fieldnum(TrvCostType, CostType), true);
        sysTableLookup.addLookupfield(fieldnum(TrvCostType, CostTxt));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPersonalExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the personal expense fields on expense line.
    /// </summary>
    /// <param name = "trvExpTransPersonal">The personal expense line buffer.</param>
    /// <param name = "trvExpTrans">The parent expense line buffer.</param>
    public static void initPersonalExpense(TrvExpTrans trvExpTransPersonal, TrvExpTrans trvExpTrans)
    {
        TrvCostType expCategory = TrvCostType::find(trvExpTransPersonal.CostType);

        if (trvExpTrans.RecId && trvExpTransPersonal.CostType && expCategory.ExpType == TrvExpType::Personal
            && !TrvExpTrans::isChildLineExisting(trvExpTrans.RecId,TrvExpType::Personal))
        {
            trvExpTransPersonal.ExpType = TrvExpType::Personal;
            trvExpTransPersonal.IsSplit = NoYes::Yes;
            trvExpTransPersonal.initFromTrvExpItemizedHeader(trvExpTrans);
            trvExpTransPersonal.initValue();
            trvExpTransPersonal.TransDate = trvExpTrans.TransDate;
            trvExpTransPersonal.expType = TrvExpType::Personal;

            if (trvExpTrans.isCreditCardTransanctionInLocalCurrency())
            {
                trvExpTransPersonal.modifiedField(fieldnum(TrvExpTrans, CreditCardTransactionCurrencyAmount));
            }
            else
            {
                trvExpTransPersonal.modifiedField(fieldnum(TrvExpTrans, AmountCurr));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>