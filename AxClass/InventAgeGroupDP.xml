<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAgeGroupDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventAgeGroupDimDP</c> class is the report data provider class for the <c>InventAgeDim</c>
///    report, which contains the declaration of the global variables.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data which is used by the <c>InventAgeGroup</c> and
///    <c>InventAgeDim</c> reports.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(InventAgeGroup)),
    SRSReportParameterAttribute(classStr(InventAgeGroupDimContract))
]
public class InventAgeGroupDP extends SRSReportDataProviderBase
{
    InventAgeGroupDimTmp    inventAgeGroupDimTmp;
    InventReport_Age        inventAgeReport;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the final query that has the required ranges and provides the base data.
    /// </summary>
    /// <remarks>
    ///    The base data is filtered based on the parameters and ranges provided and does the necessary
    ///    calculations that are used by the process method to insert the data into the temporary table.
    /// </remarks>
    public void calcAll()
    {
        Query                   queryInventTable = new Query();
        Query                   queryTmpInventAge = this.parmQuery();
        QueryBuildDataSource    queryBuildDatasoucetmpInventAge = queryTmpInventAge.dataSourceTable(tableNum(TmpInventAge));
        QueryBuildRange         rangeItemIdInventTable, rangeItemIdTmpInventAge;

        QueryBuildDataSource queryBuildDatasouceInventTable = queryInventTable.addDataSource(tableNum(InventTable));
        QueryBuildDataSource queryBuildDatasouceInventItemGroupItem = queryBuildDatasouceInventTable.addDataSource(tableNum(InventItemGroupItem));
        queryBuildDatasouceInventItemGroupItem.joinMode(JoinMode::InnerJoin);
        queryBuildDatasouceInventItemGroupItem.fetchMode(QueryFetchMode::One2One);
        queryBuildDatasouceInventItemGroupItem.relations(true);

        if (!queryBuildDatasoucetmpInventAge)
        {
            queryBuildDatasoucetmpInventAge = queryTmpInventAge.addDataSource(tableNum(TmpInventAge));
        }

        QueryBuildRange rangeItemGroupIdTmpInventAge = queryBuildDatasoucetmpInventAge.findRange(fieldNum(TmpInventAge, ItemGroupId));
        if (rangeItemGroupIdTmpInventAge)
        {
            QueryBuildRange rangeItemGroupIdInventItemGroupItem = queryBuildDatasouceInventItemGroupItem.findRange(fieldNum(InventItemGroupItem, ItemGroupId));
            if (!rangeItemGroupIdInventItemGroupItem)
            {
                rangeItemGroupIdInventItemGroupItem = queryBuildDatasouceInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));
            }
            rangeItemGroupIdInventItemGroupItem.value(rangeItemGroupIdTmpInventAge.value());
        }

        rangeItemIdTmpInventAge = queryBuildDatasoucetmpInventAge.findRange(fieldNum(TmpInventAge, ItemId));
        if (rangeItemIdTmpInventAge)
        {
            rangeItemIdInventTable = queryBuildDatasouceInventTable.findRange(fieldNum(InventTable, ItemId));
            if (!rangeItemIdInventTable)
            {
                rangeItemIdInventTable = queryBuildDatasouceInventTable.addRange(fieldNum(InventTable, ItemId));
            }
            rangeItemIdInventTable.value(rangeItemIdTmpInventAge.value());
        }

        QueryRun queryRun = new QueryRun(queryInventTable);
        while (queryRun.next())
        {
            InventTable inventTable = queryRun.get(tableNum(InventTable)) as InventTable;
            this.calcInventTable(inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs inventory calculations.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventSum</c> table buffer.
    /// </param>
    /// <remarks>
    ///    The data is modified based on the specified parameters.
    /// </remarks>
    public void calcInventTable(InventTable             _inventTable)
    {
        InventDim           inventDimCriteria;
        InventDimParm       inventDimParm;

        if (! _inventTable.inventItemType().mustInventBeControlled())
        {
            return;
        }

        inventDimParm.clear();
        inventDimParm.ItemIdFlag            = NoYes::Yes;
        inventDimParm.ClosedFlag            = NoYes::Yes;
        inventDimParm.clearProductDimensions();
        inventDimParm.InventOwnerIdFlag_RU  = NoYes::Yes;   // Ensure that the report only includes transactions owned by legal entity

        if (_inventTable.isItemInventoryOwnerActivated())
        {
            inventDimCriteria.InventOwnerId_RU = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
        }

        inventAgeReport.calc(_inventTable.ItemId, inventDimCriteria, inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventAgeGroupTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data table to the calling method.
    /// </summary>
    /// <returns>
    ///    The required report data.
    /// </returns>
    [
        SRSReportDataSetAttribute('InventAgeGroupTmp')
    ]
    public InventAgeGroupDimTmp getInventAgeGroupTmp()
    {
        select * from inventAgeGroupDimTmp;
        return inventAgeGroupDimTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventAgeGroupTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the record into the temporary table.
    /// </summary>
    /// <param name="_tmpInventAge">
    ///    The <c>TmpInventAge</c> table buffer with item quantity and value data to be inserted.
    /// </param>
    private void insertInventAgeGroupTmp(TmpInventAge                _tmpInventAge)
    {
        InventTable         inventTable     = InventTable::find(_tmpInventAge.ItemId);

        inventAgeGroupDimTmp.ItemId         = _tmpInventAge.ItemId;
        inventAgeGroupDimTmp.ItemName       = inventTable.defaultProductName();
        inventAgeGroupDimTmp.ItemGroupId    = _tmpInventAge.ItemGroupId;

        if (inventAgeReport.parmValueQty() == ValueQty::Qty)
        {
            inventAgeGroupDimTmp.ValQty1       = _tmpInventAge.Qty1;
            inventAgeGroupDimTmp.ValQty2       = _tmpInventAge.Qty2;
            inventAgeGroupDimTmp.ValQty3       = _tmpInventAge.Qty3;
            inventAgeGroupDimTmp.ValQty4       = _tmpInventAge.Qty4;
            inventAgeGroupDimTmp.ValQty5       = _tmpInventAge.Qty5;
            inventAgeGroupDimTmp.ValQtySum     = _tmpInventAge.QtySum;
        }
        else if (inventAgeReport.parmValueQty() == ValueQty::Value)
        {
            inventAgeGroupDimTmp.ValQty1       = _tmpInventAge.Value1;
            inventAgeGroupDimTmp.ValQty2       = _tmpInventAge.Value2;
            inventAgeGroupDimTmp.ValQty3       = _tmpInventAge.Value3;
            inventAgeGroupDimTmp.ValQty4       = _tmpInventAge.Value4;
            inventAgeGroupDimTmp.ValQty5       = _tmpInventAge.Value5;
            inventAgeGroupDimTmp.ValQtySum     = _tmpInventAge.ValueSum;
        }

        inventAgeGroupDimTmp.CutOffDate1       = inventAgeReport.parmDateI(1);
        inventAgeGroupDimTmp.CutOffDate2       = inventAgeReport.parmDateI(2);
        inventAgeGroupDimTmp.CutOffDate3       = inventAgeReport.parmDateI(3);
        inventAgeGroupDimTmp.CutOffDate4       = inventAgeReport.parmDateI(4);
        inventAgeGroupDimTmp.BeforeDate1       = inventAgeReport.parmDateI(1) - 1;
        inventAgeGroupDimTmp.BeforeDate2       = inventAgeReport.parmDateI(2) - 1;
        inventAgeGroupDimTmp.BeforeDate3       = inventAgeReport.parmDateI(3) - 1;
        inventAgeGroupDimTmp.BeforeDate4       = inventAgeReport.parmDateI(4) - 1;

        inventAgeGroupDimTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic, which is used by the
    ///    <c>InventAgeGroup</c> and <c>InventAgeDim</c> reports.
    /// </remarks>
    public void processReport()
    {
        InventAgeGroupDimContract   contract = this.parmDataContract() as InventAgeGroupDimContract;

        inventAgeReport = InventReport_Age::construct();

        inventAgeReport.setParameters(contract.parmPerDate(),
                                        contract.parmShowZeroLines(),
                                        contract.parmValueQty(),
                                        contract.parmCutOffPeriod1(),
                                        contract.parmCutOffPeriod2(),
                                        contract.parmCutOffPeriod3(),
                                        contract.parmCutOffPeriod4());

        this.calcAll();

        QueryRun queryRun = new QueryRun(this.parmQuery());
        queryRun.setRecord(inventAgeReport.parmTmpInventAge());

        while (queryRun.next())
        {
            TmpInventAge tmpInventAge = queryRun.get(tableNum(TmpInventAge)) as TmpInventAge;
            this.insertInventAgeGroupTmp(tmpInventAge);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
