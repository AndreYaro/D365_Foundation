<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankImport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

final class BankImport_RU extends RunBaseBatch implements BatchRetryable
{
    FormDataSource callerFormDataSource;
    System.IO.Stream inputFileStream;

    public static const str IntegrationPointTmpBankImport = classStr(ERTableDestination) + '#' + tableStr(TmpBankImport_RU);
    public static const str IntegrationPointBankGroup = classStr(ERTableDestination) + '#' + tableStr(BankGroup);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankRegNum2BankType</Name>
				<Source><![CDATA[
    protected BankType_RU bankRegNum2BankType(BankRegNum _bankRegNum)
    {
        BankType_RU resBankType = BankType_RU::Main;

        if (strscan(_bankRegNum, '/', 1, strlen(_bankRegNum)))
        {
            resBankType = BankType_RU::Branch;
        }

        return resBankType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmCallerFormDataSource(FormDataSource _callerFormDataSource = callerFormDataSource)
    {
        callerFormDataSource = _callerFormDataSource;

        return callerFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BankParameters params = BankParameters::find();

        if (params.ERModelMappingID)
        {
            TmpBankImport_RU tmpBankImport_RU;
            delete_from tmpBankImport_RU;

            FileUploadResultBase inputFile = File::GetFileFromUser(classStr(XMLFileUploadTemporaryStorageStrategy));

            if (inputFile)
            {
                inputFileStream = inputFile.openResult();

                this.runER(params.ERModelMappingID, IntegrationPointTmpBankImport, inputFileStream);

                Args bankImportDialogParams = new Args();
                bankImportDialogParams.caller(this);

                MenuFunction menuFunction = new MenuFunction(menuitemoutputstr(BankImportDialog_RU), MenuItemType::Output);
                menuFunction.run(bankImportDialogParams);
            }
        }
        else
        {
            Error("@CashManagement:ImportConfigurationNotFound");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTmpBankImport</Name>
				<Source><![CDATA[
    public void syncTmpBankImport()
    {
        ttsbegin;

        TmpBankImport_RU tmpBankImportLoc;

        while select forupdate tmpBankImportLoc
        {
            tmpBankImportLoc.BankType_RU = this.bankRegNum2BankType(tmpBankImportLoc.BankRegNum);
            tmpBankImportLoc.doUpdate();
        }

        ttscommit;

        BankParameters params = BankParameters::find();

        this.runER(params.ERModelMappingID, IntegrationPointBankGroup, inputFileStream);

        if (callerFormDataSource)
        {
            callerFormDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankImport_RU bankImport =  new BankImport_RU();

        if (_args && _args.dataset() == tableNum(BankGroup))
        {
            bankImport.parmCallerFormDataSource(_args.record().dataSource());
        }

        bankImport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private void runER(ERModelMappingId _mappingId, ERIntegrationPointKey _integrationPoint, System.IO.Stream _fileStream)
    {
        ERIModelMappingDestinationRun runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(_mappingId, _integrationPoint);

        runner.init();

        ERModelDefinitionParameters parameters = runner.getParameters();
        ERModelDefinitionParametersTraverser traverser = new ERModelDefinitionParametersTraverser(parameters);

        while (traverser.moveNext())
        {
            ERIImportFormatDataSourceContract current = ERCast::asAny(traverser.current()) as ERIImportFormatDataSourceContract;
            if (current)
            {
                current.parmInputDataStream(_fileStream);
                break;
            }
        }

        runner.runUnattended();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>