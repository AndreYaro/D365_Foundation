<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamActualCostDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TAMActualCostDP</c> class is the report data provider class that supports
///     the <c>TAMActualCost</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TAMActualCostContract))
]
public class TamActualCostDP extends SRSReportDataProviderBase
{
    TAMActualCostTmp        tamActualCostTmp;
    TAMActualCostContract   contract;
    TAMPromotionID          tamPromotionID;
    CustAccount             custAccount;
    Set                     setCustomers;
    TransDate               transDate;

    AmountCur           totalPlannedAmt;
    AmountCur           totalIncurredAmt;
    AmountCur           totalActualAmt;
    AmountCur           plannedOI;
    AmountCur           plannedBB;
    AmountCur           plannedLS;
    AmountCur           incurredOI;
    AmountCur           incurredBB;
    AmountCur           incurredLSCust;
    AmountCur           incurredLSTAM;
    AmountCur           actualOI;
    AmountCur           actualBB;
    AmountCur           actualLSCust;
    AmountCur           actualLSTAM;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcActualAmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual amounts.
    /// </summary>
    /// <returns>
    ///     This is the calculate amount.
    /// </returns>
    private AmountCur calcActualAmt()
    {
        totalActualAmt = this.calcIncurredActualOI();
        totalActualAmt += this.calcActualBB();
        totalActualAmt += this.calcActualLumpSumTAM();

        return totalActualAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualBB</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual amount of claims that have been
    ///     approved for bill backs that are related to this promotion.
    /// </summary>
    /// <returns>
    ///     This is the calculated bill back amount.
    /// </returns>
    private AmountCur calcActualBB()
    {
        TAMTradePromotion       tamTradePromotion;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateTable          pdsRebateTable;
        PdsRebateTrans          pdsRebateTrans;
        TAMPromotionCust        tamPromotionCust;

        // Calculate the total Bill back amount.
        select sum(PdsRebateAmt) from pdsRebateTrans
            where pdsRebateTrans.PdsRebateTransaction  == PdsRebateTransaction::CreditNote
                || pdsRebateTrans.PdsRebateTransaction == PdsRebateTransaction::PassToAP
            exists join pdsRebateTable
            where pdsRebateTable.PdsRebateId == pdsRebateTrans.PdsRebateId
                && pdsRebateTable.CustAccount == custAccount
            exists join pdsRebateAgreement
            where pdsRebateAgreement.RecId == pdsRebateTable.PdsRebateAgreementRefRecId
            exists join tamMerchandisingEvent
            where tamMerchandisingEvent.MerchandisingEventID == pdsRebateAgreement.tamMerchandisingEventID
                && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
            exists join tamTradePromotion
            where tamTradePromotion.PromotionID  == tamMerchandisingEvent.PromotionID
                && tamTradePromotion.PromotionID == tamPromotionID
                && !tamTradePromotion.Template
            exists join tamPromotionCust
            where tamPromotionCust.PromotionID  == tamTradePromotion.PromotionID
                && tamPromotionCust.CustAccount == custAccount;

        actualBB = pdsRebateTrans.PdsRebateAmt;

        return actualBB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualLumpSumCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual lumpsum amount.
    /// </summary>
    /// <returns>
    ///     The calculated actual lumpsum amount for a customer.
    /// </returns>
    private AmountCur calcActualLumpSumCust()
    {
        TAMTradePromotion           tamTradePromotion;
        TAMMerchandisingEvent       tamMerchandisingEvent;
        TAMMerchEventPricing        tamMerchEventPricing;
        TAMMerchEventTrans          tamMerchEventTrans;

        // Get the lump sum cost for lump sumps paid by the trade promotion
        select sum(Amount) from tamMerchEventTrans
            exists join tamMerchandisingEvent
            where tamMerchandisingEvent.MerchandisingEventID == tamMerchEventTrans.MerchandisingEventID
                && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            exists join tamMerchEventPricing
            where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                && tamMerchEventPricing.tfClaimPayType == TAMPaymentType::CustomerDeduction
                && tamMerchEventPricing.tfPayTo == custAccount
            exists join tamTradePromotion
            where tamTradePromotion.PromotionID  == tamMerchandisingEvent.PromotionID
                && tamTradePromotion.PromotionID == tamPromotionID
                && !tamTradePromotion.Template;

        actualLSCust = tamMerchEventTrans.Amount;

        return actualLSCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualLumpSumTAM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual lumpsum amount.
    /// </summary>
    /// <returns>
    ///     The calculated actual lumpsum amount the promotion.
    /// </returns>
    private AmountCur calcActualLumpSumTAM()
    {
        TAMTradePromotion           tamTradePromotion;
        TAMMerchandisingEvent       tamMerchandisingEvent;
        TAMMerchEventTrans          tamMerchEventTrans;

        // Get the lump sum cost for lump sumps paid by the trade promotion
        select sum(Amount) from tamMerchEventTrans
            exists join tamMerchandisingEvent
            where tamMerchandisingEvent.MerchandisingEventID == tamMerchEventTrans.MerchandisingEventID
                && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            exists join tamTradePromotion
            where tamTradePromotion.PromotionID == tamMerchandisingEvent.PromotionID
                && tamTradePromotion.PromotionID == tamPromotionID
                && !tamTradePromotion.Template;

        actualLSTAM = tamMerchEventTrans.Amount;

        return actualLSTAM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredActualOI</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates all shipped dollar amounts tied to an order that received the promotion.
    /// </summary>
    /// <returns>
    ///     This is the calculated off invoice amount.
    /// </returns>
    /// <remarks>
    ///     Actual and incurred OI amounts are the same.
    /// </remarks>
    private AmountCur calcIncurredActualOI()
    {
        SalesLine               salesLine;
        SalesTable              salesTable;
        MCRPriceHistory         mcrPriceHistory;
        MCRPriceHistoryRef      mcrPriceHistoryRef;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionCust        tamPromotionCust;
        SalesQty                invoicedQty;

        incurredOI  = 0;
        actualOI    = 0;

        while select RecId from tamTradePromotion
            where tamTradePromotion.PromotionID == tamPromotionID
               && !tamTradePromotion.Template
            join RecId from tamPromotionCust
                where tamPromotionCust.PromotionID == tamTradePromotion.PromotionID
                   && tamPromotionCust.CustAccount == custAccount
            join MerchandisingEventID from tamMerchandisingEvent
                where tamMerchandisingEvent.PromotionID                == tamTradePromotion.PromotionID
                   && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::OffInvoice
            join RecId from mcrPriceHistory
                where mcrPriceHistory.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            join RecId from mcrPriceHistoryRef
                where mcrPriceHistoryRef.PriceHistoryRecId == mcrPriceHistory.RecId
            join salesLine
                where salesLine.mcrOrderLine2PriceHistoryRef == mcrPriceHistoryRef.mcrOrderLine2PriceHistoryRef
            exists join salesTable
                where salesTable.SalesId     == salesLine.SalesId
                   && salesTable.CustAccount == custAccount
        {
            invoicedQty  = salesLine.invoicedInTotal();
            incurredOI  += this.discountAmount(invoicedQty, tamMerchandisingEvent.MerchandisingEventID);
            actualOI     = incurredOI;
        }

        return incurredOI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredAmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the incurred amount.
    /// </summary>
    /// <returns>
    ///     The calculated incurred amount.
    /// </returns>
    private AmountCur calcIncurredAmt()
    {
        totalIncurredAmt = this.calcIncurredActualOI();
        totalIncurredAmt += this.calcIncurredBB();
        totalIncurredAmt += this.calcIncurredlLumpSumTAM();

        return totalIncurredAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredBB</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds together all shipped quantity amounts that
    ///     are tied to a bill back on the trade promotion.
    /// </summary>
    /// <returns>
    ///     This is the calculated incurred bill back amount.
    /// </returns>
    private AmountCur calcIncurredBB()
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateTable          pdsRebateTable;
        TAMPromotionCust        tamPromotionCust;

        incurredBB = 0;

        while select RecId from tamTradePromotion
            where tamTradePromotion.PromotionID == tamPromotionID
                && !tamTradePromotion.Template
            join RecId from tamPromotionCust
            where tamPromotionCust.PromotionID == tamTradePromotion.PromotionID
                && tamPromotionCust.CustAccount == custAccount
            join RecId from tamMerchandisingEvent
                where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
            join RecId from pdsRebateAgreement
                where pdsRebateAgreement.tamMerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            join PdsStartingRebateAmt from pdsRebateTable
                where pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateAgreement.RecId
                    && pdsRebateTable.CustAccount == custAccount
        {
            incurredBB += pdsRebateTable.PdsStartingRebateAmt ;
        }

        return incurredBB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredlLumpSumTAM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the incurred lumpsum amount.
    /// </summary>
    /// <returns>
    ///     The calculated incurred lumpsum amount for the promotion.
    /// </returns>
    private AmountCur calcIncurredlLumpSumTAM()
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionCust        tamPromotionCust;
        TAMMerchEventPricing    tamMerchEventPricing;

        select RecId from tamTradePromotion
            where tamTradePromotion.PromotionID == tamPromotionID
                && !tamTradePromotion.Template
            join sum(MerchandiseCost) from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
                && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            exists join tamMerchEventPricing
            where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            exists join tamPromotionCust
            where tamPromotionCust.PromotionID == tamTradePromotion.PromotionID
                && tamPromotionCust.CustAccount == custAccount;

        incurredLSTAM = tamMerchandisingEvent.MerchandiseCost;

        return incurredLSTAM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredLumpSumCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the incurred lumpsum amount.
    /// </summary>
    /// <returns>
    ///     The calculated incurred lumpsum amount for a customer.
    /// </returns>
    private AmountCur calcIncurredLumpSumCust()
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionCust        tamPromotionCust;
        TAMMerchEventPricing    tamMerchEventPricing;

        select RecId from tamTradePromotion
            where tamTradePromotion.PromotionID == tamPromotionID
                && !tamTradePromotion.Template
            join sum(MerchandiseCost) from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
                && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            exists join tamMerchEventPricing
            where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                && tamMerchEventPricing.tfClaimPayType == TAMPaymentType::CustomerDeduction
                && tamMerchEventPricing.tfPayTo == custAccount
            exists join tamPromotionCust
            where tamPromotionCust.PromotionID  == tamTradePromotion.PromotionID
                && tamPromotionCust.CustAccount == custAccount;

        incurredLSCust = tamMerchandisingEvent.MerchandiseCost;

        return incurredLSCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlannedAmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the planned amount.
    /// </summary>
    /// <returns>
    ///     The calculated planned amount.
    /// </returns>
    private AmountCur calcPlannedAmt()
    {
        TAMCalcMerchandiseCost tamCalcMerchandiseCost;
        tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(TAMPromoMerchEvent::Promotion, '', tamPromotionID, custAccount);

        tamCalcMerchandiseCost.calcPromotionCost();

        totalPlannedAmt = this.calcPlannedOI();
        totalPlannedAmt += this.calcPlannedBB();
        totalPlannedAmt += this.calcPlannedLS();

        return totalPlannedAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlannedBB</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the cost of all bill backs on a promotion.
    /// </summary>
    /// <returns>
    ///     The calculated bill back amount.
    /// </returns>
    /// <remarks>
    ///     Use query instead of while select here to use the list of valid
    ///     statuses as a filtering criteria.
    /// </remarks>
    private AmountCur calcPlannedBB()
    {
        Query                   query;
        QueryBuildDataSource    qbdsEvent;
        QueryBuildDataSource    qbdsPromotion;
        QueryBuildDataSource    qbdsPromotionCust;
        QueryRun                queryRun;
        TAMMerchandisingEvent   tamMerchandisingEvent;

        plannedBB = 0;

        query = new Query();

        qbdsPromotion = query.addDataSource(tableNum(TAMTradePromotion));
        qbdsPromotion.relations(true);
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, PromotionID)).value(tamPromotionID);
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, Template)).value(enum2str(NoYes::No));
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, PromotionStatus)).value(con2Str(TAMPromotionParameters::validStatuses()));

        qbdsPromotionCust = qbdsPromotion.addDataSource(tableNum(TAMPromotionCust));
        qbdsPromotionCust.clearLinks();
        qbdsPromotionCust.addLink(fieldNum(TAMPromotionCust, PromotionID), fieldNum(TAMTradePromotion, PromotionID));
        qbdsPromotionCust.addRange(fieldNum(TAMPromotionCust, CustAccount)).value(custAccount);

        qbdsEvent = qbdsPromotionCust.addDataSource(tableNum(TAMMerchandisingEvent));
        qbdsEvent.clearLinks();
        qbdsEvent.addLink(fieldNum(TAMMerchandisingEvent, PromotionID), fieldNum(TAMPromotionCust, PromotionID));
        qbdsEvent.addRange(fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory)).value(enum2str(MCRMerchandisingEventCategory::BillBack));

        queryRun = new QueryRun(query);
        queryRun.reset();

        if (queryRun.next())
        {
            tamMerchandisingEvent   = queryRun.get(tableNum(TAMMerchandisingEvent));
            plannedBB += tamMerchandisingEvent.MerchandiseCost;
        }

        return plannedBB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlannedLS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the cost of all lump sums on a promotion.
    /// </summary>
    /// <returns>
    ///     The calculated planned lump sum amount.
    /// </returns>
    /// <remarks>
    ///     Use query instead of while select here to use the list of valid
    ///     statuses as a filtering criteria.
    /// </remarks>
    private AmountCur calcPlannedLS()
    {
        Query                   query;
        QueryBuildDataSource    qbdsEvent;
        QueryBuildDataSource    qbdsPromotion;
        QueryBuildDataSource    qbdsPromotionCust;
        QueryRun                queryRun;
        TAMMerchandisingEvent   tamMerchandisingEvent;

        plannedLS = 0;
        query = new Query();

        qbdsPromotion = query.addDataSource(tableNum(TAMTradePromotion));
        qbdsPromotion.relations(true);
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, PromotionID)).value(tamPromotionID);
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, Template)).value(enum2str(NoYes::No));
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, PromotionStatus)).value(con2Str(TAMPromotionParameters::validStatuses()));

        qbdsPromotionCust = qbdsPromotion.addDataSource(tableNum(TAMPromotionCust));
        qbdsPromotionCust.clearLinks();
        qbdsPromotionCust.addLink(fieldNum(TAMPromotionCust, PromotionID), fieldNum(TAMTradePromotion, PromotionID));
        qbdsPromotionCust.addRange(fieldNum(TAMPromotionCust, CustAccount)).value(custAccount);

        qbdsEvent = qbdsPromotionCust.addDataSource(tableNum(TAMMerchandisingEvent));
        qbdsEvent.clearLinks();
        qbdsEvent.addLink(fieldNum(TAMMerchandisingEvent, PromotionID), fieldNum(TAMPromotionCust, PromotionID));
        qbdsEvent.addRange(fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory)).value(enum2str(MCRMerchandisingEventCategory::LumpSum));

        queryRun = new QueryRun(query);
        queryRun.reset();

        if (queryRun.next())
        {
            tamMerchandisingEvent   = queryRun.get(tableNum(TAMMerchandisingEvent));
            plannedLS += tamMerchandisingEvent.MerchandiseCost;
        }

        return plannedLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlannedOI</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the cost of all off invoice merchandising events on a promotion.
    /// </summary>
    /// <returns>
    ///     The calculated off invoice amount.
    /// </returns>
    /// <remarks>
    ///     Use query instead of while select here to use the list of valid
    ///     statuses as a filtering criteria.
    /// </remarks>
    private AmountCur calcPlannedOI()
    {
        Query                   query;
        QueryBuildDataSource    qbdsEvent;
        QueryBuildDataSource    qbdsPromotion;
        QueryRun                queryRun;
        TAMMerchandisingEvent   tamMerchandisingEvent;

        plannedOI = 0;
        query = new Query();

        qbdsPromotion = query.addDataSource(tableNum(TAMTradePromotion));
        qbdsPromotion.relations(true);
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, PromotionID)).value(tamPromotionID);
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, Template)).value(enum2str(NoYes::No));
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, PromotionStatus)).value(con2Str(TAMPromotionParameters::validStatuses()));

        qbdsEvent = qbdsPromotion.addDataSource(tableNum(TAMMerchandisingEvent));
        qbdsEvent.clearLinks();
        qbdsEvent.addLink(fieldNum(TAMMerchandisingEvent, PromotionID), fieldNum(TAMTradePromotion, PromotionID));
        qbdsEvent.addRange(fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory)).value(enum2str(MCRMerchandisingEventCategory::OffInvoice));

        queryRun = new QueryRun(query);
        queryRun.reset();

        if (queryRun.next())
        {
            tamMerchandisingEvent = queryRun.get(tableNum(TAMMerchandisingEvent));
            plannedOI += tamMerchandisingEvent.MerchandiseCost;
        }

        return plannedOI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the estimated discount amounts for
    ///     off invoice and bill back merch events based
    ///     on the price level that has been marked as use for analytics.
    /// </summary>
    /// <param name="_shippedQty">
    ///     This is the shipped quantity.
    /// </param>
    /// <param name="_mcrMerchandisingEventID">
    ///     This is the mercahndising event ID.
    /// </param>
    /// <returns>
    ///     This is the calculated discount amount.
    /// </returns>
    private AmountCur discountAmount(Qty _shippedQty, MCRMerchandisingEventID _mcrMerchandisingEventID)
    {
        TAMPromotionItem        tamPromotionItem;
        TAMMerchEventPricing    tamMerchEventPricing;
        Price                   price;
        Price                   priceAfterDisc;
        AmountCur               totalDisc;
        Price                   priceAfterDiscPercent;

        tamMerchEventPricing = TAMMerchEventPricing::findMerchEventCostLevel(_mcrMerchandisingEventID);

        price = InventTableModule::find(tamPromotionItem.ItemID, ModuleInventPurchSales::Sales).price();
        priceAfterDisc = price - tamMerchEventPricing.DiscountAmt;
        priceAfterDiscPercent = tamMerchEventPricing.DiscountPercent * 0.01;

        totalDisc += ((price - (priceAfterDisc * (1 - priceAfterDiscPercent))) * _shippedQty);

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTAMActualCostTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the temp table used by the <c>TAMActualCost</c> report.
    /// </summary>
    /// <returns>
    /// The temp table used by the <c>TAMActualCost</c> report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TAMActualCostTmp))
    ]
    public TAMActualCostTmp getTAMActualCostTmp()
    {
        select  tamActualCostTmp;

        return  tamActualCostTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTAMPromotion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the trade promotion record.
    /// </summary>
    /// <param name="_tamPromotionID">
    ///     The trade promotion Id.
    /// </param>
    private void getTAMPromotion(TAMPromotionID _tamPromotionID)
    {
        TAMPromotionCust        tamPromotionCust;
        TAMTradePromotion       tamTradePromotion;
        CustTable               custTable;
        List                    custAccountList;
        ListEnumerator          custAccountListEnum;

        custAccountList = contract.parmCustAccount();
        custAccountListEnum = custAccountList.getEnumerator();

        setCustomers = new Set (Types::String);
        while (custAccountListEnum.moveNext())
        {
            setCustomers.add(custAccountListEnum.current());
        }

        if (custAccountList)
        {
            while select CustAccount, PromotionID from tamPromotionCust
                    where (tamPromotionCust.PromotionID == _tamPromotionID)
                join firstonly PromotionDescription from tamTradePromotion
                    where tamPromotionCust.PromotionID == tamTradePromotion.PromotionID
                join firstonly Party from custTable
                    where tamPromotionCust.CustAccount == custTable.AccountNum
            {
                if (setCustomers.in(tamPromotionCust.CustAccount))
                {
                    this.setClassVars(tamPromotionCust.PromotionID, tamPromotionCust.CustAccount);
                    this.insertTAMActualCostTmp(tamTradePromotion.PromotionDescription, custTable.name());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTAMActualCostTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the <c>TAMActualCostTmp</c> table with details.
    /// </summary>
    /// <param name="_description">
    ///     The trade promotion description.
    /// </param>
    /// <param name="_custName">
    ///     The customer name.
    /// </param>
    private void insertTAMActualCostTmp(Description _description, CustName _custName)
    {
        // clear class variables
        totalPlannedAmt = 0;
        totalIncurredAmt = 0;
        totalActualAmt = 0;
        plannedOI = 0;
        plannedBB = 0;
        plannedLS = 0;
        incurredOI = 0;
        incurredBB = 0;
        incurredLSTAM = 0;
        incurredLSCust = 0;
        actualOI = 0;
        actualBB = 0;
        actualLSTAM = 0;
        actualLSCust = 0;

        this.calcActualLumpSumCust();
        this.calcIncurredLumpSumCust();

        //assign amounts to be displayed on the report
        tamActualCostTmp.Hierarchy = tamPromotionID;
        tamActualCostTmp.CustAccount = custAccount;
        tamActualCostTmp.String300 = tamPromotionID;
        tamActualCostTmp.String300_1 = _description;
        tamActualCostTmp.String300_2 = _custName;
        tamActualCostTmp.SumTotalActual = this.calcActualAmt();
        tamActualCostTmp.SumTotalIncurred = this.calcIncurredAmt();
        tamActualCostTmp.SumTotalPlanned = this.calcPlannedAmt();
        tamActualCostTmp.SumActualBB = actualBB;
        tamActualCostTmp.SumActualLS = actualLSCust;
        tamActualCostTmp.SumActualLSTAM = actualLSTAM;
        tamActualCostTmp.SumActualOI = actualOI;
        tamActualCostTmp.SumIncurredBB = incurredBB;
        tamActualCostTmp.SumIncurredLS = incurredLSCust;
        tamActualCostTmp.SumIncurredLSTAM = incurredLSTAM;
        tamActualCostTmp.SumIncurredOI = incurredOI;
        tamActualCostTmp.SumPlannedBB = plannedBB;
        tamActualCostTmp.SumPlannedLS = plannedLS;
        tamActualCostTmp.SumPlannedOI = plannedOI;

        if (tamActualCostTmp.validateWrite())
        {
            tamActualCostTmp.insert();
        }
        else
        {
            throw error("@SYS104318");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by <c>TAMActualCost</c> report.
    /// </remarks>
    public void processReport()
    {
        List                    promotionIdList;
        ListEnumerator          promotionIdListEnum;

        contract = this.parmDataContract() as TAMActualCostContract;
        promotionIdList = contract.parmPromotionID();

        transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (promotionIdList)
        {
            promotionIdListEnum = promotionIdList.getEnumerator();
            while (promotionIdListEnum.moveNext())
            {
                this.getTAMPromotion(promotionIdListEnum.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClassVars</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets class variables for the TAMActualCostDP class
    /// </summary>
    /// <param name="_promotionID">
    ///     The promotion ID to calculate for.
    /// </param>
    /// <param name="_custAccount">
    ///     The customer account to calculate for.
    /// </param>
    /// <remarks>
    ///     Created for the TAMPLanVsActualSalesGraph class.
    ///     Form used to use the TAMPlannedVsActual, but that class is
    ///     no longer needed.  So as to not duplicate code created this method
    /// </remarks>
    void setClassVars(TAMPromotionID _promotionID, CustAccount _custAccount)
    {
        tamPromotionID = _promotionID;
        custAccount = _custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets class variables for the TAMActualCostDP class and
    ///     returns the value calculated by the calcActualAmount.
    /// </summary>
    /// <param name="_promotionID">
    ///     The Promotion ID to calculate for
    /// </param>
    /// <param name="_custAccount">
    ///     The customer ID to calculate for
    /// </param>
    /// <returns>
    ///     This is the actual amount for the promotion.
    /// </returns>
    /// <remarks>
    ///     Created for the TAMPLanVsActualSalesGraph class.
    ///     Form used to use the TAMPlannedVsActual, but that class is
    ///     no longer needed.  So as to not duplicate code created this method.
    /// </remarks>
    static AmountCur calcAmt(TAMPromotionID _promotionID, CustAccount _custAccount)
    {
        TAMActualCostDP tamActualCostDP = new TAMActualCostDP();
        tamActualCostDP.setClassVars(_promotionID,_custAccount);
        return tamActualCostDP.calcActualAmt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
