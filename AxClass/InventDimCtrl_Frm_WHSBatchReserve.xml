<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_WHSBatchReserve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class for inventDimCtrl for batch reserve
/// controls dimensions on grid
/// </summary>
class InventDimCtrl_Frm_WHSBatchReserve extends InventDimCtrl_Frm_OnHand
{
    List hierarchyList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formSetControlsRightClick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>rightClickModifyQuery</c> mothod on the <c>WHSBatchAttribReserve</c> form.
    /// </summary>
    /// <param name="_lockForm">
    /// A boolean value that indicates whether the form should be locked.
    /// </param>
    /// <param name="_resizeGrid">
    /// A boolean value that indicates whether the grid on the form should be resized.
    /// </param>
    /// <param name="_args">
    /// This parameter is not used in this override; optional.
    /// </param>
    public void formSetControlsRightClick(
        boolean _lockForm,
        boolean _resizeGrid = false,
        Args    _args = null)
    {
        callingElement.formObject().rightClickModifyQuery();
        super(_lockForm, _resizeGrid, _args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds if needed and returns a <c>List</c> containing the inventory dimensions,
    /// based on the <c>InventMovement</c> object set on this instance
    /// and using WHSReservationHierarchySortOrder::BottomUp sort order.
    /// The list contains the inventory dimensions that are batch level and above
    /// in the hierarchy in case when batch number dimension is above location or
    /// contains the inventory dimensions that are location level and above
    /// in the hierarchy plus batch number dimension in case when batch number is below location.
    /// </summary>
    /// <returns>
    /// A <c>List</c> containing the inventory dimensions that are batch level and above
    /// in the hierarchy in case when batch number dimension is above location or
    /// a <c>List</c> containing the inventory dimensions that are location level and above
    /// in the hierarchy plus batch number dimension in case when batch number is below location.
    /// </returns>
    public List hierarchyList()
    {
        if (hierarchyList == null)
        {
            InventTable inventTable = this.movement().inventTable();

            if (!WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(inventTable))
            {
                if (!WHSReservationHierarchyElementPolicyProvider::singleton().isReservationOnDemandOrderEnabled(inventTable.whsReservationHierarchy(), fieldNum(InventDim, inventBatchId)) ||
                    !this.movement().canUseFlexibleWarehouseLevelDimensionReservation())
                {
                    throw error("@SYS6144");
                }

                WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();

                hierarchyList = List::create(reservationHierarchyProvider.getDimListAboveLocationFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp).pack());
                hierarchyList.addStart(WHSReservationHierarchyElementData::newFromParameters(fieldNum(InventDim, inventBatchId), reservationHierarchyProvider.getDimLevel(inventTable, fieldNum(InventDim, inventBatchId))));
            }
            else
            {
                hierarchyList = WHSReservationHierarchyProvider::construct().getDimListBatchAndAboveFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp);
            }
        }

        return hierarchyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventDimParm</c> buffer with relevant dimension fields enabled (set to Yes).
    /// </summary>
    /// <returns>
    /// The <c>InventDimParm</c> buffer
    /// </returns>
    public InventDimParm initDimParmEnabled()
    {
        InventDimParm ret = super();

        ret.InventBatchIdFlag   = true;
        ret.setAllProductDimensions();

        ret.initFromInventDimFieldList(WHSReservationHierarchyInventDimUtil::hierarchyList2FieldIdList(this.hierarchyList()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// initlizes the class from calling object recordset
    /// </summary>
    public void initFromCaller()
    {
        InventDimParm           lclDimParmVisibleGrid;
        str                     callingElementName = callingElement.name();
        boolean                 overrideSetup = false;
        InventTable inventTable = this.movement().inventTable();

        movement = null;
        lclDimParmVisibleGrid.ItemIdFlag    = true;

        boolean mustDisableSerialId = !WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(inventTable)
                                      && this.movement().canUseFlexibleWarehouseLevelDimensionReservation();

        if (this.movement())
        {
            this.setUnits('',this.movement());

            lclDimParmVisibleGrid.initFromInventDimFieldList(WHSReservationHierarchyInventDimUtil::hierarchyList2FieldIdList(this.hierarchyList()));

            dimParmLockedRightClick.initFromInventDimParm(lclDimParmVisibleGrid);
            if (mustDisableSerialId)
            {
                dimParmLockedRightClick.InventSerialIdFlag = true;
            }

            dimParmLockedRightClick.setAllProductDimensions();

            if (this.sysLastValueExist())
            {
                overrideSetup = true;
                lclDimParmVisibleGrid = InventDimParm::orParms(dimParmVisibleGrid, lclDimParmVisibleGrid);

                // Enabling the dimensions, which displaying item has. To prevent the filtering by disabled dimension.                
                lclDimParmVisibleGrid = InventDimParm::andParms(inventTable.inventDimParmActiveDimensions(), lclDimParmVisibleGrid);
            }

            lclDimParmVisibleGrid.ItemIdFlag            = false;
            lclDimParmVisibleGrid.InventBatchIdFlag     = true;
            lclDimParmVisibleGrid.ClosedQtyFlag         = true;
        }

        if (mustDisableSerialId)
        {
            lclDimParmVisibleGrid.InventSerialIdFlag = false;
        }

        this.parmDimParmVisibleGrid(lclDimParmVisibleGrid, overrideSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryWHSInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query.
    /// </summary>
    /// <param name="_whsInventReserve_DS">Form datasource.</param>
    public void initQueryWHSInventReserve(FormDataSource _whsInventReserve_DS)
    {
        WHSInventReserve::addSumFields(_whsInventReserve_DS.query().
            dataSourceTable(tableNum(WHSInventReserve)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryTmpBatchSel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update InventDim form control query.
    /// </summary>
    /// <param name="_whsInventReserve_DS">
    /// WHSInventReserve for which to update query
    /// </param>
    /// <param name="_inventDim_DS">
    /// InventDim for which to update query
    /// </param>
    /// <param name="_inventLocationId">
    /// InventLocationId for which to update query
    /// </param>
    /// <remarks>
    /// Update the inventDim as it effects the form
    /// TmpPdsBatchAttriSelect datasources
    /// </remarks>
    public void modifyQueryTmpBatchSel(
        FormDataSource      _whsInventReserve_DS,
        FormDataSource      _inventDim_DS,
        InventLocationId    _inventLocationId = ''
        )
    {
        boolean                 doHint;
        InventDimParm           inventDimParmRange;

        #Query

        QueryBuildDataSource qbsInventReserve = _whsInventReserve_DS.query().dataSourceName(_whsInventReserve_DS.name());

        qbsInventReserve.sortClear();

        QueryBuildDataSource qbsDim = _inventDim_DS.query().dataSourceName(_inventDim_DS.name());

        if (_inventLocationId != '')
        {
            QueryBuildRange criteriaWH = SysQuery::findOrCreateRange(
                                            qbsDim,
                                            fieldNum(InventDim, InventLocationId));

            criteriaWH.value(queryValue(_inventLocationId));

            if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
            {
                SysQuery::findOrCreateRange(qbsInventReserve, fieldNum(WHSInventReserve, InventLocationId)).value(queryValue(_inventLocationId));
            }
        }
        qbsDim.sortClear();

        doHint = InventDim::queryAddHintFromCaller(qbsDim,callingElement.args())
                    && doHint;

        qbsInventReserve.orderMode(OrderMode::GroupBy);
        qbsInventReserve.addSortField(fieldNum(WHSInventReserve, ItemId));

        dimParmLockedRightClick.queryAddSortField(qbsDim);
        if (!dimParmVisibleGrid.queryAddSortField(qbsDim))
        {
            qbsDim.addSortField(fieldNum(InventDim, TableId));
            qbsDim.orderMode(OrderMode::GroupBy);
        }

        if (!doHint
            && ! inventDimParmRange.isFlagSelective()
            && ! dimParmVisibleGrid.ClosedFlag)
        {
            qbsDim.addSortIndex(indexNum(InventDim,DimIdIdx));
            qbsDim.indexIsHint(true);

            doHint = true;
        }

        if (doHint)
        {
            _inventDim_DS.query().literals(#QueryForcePlaceholders);
        }
        else
        {
            _inventDim_DS.query().literals(#QueryLiteralsDefault);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// A new <c>InventDimCtrl_Frm_WHSBatchReserve</c> class instance.
    /// </returns>
    protected static InventDimCtrl_Frm_WHSBatchReserve construct()
    {
        return new InventDimCtrl_Frm_WHSBatchReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class, expects a formrun of the form calling.
    /// </summary>
    /// <param name="_formRun">
    /// Form Run of form calling.
    /// </param>
    /// <returns>
    /// A new <c>InventDimCtrl_Frm_WHSBatchReserve</c> class instance.
    /// </returns>
    public static InventDimCtrl_Frm_WHSBatchReserve newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_OnHand  inventDimCtrl =
            InventDimCtrl_Frm_WHSBatchReserve::construct();
        InventDimAxFormAdapter adapter =
            InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>