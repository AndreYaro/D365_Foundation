<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm extends InventDimCtrl implements SysPackable
{
    InventDimFormInterface             callingElement;

    InventDimParm       dimParmEnabled;
    InventDimParm       dimParmCanBeEnabled;
    InventDimParm       dimParmVisibleGrid;
    InventDimParm       dimParmLockedRightClick;

    Set                 visibleToggle;
    Set                 enabledToggle;
    Set                 mandatoryToggle;

    boolean             dontShowDisabled;
    boolean             rightClickActive;
    boolean             largeRightClickForm;

    boolean             lastValueRead;
    boolean             overRideUserSetup;
    boolean             skipOnHandLookUp;

    UnknownNoYes        formHasMethodUpdateControls;
    UnknownNoYes        formHasMethodUpdatedControls;

    InventDimControlIdCollectionEnumerator  controlIdCollectionEnumerator;

    #DEFINE.FixedDimensions(2)
    #DEFINE.ItemIdFlag(3)
    #DEFINE.ClosedFlag(4)
    #DEFINE.ClosedQtyFlag(5)

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowResizeOfFormControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to resize the form controls.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean allowResizeOfFormControls()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildToggleLists</Name>
				<Source><![CDATA[
    protected boolean buildToggleLists()
    {
        InventDimFormControlInterface  fc;

        boolean willBeEnabled()
        {
            return ((fc.allowEdit() && !enabledToggle.in(fc)) || (!fc.allowEdit() && enabledToggle.in(fc)));
        }

        visibleToggle = new Set(Types::Class);
        enabledToggle = new Set(Types::Class);
        mandatoryToggle = new Set(Types::Class);

        for (fc=inventDimControls.first();fc;fc=inventDimControls.next())
        {
            boolean test = !this.mustEnableControl(fc);
            if ((test && fc.allowEdit()) || (!test && !fc.allowEdit()))
            {
                enabledToggle.add(fc);
            }

            if (fc.supportsMandatory())       // currently X++ web controls don't have the mandatory property
            {
                boolean testMandatory = !this.mustMarkControlAsMandatory(fc);
                if ((testMandatory && fc.mandatory()) || (!testMandatory && !fc.mandatory()))
                {
                    mandatoryToggle.add(fc);
                }
            }

            test = this.mustShowControl(fc);

            if (test && fc.visible() && dontShowDisabled && !willBeEnabled())
            {
                visibleToggle.add(fc);
            }
            else if ((test && !fc.visible()) || (!test && fc.visible()))
            {
                if (!fc.visible() && dontShowDisabled && !willBeEnabled())
                {
                    continue;
                }
                visibleToggle.add(fc);
            }
        }
        return visibleToggle.elements() + enabledToggle.elements() + mandatoryToggle.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInvisibleRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the ranges on fields that are not selected.
    /// </summary>
    /// <param name="_query">
    /// The query in which ranges are checked and potentially cleared.
    /// </param>
    protected void clearInvisibleRanges(Query _query)
    {
        int             qbrIdx;

        DictTable dictTable = new DictTable(tableNum(InventDim));
        // If there is a range for an invisible field, clear it
        for (qbrIdx = 1; qbrIdx <= _query.dataSourceTable(tableNum(InventDim)).rangeCount(); qbrIdx++)
        {
            QueryBuildRange qbr = _query.dataSourceTable(tableNum(InventDim)).range(qbrIdx);
            if (qbr.value() != '')
            {
                // We have to use the fieldName(), because field() returns an invalid value
                FieldId inventDimFieldId = dictTable.fieldName2Id(qbr.fieldName());
                FieldId inventDimParmFieldId = this.dim2dimParm(inventDimFieldId);
                if (!this.isFieldRangeVisible(inventDimParmFieldId))
                {
                    qbr.value('');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldRangeVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the range on the specified field is visible.
    /// </summary>
    /// <param name = "_inventDimParmFieldId">The field ID.</param>
    /// <returns>true if the range on the specified field is visible; otherwise, false.</returns>
    protected boolean isFieldRangeVisible(FieldId _inventDimParmFieldId)
    {
        return dimParmVisibleGrid.(_inventDimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectControls</Name>
				<Source><![CDATA[
    protected void collectControls(Set _validDataSources = null)
    {
        inventDimControls = InventDimControlsCollect_Frm::newFromFormInterfaceValidDataSources(callingElement,_validDataSources
        , controlIdCollectionEnumerator
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>delLast</Name>
				<Source><![CDATA[
    public void delLast()
    {
        xSysLastValue::deleteLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes sure that the appropriate dimension fields are enabled.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    ///    setup.
    /// </param>
    /// <remarks>
    ///    Call this method when the active record in the form has changed
    /// </remarks>
    public void formActiveSetup(InventDimGroupSetup _inventDimGroupSetup = null)
    {
        this.parmInventDimGroupSetup(_inventDimGroupSetup);

        this.initDimParmEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formSetControls</Name>
				<Source><![CDATA[
    public void formSetControls(
        boolean _lockForm,
        boolean _resizeGrid = false)
    {
        boolean makeChanges = this.buildToggleLists() || _resizeGrid;

        if (makeChanges && _lockForm)
        {
            callingElement.lock();
        }

        this.updateControls();

        if (makeChanges && _lockForm)
        {
            callingElement.unLock();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formSetControlsRightClick</Name>
				<Source><![CDATA[
    public void formSetControlsRightClick(
        boolean _lockForm,
        boolean _resizeGrid = false,
        Args    _args = null)
    {
        this.formSetControls(_lockForm, _resizeGrid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast(boolean _forUpdate = false)
    {
        xSysLastValue::getLast(this);

        lastValueRead = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this class.
    /// </summary>
    /// <remarks>
    ///    This method is called from the constructing new method.
    /// </remarks>
    public void init()
    {
        if (!callingElement)
        {
            throw error(strFmt("@SYS54101", funcName()));
        }

        super();

        visibleToggle = new Set(Types::Class);
        enabledToggle = new Set(Types::Class);
        mandatoryToggle = new Set(Types::Class);

        this.collectControls(validDataSources);

        //right-click is only supported for desktop forms
        if (callingElement is InventDimAxFormAdapter)
        {
            //work around the compiler bug
            Object dummy = callingElement;
            InventDimAxFormAdapter desktopFormAdapter = dummy;

            rightClickActive  = InventDimParm::inventDimFormRightClick(desktopFormAdapter.parmFormObject());
        }
        else if (callingElement is InventDimListPageInteractionAdapter)
        {
            InventDimListPageInteractionAdapter listPageAdapter = callingElement as InventDimListPageInteractionAdapter;

            rightClickActive = InventDimParm::inventDimFormRightClick(listPageAdapter.parmListPageInteractionObject());
        }

        this.initDimParmVisible();
        this.initDimParmVisibleGrid();
        if (rightClickActive)
        {
            this.initDimParmLockedRightClick();
        }

        this.initDimParmEnabled();
        this.initUserSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmEnabled</Name>
				<Source><![CDATA[
    public InventDimParm initDimParmEnabled()
    {
        List            dimActiveFields     = this.inventDimGroupSetup().activeFields();
        ListEnumerator  enumerator          = dimActiveFields.getEnumerator();

        this.clearDimParmBuffer(dimParmEnabled);

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = this.dim2dimParm(dimFieldId);
            dimParmEnabled.(dimParmFieldId) = this.mustEnableField(dimFieldId);
        }
        return dimParmEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmLockedRightClick</Name>
				<Source><![CDATA[
    protected InventDimParm initDimParmLockedRightClick()
    {
        dimParmLockedRightClick.clear();
        return dimParmLockedRightClick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmVisibleGrid</Name>
				<Source><![CDATA[
    protected InventDimParm initDimParmVisibleGrid()
    {
        ListEnumerator  enumerator      = this.dimFields().getEnumerator();

        this.clearDimParmBuffer(dimParmVisibleGrid);

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = this.dim2dimParm(dimFieldId);
            dimParmVisibleGrid.(dimParmFieldId) = this.mustShowGridField(dimFieldId);
        }
        return dimParmVisibleGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUserSetup</Name>
				<Source><![CDATA[
    protected void initUserSetup()
    {
        if (!rightClickActive) // No rightClick form available
        {
            return;
        }

        if (!this.useSysLastValue()) // setup can not be saved
        {
            return;
        }

        if (! lastValueRead )
        {
            this.getLast();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        str nameExtension = 'I_Dim';

        if (inventDimControls)
        {
            nameExtension += inventDimControls.validDataSourceNames();
        }

        if (callingElement && callingElement.args() && callingElement.args().caller() && SysDictClass::isEqualOrSuperclass(classIdGet(callingElement.args().caller()),classNum(FormRun)))
        {
            nameExtension += callingElement.args().caller().name();
        }

        return int2str(str2HashKey(nameExtension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        return callingElement.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to enable a form control.
    /// </summary>
    /// <param name="_fc">
    /// A form control to check.
    /// </param>
    /// <param name="_dimParmEnabled">
    /// <c>InventDimParm</c> buffer for enabled inventory dimension fields.
    /// </param>
    /// <returns>
    /// true if a control should be enabled; otherwise false.
    /// </returns>
    protected boolean mustEnableControl(
        InventDimFormControlInterface   _fc,
        InventDimParm                   _dimParmEnabled = dimParmEnabled)
    {
        FieldId fieldId = inventDimControls.fieldId(_fc);

        if (!this.canEnableDimension(fieldId))
        {
            return false;
        }

        FieldId dimParmFieldId = this.dim2dimParm(fieldId);
        return _dimParmEnabled.(dimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified inventory dimension must be enabled on the form
    /// where the control is used.
    /// It is possible to ignore the result of this method by providing the list of enabled dimensions
    /// to the <c>parmDimParmEnabled</c> method.
    /// </summary>
    /// <param name = "_dimFieldId">The ID of the inventory dimension field.</param>
    /// <returns>true, if the field must be enabled; otherwise, false.</returns>
    /// <remarks>
    /// When overriding this method in the child controller classes the contract of the current implementation must be respected:
    /// Dimensions will not be enabled if the controller is not editable (controlled by the <c>allowEdit</c> method).
    /// Inactive dimensions cannot be enabled if the controller class only allows enabling inactive dimensions (controlled by the <c>mustEnableOnlyActiveDimensions</c> method).
    /// Controller does not allow enabling the specified inventory dimension (controlled by the <c>canEnableDimension</c> method).
    /// To ensure that the contract of the method is respected the overridden method must always return <c>NoYes::No</c> when the base class returns <c>NoYes::No</c>.
    /// </remarks>
    protected NoYes mustEnableField(FieldId _dimFieldId)
    {
        if (!_dimFieldId)
        {
            return NoYes::No;
        }

        if (!this.allowEdit())
        {
            return NoYes::No;
        }

        if (this.mustEnableOnlyActiveDimensions() && !this.isDimensionActive(_dimFieldId))
        {
            return NoYes::No;
        }

        if (!this.canEnableDimension(_dimFieldId))
        {
            return NoYes::No;
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any of the inventory dimension fields can be enabled on the form.
    /// </summary>
    /// <returns>true, if it is allowed to enable </returns>
    /// <remarks>This method can be overridden in the child classes to modify the result of the <c>mustEnableField</c> method.</remarks>
    protected boolean allowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableOnlyActiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether only the active dimensions must be enabled.
    /// </summary>
    /// <returns>true, if only the active dimensions must be enabled; otherwise, false.</returns>
    /// <remarks>This method can be overridden in the child classes to modify the result of the <c>mustEnableField</c> method.</remarks>
    protected boolean mustEnableOnlyActiveDimensions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableDimensionInCurrentCountryContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified inventory dimension can be enabled in the current country context.
    /// </summary>
    /// <param name="_fieldId">The ID of the inventory dimension field.</param>
    /// <returns>true, if the inventory dimension can be enabled; otherwise, false.</returns>
    /// <remarks>This method can be overridden in the child classes to modify the result of the <c>mustEnableField</c> and <c>canEnableField</c> methods.</remarks>
    protected boolean canEnableDimensionInCurrentCountryContext(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            #ISOCountryRegionCodes
            return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOwnerFieldInConsignmentConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified inventory dimension field is the inventory owner field, and the consignment configuration is enabled.
    /// </summary>
    /// <param name = "_fieldId">The ID of the inventory dimension field.</param>
    /// <returns>true, if the field is the inventory owner field, and consignment is enabled; otherwise, false.</returns>
    protected boolean isOwnerFieldInConsignmentConfiguration(FieldId _fieldId)
    {
        return (_fieldId == fieldNum(InventDim, InventOwnerId_RU)
            && isConfigurationKeyEnabled(configurationKeyNum(ConsignmentInbound)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified inventory dimension can be enabled on the form
    /// where the control is used.
    /// It is possible to bypass the checks in this method by providing the list of dimensions
    /// that can be enabled to the <c>parmDimParmCanBeEnabled</c> method.
    /// </summary>
    /// <param name = "_fieldId">The ID of the inventory dimension.</param>
    /// <returns>true, if the inventory dimension can be enabled; otherwise, false.</returns>
    /// <remarks>
    /// When overriding this method in the child controller classes the contract of the current implementation must be respected:
    /// The inventory dimension cannot be enabled if the controller class does not allow enabling it in the current country context (controlled by the <c>canEnableDimensionInCurrentCountryContext</c> method).
    /// To ensure that the contract of the method is respected the overridden method must always return false when the base class returns false.
    /// </remarks>
    protected boolean canEnableDimension(FieldId _fieldId)
    {
        FieldId dimParmFieldId = this.dim2dimParm(_fieldId);
        if (dimParmCanBeEnabled.(dimParmFieldId))
        {
            return true;
        }

        return this.canEnableDimensionInCurrentCountryContext(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkControlAsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to make a form control mandatory.
    /// </summary>
    /// <param name="_fc">
    /// A form control to check.
    /// </param>
    /// <param name="_dimParmEnabled">
    /// <c>InventDimParm</c> buffer for enabled inventory dimension fields.
    /// </param>
    /// <returns>
    /// true if a control should be mandatory; otherwise false.
    /// </returns>
    protected boolean mustMarkControlAsMandatory(
        InventDimFormControlInterface   _fc,
        InventDimParm                   _dimParmEnabled = dimParmEnabled)
    {
        FieldId dimParmFieldId = this.dim2dimParm(inventDimControls.fieldId(_fc));
        if (!_dimParmEnabled.(dimParmFieldId))
        {
            return false;
        }
        return this.mustMarkFieldAsMandatory(inventDimControls.fieldId(_fc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkFieldAsMandatory</Name>
				<Source><![CDATA[
    protected NoYes mustMarkFieldAsMandatory(FieldId  _dimFieldId)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowControl</Name>
				<Source><![CDATA[
    protected boolean mustShowControl(
        InventDimControlInterface   _fc,
        InventDimParm               _dimParmVisibleGrid = dimParmVisibleGrid)
    {
        FieldId dimParmFieldId = this.dim2dimParm(inventDimControls.fieldId(_fc));
        return _fc.isInGrid() ? _dimParmVisibleGrid.(dimParmFieldId) : dimParmVisible.(dimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified dimension field should be shown in the grid.
    /// </summary>
    /// <param name="_dimFieldId">
    /// Dimension field ID.
    /// </param>
    /// <returns>
    /// NoYes::Yes if the field should be shown in the grid; otherwise, NoYes::No.
    /// </returns>
    protected NoYes mustShowGridField(FieldId _dimFieldId)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion,InventDimCtrl_Frm::packDimParm(dimParmVisibleGrid)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingElement</Name>
				<Source><![CDATA[
    public InventDimFormInterface parmCallingElement(InventDimFormInterface _callingElement = callingElement)
    {
        callingElement = _callingElement;
        return callingElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmControlIdCollectionEnumerator</Name>
				<Source><![CDATA[
    public InventDimControlIdCollectionEnumerator parmControlIdCollectionEnumerator(InventDimControlIdCollectionEnumerator _controlIdCollectionEnumerator = controlIdCollectionEnumerator)
    {
        controlIdCollectionEnumerator = _controlIdCollectionEnumerator;
        return controlIdCollectionEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimParmEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the set of then inventory dimensions that must be enabled on the form
    /// where the controller is used.
    /// </summary>
    /// <param name = "_dimParmEnabled">A set of Boolean values which determine for each of the inventory dimensions whether the dimension must be enabled.</param>
    /// <returns>A set of Boolean values which determine for each of the inventory dimensions whether the dimension must be enabled.</returns>
    /// <remarks>
    /// It may not be possible to enable certain inventory dimensions using this method if the controller class
    /// does not allow enabling the specified dimension (see the <c>canEnableDimension</c> method).
    /// </remarks>
    public InventDimParm parmDimParmEnabled(InventDimParm _dimParmEnabled = dimParmEnabled)
    {
        dimParmEnabled = _dimParmEnabled;
        return dimParmEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimParmCanBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the set of the inventory dimensions that can be enabled on the form where the controller is used.
    /// </summary>
    /// <param name = "_dimParmCanBeEnabled">A set of Boolean values which determine for each of the inventory dimensions whether the dimension can be enabled.</param>
    /// <returns>A set of Boolean values which determine for each of the inventory dimensions whether the dimension can be enabled.</returns>
    /// <remarks>
    /// This method sets the inventory dimensions that can be enabled, but it does not mean they
    /// will be enabled (see the <c>mustEnableField</c> method).
    /// </remarks>
    public InventDimParm parmDimParmCanBeEnabled(InventDimParm _dimParmCanBeEnabled = dimParmCanBeEnabled)
    {
        dimParmCanBeEnabled = _dimParmCanBeEnabled;
        return dimParmCanBeEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimParmLockedRightClick</Name>
				<Source><![CDATA[
    public InventDimParm parmDimParmLockedRightClick(InventDimParm _dimParmLockedRightClick = dimParmLockedRightClick)
    {
        dimParmLockedRightClick = _dimParmLockedRightClick;
        return dimParmLockedRightClick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimParmVisibleGrid</Name>
				<Source><![CDATA[
    public InventDimParm parmDimParmVisibleGrid(
        InventDimParm   _dimParmVisibleGrid = dimParmVisibleGrid,
        boolean         _overRideUserSetup  = false)
    {
        overRideUserSetup = _overRideUserSetup;

        if (this.sysLastValueExist() && !overRideUserSetup)
        {
            return dimParmVisibleGrid;
        }

        dimParmVisibleGrid = _dimParmVisibleGrid;
        return dimParmVisibleGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDontShowDisabled</Name>
				<Source><![CDATA[
    public boolean parmDontShowDisabled(boolean _dontShowDisabled = dontShowDisabled)
    {
        dontShowDisabled = _dontShowDisabled;
        return dontShowDisabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLargeRightClickForm</Name>
				<Source><![CDATA[
    public NoYes parmLargeRightClickForm(NoYes _largeRightClickForm = largeRightClickForm)
    {
        largeRightClickForm = _largeRightClickForm;
        return largeRightClickForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverRideUserSetup</Name>
				<Source><![CDATA[
    public boolean parmOverRideUserSetup(boolean _overRideUserSetup = overRideUserSetup)
    {
        overRideUserSetup = _overRideUserSetup;
        return overRideUserSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipOnHandLookUp</Name>
				<Source><![CDATA[
    public boolean parmSkipOnHandLookUp(boolean _skipOnHandLookUp = skipOnHandLookUp)
    {
        skipOnHandLookUp = _skipOnHandLookUp;
        return skipOnHandLookUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightClickModifyQueryGroupBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure that ranges are preserved and that ranges on fields no longer visible are removed.
    /// </summary>
    /// <param name="_topFormDS">
    /// The form data source in top of the form query.
    /// </param>
    public void rightClickModifyQueryGroupBy(FormDataSource _topFormDS)
    {
        container       packedRangeAndSortorder;

        // Save the ranges from the queryRun before
        if (_topFormDS.queryRun() != null && _topFormDS.queryRun().query() != null)
        {
            packedRangeAndSortorder = SysQuery::packRangeAndSortorder(_topFormDS.queryRun().query());
        }

        // Apply the saved ranges to the query created from the activated dimensions
        SysQuery::unpackRangeAndSortorder(_topFormDS.query(), packedRangeAndSortorder);

        // Clear the ranges for fields which became invisible
        this.clearInvisibleRanges(_topFormDS.query());
        if (_topFormDS.queryRun() != null)
        {
            this.clearInvisibleRanges(_topFormDS.queryRun().query());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowAllProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows only the product dimensions on the dimension setup form.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean setupShowAllProductDimensions()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowClosed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether closed transactions should be visible on the dimension setup form.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean setupShowClosed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowClosedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sum without values should be shown.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean setupShowClosedQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the item number should be visible in the dimension setup form.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean setupShowItemId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysLastValueExist</Name>
				<Source><![CDATA[
    public boolean sysLastValueExist()
    {
        return xSysLastValue::existLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   c;

        if (overRideUserSetup)
        {
            return false;
        }

        if (! _packedClass)
        {
            return false;
        }

        // Is 5 for version 2.5 and earlier
        if (conLen(_packedClass) == 5)
        {
            if (InventDimFixedClass::inventDimParm2InventDimFixed(dimParmVisibleGrid) == conPeek(_packedClass,1))
            {
                return false;
            }

            InventDimFixedClass::inventDimFixed2InventDimParm(conPeek(_packedClass,1),dimParmVisibleGrid);
            dimParmVisibleGrid.ConfigIdFlag     = conPeek(_packedClass,2);
            dimParmVisibleGrid.ItemIdFlag       = conPeek(_packedClass,#ItemIdFlag);
            dimParmVisibleGrid.ClosedFlag       = conPeek(_packedClass,#ClosedFlag);
            dimParmVisibleGrid.ClosedQtyFlag    = conPeek(_packedClass,#ClosedQtyFlag);
            return true;
        }

        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,c] = _packedClass;
                if (! c)
                {
                    return false;
                }

                InventDimCtrl_Frm::unpackDimParm(dimParmVisibleGrid,c);
                break;

            default:
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the controls in the user interface, such as a form or report, by using the current
    ///    parameter values.
    /// </summary>
    /// <remarks>
    ///    This method hides or shows controls. It is also responsible for enabling and disabling controls.
    /// </remarks>
    public void updateControls()
    {
        InventDimFormControlInterface fc;

        if (formHasMethodUpdateControls == UnknownNoYes::Unknown)
        {
            formHasMethodUpdateControls = callingElement.hasMethod(identifierStr(updateControls)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodUpdateControls == UnknownNoYes::Yes)
        {
            callingElement.formObject().updateControls();
        }

        if (formHasMethodUpdatedControls == UnknownNoYes::Unknown)
        {
            formHasMethodUpdatedControls = callingElement.hasMethod(identifierStr(inventDimCtrl_UpdatedControls)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodUpdatedControls == UnknownNoYes::Yes)
        {
            callingElement.formObject().inventDimCtrl_UpdatedControls();
        }

        if (enabledToggle.empty() && visibleToggle.empty() && mandatoryToggle.empty())
        {
            return;
        }

        for (fc = inventDimControls.first(); fc; fc = inventDimControls.next())
        {
            if (enabledToggle.in(fc))
            {
                fc.allowEdit(!fc.allowEdit());
            }

            if (visibleToggle.in(fc))
            {
                fc.visible(!fc.visible());
            }

            if (mandatoryToggle.in(fc))
            {
                fc.mandatory(!fc.mandatory());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSysLastValue</Name>
				<Source><![CDATA[
    public boolean useSysLastValue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLastValueRead</Name>
				<Source><![CDATA[
    ///
    /// <summary>
    /// Reset last value reread to false to make sure the correct subclass of <c>InventDimCtrl_Frm</c> can get last value correctly in initializing.
    /// </summary>
    public void resetLastValueRead()
    {
        lastValueRead = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm construct()
    {
        return new InventDimCtrl_Frm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObjectMethod</Name>
				<Source><![CDATA[
    public static IdentifierName inventDimSetupObjectMethod()
    {
        return identifierStr(inventDimSetupObject);  // this is a method name
    }

]]></Source>
			</Method>
			<Method>
				<Name>packDimParm</Name>
				<Source><![CDATA[
    static public container packDimParm(InventDimParm _dimParmVisibleGrid)
    {
        return [#currentVersion,InventDimFixedClass::inventDimParm2InventDimFixed(_dimParmVisibleGrid),
                _dimParmVisibleGrid.ItemIdFlag,
                _dimParmVisibleGrid.ClosedFlag,
                _dimParmVisibleGrid.ClosedQtyFlag
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackDimParm</Name>
				<Source><![CDATA[
    static public void unpackDimParm(
        InventDimParm   _dimParmVisibleGrid,
        container       _c)
    {
        InventDimFixedClass::inventDimFixed2InventDimParm(conPeek(_c,#FixedDimensions),_dimParmVisibleGrid);
        _dimParmVisibleGrid.ItemIdFlag      = conPeek(_c,#ItemIdFlag);
        _dimParmVisibleGrid.ClosedFlag      = conPeek(_c,#ClosedFlag);
        _dimParmVisibleGrid.ClosedQtyFlag   = conPeek(_c,#ClosedQtyFlag);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>