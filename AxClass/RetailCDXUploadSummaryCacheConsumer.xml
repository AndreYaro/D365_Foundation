<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXUploadSummaryCacheConsumer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCDXUploadSummaryCacheConsumer</c> class implements a consumer that must be used for
/// all consumers of cdx upload session summary cache.
/// </summary>
public final class RetailCDXUploadSummaryCacheConsumer implements SysIDataCacheConsumer
{
    SysIFilter filter;
    RetailCDXDataGroupRefRecId dataGroupRecId;
    SysIDataCacheContextManager cacheContextManager;
    SysIDataCacheContext        cacheContext;
    SysIDataCacheManager        cacheManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmConsumer</Name>
				<Source><![CDATA[
    public SysIDataConsumer parmConsumer()
    {
        return SysDataConsumerFactory::newFromType(SysDataConsumerTypeEnum::DataSet, classStr(RetailCDXUploadSummaryCacheDataSet));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryable</Name>
				<Source><![CDATA[
    public SysIQueryable parmQueryable()
    {
        Query query = new Query();
        query.addDataSource(tableNum(RetailCDXUploadSummaryCache));

        return SysQueryableFactory::newFromQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilter</Name>
				<Source><![CDATA[
    public SysIFilter parmFilter()
    {
        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFilter</Name>
				<Source><![CDATA[
    private void initializeFilter()
    {
        filter = SysFilterFactory::createEmptyFilter();

        SysIFilterValue filterValue = SysFilterValueFactory::createFilterValueForInteger(dataGroupRecId, extendedTypeNum(RetailCDXDataGroupRefRecId));
        filter.addItem(filterValue, SysFilterOperator::Equal, SysFilterValueResolutionMethod::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCacheContext</Name>
				<Source><![CDATA[
    private void initializeCacheContext()
    {
        SysIDataConsumer _consumer = this.parmConsumer();

        cacheContextManager = SysDataCacheContextManagerFactory::newManager();

        SysIDataCacheConfigurationManager manager = SysDataCacheConfigurationManagerFactory::newFromType(_consumer.parmType());
        SysIDataCacheConfiguration cacheConfiguration = manager.getConfigurationForConsumer(_consumer.parmIdentifier());

        if (cacheConfiguration.parmFilteringEnabled() == NoYes::Yes && !this.parmFilter())
        {
            SysDataCacheInstrumentation::logErrorMessage(funcName(), strFmt("@ProductFramework_DataCache:MissingFilterError", cacheConfiguration.parmConsumerIdentifier()), cacheConfiguration.parmConsumerIdentifier());
        }

        cacheContextManager = SysDataCacheContextManagerFactory::newManager();
        SysIDataContext dataContext = SysDataContextBuilder::newContextWithFilter(this.parmFilter(), cacheConfiguration.parmFilteringEnabled());

        cacheContext = cacheContextManager.findOrCreateCacheContext(_consumer.parmType(), _consumer.parmIdentifier(), dataContext.parmId());

        cacheManager = SysDataCacheManagerFactory::newFromType(_consumer.parmType(), _consumer.parmIdentifier());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailCDXUploadSummaryCacheConsumer construct()
    {
        return new RetailCDXUploadSummaryCacheConsumer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataGroupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the data group record Identifier.
    /// </summary>
    /// <param name = "_dataGroupRecId"> The data group RecId.</param>
    /// <returns>The data group RecId.</returns>
    public RetailCDXDataGroupRefRecId parmDataGroupRecId(RetailCDXDataGroupRefRecId _dataGroupRecId = dataGroupRecId)
    {
        dataGroupRecId = _dataGroupRecId;
        return dataGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDataGroupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>RetailCDXUploadSummaryCacheConsumer</c> class based on the provided data group Id.
    /// </summary>
    /// <param name = "_dataGroupRecId">The data group RecId.</param>
    /// <returns> The <c>RetailCDXUploadSummaryCacheConsumer</c> object. </returns>
    public static RetailCDXUploadSummaryCacheConsumer fromDataGroupRecId(RetailCDXDataGroupRefRecId _dataGroupRecId)
    {
        RetailCDXUploadSummaryCacheConsumer consumer = new RetailCDXUploadSummaryCacheConsumer();
        consumer.parmDataGroupRecId(_dataGroupRecId);
        consumer.initializeFilter();
        return consumer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheContextManager</Name>
				<Source><![CDATA[
    protected SysIDataCacheContextManager parmCacheContextManager()
    {
        return cacheContextManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheContext</Name>
				<Source><![CDATA[
    protected SysIDataCacheContext parmCacheContext()
    {
        return cacheContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheManager</Name>
				<Source><![CDATA[
    protected SysIDataCacheManager parmCacheManager()
    {
        return cacheManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the CDX upload session summary cache dataset.
    /// </summary>
    /// <param name = "dataGroupRecId">The data group RecId.</param>
    public static void prepareDataSet(RecId dataGroupRecId)
    {
        RetailCDXUploadSummaryCacheConsumer cacheConsumer = RetailCDXUploadSummaryCacheConsumer::fromDataGroupRecId(dataGroupRecId);
        SysIDataConsumer consumer = cacheConsumer.parmConsumer();

         cacheConsumer.initializeCacheContext();

        SysIDataCacheConfigurationManager manager = SysDataCacheConfigurationManagerFactory::newFromType(consumer.parmType());
        SysIDataCacheConfiguration configuration = manager.getConfigurationForConsumer(consumer.parmIdentifier());

        if (!cacheConsumer.parmCacheManager().isCacheValid(cacheConsumer.parmCacheContextManager().getLastUpdate(cacheConsumer.parmCacheContext().parmId())))
        {
            cacheConsumer.parmCacheManager().forceRefreshCacheNoFetch(cacheConsumer.parmCacheContext());
        }

        SysIDataCacheMetadata dataCacheMetadata = SysDataCacheMetadataFactory::newFromType(consumer.parmType(), consumer.parmIdentifier());

        SysIQueryable queryable = cacheConsumer.parmQueryable();

        if (!queryable)
        {
            SysDataCacheInstrumentation::throwError(funcName(), strFmt("@ProductFramework_DataCache:ObjectNotInitializedError", classStr(SysIQueryable)), consumer.parmIdentifier());
        }

        Query q = queryable.parmQueryableObject() as Query;

        QueryBuildDataSource qbdsCache = q.dataSourceTable(dataCacheMetadata.parmTypeId());

        if (!qbdsCache)
        {
            SysDataCacheInstrumentation::throwError(funcName(), strFmt("@ProductFramework_DataCache:ObjectNotInitializedError", classStr(QueryBuildDataSource)), consumer.parmIdentifier());
        }

        QueryBuildRange qbr = SysQueryBase::findOrCreateRange(qbdsCache, dataCacheMetadata.parmCacheContextId());
        qbr.value(queryValue(cacheConsumer.parmCacheContext().parmId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last update date for the upload session summary cache dataset.
    /// </summary>
    /// <returns>
    /// The last update date for the upload session summary cache dataset.
    /// </returns>
    public static SysDataCacheLastUpdate getLastUpdate()
    {
        SysIDataCacheConsumer uploadSummaryCacheConsumer = RetailCDXUploadSummaryCacheConsumer::construct();
        SysIDataConsumer dataConsumer = uploadSummaryCacheConsumer.parmConsumer();
        SysIDataCacheConfigurationManager manager = SysDataCacheConfigurationManagerFactory::newFromType(dataConsumer.parmType());
        SysIDataCacheConfiguration cacheConfiguration = manager.getConfigurationForConsumer(dataConsumer.parmIdentifier());
        SysIDataContext dataContext = SysDataContextBuilder::newContextWithFilter(uploadSummaryCacheConsumer.parmFilter(), cacheConfiguration.parmFilteringEnabled());
        SysIDataCacheContextManager cacheContextManager = SysDataCacheContextManagerFactory::newManager();
        SysIDataCacheContext cacheContext = cacheContextManager.findOrCreateCacheContext(dataConsumer.parmType(), dataConsumer.parmIdentifier(),dataContext.parmId());

        return cacheContextManager.getLastUpdate(cacheContext.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>forcePrepareDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the CDX upload session summary cache dataset.
    /// </summary>
    public static void forcePrepareDataSet()
    {
        SysIDataCacheConsumer uploadSummaryCacheConsumer = RetailCDXUploadSummaryCacheConsumer::construct();
        SysIDataConsumer dataConsumer = uploadSummaryCacheConsumer.parmConsumer();
        SysIDataCacheConfigurationManager manager = SysDataCacheConfigurationManagerFactory::newFromType(dataConsumer.parmType());
        SysIDataCacheConfiguration cacheConfiguration = manager.getConfigurationForConsumer(dataConsumer.parmIdentifier());
        SysIDataContext dataContext = SysDataContextBuilder::newContextWithFilter(uploadSummaryCacheConsumer.parmFilter(), cacheConfiguration.parmFilteringEnabled());
        SysIDataCacheContextManager cacheContextManager = SysDataCacheContextManagerFactory::newManager();
        SysIDataCacheContext cacheContext = cacheContextManager.findOrCreateCacheContext(dataConsumer.parmType(), dataConsumer.parmIdentifier(),dataContext.parmId());
        SysIDataCacheManager cacheManager = SysDataCacheManagerFactory::newFromType(dataConsumer.parmType(), dataConsumer.parmIdentifier());

        cacheManager.forceRefreshCache(cacheContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>