<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportAttribute(identifierStr(Dynamics.AX.Application.TransactionReversalBase))]
internal final class AssetTransactionReversal extends TransactionReversalBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    internal boolean reverse(TransactionReversalExecutionDetail _reversalExecutionDetail, TransactionReversalContract _contract)
    {
        boolean reversed = false;

        AssetTrans assetTrans = AssetTrans::findByVoucher(_reversalExecutionDetail.SubledgerVoucher, _reversalExecutionDetail.TransactionDate);

        if (assetTrans.RecId != 0)
        {
            // Skip if voucher is already reversed as related.
            if (AssetReversalRelatedVoucher::isReversed(assetTrans.Voucher, assetTrans.TransDate))
            {
                reversed = true;
            }
            else
            {
                TransactionReversal_Asset assetReversal = TransactionReversal_Asset::construct();
                assetReversal.parmReversalDate(_contract.parmReversalDate());
                assetReversal.parmContract(_contract);

                reversed = assetReversal.reverseTransaction(assetTrans);
            }     
        }

        return reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJournalCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isValidJournalCategory(TransactionReversalExecutionDetail _detail)
    {
        boolean isValid;

        switch (_detail.JournalCategory)
        {
            case LedgerTransType::GeneralJournal:
                
                isValid = (AssetTrans::findByVoucher(_detail.SubledgerVoucher, _detail.TransactionDate).RecId != 0);
                break;

            case LedgerTransType::FixedAssets:

                isValid = true;
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecurableType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected SecurableType getSecurableType()
    {
        return SecurableType::MenuItemAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MenuItemName getMenuItemName()
    {
        return menuItemActionStr(TransactionReversal_Asset);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>