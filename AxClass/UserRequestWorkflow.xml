<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserRequestWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
[SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflow instead.', false, 30\06\2020)]
public class UserRequestWorkflow implements WorkflowCompletedEventHandler, WorkflowCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a canceled event for a workflow.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that contains context information about the workflow item that triggered the event.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflow instead.', false, 30\11\2017)]
    public void canceled(WorkflowEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowCanceled();
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a submit action that is applied to a workflow.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that contains context information about the workflow item that triggered the event.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflow instead.', false, 30\11\2017)]
    public void completed(WorkflowEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowCompleted();
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a submitted event for a workflow.
    /// </summary>
    /// <param name="_args">
    /// A value that contains the record that was submitted to the workflow.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflow instead.', false, 30\11\2017)]
    public void submitted(Args _args)
    {
        UserRequest request = _args.record() as UserRequest;

        ttsbegin;
        request.workflowSubmitted();
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>UserRequestWorkflow</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the class.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflow instead.', false, 30\11\2017)]
    public static void main(Args _args)
    {
        FormRun                     formRun     = _args.caller() as FormRun;

        boolean                     dialogOK    = false;
        UserRequestWorkflow         workflow    = new UserRequestWorkflow();

        WorkflowVersionTable        workflowVersion;
        WorkflowSubmitDialog        workflowSubmitDialog;
        WorkflowComment             workflowComment;
        UserRequest                 userRequest;

        userRequest = _args.record() as UserRequest;

        workflowVersion = formRun.getActiveWorkflowConfiguration() as WorkflowVersionTable;

        workflowSubmitDialog = WorkflowSubmitDialog::construct(workflowVersion);
        workflowSubmitDialog.run();
        workflowComment = workflowSubmitDialog.parmWorkflowComment();
        dialogOK = workflowSubmitDialog.parmIsClosedOK();

        if (dialogOK && (userRequest.RequestStatus == UserRequestStatus::Draft || userRequest.RequestStatus == UserRequestStatus::WorkflowCanceled))
        {
            Workflow::activateFromWorkflowConfigurationId(
                workflowVersion.ConfigurationId,
                _args.record().RecId,
                workflowComment,
                NoYes::No);

            workflow.submitted(_args);

            if (formRun != null)
            {
                formRun.updateWorkflowControls();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>