<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCopyItemEstimates</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjCopyItemEstimates</c> class copys item estimates from WBS activities to item requirements.
/// </summary>
class ProjCopyItemEstimates
{
    PSAActivityEstimates    itemEstimates;
    ProjTable               projTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy Item estimates.
    /// </summary>
    /// <param name="_projItemCopyToType">
    /// Which type of project item does method copy estimates to.
    /// </param>
    /// <param name="_psaActivityEstimatesMap">
    /// Map containing estimate data to copy.
    /// </param>
    public void copy(ProjItemCopyToType _projItemCopyToType = ProjItemCopyToType::Project, Map _psaActivityEstimatesMap = null)
    {
        try
        {
            switch (_projItemCopyToType)
            {
                case ProjItemCopyToType::Project:
                    ttsBegin;
                    this.copyToItemRequirment(_psaActivityEstimatesMap);
                    ttscommit;
                    break;

                default:
                    this.copyToType(_projItemCopyToType, _psaActivityEstimatesMap);
                    break;
            }
        }
        catch
        {
            throw warning("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic for extensions to <c>ProjRevenueType</c>.
    /// </summary>
    /// <param name = "_projItemCopyToType">Which type of project item does method copy estimates to.</param>
    /// <param name = "_psaActivityEstimatesMap">Map containing estimate data to copy.</param>
    [Replaceable]
    public void copyToType(ProjItemCopyToType _projItemCopyToType, Map _psaActivityEstimatesMap = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLineFromItemEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line from item estimates.
    /// </summary>
    /// <param name = "_salesLine">The sales line record to initialize.</param>
    protected void initializeSalesLineFromItemEstimates(SalesLine _salesLine)
    {
        _salesLine.setInventDimId(itemEstimates.InventDimId);

        _salesLine.ItemId        = itemEstimates.ItemId;
        _salesLine.SalesQty      = itemEstimates.Quantity;
        _salesLine.ActivityNumber = itemEstimates.ActivityNumber;
        _salesLine.CurrencyCode   = itemEstimates.currencyCode(_salesLine.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToItemRequirment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy item estimates to item requirements.
    /// </summary>
    /// <param name="_psaActivityEstimatesMap">
    /// Map containing estimate data to copy.
    /// </param>
    private void copyToItemRequirment(Map _psaActivityEstimatesMap = null)
    {
        SalesLine               salesLine;
        InventTable             inventTable;
        InventTableModule       inventTableModule;
        DimensionDefault        defaultDimension;
        CustTable               custTable;

        if (!ProjStatusType::construct(projTable).validateWriteItemRequirement())
        {
            throw error("@SYS18447");
        }

        while select itemEstimates
        {
            salesLine.clear();
            salesLine.SalesType = SalesType::ItemReq;
            salesLine.initValue();

            inventTable             = InventTable::find(itemEstimates.ItemId);
            inventTableModule       = InventTableModule::find(itemEstimates.ItemId,ModuleInventPurchSales::Sales);

            salesLine.SalesUnit     = inventTableModule.UnitId;
            salesLine.ProjId         = projTable.ProjId;
            salesLine.ProjCategoryId = itemEstimates.ProjCategoryId;
            salesLine.ProjFundingSource = projTable.getProjectDefaultInvoiceAccount();
            
            this.initializeSalesLineFromItemEstimates(salesLine);

            salesLine.initFromProjTable(projTable, false);

            SalesLineType_ItemReq::setSalesLineReceiptDate(salesLine);

            salesLine.createLine(false,    // Validation
                                 false,    // Init from SalesTable
                                 true,     // Init from InventTable
                                 true,     // Calc invent Qty
                                 false,    // Search markup         - copied from salesQuotationline
                                 false,    // Search price          - copied from salesQuotationline
                                 false,    // Check reservation
                                 true);    // Skip creditlimit check

            salesLine.Name               = itemEstimates.Description;
            defaultDimension             = projTable.DefaultDimension;
         
            custTable = CustTable::find(projTable.CustAccount);

            // initiate default dimension and tax group from custTable
            if (custTable) 
            {
                if(!salesLine.TaxGroup)
                {
                    salesLine.TaxGroup  = custTable.TaxGroup;
                }

                defaultDimension    = this.mergeDimension(defaultDimension, custTable.DefaultDimension);
            }
            if (inventTable)
            {
                defaultDimension    = this.mergeDimension(defaultDimension, inventTable.DefaultDimension);
            }
            salesLine.DefaultDimension = salesLine.copyDimension(defaultDimension);

            salesLine.ProjLinePropertyId = itemEstimates.LinePropertyId;
            salesLine.TaxItemGroup       = InventTableModule.TaxItemGroupId;
            salesLine.CostPrice          = itemEstimates.UnitCostPrice;
            salesLine.SalesPrice         = itemEstimates.UnitSalesPrice;
            salesLine.LineAmount         = salesLine.calcLineAmount();

            if (!itemEstimates.ItemId)
            {
                salesLine.SalesCategory = itemEstimates.SalesCategory;
            }

            if (_psaActivityEstimatesMap)
            {
                MapEnumerator mapEnumerator = _psaActivityEstimatesMap.getEnumerator();
                while(mapEnumerator.moveNext())
                {
                    if (mapEnumerator.currentKey() == itemEstimates.RecId)
                    {
                        ttsbegin;
                        PSAActivityEstimates localItemEstimates = PSAActivityEstimates::find(mapEnumerator.currentValue(),true);

                        if (localItemEstimates)
                        {
                            localItemEstimates.SalesLineRefRecId = salesLine.RecId;
                            localItemEstimates.doUpdate();
                        }
                        ttscommit;
                    }
                }
            }

            salesLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionDefaultMap">
    /// A <c>DimensionDefaultMap</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// A <c>LegalEntityRecId</c> object that contains rec id of current legal entity.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    private DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension     = 0,
        DimensionDefaultMap _dimensionDefaultMap        = projTable,
        LegalEntityRecId    _legalEntityRecId           = CompanyInfo::findDataArea(projTable.dataAreaId).RecId
        )
    {
        DimensionMerge   dimensionMerge = DimensionMerge::newFromTable(_dimensionDefaultMap, _legalEntityRecId);
        return dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// New method of class.
    /// </summary>
    /// <param name="_itemEstimates">
    /// Item estimates.
    /// </param>
    /// <param name="_projTable">
    /// Project record.
    /// </param>
    protected void new(PSAActivityEstimates _itemEstimates, ProjTable _projTable)
    {
        itemEstimates = _itemEstimates;
        projTable = _projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct method to create new instance.
    /// </summary>
    /// <param name="_itemEstimates">
    /// Item estimates that's going to be copied to item requirement.
    /// </param>
    /// <param name="_projTable">
    /// Project record.
    /// </param>
    /// <returns>
    /// New instance.
    /// </returns>
    public static ProjCopyItemEstimates construct(PSAActivityEstimates _itemEstimates, ProjTable _projTable)
    {
        ProjCopyItemEstimates copyItemEstimates =
            new ProjCopyItemEstimates(_itemEstimates, _projTable);

        return copyItemEstimates;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>