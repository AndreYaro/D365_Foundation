<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcExplodePurchReqLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class performs requirements explosion for a purchase requisition line.
/// </summary>
[ReqRefTypeFactory(ReqRefType::RequisitionLine)]
class ReqCalcExplodePurchReqLine extends ReqCalcExplode implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strFmt("@SYS23501", refId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionsHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of ReqRequisitionsHelper to be used in explosion.
    /// </summary>
    /// <returns>
    /// An instance of ReqRequisitionsHelper to be used in explosion.
    /// </returns>
    public ReqRequisitionsHelper getRequisitionsHelper()
    {
        return ReqRequisitionsHelper::newDynamicPlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    protected void insertData()
    {
        PurchReqLine    purchReqLine;
        ReqTrans        reqTrans;
        boolean         validPurchReqLineRequirement;

        ReqRequisitionsHelper requisitionsHelper = this.getRequisitionsHelper();

        purchReqLine = PurchReqLine::find(this.parmPurchReqLineRecId());

        if (purchReqLine)
        {
            this.updateReqTransUpdate(purchReqLine.ItemId);

            select firstonly forupdate reqTrans
                where   reqTrans.PlanVersion        == this.reqPlanVersionRefRecId()
                    &&  reqTrans.RequisitionLine    == purchReqLine.RecId;

            if (reqTrans)
            {
                ReqTraceLog::deleteTraceForReqTrans(reqTrans);

                if (deleteCoverage)
                {
                    reqTrans.deleteExplosionCoverage(reqPlanData);
                }

                ttsbegin;
                validPurchReqLineRequirement = requisitionsHelper.initReqTransFromRequisitionLine(reqTrans, purchReqLine);
                reqTrans.update(reqPlanData);
                ttscommit;

                if (validPurchReqLineRequirement)
                {
                    this.addReqTrans2ReqTransCache(reqTrans, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRequisitionsDemand</Name>
				<Source><![CDATA[
    public void insertRequisitionsDemand()
    {
        this.cleanupInvalidRequisitionLineReferences(this.getRequisitionsHelper(), this.parmPurchReqLineRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS24484";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the ReqCalcExplodePurchReqLine class,
    /// to perform the explosion of a requisition line.
    /// </summary>
    /// <param name="_purchReqLine">
    /// Requisition line this instance will work based on.
    /// </param>
    /// <returns>
    /// A new instance of the ReqCalcExplodePurchReqLine class.
    /// </returns>
    public static ReqCalcExplode newPurchReqLine(PurchReqLine _purchReqLine)
    {
        ReqCalcExplode reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withSysLastValue()
            .withReqRefType(ReqRefType::RequisitionLine)
            .createInstance();

        reqCalcExplode.parmPurchReqLineRecId(_purchReqLine.RecId);

        reqCalcExplode.parmReqPlanId(ReqPlanSched::defaultDynamicId());
        reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        reqCalcExplode.parmReqPlanData(null);

        return reqCalcExplode;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>