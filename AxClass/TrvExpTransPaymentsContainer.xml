<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpTransPaymentsContainer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Simple class to contain TrvExpPaymentDetails records for a given TrvExpTrans RecId.
/// Its purpose is to enable the handling of multiple settled payments to be reversed 
/// properly. See comments for the reverseSettlements() method for further explanation 
/// of why this class is necessary.
/// </summary>
public class TrvExpTransPaymentsContainer
{
    private RecId expTransRecId;    
    private List paymentList = new List(Types::Record);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the TrvExpTransPaymentsContainer class, setting
    /// the expTrans variable witht he parameter.
    /// </summary>
    /// <param name = "_recId">The ReciId of the Expense Transaction.</param>
    public static TrvExpTransPaymentsContainer construct(RecId _expTransRecId)
    {
        TrvExpTransPaymentsContainer result = new TrvExpTransPaymentsContainer();
        result.expTransRecId = _expTransRecId;
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Count the number of payment detail records we have. There is no method in List
    /// that returns this, so we have to do it ourselves.
    /// </summary>
    /// <returns>The number of list elements in paymentList.</returns>
    private int getPaymentCount()
    {
        int result = 0;
        ListIterator iterator = new ListIterator(paymentList);
        iterator.begin();

        while(iterator.more())
        {
            result++;
            iterator.next();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPaymentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a payment detail record to the internal list of payment details. Payment
    /// detail records must be added this way so that the count of payment records gets
    /// updated properly.
    /// </summary>
    /// <param name = "_payment">The payment details record to add.</param>
    [Hookable(false), Wrappable(false)]
    public void addPaymentRecord(TrvExpPaymentDetails _payment)
    {
        paymentList.addEnd(_payment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSettlements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses settlements by making sure that multiple payments for the same 
    /// expense transaction are reduced to a single one, before the payment details
    /// are then reversed by setting payment voucher, checknum, and payment date 
    /// to null values. If there is more than one payment detail record, then the
    /// second settlement reversal will result in a key violation. One record must 
    /// remain, however, as the TrvExpPaymentDetails table drives the payments 
    /// display list for expense records, and a null payment record is expected to 
    /// show if payments have not been made, or payments have been reversed.
    /// 
    /// NOTE: this method MUST be run within the same transaction scope that the 
    /// paymentList was added to by the calling program. 
    /// </summary>
    [Hookable(false), Wrappable(false)]
    public void reverseSettlements()
    {
        int payCount = this.getPaymentCount();

        if (payCount > 0)
        {
            ListIterator iterator = new ListIterator(paymentList);
            iterator.begin();

            // deliberately "off-by-one" to ensure that exactly one payment details
            // record remains in the list.
            for (int i = 1; i < payCount; i++)
            {
                iterator.value().delete();
                iterator.next();
            }

            TrvExpPaymentDetails payment = iterator.value();
            payment.selectForUpdate(true);
            payment.PaymentVoucher = '';
            payment.PaymentDate = dateNull();
            payment.CheckNum = '';
            payment.PaymentStatus = TrvPaymentStatus::NotStarted;
            payment.update();

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>