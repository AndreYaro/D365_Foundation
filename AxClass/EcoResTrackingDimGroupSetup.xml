<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResTrackingDimGroupSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResTrackingDimGroupSetup
{
    EcoResTrackingDimensionGroupRecId   trackingDimensionGroup;

    #isoCountryRegionCodes
    #InventDimDevelop
    #localmacro.TrackingDimGroupFldSetupWhereClause
        where %1.IsActive                 == NoYes::Yes                          &&
              %1.IsPrimaryStockingEnabled == NoYes::Yes                          &&
              (%1.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU)   ||
               %1.DimensionFieldId == fieldNum(InventDim, InventProfileId_RU) ||
               %1.DimensionFieldId == fieldNum(InventDim, InventGTDId_RU))
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an instance of the <c>InventDimGroupFieldSetup</c> class that matches the specified dimension
    ///    field.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID of the inventory dimension field.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventDimGroupFieldSetup</c> class.
    /// </returns>
    public InventDimGroupFieldSetup getFieldSetup(
        FieldId                             _dimFieldId)
    {
        if (!_dimFieldId || !trackingDimensionGroup || !InventDim::isFieldIdTrackingDimension(_dimFieldId))
        {
            return InventDimGroupFieldSetup::newNoValidField();
        }

        EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(trackingDimensionGroup, _dimFieldId);
        ecoResTrackingDimensionGroupFldSetup.DimensionFieldId = _dimFieldId; // Ensure that dimension field is still specified even if not found
        return InventDimGroupFieldSetup::newEcoResTrackingDimensionGroupFldSetup(ecoResTrackingDimensionGroupFldSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldSetupEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an enumerator to iterate over all dimension fields.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventDimGroupFieldSetupEnumerator</c> class
    /// </returns>
    public InventDimGroupFieldSetupEnumerator getFieldSetupEnumerator()
    {
        InventDimGroupFieldSetupEnumerator inventDimGroupFieldSetupEnumerator = InventDimGroupFieldSetupEnumerator::newFieldListAndDimGroups(
            EcoResTrackingDimGroupSetup::dimFields().getEnumerator(),
            0, 0, trackingDimensionGroup);

        return inventDimGroupFieldSetupEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResTrackingDimensionGroupRecId  parmTrackingDimensionGroup(EcoResTrackingDimensionGroupRecId  _trackingDimensionGroup = trackingDimensionGroup)
    {
        trackingDimensionGroup = _trackingDimensionGroup;

        return trackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventRUDimForNotRuContextCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether tracking dimension group that uses Russian mandatory would be used in company
    /// without Russian context.
    /// </summary>
    /// <param name="_ecoResTrackingDimensionGroupRecIdNew">
    /// A tracking dimension group.
    /// </param>
    /// <returns>
    /// false if attempt to use tracking dimension group that uses Russian mandatory dimension in company
    /// without Russian context; otherwise, true.
    /// </returns>
    /// <remarks>
    /// This method runs on the server to reduce client load.
    /// </remarks>
    public static boolean checkInventRUDimForNotRuContextCompany(EcoResTrackingDimensionGroupRecId _ecoResTrackingDimensionGroupRecIdNew)
    {
        EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup;
        boolean                              ret = true;

        if (_ecoResTrackingDimensionGroupRecIdNew)
        {
            select firstOnly RecId, DimensionFieldId from ecoResTrackingDimensionGroupFldSetup
                #trackingDimGroupFldSetupWhereClause(ecoResTrackingDimensionGroupFldSetup) &&
                ecoResTrackingDimensionGroupFldSetup.TrackingDimensionGroup == _ecoResTrackingDimensionGroupRecIdNew;

            if (ecoResTrackingDimensionGroupFldSetup && ! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                ret = checkFailed(strFmt("@GLS222392", fieldId2pname(tableNum(InventDim), ecoResTrackingDimensionGroupFldSetup.DimensionFieldId), curext()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductRUDimForNotRuContextCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether tracking dimension group that uses Russian mandatory would be used in company
    /// without Russian context.
    /// </summary>
    /// <param name="_product">
    /// A product for checking.
    /// </param>
    /// <param name="_ecoResTrackingDimensionGroupRecIdNew">
    /// A tracking dimension group.
    /// </param>
    /// <returns>
    /// false if attempt to use tracking dimension group that uses Russian mandatory dimension in company
    /// without Russian context; otherwise, true.
    /// </returns>
    /// <remarks>
    /// This method runs on the server to reduce client load.
    /// </remarks>
    public static boolean checkProductRUDimForNotRuContextCompany(
        EcoResProductRecId                  _product,
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdNew)
    {
        EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup;
        EcoResTrackingDimensionGroupItem     ecoResTrackingDimensionGroupItemExisting;
        InventTable                          inventTable;
        boolean                              ret = true;
        Set                                  dimensionFieldSet = new Set(Types::Integer);

        if (_ecoResTrackingDimensionGroupRecIdNew)
        {
            while select DimensionFieldId from ecoResTrackingDimensionGroupFldSetup
                group by DimensionFieldId
                #TrackingDimGroupFldSetupWhereClause(ecoResTrackingDimensionGroupFldSetup)
                && ecoResTrackingDimensionGroupFldSetup.TrackingDimensionGroup == _ecoResTrackingDimensionGroupRecIdNew
            {
                dimensionFieldSet.add(ecoResTrackingDimensionGroupFldSetup.DimensionFieldId);
            }

            if (! dimensionFieldSet.empty())
            {
                while select crosscompany DataAreaId from inventTable
                    where inventTable.Product == _product
                    notexists join ecoResTrackingDimensionGroupItemExisting
                        where ecoResTrackingDimensionGroupItemExisting.ItemId         == inventTable.ItemId
                           && ecoResTrackingDimensionGroupItemExisting.ItemDataAreaId == inventTable.DataAreaId
                {
                    if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], inventTable.company()))
                    {
                        SetEnumerator se = dimensionFieldSet.getEnumerator();

                        while (se.moveNext())
                        {
                            ret = checkFailed(strFmt("@GLS222392", fieldId2pname(tableNum(InventDim), se.current()), inventTable.company()));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRUReleaseDimForNotRuContextCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether tracking dimension group that uses Russian mandatory would be used in company
    /// without Russian context.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <returns>
    /// false if attempt to use Tracking dimension group that uses Russian mandatory dimension in company
    /// without Russian context; otherwise, true.
    /// </returns>
    /// <remarks>
    /// This method runs on the server to reduce client load.
    /// </remarks>
    public static boolean checkRUReleaseDimForNotRuContextCompany(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResTrackingDimensionGroupProduct  trackingDimGroupProduct;
        EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup;
        EcoResReleaseSessionProduct          releaseSessionProduct;
        EcoResReleaseProductLegalEntity      releaseProductLegalEntity;
        boolean                              ret = true;

        #localmacro.ProductJoin
            exists join trackingDimGroupProduct
                where trackingDimGroupProduct.TrackingDimensionGroup == ecoResTrackingDimensionGroupFldSetup.TrackingDimensionGroup
            exists join releaseSessionProduct
                where releaseSessionProduct.Product        == trackingDimGroupProduct.Product
                   && releaseSessionProduct.ReleaseSession == _releaseSessionRecId
        #endmacro

        select firstOnly RecId from ecoResTrackingDimensionGroupFldSetup
            #TrackingDimGroupFldSetupWhereClause(ecoResTrackingDimensionGroupFldSetup);

        if (! ecoResTrackingDimensionGroupFldSetup.RecId)
        {
            return true;
        }

        select firstOnly RecId from ecoResTrackingDimensionGroupFldSetup
            #TrackingDimGroupFldSetupWhereClause(ecoResTrackingDimensionGroupFldSetup)
            #ProductJoin;

        if (ecoResTrackingDimensionGroupFldSetup.RecId)
        {
            while select LegalEntity from releaseProductLegalEntity
                group by LegalEntity
                where releaseProductLegalEntity.SystemAdded == NoYes::No
                exists join releaseSessionProduct
                    where releaseSessionProduct.RecId          == releaseProductLegalEntity.ReleaseSessionProduct &&
                          releaseSessionProduct.ReleaseSession == _releaseSessionRecId
            {
                DataAreaId dataAreaId = CompanyInfo::findRecId(releaseProductLegalEntity.LegalEntity).DataArea;
                if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], dataAreaId))
                {
                    while select DimensionFieldId from ecoResTrackingDimensionGroupFldSetup
                        group by DimensionFieldId
                        #TrackingDimGroupFldSetupWhereClause(ecoResTrackingDimensionGroupFldSetup)
                        #ProductJoin
                    {
                        ret = checkFailed(strFmt("@GLS222392", fieldId2pname(tableNum(InventDim), ecoResTrackingDimensionGroupFldSetup.DimensionFieldId), dataAreaId));
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReleaseOwnerNotEnabledWithoutInventProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether tracking dimension group that contains active Owner dimension and inactive Invent profile dimension Russian mandatory would be used in company
    /// with Russian context.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <returns>
    /// false if there is an attempt to release product with Tracking dimension group that contains active Owner dimension and inactive Invent profile dimension 
    /// into companies with Russian context; otherwise, true.
    /// </returns>
    public static boolean checkReleaseOwnerNotEnabledWithoutInventProfile_RU(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResTrackingDimensionGroupFldSetup trackingDimGroupFldSetupOwner;
        EcoResTrackingDimensionGroupFldSetup trackingDimGroupFldSetupInventProfile;
        EcoResTrackingDimensionGroup         trackingDimGroup;
        boolean                              ret = true;

        #localmacro.OwnerNotInventProfile
            exists join trackingDimGroupFldSetupOwner
            where trackingDimGroupFldSetupOwner.TrackingDimensionGroup == %1
                && trackingDimGroupFldSetupOwner.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU)  
                && trackingDimGroupFldSetupOwner.IsActive
            notexists join trackingDimGroupFldSetupInventProfile
            where trackingDimGroupFldSetupInventProfile.TrackingDimensionGroup == %1
                && trackingDimGroupFldSetupInventProfile.DimensionFieldId == fieldNum(InventDim, InventProfileId_RU)
                && trackingDimGroupFldSetupInventProfile.IsActive
        #endmacro

        select firstonly trackingDimGroup
            #OwnerNotInventProfile(trackingDimGroup.RecId);

        if (!trackingDimGroup)
        {
            return ret;
        }

        CompanyInfo companyInfo;
        EcoResReleaseProductLegalEntity      releaseProductLegalEntity;
        EcoResReleaseSessionProduct          releaseSessionProduct;
        Set dataAreaSet = new Set(Types::String);
        
        while select companyInfo
            group by DataArea
            exists join releaseProductLegalEntity
            where releaseProductLegalEntity.LegalEntity == CompanyInfo.RecId
               && releaseProductLegalEntity.SystemAdded == NoYes::No
            exists join releaseSessionProduct
                where releaseSessionProduct.RecId          == releaseProductLegalEntity.ReleaseSessionProduct &&
                      releaseSessionProduct.ReleaseSession == _releaseSessionRecId
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], companyInfo.DataArea))
            {
                dataAreaSet.add(companyInfo.DataArea);
            }
        }

        if (dataAreaSet.elements())
        {
            EcoResTrackingDimensionGroupProduct  trackingDimGroupProduct;
            EcoResTrackingDimensionGroup         ownerTrackingDimGroup;
            Set                                  trackingDimGroupSet = new Set(Types::String);

            while select ownerTrackingDimGroup
                group by Name
                exists join trackingDimGroupProduct
                    where trackingDimGroupProduct.TrackingDimensionGroup == ownerTrackingDimGroup.RecId
                exists join releaseSessionProduct
                    where releaseSessionProduct.ReleaseSession == _releaseSessionRecId
                       && releaseSessionProduct.Product == trackingDimGroupProduct.Product
                #OwnerNotInventProfile(ownerTrackingDimGroup.RecId)
            {
                trackingDimGroupSet.add(ownerTrackingDimGroup.Name);
            }

            if (trackingDimGroupSet.elements())
            {
                error(strFmt("@Inventory_Localization:TrackingDimensionGroupsUsedForReleasingProductsCannotBeUsedInLegalEntities", trackingDimGroupSet.toString(), dataAreaSet.toString()));
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResTrackingDimGroupSetup construct()
    {
        return new EcoResTrackingDimGroupSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a list of fields from the <c>InventDim</c> table that contains all of the tracking
    ///    dimension fields.
    /// </summary>
    /// <returns>
    ///    A list that has field IDs.
    /// </returns>
    static public List dimFields()
    {
        return InventDim::dimTrackingDimFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrNewItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>EcoResTrackingDimGroupSetup</c>.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID from which to create the instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>EcoResTrackingDimGroupSetup</c> class.
    /// </returns>
    static public EcoResTrackingDimGroupSetup mcrNewItemId(ItemId  _itemId)
    {
        return EcoResTrackingDimGroupSetup::newDimensionGroup(InventTable::find(_itemId).trackingDimensionGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResTrackingDimGroupSetup</c> class that matches the specified
    ///    dimension group.
    /// </summary>
    /// <param name="_trackingDimensionGroup">
    ///    The tracking dimension group for which the instance is created.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResTrackingDimGroupSetup</c> class.
    /// </returns>
    static public EcoResTrackingDimGroupSetup newDimensionGroup(EcoResTrackingDimensionGroupRecId  _trackingDimensionGroup)
    {
        EcoResTrackingDimGroupSetup     ecoResTrackingDimGroupSetup = EcoResTrackingDimGroupSetup::construct();

        ecoResTrackingDimGroupSetup.parmTrackingDimensionGroup(_trackingDimensionGroup);
        return ecoResTrackingDimGroupSetup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>