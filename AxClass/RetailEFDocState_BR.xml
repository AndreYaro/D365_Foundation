<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEFDocState_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the state of an electronic retail fiscal document.
/// </summary>
internal class RetailEFDocState_BR
{
    private FiscalDocument_BR fiscalDocument;
    private FiscalEstablishment_BR fiscalEstablishment;

    #FiscalDocumentModels_BR

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the fiscal document with the tax authority.
    /// </summary>
    /// <remarks>
    /// The XML message will be sent immediately to the tax authority.
    /// </remarks>
    [Hookable(false)]
    public void cancel()
    {
        IEFDocMsgTransport transport = this.getEventTransport(fiscalEstablishment);
        RetailEFDocMsgBase_BR message = this.getMessage(EFDocMessageType_BR::Cancel);
        message.send(EFiscalDocument_BR::construct(fiscalDocument), transport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelBySubstitution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels by substitution the fiscal document with the tax authority.
    /// </summary>
    /// <remarks>
    /// The XML message will be sent immediately to the tax authority.
    /// </remarks>
    [Hookable(false)]
    public void cancelBySubstitution()
    {
        IEFDocMsgTransport transport = this.getEventTransport(fiscalEstablishment);
        RetailEFDocMsgBase_BR message = this.getMessage(EFDocMessageType_BR::CancelBySubstitution);
        message.send(EFiscalDocument_BR::construct(fiscalDocument), transport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discards the fiscal document with the tax authority.
    /// </summary>
    /// <remarks>
    /// The XML message will be sent immediately to the tax authority.
    /// </remarks>
    [Hookable(false)]
    public void discard()
    {
        const EFDocMessageType_BR MessageType = EFDocMessageType_BR::Discard;
        IEFDocMsgTransport transport = this.getSendTransport(
            fiscalEstablishment,
            MessageType,
            EFDocContingMode_BR::Off,
            fiscalDocument.Model);
        RetailEFDocMsgBase_BR message = this.getMessage(MessageType);
        message.send(EFiscalDocument_BR::construct(fiscalDocument), transport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the event send transport class for a given fiscal establishment.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> to build the transport for.
    /// </param>
    /// <returns>
    /// An implementation of <c>IEFDocMsgTransport</c>.
    /// </returns>
    [Hookable(false)]
    protected IEFDocMsgTransport getEventTransport(FiscalEstablishment_BR _fiscalEstablishment)
    {
        return EFDocFactory_BR::construct().createEventTransport(_fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new message for the message type supplied.
    /// </summary>
    /// <param name="_messageType">
    /// The type of the message to create an object for.
    /// </param>
    /// <returns>
    /// An instance of the <c>RetailEFDocMsgBase_BR</c> for the type of message supplied.
    /// </returns>
    [Hookable(false)]
    protected RetailEFDocMsgBase_BR getMessage(EFDocMessageType_BR _messageType)
    {
        return RetailEFDocMsgBase_BR::createFromMessageType(_messageType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the send transport class for a given fiscal establishment and message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// <c>FiscalEstablishment_BR</c> to build the transport for.
    /// </param>
    /// <param name="_messageType">
    /// <c>EFDocMessageType_BR</c> to build the transport for.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode for which to create the transport.
    /// </param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model to create the transport
    /// </param>
    /// <returns>
    /// An implementation of <c>IEFDocMsgTransport</c>.
    /// </returns>
    [Hookable(false)]
    protected IEFDocMsgTransport getSendTransport(
        FiscalEstablishment_BR _fiscalEstablishment,
        EFDocMessageType_BR _messageType,
        EFDocContingMode_BR _contingencyMode,
        FiscalDocumentModel_BR _fiscalDocumentModel)
    {
        if (_fiscalDocumentModel == #FiscalDocModel_65)
        {
            _contingencyMode = EFDocContingMode_BR::ConsumerEFDocOffline;
        }

        return EFDocFactory_BR::construct().createSendTransport(
            _fiscalEstablishment,
            _messageType,
            _contingencyMode,
            _fiscalDocumentModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>RetailEFDocState_BR</c> class.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The fiscal document that will be handled.
    /// </param>
    /// <returns>
    /// An instance of the <c>RetailEFDocState_BR</c> class.
    /// </returns>
    [Hookable(false)]
    public static RetailEFDocState_BR construct(FiscalDocument_BR _fiscalDocument)
    {
        RetailEFDocState_BR efDocState = new RetailEFDocState_BR();
        efDocState.fiscalDocument = _fiscalDocument;
        efDocState.fiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment);

        return efDocState;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>