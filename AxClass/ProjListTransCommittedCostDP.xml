<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListTransCommittedCostDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjListTransCommittedCostDP</c> class provides the methods to fetch the data, which is used
/// by the <c> ProjListTransCommittedCost</c> report.
/// </summary>
/// <remarks>
/// Contains the declaration of the global variables that are used in this class.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProjListTransCommittedCost)),
    SRSReportParameterAttribute(classStr(ProjListTransCommittedCostContract))
]

public class ProjListTransCommittedCostDP extends SRSReportDataProviderPreProcessTempDB
{
    Name                            name1, name2, name3;
    ProjCostAmount                  printCostAmount;
    ProjTransLayoutSubscript        layoutCalled;
    ProjListStateType               projListStateType;
    ProjCategoryEmpl                level1, level2, level3, oldLevel1;
    ProjTransIdBase                 transId;
    InventTransIdBase               inventTransId;
    TransDate                       fromDate, toDate;
    boolean                         timeAndMaterial, fixedPrice, investment, internalAndCost, timeAndMaterialBillingMethod, fixedPriceBillingMethod;
    boolean                         purchaseRequisition, purchaseOrder, itemRequirement, production,vendorInvoice,
                                    expenseManagement, travelRequisition, hourJournal;
    boolean                         salesOrder, itemJournal, specifyTransactions;
    ProjCommittedCostStatus         showTransactions;
    ProjTransLayoutCommittedCost    paramLevel1, paramLevel2, paramLevel3;
    ProjShowAmount                  showAmount ;
    CostControlTransCommittedCost   costControlTransCommittedCost;
    ProjListTransCommittedCostTmp   projListTransCommittedCostTmp;
    TmpProjTransList                tmpProjTransList, tmpProjTransListDetail;
    ProjParameters                  projParameters;
    Ledger                          ledger;
    int                             amountDecimals;

    #define.Blank                   ("")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>committedCostOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>CommittedCostOrig</c> values that are based on selected UI parameters.
    /// </summary>
    /// <returns>
    /// The <c>CommittedCostOrig</c> field of <c>TmpProjTransList</c> table.
    /// </returns>
    private CommittedCostOrig committedCostOrigin()
    {
        if (specifyTransactions)
        {
            return tmpProjTransList.CommittedCostOrig;
        }
        else if (paramLevel3)
        {
            select firstonly CommittedCostOrig from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1 &&
                      tmpProjTransListDetail.Level2   == level2 &&
                      tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select firstonly CommittedCostOrig from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1 &&
                      tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select firstonly CommittedCostOrig from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1;
        }
        return tmpProjTransListDetail.CommittedCostOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>CostAmount</c> values that are based on selected UI parameters.
    /// </summary>
    /// <returns>
    /// The <c>CostAmount</c> field of <c>TmpProjTransList</c>  table.
    /// </returns>
    private CostAmount costAmount()
    {
        if (specifyTransactions)
        {
            return tmpProjTransList.CostAmount;
        }
        else if (paramLevel3)
        {
            select sum(CostAmount) from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1 &&
                      tmpProjTransListDetail.Level2   == level2 &&
                      tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select sum(CostAmount) from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1 &&
                      tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select sum(CostAmount) from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1;
        }
    
        return tmpProjTransListDetail.CostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListTransCommittedCostTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>ProjListTransCommittedCostTmp</c> table and returns data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListTransCommittedCostTmp')]
    public ProjListTransCommittedCostTmp getProjListTransCommittedCostTmp()
    {
        select projListTransCommittedCostTmp;
        return projListTransCommittedCostTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProjTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data and inserts it into the <c> TmpProjTransList </c> temporary table.
    /// </summary>
    /// <param name = "_costControlTransCommittedCost">
    /// Assigns values to the fields in <c> TmpProjTransList </c> temporary table.
    /// </param>
    public void insertTmpProjTransList(CostControlTransCommittedCost   _costControlTransCommittedCost)
    {
        tmpProjTransList.clear();
    
        tmpProjTransList.Level1                 =   this.printLevel(paramLevel1,_costControlTransCommittedCost);
        tmpProjTransList.Level2                 =   this.printLevel(paramLevel2,_costControlTransCommittedCost);
        tmpProjTransList.Level3                 =   this.printLevel(paramLevel3,_costControlTransCommittedCost);
        tmpProjTransList.TransId                =   _costControlTransCommittedCost.ProjTransId;
        tmpProjTransList.CostAmount             =   _costControlTransCommittedCost.AmountMst;
        tmpProjTransList.CommittedCostOrig      =   _costControlTransCommittedCost.CommittedCostOrig;
        tmpProjTransList.Qty                    =   _costControlTransCommittedCost.Qty;
        tmpProjTransList.Resource               =   _costControlTransCommittedCost.Resource;
        tmpProjTransList.ResourceCategory       =   _costControlTransCommittedCost.ResourceCategory;
    
        if (specifyTransactions)
        {
            tmpProjTransList.ProjType           =   _costControlTransCommittedCost.ProjType;
            tmpProjTransList.TransDate          =   _costControlTransCommittedCost.CommittedDate;
            tmpProjTransList.VoucherJournal     =   _costControlTransCommittedCost.Voucher;
            tmpProjTransList.RefId              =   _costControlTransCommittedCost.RefId;
            tmpProjTransList.VendAccount        =   _costControlTransCommittedCost.VendAccount;
            tmpProjTransList.CurrencyId         =   _costControlTransCommittedCost.CurrencyCode;
            tmpProjTransList.DefaultDimension   =   _costControlTransCommittedCost.DefaultDimension;
            tmpProjTransList.InventTransId      =   _costControlTransCommittedCost.InventTransId;
            tmpProjTransList.LineNum            =   _costControlTransCommittedCost.LineNum;
            tmpProjTransList.ProjId             =   _costControlTransCommittedCost.ProjId;
            tmpProjTransList.CategoryId         =   _costControlTransCommittedCost.CategoryId;
            tmpProjTransList.ResourceId         =   ResourceFacade::getID(_costControlTransCommittedCost.Resource);
            tmpProjTransList.ResourceCategoryId =   ResourceCategoryFacade::getID(_costControlTransCommittedCost.ResourceCategory);
        }
    
        tmpProjTransList.TransType              =   _costControlTransCommittedCost.ProjTransType;
    
        if (showAmount  ==  ProjShowAmount::Amount1000)
        {
            tmpProjTransList.CostAmount         =   tmpProjTransList.CostAmount / 1000;
        }
        else if (showAmount ==  ProjShowAmount::Amount1000000)
        {
            tmpProjTransList.CostAmount         =   tmpProjTransList.CostAmount / 1000000;
        }
    
        tmpProjTransList.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data and inserts it into <c> ProjListTransCommittedCostTmp </c> temporary table.
    /// </summary>
    private void insertTmpTable()
    {
        projListTransCommittedCostTmp.CommittedCostOriginLevel1    =    this.committedCostOrigin();
    
        if (paramLevel1 == ProjTransLayoutCommittedCost::EmployeeItem && (tmpProjTransList.TransType == ProjTransType::Hour ||
            tmpProjTransList.TransType == ProjTransType::Cost ))
        {
            projListTransCommittedCostTmp.Level1    = ResourceFacade::getID(str2int64(tmpProjTransList.Level1));
        }
        else if (paramLevel1 == ProjTransLayoutCommittedCost::ResourceCategory)
        {
            projListTransCommittedCostTmp.Level1    = ResourceCategoryFacade::getID(str2int64(tmpProjTransList.Level1));
        }
        else
        {
            projListTransCommittedCostTmp.Level1    =    tmpProjTransList.Level1;
        }
    
        projListTransCommittedCostTmp.Name1                        =    name1;
        projListTransCommittedCostTmp.CommittedCostOriginLevel2    =    this.committedCostOrigin();
    
        if (paramLevel2 == ProjTransLayoutCommittedCost::EmployeeItem && (tmpProjTransList.TransType == ProjTransType::Hour ||
            tmpProjTransList.TransType == ProjTransType::Cost ))
        {
            projListTransCommittedCostTmp.Level2    = ResourceFacade::getID(str2int64(tmpProjTransList.Level2));
        }
        else if (paramLevel2 == ProjTransLayoutCommittedCost::ResourceCategory)
        {
            projListTransCommittedCostTmp.Level2    = ResourceCategoryFacade::getID(str2int64(tmpProjTransList.Level2));
        }
        else
        {
            projListTransCommittedCostTmp.Level2    =    tmpProjTransList.Level2;
        }
    
        projListTransCommittedCostTmp.Name2                        =    name2;
        projListTransCommittedCostTmp.CommittedCostOriginLevel3    =    this.committedCostOrigin();
    
        if (paramLevel3 == ProjTransLayoutCommittedCost::EmployeeItem && (tmpProjTransList.TransType == ProjTransType::Hour ||
            tmpProjTransList.TransType == ProjTransType::Cost ))
        {
            projListTransCommittedCostTmp.Level3    = ResourceFacade::getID(str2int64(tmpProjTransList.Level3));
        }
        else if (paramLevel3 == ProjTransLayoutCommittedCost::ResourceCategory)
        {
            projListTransCommittedCostTmp.Level3    = ResourceCategoryFacade::getID(str2int64(tmpProjTransList.Level3));
        }
        else
        {
            projListTransCommittedCostTmp.Level3    =    tmpProjTransList.Level3;
        }
    
        projListTransCommittedCostTmp.Name3                        =    name3;
        projListTransCommittedCostTmp.TransDate                    =    tmpProjTransList.TransDate;
        projListTransCommittedCostTmp.ProjId                       =    tmpProjTransList.ProjId;
        projListTransCommittedCostTmp.CategoryId                   =    tmpProjTransList.CategoryId;
        projListTransCommittedCostTmp.TransType                    =    ((tmpProjTransList.Level1) || (tmpProjTransList.ProjId))?
                                                                            tmpProjTransList.TransType:ProjTransType::None;
        projListTransCommittedCostTmp.Resource                     =    tmpProjTransList.Resource;
        projListTransCommittedCostTmp.ResourceCategory             =    tmpProjTransList.ResourceCategory;
        if (tmpProjTransList.Resource)
        {
            projListTransCommittedCostTmp.ResourceName             =    ResourceFacade::getName(tmpProjTransList.Resource);
        }
        if (tmpProjTransList.ResourceCategory)
        {
            projListTransCommittedCostTmp.ResourceCategoryName     =    ResourceCategoryFacade::getName(tmpProjTransList.ResourceCategory);
        }
        projListTransCommittedCostTmp.CommittedCostOrigin          =    this.committedCostOrigin();
        projListTransCommittedCostTmp.RefId                        =    tmpProjTransList.RefId;
        projListTransCommittedCostTmp.Voucher                      =    tmpProjTransList.VoucherJournal;
        projListTransCommittedCostTmp.VendorAccount                =    tmpProjTransList.VendAccount;
        projListTransCommittedCostTmp.TransIdReport                =    tmpProjTransList.TransId;
        projListTransCommittedCostTmp.Qty                          =    this.printQty();
        projListTransCommittedCostTmp.CostAmount                   =    this.costAmount();
        projListTransCommittedCostTmp.PeriodLabel                  =    strFmt("@SYS106087", date2StrUsr(fromDate, DateFlags::None),
                                                                            date2StrUsr(fromDate == dateMax() ? dateNull() : toDate, DateFlags::FormatAll));
        projListTransCommittedCostTmp.Amount1000000Decimals        =    projParameters.Amount1000000Decimals;
        projListTransCommittedCostTmp.Amount1000Decimals           =    amountDecimals;
        projListTransCommittedCostTmp.HourQtyDecimals              =    projParameters.HourQtyDecimals;
        projListTransCommittedCostTmp.ValueAddedDecimals           =    projParameters.ValueAddedDecimals;
        projListTransCommittedCostTmp.GrossMarginDecimals          =    projParameters.GrossMarginDecimals;
    
        projListTransCommittedCostTmp.CurrencyCode                 =    ledger.AccountingCurrency;
    
        projListTransCommittedCostTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryActual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report query based on the UI parameters.
    /// </summary>
    /// <param name="_query">
    /// The query that will be used to run the report.
    /// </param>
    /// <returns>
    /// A modified query object that has hidden range values added to it.
    /// </returns>
    public Query modifyQueryActual(Query _query)
    {
        QueryBuildRange rangeHide;
        QueryBuildDataSource qbdsCostControlTransCommittedCost = _query.dataSourceTable(tableNum(CostControlTransCommittedCost));
        qbdsCostControlTransCommittedCost.orderMode(OrderMode::GroupBy);

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsProjTable = _query.dataSourceTable(tableNum(ProjTable));
            qbdsProjTable.enabled(true);
            QueryBuildDataSource qbdsPSAContractLineItems = _query.dataSourceTable(tableNum(PSAContractLineItems));
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeAndMaterialBillingMethod,
                fixedPriceBillingMethod);
        }
        else
        {
            rangeHide = qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjType));
            rangeHide.status(RangeStatus::Hidden);

            if (timeAndMaterial)
            {
                qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjType)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjType)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjType)).value(queryValue(ProjType::Investment));
            }

            if (internalAndCost)
            {
                qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjType)).value(queryValue(ProjType::Cost));
                qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjType)).value(queryValue(ProjType::Internal));
            }

            if (! (timeAndMaterial || fixedPrice || investment || internalAndCost))
            {
                QueryBuildRange rangeDummy = qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjType));
                rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        rangeHide = qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig));
        rangeHide.status(RangeStatus::Hidden);

        if (itemJournal)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::ItemJournal));
        }

        if (itemRequirement)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::ItemRequirement));
        }

        if (production)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::Production));
        }

        if (purchaseRequisition)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::PurchaseRequisition));
        }

        if (purchaseOrder)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::PurchaseOrder));
        }

        if (salesOrder)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::SalesOrder));
        }

        if (expenseManagement)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::ExpenseManagement));
        }

        if (travelRequisition)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::TravelRequisition));
        }

        if (vendorInvoice)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::VendorInvoice));
        }

        if (hourJournal)
        {
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedCostOrig)).value(queryValue(CommittedCostOrig::HourJournal));
        }

        if (toDate || fromDate)
        {
            rangeHide = qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedDate));
            rangeHide.status(RangeStatus::Hidden);
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,CommittedDate)).value(strFmt('%1..%2',queryValue(fromDate),queryValue(toDate)));
        }

        if (showTransactions == ProjCommittedCostStatus::Open)
        {
            rangeHide = qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,Open));
            rangeHide.status(RangeStatus::Hidden);
            qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,Open)).value(queryValue(NoYes::Yes));
        }

        rangeHide = qbdsCostControlTransCommittedCost.addRange(fieldNum(CostControlTransCommittedCost,ProjTransType));
        rangeHide.status(RangeStatus::Hidden);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values for <c>Level1</c>, <c>Level2</c> and <c>Level3</c> fields of the
    /// <c>TmpProjTransList</c> table.
    /// </summary>
    /// <param name="_level">
    /// A <c>ProjTransLayoutCommittedCost</c> object that contains the values for the level that is
    /// provided by the <c>ProjLevel1</c>, <c>ProjLevel2</c> and <c>ProjLevel3</c> parameters.
    /// </param>
    /// <param name="_costControlTransCommittedCost">
    /// A record from the <c>CostControlTransCommittedCost</c> table.
    /// </param>
    /// <returns>
    /// The value of the <c>ProjCategoryEmpl</c> type based on <c>_level</c> object that was provided.
    /// </returns>
    public ProjCategoryEmpl printLevel(ProjTransLayoutCommittedCost _level, CostControlTransCommittedCost _costControlTransCommittedCost)
    {
        switch (_level)
        {
            case ProjTransLayoutCommittedCost::Project:
                return _costControlTransCommittedCost.ProjId;

            case ProjTransLayoutCommittedCost::Category:
                return _costControlTransCommittedCost.CategoryId;

            case ProjTransLayoutCommittedCost::EmployeeItem:
                if (_costControlTransCommittedCost.ProjTransType == ProjTransType::Hour ||
                    _costControlTransCommittedCost.ProjTransType == ProjTransType::Cost )
                {
                    return int642str(_costControlTransCommittedCost.Resource);
                }
                else
                {
                    return _costControlTransCommittedCost.EmplItemId;
                }

            case ProjTransLayoutCommittedCost::ResourceCategory:
                return int642str(_costControlTransCommittedCost.ResourceCategory);

            case ProjTransLayoutCommittedCost::Vendor:
                return _costControlTransCommittedCost.VendAccount;

            case ProjTransLayoutCommittedCost::Order:
                return _costControlTransCommittedCost.RefId;
        }

        return #Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the quantity values for the report.
    /// </summary>
    /// <returns>
    /// The quantity value from the <c>TmpProjTransList</c> table.
    /// </returns>
    private Qty printQty()
    {
        if (specifyTransactions)
        {
            return tmpProjTransList.Qty;
        }
        else if (paramLevel3)
        {
            select sum(Qty) from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1 &&
                      tmpProjTransListDetail.Level2   == level2 &&
                      tmpProjTransListDetail.Level3   == level3;
        }
        else if (paramLevel2)
        {
            select sum(Qty) from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1 &&
                      tmpProjTransListDetail.Level2   == level2;
        }
        else
        {
            select sum(Qty) from tmpProjTransListDetail
                where tmpProjTransListDetail.Level1   == level1;
        }

        return tmpProjTransList.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Groups the data in <c>TmpProjTransList</c> table and requests for insertion of data into
    /// <c>ProjListTransCommittedCostTmp</c> table.
    /// </summary>
    public void printReport()
    {
        if (specifyTransactions)
        {
            while select tmpProjTransList
                order by Level1, Level2, Level3, TransDate, TransId, InventTransId
            {
                this.setLevel();
                this.setName();
                this.insertTmpTable();
            }
        }
        else
        {
            while select tmpProjTransList
                group by Level1, Level2, Level3
            {
                this.setLevel();
                this.setName();
                this.insertTmpTable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SQL
    /// ServerReporting Services at runtime. The method should compute data and populate the data tables
    /// that will be returned to SQL ServerReporting Services.
    /// </remarks>
    public void processReport()
    {
        QueryRun    queryRun;
        Query       reportQuery;

        ProjListTransCommittedCostContract contract = this.parmDataContract() as ProjListTransCommittedCostContract;

        timeAndMaterialBillingMethod = contract.parmProjTimeAndMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmProjFixedPriceBillingMethod();
        timeAndMaterial     = contract.parmProjTimeAndMaterial();
        fixedPrice          = contract.parmProjFixedPrice();
        investment          = contract.parmProjInvestment();
        internalAndCost     = contract.parmProjInternalAndCost();
        purchaseRequisition = contract.parmProjPurchaseRequisition();
        purchaseOrder       = contract.parmProjPurchaseOrder();
        itemRequirement     = contract.parmProjItemRequirement();
        production          = contract.parmProjProduction();
        salesOrder          = contract.parmProjSalesOrder();
        itemJournal         = contract.parmProjItemJournal();
        specifyTransactions = contract.parmProjSpecifyTransactions();
        fromDate            = contract.parmProjFromDate();
        toDate              = contract.parmProjToDate();
        paramLevel1         = contract.parmProjLevel1();
        paramLevel2         = contract.parmProjLevel2();
        paramLevel3         = contract.parmProjLevel3();
        showTransactions    = contract.parmProjShowTransactions();
        showAmount          = contract.parmProjShowAmt();
        vendorInvoice       = contract.parmVendorInvoice();
        expenseManagement   = contract.parmExpenseManagement();
        travelRequisition   = contract.parmTravelRequisition();
        hourJournal         = contract.parmHourJournal();

        projParameters      =       ProjParameters::find();

        reportQuery             =   this.modifyQueryActual(this.parmQuery());
        queryRun                =   new QueryRun(reportQuery);
    
        amountDecimals          =   this.setNoOfDecimals(showAmount);

        while (queryRun.next())
        {
            costControlTransCommittedCost   =   queryRun.get(tableNum(CostControlTransCommittedCost));
            this.insertTmpProjTransList(costControlTransCommittedCost);
        }

        select firstonly Name from  ledger
                where ledger.Name == curext();

        tmpProjTransListDetail.linkPhysicalTableInstance(tmpProjTransList);
        this.printReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the level values for data manipulation.
    /// </summary>
    public void setLevel()
    {
        level1          =   tmpProjTransList.Level1;
        level2          =   tmpProjTransList.Level2;
        level3          =   tmpProjTransList.Level3;
        transId         =   tmpProjTransList.TransId;
        inventTransId   =   tmpProjTransList.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the name that will be displayed for each level on the report.
    /// </summary>
    public void setName()
    {
        InventTable inventTable;
        switch (paramLevel1)
        {
            case ProjTransLayoutCommittedCost::None:
                name1   =   #Blank;
                break;

            case ProjTransLayoutCommittedCost::Project:
                name1   =   ProjTable::find(tmpProjTransList.Level1).Name;
                break;

            case ProjTransLayoutCommittedCost::Category:
                name1   =   ProjCategory::find(tmpProjTransList.Level1).Name;
                break;

            case ProjTransLayoutCommittedCost::EmployeeItem:
                if (tmpProjTransList.TransType == ProjTransType::Hour ||
                    tmpProjTransList.TransType == ProjTransType::Cost )
                {
                    name1   = ResourceFacade::getName(str2int64(tmpProjTransList.Level1));
                }
                else
                {
                    inventTable = InventTable::find(tmpProjTransList.Level1);
                    if (inventTable)
                    {
                        name1   = inventTable.itemName();
                    }
                }
                break;

            case ProjTransLayoutCommittedCost::ResourceCategory:
                name1   = ResourceCategoryFacade::getName(str2int64(tmpProjTransList.Level1));
                break;

            case ProjTransLayoutCommittedCost::Order:
                name1   =   #Blank;
                break;

            case ProjTransLayoutCommittedCost::Vendor:
                name1   =   VendTable::find(tmpProjTransList.Level1).name();
                break;
        }

        switch (paramLevel2)
        {
            case ProjTransLayoutCommittedCost::None:
                name2   =   #Blank;
                break;

            case ProjTransLayoutCommittedCost::Project:
                name2   =   ProjTable::find(tmpProjTransList.Level2).Name;
                break;

            case ProjTransLayoutCommittedCost::Category:
                name2   =   ProjCategory::find(tmpProjTransList.Level2).Name;
                break;

            case ProjTransLayoutCommittedCost::EmployeeItem:
                if (tmpProjTransList.TransType == ProjTransType::Hour ||
                    tmpProjTransList.TransType == ProjTransType::Cost)
                {
                    name2   = ResourceFacade::getName(str2int64(tmpProjTransList.Level2));
                }
                else
                {
                    inventTable = InventTable::find(tmpProjTransList.Level2);
                    if (inventTable)
                    {
                        name2   = inventTable.itemName();
                    }
                }
                break;

            case ProjTransLayoutCommittedCost::ResourceCategory:
                name2   = ResourceCategoryFacade::getName(str2int64(tmpProjTransList.Level2));
                break;

            case ProjTransLayoutCommittedCost::Order:
                name2   =   #Blank;
                break;

            case ProjTransLayoutCommittedCost::Vendor:
                name2   =   VendTable::find(tmpProjTransList.Level2).name();
                break;
        }

        switch (paramLevel3)
        {
            case ProjTransLayoutCommittedCost::None:
                name3   =   #Blank;
                break;

            case ProjTransLayoutCommittedCost::Project:
                name3   =   ProjTable::find(tmpProjTransList.Level3).Name;
                break;

            case ProjTransLayoutCommittedCost::Category:
                name3   =   ProjCategory::find(tmpProjTransList.Level3).Name;
                break;

            case ProjTransLayoutCommittedCost::EmployeeItem:
                if (tmpProjTransList.TransType == ProjTransType::Hour ||
                    tmpProjTransList.TransType == ProjTransType::Cost )
                {
                    name3   = ResourceFacade::getName(str2int64(tmpProjTransList.Level3));
                }
                else
                {
                    inventTable = InventTable::find(tmpProjTransList.Level3);
                    if (inventTable)
                    {
                        name3   = inventTable.itemName();
                    }
                }
                break;

            case ProjTransLayoutCommittedCost::ResourceCategory:
                name3   = ResourceCategoryFacade::getName(str2int64(tmpProjTransList.Level3));
                break;

            case ProjTransLayoutCommittedCost::Order:
                name3   =   #Blank;
                break;

            case ProjTransLayoutCommittedCost::Vendor:
                name3   =   VendTable::find(tmpProjTransList.Level3).name();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNoOfDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the number of decimals on the type, by modifing the ProjShowAmount enum value.
    /// </summary>
    /// <param name="_showAmount">
    ///     _showAmount holds the enum value for the type of the ProjShowAmount.
    /// </param>
    /// <returns>
    ///     Returns the demicals values for the types.
    /// </returns>
    int  setNoOfDecimals(ProjShowAmount _showAmount)
    {
        System.Globalization.NumberFormatInfo fi;

        switch (_showAmount)
        {
            case ProjShowAmount::WithDec:
                fi = new System.Globalization.NumberFormatInfo();
                amountDecimals = fi.get_CurrencyDecimalDigits();
                break;

            case ProjShowAmount::WithoutDec:
                amountDecimals = 0;
                break;

            case ProjShowAmount::Amount1000:
                amountDecimals = projParameters.Amount1000Decimals;
                break;

            case ProjShowAmount::Amount1000000:
                amountDecimals = projParameters.Amount1000000Decimals;
                break;
        }

        return amountDecimals;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>