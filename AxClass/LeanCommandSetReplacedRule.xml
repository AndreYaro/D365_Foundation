<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandSetReplacedRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCommandSetReplacedRule</c> class encapsulates the business logic around creating a
///    replenishment rule.
/// </summary>
class LeanCommandSetReplacedRule extends LeanCommandBase
{
    LeanRuleDataUpdate  leanRuleDataUpdate;
    boolean             cleanUpReplacedCoverage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the maintenance of a replacement chain of kanban rules.
    /// </summary>
    /// <returns>
    ///    true if the maintenance was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed in a transaction scope provided by the <c>LeanRulesEngine</c> class.
    /// </remarks>
    protected boolean execute()
    {
        LegalEntity             legalEntity                   = CompanyInfo::current();
        KanbanRule              kanbanRule                    = leanRuleDataUpdate.parmKanbanRule();
        KanbanRule              currentReplacedRule           = kanbanRule.replacedRule();
        KanbanRule              newReplacedRule               = leanRuleDataUpdate.parmReplacedKanbanRule();
        LeanCoverageKanbanRule  currentLeanCoverageKanbanRule = leanRuleDataUpdate.parmLeanCoverageKanbanRule();
        LeanCoverage            existingLeanCoverage          = leanRuleDataUpdate.parmLeanCoverage();
        boolean                 result                        = true;
        LeanCoverage            newLeanCoverage;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;

        if (   currentReplacedRule
            && currentReplacedRule.LegalEntity != legalEntity)
        {
            result = checkFailed(strfmt("@SYS332730",currentReplacedRule.RuleId));
        }

        if (   newReplacedRule
            && newReplacedRule.LegalEntity != legalEntity)
        {
            result = checkFailed(strfmt("@SYS332730",newReplacedRule.RuleId));
        }

        if (result)
        {
            // if nothing changed we have nothing else to do
            if (currentReplacedRule.RecId == newReplacedRule.RecId)
            {
                return true;
            }

            ttsbegin;

            // step 1: determine the LeanCoverage to be used for the rest of the chain
            //         and create it in the database
            if (newReplacedRule.RecId == 0)
            {
                // in case we're unchaining the current rule, we should duplicate the
                // existing LeanCoverage and use that for the rest of the rules
                newLeanCoverage.data(leanRuleDataUpdate.parmLeanCoverage());
                newLeanCoverage.RecId = 0;
                newLeanCoverage.doInsert();
                newLeanCoverage.reread();
            }
            else
            {
                // in case we're chaining to an existing rule, we should be reusing
                // the same LeanCoverage
                newLeanCoverage = newReplacedRule.ruleData().parmLeanCoverage();
            }

            // step 2: update the existing rules (and the chain it belongs to) so
            //         that they all use the new LeanCoverage

            // we are updating all rules that share the same old LeanCoverage
            // and which are residing after (and including) the current rule in time.
            // so the existing replaced rule/chain will always preserve their existing
            // LeanCoverage records
            update_recordset leanCoverageKanbanRule
            setting
                Coverage = newLeanCoverage.RecId
            where leanCoverageKanbanRule.Coverage == currentLeanCoverageKanbanRule.Coverage
               && leanCoverageKanbanRule.ValidFrom >= currentLeanCoverageKanbanRule.ValidFrom;

            // if we have to cleanup unused coverage and if we don't have any more usages of it,
            // then do the cleanup
            if (   cleanUpReplacedCoverage
                && !LeanCoverageKanbanRule::findCoverage(existingLeanCoverage.RecId).RecId)
            {
                if (!existingLeanCoverage.selectForUpdate())
                {
                    existingLeanCoverage = LeanCoverage::find(existingLeanCoverage.RecId, true);
                }

                existingLeanCoverage.doDelete();
            }

            ttscommit;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCleanUpReplacedCoverage</Name>
				<Source><![CDATA[
        public boolean parmCleanUpReplacedCoverage(boolean _cleanUpReplacedCoverage = cleanUpReplacedCoverage)
    {
        cleanUpReplacedCoverage = _cleanUpReplacedCoverage;

        return cleanUpReplacedCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleDataUpdate</Name>
				<Source><![CDATA[
        public LeanRuleDataUpdate parmLeanRuleDataUpdate(LeanRuleDataUpdate _leanRuleDataUpdate = leanRuleDataUpdate)
    {
        leanRuleDataUpdate = _leanRuleDataUpdate;

        return leanRuleDataUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static LeanCommandSetReplacedRule construct()
    {
        return new LeanCommandSetReplacedRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>LeanCommandSetReplacedRule</c> class.
    /// </summary>
    /// <param name="_leanRuleDataUpdate">
    ///    An object that contains the kanban rule related buffers of the original rule.
    /// </param>
    /// <param name="_cleanUpReplacedCoverage">
    ///    A Boolean value that specifies whether the <c>LeanCoverage</c> record should be cleaned up after
    ///    the potential merging of replacement chains.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanCommandSetReplacedRule</c> class.
    /// </returns>
    public static LeanCommandSetReplacedRule newStandard(LeanRuleDataUpdate _leanRuleDataUpdate, boolean _cleanUpReplacedCoverage = false)
    {
        LeanCommandSetReplacedRule leanCommandSetReplacedRule = LeanCommandSetReplacedRule::construct();

        leanCommandSetReplacedRule.parmLeanRuleDataUpdate(_leanRuleDataUpdate);
        leanCommandSetReplacedRule.parmCleanUpReplacedCoverage(_cleanUpReplacedCoverage);

        return leanCommandSetReplacedRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>